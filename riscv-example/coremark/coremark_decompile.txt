
riscv-coremark-sim:     file format elf32-littleriscv


Disassembly of section .text:

00000000 <_entry>:

.section      .text.entry
.globl _entry

_entry:
lui     sp,%hi(__stack_top)                                             
       0:	0000a137          	lui	sp,0xa
addi    sp,sp,%lo(__stack_top)
       4:	09010113          	addi	sp,sp,144 # a090 <__stack_top>
jal   zero, _start
       8:	0080006f          	j	10 <_start>
       c:	0000                	unimp
	...

00000010 <_start>:
      10:	00007197          	auipc	gp,0x7
      14:	38018193          	addi	gp,gp,896 # 7390 <__global_pointer$>
      18:	c7018513          	addi	a0,gp,-912 # 7000 <stop_time_val>
      1c:	d0018613          	addi	a2,gp,-768 # 7090 <__bss_end>
      20:	40a60633          	sub	a2,a2,a0
      24:	00000593          	li	a1,0
      28:	518050ef          	jal	ra,5540 <memset>
      2c:	00006517          	auipc	a0,0x6
      30:	89050513          	addi	a0,a0,-1904 # 58bc <atexit>
      34:	00050863          	beqz	a0,44 <_start+0x34>
      38:	00006517          	auipc	a0,0x6
      3c:	89850513          	addi	a0,a0,-1896 # 58d0 <__libc_fini_array>
      40:	07d050ef          	jal	ra,58bc <atexit>
      44:	340050ef          	jal	ra,5384 <__libc_init_array>
      48:	00012503          	lw	a0,0(sp)
      4c:	00410593          	addi	a1,sp,4
      50:	00000613          	li	a2,0
      54:	195000ef          	jal	ra,9e8 <main>
      58:	2fc0506f          	j	5354 <exit>

0000005c <__do_global_dtors_aux>:
      5c:	ff010113          	addi	sp,sp,-16
      60:	00812423          	sw	s0,8(sp)
      64:	c9018413          	addi	s0,gp,-880 # 7020 <completed.1>
      68:	00044783          	lbu	a5,0(s0)
      6c:	00112623          	sw	ra,12(sp)
      70:	02079263          	bnez	a5,94 <__do_global_dtors_aux+0x38>
      74:	00000793          	li	a5,0
      78:	00078a63          	beqz	a5,8c <__do_global_dtors_aux+0x30>
      7c:	00007517          	auipc	a0,0x7
      80:	b0050513          	addi	a0,a0,-1280 # 6b7c <__EH_FRAME_BEGIN__>
      84:	00000097          	auipc	ra,0x0
      88:	000000e7          	jalr	zero # 0 <_entry>
      8c:	00100793          	li	a5,1
      90:	00f40023          	sb	a5,0(s0)
      94:	00c12083          	lw	ra,12(sp)
      98:	00812403          	lw	s0,8(sp)
      9c:	01010113          	addi	sp,sp,16
      a0:	00008067          	ret

000000a4 <frame_dummy>:
      a4:	00000793          	li	a5,0
      a8:	00078c63          	beqz	a5,c0 <frame_dummy+0x1c>
      ac:	c9418593          	addi	a1,gp,-876 # 7024 <object.0>
      b0:	00007517          	auipc	a0,0x7
      b4:	acc50513          	addi	a0,a0,-1332 # 6b7c <__EH_FRAME_BEGIN__>
      b8:	00000317          	auipc	t1,0x0
      bc:	00000067          	jr	zero # 0 <_entry>
      c0:	00008067          	ret

000000c4 <cmp_idx>:
        Can be used by mergesort.
*/
ee_s32
cmp_idx(list_data *a, list_data *b, core_results *res)
{
    if (res == NULL)
      c4:	00060a63          	beqz	a2,d8 <cmp_idx+0x14>
    {
        a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16 >> 8));
        b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16 >> 8));
    }
    return a->idx - b->idx;
      c8:	00251503          	lh	a0,2(a0)
      cc:	00259783          	lh	a5,2(a1)
}
      d0:	40f50533          	sub	a0,a0,a5
      d4:	00008067          	ret
        a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16 >> 8));
      d8:	00051783          	lh	a5,0(a0)
      dc:	01079713          	slli	a4,a5,0x10
      e0:	01075713          	srli	a4,a4,0x10
      e4:	00875713          	srli	a4,a4,0x8
      e8:	f007f793          	andi	a5,a5,-256
      ec:	00e7e7b3          	or	a5,a5,a4
      f0:	00f51023          	sh	a5,0(a0)
        b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16 >> 8));
      f4:	00059783          	lh	a5,0(a1)
    return a->idx - b->idx;
      f8:	00251503          	lh	a0,2(a0)
        b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16 >> 8));
      fc:	01079713          	slli	a4,a5,0x10
     100:	01075713          	srli	a4,a4,0x10
     104:	00875713          	srli	a4,a4,0x8
     108:	f007f793          	andi	a5,a5,-256
     10c:	00e7e7b3          	or	a5,a5,a4
     110:	00f59023          	sh	a5,0(a1)
    return a->idx - b->idx;
     114:	00259783          	lh	a5,2(a1)
}
     118:	40f50533          	sub	a0,a0,a5
     11c:	00008067          	ret

00000120 <calc_func>:
{
     120:	fe010113          	addi	sp,sp,-32
     124:	00812c23          	sw	s0,24(sp)
    ee_s16 data = *pdata;
     128:	00051403          	lh	s0,0(a0)
{
     12c:	00112e23          	sw	ra,28(sp)
     130:	00912a23          	sw	s1,20(sp)
          & 1;  /* bit 7 indicates if the function result has been cached */
     134:	40745793          	srai	a5,s0,0x7
{
     138:	01212823          	sw	s2,16(sp)
     13c:	01312623          	sw	s3,12(sp)
    if (optype) /* if cached, use cache */
     140:	0017f793          	andi	a5,a5,1
     144:	02078263          	beqz	a5,168 <calc_func+0x48>
}
     148:	01c12083          	lw	ra,28(sp)
        return (data & 0x007f);
     14c:	07f47513          	andi	a0,s0,127
}
     150:	01812403          	lw	s0,24(sp)
     154:	01412483          	lw	s1,20(sp)
     158:	01012903          	lw	s2,16(sp)
     15c:	00c12983          	lw	s3,12(sp)
     160:	02010113          	addi	sp,sp,32
     164:	00008067          	ret
        ee_s16 flag = data & 0x7; /* bits 0-2 is type of function to perform */
     168:	00058493          	mv	s1,a1
               & 0xf);       /* bits 3-6 is specific data for the operation */
     16c:	40345593          	srai	a1,s0,0x3
        ee_s16 dtype
     170:	00f5f593          	andi	a1,a1,15
        dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
     174:	00459713          	slli	a4,a1,0x4
        ee_s16 flag = data & 0x7; /* bits 0-2 is type of function to perform */
     178:	00747693          	andi	a3,s0,7
                retval = core_bench_state(res->size,
     17c:	0384d783          	lhu	a5,56(s1)
     180:	00050993          	mv	s3,a0
        dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
     184:	00b765b3          	or	a1,a4,a1
        switch (flag)
     188:	04068c63          	beqz	a3,1e0 <calc_func+0xc0>
     18c:	00100713          	li	a4,1
     190:	08e68a63          	beq	a3,a4,224 <calc_func+0x104>
        res->crc = crcu16(retval, res->crc);
     194:	01041513          	slli	a0,s0,0x10
     198:	01055513          	srli	a0,a0,0x10
     19c:	00040913          	mv	s2,s0
     1a0:	00078593          	mv	a1,a5
     1a4:	538020ef          	jal	ra,26dc <crcu16>
     1a8:	00050793          	mv	a5,a0
        *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
     1ac:	f0047413          	andi	s0,s0,-256
        retval &= 0x007f;
     1b0:	07f97513          	andi	a0,s2,127
        *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
     1b4:	00856433          	or	s0,a0,s0
        res->crc = crcu16(retval, res->crc);
     1b8:	02f49c23          	sh	a5,56(s1)
        *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
     1bc:	08046413          	ori	s0,s0,128
     1c0:	00899023          	sh	s0,0(s3)
}
     1c4:	01c12083          	lw	ra,28(sp)
     1c8:	01812403          	lw	s0,24(sp)
     1cc:	01412483          	lw	s1,20(sp)
     1d0:	01012903          	lw	s2,16(sp)
     1d4:	00c12983          	lw	s3,12(sp)
     1d8:	02010113          	addi	sp,sp,32
     1dc:	00008067          	ret
                retval = core_bench_state(res->size,
     1e0:	02200693          	li	a3,34
     1e4:	00058713          	mv	a4,a1
     1e8:	00d5d463          	bge	a1,a3,1f0 <calc_func+0xd0>
     1ec:	02200713          	li	a4,34
     1f0:	00249683          	lh	a3,2(s1)
     1f4:	00049603          	lh	a2,0(s1)
     1f8:	0144a583          	lw	a1,20(s1)
     1fc:	0184a503          	lw	a0,24(s1)
     200:	0ff77713          	zext.b	a4,a4
     204:	268020ef          	jal	ra,246c <core_bench_state>
                if (res->crcstate == 0)
     208:	03e4d783          	lhu	a5,62(s1)
                retval = core_bench_state(res->size,
     20c:	01051913          	slli	s2,a0,0x10
     210:	41095913          	srai	s2,s2,0x10
                if (res->crcstate == 0)
     214:	02079c63          	bnez	a5,24c <calc_func+0x12c>
        res->crc = crcu16(retval, res->crc);
     218:	0384d783          	lhu	a5,56(s1)
                    res->crcstate = retval;
     21c:	02a49f23          	sh	a0,62(s1)
     220:	f81ff06f          	j	1a0 <calc_func+0x80>
                retval = core_bench_matrix(&(res->mat), dtype, res->crc);
     224:	00078613          	mv	a2,a5
     228:	02848513          	addi	a0,s1,40
     22c:	4cd010ef          	jal	ra,1ef8 <core_bench_matrix>
                if (res->crcmatrix == 0)
     230:	03c4d783          	lhu	a5,60(s1)
                retval = core_bench_matrix(&(res->mat), dtype, res->crc);
     234:	01051913          	slli	s2,a0,0x10
     238:	41095913          	srai	s2,s2,0x10
                if (res->crcmatrix == 0)
     23c:	00079863          	bnez	a5,24c <calc_func+0x12c>
        res->crc = crcu16(retval, res->crc);
     240:	0384d783          	lhu	a5,56(s1)
                    res->crcmatrix = retval;
     244:	02a49e23          	sh	a0,60(s1)
     248:	f59ff06f          	j	1a0 <calc_func+0x80>
        res->crc = crcu16(retval, res->crc);
     24c:	0384d783          	lhu	a5,56(s1)
     250:	f51ff06f          	j	1a0 <calc_func+0x80>

00000254 <cmp_complex>:
{
     254:	ff010113          	addi	sp,sp,-16
     258:	00912223          	sw	s1,4(sp)
     25c:	00058493          	mv	s1,a1
    ee_s16 val1 = calc_func(&(a->data16), res);
     260:	00060593          	mv	a1,a2
{
     264:	00112623          	sw	ra,12(sp)
     268:	00812423          	sw	s0,8(sp)
     26c:	00060413          	mv	s0,a2
    ee_s16 val1 = calc_func(&(a->data16), res);
     270:	eb1ff0ef          	jal	ra,120 <calc_func>
     274:	00050793          	mv	a5,a0
    ee_s16 val2 = calc_func(&(b->data16), res);
     278:	00040593          	mv	a1,s0
     27c:	00048513          	mv	a0,s1
    ee_s16 val1 = calc_func(&(a->data16), res);
     280:	00078413          	mv	s0,a5
    ee_s16 val2 = calc_func(&(b->data16), res);
     284:	e9dff0ef          	jal	ra,120 <calc_func>
}
     288:	00c12083          	lw	ra,12(sp)
     28c:	40a40533          	sub	a0,s0,a0
     290:	00812403          	lw	s0,8(sp)
     294:	00412483          	lw	s1,4(sp)
     298:	01010113          	addi	sp,sp,16
     29c:	00008067          	ret

000002a0 <copy_info>:

void
copy_info(list_data *to, list_data *from)
{
    to->data16 = from->data16;
     2a0:	00059703          	lh	a4,0(a1)
    to->idx    = from->idx;
     2a4:	00259783          	lh	a5,2(a1)
    to->data16 = from->data16;
     2a8:	00e51023          	sh	a4,0(a0)
    to->idx    = from->idx;
     2ac:	00f51123          	sh	a5,2(a0)
}
     2b0:	00008067          	ret

000002b4 <core_list_insert_new>:
                     list_head * memblock_end,
                     list_data * datablock_end)
{
    list_head *newitem;

    if ((*memblock + 1) >= memblock_end)
     2b4:	00062803          	lw	a6,0(a2)
     2b8:	00880893          	addi	a7,a6,8
     2bc:	04e8f663          	bgeu	a7,a4,308 <core_list_insert_new+0x54>
        return NULL;
    if ((*datablock + 1) >= datablock_end)
     2c0:	0006a703          	lw	a4,0(a3)
     2c4:	00470313          	addi	t1,a4,4
     2c8:	04f37063          	bgeu	t1,a5,308 <core_list_insert_new+0x54>
        return NULL;

    newitem = *memblock;
    (*memblock)++;
     2cc:	01162023          	sw	a7,0(a2)
    newitem->next      = insert_point->next;
     2d0:	00052783          	lw	a5,0(a0)
    to->data16 = from->data16;
     2d4:	00059883          	lh	a7,0(a1)
    to->idx    = from->idx;
     2d8:	00259603          	lh	a2,2(a1)
    newitem->next      = insert_point->next;
     2dc:	00f82023          	sw	a5,0(a6)
    insert_point->next = newitem;
     2e0:	01052023          	sw	a6,0(a0)

    newitem->info = *datablock;
     2e4:	00e82223          	sw	a4,4(a6)
    (*datablock)++;
     2e8:	0006a783          	lw	a5,0(a3)
    copy_info(newitem->info, info);

    return newitem;
}
     2ec:	00080513          	mv	a0,a6
    (*datablock)++;
     2f0:	00478793          	addi	a5,a5,4
     2f4:	00f6a023          	sw	a5,0(a3)
    copy_info(newitem->info, info);
     2f8:	00482783          	lw	a5,4(a6)
    to->data16 = from->data16;
     2fc:	01179023          	sh	a7,0(a5)
    to->idx    = from->idx;
     300:	00c79123          	sh	a2,2(a5)
}
     304:	00008067          	ret
        return NULL;
     308:	00000813          	li	a6,0
}
     30c:	00080513          	mv	a0,a6
     310:	00008067          	ret

00000314 <core_list_remove>:
        Returns:
        Removed item.
*/
list_head *
core_list_remove(list_head *item)
{
     314:	00050793          	mv	a5,a0
    list_data *tmp;
    list_head *ret = item->next;
     318:	00052503          	lw	a0,0(a0)
    /* swap data pointers */
    tmp        = item->info;
     31c:	0047a683          	lw	a3,4(a5)
    item->info = ret->info;
     320:	00452603          	lw	a2,4(a0)
    ret->info  = tmp;
    /* and eliminate item */
    item->next = item->next->next;
     324:	00052703          	lw	a4,0(a0)
    item->info = ret->info;
     328:	00c7a223          	sw	a2,4(a5)
    ret->info  = tmp;
     32c:	00d52223          	sw	a3,4(a0)
    item->next = item->next->next;
     330:	00e7a023          	sw	a4,0(a5)
    ret->next  = NULL;
     334:	00052023          	sw	zero,0(a0)
    return ret;
}
     338:	00008067          	ret

0000033c <core_list_undo_remove>:
core_list_undo_remove(list_head *item_removed, list_head *item_modified)
{
    list_data *tmp;
    /* swap data pointers */
    tmp                 = item_removed->info;
    item_removed->info  = item_modified->info;
     33c:	0045a603          	lw	a2,4(a1)
    tmp                 = item_removed->info;
     340:	00452683          	lw	a3,4(a0)
    item_modified->info = tmp;
    /* and insert item */
    item_removed->next  = item_modified->next;
     344:	0005a703          	lw	a4,0(a1)
    item_removed->info  = item_modified->info;
     348:	00c52223          	sw	a2,4(a0)
    item_modified->info = tmp;
     34c:	00d5a223          	sw	a3,4(a1)
    item_removed->next  = item_modified->next;
     350:	00e52023          	sw	a4,0(a0)
    item_modified->next = item_removed;
     354:	00a5a023          	sw	a0,0(a1)
    return item_removed;
}
     358:	00008067          	ret

0000035c <core_list_find>:
        Found item, or NULL if not found.
*/
list_head *
core_list_find(list_head *list, list_data *info)
{
    if (info->idx >= 0)
     35c:	00259703          	lh	a4,2(a1)
     360:	02074263          	bltz	a4,384 <core_list_find+0x28>
    {
        while (list && (list->info->idx != info->idx))
     364:	00051863          	bnez	a0,374 <core_list_find+0x18>
     368:	0480006f          	j	3b0 <core_list_find+0x54>
            list = list->next;
     36c:	00052503          	lw	a0,0(a0)
        while (list && (list->info->idx != info->idx))
     370:	02050c63          	beqz	a0,3a8 <core_list_find+0x4c>
     374:	00452783          	lw	a5,4(a0)
     378:	00279783          	lh	a5,2(a5)
     37c:	fee798e3          	bne	a5,a4,36c <core_list_find+0x10>
     380:	00008067          	ret
        return list;
    }
    else
    {
        while (list && ((list->info->data16 & 0xff) != info->data16))
     384:	02050263          	beqz	a0,3a8 <core_list_find+0x4c>
     388:	00059703          	lh	a4,0(a1)
     38c:	00c0006f          	j	398 <core_list_find+0x3c>
            list = list->next;
     390:	00052503          	lw	a0,0(a0)
        while (list && ((list->info->data16 & 0xff) != info->data16))
     394:	00050c63          	beqz	a0,3ac <core_list_find+0x50>
     398:	00452783          	lw	a5,4(a0)
     39c:	0007c783          	lbu	a5,0(a5)
     3a0:	fee798e3          	bne	a5,a4,390 <core_list_find+0x34>
     3a4:	00008067          	ret
     3a8:	00000513          	li	a0,0
        return list;
    }
}
     3ac:	00008067          	ret
     3b0:	00008067          	ret

000003b4 <core_list_reverse>:

list_head *
core_list_reverse(list_head *list)
{
    list_head *next = NULL, *tmp;
    while (list)
     3b4:	02050063          	beqz	a0,3d4 <core_list_reverse+0x20>
    list_head *next = NULL, *tmp;
     3b8:	00000713          	li	a4,0
     3bc:	0080006f          	j	3c4 <core_list_reverse+0x10>
     3c0:	00078513          	mv	a0,a5
    {
        tmp        = list->next;
     3c4:	00052783          	lw	a5,0(a0)
        list->next = next;
     3c8:	00e52023          	sw	a4,0(a0)
    while (list)
     3cc:	00050713          	mv	a4,a0
     3d0:	fe0798e3          	bnez	a5,3c0 <core_list_reverse+0xc>
        next       = list;
        list       = tmp;
    }
    return next;
}
     3d4:	00008067          	ret

000003d8 <core_list_mergesort>:
        but the algorithm could theoretically modify where the list starts.

 */
list_head *
core_list_mergesort(list_head *list, list_cmp cmp, core_results *res)
{
     3d8:	fd010113          	addi	sp,sp,-48
     3dc:	02912223          	sw	s1,36(sp)
     3e0:	01512a23          	sw	s5,20(sp)
     3e4:	01712623          	sw	s7,12(sp)
     3e8:	01912223          	sw	s9,4(sp)
     3ec:	01a12023          	sw	s10,0(sp)
     3f0:	02112623          	sw	ra,44(sp)
     3f4:	02812423          	sw	s0,40(sp)
     3f8:	03212023          	sw	s2,32(sp)
     3fc:	01312e23          	sw	s3,28(sp)
     400:	01412c23          	sw	s4,24(sp)
     404:	01612823          	sw	s6,16(sp)
     408:	01812423          	sw	s8,8(sp)
     40c:	00050493          	mv	s1,a0
     410:	00058b93          	mv	s7,a1
     414:	00060d13          	mv	s10,a2
    list_head *p, *q, *e, *tail;
    ee_s32     insize, nmerges, psize, qsize, i;

    insize = 1;
     418:	00100a93          	li	s5,1
        }

        tail->next = NULL;

        /* If we have done only one merge, we're finished. */
        if (nmerges <= 1) /* allow for nmerges==0, the empty list case */
     41c:	00100c93          	li	s9,1
        while (p)
     420:	0c048063          	beqz	s1,4e0 <core_list_mergesort+0x108>
        nmerges = 0; /* count number of merges we do in this pass */
     424:	00000c13          	li	s8,0
        tail = NULL;
     428:	00000913          	li	s2,0
        list = NULL;
     42c:	00000b13          	li	s6,0
            nmerges++; /* there exists a merge to be done */
     430:	001c0c13          	addi	s8,s8,1
     434:	00048793          	mv	a5,s1
            psize = 0;
     438:	00000413          	li	s0,0
                q = q->next;
     43c:	0007a783          	lw	a5,0(a5)
                psize++;
     440:	00140413          	addi	s0,s0,1
                if (!q)
     444:	00078463          	beqz	a5,44c <core_list_mergesort+0x74>
            for (i = 0; i < insize; i++)
     448:	fe8a9ae3          	bne	s5,s0,43c <core_list_mergesort+0x64>
                    list = e;
     44c:	00048a13          	mv	s4,s1
     450:	000a8993          	mv	s3,s5
     454:	00078493          	mv	s1,a5
            while (psize > 0 || (qsize > 0 && q))
     458:	02040e63          	beqz	s0,494 <core_list_mergesort+0xbc>
                else if (qsize == 0 || !q)
     45c:	04098e63          	beqz	s3,4b8 <core_list_mergesort+0xe0>
     460:	04048c63          	beqz	s1,4b8 <core_list_mergesort+0xe0>
                else if (cmp(p->info, q->info, res) <= 0)
     464:	0044a583          	lw	a1,4(s1)
     468:	004a2503          	lw	a0,4(s4)
     46c:	000d0613          	mv	a2,s10
     470:	000b80e7          	jalr	s7
     474:	04a05263          	blez	a0,4b8 <core_list_mergesort+0xe0>
                    qsize--;
     478:	00048793          	mv	a5,s1
                    q = q->next;
     47c:	0004a483          	lw	s1,0(s1)
                    qsize--;
     480:	fff98993          	addi	s3,s3,-1
                if (tail)
     484:	02090463          	beqz	s2,4ac <core_list_mergesort+0xd4>
                    tail->next = e;
     488:	00f92023          	sw	a5,0(s2)
                    list = e;
     48c:	00078913          	mv	s2,a5
            while (psize > 0 || (qsize > 0 && q))
     490:	fc0416e3          	bnez	s0,45c <core_list_mergesort+0x84>
     494:	02098a63          	beqz	s3,4c8 <core_list_mergesort+0xf0>
     498:	02048a63          	beqz	s1,4cc <core_list_mergesort+0xf4>
                    qsize--;
     49c:	00048793          	mv	a5,s1
     4a0:	fff98993          	addi	s3,s3,-1
                    q = q->next;
     4a4:	0004a483          	lw	s1,0(s1)
                if (tail)
     4a8:	fe0910e3          	bnez	s2,488 <core_list_mergesort+0xb0>
                    list = e;
     4ac:	00078b13          	mv	s6,a5
     4b0:	00078913          	mv	s2,a5
     4b4:	fddff06f          	j	490 <core_list_mergesort+0xb8>
                    psize--;
     4b8:	000a0793          	mv	a5,s4
     4bc:	fff40413          	addi	s0,s0,-1
                    p = p->next;
     4c0:	000a2a03          	lw	s4,0(s4)
     4c4:	fc1ff06f          	j	484 <core_list_mergesort+0xac>
        while (p)
     4c8:	f60494e3          	bnez	s1,430 <core_list_mergesort+0x58>
        tail->next = NULL;
     4cc:	00092023          	sw	zero,0(s2)
        if (nmerges <= 1) /* allow for nmerges==0, the empty list case */
     4d0:	019c0c63          	beq	s8,s9,4e8 <core_list_mergesort+0x110>
            return list;

        /* Otherwise repeat, merging lists twice the size */
        insize *= 2;
     4d4:	001a9a93          	slli	s5,s5,0x1
        p    = list;
     4d8:	000b0493          	mv	s1,s6
     4dc:	f45ff06f          	j	420 <core_list_mergesort+0x48>
        tail->next = NULL;
     4e0:	00002023          	sw	zero,0(zero) # 0 <_entry>
     4e4:	00100073          	ebreak
    }
#if COMPILER_REQUIRES_SORT_RETURN
    return list;
#endif
}
     4e8:	02c12083          	lw	ra,44(sp)
     4ec:	02812403          	lw	s0,40(sp)
     4f0:	02412483          	lw	s1,36(sp)
     4f4:	02012903          	lw	s2,32(sp)
     4f8:	01c12983          	lw	s3,28(sp)
     4fc:	01812a03          	lw	s4,24(sp)
     500:	01412a83          	lw	s5,20(sp)
     504:	00c12b83          	lw	s7,12(sp)
     508:	00812c03          	lw	s8,8(sp)
     50c:	00412c83          	lw	s9,4(sp)
     510:	00012d03          	lw	s10,0(sp)
     514:	000b0513          	mv	a0,s6
     518:	01012b03          	lw	s6,16(sp)
     51c:	03010113          	addi	sp,sp,48
     520:	00008067          	ret

00000524 <core_bench_list>:
{
     524:	00050613          	mv	a2,a0
    ee_s16     find_num = res->seed3;
     528:	00451503          	lh	a0,4(a0)
{
     52c:	fe010113          	addi	sp,sp,-32
     530:	00812c23          	sw	s0,24(sp)
     534:	00112e23          	sw	ra,28(sp)
     538:	00912a23          	sw	s1,20(sp)
     53c:	01212823          	sw	s2,16(sp)
     540:	01312623          	sw	s3,12(sp)
     544:	01412423          	sw	s4,8(sp)
     548:	01512223          	sw	s5,4(sp)
    list_head *list     = res->list;
     54c:	02462403          	lw	s0,36(a2)
    for (i = 0; i < find_num; i++)
     550:	24a05263          	blez	a0,794 <core_bench_list+0x270>
    info.idx = finder_idx;
     554:	00058493          	mv	s1,a1
    for (i = 0; i < find_num; i++)
     558:	00000893          	li	a7,0
    ee_u16     found = 0, missed = 0;
     55c:	00000e13          	li	t3,0
     560:	00000313          	li	t1,0
    ee_u16     retval = 0;
     564:	00000813          	li	a6,0
        info.data16 = (i & 0xff);
     568:	0ff8fa13          	zext.b	s4,a7
    if (info->idx >= 0)
     56c:	1c04ce63          	bltz	s1,748 <core_bench_list+0x224>
        while (list && (list->info->idx != info->idx))
     570:	22040a63          	beqz	s0,7a4 <core_bench_list+0x280>
     574:	00040793          	mv	a5,s0
     578:	00c0006f          	j	584 <core_bench_list+0x60>
            list = list->next;
     57c:	0007a783          	lw	a5,0(a5)
        while (list && (list->info->idx != info->idx))
     580:	00078863          	beqz	a5,590 <core_bench_list+0x6c>
     584:	0047a703          	lw	a4,4(a5)
     588:	00271703          	lh	a4,2(a4)
     58c:	fe9718e3          	bne	a4,s1,57c <core_bench_list+0x58>
    list_head *next = NULL, *tmp;
     590:	00000693          	li	a3,0
     594:	00c0006f          	j	5a0 <core_bench_list+0x7c>
     598:	00040693          	mv	a3,s0
     59c:	00070413          	mv	s0,a4
        tmp        = list->next;
     5a0:	00042703          	lw	a4,0(s0)
        list->next = next;
     5a4:	00d42023          	sw	a3,0(s0)
    while (list)
     5a8:	fe0718e3          	bnez	a4,598 <core_bench_list+0x74>
        if (this_find == NULL)
     5ac:	1c078063          	beqz	a5,76c <core_bench_list+0x248>
            if (this_find->info->data16 & 0x1) /* use found value */
     5b0:	0047a703          	lw	a4,4(a5)
            found++;
     5b4:	00130313          	addi	t1,t1,1 # b9 <frame_dummy+0x15>
     5b8:	01031313          	slli	t1,t1,0x10
            if (this_find->info->data16 & 0x1) /* use found value */
     5bc:	00071703          	lh	a4,0(a4)
            found++;
     5c0:	01035313          	srli	t1,t1,0x10
            if (this_find->info->data16 & 0x1) /* use found value */
     5c4:	00177693          	andi	a3,a4,1
     5c8:	00068c63          	beqz	a3,5e0 <core_bench_list+0xbc>
                retval += (this_find->info->data16 >> 9) & 1;
     5cc:	40975713          	srai	a4,a4,0x9
     5d0:	00177713          	andi	a4,a4,1
     5d4:	00e80733          	add	a4,a6,a4
     5d8:	01071813          	slli	a6,a4,0x10
     5dc:	01085813          	srli	a6,a6,0x10
            if (this_find->next != NULL)
     5e0:	0007a683          	lw	a3,0(a5)
     5e4:	00068c63          	beqz	a3,5fc <core_bench_list+0xd8>
                this_find->next = finder->next;
     5e8:	0006a703          	lw	a4,0(a3)
     5ec:	00e7a023          	sw	a4,0(a5)
                finder->next    = list->next;
     5f0:	00042783          	lw	a5,0(s0)
     5f4:	00f6a023          	sw	a5,0(a3)
                list->next      = finder;
     5f8:	00d42023          	sw	a3,0(s0)
        if (info.idx >= 0)
     5fc:	0004c863          	bltz	s1,60c <core_bench_list+0xe8>
            info.idx++;
     600:	00148493          	addi	s1,s1,1
     604:	01049493          	slli	s1,s1,0x10
     608:	4104d493          	srai	s1,s1,0x10
    for (i = 0; i < find_num; i++)
     60c:	00188713          	addi	a4,a7,1
     610:	01071893          	slli	a7,a4,0x10
     614:	4108d893          	srai	a7,a7,0x10
     618:	f51518e3          	bne	a0,a7,568 <core_bench_list+0x44>
    retval += found * 4 - missed;
     61c:	00231793          	slli	a5,t1,0x2
     620:	41c787b3          	sub	a5,a5,t3
     624:	00f807b3          	add	a5,a6,a5
     628:	01079913          	slli	s2,a5,0x10
     62c:	01095913          	srli	s2,s2,0x10
    if (finder_idx > 0)
     630:	00b05a63          	blez	a1,644 <core_bench_list+0x120>
        list = core_list_mergesort(list, cmp_complex, res);
     634:	00040513          	mv	a0,s0
     638:	25400593          	li	a1,596
     63c:	d9dff0ef          	jal	ra,3d8 <core_list_mergesort>
     640:	00050413          	mv	s0,a0
    remover = core_list_remove(list->next);
     644:	00042783          	lw	a5,0(s0)
    list_head *ret = item->next;
     648:	00040993          	mv	s3,s0
     64c:	0007aa83          	lw	s5,0(a5)
    tmp        = item->info;
     650:	0047a703          	lw	a4,4(a5)
    item->info = ret->info;
     654:	004aa603          	lw	a2,4(s5)
    item->next = item->next->next;
     658:	000aa683          	lw	a3,0(s5)
    item->info = ret->info;
     65c:	00c7a223          	sw	a2,4(a5)
    ret->info  = tmp;
     660:	00eaa223          	sw	a4,4(s5)
    item->next = item->next->next;
     664:	00d7a023          	sw	a3,0(a5)
    ret->next  = NULL;
     668:	000aa023          	sw	zero,0(s5)
    if (info->idx >= 0)
     66c:	0a04ce63          	bltz	s1,728 <core_bench_list+0x204>
        while (list && (list->info->idx != info->idx))
     670:	0049a783          	lw	a5,4(s3)
     674:	00279783          	lh	a5,2(a5)
     678:	00978a63          	beq	a5,s1,68c <core_bench_list+0x168>
            list = list->next;
     67c:	0009a983          	lw	s3,0(s3)
        while (list && (list->info->idx != info->idx))
     680:	fe0998e3          	bnez	s3,670 <core_bench_list+0x14c>
        finder = list->next;
     684:	00042983          	lw	s3,0(s0)
    while (finder)
     688:	02098463          	beqz	s3,6b0 <core_bench_list+0x18c>
        retval = crc16(list->info->data16, retval);
     68c:	00442783          	lw	a5,4(s0)
     690:	00090593          	mv	a1,s2
     694:	00079503          	lh	a0,0(a5)
     698:	1d4020ef          	jal	ra,286c <crc16>
        finder = finder->next;
     69c:	0009a983          	lw	s3,0(s3)
        retval = crc16(list->info->data16, retval);
     6a0:	00050913          	mv	s2,a0
    while (finder)
     6a4:	fe0994e3          	bnez	s3,68c <core_bench_list+0x168>
    remover = core_list_undo_remove(remover, list->next);
     6a8:	00042983          	lw	s3,0(s0)
    tmp                 = item_removed->info;
     6ac:	004aa703          	lw	a4,4(s5)
    item_removed->info  = item_modified->info;
     6b0:	0049a683          	lw	a3,4(s3)
    item_removed->next  = item_modified->next;
     6b4:	0009a783          	lw	a5,0(s3)
    item_removed->info  = item_modified->info;
     6b8:	00daa223          	sw	a3,4(s5)
    item_modified->info = tmp;
     6bc:	00e9a223          	sw	a4,4(s3)
    item_removed->next  = item_modified->next;
     6c0:	00faa023          	sw	a5,0(s5)
    list = core_list_mergesort(list, cmp_idx, NULL);
     6c4:	00040513          	mv	a0,s0
    item_modified->next = item_removed;
     6c8:	0159a023          	sw	s5,0(s3)
    list = core_list_mergesort(list, cmp_idx, NULL);
     6cc:	00000613          	li	a2,0
     6d0:	0c400593          	li	a1,196
     6d4:	d05ff0ef          	jal	ra,3d8 <core_list_mergesort>
    finder = list->next;
     6d8:	00052403          	lw	s0,0(a0)
    list = core_list_mergesort(list, cmp_idx, NULL);
     6dc:	00050493          	mv	s1,a0
    while (finder)
     6e0:	02040063          	beqz	s0,700 <core_bench_list+0x1dc>
        retval = crc16(list->info->data16, retval);
     6e4:	0044a783          	lw	a5,4(s1)
     6e8:	00090593          	mv	a1,s2
     6ec:	00079503          	lh	a0,0(a5)
     6f0:	17c020ef          	jal	ra,286c <crc16>
        finder = finder->next;
     6f4:	00042403          	lw	s0,0(s0)
        retval = crc16(list->info->data16, retval);
     6f8:	00050913          	mv	s2,a0
    while (finder)
     6fc:	fe0414e3          	bnez	s0,6e4 <core_bench_list+0x1c0>
}
     700:	01c12083          	lw	ra,28(sp)
     704:	01812403          	lw	s0,24(sp)
     708:	01412483          	lw	s1,20(sp)
     70c:	00c12983          	lw	s3,12(sp)
     710:	00812a03          	lw	s4,8(sp)
     714:	00412a83          	lw	s5,4(sp)
     718:	00090513          	mv	a0,s2
     71c:	01012903          	lw	s2,16(sp)
     720:	02010113          	addi	sp,sp,32
     724:	00008067          	ret
        while (list && ((list->info->data16 & 0xff) != info->data16))
     728:	0049a783          	lw	a5,4(s3)
     72c:	0007c783          	lbu	a5,0(a5)
     730:	f5478ee3          	beq	a5,s4,68c <core_bench_list+0x168>
            list = list->next;
     734:	0009a983          	lw	s3,0(s3)
        while (list && ((list->info->data16 & 0xff) != info->data16))
     738:	fe0998e3          	bnez	s3,728 <core_bench_list+0x204>
        finder = list->next;
     73c:	00042983          	lw	s3,0(s0)
    while (finder)
     740:	f40996e3          	bnez	s3,68c <core_bench_list+0x168>
     744:	f6dff06f          	j	6b0 <core_bench_list+0x18c>
        while (list && ((list->info->data16 & 0xff) != info->data16))
     748:	04040e63          	beqz	s0,7a4 <core_bench_list+0x280>
     74c:	00040793          	mv	a5,s0
     750:	00c0006f          	j	75c <core_bench_list+0x238>
            list = list->next;
     754:	0007a783          	lw	a5,0(a5)
        while (list && ((list->info->data16 & 0xff) != info->data16))
     758:	e2078ce3          	beqz	a5,590 <core_bench_list+0x6c>
     75c:	0047a703          	lw	a4,4(a5)
     760:	00074703          	lbu	a4,0(a4)
     764:	feea18e3          	bne	s4,a4,754 <core_bench_list+0x230>
     768:	e29ff06f          	j	590 <core_bench_list+0x6c>
            retval += (list->next->info->data16 >> 8) & 1;
     76c:	0046a703          	lw	a4,4(a3)
            missed++;
     770:	001e0793          	addi	a5,t3,1
     774:	01079e13          	slli	t3,a5,0x10
            retval += (list->next->info->data16 >> 8) & 1;
     778:	00170703          	lb	a4,1(a4)
            missed++;
     77c:	010e5e13          	srli	t3,t3,0x10
            retval += (list->next->info->data16 >> 8) & 1;
     780:	00177713          	andi	a4,a4,1
     784:	00e80733          	add	a4,a6,a4
     788:	01071813          	slli	a6,a4,0x10
     78c:	01085813          	srli	a6,a6,0x10
     790:	e6dff06f          	j	5fc <core_bench_list+0xd8>
     794:	00000a13          	li	s4,0
    info.idx = finder_idx;
     798:	00058493          	mv	s1,a1
    for (i = 0; i < find_num; i++)
     79c:	00000913          	li	s2,0
     7a0:	e91ff06f          	j	630 <core_bench_list+0x10c>
            retval += (list->next->info->data16 >> 8) & 1;
     7a4:	00002783          	lw	a5,0(zero) # 0 <_entry>
     7a8:	00100073          	ebreak

000007ac <core_list_init>:
{
     7ac:	fe010113          	addi	sp,sp,-32
     7b0:	01212823          	sw	s2,16(sp)
     7b4:	00058913          	mv	s2,a1
    ee_u32 size     = (blksize / per_item)
     7b8:	01400593          	li	a1,20
{
     7bc:	00812c23          	sw	s0,24(sp)
     7c0:	01312623          	sw	s3,12(sp)
     7c4:	00112e23          	sw	ra,28(sp)
     7c8:	00060993          	mv	s3,a2
     7cc:	00912a23          	sw	s1,20(sp)
    ee_u32 size     = (blksize / per_item)
     7d0:	28d040ef          	jal	ra,525c <__udivsi3>
     7d4:	ffe50513          	addi	a0,a0,-2
    list_head *memblock_end  = memblock + size;
     7d8:	00351613          	slli	a2,a0,0x3
     7dc:	00c90633          	add	a2,s2,a2
    list->info->data16 = (ee_s16)0x8080;
     7e0:	ffff87b7          	lui	a5,0xffff8
    list->next         = NULL;
     7e4:	00092023          	sw	zero,0(s2)
    list->info         = datablock;
     7e8:	00c92223          	sw	a2,4(s2)
    list->info->data16 = (ee_s16)0x8080;
     7ec:	08078713          	addi	a4,a5,128 # ffff8080 <RAM_SIZE+0xfffe8080>
    list_data *datablock_end = datablock + size;
     7f0:	00251593          	slli	a1,a0,0x2
    list->info->data16 = (ee_s16)0x8080;
     7f4:	00e61023          	sh	a4,0(a2)
    list->info->idx    = 0x0000;
     7f8:	00061123          	sh	zero,2(a2)
    if ((*memblock + 1) >= memblock_end)
     7fc:	01090693          	addi	a3,s2,16
    list_data *datablock_end = datablock + size;
     800:	00b605b3          	add	a1,a2,a1
    memblock++;
     804:	00890413          	addi	s0,s2,8
    datablock++;
     808:	00460713          	addi	a4,a2,4
    if ((*memblock + 1) >= memblock_end)
     80c:	14c6f263          	bgeu	a3,a2,950 <HEAP_SIZE+0x150>
    if ((*datablock + 1) >= datablock_end)
     810:	00860893          	addi	a7,a2,8
     814:	12b8fe63          	bgeu	a7,a1,950 <HEAP_SIZE+0x150>
    newitem->info = *datablock;
     818:	00e92623          	sw	a4,12(s2)
    newitem->next      = insert_point->next;
     81c:	00092423          	sw	zero,8(s2)
    insert_point->next = newitem;
     820:	00892023          	sw	s0,0(s2)
    to->idx    = from->idx;
     824:	fff7c793          	not	a5,a5
    to->data16 = from->data16;
     828:	fff00713          	li	a4,-1
     82c:	00e61223          	sh	a4,4(a2)
    to->idx    = from->idx;
     830:	00f61323          	sh	a5,6(a2)
    for (i = 0; i < size; i++)
     834:	06050a63          	beqz	a0,8a8 <HEAP_SIZE+0xa8>
            ee_u16 pat = (ee_u16)(i++ ^ seed); /* get a pseudo random number */
     838:	01099e93          	slli	t4,s3,0x10
    to->idx    = from->idx;
     83c:	ffff8f37          	lui	t5,0xffff8
            ee_u16 pat = (ee_u16)(i++ ^ seed); /* get a pseudo random number */
     840:	010ede93          	srli	t4,t4,0x10
     844:	00000813          	li	a6,0
    to->idx    = from->idx;
     848:	ffff4f13          	not	t5,t5
    if ((*datablock + 1) >= datablock_end)
     84c:	01081713          	slli	a4,a6,0x10
     850:	01075713          	srli	a4,a4,0x10
        ee_u16 datpat = ((ee_u16)(seed ^ i) & 0xf);
     854:	01d747b3          	xor	a5,a4,t4
            = (datpat << 3) | (i & 0x7); /* alternate between algorithms */
     858:	00379793          	slli	a5,a5,0x3
     85c:	00777713          	andi	a4,a4,7
     860:	0787f793          	andi	a5,a5,120
        ee_u16 dat
     864:	00e7e7b3          	or	a5,a5,a4
        info.data16 = (dat << 8) | dat;  /* fill the data with actual data and
     868:	00879713          	slli	a4,a5,0x8
    if ((*memblock + 1) >= memblock_end)
     86c:	00868313          	addi	t1,a3,8
    for (i = 0; i < size; i++)
     870:	00180813          	addi	a6,a6,1
    if ((*datablock + 1) >= datablock_end)
     874:	00488e13          	addi	t3,a7,4
        info.data16 = (dat << 8) | dat;  /* fill the data with actual data and
     878:	00f767b3          	or	a5,a4,a5
    if ((*memblock + 1) >= memblock_end)
     87c:	02c37463          	bgeu	t1,a2,8a4 <HEAP_SIZE+0xa4>
    if ((*datablock + 1) >= datablock_end)
     880:	02be7263          	bgeu	t3,a1,8a4 <HEAP_SIZE+0xa4>
    newitem->next      = insert_point->next;
     884:	0086a023          	sw	s0,0(a3)
    insert_point->next = newitem;
     888:	00d92023          	sw	a3,0(s2)
    newitem->info = *datablock;
     88c:	0116a223          	sw	a7,4(a3)
    to->data16 = from->data16;
     890:	00f89023          	sh	a5,0(a7)
    to->idx    = from->idx;
     894:	01e89123          	sh	t5,2(a7)
    return newitem;
     898:	00068413          	mv	s0,a3
     89c:	000e0893          	mv	a7,t3
     8a0:	00030693          	mv	a3,t1
    for (i = 0; i < size; i++)
     8a4:	fb0514e3          	bne	a0,a6,84c <HEAP_SIZE+0x4c>
    while (finder->next != NULL)
     8a8:	00042483          	lw	s1,0(s0)
     8ac:	06048e63          	beqz	s1,928 <HEAP_SIZE+0x128>
        if (i < size / 5) /* first 20% of the list in order */
     8b0:	00500593          	li	a1,5
     8b4:	1a9040ef          	jal	ra,525c <__udivsi3>
                                & (((i & 0x07) << 8)
     8b8:	000045b7          	lui	a1,0x4
        if (i < size / 5) /* first 20% of the list in order */
     8bc:	20000713          	li	a4,512
     8c0:	00100693          	li	a3,1
                                & (((i & 0x07) << 8)
     8c4:	fff58593          	addi	a1,a1,-1 # 3fff <__adddf3+0x6eb>
     8c8:	0280006f          	j	8f0 <HEAP_SIZE+0xf0>
    while (finder->next != NULL)
     8cc:	0004a783          	lw	a5,0(s1)
     8d0:	10070713          	addi	a4,a4,256
            finder->info->idx = i++;
     8d4:	00d61123          	sh	a3,2(a2)
    while (finder->next != NULL)
     8d8:	01071713          	slli	a4,a4,0x10
     8dc:	00048413          	mv	s0,s1
     8e0:	00168693          	addi	a3,a3,1
     8e4:	01075713          	srli	a4,a4,0x10
     8e8:	04078063          	beqz	a5,928 <HEAP_SIZE+0x128>
     8ec:	00078493          	mv	s1,a5
            ee_u16 pat = (ee_u16)(i++ ^ seed); /* get a pseudo random number */
     8f0:	00d9c633          	xor	a2,s3,a3
                                & (((i & 0x07) << 8)
     8f4:	70077793          	andi	a5,a4,1792
                                   | pat); /* make sure the mixed items end up
     8f8:	00c7e7b3          	or	a5,a5,a2
                                & (((i & 0x07) << 8)
     8fc:	00b7f7b3          	and	a5,a5,a1
            finder->info->idx = i++;
     900:	00442603          	lw	a2,4(s0)
        if (i < size / 5) /* first 20% of the list in order */
     904:	fca6e4e3          	bltu	a3,a0,8cc <HEAP_SIZE+0xcc>
            finder->info->idx = 0x3fff
     908:	00f61123          	sh	a5,2(a2)
    while (finder->next != NULL)
     90c:	0004a783          	lw	a5,0(s1)
     910:	10070713          	addi	a4,a4,256
     914:	01071713          	slli	a4,a4,0x10
     918:	00048413          	mv	s0,s1
     91c:	00168693          	addi	a3,a3,1
     920:	01075713          	srli	a4,a4,0x10
     924:	fc0794e3          	bnez	a5,8ec <HEAP_SIZE+0xec>
}
     928:	01812403          	lw	s0,24(sp)
     92c:	01c12083          	lw	ra,28(sp)
     930:	01412483          	lw	s1,20(sp)
     934:	00c12983          	lw	s3,12(sp)
    list = core_list_mergesort(list, cmp_idx, NULL);
     938:	00090513          	mv	a0,s2
}
     93c:	01012903          	lw	s2,16(sp)
    list = core_list_mergesort(list, cmp_idx, NULL);
     940:	00000613          	li	a2,0
     944:	0c400593          	li	a1,196
}
     948:	02010113          	addi	sp,sp,32
    list = core_list_mergesort(list, cmp_idx, NULL);
     94c:	a8dff06f          	j	3d8 <core_list_mergesort>
    memblock++;
     950:	00040693          	mv	a3,s0
    datablock++;
     954:	00070893          	mv	a7,a4
     958:	00000413          	li	s0,0
     95c:	ed9ff06f          	j	834 <HEAP_SIZE+0x34>

00000960 <iterate>:
                                    (ee_u16)0xe5a4,
                                    (ee_u16)0x8e3a,
                                    (ee_u16)0x8d84 };
void *
iterate(void *pres)
{
     960:	ff010113          	addi	sp,sp,-16
     964:	01212023          	sw	s2,0(sp)
    ee_u32        i;
    ee_u16        crc;
    core_results *res        = (core_results *)pres;
    ee_u32        iterations = res->iterations;
     968:	01c52903          	lw	s2,28(a0)
{
     96c:	00112623          	sw	ra,12(sp)
     970:	00812423          	sw	s0,8(sp)
     974:	00912223          	sw	s1,4(sp)
    res->crc                 = 0;
     978:	02052c23          	sw	zero,56(a0)
    res->crclist             = 0;
    res->crcmatrix           = 0;
     97c:	02052e23          	sw	zero,60(a0)
    res->crcstate            = 0;

    for (i = 0; i < iterations; i++)
     980:	04090663          	beqz	s2,9cc <iterate+0x6c>
     984:	00050413          	mv	s0,a0
     988:	00000493          	li	s1,0
    {
        crc      = core_bench_list(res, 1);
     98c:	00100593          	li	a1,1
     990:	00040513          	mv	a0,s0
     994:	b91ff0ef          	jal	ra,524 <core_bench_list>
        res->crc = crcu16(crc, res->crc);
     998:	03845583          	lhu	a1,56(s0)
     99c:	541010ef          	jal	ra,26dc <crcu16>
        crc      = core_bench_list(res, -1);
     9a0:	fff00593          	li	a1,-1
        res->crc = crcu16(crc, res->crc);
     9a4:	02a41c23          	sh	a0,56(s0)
        crc      = core_bench_list(res, -1);
     9a8:	00040513          	mv	a0,s0
     9ac:	b79ff0ef          	jal	ra,524 <core_bench_list>
        res->crc = crcu16(crc, res->crc);
     9b0:	03845583          	lhu	a1,56(s0)
     9b4:	529010ef          	jal	ra,26dc <crcu16>
     9b8:	02a41c23          	sh	a0,56(s0)
        if (i == 0)
     9bc:	00049463          	bnez	s1,9c4 <iterate+0x64>
            res->crclist = res->crc;
     9c0:	02a41d23          	sh	a0,58(s0)
    for (i = 0; i < iterations; i++)
     9c4:	00148493          	addi	s1,s1,1
     9c8:	fc9912e3          	bne	s2,s1,98c <iterate+0x2c>
    }
    return NULL;
}
     9cc:	00c12083          	lw	ra,12(sp)
     9d0:	00812403          	lw	s0,8(sp)
     9d4:	00412483          	lw	s1,4(sp)
     9d8:	00012903          	lw	s2,0(sp)
     9dc:	00000513          	li	a0,0
     9e0:	01010113          	addi	sp,sp,16
     9e4:	00008067          	ret

000009e8 <main>:
*/

#if MAIN_HAS_NOARGC
MAIN_RETURN_TYPE
main(void)
{
     9e8:	81010113          	addi	sp,sp,-2032
     9ec:	7e812423          	sw	s0,2024(sp)
     9f0:	7e912223          	sw	s1,2020(sp)
     9f4:	7f212023          	sw	s2,2016(sp)
     9f8:	7e112623          	sw	ra,2028(sp)
     9fc:	7d312e23          	sw	s3,2012(sp)
     a00:	7d412c23          	sw	s4,2008(sp)
     a04:	7d512a23          	sw	s5,2004(sp)
     a08:	7d612823          	sw	s6,2000(sp)
     a0c:	7d712623          	sw	s7,1996(sp)
     a10:	7d812423          	sw	s8,1992(sp)
     a14:	7d912223          	sw	s9,1988(sp)
     a18:	7da12023          	sw	s10,1984(sp)
    int   argc = 0;
     a1c:	00001737          	lui	a4,0x1
{
     a20:	f9010113          	addi	sp,sp,-112
    int   argc = 0;
     a24:	82070713          	addi	a4,a4,-2016 # 820 <HEAP_SIZE+0x20>
     a28:	01010693          	addi	a3,sp,16
     a2c:	00006937          	lui	s2,0x6
     a30:	fffff7b7          	lui	a5,0xfffff
     a34:	00d70733          	add	a4,a4,a3
     a38:	00f707b3          	add	a5,a4,a5
     a3c:	26090493          	addi	s1,s2,608 # 6260 <__subdf3+0x7f0>
     a40:	00006437          	lui	s0,0x6
     a44:	00f12623          	sw	a5,12(sp)
     a48:	7e07a223          	sw	zero,2020(a5) # fffff7e4 <RAM_SIZE+0xfffef7e4>
MAIN_RETURN_TYPE
main(int argc, char *argv[])
{
#endif
	const char *hello = "Hello World\n";
	for(int i = 0; i < 12; i++) { 
     a4c:	26140413          	addi	s0,s0,609 # 6261 <__subdf3+0x7f1>
     a50:	00c48493          	addi	s1,s1,12
    int   argc = 0;
     a54:	04800513          	li	a0,72
     a58:	00c0006f          	j	a64 <main+0x7c>
	  uart_send_char(hello[i]);
     a5c:	00044503          	lbu	a0,0(s0)
     a60:	00140413          	addi	s0,s0,1
     a64:	5c4020ef          	jal	ra,3028 <uart_send_char>
	for(int i = 0; i < 12; i++) { 
     a68:	fe849ae3          	bne	s1,s0,a5c <main+0x74>
	}
	ee_printf("Hello World\n");
     a6c:	26090513          	addi	a0,s2,608
     a70:	5c4020ef          	jal	ra,3034 <ee_printf>
    core_results results[MULTITHREAD];
#if (MEM_METHOD == MEM_STACK)
    ee_u8 stack_memblock[TOTAL_DATA_SIZE * MULTITHREAD];
#endif
    /* first call any initializations needed */
    portable_init(&(results[0].port), &argc, argv);
     a74:	000014b7          	lui	s1,0x1
     a78:	01010713          	addi	a4,sp,16
     a7c:	fffff437          	lui	s0,0xfffff
     a80:	82048793          	addi	a5,s1,-2016 # 820 <HEAP_SIZE+0x20>
     a84:	00e787b3          	add	a5,a5,a4
     a88:	7e840613          	addi	a2,s0,2024 # fffff7e8 <RAM_SIZE+0xfffef7e8>
     a8c:	00c78633          	add	a2,a5,a2
     a90:	82048793          	addi	a5,s1,-2016
     a94:	00e787b3          	add	a5,a5,a4
     a98:	7e440593          	addi	a1,s0,2020
     a9c:	00b785b3          	add	a1,a5,a1
     aa0:	05e10513          	addi	a0,sp,94
     aa4:	554010ef          	jal	ra,1ff8 <portable_init>
    if (sizeof(struct list_head_s) > 128)
    {
        ee_printf("list_head structure too big for comparable data!\n");
        return MAIN_RETURN_VAL;
    }
    results[0].seed1      = get_seed(1);
     aa8:	00100513          	li	a0,1
     aac:	39d010ef          	jal	ra,2648 <get_seed_32>
     ab0:	01010693          	addi	a3,sp,16
     ab4:	82048713          	addi	a4,s1,-2016
     ab8:	00d70733          	add	a4,a4,a3
     abc:	00050793          	mv	a5,a0
     ac0:	00870733          	add	a4,a4,s0
     ac4:	7ef71623          	sh	a5,2028(a4)
    results[0].seed2      = get_seed(2);
     ac8:	00200513          	li	a0,2
    results[0].seed1      = get_seed(1);
     acc:	00e12623          	sw	a4,12(sp)
    results[0].seed2      = get_seed(2);
     ad0:	379010ef          	jal	ra,2648 <get_seed_32>
     ad4:	00c12703          	lw	a4,12(sp)
     ad8:	00050793          	mv	a5,a0
    results[0].seed3      = get_seed(3);
     adc:	00300513          	li	a0,3
    results[0].seed2      = get_seed(2);
     ae0:	7ef71723          	sh	a5,2030(a4)
    results[0].seed3      = get_seed(3);
     ae4:	365010ef          	jal	ra,2648 <get_seed_32>
     ae8:	00c12703          	lw	a4,12(sp)
     aec:	00050793          	mv	a5,a0
    results[0].iterations = get_seed_32(4);
     af0:	00400513          	li	a0,4
    results[0].seed3      = get_seed(3);
     af4:	7ef71823          	sh	a5,2032(a4)
    results[0].iterations = get_seed_32(4);
     af8:	351010ef          	jal	ra,2648 <get_seed_32>
     afc:	00050793          	mv	a5,a0
#if CORE_DEBUG
    results[0].iterations = 1;
#endif
    results[0].execs = get_seed_32(5);
     b00:	00500513          	li	a0,5
    results[0].iterations = get_seed_32(4);
     b04:	02f12c23          	sw	a5,56(sp)
    results[0].execs = get_seed_32(5);
     b08:	341010ef          	jal	ra,2648 <get_seed_32>
    if (results[0].execs == 0)
     b0c:	7c050463          	beqz	a0,12d4 <main+0x8ec>
    results[0].execs = get_seed_32(5);
     b10:	02a12e23          	sw	a0,60(sp)
    { /* if not supplied, execute all algorithms */
        results[0].execs = ALL_ALGORITHMS_MASK;
    }
    /* put in some default values based on one seed only for easy testing */
    if ((results[0].seed1 == 0) && (results[0].seed2 == 0)
     b14:	00001737          	lui	a4,0x1
     b18:	82070713          	addi	a4,a4,-2016 # 820 <HEAP_SIZE+0x20>
     b1c:	01010693          	addi	a3,sp,16
     b20:	fffff7b7          	lui	a5,0xfffff
     b24:	00d70733          	add	a4,a4,a3
     b28:	00f707b3          	add	a5,a4,a5
     b2c:	00f12623          	sw	a5,12(sp)
     b30:	7ec7a783          	lw	a5,2028(a5) # fffff7ec <RAM_SIZE+0xfffef7ec>
     b34:	76079863          	bnez	a5,12a4 <main+0x8bc>
        && (results[0].seed3 == 0))
     b38:	00c12783          	lw	a5,12(sp)
     b3c:	7f079783          	lh	a5,2032(a5)
     b40:	7a078863          	beqz	a5,12f0 <main+0x908>
#endif
    /* Data init */
    /* Find out how space much we have based on number of algorithms */
    for (i = 0; i < NUM_ALGORITHMS; i++)
    {
        if ((1 << (ee_u32)i) & results[0].execs)
     b44:	03c12403          	lw	s0,60(sp)
    results[i].memblock[0] = stack_memblock + i * TOTAL_DATA_SIZE;
     b48:	000016b7          	lui	a3,0x1
     b4c:	82068693          	addi	a3,a3,-2016 # 820 <HEAP_SIZE+0x20>
     b50:	01010613          	addi	a2,sp,16
     b54:	fffff7b7          	lui	a5,0xfffff
     b58:	00c686b3          	add	a3,a3,a2
     b5c:	00f687b3          	add	a5,a3,a5
     b60:	06010a13          	addi	s4,sp,96
        if ((1 << (ee_u32)i) & results[0].execs)
     b64:	00247493          	andi	s1,s0,2
     b68:	00147593          	andi	a1,s0,1
            num_algorithms++;
     b6c:	00903733          	snez	a4,s1
    results[i].memblock[0] = stack_memblock + i * TOTAL_DATA_SIZE;
     b70:	00f12623          	sw	a5,12(sp)
     b74:	7f47aa23          	sw	s4,2036(a5) # fffff7f4 <RAM_SIZE+0xfffef7f4>
    results[i].err         = 0;
     b78:	04011e23          	sh	zero,92(sp)
        if ((1 << (ee_u32)i) & results[0].execs)
     b7c:	00447793          	andi	a5,s0,4
     b80:	00058b13          	mv	s6,a1
            num_algorithms++;
     b84:	00e585b3          	add	a1,a1,a4
        if ((1 << (ee_u32)i) & results[0].execs)
     b88:	00078863          	beqz	a5,b98 <main+0x1b0>
            num_algorithms++;
     b8c:	00158593          	addi	a1,a1,1
     b90:	01059593          	slli	a1,a1,0x10
     b94:	0105d593          	srli	a1,a1,0x10
    }
    for (i = 0; i < MULTITHREAD; i++)
        results[i].size = results[i].size / num_algorithms;
     b98:	7d000513          	li	a0,2000
     b9c:	6c0040ef          	jal	ra,525c <__udivsi3>
     ba0:	000017b7          	lui	a5,0x1
     ba4:	fffff937          	lui	s2,0xfffff
     ba8:	82078793          	addi	a5,a5,-2016 # 820 <HEAP_SIZE+0x20>
     bac:	01010713          	addi	a4,sp,16
     bb0:	7ec90913          	addi	s2,s2,2028 # fffff7ec <RAM_SIZE+0xfffef7ec>
     bb4:	00e787b3          	add	a5,a5,a4
     bb8:	00050993          	mv	s3,a0
     bbc:	02a12a23          	sw	a0,52(sp)
    /* Assign pointers */
    for (i = 0; i < NUM_ALGORITHMS; i++)
     bc0:	01278933          	add	s2,a5,s2
        results[i].size = results[i].size / num_algorithms;
     bc4:	00000a93          	li	s5,0
    ee_u16       i, j = 0, num_algorithms = 0;
     bc8:	00000b93          	li	s7,0
    {
        ee_u32 ctx;
        if ((1 << (ee_u32)i) & results[0].execs)
     bcc:	00100c93          	li	s9,1
    for (i = 0; i < NUM_ALGORITHMS; i++)
     bd0:	00300c13          	li	s8,3
        if ((1 << (ee_u32)i) & results[0].execs)
     bd4:	015c97b3          	sll	a5,s9,s5
     bd8:	0087f7b3          	and	a5,a5,s0
    for (i = 0; i < NUM_ALGORITHMS; i++)
     bdc:	001a8a93          	addi	s5,s5,1
        if ((1 << (ee_u32)i) & results[0].execs)
     be0:	6a079063          	bnez	a5,1280 <main+0x898>
    for (i = 0; i < NUM_ALGORITHMS; i++)
     be4:	00490913          	addi	s2,s2,4
     be8:	ff8a96e3          	bne	s5,s8,bd4 <main+0x1ec>
        }
    }
    /* call inits */
    for (i = 0; i < MULTITHREAD; i++)
    {
        if (results[i].execs & ID_LIST)
     bec:	2c0b1263          	bnez	s6,eb0 <main+0x4c8>
        {
            results[i].list = core_list_init(
                results[0].size, results[i].memblock[1], results[i].seed1);
        }
        if (results[i].execs & ID_MATRIX)
     bf0:	2e049e63          	bnez	s1,eec <main+0x504>
                             results[i].memblock[2],
                             (ee_s32)results[i].seed1
                                 | (((ee_s32)results[i].seed2) << 16),
                             &(results[i].mat));
        }
        if (results[i].execs & ID_STATE)
     bf4:	00447413          	andi	s0,s0,4
     bf8:	02040863          	beqz	s0,c28 <main+0x240>
        {
            core_init_state(
     bfc:	00001737          	lui	a4,0x1
     c00:	82070713          	addi	a4,a4,-2016 # 820 <HEAP_SIZE+0x20>
     c04:	01010693          	addi	a3,sp,16
                results[0].size, results[i].seed1, results[i].memblock[3]);
     c08:	fffff7b7          	lui	a5,0xfffff
            core_init_state(
     c0c:	00d70733          	add	a4,a4,a3
     c10:	00f707b3          	add	a5,a4,a5
     c14:	03012603          	lw	a2,48(sp)
     c18:	7ec79583          	lh	a1,2028(a5) # fffff7ec <RAM_SIZE+0xfffef7ec>
     c1c:	03412503          	lw	a0,52(sp)
     c20:	00f12623          	sw	a5,12(sp)
     c24:	3e8010ef          	jal	ra,200c <core_init_state>
        }
    }

    /* automatically determine number of iterations if not set */
    if (results[0].iterations == 0)
     c28:	03812783          	lw	a5,56(sp)
     c2c:	06079a63          	bnez	a5,ca0 <main+0x2b8>
    {
        secs_ret secs_passed = 0;
        ee_u32   divisor;
        results[0].iterations = 1;
     c30:	00100793          	li	a5,1
     c34:	02f12c23          	sw	a5,56(sp)
        while (secs_passed < (secs_ret)1)
        {
            results[0].iterations *= 10;
            start_time();
            iterate(&results[0]);
     c38:	000017b7          	lui	a5,0x1
            results[0].iterations *= 10;
     c3c:	fffff437          	lui	s0,0xfffff
            iterate(&results[0]);
     c40:	82078793          	addi	a5,a5,-2016 # 820 <HEAP_SIZE+0x20>
     c44:	01010713          	addi	a4,sp,16
     c48:	7ec40413          	addi	s0,s0,2028 # fffff7ec <RAM_SIZE+0xfffef7ec>
     c4c:	00e787b3          	add	a5,a5,a4
     c50:	00878433          	add	s0,a5,s0
            results[0].iterations *= 10;
     c54:	03812703          	lw	a4,56(sp)
     c58:	00271793          	slli	a5,a4,0x2
     c5c:	00e787b3          	add	a5,a5,a4
     c60:	00179793          	slli	a5,a5,0x1
     c64:	02f12c23          	sw	a5,56(sp)
            start_time();
     c68:	2fc010ef          	jal	ra,1f64 <start_time>
            iterate(&results[0]);
     c6c:	00040513          	mv	a0,s0
     c70:	cf1ff0ef          	jal	ra,960 <iterate>
            stop_time();
     c74:	324010ef          	jal	ra,1f98 <stop_time>
            secs_passed = time_in_secs(get_time());
     c78:	354010ef          	jal	ra,1fcc <get_time>
     c7c:	360010ef          	jal	ra,1fdc <time_in_secs>
        while (secs_passed < (secs_ret)1)
     c80:	fc050ae3          	beqz	a0,c54 <main+0x26c>
        divisor = (ee_u32)secs_passed;
        if (divisor == 0) /* some machines cast float to int as 0 since this
                             conversion is not defined by ANSI, but we know at
                             least one second passed */
            divisor = 1;
        results[0].iterations *= 1 + 10 / divisor;
     c84:	00050593          	mv	a1,a0
     c88:	00a00513          	li	a0,10
     c8c:	5d0040ef          	jal	ra,525c <__udivsi3>
     c90:	03812583          	lw	a1,56(sp)
     c94:	00150513          	addi	a0,a0,1
     c98:	598040ef          	jal	ra,5230 <__mulsi3>
     c9c:	02a12c23          	sw	a0,56(sp)
    }
    /* perform actual benchmark */
    start_time();
     ca0:	2c4010ef          	jal	ra,1f64 <start_time>
    for (i = 0; i < default_num_contexts; i++)
    {
        core_stop_parallel(&results[i]);
    }
#else
    iterate(&results[0]);
     ca4:	000014b7          	lui	s1,0x1
     ca8:	01010713          	addi	a4,sp,16
     cac:	fffff437          	lui	s0,0xfffff
     cb0:	82048793          	addi	a5,s1,-2016 # 820 <HEAP_SIZE+0x20>
     cb4:	00e787b3          	add	a5,a5,a4
     cb8:	7ec40513          	addi	a0,s0,2028 # fffff7ec <RAM_SIZE+0xfffef7ec>
     cbc:	00a78533          	add	a0,a5,a0
     cc0:	ca1ff0ef          	jal	ra,960 <iterate>
#endif
    stop_time();
     cc4:	2d4010ef          	jal	ra,1f98 <stop_time>
    total_time = get_time();
     cc8:	304010ef          	jal	ra,1fcc <get_time>
    /* get a function of the input to report */
    seedcrc = crc16(results[0].seed1, seedcrc);
     ccc:	01010713          	addi	a4,sp,16
     cd0:	82048793          	addi	a5,s1,-2016
     cd4:	00e787b3          	add	a5,a5,a4
     cd8:	008787b3          	add	a5,a5,s0
    total_time = get_time();
     cdc:	00050993          	mv	s3,a0
    seedcrc = crc16(results[0].seed1, seedcrc);
     ce0:	7ec79503          	lh	a0,2028(a5)
     ce4:	00000593          	li	a1,0
     ce8:	00f12623          	sw	a5,12(sp)
     cec:	381010ef          	jal	ra,286c <crc16>
    seedcrc = crc16(results[0].seed2, seedcrc);
     cf0:	00c12783          	lw	a5,12(sp)
    seedcrc = crc16(results[0].seed1, seedcrc);
     cf4:	00050593          	mv	a1,a0
    seedcrc = crc16(results[0].seed2, seedcrc);
     cf8:	7ee79503          	lh	a0,2030(a5)
     cfc:	371010ef          	jal	ra,286c <crc16>
    seedcrc = crc16(results[0].seed3, seedcrc);
     d00:	00c12783          	lw	a5,12(sp)
    seedcrc = crc16(results[0].seed2, seedcrc);
     d04:	00050593          	mv	a1,a0
    seedcrc = crc16(results[0].seed3, seedcrc);
     d08:	7f079503          	lh	a0,2032(a5)
     d0c:	361010ef          	jal	ra,286c <crc16>
     d10:	00050593          	mv	a1,a0
    seedcrc = crc16(results[0].size, seedcrc);
     d14:	03411503          	lh	a0,52(sp)
     d18:	355010ef          	jal	ra,286c <crc16>

    switch (seedcrc)
     d1c:	000087b7          	lui	a5,0x8
     d20:	b0578793          	addi	a5,a5,-1275 # 7b05 <__heap_end+0x275>
    seedcrc = crc16(results[0].size, seedcrc);
     d24:	00050913          	mv	s2,a0
    switch (seedcrc)
     d28:	64f50063          	beq	a0,a5,1368 <main+0x980>
     d2c:	22a7e663          	bltu	a5,a0,f58 <main+0x570>
     d30:	000027b7          	lui	a5,0x2
     d34:	8f278793          	addi	a5,a5,-1806 # 18f2 <matrix_mul_matrix+0xce>
     d38:	64f50c63          	beq	a0,a5,1390 <main+0x9a8>
     d3c:	000057b7          	lui	a5,0x5
     d40:	eaf78793          	addi	a5,a5,-337 # 4eaf <__muldf3+0x38b>
     d44:	66f51063          	bne	a0,a5,13a4 <main+0x9bc>
            ee_printf("6k validation run parameters for coremark.\n");
            break;
        case 0x4eaf: /* seed1=0x8, seed2=0x8, seed3=0x8, size 400 per algorithm
                      */
            known_id = 2;
            ee_printf("Profile generation run parameters for coremark.\n");
     d48:	00006537          	lui	a0,0x6
     d4c:	2cc50513          	addi	a0,a0,716 # 62cc <__subdf3+0x85c>
     d50:	2e4020ef          	jal	ra,3034 <ee_printf>
            known_id = 2;
     d54:	00200793          	li	a5,2
            total_errors = -1;
            break;
    }
    if (known_id >= 0)
    {
        for (i = 0; i < default_num_contexts; i++)
     d58:	8201a703          	lw	a4,-2016(gp) # 6bb0 <default_num_contexts>
     d5c:	00000d13          	li	s10,0
     d60:	00000493          	li	s1,0
     d64:	22070063          	beqz	a4,f84 <main+0x59c>
        {
            results[i].err = 0;
     d68:	000016b7          	lui	a3,0x1
     d6c:	82068693          	addi	a3,a3,-2016 # 820 <HEAP_SIZE+0x20>
     d70:	01010613          	addi	a2,sp,16
            if ((results[i].execs & ID_LIST)
                && (results[i].crclist != list_known_crc[known_id]))
     d74:	00006cb7          	lui	s9,0x6
            results[i].err = 0;
     d78:	fffff737          	lui	a4,0xfffff
     d7c:	00c686b3          	add	a3,a3,a2
                && (results[i].crclist != list_known_crc[known_id]))
     d80:	00179793          	slli	a5,a5,0x1
            results[i].err = 0;
     d84:	00e68733          	add	a4,a3,a4
                && (results[i].crclist != list_known_crc[known_id]))
     d88:	67cc8c93          	addi	s9,s9,1660 # 667c <list_known_crc>
            results[i].err = 0;
     d8c:	00e12623          	sw	a4,12(sp)
                && (results[i].crclist != list_known_crc[known_id]))
     d90:	00fc8cb3          	add	s9,s9,a5
            {
                ee_printf("[%u]ERROR! list crc 0x%04x - should be 0x%04x\n",
     d94:	00006b37          	lui	s6,0x6
                results[i].err++;
            }
            if ((results[i].execs & ID_MATRIX)
                && (results[i].crcmatrix != matrix_known_crc[known_id]))
            {
                ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n",
     d98:	00006ab7          	lui	s5,0x6
                results[i].err++;
            }
            if ((results[i].execs & ID_STATE)
                && (results[i].crcstate != state_known_crc[known_id]))
            {
                ee_printf("[%u]ERROR! state crc 0x%04x - should be 0x%04x\n",
     d9c:	00006a37          	lui	s4,0x6
     da0:	0400006f          	j	de0 <main+0x3f8>
                          i,
                          results[i].crcstate,
                          state_known_crc[known_id]);
                results[i].err++;
            }
            total_errors += results[i].err;
     da4:	00c12783          	lw	a5,12(sp)
     da8:	00878433          	add	s0,a5,s0
     dac:	000017b7          	lui	a5,0x1
     db0:	00878433          	add	s0,a5,s0
     db4:	82c45783          	lhu	a5,-2004(s0)
        for (i = 0; i < default_num_contexts; i++)
     db8:	00148493          	addi	s1,s1,1
     dbc:	8201a703          	lw	a4,-2016(gp) # 6bb0 <default_num_contexts>
            total_errors += results[i].err;
     dc0:	01a787b3          	add	a5,a5,s10
        for (i = 0; i < default_num_contexts; i++)
     dc4:	01049493          	slli	s1,s1,0x10
            total_errors += results[i].err;
     dc8:	01079413          	slli	s0,a5,0x10
     dcc:	01079d13          	slli	s10,a5,0x10
        for (i = 0; i < default_num_contexts; i++)
     dd0:	0104d493          	srli	s1,s1,0x10
            total_errors += results[i].err;
     dd4:	01045413          	srli	s0,s0,0x10
     dd8:	410d5d13          	srai	s10,s10,0x10
        for (i = 0; i < default_num_contexts; i++)
     ddc:	1ae4f663          	bgeu	s1,a4,f88 <main+0x5a0>
            results[i].err = 0;
     de0:	00c12783          	lw	a5,12(sp)
     de4:	00449413          	slli	s0,s1,0x4
     de8:	00940733          	add	a4,s0,s1
     dec:	00271713          	slli	a4,a4,0x2
     df0:	00e78733          	add	a4,a5,a4
     df4:	00001c37          	lui	s8,0x1
     df8:	00ec0c33          	add	s8,s8,a4
            if ((results[i].execs & ID_LIST)
     dfc:	80cc2783          	lw	a5,-2036(s8) # 80c <HEAP_SIZE+0xc>
            results[i].err = 0;
     e00:	820c1623          	sh	zero,-2004(s8)
            if ((results[i].execs & ID_LIST)
     e04:	0017f793          	andi	a5,a5,1
     e08:	02078463          	beqz	a5,e30 <main+0x448>
                && (results[i].crclist != list_known_crc[known_id]))
     e0c:	826c5603          	lhu	a2,-2010(s8)
     e10:	000cd683          	lhu	a3,0(s9)
     e14:	00d60e63          	beq	a2,a3,e30 <main+0x448>
                ee_printf("[%u]ERROR! list crc 0x%04x - should be 0x%04x\n",
     e18:	00048593          	mv	a1,s1
     e1c:	35cb0513          	addi	a0,s6,860 # 635c <__subdf3+0x8ec>
     e20:	214020ef          	jal	ra,3034 <ee_printf>
                results[i].err++;
     e24:	82cc5783          	lhu	a5,-2004(s8)
     e28:	00178793          	addi	a5,a5,1 # 1001 <main+0x619>
     e2c:	82fc1623          	sh	a5,-2004(s8)
            if ((results[i].execs & ID_MATRIX)
     e30:	00c12783          	lw	a5,12(sp)
     e34:	00940733          	add	a4,s0,s1
     e38:	00271713          	slli	a4,a4,0x2
     e3c:	00e78733          	add	a4,a5,a4
     e40:	00001c37          	lui	s8,0x1
     e44:	00ec0c33          	add	s8,s8,a4
     e48:	80cc2783          	lw	a5,-2036(s8) # 80c <HEAP_SIZE+0xc>
     e4c:	0027f713          	andi	a4,a5,2
     e50:	02070663          	beqz	a4,e7c <main+0x494>
                && (results[i].crcmatrix != matrix_known_crc[known_id]))
     e54:	828c5603          	lhu	a2,-2008(s8)
     e58:	00ccd683          	lhu	a3,12(s9)
     e5c:	02d60063          	beq	a2,a3,e7c <main+0x494>
                ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n",
     e60:	00048593          	mv	a1,s1
     e64:	38ca8513          	addi	a0,s5,908 # 638c <__subdf3+0x91c>
     e68:	1cc020ef          	jal	ra,3034 <ee_printf>
                results[i].err++;
     e6c:	82cc5703          	lhu	a4,-2004(s8)
            if ((results[i].execs & ID_STATE)
     e70:	80cc2783          	lw	a5,-2036(s8)
                results[i].err++;
     e74:	00170713          	addi	a4,a4,1 # fffff001 <RAM_SIZE+0xfffef001>
     e78:	82ec1623          	sh	a4,-2004(s8)
                && (results[i].crcstate != state_known_crc[known_id]))
     e7c:	00940433          	add	s0,s0,s1
            if ((results[i].execs & ID_STATE)
     e80:	0047f793          	andi	a5,a5,4
                && (results[i].crcstate != state_known_crc[known_id]))
     e84:	00241413          	slli	s0,s0,0x2
            if ((results[i].execs & ID_STATE)
     e88:	f0078ee3          	beqz	a5,da4 <main+0x3bc>
                && (results[i].crcstate != state_known_crc[known_id]))
     e8c:	00c12783          	lw	a5,12(sp)
     e90:	018cd683          	lhu	a3,24(s9)
     e94:	00878433          	add	s0,a5,s0
     e98:	000017b7          	lui	a5,0x1
     e9c:	00878433          	add	s0,a5,s0
     ea0:	82a45603          	lhu	a2,-2006(s0)
     ea4:	08d61863          	bne	a2,a3,f34 <main+0x54c>
            total_errors += results[i].err;
     ea8:	82c45783          	lhu	a5,-2004(s0)
     eac:	f0dff06f          	j	db8 <main+0x3d0>
            results[i].list = core_list_init(
     eb0:	00001737          	lui	a4,0x1
     eb4:	01010693          	addi	a3,sp,16
     eb8:	82070713          	addi	a4,a4,-2016 # 820 <HEAP_SIZE+0x20>
     ebc:	00d70733          	add	a4,a4,a3
     ec0:	fffff7b7          	lui	a5,0xfffff
     ec4:	00f707b3          	add	a5,a4,a5
     ec8:	7ec79603          	lh	a2,2028(a5) # fffff7ec <RAM_SIZE+0xfffef7ec>
     ecc:	7f87a583          	lw	a1,2040(a5)
     ed0:	00098513          	mv	a0,s3
     ed4:	00f12623          	sw	a5,12(sp)
     ed8:	8d5ff0ef          	jal	ra,7ac <core_list_init>
        if (results[i].execs & ID_MATRIX)
     edc:	03c12403          	lw	s0,60(sp)
            results[i].list = core_list_init(
     ee0:	04a12023          	sw	a0,64(sp)
     ee4:	00247493          	andi	s1,s0,2
        if (results[i].execs & ID_MATRIX)
     ee8:	d00486e3          	beqz	s1,bf4 <main+0x20c>
                                 | (((ee_s32)results[i].seed2) << 16),
     eec:	00001737          	lui	a4,0x1
     ef0:	01010693          	addi	a3,sp,16
     ef4:	82070713          	addi	a4,a4,-2016 # 820 <HEAP_SIZE+0x20>
     ef8:	00d70733          	add	a4,a4,a3
            core_init_matrix(results[0].size,
     efc:	fffff7b7          	lui	a5,0xfffff
                                 | (((ee_s32)results[i].seed2) << 16),
     f00:	00f707b3          	add	a5,a4,a5
     f04:	00f12623          	sw	a5,12(sp)
                             (ee_s32)results[i].seed1
     f08:	00c12703          	lw	a4,12(sp)
                                 | (((ee_s32)results[i].seed2) << 16),
     f0c:	7ee79783          	lh	a5,2030(a5) # fffff7ee <RAM_SIZE+0xfffef7ee>
            core_init_matrix(results[0].size,
     f10:	03412503          	lw	a0,52(sp)
                             (ee_s32)results[i].seed1
     f14:	7ec71603          	lh	a2,2028(a4)
            core_init_matrix(results[0].size,
     f18:	7fc72583          	lw	a1,2044(a4)
                                 | (((ee_s32)results[i].seed2) << 16),
     f1c:	01079793          	slli	a5,a5,0x10
            core_init_matrix(results[0].size,
     f20:	04410693          	addi	a3,sp,68
     f24:	00c7e633          	or	a2,a5,a2
     f28:	488000ef          	jal	ra,13b0 <core_init_matrix>
        if (results[i].execs & ID_STATE)
     f2c:	03c12403          	lw	s0,60(sp)
     f30:	cc5ff06f          	j	bf4 <main+0x20c>
                ee_printf("[%u]ERROR! state crc 0x%04x - should be 0x%04x\n",
     f34:	00048593          	mv	a1,s1
     f38:	3c0a0513          	addi	a0,s4,960 # 63c0 <__subdf3+0x950>
     f3c:	0f8020ef          	jal	ra,3034 <ee_printf>
                results[i].err++;
     f40:	82c45783          	lhu	a5,-2004(s0)
     f44:	00178793          	addi	a5,a5,1
     f48:	01079793          	slli	a5,a5,0x10
     f4c:	0107d793          	srli	a5,a5,0x10
     f50:	82f41623          	sh	a5,-2004(s0)
     f54:	e65ff06f          	j	db8 <main+0x3d0>
    switch (seedcrc)
     f58:	000097b7          	lui	a5,0x9
     f5c:	a0278793          	addi	a5,a5,-1534 # 8a02 <__heap_end+0x1172>
     f60:	40f50e63          	beq	a0,a5,137c <main+0x994>
     f64:	0000f7b7          	lui	a5,0xf
     f68:	9f578793          	addi	a5,a5,-1547 # e9f5 <__stack_top+0x4965>
     f6c:	42f51c63          	bne	a0,a5,13a4 <main+0x9bc>
            ee_printf("2K performance run parameters for coremark.\n");
     f70:	00006537          	lui	a0,0x6
     f74:	30050513          	addi	a0,a0,768 # 6300 <__subdf3+0x890>
     f78:	0bc020ef          	jal	ra,3034 <ee_printf>
            known_id = 3;
     f7c:	00300793          	li	a5,3
     f80:	dd9ff06f          	j	d58 <main+0x370>
        for (i = 0; i < default_num_contexts; i++)
     f84:	00000413          	li	s0,0
        }
    }
    total_errors += check_data_types();
     f88:	171010ef          	jal	ra,28f8 <check_data_types>
    /* and report results */
    ee_printf("CoreMark Size    : %lu\n", (long unsigned)results[0].size);
     f8c:	03412583          	lw	a1,52(sp)
    total_errors += check_data_types();
     f90:	00a40433          	add	s0,s0,a0
    ee_printf("CoreMark Size    : %lu\n", (long unsigned)results[0].size);
     f94:	00006537          	lui	a0,0x6
     f98:	3f050513          	addi	a0,a0,1008 # 63f0 <__subdf3+0x980>
     f9c:	098020ef          	jal	ra,3034 <ee_printf>
    ee_printf("Total ticks      : %lu\n", (long unsigned)total_time);
     fa0:	00006537          	lui	a0,0x6
     fa4:	00098593          	mv	a1,s3
     fa8:	40850513          	addi	a0,a0,1032 # 6408 <__subdf3+0x998>
     fac:	088020ef          	jal	ra,3034 <ee_printf>
    if (time_in_secs(total_time) > 0)
        ee_printf("Iterations/Sec   : %f\n",
                  default_num_contexts * results[0].iterations
                      / time_in_secs(total_time));
#else
    ee_printf("Total time (secs): %d\n", time_in_secs(total_time));
     fb0:	00098513          	mv	a0,s3
     fb4:	028010ef          	jal	ra,1fdc <time_in_secs>
     fb8:	00050593          	mv	a1,a0
     fbc:	00006537          	lui	a0,0x6
     fc0:	42050513          	addi	a0,a0,1056 # 6420 <__subdf3+0x9b0>
     fc4:	070020ef          	jal	ra,3034 <ee_printf>
    total_errors += check_data_types();
     fc8:	01041413          	slli	s0,s0,0x10
    if (time_in_secs(total_time) > 0)
     fcc:	00098513          	mv	a0,s3
    total_errors += check_data_types();
     fd0:	01045413          	srli	s0,s0,0x10
    if (time_in_secs(total_time) > 0)
     fd4:	008010ef          	jal	ra,1fdc <time_in_secs>
     fd8:	34051663          	bnez	a0,1324 <main+0x93c>
        ee_printf("Iterations/Sec   : %d\n",
                  default_num_contexts * results[0].iterations
                      / time_in_secs(total_time));
#endif
    if (time_in_secs(total_time) < 10)
     fdc:	00098513          	mv	a0,s3
     fe0:	7fd000ef          	jal	ra,1fdc <time_in_secs>
     fe4:	00900793          	li	a5,9
     fe8:	32a7f463          	bgeu	a5,a0,1310 <main+0x928>
        ee_printf(
            "ERROR! Must execute for at least 10 secs for a valid result!\n");
        total_errors++;
    }

    ee_printf("Iterations       : %lu\n",
     fec:	8201a583          	lw	a1,-2016(gp) # 6bb0 <default_num_contexts>
     ff0:	03812503          	lw	a0,56(sp)
        total_errors++;
     ff4:	01041493          	slli	s1,s0,0x10
     ff8:	4104d493          	srai	s1,s1,0x10
    ee_printf("Iterations       : %lu\n",
     ffc:	234040ef          	jal	ra,5230 <__mulsi3>
    1000:	00050593          	mv	a1,a0
    1004:	00006537          	lui	a0,0x6
    1008:	49050513          	addi	a0,a0,1168 # 6490 <__subdf3+0xa20>
    100c:	028020ef          	jal	ra,3034 <ee_printf>
              (long unsigned)default_num_contexts * results[0].iterations);
    ee_printf("Compiler version : %s\n", COMPILER_VERSION);
    1010:	000065b7          	lui	a1,0x6
    1014:	00006537          	lui	a0,0x6
    1018:	4a858593          	addi	a1,a1,1192 # 64a8 <__subdf3+0xa38>
    101c:	4b450513          	addi	a0,a0,1204 # 64b4 <__subdf3+0xa44>
    1020:	014020ef          	jal	ra,3034 <ee_printf>
    ee_printf("Compiler flags   : %s\n", COMPILER_FLAGS);
    1024:	000065b7          	lui	a1,0x6
    1028:	00006537          	lui	a0,0x6
    102c:	4cc58593          	addi	a1,a1,1228 # 64cc <__subdf3+0xa5c>
    1030:	4dc50513          	addi	a0,a0,1244 # 64dc <__subdf3+0xa6c>
    1034:	000020ef          	jal	ra,3034 <ee_printf>
#if (MULTITHREAD > 1)
    ee_printf("Parallel %s : %d\n", PARALLEL_METHOD, default_num_contexts);
#endif
    ee_printf("Memory location  : %s\n", MEM_LOCATION);
    1038:	000065b7          	lui	a1,0x6
    103c:	00006537          	lui	a0,0x6
    1040:	4f458593          	addi	a1,a1,1268 # 64f4 <__subdf3+0xa84>
    1044:	4fc50513          	addi	a0,a0,1276 # 64fc <__subdf3+0xa8c>
    1048:	7ed010ef          	jal	ra,3034 <ee_printf>
    /* output for verification */
    ee_printf("seedcrc          : 0x%04x\n", seedcrc);
    104c:	00006537          	lui	a0,0x6
    1050:	00090593          	mv	a1,s2
    1054:	51450513          	addi	a0,a0,1300 # 6514 <__subdf3+0xaa4>
    1058:	7dd010ef          	jal	ra,3034 <ee_printf>
    if (results[0].execs & ID_LIST)
    105c:	03c12783          	lw	a5,60(sp)
    1060:	0017f713          	andi	a4,a5,1
    1064:	06070a63          	beqz	a4,10d8 <main+0x6f0>
        for (i = 0; i < default_num_contexts; i++)
    1068:	8201a703          	lw	a4,-2016(gp) # 6bb0 <default_num_contexts>
    106c:	06070663          	beqz	a4,10d8 <main+0x6f0>
            ee_printf("[%d]crclist       : 0x%04x\n", i, results[i].crclist);
    1070:	00001737          	lui	a4,0x1
    1074:	82070713          	addi	a4,a4,-2016 # 820 <HEAP_SIZE+0x20>
    1078:	01010693          	addi	a3,sp,16
    107c:	fffff7b7          	lui	a5,0xfffff
    1080:	00d70733          	add	a4,a4,a3
    1084:	00f707b3          	add	a5,a4,a5
        for (i = 0; i < default_num_contexts; i++)
    1088:	00000413          	li	s0,0
    108c:	000069b7          	lui	s3,0x6
            ee_printf("[%d]crclist       : 0x%04x\n", i, results[i].crclist);
    1090:	00f12623          	sw	a5,12(sp)
    1094:	00001937          	lui	s2,0x1
    1098:	00c12703          	lw	a4,12(sp)
    109c:	00441793          	slli	a5,s0,0x4
    10a0:	008787b3          	add	a5,a5,s0
    10a4:	00279793          	slli	a5,a5,0x2
    10a8:	00f707b3          	add	a5,a4,a5
    10ac:	00f907b3          	add	a5,s2,a5
    10b0:	8267d603          	lhu	a2,-2010(a5) # ffffe826 <RAM_SIZE+0xfffee826>
    10b4:	00040593          	mv	a1,s0
    10b8:	53098513          	addi	a0,s3,1328 # 6530 <__subdf3+0xac0>
    10bc:	779010ef          	jal	ra,3034 <ee_printf>
        for (i = 0; i < default_num_contexts; i++)
    10c0:	00140413          	addi	s0,s0,1
    10c4:	8201a783          	lw	a5,-2016(gp) # 6bb0 <default_num_contexts>
    10c8:	01041413          	slli	s0,s0,0x10
    10cc:	01045413          	srli	s0,s0,0x10
    10d0:	fcf464e3          	bltu	s0,a5,1098 <main+0x6b0>
    10d4:	03c12783          	lw	a5,60(sp)
    if (results[0].execs & ID_MATRIX)
    10d8:	0027f713          	andi	a4,a5,2
    10dc:	06070a63          	beqz	a4,1150 <main+0x768>
        for (i = 0; i < default_num_contexts; i++)
    10e0:	8201a703          	lw	a4,-2016(gp) # 6bb0 <default_num_contexts>
    10e4:	26070c63          	beqz	a4,135c <main+0x974>
            ee_printf("[%d]crcmatrix     : 0x%04x\n", i, results[i].crcmatrix);
    10e8:	00001737          	lui	a4,0x1
    10ec:	82070713          	addi	a4,a4,-2016 # 820 <HEAP_SIZE+0x20>
    10f0:	01010693          	addi	a3,sp,16
    10f4:	fffff7b7          	lui	a5,0xfffff
    10f8:	00d70733          	add	a4,a4,a3
    10fc:	00f707b3          	add	a5,a4,a5
        for (i = 0; i < default_num_contexts; i++)
    1100:	00000413          	li	s0,0
    1104:	000069b7          	lui	s3,0x6
            ee_printf("[%d]crcmatrix     : 0x%04x\n", i, results[i].crcmatrix);
    1108:	00f12623          	sw	a5,12(sp)
    110c:	00001937          	lui	s2,0x1
    1110:	00c12703          	lw	a4,12(sp)
    1114:	00441793          	slli	a5,s0,0x4
    1118:	008787b3          	add	a5,a5,s0
    111c:	00279793          	slli	a5,a5,0x2
    1120:	00f707b3          	add	a5,a4,a5
    1124:	00f907b3          	add	a5,s2,a5
    1128:	8287d603          	lhu	a2,-2008(a5) # ffffe828 <RAM_SIZE+0xfffee828>
    112c:	00040593          	mv	a1,s0
    1130:	54c98513          	addi	a0,s3,1356 # 654c <__subdf3+0xadc>
    1134:	701010ef          	jal	ra,3034 <ee_printf>
        for (i = 0; i < default_num_contexts; i++)
    1138:	00140413          	addi	s0,s0,1
    113c:	8201a783          	lw	a5,-2016(gp) # 6bb0 <default_num_contexts>
    1140:	01041413          	slli	s0,s0,0x10
    1144:	01045413          	srli	s0,s0,0x10
    1148:	fcf464e3          	bltu	s0,a5,1110 <main+0x728>
    114c:	03c12783          	lw	a5,60(sp)
    if (results[0].execs & ID_STATE)
    1150:	0047f793          	andi	a5,a5,4
    1154:	06078863          	beqz	a5,11c4 <main+0x7dc>
        for (i = 0; i < default_num_contexts; i++)
    1158:	8201a783          	lw	a5,-2016(gp) # 6bb0 <default_num_contexts>
    115c:	0c078663          	beqz	a5,1228 <main+0x840>
            ee_printf("[%d]crcstate      : 0x%04x\n", i, results[i].crcstate);
    1160:	00001737          	lui	a4,0x1
    1164:	82070713          	addi	a4,a4,-2016 # 820 <HEAP_SIZE+0x20>
    1168:	01010693          	addi	a3,sp,16
    116c:	fffff7b7          	lui	a5,0xfffff
    1170:	00d70733          	add	a4,a4,a3
    1174:	00f707b3          	add	a5,a4,a5
        for (i = 0; i < default_num_contexts; i++)
    1178:	00000413          	li	s0,0
    117c:	000069b7          	lui	s3,0x6
            ee_printf("[%d]crcstate      : 0x%04x\n", i, results[i].crcstate);
    1180:	00f12623          	sw	a5,12(sp)
    1184:	00001937          	lui	s2,0x1
    1188:	00c12703          	lw	a4,12(sp)
    118c:	00441793          	slli	a5,s0,0x4
    1190:	008787b3          	add	a5,a5,s0
    1194:	00279793          	slli	a5,a5,0x2
    1198:	00f707b3          	add	a5,a4,a5
    119c:	00f907b3          	add	a5,s2,a5
    11a0:	82a7d603          	lhu	a2,-2006(a5) # ffffe82a <RAM_SIZE+0xfffee82a>
    11a4:	00040593          	mv	a1,s0
    11a8:	56898513          	addi	a0,s3,1384 # 6568 <__subdf3+0xaf8>
    11ac:	689010ef          	jal	ra,3034 <ee_printf>
        for (i = 0; i < default_num_contexts; i++)
    11b0:	00140413          	addi	s0,s0,1
    11b4:	8201a783          	lw	a5,-2016(gp) # 6bb0 <default_num_contexts>
    11b8:	01041413          	slli	s0,s0,0x10
    11bc:	01045413          	srli	s0,s0,0x10
    11c0:	fcf464e3          	bltu	s0,a5,1188 <main+0x7a0>
    for (i = 0; i < default_num_contexts; i++)
        ee_printf("[%d]crcfinal      : 0x%04x\n", i, results[i].crc);
    11c4:	00001737          	lui	a4,0x1
    for (i = 0; i < default_num_contexts; i++)
    11c8:	8201a783          	lw	a5,-2016(gp) # 6bb0 <default_num_contexts>
        ee_printf("[%d]crcfinal      : 0x%04x\n", i, results[i].crc);
    11cc:	82070713          	addi	a4,a4,-2016 # 820 <HEAP_SIZE+0x20>
    11d0:	01010693          	addi	a3,sp,16
    11d4:	fffff937          	lui	s2,0xfffff
    11d8:	00d70733          	add	a4,a4,a3
    for (i = 0; i < default_num_contexts; i++)
    11dc:	00000413          	li	s0,0
    11e0:	00006a37          	lui	s4,0x6
        ee_printf("[%d]crcfinal      : 0x%04x\n", i, results[i].crc);
    11e4:	01270933          	add	s2,a4,s2
    11e8:	000019b7          	lui	s3,0x1
    for (i = 0; i < default_num_contexts; i++)
    11ec:	02078e63          	beqz	a5,1228 <main+0x840>
        ee_printf("[%d]crcfinal      : 0x%04x\n", i, results[i].crc);
    11f0:	00441793          	slli	a5,s0,0x4
    11f4:	008787b3          	add	a5,a5,s0
    11f8:	00279793          	slli	a5,a5,0x2
    11fc:	00f907b3          	add	a5,s2,a5
    1200:	00f987b3          	add	a5,s3,a5
    1204:	8247d603          	lhu	a2,-2012(a5)
    1208:	00040593          	mv	a1,s0
    120c:	584a0513          	addi	a0,s4,1412 # 6584 <__subdf3+0xb14>
    1210:	625010ef          	jal	ra,3034 <ee_printf>
    for (i = 0; i < default_num_contexts; i++)
    1214:	00140413          	addi	s0,s0,1
    1218:	8201a783          	lw	a5,-2016(gp) # 6bb0 <default_num_contexts>
    121c:	01041413          	slli	s0,s0,0x10
    1220:	01045413          	srli	s0,s0,0x10
    1224:	fcf466e3          	bltu	s0,a5,11f0 <main+0x808>
    if (total_errors == 0)
    1228:	0c048c63          	beqz	s1,1300 <main+0x918>
#endif
            ee_printf("\n");
        }
#endif
    }
    if (total_errors > 0)
    122c:	0a905a63          	blez	s1,12e0 <main+0x8f8>
        ee_printf("Errors detected\n");
    1230:	00006537          	lui	a0,0x6
    1234:	5ec50513          	addi	a0,a0,1516 # 65ec <__subdf3+0xb7c>
    1238:	5fd010ef          	jal	ra,3034 <ee_printf>
#if (MEM_METHOD == MEM_MALLOC)
    for (i = 0; i < MULTITHREAD; i++)
        portable_free(results[i].memblock[0]);
#endif
    /* And last call any target specific code for finalizing */
    portable_fini(&(results[0].port));
    123c:	05e10513          	addi	a0,sp,94
    1240:	5c5000ef          	jal	ra,2004 <portable_fini>

    return MAIN_RETURN_VAL;
}
    1244:	07010113          	addi	sp,sp,112
    1248:	7ec12083          	lw	ra,2028(sp)
    124c:	7e812403          	lw	s0,2024(sp)
    1250:	7e412483          	lw	s1,2020(sp)
    1254:	7e012903          	lw	s2,2016(sp)
    1258:	7dc12983          	lw	s3,2012(sp)
    125c:	7d812a03          	lw	s4,2008(sp)
    1260:	7d412a83          	lw	s5,2004(sp)
    1264:	7d012b03          	lw	s6,2000(sp)
    1268:	7cc12b83          	lw	s7,1996(sp)
    126c:	7c812c03          	lw	s8,1992(sp)
    1270:	7c412c83          	lw	s9,1988(sp)
    1274:	7c012d03          	lw	s10,1984(sp)
    1278:	7f010113          	addi	sp,sp,2032
    127c:	00008067          	ret
                    = (char *)(results[ctx].memblock[0]) + results[0].size * j;
    1280:	000b8513          	mv	a0,s7
    1284:	00098593          	mv	a1,s3
    1288:	7a9030ef          	jal	ra,5230 <__mulsi3>
            j++;
    128c:	001b8b93          	addi	s7,s7,1
                    = (char *)(results[ctx].memblock[0]) + results[0].size * j;
    1290:	00aa0533          	add	a0,s4,a0
            j++;
    1294:	010b9b93          	slli	s7,s7,0x10
                    = (char *)(results[ctx].memblock[0]) + results[0].size * j;
    1298:	00a92623          	sw	a0,12(s2) # fffff00c <RAM_SIZE+0xfffef00c>
            j++;
    129c:	010bdb93          	srli	s7,s7,0x10
    12a0:	945ff06f          	j	be4 <main+0x1fc>
    if ((results[0].seed1 == 1) && (results[0].seed2 == 0)
    12a4:	00100713          	li	a4,1
    12a8:	88e79ee3          	bne	a5,a4,b44 <main+0x15c>
        && (results[0].seed3 == 0))
    12ac:	00c12783          	lw	a5,12(sp)
    12b0:	7f079783          	lh	a5,2032(a5)
    12b4:	880798e3          	bnez	a5,b44 <main+0x15c>
        results[0].seed1 = 0x3415;
    12b8:	00c12703          	lw	a4,12(sp)
    12bc:	341537b7          	lui	a5,0x34153
    12c0:	41578793          	addi	a5,a5,1045 # 34153415 <RAM_SIZE+0x34143415>
    12c4:	7ef72623          	sw	a5,2028(a4)
        results[0].seed3 = 0x66;
    12c8:	06600793          	li	a5,102
    12cc:	7ef71823          	sh	a5,2032(a4)
    12d0:	875ff06f          	j	b44 <main+0x15c>
        results[0].execs = ALL_ALGORITHMS_MASK;
    12d4:	00700793          	li	a5,7
    12d8:	02f12e23          	sw	a5,60(sp)
    12dc:	839ff06f          	j	b14 <main+0x12c>
        ee_printf(
    12e0:	00006537          	lui	a0,0x6
    12e4:	60050513          	addi	a0,a0,1536 # 6600 <__subdf3+0xb90>
    12e8:	54d010ef          	jal	ra,3034 <ee_printf>
    12ec:	f51ff06f          	j	123c <main+0x854>
        results[0].seed3 = 0x66;
    12f0:	00c12703          	lw	a4,12(sp)
    12f4:	06600793          	li	a5,102
    12f8:	7ef71823          	sh	a5,2032(a4)
    if ((results[0].seed1 == 1) && (results[0].seed2 == 0)
    12fc:	849ff06f          	j	b44 <main+0x15c>
        ee_printf(
    1300:	00006537          	lui	a0,0x6
    1304:	5a050513          	addi	a0,a0,1440 # 65a0 <__subdf3+0xb30>
    1308:	52d010ef          	jal	ra,3034 <ee_printf>
    if (total_errors < 0)
    130c:	f31ff06f          	j	123c <main+0x854>
        ee_printf(
    1310:	00006537          	lui	a0,0x6
    1314:	45050513          	addi	a0,a0,1104 # 6450 <__subdf3+0x9e0>
    1318:	51d010ef          	jal	ra,3034 <ee_printf>
        total_errors++;
    131c:	00140413          	addi	s0,s0,1
    1320:	ccdff06f          	j	fec <main+0x604>
                  default_num_contexts * results[0].iterations
    1324:	8201a583          	lw	a1,-2016(gp) # 6bb0 <default_num_contexts>
    1328:	03812503          	lw	a0,56(sp)
    132c:	705030ef          	jal	ra,5230 <__mulsi3>
    1330:	00050493          	mv	s1,a0
                      / time_in_secs(total_time));
    1334:	00098513          	mv	a0,s3
    1338:	4a5000ef          	jal	ra,1fdc <time_in_secs>
    133c:	00050593          	mv	a1,a0
        ee_printf("Iterations/Sec   : %d\n",
    1340:	00048513          	mv	a0,s1
    1344:	719030ef          	jal	ra,525c <__udivsi3>
    1348:	00050593          	mv	a1,a0
    134c:	00006537          	lui	a0,0x6
    1350:	43850513          	addi	a0,a0,1080 # 6438 <__subdf3+0x9c8>
    1354:	4e1010ef          	jal	ra,3034 <ee_printf>
    1358:	c85ff06f          	j	fdc <main+0x5f4>
    if (results[0].execs & ID_STATE)
    135c:	0047f793          	andi	a5,a5,4
    1360:	e60782e3          	beqz	a5,11c4 <main+0x7dc>
    1364:	ec5ff06f          	j	1228 <main+0x840>
            ee_printf("6k validation run parameters for coremark.\n");
    1368:	00006537          	lui	a0,0x6
    136c:	2a050513          	addi	a0,a0,672 # 62a0 <__subdf3+0x830>
    1370:	4c5010ef          	jal	ra,3034 <ee_printf>
            known_id = 1;
    1374:	00100793          	li	a5,1
    1378:	9e1ff06f          	j	d58 <main+0x370>
            ee_printf("6k performance run parameters for coremark.\n");
    137c:	00006537          	lui	a0,0x6
    1380:	27050513          	addi	a0,a0,624 # 6270 <__subdf3+0x800>
    1384:	4b1010ef          	jal	ra,3034 <ee_printf>
            known_id = 0;
    1388:	00000793          	li	a5,0
    138c:	9cdff06f          	j	d58 <main+0x370>
            ee_printf("2K validation run parameters for coremark.\n");
    1390:	00006537          	lui	a0,0x6
    1394:	33050513          	addi	a0,a0,816 # 6330 <__subdf3+0x8c0>
    1398:	49d010ef          	jal	ra,3034 <ee_printf>
            known_id = 4;
    139c:	00400793          	li	a5,4
    13a0:	9b9ff06f          	j	d58 <main+0x370>
    switch (seedcrc)
    13a4:	00010437          	lui	s0,0x10
    13a8:	fff40413          	addi	s0,s0,-1 # ffff <__stack_top+0x5f6f>
    13ac:	bddff06f          	j	f88 <main+0x5a0>

000013b0 <core_init_matrix>:
        The seed parameter MUST be supplied from a source that cannot be
   determined at compile time
*/
ee_u32
core_init_matrix(ee_u32 blksize, void *memblk, ee_s32 seed, mat_params *p)
{
    13b0:	fb010113          	addi	sp,sp,-80
    13b4:	05212023          	sw	s2,64(sp)
    13b8:	01b12e23          	sw	s11,28(sp)
    13bc:	04112623          	sw	ra,76(sp)
    13c0:	04812423          	sw	s0,72(sp)
    13c4:	04912223          	sw	s1,68(sp)
    13c8:	03312e23          	sw	s3,60(sp)
    13cc:	03412c23          	sw	s4,56(sp)
    13d0:	03512a23          	sw	s5,52(sp)
    13d4:	03612823          	sw	s6,48(sp)
    13d8:	03712623          	sw	s7,44(sp)
    13dc:	03812423          	sw	s8,40(sp)
    13e0:	03912223          	sw	s9,36(sp)
    13e4:	03a12023          	sw	s10,32(sp)
    13e8:	00d12623          	sw	a3,12(sp)
    13ec:	00050913          	mv	s2,a0
    MATDAT *B;
    ee_s32  order = 1;
    MATDAT  val;
    ee_u32  i = 0, j = 0;
    if (seed == 0)
        seed = 1;
    13f0:	00100d93          	li	s11,1
    if (seed == 0)
    13f4:	00060463          	beqz	a2,13fc <core_init_matrix+0x4c>
    13f8:	00060d93          	mv	s11,a2
    {
        i++;
        j = i * i * 2 * 4;
    }
    N = i - 1;
    A = (MATDAT *)align_mem(memblk);
    13fc:	fff58593          	addi	a1,a1,-1
    1400:	ffc5fb13          	andi	s6,a1,-4
    1404:	004b0793          	addi	a5,s6,4
    1408:	00f12023          	sw	a5,0(sp)
    while (j < blksize)
    140c:	00000493          	li	s1,0
    1410:	14090e63          	beqz	s2,156c <core_init_matrix+0x1bc>
        i++;
    1414:	00048413          	mv	s0,s1
    1418:	00148493          	addi	s1,s1,1
        j = i * i * 2 * 4;
    141c:	00048593          	mv	a1,s1
    1420:	00048513          	mv	a0,s1
    1424:	60d030ef          	jal	ra,5230 <__mulsi3>
    1428:	00351513          	slli	a0,a0,0x3
    while (j < blksize)
    142c:	ff2564e3          	bltu	a0,s2,1414 <core_init_matrix+0x64>
    B = A + N * N;
    1430:	00040593          	mv	a1,s0
    1434:	00040513          	mv	a0,s0
    1438:	5f9030ef          	jal	ra,5230 <__mulsi3>
    143c:	00012703          	lw	a4,0(sp)
    1440:	00151793          	slli	a5,a0,0x1
    1444:	00f12223          	sw	a5,4(sp)
    }

    p->A = A;
    p->B = B;
    p->C = (MATRES *)align_mem(B + N * N);
    p->N = N;
    1448:	00812423          	sw	s0,8(sp)
    B = A + N * N;
    144c:	00f70b33          	add	s6,a4,a5
    for (i = 0; i < N; i++)
    1450:	0a040663          	beqz	s0,14fc <core_init_matrix+0x14c>
    1454:	00012783          	lw	a5,0(sp)
            seed         = ((order * seed) % 65536);
    1458:	000104b7          	lui	s1,0x10
    B = A + N * N;
    145c:	00000a93          	li	s5,0
    1460:	00000a13          	li	s4,0
    1464:	00100993          	li	s3,1
    1468:	41678933          	sub	s2,a5,s6
            seed         = ((order * seed) % 65536);
    146c:	fff48493          	addi	s1,s1,-1 # ffff <__stack_top+0x5f6f>
            order++;
    1470:	fff40c93          	addi	s9,s0,-1
        for (j = 0; j < N; j++)
    1474:	001a9693          	slli	a3,s5,0x1
    1478:	01668c33          	add	s8,a3,s6
        seed = 1;
    147c:	00098d13          	mv	s10,s3
        for (j = 0; j < N; j++)
    1480:	00000b93          	li	s7,0
            seed         = ((order * seed) % 65536);
    1484:	000d0593          	mv	a1,s10
    1488:	000d8513          	mv	a0,s11
    148c:	5a5030ef          	jal	ra,5230 <__mulsi3>
    1490:	41f55613          	srai	a2,a0,0x1f
    1494:	01065713          	srli	a4,a2,0x10
    1498:	00e50633          	add	a2,a0,a4
    149c:	010d1793          	slli	a5,s10,0x10
    14a0:	00967633          	and	a2,a2,s1
    14a4:	0107d793          	srli	a5,a5,0x10
    14a8:	40e60db3          	sub	s11,a2,a4
            val          = (seed + order);
    14ac:	01b78733          	add	a4,a5,s11
    14b0:	01071713          	slli	a4,a4,0x10
    14b4:	01075713          	srli	a4,a4,0x10
            val          = (val + order);
    14b8:	00f707b3          	add	a5,a4,a5
            B[i * N + j] = val;
    14bc:	00ec1023          	sh	a4,0(s8)
            val          = matrix_clip(val, 1);
    14c0:	0ff7f793          	zext.b	a5,a5
            A[i * N + j] = val;
    14c4:	01890733          	add	a4,s2,s8
    14c8:	00f71023          	sh	a5,0(a4)
        for (j = 0; j < N; j++)
    14cc:	001b8b93          	addi	s7,s7,1
            order++;
    14d0:	001d0d13          	addi	s10,s10,1
        for (j = 0; j < N; j++)
    14d4:	002c0c13          	addi	s8,s8,2
    14d8:	fa8be6e3          	bltu	s7,s0,1484 <core_init_matrix+0xd4>
    14dc:	00198993          	addi	s3,s3,1 # 1001 <main+0x619>
            order++;
    14e0:	00000793          	li	a5,0
    14e4:	00040463          	beqz	s0,14ec <core_init_matrix+0x13c>
    14e8:	000c8793          	mv	a5,s9
    for (i = 0; i < N; i++)
    14ec:	001a0a13          	addi	s4,s4,1
            order++;
    14f0:	013789b3          	add	s3,a5,s3
    for (i = 0; i < N; i++)
    14f4:	008a8ab3          	add	s5,s5,s0
    14f8:	f68a6ee3          	bltu	s4,s0,1474 <core_init_matrix+0xc4>
    p->C = (MATRES *)align_mem(B + N * N);
    14fc:	00412783          	lw	a5,4(sp)
    p->A = A;
    1500:	00c12703          	lw	a4,12(sp)
    1504:	00012683          	lw	a3,0(sp)
    p->C = (MATRES *)align_mem(B + N * N);
    1508:	00fb07b3          	add	a5,s6,a5
    150c:	fff78793          	addi	a5,a5,-1
    1510:	ffc7f793          	andi	a5,a5,-4
    1514:	00478793          	addi	a5,a5,4
    1518:	00f72623          	sw	a5,12(a4)
    p->N = N;
    151c:	00812783          	lw	a5,8(sp)
#if CORE_DEBUG
    printmat(A, N, "A");
    printmat(B, N, "B");
#endif
    return N;
}
    1520:	04c12083          	lw	ra,76(sp)
    1524:	00040513          	mv	a0,s0
    1528:	04812403          	lw	s0,72(sp)
    p->B = B;
    152c:	01672423          	sw	s6,8(a4)
    p->A = A;
    1530:	00d72223          	sw	a3,4(a4)
    p->N = N;
    1534:	00f72023          	sw	a5,0(a4)
}
    1538:	04412483          	lw	s1,68(sp)
    153c:	04012903          	lw	s2,64(sp)
    1540:	03c12983          	lw	s3,60(sp)
    1544:	03812a03          	lw	s4,56(sp)
    1548:	03412a83          	lw	s5,52(sp)
    154c:	03012b03          	lw	s6,48(sp)
    1550:	02c12b83          	lw	s7,44(sp)
    1554:	02812c03          	lw	s8,40(sp)
    1558:	02412c83          	lw	s9,36(sp)
    155c:	02012d03          	lw	s10,32(sp)
    1560:	01c12d83          	lw	s11,28(sp)
    1564:	05010113          	addi	sp,sp,80
    1568:	00008067          	ret
    B = A + N * N;
    156c:	fff00793          	li	a5,-1
    1570:	00f12423          	sw	a5,8(sp)
    1574:	00200793          	li	a5,2
    1578:	006b0b13          	addi	s6,s6,6
    N = i - 1;
    157c:	fff00413          	li	s0,-1
    B = A + N * N;
    1580:	00f12223          	sw	a5,4(sp)
    1584:	ed1ff06f          	j	1454 <core_init_matrix+0xa4>

00001588 <matrix_sum>:

        Otherwise, reset the accumulator and add 10 to the result.
*/
ee_s16
matrix_sum(ee_u32 N, MATRES *C, MATDAT clipval)
{
    1588:	00050e93          	mv	t4,a0
    MATRES tmp = 0, prev = 0, cur = 0;
    ee_s16 ret = 0;
    ee_u32 i, j;
    for (i = 0; i < N; i++)
    158c:	08050663          	beqz	a0,1618 <matrix_sum+0x90>
    1590:	40a00f33          	neg	t5,a0
    1594:	00251893          	slli	a7,a0,0x2
    1598:	011588b3          	add	a7,a1,a7
    159c:	002f1f93          	slli	t6,t5,0x2
    15a0:	00000313          	li	t1,0
    ee_s16 ret = 0;
    15a4:	00000513          	li	a0,0
    MATRES tmp = 0, prev = 0, cur = 0;
    15a8:	00000713          	li	a4,0
    15ac:	00000593          	li	a1,0
    for (i = 0; i < N; i++)
    15b0:	003f1f13          	slli	t5,t5,0x3
    {
        for (j = 0; j < N; j++)
    15b4:	011f8e33          	add	t3,t6,a7
{
    15b8:	000e0793          	mv	a5,t3
    15bc:	0180006f          	j	15d4 <matrix_sum+0x4c>
        {
            cur = C[i * N + j];
            tmp += cur;
            if (tmp > clipval)
            {
                ret += 10;
    15c0:	01081513          	slli	a0,a6,0x10
        for (j = 0; j < N; j++)
    15c4:	00478793          	addi	a5,a5,4
                ret += 10;
    15c8:	41055513          	srai	a0,a0,0x10
                tmp = 0;
    15cc:	00000593          	li	a1,0
        for (j = 0; j < N; j++)
    15d0:	02f88c63          	beq	a7,a5,1608 <matrix_sum+0x80>
            }
            else
            {
                ret += (cur > prev) ? 1 : 0;
    15d4:	00070693          	mv	a3,a4
            cur = C[i * N + j];
    15d8:	0007a703          	lw	a4,0(a5)
                ret += 10;
    15dc:	01051513          	slli	a0,a0,0x10
    15e0:	01055513          	srli	a0,a0,0x10
                ret += (cur > prev) ? 1 : 0;
    15e4:	00e6a6b3          	slt	a3,a3,a4
            tmp += cur;
    15e8:	00e585b3          	add	a1,a1,a4
                ret += 10;
    15ec:	00a50813          	addi	a6,a0,10
                ret += (cur > prev) ? 1 : 0;
    15f0:	00d50533          	add	a0,a0,a3
            if (tmp > clipval)
    15f4:	fcb646e3          	blt	a2,a1,15c0 <matrix_sum+0x38>
                ret += (cur > prev) ? 1 : 0;
    15f8:	01051513          	slli	a0,a0,0x10
        for (j = 0; j < N; j++)
    15fc:	00478793          	addi	a5,a5,4
                ret += (cur > prev) ? 1 : 0;
    1600:	41055513          	srai	a0,a0,0x10
        for (j = 0; j < N; j++)
    1604:	fcf898e3          	bne	a7,a5,15d4 <matrix_sum+0x4c>
    for (i = 0; i < N; i++)
    1608:	00130313          	addi	t1,t1,1
    160c:	41ee08b3          	sub	a7,t3,t5
    1610:	fa6e92e3          	bne	t4,t1,15b4 <matrix_sum+0x2c>
            }
            prev = cur;
        }
    }
    return ret;
}
    1614:	00008067          	ret
    ee_s16 ret = 0;
    1618:	00000513          	li	a0,0
}
    161c:	00008067          	ret

00001620 <matrix_mul_const>:
*/
void
matrix_mul_const(ee_u32 N, MATRES *C, MATDAT *A, MATDAT val)
{
    ee_u32 i, j;
    for (i = 0; i < N; i++)
    1620:	0c050a63          	beqz	a0,16f4 <matrix_mul_const+0xd4>
{
    1624:	fd010113          	addi	sp,sp,-48
    1628:	03212023          	sw	s2,32(sp)
    162c:	01712623          	sw	s7,12(sp)
    1630:	00151913          	slli	s2,a0,0x1
    1634:	40a00bb3          	neg	s7,a0
    1638:	01312e23          	sw	s3,28(sp)
    163c:	01412c23          	sw	s4,24(sp)
    1640:	01612823          	sw	s6,16(sp)
    1644:	01812423          	sw	s8,8(sp)
    1648:	01912223          	sw	s9,4(sp)
    164c:	01a12023          	sw	s10,0(sp)
    1650:	001b9c93          	slli	s9,s7,0x1
    1654:	02112623          	sw	ra,44(sp)
    1658:	02812423          	sw	s0,40(sp)
    165c:	02912223          	sw	s1,36(sp)
    1660:	01512a23          	sw	s5,20(sp)
    1664:	00050b13          	mv	s6,a0
    1668:	00058c13          	mv	s8,a1
    166c:	00068d13          	mv	s10,a3
    1670:	01260933          	add	s2,a2,s2
    {
        for (j = 0; j < N; j++)
        {
            C[i * N + j] = (MATRES)A[i * N + j] * (MATRES)val;
    1674:	00000a13          	li	s4,0
    for (i = 0; i < N; i++)
    1678:	00000993          	li	s3,0
    167c:	002b9b93          	slli	s7,s7,0x2
        for (j = 0; j < N; j++)
    1680:	01990ab3          	add	s5,s2,s9
    1684:	002a1493          	slli	s1,s4,0x2
    1688:	009c04b3          	add	s1,s8,s1
{
    168c:	000a8413          	mv	s0,s5
            C[i * N + j] = (MATRES)A[i * N + j] * (MATRES)val;
    1690:	00041503          	lh	a0,0(s0)
    1694:	000d0593          	mv	a1,s10
        for (j = 0; j < N; j++)
    1698:	00240413          	addi	s0,s0,2
            C[i * N + j] = (MATRES)A[i * N + j] * (MATRES)val;
    169c:	395030ef          	jal	ra,5230 <__mulsi3>
    16a0:	00a4a023          	sw	a0,0(s1)
        for (j = 0; j < N; j++)
    16a4:	00448493          	addi	s1,s1,4
    16a8:	fe8914e3          	bne	s2,s0,1690 <matrix_mul_const+0x70>
    for (i = 0; i < N; i++)
    16ac:	00198993          	addi	s3,s3,1
    16b0:	016a0a33          	add	s4,s4,s6
    16b4:	417a8933          	sub	s2,s5,s7
    16b8:	fd3b14e3          	bne	s6,s3,1680 <matrix_mul_const+0x60>
        }
    }
}
    16bc:	02c12083          	lw	ra,44(sp)
    16c0:	02812403          	lw	s0,40(sp)
    16c4:	02412483          	lw	s1,36(sp)
    16c8:	02012903          	lw	s2,32(sp)
    16cc:	01c12983          	lw	s3,28(sp)
    16d0:	01812a03          	lw	s4,24(sp)
    16d4:	01412a83          	lw	s5,20(sp)
    16d8:	01012b03          	lw	s6,16(sp)
    16dc:	00c12b83          	lw	s7,12(sp)
    16e0:	00812c03          	lw	s8,8(sp)
    16e4:	00412c83          	lw	s9,4(sp)
    16e8:	00012d03          	lw	s10,0(sp)
    16ec:	03010113          	addi	sp,sp,48
    16f0:	00008067          	ret
    16f4:	00008067          	ret

000016f8 <matrix_add_const>:
*/
void
matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val)
{
    ee_u32 i, j;
    for (i = 0; i < N; i++)
    16f8:	04050663          	beqz	a0,1744 <matrix_add_const+0x4c>
    16fc:	40a008b3          	neg	a7,a0
    1700:	00151693          	slli	a3,a0,0x1
    {
        for (j = 0; j < N; j++)
        {
            A[i * N + j] += val;
    1704:	01061613          	slli	a2,a2,0x10
    1708:	00d586b3          	add	a3,a1,a3
    170c:	00189313          	slli	t1,a7,0x1
    1710:	01065613          	srli	a2,a2,0x10
    for (i = 0; i < N; i++)
    1714:	00000593          	li	a1,0
    1718:	00289893          	slli	a7,a7,0x2
        for (j = 0; j < N; j++)
    171c:	00d30833          	add	a6,t1,a3
{
    1720:	00080793          	mv	a5,a6
            A[i * N + j] += val;
    1724:	0007d703          	lhu	a4,0(a5)
        for (j = 0; j < N; j++)
    1728:	00278793          	addi	a5,a5,2
            A[i * N + j] += val;
    172c:	00e60733          	add	a4,a2,a4
    1730:	fee79f23          	sh	a4,-2(a5)
        for (j = 0; j < N; j++)
    1734:	fef698e3          	bne	a3,a5,1724 <matrix_add_const+0x2c>
    for (i = 0; i < N; i++)
    1738:	00158593          	addi	a1,a1,1
    173c:	411806b3          	sub	a3,a6,a7
    1740:	fcb51ee3          	bne	a0,a1,171c <matrix_add_const+0x24>
        }
    }
}
    1744:	00008067          	ret

00001748 <matrix_mul_vect>:
*/
void
matrix_mul_vect(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B)
{
    ee_u32 i, j;
    for (i = 0; i < N; i++)
    1748:	0c050c63          	beqz	a0,1820 <matrix_mul_vect+0xd8>
{
    174c:	fd010113          	addi	sp,sp,-48
    1750:	01412c23          	sw	s4,24(sp)
    1754:	01512a23          	sw	s5,20(sp)
    1758:	00058a13          	mv	s4,a1
    175c:	01712623          	sw	s7,12(sp)
    1760:	00050a93          	mv	s5,a0
    {
        C[i] = 0;
    1764:	00251b93          	slli	s7,a0,0x2
{
    1768:	01312e23          	sw	s3,28(sp)
    176c:	01612823          	sw	s6,16(sp)
    1770:	01812423          	sw	s8,8(sp)
    1774:	00068b13          	mv	s6,a3
    1778:	00060c13          	mv	s8,a2
        C[i] = 0;
    177c:	00000593          	li	a1,0
    1780:	000b8613          	mv	a2,s7
    1784:	000a0513          	mv	a0,s4
    1788:	001a9993          	slli	s3,s5,0x1
{
    178c:	01912223          	sw	s9,4(sp)
    1790:	02112623          	sw	ra,44(sp)
    1794:	02812423          	sw	s0,40(sp)
    1798:	02912223          	sw	s1,36(sp)
    179c:	03212023          	sw	s2,32(sp)
    17a0:	017a0bb3          	add	s7,s4,s7
        C[i] = 0;
    17a4:	59d030ef          	jal	ra,5540 <memset>
    17a8:	013b09b3          	add	s3,s6,s3
    17ac:	00000c93          	li	s9,0
        for (j = 0; j < N; j++)
    17b0:	001c9493          	slli	s1,s9,0x1
    17b4:	009c04b3          	add	s1,s8,s1
        C[i] = 0;
    17b8:	000b0413          	mv	s0,s6
    17bc:	00000913          	li	s2,0
        {
            C[i] += (MATRES)A[i * N + j] * (MATRES)B[j];
    17c0:	00041583          	lh	a1,0(s0)
    17c4:	00049503          	lh	a0,0(s1)
        for (j = 0; j < N; j++)
    17c8:	00240413          	addi	s0,s0,2
    17cc:	00248493          	addi	s1,s1,2
            C[i] += (MATRES)A[i * N + j] * (MATRES)B[j];
    17d0:	261030ef          	jal	ra,5230 <__mulsi3>
    17d4:	00a90933          	add	s2,s2,a0
        for (j = 0; j < N; j++)
    17d8:	fe8994e3          	bne	s3,s0,17c0 <matrix_mul_vect+0x78>
    17dc:	012a2023          	sw	s2,0(s4)
    for (i = 0; i < N; i++)
    17e0:	004a0a13          	addi	s4,s4,4
    17e4:	015c8cb3          	add	s9,s9,s5
    17e8:	fd4b94e3          	bne	s7,s4,17b0 <matrix_mul_vect+0x68>
        }
    }
}
    17ec:	02c12083          	lw	ra,44(sp)
    17f0:	02812403          	lw	s0,40(sp)
    17f4:	02412483          	lw	s1,36(sp)
    17f8:	02012903          	lw	s2,32(sp)
    17fc:	01c12983          	lw	s3,28(sp)
    1800:	01812a03          	lw	s4,24(sp)
    1804:	01412a83          	lw	s5,20(sp)
    1808:	01012b03          	lw	s6,16(sp)
    180c:	00c12b83          	lw	s7,12(sp)
    1810:	00812c03          	lw	s8,8(sp)
    1814:	00412c83          	lw	s9,4(sp)
    1818:	03010113          	addi	sp,sp,48
    181c:	00008067          	ret
    1820:	00008067          	ret

00001824 <matrix_mul_matrix>:
        Basic code is used in many algorithms, mostly with minor changes such as
   scaling.
*/
void
matrix_mul_matrix(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B)
{
    1824:	fb010113          	addi	sp,sp,-80
    1828:	04112623          	sw	ra,76(sp)
    182c:	04812423          	sw	s0,72(sp)
    1830:	04912223          	sw	s1,68(sp)
    1834:	05212023          	sw	s2,64(sp)
    1838:	03312e23          	sw	s3,60(sp)
    183c:	03412c23          	sw	s4,56(sp)
    1840:	03512a23          	sw	s5,52(sp)
    1844:	03612823          	sw	s6,48(sp)
    1848:	03712623          	sw	s7,44(sp)
    184c:	03812423          	sw	s8,40(sp)
    1850:	03912223          	sw	s9,36(sp)
    1854:	03a12023          	sw	s10,32(sp)
    1858:	01b12e23          	sw	s11,28(sp)
    185c:	00b12423          	sw	a1,8(sp)
    1860:	00d12623          	sw	a3,12(sp)
    ee_u32 i, j, k;
    for (i = 0; i < N; i++)
    1864:	0a050463          	beqz	a0,190c <matrix_mul_matrix+0xe8>
    1868:	00151413          	slli	s0,a0,0x1
    {
        for (j = 0; j < N; j++)
        {
            C[i * N + j] = 0;
    186c:	00251793          	slli	a5,a0,0x2
    1870:	00050b13          	mv	s6,a0
    1874:	00060a93          	mv	s5,a2
    1878:	008604b3          	add	s1,a2,s0
    187c:	00f12223          	sw	a5,4(sp)
    1880:	00000b93          	li	s7,0
    for (i = 0; i < N; i++)
    1884:	00000c13          	li	s8,0
        for (j = 0; j < N; j++)
    1888:	00812783          	lw	a5,8(sp)
            C[i * N + j] = 0;
    188c:	00412603          	lw	a2,4(sp)
    1890:	002b9913          	slli	s2,s7,0x2
    1894:	01278933          	add	s2,a5,s2
    1898:	00000593          	li	a1,0
    189c:	00090513          	mv	a0,s2
    18a0:	4a1030ef          	jal	ra,5540 <memset>
    18a4:	00c12983          	lw	s3,12(sp)
        for (j = 0; j < N; j++)
    18a8:	00000a13          	li	s4,0
            for (k = 0; k < N; k++)
    18ac:	00098d93          	mv	s11,s3
    18b0:	000a8d13          	mv	s10,s5
    18b4:	00000c93          	li	s9,0
            {
                C[i * N + j] += (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
    18b8:	000d9583          	lh	a1,0(s11)
    18bc:	000d1503          	lh	a0,0(s10)
            for (k = 0; k < N; k++)
    18c0:	002d0d13          	addi	s10,s10,2
    18c4:	008d8db3          	add	s11,s11,s0
                C[i * N + j] += (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
    18c8:	169030ef          	jal	ra,5230 <__mulsi3>
    18cc:	00ac8cb3          	add	s9,s9,a0
            for (k = 0; k < N; k++)
    18d0:	ffa494e3          	bne	s1,s10,18b8 <matrix_mul_matrix+0x94>
    18d4:	01992023          	sw	s9,0(s2)
        for (j = 0; j < N; j++)
    18d8:	001a0793          	addi	a5,s4,1
    18dc:	00490913          	addi	s2,s2,4
    18e0:	00298993          	addi	s3,s3,2
    18e4:	00fb0663          	beq	s6,a5,18f0 <matrix_mul_matrix+0xcc>
    18e8:	00078a13          	mv	s4,a5
    18ec:	fc1ff06f          	j	18ac <matrix_mul_matrix+0x88>
    for (i = 0; i < N; i++)
    18f0:	001c0793          	addi	a5,s8,1
    18f4:	008a8ab3          	add	s5,s5,s0
    18f8:	016b8bb3          	add	s7,s7,s6
    18fc:	008484b3          	add	s1,s1,s0
    1900:	014c0663          	beq	s8,s4,190c <matrix_mul_matrix+0xe8>
    1904:	00078c13          	mv	s8,a5
    1908:	f81ff06f          	j	1888 <matrix_mul_matrix+0x64>
            }
        }
    }
}
    190c:	04c12083          	lw	ra,76(sp)
    1910:	04812403          	lw	s0,72(sp)
    1914:	04412483          	lw	s1,68(sp)
    1918:	04012903          	lw	s2,64(sp)
    191c:	03c12983          	lw	s3,60(sp)
    1920:	03812a03          	lw	s4,56(sp)
    1924:	03412a83          	lw	s5,52(sp)
    1928:	03012b03          	lw	s6,48(sp)
    192c:	02c12b83          	lw	s7,44(sp)
    1930:	02812c03          	lw	s8,40(sp)
    1934:	02412c83          	lw	s9,36(sp)
    1938:	02012d03          	lw	s10,32(sp)
    193c:	01c12d83          	lw	s11,28(sp)
    1940:	05010113          	addi	sp,sp,80
    1944:	00008067          	ret

00001948 <matrix_mul_matrix_bitextract>:
        Basic code is used in many algorithms, mostly with minor changes such as
   scaling.
*/
void
matrix_mul_matrix_bitextract(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B)
{
    1948:	fb010113          	addi	sp,sp,-80
    194c:	04112623          	sw	ra,76(sp)
    1950:	04812423          	sw	s0,72(sp)
    1954:	04912223          	sw	s1,68(sp)
    1958:	05212023          	sw	s2,64(sp)
    195c:	03312e23          	sw	s3,60(sp)
    1960:	03412c23          	sw	s4,56(sp)
    1964:	03512a23          	sw	s5,52(sp)
    1968:	03612823          	sw	s6,48(sp)
    196c:	03712623          	sw	s7,44(sp)
    1970:	03812423          	sw	s8,40(sp)
    1974:	03912223          	sw	s9,36(sp)
    1978:	03a12023          	sw	s10,32(sp)
    197c:	01b12e23          	sw	s11,28(sp)
    1980:	00b12423          	sw	a1,8(sp)
    1984:	00d12623          	sw	a3,12(sp)
    ee_u32 i, j, k;
    for (i = 0; i < N; i++)
    1988:	0a050e63          	beqz	a0,1a44 <matrix_mul_matrix_bitextract+0xfc>
    198c:	00151413          	slli	s0,a0,0x1
    {
        for (j = 0; j < N; j++)
        {
            C[i * N + j] = 0;
    1990:	00251793          	slli	a5,a0,0x2
    1994:	00050b13          	mv	s6,a0
    1998:	00060a93          	mv	s5,a2
    199c:	008604b3          	add	s1,a2,s0
    19a0:	00f12223          	sw	a5,4(sp)
    19a4:	00000b93          	li	s7,0
    for (i = 0; i < N; i++)
    19a8:	00000c13          	li	s8,0
        for (j = 0; j < N; j++)
    19ac:	00812783          	lw	a5,8(sp)
            C[i * N + j] = 0;
    19b0:	00412603          	lw	a2,4(sp)
    19b4:	002b9913          	slli	s2,s7,0x2
    19b8:	01278933          	add	s2,a5,s2
    19bc:	00000593          	li	a1,0
    19c0:	00090513          	mv	a0,s2
    19c4:	37d030ef          	jal	ra,5540 <memset>
    19c8:	00c12983          	lw	s3,12(sp)
        for (j = 0; j < N; j++)
    19cc:	00000a13          	li	s4,0
            for (k = 0; k < N; k++)
    19d0:	00098d93          	mv	s11,s3
    19d4:	000a8d13          	mv	s10,s5
    19d8:	00000c93          	li	s9,0
            {
                MATRES tmp = (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
    19dc:	000d9583          	lh	a1,0(s11)
    19e0:	000d1503          	lh	a0,0(s10)
            for (k = 0; k < N; k++)
    19e4:	002d0d13          	addi	s10,s10,2
    19e8:	008d8db3          	add	s11,s11,s0
                MATRES tmp = (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
    19ec:	045030ef          	jal	ra,5230 <__mulsi3>
                C[i * N + j] += bit_extract(tmp, 2, 4) * bit_extract(tmp, 5, 7);
    19f0:	40255613          	srai	a2,a0,0x2
    19f4:	40555593          	srai	a1,a0,0x5
    19f8:	07f5f593          	andi	a1,a1,127
    19fc:	00f67513          	andi	a0,a2,15
    1a00:	031030ef          	jal	ra,5230 <__mulsi3>
    1a04:	00ac8cb3          	add	s9,s9,a0
            for (k = 0; k < N; k++)
    1a08:	fda49ae3          	bne	s1,s10,19dc <matrix_mul_matrix_bitextract+0x94>
    1a0c:	01992023          	sw	s9,0(s2)
        for (j = 0; j < N; j++)
    1a10:	001a0793          	addi	a5,s4,1
    1a14:	00490913          	addi	s2,s2,4
    1a18:	00298993          	addi	s3,s3,2
    1a1c:	00fb0663          	beq	s6,a5,1a28 <matrix_mul_matrix_bitextract+0xe0>
    1a20:	00078a13          	mv	s4,a5
    1a24:	fadff06f          	j	19d0 <matrix_mul_matrix_bitextract+0x88>
    for (i = 0; i < N; i++)
    1a28:	001c0793          	addi	a5,s8,1
    1a2c:	008a8ab3          	add	s5,s5,s0
    1a30:	016b8bb3          	add	s7,s7,s6
    1a34:	008484b3          	add	s1,s1,s0
    1a38:	014c0663          	beq	s8,s4,1a44 <matrix_mul_matrix_bitextract+0xfc>
    1a3c:	00078c13          	mv	s8,a5
    1a40:	f6dff06f          	j	19ac <matrix_mul_matrix_bitextract+0x64>
            }
        }
    }
}
    1a44:	04c12083          	lw	ra,76(sp)
    1a48:	04812403          	lw	s0,72(sp)
    1a4c:	04412483          	lw	s1,68(sp)
    1a50:	04012903          	lw	s2,64(sp)
    1a54:	03c12983          	lw	s3,60(sp)
    1a58:	03812a03          	lw	s4,56(sp)
    1a5c:	03412a83          	lw	s5,52(sp)
    1a60:	03012b03          	lw	s6,48(sp)
    1a64:	02c12b83          	lw	s7,44(sp)
    1a68:	02812c03          	lw	s8,40(sp)
    1a6c:	02412c83          	lw	s9,36(sp)
    1a70:	02012d03          	lw	s10,32(sp)
    1a74:	01c12d83          	lw	s11,28(sp)
    1a78:	05010113          	addi	sp,sp,80
    1a7c:	00008067          	ret

00001a80 <matrix_test>:
{
    1a80:	fb010113          	addi	sp,sp,-80
    1a84:	04912223          	sw	s1,68(sp)
    1a88:	03412c23          	sw	s4,56(sp)
    MATDAT clipval = matrix_big(val);
    1a8c:	fffff7b7          	lui	a5,0xfffff
{
    1a90:	04112623          	sw	ra,76(sp)
    1a94:	04812423          	sw	s0,72(sp)
    1a98:	05212023          	sw	s2,64(sp)
    1a9c:	03312e23          	sw	s3,60(sp)
    1aa0:	03512a23          	sw	s5,52(sp)
    1aa4:	03612823          	sw	s6,48(sp)
    1aa8:	03712623          	sw	s7,44(sp)
    1aac:	03812423          	sw	s8,40(sp)
    1ab0:	03912223          	sw	s9,36(sp)
    1ab4:	03a12023          	sw	s10,32(sp)
    1ab8:	01b12e23          	sw	s11,28(sp)
    1abc:	00c12423          	sw	a2,8(sp)
    1ac0:	00d12623          	sw	a3,12(sp)
    1ac4:	00058493          	mv	s1,a1
    MATDAT clipval = matrix_big(val);
    1ac8:	00f76a33          	or	s4,a4,a5
    for (i = 0; i < N; i++)
    1acc:	3a050663          	beqz	a0,1e78 <matrix_test+0x3f8>
    1ad0:	40a00bb3          	neg	s7,a0
    1ad4:	00151a93          	slli	s5,a0,0x1
    1ad8:	001b9793          	slli	a5,s7,0x1
    1adc:	00ca8ab3          	add	s5,s5,a2
            A[i * N + j] += val;
    1ae0:	01071413          	slli	s0,a4,0x10
    1ae4:	00070913          	mv	s2,a4
    1ae8:	00050893          	mv	a7,a0
    1aec:	01045413          	srli	s0,s0,0x10
    1af0:	00f12023          	sw	a5,0(sp)
    1af4:	000a8613          	mv	a2,s5
    for (i = 0; i < N; i++)
    1af8:	00000b13          	li	s6,0
    1afc:	002b9b93          	slli	s7,s7,0x2
        for (j = 0; j < N; j++)
    1b00:	00012783          	lw	a5,0(sp)
    1b04:	00c78833          	add	a6,a5,a2
{
    1b08:	00080713          	mv	a4,a6
            A[i * N + j] += val;
    1b0c:	00075683          	lhu	a3,0(a4)
        for (j = 0; j < N; j++)
    1b10:	00270713          	addi	a4,a4,2
            A[i * N + j] += val;
    1b14:	00d406b3          	add	a3,s0,a3
    1b18:	fed71f23          	sh	a3,-2(a4)
        for (j = 0; j < N; j++)
    1b1c:	fee618e3          	bne	a2,a4,1b0c <matrix_test+0x8c>
    for (i = 0; i < N; i++)
    1b20:	001b0993          	addi	s3,s6,1
    1b24:	41780633          	sub	a2,a6,s7
    1b28:	01388663          	beq	a7,s3,1b34 <matrix_test+0xb4>
    1b2c:	00098b13          	mv	s6,s3
    1b30:	fd1ff06f          	j	1b00 <matrix_test+0x80>
            C[i * N + j] = (MATRES)A[i * N + j] * (MATRES)val;
    1b34:	00000c13          	li	s8,0
    1b38:	00012223          	sw	zero,4(sp)
        for (j = 0; j < N; j++)
    1b3c:	00012783          	lw	a5,0(sp)
    1b40:	002c1693          	slli	a3,s8,0x2
    1b44:	00968d33          	add	s10,a3,s1
    1b48:	01578cb3          	add	s9,a5,s5
    1b4c:	000c8d93          	mv	s11,s9
            C[i * N + j] = (MATRES)A[i * N + j] * (MATRES)val;
    1b50:	000d9503          	lh	a0,0(s11)
    1b54:	00090593          	mv	a1,s2
        for (j = 0; j < N; j++)
    1b58:	002d8d93          	addi	s11,s11,2
            C[i * N + j] = (MATRES)A[i * N + j] * (MATRES)val;
    1b5c:	6d4030ef          	jal	ra,5230 <__mulsi3>
    1b60:	00ad2023          	sw	a0,0(s10)
        for (j = 0; j < N; j++)
    1b64:	004d0d13          	addi	s10,s10,4
    1b68:	ff5d94e3          	bne	s11,s5,1b50 <matrix_test+0xd0>
    for (i = 0; i < N; i++)
    1b6c:	00412783          	lw	a5,4(sp)
    1b70:	013c0c33          	add	s8,s8,s3
    1b74:	417c8ab3          	sub	s5,s9,s7
    1b78:	00178713          	addi	a4,a5,1 # fffff001 <RAM_SIZE+0xfffef001>
    1b7c:	01678663          	beq	a5,s6,1b88 <matrix_test+0x108>
    1b80:	00e12223          	sw	a4,4(sp)
    1b84:	fb9ff06f          	j	1b3c <matrix_test+0xbc>
    1b88:	00299a93          	slli	s5,s3,0x2
    1b8c:	01548ab3          	add	s5,s1,s5
    1b90:	41300c33          	neg	s8,s3
            if (tmp > clipval)
    1b94:	000a8893          	mv	a7,s5
    1b98:	00000513          	li	a0,0
    1b9c:	00000693          	li	a3,0
    1ba0:	00000593          	li	a1,0
    1ba4:	00000e13          	li	t3,0
    for (i = 0; i < N; i++)
    1ba8:	003c1c13          	slli	s8,s8,0x3
        for (j = 0; j < N; j++)
    1bac:	011b8333          	add	t1,s7,a7
    1bb0:	00030713          	mv	a4,t1
    1bb4:	0180006f          	j	1bcc <matrix_test+0x14c>
                ret += 10;
    1bb8:	01081513          	slli	a0,a6,0x10
        for (j = 0; j < N; j++)
    1bbc:	00470713          	addi	a4,a4,4
                ret += 10;
    1bc0:	41055513          	srai	a0,a0,0x10
                tmp = 0;
    1bc4:	00000593          	li	a1,0
        for (j = 0; j < N; j++)
    1bc8:	02e88c63          	beq	a7,a4,1c00 <matrix_test+0x180>
                ret += (cur > prev) ? 1 : 0;
    1bcc:	00068613          	mv	a2,a3
            cur = C[i * N + j];
    1bd0:	00072683          	lw	a3,0(a4)
                ret += 10;
    1bd4:	01051513          	slli	a0,a0,0x10
    1bd8:	01055513          	srli	a0,a0,0x10
                ret += (cur > prev) ? 1 : 0;
    1bdc:	00d62633          	slt	a2,a2,a3
            tmp += cur;
    1be0:	00d585b3          	add	a1,a1,a3
                ret += 10;
    1be4:	00a50813          	addi	a6,a0,10
                ret += (cur > prev) ? 1 : 0;
    1be8:	00c50533          	add	a0,a0,a2
            if (tmp > clipval)
    1bec:	fcba46e3          	blt	s4,a1,1bb8 <matrix_test+0x138>
                ret += (cur > prev) ? 1 : 0;
    1bf0:	01051513          	slli	a0,a0,0x10
        for (j = 0; j < N; j++)
    1bf4:	00470713          	addi	a4,a4,4
                ret += (cur > prev) ? 1 : 0;
    1bf8:	41055513          	srai	a0,a0,0x10
        for (j = 0; j < N; j++)
    1bfc:	fce898e3          	bne	a7,a4,1bcc <matrix_test+0x14c>
    for (i = 0; i < N; i++)
    1c00:	001e0713          	addi	a4,t3,1
    1c04:	418308b3          	sub	a7,t1,s8
    1c08:	016e0663          	beq	t3,s6,1c14 <matrix_test+0x194>
    1c0c:	00070e13          	mv	t3,a4
    1c10:	f9dff06f          	j	1bac <matrix_test+0x12c>
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1c14:	00000593          	li	a1,0
    1c18:	455000ef          	jal	ra,286c <crc16>
    matrix_mul_vect(N, C, A, B);
    1c1c:	00c12683          	lw	a3,12(sp)
    1c20:	00812603          	lw	a2,8(sp)
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1c24:	00050c93          	mv	s9,a0
    matrix_mul_vect(N, C, A, B);
    1c28:	00048593          	mv	a1,s1
    1c2c:	00098513          	mv	a0,s3
    1c30:	b19ff0ef          	jal	ra,1748 <matrix_mul_vect>
    1c34:	00000513          	li	a0,0
    1c38:	00000693          	li	a3,0
    1c3c:	00000813          	li	a6,0
    1c40:	00000e13          	li	t3,0
        for (j = 0; j < N; j++)
    1c44:	015b8333          	add	t1,s7,s5
    1c48:	00030713          	mv	a4,t1
    1c4c:	0180006f          	j	1c64 <matrix_test+0x1e4>
                ret += 10;
    1c50:	01089513          	slli	a0,a7,0x10
        for (j = 0; j < N; j++)
    1c54:	00470713          	addi	a4,a4,4
                ret += 10;
    1c58:	41055513          	srai	a0,a0,0x10
                tmp = 0;
    1c5c:	00000813          	li	a6,0
        for (j = 0; j < N; j++)
    1c60:	02ea8c63          	beq	s5,a4,1c98 <matrix_test+0x218>
                ret += (cur > prev) ? 1 : 0;
    1c64:	00068613          	mv	a2,a3
            cur = C[i * N + j];
    1c68:	00072683          	lw	a3,0(a4)
                ret += 10;
    1c6c:	01051513          	slli	a0,a0,0x10
    1c70:	01055513          	srli	a0,a0,0x10
                ret += (cur > prev) ? 1 : 0;
    1c74:	00d62633          	slt	a2,a2,a3
            tmp += cur;
    1c78:	00d80833          	add	a6,a6,a3
                ret += 10;
    1c7c:	00a50893          	addi	a7,a0,10
                ret += (cur > prev) ? 1 : 0;
    1c80:	00c50533          	add	a0,a0,a2
            if (tmp > clipval)
    1c84:	fd0a46e3          	blt	s4,a6,1c50 <matrix_test+0x1d0>
                ret += (cur > prev) ? 1 : 0;
    1c88:	01051513          	slli	a0,a0,0x10
        for (j = 0; j < N; j++)
    1c8c:	00470713          	addi	a4,a4,4
                ret += (cur > prev) ? 1 : 0;
    1c90:	41055513          	srai	a0,a0,0x10
        for (j = 0; j < N; j++)
    1c94:	fcea98e3          	bne	s5,a4,1c64 <matrix_test+0x1e4>
    for (i = 0; i < N; i++)
    1c98:	001e0713          	addi	a4,t3,1
    1c9c:	41830ab3          	sub	s5,t1,s8
    1ca0:	016e0663          	beq	t3,s6,1cac <matrix_test+0x22c>
    1ca4:	00070e13          	mv	t3,a4
    1ca8:	f9dff06f          	j	1c44 <matrix_test+0x1c4>
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1cac:	000c8593          	mv	a1,s9
    1cb0:	3bd000ef          	jal	ra,286c <crc16>
    matrix_mul_matrix(N, C, A, B);
    1cb4:	00812603          	lw	a2,8(sp)
    1cb8:	00c12683          	lw	a3,12(sp)
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1cbc:	00050a93          	mv	s5,a0
    matrix_mul_matrix(N, C, A, B);
    1cc0:	00048593          	mv	a1,s1
    1cc4:	00098513          	mv	a0,s3
    1cc8:	b5dff0ef          	jal	ra,1824 <matrix_mul_matrix>
    1ccc:	00000e93          	li	t4,0
    1cd0:	00000513          	li	a0,0
    1cd4:	00000713          	li	a4,0
    1cd8:	00000613          	li	a2,0
    1cdc:	00000e13          	li	t3,0
        for (j = 0; j < N; j++)
    1ce0:	002e9813          	slli	a6,t4,0x2
    1ce4:	01048833          	add	a6,s1,a6
    1ce8:	00000893          	li	a7,0
    1cec:	01c0006f          	j	1d08 <matrix_test+0x288>
                ret += 10;
    1cf0:	01031513          	slli	a0,t1,0x10
        for (j = 0; j < N; j++)
    1cf4:	00188893          	addi	a7,a7,1
                ret += 10;
    1cf8:	41055513          	srai	a0,a0,0x10
                tmp = 0;
    1cfc:	00000613          	li	a2,0
        for (j = 0; j < N; j++)
    1d00:	00480813          	addi	a6,a6,4
    1d04:	0338fe63          	bgeu	a7,s3,1d40 <matrix_test+0x2c0>
                ret += (cur > prev) ? 1 : 0;
    1d08:	00070693          	mv	a3,a4
            cur = C[i * N + j];
    1d0c:	00082703          	lw	a4,0(a6)
                ret += 10;
    1d10:	01051513          	slli	a0,a0,0x10
    1d14:	01055513          	srli	a0,a0,0x10
                ret += (cur > prev) ? 1 : 0;
    1d18:	00e6a6b3          	slt	a3,a3,a4
            tmp += cur;
    1d1c:	00e60633          	add	a2,a2,a4
                ret += 10;
    1d20:	00a50313          	addi	t1,a0,10
                ret += (cur > prev) ? 1 : 0;
    1d24:	00d50533          	add	a0,a0,a3
            if (tmp > clipval)
    1d28:	fcca44e3          	blt	s4,a2,1cf0 <matrix_test+0x270>
                ret += (cur > prev) ? 1 : 0;
    1d2c:	01051513          	slli	a0,a0,0x10
        for (j = 0; j < N; j++)
    1d30:	00188893          	addi	a7,a7,1
                ret += (cur > prev) ? 1 : 0;
    1d34:	41055513          	srai	a0,a0,0x10
        for (j = 0; j < N; j++)
    1d38:	00480813          	addi	a6,a6,4
    1d3c:	fd38e6e3          	bltu	a7,s3,1d08 <matrix_test+0x288>
    for (i = 0; i < N; i++)
    1d40:	001e0e13          	addi	t3,t3,1
    1d44:	013e8eb3          	add	t4,t4,s3
    1d48:	f93e6ce3          	bltu	t3,s3,1ce0 <matrix_test+0x260>
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1d4c:	000a8593          	mv	a1,s5
    1d50:	31d000ef          	jal	ra,286c <crc16>
    matrix_mul_matrix_bitextract(N, C, A, B);
    1d54:	00812603          	lw	a2,8(sp)
    1d58:	00c12683          	lw	a3,12(sp)
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1d5c:	00050a93          	mv	s5,a0
    matrix_mul_matrix_bitextract(N, C, A, B);
    1d60:	00048593          	mv	a1,s1
    1d64:	00098513          	mv	a0,s3
    1d68:	be1ff0ef          	jal	ra,1948 <matrix_mul_matrix_bitextract>
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1d6c:	000a8913          	mv	s2,s5
    matrix_mul_matrix_bitextract(N, C, A, B);
    1d70:	00000e93          	li	t4,0
    1d74:	00000513          	li	a0,0
    1d78:	00000713          	li	a4,0
    1d7c:	00000613          	li	a2,0
    1d80:	00000e13          	li	t3,0
        for (j = 0; j < N; j++)
    1d84:	002e9813          	slli	a6,t4,0x2
    1d88:	01048833          	add	a6,s1,a6
    1d8c:	00000893          	li	a7,0
    1d90:	01c0006f          	j	1dac <matrix_test+0x32c>
                ret += 10;
    1d94:	01031513          	slli	a0,t1,0x10
        for (j = 0; j < N; j++)
    1d98:	00188893          	addi	a7,a7,1
                ret += 10;
    1d9c:	41055513          	srai	a0,a0,0x10
                tmp = 0;
    1da0:	00000613          	li	a2,0
        for (j = 0; j < N; j++)
    1da4:	00480813          	addi	a6,a6,4
    1da8:	0338fe63          	bgeu	a7,s3,1de4 <matrix_test+0x364>
                ret += (cur > prev) ? 1 : 0;
    1dac:	00070693          	mv	a3,a4
            cur = C[i * N + j];
    1db0:	00082703          	lw	a4,0(a6)
                ret += 10;
    1db4:	01051513          	slli	a0,a0,0x10
    1db8:	01055513          	srli	a0,a0,0x10
                ret += (cur > prev) ? 1 : 0;
    1dbc:	00e6a6b3          	slt	a3,a3,a4
            tmp += cur;
    1dc0:	00e60633          	add	a2,a2,a4
                ret += 10;
    1dc4:	00a50313          	addi	t1,a0,10
                ret += (cur > prev) ? 1 : 0;
    1dc8:	00d50533          	add	a0,a0,a3
            if (tmp > clipval)
    1dcc:	fcca44e3          	blt	s4,a2,1d94 <matrix_test+0x314>
                ret += (cur > prev) ? 1 : 0;
    1dd0:	01051513          	slli	a0,a0,0x10
        for (j = 0; j < N; j++)
    1dd4:	00188893          	addi	a7,a7,1
                ret += (cur > prev) ? 1 : 0;
    1dd8:	41055513          	srai	a0,a0,0x10
        for (j = 0; j < N; j++)
    1ddc:	00480813          	addi	a6,a6,4
    1de0:	fd38e6e3          	bltu	a7,s3,1dac <matrix_test+0x32c>
    for (i = 0; i < N; i++)
    1de4:	001e0e13          	addi	t3,t3,1
    1de8:	013e8eb3          	add	t4,t4,s3
    1dec:	f93e6ce3          	bltu	t3,s3,1d84 <matrix_test+0x304>
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1df0:	00090593          	mv	a1,s2
    1df4:	279000ef          	jal	ra,286c <crc16>
    1df8:	00000593          	li	a1,0
    1dfc:	00000613          	li	a2,0
        for (j = 0; j < N; j++)
    1e00:	00812703          	lw	a4,8(sp)
    1e04:	00159793          	slli	a5,a1,0x1
    1e08:	00000693          	li	a3,0
    1e0c:	00f707b3          	add	a5,a4,a5
            A[i * N + j] += val;
    1e10:	0007d703          	lhu	a4,0(a5)
        for (j = 0; j < N; j++)
    1e14:	00278793          	addi	a5,a5,2
    1e18:	00168693          	addi	a3,a3,1
            A[i * N + j] += val;
    1e1c:	40870733          	sub	a4,a4,s0
    1e20:	fee79f23          	sh	a4,-2(a5)
        for (j = 0; j < N; j++)
    1e24:	ff36e6e3          	bltu	a3,s3,1e10 <matrix_test+0x390>
    for (i = 0; i < N; i++)
    1e28:	00160613          	addi	a2,a2,1
    1e2c:	013585b3          	add	a1,a1,s3
    1e30:	fd3668e3          	bltu	a2,s3,1e00 <matrix_test+0x380>
}
    1e34:	04c12083          	lw	ra,76(sp)
    1e38:	04812403          	lw	s0,72(sp)
    return crc;
    1e3c:	01051513          	slli	a0,a0,0x10
}
    1e40:	04412483          	lw	s1,68(sp)
    1e44:	04012903          	lw	s2,64(sp)
    1e48:	03c12983          	lw	s3,60(sp)
    1e4c:	03812a03          	lw	s4,56(sp)
    1e50:	03412a83          	lw	s5,52(sp)
    1e54:	03012b03          	lw	s6,48(sp)
    1e58:	02c12b83          	lw	s7,44(sp)
    1e5c:	02812c03          	lw	s8,40(sp)
    1e60:	02412c83          	lw	s9,36(sp)
    1e64:	02012d03          	lw	s10,32(sp)
    1e68:	01c12d83          	lw	s11,28(sp)
    return crc;
    1e6c:	41055513          	srai	a0,a0,0x10
}
    1e70:	05010113          	addi	sp,sp,80
    1e74:	00008067          	ret
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1e78:	00000593          	li	a1,0
    1e7c:	1f1000ef          	jal	ra,286c <crc16>
    matrix_mul_vect(N, C, A, B);
    1e80:	00c12983          	lw	s3,12(sp)
    1e84:	00812903          	lw	s2,8(sp)
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1e88:	00050413          	mv	s0,a0
    matrix_mul_vect(N, C, A, B);
    1e8c:	00098693          	mv	a3,s3
    1e90:	00090613          	mv	a2,s2
    1e94:	00048593          	mv	a1,s1
    1e98:	00000513          	li	a0,0
    1e9c:	8adff0ef          	jal	ra,1748 <matrix_mul_vect>
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1ea0:	00040593          	mv	a1,s0
    1ea4:	00000513          	li	a0,0
    1ea8:	1c5000ef          	jal	ra,286c <crc16>
    matrix_mul_matrix(N, C, A, B);
    1eac:	00098693          	mv	a3,s3
    1eb0:	00090613          	mv	a2,s2
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1eb4:	00050413          	mv	s0,a0
    matrix_mul_matrix(N, C, A, B);
    1eb8:	00048593          	mv	a1,s1
    1ebc:	00000513          	li	a0,0
    1ec0:	965ff0ef          	jal	ra,1824 <matrix_mul_matrix>
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1ec4:	00040593          	mv	a1,s0
    1ec8:	00000513          	li	a0,0
    1ecc:	1a1000ef          	jal	ra,286c <crc16>
    1ed0:	00050413          	mv	s0,a0
    matrix_mul_matrix_bitextract(N, C, A, B);
    1ed4:	00048593          	mv	a1,s1
    1ed8:	00098693          	mv	a3,s3
    1edc:	00090613          	mv	a2,s2
    1ee0:	00000513          	li	a0,0
    1ee4:	a65ff0ef          	jal	ra,1948 <matrix_mul_matrix_bitextract>
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1ee8:	00040593          	mv	a1,s0
    1eec:	00000513          	li	a0,0
    1ef0:	17d000ef          	jal	ra,286c <crc16>
    for (i = 0; i < N; i++)
    1ef4:	f41ff06f          	j	1e34 <matrix_test+0x3b4>

00001ef8 <core_bench_matrix>:
{
    1ef8:	ff010113          	addi	sp,sp,-16
    1efc:	00812423          	sw	s0,8(sp)
    crc = crc16(matrix_test(N, C, A, B, val), crc);
    1f00:	00852683          	lw	a3,8(a0)
{
    1f04:	00060413          	mv	s0,a2
    1f08:	00058713          	mv	a4,a1
    crc = crc16(matrix_test(N, C, A, B, val), crc);
    1f0c:	00452603          	lw	a2,4(a0)
    1f10:	00c52583          	lw	a1,12(a0)
    1f14:	00052503          	lw	a0,0(a0)
{
    1f18:	00112623          	sw	ra,12(sp)
    crc = crc16(matrix_test(N, C, A, B, val), crc);
    1f1c:	b65ff0ef          	jal	ra,1a80 <matrix_test>
    1f20:	00040593          	mv	a1,s0
}
    1f24:	00812403          	lw	s0,8(sp)
    1f28:	00c12083          	lw	ra,12(sp)
    1f2c:	01010113          	addi	sp,sp,16
    crc = crc16(matrix_test(N, C, A, B, val), crc);
    1f30:	13d0006f          	j	286c <crc16>

00001f34 <barebones_clock>:
#define CLOCKS_PER_SEC 1000
CORETIMETYPE
barebones_clock()
{
	const CORETIMETYPE * const time_ptr = (CORETIMETYPE*)0xDEADBEEF;
	return *time_ptr;
    1f34:	deadc737          	lui	a4,0xdeadc
    1f38:	ef074503          	lbu	a0,-272(a4) # deadbef0 <RAM_SIZE+0xdeacbef0>
    1f3c:	eef74683          	lbu	a3,-273(a4)
    1f40:	ef174783          	lbu	a5,-271(a4)
    1f44:	ef274703          	lbu	a4,-270(a4)
    1f48:	00851513          	slli	a0,a0,0x8
    1f4c:	00d56533          	or	a0,a0,a3
    1f50:	01079793          	slli	a5,a5,0x10
    1f54:	00a7e7b3          	or	a5,a5,a0
    1f58:	01871513          	slli	a0,a4,0x18
}
    1f5c:	00f56533          	or	a0,a0,a5
    1f60:	00008067          	ret

00001f64 <start_time>:
	return *time_ptr;
    1f64:	deadc637          	lui	a2,0xdeadc
    1f68:	ef064683          	lbu	a3,-272(a2) # deadbef0 <RAM_SIZE+0xdeacbef0>
    1f6c:	eef64583          	lbu	a1,-273(a2)
    1f70:	ef164703          	lbu	a4,-271(a2)
    1f74:	ef264783          	lbu	a5,-270(a2)
    1f78:	00869693          	slli	a3,a3,0x8
    1f7c:	00b6e6b3          	or	a3,a3,a1
    1f80:	01071713          	slli	a4,a4,0x10
    1f84:	00d76733          	or	a4,a4,a3
    1f88:	01879793          	slli	a5,a5,0x18
    1f8c:	00e7e7b3          	or	a5,a5,a4
   cycles to 0.
*/
void
start_time(void)
{
    GETMYTIME(&start_time_val);
    1f90:	c6f1aa23          	sw	a5,-908(gp) # 7004 <start_time_val>
}
    1f94:	00008067          	ret

00001f98 <stop_time>:
	return *time_ptr;
    1f98:	deadc637          	lui	a2,0xdeadc
    1f9c:	ef064683          	lbu	a3,-272(a2) # deadbef0 <RAM_SIZE+0xdeacbef0>
    1fa0:	eef64583          	lbu	a1,-273(a2)
    1fa4:	ef164703          	lbu	a4,-271(a2)
    1fa8:	ef264783          	lbu	a5,-270(a2)
    1fac:	00869693          	slli	a3,a3,0x8
    1fb0:	00b6e6b3          	or	a3,a3,a1
    1fb4:	01071713          	slli	a4,a4,0x10
    1fb8:	00d76733          	or	a4,a4,a3
    1fbc:	01879793          	slli	a5,a5,0x18
    1fc0:	00e7e7b3          	or	a5,a5,a4
   cpu cycles counter.
*/
void
stop_time(void)
{
    GETMYTIME(&stop_time_val);
    1fc4:	c6f1a823          	sw	a5,-912(gp) # 7000 <stop_time_val>
}
    1fc8:	00008067          	ret

00001fcc <get_time>:
   controlled by <TIMER_RES_DIVIDER>
*/
CORE_TICKS
get_time(void)
{
    CORE_TICKS elapsed
    1fcc:	c701a503          	lw	a0,-912(gp) # 7000 <stop_time_val>
    1fd0:	c741a783          	lw	a5,-908(gp) # 7004 <start_time_val>
        = (CORE_TICKS)(MYTIMEDIFF(stop_time_val, start_time_val));
    return elapsed;
}
    1fd4:	40f50533          	sub	a0,a0,a5
    1fd8:	00008067          	ret

00001fdc <time_in_secs>:
   floating point. Default implementation implemented by the EE_TICKS_PER_SEC
   macro above.
*/
secs_ret
time_in_secs(CORE_TICKS ticks)
{
    1fdc:	ff010113          	addi	sp,sp,-16
    secs_ret retval = ((secs_ret)ticks) / (secs_ret)EE_TICKS_PER_SEC;
    1fe0:	3e800593          	li	a1,1000
{
    1fe4:	00112623          	sw	ra,12(sp)
    secs_ret retval = ((secs_ret)ticks) / (secs_ret)EE_TICKS_PER_SEC;
    1fe8:	274030ef          	jal	ra,525c <__udivsi3>
    return retval;
}
    1fec:	00c12083          	lw	ra,12(sp)
    1ff0:	01010113          	addi	sp,sp,16
    1ff4:	00008067          	ret

00001ff8 <portable_init>:
    }
    if (sizeof(ee_u32) != 4)
    {
        ee_printf("ERROR! Please define ee_u32 to a 32b unsigned type!\n");
    }
    p->portable_id = 1;
    1ff8:	00100793          	li	a5,1
    1ffc:	00f50023          	sb	a5,0(a0)
}
    2000:	00008067          	ret

00002004 <portable_fini>:
        Target specific final code
*/
void
portable_fini(core_portable *p)
{
    p->portable_id = 0;
    2004:	00050023          	sb	zero,0(a0)
}
    2008:	00008067          	ret

0000200c <core_init_state>:
    ee_u8 *buf = 0;
#if CORE_DEBUG
    ee_u8 *start = p;
    ee_printf("State: %d,%d\n", size, seed);
#endif
    size--;
    200c:	fff50893          	addi	a7,a0,-1
    next = 0;
    while ((total + next + 1) < size)
    2010:	00100793          	li	a5,1
{
    2014:	00060813          	mv	a6,a2
    while ((total + next + 1) < size)
    2018:	1317f463          	bgeu	a5,a7,2140 <core_init_state+0x134>
    201c:	00158593          	addi	a1,a1,1
    2020:	01059593          	slli	a1,a1,0x10
    2024:	0105d593          	srli	a1,a1,0x10
{
    2028:	ff010113          	addi	sp,sp,-16
    202c:	00006637          	lui	a2,0x6
        switch (seed & 0x7)
        {
            case 0: /* int */
            case 1: /* int */
            case 2: /* int */
                buf  = intpat[(seed >> 3) & 0x3];
    2030:	0035d793          	srli	a5,a1,0x3
{
    2034:	00812623          	sw	s0,12(sp)
        switch (seed & 0x7)
    2038:	00700e93          	li	t4,7
    203c:	0075f713          	andi	a4,a1,7
    ee_u32 total = 0, next = 0, i;
    2040:	00000693          	li	a3,0
        switch (seed & 0x7)
    2044:	75060613          	addi	a2,a2,1872 # 6750 <intpat>
    2048:	00400e13          	li	t3,4
    204c:	00100313          	li	t1,1
            *(p + total + i) = ',';
    2050:	02c00f13          	li	t5,44
                buf  = intpat[(seed >> 3) & 0x3];
    2054:	0037f793          	andi	a5,a5,3
        switch (seed & 0x7)
    2058:	07d70e63          	beq	a4,t4,20d4 <core_init_state+0xc8>
    205c:	0cee6063          	bltu	t3,a4,211c <core_init_state+0x110>
    2060:	ffd70713          	addi	a4,a4,-3
    2064:	01071713          	slli	a4,a4,0x10
                next = 4;
                break;
            case 3: /* float */
            case 4: /* float */
                buf  = floatpat[(seed >> 3) & 0x3];
    2068:	00279793          	slli	a5,a5,0x2
        switch (seed & 0x7)
    206c:	01075713          	srli	a4,a4,0x10
                buf  = floatpat[(seed >> 3) & 0x3];
    2070:	00f607b3          	add	a5,a2,a5
        switch (seed & 0x7)
    2074:	08e36c63          	bltu	t1,a4,210c <core_init_state+0x100>
                buf  = floatpat[(seed >> 3) & 0x3];
    2078:	0107a783          	lw	a5,16(a5)
                next = 8;
                break;
    207c:	00900f93          	li	t6,9
                next = 8;
    2080:	00800413          	li	s0,8
    while ((total + next + 1) < size)
    2084:	01f68fb3          	add	t6,a3,t6
    2088:	071ff463          	bgeu	t6,a7,20f0 <core_init_state+0xe4>
    208c:	00d806b3          	add	a3,a6,a3
    2090:	00068713          	mv	a4,a3
    2094:	008783b3          	add	t2,a5,s0
                *(p + total + i) = buf[i];
    2098:	0007c283          	lbu	t0,0(a5)
            for (i = 0; i < next; i++)
    209c:	00178793          	addi	a5,a5,1
    20a0:	00170713          	addi	a4,a4,1
                *(p + total + i) = buf[i];
    20a4:	fe570fa3          	sb	t0,-1(a4)
            for (i = 0; i < next; i++)
    20a8:	fef398e3          	bne	t2,a5,2098 <core_init_state+0x8c>
            *(p + total + i) = ',';
    20ac:	00158593          	addi	a1,a1,1
    20b0:	01059593          	slli	a1,a1,0x10
    20b4:	008686b3          	add	a3,a3,s0
    20b8:	0105d593          	srli	a1,a1,0x10
    20bc:	01e68023          	sb	t5,0(a3)
                buf  = intpat[(seed >> 3) & 0x3];
    20c0:	0035d793          	srli	a5,a1,0x3
    20c4:	0075f713          	andi	a4,a1,7
            *(p + total + i) = ',';
    20c8:	000f8693          	mv	a3,t6
                buf  = intpat[(seed >> 3) & 0x3];
    20cc:	0037f793          	andi	a5,a5,3
        switch (seed & 0x7)
    20d0:	f9d716e3          	bne	a4,t4,205c <core_init_state+0x50>
            case 6: /* scientific */
                buf  = scipat[(seed >> 3) & 0x3];
                next = 8;
                break;
            case 7: /* invalid */
                buf  = errpat[(seed >> 3) & 0x3];
    20d4:	00279793          	slli	a5,a5,0x2
                next = 8;
                break;
    20d8:	00900f93          	li	t6,9
                buf  = errpat[(seed >> 3) & 0x3];
    20dc:	00f607b3          	add	a5,a2,a5
    while ((total + next + 1) < size)
    20e0:	01f68fb3          	add	t6,a3,t6
                buf  = errpat[(seed >> 3) & 0x3];
    20e4:	0307a783          	lw	a5,48(a5)
                next = 8;
    20e8:	00800413          	li	s0,8
    while ((total + next + 1) < size)
    20ec:	fb1fe0e3          	bltu	t6,a7,208c <core_init_state+0x80>
            default: /* Never happen, just to make some compilers happy */
                break;
        }
    }
    size++;
    while (total < size)
    20f0:	04a6f263          	bgeu	a3,a0,2134 <core_init_state+0x128>
        total++;
    }
#if CORE_DEBUG
    ee_printf("State Input: %s\n", start);
#endif
}
    20f4:	00c12403          	lw	s0,12(sp)
        *(p + total) = 0;
    20f8:	40d50633          	sub	a2,a0,a3
    20fc:	00000593          	li	a1,0
    2100:	00d80533          	add	a0,a6,a3
}
    2104:	01010113          	addi	sp,sp,16
        *(p + total) = 0;
    2108:	4380306f          	j	5540 <memset>
                buf  = intpat[(seed >> 3) & 0x3];
    210c:	0007a783          	lw	a5,0(a5)
                break;
    2110:	00500f93          	li	t6,5
                next = 4;
    2114:	00400413          	li	s0,4
                break;
    2118:	f6dff06f          	j	2084 <core_init_state+0x78>
                buf  = scipat[(seed >> 3) & 0x3];
    211c:	00279793          	slli	a5,a5,0x2
    2120:	00f607b3          	add	a5,a2,a5
    2124:	0207a783          	lw	a5,32(a5)
                break;
    2128:	00900f93          	li	t6,9
                next = 8;
    212c:	00800413          	li	s0,8
                break;
    2130:	f55ff06f          	j	2084 <core_init_state+0x78>
}
    2134:	00c12403          	lw	s0,12(sp)
    2138:	01010113          	addi	sp,sp,16
    213c:	00008067          	ret
    ee_u32 total = 0, next = 0, i;
    2140:	00000693          	li	a3,0
        *(p + total) = 0;
    2144:	40d50633          	sub	a2,a0,a3
    2148:	00000593          	li	a1,0
    214c:	00d80533          	add	a0,a6,a3
    2150:	3f00306f          	j	5540 <memset>

00002154 <core_state_transition>:
*/

enum CORE_STATE
core_state_transition(ee_u8 **instr, ee_u32 *transition_count)
{
    ee_u8 *         str = *instr;
    2154:	00052783          	lw	a5,0(a0)
{
    2158:	00050813          	mv	a6,a0
    ee_u8           NEXT_SYMBOL;
    enum CORE_STATE state = CORE_START;
    215c:	00000513          	li	a0,0
    for (; *str && state != CORE_INVALID; str++)
    2160:	0007c683          	lbu	a3,0(a5)
    2164:	00078713          	mv	a4,a5
    2168:	0c068c63          	beqz	a3,2240 <core_state_transition+0xec>
    {
        NEXT_SYMBOL = *str;
        if (NEXT_SYMBOL == ',') /* end of this input */
    216c:	02c00513          	li	a0,44
    for (; *str && state != CORE_INVALID; str++)
    2170:	00178713          	addi	a4,a5,1
        if (NEXT_SYMBOL == ',') /* end of this input */
    2174:	2aa68863          	beq	a3,a0,2424 <core_state_transition+0x2d0>
                else
                {
                    state = CORE_INVALID;
                    transition_count[CORE_INVALID]++;
                }
                transition_count[CORE_START]++;
    2178:	0005a883          	lw	a7,0(a1)
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    217c:	fd068613          	addi	a2,a3,-48
    2180:	0ff67613          	zext.b	a2,a2
    2184:	00900313          	li	t1,9
                transition_count[CORE_START]++;
    2188:	00188893          	addi	a7,a7,1
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    218c:	0ac36e63          	bltu	t1,a2,2248 <core_state_transition+0xf4>
                transition_count[CORE_START]++;
    2190:	0115a023          	sw	a7,0(a1)
    for (; *str && state != CORE_INVALID; str++)
    2194:	0017c683          	lbu	a3,1(a5)
    2198:	16068063          	beqz	a3,22f8 <core_state_transition+0x1a4>
            str++;
    219c:	00278793          	addi	a5,a5,2
        if (NEXT_SYMBOL == ',') /* end of this input */
    21a0:	14a68a63          	beq	a3,a0,22f4 <core_state_transition+0x1a0>
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    21a4:	fd068613          	addi	a2,a3,-48
                    state = CORE_INVALID;
                    transition_count[CORE_S1]++;
                }
                break;
            case CORE_INT:
                if (NEXT_SYMBOL == '.')
    21a8:	02e00513          	li	a0,46
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    21ac:	00900893          	li	a7,9
        if (NEXT_SYMBOL == ',') /* end of this input */
    21b0:	02c00313          	li	t1,44
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    21b4:	0ff67613          	zext.b	a2,a2
                if (NEXT_SYMBOL == '.')
    21b8:	02a68663          	beq	a3,a0,21e4 <core_state_transition+0x90>
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    21bc:	0cc8e063          	bltu	a7,a2,227c <core_state_transition+0x128>
    for (; *str && state != CORE_INVALID; str++)
    21c0:	00174683          	lbu	a3,1(a4)
    21c4:	00178613          	addi	a2,a5,1
    21c8:	00078713          	mv	a4,a5
    21cc:	12068463          	beqz	a3,22f4 <core_state_transition+0x1a0>
        if (NEXT_SYMBOL == ',') /* end of this input */
    21d0:	28668863          	beq	a3,t1,2460 <core_state_transition+0x30c>
    for (; *str && state != CORE_INVALID; str++)
    21d4:	00060793          	mv	a5,a2
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    21d8:	fd068613          	addi	a2,a3,-48
    21dc:	0ff67613          	zext.b	a2,a2
                if (NEXT_SYMBOL == '.')
    21e0:	fca69ee3          	bne	a3,a0,21bc <core_state_transition+0x68>
                {
                    state = CORE_FLOAT;
                    transition_count[CORE_INT]++;
    21e4:	0105a683          	lw	a3,16(a1)
                    state = CORE_FLOAT;
    21e8:	00500513          	li	a0,5
                    transition_count[CORE_INT]++;
    21ec:	00168693          	addi	a3,a3,1
    21f0:	00d5a823          	sw	a3,16(a1)
    for (; *str && state != CORE_INVALID; str++)
    21f4:	00174683          	lbu	a3,1(a4)
    21f8:	00078713          	mv	a4,a5
    21fc:	04068263          	beqz	a3,2240 <core_state_transition+0xec>
        if (NEXT_SYMBOL == ',') /* end of this input */
    2200:	02c00713          	li	a4,44
            str++;
    2204:	00178613          	addi	a2,a5,1
        if (NEXT_SYMBOL == ',') /* end of this input */
    2208:	20e68863          	beq	a3,a4,2418 <core_state_transition+0x2c4>
                    state = CORE_INVALID;
                    transition_count[CORE_INT]++;
                }
                break;
            case CORE_FLOAT:
                if (NEXT_SYMBOL == 'E' || NEXT_SYMBOL == 'e')
    220c:	04500513          	li	a0,69
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    2210:	00900893          	li	a7,9
        if (NEXT_SYMBOL == ',') /* end of this input */
    2214:	02c00313          	li	t1,44
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    2218:	fd068713          	addi	a4,a3,-48
                if (NEXT_SYMBOL == 'E' || NEXT_SYMBOL == 'e')
    221c:	0df6f693          	andi	a3,a3,223
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    2220:	0ff77713          	zext.b	a4,a4
                if (NEXT_SYMBOL == 'E' || NEXT_SYMBOL == 'e')
    2224:	0ca68e63          	beq	a3,a0,2300 <core_state_transition+0x1ac>
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    2228:	1ae8f063          	bgeu	a7,a4,23c8 <core_state_transition+0x274>
                    transition_count[CORE_FLOAT]++;
                }
                else if (!ee_isdigit(NEXT_SYMBOL))
                {
                    state = CORE_INVALID;
                    transition_count[CORE_FLOAT]++;
    222c:	0145a783          	lw	a5,20(a1)
    2230:	00060713          	mv	a4,a2
                    state = CORE_INVALID;
    2234:	00100513          	li	a0,1
                    transition_count[CORE_FLOAT]++;
    2238:	00178793          	addi	a5,a5,1
    223c:	00f5aa23          	sw	a5,20(a1)
                break;
            default:
                break;
        }
    }
    *instr = str;
    2240:	00e82023          	sw	a4,0(a6)
    return state;
}
    2244:	00008067          	ret
                else if (NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-')
    2248:	02b00613          	li	a2,43
    224c:	04c68663          	beq	a3,a2,2298 <core_state_transition+0x144>
    2250:	02d00613          	li	a2,45
    2254:	04c68263          	beq	a3,a2,2298 <core_state_transition+0x144>
                else if (NEXT_SYMBOL == '.')
    2258:	02e00613          	li	a2,46
    225c:	18c68463          	beq	a3,a2,23e4 <core_state_transition+0x290>
                    transition_count[CORE_INVALID]++;
    2260:	0045a783          	lw	a5,4(a1)
                transition_count[CORE_START]++;
    2264:	0115a023          	sw	a7,0(a1)
                    state = CORE_INVALID;
    2268:	00100513          	li	a0,1
                    transition_count[CORE_INVALID]++;
    226c:	00178793          	addi	a5,a5,1
    2270:	00f5a223          	sw	a5,4(a1)
    *instr = str;
    2274:	00e82023          	sw	a4,0(a6)
}
    2278:	00008067          	ret
                    transition_count[CORE_INT]++;
    227c:	0105a683          	lw	a3,16(a1)
    2280:	00078713          	mv	a4,a5
                    state = CORE_INVALID;
    2284:	00100513          	li	a0,1
                    transition_count[CORE_INT]++;
    2288:	00168793          	addi	a5,a3,1
    228c:	00f5a823          	sw	a5,16(a1)
    *instr = str;
    2290:	00e82023          	sw	a4,0(a6)
}
    2294:	00008067          	ret
                transition_count[CORE_START]++;
    2298:	0115a023          	sw	a7,0(a1)
    for (; *str && state != CORE_INVALID; str++)
    229c:	0017c883          	lbu	a7,1(a5)
    22a0:	1a088663          	beqz	a7,244c <core_state_transition+0x2f8>
            str++;
    22a4:	00278713          	addi	a4,a5,2
        if (NEXT_SYMBOL == ',') /* end of this input */
    22a8:	1aa88263          	beq	a7,a0,244c <core_state_transition+0x2f8>
                    transition_count[CORE_S1]++;
    22ac:	0085a603          	lw	a2,8(a1)
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    22b0:	fd088693          	addi	a3,a7,-48
    22b4:	0ff6f693          	zext.b	a3,a3
    22b8:	00900513          	li	a0,9
                    transition_count[CORE_S1]++;
    22bc:	00160613          	addi	a2,a2,1
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    22c0:	00d57e63          	bgeu	a0,a3,22dc <core_state_transition+0x188>
                else if (NEXT_SYMBOL == '.')
    22c4:	02e00693          	li	a3,46
    22c8:	12d88c63          	beq	a7,a3,2400 <core_state_transition+0x2ac>
                    transition_count[CORE_S1]++;
    22cc:	00c5a423          	sw	a2,8(a1)
                    state = CORE_INVALID;
    22d0:	00100513          	li	a0,1
    *instr = str;
    22d4:	00e82023          	sw	a4,0(a6)
}
    22d8:	00008067          	ret
                    transition_count[CORE_S1]++;
    22dc:	00c5a423          	sw	a2,8(a1)
    for (; *str && state != CORE_INVALID; str++)
    22e0:	0027c683          	lbu	a3,2(a5)
    22e4:	00068a63          	beqz	a3,22f8 <core_state_transition+0x1a4>
        if (NEXT_SYMBOL == ',') /* end of this input */
    22e8:	02c00613          	li	a2,44
            str++;
    22ec:	00170793          	addi	a5,a4,1
        if (NEXT_SYMBOL == ',') /* end of this input */
    22f0:	eac69ae3          	bne	a3,a2,21a4 <core_state_transition+0x50>
    for (; *str && state != CORE_INVALID; str++)
    22f4:	00078713          	mv	a4,a5
    22f8:	00400513          	li	a0,4
    22fc:	f45ff06f          	j	2240 <core_state_transition+0xec>
                    transition_count[CORE_FLOAT]++;
    2300:	0145a703          	lw	a4,20(a1)
    2304:	00170713          	addi	a4,a4,1
    2308:	00e5aa23          	sw	a4,20(a1)
    for (; *str && state != CORE_INVALID; str++)
    230c:	0017c783          	lbu	a5,1(a5)
    2310:	12078463          	beqz	a5,2438 <core_state_transition+0x2e4>
        if (NEXT_SYMBOL == ',') /* end of this input */
    2314:	02c00513          	li	a0,44
            str++;
    2318:	00160713          	addi	a4,a2,1
        if (NEXT_SYMBOL == ',') /* end of this input */
    231c:	12a78063          	beq	a5,a0,243c <core_state_transition+0x2e8>
                    transition_count[CORE_S2]++;
    2320:	00c5a683          	lw	a3,12(a1)
                if (NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-')
    2324:	fd578793          	addi	a5,a5,-43
    2328:	0fd7f793          	andi	a5,a5,253
                    transition_count[CORE_S2]++;
    232c:	00168693          	addi	a3,a3,1
    2330:	00d5a623          	sw	a3,12(a1)
                if (NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-')
    2334:	00078863          	beqz	a5,2344 <core_state_transition+0x1f0>
                    state = CORE_INVALID;
    2338:	00100513          	li	a0,1
    *instr = str;
    233c:	00e82023          	sw	a4,0(a6)
}
    2340:	00008067          	ret
    for (; *str && state != CORE_INVALID; str++)
    2344:	00164783          	lbu	a5,1(a2)
    2348:	0e078e63          	beqz	a5,2444 <core_state_transition+0x2f0>
            str++;
    234c:	00260713          	addi	a4,a2,2
        if (NEXT_SYMBOL == ',') /* end of this input */
    2350:	0ea78a63          	beq	a5,a0,2444 <core_state_transition+0x2f0>
                    transition_count[CORE_EXPONENT]++;
    2354:	0185a683          	lw	a3,24(a1)
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    2358:	fd078793          	addi	a5,a5,-48
    235c:	0ff7f793          	zext.b	a5,a5
                    transition_count[CORE_EXPONENT]++;
    2360:	00168693          	addi	a3,a3,1
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    2364:	00900893          	li	a7,9
                    transition_count[CORE_EXPONENT]++;
    2368:	00d5ac23          	sw	a3,24(a1)
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    236c:	fcf8e6e3          	bltu	a7,a5,2338 <core_state_transition+0x1e4>
    for (; *str && state != CORE_INVALID; str++)
    2370:	00264683          	lbu	a3,2(a2)
    2374:	0a068e63          	beqz	a3,2430 <core_state_transition+0x2dc>
            str++;
    2378:	00360793          	addi	a5,a2,3
        if (NEXT_SYMBOL == ',') /* end of this input */
    237c:	0aa68863          	beq	a3,a0,242c <core_state_transition+0x2d8>
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    2380:	00900613          	li	a2,9
        if (NEXT_SYMBOL == ',') /* end of this input */
    2384:	02c00893          	li	a7,44
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    2388:	fd068693          	addi	a3,a3,-48
    238c:	0ff6f693          	zext.b	a3,a3
    2390:	00d67e63          	bgeu	a2,a3,23ac <core_state_transition+0x258>
                    transition_count[CORE_INVALID]++;
    2394:	0045a683          	lw	a3,4(a1)
    2398:	00078713          	mv	a4,a5
                    state = CORE_INVALID;
    239c:	00100513          	li	a0,1
                    transition_count[CORE_INVALID]++;
    23a0:	00168793          	addi	a5,a3,1
    23a4:	00f5a223          	sw	a5,4(a1)
    for (; *str && state != CORE_INVALID; str++)
    23a8:	e99ff06f          	j	2240 <core_state_transition+0xec>
    23ac:	00174683          	lbu	a3,1(a4)
    23b0:	00178513          	addi	a0,a5,1
    23b4:	00078713          	mv	a4,a5
    23b8:	06068a63          	beqz	a3,242c <core_state_transition+0x2d8>
        if (NEXT_SYMBOL == ',') /* end of this input */
    23bc:	09168c63          	beq	a3,a7,2454 <core_state_transition+0x300>
    for (; *str && state != CORE_INVALID; str++)
    23c0:	00050793          	mv	a5,a0
    23c4:	fc5ff06f          	j	2388 <core_state_transition+0x234>
    23c8:	0017c683          	lbu	a3,1(a5)
    23cc:	00160713          	addi	a4,a2,1
    23d0:	00060793          	mv	a5,a2
    23d4:	04068263          	beqz	a3,2418 <core_state_transition+0x2c4>
        if (NEXT_SYMBOL == ',') /* end of this input */
    23d8:	04668263          	beq	a3,t1,241c <core_state_transition+0x2c8>
    for (; *str && state != CORE_INVALID; str++)
    23dc:	00070613          	mv	a2,a4
    23e0:	e39ff06f          	j	2218 <core_state_transition+0xc4>
                transition_count[CORE_START]++;
    23e4:	0115a023          	sw	a7,0(a1)
    for (; *str && state != CORE_INVALID; str++)
    23e8:	0017c683          	lbu	a3,1(a5)
    23ec:	02068863          	beqz	a3,241c <core_state_transition+0x2c8>
            str++;
    23f0:	00278613          	addi	a2,a5,2
        if (NEXT_SYMBOL == ',') /* end of this input */
    23f4:	02a68263          	beq	a3,a0,2418 <core_state_transition+0x2c4>
    for (; *str && state != CORE_INVALID; str++)
    23f8:	00070793          	mv	a5,a4
    23fc:	e11ff06f          	j	220c <core_state_transition+0xb8>
                    transition_count[CORE_S1]++;
    2400:	00c5a423          	sw	a2,8(a1)
    for (; *str && state != CORE_INVALID; str++)
    2404:	0027c683          	lbu	a3,2(a5)
    2408:	00068a63          	beqz	a3,241c <core_state_transition+0x2c8>
        if (NEXT_SYMBOL == ',') /* end of this input */
    240c:	02c00793          	li	a5,44
            str++;
    2410:	00170613          	addi	a2,a4,1
        if (NEXT_SYMBOL == ',') /* end of this input */
    2414:	fef692e3          	bne	a3,a5,23f8 <core_state_transition+0x2a4>
    for (; *str && state != CORE_INVALID; str++)
    2418:	00060713          	mv	a4,a2
    241c:	00500513          	li	a0,5
    2420:	e21ff06f          	j	2240 <core_state_transition+0xec>
        if (NEXT_SYMBOL == ',') /* end of this input */
    2424:	00000513          	li	a0,0
            break;
    2428:	e19ff06f          	j	2240 <core_state_transition+0xec>
    for (; *str && state != CORE_INVALID; str++)
    242c:	00078713          	mv	a4,a5
    2430:	00700513          	li	a0,7
    2434:	e0dff06f          	j	2240 <core_state_transition+0xec>
    2438:	00060713          	mv	a4,a2
                    state = CORE_S2;
    243c:	00300513          	li	a0,3
    2440:	e01ff06f          	j	2240 <core_state_transition+0xec>
                    state = CORE_EXPONENT;
    2444:	00600513          	li	a0,6
    2448:	df9ff06f          	j	2240 <core_state_transition+0xec>
                    state = CORE_S1;
    244c:	00200513          	li	a0,2
    2450:	df1ff06f          	j	2240 <core_state_transition+0xec>
    for (; *str && state != CORE_INVALID; str++)
    2454:	00050713          	mv	a4,a0
        if (NEXT_SYMBOL == ',') /* end of this input */
    2458:	00700513          	li	a0,7
    245c:	de5ff06f          	j	2240 <core_state_transition+0xec>
    for (; *str && state != CORE_INVALID; str++)
    2460:	00060713          	mv	a4,a2
        if (NEXT_SYMBOL == ',') /* end of this input */
    2464:	00400513          	li	a0,4
    2468:	dd9ff06f          	j	2240 <core_state_transition+0xec>

0000246c <core_bench_state>:
{
    246c:	f8010113          	addi	sp,sp,-128
    2470:	06812c23          	sw	s0,120(sp)
    2474:	06912a23          	sw	s1,116(sp)
    2478:	07212823          	sw	s2,112(sp)
    247c:	07312623          	sw	s3,108(sp)
    2480:	07412423          	sw	s4,104(sp)
    2484:	07512223          	sw	s5,100(sp)
    2488:	07612023          	sw	s6,96(sp)
    248c:	06112e23          	sw	ra,124(sp)
    2490:	05712e23          	sw	s7,92(sp)
    2494:	00058413          	mv	s0,a1
    while (*p != 0)
    2498:	0005c583          	lbu	a1,0(a1)
    ee_u8 *p = memblock;
    249c:	00812623          	sw	s0,12(sp)
        final_counts[i] = track_counts[i] = 0;
    24a0:	02012823          	sw	zero,48(sp)
    24a4:	00012823          	sw	zero,16(sp)
    24a8:	02012a23          	sw	zero,52(sp)
    24ac:	02012c23          	sw	zero,56(sp)
    24b0:	02012e23          	sw	zero,60(sp)
    24b4:	04012023          	sw	zero,64(sp)
    24b8:	04012223          	sw	zero,68(sp)
    24bc:	04012423          	sw	zero,72(sp)
    24c0:	04012623          	sw	zero,76(sp)
    24c4:	00012a23          	sw	zero,20(sp)
    24c8:	00012c23          	sw	zero,24(sp)
    24cc:	00012e23          	sw	zero,28(sp)
    24d0:	02012023          	sw	zero,32(sp)
    24d4:	02012223          	sw	zero,36(sp)
    24d8:	02012423          	sw	zero,40(sp)
    24dc:	02012623          	sw	zero,44(sp)
    24e0:	03010913          	addi	s2,sp,48
{
    24e4:	00050b13          	mv	s6,a0
    24e8:	00060a93          	mv	s5,a2
    24ec:	00068a13          	mv	s4,a3
    24f0:	00070993          	mv	s3,a4
    24f4:	00078493          	mv	s1,a5
    while (*p != 0)
    24f8:	12058e63          	beqz	a1,2634 <core_bench_state+0x1c8>
    24fc:	00c10b93          	addi	s7,sp,12
        enum CORE_STATE fstate = core_state_transition(&p, track_counts);
    2500:	00090593          	mv	a1,s2
    2504:	000b8513          	mv	a0,s7
    2508:	c4dff0ef          	jal	ra,2154 <core_state_transition>
        final_counts[fstate]++;
    250c:	05010793          	addi	a5,sp,80
    2510:	00251813          	slli	a6,a0,0x2
    2514:	01078833          	add	a6,a5,a6
    while (*p != 0)
    2518:	00c12703          	lw	a4,12(sp)
        final_counts[fstate]++;
    251c:	fc082783          	lw	a5,-64(a6)
    while (*p != 0)
    2520:	00074703          	lbu	a4,0(a4)
        final_counts[fstate]++;
    2524:	00178793          	addi	a5,a5,1
    2528:	fcf82023          	sw	a5,-64(a6)
    while (*p != 0)
    252c:	fc071ae3          	bnez	a4,2500 <core_bench_state+0x94>
    p = memblock;
    2530:	00812623          	sw	s0,12(sp)
    while (p < (memblock + blksize))
    2534:	01640b33          	add	s6,s0,s6
    while (*p != 0)
    2538:	00044583          	lbu	a1,0(s0)
    while (p < (memblock + blksize))
    253c:	11647263          	bgeu	s0,s6,2640 <core_bench_state+0x1d4>
        p += step;
    2540:	00040813          	mv	a6,s0
        if (*p != ',')
    2544:	02c00713          	li	a4,44
    2548:	0080006f          	j	2550 <core_bench_state+0xe4>
    254c:	00084583          	lbu	a1,0(a6)
            *p ^= (ee_u8)seed1;
    2550:	0155c7b3          	xor	a5,a1,s5
        if (*p != ',')
    2554:	00e58463          	beq	a1,a4,255c <core_bench_state+0xf0>
            *p ^= (ee_u8)seed1;
    2558:	00f80023          	sb	a5,0(a6)
        p += step;
    255c:	00c12803          	lw	a6,12(sp)
    2560:	01380833          	add	a6,a6,s3
    2564:	01012623          	sw	a6,12(sp)
    while (p < (memblock + blksize))
    2568:	ff6862e3          	bltu	a6,s6,254c <core_bench_state+0xe0>
    while (*p != 0)
    256c:	00044783          	lbu	a5,0(s0)
    p = memblock;
    2570:	00812623          	sw	s0,12(sp)
    while (*p != 0)
    2574:	00c10b93          	addi	s7,sp,12
    2578:	02078e63          	beqz	a5,25b4 <core_bench_state+0x148>
        enum CORE_STATE fstate = core_state_transition(&p, track_counts);
    257c:	00090593          	mv	a1,s2
    2580:	000b8513          	mv	a0,s7
    2584:	bd1ff0ef          	jal	ra,2154 <core_state_transition>
        final_counts[fstate]++;
    2588:	05010793          	addi	a5,sp,80
    258c:	00251613          	slli	a2,a0,0x2
    2590:	00c78633          	add	a2,a5,a2
    while (*p != 0)
    2594:	00c12703          	lw	a4,12(sp)
        final_counts[fstate]++;
    2598:	fc062783          	lw	a5,-64(a2)
    while (*p != 0)
    259c:	00074703          	lbu	a4,0(a4)
        final_counts[fstate]++;
    25a0:	00178793          	addi	a5,a5,1
    25a4:	fcf62023          	sw	a5,-64(a2)
    while (*p != 0)
    25a8:	fc071ae3          	bnez	a4,257c <core_bench_state+0x110>
    p = memblock;
    25ac:	00812623          	sw	s0,12(sp)
    while (p < (memblock + blksize))
    25b0:	03647463          	bgeu	s0,s6,25d8 <core_bench_state+0x16c>
        if (*p != ',')
    25b4:	02c00693          	li	a3,44
    25b8:	00044783          	lbu	a5,0(s0)
            *p ^= (ee_u8)seed2;
    25bc:	0147c733          	xor	a4,a5,s4
        if (*p != ',')
    25c0:	00d78463          	beq	a5,a3,25c8 <core_bench_state+0x15c>
            *p ^= (ee_u8)seed2;
    25c4:	00e40023          	sb	a4,0(s0)
        p += step;
    25c8:	00c12403          	lw	s0,12(sp)
    25cc:	01340433          	add	s0,s0,s3
    25d0:	00812623          	sw	s0,12(sp)
    while (p < (memblock + blksize))
    25d4:	ff6462e3          	bltu	s0,s6,25b8 <core_bench_state+0x14c>
    25d8:	01010413          	addi	s0,sp,16
    25dc:	00090993          	mv	s3,s2
        crc = crcu32(final_counts[i], crc);
    25e0:	00042503          	lw	a0,0(s0)
    25e4:	00048593          	mv	a1,s1
    for (i = 0; i < NUM_CORE_STATES; i++)
    25e8:	00440413          	addi	s0,s0,4
        crc = crcu32(final_counts[i], crc);
    25ec:	174000ef          	jal	ra,2760 <crcu32>
    25f0:	00050593          	mv	a1,a0
        crc = crcu32(track_counts[i], crc);
    25f4:	0009a503          	lw	a0,0(s3)
    for (i = 0; i < NUM_CORE_STATES; i++)
    25f8:	00498993          	addi	s3,s3,4
        crc = crcu32(track_counts[i], crc);
    25fc:	164000ef          	jal	ra,2760 <crcu32>
    2600:	00050493          	mv	s1,a0
    for (i = 0; i < NUM_CORE_STATES; i++)
    2604:	fc891ee3          	bne	s2,s0,25e0 <core_bench_state+0x174>
}
    2608:	07c12083          	lw	ra,124(sp)
    260c:	07812403          	lw	s0,120(sp)
    2610:	07412483          	lw	s1,116(sp)
    2614:	07012903          	lw	s2,112(sp)
    2618:	06c12983          	lw	s3,108(sp)
    261c:	06812a03          	lw	s4,104(sp)
    2620:	06412a83          	lw	s5,100(sp)
    2624:	06012b03          	lw	s6,96(sp)
    2628:	05c12b83          	lw	s7,92(sp)
    262c:	08010113          	addi	sp,sp,128
    2630:	00008067          	ret
    while (p < (memblock + blksize))
    2634:	00a40b33          	add	s6,s0,a0
    2638:	f16464e3          	bltu	s0,s6,2540 <core_bench_state+0xd4>
    263c:	f9dff06f          	j	25d8 <core_bench_state+0x16c>
    while (*p != 0)
    2640:	f2059ee3          	bnez	a1,257c <core_bench_state+0x110>
    2644:	f95ff06f          	j	25d8 <core_bench_state+0x16c>

00002648 <get_seed_32>:
extern volatile ee_s32 seed5_volatile;
ee_s32
get_seed_32(int i)
{
    ee_s32 retval;
    switch (i)
    2648:	00500793          	li	a5,5
    264c:	04a7e263          	bltu	a5,a0,2690 <get_seed_32+0x48>
    2650:	000067b7          	lui	a5,0x6
    2654:	79078793          	addi	a5,a5,1936 # 6790 <errpat+0x10>
    2658:	00251513          	slli	a0,a0,0x2
    265c:	00f50533          	add	a0,a0,a5
    2660:	00052783          	lw	a5,0(a0)
    2664:	00078067          	jr	a5
            break;
        case 4:
            retval = seed4_volatile;
            break;
        case 5:
            retval = seed5_volatile;
    2668:	c781a503          	lw	a0,-904(gp) # 7008 <seed5_volatile>
            break;
    266c:	00008067          	ret
            retval = seed1_volatile;
    2670:	c841a503          	lw	a0,-892(gp) # 7014 <seed1_volatile>
            break;
    2674:	00008067          	ret
            retval = seed2_volatile;
    2678:	c801a503          	lw	a0,-896(gp) # 7010 <seed2_volatile>
            break;
    267c:	00008067          	ret
            retval = seed3_volatile;
    2680:	8241a503          	lw	a0,-2012(gp) # 6bb4 <seed3_volatile>
            break;
    2684:	00008067          	ret
            retval = seed4_volatile;
    2688:	c7c1a503          	lw	a0,-900(gp) # 700c <seed4_volatile>
            break;
    268c:	00008067          	ret
{
    2690:	00000513          	li	a0,0
        default:
            retval = 0;
            break;
    }
    return retval;
}
    2694:	00008067          	ret

00002698 <crcu8>:
        Service functions to calculate 16b CRC code.

*/
ee_u16
crcu8(ee_u8 data, ee_u16 crc)
{
    2698:	00050693          	mv	a3,a0
    269c:	00058513          	mv	a0,a1
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
            crc |= 0x8000;
    26a0:	ffffa5b7          	lui	a1,0xffffa
{
    26a4:	00800793          	li	a5,8
            crc |= 0x8000;
    26a8:	00158593          	addi	a1,a1,1 # ffffa001 <RAM_SIZE+0xfffea001>
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    26ac:	00d54733          	xor	a4,a0,a3
    for (i = 0; i < 8; i++)
    26b0:	fff78793          	addi	a5,a5,-1
    26b4:	00155513          	srli	a0,a0,0x1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    26b8:	00177713          	andi	a4,a4,1
    for (i = 0; i < 8; i++)
    26bc:	0ff7f793          	zext.b	a5,a5
            crc |= 0x8000;
    26c0:	00b54633          	xor	a2,a0,a1
        data >>= 1;
    26c4:	0016d693          	srli	a3,a3,0x1
        if (x16 == 1)
    26c8:	00070663          	beqz	a4,26d4 <crcu8+0x3c>
            crc |= 0x8000;
    26cc:	01061513          	slli	a0,a2,0x10
    26d0:	01055513          	srli	a0,a0,0x10
    for (i = 0; i < 8; i++)
    26d4:	fc079ce3          	bnez	a5,26ac <crcu8+0x14>
        else
            crc &= 0x7fff;
    }
    return crc;
}
    26d8:	00008067          	ret

000026dc <crcu16>:
ee_u16
crcu16(ee_u16 newval, ee_u16 crc)
{
    26dc:	00050693          	mv	a3,a0
            crc |= 0x8000;
    26e0:	ffffa837          	lui	a6,0xffffa
{
    26e4:	00058513          	mv	a0,a1
    crc = crcu8((ee_u8)(newval), crc);
    26e8:	0ff6f613          	zext.b	a2,a3
    26ec:	00800793          	li	a5,8
            crc |= 0x8000;
    26f0:	00180813          	addi	a6,a6,1 # ffffa001 <RAM_SIZE+0xfffea001>
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    26f4:	00c54733          	xor	a4,a0,a2
    for (i = 0; i < 8; i++)
    26f8:	fff78793          	addi	a5,a5,-1
        crc >>= 1;
    26fc:	00155513          	srli	a0,a0,0x1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    2700:	00177713          	andi	a4,a4,1
    for (i = 0; i < 8; i++)
    2704:	0ff7f793          	zext.b	a5,a5
            crc |= 0x8000;
    2708:	010545b3          	xor	a1,a0,a6
        data >>= 1;
    270c:	00165613          	srli	a2,a2,0x1
        if (x16 == 1)
    2710:	00070663          	beqz	a4,271c <crcu16+0x40>
            crc |= 0x8000;
    2714:	01059513          	slli	a0,a1,0x10
    2718:	01055513          	srli	a0,a0,0x10
    for (i = 0; i < 8; i++)
    271c:	fc079ce3          	bnez	a5,26f4 <crcu16+0x18>
            crc |= 0x8000;
    2720:	ffffa5b7          	lui	a1,0xffffa
    crc = crcu8((ee_u8)((newval) >> 8), crc);
    2724:	0086d693          	srli	a3,a3,0x8
    2728:	00800793          	li	a5,8
            crc |= 0x8000;
    272c:	00158593          	addi	a1,a1,1 # ffffa001 <RAM_SIZE+0xfffea001>
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    2730:	00d54733          	xor	a4,a0,a3
    for (i = 0; i < 8; i++)
    2734:	fff78793          	addi	a5,a5,-1
    2738:	00155513          	srli	a0,a0,0x1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    273c:	00177713          	andi	a4,a4,1
    for (i = 0; i < 8; i++)
    2740:	0ff7f793          	zext.b	a5,a5
            crc |= 0x8000;
    2744:	00b54633          	xor	a2,a0,a1
        data >>= 1;
    2748:	0016d693          	srli	a3,a3,0x1
        if (x16 == 1)
    274c:	00070663          	beqz	a4,2758 <crcu16+0x7c>
            crc |= 0x8000;
    2750:	01061513          	slli	a0,a2,0x10
    2754:	01055513          	srli	a0,a0,0x10
    for (i = 0; i < 8; i++)
    2758:	fc079ce3          	bnez	a5,2730 <crcu16+0x54>
    return crc;
}
    275c:	00008067          	ret

00002760 <crcu32>:
ee_u16
crcu32(ee_u32 newval, ee_u16 crc)
{
    2760:	00050713          	mv	a4,a0
    return crc;
}
ee_u16
crc16(ee_s16 newval, ee_u16 crc)
{
    return crcu16((ee_u16)newval, crc);
    2764:	01071613          	slli	a2,a4,0x10
            crc |= 0x8000;
    2768:	ffffa8b7          	lui	a7,0xffffa
{
    276c:	00058513          	mv	a0,a1
    return crcu16((ee_u16)newval, crc);
    2770:	01065613          	srli	a2,a2,0x10
    crc = crcu8((ee_u8)(newval), crc);
    2774:	0ff77593          	zext.b	a1,a4
    2778:	00800793          	li	a5,8
            crc |= 0x8000;
    277c:	00188893          	addi	a7,a7,1 # ffffa001 <RAM_SIZE+0xfffea001>
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    2780:	00b546b3          	xor	a3,a0,a1
    for (i = 0; i < 8; i++)
    2784:	fff78793          	addi	a5,a5,-1
        crc >>= 1;
    2788:	00155513          	srli	a0,a0,0x1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    278c:	0016f693          	andi	a3,a3,1
    for (i = 0; i < 8; i++)
    2790:	0ff7f793          	zext.b	a5,a5
            crc |= 0x8000;
    2794:	01154833          	xor	a6,a0,a7
        data >>= 1;
    2798:	0015d593          	srli	a1,a1,0x1
        if (x16 == 1)
    279c:	00068663          	beqz	a3,27a8 <crcu32+0x48>
            crc |= 0x8000;
    27a0:	01081513          	slli	a0,a6,0x10
    27a4:	01055513          	srli	a0,a0,0x10
    for (i = 0; i < 8; i++)
    27a8:	fc079ce3          	bnez	a5,2780 <crcu32+0x20>
            crc |= 0x8000;
    27ac:	ffffa837          	lui	a6,0xffffa
    crc = crcu8((ee_u8)((newval) >> 8), crc);
    27b0:	00865613          	srli	a2,a2,0x8
    27b4:	00800793          	li	a5,8
            crc |= 0x8000;
    27b8:	00180813          	addi	a6,a6,1 # ffffa001 <RAM_SIZE+0xfffea001>
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    27bc:	00c546b3          	xor	a3,a0,a2
    for (i = 0; i < 8; i++)
    27c0:	fff78793          	addi	a5,a5,-1
    27c4:	00155513          	srli	a0,a0,0x1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    27c8:	0016f693          	andi	a3,a3,1
    for (i = 0; i < 8; i++)
    27cc:	0ff7f793          	zext.b	a5,a5
            crc |= 0x8000;
    27d0:	010545b3          	xor	a1,a0,a6
        data >>= 1;
    27d4:	00165613          	srli	a2,a2,0x1
        if (x16 == 1)
    27d8:	00068663          	beqz	a3,27e4 <crcu32+0x84>
            crc |= 0x8000;
    27dc:	01059513          	slli	a0,a1,0x10
    27e0:	01055513          	srli	a0,a0,0x10
    for (i = 0; i < 8; i++)
    27e4:	fc079ce3          	bnez	a5,27bc <crcu32+0x5c>
    crc = crc16((ee_s16)(newval >> 16), crc);
    27e8:	01075613          	srli	a2,a4,0x10
            crc |= 0x8000;
    27ec:	ffffa837          	lui	a6,0xffffa
    return crcu16((ee_u16)newval, crc);
    27f0:	00060713          	mv	a4,a2
    crc = crcu8((ee_u8)(newval), crc);
    27f4:	00800793          	li	a5,8
    27f8:	0ff67613          	zext.b	a2,a2
            crc |= 0x8000;
    27fc:	00180813          	addi	a6,a6,1 # ffffa001 <RAM_SIZE+0xfffea001>
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    2800:	00c546b3          	xor	a3,a0,a2
    for (i = 0; i < 8; i++)
    2804:	fff78793          	addi	a5,a5,-1
    2808:	00155513          	srli	a0,a0,0x1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    280c:	0016f693          	andi	a3,a3,1
    for (i = 0; i < 8; i++)
    2810:	0ff7f793          	zext.b	a5,a5
            crc |= 0x8000;
    2814:	010545b3          	xor	a1,a0,a6
        data >>= 1;
    2818:	00165613          	srli	a2,a2,0x1
        if (x16 == 1)
    281c:	00068663          	beqz	a3,2828 <STACK_SIZE+0x28>
            crc |= 0x8000;
    2820:	01059513          	slli	a0,a1,0x10
    2824:	01055513          	srli	a0,a0,0x10
    for (i = 0; i < 8; i++)
    2828:	fc079ce3          	bnez	a5,2800 <STACK_SIZE>
            crc |= 0x8000;
    282c:	ffffa5b7          	lui	a1,0xffffa
    crc = crcu8((ee_u8)((newval) >> 8), crc);
    2830:	00875713          	srli	a4,a4,0x8
    2834:	00800793          	li	a5,8
            crc |= 0x8000;
    2838:	00158593          	addi	a1,a1,1 # ffffa001 <RAM_SIZE+0xfffea001>
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    283c:	00e546b3          	xor	a3,a0,a4
    for (i = 0; i < 8; i++)
    2840:	fff78793          	addi	a5,a5,-1
    2844:	00155513          	srli	a0,a0,0x1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    2848:	0016f693          	andi	a3,a3,1
    for (i = 0; i < 8; i++)
    284c:	0ff7f793          	zext.b	a5,a5
            crc |= 0x8000;
    2850:	00b54633          	xor	a2,a0,a1
        data >>= 1;
    2854:	00175713          	srli	a4,a4,0x1
        if (x16 == 1)
    2858:	00068663          	beqz	a3,2864 <STACK_SIZE+0x64>
            crc |= 0x8000;
    285c:	01061513          	slli	a0,a2,0x10
    2860:	01055513          	srli	a0,a0,0x10
    for (i = 0; i < 8; i++)
    2864:	fc079ce3          	bnez	a5,283c <STACK_SIZE+0x3c>
}
    2868:	00008067          	ret

0000286c <crc16>:
{
    286c:	00050693          	mv	a3,a0
    return crcu16((ee_u16)newval, crc);
    2870:	01069613          	slli	a2,a3,0x10
            crc |= 0x8000;
    2874:	ffffa837          	lui	a6,0xffffa
{
    2878:	00058513          	mv	a0,a1
    return crcu16((ee_u16)newval, crc);
    287c:	01065613          	srli	a2,a2,0x10
    crc = crcu8((ee_u8)(newval), crc);
    2880:	0ff6f693          	zext.b	a3,a3
    2884:	00800793          	li	a5,8
            crc |= 0x8000;
    2888:	00180813          	addi	a6,a6,1 # ffffa001 <RAM_SIZE+0xfffea001>
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    288c:	00d54733          	xor	a4,a0,a3
    for (i = 0; i < 8; i++)
    2890:	fff78793          	addi	a5,a5,-1
        crc >>= 1;
    2894:	00155513          	srli	a0,a0,0x1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    2898:	00177713          	andi	a4,a4,1
    for (i = 0; i < 8; i++)
    289c:	0ff7f793          	zext.b	a5,a5
            crc |= 0x8000;
    28a0:	010545b3          	xor	a1,a0,a6
        data >>= 1;
    28a4:	0016d693          	srli	a3,a3,0x1
        if (x16 == 1)
    28a8:	00070663          	beqz	a4,28b4 <crc16+0x48>
            crc |= 0x8000;
    28ac:	01059513          	slli	a0,a1,0x10
    28b0:	01055513          	srli	a0,a0,0x10
    for (i = 0; i < 8; i++)
    28b4:	fc079ce3          	bnez	a5,288c <crc16+0x20>
            crc |= 0x8000;
    28b8:	ffffa5b7          	lui	a1,0xffffa
    crc = crcu8((ee_u8)((newval) >> 8), crc);
    28bc:	00865693          	srli	a3,a2,0x8
    28c0:	00800793          	li	a5,8
            crc |= 0x8000;
    28c4:	00158593          	addi	a1,a1,1 # ffffa001 <RAM_SIZE+0xfffea001>
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    28c8:	00d54733          	xor	a4,a0,a3
    for (i = 0; i < 8; i++)
    28cc:	fff78793          	addi	a5,a5,-1
    28d0:	00155513          	srli	a0,a0,0x1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    28d4:	00177713          	andi	a4,a4,1
    for (i = 0; i < 8; i++)
    28d8:	0ff7f793          	zext.b	a5,a5
            crc |= 0x8000;
    28dc:	00b54633          	xor	a2,a0,a1
        data >>= 1;
    28e0:	0016d693          	srli	a3,a3,0x1
        if (x16 == 1)
    28e4:	00070663          	beqz	a4,28f0 <crc16+0x84>
            crc |= 0x8000;
    28e8:	01061513          	slli	a0,a2,0x10
    28ec:	01055513          	srli	a0,a0,0x10
    for (i = 0; i < 8; i++)
    28f0:	fc079ce3          	bnez	a5,28c8 <crc16+0x5c>
}
    28f4:	00008067          	ret

000028f8 <check_data_types>:
    if (retval > 0)
    {
        ee_printf("ERROR: Please modify the datatypes in core_portme.h!\n");
    }
    return retval;
}
    28f8:	00000513          	li	a0,0
    28fc:	00008067          	ret

00002900 <cvt>:
#define CVTBUFSIZE 80
static char CVTBUF[CVTBUFSIZE];

static char *
cvt(double arg, int ndigits, int *decpt, int *sign, char *buf, int eflag)
{
    2900:	fa010113          	addi	sp,sp,-96
    2904:	04812c23          	sw	s0,88(sp)
    2908:	04912a23          	sw	s1,84(sp)
    290c:	05212823          	sw	s2,80(sp)
    2910:	05312623          	sw	s3,76(sp)
    2914:	03912a23          	sw	s9,52(sp)
    2918:	04112e23          	sw	ra,92(sp)
    291c:	05412423          	sw	s4,72(sp)
    2920:	05512223          	sw	s5,68(sp)
    2924:	05612023          	sw	s6,64(sp)
    2928:	03712e23          	sw	s7,60(sp)
    292c:	03812c23          	sw	s8,56(sp)
    2930:	03a12823          	sw	s10,48(sp)
    2934:	03b12623          	sw	s11,44(sp)
    2938:	04e00893          	li	a7,78
    293c:	01012423          	sw	a6,8(sp)
    2940:	00050913          	mv	s2,a0
    2944:	00058413          	mv	s0,a1
    2948:	00068c93          	mv	s9,a3
    294c:	00070493          	mv	s1,a4
    2950:	00078993          	mv	s3,a5
    2954:	22c8dc63          	bge	a7,a2,2b8c <cvt+0x28c>
    if (ndigits >= CVTBUFSIZE - 1)
        ndigits = CVTBUFSIZE - 2;
    r2    = 0;
    *sign = 0;
    p     = &buf[0];
    if (arg < 0)
    2958:	04e00793          	li	a5,78
    295c:	00090513          	mv	a0,s2
    2960:	00040593          	mv	a1,s0
    2964:	00000613          	li	a2,0
    2968:	00000693          	li	a3,0
    296c:	00f12623          	sw	a5,12(sp)
    2970:	0d0020ef          	jal	ra,4a40 <__ledf2>
    2974:	24054063          	bltz	a0,2bb4 <cvt+0x2b4>
    *sign = 0;
    2978:	0004a023          	sw	zero,0(s1)
    {
        *sign = 1;
        arg   = -arg;
    }
    arg = modf(arg, &fi);
    297c:	00040593          	mv	a1,s0
    2980:	01010613          	addi	a2,sp,16
    2984:	00090513          	mv	a0,s2
    2988:	495020ef          	jal	ra,561c <modf>
    p1  = &buf[CVTBUFSIZE];

    if (fi != 0)
    298c:	01012b03          	lw	s6,16(sp)
    2990:	01412b83          	lw	s7,20(sp)
    arg = modf(arg, &fi);
    2994:	00058493          	mv	s1,a1
    if (fi != 0)
    2998:	00000613          	li	a2,0
    299c:	00000693          	li	a3,0
    arg = modf(arg, &fi);
    29a0:	00050413          	mv	s0,a0
    if (fi != 0)
    29a4:	000b8593          	mv	a1,s7
    29a8:	000b0513          	mv	a0,s6
    29ac:	725010ef          	jal	ra,48d0 <__eqdf2>
    p1  = &buf[CVTBUFSIZE];
    29b0:	05098c13          	addi	s8,s3,80
    if (fi != 0)
    29b4:	24050863          	beqz	a0,2c04 <cvt+0x304>
    {
        p1 = &buf[CVTBUFSIZE];
        while (fi != 0)
        {
            fj    = modf(fi / 10, &fi);
            *--p1 = (int)((fj + .03) * 10) + '0';
    29b8:	000077b7          	lui	a5,0x7
    29bc:	80c1a803          	lw	a6,-2036(gp) # 6b9c <__sdata_load+0xc>
    29c0:	00007737          	lui	a4,0x7
    29c4:	b987a783          	lw	a5,-1128(a5) # 6b98 <__sdata_load+0x8>
            fj    = modf(fi / 10, &fi);
    29c8:	b9072a03          	lw	s4,-1136(a4) # 6b90 <__sdata_load>
    29cc:	b9472a83          	lw	s5,-1132(a4)
            *--p1 = (int)((fj + .03) * 10) + '0';
    29d0:	00f12023          	sw	a5,0(sp)
    29d4:	01012223          	sw	a6,4(sp)
    p1  = &buf[CVTBUFSIZE];
    29d8:	000c0d13          	mv	s10,s8
            fj    = modf(fi / 10, &fi);
    29dc:	000a8693          	mv	a3,s5
    29e0:	000a0613          	mv	a2,s4
    29e4:	000b0513          	mv	a0,s6
    29e8:	000b8593          	mv	a1,s7
    29ec:	700010ef          	jal	ra,40ec <__divdf3>
    29f0:	01010613          	addi	a2,sp,16
    29f4:	429020ef          	jal	ra,561c <modf>
            *--p1 = (int)((fj + .03) * 10) + '0';
    29f8:	00012603          	lw	a2,0(sp)
    29fc:	00412683          	lw	a3,4(sp)
            fj    = modf(fi / 10, &fi);
    2a00:	00a12c23          	sw	a0,24(sp)
    2a04:	00b12e23          	sw	a1,28(sp)
            *--p1 = (int)((fj + .03) * 10) + '0';
    2a08:	70d000ef          	jal	ra,3914 <__adddf3>
    2a0c:	000a0613          	mv	a2,s4
    2a10:	000a8693          	mv	a3,s5
    2a14:	110020ef          	jal	ra,4b24 <__muldf3>
    2a18:	798020ef          	jal	ra,51b0 <__fixdfsi>
        while (fi != 0)
    2a1c:	01012b03          	lw	s6,16(sp)
    2a20:	01412b83          	lw	s7,20(sp)
            *--p1 = (int)((fj + .03) * 10) + '0';
    2a24:	03050313          	addi	t1,a0,48
    2a28:	fffd0d13          	addi	s10,s10,-1
    2a2c:	0ff37d93          	zext.b	s11,t1
    2a30:	05000793          	li	a5,80
    2a34:	01bd0023          	sb	s11,0(s10)
        while (fi != 0)
    2a38:	00000613          	li	a2,0
    2a3c:	00000693          	li	a3,0
    2a40:	000b0513          	mv	a0,s6
    2a44:	000b8593          	mv	a1,s7
    2a48:	41a78933          	sub	s2,a5,s10
    2a4c:	685010ef          	jal	ra,48d0 <__eqdf2>
    2a50:	01390933          	add	s2,s2,s3
    2a54:	000d0713          	mv	a4,s10
    2a58:	f80512e3          	bnez	a0,29dc <cvt+0xdc>
            r2++;
        }
        while (p1 < &buf[CVTBUFSIZE])
    2a5c:	278d7c63          	bgeu	s10,s8,2cd4 <cvt+0x3d4>
    2a60:	00098693          	mv	a3,s3
    2a64:	0080006f          	j	2a6c <cvt+0x16c>
            *p++ = *p1++;
    2a68:	000d4d83          	lbu	s11,0(s10)
    2a6c:	01b68023          	sb	s11,0(a3)
    2a70:	001d0d13          	addi	s10,s10,1
    2a74:	00168693          	addi	a3,a3,1
        while (p1 < &buf[CVTBUFSIZE])
    2a78:	ffac18e3          	bne	s8,s10,2a68 <cvt+0x168>
            *p++ = *p1++;
    2a7c:	40ec0b33          	sub	s6,s8,a4
    2a80:	01698b33          	add	s6,s3,s6
        {
            arg = fj;
            r2--;
        }
    }
    p1 = &buf[ndigits];
    2a84:	00c12783          	lw	a5,12(sp)
    2a88:	00f98bb3          	add	s7,s3,a5
    if (eflag == 0)
    2a8c:	00812783          	lw	a5,8(sp)
    2a90:	00079463          	bnez	a5,2a98 <cvt+0x198>
        p1 += r2;
    2a94:	012b8bb3          	add	s7,s7,s2
    *decpt = r2;
    2a98:	012ca023          	sw	s2,0(s9)
    if (p1 < &buf[0])
    2a9c:	213bee63          	bltu	s7,s3,2cb8 <cvt+0x3b8>
    {
        buf[0] = '\0';
        return buf;
    }
    while (p <= p1 && p < &buf[CVTBUFSIZE])
    2aa0:	056bee63          	bltu	s7,s6,2afc <cvt+0x1fc>
    2aa4:	00007737          	lui	a4,0x7
    2aa8:	058b7a63          	bgeu	s6,s8,2afc <cvt+0x1fc>
    {
        arg *= 10;
    2aac:	b9072a03          	lw	s4,-1136(a4) # 6b90 <__sdata_load>
    2ab0:	b9472a83          	lw	s5,-1132(a4)
    2ab4:	0080006f          	j	2abc <cvt+0x1bc>
    while (p <= p1 && p < &buf[CVTBUFSIZE])
    2ab8:	056c0263          	beq	s8,s6,2afc <cvt+0x1fc>
        arg *= 10;
    2abc:	000a8693          	mv	a3,s5
    2ac0:	00040513          	mv	a0,s0
    2ac4:	00048593          	mv	a1,s1
    2ac8:	000a0613          	mv	a2,s4
    2acc:	058020ef          	jal	ra,4b24 <__muldf3>
        arg  = modf(arg, &fj);
    2ad0:	01810613          	addi	a2,sp,24
    2ad4:	349020ef          	jal	ra,561c <modf>
    2ad8:	00050413          	mv	s0,a0
    2adc:	00058493          	mv	s1,a1
        *p++ = (int)fj + '0';
    2ae0:	01812503          	lw	a0,24(sp)
    2ae4:	01c12583          	lw	a1,28(sp)
    2ae8:	001b0b13          	addi	s6,s6,1
    2aec:	6c4020ef          	jal	ra,51b0 <__fixdfsi>
    2af0:	03050513          	addi	a0,a0,48
    2af4:	feab0fa3          	sb	a0,-1(s6)
    while (p <= p1 && p < &buf[CVTBUFSIZE])
    2af8:	fd6bf0e3          	bgeu	s7,s6,2ab8 <cvt+0x1b8>
    }
    if (p1 >= &buf[CVTBUFSIZE])
    2afc:	1d8bf263          	bgeu	s7,s8,2cc0 <cvt+0x3c0>
    {
        buf[CVTBUFSIZE - 1] = '\0';
        return buf;
    }
    p = p1;
    *p1 += 5;
    2b00:	000bc783          	lbu	a5,0(s7)
    while (*p1 > '9')
    2b04:	03900713          	li	a4,57
    *p1 += 5;
    2b08:	00578793          	addi	a5,a5,5
    2b0c:	0ff7f793          	zext.b	a5,a5
    2b10:	00fb8023          	sb	a5,0(s7)
    while (*p1 > '9')
    2b14:	02f77a63          	bgeu	a4,a5,2b48 <cvt+0x248>
    2b18:	000b8793          	mv	a5,s7
    {
        *p1 = '0';
    2b1c:	03000693          	li	a3,48
        if (p1 > buf)
            ++*--p1;
        else
        {
            *p1 = '1';
    2b20:	03100593          	li	a1,49
    while (*p1 > '9')
    2b24:	03900613          	li	a2,57
        *p1 = '0';
    2b28:	00d78023          	sb	a3,0(a5)
        if (p1 > buf)
    2b2c:	08f9fe63          	bgeu	s3,a5,2bc8 <cvt+0x2c8>
            ++*--p1;
    2b30:	fff7c703          	lbu	a4,-1(a5)
    2b34:	fff78793          	addi	a5,a5,-1
    2b38:	00170713          	addi	a4,a4,1
    2b3c:	0ff77713          	zext.b	a4,a4
    2b40:	00e78023          	sb	a4,0(a5)
    while (*p1 > '9')
    2b44:	fee662e3          	bltu	a2,a4,2b28 <cvt+0x228>
                    *p = '0';
                p++;
            }
        }
    }
    *p = '\0';
    2b48:	000b8023          	sb	zero,0(s7)
    return buf;
}
    2b4c:	05c12083          	lw	ra,92(sp)
    2b50:	05812403          	lw	s0,88(sp)
    2b54:	05412483          	lw	s1,84(sp)
    2b58:	05012903          	lw	s2,80(sp)
    2b5c:	04812a03          	lw	s4,72(sp)
    2b60:	04412a83          	lw	s5,68(sp)
    2b64:	04012b03          	lw	s6,64(sp)
    2b68:	03c12b83          	lw	s7,60(sp)
    2b6c:	03812c03          	lw	s8,56(sp)
    2b70:	03412c83          	lw	s9,52(sp)
    2b74:	03012d03          	lw	s10,48(sp)
    2b78:	02c12d83          	lw	s11,44(sp)
    2b7c:	00098513          	mv	a0,s3
    2b80:	04c12983          	lw	s3,76(sp)
    2b84:	06010113          	addi	sp,sp,96
    2b88:	00008067          	ret
    2b8c:	fff64713          	not	a4,a2
    2b90:	41f75713          	srai	a4,a4,0x1f
    2b94:	00e677b3          	and	a5,a2,a4
    if (arg < 0)
    2b98:	00090513          	mv	a0,s2
    2b9c:	00040593          	mv	a1,s0
    2ba0:	00000613          	li	a2,0
    2ba4:	00000693          	li	a3,0
    2ba8:	00f12623          	sw	a5,12(sp)
    2bac:	695010ef          	jal	ra,4a40 <__ledf2>
    2bb0:	dc0554e3          	bgez	a0,2978 <cvt+0x78>
        *sign = 1;
    2bb4:	00100793          	li	a5,1
    2bb8:	00f4a023          	sw	a5,0(s1)
        arg   = -arg;
    2bbc:	800007b7          	lui	a5,0x80000
    2bc0:	0087c433          	xor	s0,a5,s0
    2bc4:	db9ff06f          	j	297c <cvt+0x7c>
            *p1 = '1';
    2bc8:	00b78023          	sb	a1,0(a5) # 80000000 <RAM_SIZE+0x7fff0000>
            (*decpt)++;
    2bcc:	000ca703          	lw	a4,0(s9)
    2bd0:	00170713          	addi	a4,a4,1
    2bd4:	00eca023          	sw	a4,0(s9)
            if (eflag == 0)
    2bd8:	00812703          	lw	a4,8(sp)
    2bdc:	00070863          	beqz	a4,2bec <cvt+0x2ec>
    while (*p1 > '9')
    2be0:	0007c703          	lbu	a4,0(a5)
    2be4:	f4e662e3          	bltu	a2,a4,2b28 <cvt+0x228>
    2be8:	f61ff06f          	j	2b48 <cvt+0x248>
                if (p > buf)
    2bec:	0179f463          	bgeu	s3,s7,2bf4 <cvt+0x2f4>
                    *p = '0';
    2bf0:	00db8023          	sb	a3,0(s7)
    while (*p1 > '9')
    2bf4:	0007c703          	lbu	a4,0(a5)
                p++;
    2bf8:	001b8b93          	addi	s7,s7,1
    while (*p1 > '9')
    2bfc:	f2e666e3          	bltu	a2,a4,2b28 <cvt+0x228>
    2c00:	f49ff06f          	j	2b48 <cvt+0x248>
    else if (arg > 0)
    2c04:	00040513          	mv	a0,s0
    2c08:	00048593          	mv	a1,s1
    2c0c:	00000613          	li	a2,0
    2c10:	00000693          	li	a3,0
    2c14:	549010ef          	jal	ra,495c <__gedf2>
    2c18:	0aa05863          	blez	a0,2cc8 <cvt+0x3c8>
        while ((fj = arg * 10) < 1)
    2c1c:	00007737          	lui	a4,0x7
    2c20:	b9072603          	lw	a2,-1136(a4) # 6b90 <__sdata_load>
    2c24:	b9472683          	lw	a3,-1132(a4)
    2c28:	00040513          	mv	a0,s0
    2c2c:	00048593          	mv	a1,s1
    2c30:	00e12023          	sw	a4,0(sp)
    2c34:	6f1010ef          	jal	ra,4b24 <__muldf3>
    2c38:	8101aa03          	lw	s4,-2032(gp) # 6ba0 <__sdata_load+0x10>
    2c3c:	8141aa83          	lw	s5,-2028(gp) # 6ba4 <__sdata_load+0x14>
    2c40:	00050d13          	mv	s10,a0
    2c44:	000a0613          	mv	a2,s4
    2c48:	000a8693          	mv	a3,s5
    2c4c:	00058d93          	mv	s11,a1
    2c50:	00a12c23          	sw	a0,24(sp)
    2c54:	00b12e23          	sw	a1,28(sp)
    2c58:	5e9010ef          	jal	ra,4a40 <__ledf2>
    r2    = 0;
    2c5c:	00000913          	li	s2,0
        while ((fj = arg * 10) < 1)
    2c60:	06055a63          	bgez	a0,2cd4 <cvt+0x3d4>
    2c64:	00012703          	lw	a4,0(sp)
    2c68:	b9072b03          	lw	s6,-1136(a4)
    2c6c:	b9472b83          	lw	s7,-1132(a4)
    2c70:	000d0513          	mv	a0,s10
    2c74:	000d8593          	mv	a1,s11
    2c78:	000b0613          	mv	a2,s6
    2c7c:	000b8693          	mv	a3,s7
    2c80:	6a5010ef          	jal	ra,4b24 <__muldf3>
    2c84:	000a0613          	mv	a2,s4
    2c88:	000a8693          	mv	a3,s5
    2c8c:	000d0413          	mv	s0,s10
    2c90:	000d8493          	mv	s1,s11
    2c94:	00050d13          	mv	s10,a0
    2c98:	00058d93          	mv	s11,a1
    2c9c:	5a5010ef          	jal	ra,4a40 <__ledf2>
            r2--;
    2ca0:	fff90913          	addi	s2,s2,-1
        while ((fj = arg * 10) < 1)
    2ca4:	fc0546e3          	bltz	a0,2c70 <cvt+0x370>
    2ca8:	01a12c23          	sw	s10,24(sp)
    2cac:	01b12e23          	sw	s11,28(sp)
    2cb0:	00098b13          	mv	s6,s3
    2cb4:	dd1ff06f          	j	2a84 <cvt+0x184>
        buf[0] = '\0';
    2cb8:	00098023          	sb	zero,0(s3)
        return buf;
    2cbc:	e91ff06f          	j	2b4c <cvt+0x24c>
        buf[CVTBUFSIZE - 1] = '\0';
    2cc0:	040987a3          	sb	zero,79(s3)
        return buf;
    2cc4:	e89ff06f          	j	2b4c <cvt+0x24c>
    2cc8:	00098b13          	mv	s6,s3
    r2    = 0;
    2ccc:	00000913          	li	s2,0
    2cd0:	db5ff06f          	j	2a84 <cvt+0x184>
        while ((fj = arg * 10) < 1)
    2cd4:	00098b13          	mv	s6,s3
    2cd8:	dadff06f          	j	2a84 <cvt+0x184>

00002cdc <ecvt>:

char *
ecvt(double arg, int ndigits, int *decpt, int *sign)
{
    return cvt(arg, ndigits, decpt, sign, CVTBUF, 1);
    2cdc:	00100813          	li	a6,1
    2ce0:	cac18793          	addi	a5,gp,-852 # 703c <CVTBUF>
    2ce4:	c1dff06f          	j	2900 <cvt>

00002ce8 <ecvtbuf>:
}

char *
ecvtbuf(double arg, int ndigits, int *decpt, int *sign, char *buf)
{
    return cvt(arg, ndigits, decpt, sign, buf, 1);
    2ce8:	00100813          	li	a6,1
    2cec:	c15ff06f          	j	2900 <cvt>

00002cf0 <fcvt>:
}

char *
fcvt(double arg, int ndigits, int *decpt, int *sign)
{
    return cvt(arg, ndigits, decpt, sign, CVTBUF, 0);
    2cf0:	00000813          	li	a6,0
    2cf4:	cac18793          	addi	a5,gp,-852 # 703c <CVTBUF>
    2cf8:	c09ff06f          	j	2900 <cvt>

00002cfc <fcvtbuf>:
}

char *
fcvtbuf(double arg, int ndigits, int *decpt, int *sign, char *buf)
{
    return cvt(arg, ndigits, decpt, sign, buf, 0);
    2cfc:	00000813          	li	a6,0
    2d00:	c01ff06f          	j	2900 <cvt>

00002d04 <number>:
    return i;
}

static char *
number(char *str, long num, int base, int size, int precision, int type)
{
    2d04:	f6010113          	addi	sp,sp,-160
    2d08:	08912a23          	sw	s1,148(sp)
    2d0c:	09212823          	sw	s2,144(sp)
    2d10:	07812c23          	sw	s8,120(sp)
    2d14:	07b12623          	sw	s11,108(sp)
    2d18:	08112e23          	sw	ra,156(sp)
    2d1c:	08812c23          	sw	s0,152(sp)
    2d20:	09312623          	sw	s3,140(sp)
    2d24:	09412423          	sw	s4,136(sp)
    2d28:	09512223          	sw	s5,132(sp)
    2d2c:	09612023          	sw	s6,128(sp)
    2d30:	07712e23          	sw	s7,124(sp)
    2d34:	07912a23          	sw	s9,116(sp)
    2d38:	07a12823          	sw	s10,112(sp)
    char  c, sign, tmp[66];
    char *dig = digits;
    int   i;

    if (type & UPPERCASE)
    2d3c:	0407f813          	andi	a6,a5,64
{
    2d40:	00e12023          	sw	a4,0(sp)
    2d44:	00050d93          	mv	s11,a0
    2d48:	00058493          	mv	s1,a1
    2d4c:	00060c13          	mv	s8,a2
    2d50:	00068913          	mv	s2,a3
    if (type & UPPERCASE)
    2d54:	20080463          	beqz	a6,2f5c <number+0x258>
        dig = upper_digits;
    2d58:	000069b7          	lui	s3,0x6
    2d5c:	7d098993          	addi	s3,s3,2000 # 67d0 <errpat+0x50>
    if (type & LEFT)
    2d60:	0107fa93          	andi	s5,a5,16
    2d64:	1c0a8863          	beqz	s5,2f34 <number+0x230>
        type &= ~ZEROPAD;
    2d68:	ffe7f793          	andi	a5,a5,-2
    2d6c:	01512223          	sw	s5,4(sp)
    if (base < 2 || base > 36)
        return 0;

    c    = (type & ZEROPAD) ? '0' : ' ';
    2d70:	02000713          	li	a4,32
    2d74:	00e12623          	sw	a4,12(sp)
    sign = 0;
    if (type & SIGN)
    2d78:	0027f713          	andi	a4,a5,2
            sign = ' ';
            size--;
        }
    }

    if (type & HEX_PREP)
    2d7c:	0207fa13          	andi	s4,a5,32
    if (type & SIGN)
    2d80:	1e070463          	beqz	a4,2f68 <number+0x264>
        if (num < 0)
    2d84:	1e04c663          	bltz	s1,2f70 <number+0x26c>
        else if (type & PLUS)
    2d88:	0047f713          	andi	a4,a5,4
    2d8c:	24071063          	bnez	a4,2fcc <number+0x2c8>
        else if (type & SPACE)
    2d90:	0087f793          	andi	a5,a5,8
    sign = 0;
    2d94:	00012423          	sw	zero,8(sp)
        else if (type & SPACE)
    2d98:	00078863          	beqz	a5,2da8 <number+0xa4>
            sign = ' ';
    2d9c:	02000793          	li	a5,32
            size--;
    2da0:	fff90913          	addi	s2,s2,-1
            sign = ' ';
    2da4:	00f12423          	sw	a5,8(sp)
    if (type & HEX_PREP)
    2da8:	000a0c63          	beqz	s4,2dc0 <number+0xbc>
    {
        if (base == 16)
    2dac:	01000793          	li	a5,16
    2db0:	24fc0263          	beq	s8,a5,2ff4 <number+0x2f0>
            size -= 2;
        else if (base == 8)
            size--;
    2db4:	ff8c0793          	addi	a5,s8,-8
    2db8:	0017b793          	seqz	a5,a5
    2dbc:	40f90933          	sub	s2,s2,a5
    }

    i = 0;

    if (num == 0)
    2dc0:	1c049263          	bnez	s1,2f84 <number+0x280>
        tmp[i++] = '0';
    2dc4:	03000793          	li	a5,48
    2dc8:	00f10e23          	sb	a5,28(sp)
    2dcc:	00000b93          	li	s7,0
    2dd0:	03000c93          	li	s9,48
    2dd4:	00100b13          	li	s6,1
    2dd8:	01c10413          	addi	s0,sp,28
            tmp[i++] = dig[((unsigned long)num) % (unsigned)base];
            num      = ((unsigned long)num) / (unsigned)base;
        }
    }

    if (i > precision)
    2ddc:	00012783          	lw	a5,0(sp)
    2de0:	000b0993          	mv	s3,s6
    2de4:	00fb5463          	bge	s6,a5,2dec <number+0xe8>
    2de8:	00078993          	mv	s3,a5
        precision = i;
    size -= precision;
    if (!(type & (ZEROPAD | LEFT)))
    2dec:	00412783          	lw	a5,4(sp)
    size -= precision;
    2df0:	41390933          	sub	s2,s2,s3
        while (size-- > 0)
    2df4:	fff90493          	addi	s1,s2,-1
    if (!(type & (ZEROPAD | LEFT)))
    2df8:	02079263          	bnez	a5,2e1c <number+0x118>
        while (size-- > 0)
    2dfc:	21205e63          	blez	s2,3018 <number+0x314>
            *str++ = ' ';
    2e00:	00090613          	mv	a2,s2
    2e04:	000d8513          	mv	a0,s11
    2e08:	02000593          	li	a1,32
    2e0c:	012d8db3          	add	s11,s11,s2
    2e10:	730020ef          	jal	ra,5540 <memset>
    2e14:	ffe00493          	li	s1,-2
        while (size-- > 0)
    2e18:	fff00913          	li	s2,-1
    if (sign)
    2e1c:	00812783          	lw	a5,8(sp)
    2e20:	00078663          	beqz	a5,2e2c <number+0x128>
        *str++ = sign;
    2e24:	00fd8023          	sb	a5,0(s11)
    2e28:	001d8d93          	addi	s11,s11,1

    if (type & HEX_PREP)
    2e2c:	000a0a63          	beqz	s4,2e40 <number+0x13c>
    {
        if (base == 8)
    2e30:	00800793          	li	a5,8
    2e34:	1cfc0463          	beq	s8,a5,2ffc <number+0x2f8>
            *str++ = '0';
        else if (base == 16)
    2e38:	01000793          	li	a5,16
    2e3c:	1afc0063          	beq	s8,a5,2fdc <number+0x2d8>
            *str++ = '0';
            *str++ = digits[33];
        }
    }

    if (!(type & LEFT))
    2e40:	020a9c63          	bnez	s5,2e78 <number+0x174>
        while (size-- > 0)
    2e44:	1d205463          	blez	s2,300c <number+0x308>
            *str++ = c;
    2e48:	fff4c913          	not	s2,s1
    2e4c:	41f95913          	srai	s2,s2,0x1f
    2e50:	0124f933          	and	s2,s1,s2
    2e54:	00c12583          	lw	a1,12(sp)
    2e58:	00190a13          	addi	s4,s2,1
        while (size-- > 0)
    2e5c:	fff48493          	addi	s1,s1,-1
            *str++ = c;
    2e60:	000d8513          	mv	a0,s11
    2e64:	000a0613          	mv	a2,s4
        while (size-- > 0)
    2e68:	41248933          	sub	s2,s1,s2
            *str++ = c;
    2e6c:	6d4020ef          	jal	ra,5540 <memset>
    2e70:	014d8db3          	add	s11,s11,s4
    while (i < precision--)
        *str++ = '0';
    while (i-- > 0)
        *str++ = tmp[i];
    while (size-- > 0)
    2e74:	fff90493          	addi	s1,s2,-1
    while (i < precision--)
    2e78:	013b5e63          	bge	s6,s3,2e94 <number+0x190>
        *str++ = '0';
    2e7c:	416989b3          	sub	s3,s3,s6
    2e80:	000d8513          	mv	a0,s11
    2e84:	00098613          	mv	a2,s3
    2e88:	03000593          	li	a1,48
    2e8c:	6b4020ef          	jal	ra,5540 <memset>
    2e90:	013d8db3          	add	s11,s11,s3
    while (i-- > 0)
    2e94:	017406b3          	add	a3,s0,s7
        while (size-- > 0)
    2e98:	000d8713          	mv	a4,s11
    while (i-- > 0)
    2e9c:	00100613          	li	a2,1
    2ea0:	0080006f          	j	2ea8 <number+0x1a4>
        *str++ = tmp[i];
    2ea4:	0006cc83          	lbu	s9,0(a3)
    2ea8:	00170713          	addi	a4,a4,1
    while (i-- > 0)
    2eac:	40e607b3          	sub	a5,a2,a4
    2eb0:	017787b3          	add	a5,a5,s7
    2eb4:	00fd87b3          	add	a5,s11,a5
        *str++ = tmp[i];
    2eb8:	ff970fa3          	sb	s9,-1(a4)
    while (i-- > 0)
    2ebc:	fff68693          	addi	a3,a3,-1
    2ec0:	fef042e3          	bgtz	a5,2ea4 <number+0x1a0>
        *str++ = tmp[i];
    2ec4:	001b8713          	addi	a4,s7,1
    2ec8:	00ed8733          	add	a4,s11,a4
    while (size-- > 0)
    2ecc:	03205463          	blez	s2,2ef4 <number+0x1f0>
        *str++ = ' ';
    2ed0:	fff4c413          	not	s0,s1
    2ed4:	41f45413          	srai	s0,s0,0x1f
    2ed8:	0084f433          	and	s0,s1,s0
    2edc:	00140413          	addi	s0,s0,1
    2ee0:	00070513          	mv	a0,a4
    2ee4:	00040613          	mv	a2,s0
    2ee8:	02000593          	li	a1,32
    2eec:	654020ef          	jal	ra,5540 <memset>
    2ef0:	00850733          	add	a4,a0,s0

    return str;
}
    2ef4:	09c12083          	lw	ra,156(sp)
    2ef8:	09812403          	lw	s0,152(sp)
    2efc:	09412483          	lw	s1,148(sp)
    2f00:	09012903          	lw	s2,144(sp)
    2f04:	08c12983          	lw	s3,140(sp)
    2f08:	08812a03          	lw	s4,136(sp)
    2f0c:	08412a83          	lw	s5,132(sp)
    2f10:	08012b03          	lw	s6,128(sp)
    2f14:	07c12b83          	lw	s7,124(sp)
    2f18:	07812c03          	lw	s8,120(sp)
    2f1c:	07412c83          	lw	s9,116(sp)
    2f20:	07012d03          	lw	s10,112(sp)
    2f24:	06c12d83          	lw	s11,108(sp)
    2f28:	00070513          	mv	a0,a4
    2f2c:	0a010113          	addi	sp,sp,160
    2f30:	00008067          	ret
    if (!(type & (ZEROPAD | LEFT)))
    2f34:	0117f693          	andi	a3,a5,17
    2f38:	00d12223          	sw	a3,4(sp)
    c    = (type & ZEROPAD) ? '0' : ' ';
    2f3c:	03000693          	li	a3,48
    2f40:	0017f713          	andi	a4,a5,1
    2f44:	00d12623          	sw	a3,12(sp)
    2f48:	e20704e3          	beqz	a4,2d70 <number+0x6c>
    if (type & SIGN)
    2f4c:	0027f713          	andi	a4,a5,2
    if (type & HEX_PREP)
    2f50:	0207fa13          	andi	s4,a5,32
    if (type & SIGN)
    2f54:	00070a63          	beqz	a4,2f68 <number+0x264>
    2f58:	e2dff06f          	j	2d84 <number+0x80>
    char *dig = digits;
    2f5c:	000069b7          	lui	s3,0x6
    2f60:	7a898993          	addi	s3,s3,1960 # 67a8 <errpat+0x28>
    2f64:	dfdff06f          	j	2d60 <number+0x5c>
    sign = 0;
    2f68:	00012423          	sw	zero,8(sp)
    2f6c:	e3dff06f          	j	2da8 <number+0xa4>
            sign = '-';
    2f70:	02d00793          	li	a5,45
    2f74:	00f12423          	sw	a5,8(sp)
            num  = -num;
    2f78:	409004b3          	neg	s1,s1
            size--;
    2f7c:	fff90913          	addi	s2,s2,-1
    if (type & HEX_PREP)
    2f80:	e20a16e3          	bnez	s4,2dac <number+0xa8>
    if (base < 2 || base > 36)
    2f84:	00000b13          	li	s6,0
    2f88:	01c10413          	addi	s0,sp,28
            tmp[i++] = dig[((unsigned long)num) % (unsigned)base];
    2f8c:	000c0593          	mv	a1,s8
    2f90:	00048513          	mv	a0,s1
    2f94:	310020ef          	jal	ra,52a4 <__umodsi3>
    2f98:	00a98833          	add	a6,s3,a0
    2f9c:	00084c83          	lbu	s9,0(a6)
    2fa0:	000b0b93          	mv	s7,s6
    2fa4:	001b0b13          	addi	s6,s6,1
    2fa8:	016407b3          	add	a5,s0,s6
            num      = ((unsigned long)num) / (unsigned)base;
    2fac:	00048513          	mv	a0,s1
    2fb0:	000c0593          	mv	a1,s8
            tmp[i++] = dig[((unsigned long)num) % (unsigned)base];
    2fb4:	ff978fa3          	sb	s9,-1(a5)
    2fb8:	00048d13          	mv	s10,s1
            num      = ((unsigned long)num) / (unsigned)base;
    2fbc:	2a0020ef          	jal	ra,525c <__udivsi3>
    2fc0:	00050493          	mv	s1,a0
        while (num != 0)
    2fc4:	fd8d74e3          	bgeu	s10,s8,2f8c <number+0x288>
    2fc8:	e15ff06f          	j	2ddc <number+0xd8>
            sign = '+';
    2fcc:	02b00793          	li	a5,43
            size--;
    2fd0:	fff90913          	addi	s2,s2,-1
            sign = '+';
    2fd4:	00f12423          	sw	a5,8(sp)
    2fd8:	dd1ff06f          	j	2da8 <number+0xa4>
            *str++ = '0';
    2fdc:	03000793          	li	a5,48
    2fe0:	00fd8023          	sb	a5,0(s11)
            *str++ = digits[33];
    2fe4:	07800793          	li	a5,120
    2fe8:	00fd80a3          	sb	a5,1(s11)
    2fec:	002d8d93          	addi	s11,s11,2
    2ff0:	e51ff06f          	j	2e40 <number+0x13c>
            size -= 2;
    2ff4:	ffe90913          	addi	s2,s2,-2
    2ff8:	dc9ff06f          	j	2dc0 <number+0xbc>
            *str++ = '0';
    2ffc:	03000793          	li	a5,48
    3000:	00fd8023          	sb	a5,0(s11)
    3004:	001d8d93          	addi	s11,s11,1
    3008:	e39ff06f          	j	2e40 <number+0x13c>
        while (size-- > 0)
    300c:	00048913          	mv	s2,s1
    3010:	fff48493          	addi	s1,s1,-1
    3014:	e65ff06f          	j	2e78 <number+0x174>
        while (size-- > 0)
    3018:	ffe90793          	addi	a5,s2,-2
    301c:	00048913          	mv	s2,s1
    3020:	00078493          	mv	s1,a5
    3024:	df9ff06f          	j	2e1c <number+0x118>

00003028 <uart_send_char>:

void
uart_send_char(char c)
{
	char* uart = (char*)0xDEADBEEE;
	*uart = c;
    3028:	deadc7b7          	lui	a5,0xdeadc
    302c:	eea78723          	sb	a0,-274(a5) # deadbeee <RAM_SIZE+0xdeacbeee>
            while (*UART_CONTROL_ADDRESS != UART_READY);

            Check the UART sample code on your platform or the board
       documentation.
    */
}
    3030:	00008067          	ret

00003034 <ee_printf>:

int
ee_printf(const char *fmt, ...)
{
    3034:	b7010113          	addi	sp,sp,-1168
    3038:	45612823          	sw	s6,1104(sp)
    303c:	46112623          	sw	ra,1132(sp)
    3040:	46812423          	sw	s0,1128(sp)
    3044:	46912223          	sw	s1,1124(sp)
    3048:	47212023          	sw	s2,1120(sp)
    304c:	45312e23          	sw	s3,1116(sp)
    3050:	45412c23          	sw	s4,1112(sp)
    3054:	45512a23          	sw	s5,1108(sp)
    3058:	45712623          	sw	s7,1100(sp)
    305c:	45812423          	sw	s8,1096(sp)
    3060:	45912223          	sw	s9,1092(sp)
    3064:	45a12023          	sw	s10,1088(sp)
    3068:	43b12e23          	sw	s11,1084(sp)
    306c:	46b12a23          	sw	a1,1140(sp)
    3070:	46c12c23          	sw	a2,1144(sp)
    3074:	46d12e23          	sw	a3,1148(sp)
    3078:	48e12023          	sw	a4,1152(sp)
    307c:	48f12223          	sw	a5,1156(sp)
    3080:	49012423          	sw	a6,1160(sp)
    3084:	49112623          	sw	a7,1164(sp)
    for (str = buf; *fmt; fmt++)
    3088:	00054783          	lbu	a5,0(a0)
    char    buf[1024], *p;
    va_list args;
    int     n = 0;

    va_start(args, fmt);
    308c:	47410b13          	addi	s6,sp,1140
    3090:	01612a23          	sw	s6,20(sp)
    for (str = buf; *fmt; fmt++)
    3094:	78078863          	beqz	a5,3824 <ee_printf+0x7f0>
    3098:	03010913          	addi	s2,sp,48
    309c:	00007bb7          	lui	s7,0x7
    30a0:	00007a37          	lui	s4,0x7
                tmp[len++] = digits[n / 10];
    30a4:	000069b7          	lui	s3,0x6
    30a8:	00050413          	mv	s0,a0
    for (str = buf; *fmt; fmt++)
    30ac:	00090a93          	mv	s5,s2
    30b0:	800b8b93          	addi	s7,s7,-2048 # 6800 <errpat+0x80>
    30b4:	844a0a13          	addi	s4,s4,-1980 # 6844 <errpat+0xc4>
                tmp[len++] = digits[n / 10];
    30b8:	7a898993          	addi	s3,s3,1960 # 67a8 <errpat+0x28>
        if (*fmt != '%')
    30bc:	02500713          	li	a4,37
    30c0:	08e78063          	beq	a5,a4,3140 <ee_printf+0x10c>
            *str++ = *fmt;
    30c4:	00fa8023          	sb	a5,0(s5)
    for (str = buf; *fmt; fmt++)
    30c8:	00144783          	lbu	a5,1(s0)
            *str++ = *fmt;
    30cc:	001a8a93          	addi	s5,s5,1
            continue;
    30d0:	00140413          	addi	s0,s0,1
    for (str = buf; *fmt; fmt++)
    30d4:	fe0794e3          	bnez	a5,30bc <ee_printf+0x88>
    *str = '\0';
    30d8:	000a8023          	sb	zero,0(s5)
    ee_vsprintf(buf, fmt, args);
    va_end(args);
    p = buf;
    while (*p)
    30dc:	03014783          	lbu	a5,48(sp)
    30e0:	14078663          	beqz	a5,322c <ee_printf+0x1f8>
    30e4:	00100713          	li	a4,1
	*uart = c;
    30e8:	deadc6b7          	lui	a3,0xdeadc
    30ec:	41270733          	sub	a4,a4,s2
    30f0:	eef68723          	sb	a5,-274(a3) # deadbeee <RAM_SIZE+0xdeacbeee>
    while (*p)
    30f4:	00194783          	lbu	a5,1(s2)
    30f8:	00e90533          	add	a0,s2,a4
    {
        uart_send_char(*p);
        n++;
        p++;
    30fc:	00190913          	addi	s2,s2,1
    while (*p)
    3100:	fe0798e3          	bnez	a5,30f0 <ee_printf+0xbc>
    }

    return n;
}
    3104:	46c12083          	lw	ra,1132(sp)
    3108:	46812403          	lw	s0,1128(sp)
    310c:	46412483          	lw	s1,1124(sp)
    3110:	46012903          	lw	s2,1120(sp)
    3114:	45c12983          	lw	s3,1116(sp)
    3118:	45812a03          	lw	s4,1112(sp)
    311c:	45412a83          	lw	s5,1108(sp)
    3120:	45012b03          	lw	s6,1104(sp)
    3124:	44c12b83          	lw	s7,1100(sp)
    3128:	44812c03          	lw	s8,1096(sp)
    312c:	44412c83          	lw	s9,1092(sp)
    3130:	44012d03          	lw	s10,1088(sp)
    3134:	43c12d83          	lw	s11,1084(sp)
    3138:	49010113          	addi	sp,sp,1168
    313c:	00008067          	ret
        flags = 0;
    3140:	00000793          	li	a5,0
    3144:	01000693          	li	a3,16
        switch (*fmt)
    3148:	00144583          	lbu	a1,1(s0)
        fmt++; // This also skips first '%'
    314c:	00140493          	addi	s1,s0,1
        switch (*fmt)
    3150:	fe058713          	addi	a4,a1,-32
    3154:	0ff77713          	zext.b	a4,a4
    3158:	00e6ea63          	bltu	a3,a4,316c <ee_printf+0x138>
    315c:	00271713          	slli	a4,a4,0x2
    3160:	01770733          	add	a4,a4,s7
    3164:	00072703          	lw	a4,0(a4)
    3168:	00070067          	jr	a4
        if (is_digit(*fmt))
    316c:	fd058713          	addi	a4,a1,-48
    3170:	0ff77713          	zext.b	a4,a4
    3174:	00900693          	li	a3,9
    3178:	10e6fc63          	bgeu	a3,a4,3290 <ee_printf+0x25c>
        else if (*fmt == '*')
    317c:	02a00713          	li	a4,42
        field_width = -1;
    3180:	fff00693          	li	a3,-1
        else if (*fmt == '*')
    3184:	14e58063          	beq	a1,a4,32c4 <ee_printf+0x290>
        if (*fmt == '.')
    3188:	02e00613          	li	a2,46
        precision = -1;
    318c:	fff00713          	li	a4,-1
        if (*fmt == '.')
    3190:	0cc58a63          	beq	a1,a2,3264 <ee_printf+0x230>
        if (*fmt == 'l' || *fmt == 'L')
    3194:	0df5f613          	andi	a2,a1,223
    3198:	04c00513          	li	a0,76
    319c:	08a60c63          	beq	a2,a0,3234 <ee_printf+0x200>
        switch (*fmt)
    31a0:	fbf58613          	addi	a2,a1,-65
    31a4:	0ff67613          	zext.b	a2,a2
    31a8:	03700513          	li	a0,55
    31ac:	04c56863          	bltu	a0,a2,31fc <ee_printf+0x1c8>
    31b0:	00261613          	slli	a2,a2,0x2
    31b4:	01460633          	add	a2,a2,s4
    31b8:	00062603          	lw	a2,0(a2)
    31bc:	00060067          	jr	a2
                flags |= ZEROPAD;
    31c0:	0017e793          	ori	a5,a5,1
    for (str = buf; *fmt; fmt++)
    31c4:	00048413          	mv	s0,s1
    31c8:	f81ff06f          	j	3148 <ee_printf+0x114>
                flags |= LEFT;
    31cc:	0107e793          	ori	a5,a5,16
    for (str = buf; *fmt; fmt++)
    31d0:	00048413          	mv	s0,s1
    31d4:	f75ff06f          	j	3148 <ee_printf+0x114>
                flags |= PLUS;
    31d8:	0047e793          	ori	a5,a5,4
    for (str = buf; *fmt; fmt++)
    31dc:	00048413          	mv	s0,s1
    31e0:	f69ff06f          	j	3148 <ee_printf+0x114>
                flags |= HEX_PREP;
    31e4:	0207e793          	ori	a5,a5,32
    for (str = buf; *fmt; fmt++)
    31e8:	00048413          	mv	s0,s1
    31ec:	f5dff06f          	j	3148 <ee_printf+0x114>
                flags |= SPACE;
    31f0:	0087e793          	ori	a5,a5,8
    for (str = buf; *fmt; fmt++)
    31f4:	00048413          	mv	s0,s1
    31f8:	f51ff06f          	j	3148 <ee_printf+0x114>
        if (*fmt == 'l' || *fmt == 'L')
    31fc:	00048c13          	mv	s8,s1
    3200:	00058513          	mv	a0,a1
                if (*fmt != '%')
    3204:	02500793          	li	a5,37
            *str++ = *fmt;
    3208:	001a8713          	addi	a4,s5,1
                if (*fmt != '%')
    320c:	54f50063          	beq	a0,a5,374c <ee_printf+0x718>
                    *str++ = '%';
    3210:	00fa8023          	sb	a5,0(s5)
                if (*fmt)
    3214:	000c4783          	lbu	a5,0(s8)
    3218:	6c079863          	bnez	a5,38e8 <ee_printf+0x8b4>
                    *str++ = '%';
    321c:	00070a93          	mv	s5,a4
    *str = '\0';
    3220:	000a8023          	sb	zero,0(s5)
    while (*p)
    3224:	03014783          	lbu	a5,48(sp)
    3228:	ea079ee3          	bnez	a5,30e4 <ee_printf+0xb0>
    int     n = 0;
    322c:	00000513          	li	a0,0
    return n;
    3230:	ed5ff06f          	j	3104 <ee_printf+0xd0>
        switch (*fmt)
    3234:	0014c503          	lbu	a0,1(s1)
    3238:	03700813          	li	a6,55
            fmt++;
    323c:	00148c13          	addi	s8,s1,1
        switch (*fmt)
    3240:	fbf50613          	addi	a2,a0,-65
    3244:	0ff67613          	zext.b	a2,a2
    3248:	fac86ee3          	bltu	a6,a2,3204 <ee_printf+0x1d0>
    324c:	00007837          	lui	a6,0x7
    3250:	00261613          	slli	a2,a2,0x2
    3254:	92480813          	addi	a6,a6,-1756 # 6924 <errpat+0x1a4>
    3258:	01060633          	add	a2,a2,a6
    325c:	00062603          	lw	a2,0(a2)
    3260:	00060067          	jr	a2
            if (is_digit(*fmt))
    3264:	0014c583          	lbu	a1,1(s1)
    3268:	00900613          	li	a2,9
            ++fmt;
    326c:	00148513          	addi	a0,s1,1
            if (is_digit(*fmt))
    3270:	fd058713          	addi	a4,a1,-48
    3274:	0ff77713          	zext.b	a4,a4
    3278:	38e67063          	bgeu	a2,a4,35f8 <ee_printf+0x5c4>
            else if (*fmt == '*')
    327c:	02a00713          	li	a4,42
    3280:	3ae58863          	beq	a1,a4,3630 <ee_printf+0x5fc>
            ++fmt;
    3284:	00050493          	mv	s1,a0
                precision = 0;
    3288:	00000713          	li	a4,0
    328c:	f09ff06f          	j	3194 <ee_printf+0x160>
    int i = 0;
    3290:	00000693          	li	a3,0
    while (is_digit(**s))
    3294:	00900613          	li	a2,9
        i = i * 10 + *((*s)++) - '0';
    3298:	00269713          	slli	a4,a3,0x2
    329c:	00d706b3          	add	a3,a4,a3
    32a0:	00148493          	addi	s1,s1,1
    32a4:	00169693          	slli	a3,a3,0x1
    32a8:	00b686b3          	add	a3,a3,a1
    while (is_digit(**s))
    32ac:	0004c583          	lbu	a1,0(s1)
        i = i * 10 + *((*s)++) - '0';
    32b0:	fd068693          	addi	a3,a3,-48
    while (is_digit(**s))
    32b4:	fd058713          	addi	a4,a1,-48
    32b8:	0ff77713          	zext.b	a4,a4
    32bc:	fce67ee3          	bgeu	a2,a4,3298 <ee_printf+0x264>
    32c0:	ec9ff06f          	j	3188 <ee_printf+0x154>
            field_width = va_arg(args, int);
    32c4:	000b2683          	lw	a3,0(s6)
        if (*fmt == '.')
    32c8:	00244583          	lbu	a1,2(s0)
            fmt++;
    32cc:	00240493          	addi	s1,s0,2
            field_width = va_arg(args, int);
    32d0:	004b0b13          	addi	s6,s6,4
            if (field_width < 0)
    32d4:	ea06dae3          	bgez	a3,3188 <ee_printf+0x154>
                field_width = -field_width;
    32d8:	40d006b3          	neg	a3,a3
                flags |= LEFT;
    32dc:	0107e793          	ori	a5,a5,16
    32e0:	ea9ff06f          	j	3188 <ee_printf+0x154>
                flags |= UPPERCASE;
    32e4:	0407e793          	ori	a5,a5,64
                if (qualifier == 'l')
    32e8:	06c00713          	li	a4,108
                s = va_arg(args, char *);
    32ec:	000b2403          	lw	s0,0(s6)
                *str++ = (unsigned char)va_arg(args, int);
    32f0:	004b0b13          	addi	s6,s6,4
                if (qualifier == 'l')
    32f4:	36e58063          	beq	a1,a4,3654 <ee_printf+0x620>
        n = addr[i];
    32f8:	00044d03          	lbu	s10,0(s0)
    len = 0;
    32fc:	00000493          	li	s1,0
    3300:	00440613          	addi	a2,s0,4
            if (n >= 100)
    3304:	06300313          	li	t1,99
            tmp[len++] = digits[0];
    3308:	03000893          	li	a7,48
            tmp[len++] = '.';
    330c:	02e00c93          	li	s9,46
            tmp[len++] = digits[0];
    3310:	00148d93          	addi	s11,s1,1
        if (n == 0)
    3314:	020d1a63          	bnez	s10,3348 <ee_printf+0x314>
            tmp[len++] = digits[0];
    3318:	43010713          	addi	a4,sp,1072
    331c:	009704b3          	add	s1,a4,s1
    3320:	bf148423          	sb	a7,-1048(s1)
    for (i = 0; i < 4; i++)
    3324:	00140413          	addi	s0,s0,1
    3328:	0c860863          	beq	a2,s0,33f8 <ee_printf+0x3c4>
            tmp[len++] = '.';
    332c:	43010713          	addi	a4,sp,1072
        n = addr[i];
    3330:	00044d03          	lbu	s10,0(s0)
            tmp[len++] = '.';
    3334:	01b70733          	add	a4,a4,s11
    3338:	001d8493          	addi	s1,s11,1
    333c:	bf970423          	sb	s9,-1048(a4)
            tmp[len++] = digits[0];
    3340:	00148d93          	addi	s11,s1,1
        if (n == 0)
    3344:	fc0d0ae3          	beqz	s10,3318 <ee_printf+0x2e4>
            if (n >= 100)
    3348:	25a35463          	bge	t1,s10,3590 <ee_printf+0x55c>
                tmp[len++] = digits[n / 100];
    334c:	06400593          	li	a1,100
    3350:	000d0513          	mv	a0,s10
    3354:	00c12623          	sw	a2,12(sp)
    3358:	00d12423          	sw	a3,8(sp)
    335c:	00f12223          	sw	a5,4(sp)
    3360:	6f5010ef          	jal	ra,5254 <__divsi3>
    3364:	00a98533          	add	a0,s3,a0
    3368:	00054e03          	lbu	t3,0(a0)
    336c:	43010793          	addi	a5,sp,1072
    3370:	00978733          	add	a4,a5,s1
    3374:	bfc70423          	sb	t3,-1048(a4)
                n          = n % 100;
    3378:	06400593          	li	a1,100
    337c:	000d0513          	mv	a0,s10
    3380:	759010ef          	jal	ra,52d8 <__modsi3>
                tmp[len++] = digits[n / 10];
    3384:	00a00593          	li	a1,10
                n          = n % 100;
    3388:	00050d13          	mv	s10,a0
                tmp[len++] = digits[n / 10];
    338c:	6c9010ef          	jal	ra,5254 <__divsi3>
    3390:	00a98533          	add	a0,s3,a0
    3394:	00054e03          	lbu	t3,0(a0)
    3398:	43010793          	addi	a5,sp,1072
    339c:	01b78db3          	add	s11,a5,s11
    33a0:	00248713          	addi	a4,s1,2
                n          = n % 10;
    33a4:	000d0513          	mv	a0,s10
                tmp[len++] = digits[n / 10];
    33a8:	bfcd8423          	sb	t3,-1048(s11)
                n          = n % 10;
    33ac:	00a00593          	li	a1,10
                tmp[len++] = digits[n / 10];
    33b0:	00e12023          	sw	a4,0(sp)
                n          = n % 10;
    33b4:	725010ef          	jal	ra,52d8 <__modsi3>
                tmp[len++] = digits[n / 10];
    33b8:	00012703          	lw	a4,0(sp)
    33bc:	00412783          	lw	a5,4(sp)
    33c0:	00812683          	lw	a3,8(sp)
    33c4:	00c12603          	lw	a2,12(sp)
            tmp[len++] = digits[n];
    33c8:	00348d93          	addi	s11,s1,3
                n          = n % 10;
    33cc:	00050d13          	mv	s10,a0
                tmp[len++] = digits[n / 10];
    33d0:	00070493          	mv	s1,a4
    33d4:	06300313          	li	t1,99
    33d8:	03000893          	li	a7,48
            tmp[len++] = digits[n];
    33dc:	01a98d33          	add	s10,s3,s10
    33e0:	000d4703          	lbu	a4,0(s10)
    33e4:	43010593          	addi	a1,sp,1072
    33e8:	009584b3          	add	s1,a1,s1
    33ec:	bee48423          	sb	a4,-1048(s1)
    for (i = 0; i < 4; i++)
    33f0:	00140413          	addi	s0,s0,1
    33f4:	f2861ce3          	bne	a2,s0,332c <ee_printf+0x2f8>
    if (!(type & LEFT))
    33f8:	0107f793          	andi	a5,a5,16
                    while (--field_width > 0)
    33fc:	fff68493          	addi	s1,a3,-1
    if (!(type & LEFT))
    3400:	02079a63          	bnez	a5,3434 <ee_printf+0x400>
        while (len < size--)
    3404:	4eddd863          	bge	s11,a3,38f4 <ee_printf+0x8c0>
            *str++ = ' ';
    3408:	41b68433          	sub	s0,a3,s11
    340c:	000a8513          	mv	a0,s5
    3410:	00040613          	mv	a2,s0
    3414:	02000593          	li	a1,32
    3418:	00d12023          	sw	a3,0(sp)
    341c:	124020ef          	jal	ra,5540 <memset>
        while (len < size--)
    3420:	00012683          	lw	a3,0(sp)
            *str++ = ' ';
    3424:	008a8ab3          	add	s5,s5,s0
        while (len < size--)
    3428:	40dd86b3          	sub	a3,s11,a3
    342c:	009686b3          	add	a3,a3,s1
    while (len < size--)
    3430:	fff68493          	addi	s1,a3,-1
        *str++ = tmp[i];
    3434:	000a8513          	mv	a0,s5
    3438:	000d8613          	mv	a2,s11
    343c:	01810593          	addi	a1,sp,24
    3440:	00d12023          	sw	a3,0(sp)
    3444:	7d5010ef          	jal	ra,5418 <memcpy>
    while (len < size--)
    3448:	00012683          	lw	a3,0(sp)
        *str++ = tmp[i];
    344c:	01ba8ab3          	add	s5,s5,s11
    while (len < size--)
    3450:	02ddd063          	bge	s11,a3,3470 <ee_printf+0x43c>
        *str++ = ' ';
    3454:	00100413          	li	s0,1
    3458:	2fb4d463          	bge	s1,s11,3740 <ee_printf+0x70c>
    345c:	000a8513          	mv	a0,s5
    3460:	00040613          	mv	a2,s0
    3464:	02000593          	li	a1,32
    3468:	0d8020ef          	jal	ra,5540 <memset>
    346c:	008a8ab3          	add	s5,s5,s0
    for (str = buf; *fmt; fmt++)
    3470:	001c4783          	lbu	a5,1(s8)
    3474:	001c0413          	addi	s0,s8,1
    3478:	c40792e3          	bnez	a5,30bc <ee_printf+0x88>
    347c:	c5dff06f          	j	30d8 <ee_printf+0xa4>
        if (*fmt == 'l' || *fmt == 'L')
    3480:	00048c13          	mv	s8,s1
                if (!(flags & LEFT))
    3484:	0107f793          	andi	a5,a5,16
                    while (--field_width > 0)
    3488:	fff68493          	addi	s1,a3,-1
                if (!(flags & LEFT))
    348c:	2e078863          	beqz	a5,377c <ee_printf+0x748>
                *str++ = (unsigned char)va_arg(args, int);
    3490:	000b2783          	lw	a5,0(s6)
    3494:	001a8713          	addi	a4,s5,1
    3498:	004b0b13          	addi	s6,s6,4
    349c:	00fa8023          	sb	a5,0(s5)
    for (str = buf; *fmt; fmt++)
    34a0:	001c0413          	addi	s0,s8,1
                while (--field_width > 0)
    34a4:	42905663          	blez	s1,38d0 <ee_printf+0x89c>
                    *str++ = ' ';
    34a8:	00048613          	mv	a2,s1
    34ac:	02000593          	li	a1,32
    34b0:	00070513          	mv	a0,a4
    34b4:	08c020ef          	jal	ra,5540 <memset>
    for (str = buf; *fmt; fmt++)
    34b8:	001c4783          	lbu	a5,1(s8)
                    *str++ = ' ';
    34bc:	00950ab3          	add	s5,a0,s1
    for (str = buf; *fmt; fmt++)
    34c0:	be079ee3          	bnez	a5,30bc <ee_printf+0x88>
    34c4:	c15ff06f          	j	30d8 <ee_printf+0xa4>
        if (*fmt == 'l' || *fmt == 'L')
    34c8:	00048c13          	mv	s8,s1
                s = va_arg(args, char *);
    34cc:	000b2403          	lw	s0,0(s6)
    34d0:	004b0b13          	addi	s6,s6,4
                if (!s)
    34d4:	28040e63          	beqz	s0,3770 <ee_printf+0x73c>
    for (sc = s; *sc != '\0' && count--; ++sc)
    34d8:	00044603          	lbu	a2,0(s0)
    34dc:	3c060863          	beqz	a2,38ac <ee_printf+0x878>
    34e0:	3c070663          	beqz	a4,38ac <ee_printf+0x878>
    34e4:	00040613          	mv	a2,s0
    34e8:	00c0006f          	j	34f4 <ee_printf+0x4c0>
    34ec:	40e605b3          	sub	a1,a2,a4
    34f0:	00858863          	beq	a1,s0,3500 <ee_printf+0x4cc>
    34f4:	00164583          	lbu	a1,1(a2)
    34f8:	00160613          	addi	a2,a2,1
    34fc:	fe0598e3          	bnez	a1,34ec <ee_printf+0x4b8>
                if (!(flags & LEFT))
    3500:	0107f793          	andi	a5,a5,16
    return sc - s;
    3504:	408604b3          	sub	s1,a2,s0
                if (!(flags & LEFT))
    3508:	28078a63          	beqz	a5,379c <ee_printf+0x768>
                for (i = 0; i < len; ++i)
    350c:	02905263          	blez	s1,3530 <ee_printf+0x4fc>
    3510:	00940633          	add	a2,s0,s1
    3514:	000a8793          	mv	a5,s5
                    *str++ = *s++;
    3518:	00044703          	lbu	a4,0(s0)
    351c:	00140413          	addi	s0,s0,1
    3520:	00178793          	addi	a5,a5,1
    3524:	fee78fa3          	sb	a4,-1(a5)
                for (i = 0; i < len; ++i)
    3528:	fec418e3          	bne	s0,a2,3518 <ee_printf+0x4e4>
                    *str++ = *s++;
    352c:	009a8ab3          	add	s5,s5,s1
    for (str = buf; *fmt; fmt++)
    3530:	001c0413          	addi	s0,s8,1
                while (len < field_width--)
    3534:	00d4de63          	bge	s1,a3,3550 <ee_printf+0x51c>
                    *str++ = ' ';
    3538:	409684b3          	sub	s1,a3,s1
    353c:	000a8513          	mv	a0,s5
    3540:	00048613          	mv	a2,s1
    3544:	02000593          	li	a1,32
    3548:	7f9010ef          	jal	ra,5540 <memset>
    354c:	009a8ab3          	add	s5,s5,s1
    for (str = buf; *fmt; fmt++)
    3550:	001c4783          	lbu	a5,1(s8)
    3554:	b60794e3          	bnez	a5,30bc <ee_printf+0x88>
    3558:	b81ff06f          	j	30d8 <ee_printf+0xa4>
        if (*fmt == 'l' || *fmt == 'L')
    355c:	00048c13          	mv	s8,s1
                if (field_width == -1)
    3560:	fff00613          	li	a2,-1
    3564:	20c68063          	beq	a3,a2,3764 <ee_printf+0x730>
                str = number(str,
    3568:	000b2583          	lw	a1,0(s6)
    356c:	000a8513          	mv	a0,s5
    3570:	01000613          	li	a2,16
    3574:	f90ff0ef          	jal	ra,2d04 <number>
    for (str = buf; *fmt; fmt++)
    3578:	001c4783          	lbu	a5,1(s8)
                             (unsigned long)va_arg(args, void *),
    357c:	004b0b13          	addi	s6,s6,4
                str = number(str,
    3580:	00050a93          	mv	s5,a0
    for (str = buf; *fmt; fmt++)
    3584:	001c0413          	addi	s0,s8,1
    3588:	b2079ae3          	bnez	a5,30bc <ee_printf+0x88>
    358c:	b4dff06f          	j	30d8 <ee_printf+0xa4>
            else if (n >= 10)
    3590:	00900713          	li	a4,9
    3594:	e5a754e3          	bge	a4,s10,33dc <ee_printf+0x3a8>
                tmp[len++] = digits[n / 10];
    3598:	00a00593          	li	a1,10
    359c:	000d0513          	mv	a0,s10
    35a0:	00c12423          	sw	a2,8(sp)
    35a4:	00d12223          	sw	a3,4(sp)
    35a8:	00f12023          	sw	a5,0(sp)
    35ac:	4a9010ef          	jal	ra,5254 <__divsi3>
    35b0:	00a98733          	add	a4,s3,a0
    35b4:	00074e03          	lbu	t3,0(a4)
    35b8:	43010793          	addi	a5,sp,1072
    35bc:	00978733          	add	a4,a5,s1
                n          = n % 10;
    35c0:	000d0513          	mv	a0,s10
                tmp[len++] = digits[n / 10];
    35c4:	bfc70423          	sb	t3,-1048(a4)
                n          = n % 10;
    35c8:	00a00593          	li	a1,10
    35cc:	50d010ef          	jal	ra,52d8 <__modsi3>
            tmp[len++] = digits[n];
    35d0:	00248713          	addi	a4,s1,2
    35d4:	00812603          	lw	a2,8(sp)
                tmp[len++] = digits[n / 10];
    35d8:	000d8493          	mv	s1,s11
            tmp[len++] = digits[n];
    35dc:	00412683          	lw	a3,4(sp)
    35e0:	00012783          	lw	a5,0(sp)
                n          = n % 10;
    35e4:	00050d13          	mv	s10,a0
            tmp[len++] = digits[n];
    35e8:	00070d93          	mv	s11,a4
    35ec:	03000893          	li	a7,48
    35f0:	06300313          	li	t1,99
    35f4:	de9ff06f          	j	33dc <ee_printf+0x3a8>
    int i = 0;
    35f8:	00000713          	li	a4,0
    while (is_digit(**s))
    35fc:	00900813          	li	a6,9
        i = i * 10 + *((*s)++) - '0';
    3600:	00271613          	slli	a2,a4,0x2
    3604:	00e60733          	add	a4,a2,a4
    3608:	00150513          	addi	a0,a0,1
    360c:	00171713          	slli	a4,a4,0x1
    3610:	00b70733          	add	a4,a4,a1
    while (is_digit(**s))
    3614:	00054583          	lbu	a1,0(a0)
        i = i * 10 + *((*s)++) - '0';
    3618:	fd070713          	addi	a4,a4,-48
    while (is_digit(**s))
    361c:	fd058613          	addi	a2,a1,-48
    3620:	0ff67613          	zext.b	a2,a2
    3624:	fcc87ee3          	bgeu	a6,a2,3600 <ee_printf+0x5cc>
            if (precision < 0)
    3628:	00050493          	mv	s1,a0
    362c:	b69ff06f          	j	3194 <ee_printf+0x160>
                ++fmt;
    3630:	000b2703          	lw	a4,0(s6)
    3634:	00248513          	addi	a0,s1,2
        if (*fmt == 'l' || *fmt == 'L')
    3638:	0024c583          	lbu	a1,2(s1)
    363c:	fff74613          	not	a2,a4
    3640:	41f65613          	srai	a2,a2,0x1f
    3644:	00c77733          	and	a4,a4,a2
                precision = va_arg(args, int);
    3648:	004b0b13          	addi	s6,s6,4
            if (precision < 0)
    364c:	00050493          	mv	s1,a0
    3650:	b45ff06f          	j	3194 <ee_printf+0x160>
    if (type & UPPERCASE)
    3654:	0407f713          	andi	a4,a5,64
    char *dig = digits;
    3658:	00098513          	mv	a0,s3
    if (type & UPPERCASE)
    365c:	00070663          	beqz	a4,3668 <ee_printf+0x634>
        dig = upper_digits;
    3660:	00006537          	lui	a0,0x6
    3664:	7d050513          	addi	a0,a0,2000 # 67d0 <errpat+0x50>
        if (i != 0)
    3668:	01810613          	addi	a2,sp,24
    366c:	02a10813          	addi	a6,sp,42
            tmp[len++] = ':';
    3670:	03a00893          	li	a7,58
    3674:	0080006f          	j	367c <ee_printf+0x648>
    3678:	ff160fa3          	sb	a7,-1(a2)
        tmp[len++] = dig[addr[i] >> 4];
    367c:	00044703          	lbu	a4,0(s0)
    for (i = 0; i < 6; i++)
    3680:	00360613          	addi	a2,a2,3
    3684:	00140413          	addi	s0,s0,1
        tmp[len++] = dig[addr[i] >> 4];
    3688:	00475593          	srli	a1,a4,0x4
        tmp[len++] = dig[addr[i] & 0x0F];
    368c:	00f77713          	andi	a4,a4,15
        tmp[len++] = dig[addr[i] >> 4];
    3690:	00b505b3          	add	a1,a0,a1
        tmp[len++] = dig[addr[i] & 0x0F];
    3694:	00e50733          	add	a4,a0,a4
        tmp[len++] = dig[addr[i] >> 4];
    3698:	0005c583          	lbu	a1,0(a1)
        tmp[len++] = dig[addr[i] & 0x0F];
    369c:	00074703          	lbu	a4,0(a4)
        tmp[len++] = dig[addr[i] >> 4];
    36a0:	feb60ea3          	sb	a1,-3(a2)
        tmp[len++] = dig[addr[i] & 0x0F];
    36a4:	fee60f23          	sb	a4,-2(a2)
    for (i = 0; i < 6; i++)
    36a8:	fd0618e3          	bne	a2,a6,3678 <ee_printf+0x644>
    if (!(type & LEFT))
    36ac:	0107f793          	andi	a5,a5,16
                    while (--field_width > 0)
    36b0:	fff68413          	addi	s0,a3,-1
    if (!(type & LEFT))
    36b4:	02079a63          	bnez	a5,36e8 <ee_printf+0x6b4>
        while (len < size--)
    36b8:	01100793          	li	a5,17
    36bc:	24d7d463          	bge	a5,a3,3904 <ee_printf+0x8d0>
            *str++ = ' ';
    36c0:	fef68c13          	addi	s8,a3,-17
        while (len < size--)
    36c4:	418406b3          	sub	a3,s0,s8
            *str++ = ' ';
    36c8:	000a8513          	mv	a0,s5
    36cc:	000c0613          	mv	a2,s8
    36d0:	02000593          	li	a1,32
        while (len < size--)
    36d4:	00d12023          	sw	a3,0(sp)
            *str++ = ' ';
    36d8:	669010ef          	jal	ra,5540 <memset>
    while (len < size--)
    36dc:	00012683          	lw	a3,0(sp)
            *str++ = ' ';
    36e0:	018a8ab3          	add	s5,s5,s8
    while (len < size--)
    36e4:	fff68413          	addi	s0,a3,-1
        *str++ = tmp[i];
    36e8:	000a8513          	mv	a0,s5
    36ec:	01100613          	li	a2,17
    36f0:	01810593          	addi	a1,sp,24
    36f4:	00d12023          	sw	a3,0(sp)
    36f8:	521010ef          	jal	ra,5418 <memcpy>
    while (len < size--)
    36fc:	00012683          	lw	a3,0(sp)
        *str++ = tmp[i];
    3700:	01100c13          	li	s8,17
    3704:	011a8a93          	addi	s5,s5,17
    while (len < size--)
    3708:	02dc5463          	bge	s8,a3,3730 <ee_printf+0x6fc>
        *str++ = ' ';
    370c:	01000793          	li	a5,16
    3710:	00100c13          	li	s8,1
    3714:	0087d463          	bge	a5,s0,371c <ee_printf+0x6e8>
    3718:	ff040c13          	addi	s8,s0,-16
    371c:	000a8513          	mv	a0,s5
    3720:	000c0613          	mv	a2,s8
    3724:	02000593          	li	a1,32
    3728:	619010ef          	jal	ra,5540 <memset>
    372c:	018a8ab3          	add	s5,s5,s8
    for (str = buf; *fmt; fmt++)
    3730:	0024c783          	lbu	a5,2(s1)
    3734:	00248413          	addi	s0,s1,2
    3738:	980792e3          	bnez	a5,30bc <ee_printf+0x88>
    373c:	99dff06f          	j	30d8 <ee_printf+0xa4>
        *str++ = ' ';
    3740:	41b40433          	sub	s0,s0,s11
    3744:	00940433          	add	s0,s0,s1
    3748:	d15ff06f          	j	345c <ee_printf+0x428>
                if (*fmt)
    374c:	000c4783          	lbu	a5,0(s8)
    3750:	00070693          	mv	a3,a4
    3754:	000a8713          	mv	a4,s5
                    *str++ = *fmt;
    3758:	00f70023          	sb	a5,0(a4)
                if (*fmt)
    375c:	00068a93          	mv	s5,a3
                    *str++ = *fmt;
    3760:	d11ff06f          	j	3470 <ee_printf+0x43c>
                    flags |= ZEROPAD;
    3764:	0017e793          	ori	a5,a5,1
                    field_width = 2 * sizeof(void *);
    3768:	00800693          	li	a3,8
    376c:	dfdff06f          	j	3568 <ee_printf+0x534>
                    s = "<NULL>";
    3770:	00006437          	lui	s0,0x6
    3774:	7f840413          	addi	s0,s0,2040 # 67f8 <errpat+0x78>
    3778:	d69ff06f          	j	34e0 <ee_printf+0x4ac>
                    while (--field_width > 0)
    377c:	14905063          	blez	s1,38bc <ee_printf+0x888>
                        *str++ = ' ';
    3780:	00048613          	mv	a2,s1
    3784:	000a8513          	mv	a0,s5
    3788:	02000593          	li	a1,32
    378c:	009a8ab3          	add	s5,s5,s1
    3790:	5b1010ef          	jal	ra,5540 <memset>
    3794:	fff00493          	li	s1,-1
    3798:	cf9ff06f          	j	3490 <ee_printf+0x45c>
                    while (len < field_width--)
    379c:	fff68d13          	addi	s10,a3,-1
    37a0:	14d4d063          	bge	s1,a3,38e0 <ee_printf+0x8ac>
                        *str++ = ' ';
    37a4:	40968cb3          	sub	s9,a3,s1
    37a8:	000a8513          	mv	a0,s5
    37ac:	000c8613          	mv	a2,s9
    37b0:	02000593          	li	a1,32
    37b4:	00d12023          	sw	a3,0(sp)
    37b8:	589010ef          	jal	ra,5540 <memset>
    37bc:	00012683          	lw	a3,0(sp)
    37c0:	019a8ab3          	add	s5,s5,s9
    37c4:	40d486b3          	sub	a3,s1,a3
    37c8:	01a686b3          	add	a3,a3,s10
    37cc:	d41ff06f          	j	350c <ee_printf+0x4d8>
                flags |= SIGN;
    37d0:	0027e793          	ori	a5,a5,2
        base = 10;
    37d4:	00a00613          	li	a2,10
                *str++ = (unsigned char)va_arg(args, int);
    37d8:	004b0513          	addi	a0,s6,4
        str = number(str, num, base, field_width, precision, flags);
    37dc:	000b2583          	lw	a1,0(s6)
    37e0:	00050b13          	mv	s6,a0
    37e4:	000a8513          	mv	a0,s5
    37e8:	d1cff0ef          	jal	ra,2d04 <number>
    for (str = buf; *fmt; fmt++)
    37ec:	001c4783          	lbu	a5,1(s8)
        str = number(str, num, base, field_width, precision, flags);
    37f0:	00050a93          	mv	s5,a0
    for (str = buf; *fmt; fmt++)
    37f4:	001c0413          	addi	s0,s8,1
    37f8:	8c0792e3          	bnez	a5,30bc <ee_printf+0x88>
    37fc:	8ddff06f          	j	30d8 <ee_printf+0xa4>
                flags |= UPPERCASE;
    3800:	0407e793          	ori	a5,a5,64
                base = 16;
    3804:	01000613          	li	a2,16
    3808:	fd1ff06f          	j	37d8 <ee_printf+0x7a4>
                base = 8;
    380c:	00800613          	li	a2,8
                break;
    3810:	fc9ff06f          	j	37d8 <ee_printf+0x7a4>
                s = va_arg(args, char *);
    3814:	000b2403          	lw	s0,0(s6)
                *str++ = (unsigned char)va_arg(args, int);
    3818:	00048c13          	mv	s8,s1
    381c:	004b0b13          	addi	s6,s6,4
    3820:	ad9ff06f          	j	32f8 <ee_printf+0x2c4>
    for (str = buf; *fmt; fmt++)
    3824:	03010913          	addi	s2,sp,48
    3828:	00090a93          	mv	s5,s2
    382c:	8adff06f          	j	30d8 <ee_printf+0xa4>
                flags |= SIGN;
    3830:	0027e793          	ori	a5,a5,2
                *str++ = (unsigned char)va_arg(args, int);
    3834:	004b0513          	addi	a0,s6,4
    3838:	00048c13          	mv	s8,s1
        base = 10;
    383c:	00a00613          	li	a2,10
    3840:	f9dff06f          	j	37dc <ee_printf+0x7a8>
                base = 16;
    3844:	01000613          	li	a2,16
    3848:	f91ff06f          	j	37d8 <ee_printf+0x7a4>
        switch (*fmt)
    384c:	00a00613          	li	a2,10
    3850:	f89ff06f          	j	37d8 <ee_printf+0x7a4>
                *str++ = (unsigned char)va_arg(args, int);
    3854:	004b0513          	addi	a0,s6,4
    3858:	00048c13          	mv	s8,s1
    385c:	00a00613          	li	a2,10
    3860:	f7dff06f          	j	37dc <ee_printf+0x7a8>
    3864:	004b0513          	addi	a0,s6,4
    3868:	00048c13          	mv	s8,s1
                base = 8;
    386c:	00800613          	li	a2,8
    3870:	f6dff06f          	j	37dc <ee_printf+0x7a8>
                s = va_arg(args, char *);
    3874:	000b2403          	lw	s0,0(s6)
                flags |= UPPERCASE;
    3878:	0407e793          	ori	a5,a5,64
                *str++ = (unsigned char)va_arg(args, int);
    387c:	004b0b13          	addi	s6,s6,4
    3880:	00048c13          	mv	s8,s1
    3884:	a75ff06f          	j	32f8 <ee_printf+0x2c4>
    3888:	004b0513          	addi	a0,s6,4
    388c:	00048c13          	mv	s8,s1
                base = 16;
    3890:	01000613          	li	a2,16
    3894:	f49ff06f          	j	37dc <ee_printf+0x7a8>
                flags |= UPPERCASE;
    3898:	0407e793          	ori	a5,a5,64
                *str++ = (unsigned char)va_arg(args, int);
    389c:	004b0513          	addi	a0,s6,4
    38a0:	00048c13          	mv	s8,s1
                base = 16;
    38a4:	01000613          	li	a2,16
    38a8:	f35ff06f          	j	37dc <ee_printf+0x7a8>
                if (!(flags & LEFT))
    38ac:	0107f493          	andi	s1,a5,16
    38b0:	ee0486e3          	beqz	s1,379c <ee_printf+0x768>
    return sc - s;
    38b4:	00000493          	li	s1,0
    38b8:	c79ff06f          	j	3530 <ee_printf+0x4fc>
                *str++ = (unsigned char)va_arg(args, int);
    38bc:	000b2783          	lw	a5,0(s6)
    38c0:	001a8713          	addi	a4,s5,1
    38c4:	004b0b13          	addi	s6,s6,4
    38c8:	00fa8023          	sb	a5,0(s5)
    for (str = buf; *fmt; fmt++)
    38cc:	001c0413          	addi	s0,s8,1
    38d0:	001c4783          	lbu	a5,1(s8)
    38d4:	00070a93          	mv	s5,a4
    38d8:	fe079263          	bnez	a5,30bc <ee_printf+0x88>
    38dc:	ffcff06f          	j	30d8 <ee_printf+0xa4>
                    while (len < field_width--)
    38e0:	000d0693          	mv	a3,s10
    38e4:	c29ff06f          	j	350c <ee_printf+0x4d8>
                    *str++ = *fmt;
    38e8:	002a8a93          	addi	s5,s5,2
    38ec:	00f70023          	sb	a5,0(a4)
    38f0:	b81ff06f          	j	3470 <ee_printf+0x43c>
        while (len < size--)
    38f4:	ffe68793          	addi	a5,a3,-2
        while (len < size--)
    38f8:	00048693          	mv	a3,s1
        while (len < size--)
    38fc:	00078493          	mv	s1,a5
    3900:	b35ff06f          	j	3434 <ee_printf+0x400>
    3904:	ffe68793          	addi	a5,a3,-2
    3908:	00040693          	mv	a3,s0
    390c:	00078413          	mv	s0,a5
    3910:	dd9ff06f          	j	36e8 <ee_printf+0x6b4>

00003914 <__adddf3>:
    3914:	00100837          	lui	a6,0x100
    3918:	fff80813          	addi	a6,a6,-1 # fffff <RAM_SIZE+0xeffff>
    391c:	fe010113          	addi	sp,sp,-32
    3920:	00b877b3          	and	a5,a6,a1
    3924:	0145d713          	srli	a4,a1,0x14
    3928:	00d87833          	and	a6,a6,a3
    392c:	0146d313          	srli	t1,a3,0x14
    3930:	00812c23          	sw	s0,24(sp)
    3934:	00379793          	slli	a5,a5,0x3
    3938:	7ff77413          	andi	s0,a4,2047
    393c:	01d55713          	srli	a4,a0,0x1d
    3940:	00381813          	slli	a6,a6,0x3
    3944:	00912a23          	sw	s1,20(sp)
    3948:	00f767b3          	or	a5,a4,a5
    394c:	01f5d493          	srli	s1,a1,0x1f
    3950:	01d65713          	srli	a4,a2,0x1d
    3954:	7ff37313          	andi	t1,t1,2047
    3958:	00112e23          	sw	ra,28(sp)
    395c:	01212823          	sw	s2,16(sp)
    3960:	01312623          	sw	s3,12(sp)
    3964:	01f6d693          	srli	a3,a3,0x1f
    3968:	01076733          	or	a4,a4,a6
    396c:	00351593          	slli	a1,a0,0x3
    3970:	00361613          	slli	a2,a2,0x3
    3974:	40640833          	sub	a6,s0,t1
    3978:	2cd49863          	bne	s1,a3,3c48 <__adddf3+0x334>
    397c:	13005063          	blez	a6,3a9c <__adddf3+0x188>
    3980:	04031063          	bnez	t1,39c0 <__adddf3+0xac>
    3984:	00c766b3          	or	a3,a4,a2
    3988:	70068c63          	beqz	a3,40a0 <__adddf3+0x78c>
    398c:	fff80513          	addi	a0,a6,-1
    3990:	02051063          	bnez	a0,39b0 <__adddf3+0x9c>
    3994:	00c58633          	add	a2,a1,a2
    3998:	00b63533          	sltu	a0,a2,a1
    399c:	00e787b3          	add	a5,a5,a4
    39a0:	00a787b3          	add	a5,a5,a0
    39a4:	00060593          	mv	a1,a2
    39a8:	00100413          	li	s0,1
    39ac:	0700006f          	j	3a1c <__adddf3+0x108>
    39b0:	7ff00693          	li	a3,2047
    39b4:	02d81063          	bne	a6,a3,39d4 <__adddf3+0xc0>
    39b8:	7ff00413          	li	s0,2047
    39bc:	2140006f          	j	3bd0 <__adddf3+0x2bc>
    39c0:	7ff00693          	li	a3,2047
    39c4:	20d40663          	beq	s0,a3,3bd0 <__adddf3+0x2bc>
    39c8:	008006b7          	lui	a3,0x800
    39cc:	00d76733          	or	a4,a4,a3
    39d0:	00080513          	mv	a0,a6
    39d4:	03800693          	li	a3,56
    39d8:	0aa6cc63          	blt	a3,a0,3a90 <__adddf3+0x17c>
    39dc:	01f00693          	li	a3,31
    39e0:	06a6ce63          	blt	a3,a0,3a5c <__adddf3+0x148>
    39e4:	02000813          	li	a6,32
    39e8:	40a80833          	sub	a6,a6,a0
    39ec:	010716b3          	sll	a3,a4,a6
    39f0:	00a658b3          	srl	a7,a2,a0
    39f4:	01061633          	sll	a2,a2,a6
    39f8:	0116e6b3          	or	a3,a3,a7
    39fc:	00c03633          	snez	a2,a2
    3a00:	00c6e633          	or	a2,a3,a2
    3a04:	00a75733          	srl	a4,a4,a0
    3a08:	00b60633          	add	a2,a2,a1
    3a0c:	00b63533          	sltu	a0,a2,a1
    3a10:	00f70733          	add	a4,a4,a5
    3a14:	00a707b3          	add	a5,a4,a0
    3a18:	00060593          	mv	a1,a2
    3a1c:	00800737          	lui	a4,0x800
    3a20:	00e7f733          	and	a4,a5,a4
    3a24:	1a070663          	beqz	a4,3bd0 <__adddf3+0x2bc>
    3a28:	00140413          	addi	s0,s0,1
    3a2c:	7ff00713          	li	a4,2047
    3a30:	5ce40a63          	beq	s0,a4,4004 <__adddf3+0x6f0>
    3a34:	ff800737          	lui	a4,0xff800
    3a38:	fff70713          	addi	a4,a4,-1 # ff7fffff <RAM_SIZE+0xff7effff>
    3a3c:	00e7f7b3          	and	a5,a5,a4
    3a40:	0015f513          	andi	a0,a1,1
    3a44:	0015d713          	srli	a4,a1,0x1
    3a48:	00a76533          	or	a0,a4,a0
    3a4c:	01f79593          	slli	a1,a5,0x1f
    3a50:	00a5e5b3          	or	a1,a1,a0
    3a54:	0017d793          	srli	a5,a5,0x1
    3a58:	1780006f          	j	3bd0 <__adddf3+0x2bc>
    3a5c:	fe050693          	addi	a3,a0,-32
    3a60:	02000893          	li	a7,32
    3a64:	00d756b3          	srl	a3,a4,a3
    3a68:	00000813          	li	a6,0
    3a6c:	01150863          	beq	a0,a7,3a7c <__adddf3+0x168>
    3a70:	04000813          	li	a6,64
    3a74:	40a80533          	sub	a0,a6,a0
    3a78:	00a71833          	sll	a6,a4,a0
    3a7c:	00c86633          	or	a2,a6,a2
    3a80:	00c03633          	snez	a2,a2
    3a84:	00c6e633          	or	a2,a3,a2
    3a88:	00000713          	li	a4,0
    3a8c:	f7dff06f          	j	3a08 <__adddf3+0xf4>
    3a90:	00c76633          	or	a2,a4,a2
    3a94:	00c03633          	snez	a2,a2
    3a98:	ff1ff06f          	j	3a88 <__adddf3+0x174>
    3a9c:	0e080263          	beqz	a6,3b80 <__adddf3+0x26c>
    3aa0:	40830533          	sub	a0,t1,s0
    3aa4:	02041e63          	bnez	s0,3ae0 <__adddf3+0x1cc>
    3aa8:	00b7e6b3          	or	a3,a5,a1
    3aac:	52068c63          	beqz	a3,3fe4 <__adddf3+0x6d0>
    3ab0:	fff50693          	addi	a3,a0,-1
    3ab4:	00069c63          	bnez	a3,3acc <__adddf3+0x1b8>
    3ab8:	00c585b3          	add	a1,a1,a2
    3abc:	00e787b3          	add	a5,a5,a4
    3ac0:	00c5b633          	sltu	a2,a1,a2
    3ac4:	00c787b3          	add	a5,a5,a2
    3ac8:	ee1ff06f          	j	39a8 <__adddf3+0x94>
    3acc:	7ff00813          	li	a6,2047
    3ad0:	03051263          	bne	a0,a6,3af4 <__adddf3+0x1e0>
    3ad4:	00070793          	mv	a5,a4
    3ad8:	00060593          	mv	a1,a2
    3adc:	eddff06f          	j	39b8 <__adddf3+0xa4>
    3ae0:	7ff00693          	li	a3,2047
    3ae4:	fed308e3          	beq	t1,a3,3ad4 <__adddf3+0x1c0>
    3ae8:	008006b7          	lui	a3,0x800
    3aec:	00d7e7b3          	or	a5,a5,a3
    3af0:	00050693          	mv	a3,a0
    3af4:	03800513          	li	a0,56
    3af8:	06d54e63          	blt	a0,a3,3b74 <__adddf3+0x260>
    3afc:	01f00513          	li	a0,31
    3b00:	04d54063          	blt	a0,a3,3b40 <__adddf3+0x22c>
    3b04:	02000813          	li	a6,32
    3b08:	40d80833          	sub	a6,a6,a3
    3b0c:	01079533          	sll	a0,a5,a6
    3b10:	00d5d8b3          	srl	a7,a1,a3
    3b14:	010595b3          	sll	a1,a1,a6
    3b18:	01156533          	or	a0,a0,a7
    3b1c:	00b035b3          	snez	a1,a1
    3b20:	00b56533          	or	a0,a0,a1
    3b24:	00d7d7b3          	srl	a5,a5,a3
    3b28:	00c505b3          	add	a1,a0,a2
    3b2c:	00e787b3          	add	a5,a5,a4
    3b30:	00c5b633          	sltu	a2,a1,a2
    3b34:	00c787b3          	add	a5,a5,a2
    3b38:	00030413          	mv	s0,t1
    3b3c:	ee1ff06f          	j	3a1c <__adddf3+0x108>
    3b40:	fe068513          	addi	a0,a3,-32 # 7fffe0 <RAM_SIZE+0x7effe0>
    3b44:	02000893          	li	a7,32
    3b48:	00a7d833          	srl	a6,a5,a0
    3b4c:	00000513          	li	a0,0
    3b50:	01168863          	beq	a3,a7,3b60 <__adddf3+0x24c>
    3b54:	04000513          	li	a0,64
    3b58:	40d50533          	sub	a0,a0,a3
    3b5c:	00a79533          	sll	a0,a5,a0
    3b60:	00b56533          	or	a0,a0,a1
    3b64:	00a03533          	snez	a0,a0
    3b68:	00a86533          	or	a0,a6,a0
    3b6c:	00000793          	li	a5,0
    3b70:	fb9ff06f          	j	3b28 <__adddf3+0x214>
    3b74:	00b7e533          	or	a0,a5,a1
    3b78:	00a03533          	snez	a0,a0
    3b7c:	ff1ff06f          	j	3b6c <__adddf3+0x258>
    3b80:	00140693          	addi	a3,s0,1
    3b84:	7fe6f513          	andi	a0,a3,2046
    3b88:	08051863          	bnez	a0,3c18 <__adddf3+0x304>
    3b8c:	00b7e6b3          	or	a3,a5,a1
    3b90:	06041463          	bnez	s0,3bf8 <__adddf3+0x2e4>
    3b94:	46068063          	beqz	a3,3ff4 <__adddf3+0x6e0>
    3b98:	00c766b3          	or	a3,a4,a2
    3b9c:	02068a63          	beqz	a3,3bd0 <__adddf3+0x2bc>
    3ba0:	00c58633          	add	a2,a1,a2
    3ba4:	00e787b3          	add	a5,a5,a4
    3ba8:	00b63533          	sltu	a0,a2,a1
    3bac:	00a787b3          	add	a5,a5,a0
    3bb0:	00800737          	lui	a4,0x800
    3bb4:	00e7f733          	and	a4,a5,a4
    3bb8:	00060593          	mv	a1,a2
    3bbc:	00070a63          	beqz	a4,3bd0 <__adddf3+0x2bc>
    3bc0:	ff800737          	lui	a4,0xff800
    3bc4:	fff70713          	addi	a4,a4,-1 # ff7fffff <RAM_SIZE+0xff7effff>
    3bc8:	00e7f7b3          	and	a5,a5,a4
    3bcc:	00100413          	li	s0,1
    3bd0:	0075f713          	andi	a4,a1,7
    3bd4:	42070c63          	beqz	a4,400c <__adddf3+0x6f8>
    3bd8:	00f5f713          	andi	a4,a1,15
    3bdc:	00400693          	li	a3,4
    3be0:	42d70663          	beq	a4,a3,400c <__adddf3+0x6f8>
    3be4:	00458713          	addi	a4,a1,4
    3be8:	00b73533          	sltu	a0,a4,a1
    3bec:	00a787b3          	add	a5,a5,a0
    3bf0:	00070593          	mv	a1,a4
    3bf4:	4180006f          	j	400c <__adddf3+0x6f8>
    3bf8:	ec068ee3          	beqz	a3,3ad4 <__adddf3+0x1c0>
    3bfc:	00c76633          	or	a2,a4,a2
    3c00:	da060ce3          	beqz	a2,39b8 <__adddf3+0xa4>
    3c04:	00000493          	li	s1,0
    3c08:	004007b7          	lui	a5,0x400
    3c0c:	00000593          	li	a1,0
    3c10:	7ff00413          	li	s0,2047
    3c14:	3f80006f          	j	400c <__adddf3+0x6f8>
    3c18:	7ff00513          	li	a0,2047
    3c1c:	3ea68263          	beq	a3,a0,4000 <__adddf3+0x6ec>
    3c20:	00c58633          	add	a2,a1,a2
    3c24:	00b63533          	sltu	a0,a2,a1
    3c28:	00e787b3          	add	a5,a5,a4
    3c2c:	00a787b3          	add	a5,a5,a0
    3c30:	01f79513          	slli	a0,a5,0x1f
    3c34:	00165613          	srli	a2,a2,0x1
    3c38:	00c565b3          	or	a1,a0,a2
    3c3c:	0017d793          	srli	a5,a5,0x1
    3c40:	00068413          	mv	s0,a3
    3c44:	f8dff06f          	j	3bd0 <__adddf3+0x2bc>
    3c48:	0f005c63          	blez	a6,3d40 <__adddf3+0x42c>
    3c4c:	08031e63          	bnez	t1,3ce8 <__adddf3+0x3d4>
    3c50:	00c766b3          	or	a3,a4,a2
    3c54:	44068663          	beqz	a3,40a0 <__adddf3+0x78c>
    3c58:	fff80513          	addi	a0,a6,-1
    3c5c:	02051063          	bnez	a0,3c7c <__adddf3+0x368>
    3c60:	40c58633          	sub	a2,a1,a2
    3c64:	00c5b533          	sltu	a0,a1,a2
    3c68:	40e787b3          	sub	a5,a5,a4
    3c6c:	40a787b3          	sub	a5,a5,a0
    3c70:	00060593          	mv	a1,a2
    3c74:	00100413          	li	s0,1
    3c78:	0540006f          	j	3ccc <__adddf3+0x3b8>
    3c7c:	7ff00693          	li	a3,2047
    3c80:	d2d80ce3          	beq	a6,a3,39b8 <__adddf3+0xa4>
    3c84:	03800693          	li	a3,56
    3c88:	0aa6c663          	blt	a3,a0,3d34 <__adddf3+0x420>
    3c8c:	01f00693          	li	a3,31
    3c90:	06a6c863          	blt	a3,a0,3d00 <__adddf3+0x3ec>
    3c94:	02000813          	li	a6,32
    3c98:	40a80833          	sub	a6,a6,a0
    3c9c:	010716b3          	sll	a3,a4,a6
    3ca0:	00a658b3          	srl	a7,a2,a0
    3ca4:	01061633          	sll	a2,a2,a6
    3ca8:	0116e6b3          	or	a3,a3,a7
    3cac:	00c03633          	snez	a2,a2
    3cb0:	00c6e633          	or	a2,a3,a2
    3cb4:	00a75733          	srl	a4,a4,a0
    3cb8:	40c58633          	sub	a2,a1,a2
    3cbc:	00c5b533          	sltu	a0,a1,a2
    3cc0:	40e78733          	sub	a4,a5,a4
    3cc4:	40a707b3          	sub	a5,a4,a0
    3cc8:	00060593          	mv	a1,a2
    3ccc:	00800937          	lui	s2,0x800
    3cd0:	0127f733          	and	a4,a5,s2
    3cd4:	ee070ee3          	beqz	a4,3bd0 <__adddf3+0x2bc>
    3cd8:	fff90913          	addi	s2,s2,-1 # 7fffff <RAM_SIZE+0x7effff>
    3cdc:	0127f933          	and	s2,a5,s2
    3ce0:	00058993          	mv	s3,a1
    3ce4:	2140006f          	j	3ef8 <__adddf3+0x5e4>
    3ce8:	7ff00693          	li	a3,2047
    3cec:	eed402e3          	beq	s0,a3,3bd0 <__adddf3+0x2bc>
    3cf0:	008006b7          	lui	a3,0x800
    3cf4:	00d76733          	or	a4,a4,a3
    3cf8:	00080513          	mv	a0,a6
    3cfc:	f89ff06f          	j	3c84 <__adddf3+0x370>
    3d00:	fe050693          	addi	a3,a0,-32
    3d04:	02000893          	li	a7,32
    3d08:	00d756b3          	srl	a3,a4,a3
    3d0c:	00000813          	li	a6,0
    3d10:	01150863          	beq	a0,a7,3d20 <__adddf3+0x40c>
    3d14:	04000813          	li	a6,64
    3d18:	40a80533          	sub	a0,a6,a0
    3d1c:	00a71833          	sll	a6,a4,a0
    3d20:	00c86633          	or	a2,a6,a2
    3d24:	00c03633          	snez	a2,a2
    3d28:	00c6e633          	or	a2,a3,a2
    3d2c:	00000713          	li	a4,0
    3d30:	f89ff06f          	j	3cb8 <__adddf3+0x3a4>
    3d34:	00c76633          	or	a2,a4,a2
    3d38:	00c03633          	snez	a2,a2
    3d3c:	ff1ff06f          	j	3d2c <__adddf3+0x418>
    3d40:	0e080863          	beqz	a6,3e30 <__adddf3+0x51c>
    3d44:	40830533          	sub	a0,t1,s0
    3d48:	04041263          	bnez	s0,3d8c <__adddf3+0x478>
    3d4c:	00b7e833          	or	a6,a5,a1
    3d50:	34080c63          	beqz	a6,40a8 <__adddf3+0x794>
    3d54:	fff50813          	addi	a6,a0,-1
    3d58:	00081e63          	bnez	a6,3d74 <__adddf3+0x460>
    3d5c:	40b605b3          	sub	a1,a2,a1
    3d60:	40f707b3          	sub	a5,a4,a5
    3d64:	00b63633          	sltu	a2,a2,a1
    3d68:	40c787b3          	sub	a5,a5,a2
    3d6c:	00068493          	mv	s1,a3
    3d70:	f05ff06f          	j	3c74 <__adddf3+0x360>
    3d74:	7ff00893          	li	a7,2047
    3d78:	03151463          	bne	a0,a7,3da0 <__adddf3+0x48c>
    3d7c:	00070793          	mv	a5,a4
    3d80:	00060593          	mv	a1,a2
    3d84:	7ff00413          	li	s0,2047
    3d88:	0d00006f          	j	3e58 <__adddf3+0x544>
    3d8c:	7ff00813          	li	a6,2047
    3d90:	ff0306e3          	beq	t1,a6,3d7c <__adddf3+0x468>
    3d94:	00800837          	lui	a6,0x800
    3d98:	0107e7b3          	or	a5,a5,a6
    3d9c:	00050813          	mv	a6,a0
    3da0:	03800513          	li	a0,56
    3da4:	09054063          	blt	a0,a6,3e24 <__adddf3+0x510>
    3da8:	01f00513          	li	a0,31
    3dac:	05054263          	blt	a0,a6,3df0 <__adddf3+0x4dc>
    3db0:	02000893          	li	a7,32
    3db4:	410888b3          	sub	a7,a7,a6
    3db8:	01179533          	sll	a0,a5,a7
    3dbc:	0105de33          	srl	t3,a1,a6
    3dc0:	011595b3          	sll	a1,a1,a7
    3dc4:	01c56533          	or	a0,a0,t3
    3dc8:	00b035b3          	snez	a1,a1
    3dcc:	00b56533          	or	a0,a0,a1
    3dd0:	0107d7b3          	srl	a5,a5,a6
    3dd4:	40a605b3          	sub	a1,a2,a0
    3dd8:	40f707b3          	sub	a5,a4,a5
    3ddc:	00b63633          	sltu	a2,a2,a1
    3de0:	40c787b3          	sub	a5,a5,a2
    3de4:	00030413          	mv	s0,t1
    3de8:	00068493          	mv	s1,a3
    3dec:	ee1ff06f          	j	3ccc <__adddf3+0x3b8>
    3df0:	fe080513          	addi	a0,a6,-32 # 7fffe0 <RAM_SIZE+0x7effe0>
    3df4:	02000e13          	li	t3,32
    3df8:	00a7d8b3          	srl	a7,a5,a0
    3dfc:	00000513          	li	a0,0
    3e00:	01c80863          	beq	a6,t3,3e10 <__adddf3+0x4fc>
    3e04:	04000513          	li	a0,64
    3e08:	41050533          	sub	a0,a0,a6
    3e0c:	00a79533          	sll	a0,a5,a0
    3e10:	00b56533          	or	a0,a0,a1
    3e14:	00a03533          	snez	a0,a0
    3e18:	00a8e533          	or	a0,a7,a0
    3e1c:	00000793          	li	a5,0
    3e20:	fb5ff06f          	j	3dd4 <__adddf3+0x4c0>
    3e24:	00b7e533          	or	a0,a5,a1
    3e28:	00a03533          	snez	a0,a0
    3e2c:	ff1ff06f          	j	3e1c <__adddf3+0x508>
    3e30:	00140513          	addi	a0,s0,1
    3e34:	7fe57513          	andi	a0,a0,2046
    3e38:	08051863          	bnez	a0,3ec8 <__adddf3+0x5b4>
    3e3c:	00b7e833          	or	a6,a5,a1
    3e40:	00c76533          	or	a0,a4,a2
    3e44:	06041263          	bnez	s0,3ea8 <__adddf3+0x594>
    3e48:	00081c63          	bnez	a6,3e60 <__adddf3+0x54c>
    3e4c:	26050663          	beqz	a0,40b8 <__adddf3+0x7a4>
    3e50:	00070793          	mv	a5,a4
    3e54:	00060593          	mv	a1,a2
    3e58:	00068493          	mv	s1,a3
    3e5c:	d75ff06f          	j	3bd0 <__adddf3+0x2bc>
    3e60:	d60508e3          	beqz	a0,3bd0 <__adddf3+0x2bc>
    3e64:	40c58833          	sub	a6,a1,a2
    3e68:	0105b8b3          	sltu	a7,a1,a6
    3e6c:	40e78533          	sub	a0,a5,a4
    3e70:	41150533          	sub	a0,a0,a7
    3e74:	008008b7          	lui	a7,0x800
    3e78:	011578b3          	and	a7,a0,a7
    3e7c:	00088c63          	beqz	a7,3e94 <__adddf3+0x580>
    3e80:	40b605b3          	sub	a1,a2,a1
    3e84:	40f707b3          	sub	a5,a4,a5
    3e88:	00b63633          	sltu	a2,a2,a1
    3e8c:	40c787b3          	sub	a5,a5,a2
    3e90:	fc9ff06f          	j	3e58 <__adddf3+0x544>
    3e94:	00a865b3          	or	a1,a6,a0
    3e98:	22058863          	beqz	a1,40c8 <__adddf3+0x7b4>
    3e9c:	00050793          	mv	a5,a0
    3ea0:	00080593          	mv	a1,a6
    3ea4:	d2dff06f          	j	3bd0 <__adddf3+0x2bc>
    3ea8:	00081c63          	bnez	a6,3ec0 <__adddf3+0x5ac>
    3eac:	22050263          	beqz	a0,40d0 <__adddf3+0x7bc>
    3eb0:	00070793          	mv	a5,a4
    3eb4:	00060593          	mv	a1,a2
    3eb8:	00068493          	mv	s1,a3
    3ebc:	afdff06f          	j	39b8 <__adddf3+0xa4>
    3ec0:	ae050ce3          	beqz	a0,39b8 <__adddf3+0xa4>
    3ec4:	d41ff06f          	j	3c04 <__adddf3+0x2f0>
    3ec8:	40c589b3          	sub	s3,a1,a2
    3ecc:	0135b533          	sltu	a0,a1,s3
    3ed0:	40e78933          	sub	s2,a5,a4
    3ed4:	40a90933          	sub	s2,s2,a0
    3ed8:	00800537          	lui	a0,0x800
    3edc:	00a97533          	and	a0,s2,a0
    3ee0:	08050463          	beqz	a0,3f68 <__adddf3+0x654>
    3ee4:	40b609b3          	sub	s3,a2,a1
    3ee8:	40f707b3          	sub	a5,a4,a5
    3eec:	01363633          	sltu	a2,a2,s3
    3ef0:	40c78933          	sub	s2,a5,a2
    3ef4:	00068493          	mv	s1,a3
    3ef8:	08090263          	beqz	s2,3f7c <__adddf3+0x668>
    3efc:	00090513          	mv	a0,s2
    3f00:	408010ef          	jal	ra,5308 <__clzsi2>
    3f04:	ff850713          	addi	a4,a0,-8 # 7ffff8 <RAM_SIZE+0x7efff8>
    3f08:	01f00793          	li	a5,31
    3f0c:	08e7c063          	blt	a5,a4,3f8c <__adddf3+0x678>
    3f10:	02000793          	li	a5,32
    3f14:	40e787b3          	sub	a5,a5,a4
    3f18:	00e91933          	sll	s2,s2,a4
    3f1c:	00f9d7b3          	srl	a5,s3,a5
    3f20:	0127e7b3          	or	a5,a5,s2
    3f24:	00e995b3          	sll	a1,s3,a4
    3f28:	0a874463          	blt	a4,s0,3fd0 <__adddf3+0x6bc>
    3f2c:	40870733          	sub	a4,a4,s0
    3f30:	00170693          	addi	a3,a4,1
    3f34:	01f00613          	li	a2,31
    3f38:	06d64263          	blt	a2,a3,3f9c <__adddf3+0x688>
    3f3c:	02000713          	li	a4,32
    3f40:	40d70733          	sub	a4,a4,a3
    3f44:	00e79633          	sll	a2,a5,a4
    3f48:	00d5d533          	srl	a0,a1,a3
    3f4c:	00e595b3          	sll	a1,a1,a4
    3f50:	00a66633          	or	a2,a2,a0
    3f54:	00b035b3          	snez	a1,a1
    3f58:	00b665b3          	or	a1,a2,a1
    3f5c:	00d7d7b3          	srl	a5,a5,a3
    3f60:	00000413          	li	s0,0
    3f64:	c6dff06f          	j	3bd0 <__adddf3+0x2bc>
    3f68:	0129e5b3          	or	a1,s3,s2
    3f6c:	f80596e3          	bnez	a1,3ef8 <__adddf3+0x5e4>
    3f70:	00000793          	li	a5,0
    3f74:	00000413          	li	s0,0
    3f78:	1480006f          	j	40c0 <__adddf3+0x7ac>
    3f7c:	00098513          	mv	a0,s3
    3f80:	388010ef          	jal	ra,5308 <__clzsi2>
    3f84:	02050513          	addi	a0,a0,32
    3f88:	f7dff06f          	j	3f04 <__adddf3+0x5f0>
    3f8c:	fd850793          	addi	a5,a0,-40
    3f90:	00f997b3          	sll	a5,s3,a5
    3f94:	00000593          	li	a1,0
    3f98:	f91ff06f          	j	3f28 <__adddf3+0x614>
    3f9c:	fe170713          	addi	a4,a4,-31
    3fa0:	02000613          	li	a2,32
    3fa4:	00e7d733          	srl	a4,a5,a4
    3fa8:	00000513          	li	a0,0
    3fac:	00c68863          	beq	a3,a2,3fbc <__adddf3+0x6a8>
    3fb0:	04000513          	li	a0,64
    3fb4:	40d50533          	sub	a0,a0,a3
    3fb8:	00a79533          	sll	a0,a5,a0
    3fbc:	00a5e533          	or	a0,a1,a0
    3fc0:	00a03533          	snez	a0,a0
    3fc4:	00a765b3          	or	a1,a4,a0
    3fc8:	00000793          	li	a5,0
    3fcc:	f95ff06f          	j	3f60 <__adddf3+0x64c>
    3fd0:	40e40433          	sub	s0,s0,a4
    3fd4:	ff800737          	lui	a4,0xff800
    3fd8:	fff70713          	addi	a4,a4,-1 # ff7fffff <RAM_SIZE+0xff7effff>
    3fdc:	00e7f7b3          	and	a5,a5,a4
    3fe0:	bf1ff06f          	j	3bd0 <__adddf3+0x2bc>
    3fe4:	00070793          	mv	a5,a4
    3fe8:	00060593          	mv	a1,a2
    3fec:	00050413          	mv	s0,a0
    3ff0:	be1ff06f          	j	3bd0 <__adddf3+0x2bc>
    3ff4:	00070793          	mv	a5,a4
    3ff8:	00060593          	mv	a1,a2
    3ffc:	bd5ff06f          	j	3bd0 <__adddf3+0x2bc>
    4000:	7ff00413          	li	s0,2047
    4004:	00000793          	li	a5,0
    4008:	00000593          	li	a1,0
    400c:	00800737          	lui	a4,0x800
    4010:	00e7f733          	and	a4,a5,a4
    4014:	00070e63          	beqz	a4,4030 <__adddf3+0x71c>
    4018:	00140413          	addi	s0,s0,1
    401c:	7ff00713          	li	a4,2047
    4020:	0ce40063          	beq	s0,a4,40e0 <__adddf3+0x7cc>
    4024:	ff800737          	lui	a4,0xff800
    4028:	fff70713          	addi	a4,a4,-1 # ff7fffff <RAM_SIZE+0xff7effff>
    402c:	00e7f7b3          	and	a5,a5,a4
    4030:	01d79713          	slli	a4,a5,0x1d
    4034:	0035d513          	srli	a0,a1,0x3
    4038:	00a76533          	or	a0,a4,a0
    403c:	7ff00713          	li	a4,2047
    4040:	0037d793          	srli	a5,a5,0x3
    4044:	00e41e63          	bne	s0,a4,4060 <__adddf3+0x74c>
    4048:	00f56533          	or	a0,a0,a5
    404c:	00000793          	li	a5,0
    4050:	00050863          	beqz	a0,4060 <__adddf3+0x74c>
    4054:	000807b7          	lui	a5,0x80
    4058:	00000513          	li	a0,0
    405c:	00000493          	li	s1,0
    4060:	01441713          	slli	a4,s0,0x14
    4064:	7ff006b7          	lui	a3,0x7ff00
    4068:	00c79793          	slli	a5,a5,0xc
    406c:	01c12083          	lw	ra,28(sp)
    4070:	01812403          	lw	s0,24(sp)
    4074:	00d77733          	and	a4,a4,a3
    4078:	00c7d793          	srli	a5,a5,0xc
    407c:	01f49493          	slli	s1,s1,0x1f
    4080:	00f767b3          	or	a5,a4,a5
    4084:	0097e733          	or	a4,a5,s1
    4088:	01012903          	lw	s2,16(sp)
    408c:	01412483          	lw	s1,20(sp)
    4090:	00c12983          	lw	s3,12(sp)
    4094:	00070593          	mv	a1,a4
    4098:	02010113          	addi	sp,sp,32
    409c:	00008067          	ret
    40a0:	00080413          	mv	s0,a6
    40a4:	b2dff06f          	j	3bd0 <__adddf3+0x2bc>
    40a8:	00070793          	mv	a5,a4
    40ac:	00060593          	mv	a1,a2
    40b0:	00050413          	mv	s0,a0
    40b4:	da5ff06f          	j	3e58 <__adddf3+0x544>
    40b8:	00000793          	li	a5,0
    40bc:	00000593          	li	a1,0
    40c0:	00000493          	li	s1,0
    40c4:	f49ff06f          	j	400c <__adddf3+0x6f8>
    40c8:	00000793          	li	a5,0
    40cc:	ff5ff06f          	j	40c0 <__adddf3+0x7ac>
    40d0:	00000593          	li	a1,0
    40d4:	00000493          	li	s1,0
    40d8:	004007b7          	lui	a5,0x400
    40dc:	b35ff06f          	j	3c10 <__adddf3+0x2fc>
    40e0:	00000793          	li	a5,0
    40e4:	00000593          	li	a1,0
    40e8:	f49ff06f          	j	4030 <__adddf3+0x71c>

000040ec <__divdf3>:
    40ec:	fb010113          	addi	sp,sp,-80
    40f0:	05212023          	sw	s2,64(sp)
    40f4:	0145d913          	srli	s2,a1,0x14
    40f8:	04912223          	sw	s1,68(sp)
    40fc:	03312e23          	sw	s3,60(sp)
    4100:	03512a23          	sw	s5,52(sp)
    4104:	03612823          	sw	s6,48(sp)
    4108:	03712623          	sw	s7,44(sp)
    410c:	00c59493          	slli	s1,a1,0xc
    4110:	04112623          	sw	ra,76(sp)
    4114:	04812423          	sw	s0,72(sp)
    4118:	03412c23          	sw	s4,56(sp)
    411c:	03812423          	sw	s8,40(sp)
    4120:	03912223          	sw	s9,36(sp)
    4124:	03a12023          	sw	s10,32(sp)
    4128:	01b12e23          	sw	s11,28(sp)
    412c:	7ff97913          	andi	s2,s2,2047
    4130:	00050993          	mv	s3,a0
    4134:	00060b93          	mv	s7,a2
    4138:	00068b13          	mv	s6,a3
    413c:	00c4d493          	srli	s1,s1,0xc
    4140:	01f5da93          	srli	s5,a1,0x1f
    4144:	0a090263          	beqz	s2,41e8 <__divdf3+0xfc>
    4148:	7ff00793          	li	a5,2047
    414c:	10f90063          	beq	s2,a5,424c <__divdf3+0x160>
    4150:	01d55c93          	srli	s9,a0,0x1d
    4154:	00349493          	slli	s1,s1,0x3
    4158:	009ce4b3          	or	s1,s9,s1
    415c:	00800cb7          	lui	s9,0x800
    4160:	0194ecb3          	or	s9,s1,s9
    4164:	00351413          	slli	s0,a0,0x3
    4168:	c0190913          	addi	s2,s2,-1023
    416c:	00000c13          	li	s8,0
    4170:	014b5513          	srli	a0,s6,0x14
    4174:	00cb1593          	slli	a1,s6,0xc
    4178:	7ff57513          	andi	a0,a0,2047
    417c:	00c5d993          	srli	s3,a1,0xc
    4180:	01fb5b13          	srli	s6,s6,0x1f
    4184:	10050263          	beqz	a0,4288 <__divdf3+0x19c>
    4188:	7ff00793          	li	a5,2047
    418c:	16f50263          	beq	a0,a5,42f0 <__divdf3+0x204>
    4190:	00399593          	slli	a1,s3,0x3
    4194:	01dbd793          	srli	a5,s7,0x1d
    4198:	00b7e5b3          	or	a1,a5,a1
    419c:	008009b7          	lui	s3,0x800
    41a0:	0135e9b3          	or	s3,a1,s3
    41a4:	003b9693          	slli	a3,s7,0x3
    41a8:	c0150513          	addi	a0,a0,-1023
    41ac:	00000793          	li	a5,0
    41b0:	002c1713          	slli	a4,s8,0x2
    41b4:	00f76733          	or	a4,a4,a5
    41b8:	fff70713          	addi	a4,a4,-1
    41bc:	00e00613          	li	a2,14
    41c0:	016ac4b3          	xor	s1,s5,s6
    41c4:	40a90933          	sub	s2,s2,a0
    41c8:	16e66063          	bltu	a2,a4,4328 <__divdf3+0x23c>
    41cc:	00003617          	auipc	a2,0x3
    41d0:	83860613          	addi	a2,a2,-1992 # 6a04 <errpat+0x284>
    41d4:	00271713          	slli	a4,a4,0x2
    41d8:	00c70733          	add	a4,a4,a2
    41dc:	00072703          	lw	a4,0(a4)
    41e0:	00c70733          	add	a4,a4,a2
    41e4:	00070067          	jr	a4
    41e8:	00a4ecb3          	or	s9,s1,a0
    41ec:	060c8e63          	beqz	s9,4268 <__divdf3+0x17c>
    41f0:	04048063          	beqz	s1,4230 <__divdf3+0x144>
    41f4:	00048513          	mv	a0,s1
    41f8:	110010ef          	jal	ra,5308 <__clzsi2>
    41fc:	ff550793          	addi	a5,a0,-11
    4200:	01c00713          	li	a4,28
    4204:	02f74c63          	blt	a4,a5,423c <__divdf3+0x150>
    4208:	01d00c93          	li	s9,29
    420c:	ff850413          	addi	s0,a0,-8
    4210:	40fc8cb3          	sub	s9,s9,a5
    4214:	008494b3          	sll	s1,s1,s0
    4218:	0199dcb3          	srl	s9,s3,s9
    421c:	009cecb3          	or	s9,s9,s1
    4220:	00899433          	sll	s0,s3,s0
    4224:	c0d00913          	li	s2,-1011
    4228:	40a90933          	sub	s2,s2,a0
    422c:	f41ff06f          	j	416c <__divdf3+0x80>
    4230:	0d8010ef          	jal	ra,5308 <__clzsi2>
    4234:	02050513          	addi	a0,a0,32
    4238:	fc5ff06f          	j	41fc <__divdf3+0x110>
    423c:	fd850493          	addi	s1,a0,-40
    4240:	00999cb3          	sll	s9,s3,s1
    4244:	00000413          	li	s0,0
    4248:	fddff06f          	j	4224 <__divdf3+0x138>
    424c:	00a4ecb3          	or	s9,s1,a0
    4250:	020c8463          	beqz	s9,4278 <__divdf3+0x18c>
    4254:	00050413          	mv	s0,a0
    4258:	00048c93          	mv	s9,s1
    425c:	7ff00913          	li	s2,2047
    4260:	00300c13          	li	s8,3
    4264:	f0dff06f          	j	4170 <__divdf3+0x84>
    4268:	00000413          	li	s0,0
    426c:	00000913          	li	s2,0
    4270:	00100c13          	li	s8,1
    4274:	efdff06f          	j	4170 <__divdf3+0x84>
    4278:	00000413          	li	s0,0
    427c:	7ff00913          	li	s2,2047
    4280:	00200c13          	li	s8,2
    4284:	eedff06f          	j	4170 <__divdf3+0x84>
    4288:	0179e6b3          	or	a3,s3,s7
    428c:	06068e63          	beqz	a3,4308 <__divdf3+0x21c>
    4290:	04098063          	beqz	s3,42d0 <__divdf3+0x1e4>
    4294:	00098513          	mv	a0,s3
    4298:	070010ef          	jal	ra,5308 <__clzsi2>
    429c:	ff550793          	addi	a5,a0,-11
    42a0:	01c00713          	li	a4,28
    42a4:	02f74e63          	blt	a4,a5,42e0 <__divdf3+0x1f4>
    42a8:	01d00613          	li	a2,29
    42ac:	ff850693          	addi	a3,a0,-8
    42b0:	40f60633          	sub	a2,a2,a5
    42b4:	00d995b3          	sll	a1,s3,a3
    42b8:	00cbd633          	srl	a2,s7,a2
    42bc:	00b669b3          	or	s3,a2,a1
    42c0:	00db96b3          	sll	a3,s7,a3
    42c4:	c0d00713          	li	a4,-1011
    42c8:	40a70533          	sub	a0,a4,a0
    42cc:	ee1ff06f          	j	41ac <__divdf3+0xc0>
    42d0:	000b8513          	mv	a0,s7
    42d4:	034010ef          	jal	ra,5308 <__clzsi2>
    42d8:	02050513          	addi	a0,a0,32
    42dc:	fc1ff06f          	j	429c <__divdf3+0x1b0>
    42e0:	fd850593          	addi	a1,a0,-40
    42e4:	00bb99b3          	sll	s3,s7,a1
    42e8:	00000693          	li	a3,0
    42ec:	fd9ff06f          	j	42c4 <__divdf3+0x1d8>
    42f0:	0179e6b3          	or	a3,s3,s7
    42f4:	02068263          	beqz	a3,4318 <__divdf3+0x22c>
    42f8:	000b8693          	mv	a3,s7
    42fc:	7ff00513          	li	a0,2047
    4300:	00300793          	li	a5,3
    4304:	eadff06f          	j	41b0 <__divdf3+0xc4>
    4308:	00000993          	li	s3,0
    430c:	00000513          	li	a0,0
    4310:	00100793          	li	a5,1
    4314:	e9dff06f          	j	41b0 <__divdf3+0xc4>
    4318:	00000993          	li	s3,0
    431c:	7ff00513          	li	a0,2047
    4320:	00200793          	li	a5,2
    4324:	e8dff06f          	j	41b0 <__divdf3+0xc4>
    4328:	0199e663          	bltu	s3,s9,4334 <__divdf3+0x248>
    432c:	453c9a63          	bne	s9,s3,4780 <__divdf3+0x694>
    4330:	44d46863          	bltu	s0,a3,4780 <__divdf3+0x694>
    4334:	01fc9713          	slli	a4,s9,0x1f
    4338:	00145793          	srli	a5,s0,0x1
    433c:	01f41d93          	slli	s11,s0,0x1f
    4340:	001cdc93          	srli	s9,s9,0x1
    4344:	00f76433          	or	s0,a4,a5
    4348:	00899593          	slli	a1,s3,0x8
    434c:	0186da93          	srli	s5,a3,0x18
    4350:	00baeab3          	or	s5,s5,a1
    4354:	0105db93          	srli	s7,a1,0x10
    4358:	000b8593          	mv	a1,s7
    435c:	010a9c13          	slli	s8,s5,0x10
    4360:	000c8513          	mv	a0,s9
    4364:	00869b13          	slli	s6,a3,0x8
    4368:	010c5c13          	srli	s8,s8,0x10
    436c:	6f1000ef          	jal	ra,525c <__udivsi3>
    4370:	00050593          	mv	a1,a0
    4374:	00050d13          	mv	s10,a0
    4378:	000c0513          	mv	a0,s8
    437c:	6b5000ef          	jal	ra,5230 <__mulsi3>
    4380:	00050993          	mv	s3,a0
    4384:	000b8593          	mv	a1,s7
    4388:	000c8513          	mv	a0,s9
    438c:	719000ef          	jal	ra,52a4 <__umodsi3>
    4390:	01051513          	slli	a0,a0,0x10
    4394:	01045713          	srli	a4,s0,0x10
    4398:	00a76733          	or	a4,a4,a0
    439c:	000d0a13          	mv	s4,s10
    43a0:	01377e63          	bgeu	a4,s3,43bc <__divdf3+0x2d0>
    43a4:	01570733          	add	a4,a4,s5
    43a8:	fffd0a13          	addi	s4,s10,-1
    43ac:	01576863          	bltu	a4,s5,43bc <__divdf3+0x2d0>
    43b0:	01377663          	bgeu	a4,s3,43bc <__divdf3+0x2d0>
    43b4:	ffed0a13          	addi	s4,s10,-2
    43b8:	01570733          	add	a4,a4,s5
    43bc:	413709b3          	sub	s3,a4,s3
    43c0:	000b8593          	mv	a1,s7
    43c4:	00098513          	mv	a0,s3
    43c8:	695000ef          	jal	ra,525c <__udivsi3>
    43cc:	00050593          	mv	a1,a0
    43d0:	00050d13          	mv	s10,a0
    43d4:	000c0513          	mv	a0,s8
    43d8:	659000ef          	jal	ra,5230 <__mulsi3>
    43dc:	00050c93          	mv	s9,a0
    43e0:	000b8593          	mv	a1,s7
    43e4:	00098513          	mv	a0,s3
    43e8:	6bd000ef          	jal	ra,52a4 <__umodsi3>
    43ec:	01041413          	slli	s0,s0,0x10
    43f0:	01051513          	slli	a0,a0,0x10
    43f4:	01045413          	srli	s0,s0,0x10
    43f8:	00a46433          	or	s0,s0,a0
    43fc:	000d0793          	mv	a5,s10
    4400:	01947e63          	bgeu	s0,s9,441c <__divdf3+0x330>
    4404:	01540433          	add	s0,s0,s5
    4408:	fffd0793          	addi	a5,s10,-1
    440c:	01546863          	bltu	s0,s5,441c <__divdf3+0x330>
    4410:	01947663          	bgeu	s0,s9,441c <__divdf3+0x330>
    4414:	ffed0793          	addi	a5,s10,-2
    4418:	01540433          	add	s0,s0,s5
    441c:	010a1813          	slli	a6,s4,0x10
    4420:	00010e37          	lui	t3,0x10
    4424:	00f86833          	or	a6,a6,a5
    4428:	41940433          	sub	s0,s0,s9
    442c:	fffe0c93          	addi	s9,t3,-1 # ffff <__stack_top+0x5f6f>
    4430:	019878b3          	and	a7,a6,s9
    4434:	019b7cb3          	and	s9,s6,s9
    4438:	01085713          	srli	a4,a6,0x10
    443c:	010b5d13          	srli	s10,s6,0x10
    4440:	00088513          	mv	a0,a7
    4444:	000c8593          	mv	a1,s9
    4448:	5e9000ef          	jal	ra,5230 <__mulsi3>
    444c:	00050793          	mv	a5,a0
    4450:	000d0593          	mv	a1,s10
    4454:	00088513          	mv	a0,a7
    4458:	5d9000ef          	jal	ra,5230 <__mulsi3>
    445c:	00050893          	mv	a7,a0
    4460:	000c8593          	mv	a1,s9
    4464:	00070513          	mv	a0,a4
    4468:	5c9000ef          	jal	ra,5230 <__mulsi3>
    446c:	00050313          	mv	t1,a0
    4470:	000d0593          	mv	a1,s10
    4474:	00070513          	mv	a0,a4
    4478:	5b9000ef          	jal	ra,5230 <__mulsi3>
    447c:	0107d713          	srli	a4,a5,0x10
    4480:	006888b3          	add	a7,a7,t1
    4484:	01170733          	add	a4,a4,a7
    4488:	00050613          	mv	a2,a0
    448c:	00677463          	bgeu	a4,t1,4494 <__divdf3+0x3a8>
    4490:	01c50633          	add	a2,a0,t3
    4494:	00010537          	lui	a0,0x10
    4498:	fff50513          	addi	a0,a0,-1 # ffff <__stack_top+0x5f6f>
    449c:	01075693          	srli	a3,a4,0x10
    44a0:	00a77a33          	and	s4,a4,a0
    44a4:	010a1a13          	slli	s4,s4,0x10
    44a8:	00a7f7b3          	and	a5,a5,a0
    44ac:	00c686b3          	add	a3,a3,a2
    44b0:	00fa0a33          	add	s4,s4,a5
    44b4:	00d46863          	bltu	s0,a3,44c4 <__divdf3+0x3d8>
    44b8:	00080993          	mv	s3,a6
    44bc:	04d41463          	bne	s0,a3,4504 <__divdf3+0x418>
    44c0:	054df263          	bgeu	s11,s4,4504 <__divdf3+0x418>
    44c4:	016d8db3          	add	s11,s11,s6
    44c8:	016db7b3          	sltu	a5,s11,s6
    44cc:	015787b3          	add	a5,a5,s5
    44d0:	00f40433          	add	s0,s0,a5
    44d4:	fff80993          	addi	s3,a6,-1
    44d8:	008ae663          	bltu	s5,s0,44e4 <__divdf3+0x3f8>
    44dc:	028a9463          	bne	s5,s0,4504 <__divdf3+0x418>
    44e0:	036de263          	bltu	s11,s6,4504 <__divdf3+0x418>
    44e4:	00d46663          	bltu	s0,a3,44f0 <__divdf3+0x404>
    44e8:	00869e63          	bne	a3,s0,4504 <__divdf3+0x418>
    44ec:	014dfc63          	bgeu	s11,s4,4504 <__divdf3+0x418>
    44f0:	016d8db3          	add	s11,s11,s6
    44f4:	016db7b3          	sltu	a5,s11,s6
    44f8:	015787b3          	add	a5,a5,s5
    44fc:	ffe80993          	addi	s3,a6,-2
    4500:	00f40433          	add	s0,s0,a5
    4504:	414d8a33          	sub	s4,s11,s4
    4508:	40d40433          	sub	s0,s0,a3
    450c:	014db7b3          	sltu	a5,s11,s4
    4510:	40f40433          	sub	s0,s0,a5
    4514:	fff00693          	li	a3,-1
    4518:	1a8a8263          	beq	s5,s0,46bc <__divdf3+0x5d0>
    451c:	000b8593          	mv	a1,s7
    4520:	00040513          	mv	a0,s0
    4524:	539000ef          	jal	ra,525c <__udivsi3>
    4528:	00050593          	mv	a1,a0
    452c:	00a12623          	sw	a0,12(sp)
    4530:	000c0513          	mv	a0,s8
    4534:	4fd000ef          	jal	ra,5230 <__mulsi3>
    4538:	00a12423          	sw	a0,8(sp)
    453c:	000b8593          	mv	a1,s7
    4540:	00040513          	mv	a0,s0
    4544:	561000ef          	jal	ra,52a4 <__umodsi3>
    4548:	00c12683          	lw	a3,12(sp)
    454c:	00812703          	lw	a4,8(sp)
    4550:	01051513          	slli	a0,a0,0x10
    4554:	010a5793          	srli	a5,s4,0x10
    4558:	00a7e7b3          	or	a5,a5,a0
    455c:	00068d93          	mv	s11,a3
    4560:	00e7fe63          	bgeu	a5,a4,457c <__divdf3+0x490>
    4564:	015787b3          	add	a5,a5,s5
    4568:	fff68d93          	addi	s11,a3,-1 # 7fefffff <RAM_SIZE+0x7feeffff>
    456c:	0157e863          	bltu	a5,s5,457c <__divdf3+0x490>
    4570:	00e7f663          	bgeu	a5,a4,457c <__divdf3+0x490>
    4574:	ffe68d93          	addi	s11,a3,-2
    4578:	015787b3          	add	a5,a5,s5
    457c:	40e78433          	sub	s0,a5,a4
    4580:	000b8593          	mv	a1,s7
    4584:	00040513          	mv	a0,s0
    4588:	4d5000ef          	jal	ra,525c <__udivsi3>
    458c:	00050593          	mv	a1,a0
    4590:	00a12423          	sw	a0,8(sp)
    4594:	000c0513          	mv	a0,s8
    4598:	499000ef          	jal	ra,5230 <__mulsi3>
    459c:	00050c13          	mv	s8,a0
    45a0:	000b8593          	mv	a1,s7
    45a4:	00040513          	mv	a0,s0
    45a8:	4fd000ef          	jal	ra,52a4 <__umodsi3>
    45ac:	00812703          	lw	a4,8(sp)
    45b0:	010a1a13          	slli	s4,s4,0x10
    45b4:	01051793          	slli	a5,a0,0x10
    45b8:	010a5a13          	srli	s4,s4,0x10
    45bc:	00fa67b3          	or	a5,s4,a5
    45c0:	00070693          	mv	a3,a4
    45c4:	0187fe63          	bgeu	a5,s8,45e0 <__divdf3+0x4f4>
    45c8:	015787b3          	add	a5,a5,s5
    45cc:	fff70693          	addi	a3,a4,-1
    45d0:	0157e863          	bltu	a5,s5,45e0 <__divdf3+0x4f4>
    45d4:	0187f663          	bgeu	a5,s8,45e0 <__divdf3+0x4f4>
    45d8:	ffe70693          	addi	a3,a4,-2
    45dc:	015787b3          	add	a5,a5,s5
    45e0:	010d9813          	slli	a6,s11,0x10
    45e4:	00d86833          	or	a6,a6,a3
    45e8:	01081893          	slli	a7,a6,0x10
    45ec:	0108d893          	srli	a7,a7,0x10
    45f0:	418787b3          	sub	a5,a5,s8
    45f4:	01085713          	srli	a4,a6,0x10
    45f8:	00088513          	mv	a0,a7
    45fc:	000c8593          	mv	a1,s9
    4600:	431000ef          	jal	ra,5230 <__mulsi3>
    4604:	00050313          	mv	t1,a0
    4608:	000d0593          	mv	a1,s10
    460c:	00088513          	mv	a0,a7
    4610:	421000ef          	jal	ra,5230 <__mulsi3>
    4614:	00050893          	mv	a7,a0
    4618:	000c8593          	mv	a1,s9
    461c:	00070513          	mv	a0,a4
    4620:	411000ef          	jal	ra,5230 <__mulsi3>
    4624:	00050e13          	mv	t3,a0
    4628:	000d0593          	mv	a1,s10
    462c:	00070513          	mv	a0,a4
    4630:	401000ef          	jal	ra,5230 <__mulsi3>
    4634:	01035713          	srli	a4,t1,0x10
    4638:	01c888b3          	add	a7,a7,t3
    463c:	01170733          	add	a4,a4,a7
    4640:	00050693          	mv	a3,a0
    4644:	01c77663          	bgeu	a4,t3,4650 <__divdf3+0x564>
    4648:	00010637          	lui	a2,0x10
    464c:	00c506b3          	add	a3,a0,a2
    4650:	00010537          	lui	a0,0x10
    4654:	fff50513          	addi	a0,a0,-1 # ffff <__stack_top+0x5f6f>
    4658:	01075613          	srli	a2,a4,0x10
    465c:	00a77733          	and	a4,a4,a0
    4660:	01071713          	slli	a4,a4,0x10
    4664:	00a37533          	and	a0,t1,a0
    4668:	00d60633          	add	a2,a2,a3
    466c:	00a70533          	add	a0,a4,a0
    4670:	00c7e863          	bltu	a5,a2,4680 <__divdf3+0x594>
    4674:	24c79a63          	bne	a5,a2,48c8 <__divdf3+0x7dc>
    4678:	00080693          	mv	a3,a6
    467c:	04050063          	beqz	a0,46bc <__divdf3+0x5d0>
    4680:	00fa87b3          	add	a5,s5,a5
    4684:	fff80693          	addi	a3,a6,-1
    4688:	0357e463          	bltu	a5,s5,46b0 <__divdf3+0x5c4>
    468c:	00c7e663          	bltu	a5,a2,4698 <__divdf3+0x5ac>
    4690:	22c79a63          	bne	a5,a2,48c4 <__divdf3+0x7d8>
    4694:	02ab7063          	bgeu	s6,a0,46b4 <__divdf3+0x5c8>
    4698:	001b1713          	slli	a4,s6,0x1
    469c:	01673b33          	sltu	s6,a4,s6
    46a0:	015b0ab3          	add	s5,s6,s5
    46a4:	ffe80693          	addi	a3,a6,-2
    46a8:	015787b3          	add	a5,a5,s5
    46ac:	00070b13          	mv	s6,a4
    46b0:	00c79463          	bne	a5,a2,46b8 <__divdf3+0x5cc>
    46b4:	00ab0463          	beq	s6,a0,46bc <__divdf3+0x5d0>
    46b8:	0016e693          	ori	a3,a3,1
    46bc:	3ff90793          	addi	a5,s2,1023
    46c0:	12f05063          	blez	a5,47e0 <__divdf3+0x6f4>
    46c4:	0076f713          	andi	a4,a3,7
    46c8:	02070063          	beqz	a4,46e8 <__divdf3+0x5fc>
    46cc:	00f6f713          	andi	a4,a3,15
    46d0:	00400613          	li	a2,4
    46d4:	00c70a63          	beq	a4,a2,46e8 <__divdf3+0x5fc>
    46d8:	00468613          	addi	a2,a3,4
    46dc:	00d636b3          	sltu	a3,a2,a3
    46e0:	00d989b3          	add	s3,s3,a3
    46e4:	00060693          	mv	a3,a2
    46e8:	01000737          	lui	a4,0x1000
    46ec:	00e9f733          	and	a4,s3,a4
    46f0:	00070a63          	beqz	a4,4704 <__divdf3+0x618>
    46f4:	ff0007b7          	lui	a5,0xff000
    46f8:	fff78793          	addi	a5,a5,-1 # feffffff <RAM_SIZE+0xfefeffff>
    46fc:	00f9f9b3          	and	s3,s3,a5
    4700:	40090793          	addi	a5,s2,1024
    4704:	7fe00713          	li	a4,2046
    4708:	0af74663          	blt	a4,a5,47b4 <__divdf3+0x6c8>
    470c:	0036d693          	srli	a3,a3,0x3
    4710:	01d99713          	slli	a4,s3,0x1d
    4714:	00d76733          	or	a4,a4,a3
    4718:	0039d593          	srli	a1,s3,0x3
    471c:	01479793          	slli	a5,a5,0x14
    4720:	7ff006b7          	lui	a3,0x7ff00
    4724:	00c59593          	slli	a1,a1,0xc
    4728:	04c12083          	lw	ra,76(sp)
    472c:	04812403          	lw	s0,72(sp)
    4730:	00d7f7b3          	and	a5,a5,a3
    4734:	00c5d593          	srli	a1,a1,0xc
    4738:	00b7e5b3          	or	a1,a5,a1
    473c:	01f49493          	slli	s1,s1,0x1f
    4740:	0095e7b3          	or	a5,a1,s1
    4744:	04012903          	lw	s2,64(sp)
    4748:	04412483          	lw	s1,68(sp)
    474c:	03c12983          	lw	s3,60(sp)
    4750:	03812a03          	lw	s4,56(sp)
    4754:	03412a83          	lw	s5,52(sp)
    4758:	03012b03          	lw	s6,48(sp)
    475c:	02c12b83          	lw	s7,44(sp)
    4760:	02812c03          	lw	s8,40(sp)
    4764:	02412c83          	lw	s9,36(sp)
    4768:	02012d03          	lw	s10,32(sp)
    476c:	01c12d83          	lw	s11,28(sp)
    4770:	00070513          	mv	a0,a4
    4774:	00078593          	mv	a1,a5
    4778:	05010113          	addi	sp,sp,80
    477c:	00008067          	ret
    4780:	fff90913          	addi	s2,s2,-1
    4784:	00000d93          	li	s11,0
    4788:	bc1ff06f          	j	4348 <__divdf3+0x25c>
    478c:	000a8493          	mv	s1,s5
    4790:	000c8993          	mv	s3,s9
    4794:	00040693          	mv	a3,s0
    4798:	000c0793          	mv	a5,s8
    479c:	00300713          	li	a4,3
    47a0:	0ee78a63          	beq	a5,a4,4894 <__divdf3+0x7a8>
    47a4:	00100713          	li	a4,1
    47a8:	10e78063          	beq	a5,a4,48a8 <__divdf3+0x7bc>
    47ac:	00200713          	li	a4,2
    47b0:	f0e796e3          	bne	a5,a4,46bc <__divdf3+0x5d0>
    47b4:	00000593          	li	a1,0
    47b8:	00000713          	li	a4,0
    47bc:	7ff00793          	li	a5,2047
    47c0:	f5dff06f          	j	471c <__divdf3+0x630>
    47c4:	000b0493          	mv	s1,s6
    47c8:	fd5ff06f          	j	479c <__divdf3+0x6b0>
    47cc:	000809b7          	lui	s3,0x80
    47d0:	00000693          	li	a3,0
    47d4:	00000493          	li	s1,0
    47d8:	00300793          	li	a5,3
    47dc:	fc1ff06f          	j	479c <__divdf3+0x6b0>
    47e0:	00100593          	li	a1,1
    47e4:	40f585b3          	sub	a1,a1,a5
    47e8:	03800713          	li	a4,56
    47ec:	0ab74e63          	blt	a4,a1,48a8 <__divdf3+0x7bc>
    47f0:	01f00713          	li	a4,31
    47f4:	06b74663          	blt	a4,a1,4860 <__divdf3+0x774>
    47f8:	41e90913          	addi	s2,s2,1054
    47fc:	012997b3          	sll	a5,s3,s2
    4800:	00b6d733          	srl	a4,a3,a1
    4804:	01269933          	sll	s2,a3,s2
    4808:	00e7e7b3          	or	a5,a5,a4
    480c:	01203933          	snez	s2,s2
    4810:	0127e7b3          	or	a5,a5,s2
    4814:	00b9d5b3          	srl	a1,s3,a1
    4818:	0077f713          	andi	a4,a5,7
    481c:	02070063          	beqz	a4,483c <__divdf3+0x750>
    4820:	00f7f713          	andi	a4,a5,15
    4824:	00400693          	li	a3,4
    4828:	00d70a63          	beq	a4,a3,483c <__divdf3+0x750>
    482c:	00478713          	addi	a4,a5,4
    4830:	00f737b3          	sltu	a5,a4,a5
    4834:	00f585b3          	add	a1,a1,a5
    4838:	00070793          	mv	a5,a4
    483c:	00800737          	lui	a4,0x800
    4840:	00e5f733          	and	a4,a1,a4
    4844:	06071863          	bnez	a4,48b4 <__divdf3+0x7c8>
    4848:	01d59713          	slli	a4,a1,0x1d
    484c:	0037d793          	srli	a5,a5,0x3
    4850:	00f76733          	or	a4,a4,a5
    4854:	0035d593          	srli	a1,a1,0x3
    4858:	00000793          	li	a5,0
    485c:	ec1ff06f          	j	471c <__divdf3+0x630>
    4860:	fe100713          	li	a4,-31
    4864:	40f707b3          	sub	a5,a4,a5
    4868:	02000613          	li	a2,32
    486c:	00f9d7b3          	srl	a5,s3,a5
    4870:	00000713          	li	a4,0
    4874:	00c58663          	beq	a1,a2,4880 <__divdf3+0x794>
    4878:	43e90713          	addi	a4,s2,1086
    487c:	00e99733          	sll	a4,s3,a4
    4880:	00d76733          	or	a4,a4,a3
    4884:	00e03733          	snez	a4,a4
    4888:	00e7e7b3          	or	a5,a5,a4
    488c:	00000593          	li	a1,0
    4890:	f89ff06f          	j	4818 <__divdf3+0x72c>
    4894:	000805b7          	lui	a1,0x80
    4898:	00000713          	li	a4,0
    489c:	7ff00793          	li	a5,2047
    48a0:	00000493          	li	s1,0
    48a4:	e79ff06f          	j	471c <__divdf3+0x630>
    48a8:	00000593          	li	a1,0
    48ac:	00000713          	li	a4,0
    48b0:	fa9ff06f          	j	4858 <__divdf3+0x76c>
    48b4:	00000593          	li	a1,0
    48b8:	00000713          	li	a4,0
    48bc:	00100793          	li	a5,1
    48c0:	e5dff06f          	j	471c <__divdf3+0x630>
    48c4:	00068813          	mv	a6,a3
    48c8:	00080693          	mv	a3,a6
    48cc:	dedff06f          	j	46b8 <__divdf3+0x5cc>

000048d0 <__eqdf2>:
    48d0:	0145d713          	srli	a4,a1,0x14
    48d4:	001007b7          	lui	a5,0x100
    48d8:	fff78793          	addi	a5,a5,-1 # fffff <RAM_SIZE+0xeffff>
    48dc:	0146d813          	srli	a6,a3,0x14
    48e0:	00050313          	mv	t1,a0
    48e4:	00050e93          	mv	t4,a0
    48e8:	7ff77713          	andi	a4,a4,2047
    48ec:	7ff00513          	li	a0,2047
    48f0:	00b7f8b3          	and	a7,a5,a1
    48f4:	00060f13          	mv	t5,a2
    48f8:	00d7f7b3          	and	a5,a5,a3
    48fc:	01f5d593          	srli	a1,a1,0x1f
    4900:	7ff87813          	andi	a6,a6,2047
    4904:	01f6d693          	srli	a3,a3,0x1f
    4908:	00a71c63          	bne	a4,a0,4920 <__eqdf2+0x50>
    490c:	0068ee33          	or	t3,a7,t1
    4910:	00100513          	li	a0,1
    4914:	000e1463          	bnez	t3,491c <__eqdf2+0x4c>
    4918:	00e80663          	beq	a6,a4,4924 <__eqdf2+0x54>
    491c:	00008067          	ret
    4920:	00a81863          	bne	a6,a0,4930 <__eqdf2+0x60>
    4924:	00c7e633          	or	a2,a5,a2
    4928:	00100513          	li	a0,1
    492c:	fe0618e3          	bnez	a2,491c <__eqdf2+0x4c>
    4930:	00100513          	li	a0,1
    4934:	ff0714e3          	bne	a4,a6,491c <__eqdf2+0x4c>
    4938:	fef892e3          	bne	a7,a5,491c <__eqdf2+0x4c>
    493c:	ffee90e3          	bne	t4,t5,491c <__eqdf2+0x4c>
    4940:	00d58a63          	beq	a1,a3,4954 <__eqdf2+0x84>
    4944:	fc071ce3          	bnez	a4,491c <__eqdf2+0x4c>
    4948:	0068e533          	or	a0,a7,t1
    494c:	00a03533          	snez	a0,a0
    4950:	00008067          	ret
    4954:	00000513          	li	a0,0
    4958:	00008067          	ret

0000495c <__gedf2>:
    495c:	00100737          	lui	a4,0x100
    4960:	fff70713          	addi	a4,a4,-1 # fffff <RAM_SIZE+0xeffff>
    4964:	0145d813          	srli	a6,a1,0x14
    4968:	00b778b3          	and	a7,a4,a1
    496c:	00050793          	mv	a5,a0
    4970:	00050313          	mv	t1,a0
    4974:	7ff87813          	andi	a6,a6,2047
    4978:	01f5d513          	srli	a0,a1,0x1f
    497c:	7ff00e93          	li	t4,2047
    4980:	0146d593          	srli	a1,a3,0x14
    4984:	00d77733          	and	a4,a4,a3
    4988:	00060e13          	mv	t3,a2
    498c:	7ff5f593          	andi	a1,a1,2047
    4990:	01f6d693          	srli	a3,a3,0x1f
    4994:	01d81a63          	bne	a6,t4,49a8 <__gedf2+0x4c>
    4998:	00f8eeb3          	or	t4,a7,a5
    499c:	080e8a63          	beqz	t4,4a30 <__gedf2+0xd4>
    49a0:	ffe00513          	li	a0,-2
    49a4:	00008067          	ret
    49a8:	01d59663          	bne	a1,t4,49b4 <__gedf2+0x58>
    49ac:	00c76eb3          	or	t4,a4,a2
    49b0:	fe0e98e3          	bnez	t4,49a0 <__gedf2+0x44>
    49b4:	08081063          	bnez	a6,4a34 <__gedf2+0xd8>
    49b8:	00f8e7b3          	or	a5,a7,a5
    49bc:	0017b793          	seqz	a5,a5
    49c0:	00059663          	bnez	a1,49cc <__gedf2+0x70>
    49c4:	00c76633          	or	a2,a4,a2
    49c8:	04060c63          	beqz	a2,4a20 <__gedf2+0xc4>
    49cc:	00079c63          	bnez	a5,49e4 <__gedf2+0x88>
    49d0:	00d51463          	bne	a0,a3,49d8 <__gedf2+0x7c>
    49d4:	0305d063          	bge	a1,a6,49f4 <__gedf2+0x98>
    49d8:	04050063          	beqz	a0,4a18 <__gedf2+0xbc>
    49dc:	fff00513          	li	a0,-1
    49e0:	00008067          	ret
    49e4:	fff00513          	li	a0,-1
    49e8:	00068a63          	beqz	a3,49fc <__gedf2+0xa0>
    49ec:	00068513          	mv	a0,a3
    49f0:	00008067          	ret
    49f4:	00b85663          	bge	a6,a1,4a00 <__gedf2+0xa4>
    49f8:	fe0502e3          	beqz	a0,49dc <__gedf2+0x80>
    49fc:	00008067          	ret
    4a00:	fd176ce3          	bltu	a4,a7,49d8 <__gedf2+0x7c>
    4a04:	02e89263          	bne	a7,a4,4a28 <__gedf2+0xcc>
    4a08:	fc6e68e3          	bltu	t3,t1,49d8 <__gedf2+0x7c>
    4a0c:	ffc366e3          	bltu	t1,t3,49f8 <__gedf2+0x9c>
    4a10:	00000513          	li	a0,0
    4a14:	00008067          	ret
    4a18:	00100513          	li	a0,1
    4a1c:	00008067          	ret
    4a20:	fe0798e3          	bnez	a5,4a10 <__gedf2+0xb4>
    4a24:	fb5ff06f          	j	49d8 <__gedf2+0x7c>
    4a28:	fce8e8e3          	bltu	a7,a4,49f8 <__gedf2+0x9c>
    4a2c:	fe5ff06f          	j	4a10 <__gedf2+0xb4>
    4a30:	f7058ee3          	beq	a1,a6,49ac <__gedf2+0x50>
    4a34:	f8059ee3          	bnez	a1,49d0 <__gedf2+0x74>
    4a38:	00000793          	li	a5,0
    4a3c:	f89ff06f          	j	49c4 <__gedf2+0x68>

00004a40 <__ledf2>:
    4a40:	00100737          	lui	a4,0x100
    4a44:	fff70713          	addi	a4,a4,-1 # fffff <RAM_SIZE+0xeffff>
    4a48:	0145d813          	srli	a6,a1,0x14
    4a4c:	00b778b3          	and	a7,a4,a1
    4a50:	00050793          	mv	a5,a0
    4a54:	00050313          	mv	t1,a0
    4a58:	7ff87813          	andi	a6,a6,2047
    4a5c:	01f5d513          	srli	a0,a1,0x1f
    4a60:	7ff00e93          	li	t4,2047
    4a64:	0146d593          	srli	a1,a3,0x14
    4a68:	00d77733          	and	a4,a4,a3
    4a6c:	00060e13          	mv	t3,a2
    4a70:	7ff5f593          	andi	a1,a1,2047
    4a74:	01f6d693          	srli	a3,a3,0x1f
    4a78:	01d81a63          	bne	a6,t4,4a8c <__ledf2+0x4c>
    4a7c:	00f8eeb3          	or	t4,a7,a5
    4a80:	080e8a63          	beqz	t4,4b14 <__ledf2+0xd4>
    4a84:	00200513          	li	a0,2
    4a88:	00008067          	ret
    4a8c:	01d59663          	bne	a1,t4,4a98 <__ledf2+0x58>
    4a90:	00c76eb3          	or	t4,a4,a2
    4a94:	fe0e98e3          	bnez	t4,4a84 <__ledf2+0x44>
    4a98:	08081063          	bnez	a6,4b18 <__ledf2+0xd8>
    4a9c:	00f8e7b3          	or	a5,a7,a5
    4aa0:	0017b793          	seqz	a5,a5
    4aa4:	00059663          	bnez	a1,4ab0 <__ledf2+0x70>
    4aa8:	00c76633          	or	a2,a4,a2
    4aac:	04060c63          	beqz	a2,4b04 <__ledf2+0xc4>
    4ab0:	00079c63          	bnez	a5,4ac8 <__ledf2+0x88>
    4ab4:	00d51463          	bne	a0,a3,4abc <__ledf2+0x7c>
    4ab8:	0305d063          	bge	a1,a6,4ad8 <__ledf2+0x98>
    4abc:	04050063          	beqz	a0,4afc <__ledf2+0xbc>
    4ac0:	fff00513          	li	a0,-1
    4ac4:	00008067          	ret
    4ac8:	fff00513          	li	a0,-1
    4acc:	00068a63          	beqz	a3,4ae0 <__ledf2+0xa0>
    4ad0:	00068513          	mv	a0,a3
    4ad4:	00008067          	ret
    4ad8:	00b85663          	bge	a6,a1,4ae4 <__ledf2+0xa4>
    4adc:	fe0502e3          	beqz	a0,4ac0 <__ledf2+0x80>
    4ae0:	00008067          	ret
    4ae4:	fd176ce3          	bltu	a4,a7,4abc <__ledf2+0x7c>
    4ae8:	02e89263          	bne	a7,a4,4b0c <__ledf2+0xcc>
    4aec:	fc6e68e3          	bltu	t3,t1,4abc <__ledf2+0x7c>
    4af0:	ffc366e3          	bltu	t1,t3,4adc <__ledf2+0x9c>
    4af4:	00000513          	li	a0,0
    4af8:	00008067          	ret
    4afc:	00100513          	li	a0,1
    4b00:	00008067          	ret
    4b04:	fe0798e3          	bnez	a5,4af4 <__ledf2+0xb4>
    4b08:	fb5ff06f          	j	4abc <__ledf2+0x7c>
    4b0c:	fce8e8e3          	bltu	a7,a4,4adc <__ledf2+0x9c>
    4b10:	fe5ff06f          	j	4af4 <__ledf2+0xb4>
    4b14:	f7058ee3          	beq	a1,a6,4a90 <__ledf2+0x50>
    4b18:	f8059ee3          	bnez	a1,4ab4 <__ledf2+0x74>
    4b1c:	00000793          	li	a5,0
    4b20:	f89ff06f          	j	4aa8 <__ledf2+0x68>

00004b24 <__muldf3>:
    4b24:	fd010113          	addi	sp,sp,-48
    4b28:	01312e23          	sw	s3,28(sp)
    4b2c:	0145d993          	srli	s3,a1,0x14
    4b30:	02812423          	sw	s0,40(sp)
    4b34:	02912223          	sw	s1,36(sp)
    4b38:	01412c23          	sw	s4,24(sp)
    4b3c:	01512a23          	sw	s5,20(sp)
    4b40:	01712623          	sw	s7,12(sp)
    4b44:	00c59493          	slli	s1,a1,0xc
    4b48:	02112623          	sw	ra,44(sp)
    4b4c:	03212023          	sw	s2,32(sp)
    4b50:	01612823          	sw	s6,16(sp)
    4b54:	7ff9f993          	andi	s3,s3,2047
    4b58:	00050413          	mv	s0,a0
    4b5c:	00060b93          	mv	s7,a2
    4b60:	00068a93          	mv	s5,a3
    4b64:	00c4d493          	srli	s1,s1,0xc
    4b68:	01f5da13          	srli	s4,a1,0x1f
    4b6c:	0a098463          	beqz	s3,4c14 <__muldf3+0xf0>
    4b70:	7ff00793          	li	a5,2047
    4b74:	10f98263          	beq	s3,a5,4c78 <__muldf3+0x154>
    4b78:	01d55793          	srli	a5,a0,0x1d
    4b7c:	00349493          	slli	s1,s1,0x3
    4b80:	0097e4b3          	or	s1,a5,s1
    4b84:	008007b7          	lui	a5,0x800
    4b88:	00f4e4b3          	or	s1,s1,a5
    4b8c:	00351913          	slli	s2,a0,0x3
    4b90:	c0198993          	addi	s3,s3,-1023 # 7fc01 <RAM_SIZE+0x6fc01>
    4b94:	00000b13          	li	s6,0
    4b98:	014ad513          	srli	a0,s5,0x14
    4b9c:	00ca9413          	slli	s0,s5,0xc
    4ba0:	7ff57513          	andi	a0,a0,2047
    4ba4:	00c45413          	srli	s0,s0,0xc
    4ba8:	01fada93          	srli	s5,s5,0x1f
    4bac:	10050263          	beqz	a0,4cb0 <__muldf3+0x18c>
    4bb0:	7ff00793          	li	a5,2047
    4bb4:	16f50263          	beq	a0,a5,4d18 <__muldf3+0x1f4>
    4bb8:	01dbd793          	srli	a5,s7,0x1d
    4bbc:	00341413          	slli	s0,s0,0x3
    4bc0:	0087e433          	or	s0,a5,s0
    4bc4:	008007b7          	lui	a5,0x800
    4bc8:	00f46433          	or	s0,s0,a5
    4bcc:	c0150513          	addi	a0,a0,-1023
    4bd0:	003b9793          	slli	a5,s7,0x3
    4bd4:	00000713          	li	a4,0
    4bd8:	002b1693          	slli	a3,s6,0x2
    4bdc:	00e6e6b3          	or	a3,a3,a4
    4be0:	00a989b3          	add	s3,s3,a0
    4be4:	fff68693          	addi	a3,a3,-1 # 7fefffff <RAM_SIZE+0x7feeffff>
    4be8:	00e00613          	li	a2,14
    4bec:	015a4833          	xor	a6,s4,s5
    4bf0:	00198893          	addi	a7,s3,1
    4bf4:	14d66e63          	bltu	a2,a3,4d50 <__muldf3+0x22c>
    4bf8:	00002617          	auipc	a2,0x2
    4bfc:	e4860613          	addi	a2,a2,-440 # 6a40 <errpat+0x2c0>
    4c00:	00269693          	slli	a3,a3,0x2
    4c04:	00c686b3          	add	a3,a3,a2
    4c08:	0006a683          	lw	a3,0(a3)
    4c0c:	00c686b3          	add	a3,a3,a2
    4c10:	00068067          	jr	a3
    4c14:	00a4e933          	or	s2,s1,a0
    4c18:	06090c63          	beqz	s2,4c90 <__muldf3+0x16c>
    4c1c:	04048063          	beqz	s1,4c5c <__muldf3+0x138>
    4c20:	00048513          	mv	a0,s1
    4c24:	6e4000ef          	jal	ra,5308 <__clzsi2>
    4c28:	ff550713          	addi	a4,a0,-11
    4c2c:	01c00793          	li	a5,28
    4c30:	02e7cc63          	blt	a5,a4,4c68 <__muldf3+0x144>
    4c34:	01d00793          	li	a5,29
    4c38:	ff850913          	addi	s2,a0,-8
    4c3c:	40e787b3          	sub	a5,a5,a4
    4c40:	012494b3          	sll	s1,s1,s2
    4c44:	00f457b3          	srl	a5,s0,a5
    4c48:	0097e4b3          	or	s1,a5,s1
    4c4c:	01241933          	sll	s2,s0,s2
    4c50:	c0d00993          	li	s3,-1011
    4c54:	40a989b3          	sub	s3,s3,a0
    4c58:	f3dff06f          	j	4b94 <__muldf3+0x70>
    4c5c:	6ac000ef          	jal	ra,5308 <__clzsi2>
    4c60:	02050513          	addi	a0,a0,32
    4c64:	fc5ff06f          	j	4c28 <__muldf3+0x104>
    4c68:	fd850493          	addi	s1,a0,-40
    4c6c:	009414b3          	sll	s1,s0,s1
    4c70:	00000913          	li	s2,0
    4c74:	fddff06f          	j	4c50 <__muldf3+0x12c>
    4c78:	00a4e933          	or	s2,s1,a0
    4c7c:	02090263          	beqz	s2,4ca0 <__muldf3+0x17c>
    4c80:	00050913          	mv	s2,a0
    4c84:	7ff00993          	li	s3,2047
    4c88:	00300b13          	li	s6,3
    4c8c:	f0dff06f          	j	4b98 <__muldf3+0x74>
    4c90:	00000493          	li	s1,0
    4c94:	00000993          	li	s3,0
    4c98:	00100b13          	li	s6,1
    4c9c:	efdff06f          	j	4b98 <__muldf3+0x74>
    4ca0:	00000493          	li	s1,0
    4ca4:	7ff00993          	li	s3,2047
    4ca8:	00200b13          	li	s6,2
    4cac:	eedff06f          	j	4b98 <__muldf3+0x74>
    4cb0:	017467b3          	or	a5,s0,s7
    4cb4:	06078e63          	beqz	a5,4d30 <__muldf3+0x20c>
    4cb8:	04040063          	beqz	s0,4cf8 <__muldf3+0x1d4>
    4cbc:	00040513          	mv	a0,s0
    4cc0:	648000ef          	jal	ra,5308 <__clzsi2>
    4cc4:	ff550693          	addi	a3,a0,-11
    4cc8:	01c00793          	li	a5,28
    4ccc:	02d7ce63          	blt	a5,a3,4d08 <__muldf3+0x1e4>
    4cd0:	01d00713          	li	a4,29
    4cd4:	ff850793          	addi	a5,a0,-8
    4cd8:	40d70733          	sub	a4,a4,a3
    4cdc:	00f41433          	sll	s0,s0,a5
    4ce0:	00ebd733          	srl	a4,s7,a4
    4ce4:	00876433          	or	s0,a4,s0
    4ce8:	00fb97b3          	sll	a5,s7,a5
    4cec:	c0d00713          	li	a4,-1011
    4cf0:	40a70533          	sub	a0,a4,a0
    4cf4:	ee1ff06f          	j	4bd4 <__muldf3+0xb0>
    4cf8:	000b8513          	mv	a0,s7
    4cfc:	60c000ef          	jal	ra,5308 <__clzsi2>
    4d00:	02050513          	addi	a0,a0,32
    4d04:	fc1ff06f          	j	4cc4 <__muldf3+0x1a0>
    4d08:	fd850413          	addi	s0,a0,-40
    4d0c:	008b9433          	sll	s0,s7,s0
    4d10:	00000793          	li	a5,0
    4d14:	fd9ff06f          	j	4cec <__muldf3+0x1c8>
    4d18:	017467b3          	or	a5,s0,s7
    4d1c:	02078263          	beqz	a5,4d40 <__muldf3+0x21c>
    4d20:	000b8793          	mv	a5,s7
    4d24:	7ff00513          	li	a0,2047
    4d28:	00300713          	li	a4,3
    4d2c:	eadff06f          	j	4bd8 <__muldf3+0xb4>
    4d30:	00000413          	li	s0,0
    4d34:	00000513          	li	a0,0
    4d38:	00100713          	li	a4,1
    4d3c:	e9dff06f          	j	4bd8 <__muldf3+0xb4>
    4d40:	00000413          	li	s0,0
    4d44:	7ff00513          	li	a0,2047
    4d48:	00200713          	li	a4,2
    4d4c:	e8dff06f          	j	4bd8 <__muldf3+0xb4>
    4d50:	00010ab7          	lui	s5,0x10
    4d54:	fffa8e93          	addi	t4,s5,-1 # ffff <__stack_top+0x5f6f>
    4d58:	01095f93          	srli	t6,s2,0x10
    4d5c:	01d7fa33          	and	s4,a5,t4
    4d60:	01d97933          	and	s2,s2,t4
    4d64:	0107d293          	srli	t0,a5,0x10
    4d68:	00090513          	mv	a0,s2
    4d6c:	000a0593          	mv	a1,s4
    4d70:	4c0000ef          	jal	ra,5230 <__mulsi3>
    4d74:	00050393          	mv	t2,a0
    4d78:	00028593          	mv	a1,t0
    4d7c:	00090513          	mv	a0,s2
    4d80:	4b0000ef          	jal	ra,5230 <__mulsi3>
    4d84:	00050313          	mv	t1,a0
    4d88:	000a0593          	mv	a1,s4
    4d8c:	000f8513          	mv	a0,t6
    4d90:	4a0000ef          	jal	ra,5230 <__mulsi3>
    4d94:	00050e13          	mv	t3,a0
    4d98:	00028593          	mv	a1,t0
    4d9c:	000f8513          	mv	a0,t6
    4da0:	490000ef          	jal	ra,5230 <__mulsi3>
    4da4:	0103d713          	srli	a4,t2,0x10
    4da8:	01c30333          	add	t1,t1,t3
    4dac:	00670733          	add	a4,a4,t1
    4db0:	00050f13          	mv	t5,a0
    4db4:	01c77463          	bgeu	a4,t3,4dbc <__muldf3+0x298>
    4db8:	01550f33          	add	t5,a0,s5
    4dbc:	01d77e33          	and	t3,a4,t4
    4dc0:	01d3f3b3          	and	t2,t2,t4
    4dc4:	010e1e13          	slli	t3,t3,0x10
    4dc8:	007e0e33          	add	t3,t3,t2
    4dcc:	01045393          	srli	t2,s0,0x10
    4dd0:	01d47433          	and	s0,s0,t4
    4dd4:	01075a93          	srli	s5,a4,0x10
    4dd8:	00090513          	mv	a0,s2
    4ddc:	00040593          	mv	a1,s0
    4de0:	450000ef          	jal	ra,5230 <__mulsi3>
    4de4:	00050e93          	mv	t4,a0
    4de8:	00038593          	mv	a1,t2
    4dec:	00090513          	mv	a0,s2
    4df0:	440000ef          	jal	ra,5230 <__mulsi3>
    4df4:	00050793          	mv	a5,a0
    4df8:	00040593          	mv	a1,s0
    4dfc:	000f8513          	mv	a0,t6
    4e00:	430000ef          	jal	ra,5230 <__mulsi3>
    4e04:	00050313          	mv	t1,a0
    4e08:	00038593          	mv	a1,t2
    4e0c:	000f8513          	mv	a0,t6
    4e10:	420000ef          	jal	ra,5230 <__mulsi3>
    4e14:	010ed693          	srli	a3,t4,0x10
    4e18:	006787b3          	add	a5,a5,t1
    4e1c:	00f686b3          	add	a3,a3,a5
    4e20:	00050713          	mv	a4,a0
    4e24:	0066f663          	bgeu	a3,t1,4e30 <__muldf3+0x30c>
    4e28:	000107b7          	lui	a5,0x10
    4e2c:	00f50733          	add	a4,a0,a5
    4e30:	00010937          	lui	s2,0x10
    4e34:	fff90793          	addi	a5,s2,-1 # ffff <__stack_top+0x5f6f>
    4e38:	0106df93          	srli	t6,a3,0x10
    4e3c:	00f6f6b3          	and	a3,a3,a5
    4e40:	01069693          	slli	a3,a3,0x10
    4e44:	00fefeb3          	and	t4,t4,a5
    4e48:	01d68eb3          	add	t4,a3,t4
    4e4c:	0104db13          	srli	s6,s1,0x10
    4e50:	00f4f4b3          	and	s1,s1,a5
    4e54:	00ef8fb3          	add	t6,t6,a4
    4e58:	01da8ab3          	add	s5,s5,t4
    4e5c:	00048513          	mv	a0,s1
    4e60:	000a0593          	mv	a1,s4
    4e64:	3cc000ef          	jal	ra,5230 <__mulsi3>
    4e68:	00050713          	mv	a4,a0
    4e6c:	00028593          	mv	a1,t0
    4e70:	00048513          	mv	a0,s1
    4e74:	3bc000ef          	jal	ra,5230 <__mulsi3>
    4e78:	00050313          	mv	t1,a0
    4e7c:	000a0593          	mv	a1,s4
    4e80:	000b0513          	mv	a0,s6
    4e84:	3ac000ef          	jal	ra,5230 <__mulsi3>
    4e88:	00050a13          	mv	s4,a0
    4e8c:	00028593          	mv	a1,t0
    4e90:	000b0513          	mv	a0,s6
    4e94:	39c000ef          	jal	ra,5230 <__mulsi3>
    4e98:	01075793          	srli	a5,a4,0x10
    4e9c:	01430333          	add	t1,t1,s4
    4ea0:	006787b3          	add	a5,a5,t1
    4ea4:	00050613          	mv	a2,a0
    4ea8:	0147f463          	bgeu	a5,s4,4eb0 <__muldf3+0x38c>
    4eac:	01250633          	add	a2,a0,s2
    4eb0:	00010a37          	lui	s4,0x10
    4eb4:	fffa0513          	addi	a0,s4,-1 # ffff <__stack_top+0x5f6f>
    4eb8:	00a7f333          	and	t1,a5,a0
    4ebc:	00a77733          	and	a4,a4,a0
    4ec0:	0107d293          	srli	t0,a5,0x10
    4ec4:	01031313          	slli	t1,t1,0x10
    4ec8:	00c282b3          	add	t0,t0,a2
    4ecc:	00e30333          	add	t1,t1,a4
    4ed0:	00048513          	mv	a0,s1
    4ed4:	00040593          	mv	a1,s0
    4ed8:	358000ef          	jal	ra,5230 <__mulsi3>
    4edc:	00050913          	mv	s2,a0
    4ee0:	00038593          	mv	a1,t2
    4ee4:	00048513          	mv	a0,s1
    4ee8:	348000ef          	jal	ra,5230 <__mulsi3>
    4eec:	00050793          	mv	a5,a0
    4ef0:	00040593          	mv	a1,s0
    4ef4:	000b0513          	mv	a0,s6
    4ef8:	338000ef          	jal	ra,5230 <__mulsi3>
    4efc:	00050493          	mv	s1,a0
    4f00:	00038593          	mv	a1,t2
    4f04:	000b0513          	mv	a0,s6
    4f08:	328000ef          	jal	ra,5230 <__mulsi3>
    4f0c:	01095413          	srli	s0,s2,0x10
    4f10:	009787b3          	add	a5,a5,s1
    4f14:	00f407b3          	add	a5,s0,a5
    4f18:	00050393          	mv	t2,a0
    4f1c:	0097f463          	bgeu	a5,s1,4f24 <__muldf3+0x400>
    4f20:	014503b3          	add	t2,a0,s4
    4f24:	00010737          	lui	a4,0x10
    4f28:	fff70713          	addi	a4,a4,-1 # ffff <__stack_top+0x5f6f>
    4f2c:	00e7f6b3          	and	a3,a5,a4
    4f30:	01069693          	slli	a3,a3,0x10
    4f34:	00e97733          	and	a4,s2,a4
    4f38:	015f0f33          	add	t5,t5,s5
    4f3c:	00e686b3          	add	a3,a3,a4
    4f40:	01df3eb3          	sltu	t4,t5,t4
    4f44:	01f68733          	add	a4,a3,t6
    4f48:	01d70433          	add	s0,a4,t4
    4f4c:	006f0f33          	add	t5,t5,t1
    4f50:	006f3333          	sltu	t1,t5,t1
    4f54:	00540633          	add	a2,s0,t0
    4f58:	006605b3          	add	a1,a2,t1
    4f5c:	01d43eb3          	sltu	t4,s0,t4
    4f60:	01f73733          	sltu	a4,a4,t6
    4f64:	0107d413          	srli	s0,a5,0x10
    4f68:	01d76733          	or	a4,a4,t4
    4f6c:	00563633          	sltu	a2,a2,t0
    4f70:	0065b333          	sltu	t1,a1,t1
    4f74:	00870733          	add	a4,a4,s0
    4f78:	00666333          	or	t1,a2,t1
    4f7c:	00670433          	add	s0,a4,t1
    4f80:	00740433          	add	s0,s0,t2
    4f84:	0175d793          	srli	a5,a1,0x17
    4f88:	00941413          	slli	s0,s0,0x9
    4f8c:	00f46433          	or	s0,s0,a5
    4f90:	009f1793          	slli	a5,t5,0x9
    4f94:	01c7e7b3          	or	a5,a5,t3
    4f98:	00f037b3          	snez	a5,a5
    4f9c:	017f5f13          	srli	t5,t5,0x17
    4fa0:	00959713          	slli	a4,a1,0x9
    4fa4:	01e7e7b3          	or	a5,a5,t5
    4fa8:	00e7e7b3          	or	a5,a5,a4
    4fac:	01000737          	lui	a4,0x1000
    4fb0:	00e47733          	and	a4,s0,a4
    4fb4:	10070663          	beqz	a4,50c0 <__muldf3+0x59c>
    4fb8:	0017d713          	srli	a4,a5,0x1
    4fbc:	0017f793          	andi	a5,a5,1
    4fc0:	00f767b3          	or	a5,a4,a5
    4fc4:	01f41713          	slli	a4,s0,0x1f
    4fc8:	00e7e7b3          	or	a5,a5,a4
    4fcc:	00145413          	srli	s0,s0,0x1
    4fd0:	3ff88693          	addi	a3,a7,1023 # 8003ff <RAM_SIZE+0x7f03ff>
    4fd4:	0ed05a63          	blez	a3,50c8 <__muldf3+0x5a4>
    4fd8:	0077f713          	andi	a4,a5,7
    4fdc:	02070063          	beqz	a4,4ffc <__muldf3+0x4d8>
    4fe0:	00f7f713          	andi	a4,a5,15
    4fe4:	00400613          	li	a2,4
    4fe8:	00c70a63          	beq	a4,a2,4ffc <__muldf3+0x4d8>
    4fec:	00478713          	addi	a4,a5,4 # 10004 <RAM_SIZE+0x4>
    4ff0:	00f737b3          	sltu	a5,a4,a5
    4ff4:	00f40433          	add	s0,s0,a5
    4ff8:	00070793          	mv	a5,a4
    4ffc:	01000737          	lui	a4,0x1000
    5000:	00e47733          	and	a4,s0,a4
    5004:	00070a63          	beqz	a4,5018 <__muldf3+0x4f4>
    5008:	ff000737          	lui	a4,0xff000
    500c:	fff70713          	addi	a4,a4,-1 # feffffff <RAM_SIZE+0xfefeffff>
    5010:	00e47433          	and	s0,s0,a4
    5014:	40088693          	addi	a3,a7,1024
    5018:	7fe00713          	li	a4,2046
    501c:	16d74a63          	blt	a4,a3,5190 <__muldf3+0x66c>
    5020:	0037d713          	srli	a4,a5,0x3
    5024:	01d41793          	slli	a5,s0,0x1d
    5028:	00e7e7b3          	or	a5,a5,a4
    502c:	00345413          	srli	s0,s0,0x3
    5030:	01469713          	slli	a4,a3,0x14
    5034:	00c41413          	slli	s0,s0,0xc
    5038:	7ff006b7          	lui	a3,0x7ff00
    503c:	00d77733          	and	a4,a4,a3
    5040:	00c45413          	srli	s0,s0,0xc
    5044:	00876433          	or	s0,a4,s0
    5048:	01f81813          	slli	a6,a6,0x1f
    504c:	02c12083          	lw	ra,44(sp)
    5050:	01046733          	or	a4,s0,a6
    5054:	02812403          	lw	s0,40(sp)
    5058:	02412483          	lw	s1,36(sp)
    505c:	02012903          	lw	s2,32(sp)
    5060:	01c12983          	lw	s3,28(sp)
    5064:	01812a03          	lw	s4,24(sp)
    5068:	01412a83          	lw	s5,20(sp)
    506c:	01012b03          	lw	s6,16(sp)
    5070:	00c12b83          	lw	s7,12(sp)
    5074:	00078513          	mv	a0,a5
    5078:	00070593          	mv	a1,a4
    507c:	03010113          	addi	sp,sp,48
    5080:	00008067          	ret
    5084:	000a0813          	mv	a6,s4
    5088:	00048413          	mv	s0,s1
    508c:	00090793          	mv	a5,s2
    5090:	000b0713          	mv	a4,s6
    5094:	00200693          	li	a3,2
    5098:	0ed70c63          	beq	a4,a3,5190 <__muldf3+0x66c>
    509c:	00300693          	li	a3,3
    50a0:	0cd70e63          	beq	a4,a3,517c <__muldf3+0x658>
    50a4:	00100693          	li	a3,1
    50a8:	f2d714e3          	bne	a4,a3,4fd0 <__muldf3+0x4ac>
    50ac:	00000413          	li	s0,0
    50b0:	00000793          	li	a5,0
    50b4:	08c0006f          	j	5140 <__muldf3+0x61c>
    50b8:	000a8813          	mv	a6,s5
    50bc:	fd9ff06f          	j	5094 <__muldf3+0x570>
    50c0:	00098893          	mv	a7,s3
    50c4:	f0dff06f          	j	4fd0 <__muldf3+0x4ac>
    50c8:	00100613          	li	a2,1
    50cc:	40d60633          	sub	a2,a2,a3
    50d0:	03800713          	li	a4,56
    50d4:	fcc74ce3          	blt	a4,a2,50ac <__muldf3+0x588>
    50d8:	01f00713          	li	a4,31
    50dc:	06c74663          	blt	a4,a2,5148 <__muldf3+0x624>
    50e0:	41e88893          	addi	a7,a7,1054
    50e4:	01141733          	sll	a4,s0,a7
    50e8:	00c7d6b3          	srl	a3,a5,a2
    50ec:	011797b3          	sll	a5,a5,a7
    50f0:	00d76733          	or	a4,a4,a3
    50f4:	00f037b3          	snez	a5,a5
    50f8:	00f767b3          	or	a5,a4,a5
    50fc:	00c45433          	srl	s0,s0,a2
    5100:	0077f713          	andi	a4,a5,7
    5104:	02070063          	beqz	a4,5124 <__muldf3+0x600>
    5108:	00f7f713          	andi	a4,a5,15
    510c:	00400693          	li	a3,4
    5110:	00d70a63          	beq	a4,a3,5124 <__muldf3+0x600>
    5114:	00478713          	addi	a4,a5,4
    5118:	00f737b3          	sltu	a5,a4,a5
    511c:	00f40433          	add	s0,s0,a5
    5120:	00070793          	mv	a5,a4
    5124:	00800737          	lui	a4,0x800
    5128:	00e47733          	and	a4,s0,a4
    512c:	06071a63          	bnez	a4,51a0 <__muldf3+0x67c>
    5130:	01d41713          	slli	a4,s0,0x1d
    5134:	0037d793          	srli	a5,a5,0x3
    5138:	00f767b3          	or	a5,a4,a5
    513c:	00345413          	srli	s0,s0,0x3
    5140:	00000693          	li	a3,0
    5144:	eedff06f          	j	5030 <__muldf3+0x50c>
    5148:	fe100713          	li	a4,-31
    514c:	40d70733          	sub	a4,a4,a3
    5150:	02000593          	li	a1,32
    5154:	00e45733          	srl	a4,s0,a4
    5158:	00000693          	li	a3,0
    515c:	00b60663          	beq	a2,a1,5168 <__muldf3+0x644>
    5160:	43e88893          	addi	a7,a7,1086
    5164:	011416b3          	sll	a3,s0,a7
    5168:	00f6e7b3          	or	a5,a3,a5
    516c:	00f037b3          	snez	a5,a5
    5170:	00f767b3          	or	a5,a4,a5
    5174:	00000413          	li	s0,0
    5178:	f89ff06f          	j	5100 <__muldf3+0x5dc>
    517c:	00080437          	lui	s0,0x80
    5180:	00000793          	li	a5,0
    5184:	7ff00693          	li	a3,2047
    5188:	00000813          	li	a6,0
    518c:	ea5ff06f          	j	5030 <__muldf3+0x50c>
    5190:	00000413          	li	s0,0
    5194:	00000793          	li	a5,0
    5198:	7ff00693          	li	a3,2047
    519c:	e95ff06f          	j	5030 <__muldf3+0x50c>
    51a0:	00000413          	li	s0,0
    51a4:	00000793          	li	a5,0
    51a8:	00100693          	li	a3,1
    51ac:	e85ff06f          	j	5030 <__muldf3+0x50c>

000051b0 <__fixdfsi>:
    51b0:	0145d713          	srli	a4,a1,0x14
    51b4:	001006b7          	lui	a3,0x100
    51b8:	fff68793          	addi	a5,a3,-1 # fffff <RAM_SIZE+0xeffff>
    51bc:	7ff77713          	andi	a4,a4,2047
    51c0:	3fe00613          	li	a2,1022
    51c4:	00b7f7b3          	and	a5,a5,a1
    51c8:	01f5d593          	srli	a1,a1,0x1f
    51cc:	04e65e63          	bge	a2,a4,5228 <__fixdfsi+0x78>
    51d0:	41d00613          	li	a2,1053
    51d4:	00e65a63          	bge	a2,a4,51e8 <__fixdfsi+0x38>
    51d8:	80000537          	lui	a0,0x80000
    51dc:	fff54513          	not	a0,a0
    51e0:	00a58533          	add	a0,a1,a0
    51e4:	00008067          	ret
    51e8:	00d7e7b3          	or	a5,a5,a3
    51ec:	43300693          	li	a3,1075
    51f0:	40e686b3          	sub	a3,a3,a4
    51f4:	01f00613          	li	a2,31
    51f8:	02d64063          	blt	a2,a3,5218 <__fixdfsi+0x68>
    51fc:	bed70713          	addi	a4,a4,-1043 # 7ffbed <RAM_SIZE+0x7efbed>
    5200:	00e797b3          	sll	a5,a5,a4
    5204:	00d55533          	srl	a0,a0,a3
    5208:	00a7e533          	or	a0,a5,a0
    520c:	02058063          	beqz	a1,522c <__fixdfsi+0x7c>
    5210:	40a00533          	neg	a0,a0
    5214:	00008067          	ret
    5218:	41300513          	li	a0,1043
    521c:	40e50533          	sub	a0,a0,a4
    5220:	00a7d533          	srl	a0,a5,a0
    5224:	fe9ff06f          	j	520c <__fixdfsi+0x5c>
    5228:	00000513          	li	a0,0
    522c:	00008067          	ret

00005230 <__mulsi3>:
    5230:	00050613          	mv	a2,a0
    5234:	00000513          	li	a0,0
    5238:	0015f693          	andi	a3,a1,1
    523c:	00068463          	beqz	a3,5244 <__mulsi3+0x14>
    5240:	00c50533          	add	a0,a0,a2
    5244:	0015d593          	srli	a1,a1,0x1
    5248:	00161613          	slli	a2,a2,0x1
    524c:	fe0596e3          	bnez	a1,5238 <__mulsi3+0x8>
    5250:	00008067          	ret

00005254 <__divsi3>:
    5254:	06054063          	bltz	a0,52b4 <__umodsi3+0x10>
    5258:	0605c663          	bltz	a1,52c4 <__umodsi3+0x20>

0000525c <__udivsi3>:
    525c:	00058613          	mv	a2,a1
    5260:	00050593          	mv	a1,a0
    5264:	fff00513          	li	a0,-1
    5268:	02060c63          	beqz	a2,52a0 <__udivsi3+0x44>
    526c:	00100693          	li	a3,1
    5270:	00b67a63          	bgeu	a2,a1,5284 <__udivsi3+0x28>
    5274:	00c05863          	blez	a2,5284 <__udivsi3+0x28>
    5278:	00161613          	slli	a2,a2,0x1
    527c:	00169693          	slli	a3,a3,0x1
    5280:	feb66ae3          	bltu	a2,a1,5274 <__udivsi3+0x18>
    5284:	00000513          	li	a0,0
    5288:	00c5e663          	bltu	a1,a2,5294 <__udivsi3+0x38>
    528c:	40c585b3          	sub	a1,a1,a2
    5290:	00d56533          	or	a0,a0,a3
    5294:	0016d693          	srli	a3,a3,0x1
    5298:	00165613          	srli	a2,a2,0x1
    529c:	fe0696e3          	bnez	a3,5288 <__udivsi3+0x2c>
    52a0:	00008067          	ret

000052a4 <__umodsi3>:
    52a4:	00008293          	mv	t0,ra
    52a8:	fb5ff0ef          	jal	ra,525c <__udivsi3>
    52ac:	00058513          	mv	a0,a1
    52b0:	00028067          	jr	t0
    52b4:	40a00533          	neg	a0,a0
    52b8:	00b04863          	bgtz	a1,52c8 <__umodsi3+0x24>
    52bc:	40b005b3          	neg	a1,a1
    52c0:	f9dff06f          	j	525c <__udivsi3>
    52c4:	40b005b3          	neg	a1,a1
    52c8:	00008293          	mv	t0,ra
    52cc:	f91ff0ef          	jal	ra,525c <__udivsi3>
    52d0:	40a00533          	neg	a0,a0
    52d4:	00028067          	jr	t0

000052d8 <__modsi3>:
    52d8:	00008293          	mv	t0,ra
    52dc:	0005ca63          	bltz	a1,52f0 <__modsi3+0x18>
    52e0:	00054c63          	bltz	a0,52f8 <__modsi3+0x20>
    52e4:	f79ff0ef          	jal	ra,525c <__udivsi3>
    52e8:	00058513          	mv	a0,a1
    52ec:	00028067          	jr	t0
    52f0:	40b005b3          	neg	a1,a1
    52f4:	fe0558e3          	bgez	a0,52e4 <__modsi3+0xc>
    52f8:	40a00533          	neg	a0,a0
    52fc:	f61ff0ef          	jal	ra,525c <__udivsi3>
    5300:	40b00533          	neg	a0,a1
    5304:	00028067          	jr	t0

00005308 <__clzsi2>:
    5308:	000107b7          	lui	a5,0x10
    530c:	02f57a63          	bgeu	a0,a5,5340 <__clzsi2+0x38>
    5310:	0ff00793          	li	a5,255
    5314:	00a7b7b3          	sltu	a5,a5,a0
    5318:	00379793          	slli	a5,a5,0x3
    531c:	02000713          	li	a4,32
    5320:	40f70733          	sub	a4,a4,a5
    5324:	00f55533          	srl	a0,a0,a5
    5328:	00001797          	auipc	a5,0x1
    532c:	75478793          	addi	a5,a5,1876 # 6a7c <__clz_tab>
    5330:	00a78533          	add	a0,a5,a0
    5334:	00054503          	lbu	a0,0(a0) # 80000000 <RAM_SIZE+0x7fff0000>
    5338:	40a70533          	sub	a0,a4,a0
    533c:	00008067          	ret
    5340:	01000737          	lui	a4,0x1000
    5344:	01000793          	li	a5,16
    5348:	fce56ae3          	bltu	a0,a4,531c <__clzsi2+0x14>
    534c:	01800793          	li	a5,24
    5350:	fcdff06f          	j	531c <__clzsi2+0x14>

00005354 <exit>:
    5354:	ff010113          	addi	sp,sp,-16
    5358:	00000593          	li	a1,0
    535c:	00812423          	sw	s0,8(sp)
    5360:	00112623          	sw	ra,12(sp)
    5364:	00050413          	mv	s0,a0
    5368:	41c000ef          	jal	ra,5784 <__call_exitprocs>
    536c:	8181a503          	lw	a0,-2024(gp) # 6ba8 <_global_impure_ptr>
    5370:	03c52783          	lw	a5,60(a0)
    5374:	00078463          	beqz	a5,537c <exit+0x28>
    5378:	000780e7          	jalr	a5
    537c:	00040513          	mv	a0,s0
    5380:	6b8000ef          	jal	ra,5a38 <_exit>

00005384 <__libc_init_array>:
    5384:	ff010113          	addi	sp,sp,-16
    5388:	00812423          	sw	s0,8(sp)
    538c:	01212023          	sw	s2,0(sp)
    5390:	00001417          	auipc	s0,0x1
    5394:	7f040413          	addi	s0,s0,2032 # 6b80 <__init_array_start>
    5398:	00001917          	auipc	s2,0x1
    539c:	7e890913          	addi	s2,s2,2024 # 6b80 <__init_array_start>
    53a0:	40890933          	sub	s2,s2,s0
    53a4:	00112623          	sw	ra,12(sp)
    53a8:	00912223          	sw	s1,4(sp)
    53ac:	40295913          	srai	s2,s2,0x2
    53b0:	00090e63          	beqz	s2,53cc <__libc_init_array+0x48>
    53b4:	00000493          	li	s1,0
    53b8:	00042783          	lw	a5,0(s0)
    53bc:	00148493          	addi	s1,s1,1
    53c0:	00440413          	addi	s0,s0,4
    53c4:	000780e7          	jalr	a5
    53c8:	fe9918e3          	bne	s2,s1,53b8 <__libc_init_array+0x34>
    53cc:	00001417          	auipc	s0,0x1
    53d0:	7b440413          	addi	s0,s0,1972 # 6b80 <__init_array_start>
    53d4:	00001917          	auipc	s2,0x1
    53d8:	7b490913          	addi	s2,s2,1972 # 6b88 <__do_global_dtors_aux_fini_array_entry>
    53dc:	40890933          	sub	s2,s2,s0
    53e0:	40295913          	srai	s2,s2,0x2
    53e4:	00090e63          	beqz	s2,5400 <__libc_init_array+0x7c>
    53e8:	00000493          	li	s1,0
    53ec:	00042783          	lw	a5,0(s0)
    53f0:	00148493          	addi	s1,s1,1
    53f4:	00440413          	addi	s0,s0,4
    53f8:	000780e7          	jalr	a5
    53fc:	fe9918e3          	bne	s2,s1,53ec <__libc_init_array+0x68>
    5400:	00c12083          	lw	ra,12(sp)
    5404:	00812403          	lw	s0,8(sp)
    5408:	00412483          	lw	s1,4(sp)
    540c:	00012903          	lw	s2,0(sp)
    5410:	01010113          	addi	sp,sp,16
    5414:	00008067          	ret

00005418 <memcpy>:
    5418:	00a5c7b3          	xor	a5,a1,a0
    541c:	0037f793          	andi	a5,a5,3
    5420:	00c508b3          	add	a7,a0,a2
    5424:	06079663          	bnez	a5,5490 <memcpy+0x78>
    5428:	00300793          	li	a5,3
    542c:	06c7f263          	bgeu	a5,a2,5490 <memcpy+0x78>
    5430:	00357793          	andi	a5,a0,3
    5434:	00050713          	mv	a4,a0
    5438:	0c079a63          	bnez	a5,550c <memcpy+0xf4>
    543c:	ffc8f613          	andi	a2,a7,-4
    5440:	40e606b3          	sub	a3,a2,a4
    5444:	02000793          	li	a5,32
    5448:	02000293          	li	t0,32
    544c:	06d7c263          	blt	a5,a3,54b0 <memcpy+0x98>
    5450:	00058693          	mv	a3,a1
    5454:	00070793          	mv	a5,a4
    5458:	02c77863          	bgeu	a4,a2,5488 <memcpy+0x70>
    545c:	0006a803          	lw	a6,0(a3)
    5460:	00478793          	addi	a5,a5,4
    5464:	00468693          	addi	a3,a3,4
    5468:	ff07ae23          	sw	a6,-4(a5)
    546c:	fec7e8e3          	bltu	a5,a2,545c <memcpy+0x44>
    5470:	fff60793          	addi	a5,a2,-1
    5474:	40e787b3          	sub	a5,a5,a4
    5478:	ffc7f793          	andi	a5,a5,-4
    547c:	00478793          	addi	a5,a5,4
    5480:	00f70733          	add	a4,a4,a5
    5484:	00f585b3          	add	a1,a1,a5
    5488:	01176863          	bltu	a4,a7,5498 <memcpy+0x80>
    548c:	00008067          	ret
    5490:	00050713          	mv	a4,a0
    5494:	ff157ce3          	bgeu	a0,a7,548c <memcpy+0x74>
    5498:	0005c783          	lbu	a5,0(a1) # 80000 <RAM_SIZE+0x70000>
    549c:	00170713          	addi	a4,a4,1 # 1000001 <RAM_SIZE+0xff0001>
    54a0:	00158593          	addi	a1,a1,1
    54a4:	fef70fa3          	sb	a5,-1(a4)
    54a8:	ff1768e3          	bltu	a4,a7,5498 <memcpy+0x80>
    54ac:	00008067          	ret
    54b0:	0045a683          	lw	a3,4(a1)
    54b4:	01c5a783          	lw	a5,28(a1)
    54b8:	0005af83          	lw	t6,0(a1)
    54bc:	0085af03          	lw	t5,8(a1)
    54c0:	00c5ae83          	lw	t4,12(a1)
    54c4:	0105ae03          	lw	t3,16(a1)
    54c8:	0145a303          	lw	t1,20(a1)
    54cc:	0185a803          	lw	a6,24(a1)
    54d0:	00d72223          	sw	a3,4(a4)
    54d4:	0205a683          	lw	a3,32(a1)
    54d8:	01f72023          	sw	t6,0(a4)
    54dc:	01e72423          	sw	t5,8(a4)
    54e0:	01d72623          	sw	t4,12(a4)
    54e4:	01c72823          	sw	t3,16(a4)
    54e8:	00672a23          	sw	t1,20(a4)
    54ec:	01072c23          	sw	a6,24(a4)
    54f0:	00f72e23          	sw	a5,28(a4)
    54f4:	02470713          	addi	a4,a4,36
    54f8:	40e607b3          	sub	a5,a2,a4
    54fc:	fed72e23          	sw	a3,-4(a4)
    5500:	02458593          	addi	a1,a1,36
    5504:	faf2c6e3          	blt	t0,a5,54b0 <memcpy+0x98>
    5508:	f49ff06f          	j	5450 <memcpy+0x38>
    550c:	0005c683          	lbu	a3,0(a1)
    5510:	00170713          	addi	a4,a4,1
    5514:	00377793          	andi	a5,a4,3
    5518:	fed70fa3          	sb	a3,-1(a4)
    551c:	00158593          	addi	a1,a1,1
    5520:	f0078ee3          	beqz	a5,543c <memcpy+0x24>
    5524:	0005c683          	lbu	a3,0(a1)
    5528:	00170713          	addi	a4,a4,1
    552c:	00377793          	andi	a5,a4,3
    5530:	fed70fa3          	sb	a3,-1(a4)
    5534:	00158593          	addi	a1,a1,1
    5538:	fc079ae3          	bnez	a5,550c <memcpy+0xf4>
    553c:	f01ff06f          	j	543c <memcpy+0x24>

00005540 <memset>:
    5540:	00f00313          	li	t1,15
    5544:	00050713          	mv	a4,a0
    5548:	02c37e63          	bgeu	t1,a2,5584 <memset+0x44>
    554c:	00f77793          	andi	a5,a4,15
    5550:	0a079063          	bnez	a5,55f0 <memset+0xb0>
    5554:	08059263          	bnez	a1,55d8 <memset+0x98>
    5558:	ff067693          	andi	a3,a2,-16
    555c:	00f67613          	andi	a2,a2,15
    5560:	00e686b3          	add	a3,a3,a4
    5564:	00b72023          	sw	a1,0(a4)
    5568:	00b72223          	sw	a1,4(a4)
    556c:	00b72423          	sw	a1,8(a4)
    5570:	00b72623          	sw	a1,12(a4)
    5574:	01070713          	addi	a4,a4,16
    5578:	fed766e3          	bltu	a4,a3,5564 <memset+0x24>
    557c:	00061463          	bnez	a2,5584 <memset+0x44>
    5580:	00008067          	ret
    5584:	40c306b3          	sub	a3,t1,a2
    5588:	00269693          	slli	a3,a3,0x2
    558c:	00000297          	auipc	t0,0x0
    5590:	005686b3          	add	a3,a3,t0
    5594:	00c68067          	jr	12(a3)
    5598:	00b70723          	sb	a1,14(a4)
    559c:	00b706a3          	sb	a1,13(a4)
    55a0:	00b70623          	sb	a1,12(a4)
    55a4:	00b705a3          	sb	a1,11(a4)
    55a8:	00b70523          	sb	a1,10(a4)
    55ac:	00b704a3          	sb	a1,9(a4)
    55b0:	00b70423          	sb	a1,8(a4)
    55b4:	00b703a3          	sb	a1,7(a4)
    55b8:	00b70323          	sb	a1,6(a4)
    55bc:	00b702a3          	sb	a1,5(a4)
    55c0:	00b70223          	sb	a1,4(a4)
    55c4:	00b701a3          	sb	a1,3(a4)
    55c8:	00b70123          	sb	a1,2(a4)
    55cc:	00b700a3          	sb	a1,1(a4)
    55d0:	00b70023          	sb	a1,0(a4)
    55d4:	00008067          	ret
    55d8:	0ff5f593          	zext.b	a1,a1
    55dc:	00859693          	slli	a3,a1,0x8
    55e0:	00d5e5b3          	or	a1,a1,a3
    55e4:	01059693          	slli	a3,a1,0x10
    55e8:	00d5e5b3          	or	a1,a1,a3
    55ec:	f6dff06f          	j	5558 <memset+0x18>
    55f0:	00279693          	slli	a3,a5,0x2
    55f4:	00000297          	auipc	t0,0x0
    55f8:	005686b3          	add	a3,a3,t0
    55fc:	00008293          	mv	t0,ra
    5600:	fa0680e7          	jalr	-96(a3)
    5604:	00028093          	mv	ra,t0
    5608:	ff078793          	addi	a5,a5,-16
    560c:	40f70733          	sub	a4,a4,a5
    5610:	00f60633          	add	a2,a2,a5
    5614:	f6c378e3          	bgeu	t1,a2,5584 <memset+0x44>
    5618:	f3dff06f          	j	5554 <memset+0x14>

0000561c <modf>:
    561c:	4145d793          	srai	a5,a1,0x14
    5620:	ff010113          	addi	sp,sp,-16
    5624:	7ff7f793          	andi	a5,a5,2047
    5628:	00812423          	sw	s0,8(sp)
    562c:	00912223          	sw	s1,4(sp)
    5630:	01212023          	sw	s2,0(sp)
    5634:	00112623          	sw	ra,12(sp)
    5638:	c0178713          	addi	a4,a5,-1023
    563c:	01300693          	li	a3,19
    5640:	00058413          	mv	s0,a1
    5644:	00050493          	mv	s1,a0
    5648:	00060913          	mv	s2,a2
    564c:	04e6c863          	blt	a3,a4,569c <modf+0x80>
    5650:	0e074a63          	bltz	a4,5744 <modf+0x128>
    5654:	001007b7          	lui	a5,0x100
    5658:	fff78793          	addi	a5,a5,-1 # fffff <RAM_SIZE+0xeffff>
    565c:	40e7d733          	sra	a4,a5,a4
    5660:	00b777b3          	and	a5,a4,a1
    5664:	00a7e7b3          	or	a5,a5,a0
    5668:	06079263          	bnez	a5,56cc <modf+0xb0>
    566c:	800005b7          	lui	a1,0x80000
    5670:	00992023          	sw	s1,0(s2)
    5674:	0085f5b3          	and	a1,a1,s0
    5678:	00892223          	sw	s0,4(s2)
    567c:	00000493          	li	s1,0
    5680:	00c12083          	lw	ra,12(sp)
    5684:	00812403          	lw	s0,8(sp)
    5688:	00012903          	lw	s2,0(sp)
    568c:	00048513          	mv	a0,s1
    5690:	00412483          	lw	s1,4(sp)
    5694:	01010113          	addi	sp,sp,16
    5698:	00008067          	ret
    569c:	03300693          	li	a3,51
    56a0:	06e6c863          	blt	a3,a4,5710 <modf+0xf4>
    56a4:	fff00713          	li	a4,-1
    56a8:	bed78793          	addi	a5,a5,-1043
    56ac:	00f757b3          	srl	a5,a4,a5
    56b0:	00a7f733          	and	a4,a5,a0
    56b4:	fa070ce3          	beqz	a4,566c <modf+0x50>
    56b8:	fff7c793          	not	a5,a5
    56bc:	00a7f4b3          	and	s1,a5,a0
    56c0:	00048713          	mv	a4,s1
    56c4:	00048613          	mv	a2,s1
    56c8:	0180006f          	j	56e0 <modf+0xc4>
    56cc:	fff74713          	not	a4,a4
    56d0:	00000813          	li	a6,0
    56d4:	00b77433          	and	s0,a4,a1
    56d8:	00080613          	mv	a2,a6
    56dc:	00080713          	mv	a4,a6
    56e0:	00892223          	sw	s0,4(s2)
    56e4:	00040693          	mv	a3,s0
    56e8:	00e92023          	sw	a4,0(s2)
    56ec:	384000ef          	jal	ra,5a70 <__subdf3>
    56f0:	00c12083          	lw	ra,12(sp)
    56f4:	00812403          	lw	s0,8(sp)
    56f8:	00050493          	mv	s1,a0
    56fc:	00012903          	lw	s2,0(sp)
    5700:	00048513          	mv	a0,s1
    5704:	00412483          	lw	s1,4(sp)
    5708:	01010113          	addi	sp,sp,16
    570c:	00008067          	ret
    5710:	00a92023          	sw	a0,0(s2)
    5714:	00b92223          	sw	a1,4(s2)
    5718:	214000ef          	jal	ra,592c <__fpclassifyd>
    571c:	04051c63          	bnez	a0,5774 <modf+0x158>
    5720:	00048613          	mv	a2,s1
    5724:	00048513          	mv	a0,s1
    5728:	00040693          	mv	a3,s0
    572c:	00040593          	mv	a1,s0
    5730:	9e4fe0ef          	jal	ra,3914 <__adddf3>
    5734:	00050493          	mv	s1,a0
    5738:	00a92023          	sw	a0,0(s2)
    573c:	00b92223          	sw	a1,4(s2)
    5740:	f41ff06f          	j	5680 <modf+0x64>
    5744:	00c12083          	lw	ra,12(sp)
    5748:	00812403          	lw	s0,8(sp)
    574c:	800006b7          	lui	a3,0x80000
    5750:	00000713          	li	a4,0
    5754:	00e62023          	sw	a4,0(a2)
    5758:	00b6f6b3          	and	a3,a3,a1
    575c:	00d92223          	sw	a3,4(s2)
    5760:	00048513          	mv	a0,s1
    5764:	00012903          	lw	s2,0(sp)
    5768:	00412483          	lw	s1,4(sp)
    576c:	01010113          	addi	sp,sp,16
    5770:	00008067          	ret
    5774:	800005b7          	lui	a1,0x80000
    5778:	0085f5b3          	and	a1,a1,s0
    577c:	00000493          	li	s1,0
    5780:	f01ff06f          	j	5680 <modf+0x64>

00005784 <__call_exitprocs>:
    5784:	fd010113          	addi	sp,sp,-48
    5788:	01412c23          	sw	s4,24(sp)
    578c:	8181aa03          	lw	s4,-2024(gp) # 6ba8 <_global_impure_ptr>
    5790:	03212023          	sw	s2,32(sp)
    5794:	148a2903          	lw	s2,328(s4)
    5798:	02112623          	sw	ra,44(sp)
    579c:	02812423          	sw	s0,40(sp)
    57a0:	02912223          	sw	s1,36(sp)
    57a4:	01312e23          	sw	s3,28(sp)
    57a8:	01512a23          	sw	s5,20(sp)
    57ac:	01612823          	sw	s6,16(sp)
    57b0:	01712623          	sw	s7,12(sp)
    57b4:	01812423          	sw	s8,8(sp)
    57b8:	04090063          	beqz	s2,57f8 <__call_exitprocs+0x74>
    57bc:	00050b13          	mv	s6,a0
    57c0:	00058b93          	mv	s7,a1
    57c4:	00100a93          	li	s5,1
    57c8:	fff00993          	li	s3,-1
    57cc:	00492483          	lw	s1,4(s2)
    57d0:	fff48413          	addi	s0,s1,-1
    57d4:	02044263          	bltz	s0,57f8 <__call_exitprocs+0x74>
    57d8:	00249493          	slli	s1,s1,0x2
    57dc:	009904b3          	add	s1,s2,s1
    57e0:	040b8463          	beqz	s7,5828 <__call_exitprocs+0xa4>
    57e4:	1044a783          	lw	a5,260(s1)
    57e8:	05778063          	beq	a5,s7,5828 <__call_exitprocs+0xa4>
    57ec:	fff40413          	addi	s0,s0,-1
    57f0:	ffc48493          	addi	s1,s1,-4
    57f4:	ff3416e3          	bne	s0,s3,57e0 <__call_exitprocs+0x5c>
    57f8:	02c12083          	lw	ra,44(sp)
    57fc:	02812403          	lw	s0,40(sp)
    5800:	02412483          	lw	s1,36(sp)
    5804:	02012903          	lw	s2,32(sp)
    5808:	01c12983          	lw	s3,28(sp)
    580c:	01812a03          	lw	s4,24(sp)
    5810:	01412a83          	lw	s5,20(sp)
    5814:	01012b03          	lw	s6,16(sp)
    5818:	00c12b83          	lw	s7,12(sp)
    581c:	00812c03          	lw	s8,8(sp)
    5820:	03010113          	addi	sp,sp,48
    5824:	00008067          	ret
    5828:	00492783          	lw	a5,4(s2)
    582c:	0044a683          	lw	a3,4(s1)
    5830:	fff78793          	addi	a5,a5,-1
    5834:	04878e63          	beq	a5,s0,5890 <__call_exitprocs+0x10c>
    5838:	0004a223          	sw	zero,4(s1)
    583c:	fa0688e3          	beqz	a3,57ec <__call_exitprocs+0x68>
    5840:	18892783          	lw	a5,392(s2)
    5844:	008a9733          	sll	a4,s5,s0
    5848:	00492c03          	lw	s8,4(s2)
    584c:	00f777b3          	and	a5,a4,a5
    5850:	02079263          	bnez	a5,5874 <__call_exitprocs+0xf0>
    5854:	000680e7          	jalr	a3 # 80000000 <RAM_SIZE+0x7fff0000>
    5858:	00492703          	lw	a4,4(s2)
    585c:	148a2783          	lw	a5,328(s4)
    5860:	01871463          	bne	a4,s8,5868 <__call_exitprocs+0xe4>
    5864:	f92784e3          	beq	a5,s2,57ec <__call_exitprocs+0x68>
    5868:	f80788e3          	beqz	a5,57f8 <__call_exitprocs+0x74>
    586c:	00078913          	mv	s2,a5
    5870:	f5dff06f          	j	57cc <__call_exitprocs+0x48>
    5874:	18c92783          	lw	a5,396(s2)
    5878:	0844a583          	lw	a1,132(s1)
    587c:	00f77733          	and	a4,a4,a5
    5880:	00071c63          	bnez	a4,5898 <__call_exitprocs+0x114>
    5884:	000b0513          	mv	a0,s6
    5888:	000680e7          	jalr	a3
    588c:	fcdff06f          	j	5858 <__call_exitprocs+0xd4>
    5890:	00892223          	sw	s0,4(s2)
    5894:	fa9ff06f          	j	583c <__call_exitprocs+0xb8>
    5898:	00058513          	mv	a0,a1
    589c:	000680e7          	jalr	a3
    58a0:	fb9ff06f          	j	5858 <__call_exitprocs+0xd4>

000058a4 <register_fini>:
    58a4:	00000793          	li	a5,0
    58a8:	00078863          	beqz	a5,58b8 <register_fini+0x14>
    58ac:	00000517          	auipc	a0,0x0
    58b0:	02450513          	addi	a0,a0,36 # 58d0 <__libc_fini_array>
    58b4:	0080006f          	j	58bc <atexit>
    58b8:	00008067          	ret

000058bc <atexit>:
    58bc:	00050593          	mv	a1,a0
    58c0:	00000693          	li	a3,0
    58c4:	00000613          	li	a2,0
    58c8:	00000513          	li	a0,0
    58cc:	0d40006f          	j	59a0 <__register_exitproc>

000058d0 <__libc_fini_array>:
    58d0:	ff010113          	addi	sp,sp,-16
    58d4:	00812423          	sw	s0,8(sp)
    58d8:	00001797          	auipc	a5,0x1
    58dc:	2b478793          	addi	a5,a5,692 # 6b8c <__fini_array_end>
    58e0:	00001417          	auipc	s0,0x1
    58e4:	2a840413          	addi	s0,s0,680 # 6b88 <__do_global_dtors_aux_fini_array_entry>
    58e8:	408787b3          	sub	a5,a5,s0
    58ec:	00912223          	sw	s1,4(sp)
    58f0:	00112623          	sw	ra,12(sp)
    58f4:	4027d493          	srai	s1,a5,0x2
    58f8:	02048063          	beqz	s1,5918 <__libc_fini_array+0x48>
    58fc:	ffc78793          	addi	a5,a5,-4
    5900:	00878433          	add	s0,a5,s0
    5904:	00042783          	lw	a5,0(s0)
    5908:	fff48493          	addi	s1,s1,-1
    590c:	ffc40413          	addi	s0,s0,-4
    5910:	000780e7          	jalr	a5
    5914:	fe0498e3          	bnez	s1,5904 <__libc_fini_array+0x34>
    5918:	00c12083          	lw	ra,12(sp)
    591c:	00812403          	lw	s0,8(sp)
    5920:	00412483          	lw	s1,4(sp)
    5924:	01010113          	addi	sp,sp,16
    5928:	00008067          	ret

0000592c <__fpclassifyd>:
    592c:	00b56733          	or	a4,a0,a1
    5930:	00050793          	mv	a5,a0
    5934:	04070e63          	beqz	a4,5990 <__fpclassifyd+0x64>
    5938:	80000737          	lui	a4,0x80000
    593c:	04e58463          	beq	a1,a4,5984 <__fpclassifyd+0x58>
    5940:	fff00737          	lui	a4,0xfff00
    5944:	00b70733          	add	a4,a4,a1
    5948:	7fe006b7          	lui	a3,0x7fe00
    594c:	00400513          	li	a0,4
    5950:	02d76863          	bltu	a4,a3,5980 <__fpclassifyd+0x54>
    5954:	7ff00737          	lui	a4,0x7ff00
    5958:	00b70733          	add	a4,a4,a1
    595c:	02d76263          	bltu	a4,a3,5980 <__fpclassifyd+0x54>
    5960:	7ff00737          	lui	a4,0x7ff00
    5964:	00b776b3          	and	a3,a4,a1
    5968:	00300513          	li	a0,3
    596c:	00068a63          	beqz	a3,5980 <__fpclassifyd+0x54>
    5970:	00159593          	slli	a1,a1,0x1
    5974:	0015d593          	srli	a1,a1,0x1
    5978:	00000513          	li	a0,0
    597c:	00e58e63          	beq	a1,a4,5998 <__fpclassifyd+0x6c>
    5980:	00008067          	ret
    5984:	00200513          	li	a0,2
    5988:	fc079ce3          	bnez	a5,5960 <__fpclassifyd+0x34>
    598c:	00008067          	ret
    5990:	00200513          	li	a0,2
    5994:	00008067          	ret
    5998:	0017b513          	seqz	a0,a5
    599c:	00008067          	ret

000059a0 <__register_exitproc>:
    59a0:	8181a703          	lw	a4,-2024(gp) # 6ba8 <_global_impure_ptr>
    59a4:	14872783          	lw	a5,328(a4) # 7ff00148 <RAM_SIZE+0x7fef0148>
    59a8:	04078c63          	beqz	a5,5a00 <__register_exitproc+0x60>
    59ac:	0047a703          	lw	a4,4(a5)
    59b0:	01f00813          	li	a6,31
    59b4:	06e84e63          	blt	a6,a4,5a30 <__register_exitproc+0x90>
    59b8:	00271813          	slli	a6,a4,0x2
    59bc:	02050663          	beqz	a0,59e8 <__register_exitproc+0x48>
    59c0:	01078333          	add	t1,a5,a6
    59c4:	08c32423          	sw	a2,136(t1)
    59c8:	1887a883          	lw	a7,392(a5)
    59cc:	00100613          	li	a2,1
    59d0:	00e61633          	sll	a2,a2,a4
    59d4:	00c8e8b3          	or	a7,a7,a2
    59d8:	1917a423          	sw	a7,392(a5)
    59dc:	10d32423          	sw	a3,264(t1)
    59e0:	00200693          	li	a3,2
    59e4:	02d50463          	beq	a0,a3,5a0c <__register_exitproc+0x6c>
    59e8:	00170713          	addi	a4,a4,1
    59ec:	00e7a223          	sw	a4,4(a5)
    59f0:	010787b3          	add	a5,a5,a6
    59f4:	00b7a423          	sw	a1,8(a5)
    59f8:	00000513          	li	a0,0
    59fc:	00008067          	ret
    5a00:	14c70793          	addi	a5,a4,332
    5a04:	14f72423          	sw	a5,328(a4)
    5a08:	fa5ff06f          	j	59ac <__register_exitproc+0xc>
    5a0c:	18c7a683          	lw	a3,396(a5)
    5a10:	00170713          	addi	a4,a4,1
    5a14:	00e7a223          	sw	a4,4(a5)
    5a18:	00c6e633          	or	a2,a3,a2
    5a1c:	18c7a623          	sw	a2,396(a5)
    5a20:	010787b3          	add	a5,a5,a6
    5a24:	00b7a423          	sw	a1,8(a5)
    5a28:	00000513          	li	a0,0
    5a2c:	00008067          	ret
    5a30:	fff00513          	li	a0,-1
    5a34:	00008067          	ret

00005a38 <_exit>:
    5a38:	05d00893          	li	a7,93
    5a3c:	00000073          	ecall
    5a40:	00054463          	bltz	a0,5a48 <_exit+0x10>
    5a44:	0000006f          	j	5a44 <_exit+0xc>
    5a48:	ff010113          	addi	sp,sp,-16
    5a4c:	00812423          	sw	s0,8(sp)
    5a50:	00050413          	mv	s0,a0
    5a54:	00112623          	sw	ra,12(sp)
    5a58:	40800433          	neg	s0,s0
    5a5c:	00c000ef          	jal	ra,5a68 <__errno>
    5a60:	00852023          	sw	s0,0(a0)
    5a64:	0000006f          	j	5a64 <_exit+0x2c>

00005a68 <__errno>:
    5a68:	8281a503          	lw	a0,-2008(gp) # 6bb8 <_impure_ptr>
    5a6c:	00008067          	ret

00005a70 <__subdf3>:
    5a70:	00100837          	lui	a6,0x100
    5a74:	fff80813          	addi	a6,a6,-1 # fffff <RAM_SIZE+0xeffff>
    5a78:	fe010113          	addi	sp,sp,-32
    5a7c:	00b877b3          	and	a5,a6,a1
    5a80:	0145d713          	srli	a4,a1,0x14
    5a84:	00d87833          	and	a6,a6,a3
    5a88:	0146d313          	srli	t1,a3,0x14
    5a8c:	00812c23          	sw	s0,24(sp)
    5a90:	00379793          	slli	a5,a5,0x3
    5a94:	7ff77413          	andi	s0,a4,2047
    5a98:	01d55713          	srli	a4,a0,0x1d
    5a9c:	00912a23          	sw	s1,20(sp)
    5aa0:	00f767b3          	or	a5,a4,a5
    5aa4:	01f5d493          	srli	s1,a1,0x1f
    5aa8:	01d65713          	srli	a4,a2,0x1d
    5aac:	00351593          	slli	a1,a0,0x3
    5ab0:	00381813          	slli	a6,a6,0x3
    5ab4:	00112e23          	sw	ra,28(sp)
    5ab8:	01212823          	sw	s2,16(sp)
    5abc:	01312623          	sw	s3,12(sp)
    5ac0:	7ff37313          	andi	t1,t1,2047
    5ac4:	7ff00513          	li	a0,2047
    5ac8:	01f6d693          	srli	a3,a3,0x1f
    5acc:	01076733          	or	a4,a4,a6
    5ad0:	00361613          	slli	a2,a2,0x3
    5ad4:	00a31663          	bne	t1,a0,5ae0 <__subdf3+0x70>
    5ad8:	00c76533          	or	a0,a4,a2
    5adc:	00051463          	bnez	a0,5ae4 <__subdf3+0x74>
    5ae0:	0016c693          	xori	a3,a3,1
    5ae4:	40640833          	sub	a6,s0,t1
    5ae8:	2c969863          	bne	a3,s1,5db8 <__subdf3+0x348>
    5aec:	13005063          	blez	a6,5c0c <__subdf3+0x19c>
    5af0:	04031063          	bnez	t1,5b30 <__subdf3+0xc0>
    5af4:	00c766b3          	or	a3,a4,a2
    5af8:	70068c63          	beqz	a3,6210 <__subdf3+0x7a0>
    5afc:	fff80513          	addi	a0,a6,-1
    5b00:	02051063          	bnez	a0,5b20 <__subdf3+0xb0>
    5b04:	00c58633          	add	a2,a1,a2
    5b08:	00b63533          	sltu	a0,a2,a1
    5b0c:	00e787b3          	add	a5,a5,a4
    5b10:	00a787b3          	add	a5,a5,a0
    5b14:	00060593          	mv	a1,a2
    5b18:	00100413          	li	s0,1
    5b1c:	0700006f          	j	5b8c <__subdf3+0x11c>
    5b20:	7ff00693          	li	a3,2047
    5b24:	02d81063          	bne	a6,a3,5b44 <__subdf3+0xd4>
    5b28:	7ff00413          	li	s0,2047
    5b2c:	2140006f          	j	5d40 <__subdf3+0x2d0>
    5b30:	7ff00693          	li	a3,2047
    5b34:	20d40663          	beq	s0,a3,5d40 <__subdf3+0x2d0>
    5b38:	008006b7          	lui	a3,0x800
    5b3c:	00d76733          	or	a4,a4,a3
    5b40:	00080513          	mv	a0,a6
    5b44:	03800693          	li	a3,56
    5b48:	0aa6cc63          	blt	a3,a0,5c00 <__subdf3+0x190>
    5b4c:	01f00693          	li	a3,31
    5b50:	06a6ce63          	blt	a3,a0,5bcc <__subdf3+0x15c>
    5b54:	02000813          	li	a6,32
    5b58:	40a80833          	sub	a6,a6,a0
    5b5c:	010716b3          	sll	a3,a4,a6
    5b60:	00a658b3          	srl	a7,a2,a0
    5b64:	01061633          	sll	a2,a2,a6
    5b68:	0116e6b3          	or	a3,a3,a7
    5b6c:	00c03633          	snez	a2,a2
    5b70:	00c6e633          	or	a2,a3,a2
    5b74:	00a75733          	srl	a4,a4,a0
    5b78:	00b60633          	add	a2,a2,a1
    5b7c:	00b63533          	sltu	a0,a2,a1
    5b80:	00f70733          	add	a4,a4,a5
    5b84:	00a707b3          	add	a5,a4,a0
    5b88:	00060593          	mv	a1,a2
    5b8c:	00800737          	lui	a4,0x800
    5b90:	00e7f733          	and	a4,a5,a4
    5b94:	1a070663          	beqz	a4,5d40 <__subdf3+0x2d0>
    5b98:	00140413          	addi	s0,s0,1
    5b9c:	7ff00713          	li	a4,2047
    5ba0:	5ce40a63          	beq	s0,a4,6174 <__subdf3+0x704>
    5ba4:	ff800737          	lui	a4,0xff800
    5ba8:	fff70713          	addi	a4,a4,-1 # ff7fffff <RAM_SIZE+0xff7effff>
    5bac:	00e7f7b3          	and	a5,a5,a4
    5bb0:	0015f513          	andi	a0,a1,1
    5bb4:	0015d713          	srli	a4,a1,0x1
    5bb8:	00a76533          	or	a0,a4,a0
    5bbc:	01f79593          	slli	a1,a5,0x1f
    5bc0:	00a5e5b3          	or	a1,a1,a0
    5bc4:	0017d793          	srli	a5,a5,0x1
    5bc8:	1780006f          	j	5d40 <__subdf3+0x2d0>
    5bcc:	fe050693          	addi	a3,a0,-32
    5bd0:	02000893          	li	a7,32
    5bd4:	00d756b3          	srl	a3,a4,a3
    5bd8:	00000813          	li	a6,0
    5bdc:	01150863          	beq	a0,a7,5bec <__subdf3+0x17c>
    5be0:	04000813          	li	a6,64
    5be4:	40a80533          	sub	a0,a6,a0
    5be8:	00a71833          	sll	a6,a4,a0
    5bec:	00c86633          	or	a2,a6,a2
    5bf0:	00c03633          	snez	a2,a2
    5bf4:	00c6e633          	or	a2,a3,a2
    5bf8:	00000713          	li	a4,0
    5bfc:	f7dff06f          	j	5b78 <__subdf3+0x108>
    5c00:	00c76633          	or	a2,a4,a2
    5c04:	00c03633          	snez	a2,a2
    5c08:	ff1ff06f          	j	5bf8 <__subdf3+0x188>
    5c0c:	0e080263          	beqz	a6,5cf0 <__subdf3+0x280>
    5c10:	40830533          	sub	a0,t1,s0
    5c14:	02041e63          	bnez	s0,5c50 <__subdf3+0x1e0>
    5c18:	00b7e6b3          	or	a3,a5,a1
    5c1c:	52068c63          	beqz	a3,6154 <__subdf3+0x6e4>
    5c20:	fff50693          	addi	a3,a0,-1
    5c24:	00069c63          	bnez	a3,5c3c <__subdf3+0x1cc>
    5c28:	00c585b3          	add	a1,a1,a2
    5c2c:	00e787b3          	add	a5,a5,a4
    5c30:	00c5b633          	sltu	a2,a1,a2
    5c34:	00c787b3          	add	a5,a5,a2
    5c38:	ee1ff06f          	j	5b18 <__subdf3+0xa8>
    5c3c:	7ff00813          	li	a6,2047
    5c40:	03051263          	bne	a0,a6,5c64 <__subdf3+0x1f4>
    5c44:	00070793          	mv	a5,a4
    5c48:	00060593          	mv	a1,a2
    5c4c:	eddff06f          	j	5b28 <__subdf3+0xb8>
    5c50:	7ff00693          	li	a3,2047
    5c54:	fed308e3          	beq	t1,a3,5c44 <__subdf3+0x1d4>
    5c58:	008006b7          	lui	a3,0x800
    5c5c:	00d7e7b3          	or	a5,a5,a3
    5c60:	00050693          	mv	a3,a0
    5c64:	03800513          	li	a0,56
    5c68:	06d54e63          	blt	a0,a3,5ce4 <__subdf3+0x274>
    5c6c:	01f00513          	li	a0,31
    5c70:	04d54063          	blt	a0,a3,5cb0 <__subdf3+0x240>
    5c74:	02000813          	li	a6,32
    5c78:	40d80833          	sub	a6,a6,a3
    5c7c:	01079533          	sll	a0,a5,a6
    5c80:	00d5d8b3          	srl	a7,a1,a3
    5c84:	010595b3          	sll	a1,a1,a6
    5c88:	01156533          	or	a0,a0,a7
    5c8c:	00b035b3          	snez	a1,a1
    5c90:	00b56533          	or	a0,a0,a1
    5c94:	00d7d7b3          	srl	a5,a5,a3
    5c98:	00c505b3          	add	a1,a0,a2
    5c9c:	00e787b3          	add	a5,a5,a4
    5ca0:	00c5b633          	sltu	a2,a1,a2
    5ca4:	00c787b3          	add	a5,a5,a2
    5ca8:	00030413          	mv	s0,t1
    5cac:	ee1ff06f          	j	5b8c <__subdf3+0x11c>
    5cb0:	fe068513          	addi	a0,a3,-32 # 7fffe0 <RAM_SIZE+0x7effe0>
    5cb4:	02000893          	li	a7,32
    5cb8:	00a7d833          	srl	a6,a5,a0
    5cbc:	00000513          	li	a0,0
    5cc0:	01168863          	beq	a3,a7,5cd0 <__subdf3+0x260>
    5cc4:	04000513          	li	a0,64
    5cc8:	40d50533          	sub	a0,a0,a3
    5ccc:	00a79533          	sll	a0,a5,a0
    5cd0:	00b56533          	or	a0,a0,a1
    5cd4:	00a03533          	snez	a0,a0
    5cd8:	00a86533          	or	a0,a6,a0
    5cdc:	00000793          	li	a5,0
    5ce0:	fb9ff06f          	j	5c98 <__subdf3+0x228>
    5ce4:	00b7e533          	or	a0,a5,a1
    5ce8:	00a03533          	snez	a0,a0
    5cec:	ff1ff06f          	j	5cdc <__subdf3+0x26c>
    5cf0:	00140693          	addi	a3,s0,1
    5cf4:	7fe6f513          	andi	a0,a3,2046
    5cf8:	08051863          	bnez	a0,5d88 <__subdf3+0x318>
    5cfc:	00b7e6b3          	or	a3,a5,a1
    5d00:	06041463          	bnez	s0,5d68 <__subdf3+0x2f8>
    5d04:	46068063          	beqz	a3,6164 <__subdf3+0x6f4>
    5d08:	00c766b3          	or	a3,a4,a2
    5d0c:	02068a63          	beqz	a3,5d40 <__subdf3+0x2d0>
    5d10:	00c58633          	add	a2,a1,a2
    5d14:	00e787b3          	add	a5,a5,a4
    5d18:	00b63533          	sltu	a0,a2,a1
    5d1c:	00a787b3          	add	a5,a5,a0
    5d20:	00800737          	lui	a4,0x800
    5d24:	00e7f733          	and	a4,a5,a4
    5d28:	00060593          	mv	a1,a2
    5d2c:	00070a63          	beqz	a4,5d40 <__subdf3+0x2d0>
    5d30:	ff800737          	lui	a4,0xff800
    5d34:	fff70713          	addi	a4,a4,-1 # ff7fffff <RAM_SIZE+0xff7effff>
    5d38:	00e7f7b3          	and	a5,a5,a4
    5d3c:	00100413          	li	s0,1
    5d40:	0075f713          	andi	a4,a1,7
    5d44:	42070c63          	beqz	a4,617c <__subdf3+0x70c>
    5d48:	00f5f713          	andi	a4,a1,15
    5d4c:	00400693          	li	a3,4
    5d50:	42d70663          	beq	a4,a3,617c <__subdf3+0x70c>
    5d54:	00458713          	addi	a4,a1,4 # 80000004 <RAM_SIZE+0x7fff0004>
    5d58:	00b73533          	sltu	a0,a4,a1
    5d5c:	00a787b3          	add	a5,a5,a0
    5d60:	00070593          	mv	a1,a4
    5d64:	4180006f          	j	617c <__subdf3+0x70c>
    5d68:	ec068ee3          	beqz	a3,5c44 <__subdf3+0x1d4>
    5d6c:	00c76633          	or	a2,a4,a2
    5d70:	da060ce3          	beqz	a2,5b28 <__subdf3+0xb8>
    5d74:	00000493          	li	s1,0
    5d78:	004007b7          	lui	a5,0x400
    5d7c:	00000593          	li	a1,0
    5d80:	7ff00413          	li	s0,2047
    5d84:	3f80006f          	j	617c <__subdf3+0x70c>
    5d88:	7ff00513          	li	a0,2047
    5d8c:	3ea68263          	beq	a3,a0,6170 <__subdf3+0x700>
    5d90:	00c58633          	add	a2,a1,a2
    5d94:	00b63533          	sltu	a0,a2,a1
    5d98:	00e787b3          	add	a5,a5,a4
    5d9c:	00a787b3          	add	a5,a5,a0
    5da0:	01f79513          	slli	a0,a5,0x1f
    5da4:	00165613          	srli	a2,a2,0x1
    5da8:	00c565b3          	or	a1,a0,a2
    5dac:	0017d793          	srli	a5,a5,0x1
    5db0:	00068413          	mv	s0,a3
    5db4:	f8dff06f          	j	5d40 <__subdf3+0x2d0>
    5db8:	0f005c63          	blez	a6,5eb0 <__subdf3+0x440>
    5dbc:	08031e63          	bnez	t1,5e58 <__subdf3+0x3e8>
    5dc0:	00c766b3          	or	a3,a4,a2
    5dc4:	44068663          	beqz	a3,6210 <__subdf3+0x7a0>
    5dc8:	fff80513          	addi	a0,a6,-1
    5dcc:	02051063          	bnez	a0,5dec <__subdf3+0x37c>
    5dd0:	40c58633          	sub	a2,a1,a2
    5dd4:	00c5b533          	sltu	a0,a1,a2
    5dd8:	40e787b3          	sub	a5,a5,a4
    5ddc:	40a787b3          	sub	a5,a5,a0
    5de0:	00060593          	mv	a1,a2
    5de4:	00100413          	li	s0,1
    5de8:	0540006f          	j	5e3c <__subdf3+0x3cc>
    5dec:	7ff00693          	li	a3,2047
    5df0:	d2d80ce3          	beq	a6,a3,5b28 <__subdf3+0xb8>
    5df4:	03800693          	li	a3,56
    5df8:	0aa6c663          	blt	a3,a0,5ea4 <__subdf3+0x434>
    5dfc:	01f00693          	li	a3,31
    5e00:	06a6c863          	blt	a3,a0,5e70 <__subdf3+0x400>
    5e04:	02000813          	li	a6,32
    5e08:	40a80833          	sub	a6,a6,a0
    5e0c:	010716b3          	sll	a3,a4,a6
    5e10:	00a658b3          	srl	a7,a2,a0
    5e14:	01061633          	sll	a2,a2,a6
    5e18:	0116e6b3          	or	a3,a3,a7
    5e1c:	00c03633          	snez	a2,a2
    5e20:	00c6e633          	or	a2,a3,a2
    5e24:	00a75733          	srl	a4,a4,a0
    5e28:	40c58633          	sub	a2,a1,a2
    5e2c:	00c5b533          	sltu	a0,a1,a2
    5e30:	40e78733          	sub	a4,a5,a4
    5e34:	40a707b3          	sub	a5,a4,a0
    5e38:	00060593          	mv	a1,a2
    5e3c:	00800937          	lui	s2,0x800
    5e40:	0127f733          	and	a4,a5,s2
    5e44:	ee070ee3          	beqz	a4,5d40 <__subdf3+0x2d0>
    5e48:	fff90913          	addi	s2,s2,-1 # 7fffff <RAM_SIZE+0x7effff>
    5e4c:	0127f933          	and	s2,a5,s2
    5e50:	00058993          	mv	s3,a1
    5e54:	2140006f          	j	6068 <__subdf3+0x5f8>
    5e58:	7ff00693          	li	a3,2047
    5e5c:	eed402e3          	beq	s0,a3,5d40 <__subdf3+0x2d0>
    5e60:	008006b7          	lui	a3,0x800
    5e64:	00d76733          	or	a4,a4,a3
    5e68:	00080513          	mv	a0,a6
    5e6c:	f89ff06f          	j	5df4 <__subdf3+0x384>
    5e70:	fe050693          	addi	a3,a0,-32
    5e74:	02000893          	li	a7,32
    5e78:	00d756b3          	srl	a3,a4,a3
    5e7c:	00000813          	li	a6,0
    5e80:	01150863          	beq	a0,a7,5e90 <__subdf3+0x420>
    5e84:	04000813          	li	a6,64
    5e88:	40a80533          	sub	a0,a6,a0
    5e8c:	00a71833          	sll	a6,a4,a0
    5e90:	00c86633          	or	a2,a6,a2
    5e94:	00c03633          	snez	a2,a2
    5e98:	00c6e633          	or	a2,a3,a2
    5e9c:	00000713          	li	a4,0
    5ea0:	f89ff06f          	j	5e28 <__subdf3+0x3b8>
    5ea4:	00c76633          	or	a2,a4,a2
    5ea8:	00c03633          	snez	a2,a2
    5eac:	ff1ff06f          	j	5e9c <__subdf3+0x42c>
    5eb0:	0e080863          	beqz	a6,5fa0 <__subdf3+0x530>
    5eb4:	40830533          	sub	a0,t1,s0
    5eb8:	04041263          	bnez	s0,5efc <__subdf3+0x48c>
    5ebc:	00b7e833          	or	a6,a5,a1
    5ec0:	34080c63          	beqz	a6,6218 <__subdf3+0x7a8>
    5ec4:	fff50813          	addi	a6,a0,-1
    5ec8:	00081e63          	bnez	a6,5ee4 <__subdf3+0x474>
    5ecc:	40b605b3          	sub	a1,a2,a1
    5ed0:	40f707b3          	sub	a5,a4,a5
    5ed4:	00b63633          	sltu	a2,a2,a1
    5ed8:	40c787b3          	sub	a5,a5,a2
    5edc:	00068493          	mv	s1,a3
    5ee0:	f05ff06f          	j	5de4 <__subdf3+0x374>
    5ee4:	7ff00893          	li	a7,2047
    5ee8:	03151463          	bne	a0,a7,5f10 <__subdf3+0x4a0>
    5eec:	00070793          	mv	a5,a4
    5ef0:	00060593          	mv	a1,a2
    5ef4:	7ff00413          	li	s0,2047
    5ef8:	0d00006f          	j	5fc8 <__subdf3+0x558>
    5efc:	7ff00813          	li	a6,2047
    5f00:	ff0306e3          	beq	t1,a6,5eec <__subdf3+0x47c>
    5f04:	00800837          	lui	a6,0x800
    5f08:	0107e7b3          	or	a5,a5,a6
    5f0c:	00050813          	mv	a6,a0
    5f10:	03800513          	li	a0,56
    5f14:	09054063          	blt	a0,a6,5f94 <__subdf3+0x524>
    5f18:	01f00513          	li	a0,31
    5f1c:	05054263          	blt	a0,a6,5f60 <__subdf3+0x4f0>
    5f20:	02000893          	li	a7,32
    5f24:	410888b3          	sub	a7,a7,a6
    5f28:	01179533          	sll	a0,a5,a7
    5f2c:	0105de33          	srl	t3,a1,a6
    5f30:	011595b3          	sll	a1,a1,a7
    5f34:	01c56533          	or	a0,a0,t3
    5f38:	00b035b3          	snez	a1,a1
    5f3c:	00b56533          	or	a0,a0,a1
    5f40:	0107d7b3          	srl	a5,a5,a6
    5f44:	40a605b3          	sub	a1,a2,a0
    5f48:	40f707b3          	sub	a5,a4,a5
    5f4c:	00b63633          	sltu	a2,a2,a1
    5f50:	40c787b3          	sub	a5,a5,a2
    5f54:	00030413          	mv	s0,t1
    5f58:	00068493          	mv	s1,a3
    5f5c:	ee1ff06f          	j	5e3c <__subdf3+0x3cc>
    5f60:	fe080513          	addi	a0,a6,-32 # 7fffe0 <RAM_SIZE+0x7effe0>
    5f64:	02000e13          	li	t3,32
    5f68:	00a7d8b3          	srl	a7,a5,a0
    5f6c:	00000513          	li	a0,0
    5f70:	01c80863          	beq	a6,t3,5f80 <__subdf3+0x510>
    5f74:	04000513          	li	a0,64
    5f78:	41050533          	sub	a0,a0,a6
    5f7c:	00a79533          	sll	a0,a5,a0
    5f80:	00b56533          	or	a0,a0,a1
    5f84:	00a03533          	snez	a0,a0
    5f88:	00a8e533          	or	a0,a7,a0
    5f8c:	00000793          	li	a5,0
    5f90:	fb5ff06f          	j	5f44 <__subdf3+0x4d4>
    5f94:	00b7e533          	or	a0,a5,a1
    5f98:	00a03533          	snez	a0,a0
    5f9c:	ff1ff06f          	j	5f8c <__subdf3+0x51c>
    5fa0:	00140513          	addi	a0,s0,1
    5fa4:	7fe57513          	andi	a0,a0,2046
    5fa8:	08051863          	bnez	a0,6038 <__subdf3+0x5c8>
    5fac:	00b7e833          	or	a6,a5,a1
    5fb0:	00c76533          	or	a0,a4,a2
    5fb4:	06041263          	bnez	s0,6018 <__subdf3+0x5a8>
    5fb8:	00081c63          	bnez	a6,5fd0 <__subdf3+0x560>
    5fbc:	26050663          	beqz	a0,6228 <__subdf3+0x7b8>
    5fc0:	00070793          	mv	a5,a4
    5fc4:	00060593          	mv	a1,a2
    5fc8:	00068493          	mv	s1,a3
    5fcc:	d75ff06f          	j	5d40 <__subdf3+0x2d0>
    5fd0:	d60508e3          	beqz	a0,5d40 <__subdf3+0x2d0>
    5fd4:	40c58833          	sub	a6,a1,a2
    5fd8:	0105b8b3          	sltu	a7,a1,a6
    5fdc:	40e78533          	sub	a0,a5,a4
    5fe0:	41150533          	sub	a0,a0,a7
    5fe4:	008008b7          	lui	a7,0x800
    5fe8:	011578b3          	and	a7,a0,a7
    5fec:	00088c63          	beqz	a7,6004 <__subdf3+0x594>
    5ff0:	40b605b3          	sub	a1,a2,a1
    5ff4:	40f707b3          	sub	a5,a4,a5
    5ff8:	00b63633          	sltu	a2,a2,a1
    5ffc:	40c787b3          	sub	a5,a5,a2
    6000:	fc9ff06f          	j	5fc8 <__subdf3+0x558>
    6004:	00a865b3          	or	a1,a6,a0
    6008:	22058863          	beqz	a1,6238 <__subdf3+0x7c8>
    600c:	00050793          	mv	a5,a0
    6010:	00080593          	mv	a1,a6
    6014:	d2dff06f          	j	5d40 <__subdf3+0x2d0>
    6018:	00081c63          	bnez	a6,6030 <__subdf3+0x5c0>
    601c:	22050263          	beqz	a0,6240 <__subdf3+0x7d0>
    6020:	00070793          	mv	a5,a4
    6024:	00060593          	mv	a1,a2
    6028:	00068493          	mv	s1,a3
    602c:	afdff06f          	j	5b28 <__subdf3+0xb8>
    6030:	ae050ce3          	beqz	a0,5b28 <__subdf3+0xb8>
    6034:	d41ff06f          	j	5d74 <__subdf3+0x304>
    6038:	40c589b3          	sub	s3,a1,a2
    603c:	0135b533          	sltu	a0,a1,s3
    6040:	40e78933          	sub	s2,a5,a4
    6044:	40a90933          	sub	s2,s2,a0
    6048:	00800537          	lui	a0,0x800
    604c:	00a97533          	and	a0,s2,a0
    6050:	08050463          	beqz	a0,60d8 <__subdf3+0x668>
    6054:	40b609b3          	sub	s3,a2,a1
    6058:	40f707b3          	sub	a5,a4,a5
    605c:	01363633          	sltu	a2,a2,s3
    6060:	40c78933          	sub	s2,a5,a2
    6064:	00068493          	mv	s1,a3
    6068:	08090263          	beqz	s2,60ec <__subdf3+0x67c>
    606c:	00090513          	mv	a0,s2
    6070:	a98ff0ef          	jal	ra,5308 <__clzsi2>
    6074:	ff850713          	addi	a4,a0,-8 # 7ffff8 <RAM_SIZE+0x7efff8>
    6078:	01f00793          	li	a5,31
    607c:	08e7c063          	blt	a5,a4,60fc <__subdf3+0x68c>
    6080:	02000793          	li	a5,32
    6084:	40e787b3          	sub	a5,a5,a4
    6088:	00e91933          	sll	s2,s2,a4
    608c:	00f9d7b3          	srl	a5,s3,a5
    6090:	0127e7b3          	or	a5,a5,s2
    6094:	00e995b3          	sll	a1,s3,a4
    6098:	0a874463          	blt	a4,s0,6140 <__subdf3+0x6d0>
    609c:	40870733          	sub	a4,a4,s0
    60a0:	00170693          	addi	a3,a4,1
    60a4:	01f00613          	li	a2,31
    60a8:	06d64263          	blt	a2,a3,610c <__subdf3+0x69c>
    60ac:	02000713          	li	a4,32
    60b0:	40d70733          	sub	a4,a4,a3
    60b4:	00e79633          	sll	a2,a5,a4
    60b8:	00d5d533          	srl	a0,a1,a3
    60bc:	00e595b3          	sll	a1,a1,a4
    60c0:	00a66633          	or	a2,a2,a0
    60c4:	00b035b3          	snez	a1,a1
    60c8:	00b665b3          	or	a1,a2,a1
    60cc:	00d7d7b3          	srl	a5,a5,a3
    60d0:	00000413          	li	s0,0
    60d4:	c6dff06f          	j	5d40 <__subdf3+0x2d0>
    60d8:	0129e5b3          	or	a1,s3,s2
    60dc:	f80596e3          	bnez	a1,6068 <__subdf3+0x5f8>
    60e0:	00000793          	li	a5,0
    60e4:	00000413          	li	s0,0
    60e8:	1480006f          	j	6230 <__subdf3+0x7c0>
    60ec:	00098513          	mv	a0,s3
    60f0:	a18ff0ef          	jal	ra,5308 <__clzsi2>
    60f4:	02050513          	addi	a0,a0,32
    60f8:	f7dff06f          	j	6074 <__subdf3+0x604>
    60fc:	fd850793          	addi	a5,a0,-40
    6100:	00f997b3          	sll	a5,s3,a5
    6104:	00000593          	li	a1,0
    6108:	f91ff06f          	j	6098 <__subdf3+0x628>
    610c:	fe170713          	addi	a4,a4,-31
    6110:	02000613          	li	a2,32
    6114:	00e7d733          	srl	a4,a5,a4
    6118:	00000513          	li	a0,0
    611c:	00c68863          	beq	a3,a2,612c <__subdf3+0x6bc>
    6120:	04000513          	li	a0,64
    6124:	40d50533          	sub	a0,a0,a3
    6128:	00a79533          	sll	a0,a5,a0
    612c:	00a5e533          	or	a0,a1,a0
    6130:	00a03533          	snez	a0,a0
    6134:	00a765b3          	or	a1,a4,a0
    6138:	00000793          	li	a5,0
    613c:	f95ff06f          	j	60d0 <__subdf3+0x660>
    6140:	40e40433          	sub	s0,s0,a4
    6144:	ff800737          	lui	a4,0xff800
    6148:	fff70713          	addi	a4,a4,-1 # ff7fffff <RAM_SIZE+0xff7effff>
    614c:	00e7f7b3          	and	a5,a5,a4
    6150:	bf1ff06f          	j	5d40 <__subdf3+0x2d0>
    6154:	00070793          	mv	a5,a4
    6158:	00060593          	mv	a1,a2
    615c:	00050413          	mv	s0,a0
    6160:	be1ff06f          	j	5d40 <__subdf3+0x2d0>
    6164:	00070793          	mv	a5,a4
    6168:	00060593          	mv	a1,a2
    616c:	bd5ff06f          	j	5d40 <__subdf3+0x2d0>
    6170:	7ff00413          	li	s0,2047
    6174:	00000793          	li	a5,0
    6178:	00000593          	li	a1,0
    617c:	00800737          	lui	a4,0x800
    6180:	00e7f733          	and	a4,a5,a4
    6184:	00070e63          	beqz	a4,61a0 <__subdf3+0x730>
    6188:	00140413          	addi	s0,s0,1
    618c:	7ff00713          	li	a4,2047
    6190:	0ce40063          	beq	s0,a4,6250 <__subdf3+0x7e0>
    6194:	ff800737          	lui	a4,0xff800
    6198:	fff70713          	addi	a4,a4,-1 # ff7fffff <RAM_SIZE+0xff7effff>
    619c:	00e7f7b3          	and	a5,a5,a4
    61a0:	01d79713          	slli	a4,a5,0x1d
    61a4:	0035d513          	srli	a0,a1,0x3
    61a8:	00a76533          	or	a0,a4,a0
    61ac:	7ff00713          	li	a4,2047
    61b0:	0037d793          	srli	a5,a5,0x3
    61b4:	00e41e63          	bne	s0,a4,61d0 <__subdf3+0x760>
    61b8:	00f56533          	or	a0,a0,a5
    61bc:	00000793          	li	a5,0
    61c0:	00050863          	beqz	a0,61d0 <__subdf3+0x760>
    61c4:	000807b7          	lui	a5,0x80
    61c8:	00000513          	li	a0,0
    61cc:	00000493          	li	s1,0
    61d0:	01441713          	slli	a4,s0,0x14
    61d4:	7ff006b7          	lui	a3,0x7ff00
    61d8:	00c79793          	slli	a5,a5,0xc
    61dc:	01c12083          	lw	ra,28(sp)
    61e0:	01812403          	lw	s0,24(sp)
    61e4:	00d77733          	and	a4,a4,a3
    61e8:	00c7d793          	srli	a5,a5,0xc
    61ec:	01f49493          	slli	s1,s1,0x1f
    61f0:	00f767b3          	or	a5,a4,a5
    61f4:	0097e733          	or	a4,a5,s1
    61f8:	01012903          	lw	s2,16(sp)
    61fc:	01412483          	lw	s1,20(sp)
    6200:	00c12983          	lw	s3,12(sp)
    6204:	00070593          	mv	a1,a4
    6208:	02010113          	addi	sp,sp,32
    620c:	00008067          	ret
    6210:	00080413          	mv	s0,a6
    6214:	b2dff06f          	j	5d40 <__subdf3+0x2d0>
    6218:	00070793          	mv	a5,a4
    621c:	00060593          	mv	a1,a2
    6220:	00050413          	mv	s0,a0
    6224:	da5ff06f          	j	5fc8 <__subdf3+0x558>
    6228:	00000793          	li	a5,0
    622c:	00000593          	li	a1,0
    6230:	00000493          	li	s1,0
    6234:	f49ff06f          	j	617c <__subdf3+0x70c>
    6238:	00000793          	li	a5,0
    623c:	ff5ff06f          	j	6230 <__subdf3+0x7c0>
    6240:	00000593          	li	a1,0
    6244:	00000493          	li	s1,0
    6248:	004007b7          	lui	a5,0x400
    624c:	b35ff06f          	j	5d80 <__subdf3+0x310>
    6250:	00000793          	li	a5,0
    6254:	00000593          	li	a1,0
    6258:	f49ff06f          	j	61a0 <__subdf3+0x730>
    625c:	0000                	unimp
    625e:	0000                	unimp
    6260:	6548                	flw	fa0,12(a0)
    6262:	6c6c                	flw	fa1,92(s0)
    6264:	6f57206f          	j	79158 <RAM_SIZE+0x69158>
    6268:	6c72                	flw	fs8,28(sp)
    626a:	0a64                	addi	s1,sp,284
    626c:	0000                	unimp
    626e:	0000                	unimp
    6270:	6b36                	flw	fs6,76(sp)
    6272:	7020                	flw	fs0,96(s0)
    6274:	7265                	lui	tp,0xffff9
    6276:	6f66                	flw	ft10,88(sp)
    6278:	6d72                	flw	fs10,28(sp)
    627a:	6e61                	lui	t3,0x18
    627c:	72206563          	bltu	zero,sp,69a6 <errpat+0x226>
    6280:	6e75                	lui	t3,0x1d
    6282:	7020                	flw	fs0,96(s0)
    6284:	7261                	lui	tp,0xffff8
    6286:	6d61                	lui	s10,0x18
    6288:	7465                	lui	s0,0xffff9
    628a:	7265                	lui	tp,0xffff9
    628c:	6f662073          	csrs	0x6f6,a2
    6290:	2072                	fld	ft0,280(sp)
    6292:	65726f63          	bltu	tp,s7,68f0 <errpat+0x170>
    6296:	616d                	addi	sp,sp,240
    6298:	6b72                	flw	fs6,28(sp)
    629a:	0a2e                	slli	s4,s4,0xb
    629c:	0000                	unimp
    629e:	0000                	unimp
    62a0:	6b36                	flw	fs6,76(sp)
    62a2:	7620                	flw	fs0,104(a2)
    62a4:	6c61                	lui	s8,0x18
    62a6:	6469                	lui	s0,0x1a
    62a8:	7461                	lui	s0,0xffff8
    62aa:	6f69                	lui	t5,0x1a
    62ac:	206e                	fld	ft0,216(sp)
    62ae:	7572                	flw	fa0,60(sp)
    62b0:	206e                	fld	ft0,216(sp)
    62b2:	6170                	flw	fa2,68(a0)
    62b4:	6172                	flw	ft2,28(sp)
    62b6:	656d                	lui	a0,0x1b
    62b8:	6574                	flw	fa3,76(a0)
    62ba:	7372                	flw	ft6,60(sp)
    62bc:	6620                	flw	fs0,72(a2)
    62be:	6320726f          	jal	tp,d8f0 <__stack_top+0x3860>
    62c2:	6d65726f          	jal	tp,5d998 <RAM_SIZE+0x4d998>
    62c6:	7261                	lui	tp,0xffff8
    62c8:	000a2e6b          	0xa2e6b
    62cc:	7250                	flw	fa2,36(a2)
    62ce:	6c69666f          	jal	a2,9c994 <RAM_SIZE+0x8c994>
    62d2:	2065                	jal	637a <__subdf3+0x90a>
    62d4:	656e6567          	0x656e6567
    62d8:	6172                	flw	ft2,28(sp)
    62da:	6974                	flw	fa3,84(a0)
    62dc:	72206e6f          	jal	t3,c9fe <__stack_top+0x296e>
    62e0:	6e75                	lui	t3,0x1d
    62e2:	7020                	flw	fs0,96(s0)
    62e4:	7261                	lui	tp,0xffff8
    62e6:	6d61                	lui	s10,0x18
    62e8:	7465                	lui	s0,0xffff9
    62ea:	7265                	lui	tp,0xffff9
    62ec:	6f662073          	csrs	0x6f6,a2
    62f0:	2072                	fld	ft0,280(sp)
    62f2:	65726f63          	bltu	tp,s7,6950 <errpat+0x1d0>
    62f6:	616d                	addi	sp,sp,240
    62f8:	6b72                	flw	fs6,28(sp)
    62fa:	0a2e                	slli	s4,s4,0xb
    62fc:	0000                	unimp
    62fe:	0000                	unimp
    6300:	4b32                	lw	s6,12(sp)
    6302:	7020                	flw	fs0,96(s0)
    6304:	7265                	lui	tp,0xffff9
    6306:	6f66                	flw	ft10,88(sp)
    6308:	6d72                	flw	fs10,28(sp)
    630a:	6e61                	lui	t3,0x18
    630c:	72206563          	bltu	zero,sp,6a36 <errpat+0x2b6>
    6310:	6e75                	lui	t3,0x1d
    6312:	7020                	flw	fs0,96(s0)
    6314:	7261                	lui	tp,0xffff8
    6316:	6d61                	lui	s10,0x18
    6318:	7465                	lui	s0,0xffff9
    631a:	7265                	lui	tp,0xffff9
    631c:	6f662073          	csrs	0x6f6,a2
    6320:	2072                	fld	ft0,280(sp)
    6322:	65726f63          	bltu	tp,s7,6980 <errpat+0x200>
    6326:	616d                	addi	sp,sp,240
    6328:	6b72                	flw	fs6,28(sp)
    632a:	0a2e                	slli	s4,s4,0xb
    632c:	0000                	unimp
    632e:	0000                	unimp
    6330:	4b32                	lw	s6,12(sp)
    6332:	7620                	flw	fs0,104(a2)
    6334:	6c61                	lui	s8,0x18
    6336:	6469                	lui	s0,0x1a
    6338:	7461                	lui	s0,0xffff8
    633a:	6f69                	lui	t5,0x1a
    633c:	206e                	fld	ft0,216(sp)
    633e:	7572                	flw	fa0,60(sp)
    6340:	206e                	fld	ft0,216(sp)
    6342:	6170                	flw	fa2,68(a0)
    6344:	6172                	flw	ft2,28(sp)
    6346:	656d                	lui	a0,0x1b
    6348:	6574                	flw	fa3,76(a0)
    634a:	7372                	flw	ft6,60(sp)
    634c:	6620                	flw	fs0,72(a2)
    634e:	6320726f          	jal	tp,d980 <__stack_top+0x38f0>
    6352:	6d65726f          	jal	tp,5da28 <RAM_SIZE+0x4da28>
    6356:	7261                	lui	tp,0xffff8
    6358:	000a2e6b          	0xa2e6b
    635c:	5d75255b          	0x5d75255b
    6360:	5245                	li	tp,-15
    6362:	4f52                	lw	t5,20(sp)
    6364:	2152                	fld	ft2,272(sp)
    6366:	6c20                	flw	fs0,88(s0)
    6368:	7369                	lui	t1,0xffffa
    636a:	2074                	fld	fa3,192(s0)
    636c:	20637263          	bgeu	t1,t1,6570 <__subdf3+0xb00>
    6370:	7830                	flw	fa2,112(s0)
    6372:	3025                	jal	5b9a <__subdf3+0x12a>
    6374:	7834                	flw	fa3,112(s0)
    6376:	2d20                	fld	fs0,88(a0)
    6378:	7320                	flw	fs0,96(a4)
    637a:	6f68                	flw	fa0,92(a4)
    637c:	6c75                	lui	s8,0x1d
    637e:	2064                	fld	fs1,192(s0)
    6380:	6562                	flw	fa0,24(sp)
    6382:	3020                	fld	fs0,96(s0)
    6384:	2578                	fld	fa4,200(a0)
    6386:	3430                	fld	fa2,104(s0)
    6388:	0a78                	addi	a4,sp,284
    638a:	0000                	unimp
    638c:	5d75255b          	0x5d75255b
    6390:	5245                	li	tp,-15
    6392:	4f52                	lw	t5,20(sp)
    6394:	2152                	fld	ft2,272(sp)
    6396:	6d20                	flw	fs0,88(a0)
    6398:	7461                	lui	s0,0xffff8
    639a:	6972                	flw	fs2,28(sp)
    639c:	2078                	fld	fa4,192(s0)
    639e:	20637263          	bgeu	t1,t1,65a2 <__subdf3+0xb32>
    63a2:	7830                	flw	fa2,112(s0)
    63a4:	3025                	jal	5bcc <__subdf3+0x15c>
    63a6:	7834                	flw	fa3,112(s0)
    63a8:	2d20                	fld	fs0,88(a0)
    63aa:	7320                	flw	fs0,96(a4)
    63ac:	6f68                	flw	fa0,92(a4)
    63ae:	6c75                	lui	s8,0x1d
    63b0:	2064                	fld	fs1,192(s0)
    63b2:	6562                	flw	fa0,24(sp)
    63b4:	3020                	fld	fs0,96(s0)
    63b6:	2578                	fld	fa4,200(a0)
    63b8:	3430                	fld	fa2,104(s0)
    63ba:	0a78                	addi	a4,sp,284
    63bc:	0000                	unimp
    63be:	0000                	unimp
    63c0:	5d75255b          	0x5d75255b
    63c4:	5245                	li	tp,-15
    63c6:	4f52                	lw	t5,20(sp)
    63c8:	2152                	fld	ft2,272(sp)
    63ca:	7320                	flw	fs0,96(a4)
    63cc:	6174                	flw	fa3,68(a0)
    63ce:	6574                	flw	fa3,76(a0)
    63d0:	6320                	flw	fs0,64(a4)
    63d2:	6372                	flw	ft6,28(sp)
    63d4:	3020                	fld	fs0,96(s0)
    63d6:	2578                	fld	fa4,200(a0)
    63d8:	3430                	fld	fa2,104(s0)
    63da:	2078                	fld	fa4,192(s0)
    63dc:	202d                	jal	6406 <__subdf3+0x996>
    63de:	756f6873          	csrrsi	a6,0x756,30
    63e2:	646c                	flw	fa1,76(s0)
    63e4:	6220                	flw	fs0,64(a2)
    63e6:	2065                	jal	648e <__subdf3+0xa1e>
    63e8:	7830                	flw	fa2,112(s0)
    63ea:	3025                	jal	5c12 <__subdf3+0x1a2>
    63ec:	7834                	flw	fa3,112(s0)
    63ee:	000a                	c.slli	zero,0x2
    63f0:	65726f43          	fmadd.h	ft10,ft4,fs7,fa2,unknown
    63f4:	614d                	addi	sp,sp,176
    63f6:	6b72                	flw	fs6,28(sp)
    63f8:	5320                	lw	s0,96(a4)
    63fa:	7a69                	lui	s4,0xffffa
    63fc:	2065                	jal	64a4 <__subdf3+0xa34>
    63fe:	2020                	fld	fs0,64(s0)
    6400:	3a20                	fld	fs0,112(a2)
    6402:	2520                	fld	fs0,72(a0)
    6404:	756c                	flw	fa1,108(a0)
    6406:	000a                	c.slli	zero,0x2
    6408:	6f54                	flw	fa3,28(a4)
    640a:	6174                	flw	fa3,68(a0)
    640c:	206c                	fld	fa1,192(s0)
    640e:	6974                	flw	fa3,84(a0)
    6410:	20736b63          	bltu	t1,t2,6626 <__subdf3+0xbb6>
    6414:	2020                	fld	fs0,64(s0)
    6416:	2020                	fld	fs0,64(s0)
    6418:	3a20                	fld	fs0,112(a2)
    641a:	2520                	fld	fs0,72(a0)
    641c:	756c                	flw	fa1,108(a0)
    641e:	000a                	c.slli	zero,0x2
    6420:	6f54                	flw	fa3,28(a4)
    6422:	6174                	flw	fa3,68(a0)
    6424:	206c                	fld	fa1,192(s0)
    6426:	6974                	flw	fa3,84(a0)
    6428:	656d                	lui	a0,0x1b
    642a:	2820                	fld	fs0,80(s0)
    642c:	73636573          	csrrsi	a0,0x736,6
    6430:	3a29                	jal	5d4a <__subdf3+0x2da>
    6432:	2520                	fld	fs0,72(a0)
    6434:	0a64                	addi	s1,sp,284
    6436:	0000                	unimp
    6438:	7449                	lui	s0,0xffff2
    643a:	7265                	lui	tp,0xffff9
    643c:	7461                	lui	s0,0xffff8
    643e:	6f69                	lui	t5,0x1a
    6440:	736e                	flw	ft6,248(sp)
    6442:	6365532f          	vamoandei16.v	zero,(a0),v22,v6
    6446:	2020                	fld	fs0,64(s0)
    6448:	3a20                	fld	fs0,112(a2)
    644a:	2520                	fld	fs0,72(a0)
    644c:	0a64                	addi	s1,sp,284
    644e:	0000                	unimp
    6450:	5245                	li	tp,-15
    6452:	4f52                	lw	t5,20(sp)
    6454:	2152                	fld	ft2,272(sp)
    6456:	4d20                	lw	s0,88(a0)
    6458:	7375                	lui	t1,0xffffd
    645a:	2074                	fld	fa3,192(s0)
    645c:	7865                	lui	a6,0xffff9
    645e:	6365                	lui	t1,0x19
    6460:	7475                	lui	s0,0xffffd
    6462:	2065                	jal	650a <__subdf3+0xa9a>
    6464:	6f66                	flw	ft10,88(sp)
    6466:	2072                	fld	ft0,280(sp)
    6468:	7461                	lui	s0,0xffff8
    646a:	6c20                	flw	fs0,88(s0)
    646c:	6165                	addi	sp,sp,112
    646e:	31207473          	csrrci	s0,0x312,0
    6472:	2030                	fld	fa2,64(s0)
    6474:	73636573          	csrrsi	a0,0x736,6
    6478:	6620                	flw	fs0,72(a2)
    647a:	6120726f          	jal	tp,da8c <__stack_top+0x39fc>
    647e:	7620                	flw	fs0,104(a2)
    6480:	6c61                	lui	s8,0x18
    6482:	6469                	lui	s0,0x1a
    6484:	7220                	flw	fs0,96(a2)
    6486:	7365                	lui	t1,0xffff9
    6488:	6c75                	lui	s8,0x1d
    648a:	2174                	fld	fa3,192(a0)
    648c:	000a                	c.slli	zero,0x2
    648e:	0000                	unimp
    6490:	7449                	lui	s0,0xffff2
    6492:	7265                	lui	tp,0xffff9
    6494:	7461                	lui	s0,0xffff8
    6496:	6f69                	lui	t5,0x1a
    6498:	736e                	flw	ft6,248(sp)
    649a:	2020                	fld	fs0,64(s0)
    649c:	2020                	fld	fs0,64(s0)
    649e:	2020                	fld	fs0,64(s0)
    64a0:	3a20                	fld	fs0,112(a2)
    64a2:	2520                	fld	fs0,72(a0)
    64a4:	756c                	flw	fa1,108(a0)
    64a6:	000a                	c.slli	zero,0x2
    64a8:	31434347          	fmsub.s	ft6,ft6,fs4,ft6,rmm
    64ac:	2e30                	fld	fa2,88(a2)
    64ae:	2e32                	fld	ft8,264(sp)
    64b0:	0030                	addi	a2,sp,8
    64b2:	0000                	unimp
    64b4:	706d6f43          	fmadd.s	ft10,fs10,ft6,fa4,unknown
    64b8:	6c69                	lui	s8,0x1a
    64ba:	7265                	lui	tp,0xffff9
    64bc:	7620                	flw	fs0,104(a2)
    64be:	7265                	lui	tp,0xffff9
    64c0:	6e6f6973          	csrrsi	s2,0x6e6,30
    64c4:	3a20                	fld	fs0,112(a2)
    64c6:	2520                	fld	fs0,72(a0)
    64c8:	00000a73          	0xa73
    64cc:	6628                	flw	fa0,72(a2)
    64ce:	616c                	flw	fa1,68(a0)
    64d0:	75207367          	0x75207367
    64d4:	6b6e                	flw	fs6,216(sp)
    64d6:	6f6e                	flw	ft10,216(sp)
    64d8:	00296e77          	0x296e77
    64dc:	706d6f43          	fmadd.s	ft10,fs10,ft6,fa4,unknown
    64e0:	6c69                	lui	s8,0x1a
    64e2:	7265                	lui	tp,0xffff9
    64e4:	6620                	flw	fs0,72(a2)
    64e6:	616c                	flw	fa1,68(a0)
    64e8:	20207367          	0x20207367
    64ec:	3a20                	fld	fs0,112(a2)
    64ee:	2520                	fld	fs0,72(a0)
    64f0:	00000a73          	0xa73
    64f4:	43415453          	0x43415453
    64f8:	0000004b          	fnmsub.s	ft0,ft0,ft0,ft0,rne
    64fc:	654d                	lui	a0,0x13
    64fe:	6f6d                	lui	t5,0x1b
    6500:	7972                	flw	fs2,60(sp)
    6502:	6c20                	flw	fs0,88(s0)
    6504:	7461636f          	jal	t1,1cc4a <RAM_SIZE+0xcc4a>
    6508:	6f69                	lui	t5,0x1a
    650a:	206e                	fld	ft0,216(sp)
    650c:	3a20                	fld	fs0,112(a2)
    650e:	2520                	fld	fs0,72(a0)
    6510:	00000a73          	0xa73
    6514:	64656573          	csrrsi	a0,0x646,10
    6518:	20637263          	bgeu	t1,t1,671c <state_known_crc+0x88>
    651c:	2020                	fld	fs0,64(s0)
    651e:	2020                	fld	fs0,64(s0)
    6520:	2020                	fld	fs0,64(s0)
    6522:	2020                	fld	fs0,64(s0)
    6524:	3a20                	fld	fs0,112(a2)
    6526:	3020                	fld	fs0,96(s0)
    6528:	2578                	fld	fa4,200(a0)
    652a:	3430                	fld	fa2,104(s0)
    652c:	0a78                	addi	a4,sp,284
    652e:	0000                	unimp
    6530:	5d64255b          	0x5d64255b
    6534:	6c637263          	bgeu	t1,t1,6bf8 <impure_data+0x28>
    6538:	7369                	lui	t1,0xffffa
    653a:	2074                	fld	fa3,192(s0)
    653c:	2020                	fld	fs0,64(s0)
    653e:	2020                	fld	fs0,64(s0)
    6540:	2020                	fld	fs0,64(s0)
    6542:	203a                	fld	ft0,392(sp)
    6544:	7830                	flw	fa2,112(s0)
    6546:	3025                	jal	5d6e <__subdf3+0x2fe>
    6548:	7834                	flw	fa3,112(s0)
    654a:	000a                	c.slli	zero,0x2
    654c:	5d64255b          	0x5d64255b
    6550:	6d637263          	bgeu	t1,s6,6c14 <impure_data+0x44>
    6554:	7461                	lui	s0,0xffff8
    6556:	6972                	flw	fs2,28(sp)
    6558:	2078                	fld	fa4,192(s0)
    655a:	2020                	fld	fs0,64(s0)
    655c:	2020                	fld	fs0,64(s0)
    655e:	203a                	fld	ft0,392(sp)
    6560:	7830                	flw	fa2,112(s0)
    6562:	3025                	jal	5d8a <__subdf3+0x31a>
    6564:	7834                	flw	fa3,112(s0)
    6566:	000a                	c.slli	zero,0x2
    6568:	5d64255b          	0x5d64255b
    656c:	73637263          	bgeu	t1,s6,6c90 <impure_data+0xc0>
    6570:	6174                	flw	fa3,68(a0)
    6572:	6574                	flw	fa3,76(a0)
    6574:	2020                	fld	fs0,64(s0)
    6576:	2020                	fld	fs0,64(s0)
    6578:	2020                	fld	fs0,64(s0)
    657a:	203a                	fld	ft0,392(sp)
    657c:	7830                	flw	fa2,112(s0)
    657e:	3025                	jal	5da6 <__subdf3+0x336>
    6580:	7834                	flw	fa3,112(s0)
    6582:	000a                	c.slli	zero,0x2
    6584:	5d64255b          	0x5d64255b
    6588:	66637263          	bgeu	t1,t1,6bec <impure_data+0x1c>
    658c:	6e69                	lui	t3,0x1a
    658e:	6c61                	lui	s8,0x18
    6590:	2020                	fld	fs0,64(s0)
    6592:	2020                	fld	fs0,64(s0)
    6594:	2020                	fld	fs0,64(s0)
    6596:	203a                	fld	ft0,392(sp)
    6598:	7830                	flw	fa2,112(s0)
    659a:	3025                	jal	5dc2 <__subdf3+0x352>
    659c:	7834                	flw	fa3,112(s0)
    659e:	000a                	c.slli	zero,0x2
    65a0:	72726f43          	fmadd.d	ft10,ft4,ft7,fa4,unknown
    65a4:	6365                	lui	t1,0x19
    65a6:	2074                	fld	fa3,192(s0)
    65a8:	7265706f          	j	5dcce <RAM_SIZE+0x4dcce>
    65ac:	7461                	lui	s0,0xffff8
    65ae:	6f69                	lui	t5,0x1a
    65b0:	206e                	fld	ft0,216(sp)
    65b2:	6176                	flw	ft2,92(sp)
    65b4:	696c                	flw	fa1,84(a0)
    65b6:	6164                	flw	fs1,68(a0)
    65b8:	6574                	flw	fa3,76(a0)
    65ba:	2e64                	fld	fs1,216(a2)
    65bc:	5320                	lw	s0,96(a4)
    65be:	6565                	lui	a0,0x19
    65c0:	5220                	lw	s0,96(a2)
    65c2:	4145                	li	sp,17
    65c4:	4d44                	lw	s1,28(a0)
    65c6:	2e45                	jal	6976 <errpat+0x1f6>
    65c8:	646d                	lui	s0,0x1b
    65ca:	6620                	flw	fs0,72(a2)
    65cc:	7220726f          	jal	tp,dcee <__stack_top+0x3c5e>
    65d0:	6e75                	lui	t3,0x1d
    65d2:	6120                	flw	fs0,64(a0)
    65d4:	646e                	flw	fs0,216(sp)
    65d6:	7220                	flw	fs0,96(a2)
    65d8:	7065                	c.lui	zero,0xffff9
    65da:	6974726f          	jal	tp,4e470 <RAM_SIZE+0x3e470>
    65de:	676e                	flw	fa4,216(sp)
    65e0:	7220                	flw	fs0,96(a2)
    65e2:	6c75                	lui	s8,0x1d
    65e4:	7365                	lui	t1,0xffff9
    65e6:	0a2e                	slli	s4,s4,0xb
    65e8:	0000                	unimp
    65ea:	0000                	unimp
    65ec:	7245                	lui	tp,0xffff1
    65ee:	6f72                	flw	ft10,28(sp)
    65f0:	7372                	flw	ft6,60(sp)
    65f2:	6420                	flw	fs0,72(s0)
    65f4:	7465                	lui	s0,0xffff9
    65f6:	6365                	lui	t1,0x19
    65f8:	6574                	flw	fa3,76(a0)
    65fa:	0a64                	addi	s1,sp,284
    65fc:	0000                	unimp
    65fe:	0000                	unimp
    6600:	6e6e6143          	fmadd.q	ft2,ft8,ft6,fa3,unknown
    6604:	7620746f          	jal	s0,dd66 <__stack_top+0x3cd6>
    6608:	6c61                	lui	s8,0x18
    660a:	6469                	lui	s0,0x1a
    660c:	7461                	lui	s0,0xffff8
    660e:	2065                	jal	66b6 <state_known_crc+0x22>
    6610:	7265706f          	j	5dd36 <RAM_SIZE+0x4dd36>
    6614:	7461                	lui	s0,0xffff8
    6616:	6f69                	lui	t5,0x1a
    6618:	206e                	fld	ft0,216(sp)
    661a:	6f66                	flw	ft10,88(sp)
    661c:	2072                	fld	ft0,280(sp)
    661e:	6874                	flw	fa3,84(s0)
    6620:	7365                	lui	t1,0xffff9
    6622:	2065                	jal	66ca <state_known_crc+0x36>
    6624:	64656573          	csrrsi	a0,0x646,10
    6628:	7620                	flw	fs0,104(a2)
    662a:	6c61                	lui	s8,0x18
    662c:	6575                	lui	a0,0x1d
    662e:	70202c73          	csrr	s8,0x702
    6632:	656c                	flw	fa1,76(a0)
    6634:	7361                	lui	t1,0xffff8
    6636:	2065                	jal	66de <state_known_crc+0x4a>
    6638:	706d6f63          	bltu	s10,t1,6d56 <impure_data+0x186>
    663c:	7261                	lui	tp,0xffff8
    663e:	2065                	jal	66e6 <state_known_crc+0x52>
    6640:	68746977          	0x68746977
    6644:	7220                	flw	fs0,96(a2)
    6646:	7365                	lui	t1,0xffff9
    6648:	6c75                	lui	s8,0x1d
    664a:	7374                	flw	fa3,100(a4)
    664c:	6f20                	flw	fs0,88(a4)
    664e:	206e                	fld	ft0,216(sp)
    6650:	2061                	jal	66d8 <state_known_crc+0x44>
    6652:	776f6e6b          	0x776f6e6b
    6656:	206e                	fld	ft0,216(sp)
    6658:	6c70                	flw	fa2,92(s0)
    665a:	7461                	lui	s0,0xffff8
    665c:	6f66                	flw	ft10,88(sp)
    665e:	6d72                	flw	fs10,28(sp)
    6660:	0a2e                	slli	s4,s4,0xb
    6662:	0000                	unimp
    6664:	74617453          	0x74617453
    6668:	6369                	lui	t1,0x1a
    666a:	0000                	unimp
    666c:	6548                	flw	fa0,12(a0)
    666e:	7061                	c.lui	zero,0xffff8
    6670:	0000                	unimp
    6672:	0000                	unimp
    6674:	63617453          	0x63617453
    6678:	0000006b          	0x6b

0000667c <list_known_crc>:
    667c:	d4b0                	sw	a2,104(s1)
    667e:	3340                	fld	fs0,160(a4)
    6680:	6a79                	lui	s4,0x1e
    6682:	e714                	fsw	fa3,8(a4)
    6684:	e3c1                	bnez	a5,6704 <state_known_crc+0x70>
	...

00006688 <matrix_known_crc>:
    6688:	be52                	fsd	fs4,312(sp)
    668a:	1199                	addi	gp,gp,-26
    668c:	5608                	lw	a0,40(a2)
    668e:	07471fd7          	vfredsum.vs	v31,v20,v14
	...

00006694 <state_known_crc>:
    6694:	39bf5e47          	fmsub.s	ft8,ft10,fs11,ft7,unknown
    6698:	e5a4                	fsw	fs1,72(a1)
    669a:	8e3a                	mv	t3,a4
    669c:	8d84                	0x8d84
    669e:	0000                	unimp
    66a0:	3054                	fld	fa3,160(s0)
    66a2:	332e                	fld	ft6,232(sp)
    66a4:	2d65                	jal	6d5c <impure_data+0x18c>
    66a6:	4631                	li	a2,12
    66a8:	0000                	unimp
    66aa:	0000                	unimp
    66ac:	542d                	li	s0,-21
    66ae:	542e                	lw	s0,232(sp)
    66b0:	71542b2b          	0x71542b2b
    66b4:	0000                	unimp
    66b6:	0000                	unimp
    66b8:	5431                	li	s0,-20
    66ba:	65342e33          	0x65342e33
    66be:	7a34                	flw	fa3,112(a2)
    66c0:	0000                	unimp
    66c2:	0000                	unimp
    66c4:	302e3433          	0x302e3433
    66c8:	2d65                	jal	6d80 <impure_data+0x1b0>
    66ca:	5e54                	lw	a3,60(a2)
    66cc:	0000                	unimp
    66ce:	0000                	unimp
    66d0:	2e35                	jal	6a0c <errpat+0x28c>
    66d2:	3035                	jal	5efe <__subdf3+0x48e>
    66d4:	6530                	flw	fa2,72(a0)
    66d6:	0000332b          	0x332b
    66da:	0000                	unimp
    66dc:	2e2d                	jal	6a16 <errpat+0x296>
    66de:	3231                	jal	5fea <__subdf3+0x57a>
    66e0:	322d6533          	0x322d6533
    66e4:	0000                	unimp
    66e6:	0000                	unimp
    66e8:	382d                	jal	5f22 <__subdf3+0x4b2>
    66ea:	382b6537          	lui	a0,0x382b6
    66ee:	00003233          	snez	tp,zero
    66f2:	0000                	unimp
    66f4:	362e302b          	0x362e302b
    66f8:	2d65                	jal	6db0 <impure_data+0x1e0>
    66fa:	3231                	jal	6006 <__subdf3+0x596>
    66fc:	0000                	unimp
    66fe:	0000                	unimp
    6700:	352e3533          	0x352e3533
    6704:	3434                	fld	fa3,104(s0)
    6706:	3030                	fld	fa2,96(s0)
    6708:	0000                	unimp
    670a:	0000                	unimp
    670c:	312e                	fld	ft2,232(sp)
    670e:	3332                	fld	ft6,296(sp)
    6710:	3534                	fld	fa3,104(a0)
    6712:	3030                	fld	fa2,96(s0)
    6714:	0000                	unimp
    6716:	0000                	unimp
    6718:	312d                	jal	6342 <__subdf3+0x8d2>
    671a:	3031                	jal	5f26 <__subdf3+0x4b6>
    671c:	372e                	fld	fa4,232(sp)
    671e:	3030                	fld	fa2,96(s0)
    6720:	0000                	unimp
    6722:	0000                	unimp
    6724:	362e302b          	0x362e302b
    6728:	3434                	fld	fa3,104(s0)
    672a:	3030                	fld	fa2,96(s0)
    672c:	0000                	unimp
    672e:	0000                	unimp
    6730:	3035                	jal	5f5c <__subdf3+0x4ec>
    6732:	3231                	jal	603e <__subdf3+0x5ce>
    6734:	0000                	unimp
    6736:	0000                	unimp
    6738:	3231                	jal	6044 <__subdf3+0x5d4>
    673a:	00003433          	snez	s0,zero
    673e:	0000                	unimp
    6740:	382d                	jal	5f7a <__subdf3+0x50a>
    6742:	00003437          	lui	s0,0x3
    6746:	0000                	unimp
    6748:	3232312b          	0x3232312b
    674c:	0000                	unimp
	...

00006750 <intpat>:
    6750:	6730                	flw	fa2,72(a4)
    6752:	0000                	unimp
    6754:	6738                	flw	fa4,72(a4)
    6756:	0000                	unimp
    6758:	6740                	flw	fs0,12(a4)
    675a:	0000                	unimp
    675c:	6748                	flw	fa0,12(a4)
	...

00006760 <floatpat>:
    6760:	6700                	flw	fs0,8(a4)
    6762:	0000                	unimp
    6764:	670c                	flw	fa1,8(a4)
    6766:	0000                	unimp
    6768:	6718                	flw	fa4,8(a4)
    676a:	0000                	unimp
    676c:	6724                	flw	fs1,72(a4)
	...

00006770 <scipat>:
    6770:	66d0                	flw	fa2,12(a3)
    6772:	0000                	unimp
    6774:	66dc                	flw	fa5,12(a3)
    6776:	0000                	unimp
    6778:	66e8                	flw	fa0,76(a3)
    677a:	0000                	unimp
    677c:	66f4                	flw	fa3,76(a3)
	...

00006780 <errpat>:
    6780:	66a0                	flw	fs0,72(a3)
    6782:	0000                	unimp
    6784:	66ac                	flw	fa1,72(a3)
    6786:	0000                	unimp
    6788:	66b8                	flw	fa4,72(a3)
    678a:	0000                	unimp
    678c:	66c4                	flw	fs1,12(a3)
    678e:	0000                	unimp
    6790:	2690                	fld	fa2,8(a3)
    6792:	0000                	unimp
    6794:	2670                	fld	fa2,200(a2)
    6796:	0000                	unimp
    6798:	2678                	fld	fa4,200(a2)
    679a:	0000                	unimp
    679c:	2680                	fld	fs0,8(a3)
    679e:	0000                	unimp
    67a0:	2688                	fld	fa0,8(a3)
    67a2:	0000                	unimp
    67a4:	2668                	fld	fa0,200(a2)
    67a6:	0000                	unimp
    67a8:	3130                	fld	fa2,96(a0)
    67aa:	3332                	fld	ft6,296(sp)
    67ac:	3534                	fld	fa3,104(a0)
    67ae:	3736                	fld	fa4,360(sp)
    67b0:	3938                	fld	fa4,112(a0)
    67b2:	6261                	lui	tp,0x18
    67b4:	66656463          	bltu	a0,t1,6e1c <impure_data+0x24c>
    67b8:	6a696867          	0x6a696867
    67bc:	6e6d6c6b          	0x6e6d6c6b
    67c0:	7271706f          	j	1e6e6 <RAM_SIZE+0xe6e6>
    67c4:	76757473          	csrrci	s0,0x767,10
    67c8:	7a797877          	0x7a797877
    67cc:	0000                	unimp
    67ce:	0000                	unimp
    67d0:	3130                	fld	fa2,96(a0)
    67d2:	3332                	fld	ft6,296(sp)
    67d4:	3534                	fld	fa3,104(a0)
    67d6:	3736                	fld	fa4,360(sp)
    67d8:	3938                	fld	fa4,112(a0)
    67da:	4241                	li	tp,16
    67dc:	46454443          	fmadd.q	fs0,fa0,ft4,fs0,rmm
    67e0:	4a494847          	fmsub.d	fa6,fs2,ft4,fs1,rmm
    67e4:	4e4d4c4b          	fnmsub.q	fs8,fs10,ft4,fs1,rmm
    67e8:	5251504f          	fnmadd.d	ft0,ft2,ft5,fa0,unknown
    67ec:	56555453          	0x56555453
    67f0:	5a595857          	0x5a595857
    67f4:	0000                	unimp
    67f6:	0000                	unimp
    67f8:	4e3c                	lw	a5,88(a2)
    67fa:	4c55                	li	s8,21
    67fc:	3e4c                	fld	fa1,184(a2)
    67fe:	0000                	unimp
    6800:	31f0                	fld	fa2,224(a1)
    6802:	0000                	unimp
    6804:	316c                	fld	fa1,224(a0)
    6806:	0000                	unimp
    6808:	316c                	fld	fa1,224(a0)
    680a:	0000                	unimp
    680c:	31e4                	fld	fs1,224(a1)
    680e:	0000                	unimp
    6810:	316c                	fld	fa1,224(a0)
    6812:	0000                	unimp
    6814:	316c                	fld	fa1,224(a0)
    6816:	0000                	unimp
    6818:	316c                	fld	fa1,224(a0)
    681a:	0000                	unimp
    681c:	316c                	fld	fa1,224(a0)
    681e:	0000                	unimp
    6820:	316c                	fld	fa1,224(a0)
    6822:	0000                	unimp
    6824:	316c                	fld	fa1,224(a0)
    6826:	0000                	unimp
    6828:	316c                	fld	fa1,224(a0)
    682a:	0000                	unimp
    682c:	31d8                	fld	fa4,160(a1)
    682e:	0000                	unimp
    6830:	316c                	fld	fa1,224(a0)
    6832:	0000                	unimp
    6834:	31cc                	fld	fa1,160(a1)
    6836:	0000                	unimp
    6838:	316c                	fld	fa1,224(a0)
    683a:	0000                	unimp
    683c:	316c                	fld	fa1,224(a0)
    683e:	0000                	unimp
    6840:	31c0                	fld	fs0,160(a1)
    6842:	0000                	unimp
    6844:	3874                	fld	fa3,240(s0)
    6846:	0000                	unimp
    6848:	31fc                	fld	fa5,224(a1)
    684a:	0000                	unimp
    684c:	31fc                	fld	fa5,224(a1)
    684e:	0000                	unimp
    6850:	31fc                	fld	fa5,224(a1)
    6852:	0000                	unimp
    6854:	31fc                	fld	fa5,224(a1)
    6856:	0000                	unimp
    6858:	31fc                	fld	fa5,224(a1)
    685a:	0000                	unimp
    685c:	31fc                	fld	fa5,224(a1)
    685e:	0000                	unimp
    6860:	31fc                	fld	fa5,224(a1)
    6862:	0000                	unimp
    6864:	31fc                	fld	fa5,224(a1)
    6866:	0000                	unimp
    6868:	31fc                	fld	fa5,224(a1)
    686a:	0000                	unimp
    686c:	31fc                	fld	fa5,224(a1)
    686e:	0000                	unimp
    6870:	31fc                	fld	fa5,224(a1)
    6872:	0000                	unimp
    6874:	31fc                	fld	fa5,224(a1)
    6876:	0000                	unimp
    6878:	31fc                	fld	fa5,224(a1)
    687a:	0000                	unimp
    687c:	31fc                	fld	fa5,224(a1)
    687e:	0000                	unimp
    6880:	31fc                	fld	fa5,224(a1)
    6882:	0000                	unimp
    6884:	31fc                	fld	fa5,224(a1)
    6886:	0000                	unimp
    6888:	31fc                	fld	fa5,224(a1)
    688a:	0000                	unimp
    688c:	31fc                	fld	fa5,224(a1)
    688e:	0000                	unimp
    6890:	31fc                	fld	fa5,224(a1)
    6892:	0000                	unimp
    6894:	31fc                	fld	fa5,224(a1)
    6896:	0000                	unimp
    6898:	31fc                	fld	fa5,224(a1)
    689a:	0000                	unimp
    689c:	31fc                	fld	fa5,224(a1)
    689e:	0000                	unimp
    68a0:	3898                	fld	fa4,48(s1)
    68a2:	0000                	unimp
    68a4:	31fc                	fld	fa5,224(a1)
    68a6:	0000                	unimp
    68a8:	31fc                	fld	fa5,224(a1)
    68aa:	0000                	unimp
    68ac:	31fc                	fld	fa5,224(a1)
    68ae:	0000                	unimp
    68b0:	31fc                	fld	fa5,224(a1)
    68b2:	0000                	unimp
    68b4:	31fc                	fld	fa5,224(a1)
    68b6:	0000                	unimp
    68b8:	31fc                	fld	fa5,224(a1)
    68ba:	0000                	unimp
    68bc:	31fc                	fld	fa5,224(a1)
    68be:	0000                	unimp
    68c0:	31fc                	fld	fa5,224(a1)
    68c2:	0000                	unimp
    68c4:	3814                	fld	fa3,48(s0)
    68c6:	0000                	unimp
    68c8:	31fc                	fld	fa5,224(a1)
    68ca:	0000                	unimp
    68cc:	3480                	fld	fs0,40(s1)
    68ce:	0000                	unimp
    68d0:	3830                	fld	fa2,112(s0)
    68d2:	0000                	unimp
    68d4:	31fc                	fld	fa5,224(a1)
    68d6:	0000                	unimp
    68d8:	31fc                	fld	fa5,224(a1)
    68da:	0000                	unimp
    68dc:	31fc                	fld	fa5,224(a1)
    68de:	0000                	unimp
    68e0:	31fc                	fld	fa5,224(a1)
    68e2:	0000                	unimp
    68e4:	3830                	fld	fa2,112(s0)
    68e6:	0000                	unimp
    68e8:	31fc                	fld	fa5,224(a1)
    68ea:	0000                	unimp
    68ec:	31fc                	fld	fa5,224(a1)
    68ee:	0000                	unimp
    68f0:	31fc                	fld	fa5,224(a1)
    68f2:	0000                	unimp
    68f4:	31fc                	fld	fa5,224(a1)
    68f6:	0000                	unimp
    68f8:	31fc                	fld	fa5,224(a1)
    68fa:	0000                	unimp
    68fc:	3864                	fld	fs1,240(s0)
    68fe:	0000                	unimp
    6900:	355c                	fld	fa5,168(a0)
    6902:	0000                	unimp
    6904:	31fc                	fld	fa5,224(a1)
    6906:	0000                	unimp
    6908:	31fc                	fld	fa5,224(a1)
    690a:	0000                	unimp
    690c:	34c8                	fld	fa0,168(s1)
    690e:	0000                	unimp
    6910:	31fc                	fld	fa5,224(a1)
    6912:	0000                	unimp
    6914:	3854                	fld	fa3,176(s0)
    6916:	0000                	unimp
    6918:	31fc                	fld	fa5,224(a1)
    691a:	0000                	unimp
    691c:	31fc                	fld	fa5,224(a1)
    691e:	0000                	unimp
    6920:	3888                	fld	fa0,48(s1)
    6922:	0000                	unimp
    6924:	32e4                	fld	fs1,224(a3)
    6926:	0000                	unimp
    6928:	3204                	fld	fs1,32(a2)
    692a:	0000                	unimp
    692c:	3204                	fld	fs1,32(a2)
    692e:	0000                	unimp
    6930:	3204                	fld	fs1,32(a2)
    6932:	0000                	unimp
    6934:	3204                	fld	fs1,32(a2)
    6936:	0000                	unimp
    6938:	3204                	fld	fs1,32(a2)
    693a:	0000                	unimp
    693c:	3204                	fld	fs1,32(a2)
    693e:	0000                	unimp
    6940:	3204                	fld	fs1,32(a2)
    6942:	0000                	unimp
    6944:	3204                	fld	fs1,32(a2)
    6946:	0000                	unimp
    6948:	3204                	fld	fs1,32(a2)
    694a:	0000                	unimp
    694c:	3204                	fld	fs1,32(a2)
    694e:	0000                	unimp
    6950:	3204                	fld	fs1,32(a2)
    6952:	0000                	unimp
    6954:	3204                	fld	fs1,32(a2)
    6956:	0000                	unimp
    6958:	3204                	fld	fs1,32(a2)
    695a:	0000                	unimp
    695c:	3204                	fld	fs1,32(a2)
    695e:	0000                	unimp
    6960:	3204                	fld	fs1,32(a2)
    6962:	0000                	unimp
    6964:	3204                	fld	fs1,32(a2)
    6966:	0000                	unimp
    6968:	3204                	fld	fs1,32(a2)
    696a:	0000                	unimp
    696c:	3204                	fld	fs1,32(a2)
    696e:	0000                	unimp
    6970:	3204                	fld	fs1,32(a2)
    6972:	0000                	unimp
    6974:	3204                	fld	fs1,32(a2)
    6976:	0000                	unimp
    6978:	3204                	fld	fs1,32(a2)
    697a:	0000                	unimp
    697c:	3204                	fld	fs1,32(a2)
    697e:	0000                	unimp
    6980:	3800                	fld	fs0,48(s0)
    6982:	0000                	unimp
    6984:	3204                	fld	fs1,32(a2)
    6986:	0000                	unimp
    6988:	3204                	fld	fs1,32(a2)
    698a:	0000                	unimp
    698c:	3204                	fld	fs1,32(a2)
    698e:	0000                	unimp
    6990:	3204                	fld	fs1,32(a2)
    6992:	0000                	unimp
    6994:	3204                	fld	fs1,32(a2)
    6996:	0000                	unimp
    6998:	3204                	fld	fs1,32(a2)
    699a:	0000                	unimp
    699c:	3204                	fld	fs1,32(a2)
    699e:	0000                	unimp
    69a0:	3204                	fld	fs1,32(a2)
    69a2:	0000                	unimp
    69a4:	32e8                	fld	fa0,224(a3)
    69a6:	0000                	unimp
    69a8:	3204                	fld	fs1,32(a2)
    69aa:	0000                	unimp
    69ac:	3484                	fld	fs1,40(s1)
    69ae:	0000                	unimp
    69b0:	37d0                	fld	fa2,168(a5)
    69b2:	0000                	unimp
    69b4:	3204                	fld	fs1,32(a2)
    69b6:	0000                	unimp
    69b8:	3204                	fld	fs1,32(a2)
    69ba:	0000                	unimp
    69bc:	3204                	fld	fs1,32(a2)
    69be:	0000                	unimp
    69c0:	3204                	fld	fs1,32(a2)
    69c2:	0000                	unimp
    69c4:	37d0                	fld	fa2,168(a5)
    69c6:	0000                	unimp
    69c8:	3204                	fld	fs1,32(a2)
    69ca:	0000                	unimp
    69cc:	3204                	fld	fs1,32(a2)
    69ce:	0000                	unimp
    69d0:	3204                	fld	fs1,32(a2)
    69d2:	0000                	unimp
    69d4:	3204                	fld	fs1,32(a2)
    69d6:	0000                	unimp
    69d8:	3204                	fld	fs1,32(a2)
    69da:	0000                	unimp
    69dc:	380c                	fld	fa1,48(s0)
    69de:	0000                	unimp
    69e0:	3560                	fld	fs0,232(a0)
    69e2:	0000                	unimp
    69e4:	3204                	fld	fs1,32(a2)
    69e6:	0000                	unimp
    69e8:	3204                	fld	fs1,32(a2)
    69ea:	0000                	unimp
    69ec:	34cc                	fld	fa1,168(s1)
    69ee:	0000                	unimp
    69f0:	3204                	fld	fs1,32(a2)
    69f2:	0000                	unimp
    69f4:	384c                	fld	fa1,176(s0)
    69f6:	0000                	unimp
    69f8:	3204                	fld	fs1,32(a2)
    69fa:	0000                	unimp
    69fc:	3204                	fld	fs1,32(a2)
    69fe:	0000                	unimp
    6a00:	3844                	fld	fs1,176(s0)
    6a02:	0000                	unimp
    6a04:	ddb0                	sw	a2,120(a1)
    6a06:	ffff                	0xffff
    6a08:	dea4                	sw	s1,120(a3)
    6a0a:	ffff                	0xffff
    6a0c:	ddc0                	sw	s0,60(a1)
    6a0e:	ffff                	0xffff
    6a10:	dea4                	sw	s1,120(a3)
    6a12:	ffff                	0xffff
    6a14:	de90                	sw	a2,56(a3)
    6a16:	ffff                	0xffff
    6a18:	dea4                	sw	s1,120(a3)
    6a1a:	ffff                	0xffff
    6a1c:	ddc0                	sw	s0,60(a1)
    6a1e:	ffff                	0xffff
    6a20:	ddb0                	sw	a2,120(a1)
    6a22:	ffff                	0xffff
    6a24:	ddb0                	sw	a2,120(a1)
    6a26:	ffff                	0xffff
    6a28:	de90                	sw	a2,56(a3)
    6a2a:	ffff                	0xffff
    6a2c:	ddc0                	sw	s0,60(a1)
    6a2e:	ffff                	0xffff
    6a30:	dd88                	sw	a0,56(a1)
    6a32:	ffff                	0xffff
    6a34:	dd88                	sw	a0,56(a1)
    6a36:	ffff                	0xffff
    6a38:	dd88                	sw	a0,56(a1)
    6a3a:	ffff                	0xffff
    6a3c:	ddc8                	sw	a0,60(a1)
    6a3e:	ffff                	0xffff
    6a40:	e654                	fsw	fa3,12(a2)
    6a42:	ffff                	0xffff
    6a44:	e654                	fsw	fa3,12(a2)
    6a46:	ffff                	0xffff
    6a48:	e678                	fsw	fa4,76(a2)
    6a4a:	ffff                	0xffff
    6a4c:	e648                	fsw	fa0,12(a2)
    6a4e:	ffff                	0xffff
    6a50:	e648                	fsw	fa0,12(a2)
    6a52:	ffff                	0xffff
    6a54:	e73c                	fsw	fa5,72(a4)
    6a56:	ffff                	0xffff
    6a58:	e678                	fsw	fa4,76(a2)
    6a5a:	ffff                	0xffff
    6a5c:	e648                	fsw	fa0,12(a2)
    6a5e:	ffff                	0xffff
    6a60:	e73c                	fsw	fa5,72(a4)
    6a62:	ffff                	0xffff
    6a64:	e648                	fsw	fa0,12(a2)
    6a66:	ffff                	0xffff
    6a68:	e678                	fsw	fa4,76(a2)
    6a6a:	ffff                	0xffff
    6a6c:	e644                	fsw	fs1,12(a2)
    6a6e:	ffff                	0xffff
    6a70:	e644                	fsw	fs1,12(a2)
    6a72:	ffff                	0xffff
    6a74:	e644                	fsw	fs1,12(a2)
    6a76:	ffff                	0xffff
    6a78:	e73c                	fsw	fa5,72(a4)
    6a7a:	ffff                	0xffff

00006a7c <__clz_tab>:
    6a7c:	0100                	addi	s0,sp,128
    6a7e:	0202                	c.slli64	tp
    6a80:	03030303          	lb	t1,48(t1) # 1a030 <RAM_SIZE+0xa030>
    6a84:	0404                	addi	s1,sp,512
    6a86:	0404                	addi	s1,sp,512
    6a88:	0404                	addi	s1,sp,512
    6a8a:	0404                	addi	s1,sp,512
    6a8c:	0505                	addi	a0,a0,1
    6a8e:	0505                	addi	a0,a0,1
    6a90:	0505                	addi	a0,a0,1
    6a92:	0505                	addi	a0,a0,1
    6a94:	0505                	addi	a0,a0,1
    6a96:	0505                	addi	a0,a0,1
    6a98:	0505                	addi	a0,a0,1
    6a9a:	0505                	addi	a0,a0,1
    6a9c:	0606                	slli	a2,a2,0x1
    6a9e:	0606                	slli	a2,a2,0x1
    6aa0:	0606                	slli	a2,a2,0x1
    6aa2:	0606                	slli	a2,a2,0x1
    6aa4:	0606                	slli	a2,a2,0x1
    6aa6:	0606                	slli	a2,a2,0x1
    6aa8:	0606                	slli	a2,a2,0x1
    6aaa:	0606                	slli	a2,a2,0x1
    6aac:	0606                	slli	a2,a2,0x1
    6aae:	0606                	slli	a2,a2,0x1
    6ab0:	0606                	slli	a2,a2,0x1
    6ab2:	0606                	slli	a2,a2,0x1
    6ab4:	0606                	slli	a2,a2,0x1
    6ab6:	0606                	slli	a2,a2,0x1
    6ab8:	0606                	slli	a2,a2,0x1
    6aba:	0606                	slli	a2,a2,0x1
    6abc:	07070707          	vluxei8.v	v14,(a4),v16
    6ac0:	07070707          	vluxei8.v	v14,(a4),v16
    6ac4:	07070707          	vluxei8.v	v14,(a4),v16
    6ac8:	07070707          	vluxei8.v	v14,(a4),v16
    6acc:	07070707          	vluxei8.v	v14,(a4),v16
    6ad0:	07070707          	vluxei8.v	v14,(a4),v16
    6ad4:	07070707          	vluxei8.v	v14,(a4),v16
    6ad8:	07070707          	vluxei8.v	v14,(a4),v16
    6adc:	07070707          	vluxei8.v	v14,(a4),v16
    6ae0:	07070707          	vluxei8.v	v14,(a4),v16
    6ae4:	07070707          	vluxei8.v	v14,(a4),v16
    6ae8:	07070707          	vluxei8.v	v14,(a4),v16
    6aec:	07070707          	vluxei8.v	v14,(a4),v16
    6af0:	07070707          	vluxei8.v	v14,(a4),v16
    6af4:	07070707          	vluxei8.v	v14,(a4),v16
    6af8:	07070707          	vluxei8.v	v14,(a4),v16
    6afc:	0808                	addi	a0,sp,16
    6afe:	0808                	addi	a0,sp,16
    6b00:	0808                	addi	a0,sp,16
    6b02:	0808                	addi	a0,sp,16
    6b04:	0808                	addi	a0,sp,16
    6b06:	0808                	addi	a0,sp,16
    6b08:	0808                	addi	a0,sp,16
    6b0a:	0808                	addi	a0,sp,16
    6b0c:	0808                	addi	a0,sp,16
    6b0e:	0808                	addi	a0,sp,16
    6b10:	0808                	addi	a0,sp,16
    6b12:	0808                	addi	a0,sp,16
    6b14:	0808                	addi	a0,sp,16
    6b16:	0808                	addi	a0,sp,16
    6b18:	0808                	addi	a0,sp,16
    6b1a:	0808                	addi	a0,sp,16
    6b1c:	0808                	addi	a0,sp,16
    6b1e:	0808                	addi	a0,sp,16
    6b20:	0808                	addi	a0,sp,16
    6b22:	0808                	addi	a0,sp,16
    6b24:	0808                	addi	a0,sp,16
    6b26:	0808                	addi	a0,sp,16
    6b28:	0808                	addi	a0,sp,16
    6b2a:	0808                	addi	a0,sp,16
    6b2c:	0808                	addi	a0,sp,16
    6b2e:	0808                	addi	a0,sp,16
    6b30:	0808                	addi	a0,sp,16
    6b32:	0808                	addi	a0,sp,16
    6b34:	0808                	addi	a0,sp,16
    6b36:	0808                	addi	a0,sp,16
    6b38:	0808                	addi	a0,sp,16
    6b3a:	0808                	addi	a0,sp,16
    6b3c:	0808                	addi	a0,sp,16
    6b3e:	0808                	addi	a0,sp,16
    6b40:	0808                	addi	a0,sp,16
    6b42:	0808                	addi	a0,sp,16
    6b44:	0808                	addi	a0,sp,16
    6b46:	0808                	addi	a0,sp,16
    6b48:	0808                	addi	a0,sp,16
    6b4a:	0808                	addi	a0,sp,16
    6b4c:	0808                	addi	a0,sp,16
    6b4e:	0808                	addi	a0,sp,16
    6b50:	0808                	addi	a0,sp,16
    6b52:	0808                	addi	a0,sp,16
    6b54:	0808                	addi	a0,sp,16
    6b56:	0808                	addi	a0,sp,16
    6b58:	0808                	addi	a0,sp,16
    6b5a:	0808                	addi	a0,sp,16
    6b5c:	0808                	addi	a0,sp,16
    6b5e:	0808                	addi	a0,sp,16
    6b60:	0808                	addi	a0,sp,16
    6b62:	0808                	addi	a0,sp,16
    6b64:	0808                	addi	a0,sp,16
    6b66:	0808                	addi	a0,sp,16
    6b68:	0808                	addi	a0,sp,16
    6b6a:	0808                	addi	a0,sp,16
    6b6c:	0808                	addi	a0,sp,16
    6b6e:	0808                	addi	a0,sp,16
    6b70:	0808                	addi	a0,sp,16
    6b72:	0808                	addi	a0,sp,16
    6b74:	0808                	addi	a0,sp,16
    6b76:	0808                	addi	a0,sp,16
    6b78:	0808                	addi	a0,sp,16
    6b7a:	0808                	addi	a0,sp,16

00006b7c <__EH_FRAME_BEGIN__>:
    6b7c:	0000                	unimp
	...

00006b80 <__init_array_start>:
    6b80:	58a4                	lw	s1,112(s1)
	...

00006b84 <__frame_dummy_init_array_entry>:
    6b84:	00a4                	addi	s1,sp,72
	...

00006b88 <__do_global_dtors_aux_fini_array_entry>:
    6b88:	005c                	addi	a5,sp,4
	...

00006b8c <__fini_array_end>:
    6b8c:	0000                	unimp
	...

Disassembly of section .sdata:

00006b90 <__sdata_start>:
    6b90:	0000                	unimp
    6b92:	0000                	unimp
    6b94:	0000                	unimp
    6b96:	4024                	lw	s1,64(s0)
    6b98:	1eb8                	addi	a4,sp,888
    6b9a:	eb85                	bnez	a5,6bca <__sdata_end+0xa>
    6b9c:	b851                	j	6430 <__subdf3+0x9c0>
    6b9e:	3f9e                	fld	ft11,480(sp)
    6ba0:	0000                	unimp
    6ba2:	0000                	unimp
    6ba4:	0000                	unimp
    6ba6:	3ff0                	fld	fa2,248(a5)

00006ba8 <_global_impure_ptr>:
    6ba8:	6bd0                	flw	fa2,20(a5)
	...

00006bac <__dso_handle>:
    6bac:	0000                	unimp
	...

00006bb0 <default_num_contexts>:
ee_u32 default_num_contexts = 1;
    6bb0:	0001                	nop
	...

00006bb4 <seed3_volatile>:
volatile ee_s32 seed3_volatile = 0x66;
    6bb4:	0066                	c.slli	zero,0x19
	...

00006bb8 <_impure_ptr>:
    6bb8:	6bd0                	flw	fa2,20(a5)
    6bba:	0000                	unimp
    6bbc:	0000                	unimp
	...

Disassembly of section .data:

00006bc0 <mem_name>:
char *mem_name[3] = { "Static", "Heap", "Stack" };
    6bc0:	6664                	flw	fs1,76(a2)
    6bc2:	0000                	unimp
    6bc4:	666c                	flw	fa1,76(a2)
    6bc6:	0000                	unimp
    6bc8:	6674                	flw	fa3,76(a2)
    6bca:	0000                	unimp
    6bcc:	0000                	unimp
	...

00006bd0 <impure_data>:
    6bd0:	0000                	unimp
    6bd2:	0000                	unimp
    6bd4:	6ebc                	flw	fa5,88(a3)
    6bd6:	0000                	unimp
    6bd8:	6f24                	flw	fs1,88(a4)
    6bda:	0000                	unimp
    6bdc:	6f8c                	flw	fa1,24(a5)
	...
    6c76:	0000                	unimp
    6c78:	0001                	nop
    6c7a:	0000                	unimp
    6c7c:	0000                	unimp
    6c7e:	0000                	unimp
    6c80:	330e                	fld	ft6,224(sp)
    6c82:	abcd                	j	7274 <__bss_end+0x1e4>
    6c84:	1234                	addi	a3,sp,296
    6c86:	e66d                	bnez	a2,6d70 <impure_data+0x1a0>
    6c88:	deec                	sw	a1,124(a3)
    6c8a:	0005                	c.nop	1
    6c8c:	0000000b          	0xb
	...

Disassembly of section .sbss:

00007000 <stop_time_val>:
    7000:	0000                	unimp
	...

00007004 <start_time_val>:
static CORETIMETYPE start_time_val, stop_time_val;
    7004:	0000                	unimp
	...

00007008 <seed5_volatile>:
volatile ee_s32 seed5_volatile = 0;
    7008:	0000                	unimp
	...

0000700c <seed4_volatile>:
volatile ee_s32 seed4_volatile = ITERATIONS;
    700c:	0000                	unimp
	...

00007010 <seed2_volatile>:
volatile ee_s32 seed2_volatile = 0x0;
    7010:	0000                	unimp
	...

00007014 <seed1_volatile>:
	...

Disassembly of section .bss:

00007020 <completed.1>:
    7020:	0000                	unimp
	...

00007024 <object.0>:
	...

0000703c <CVTBUF>:
	...

Disassembly of section .heap:

00007090 <__heap_start>:
	...

Disassembly of section .stack:

00007890 <__stack_bottom>:
	...

Disassembly of section .riscv.attributes:

00000000 <.riscv.attributes>:
lui     sp,%hi(__stack_top)                                             
   0:	1b41                	addi	s6,s6,-16
   2:	0000                	unimp
addi    sp,sp,%lo(__stack_top)
   4:	7200                	flw	fs0,32(a2)
   6:	7369                	lui	t1,0xffffa
jal   zero, _start
   8:	01007663          	bgeu	zero,a6,14 <_start+0x4>
   c:	0011                	c.nop	4
   e:	0000                	unimp
  10:	1004                	addi	s1,sp,32
  12:	7205                	lui	tp,0xfffe1
  14:	3376                	fld	ft6,376(sp)
  16:	6932                	flw	fs2,12(sp)
  18:	7032                	flw	ft0,44(sp)
  1a:	0030                	addi	a2,sp,8

Disassembly of section .comment:

00000000 <.comment>:
lui     sp,%hi(__stack_top)                                             
   0:	3a434347          	fmsub.d	ft6,ft6,ft4,ft7,rmm
addi    sp,sp,%lo(__stack_top)
   4:	2820                	fld	fs0,80(s0)
   6:	69466953          	0x69466953
jal   zero, _start
   a:	6576                	flw	fa0,92(sp)
   c:	4720                	lw	s0,72(a4)
   e:	4d2d4343          	fmadd.h	ft6,fs10,fs2,fs1,rmm
  12:	7465                	lui	s0,0xffff9
  14:	6c61                	lui	s8,0x18
  16:	3120                	fld	fs0,96(a0)
  18:	2e30                	fld	fa2,88(a2)
  1a:	2e32                	fld	ft8,264(sp)
  1c:	2d30                	fld	fa2,88(a0)
  1e:	3032                	fld	ft0,296(sp)
  20:	3032                	fld	ft0,296(sp)
  22:	312e                	fld	ft2,232(sp)
  24:	2e32                	fld	ft8,264(sp)
  26:	2938                	fld	fa4,80(a0)
  28:	3120                	fld	fs0,96(a0)
  2a:	2e30                	fld	fa2,88(a2)
  2c:	2e32                	fld	ft8,264(sp)
  2e:	0030                	addi	a2,sp,8

Disassembly of section .debug_line:

00000000 <.debug_line>:
lui     sp,%hi(__stack_top)                                             
       0:	0000004f          	fnmadd.s	ft0,ft0,ft0,ft0,rne
addi    sp,sp,%lo(__stack_top)
       4:	002f0003          	lb	zero,2(t5) # 1a002 <RAM_SIZE+0xa002>
jal   zero, _start
       8:	0000                	unimp
       a:	0101                	addi	sp,sp,0
       c:	000d0efb          	0xd0efb
      10:	0101                	addi	sp,sp,0
      12:	0101                	addi	sp,sp,0
      14:	0000                	unimp
      16:	0100                	addi	s0,sp,128
      18:	0000                	unimp
      1a:	2f01                	jal	72a <core_bench_list+0x206>
      1c:	72616873          	csrrsi	a6,0x726,2
      20:	6465                	lui	s0,0x19
      22:	726f632f          	0x726f632f
      26:	6d65                	lui	s10,0x19
      28:	7261                	lui	tp,0xffff8
      2a:	6500006b          	0x6500006b
      2e:	746e                	flw	fs0,248(sp)
      30:	7972                	flw	fs2,60(sp)
      32:	532e                	lw	t1,232(sp)
      34:	0100                	addi	s0,sp,128
      36:	0000                	unimp
      38:	0000                	unimp
      3a:	0205                	addi	tp,tp,1
      3c:	0000                	unimp
      3e:	0000                	unimp
      40:	0319                	addi	t1,t1,6
      42:	0901                	addi	s2,s2,0
      44:	0004                	0x4
      46:	0301                	addi	t1,t1,0
      48:	0901                	addi	s2,s2,0
      4a:	0004                	0x4
      4c:	0901                	addi	s2,s2,0
      4e:	0004                	0x4
      50:	0100                	addi	s0,sp,128
      52:	a801                	j	62 <__do_global_dtors_aux+0x6>
      54:	0014                	0x14
      56:	0300                	addi	s0,sp,384
      58:	5700                	lw	s0,40(a4)
      5a:	0000                	unimp
      5c:	0100                	addi	s0,sp,128
      5e:	fb01                	bnez	a4,ffffff6e <RAM_SIZE+0xfffeff6e>
      60:	0d0e                	slli	s10,s10,0x3
      62:	0100                	addi	s0,sp,128
      64:	0101                	addi	sp,sp,0
      66:	0001                	nop
      68:	0000                	unimp
      6a:	0001                	nop
      6c:	0100                	addi	s0,sp,128
      6e:	6168732f          	vamoandei64.v	zero,(a6),v22,v6,v0.t
      72:	6572                	flw	fa0,28(sp)
      74:	2f64                	fld	fs1,216(a4)
      76:	65726f63          	bltu	tp,s7,6d4 <core_bench_list+0x1b0>
      7a:	616d                	addi	sp,sp,240
      7c:	6b72                	flw	fs6,28(sp)
      7e:	0000                	unimp
      80:	65726f63          	bltu	tp,s7,6de <core_bench_list+0x1ba>
      84:	6c5f 7369 5f74      	0x5f7473696c5f
      8a:	6f6a                	flw	ft10,152(sp)
      8c:	6e69                	lui	t3,0x1a
      8e:	632e                	flw	ft6,200(sp)
      90:	0100                	addi	s0,sp,128
      92:	0000                	unimp
      94:	65726f63          	bltu	tp,s7,6f2 <core_bench_list+0x1ce>
      98:	705f 726f 6d74      	0x6d74726f705f
      9e:	2e65                	jal	456 <core_list_mergesort+0x7e>
      a0:	0068                	addi	a0,sp,12
      a2:	0001                	nop
      a4:	6300                	flw	fs0,0(a4)
      a6:	6d65726f          	jal	tp,5777c <RAM_SIZE+0x4777c>
      aa:	7261                	lui	tp,0xffff8
      ac:	00682e6b          	0x682e6b
      b0:	0001                	nop
      b2:	0000                	unimp
      b4:	0105                	addi	sp,sp,1
      b6:	0500                	addi	s0,sp,640
      b8:	c402                	sw	zero,8(sp)
      ba:	0000                	unimp
      bc:	0300                	addi	s0,sp,384
      be:	0186                	slli	gp,gp,0x1
      c0:	0501                	addi	a0,a0,0
      c2:	0305                	addi	t1,t1,1
    if (res == NULL)
      c4:	0901                	addi	s2,s2,0
      c6:	0000                	unimp
    return a->idx - b->idx;
      c8:	0501                	addi	a0,a0,0
      ca:	0608                	addi	a0,sp,768
      cc:	00090003          	lb	zero,0(s2)
}
      d0:	0100                	addi	s0,sp,128
      d2:	0505                	addi	a0,a0,1
      d4:	0306                	slli	t1,t1,0x1
      d6:	0905                	addi	s2,s2,1
        a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16 >> 8));
      d8:	0004                	0x4
      da:	0501                	addi	a0,a0,0
      dc:	060d                	addi	a2,a2,3
      de:	00090003          	lb	zero,0(s2)
      e2:	0100                	addi	s0,sp,128
      e4:	1605                	addi	a2,a2,-31
      e6:	04090003          	lb	zero,64(s2)
      ea:	0100                	addi	s0,sp,128
      ec:	0105                	addi	sp,sp,1
      ee:	04090103          	lb	sp,64(s2)
      f2:	0100                	addi	s0,sp,128
        b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16 >> 8));
      f4:	0905                	addi	s2,s2,1
      f6:	0306                	slli	t1,t1,0x1
    return a->idx - b->idx;
      f8:	097c                	addi	a5,sp,156
      fa:	0008                	0x8
        b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16 >> 8));
      fc:	0501                	addi	a0,a0,0
      fe:	00030617          	auipc	a2,0x30
     102:	0009                	c.nop	2
     104:	0100                	addi	s0,sp,128
     106:	2a05                	jal	236 <calc_func+0x116>
     108:	04090003          	lb	zero,64(s2)
     10c:	0100                	addi	s0,sp,128
     10e:	2005                	jal	12e <calc_func+0xe>
     110:	0c090003          	lb	zero,192(s2)
    return a->idx - b->idx;
     114:	0100                	addi	s0,sp,128
     116:	2a05                	jal	246 <calc_func+0x126>
}
     118:	04090003          	lb	zero,64(s2)
     11c:	0100                	addi	s0,sp,128
     11e:	1305                	addi	t1,t1,-31
{
     120:	04090003          	lb	zero,64(s2)
     124:	0100                	addi	s0,sp,128
     126:	0905                	addi	s2,s2,1
    ee_s16 data = *pdata;
     128:	0306                	slli	t1,t1,0x1
     12a:	0901                	addi	s2,s2,0
{
     12c:	0004                	0x4
     12e:	0501                	addi	a0,a0,0
     130:	00030617          	auipc	a2,0x30
          & 1;  /* bit 7 indicates if the function result has been cached */
     134:	0009                	c.nop	2
     136:	0100                	addi	s0,sp,128
{
     138:	0d05                	addi	s10,s10,1
     13a:	04090203          	lb	tp,64(s2)
     13e:	0100                	addi	s0,sp,128
    if (optype) /* if cached, use cache */
     140:	2a05                	jal	270 <cmp_complex+0x1c>
     142:	04097e03          	0x4097e03
     146:	0100                	addi	s0,sp,128
}
     148:	2005                	jal	168 <calc_func+0x48>
     14a:	0c090003          	lb	zero,192(s2)
        return (data & 0x007f);
     14e:	0100                	addi	s0,sp,128
}
     150:	2a05                	jal	280 <cmp_complex+0x2c>
     152:	04090003          	lb	zero,64(s2)
     156:	0100                	addi	s0,sp,128
     158:	1305                	addi	t1,t1,-31
     15a:	04090003          	lb	zero,64(s2)
     15e:	0100                	addi	s0,sp,128
     160:	0505                	addi	a0,a0,1
     162:	0306                	slli	t1,t1,0x1
     164:	0902                	c.slli64	s2
     166:	0004                	0x4
        ee_s16 flag = data & 0x7; /* bits 0-2 is type of function to perform */
     168:	0501                	addi	a0,a0,0
     16a:	0616                	slli	a2,a2,0x5
               & 0xf);       /* bits 3-6 is specific data for the operation */
     16c:	00090003          	lb	zero,0(s2)
        ee_s16 dtype
     170:	0100                	addi	s0,sp,128
     172:	0105                	addi	sp,sp,1
        dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
     174:	04090103          	lb	sp,64(s2)
        ee_s16 flag = data & 0x7; /* bits 0-2 is type of function to perform */
     178:	0100                	addi	s0,sp,128
     17a:	0306                	slli	t1,t1,0x1
                retval = core_bench_state(res->size,
     17c:	7fb9                	lui	t6,0xfffee
     17e:	0809                	addi	a6,a6,2
     180:	0100                	addi	s0,sp,128
     182:	0505                	addi	a0,a0,1
        dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
     184:	00090103          	lb	sp,0(s2)
        switch (flag)
     188:	0100                	addi	s0,sp,128
     18a:	0105                	addi	sp,sp,1
     18c:	0306                	slli	t1,t1,0x1
     18e:	097f                	0x97f
     190:	0000                	unimp
     192:	0501                	addi	a0,a0,0
        res->crc = crcu16(retval, res->crc);
     194:	030c                	addi	a1,sp,384
     196:	0901                	addi	s2,s2,0
     198:	0008                	0x8
     19a:	0501                	addi	a0,a0,0
     19c:	0605                	addi	a2,a2,1
     19e:	04090103          	lb	sp,64(s2)
     1a2:	0100                	addi	s0,sp,128
     1a4:	00090103          	lb	sp,0(s2)
     1a8:	0100                	addi	s0,sp,128
     1aa:	00090303          	lb	t1,0(s2)
        *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
     1ae:	0100                	addi	s0,sp,128
        retval &= 0x007f;
     1b0:	0105                	addi	sp,sp,1
     1b2:	0306                	slli	t1,t1,0x1
        *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
     1b4:	097a                	slli	s2,s2,0x1e
     1b6:	0000                	unimp
        res->crc = crcu16(retval, res->crc);
     1b8:	0501                	addi	a0,a0,0
     1ba:	0905030b          	0x905030b
        *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
     1be:	0008                	0x8
     1c0:	0501                	addi	a0,a0,0
     1c2:	0301                	addi	t1,t1,0
}
     1c4:	0004097b          	0x4097b
     1c8:	0501                	addi	a0,a0,0
     1ca:	0308                	addi	a0,sp,384
     1cc:	0906                	slli	s2,s2,0x1
     1ce:	0008                	0x8
     1d0:	0501                	addi	a0,a0,0
     1d2:	0609                	addi	a2,a2,2
     1d4:	08090103          	lb	sp,128(s2)
     1d8:	0100                	addi	s0,sp,128
     1da:	0105                	addi	sp,sp,1
     1dc:	0306                	slli	t1,t1,0x1
     1de:	0924                	addi	s1,sp,152
                retval = core_bench_state(res->size,
     1e0:	0000                	unimp
     1e2:	0501                	addi	a0,a0,0
     1e4:	0316                	slli	t1,t1,0x5
     1e6:	095c                	addi	a5,sp,148
     1e8:	0004                	0x4
     1ea:	0501                	addi	a0,a0,0
     1ec:	0301                	addi	t1,t1,0
     1ee:	0924                	addi	s1,sp,152
     1f0:	0004                	0x4
     1f2:	0501                	addi	a0,a0,0
     1f4:	0609                	addi	a2,a2,2
     1f6:	18095f03          	lhu	t5,384(s2)
     1fa:	0100                	addi	s0,sp,128
     1fc:	1005                	c.nop	-31
     1fe:	0306                	slli	t1,t1,0x1
     200:	00040903          	lb	s2,0(s0) # 19000 <RAM_SIZE+0x9000>
     204:	0301                	addi	t1,t1,0
     206:	097e                	slli	s2,s2,0x1f
                if (res->crcstate == 0)
     208:	0004                	0x4
     20a:	0501                	addi	a0,a0,0
                retval = core_bench_state(res->size,
     20c:	0903030f          	0x903030f
     210:	0004                	0x4
     212:	0501                	addi	a0,a0,0
                if (res->crcstate == 0)
     214:	0310                	addi	a2,sp,384
     216:	097c                	addi	a5,sp,156
        res->crc = crcu16(retval, res->crc);
     218:	0004                	0x4
     21a:	0501                	addi	a0,a0,0
                    res->crcstate = retval;
     21c:	0609                	addi	a2,a2,2
     21e:	04090103          	lb	sp,64(s2)
     222:	0100                	addi	s0,sp,128
                retval = core_bench_matrix(&(res->mat), dtype, res->crc);
     224:	00090303          	lb	t1,0(s2)
     228:	0100                	addi	s0,sp,128
     22a:	1a05                	addi	s4,s4,-31
     22c:	0306                	slli	t1,t1,0x1
     22e:	0906                	slli	s2,s2,0x1
                if (res->crcmatrix == 0)
     230:	0000                	unimp
     232:	0501                	addi	a0,a0,0
                retval = core_bench_matrix(&(res->mat), dtype, res->crc);
     234:	097a030f          	0x97a030f
     238:	0008                	0x8
     23a:	0501                	addi	a0,a0,0
                if (res->crcmatrix == 0)
     23c:	0609                	addi	a2,a2,2
     23e:	04090103          	lb	sp,64(s2)
        res->crc = crcu16(retval, res->crc);
     242:	0100                	addi	s0,sp,128
                    res->crcmatrix = retval;
     244:	1405                	addi	s0,s0,-31
     246:	0306                	slli	t1,t1,0x1
     248:	000c0917          	auipc	s2,0xc0
        res->crc = crcu16(retval, res->crc);
     24c:	0501                	addi	a0,a0,0
     24e:	0609                	addi	a2,a2,2
     250:	0c090003          	lb	zero,192(s2) # c0308 <RAM_SIZE+0xb0308>
{
     254:	0100                	addi	s0,sp,128
     256:	1405                	addi	s0,s0,-31
     258:	0306                	slli	t1,t1,0x1
     25a:	0900                	addi	s0,sp,144
     25c:	0000                	unimp
     25e:	0501                	addi	a0,a0,0
    ee_s16 val1 = calc_func(&(a->data16), res);
     260:	0318                	addi	a4,sp,384
     262:	0902                	c.slli64	s2
{
     264:	000c                	0xc
     266:	0501                	addi	a0,a0,0
     268:	0310                	addi	a2,sp,384
     26a:	097f                	0x97f
     26c:	0004                	0x4
     26e:	0501                	addi	a0,a0,0
    ee_s16 val1 = calc_func(&(a->data16), res);
     270:	0901032b          	0x901032b
     274:	0004                	0x4
     276:	0501                	addi	a0,a0,0
    ee_s16 val2 = calc_func(&(b->data16), res);
     278:	0312                	slli	t1,t1,0x4
     27a:	097e                	slli	s2,s2,0x1f
     27c:	0004                	0x4
     27e:	0501                	addi	a0,a0,0
    ee_s16 val1 = calc_func(&(a->data16), res);
     280:	0609                	addi	a2,a2,2
     282:	04090103          	lb	sp,64(s2)
    ee_s16 val2 = calc_func(&(b->data16), res);
     286:	0100                	addi	s0,sp,128
}
     288:	00090103          	lb	sp,0(s2)
     28c:	0100                	addi	s0,sp,128
     28e:	2b05                	jal	7be <core_list_init+0x12>
     290:	0306                	slli	t1,t1,0x1
     292:	0900                	addi	s0,sp,144
     294:	0000                	unimp
     296:	0501                	addi	a0,a0,0
     298:	0310                	addi	a2,sp,384
     29a:	0900                	addi	s0,sp,144
     29c:	0004                	0x4
     29e:	0501                	addi	a0,a0,0
    to->data16 = from->data16;
     2a0:	0609                	addi	a2,a2,2
     2a2:	04090103          	lb	sp,64(s2)
    to->idx    = from->idx;
     2a6:	0100                	addi	s0,sp,128
    to->data16 = from->data16;
     2a8:	0105                	addi	sp,sp,1
     2aa:	0306                	slli	t1,t1,0x1
    to->idx    = from->idx;
     2ac:	0902                	c.slli64	s2
     2ae:	0000                	unimp
}
     2b0:	0501                	addi	a0,a0,0
     2b2:	0611                	addi	a2,a2,4
    if ((*memblock + 1) >= memblock_end)
     2b4:	1c096703          	0x1c096703
     2b8:	0100                	addi	s0,sp,128
     2ba:	00090203          	lb	tp,0(s2)
     2be:	0100                	addi	s0,sp,128
    if ((*datablock + 1) >= datablock_end)
     2c0:	1a05                	addi	s4,s4,-31
     2c2:	0306                	slli	t1,t1,0x1
     2c4:	0900                	addi	s0,sp,144
     2c6:	0000                	unimp
     2c8:	0501                	addi	a0,a0,0
     2ca:	0314                	addi	a3,sp,384
    (*memblock)++;
     2cc:	0906                	slli	s2,s2,0x1
     2ce:	0028                	addi	a0,sp,8
    newitem->next      = insert_point->next;
     2d0:	0501                	addi	a0,a0,0
     2d2:	0318                	addi	a4,sp,384
    to->data16 = from->data16;
     2d4:	097a                	slli	s2,s2,0x1e
     2d6:	0004                	0x4
    to->idx    = from->idx;
     2d8:	0501                	addi	a0,a0,0
     2da:	0611                	addi	a2,a2,4
    newitem->next      = insert_point->next;
     2dc:	08090603          	lb	a2,128(s2)
    insert_point->next = newitem;
     2e0:	0100                	addi	s0,sp,128
     2e2:	1405                	addi	s0,s0,-31
    newitem->info = *datablock;
     2e4:	0306                	slli	t1,t1,0x1
     2e6:	0900                	addi	s0,sp,144
    (*datablock)++;
     2e8:	0000                	unimp
     2ea:	0501                	addi	a0,a0,0
}
     2ec:	0615                	addi	a2,a2,5
     2ee:	04090103          	lb	sp,64(s2)
    (*datablock)++;
     2f2:	0100                	addi	s0,sp,128
     2f4:	1405                	addi	s0,s0,-31
     2f6:	0306                	slli	t1,t1,0x1
    copy_info(newitem->info, info);
     2f8:	0000090b          	0x90b
    to->data16 = from->data16;
     2fc:	0501                	addi	a0,a0,0
     2fe:	09750323          	sb	s7,134(a0) # 382b6086 <RAM_SIZE+0x382a6086>
    to->idx    = from->idx;
     302:	0004                	0x4
}
     304:	0501                	addi	a0,a0,0
     306:	0611                	addi	a2,a2,4
        return NULL;
     308:	08090303          	lb	t1,128(s2)
}
     30c:	0100                	addi	s0,sp,128
     30e:	1a05                	addi	s4,s4,-31
     310:	0306                	slli	t1,t1,0x1
     312:	0900                	addi	s0,sp,144
{
     314:	0000                	unimp
     316:	0501                	addi	a0,a0,0
    list_head *ret = item->next;
     318:	0314                	addi	a3,sp,384
     31a:	0901                	addi	s2,s2,0
    tmp        = item->info;
     31c:	000c                	0xc
     31e:	0501                	addi	a0,a0,0
    item->info = ret->info;
     320:	0318                	addi	a4,sp,384
     322:	097f                	0x97f
    item->next = item->next->next;
     324:	0004                	0x4
     326:	0501                	addi	a0,a0,0
    item->info = ret->info;
     328:	0611                	addi	a2,a2,4
     32a:	08090103          	lb	sp,128(s2)
    ret->info  = tmp;
     32e:	0100                	addi	s0,sp,128
    item->next = item->next->next;
     330:	1405                	addi	s0,s0,-31
     332:	0306                	slli	t1,t1,0x1
    ret->next  = NULL;
     334:	0900                	addi	s0,sp,144
     336:	0000                	unimp
}
     338:	0501                	addi	a0,a0,0
     33a:	0615                	addi	a2,a2,5
    item_removed->info  = item_modified->info;
     33c:	04090103          	lb	sp,64(s2)
    tmp                 = item_removed->info;
     340:	0100                	addi	s0,sp,128
     342:	1405                	addi	s0,s0,-31
    item_removed->next  = item_modified->next;
     344:	0306                	slli	t1,t1,0x1
     346:	0906                	slli	s2,s2,0x1
    item_removed->info  = item_modified->info;
     348:	0000                	unimp
     34a:	0501                	addi	a0,a0,0
    item_modified->info = tmp;
     34c:	0324                	addi	s1,sp,392
     34e:	097a                	slli	s2,s2,0x1e
    item_removed->next  = item_modified->next;
     350:	0004                	0x4
     352:	0501                	addi	a0,a0,0
    item_modified->next = item_removed;
     354:	0314                	addi	a3,sp,384
     356:	0906                	slli	s2,s2,0x1
}
     358:	0008                	0x8
     35a:	0501                	addi	a0,a0,0
    if (info->idx >= 0)
     35c:	0601                	addi	a2,a2,0
     35e:	08090d03          	lb	s10,128(s2)
     362:	0100                	addi	s0,sp,128
        while (list && (list->info->idx != info->idx))
     364:	0505                	addi	a0,a0,1
     366:	00090103          	lb	sp,0(s2)
     36a:	0100                	addi	s0,sp,128
            list = list->next;
     36c:	0105                	addi	sp,sp,1
     36e:	0306                	slli	t1,t1,0x1
        while (list && (list->info->idx != info->idx))
     370:	097f                	0x97f
     372:	0000                	unimp
     374:	0501                	addi	a0,a0,0
     376:	09010313          	addi	t1,sp,144
     37a:	000c                	0xc
     37c:	0501                	addi	a0,a0,0
     37e:	0301                	addi	t1,t1,0
     380:	097f                	0x97f
     382:	0004                	0x4
        while (list && ((list->info->data16 & 0xff) != info->data16))
     384:	0301                	addi	t1,t1,0
     386:	0900                	addi	s0,sp,144
     388:	0008                	0x8
     38a:	0501                	addi	a0,a0,0
     38c:	09010313          	addi	t1,sp,144
            list = list->next;
     390:	0004                	0x4
     392:	0301                	addi	t1,t1,0
        while (list && ((list->info->data16 & 0xff) != info->data16))
     394:	0901                	addi	s2,s2,0
     396:	0008                	0x8
     398:	0301                	addi	t1,t1,0
     39a:	097f                	0x97f
     39c:	0008                	0x8
     39e:	0501                	addi	a0,a0,0
     3a0:	0605                	addi	a2,a2,1
     3a2:	04090103          	lb	sp,64(s2)
     3a6:	0100                	addi	s0,sp,128
     3a8:	1305                	addi	t1,t1,-31
     3aa:	0306                	slli	t1,t1,0x1
}
     3ac:	0900                	addi	s0,sp,144
     3ae:	0000                	unimp
     3b0:	0501                	addi	a0,a0,0
     3b2:	0605                	addi	a2,a2,1
    while (list)
     3b4:	04090103          	lb	sp,64(s2)
    list_head *next = NULL, *tmp;
     3b8:	0100                	addi	s0,sp,128
     3ba:	0105                	addi	sp,sp,1
     3bc:	0306                	slli	t1,t1,0x1
     3be:	0901                	addi	s2,s2,0
     3c0:	0000                	unimp
     3c2:	0601                	addi	a2,a2,0
        tmp        = list->next;
     3c4:	18091403          	lh	s0,384(s2)
        list->next = next;
     3c8:	0100                	addi	s0,sp,128
     3ca:	0505                	addi	a0,a0,1
    while (list)
     3cc:	00090103          	lb	sp,0(s2)
     3d0:	0100                	addi	s0,sp,128
     3d2:	1605                	addi	a2,a2,-31
}
     3d4:	0306                	slli	t1,t1,0x1
     3d6:	0900                	addi	s0,sp,144
{
     3d8:	0000                	unimp
     3da:	0301                	addi	t1,t1,0
     3dc:	0901                	addi	s2,s2,0
     3de:	0004                	0x4
     3e0:	0501                	addi	a0,a0,0
     3e2:	0310                	addi	a2,sp,384
     3e4:	097f                	0x97f
     3e6:	0004                	0x4
     3e8:	0501                	addi	a0,a0,0
     3ea:	0605                	addi	a2,a2,1
     3ec:	04090103          	lb	sp,64(s2)
     3f0:	0100                	addi	s0,sp,128
     3f2:	1005                	c.nop	-31
     3f4:	0306                	slli	t1,t1,0x1
     3f6:	0900                	addi	s0,sp,144
     3f8:	0000                	unimp
     3fa:	0501                	addi	a0,a0,0
     3fc:	0301                	addi	t1,t1,0
     3fe:	0901                	addi	s2,s2,0
     400:	0004                	0x4
     402:	0601                	addi	a2,a2,0
     404:	0901c103          	lbu	sp,144(gp) # 7420 <__global_pointer$+0x90>
     408:	0004                	0x4
     40a:	0501                	addi	a0,a0,0
     40c:	0305                	addi	t1,t1,1
     40e:	0901                	addi	s2,s2,0
     410:	0000                	unimp
     412:	0301                	addi	t1,t1,0
     414:	0902                	c.slli64	s2
     416:	0000                	unimp
    insize = 1;
     418:	0501                	addi	a0,a0,0
     41a:	060a                	slli	a2,a2,0x2
        if (nmerges <= 1) /* allow for nmerges==0, the empty list case */
     41c:	00090003          	lb	zero,0(s2)
        while (p)
     420:	0100                	addi	s0,sp,128
     422:	1405                	addi	s0,s0,-31
        nmerges = 0; /* count number of merges we do in this pass */
     424:	04090003          	lb	zero,64(s2)
        tail = NULL;
     428:	0100                	addi	s0,sp,128
     42a:	0805                	addi	a6,a6,1
        list = NULL;
     42c:	04090003          	lb	zero,64(s2)
            nmerges++; /* there exists a merge to be done */
     430:	0100                	addi	s0,sp,128
     432:	0505                	addi	a0,a0,1
     434:	0306                	slli	t1,t1,0x1
     436:	0902                	c.slli64	s2
            psize = 0;
     438:	0004                	0x4
     43a:	0501                	addi	a0,a0,0
                q = q->next;
     43c:	060a                	slli	a2,a2,0x2
     43e:	00090003          	lb	zero,0(s2)
                psize++;
     442:	0100                	addi	s0,sp,128
                if (!q)
     444:	1505                	addi	a0,a0,-31
     446:	04090003          	lb	zero,64(s2)
            for (i = 0; i < insize; i++)
     44a:	0100                	addi	s0,sp,128
                    list = e;
     44c:	0805                	addi	a6,a6,1
     44e:	04090003          	lb	zero,64(s2)
     452:	0100                	addi	s0,sp,128
     454:	0505                	addi	a0,a0,1
     456:	0306                	slli	t1,t1,0x1
            while (psize > 0 || (qsize > 0 && q))
     458:	00040903          	lb	s2,0(s0)
                else if (qsize == 0 || !q)
     45c:	0301                	addi	t1,t1,0
     45e:	0901                	addi	s2,s2,0
     460:	0000                	unimp
     462:	0501                	addi	a0,a0,0
                else if (cmp(p->info, q->info, res) <= 0)
     464:	0610                	addi	a2,sp,768
     466:	00090003          	lb	zero,0(s2)
     46a:	0100                	addi	s0,sp,128
     46c:	0505                	addi	a0,a0,1
     46e:	0306                	slli	t1,t1,0x1
     470:	0901                	addi	s2,s2,0
     472:	0004                	0x4
     474:	0501                	addi	a0,a0,0
     476:	0626                	slli	a2,a2,0x9
                    qsize--;
     478:	00090003          	lb	zero,0(s2)
                    q = q->next;
     47c:	0100                	addi	s0,sp,128
     47e:	1605                	addi	a2,a2,-31
                    qsize--;
     480:	097eb303          	0x97eb303
                if (tail)
     484:	0004                	0x4
     486:	0301                	addi	t1,t1,0
                    tail->next = e;
     488:	0901                	addi	s2,s2,0
     48a:	0004                	0x4
                    list = e;
     48c:	0501                	addi	a0,a0,0
     48e:	0318                	addi	a4,sp,384
            while (psize > 0 || (qsize > 0 && q))
     490:	01cc                	addi	a1,sp,196
     492:	0409                	addi	s0,s0,2
     494:	0100                	addi	s0,sp,128
     496:	0505                	addi	a0,a0,1
     498:	0306                	slli	t1,t1,0x1
     49a:	0901                	addi	s2,s2,0
                    qsize--;
     49c:	0004                	0x4
     49e:	0501                	addi	a0,a0,0
     4a0:	0618                	addi	a4,sp,768
     4a2:	00090003          	lb	zero,0(s2)
                    q = q->next;
     4a6:	0100                	addi	s0,sp,128
                if (tail)
     4a8:	0505                	addi	a0,a0,1
     4aa:	0306                	slli	t1,t1,0x1
                    list = e;
     4ac:	0902                	c.slli64	s2
     4ae:	0004                	0x4
     4b0:	0501                	addi	a0,a0,0
     4b2:	00030613          	mv	a2,t1
     4b6:	0009                	c.nop	2
                    psize--;
     4b8:	0100                	addi	s0,sp,128
     4ba:	0505                	addi	a0,a0,1
     4bc:	0306                	slli	t1,t1,0x1
     4be:	0901                	addi	s2,s2,0
                    p = p->next;
     4c0:	0004                	0x4
     4c2:	0501                	addi	a0,a0,0
     4c4:	0611                	addi	a2,a2,4
     4c6:	00090003          	lb	zero,0(s2)
        while (p)
     4ca:	0100                	addi	s0,sp,128
        tail->next = NULL;
     4cc:	0105                	addi	sp,sp,1
     4ce:	04090403          	lb	s0,64(s2)
        if (nmerges <= 1) /* allow for nmerges==0, the empty list case */
     4d2:	0100                	addi	s0,sp,128
        insize *= 2;
     4d4:	1105                	addi	sp,sp,-31
     4d6:	04097c03          	0x4097c03
        p    = list;
     4da:	0100                	addi	s0,sp,128
     4dc:	0505                	addi	a0,a0,1
     4de:	0306                	slli	t1,t1,0x1
        tail->next = NULL;
     4e0:	0901                	addi	s2,s2,0
     4e2:	0008                	0x8
     4e4:	0501                	addi	a0,a0,0
     4e6:	0616                	slli	a2,a2,0x5
}
     4e8:	00090003          	lb	zero,0(s2)
     4ec:	0100                	addi	s0,sp,128
     4ee:	0505                	addi	a0,a0,1
     4f0:	0306                	slli	t1,t1,0x1
     4f2:	7eae                	flw	ft9,232(sp)
     4f4:	0409                	addi	s0,s0,2
     4f6:	0100                	addi	s0,sp,128
     4f8:	1005                	c.nop	-31
     4fa:	0306                	slli	t1,t1,0x1
     4fc:	0900                	addi	s0,sp,144
     4fe:	0000                	unimp
     500:	0501                	addi	a0,a0,0
     502:	0605                	addi	a2,a2,1
     504:	04090103          	lb	sp,64(s2)
     508:	0100                	addi	s0,sp,128
     50a:	1005                	c.nop	-31
     50c:	0306                	slli	t1,t1,0x1
     50e:	0900                	addi	s0,sp,144
     510:	0000                	unimp
     512:	0501                	addi	a0,a0,0
     514:	0605                	addi	a2,a2,1
     516:	0901d303          	lhu	t1,144(gp) # 7420 <__global_pointer$+0x90>
     51a:	0004                	0x4
     51c:	0501                	addi	a0,a0,0
     51e:	0601                	addi	a2,a2,0
     520:	00090103          	lb	sp,0(s2)
{
     524:	0100                	addi	s0,sp,128
     526:	1005                	c.nop	-31
    ee_s16     find_num = res->seed3;
     528:	04097203          	0x4097203
{
     52c:	0100                	addi	s0,sp,128
     52e:	0105                	addi	sp,sp,1
     530:	04090e03          	lb	t3,64(s2)
     534:	0100                	addi	s0,sp,128
     536:	0306                	slli	t1,t1,0x1
     538:	0912                	slli	s2,s2,0x4
     53a:	0008                	0x8
     53c:	0501                	addi	a0,a0,0
     53e:	0305                	addi	t1,t1,1
     540:	0901                	addi	s2,s2,0
     542:	0000                	unimp
     544:	0301                	addi	t1,t1,0
     546:	0901                	addi	s2,s2,0
     548:	0000                	unimp
     54a:	0501                	addi	a0,a0,0
    list_head *list     = res->list;
     54c:	0601                	addi	a2,a2,0
     54e:	00097e03          	0x97e03
    for (i = 0; i < find_num; i++)
     552:	0100                	addi	s0,sp,128
    info.idx = finder_idx;
     554:	1005                	c.nop	-31
     556:	04090203          	lb	tp,64(s2)
    for (i = 0; i < find_num; i++)
     55a:	0100                	addi	s0,sp,128
    ee_u16     found = 0, missed = 0;
     55c:	0505                	addi	a0,a0,1
     55e:	0306                	slli	t1,t1,0x1
     560:	0902                	c.slli64	s2
     562:	0004                	0x4
    ee_u16     retval = 0;
     564:	0501                	addi	a0,a0,0
     566:	0610                	addi	a2,sp,768
        info.data16 = (i & 0xff);
     568:	00090003          	lb	zero,0(s2)
    if (info->idx >= 0)
     56c:	0100                	addi	s0,sp,128
     56e:	0505                	addi	a0,a0,1
        while (list && (list->info->idx != info->idx))
     570:	0306                	slli	t1,t1,0x1
     572:	0901                	addi	s2,s2,0
     574:	0004                	0x4
     576:	0501                	addi	a0,a0,0
     578:	0615                	addi	a2,a2,5
     57a:	00090003          	lb	zero,0(s2)
            list = list->next;
     57e:	0100                	addi	s0,sp,128
        while (list && (list->info->idx != info->idx))
     580:	1c05                	addi	s8,s8,-31
     582:	04090303          	lb	t1,64(s2)
     586:	0100                	addi	s0,sp,128
     588:	1005                	c.nop	-31
     58a:	04097d03          	0x4097d03
     58e:	0100                	addi	s0,sp,128
    list_head *next = NULL, *tmp;
     590:	0505                	addi	a0,a0,1
     592:	0306                	slli	t1,t1,0x1
     594:	0901                	addi	s2,s2,0
     596:	0004                	0x4
     598:	0501                	addi	a0,a0,0
     59a:	0610                	addi	a2,sp,768
     59c:	00090003          	lb	zero,0(s2)
        tmp        = list->next;
     5a0:	0100                	addi	s0,sp,128
     5a2:	0505                	addi	a0,a0,1
        list->next = next;
     5a4:	0306                	slli	t1,t1,0x1
     5a6:	0902                	c.slli64	s2
    while (list)
     5a8:	0004                	0x4
     5aa:	0501                	addi	a0,a0,0
        if (this_find == NULL)
     5ac:	0610                	addi	a2,sp,768
     5ae:	00090003          	lb	zero,0(s2)
            if (this_find->info->data16 & 0x1) /* use found value */
     5b2:	0100                	addi	s0,sp,128
            found++;
     5b4:	0505                	addi	a0,a0,1
     5b6:	0306                	slli	t1,t1,0x1
     5b8:	0901                	addi	s2,s2,0
     5ba:	0004                	0x4
            if (this_find->info->data16 & 0x1) /* use found value */
     5bc:	0501                	addi	a0,a0,0
     5be:	0610                	addi	a2,sp,768
            found++;
     5c0:	00090003          	lb	zero,0(s2)
            if (this_find->info->data16 & 0x1) /* use found value */
     5c4:	0100                	addi	s0,sp,128
     5c6:	0505                	addi	a0,a0,1
     5c8:	0306                	slli	t1,t1,0x1
     5ca:	0901                	addi	s2,s2,0
                retval += (this_find->info->data16 >> 9) & 1;
     5cc:	0004                	0x4
     5ce:	0501                	addi	a0,a0,0
     5d0:	0601                	addi	a2,a2,0
     5d2:	00090103          	lb	sp,0(s2)
     5d6:	0100                	addi	s0,sp,128
     5d8:	0306                	slli	t1,t1,0x1
     5da:	0914                	addi	a3,sp,144
     5dc:	0004                	0x4
     5de:	0501                	addi	a0,a0,0
            if (this_find->next != NULL)
     5e0:	0305                	addi	t1,t1,1
     5e2:	0901                	addi	s2,s2,0
     5e4:	0000                	unimp
     5e6:	0301                	addi	t1,t1,0
                this_find->next = finder->next;
     5e8:	0902                	c.slli64	s2
     5ea:	0000                	unimp
     5ec:	0501                	addi	a0,a0,0
     5ee:	0628                	addi	a0,sp,776
                finder->next    = list->next;
     5f0:	00090103          	lb	sp,0(s2)
     5f4:	0100                	addi	s0,sp,128
     5f6:	1905                	addi	s2,s2,-31
                list->next      = finder;
     5f8:	04097f03          	0x4097f03
        if (info.idx >= 0)
     5fc:	0100                	addi	s0,sp,128
     5fe:	0505                	addi	a0,a0,1
            info.idx++;
     600:	0306                	slli	t1,t1,0x1
     602:	0901                	addi	s2,s2,0
     604:	0004                	0x4
     606:	0501                	addi	a0,a0,0
     608:	0628                	addi	a0,sp,776
     60a:	00090303          	lb	t1,0(s2)
    for (i = 0; i < find_num; i++)
     60e:	0100                	addi	s0,sp,128
     610:	1905                	addi	s2,s2,-31
     612:	04097d03          	0x4097d03
     616:	0100                	addi	s0,sp,128
     618:	0505                	addi	a0,a0,1
     61a:	0306                	slli	t1,t1,0x1
    retval += found * 4 - missed;
     61c:	0901                	addi	s2,s2,0
     61e:	0004                	0x4
     620:	0501                	addi	a0,a0,0
     622:	0619                	addi	a2,a2,6
     624:	00090003          	lb	zero,0(s2)
     628:	0100                	addi	s0,sp,128
     62a:	0505                	addi	a0,a0,1
     62c:	0306                	slli	t1,t1,0x1
     62e:	0902                	c.slli64	s2
    if (finder_idx > 0)
     630:	0004                	0x4
     632:	0501                	addi	a0,a0,0
        list = core_list_mergesort(list, cmp_complex, res);
     634:	0619                	addi	a2,a2,6
     636:	00090003          	lb	zero,0(s2)
     63a:	0100                	addi	s0,sp,128
     63c:	0505                	addi	a0,a0,1
     63e:	0306                	slli	t1,t1,0x1
     640:	0901                	addi	s2,s2,0
     642:	0004                	0x4
    remover = core_list_remove(list->next);
     644:	0501                	addi	a0,a0,0
     646:	0619                	addi	a2,a2,6
    list_head *ret = item->next;
     648:	00090003          	lb	zero,0(s2)
     64c:	0100                	addi	s0,sp,128
     64e:	0505                	addi	a0,a0,1
    tmp        = item->info;
     650:	0306                	slli	t1,t1,0x1
     652:	0901                	addi	s2,s2,0
    item->info = ret->info;
     654:	0004                	0x4
     656:	0501                	addi	a0,a0,0
    item->next = item->next->next;
     658:	0601                	addi	a2,a2,0
     65a:	00090103          	lb	sp,0(s2)
    item->info = ret->info;
     65e:	0100                	addi	s0,sp,128
    ret->info  = tmp;
     660:	0306                	slli	t1,t1,0x1
     662:	0911                	addi	s2,s2,4
    item->next = item->next->next;
     664:	0004                	0x4
     666:	0501                	addi	a0,a0,0
    ret->next  = NULL;
     668:	0305                	addi	t1,t1,1
     66a:	0901                	addi	s2,s2,0
    if (info->idx >= 0)
     66c:	0000                	unimp
     66e:	0501                	addi	a0,a0,0
        while (list && (list->info->idx != info->idx))
     670:	060d                	addi	a2,a2,3
     672:	00090003          	lb	zero,0(s2)
     676:	0100                	addi	s0,sp,128
     678:	0805                	addi	a6,a6,1
     67a:	04090003          	lb	zero,64(s2)
            list = list->next;
     67e:	0100                	addi	s0,sp,128
        while (list && (list->info->idx != info->idx))
     680:	0f05                	addi	t5,t5,1
     682:	0306                	slli	t1,t1,0x1
        finder = list->next;
     684:	0902                	c.slli64	s2
     686:	0004                	0x4
    while (finder)
     688:	0501                	addi	a0,a0,0
     68a:	0612                	slli	a2,a2,0x4
        retval = crc16(list->info->data16, retval);
     68c:	08090103          	lb	sp,128(s2)
     690:	0100                	addi	s0,sp,128
     692:	0f05                	addi	t5,t5,1
     694:	0306                	slli	t1,t1,0x1
     696:	097f                	0x97f
     698:	0004                	0x4
     69a:	0501                	addi	a0,a0,0
        finder = finder->next;
     69c:	000d                	c.nop	3
     69e:	0402                	c.slli64	s0
        retval = crc16(list->info->data16, retval);
     6a0:	0301                	addi	t1,t1,0
     6a2:	0901                	addi	s2,s2,0
    while (finder)
     6a4:	0004                	0x4
     6a6:	0501                	addi	a0,a0,0
    remover = core_list_undo_remove(remover, list->next);
     6a8:	04020023          	sb	zero,64(tp) # ffff8040 <RAM_SIZE+0xfffe8040>
    tmp                 = item_removed->info;
     6ac:	0601                	addi	a2,a2,0
     6ae:	00097f03          	0x97f03
    item_removed->info  = item_modified->info;
     6b2:	0100                	addi	s0,sp,128
    item_removed->next  = item_modified->next;
     6b4:	1505                	addi	a0,a0,-31
     6b6:	0200                	addi	s0,sp,256
    item_removed->info  = item_modified->info;
     6b8:	0104                	addi	s1,sp,128
     6ba:	04090003          	lb	zero,64(s2)
    item_modified->info = tmp;
     6be:	0100                	addi	s0,sp,128
    item_removed->next  = item_modified->next;
     6c0:	0f05                	addi	t5,t5,1
     6c2:	0306                	slli	t1,t1,0x1
    list = core_list_mergesort(list, cmp_idx, NULL);
     6c4:	0906                	slli	s2,s2,0x1
     6c6:	000c                	0xc
    item_modified->next = item_removed;
     6c8:	0501                	addi	a0,a0,0
     6ca:	063c                	addi	a5,sp,776
    list = core_list_mergesort(list, cmp_idx, NULL);
     6cc:	04090003          	lb	zero,64(s2)
     6d0:	0100                	addi	s0,sp,128
     6d2:	1205                	addi	tp,tp,-31
     6d4:	08090103          	lb	sp,128(s2)
    finder = list->next;
     6d8:	0100                	addi	s0,sp,128
     6da:	0f05                	addi	t5,t5,1
    list = core_list_mergesort(list, cmp_idx, NULL);
     6dc:	0306                	slli	t1,t1,0x1
     6de:	097f                	0x97f
    while (finder)
     6e0:	0004                	0x4
     6e2:	0501                	addi	a0,a0,0
        retval = crc16(list->info->data16, retval);
     6e4:	030d                	addi	t1,t1,3
     6e6:	0901                	addi	s2,s2,0
     6e8:	0004                	0x4
     6ea:	0501                	addi	a0,a0,0
     6ec:	0624                	addi	s1,sp,776
     6ee:	00097f03          	0x97f03
     6f2:	0100                	addi	s0,sp,128
        finder = finder->next;
     6f4:	2d05                	jal	d24 <main+0x33c>
     6f6:	04090003          	lb	zero,64(s2)
        retval = crc16(list->info->data16, retval);
     6fa:	0100                	addi	s0,sp,128
    while (finder)
     6fc:	1505                	addi	a0,a0,-31
     6fe:	04090003          	lb	zero,64(s2)
}
     702:	0100                	addi	s0,sp,128
     704:	0105                	addi	sp,sp,1
     706:	0c090403          	lb	s0,192(s2)
     70a:	0100                	addi	s0,sp,128
     70c:	0306                	slli	t1,t1,0x1
     70e:	0911                	addi	s2,s2,4
     710:	0008                	0x8
     712:	0501                	addi	a0,a0,0
     714:	0305                	addi	t1,t1,1
     716:	0901                	addi	s2,s2,0
     718:	0000                	unimp
     71a:	0301                	addi	t1,t1,0
     71c:	0901                	addi	s2,s2,0
     71e:	0000                	unimp
     720:	0501                	addi	a0,a0,0
     722:	0900030b          	0x900030b
     726:	0000                	unimp
        while (list && ((list->info->data16 & 0xff) != info->data16))
     728:	0501                	addi	a0,a0,0
     72a:	0610                	addi	a2,sp,768
     72c:	04097f03          	0x4097f03
     730:	0100                	addi	s0,sp,128
     732:	0905                	addi	s2,s2,1
            list = list->next;
     734:	0306                	slli	t1,t1,0x1
     736:	000c0903          	lb	s2,0(s8) # 18000 <RAM_SIZE+0x8000>
        while (list && ((list->info->data16 & 0xff) != info->data16))
     73a:	0501                	addi	a0,a0,0
        finder = list->next;
     73c:	0614                	addi	a3,sp,768
     73e:	00090003          	lb	zero,0(s2)
    while (finder)
     742:	0100                	addi	s0,sp,128
     744:	0905                	addi	s2,s2,1
     746:	0306                	slli	t1,t1,0x1
        while (list && ((list->info->data16 & 0xff) != info->data16))
     748:	0901                	addi	s2,s2,0
     74a:	0004                	0x4
     74c:	0501                	addi	a0,a0,0
     74e:	0614                	addi	a3,sp,768
     750:	00090003          	lb	zero,0(s2)
            list = list->next;
     754:	0100                	addi	s0,sp,128
     756:	0905                	addi	s2,s2,1
        while (list && ((list->info->data16 & 0xff) != info->data16))
     758:	0306                	slli	t1,t1,0x1
     75a:	0901                	addi	s2,s2,0
     75c:	0004                	0x4
     75e:	0301                	addi	t1,t1,0
     760:	0901                	addi	s2,s2,0
     762:	0000                	unimp
     764:	0501                	addi	a0,a0,0
     766:	097b030b          	0x97b030b
     76a:	0000                	unimp
            retval += (list->next->info->data16 >> 8) & 1;
     76c:	0501                	addi	a0,a0,0
     76e:	0305                	addi	t1,t1,1
            missed++;
     770:	00080907          	vle8.v	v18,(a6),v0.t
     774:	0501                	addi	a0,a0,0
     776:	0601                	addi	a2,a2,0
            retval += (list->next->info->data16 >> 8) & 1;
     778:	00090103          	lb	sp,0(s2)
            missed++;
     77c:	0100                	addi	s0,sp,128
     77e:	0306                	slli	t1,t1,0x1
            retval += (list->next->info->data16 >> 8) & 1;
     780:	0919                	addi	s2,s2,6
     782:	0004                	0x4
     784:	0501                	addi	a0,a0,0
     786:	0305                	addi	t1,t1,1
     788:	0901                	addi	s2,s2,0
     78a:	0000                	unimp
     78c:	0301                	addi	t1,t1,0
     78e:	0901                	addi	s2,s2,0
     790:	0000                	unimp
     792:	0301                	addi	t1,t1,0
     794:	0902                	c.slli64	s2
     796:	0000                	unimp
    info.idx = finder_idx;
     798:	0501                	addi	a0,a0,0
     79a:	0601                	addi	a2,a2,0
    for (i = 0; i < find_num; i++)
     79c:	00097c03          	0x97c03
     7a0:	0100                	addi	s0,sp,128
     7a2:	34090003          	lb	zero,832(s2)
            retval += (list->next->info->data16 >> 8) & 1;
     7a6:	0100                	addi	s0,sp,128
     7a8:	0c05                	addi	s8,s8,1
     7aa:	0c090403          	lb	s0,192(s2)
{
     7ae:	0100                	addi	s0,sp,128
     7b0:	0900d103          	lhu	sp,144(ra) # 114 <cmp_idx+0x50>
     7b4:	0004                	0x4
     7b6:	0501                	addi	a0,a0,0
    ee_u32 size     = (blksize / per_item)
     7b8:	0605                	addi	a2,a2,1
     7ba:	097fb103          	0x97fb103
{
     7be:	0004                	0x4
     7c0:	0501                	addi	a0,a0,0
     7c2:	0309                	addi	t1,t1,2
     7c4:	0902                	c.slli64	s2
     7c6:	0000                	unimp
     7c8:	0301                	addi	t1,t1,0
     7ca:	0901                	addi	s2,s2,0
     7cc:	0000                	unimp
     7ce:	0301                	addi	t1,t1,0
    ee_u32 size     = (blksize / per_item)
     7d0:	0901                	addi	s2,s2,0
     7d2:	0000                	unimp
     7d4:	0301                	addi	t1,t1,0
     7d6:	0902                	c.slli64	s2
    list_head *memblock_end  = memblock + size;
     7d8:	0000                	unimp
     7da:	0301                	addi	t1,t1,0
     7dc:	0902                	c.slli64	s2
     7de:	0000                	unimp
    list->info->data16 = (ee_s16)0x8080;
     7e0:	0501                	addi	a0,a0,0
     7e2:	0900030f          	0x900030f
    list->next         = NULL;
     7e6:	0000                	unimp
    list->info         = datablock;
     7e8:	0501                	addi	a0,a0,0
     7ea:	0611                	addi	a2,a2,4
    list->info->data16 = (ee_s16)0x8080;
     7ec:	04097e03          	0x4097e03
    list_data *datablock_end = datablock + size;
     7f0:	0100                	addi	s0,sp,128
     7f2:	0e05                	addi	t3,t3,1
    list->info->data16 = (ee_s16)0x8080;
     7f4:	04097e03          	0x4097e03
    list->info->idx    = 0x0000;
     7f8:	0100                	addi	s0,sp,128
     7fa:	04097f03          	0x4097f03
    if ((*memblock + 1) >= memblock_end)
     7fe:	0100                	addi	s0,sp,128
    list_data *datablock_end = datablock + size;
     800:	0d05                	addi	s10,s10,1
     802:	0306                	slli	t1,t1,0x1
    memblock++;
     804:	00040907          	vle8.v	v18,(s0),v0.t
    datablock++;
     808:	0501                	addi	a0,a0,0
     80a:	0614                	addi	a3,sp,768
    if ((*memblock + 1) >= memblock_end)
     80c:	00090003          	lb	zero,0(s2)
    if ((*datablock + 1) >= datablock_end)
     810:	0100                	addi	s0,sp,128
     812:	0d05                	addi	s10,s10,1
     814:	0306                	slli	t1,t1,0x1
     816:	0902                	c.slli64	s2
    newitem->info = *datablock;
     818:	0004                	0x4
     81a:	0301                	addi	t1,t1,0
    newitem->next      = insert_point->next;
     81c:	0901                	addi	s2,s2,0
     81e:	0000                	unimp
    insert_point->next = newitem;
     820:	0301                	addi	t1,t1,0
     822:	0901                	addi	s2,s2,0
    to->idx    = from->idx;
     824:	0000                	unimp
     826:	0501                	addi	a0,a0,0
    to->data16 = from->data16;
     828:	0319                	addi	t1,t1,6
     82a:	0900                	addi	s0,sp,144
     82c:	0000                	unimp
     82e:	0501                	addi	a0,a0,0
    to->idx    = from->idx;
     830:	0614                	addi	a3,sp,768
     832:	00097c03          	0x97c03
    for (i = 0; i < size; i++)
     836:	0100                	addi	s0,sp,128
            ee_u16 pat = (ee_u16)(i++ ^ seed); /* get a pseudo random number */
     838:	1305                	addi	t1,t1,-31
     83a:	04090303          	lb	t1,64(s2)
    to->idx    = from->idx;
     83e:	0100                	addi	s0,sp,128
            ee_u16 pat = (ee_u16)(i++ ^ seed); /* get a pseudo random number */
     840:	1105                	addi	sp,sp,-31
     842:	0306                	slli	t1,t1,0x1
     844:	00040903          	lb	s2,0(s0)
    to->idx    = from->idx;
     848:	0501                	addi	a0,a0,0
     84a:	01030613          	addi	a2,t1,16 # ffffa010 <RAM_SIZE+0xfffea010>
    if ((*datablock + 1) >= datablock_end)
     84e:	0009                	c.nop	2
     850:	0100                	addi	s0,sp,128
     852:	1605                	addi	a2,a2,-31
        ee_u16 datpat = ((ee_u16)(seed ^ i) & 0xf);
     854:	04097f03          	0x4097f03
            = (datpat << 3) | (i & 0x7); /* alternate between algorithms */
     858:	0100                	addi	s0,sp,128
     85a:	1105                	addi	sp,sp,-31
     85c:	0306                	slli	t1,t1,0x1
     85e:	0901                	addi	s2,s2,0
     860:	0004                	0x4
     862:	0301                	addi	t1,t1,0
        ee_u16 dat
     864:	0901                	addi	s2,s2,0
     866:	0000                	unimp
        info.data16 = (dat << 8) | dat;  /* fill the data with actual data and
     868:	0501                	addi	a0,a0,0
     86a:	0614                	addi	a3,sp,768
    if ((*memblock + 1) >= memblock_end)
     86c:	00090003          	lb	zero,0(s2)
    for (i = 0; i < size; i++)
     870:	0100                	addi	s0,sp,128
     872:	1905                	addi	s2,s2,-31
    if ((*datablock + 1) >= datablock_end)
     874:	0200                	addi	s0,sp,256
     876:	0104                	addi	s1,sp,128
        info.data16 = (dat << 8) | dat;  /* fill the data with actual data and
     878:	0306                	slli	t1,t1,0x1
     87a:	097c                	addi	a5,sp,156
    if ((*memblock + 1) >= memblock_end)
     87c:	0004                	0x4
     87e:	0501                	addi	a0,a0,0
    if ((*datablock + 1) >= datablock_end)
     880:	000d                	c.nop	3
     882:	0402                	c.slli64	s0
    newitem->next      = insert_point->next;
     884:	0601                	addi	a2,a2,0
     886:	00090003          	lb	zero,0(s2)
    insert_point->next = newitem;
     88a:	0100                	addi	s0,sp,128
    newitem->info = *datablock;
     88c:	1a05                	addi	s4,s4,-31
     88e:	04093503          	0x4093503
    to->data16 = from->data16;
     892:	0100                	addi	s0,sp,128
    to->idx    = from->idx;
     894:	1305                	addi	t1,t1,-31
     896:	0306                	slli	t1,t1,0x1
    return newitem;
     898:	000c0957          	vadd.vv	v18,v0,v24,v0.t
     89c:	0501                	addi	a0,a0,0
     89e:	0311                	addi	t1,t1,4
     8a0:	0904                	addi	s1,sp,144
     8a2:	0004                	0x4
    for (i = 0; i < size; i++)
     8a4:	0501                	addi	a0,a0,0
     8a6:	0316                	slli	t1,t1,0x5
    while (finder->next != NULL)
     8a8:	00000907          	vle8.v	v18,(zero),v0.t
     8ac:	0501                	addi	a0,a0,0
     8ae:	0619                	addi	a2,a2,6
        if (i < size / 5) /* first 20% of the list in order */
     8b0:	00090003          	lb	zero,0(s2)
     8b4:	0100                	addi	s0,sp,128
     8b6:	2505                	jal	ed6 <main+0x4ee>
                                & (((i & 0x07) << 8)
     8b8:	0200                	addi	s0,sp,256
     8ba:	0104                	addi	s1,sp,128
        if (i < size / 5) /* first 20% of the list in order */
     8bc:	04090003          	lb	zero,64(s2)
     8c0:	0100                	addi	s0,sp,128
     8c2:	1605                	addi	a2,a2,-31
                                & (((i & 0x07) << 8)
     8c4:	0306                	slli	t1,t1,0x1
     8c6:	00040907          	vle8.v	v18,(s0),v0.t
     8ca:	0501                	addi	a0,a0,0
    while (finder->next != NULL)
     8cc:	061a                	slli	a2,a2,0x6
     8ce:	00090003          	lb	zero,0(s2)
     8d2:	0100                	addi	s0,sp,128
            finder->info->idx = i++;
     8d4:	1905                	addi	s2,s2,-31
     8d6:	10090003          	lb	zero,256(s2)
    while (finder->next != NULL)
     8da:	0100                	addi	s0,sp,128
     8dc:	1505                	addi	a0,a0,-31
     8de:	0306                	slli	t1,t1,0x1
     8e0:	0004090b          	0x4090b
     8e4:	0301                	addi	t1,t1,0
     8e6:	0901                	addi	s2,s2,0
     8e8:	0000                	unimp
     8ea:	0301                	addi	t1,t1,0
     8ec:	0901                	addi	s2,s2,0
     8ee:	0000                	unimp
            ee_u16 pat = (ee_u16)(i++ ^ seed); /* get a pseudo random number */
     8f0:	0501                	addi	a0,a0,0
     8f2:	061a                	slli	a2,a2,0x6
                                & (((i & 0x07) << 8)
     8f4:	00090003          	lb	zero,0(s2)
                                   | pat); /* make sure the mixed items end up
     8f8:	0100                	addi	s0,sp,128
     8fa:	1705                	addi	a4,a4,-31
                                & (((i & 0x07) << 8)
     8fc:	04097f03          	0x4097f03
            finder->info->idx = i++;
     900:	0100                	addi	s0,sp,128
     902:	1a05                	addi	s4,s4,-31
        if (i < size / 5) /* first 20% of the list in order */
     904:	04090103          	lb	sp,64(s2)
            finder->info->idx = 0x3fff
     908:	0100                	addi	s0,sp,128
     90a:	1105                	addi	sp,sp,-31
    while (finder->next != NULL)
     90c:	0306                	slli	t1,t1,0x1
     90e:	0904                	addi	s1,sp,144
     910:	0004                	0x4
     912:	0501                	addi	a0,a0,0
     914:	0614                	addi	a3,sp,768
     916:	00090003          	lb	zero,0(s2)
     91a:	0100                	addi	s0,sp,128
     91c:	1505                	addi	a0,a0,-31
     91e:	0306                	slli	t1,t1,0x1
     920:	0902                	c.slli64	s2
     922:	0004                	0x4
     924:	0501                	addi	a0,a0,0
     926:	0620                	addi	s0,sp,776
}
     928:	00090003          	lb	zero,0(s2)
     92c:	0100                	addi	s0,sp,128
     92e:	1a05                	addi	s4,s4,-31
     930:	04090403          	lb	s0,64(s2)
     934:	0100                	addi	s0,sp,128
     936:	1305                	addi	t1,t1,-31
    list = core_list_mergesort(list, cmp_idx, NULL);
     938:	0306                	slli	t1,t1,0x1
     93a:	00040957          	vadd.vv	v18,v0,v8,v0.t
}
     93e:	0501                	addi	a0,a0,0
    list = core_list_mergesort(list, cmp_idx, NULL);
     940:	001e                	c.slli	zero,0x7
     942:	0402                	c.slli64	s0
     944:	0601                	addi	a2,a2,0
     946:	04090003          	lb	zero,64(s2)
}
     94a:	0100                	addi	s0,sp,128
    list = core_list_mergesort(list, cmp_idx, NULL);
     94c:	2c05                	jal	b7c <main+0x194>
     94e:	0200                	addi	s0,sp,256
    memblock++;
     950:	0204                	addi	s1,sp,256
     952:	04090003          	lb	zero,64(s2)
    datablock++;
     956:	0100                	addi	s0,sp,128
     958:	1105                	addi	sp,sp,-31
     95a:	0306                	slli	t1,t1,0x1
     95c:	0904                	addi	s1,sp,144
     95e:	0004                	0x4
{
     960:	0501                	addi	a0,a0,0
     962:	0315                	addi	t1,t1,5
     964:	00000903          	lb	s2,0(zero) # 0 <RAM_START_ADDRESS>
    ee_u32        iterations = res->iterations;
     968:	0301                	addi	t1,t1,0
     96a:	0901                	addi	s2,s2,0
{
     96c:	0000                	unimp
     96e:	0301                	addi	t1,t1,0
     970:	0901                	addi	s2,s2,0
     972:	0000                	unimp
     974:	0501                	addi	a0,a0,0
     976:	061a                	slli	a2,a2,0x6
    res->crc                 = 0;
     978:	04090003          	lb	zero,64(s2)
    res->crcmatrix           = 0;
     97c:	0100                	addi	s0,sp,128
     97e:	1705                	addi	a4,a4,-31
    for (i = 0; i < iterations; i++)
     980:	04097f03          	0x4097f03
     984:	0100                	addi	s0,sp,128
     986:	1105                	addi	sp,sp,-31
     988:	0306                	slli	t1,t1,0x1
     98a:	0004091b          	0x4091b
        crc      = core_bench_list(res, 1);
     98e:	0501                	addi	a0,a0,0
     990:	0614                	addi	a3,sp,768
     992:	00090003          	lb	zero,0(s2)
     996:	0100                	addi	s0,sp,128
        res->crc = crcu16(crc, res->crc);
     998:	1a05                	addi	s4,s4,-31
     99a:	04090603          	lb	a2,64(s2)
     99e:	0100                	addi	s0,sp,128
        crc      = core_bench_list(res, -1);
     9a0:	1505                	addi	a0,a0,-31
     9a2:	0306                	slli	t1,t1,0x1
        res->crc = crcu16(crc, res->crc);
     9a4:	096d                	addi	s2,s2,27
     9a6:	000c                	0xc
        crc      = core_bench_list(res, -1);
     9a8:	0301                	addi	t1,t1,0
     9aa:	0901                	addi	s2,s2,0
     9ac:	0000                	unimp
     9ae:	0301                	addi	t1,t1,0
        res->crc = crcu16(crc, res->crc);
     9b0:	0901                	addi	s2,s2,0
     9b2:	0000                	unimp
     9b4:	0501                	addi	a0,a0,0
     9b6:	061a                	slli	a2,a2,0x6
     9b8:	04090003          	lb	zero,64(s2)
        if (i == 0)
     9bc:	0100                	addi	s0,sp,128
     9be:	1705                	addi	a4,a4,-31
            res->crclist = res->crc;
     9c0:	04097f03          	0x4097f03
    for (i = 0; i < iterations; i++)
     9c4:	0100                	addi	s0,sp,128
     9c6:	0f05                	addi	t5,t5,1
     9c8:	0306                	slli	t1,t1,0x1
     9ca:	00080957          	vadd.vv	v18,v0,v16,v0.t
}
     9ce:	0501                	addi	a0,a0,0
     9d0:	0309                	addi	t1,t1,2
     9d2:	00c4                	addi	s1,sp,68
     9d4:	0409                	addi	s0,s0,2
     9d6:	0100                	addi	s0,sp,128
     9d8:	1405                	addi	s0,s0,-31
     9da:	0306                	slli	t1,t1,0x1
     9dc:	0900                	addi	s0,sp,144
     9de:	0000                	unimp
     9e0:	0501                	addi	a0,a0,0
     9e2:	0609                	addi	a2,a2,2
     9e4:	04090303          	lb	t1,64(s2)
{
     9e8:	0100                	addi	s0,sp,128
     9ea:	0c05                	addi	s8,s8,1
     9ec:	0306                	slli	t1,t1,0x1
     9ee:	0900                	addi	s0,sp,144
     9f0:	0000                	unimp
     9f2:	0501                	addi	a0,a0,0
     9f4:	0609                	addi	a2,a2,2
     9f6:	04090403          	lb	s0,64(s2)
     9fa:	0100                	addi	s0,sp,128
     9fc:	1005                	c.nop	-31
     9fe:	0306                	slli	t1,t1,0x1
     a00:	0900                	addi	s0,sp,144
     a02:	0000                	unimp
     a04:	0501                	addi	a0,a0,0
     a06:	ad03060b          	0xad03060b
     a0a:	097f                	0x97f
     a0c:	0004                	0x4
     a0e:	0501                	addi	a0,a0,0
     a10:	060e                	slli	a2,a2,0x3
     a12:	00090203          	lb	tp,0(s2)
     a16:	0100                	addi	s0,sp,128
     a18:	0905                	addi	s2,s2,1
     a1a:	0306                	slli	t1,t1,0x1
    int   argc = 0;
     a1c:	00ca                	slli	ra,ra,0x12
     a1e:	0809                	addi	a6,a6,2
{
     a20:	0100                	addi	s0,sp,128
     a22:	1405                	addi	s0,s0,-31
    int   argc = 0;
     a24:	0306                	slli	t1,t1,0x1
     a26:	0900                	addi	s0,sp,144
     a28:	0000                	unimp
     a2a:	0501                	addi	a0,a0,0
     a2c:	0301                	addi	t1,t1,0
     a2e:	090c                	addi	a1,sp,144
     a30:	0008                	0x8
     a32:	0601                	addi	a2,a2,0
     a34:	097ccd03          	lbu	s10,151(s9) # 800097 <RAM_SIZE+0x7f0097>
     a38:	003c                	addi	a5,sp,8
     a3a:	0501                	addi	a0,a0,0
     a3c:	0305                	addi	t1,t1,1
     a3e:	0901                	addi	s2,s2,0
     a40:	0000                	unimp
     a42:	0301                	addi	t1,t1,0
     a44:	0901                	addi	s2,s2,0
     a46:	0000                	unimp
     a48:	0301                	addi	t1,t1,0
     a4a:	0901                	addi	s2,s2,0
	for(int i = 0; i < 12; i++) { 
     a4c:	0000                	unimp
     a4e:	0501                	addi	a0,a0,0
     a50:	0601                	addi	a2,a2,0
     a52:	00097d03          	0x97d03
    int   argc = 0;
     a56:	0100                	addi	s0,sp,128
     a58:	1005                	c.nop	-31
     a5a:	04090403          	lb	s0,64(s2)
	  uart_send_char(hello[i]);
     a5e:	0100                	addi	s0,sp,128
     a60:	0105                	addi	sp,sp,1
     a62:	04097c03          	0x4097c03
     a66:	0100                	addi	s0,sp,128
	for(int i = 0; i < 12; i++) { 
     a68:	1005                	c.nop	-31
     a6a:	20090303          	lb	t1,512(s2)
	ee_printf("Hello World\n");
     a6e:	0100                	addi	s0,sp,128
     a70:	0505                	addi	a0,a0,1
     a72:	0306                	slli	t1,t1,0x1
    portable_init(&(results[0].port), &argc, argv);
     a74:	0901                	addi	s2,s2,0
     a76:	0004                	0x4
     a78:	0301                	addi	t1,t1,0
     a7a:	0901                	addi	s2,s2,0
     a7c:	0000                	unimp
     a7e:	0301                	addi	t1,t1,0
     a80:	0901                	addi	s2,s2,0
     a82:	0000                	unimp
     a84:	0301                	addi	t1,t1,0
     a86:	0901                	addi	s2,s2,0
     a88:	0000                	unimp
     a8a:	0301                	addi	t1,t1,0
     a8c:	0901                	addi	s2,s2,0
     a8e:	0000                	unimp
     a90:	0301                	addi	t1,t1,0
     a92:	0902                	c.slli64	s2
     a94:	0000                	unimp
     a96:	0301                	addi	t1,t1,0
     a98:	00000903          	lb	s2,0(zero) # 0 <RAM_START_ADDRESS>
     a9c:	0501                	addi	a0,a0,0
     a9e:	0311                	addi	t1,t1,4
     aa0:	0900                	addi	s0,sp,144
     aa2:	0000                	unimp
     aa4:	0501                	addi	a0,a0,0
     aa6:	0605                	addi	a2,a2,1
    results[0].seed1      = get_seed(1);
     aa8:	00090003          	lb	zero,0(s2)
     aac:	0100                	addi	s0,sp,128
     aae:	0e05                	addi	t3,t3,1
     ab0:	04097d03          	0x4097d03
     ab4:	0100                	addi	s0,sp,128
     ab6:	0c05                	addi	s8,s8,1
     ab8:	04090303          	lb	t1,64(s2)
     abc:	0100                	addi	s0,sp,128
     abe:	1b05                	addi	s6,s6,-31
     ac0:	04097503          	0x4097503
     ac4:	0100                	addi	s0,sp,128
     ac6:	1005                	c.nop	-31
    results[0].seed2      = get_seed(2);
     ac8:	04090003          	lb	zero,64(s2)
    results[0].seed1      = get_seed(1);
     acc:	0100                	addi	s0,sp,128
     ace:	04097f03          	0x4097f03
    results[0].seed2      = get_seed(2);
     ad2:	0100                	addi	s0,sp,128
     ad4:	0905                	addi	s2,s2,1
     ad6:	0306                	slli	t1,t1,0x1
     ad8:	090e                	slli	s2,s2,0x3
     ada:	0004                	0x4
    results[0].seed3      = get_seed(3);
     adc:	0501                	addi	a0,a0,0
     ade:	061a                	slli	a2,a2,0x6
    results[0].seed2      = get_seed(2);
     ae0:	00090003          	lb	zero,0(s2)
    results[0].seed3      = get_seed(3);
     ae4:	0100                	addi	s0,sp,128
     ae6:	0905                	addi	s2,s2,1
     ae8:	0306                	slli	t1,t1,0x1
     aea:	0901                	addi	s2,s2,0
     aec:	0004                	0x4
     aee:	0501                	addi	a0,a0,0
    results[0].iterations = get_seed_32(4);
     af0:	0305                	addi	t1,t1,1
     af2:	0285                	addi	t0,t0,1
    results[0].seed3      = get_seed(3);
     af4:	0009                	c.nop	2
     af6:	0100                	addi	s0,sp,128
    results[0].iterations = get_seed_32(4);
     af8:	0805                	addi	a6,a6,1
     afa:	0306                	slli	t1,t1,0x1
     afc:	0900                	addi	s0,sp,144
     afe:	0000                	unimp
    results[0].execs = get_seed_32(5);
     b00:	0501                	addi	a0,a0,0
     b02:	0203060f          	0x203060f
    results[0].iterations = get_seed_32(4);
     b06:	0409                	addi	s0,s0,2
    results[0].execs = get_seed_32(5);
     b08:	0100                	addi	s0,sp,128
     b0a:	0d05                	addi	s10,s10,1
    if (results[0].execs == 0)
     b0c:	0c090103          	lb	sp,192(s2)
    results[0].execs = get_seed_32(5);
     b10:	0100                	addi	s0,sp,128
     b12:	1205                	addi	tp,tp,-31
    if ((results[0].seed1 == 0) && (results[0].seed2 == 0)
     b14:	0306                	slli	t1,t1,0x1
     b16:	0900                	addi	s0,sp,144
     b18:	0000                	unimp
     b1a:	0501                	addi	a0,a0,0
     b1c:	7f03060f          	0x7f03060f
     b20:	0409                	addi	s0,s0,2
     b22:	0100                	addi	s0,sp,128
     b24:	2305                	jal	1044 <main+0x65c>
     b26:	0306                	slli	t1,t1,0x1
     b28:	0900                	addi	s0,sp,144
     b2a:	0004                	0x4
     b2c:	0501                	addi	a0,a0,0
     b2e:	0315                	addi	t1,t1,5
     b30:	0900                	addi	s0,sp,144
     b32:	0004                	0x4
     b34:	0501                	addi	a0,a0,0
     b36:	0609                	addi	a2,a2,2
        && (results[0].seed3 == 0))
     b38:	097dfa03          	0x97dfa03
     b3c:	0008                	0x8
     b3e:	0501                	addi	a0,a0,0
     b40:	0305                	addi	t1,t1,1
     b42:	02a2                	slli	t0,t0,0x8
        if ((1 << (ee_u32)i) & results[0].execs)
     b44:	0009                	c.nop	2
     b46:	0100                	addi	s0,sp,128
    results[i].memblock[0] = stack_memblock + i * TOTAL_DATA_SIZE;
     b48:	00090103          	lb	sp,0(s2)
     b4c:	0100                	addi	s0,sp,128
     b4e:	0b05                	addi	s6,s6,1
     b50:	00090003          	lb	zero,0(s2)
     b54:	0100                	addi	s0,sp,128
     b56:	1005                	c.nop	-31
     b58:	0306                	slli	t1,t1,0x1
     b5a:	097f                	0x97f
     b5c:	0000                	unimp
     b5e:	0501                	addi	a0,a0,0
     b60:	0609                	addi	a2,a2,2
     b62:	10090303          	lb	t1,256(s2)
        if ((1 << (ee_u32)i) & results[0].execs)
     b66:	0100                	addi	s0,sp,128
     b68:	1405                	addi	s0,s0,-31
     b6a:	0306                	slli	t1,t1,0x1
            num_algorithms++;
     b6c:	0900                	addi	s0,sp,144
     b6e:	0000                	unimp
    results[i].memblock[0] = stack_memblock + i * TOTAL_DATA_SIZE;
     b70:	0501                	addi	a0,a0,0
     b72:	0609                	addi	a2,a2,2
     b74:	04090103          	lb	sp,64(s2)
    results[i].err         = 0;
     b78:	0100                	addi	s0,sp,128
     b7a:	1405                	addi	s0,s0,-31
        if ((1 << (ee_u32)i) & results[0].execs)
     b7c:	0306                	slli	t1,t1,0x1
     b7e:	0900                	addi	s0,sp,144
     b80:	0000                	unimp
     b82:	0501                	addi	a0,a0,0
            num_algorithms++;
     b84:	0609                	addi	a2,a2,2
     b86:	04090103          	lb	sp,64(s2)
        if ((1 << (ee_u32)i) & results[0].execs)
     b8a:	0100                	addi	s0,sp,128
            num_algorithms++;
     b8c:	00090103          	lb	sp,0(s2)
     b90:	0100                	addi	s0,sp,128
     b92:	0b05                	addi	s6,s6,1
     b94:	00097b03          	0x97b03
        results[i].size = results[i].size / num_algorithms;
     b98:	0100                	addi	s0,sp,128
     b9a:	0505                	addi	a0,a0,1
     b9c:	04090703          	lb	a4,64(s2)
     ba0:	0100                	addi	s0,sp,128
     ba2:	0905                	addi	s2,s2,1
     ba4:	097dd703          	lhu	a4,151(s11)
     ba8:	0000                	unimp
     baa:	0501                	addi	a0,a0,0
     bac:	060c                	addi	a1,sp,768
     bae:	00090003          	lb	zero,0(s2)
     bb2:	0100                	addi	s0,sp,128
     bb4:	0d05                	addi	s10,s10,1
     bb6:	0306                	slli	t1,t1,0x1
     bb8:	00040907          	vle8.v	v18,(s0),v0.t
     bbc:	0501                	addi	a0,a0,0
     bbe:	0620                	addi	s0,sp,776
    for (i = 0; i < NUM_ALGORITHMS; i++)
     bc0:	00090103          	lb	sp,0(s2)
        results[i].size = results[i].size / num_algorithms;
     bc4:	0100                	addi	s0,sp,128
     bc6:	1205                	addi	tp,tp,-31
    ee_u16       i, j = 0, num_algorithms = 0;
     bc8:	04097f03          	0x4097f03
        if ((1 << (ee_u32)i) & results[0].execs)
     bcc:	0100                	addi	s0,sp,128
     bce:	2005                	jal	bee <main+0x206>
    for (i = 0; i < NUM_ALGORITHMS; i++)
     bd0:	08090103          	lb	sp,128(s2)
        if ((1 << (ee_u32)i) & results[0].execs)
     bd4:	0100                	addi	s0,sp,128
     bd6:	1205                	addi	tp,tp,-31
     bd8:	04097f03          	0x4097f03
    for (i = 0; i < NUM_ALGORITHMS; i++)
     bdc:	0100                	addi	s0,sp,128
     bde:	0d05                	addi	s10,s10,1
        if ((1 << (ee_u32)i) & results[0].execs)
     be0:	0306                	slli	t1,t1,0x1
     be2:	0901                	addi	s2,s2,0
    for (i = 0; i < NUM_ALGORITHMS; i++)
     be4:	0004                	0x4
     be6:	0501                	addi	a0,a0,0
     be8:	0610                	addi	a2,sp,768
     bea:	00090003          	lb	zero,0(s2)
        if (results[i].execs & ID_LIST)
     bee:	0100                	addi	s0,sp,128
        if (results[i].execs & ID_MATRIX)
     bf0:	1105                	addi	sp,sp,-31
     bf2:	0306                	slli	t1,t1,0x1
        if (results[i].execs & ID_STATE)
     bf4:	0901                	addi	s2,s2,0
     bf6:	0008                	0x8
     bf8:	0501                	addi	a0,a0,0
     bfa:	063a                	slli	a2,a2,0xe
            core_init_state(
     bfc:	00090003          	lb	zero,0(s2)
     c00:	0100                	addi	s0,sp,128
     c02:	1805                	addi	a6,a6,-31
     c04:	08090003          	lb	zero,128(s2)
                results[0].size, results[i].seed1, results[i].memblock[3]);
     c08:	0100                	addi	s0,sp,128
     c0a:	0d05                	addi	s10,s10,1
            core_init_state(
     c0c:	0306                	slli	t1,t1,0x1
     c0e:	0902                	c.slli64	s2
     c10:	000c                	0xc
     c12:	0501                	addi	a0,a0,0
     c14:	061a                	slli	a2,a2,0x6
     c16:	00090003          	lb	zero,0(s2)
     c1a:	0100                	addi	s0,sp,128
     c1c:	1005                	c.nop	-31
     c1e:	04090003          	lb	zero,64(s2)
     c22:	0100                	addi	s0,sp,128
     c24:	1105                	addi	sp,sp,-31
     c26:	0306                	slli	t1,t1,0x1
    if (results[0].iterations == 0)
     c28:	0902                	c.slli64	s2
     c2a:	0004                	0x4
     c2c:	0301                	addi	t1,t1,0
     c2e:	0901                	addi	s2,s2,0
        results[0].iterations = 1;
     c30:	0000                	unimp
     c32:	0501                	addi	a0,a0,0
     c34:	0629                	addi	a2,a2,10
     c36:	00090003          	lb	zero,0(s2)
            iterate(&results[0]);
     c3a:	0100                	addi	s0,sp,128
            results[0].iterations *= 10;
     c3c:	2105                	jal	105c <main+0x674>
     c3e:	04090003          	lb	zero,64(s2)
            iterate(&results[0]);
     c42:	0100                	addi	s0,sp,128
     c44:	1105                	addi	sp,sp,-31
     c46:	0306                	slli	t1,t1,0x1
     c48:	0901                	addi	s2,s2,0
     c4a:	0004                	0x4
     c4c:	0501                	addi	a0,a0,0
     c4e:	00030627          	vse8.v	v12,(t1),v0.t
     c52:	0009                	c.nop	2
            results[0].iterations *= 10;
     c54:	0100                	addi	s0,sp,128
     c56:	2105                	jal	1076 <main+0x68e>
     c58:	04090003          	lb	zero,64(s2)
     c5c:	0100                	addi	s0,sp,128
     c5e:	1105                	addi	sp,sp,-31
     c60:	0306                	slli	t1,t1,0x1
     c62:	0901                	addi	s2,s2,0
     c64:	0004                	0x4
     c66:	0501                	addi	a0,a0,0
            start_time();
     c68:	0621                	addi	a2,a2,8
     c6a:	00090003          	lb	zero,0(s2)
            iterate(&results[0]);
     c6e:	0100                	addi	s0,sp,128
     c70:	0905                	addi	s2,s2,1
     c72:	0306                	slli	t1,t1,0x1
            stop_time();
     c74:	00040903          	lb	s2,0(s0)
            secs_passed = time_in_secs(get_time());
     c78:	0501                	addi	a0,a0,0
     c7a:	060c                	addi	a1,sp,768
     c7c:	00090003          	lb	zero,0(s2)
        while (secs_passed < (secs_ret)1)
     c80:	0100                	addi	s0,sp,128
     c82:	0d05                	addi	s10,s10,1
        results[0].iterations *= 1 + 10 / divisor;
     c84:	0306                	slli	t1,t1,0x1
     c86:	0901                	addi	s2,s2,0
     c88:	0004                	0x4
     c8a:	0501                	addi	a0,a0,0
     c8c:	0615                	addi	a2,a2,5
     c8e:	00090003          	lb	zero,0(s2)
     c92:	0100                	addi	s0,sp,128
     c94:	1f05                	addi	t5,t5,-31
     c96:	0200                	addi	s0,sp,256
     c98:	0204                	addi	s1,sp,256
     c9a:	0306                	slli	t1,t1,0x1
     c9c:	000c0967          	jalr	s2,s8
    start_time();
     ca0:	0501                	addi	a0,a0,0
     ca2:	0011                	c.nop	4
    iterate(&results[0]);
     ca4:	0402                	c.slli64	s0
     ca6:	0302                	c.slli64	t1
     ca8:	0900                	addi	s0,sp,144
     caa:	000c                	0xc
     cac:	0501                	addi	a0,a0,0
     cae:	0005                	c.nop	1
     cb0:	0402                	c.slli64	s0
     cb2:	0602                	c.slli64	a2
     cb4:	00090003          	lb	zero,0(s2)
     cb8:	0100                	addi	s0,sp,128
     cba:	1905                	addi	s2,s2,-31
     cbc:	04091e03          	lh	t3,64(s2)
     cc0:	0100                	addi	s0,sp,128
     cc2:	0c05                	addi	s8,s8,1
    stop_time();
     cc4:	08090003          	lb	zero,128(s2)
    total_time = get_time();
     cc8:	0100                	addi	s0,sp,128
     cca:	0505                	addi	a0,a0,1
    seedcrc = crc16(results[0].seed1, seedcrc);
     ccc:	0306                	slli	t1,t1,0x1
     cce:	0900                	addi	s0,sp,144
     cd0:	000c                	0xc
     cd2:	0301                	addi	t1,t1,0
     cd4:	0902                	c.slli64	s2
     cd6:	0000                	unimp
     cd8:	0501                	addi	a0,a0,0
     cda:	0608                	addi	a0,sp,768
    total_time = get_time();
     cdc:	00090003          	lb	zero,0(s2)
    seedcrc = crc16(results[0].seed1, seedcrc);
     ce0:	0100                	addi	s0,sp,128
     ce2:	0905                	addi	s2,s2,1
     ce4:	0306                	slli	t1,t1,0x1
     ce6:	0901                	addi	s2,s2,0
     ce8:	0004                	0x4
     cea:	0501                	addi	a0,a0,0
     cec:	0610                	addi	a2,sp,768
     cee:	00090003          	lb	zero,0(s2)
    seedcrc = crc16(results[0].seed2, seedcrc);
     cf2:	0100                	addi	s0,sp,128
    seedcrc = crc16(results[0].seed1, seedcrc);
     cf4:	0505                	addi	a0,a0,1
     cf6:	0306                	slli	t1,t1,0x1
    seedcrc = crc16(results[0].seed2, seedcrc);
     cf8:	0901                	addi	s2,s2,0
     cfa:	0010                	0x10
     cfc:	0501                	addi	a0,a0,0
     cfe:	0624                	addi	s1,sp,776
    seedcrc = crc16(results[0].seed3, seedcrc);
     d00:	00090003          	lb	zero,0(s2)
    seedcrc = crc16(results[0].seed2, seedcrc);
     d04:	0100                	addi	s0,sp,128
     d06:	0505                	addi	a0,a0,1
    seedcrc = crc16(results[0].seed3, seedcrc);
     d08:	0306                	slli	t1,t1,0x1
     d0a:	01ac                	addi	a1,sp,200
     d0c:	0409                	addi	s0,s0,2
     d0e:	0100                	addi	s0,sp,128
     d10:	00090103          	lb	sp,0(s2)
    seedcrc = crc16(results[0].size, seedcrc);
     d14:	0100                	addi	s0,sp,128
     d16:	1005                	c.nop	-31
     d18:	0306                	slli	t1,t1,0x1
     d1a:	0900                	addi	s0,sp,144
    switch (seedcrc)
     d1c:	0004                	0x4
     d1e:	0501                	addi	a0,a0,0
     d20:	0605                	addi	a2,a2,1
     d22:	04090203          	lb	tp,64(s2)
    seedcrc = crc16(results[0].size, seedcrc);
     d26:	0100                	addi	s0,sp,128
    switch (seedcrc)
     d28:	1005                	c.nop	-31
     d2a:	0306                	slli	t1,t1,0x1
     d2c:	0900                	addi	s0,sp,144
     d2e:	0000                	unimp
     d30:	0501                	addi	a0,a0,0
     d32:	0605                	addi	a2,a2,1
     d34:	04090103          	lb	sp,64(s2)
     d38:	0100                	addi	s0,sp,128
     d3a:	1505                	addi	a0,a0,-31
     d3c:	0306                	slli	t1,t1,0x1
     d3e:	0900                	addi	s0,sp,144
     d40:	0000                	unimp
     d42:	0501                	addi	a0,a0,0
     d44:	031c                	addi	a5,sp,384
     d46:	00040903          	lb	s2,0(s0)
            ee_printf("Profile generation run parameters for coremark.\n");
     d4a:	0501                	addi	a0,a0,0
     d4c:	0310                	addi	a2,sp,384
     d4e:	097d                	addi	s2,s2,31
     d50:	0004                	0x4
     d52:	0501                	addi	a0,a0,0
            known_id = 2;
     d54:	0605                	addi	a2,a2,1
     d56:	04090103          	lb	sp,64(s2)
        for (i = 0; i < default_num_contexts; i++)
     d5a:	0100                	addi	s0,sp,128
     d5c:	1005                	c.nop	-31
     d5e:	0306                	slli	t1,t1,0x1
     d60:	0900                	addi	s0,sp,144
     d62:	0000                	unimp
     d64:	0501                	addi	a0,a0,0
     d66:	0605                	addi	a2,a2,1
            results[i].err = 0;
     d68:	04090203          	lb	tp,64(s2)
     d6c:	0100                	addi	s0,sp,128
     d6e:	1005                	c.nop	-31
     d70:	0306                	slli	t1,t1,0x1
     d72:	0900                	addi	s0,sp,144
                && (results[i].crclist != list_known_crc[known_id]))
     d74:	0000                	unimp
     d76:	0501                	addi	a0,a0,0
            results[i].err = 0;
     d78:	0605                	addi	a2,a2,1
     d7a:	04090103          	lb	sp,64(s2)
     d7e:	0100                	addi	s0,sp,128
                && (results[i].crclist != list_known_crc[known_id]))
     d80:	1005                	c.nop	-31
     d82:	0306                	slli	t1,t1,0x1
            results[i].err = 0;
     d84:	0900                	addi	s0,sp,144
     d86:	0000                	unimp
                && (results[i].crclist != list_known_crc[known_id]))
     d88:	0501                	addi	a0,a0,0
     d8a:	0605                	addi	a2,a2,1
            results[i].err = 0;
     d8c:	04090103          	lb	sp,64(s2)
                && (results[i].crclist != list_known_crc[known_id]))
     d90:	0100                	addi	s0,sp,128
     d92:	097ece03          	lbu	t3,151(t4)
                ee_printf("[%u]ERROR! list crc 0x%04x - should be 0x%04x\n",
     d96:	0000                	unimp
                ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n",
     d98:	0301                	addi	t1,t1,0
     d9a:	000901e3          	beqz	s2,159c <matrix_sum+0x14>
                ee_printf("[%u]ERROR! state crc 0x%04x - should be 0x%04x\n",
     d9e:	0100                	addi	s0,sp,128
     da0:	0805                	addi	a6,a6,1
     da2:	0306                	slli	t1,t1,0x1
            total_errors += results[i].err;
     da4:	0900                	addi	s0,sp,144
     da6:	0000                	unimp
     da8:	0501                	addi	a0,a0,0
     daa:	09020323          	sb	a6,134(tp) # 86 <__do_global_dtors_aux+0x2a>
     dae:	0004                	0x4
     db0:	0501                	addi	a0,a0,0
     db2:	0315                	addi	t1,t1,5
     db4:	0900                	addi	s0,sp,144
     db6:	0004                	0x4
        for (i = 0; i < default_num_contexts; i++)
     db8:	0501                	addi	a0,a0,0
     dba:	060d                	addi	a2,a2,3
     dbc:	08090103          	lb	sp,128(s2)
            total_errors += results[i].err;
     dc0:	0100                	addi	s0,sp,128
     dc2:	1205                	addi	tp,tp,-31
        for (i = 0; i < default_num_contexts; i++)
     dc4:	0306                	slli	t1,t1,0x1
     dc6:	0900                	addi	s0,sp,144
            total_errors += results[i].err;
     dc8:	0000                	unimp
     dca:	0501                	addi	a0,a0,0
     dcc:	7f03060f          	0x7f03060f
        for (i = 0; i < default_num_contexts; i++)
     dd0:	0409                	addi	s0,s0,2
     dd2:	0100                	addi	s0,sp,128
            total_errors += results[i].err;
     dd4:	0505                	addi	a0,a0,1
     dd6:	097e9c03          	lh	s8,151(t4)
     dda:	0004                	0x4
        for (i = 0; i < default_num_contexts; i++)
     ddc:	0501                	addi	a0,a0,0
     dde:	0309                	addi	t1,t1,2
            results[i].err = 0;
     de0:	0901                	addi	s2,s2,0
     de2:	0000                	unimp
     de4:	0501                	addi	a0,a0,0
     de6:	0610                	addi	a2,sp,768
     de8:	00090003          	lb	zero,0(s2)
     dec:	0100                	addi	s0,sp,128
     dee:	0b05                	addi	s6,s6,1
     df0:	0306                	slli	t1,t1,0x1
     df2:	0901                	addi	s2,s2,0
     df4:	0004                	0x4
     df6:	0501                	addi	a0,a0,0
     df8:	0309                	addi	t1,t1,2
     dfa:	0902                	c.slli64	s2
            if ((results[i].execs & ID_LIST)
     dfc:	0004                	0x4
     dfe:	0501                	addi	a0,a0,0
            results[i].err = 0;
     e00:	0612                	slli	a2,a2,0x4
     e02:	00090003          	lb	zero,0(s2)
            if ((results[i].execs & ID_LIST)
     e06:	0100                	addi	s0,sp,128
     e08:	1005                	c.nop	-31
     e0a:	10090103          	lb	sp,256(s2)
                && (results[i].crclist != list_known_crc[known_id]))
     e0e:	0100                	addi	s0,sp,128
     e10:	1205                	addi	tp,tp,-31
     e12:	04097f03          	0x4097f03
     e16:	0100                	addi	s0,sp,128
                ee_printf("[%u]ERROR! list crc 0x%04x - should be 0x%04x\n",
     e18:	0905                	addi	s2,s2,1
     e1a:	0306                	slli	t1,t1,0x1
     e1c:	0901                	addi	s2,s2,0
     e1e:	0004                	0x4
     e20:	0501                	addi	a0,a0,0
     e22:	097d030b          	0x97d030b
                results[i].err++;
     e26:	0000                	unimp
     e28:	0501                	addi	a0,a0,0
     e2a:	0632                	slli	a2,a2,0xc
     e2c:	04090803          	lb	a6,64(s2)
            if ((results[i].execs & ID_MATRIX)
     e30:	0100                	addi	s0,sp,128
     e32:	1905                	addi	s2,s2,-31
     e34:	0901bf03          	0x901bf03
     e38:	0004                	0x4
     e3a:	0501                	addi	a0,a0,0
     e3c:	0605                	addi	a2,a2,1
     e3e:	097ec103          	lbu	sp,151(t4)
     e42:	0004                	0x4
     e44:	0301                	addi	t1,t1,0
     e46:	01bd                	addi	gp,gp,15
     e48:	0009                	c.nop	2
     e4a:	0100                	addi	s0,sp,128
     e4c:	00090203          	lb	tp,0(s2)
     e50:	0100                	addi	s0,sp,128
     e52:	00090103          	lb	sp,0(s2)
                && (results[i].crcmatrix != matrix_known_crc[known_id]))
     e56:	0100                	addi	s0,sp,128
     e58:	2805                	jal	e88 <main+0x4a0>
     e5a:	0306                	slli	t1,t1,0x1
     e5c:	0900                	addi	s0,sp,144
     e5e:	0000                	unimp
                ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n",
     e60:	0301                	addi	t1,t1,0
     e62:	00040903          	lb	s2,0(s0)
     e66:	0501                	addi	a0,a0,0
     e68:	030c                	addi	a1,sp,384
     e6a:	04097ebf 19050100 	0x1905010004097ebf
            if ((results[i].execs & ID_STATE)
     e72:	0901be03          	0x901be03
                results[i].err++;
     e76:	0000                	unimp
     e78:	0501                	addi	a0,a0,0
     e7a:	0605                	addi	a2,a2,1
                && (results[i].crcstate != state_known_crc[known_id]))
     e7c:	04090103          	lb	sp,64(s2)
            if ((results[i].execs & ID_STATE)
     e80:	0100                	addi	s0,sp,128
     e82:	1905                	addi	s2,s2,-31
                && (results[i].crcstate != state_known_crc[known_id]))
     e84:	0306                	slli	t1,t1,0x1
     e86:	0900                	addi	s0,sp,144
            if ((results[i].execs & ID_STATE)
     e88:	0000                	unimp
     e8a:	0501                	addi	a0,a0,0
                && (results[i].crcstate != state_known_crc[known_id]))
     e8c:	0605                	addi	a2,a2,1
     e8e:	04090203          	lb	tp,64(s2)
     e92:	0100                	addi	s0,sp,128
     e94:	1905                	addi	s2,s2,-31
     e96:	0306                	slli	t1,t1,0x1
     e98:	0900                	addi	s0,sp,144
     e9a:	0000                	unimp
     e9c:	0501                	addi	a0,a0,0
     e9e:	0605                	addi	a2,a2,1
     ea0:	04090103          	lb	sp,64(s2)
     ea4:	0100                	addi	s0,sp,128
     ea6:	0c05                	addi	s8,s8,1
            total_errors += results[i].err;
     ea8:	0306                	slli	t1,t1,0x1
     eaa:	7ebe                	flw	ft9,236(sp)
     eac:	0009                	c.nop	2
     eae:	0100                	addi	s0,sp,128
            results[i].list = core_list_init(
     eb0:	1905                	addi	s2,s2,-31
     eb2:	0901c203          	lbu	tp,144(gp) # 7420 <__global_pointer$+0x90>
     eb6:	0004                	0x4
     eb8:	0501                	addi	a0,a0,0
     eba:	0605                	addi	a2,a2,1
     ebc:	04090103          	lb	sp,64(s2)
     ec0:	0100                	addi	s0,sp,128
     ec2:	097ebd03          	0x97ebd03
     ec6:	0000                	unimp
     ec8:	0501                	addi	a0,a0,0
     eca:	060c                	addi	a1,sp,768
     ecc:	00090003          	lb	zero,0(s2)
     ed0:	0100                	addi	s0,sp,128
     ed2:	0c090203          	lb	tp,192(s2)
     ed6:	0100                	addi	s0,sp,128
     ed8:	04097e03          	0x4097e03
        if (results[i].execs & ID_MATRIX)
     edc:	0100                	addi	s0,sp,128
     ede:	0505                	addi	a0,a0,1
            results[i].list = core_list_init(
     ee0:	0306                	slli	t1,t1,0x1
     ee2:	0902                	c.slli64	s2
     ee4:	0004                	0x4
     ee6:	0301                	addi	t1,t1,0
        if (results[i].execs & ID_MATRIX)
     ee8:	0901                	addi	s2,s2,0
     eea:	0000                	unimp
                                 | (((ee_s32)results[i].seed2) << 16),
     eec:	0501                	addi	a0,a0,0
     eee:	0900030b          	0x900030b
     ef2:	0000                	unimp
     ef4:	0501                	addi	a0,a0,0
     ef6:	0309                	addi	t1,t1,2
     ef8:	0902                	c.slli64	s2
     efa:	0004                	0x4
            core_init_matrix(results[0].size,
     efc:	0501                	addi	a0,a0,0
     efe:	0612                	slli	a2,a2,0x4
                                 | (((ee_s32)results[i].seed2) << 16),
     f00:	00090003          	lb	zero,0(s2)
     f04:	0100                	addi	s0,sp,128
     f06:	1005                	c.nop	-31
                             (ee_s32)results[i].seed1
     f08:	10090103          	lb	sp,256(s2)
                                 | (((ee_s32)results[i].seed2) << 16),
     f0c:	0100                	addi	s0,sp,128
     f0e:	1205                	addi	tp,tp,-31
            core_init_matrix(results[0].size,
     f10:	04097f03          	0x4097f03
                             (ee_s32)results[i].seed1
     f14:	0100                	addi	s0,sp,128
     f16:	0905                	addi	s2,s2,1
            core_init_matrix(results[0].size,
     f18:	0306                	slli	t1,t1,0x1
     f1a:	0901                	addi	s2,s2,0
                                 | (((ee_s32)results[i].seed2) << 16),
     f1c:	0004                	0x4
     f1e:	0501                	addi	a0,a0,0
            core_init_matrix(results[0].size,
     f20:	097d030b          	0x97d030b
     f24:	0000                	unimp
     f26:	0501                	addi	a0,a0,0
     f28:	0601                	addi	a2,a2,0
     f2a:	04090903          	lb	s2,64(s2)
        if (results[i].execs & ID_STATE)
     f2e:	0100                	addi	s0,sp,128
     f30:	2405                	jal	1150 <main+0x768>
     f32:	0901d203          	lhu	tp,144(gp) # 7420 <__global_pointer$+0x90>
                ee_printf("[%u]ERROR! state crc 0x%04x - should be 0x%04x\n",
     f36:	0028                	addi	a0,sp,8
     f38:	0501                	addi	a0,a0,0
     f3a:	032d                	addi	t1,t1,11
     f3c:	0900                	addi	s0,sp,144
     f3e:	0004                	0x4
                results[i].err++;
     f40:	0501                	addi	a0,a0,0
     f42:	0315                	addi	t1,t1,5
     f44:	0900                	addi	s0,sp,144
     f46:	0004                	0x4
     f48:	0501                	addi	a0,a0,0
     f4a:	060d                	addi	a2,a2,3
     f4c:	04090103          	lb	sp,64(s2)
     f50:	0100                	addi	s0,sp,128
     f52:	1205                	addi	tp,tp,-31
     f54:	0306                	slli	t1,t1,0x1
     f56:	0900                	addi	s0,sp,144
    switch (seedcrc)
     f58:	0000                	unimp
     f5a:	0501                	addi	a0,a0,0
     f5c:	7f03060f          	0x7f03060f
     f60:	0409                	addi	s0,s0,2
     f62:	0100                	addi	s0,sp,128
     f64:	0505                	addi	a0,a0,1
     f66:	097e9603          	lh	a2,151(t4)
     f6a:	0004                	0x4
     f6c:	0501                	addi	a0,a0,0
     f6e:	0309                	addi	t1,t1,2
            ee_printf("2K performance run parameters for coremark.\n");
     f70:	0901                	addi	s2,s2,0
     f72:	0000                	unimp
     f74:	0501                	addi	a0,a0,0
     f76:	0610                	addi	a2,sp,768
     f78:	00090003          	lb	zero,0(s2)
            known_id = 3;
     f7c:	0100                	addi	s0,sp,128
     f7e:	0b05                	addi	s6,s6,1
     f80:	0306                	slli	t1,t1,0x1
     f82:	0901                	addi	s2,s2,0
        for (i = 0; i < default_num_contexts; i++)
     f84:	0004                	0x4
     f86:	0501                	addi	a0,a0,0
    total_errors += check_data_types();
     f88:	01e8030f          	0x1e8030f
    ee_printf("CoreMark Size    : %lu\n", (long unsigned)results[0].size);
     f8c:	0809                	addi	a6,a6,2
     f8e:	0100                	addi	s0,sp,128
    total_errors += check_data_types();
     f90:	3c05                	jal	9c0 <iterate+0x60>
     f92:	0306                	slli	t1,t1,0x1
    ee_printf("CoreMark Size    : %lu\n", (long unsigned)results[0].size);
     f94:	0900                	addi	s0,sp,144
     f96:	0004                	0x4
     f98:	0501                	addi	a0,a0,0
     f9a:	060d                	addi	a2,a2,3
     f9c:	08090103          	lb	sp,128(s2)
    ee_printf("Total ticks      : %lu\n", (long unsigned)total_time);
     fa0:	0100                	addi	s0,sp,128
     fa2:	1205                	addi	tp,tp,-31
     fa4:	0306                	slli	t1,t1,0x1
     fa6:	0900                	addi	s0,sp,144
     fa8:	0000                	unimp
     faa:	0501                	addi	a0,a0,0
     fac:	7f03060f          	0x7f03060f
    ee_printf("Total time (secs): %d\n", time_in_secs(total_time));
     fb0:	0409                	addi	s0,s0,2
     fb2:	0100                	addi	s0,sp,128
     fb4:	2405                	jal	11d4 <main+0x7ec>
     fb6:	0306                	slli	t1,t1,0x1
     fb8:	0900                	addi	s0,sp,144
     fba:	0004                	0x4
     fbc:	0501                	addi	a0,a0,0
     fbe:	032d                	addi	t1,t1,11
     fc0:	0900                	addi	s0,sp,144
     fc2:	0004                	0x4
     fc4:	0501                	addi	a0,a0,0
     fc6:	0315                	addi	t1,t1,5
    total_errors += check_data_types();
     fc8:	0900                	addi	s0,sp,144
     fca:	0004                	0x4
    if (time_in_secs(total_time) > 0)
     fcc:	0501                	addi	a0,a0,0
     fce:	060d                	addi	a2,a2,3
    total_errors += check_data_types();
     fd0:	097df703          	0x97df703
    if (time_in_secs(total_time) > 0)
     fd4:	0008                	0x8
     fd6:	0501                	addi	a0,a0,0
     fd8:	0628                	addi	a0,sp,776
     fda:	00090103          	lb	sp,0(s2)
    if (time_in_secs(total_time) < 10)
     fde:	0100                	addi	s0,sp,128
     fe0:	1305                	addi	t1,t1,-31
     fe2:	04097f03          	0x4097f03
     fe6:	0100                	addi	s0,sp,128
     fe8:	3705                	jal	f08 <main+0x520>
     fea:	08090103          	lb	sp,128(s2)
    ee_printf("Iterations       : %lu\n",
     fee:	0100                	addi	s0,sp,128
     ff0:	1305                	addi	t1,t1,-31
     ff2:	04097f03          	0x4097f03
        total_errors++;
     ff6:	0100                	addi	s0,sp,128
     ff8:	0d05                	addi	s10,s10,1
     ffa:	0306                	slli	t1,t1,0x1
    ee_printf("Iterations       : %lu\n",
     ffc:	0901                	addi	s2,s2,0
     ffe:	0004                	0x4
    1000:	0501                	addi	a0,a0,0
    1002:	00030637          	lui	a2,0x30
    1006:	0009                	c.nop	2
    1008:	0100                	addi	s0,sp,128
    100a:	1405                	addi	s0,s0,-31
    100c:	04090003          	lb	zero,64(s2)
    ee_printf("Compiler version : %s\n", COMPILER_VERSION);
    1010:	0100                	addi	s0,sp,128
    1012:	0e05                	addi	t3,t3,1
    1014:	14097503          	0x14097503
    1018:	0100                	addi	s0,sp,128
    101a:	0505                	addi	a0,a0,1
    101c:	04090303          	lb	t1,64(s2)
    1020:	0100                	addi	s0,sp,128
    1022:	0d05                	addi	s10,s10,1
    ee_printf("Compiler flags   : %s\n", COMPILER_FLAGS);
    1024:	0306                	slli	t1,t1,0x1
    1026:	00080907          	vle8.v	v18,(a6),v0.t
    102a:	0301                	addi	t1,t1,0
    102c:	0901                	addi	s2,s2,0
    102e:	0000                	unimp
    1030:	0501                	addi	a0,a0,0
    1032:	061c                	addi	a5,sp,768
    1034:	00090003          	lb	zero,0(s2)
    ee_printf("Memory location  : %s\n", MEM_LOCATION);
    1038:	0100                	addi	s0,sp,128
    103a:	0105                	addi	sp,sp,1
    103c:	0306                	slli	t1,t1,0x1
    103e:	080900c7          	fmsub.s	ft1,fs2,ft0,ft1,rne
    1042:	0100                	addi	s0,sp,128
    1044:	0505                	addi	a0,a0,1
    1046:	00090203          	lb	tp,0(s2)
    104a:	0100                	addi	s0,sp,128
    ee_printf("seedcrc          : 0x%04x\n", seedcrc);
    104c:	00090103          	lb	sp,0(s2)
    1050:	0100                	addi	s0,sp,128
    1052:	0105                	addi	sp,sp,1
    1054:	0306                	slli	t1,t1,0x1
    1056:	097d                	addi	s2,s2,31
    1058:	0000                	unimp
    105a:	0501                	addi	a0,a0,0
    if (results[0].execs & ID_LIST)
    105c:	0320                	addi	s0,sp,392
    105e:	000c0903          	lb	s2,0(s8)
    1062:	0501                	addi	a0,a0,0
    1064:	0301                	addi	t1,t1,0
    1066:	097d                	addi	s2,s2,31
        for (i = 0; i < default_num_contexts; i++)
    1068:	0004                	0x4
    106a:	0501                	addi	a0,a0,0
    106c:	0320                	addi	s0,sp,392
    106e:	00140903          	lb	s2,1(s0)
            ee_printf("[%d]crclist       : 0x%04x\n", i, results[i].crclist);
    1072:	0501                	addi	a0,a0,0
    1074:	030c                	addi	a1,sp,384
    1076:	0900                	addi	s0,sp,144
    1078:	0004                	0x4
    107a:	0501                	addi	a0,a0,0
    107c:	0605                	addi	a2,a2,1
    107e:	04090303          	lb	t1,64(s2)
    1082:	0100                	addi	s0,sp,128
    1084:	2905                	jal	14b4 <core_init_matrix+0x104>
    1086:	0306                	slli	t1,t1,0x1
        for (i = 0; i < default_num_contexts; i++)
    1088:	0900                	addi	s0,sp,144
    108a:	0000                	unimp
    108c:	0501                	addi	a0,a0,0
    108e:	0310                	addi	a2,sp,384
            ee_printf("[%d]crclist       : 0x%04x\n", i, results[i].crclist);
    1090:	0900                	addi	s0,sp,144
    1092:	0004                	0x4
    1094:	0501                	addi	a0,a0,0
    1096:	0605                	addi	a2,a2,1
    1098:	04090103          	lb	sp,64(s2)
    109c:	0100                	addi	s0,sp,128
    109e:	00090103          	lb	sp,0(s2)
    10a2:	0100                	addi	s0,sp,128
    10a4:	1805                	addi	a6,a6,-31
    10a6:	0306                	slli	t1,t1,0x1
    10a8:	090a                	slli	s2,s2,0x2
    10aa:	0000                	unimp
    10ac:	0301                	addi	t1,t1,0
    10ae:	097d                	addi	s2,s2,31
    10b0:	0004                	0x4
    10b2:	0301                	addi	t1,t1,0
    10b4:	0901                	addi	s2,s2,0
    10b6:	0004                	0x4
    10b8:	0301                	addi	t1,t1,0
    10ba:	0902                	c.slli64	s2
    10bc:	0004                	0x4
    10be:	0501                	addi	a0,a0,0
        for (i = 0; i < default_num_contexts; i++)
    10c0:	032a                	slli	t1,t1,0xa
    10c2:	0976                	slli	s2,s2,0x1d
    10c4:	0004                	0x4
    10c6:	0501                	addi	a0,a0,0
    10c8:	0318                	addi	a4,sp,384
    10ca:	090a                	slli	s2,s2,0x2
    10cc:	0004                	0x4
    10ce:	0301                	addi	t1,t1,0
    10d0:	097f                	0x97f
    10d2:	0004                	0x4
    10d4:	0501                	addi	a0,a0,0
    10d6:	0314                	addi	a3,sp,384
    if (results[0].execs & ID_MATRIX)
    10d8:	00cc                	addi	a1,sp,68
    10da:	0409                	addi	s0,s0,2
    10dc:	0100                	addi	s0,sp,128
    10de:	1005                	c.nop	-31
        for (i = 0; i < default_num_contexts; i++)
    10e0:	097fab03          	lw	s6,151(t6) # fffee097 <RAM_SIZE+0xfffde097>
    10e4:	0004                	0x4
    10e6:	0501                	addi	a0,a0,0
            ee_printf("[%d]crcmatrix     : 0x%04x\n", i, results[i].crcmatrix);
    10e8:	0605                	addi	a2,a2,1
    10ea:	04090203          	lb	tp,64(s2)
    10ee:	0100                	addi	s0,sp,128
    10f0:	00090103          	lb	sp,0(s2)
    10f4:	0100                	addi	s0,sp,128
    10f6:	00090103          	lb	sp,0(s2)
    10fa:	0100                	addi	s0,sp,128
    10fc:	00090303          	lb	t1,0(s2)
        for (i = 0; i < default_num_contexts; i++)
    1100:	0100                	addi	s0,sp,128
    1102:	00090103          	lb	sp,0(s2)
    1106:	0100                	addi	s0,sp,128
            ee_printf("[%d]crcmatrix     : 0x%04x\n", i, results[i].crcmatrix);
    1108:	00090103          	lb	sp,0(s2)
    110c:	0100                	addi	s0,sp,128
    110e:	00090103          	lb	sp,0(s2)
    1112:	0100                	addi	s0,sp,128
    1114:	00090103          	lb	sp,0(s2)
    1118:	0100                	addi	s0,sp,128
    111a:	0d05                	addi	s10,s10,1
    111c:	0306                	slli	t1,t1,0x1
    111e:	0900                	addi	s0,sp,144
    1120:	0000                	unimp
    1122:	0501                	addi	a0,a0,0
    1124:	0605                	addi	a2,a2,1
    1126:	04090103          	lb	sp,64(s2)
    112a:	0100                	addi	s0,sp,128
    112c:	0e05                	addi	t3,t3,1
    112e:	0306                	slli	t1,t1,0x1
    1130:	0900                	addi	s0,sp,144
    1132:	0000                	unimp
    1134:	0501                	addi	a0,a0,0
    1136:	0605                	addi	a2,a2,1
        for (i = 0; i < default_num_contexts; i++)
    1138:	04090103          	lb	sp,64(s2)
    113c:	0100                	addi	s0,sp,128
    113e:	00090103          	lb	sp,0(s2)
    1142:	0100                	addi	s0,sp,128
    1144:	00090103          	lb	sp,0(s2)
    1148:	0100                	addi	s0,sp,128
    114a:	0900c403          	lbu	s0,144(ra)
    114e:	0000                	unimp
    if (results[0].execs & ID_STATE)
    1150:	0301                	addi	t1,t1,0
    1152:	0902                	c.slli64	s2
    1154:	0000                	unimp
    1156:	0501                	addi	a0,a0,0
        for (i = 0; i < default_num_contexts; i++)
    1158:	0608                	addi	a0,sp,768
    115a:	00090003          	lb	zero,0(s2)
    115e:	0100                	addi	s0,sp,128
            ee_printf("[%d]crcstate      : 0x%04x\n", i, results[i].crcstate);
    1160:	0505                	addi	a0,a0,1
    1162:	0306                	slli	t1,t1,0x1
    1164:	0902                	c.slli64	s2
    1166:	0004                	0x4
    1168:	0501                	addi	a0,a0,0
    116a:	0615                	addi	a2,a2,5
    116c:	00090003          	lb	zero,0(s2)
    1170:	0100                	addi	s0,sp,128
    1172:	0805                	addi	a6,a6,1
    1174:	04090003          	lb	zero,64(s2)
        for (i = 0; i < default_num_contexts; i++)
    1178:	0100                	addi	s0,sp,128
    117a:	0505                	addi	a0,a0,1
    117c:	0306                	slli	t1,t1,0x1
    117e:	00040903          	lb	s2,0(s0)
            ee_printf("[%d]crcstate      : 0x%04x\n", i, results[i].crcstate);
    1182:	0301                	addi	t1,t1,0
    1184:	0901                	addi	s2,s2,0
    1186:	0000                	unimp
    1188:	0301                	addi	t1,t1,0
    118a:	0901                	addi	s2,s2,0
    118c:	0000                	unimp
    118e:	0501                	addi	a0,a0,0
    1190:	03030613          	addi	a2,t1,48
    1194:	0009                	c.nop	2
    1196:	0100                	addi	s0,sp,128
    1198:	1805                	addi	a6,a6,-31
    119a:	04097d03          	0x4097d03
    119e:	0100                	addi	s0,sp,128
    11a0:	0505                	addi	a0,a0,1
    11a2:	0306                	slli	t1,t1,0x1
    11a4:	0901                	addi	s2,s2,0
    11a6:	0004                	0x4
    11a8:	0501                	addi	a0,a0,0
    11aa:	0618                	addi	a4,sp,768
    11ac:	00090003          	lb	zero,0(s2)
        for (i = 0; i < default_num_contexts; i++)
    11b0:	0100                	addi	s0,sp,128
    11b2:	0505                	addi	a0,a0,1
    11b4:	0306                	slli	t1,t1,0x1
    11b6:	0902                	c.slli64	s2
    11b8:	0004                	0x4
    11ba:	0301                	addi	t1,t1,0
    11bc:	0901                	addi	s2,s2,0
    11be:	0000                	unimp
    11c0:	0301                	addi	t1,t1,0
    11c2:	0901                	addi	s2,s2,0
        ee_printf("[%d]crcfinal      : 0x%04x\n", i, results[i].crc);
    11c4:	0000                	unimp
    11c6:	0301                	addi	t1,t1,0
    for (i = 0; i < default_num_contexts; i++)
    11c8:	7eae                	flw	ft9,232(sp)
    11ca:	0009                	c.nop	2
        ee_printf("[%d]crcfinal      : 0x%04x\n", i, results[i].crc);
    11cc:	0100                	addi	s0,sp,128
    11ce:	1005                	c.nop	-31
    11d0:	0306                	slli	t1,t1,0x1
    11d2:	0901                	addi	s2,s2,0
    11d4:	0000                	unimp
    11d6:	0301                	addi	t1,t1,0
    11d8:	097f                	0x97f
    11da:	0004                	0x4
    for (i = 0; i < default_num_contexts; i++)
    11dc:	0501                	addi	a0,a0,0
    11de:	0605                	addi	a2,a2,1
    11e0:	08090103          	lb	sp,128(s2)
        ee_printf("[%d]crcfinal      : 0x%04x\n", i, results[i].crc);
    11e4:	0100                	addi	s0,sp,128
    11e6:	1005                	c.nop	-31
    11e8:	0306                	slli	t1,t1,0x1
    11ea:	0900                	addi	s0,sp,144
    for (i = 0; i < default_num_contexts; i++)
    11ec:	0000                	unimp
    11ee:	0501                	addi	a0,a0,0
        ee_printf("[%d]crcfinal      : 0x%04x\n", i, results[i].crc);
    11f0:	0605                	addi	a2,a2,1
    11f2:	0901d303          	lhu	t1,144(gp) # 7420 <__global_pointer$+0x90>
    11f6:	0004                	0x4
    11f8:	0501                	addi	a0,a0,0
    11fa:	0011                	c.nop	4
    11fc:	0402                	c.slli64	s0
    11fe:	0301                	addi	t1,t1,0
    1200:	7fb0                	flw	fa2,120(a5)
    1202:	0009                	c.nop	2
    1204:	0100                	addi	s0,sp,128
    1206:	0505                	addi	a0,a0,1
    1208:	0200                	addi	s0,sp,256
    120a:	0104                	addi	s1,sp,128
    120c:	0306                	slli	t1,t1,0x1
    120e:	0900                	addi	s0,sp,144
    1210:	0000                	unimp
    1212:	0501                	addi	a0,a0,0
    for (i = 0; i < default_num_contexts; i++)
    1214:	031a                	slli	t1,t1,0x6
    1216:	00040913          	mv	s2,s0
    121a:	0501                	addi	a0,a0,0
    121c:	0310                	addi	a2,sp,384
    121e:	7eea                	flw	ft9,184(sp)
    1220:	0409                	addi	s0,s0,2
    1222:	0100                	addi	s0,sp,128
    1224:	1a05                	addi	s4,s4,-31
    1226:	09019603          	lh	a2,144(gp) # 7420 <__global_pointer$+0x90>
    if (total_errors == 0)
    122a:	0004                	0x4
    if (total_errors > 0)
    122c:	0501                	addi	a0,a0,0
    122e:	0310                	addi	a2,sp,384
        ee_printf("Errors detected\n");
    1230:	7eea                	flw	ft9,184(sp)
    1232:	0809                	addi	a6,a6,2
    1234:	0100                	addi	s0,sp,128
    1236:	0905                	addi	s2,s2,1
    1238:	0200                	addi	s0,sp,256
    123a:	0304                	addi	s1,sp,384
    portable_fini(&(results[0].port));
    123c:	0306                	slli	t1,t1,0x1
    123e:	0185                	addi	gp,gp,1
    1240:	0409                	addi	s0,s0,2
    1242:	0100                	addi	s0,sp,128
}
    1244:	0200                	addi	s0,sp,256
    1246:	0304                	addi	s1,sp,384
    1248:	00090103          	lb	sp,0(s2)
    124c:	0100                	addi	s0,sp,128
    124e:	0200                	addi	s0,sp,256
    1250:	0304                	addi	s1,sp,384
    1252:	00090203          	lb	tp,0(s2)
    1256:	0100                	addi	s0,sp,128
    1258:	0200                	addi	s0,sp,256
    125a:	0304                	addi	s1,sp,384
    125c:	00090203          	lb	tp,0(s2)
    1260:	0100                	addi	s0,sp,128
    1262:	0505                	addi	a0,a0,1
    1264:	0200                	addi	s0,sp,256
    1266:	0304                	addi	s1,sp,384
    1268:	00093903          	0x93903
    126c:	0100                	addi	s0,sp,128
    126e:	0200                	addi	s0,sp,256
    1270:	0304                	addi	s1,sp,384
    1272:	00090203          	lb	tp,0(s2)
    1276:	0100                	addi	s0,sp,128
    1278:	0200                	addi	s0,sp,256
    127a:	0304                	addi	s1,sp,384
    127c:	00090203          	lb	tp,0(s2)
                    = (char *)(results[ctx].memblock[0]) + results[0].size * j;
    1280:	0100                	addi	s0,sp,128
    1282:	1a05                	addi	s4,s4,-31
    1284:	0200                	addi	s0,sp,256
    1286:	0304                	addi	s1,sp,384
    1288:	0306                	slli	t1,t1,0x1
    128a:	7fbe                	flw	ft11,236(sp)
            j++;
    128c:	0809                	addi	a6,a6,2
    128e:	0100                	addi	s0,sp,128
                    = (char *)(results[ctx].memblock[0]) + results[0].size * j;
    1290:	1705                	addi	a4,a4,-31
    1292:	0200                	addi	s0,sp,256
            j++;
    1294:	0304                	addi	s1,sp,384
    1296:	04090203          	lb	tp,64(s2)
                    = (char *)(results[ctx].memblock[0]) + results[0].size * j;
    129a:	0100                	addi	s0,sp,128
            j++;
    129c:	2205                	jal	13bc <core_init_matrix+0xc>
    129e:	0200                	addi	s0,sp,256
    12a0:	0304                	addi	s1,sp,384
    12a2:	04090003          	lb	zero,64(s2)
    if ((results[0].seed1 == 1) && (results[0].seed2 == 0)
    12a6:	0100                	addi	s0,sp,128
    12a8:	1705                	addi	a4,a4,-31
    12aa:	0200                	addi	s0,sp,256
        && (results[0].seed3 == 0))
    12ac:	0304                	addi	s1,sp,384
    12ae:	04090003          	lb	zero,64(s2)
    12b2:	0100                	addi	s0,sp,128
    12b4:	1005                	c.nop	-31
    12b6:	0200                	addi	s0,sp,256
        results[0].seed1 = 0x3415;
    12b8:	0304                	addi	s1,sp,384
    12ba:	04097f03          	0x4097f03
    12be:	0100                	addi	s0,sp,128
    12c0:	0505                	addi	a0,a0,1
    12c2:	0200                	addi	s0,sp,256
    12c4:	0304                	addi	s1,sp,384
    12c6:	0306                	slli	t1,t1,0x1
        results[0].seed3 = 0x66;
    12c8:	00c4                	addi	s1,sp,68
    12ca:	0409                	addi	s0,s0,2
    12cc:	0100                	addi	s0,sp,128
    12ce:	0200                	addi	s0,sp,256
    12d0:	0304                	addi	s1,sp,384
    12d2:	00090103          	lb	sp,0(s2)
        results[0].execs = ALL_ALGORITHMS_MASK;
    12d6:	0100                	addi	s0,sp,128
    12d8:	1c05                	addi	s8,s8,-31
    12da:	0200                	addi	s0,sp,256
    12dc:	0304                	addi	s1,sp,384
    12de:	0306                	slli	t1,t1,0x1
        ee_printf(
    12e0:	7fbd                	lui	t6,0xfffef
    12e2:	0009                	c.nop	2
    12e4:	0100                	addi	s0,sp,128
    12e6:	1405                	addi	s0,s0,-31
    12e8:	0200                	addi	s0,sp,256
    12ea:	0304                	addi	s1,sp,384
    12ec:	04093d03          	0x4093d03
        results[0].seed3 = 0x66;
    12f0:	0100                	addi	s0,sp,128
    12f2:	0505                	addi	a0,a0,1
    12f4:	0200                	addi	s0,sp,256
    12f6:	0304                	addi	s1,sp,384
    12f8:	0306                	slli	t1,t1,0x1
    12fa:	00040907          	vle8.v	v18,(s0),v0.t
    if ((results[0].seed1 == 1) && (results[0].seed2 == 0)
    12fe:	0501                	addi	a0,a0,0
        ee_printf(
    1300:	001c                	0x1c
    1302:	0402                	c.slli64	s0
    1304:	b7030603          	lb	a2,-1168(t1)
    1308:	097f                	0x97f
    130a:	0000                	unimp
    if (total_errors < 0)
    130c:	0501                	addi	a0,a0,0
    130e:	0015                	c.nop	5
        ee_printf(
    1310:	0402                	c.slli64	s0
    1312:	00c40303          	lb	t1,12(s0)
    1316:	0409                	addi	s0,s0,2
    1318:	0100                	addi	s0,sp,128
    131a:	2205                	jal	143a <core_init_matrix+0x8a>
        total_errors++;
    131c:	0200                	addi	s0,sp,256
    131e:	0304                	addi	s1,sp,384
    1320:	04094103          	lbu	sp,64(s2)
                  default_num_contexts * results[0].iterations
    1324:	0100                	addi	s0,sp,128
    1326:	0805                	addi	a6,a6,1
    1328:	0200                	addi	s0,sp,256
    132a:	0304                	addi	s1,sp,384
    132c:	04093d03          	0x4093d03
    1330:	0100                	addi	s0,sp,128
    1332:	04090203          	lb	tp,64(s2)
                      / time_in_secs(total_time));
    1336:	0100                	addi	s0,sp,128
    1338:	1805                	addi	a6,a6,-31
    133a:	04090503          	lb	a0,64(s2)
    133e:	0100                	addi	s0,sp,128
        ee_printf("Iterations/Sec   : %d\n",
    1340:	0505                	addi	a0,a0,1
    1342:	0306                	slli	t1,t1,0x1
    1344:	0901                	addi	s2,s2,0
    1346:	0004                	0x4
    1348:	0501                	addi	a0,a0,0
    134a:	0618                	addi	a4,sp,768
    134c:	00090003          	lb	zero,0(s2)
    1350:	0100                	addi	s0,sp,128
    1352:	0505                	addi	a0,a0,1
    1354:	0306                	slli	t1,t1,0x1
    1356:	0902                	c.slli64	s2
    1358:	0004                	0x4
    135a:	0501                	addi	a0,a0,0
    if (results[0].execs & ID_STATE)
    135c:	00030613          	mv	a2,t1
    1360:	0009                	c.nop	2
    1362:	0100                	addi	s0,sp,128
    1364:	0505                	addi	a0,a0,1
    1366:	0306                	slli	t1,t1,0x1
            ee_printf("6k validation run parameters for coremark.\n");
    1368:	0901                	addi	s2,s2,0
    136a:	0004                	0x4
    136c:	0301                	addi	t1,t1,0
    136e:	0901                	addi	s2,s2,0
    1370:	0000                	unimp
    1372:	0301                	addi	t1,t1,0
            known_id = 1;
    1374:	7eae                	flw	ft9,232(sp)
    1376:	0009                	c.nop	2
    1378:	0100                	addi	s0,sp,128
    137a:	1005                	c.nop	-31
            ee_printf("6k performance run parameters for coremark.\n");
    137c:	0306                	slli	t1,t1,0x1
    137e:	0900                	addi	s0,sp,144
    1380:	0000                	unimp
    1382:	0501                	addi	a0,a0,0
    1384:	0605                	addi	a2,a2,1
    1386:	04090103          	lb	sp,64(s2)
            known_id = 0;
    138a:	0100                	addi	s0,sp,128
    138c:	1005                	c.nop	-31
    138e:	0306                	slli	t1,t1,0x1
            ee_printf("2K validation run parameters for coremark.\n");
    1390:	0900                	addi	s0,sp,144
    1392:	0000                	unimp
    1394:	0501                	addi	a0,a0,0
    1396:	0605                	addi	a2,a2,1
    1398:	0901d303          	lhu	t1,144(gp) # 7420 <__global_pointer$+0x90>
            known_id = 4;
    139c:	0004                	0x4
    139e:	0501                	addi	a0,a0,0
    13a0:	060c                	addi	a1,sp,768
    13a2:	00090003          	lb	zero,0(s2)
    switch (seedcrc)
    13a6:	0100                	addi	s0,sp,128
    13a8:	1b05                	addi	s6,s6,-31
    13aa:	0306                	slli	t1,t1,0x1
    13ac:	7fb0                	flw	fa2,120(a5)
    13ae:	0c09                	addi	s8,s8,2
{
    13b0:	0100                	addi	s0,sp,128
    13b2:	1105                	addi	sp,sp,-31
    13b4:	00090003          	lb	zero,0(s2)
    13b8:	0100                	addi	s0,sp,128
    13ba:	0505                	addi	a0,a0,1
    13bc:	0306                	slli	t1,t1,0x1
    13be:	0900                	addi	s0,sp,144
    13c0:	0000                	unimp
    13c2:	0601                	addi	a2,a2,0
    13c4:	04090b03          	lb	s6,64(s2)
    13c8:	0100                	addi	s0,sp,128
    13ca:	00090103          	lb	sp,0(s2)
    13ce:	0100                	addi	s0,sp,128
    13d0:	00090103          	lb	sp,0(s2)
    13d4:	0100                	addi	s0,sp,128
    13d6:	0b05                	addi	s6,s6,1
    13d8:	00090003          	lb	zero,0(s2)
    13dc:	0100                	addi	s0,sp,128
    13de:	1205                	addi	tp,tp,-31
    13e0:	0306                	slli	t1,t1,0x1
    13e2:	0900                	addi	s0,sp,144
    13e4:	0000                	unimp
    13e6:	0501                	addi	a0,a0,0
    13e8:	0900030b          	0x900030b
    13ec:	0004                	0x4
    13ee:	0501                	addi	a0,a0,0
        seed = 1;
    13f0:	0316                	slli	t1,t1,0x5
    13f2:	0902                	c.slli64	s2
    if (seed == 0)
    13f4:	0004                	0x4
    13f6:	0501                	addi	a0,a0,0
    13f8:	0321                	addi	t1,t1,8
    13fa:	0906                	slli	s2,s2,0x1
    A = (MATDAT *)align_mem(memblk);
    13fc:	0008                	0x8
    13fe:	0501                	addi	a0,a0,0
    1400:	0316                	slli	t1,t1,0x5
    1402:	097a                	slli	s2,s2,0x1e
    1404:	0004                	0x4
    1406:	0501                	addi	a0,a0,0
    1408:	0321                	addi	t1,t1,8
    140a:	0906                	slli	s2,s2,0x1
    while (j < blksize)
    140c:	0008                	0x8
    140e:	0501                	addi	a0,a0,0
    1410:	0312                	slli	t1,t1,0x4
    1412:	0978                	addi	a4,sp,156
        i++;
    1414:	0008                	0x8
    1416:	0501                	addi	a0,a0,0
    1418:	0900030b          	0x900030b
        j = i * i * 2 * 4;
    141c:	0004                	0x4
    141e:	0501                	addi	a0,a0,0
    1420:	031f 0903 0004      	0x40903031f
    1426:	0501                	addi	a0,a0,0
    1428:	7d03060b          	0x7d03060b
    while (j < blksize)
    142c:	0409                	addi	s0,s0,2
    142e:	0100                	addi	s0,sp,128
    B = A + N * N;
    1430:	0905                	addi	s2,s2,1
    1432:	18090203          	lb	tp,384(s2)
    1436:	0100                	addi	s0,sp,128
    1438:	0d05                	addi	s10,s10,1
    143a:	00090103          	lb	sp,0(s2)
    143e:	0100                	addi	s0,sp,128
    1440:	00090303          	lb	t1,0(s2)
    1444:	0100                	addi	s0,sp,128
    1446:	00090103          	lb	sp,0(s2)
    p->N = N;
    144a:	0100                	addi	s0,sp,128
    B = A + N * N;
    144c:	1405                	addi	s0,s0,-31
    144e:	0306                	slli	t1,t1,0x1
    for (i = 0; i < N; i++)
    1450:	097f                	0x97f
    1452:	0000                	unimp
    1454:	0501                	addi	a0,a0,0
    1456:	0330                	addi	a2,sp,392
            seed         = ((order * seed) % 65536);
    1458:	0902                	c.slli64	s2
    145a:	0004                	0x4
    B = A + N * N;
    145c:	0501                	addi	a0,a0,0
    145e:	0324                	addi	s1,sp,392
    1460:	0901                	addi	s2,s2,0
    1462:	0004                	0x4
    1464:	0501                	addi	a0,a0,0
    1466:	0321                	addi	t1,t1,8
    1468:	097f                	0x97f
    146a:	0004                	0x4
            seed         = ((order * seed) % 65536);
    146c:	0501                	addi	a0,a0,0
    146e:	097b0313          	addi	t1,s6,151
            order++;
    1472:	0004                	0x4
        for (j = 0; j < N; j++)
    1474:	0501                	addi	a0,a0,0
    1476:	030c                	addi	a1,sp,384
    1478:	097f                	0x97f
    147a:	0004                	0x4
        seed = 1;
    147c:	0501                	addi	a0,a0,0
    147e:	031f 0905 0004      	0x40905031f
            seed         = ((order * seed) % 65536);
    1484:	0501                	addi	a0,a0,0
    1486:	7903060b          	0x7903060b
    148a:	0409                	addi	s0,s0,2
    148c:	0100                	addi	s0,sp,128
    148e:	1205                	addi	tp,tp,-31
    1490:	0306                	slli	t1,t1,0x1
    1492:	0900                	addi	s0,sp,144
    1494:	0000                	unimp
    1496:	0501                	addi	a0,a0,0
    1498:	0900030b          	0x900030b
    149c:	0004                	0x4
    149e:	0501                	addi	a0,a0,0
    14a0:	0605                	addi	a2,a2,1
    14a2:	18090e03          	lb	t3,384(s2)
    14a6:	0100                	addi	s0,sp,128
    14a8:	0105                	addi	sp,sp,1
    14aa:	0306                	slli	t1,t1,0x1
            val          = (seed + order);
    14ac:	090d                	addi	s2,s2,3
    14ae:	0000                	unimp
    14b0:	0501                	addi	a0,a0,0
    14b2:	030c                	addi	a1,sp,384
    14b4:	00100973          	0x100973
            val          = (val + order);
    14b8:	0501                	addi	a0,a0,0
    14ba:	0301                	addi	t1,t1,0
            B[i * N + j] = val;
    14bc:	090d                	addi	s2,s2,3
    14be:	0004                	0x4
            val          = matrix_clip(val, 1);
    14c0:	0501                	addi	a0,a0,0
    14c2:	030c                	addi	a1,sp,384
            A[i * N + j] = val;
    14c4:	00040973          	0x40973
    14c8:	0501                	addi	a0,a0,0
    14ca:	0301                	addi	t1,t1,0
        for (j = 0; j < N; j++)
    14cc:	090d                	addi	s2,s2,3
    14ce:	0000                	unimp
            order++;
    14d0:	0501                	addi	a0,a0,0
    14d2:	030c                	addi	a1,sp,384
        for (j = 0; j < N; j++)
    14d4:	00000973          	0x973
    14d8:	0501                	addi	a0,a0,0
    14da:	0301                	addi	t1,t1,0
    14dc:	090d                	addi	s2,s2,3
    14de:	0008                	0x8
            order++;
    14e0:	0501                	addi	a0,a0,0
    14e2:	030c                	addi	a1,sp,384
    14e4:	00040973          	0x40973
    14e8:	0501                	addi	a0,a0,0
    14ea:	030d                	addi	t1,t1,3
    for (i = 0; i < N; i++)
    14ec:	095d                	addi	s2,s2,23
    14ee:	0004                	0x4
            order++;
    14f0:	0501                	addi	a0,a0,0
    14f2:	030e                	slli	t1,t1,0x3
    for (i = 0; i < N; i++)
    14f4:	0901                	addi	s2,s2,0
    14f6:	0004                	0x4
    14f8:	0901                	addi	s2,s2,0
    14fa:	000c                	0xc
    p->C = (MATRES *)align_mem(B + N * N);
    14fc:	0100                	addi	s0,sp,128
    14fe:	0401                	addi	s0,s0,0
    p->A = A;
    1500:	0010                	0x10
    1502:	0300                	addi	s0,sp,384
    1504:	5200                	lw	s0,32(a2)
    1506:	0000                	unimp
    p->C = (MATRES *)align_mem(B + N * N);
    1508:	0100                	addi	s0,sp,128
    150a:	fb01                	bnez	a4,141a <core_init_matrix+0x6a>
    150c:	0d0e                	slli	s10,s10,0x3
    150e:	0100                	addi	s0,sp,128
    1510:	0101                	addi	sp,sp,0
    1512:	0001                	nop
    1514:	0000                	unimp
    1516:	0001                	nop
    1518:	0100                	addi	s0,sp,128
    151a:	6168732f          	vamoandei64.v	zero,(a6),v22,v6,v0.t
    p->N = N;
    151e:	6572                	flw	fa0,28(sp)
}
    1520:	2f64                	fld	fs1,216(a4)
    1522:	65726f63          	bltu	tp,s7,1b80 <matrix_test+0x100>
    1526:	616d                	addi	sp,sp,240
    1528:	6b72                	flw	fs6,28(sp)
    152a:	0000                	unimp
    p->B = B;
    152c:	65726f63          	bltu	tp,s7,1b8a <matrix_test+0x10a>
    p->A = A;
    1530:	6d5f 6961 2e6e      	0x2e6e69616d5f
    p->N = N;
    1536:	00010063          	beqz	sp,1536 <core_init_matrix+0x186>
}
    153a:	6300                	flw	fs0,0(a4)
    153c:	5f65726f          	jal	tp,58b32 <RAM_SIZE+0x48b32>
    1540:	6f70                	flw	fa2,92(a4)
    1542:	7472                	flw	fs0,60(sp)
    1544:	656d                	lui	a0,0x1b
    1546:	682e                	flw	fa6,200(sp)
    1548:	0100                	addi	s0,sp,128
    154a:	0000                	unimp
    154c:	65726f63          	bltu	tp,s7,1baa <matrix_test+0x12a>
    1550:	616d                	addi	sp,sp,240
    1552:	6b72                	flw	fs6,28(sp)
    1554:	682e                	flw	fa6,200(sp)
    1556:	0100                	addi	s0,sp,128
    1558:	0000                	unimp
    155a:	0500                	addi	s0,sp,640
    155c:	0001                	nop
    155e:	0205                	addi	tp,tp,1
    1560:	0960                	addi	s0,sp,156
    1562:	0000                	unimp
    1564:	05013403          	0x5013403
    1568:	0305                	addi	t1,t1,1
    156a:	0901                	addi	s2,s2,0
    B = A + N * N;
    156c:	0000                	unimp
    156e:	0301                	addi	t1,t1,0
    1570:	0901                	addi	s2,s2,0
    1572:	0000                	unimp
    1574:	0301                	addi	t1,t1,0
    1576:	0901                	addi	s2,s2,0
    1578:	0000                	unimp
    157a:	0301                	addi	t1,t1,0
    N = i - 1;
    157c:	0901                	addi	s2,s2,0
    157e:	0000                	unimp
    B = A + N * N;
    1580:	0501                	addi	a0,a0,0
    1582:	0601                	addi	a2,a2,0
    1584:	00097c03          	0x97c03
{
    1588:	0100                	addi	s0,sp,128
    158a:	1305                	addi	t1,t1,-31
    for (i = 0; i < N; i++)
    158c:	08090403          	lb	s0,128(s2)
    1590:	0100                	addi	s0,sp,128
    1592:	0505                	addi	a0,a0,1
    1594:	0306                	slli	t1,t1,0x1
    1596:	0901                	addi	s2,s2,0
    1598:	0004                	0x4
    159a:	0301                	addi	t1,t1,0
    159c:	0901                	addi	s2,s2,0
    159e:	0000                	unimp
    15a0:	0301                	addi	t1,t1,0
    15a2:	0901                	addi	s2,s2,0
    ee_s16 ret = 0;
    15a4:	0000                	unimp
    15a6:	0301                	addi	t1,t1,0
    MATRES tmp = 0, prev = 0, cur = 0;
    15a8:	0901                	addi	s2,s2,0
    15aa:	0000                	unimp
    15ac:	0501                	addi	a0,a0,0
    15ae:	0601                	addi	a2,a2,0
    for (i = 0; i < N; i++)
    15b0:	00097803          	0x97803
        for (j = 0; j < N; j++)
    15b4:	0100                	addi	s0,sp,128
    15b6:	1e05                	addi	t3,t3,-31
{
    15b8:	0c090503          	lb	a0,192(s2)
    15bc:	0100                	addi	s0,sp,128
    15be:	04090203          	lb	tp,64(s2)
                ret += 10;
    15c2:	0100                	addi	s0,sp,128
        for (j = 0; j < N; j++)
    15c4:	0505                	addi	a0,a0,1
    15c6:	0306                	slli	t1,t1,0x1
                ret += 10;
    15c8:	00040903          	lb	s2,0(s0)
                tmp = 0;
    15cc:	0501                	addi	a0,a0,0
    15ce:	0311                	addi	t1,t1,4
        for (j = 0; j < N; j++)
    15d0:	0900                	addi	s0,sp,144
    15d2:	0000                	unimp
                ret += (cur > prev) ? 1 : 0;
    15d4:	0501                	addi	a0,a0,0
    15d6:	0605                	addi	a2,a2,1
            cur = C[i * N + j];
    15d8:	00090003          	lb	zero,0(s2)
                ret += 10;
    15dc:	0100                	addi	s0,sp,128
    15de:	0c05                	addi	s8,s8,1
    15e0:	08090003          	lb	zero,128(s2)
                ret += (cur > prev) ? 1 : 0;
    15e4:	0100                	addi	s0,sp,128
    15e6:	0905                	addi	s2,s2,1
            tmp += cur;
    15e8:	0306                	slli	t1,t1,0x1
    15ea:	0902                	c.slli64	s2
                ret += 10;
    15ec:	0004                	0x4
    15ee:	0501                	addi	a0,a0,0
                ret += (cur > prev) ? 1 : 0;
    15f0:	0614                	addi	a3,sp,768
    15f2:	00090003          	lb	zero,0(s2)
            if (tmp > clipval)
    15f6:	0100                	addi	s0,sp,128
                ret += (cur > prev) ? 1 : 0;
    15f8:	0905                	addi	s2,s2,1
    15fa:	0306                	slli	t1,t1,0x1
        for (j = 0; j < N; j++)
    15fc:	0901                	addi	s2,s2,0
    15fe:	000c                	0xc
                ret += (cur > prev) ? 1 : 0;
    1600:	0501                	addi	a0,a0,0
    1602:	0614                	addi	a3,sp,768
        for (j = 0; j < N; j++)
    1604:	00090003          	lb	zero,0(s2)
    for (i = 0; i < N; i++)
    1608:	0100                	addi	s0,sp,128
    160a:	08090103          	lb	sp,128(s2)
    160e:	0100                	addi	s0,sp,128
    1610:	1205                	addi	tp,tp,-31
    1612:	04097f03          	0x4097f03
}
    1616:	0100                	addi	s0,sp,128
    ee_s16 ret = 0;
    1618:	0905                	addi	s2,s2,1
    161a:	0306                	slli	t1,t1,0x1
}
    161c:	0901                	addi	s2,s2,0
    161e:	0004                	0x4
    for (i = 0; i < N; i++)
    1620:	0501                	addi	a0,a0,0
    1622:	0614                	addi	a3,sp,768
{
    1624:	00090003          	lb	zero,0(s2)
    1628:	0100                	addi	s0,sp,128
    162a:	0905                	addi	s2,s2,1
    162c:	0306                	slli	t1,t1,0x1
    162e:	0901                	addi	s2,s2,0
    1630:	0008                	0x8
    1632:	0501                	addi	a0,a0,0
    1634:	0614                	addi	a3,sp,768
    1636:	00090003          	lb	zero,0(s2)
    163a:	0100                	addi	s0,sp,128
    163c:	2105                	jal	1a5c <matrix_mul_matrix_bitextract+0x114>
    163e:	0306                	slli	t1,t1,0x1
    1640:	0008097b          	0x8097b
    1644:	0501                	addi	a0,a0,0
    1646:	0612                	slli	a2,a2,0x4
    1648:	00090503          	lb	a0,0(s2)
    164c:	0100                	addi	s0,sp,128
    164e:	0905                	addi	s2,s2,1
    1650:	0306                	slli	t1,t1,0x1
    1652:	0901                	addi	s2,s2,0
    1654:	0004                	0x4
    1656:	0501                	addi	a0,a0,0
    1658:	060c                	addi	a1,sp,768
    165a:	00090003          	lb	zero,0(s2)
    165e:	0100                	addi	s0,sp,128
    1660:	0d05                	addi	s10,s10,1
    1662:	0306                	slli	t1,t1,0x1
    1664:	0901                	addi	s2,s2,0
    1666:	0004                	0x4
    1668:	0501                	addi	a0,a0,0
    166a:	061a                	slli	a2,a2,0x6
    166c:	00090003          	lb	zero,0(s2)
    1670:	0100                	addi	s0,sp,128
    1672:	2205                	jal	1792 <matrix_mul_vect+0x4a>
            C[i * N + j] = (MATRES)A[i * N + j] * (MATRES)val;
    1674:	0200                	addi	s0,sp,256
    1676:	0204                	addi	s1,sp,256
    for (i = 0; i < N; i++)
    1678:	04097903          	0x4097903
    167c:	0100                	addi	s0,sp,128
    167e:	1105                	addi	sp,sp,-31
        for (j = 0; j < N; j++)
    1680:	0200                	addi	s0,sp,256
    1682:	0204                	addi	s1,sp,256
    1684:	0306                	slli	t1,t1,0x1
    1686:	0900                	addi	s0,sp,144
    1688:	0004                	0x4
    168a:	0501                	addi	a0,a0,0
{
    168c:	0005                	c.nop	1
    168e:	0402                	c.slli64	s0
            C[i * N + j] = (MATRES)A[i * N + j] * (MATRES)val;
    1690:	0602                	c.slli64	a2
    1692:	00090003          	lb	zero,0(s2)
    1696:	0100                	addi	s0,sp,128
        for (j = 0; j < N; j++)
    1698:	0306                	slli	t1,t1,0x1
    169a:	0909                	addi	s2,s2,2
            C[i * N + j] = (MATRES)A[i * N + j] * (MATRES)val;
    169c:	0004                	0x4
    169e:	0501                	addi	a0,a0,0
    16a0:	0601                	addi	a2,a2,0
    16a2:	00090103          	lb	sp,0(s2)
        for (j = 0; j < N; j++)
    16a6:	0100                	addi	s0,sp,128
    16a8:	1c09                	addi	s8,s8,-30
    16aa:	0000                	unimp
    for (i = 0; i < N; i++)
    16ac:	0101                	addi	sp,sp,0
    16ae:	0105                	addi	sp,sp,1
    16b0:	0500                	addi	s0,sp,640
    16b2:	e802                	fsw	ft0,16(sp)
    16b4:	0009                	c.nop	2
    16b6:	0300                	addi	s0,sp,384
    16b8:	00ed                	addi	ra,ra,27
    16ba:	0501                	addi	a0,a0,0
}
    16bc:	0305                	addi	t1,t1,1
    16be:	0901                	addi	s2,s2,0
    16c0:	0000                	unimp
    16c2:	0501                	addi	a0,a0,0
    16c4:	0601                	addi	a2,a2,0
    16c6:	00097f03          	0x97f03
    16ca:	0100                	addi	s0,sp,128
    16cc:	0b05                	addi	s6,s6,1
    16ce:	34090103          	lb	sp,832(s2)
    16d2:	0100                	addi	s0,sp,128
    16d4:	0105                	addi	sp,sp,1
    16d6:	04097f03          	0x4097f03
    16da:	0100                	addi	s0,sp,128
    16dc:	0b05                	addi	s6,s6,1
    16de:	04090103          	lb	sp,64(s2)
    16e2:	0100                	addi	s0,sp,128
    16e4:	0505                	addi	a0,a0,1
    16e6:	0306                	slli	t1,t1,0x1
    16e8:	0901                	addi	s2,s2,0
    16ea:	0028                	addi	a0,sp,8
    16ec:	0501                	addi	a0,a0,0
    16ee:	0302                	c.slli64	t1
    16f0:	0906                	slli	s2,s2,0x1
    16f2:	0000                	unimp
    16f4:	0301                	addi	t1,t1,0
    16f6:	0901                	addi	s2,s2,0
    for (i = 0; i < N; i++)
    16f8:	0000                	unimp
    16fa:	0501                	addi	a0,a0,0
    16fc:	0306                	slli	t1,t1,0x1
    16fe:	0900                	addi	s0,sp,144
    1700:	0000                	unimp
    1702:	0501                	addi	a0,a0,0
            A[i * N + j] += val;
    1704:	0311                	addi	t1,t1,4
    1706:	0900                	addi	s0,sp,144
    1708:	0000                	unimp
    170a:	0501                	addi	a0,a0,0
    170c:	7803060b          	0x7803060b
    1710:	0809                	addi	a6,a6,2
    1712:	0100                	addi	s0,sp,128
    for (i = 0; i < N; i++)
    1714:	1805                	addi	a6,a6,-31
    1716:	08090903          	lb	s2,128(s2)
    171a:	0100                	addi	s0,sp,128
        for (j = 0; j < N; j++)
    171c:	0405                	addi	s0,s0,1
    171e:	0200                	addi	s0,sp,256
{
    1720:	0304                	addi	s1,sp,384
    1722:	0306                	slli	t1,t1,0x1
            A[i * N + j] += val;
    1724:	0900                	addi	s0,sp,144
    1726:	0008                	0x8
        for (j = 0; j < N; j++)
    1728:	0501                	addi	a0,a0,0
    172a:	0019                	c.nop	6
            A[i * N + j] += val;
    172c:	0402                	c.slli64	s0
    172e:	097f0303          	lb	t1,151(t5)
    1732:	0004                	0x4
        for (j = 0; j < N; j++)
    1734:	0501                	addi	a0,a0,0
    1736:	0011                	c.nop	4
    for (i = 0; i < N; i++)
    1738:	0402                	c.slli64	s0
    173a:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    173e:	0000                	unimp
    1740:	0501                	addi	a0,a0,0
    1742:	0002                	c.slli64	zero
}
    1744:	0402                	c.slli64	s0
    1746:	00030603          	lb	a2,0(t1)
    for (i = 0; i < N; i++)
    174a:	0009                	c.nop	2
{
    174c:	0100                	addi	s0,sp,128
    174e:	0306                	slli	t1,t1,0x1
    1750:	00040903          	lb	s2,0(s0)
    1754:	0501                	addi	a0,a0,0
    1756:	0305                	addi	t1,t1,1
    1758:	0901                	addi	s2,s2,0
    175a:	0008                	0x8
    175c:	0301                	addi	t1,t1,0
    175e:	0901                	addi	s2,s2,0
    1760:	0000                	unimp
    1762:	0301                	addi	t1,t1,0
        C[i] = 0;
    1764:	0901                	addi	s2,s2,0
    1766:	0000                	unimp
{
    1768:	0301                	addi	t1,t1,0
    176a:	0901                	addi	s2,s2,0
    176c:	0000                	unimp
    176e:	0301                	addi	t1,t1,0
    1770:	0901                	addi	s2,s2,0
    1772:	0000                	unimp
    1774:	0301                	addi	t1,t1,0
    1776:	0902                	c.slli64	s2
    1778:	0000                	unimp
    177a:	0301                	addi	t1,t1,0
        C[i] = 0;
    177c:	00000903          	lb	s2,0(zero) # 0 <RAM_START_ADDRESS>
    1780:	0301                	addi	t1,t1,0
    1782:	0902                	c.slli64	s2
    1784:	0034                	addi	a3,sp,8
    1786:	0301                	addi	t1,t1,0
    1788:	0905                	addi	s2,s2,1
    178a:	0000                	unimp
{
    178c:	0501                	addi	a0,a0,0
    178e:	061d                	addi	a2,a2,7
    1790:	00090003          	lb	zero,0(s2)
    1794:	0100                	addi	s0,sp,128
    1796:	1b05                	addi	s6,s6,-31
    1798:	08090003          	lb	zero,128(s2)
    179c:	0100                	addi	s0,sp,128
    179e:	1d05                	addi	s10,s10,-31
    17a0:	0c090003          	lb	zero,192(s2)
        C[i] = 0;
    17a4:	0100                	addi	s0,sp,128
    17a6:	1b05                	addi	s6,s6,-31
    17a8:	04090003          	lb	zero,64(s2)
    17ac:	0100                	addi	s0,sp,128
    17ae:	1d05                	addi	s10,s10,-31
        for (j = 0; j < N; j++)
    17b0:	04090003          	lb	zero,64(s2)
    17b4:	0100                	addi	s0,sp,128
    17b6:	0505                	addi	a0,a0,1
        C[i] = 0;
    17b8:	0306                	slli	t1,t1,0x1
    17ba:	0901                	addi	s2,s2,0
    17bc:	0004                	0x4
    17be:	0501                	addi	a0,a0,0
            C[i] += (MATRES)A[i * N + j] * (MATRES)B[j];
    17c0:	061d                	addi	a2,a2,7
    17c2:	00090003          	lb	zero,0(s2)
    17c6:	0100                	addi	s0,sp,128
        for (j = 0; j < N; j++)
    17c8:	1b05                	addi	s6,s6,-31
    17ca:	04097f03          	0x4097f03
    17ce:	0100                	addi	s0,sp,128
            C[i] += (MATRES)A[i * N + j] * (MATRES)B[j];
    17d0:	1d05                	addi	s10,s10,-31
    17d2:	04090103          	lb	sp,64(s2)
    17d6:	0100                	addi	s0,sp,128
        for (j = 0; j < N; j++)
    17d8:	0c090103          	lb	sp,192(s2)
    17dc:	0100                	addi	s0,sp,128
    17de:	04097f03          	0x4097f03
    for (i = 0; i < N; i++)
    17e2:	0100                	addi	s0,sp,128
    17e4:	0505                	addi	a0,a0,1
    17e6:	0306                	slli	t1,t1,0x1
    17e8:	0901                	addi	s2,s2,0
    17ea:	0004                	0x4
}
    17ec:	0501                	addi	a0,a0,0
    17ee:	061d                	addi	a2,a2,7
    17f0:	00090003          	lb	zero,0(s2)
    17f4:	0100                	addi	s0,sp,128
    17f6:	0c090103          	lb	sp,192(s2)
    17fa:	0100                	addi	s0,sp,128
    17fc:	04097f03          	0x4097f03
    1800:	0100                	addi	s0,sp,128
    1802:	0505                	addi	a0,a0,1
    1804:	0306                	slli	t1,t1,0x1
    1806:	0901                	addi	s2,s2,0
    1808:	0004                	0x4
    180a:	0501                	addi	a0,a0,0
    180c:	061d                	addi	a2,a2,7
    180e:	00090003          	lb	zero,0(s2)
    1812:	0100                	addi	s0,sp,128
    1814:	1805                	addi	a6,a6,-31
    1816:	08090403          	lb	s0,128(s2)
    181a:	0100                	addi	s0,sp,128
    181c:	1b05                	addi	s6,s6,-31
    181e:	04097c03          	0x4097c03
    1822:	0100                	addi	s0,sp,128
{
    1824:	0505                	addi	a0,a0,1
    1826:	0306                	slli	t1,t1,0x1
    1828:	0904                	addi	s1,sp,144
    182a:	0004                	0x4
    182c:	0501                	addi	a0,a0,0
    182e:	0618                	addi	a4,sp,768
    1830:	00090003          	lb	zero,0(s2)
    1834:	0100                	addi	s0,sp,128
    1836:	0505                	addi	a0,a0,1
    1838:	0306                	slli	t1,t1,0x1
    183a:	0901                	addi	s2,s2,0
    183c:	0004                	0x4
    183e:	0501                	addi	a0,a0,0
    1840:	0608                	addi	a0,sp,768
    1842:	00090003          	lb	zero,0(s2)
    1846:	0100                	addi	s0,sp,128
    1848:	1605                	addi	a2,a2,-31
    184a:	04097f03          	0x4097f03
    184e:	0100                	addi	s0,sp,128
    1850:	0505                	addi	a0,a0,1
    1852:	0306                	slli	t1,t1,0x1
    1854:	0906                	slli	s2,s2,0x1
    1856:	0004                	0x4
    1858:	0501                	addi	a0,a0,0
    185a:	0621                	addi	a2,a2,8
    185c:	00090003          	lb	zero,0(s2)
    1860:	0100                	addi	s0,sp,128
    1862:	0805                	addi	a6,a6,1
    for (i = 0; i < N; i++)
    1864:	20090003          	lb	zero,512(s2)
    1868:	0100                	addi	s0,sp,128
    186a:	0905                	addi	s2,s2,1
            C[i * N + j] = 0;
    186c:	04090103          	lb	sp,64(s2)
    1870:	0100                	addi	s0,sp,128
    1872:	0d05                	addi	s10,s10,1
    1874:	0306                	slli	t1,t1,0x1
    1876:	0924                	addi	s1,sp,152
    1878:	000c                	0xc
    187a:	0501                	addi	a0,a0,0
    187c:	0305                	addi	t1,t1,1
    187e:	0902                	c.slli64	s2
    1880:	0000                	unimp
    1882:	0501                	addi	a0,a0,0
    for (i = 0; i < N; i++)
    1884:	062a                	slli	a2,a2,0xa
    1886:	00090f03          	lb	t5,0(s2)
        for (j = 0; j < N; j++)
    188a:	0100                	addi	s0,sp,128
            C[i * N + j] = 0;
    188c:	1c05                	addi	s8,s8,-31
    188e:	04097103          	0x4097103
    1892:	0100                	addi	s0,sp,128
    1894:	1e05                	addi	t3,t3,-31
    1896:	1c090f03          	lb	t5,448(s2)
    189a:	0100                	addi	s0,sp,128
    189c:	0c05                	addi	s8,s8,1
    189e:	04090003          	lb	zero,64(s2)
    18a2:	0100                	addi	s0,sp,128
    18a4:	1b05                	addi	s6,s6,-31
    18a6:	04090103          	lb	sp,64(s2)
        for (j = 0; j < N; j++)
    18aa:	0100                	addi	s0,sp,128
            for (k = 0; k < N; k++)
    18ac:	1c05                	addi	s8,s8,-31
    18ae:	04097003          	0x4097003
    18b2:	0100                	addi	s0,sp,128
    18b4:	0505                	addi	a0,a0,1
    18b6:	0306                	slli	t1,t1,0x1
                C[i * N + j] += (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
    18b8:	0901                	addi	s2,s2,0
    18ba:	0008                	0x8
    18bc:	0301                	addi	t1,t1,0
    18be:	0901                	addi	s2,s2,0
            for (k = 0; k < N; k++)
    18c0:	0000                	unimp
    18c2:	0301                	addi	t1,t1,0
    18c4:	0901                	addi	s2,s2,0
    18c6:	0000                	unimp
                C[i * N + j] += (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
    18c8:	0301                	addi	t1,t1,0
    18ca:	0901                	addi	s2,s2,0
    18cc:	0000                	unimp
    18ce:	0301                	addi	t1,t1,0
            for (k = 0; k < N; k++)
    18d0:	0901                	addi	s2,s2,0
    18d2:	0000                	unimp
    18d4:	0501                	addi	a0,a0,0
    18d6:	061c                	addi	a5,sp,768
        for (j = 0; j < N; j++)
    18d8:	00090003          	lb	zero,0(s2)
    18dc:	0100                	addi	s0,sp,128
    18de:	0505                	addi	a0,a0,1
    18e0:	0306                	slli	t1,t1,0x1
    18e2:	0901                	addi	s2,s2,0
    18e4:	0004                	0x4
    18e6:	0501                	addi	a0,a0,0
    18e8:	031e                	slli	t1,t1,0x7
    18ea:	0978                	addi	a4,sp,156
    18ec:	0000                	unimp
    18ee:	0501                	addi	a0,a0,0
    for (i = 0; i < N; i++)
    18f0:	030d                	addi	t1,t1,3
    18f2:	0900                	addi	s0,sp,144
    18f4:	0000                	unimp
    18f6:	0501                	addi	a0,a0,0
    18f8:	0311                	addi	t1,t1,4
    18fa:	0000090f          	0x90f
    18fe:	0501                	addi	a0,a0,0
    1900:	0309                	addi	t1,t1,2
    1902:	0902                	c.slli64	s2
    1904:	0000                	unimp
    1906:	0501                	addi	a0,a0,0
    1908:	0325                	addi	t1,t1,9
    190a:	097e                	slli	s2,s2,0x1f
}
    190c:	0000                	unimp
    190e:	0501                	addi	a0,a0,0
    1910:	0311                	addi	t1,t1,4
    1912:	0900                	addi	s0,sp,144
    1914:	0000                	unimp
    1916:	0501                	addi	a0,a0,0
    1918:	0309                	addi	t1,t1,2
    191a:	0902                	c.slli64	s2
    191c:	0000                	unimp
    191e:	0501                	addi	a0,a0,0
    1920:	061e                	slli	a2,a2,0x7
    1922:	00090003          	lb	zero,0(s2)
    1926:	0100                	addi	s0,sp,128
    1928:	1b05                	addi	s6,s6,-31
    192a:	08090103          	lb	sp,128(s2)
    192e:	0100                	addi	s0,sp,128
    1930:	2505                	jal	1f50 <barebones_clock+0x1c>
    1932:	0306                	slli	t1,t1,0x1
    1934:	097d                	addi	s2,s2,31
    1936:	0004                	0x4
    1938:	0501                	addi	a0,a0,0
    193a:	0311                	addi	t1,t1,4
    193c:	0900                	addi	s0,sp,144
    193e:	0000                	unimp
    1940:	0501                	addi	a0,a0,0
    1942:	0309                	addi	t1,t1,2
    1944:	0902                	c.slli64	s2
    1946:	0000                	unimp
{
    1948:	0501                	addi	a0,a0,0
    194a:	060c                	addi	a1,sp,768
    194c:	00090003          	lb	zero,0(s2)
    1950:	0100                	addi	s0,sp,128
    1952:	0d05                	addi	s10,s10,1
    1954:	0306                	slli	t1,t1,0x1
    1956:	0901                	addi	s2,s2,0
    1958:	0004                	0x4
    195a:	0501                	addi	a0,a0,0
    195c:	0003061b          	0x3061b
    1960:	0009                	c.nop	2
    1962:	0100                	addi	s0,sp,128
    1964:	2505                	jal	1f84 <start_time+0x20>
    1966:	0200                	addi	s0,sp,256
    1968:	0204                	addi	s1,sp,256
    196a:	0306                	slli	t1,t1,0x1
    196c:	097d                	addi	s2,s2,31
    196e:	000c                	0xc
    1970:	0501                	addi	a0,a0,0
    1972:	0011                	c.nop	4
    1974:	0402                	c.slli64	s0
    1976:	0302                	c.slli64	t1
    1978:	0900                	addi	s0,sp,144
    197a:	0000                	unimp
    197c:	0001                	nop
    197e:	0402                	c.slli64	s0
    1980:	0302                	c.slli64	t1
    1982:	0905                	addi	s2,s2,1
    1984:	0000                	unimp
    1986:	0501                	addi	a0,a0,0
    for (i = 0; i < N; i++)
    1988:	0009                	c.nop	2
    198a:	0402                	c.slli64	s0
    198c:	0302                	c.slli64	t1
    198e:	0901                	addi	s2,s2,0
            C[i * N + j] = 0;
    1990:	0000                	unimp
    1992:	0501                	addi	a0,a0,0
    1994:	0402002b          	0x402002b
    1998:	0602                	c.slli64	a2
    199a:	00090003          	lb	zero,0(s2)
    199e:	0100                	addi	s0,sp,128
    19a0:	1905                	addi	s2,s2,-31
    19a2:	0200                	addi	s0,sp,256
    19a4:	0204                	addi	s1,sp,256
    19a6:	24090003          	lb	zero,576(s2)
    for (i = 0; i < N; i++)
    19aa:	0100                	addi	s0,sp,128
        for (j = 0; j < N; j++)
    19ac:	2205                	jal	1acc <matrix_test+0x4c>
    19ae:	0200                	addi	s0,sp,256
            C[i * N + j] = 0;
    19b0:	0204                	addi	s1,sp,256
    19b2:	0306                	slli	t1,t1,0x1
    19b4:	097f                	0x97f
    19b6:	0004                	0x4
    19b8:	0501                	addi	a0,a0,0
    19ba:	0011                	c.nop	4
    19bc:	0402                	c.slli64	s0
    19be:	0302                	c.slli64	t1
    19c0:	0900                	addi	s0,sp,144
    19c2:	0000                	unimp
    19c4:	0001                	nop
    19c6:	0402                	c.slli64	s0
    19c8:	0302                	c.slli64	t1
    19ca:	00000903          	lb	s2,0(zero) # 0 <RAM_START_ADDRESS>
        for (j = 0; j < N; j++)
    19ce:	0501                	addi	a0,a0,0
            for (k = 0; k < N; k++)
    19d0:	0019                	c.nop	6
    19d2:	0402                	c.slli64	s0
    19d4:	0602                	c.slli64	a2
    19d6:	04097e03          	0x4097e03
    19da:	0100                	addi	s0,sp,128
                MATRES tmp = (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
    19dc:	1505                	addi	a0,a0,-31
    19de:	0200                	addi	s0,sp,256
    19e0:	0204                	addi	s1,sp,256
    19e2:	097fa903          	lw	s2,151(t6) # fffef097 <RAM_SIZE+0xfffdf097>
            for (k = 0; k < N; k++)
    19e6:	0004                	0x4
    19e8:	0501                	addi	a0,a0,0
    19ea:	0010                	0x10
                MATRES tmp = (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
    19ec:	0402                	c.slli64	s0
    19ee:	0302                	c.slli64	t1
                C[i * N + j] += bit_extract(tmp, 2, 4) * bit_extract(tmp, 5, 7);
    19f0:	00dc                	addi	a5,sp,68
    19f2:	0409                	addi	s0,s0,2
    19f4:	0100                	addi	s0,sp,128
    19f6:	0505                	addi	a0,a0,1
    19f8:	0200                	addi	s0,sp,256
    19fa:	0204                	addi	s1,sp,256
    19fc:	04097d03          	0x4097d03
    1a00:	0100                	addi	s0,sp,128
    1a02:	0905                	addi	s2,s2,1
    1a04:	0306                	slli	t1,t1,0x1
    1a06:	0902                	c.slli64	s2
            for (k = 0; k < N; k++)
    1a08:	0004                	0x4
    1a0a:	0301                	addi	t1,t1,0
    1a0c:	0901                	addi	s2,s2,0
    1a0e:	0000                	unimp
        for (j = 0; j < N; j++)
    1a10:	0501                	addi	a0,a0,0
    1a12:	0610                	addi	a2,sp,768
    1a14:	00090003          	lb	zero,0(s2)
    1a18:	0100                	addi	s0,sp,128
    1a1a:	1e05                	addi	t3,t3,-31
    1a1c:	04090003          	lb	zero,64(s2)
    1a20:	0100                	addi	s0,sp,128
    1a22:	0505                	addi	a0,a0,1
    1a24:	04097d03          	0x4097d03
    for (i = 0; i < N; i++)
    1a28:	0100                	addi	s0,sp,128
    1a2a:	0c05                	addi	s8,s8,1
    1a2c:	04090303          	lb	t1,64(s2)
    1a30:	0100                	addi	s0,sp,128
    1a32:	2505                	jal	2052 <core_init_state+0x46>
    1a34:	0200                	addi	s0,sp,256
    1a36:	0204                	addi	s1,sp,256
    1a38:	0306                	slli	t1,t1,0x1
    1a3a:	097d                	addi	s2,s2,31
    1a3c:	0004                	0x4
    1a3e:	0501                	addi	a0,a0,0
    1a40:	0011                	c.nop	4
    1a42:	0402                	c.slli64	s0
}
    1a44:	0302                	c.slli64	t1
    1a46:	0900                	addi	s0,sp,144
    1a48:	0000                	unimp
    1a4a:	0501                	addi	a0,a0,0
    1a4c:	0005                	c.nop	1
    1a4e:	0402                	c.slli64	s0
    1a50:	0602                	c.slli64	a2
    1a52:	00090003          	lb	zero,0(s2)
    1a56:	0100                	addi	s0,sp,128
    1a58:	1105                	addi	sp,sp,-31
    1a5a:	0306                	slli	t1,t1,0x1
    1a5c:	090c                	addi	a1,sp,144
    1a5e:	0008                	0x8
    1a60:	0501                	addi	a0,a0,0
    1a62:	0309                	addi	t1,t1,2
    1a64:	0902                	c.slli64	s2
    1a66:	0000                	unimp
    1a68:	0501                	addi	a0,a0,0
    1a6a:	060c                	addi	a1,sp,768
    1a6c:	00090003          	lb	zero,0(s2)
    1a70:	0100                	addi	s0,sp,128
    1a72:	0905                	addi	s2,s2,1
    1a74:	0306                	slli	t1,t1,0x1
    1a76:	0905                	addi	s2,s2,1
    1a78:	0004                	0x4
    1a7a:	0501                	addi	a0,a0,0
    1a7c:	060c                	addi	a1,sp,768
    1a7e:	00090003          	lb	zero,0(s2)
{
    1a82:	0100                	addi	s0,sp,128
    1a84:	0905                	addi	s2,s2,1
    1a86:	0306                	slli	t1,t1,0x1
    1a88:	0908                	addi	a0,sp,144
    1a8a:	0004                	0x4
    MATDAT clipval = matrix_big(val);
    1a8c:	0501                	addi	a0,a0,0
    1a8e:	061e                	slli	a2,a2,0x7
{
    1a90:	00090003          	lb	zero,0(s2)
    1a94:	0100                	addi	s0,sp,128
    1a96:	0c05                	addi	s8,s8,1
    1a98:	04090003          	lb	zero,64(s2)
    1a9c:	0100                	addi	s0,sp,128
    1a9e:	0d05                	addi	s10,s10,1
    1aa0:	0306                	slli	t1,t1,0x1
    1aa2:	0902                	c.slli64	s2
    1aa4:	0004                	0x4
    1aa6:	0501                	addi	a0,a0,0
    1aa8:	01030647          	fmsub.s	fa2,ft6,fa6,ft0,rne
    1aac:	0c09                	addi	s8,s8,2
    1aae:	0100                	addi	s0,sp,128
    1ab0:	0d05                	addi	s10,s10,1
    1ab2:	04097f03          	0x4097f03
    1ab6:	0100                	addi	s0,sp,128
    1ab8:	1105                	addi	sp,sp,-31
    1aba:	0306                	slli	t1,t1,0x1
    1abc:	001c096f          	jal	s2,c22bc <RAM_SIZE+0xb22bc>
    1ac0:	0501                	addi	a0,a0,0
    1ac2:	0305                	addi	t1,t1,1
    1ac4:	00000917          	auipc	s2,0x0
    MATDAT clipval = matrix_big(val);
    1ac8:	0501                	addi	a0,a0,0
    1aca:	0608                	addi	a0,sp,768
    for (i = 0; i < N; i++)
    1acc:	00090003          	lb	zero,0(s2) # 1ac4 <matrix_test+0x44>
    1ad0:	0100                	addi	s0,sp,128
    1ad2:	0905                	addi	s2,s2,1
    1ad4:	0306                	slli	t1,t1,0x1
    1ad6:	0902                	c.slli64	s2
    1ad8:	0008                	0x8
    1ada:	0301                	addi	t1,t1,0
    1adc:	0901                	addi	s2,s2,0
    1ade:	0000                	unimp
            A[i * N + j] += val;
    1ae0:	0301                	addi	t1,t1,0
    1ae2:	0901                	addi	s2,s2,0
    1ae4:	0000                	unimp
    1ae6:	0501                	addi	a0,a0,0
    1ae8:	061f 0003 0009      	0x90003061f
    1aee:	0100                	addi	s0,sp,128
    1af0:	0905                	addi	s2,s2,1
    1af2:	0306                	slli	t1,t1,0x1
    1af4:	0901                	addi	s2,s2,0
    1af6:	0008                	0x8
    for (i = 0; i < N; i++)
    1af8:	0501                	addi	a0,a0,0
    1afa:	0900030f          	0x900030f
    1afe:	0000                	unimp
        for (j = 0; j < N; j++)
    1b00:	0501                	addi	a0,a0,0
    1b02:	060d                	addi	a2,a2,3
    1b04:	00090403          	lb	s0,0(s2)
{
    1b08:	0100                	addi	s0,sp,128
    1b0a:	2305                	jal	202a <core_init_state+0x1e>
            A[i * N + j] += val;
    1b0c:	04097e03          	0x4097e03
        for (j = 0; j < N; j++)
    1b10:	0100                	addi	s0,sp,128
    1b12:	0d05                	addi	s10,s10,1
            A[i * N + j] += val;
    1b14:	04090203          	lb	tp,64(s2)
    1b18:	0100                	addi	s0,sp,128
    1b1a:	0306                	slli	t1,t1,0x1
        for (j = 0; j < N; j++)
    1b1c:	097e                	slli	s2,s2,0x1f
    1b1e:	0014                	0x14
    for (i = 0; i < N; i++)
    1b20:	0501                	addi	a0,a0,0
    1b22:	00030623          	sb	zero,12(t1)
    1b26:	0009                	c.nop	2
    1b28:	0100                	addi	s0,sp,128
    1b2a:	0d05                	addi	s10,s10,1
    1b2c:	0306                	slli	t1,t1,0x1
    1b2e:	0901                	addi	s2,s2,0
    1b30:	0014                	0x14
    1b32:	0301                	addi	t1,t1,0
            C[i * N + j] = (MATRES)A[i * N + j] * (MATRES)val;
    1b34:	0901                	addi	s2,s2,0
    1b36:	0004                	0x4
    1b38:	0301                	addi	t1,t1,0
    1b3a:	0901                	addi	s2,s2,0
        for (j = 0; j < N; j++)
    1b3c:	0008                	0x8
    1b3e:	0301                	addi	t1,t1,0
    1b40:	0901                	addi	s2,s2,0
    1b42:	0004                	0x4
    1b44:	0501                	addi	a0,a0,0
    1b46:	0003061b          	0x3061b
    1b4a:	0009                	c.nop	2
    1b4c:	0100                	addi	s0,sp,128
    1b4e:	0f05                	addi	t5,t5,1
            C[i * N + j] = (MATRES)A[i * N + j] * (MATRES)val;
    1b50:	0306                	slli	t1,t1,0x1
    1b52:	097a                	slli	s2,s2,0x1e
    1b54:	0008                	0x8
    1b56:	0501                	addi	a0,a0,0
        for (j = 0; j < N; j++)
    1b58:	0309                	addi	t1,t1,2
    1b5a:	090a                	slli	s2,s2,0x2
            C[i * N + j] = (MATRES)A[i * N + j] * (MATRES)val;
    1b5c:	0004                	0x4
    1b5e:	0301                	addi	t1,t1,0
    1b60:	0901                	addi	s2,s2,0
    1b62:	0000                	unimp
        for (j = 0; j < N; j++)
    1b64:	0301                	addi	t1,t1,0
    1b66:	0904                	addi	s1,sp,144
    1b68:	0000                	unimp
    1b6a:	0501                	addi	a0,a0,0
    for (i = 0; i < N; i++)
    1b6c:	0629                	addi	a2,a2,10
    1b6e:	00090003          	lb	zero,0(s2)
    1b72:	0100                	addi	s0,sp,128
    1b74:	1f05                	addi	t5,t5,-31
    1b76:	0c090003          	lb	zero,192(s2)
    1b7a:	0100                	addi	s0,sp,128
    1b7c:	0505                	addi	a0,a0,1
    1b7e:	0306                	slli	t1,t1,0x1
    1b80:	00100903          	lb	s2,1(zero) # 1 <RAM_START_ADDRESS+0x1>
    1b84:	0301                	addi	t1,t1,0
    1b86:	0911                	addi	s2,s2,4
    1b88:	0004                	0x4
    1b8a:	0301                	addi	t1,t1,0
    1b8c:	0902                	c.slli64	s2
    1b8e:	0020                	addi	s0,sp,8
    1b90:	0301                	addi	t1,t1,0
    1b92:	0901                	addi	s2,s2,0
            if (tmp > clipval)
    1b94:	0004                	0x4
    1b96:	0501                	addi	a0,a0,0
    1b98:	0612                	slli	a2,a2,0x4
    1b9a:	00090003          	lb	zero,0(s2)
    1b9e:	0100                	addi	s0,sp,128
    1ba0:	0f05                	addi	t5,t5,1
    1ba2:	04090203          	lb	tp,64(s2)
    1ba6:	0100                	addi	s0,sp,128
    for (i = 0; i < N; i++)
    1ba8:	1205                	addi	tp,tp,-31
    1baa:	10097e03          	0x10097e03
        for (j = 0; j < N; j++)
    1bae:	0100                	addi	s0,sp,128
    1bb0:	0f05                	addi	t5,t5,1
    1bb2:	04090203          	lb	tp,64(s2)
    1bb6:	0100                	addi	s0,sp,128
                ret += 10;
    1bb8:	0505                	addi	a0,a0,1
    1bba:	0306                	slli	t1,t1,0x1
        for (j = 0; j < N; j++)
    1bbc:	0900                	addi	s0,sp,144
    1bbe:	0008                	0x8
                ret += 10;
    1bc0:	0501                	addi	a0,a0,0
    1bc2:	0003060f          	0x3060f
                tmp = 0;
    1bc6:	0009                	c.nop	2
        for (j = 0; j < N; j++)
    1bc8:	0100                	addi	s0,sp,128
    1bca:	08090103          	lb	sp,128(s2)
                ret += (cur > prev) ? 1 : 0;
    1bce:	0100                	addi	s0,sp,128
            cur = C[i * N + j];
    1bd0:	04097f03          	0x4097f03
                ret += 10;
    1bd4:	0100                	addi	s0,sp,128
    1bd6:	0505                	addi	a0,a0,1
    1bd8:	0306                	slli	t1,t1,0x1
    1bda:	0901                	addi	s2,s2,0
                ret += (cur > prev) ? 1 : 0;
    1bdc:	0004                	0x4
    1bde:	0501                	addi	a0,a0,0
            tmp += cur;
    1be0:	0003060f          	0x3060f
                ret += 10;
    1be4:	0009                	c.nop	2
    1be6:	0100                	addi	s0,sp,128
                ret += (cur > prev) ? 1 : 0;
    1be8:	08090103          	lb	sp,128(s2)
            if (tmp > clipval)
    1bec:	0100                	addi	s0,sp,128
    1bee:	04097f03          	0x4097f03
                ret += (cur > prev) ? 1 : 0;
    1bf2:	0100                	addi	s0,sp,128
        for (j = 0; j < N; j++)
    1bf4:	0505                	addi	a0,a0,1
    1bf6:	0306                	slli	t1,t1,0x1
                ret += (cur > prev) ? 1 : 0;
    1bf8:	0901                	addi	s2,s2,0
    1bfa:	0004                	0x4
        for (j = 0; j < N; j++)
    1bfc:	0501                	addi	a0,a0,0
    1bfe:	0003060f          	0x3060f
    for (i = 0; i < N; i++)
    1c02:	0009                	c.nop	2
    1c04:	0100                	addi	s0,sp,128
    1c06:	0505                	addi	a0,a0,1
    1c08:	0306                	slli	t1,t1,0x1
    1c0a:	0901                	addi	s2,s2,0
    1c0c:	000c                	0xc
    1c0e:	0501                	addi	a0,a0,0
    1c10:	0003060f          	0x3060f
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1c14:	0009                	c.nop	2
    1c16:	0100                	addi	s0,sp,128
    1c18:	0505                	addi	a0,a0,1
    1c1a:	08090203          	lb	tp,128(s2)
    matrix_mul_vect(N, C, A, B);
    1c1e:	0100                	addi	s0,sp,128
    1c20:	0f05                	addi	t5,t5,1
    1c22:	08097e03          	0x8097e03
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1c26:	0100                	addi	s0,sp,128
    matrix_mul_vect(N, C, A, B);
    1c28:	0505                	addi	a0,a0,1
    1c2a:	0306                	slli	t1,t1,0x1
    1c2c:	0902                	c.slli64	s2
    1c2e:	0004                	0x4
    1c30:	0501                	addi	a0,a0,0
    1c32:	030d                	addi	t1,t1,3
    1c34:	090d                	addi	s2,s2,3
    1c36:	0020                	addi	s0,sp,8
    1c38:	0301                	addi	t1,t1,0
    1c3a:	0901                	addi	s2,s2,0
    1c3c:	0000                	unimp
    1c3e:	0301                	addi	t1,t1,0
    1c40:	0901                	addi	s2,s2,0
    1c42:	000c                	0xc
        for (j = 0; j < N; j++)
    1c44:	0501                	addi	a0,a0,0
    1c46:	0305                	addi	t1,t1,1
    1c48:	090e                	slli	s2,s2,0x3
    1c4a:	0000                	unimp
    1c4c:	0501                	addi	a0,a0,0
    1c4e:	0616                	slli	a2,a2,0x5
                ret += 10;
    1c50:	00097003          	0x97003
        for (j = 0; j < N; j++)
    1c54:	0100                	addi	s0,sp,128
    1c56:	1505                	addi	a0,a0,-31
                ret += 10;
    1c58:	0200                	addi	s0,sp,256
    1c5a:	0104                	addi	s1,sp,128
                tmp = 0;
    1c5c:	0306                	slli	t1,t1,0x1
    1c5e:	0912                	slli	s2,s2,0x4
        for (j = 0; j < N; j++)
    1c60:	0004                	0x4
    1c62:	0501                	addi	a0,a0,0
                ret += (cur > prev) ? 1 : 0;
    1c64:	04020017          	auipc	zero,0x4020
            cur = C[i * N + j];
    1c68:	0601                	addi	a2,a2,0
    1c6a:	00090003          	lb	zero,0(s2)
                ret += 10;
    1c6e:	0100                	addi	s0,sp,128
    1c70:	0905                	addi	s2,s2,1
    1c72:	0200                	addi	s0,sp,256
                ret += (cur > prev) ? 1 : 0;
    1c74:	0104                	addi	s1,sp,128
    1c76:	00090003          	lb	zero,0(s2)
            tmp += cur;
    1c7a:	0100                	addi	s0,sp,128
                ret += 10;
    1c7c:	1c05                	addi	s8,s8,-31
    1c7e:	10090203          	lb	tp,256(s2)
                ret += (cur > prev) ? 1 : 0;
    1c82:	0100                	addi	s0,sp,128
            if (tmp > clipval)
    1c84:	3905                	jal	18b4 <matrix_mul_matrix+0x90>
    1c86:	0c090203          	lb	tp,192(s2)
                ret += (cur > prev) ? 1 : 0;
    1c8a:	0100                	addi	s0,sp,128
        for (j = 0; j < N; j++)
    1c8c:	1c05                	addi	s8,s8,-31
    1c8e:	04097e03          	0x4097e03
                ret += (cur > prev) ? 1 : 0;
    1c92:	0100                	addi	s0,sp,128
        for (j = 0; j < N; j++)
    1c94:	3905                	jal	18c4 <matrix_mul_matrix+0xa0>
    1c96:	08090203          	lb	tp,128(s2)
    for (i = 0; i < N; i++)
    1c9a:	0100                	addi	s0,sp,128
    1c9c:	1c05                	addi	s8,s8,-31
    1c9e:	04097e03          	0x4097e03
    1ca2:	0100                	addi	s0,sp,128
    1ca4:	3905                	jal	18d4 <matrix_mul_matrix+0xb0>
    1ca6:	04090203          	lb	tp,64(s2)
    1caa:	0100                	addi	s0,sp,128
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1cac:	1c05                	addi	s8,s8,-31
    1cae:	04097e03          	0x4097e03
    1cb2:	0100                	addi	s0,sp,128
    matrix_mul_matrix(N, C, A, B);
    1cb4:	3905                	jal	18e4 <matrix_mul_matrix+0xc0>
    1cb6:	04090203          	lb	tp,64(s2)
    1cba:	0100                	addi	s0,sp,128
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1cbc:	1105                	addi	sp,sp,-31
    1cbe:	04090203          	lb	tp,64(s2)
    matrix_mul_matrix(N, C, A, B);
    1cc2:	0100                	addi	s0,sp,128
    1cc4:	04090903          	lb	s2,64(s2)
    1cc8:	0100                	addi	s0,sp,128
    1cca:	04090903          	lb	s2,64(s2)
    1cce:	0100                	addi	s0,sp,128
    1cd0:	2705                	jal	23f0 <core_state_transition+0x29c>
    1cd2:	08090603          	lb	a2,128(s2)
    1cd6:	0100                	addi	s0,sp,128
    1cd8:	0d05                	addi	s10,s10,1
    1cda:	0200                	addi	s0,sp,256
    1cdc:	0204                	addi	s1,sp,256
    1cde:	0306                	slli	t1,t1,0x1
        for (j = 0; j < N; j++)
    1ce0:	0900                	addi	s0,sp,144
    1ce2:	0014                	0x14
    1ce4:	0501                	addi	a0,a0,0
    1ce6:	0030                	addi	a2,sp,8
    1ce8:	0402                	c.slli64	s0
    1cea:	0602                	c.slli64	a2
    1cec:	00096203          	0x96203
                ret += 10;
    1cf0:	0100                	addi	s0,sp,128
    1cf2:	0905                	addi	s2,s2,1
        for (j = 0; j < N; j++)
    1cf4:	0200                	addi	s0,sp,256
    1cf6:	0204                	addi	s1,sp,256
                ret += 10;
    1cf8:	04090003          	lb	zero,64(s2)
                tmp = 0;
    1cfc:	0100                	addi	s0,sp,128
    1cfe:	1a05                	addi	s4,s4,-31
        for (j = 0; j < N; j++)
    1d00:	0200                	addi	s0,sp,256
    1d02:	0204                	addi	s1,sp,256
    1d04:	04091e03          	lh	t3,64(s2)
                ret += (cur > prev) ? 1 : 0;
    1d08:	0100                	addi	s0,sp,128
    1d0a:	3005                	jal	152a <core_init_matrix+0x17a>
            cur = C[i * N + j];
    1d0c:	0200                	addi	s0,sp,256
    1d0e:	0204                	addi	s1,sp,256
                ret += 10;
    1d10:	04096203          	0x4096203
    1d14:	0100                	addi	s0,sp,128
    1d16:	1a05                	addi	s4,s4,-31
                ret += (cur > prev) ? 1 : 0;
    1d18:	0200                	addi	s0,sp,256
    1d1a:	0204                	addi	s1,sp,256
            tmp += cur;
    1d1c:	04091e03          	lh	t3,64(s2)
                ret += 10;
    1d20:	0100                	addi	s0,sp,128
    1d22:	3005                	jal	1542 <core_init_matrix+0x192>
                ret += (cur > prev) ? 1 : 0;
    1d24:	0200                	addi	s0,sp,256
    1d26:	0204                	addi	s1,sp,256
            if (tmp > clipval)
    1d28:	08096203          	0x8096203
                ret += (cur > prev) ? 1 : 0;
    1d2c:	0100                	addi	s0,sp,128
    1d2e:	1a05                	addi	s4,s4,-31
        for (j = 0; j < N; j++)
    1d30:	0200                	addi	s0,sp,256
    1d32:	0204                	addi	s1,sp,256
                ret += (cur > prev) ? 1 : 0;
    1d34:	04091e03          	lh	t3,64(s2)
        for (j = 0; j < N; j++)
    1d38:	0100                	addi	s0,sp,128
    1d3a:	2f05                	jal	246a <core_state_transition+0x316>
    1d3c:	0200                	addi	s0,sp,256
    1d3e:	0204                	addi	s1,sp,256
    for (i = 0; i < N; i++)
    1d40:	0306                	slli	t1,t1,0x1
    1d42:	0962                	slli	s2,s2,0x18
    1d44:	0008                	0x8
    1d46:	0501                	addi	a0,a0,0
    1d48:	0015                	c.nop	5
    1d4a:	0402                	c.slli64	s0
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1d4c:	0302                	c.slli64	t1
    1d4e:	0900                	addi	s0,sp,144
    1d50:	0000                	unimp
    1d52:	0501                	addi	a0,a0,0
    matrix_mul_matrix_bitextract(N, C, A, B);
    1d54:	0009                	c.nop	2
    1d56:	0402                	c.slli64	s0
    1d58:	0602                	c.slli64	a2
    1d5a:	00090003          	lb	zero,0(s2)
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1d5e:	0100                	addi	s0,sp,128
    matrix_mul_matrix_bitextract(N, C, A, B);
    1d60:	0d05                	addi	s10,s10,1
    1d62:	0306                	slli	t1,t1,0x1
    1d64:	0902                	c.slli64	s2
    1d66:	0004                	0x4
    1d68:	0501                	addi	a0,a0,0
    1d6a:	061c                	addi	a5,sp,768
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1d6c:	00090003          	lb	zero,0(s2)
    matrix_mul_matrix_bitextract(N, C, A, B);
    1d70:	0100                	addi	s0,sp,128
    1d72:	2305                	jal	2292 <core_state_transition+0x13e>
    1d74:	1c090103          	lb	sp,448(s2)
    1d78:	0100                	addi	s0,sp,128
    1d7a:	1c05                	addi	s8,s8,-31
    1d7c:	04097f03          	0x4097f03
    1d80:	0100                	addi	s0,sp,128
    1d82:	0d05                	addi	s10,s10,1
        for (j = 0; j < N; j++)
    1d84:	0306                	slli	t1,t1,0x1
    1d86:	0901                	addi	s2,s2,0
    1d88:	0004                	0x4
    1d8a:	0501                	addi	a0,a0,0
    1d8c:	00030623          	sb	zero,12(t1)
    1d90:	0009                	c.nop	2
    1d92:	0100                	addi	s0,sp,128
                ret += 10;
    1d94:	1005                	c.nop	-31
    1d96:	04090003          	lb	zero,64(s2)
        for (j = 0; j < N; j++)
    1d9a:	0100                	addi	s0,sp,128
                ret += 10;
    1d9c:	1f05                	addi	t5,t5,-31
    1d9e:	04090103          	lb	sp,64(s2)
                tmp = 0;
    1da2:	0100                	addi	s0,sp,128
        for (j = 0; j < N; j++)
    1da4:	3905                	jal	19d4 <matrix_mul_matrix_bitextract+0x8c>
    1da6:	04090003          	lb	zero,64(s2)
    1daa:	0100                	addi	s0,sp,128
                ret += (cur > prev) ? 1 : 0;
    1dac:	1105                	addi	sp,sp,-31
    1dae:	04090003          	lb	zero,64(s2)
            cur = C[i * N + j];
    1db2:	0100                	addi	s0,sp,128
                ret += 10;
    1db4:	0306                	slli	t1,t1,0x1
    1db6:	0902                	c.slli64	s2
    1db8:	0004                	0x4
    1dba:	0301                	addi	t1,t1,0
                ret += (cur > prev) ? 1 : 0;
    1dbc:	0904                	addi	s1,sp,144
    1dbe:	000c                	0xc
            tmp += cur;
    1dc0:	0501                	addi	a0,a0,0
    1dc2:	061f 0003 0009      	0x90003061f
                ret += (cur > prev) ? 1 : 0;
    1dc8:	0100                	addi	s0,sp,128
    1dca:	0d05                	addi	s10,s10,1
            if (tmp > clipval)
    1dcc:	0306                	slli	t1,t1,0x1
    1dce:	0902                	c.slli64	s2
                ret += (cur > prev) ? 1 : 0;
    1dd0:	000c                	0xc
    1dd2:	0501                	addi	a0,a0,0
        for (j = 0; j < N; j++)
    1dd4:	061c                	addi	a5,sp,768
    1dd6:	00090003          	lb	zero,0(s2)
                ret += (cur > prev) ? 1 : 0;
    1dda:	0100                	addi	s0,sp,128
        for (j = 0; j < N; j++)
    1ddc:	2305                	jal	22fc <core_state_transition+0x1a8>
    1dde:	1c090003          	lb	zero,448(s2)
    1de2:	0100                	addi	s0,sp,128
    for (i = 0; i < N; i++)
    1de4:	1005                	c.nop	-31
    1de6:	04090003          	lb	zero,64(s2)
    1dea:	0100                	addi	s0,sp,128
    1dec:	1f05                	addi	t5,t5,-31
    1dee:	04090103          	lb	sp,64(s2)
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1df2:	0100                	addi	s0,sp,128
    1df4:	3d05                	jal	1c24 <matrix_test+0x1a4>
    1df6:	04090003          	lb	zero,64(s2)
    1dfa:	0100                	addi	s0,sp,128
    1dfc:	1105                	addi	sp,sp,-31
    1dfe:	04090003          	lb	zero,64(s2)
        for (j = 0; j < N; j++)
    1e02:	0100                	addi	s0,sp,128
    1e04:	0306                	slli	t1,t1,0x1
    1e06:	0902                	c.slli64	s2
    1e08:	0004                	0x4
    1e0a:	0301                	addi	t1,t1,0
    1e0c:	0904                	addi	s1,sp,144
    1e0e:	000c                	0xc
            A[i * N + j] += val;
    1e10:	0501                	addi	a0,a0,0
    1e12:	061f 0003 0009      	0x90003061f
        for (j = 0; j < N; j++)
    1e18:	0100                	addi	s0,sp,128
    1e1a:	1c05                	addi	s8,s8,-31
            A[i * N + j] += val;
    1e1c:	04090203          	lb	tp,64(s2)
    1e20:	0100                	addi	s0,sp,128
    1e22:	1f05                	addi	t5,t5,-31
        for (j = 0; j < N; j++)
    1e24:	04097e03          	0x4097e03
    for (i = 0; i < N; i++)
    1e28:	0100                	addi	s0,sp,128
    1e2a:	0d05                	addi	s10,s10,1
    1e2c:	0306                	slli	t1,t1,0x1
    1e2e:	0902                	c.slli64	s2
    1e30:	0008                	0x8
    1e32:	0501                	addi	a0,a0,0
}
    1e34:	061f 0103 0009      	0x90103061f
    1e3a:	0100                	addi	s0,sp,128
    return crc;
    1e3c:	2305                	jal	235c <core_state_transition+0x208>
    1e3e:	04097f03          	0x4097f03
}
    1e42:	0100                	addi	s0,sp,128
    1e44:	1f05                	addi	t5,t5,-31
    1e46:	04090103          	lb	sp,64(s2)
    1e4a:	0100                	addi	s0,sp,128
    1e4c:	1005                	c.nop	-31
    1e4e:	04097f03          	0x4097f03
    1e52:	0100                	addi	s0,sp,128
    1e54:	1f05                	addi	t5,t5,-31
    1e56:	04090103          	lb	sp,64(s2)
    1e5a:	0100                	addi	s0,sp,128
    1e5c:	3b05                	jal	1b8c <matrix_test+0x10c>
    1e5e:	04090003          	lb	zero,64(s2)
    1e62:	0100                	addi	s0,sp,128
    1e64:	1f05                	addi	t5,t5,-31
    1e66:	04090003          	lb	zero,64(s2)
    1e6a:	0100                	addi	s0,sp,128
    return crc;
    1e6c:	1105                	addi	sp,sp,-31
    1e6e:	10090003          	lb	zero,256(s2)
}
    1e72:	0100                	addi	s0,sp,128
    1e74:	2705                	jal	2594 <core_bench_state+0x128>
    1e76:	04090803          	lb	a6,64(s2)
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1e7a:	0100                	addi	s0,sp,128
    1e7c:	0d05                	addi	s10,s10,1
    1e7e:	0306                	slli	t1,t1,0x1
    matrix_mul_vect(N, C, A, B);
    1e80:	7efe                	flw	ft9,252(sp)
    1e82:	0809                	addi	a6,a6,2
    1e84:	0100                	addi	s0,sp,128
    1e86:	1f05                	addi	t5,t5,-31
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1e88:	0306                	slli	t1,t1,0x1
    1e8a:	0900                	addi	s0,sp,144
    matrix_mul_vect(N, C, A, B);
    1e8c:	0000                	unimp
    1e8e:	0501                	addi	a0,a0,0
    1e90:	09030317          	auipc	t1,0x9030
    1e94:	002c                	addi	a1,sp,8
    1e96:	0501                	addi	a0,a0,0
    1e98:	031d                	addi	t1,t1,7
    1e9a:	097d                	addi	s2,s2,31
    1e9c:	0004                	0x4
    1e9e:	0501                	addi	a0,a0,0
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1ea0:	0609                	addi	a2,a2,2
    1ea2:	08090303          	lb	t1,128(s2)
    1ea6:	0100                	addi	s0,sp,128
    1ea8:	0c05                	addi	s8,s8,1
    1eaa:	0306                	slli	t1,t1,0x1
    matrix_mul_matrix(N, C, A, B);
    1eac:	0900                	addi	s0,sp,144
    1eae:	0000                	unimp
    1eb0:	0501                	addi	a0,a0,0
    1eb2:	060d                	addi	a2,a2,3
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1eb4:	04090203          	lb	tp,64(s2)
    matrix_mul_matrix(N, C, A, B);
    1eb8:	0100                	addi	s0,sp,128
    1eba:	3805                	jal	16ea <matrix_mul_const+0xca>
    1ebc:	0306                	slli	t1,t1,0x1
    1ebe:	00000903          	lb	s2,0(zero) # 0 <RAM_START_ADDRESS>
    1ec2:	0501                	addi	a0,a0,0
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1ec4:	030d                	addi	t1,t1,3
    1ec6:	097d                	addi	s2,s2,31
    1ec8:	0010                	0x10
    1eca:	0501                	addi	a0,a0,0
    1ecc:	0338                	addi	a4,sp,392
    1ece:	00040903          	lb	s2,0(s0)
    1ed2:	0501                	addi	a0,a0,0
    matrix_mul_matrix_bitextract(N, C, A, B);
    1ed4:	031e                	slli	t1,t1,0x7
    1ed6:	097f                	0x97f
    1ed8:	0008                	0x8
    1eda:	0501                	addi	a0,a0,0
    1edc:	0326                	slli	t1,t1,0x9
    1ede:	0901                	addi	s2,s2,0
    1ee0:	0004                	0x4
    1ee2:	0501                	addi	a0,a0,0
    1ee4:	030d                	addi	t1,t1,3
    1ee6:	097d                	addi	s2,s2,31
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1ee8:	0004                	0x4
    1eea:	0501                	addi	a0,a0,0
    1eec:	031e                	slli	t1,t1,0x7
    1eee:	0902                	c.slli64	s2
    1ef0:	0004                	0x4
    1ef2:	0501                	addi	a0,a0,0
    for (i = 0; i < N; i++)
    1ef4:	030d                	addi	t1,t1,3
    1ef6:	097e                	slli	s2,s2,0x1f
{
    1ef8:	0004                	0x4
    1efa:	0501                	addi	a0,a0,0
    1efc:	0340                	addi	s0,sp,388
    1efe:	00040903          	lb	s2,0(s0)
    crc = crc16(matrix_test(N, C, A, B, val), crc);
    1f02:	0501                	addi	a0,a0,0
{
    1f04:	030d                	addi	t1,t1,3
    1f06:	097d                	addi	s2,s2,31
    1f08:	0004                	0x4
    1f0a:	0501                	addi	a0,a0,0
    crc = crc16(matrix_test(N, C, A, B, val), crc);
    1f0c:	09060317          	auipc	t1,0x9060
    1f10:	000c                	0xc
    1f12:	0501                	addi	a0,a0,0
    1f14:	0611                	addi	a2,a2,4
    1f16:	0900f103          	0x900f103
{
    1f1a:	0008                	0x8
    crc = crc16(matrix_test(N, C, A, B, val), crc);
    1f1c:	0301                	addi	t1,t1,0
    1f1e:	0904                	addi	s1,sp,144
    1f20:	000c                	0xc
    1f22:	0501                	addi	a0,a0,0
}
    1f24:	061f 0003 0009      	0x90003061f
    1f2a:	0100                	addi	s0,sp,128
    1f2c:	0505                	addi	a0,a0,1
    1f2e:	18094503          	lbu	a0,384(s2)
    crc = crc16(matrix_test(N, C, A, B, val), crc);
    1f32:	0100                	addi	s0,sp,128
	return *time_ptr;
    1f34:	0d05                	addi	s10,s10,1
    1f36:	0306                	slli	t1,t1,0x1
    1f38:	0911                	addi	s2,s2,4
    1f3a:	0018                	0x18
    1f3c:	0301                	addi	t1,t1,0
    1f3e:	0901                	addi	s2,s2,0
    1f40:	0000                	unimp
    1f42:	0301                	addi	t1,t1,0
    1f44:	0901                	addi	s2,s2,0
    1f46:	000c                	0xc
    1f48:	0501                	addi	a0,a0,0
    1f4a:	0305                	addi	t1,t1,1
    1f4c:	090a                	slli	s2,s2,0x2
    1f4e:	0000                	unimp
    1f50:	0501                	addi	a0,a0,0
    1f52:	0616                	slli	a2,a2,0x5
    1f54:	00097403          	0x97403
    1f58:	0100                	addi	s0,sp,128
    1f5a:	0905                	addi	s2,s2,1
}
    1f5c:	08090e03          	lb	t3,128(s2)
    1f60:	0100                	addi	s0,sp,128
    1f62:	0505                	addi	a0,a0,1
	return *time_ptr;
    1f64:	0306                	slli	t1,t1,0x1
    1f66:	0921                	addi	s2,s2,8
    1f68:	0004                	0x4
    1f6a:	0501                	addi	a0,a0,0
    1f6c:	0615                	addi	a2,a2,5
    1f6e:	00090003          	lb	zero,0(s2)
    1f72:	0100                	addi	s0,sp,128
    1f74:	0505                	addi	a0,a0,1
    1f76:	04090203          	lb	tp,64(s2)
    1f7a:	0100                	addi	s0,sp,128
    1f7c:	1205                	addi	tp,tp,-31
    1f7e:	04097e03          	0x4097e03
    1f82:	0100                	addi	s0,sp,128
    1f84:	0505                	addi	a0,a0,1
    1f86:	04090203          	lb	tp,64(s2)
    1f8a:	0100                	addi	s0,sp,128
    1f8c:	0c090103          	lb	sp,192(s2)
    GETMYTIME(&start_time_val);
    1f90:	0100                	addi	s0,sp,128
    1f92:	10090803          	lb	a6,256(s2)
}
    1f96:	0100                	addi	s0,sp,128
	return *time_ptr;
    1f98:	1205                	addi	tp,tp,-31
    1f9a:	18097503          	0x18097503
    1f9e:	0100                	addi	s0,sp,128
    1fa0:	0905                	addi	s2,s2,1
    1fa2:	04090c03          	lb	s8,64(s2)
    1fa6:	0100                	addi	s0,sp,128
    1fa8:	1205                	addi	tp,tp,-31
    1faa:	04097403          	0x4097403
    1fae:	0100                	addi	s0,sp,128
    1fb0:	0505                	addi	a0,a0,1
    1fb2:	0306                	slli	t1,t1,0x1
    1fb4:	0902                	c.slli64	s2
    1fb6:	0004                	0x4
    1fb8:	0301                	addi	t1,t1,0
    1fba:	0901                	addi	s2,s2,0
    1fbc:	0000                	unimp
    1fbe:	0301                	addi	t1,t1,0
    1fc0:	0908                	addi	a0,sp,144
    1fc2:	0000                	unimp
    GETMYTIME(&stop_time_val);
    1fc4:	0301                	addi	t1,t1,0
    1fc6:	0901                	addi	s2,s2,0
}
    1fc8:	0000                	unimp
    1fca:	0501                	addi	a0,a0,0
    CORE_TICKS elapsed
    1fcc:	0609                	addi	a2,a2,2
    1fce:	00090003          	lb	zero,0(s2)
    1fd2:	0100                	addi	s0,sp,128
}
    1fd4:	0805                	addi	a6,a6,1
    1fd6:	04090003          	lb	zero,64(s2)
    1fda:	0100                	addi	s0,sp,128
{
    1fdc:	0505                	addi	a0,a0,1
    1fde:	0306                	slli	t1,t1,0x1
    secs_ret retval = ((secs_ret)ticks) / (secs_ret)EE_TICKS_PER_SEC;
    1fe0:	0905                	addi	s2,s2,1
    1fe2:	0004                	0x4
{
    1fe4:	0501                	addi	a0,a0,0
    1fe6:	0609                	addi	a2,a2,2
    secs_ret retval = ((secs_ret)ticks) / (secs_ret)EE_TICKS_PER_SEC;
    1fe8:	00090003          	lb	zero,0(s2)
}
    1fec:	0100                	addi	s0,sp,128
    1fee:	0805                	addi	a6,a6,1
    1ff0:	08090003          	lb	zero,128(s2)
    1ff4:	0100                	addi	s0,sp,128
    1ff6:	0505                	addi	a0,a0,1
    p->portable_id = 1;
    1ff8:	08090703          	lb	a4,128(s2)
    1ffc:	0100                	addi	s0,sp,128
    1ffe:	1505                	addi	a0,a0,-31
}
    2000:	08097d03          	0x8097d03
    p->portable_id = 0;
    2004:	0100                	addi	s0,sp,128
    2006:	0505                	addi	a0,a0,1
}
    2008:	0306                	slli	t1,t1,0x1
    200a:	00080903          	lb	s2,0(a6) # ffff9000 <RAM_SIZE+0xfffe9000>
    size--;
    200e:	0301                	addi	t1,t1,0
    while ((total + next + 1) < size)
    2010:	0902                	c.slli64	s2
    2012:	0014                	0x14
{
    2014:	0301                	addi	t1,t1,0
    2016:	0901                	addi	s2,s2,0
    while ((total + next + 1) < size)
    2018:	0014                	0x14
    201a:	0301                	addi	t1,t1,0
    201c:	0904                	addi	s1,sp,144
    201e:	0014                	0x14
    2020:	0301                	addi	t1,t1,0
    2022:	0902                	c.slli64	s2
    2024:	0014                	0x14
    2026:	0301                	addi	t1,t1,0
{
    2028:	0901                	addi	s2,s2,0
    202a:	0010                	0x10
    202c:	0501                	addi	a0,a0,0
    202e:	061a                	slli	a2,a2,0x6
                buf  = intpat[(seed >> 3) & 0x3];
    2030:	00090003          	lb	zero,0(s2)
{
    2034:	0100                	addi	s0,sp,128
    2036:	0805                	addi	a6,a6,1
        switch (seed & 0x7)
    2038:	08090003          	lb	zero,128(s2)
    203c:	0100                	addi	s0,sp,128
    203e:	1505                	addi	a0,a0,-31
    ee_u32 total = 0, next = 0, i;
    2040:	0306                	slli	t1,t1,0x1
    2042:	0901                	addi	s2,s2,0
        switch (seed & 0x7)
    2044:	0004                	0x4
    2046:	0501                	addi	a0,a0,0
    2048:	0609                	addi	a2,a2,2
    204a:	00090003          	lb	zero,0(s2)
    204e:	0100                	addi	s0,sp,128
            *(p + total + i) = ',';
    2050:	4405                	li	s0,1
    2052:	08090103          	lb	sp,128(s2)
                buf  = intpat[(seed >> 3) & 0x3];
    2056:	0100                	addi	s0,sp,128
        switch (seed & 0x7)
    2058:	1005                	c.nop	-31
    205a:	18097f03          	0x18097f03
    205e:	0100                	addi	s0,sp,128
    2060:	4405                	li	s0,1
    2062:	08090103          	lb	sp,128(s2)
    2066:	0100                	addi	s0,sp,128
                buf  = floatpat[(seed >> 3) & 0x3];
    2068:	0d05                	addi	s10,s10,1
    206a:	0200                	addi	s0,sp,256
        switch (seed & 0x7)
    206c:	0304                	addi	s1,sp,384
    206e:	0306                	slli	t1,t1,0x1
                buf  = floatpat[(seed >> 3) & 0x3];
    2070:	0900                	addi	s0,sp,144
    2072:	0008                	0x8
        switch (seed & 0x7)
    2074:	0501                	addi	a0,a0,0
    2076:	0044                	addi	s1,sp,4
                buf  = floatpat[(seed >> 3) & 0x3];
    2078:	0402                	c.slli64	s0
    207a:	00030603          	lb	a2,0(t1) # 9061f0c <RAM_SIZE+0x9051f0c>
                break;
    207e:	0009                	c.nop	2
                next = 8;
    2080:	0100                	addi	s0,sp,128
    2082:	0d05                	addi	s10,s10,1
    while ((total + next + 1) < size)
    2084:	0200                	addi	s0,sp,256
    2086:	0304                	addi	s1,sp,384
    2088:	18090003          	lb	zero,384(s2)
    208c:	0100                	addi	s0,sp,128
    208e:	2f05                	jal	27be <crcu32+0x5e>
    2090:	0200                	addi	s0,sp,256
    2092:	0304                	addi	s1,sp,384
    2094:	0306                	slli	t1,t1,0x1
    2096:	097f                	0x97f
                *(p + total + i) = buf[i];
    2098:	0010                	0x10
    209a:	0501                	addi	a0,a0,0
            for (i = 0; i < next; i++)
    209c:	0030                	addi	a2,sp,8
    209e:	0402                	c.slli64	s0
    20a0:	00030603          	lb	a2,0(t1)
                *(p + total + i) = buf[i];
    20a4:	0009                	c.nop	2
    20a6:	0100                	addi	s0,sp,128
            for (i = 0; i < next; i++)
    20a8:	0905                	addi	s2,s2,1
    20aa:	0200                	addi	s0,sp,256
            *(p + total + i) = ',';
    20ac:	0304                	addi	s1,sp,384
    20ae:	04090003          	lb	zero,64(s2)
    20b2:	0100                	addi	s0,sp,128
    20b4:	3005                	jal	18d4 <matrix_mul_matrix+0xb0>
    20b6:	0200                	addi	s0,sp,256
    20b8:	0304                	addi	s1,sp,384
    20ba:	04090003          	lb	zero,64(s2)
    20be:	0100                	addi	s0,sp,128
                buf  = intpat[(seed >> 3) & 0x3];
    20c0:	1505                	addi	a0,a0,-31
    20c2:	0200                	addi	s0,sp,256
    20c4:	0304                	addi	s1,sp,384
    20c6:	0306                	slli	t1,t1,0x1
            *(p + total + i) = ',';
    20c8:	0900                	addi	s0,sp,144
    20ca:	0008                	0x8
                buf  = intpat[(seed >> 3) & 0x3];
    20cc:	0501                	addi	a0,a0,0
    20ce:	0009                	c.nop	2
        switch (seed & 0x7)
    20d0:	0402                	c.slli64	s0
    20d2:	00030603          	lb	a2,0(t1)
                buf  = errpat[(seed >> 3) & 0x3];
    20d6:	0009                	c.nop	2
                break;
    20d8:	0100                	addi	s0,sp,128
    20da:	0505                	addi	a0,a0,1
                buf  = errpat[(seed >> 3) & 0x3];
    20dc:	0306                	slli	t1,t1,0x1
    20de:	0902                	c.slli64	s2
    while ((total + next + 1) < size)
    20e0:	0008                	0x8
    20e2:	0501                	addi	a0,a0,0
                buf  = errpat[(seed >> 3) & 0x3];
    20e4:	061a                	slli	a2,a2,0x6
    20e6:	00090003          	lb	zero,0(s2)
                next = 8;
    20ea:	0100                	addi	s0,sp,128
    while ((total + next + 1) < size)
    20ec:	0805                	addi	a6,a6,1
    20ee:	04090003          	lb	zero,64(s2)
    while (total < size)
    20f2:	0100                	addi	s0,sp,128
}
    20f4:	1505                	addi	a0,a0,-31
    20f6:	0306                	slli	t1,t1,0x1
        *(p + total) = 0;
    20f8:	0901                	addi	s2,s2,0
    20fa:	0004                	0x4
    20fc:	0501                	addi	a0,a0,0
    20fe:	0609                	addi	a2,a2,2
    2100:	00090003          	lb	zero,0(s2)
}
    2104:	0100                	addi	s0,sp,128
    2106:	4405                	li	s0,1
        *(p + total) = 0;
    2108:	08090103          	lb	sp,128(s2)
                buf  = intpat[(seed >> 3) & 0x3];
    210c:	0100                	addi	s0,sp,128
    210e:	1005                	c.nop	-31
                break;
    2110:	18097f03          	0x18097f03
                next = 4;
    2114:	0100                	addi	s0,sp,128
    2116:	4405                	li	s0,1
                break;
    2118:	08090103          	lb	sp,128(s2)
                buf  = scipat[(seed >> 3) & 0x3];
    211c:	0100                	addi	s0,sp,128
    211e:	0d05                	addi	s10,s10,1
    2120:	0200                	addi	s0,sp,256
    2122:	0304                	addi	s1,sp,384
    2124:	0306                	slli	t1,t1,0x1
    2126:	0900                	addi	s0,sp,144
                break;
    2128:	0008                	0x8
    212a:	0501                	addi	a0,a0,0
                next = 8;
    212c:	0044                	addi	s1,sp,4
    212e:	0402                	c.slli64	s0
                break;
    2130:	00030603          	lb	a2,0(t1)
}
    2134:	0009                	c.nop	2
    2136:	0100                	addi	s0,sp,128
    2138:	0d05                	addi	s10,s10,1
    213a:	0200                	addi	s0,sp,256
    213c:	0304                	addi	s1,sp,384
    213e:	18090003          	lb	zero,384(s2)
    ee_u32 total = 0, next = 0, i;
    2142:	0100                	addi	s0,sp,128
        *(p + total) = 0;
    2144:	2f05                	jal	2874 <crc16+0x8>
    2146:	0200                	addi	s0,sp,256
    2148:	0304                	addi	s1,sp,384
    214a:	0306                	slli	t1,t1,0x1
    214c:	097f                	0x97f
    214e:	0010                	0x10
    2150:	0501                	addi	a0,a0,0
    2152:	0030                	addi	a2,sp,8
    ee_u8 *         str = *instr;
    2154:	0402                	c.slli64	s0
    2156:	00030603          	lb	a2,0(t1)
{
    215a:	0009                	c.nop	2
    enum CORE_STATE state = CORE_START;
    215c:	0100                	addi	s0,sp,128
    215e:	0905                	addi	s2,s2,1
    for (; *str && state != CORE_INVALID; str++)
    2160:	0200                	addi	s0,sp,256
    2162:	0304                	addi	s1,sp,384
    2164:	04090003          	lb	zero,64(s2)
    2168:	0100                	addi	s0,sp,128
    216a:	3005                	jal	198a <matrix_mul_matrix_bitextract+0x42>
        if (NEXT_SYMBOL == ',') /* end of this input */
    216c:	0200                	addi	s0,sp,256
    216e:	0304                	addi	s1,sp,384
    for (; *str && state != CORE_INVALID; str++)
    2170:	04090003          	lb	zero,64(s2)
        if (NEXT_SYMBOL == ',') /* end of this input */
    2174:	0100                	addi	s0,sp,128
    2176:	1505                	addi	a0,a0,-31
                transition_count[CORE_START]++;
    2178:	0200                	addi	s0,sp,256
    217a:	0304                	addi	s1,sp,384
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    217c:	0306                	slli	t1,t1,0x1
    217e:	0900                	addi	s0,sp,144
    2180:	0008                	0x8
    2182:	0501                	addi	a0,a0,0
    2184:	0009                	c.nop	2
    2186:	0402                	c.slli64	s0
                transition_count[CORE_START]++;
    2188:	00030603          	lb	a2,0(t1)
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    218c:	0009                	c.nop	2
    218e:	0100                	addi	s0,sp,128
                transition_count[CORE_START]++;
    2190:	0505                	addi	a0,a0,1
    2192:	0306                	slli	t1,t1,0x1
    for (; *str && state != CORE_INVALID; str++)
    2194:	0902                	c.slli64	s2
    2196:	0008                	0x8
    2198:	0501                	addi	a0,a0,0
    219a:	061a                	slli	a2,a2,0x6
            str++;
    219c:	00090003          	lb	zero,0(s2)
        if (NEXT_SYMBOL == ',') /* end of this input */
    21a0:	0100                	addi	s0,sp,128
    21a2:	0805                	addi	a6,a6,1
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    21a4:	04090003          	lb	zero,64(s2)
                if (NEXT_SYMBOL == '.')
    21a8:	0100                	addi	s0,sp,128
    21aa:	1505                	addi	a0,a0,-31
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    21ac:	0306                	slli	t1,t1,0x1
    21ae:	0901                	addi	s2,s2,0
        if (NEXT_SYMBOL == ',') /* end of this input */
    21b0:	0004                	0x4
    21b2:	0501                	addi	a0,a0,0
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    21b4:	0609                	addi	a2,a2,2
    21b6:	00090003          	lb	zero,0(s2)
                if (NEXT_SYMBOL == '.')
    21ba:	0100                	addi	s0,sp,128
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    21bc:	4405                	li	s0,1
    21be:	08090103          	lb	sp,128(s2)
    for (; *str && state != CORE_INVALID; str++)
    21c2:	0100                	addi	s0,sp,128
    21c4:	1005                	c.nop	-31
    21c6:	18097f03          	0x18097f03
    21ca:	0100                	addi	s0,sp,128
    21cc:	4405                	li	s0,1
    21ce:	08090103          	lb	sp,128(s2)
        if (NEXT_SYMBOL == ',') /* end of this input */
    21d2:	0100                	addi	s0,sp,128
    for (; *str && state != CORE_INVALID; str++)
    21d4:	0d05                	addi	s10,s10,1
    21d6:	0200                	addi	s0,sp,256
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    21d8:	0304                	addi	s1,sp,384
    21da:	0306                	slli	t1,t1,0x1
    21dc:	0900                	addi	s0,sp,144
    21de:	0008                	0x8
                if (NEXT_SYMBOL == '.')
    21e0:	0501                	addi	a0,a0,0
    21e2:	0044                	addi	s1,sp,4
                    transition_count[CORE_INT]++;
    21e4:	0402                	c.slli64	s0
    21e6:	00030603          	lb	a2,0(t1)
                    state = CORE_FLOAT;
    21ea:	0009                	c.nop	2
                    transition_count[CORE_INT]++;
    21ec:	0100                	addi	s0,sp,128
    21ee:	0d05                	addi	s10,s10,1
    21f0:	0200                	addi	s0,sp,256
    21f2:	0304                	addi	s1,sp,384
    for (; *str && state != CORE_INVALID; str++)
    21f4:	18090003          	lb	zero,384(s2)
    21f8:	0100                	addi	s0,sp,128
    21fa:	2f05                	jal	292a <cvt+0x2a>
    21fc:	0200                	addi	s0,sp,256
    21fe:	0304                	addi	s1,sp,384
        if (NEXT_SYMBOL == ',') /* end of this input */
    2200:	0306                	slli	t1,t1,0x1
    2202:	097f                	0x97f
            str++;
    2204:	0010                	0x10
    2206:	0501                	addi	a0,a0,0
        if (NEXT_SYMBOL == ',') /* end of this input */
    2208:	0030                	addi	a2,sp,8
    220a:	0402                	c.slli64	s0
                if (NEXT_SYMBOL == 'E' || NEXT_SYMBOL == 'e')
    220c:	00030603          	lb	a2,0(t1)
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    2210:	0009                	c.nop	2
    2212:	0100                	addi	s0,sp,128
        if (NEXT_SYMBOL == ',') /* end of this input */
    2214:	0905                	addi	s2,s2,1
    2216:	0200                	addi	s0,sp,256
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    2218:	0304                	addi	s1,sp,384
    221a:	04090003          	lb	zero,64(s2)
                if (NEXT_SYMBOL == 'E' || NEXT_SYMBOL == 'e')
    221e:	0100                	addi	s0,sp,128
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    2220:	3005                	jal	1a40 <matrix_mul_matrix_bitextract+0xf8>
    2222:	0200                	addi	s0,sp,256
                if (NEXT_SYMBOL == 'E' || NEXT_SYMBOL == 'e')
    2224:	0304                	addi	s1,sp,384
    2226:	04090003          	lb	zero,64(s2)
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    222a:	0100                	addi	s0,sp,128
                    transition_count[CORE_FLOAT]++;
    222c:	1505                	addi	a0,a0,-31
    222e:	0200                	addi	s0,sp,256
    2230:	0304                	addi	s1,sp,384
    2232:	0306                	slli	t1,t1,0x1
                    state = CORE_INVALID;
    2234:	0900                	addi	s0,sp,144
    2236:	0008                	0x8
                    transition_count[CORE_FLOAT]++;
    2238:	0501                	addi	a0,a0,0
    223a:	0009                	c.nop	2
    223c:	0402                	c.slli64	s0
    223e:	00030603          	lb	a2,0(t1)
    *instr = str;
    2242:	0009                	c.nop	2
}
    2244:	0100                	addi	s0,sp,128
    2246:	1105                	addi	sp,sp,-31
                else if (NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-')
    2248:	0306                	slli	t1,t1,0x1
    224a:	0902                	c.slli64	s2
    224c:	0004                	0x4
    224e:	0501                	addi	a0,a0,0
    2250:	0640                	addi	s0,sp,772
    2252:	00090103          	lb	sp,0(s2)
    2256:	0100                	addi	s0,sp,128
                else if (NEXT_SYMBOL == '.')
    2258:	0505                	addi	a0,a0,1
    225a:	04097f03          	0x4097f03
    225e:	0100                	addi	s0,sp,128
                    transition_count[CORE_INVALID]++;
    2260:	4005                	c.li	zero,1
    2262:	04090103          	lb	sp,64(s2)
                transition_count[CORE_START]++;
    2266:	0100                	addi	s0,sp,128
                    state = CORE_INVALID;
    2268:	0505                	addi	a0,a0,1
    226a:	10097f03          	0x10097f03
                    transition_count[CORE_INVALID]++;
    226e:	0100                	addi	s0,sp,128
    2270:	4005                	c.li	zero,1
    2272:	08090103          	lb	sp,128(s2)
    *instr = str;
    2276:	0100                	addi	s0,sp,128
}
    2278:	0505                	addi	a0,a0,1
    227a:	08097f03          	0x8097f03
                    transition_count[CORE_INT]++;
    227e:	0100                	addi	s0,sp,128
    2280:	0905                	addi	s2,s2,1
    2282:	0200                	addi	s0,sp,256
                    state = CORE_INVALID;
    2284:	0304                	addi	s1,sp,384
    2286:	0306                	slli	t1,t1,0x1
                    transition_count[CORE_INT]++;
    2288:	0901                	addi	s2,s2,0
    228a:	0004                	0x4
    228c:	0501                	addi	a0,a0,0
    228e:	0040                	addi	s0,sp,4
    *instr = str;
    2290:	0402                	c.slli64	s0
    2292:	00030603          	lb	a2,0(t1)
}
    2296:	0009                	c.nop	2
                transition_count[CORE_START]++;
    2298:	0100                	addi	s0,sp,128
    229a:	0905                	addi	s2,s2,1
    for (; *str && state != CORE_INVALID; str++)
    229c:	0200                	addi	s0,sp,256
    229e:	0304                	addi	s1,sp,384
    22a0:	14090003          	lb	zero,320(s2)
            str++;
    22a4:	0100                	addi	s0,sp,128
    22a6:	2b05                	jal	27d6 <crcu32+0x76>
        if (NEXT_SYMBOL == ',') /* end of this input */
    22a8:	0200                	addi	s0,sp,256
    22aa:	0304                	addi	s1,sp,384
                    transition_count[CORE_S1]++;
    22ac:	0306                	slli	t1,t1,0x1
    22ae:	097f                	0x97f
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    22b0:	0010                	0x10
    22b2:	0501                	addi	a0,a0,0
    22b4:	002c                	addi	a1,sp,8
    22b6:	0402                	c.slli64	s0
    22b8:	00030603          	lb	a2,0(t1)
                    transition_count[CORE_S1]++;
    22bc:	0009                	c.nop	2
    22be:	0100                	addi	s0,sp,128
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    22c0:	0505                	addi	a0,a0,1
    22c2:	0200                	addi	s0,sp,256
                else if (NEXT_SYMBOL == '.')
    22c4:	0304                	addi	s1,sp,384
    22c6:	04090003          	lb	zero,64(s2)
    22ca:	0100                	addi	s0,sp,128
                    transition_count[CORE_S1]++;
    22cc:	2c05                	jal	24fc <core_bench_state+0x90>
    22ce:	0200                	addi	s0,sp,256
                    state = CORE_INVALID;
    22d0:	0304                	addi	s1,sp,384
    22d2:	04090003          	lb	zero,64(s2)
    *instr = str;
    22d6:	0100                	addi	s0,sp,128
}
    22d8:	1105                	addi	sp,sp,-31
    22da:	0200                	addi	s0,sp,256
                    transition_count[CORE_S1]++;
    22dc:	0304                	addi	s1,sp,384
    22de:	0306                	slli	t1,t1,0x1
    for (; *str && state != CORE_INVALID; str++)
    22e0:	0900                	addi	s0,sp,144
    22e2:	0008                	0x8
    22e4:	0501                	addi	a0,a0,0
    22e6:	0005                	c.nop	1
        if (NEXT_SYMBOL == ',') /* end of this input */
    22e8:	0402                	c.slli64	s0
    22ea:	00030603          	lb	a2,0(t1)
            str++;
    22ee:	0009                	c.nop	2
        if (NEXT_SYMBOL == ',') /* end of this input */
    22f0:	0100                	addi	s0,sp,128
    22f2:	0306                	slli	t1,t1,0x1
    for (; *str && state != CORE_INVALID; str++)
    22f4:	0902                	c.slli64	s2
    22f6:	0004                	0x4
    22f8:	0501                	addi	a0,a0,0
    22fa:	0608                	addi	a0,sp,768
    22fc:	00090003          	lb	zero,0(s2)
                    transition_count[CORE_FLOAT]++;
    2300:	0100                	addi	s0,sp,128
    2302:	0505                	addi	a0,a0,1
    2304:	0306                	slli	t1,t1,0x1
    2306:	091a                	slli	s2,s2,0x6
    2308:	0004                	0x4
    230a:	0501                	addi	a0,a0,0
    for (; *str && state != CORE_INVALID; str++)
    230c:	0608                	addi	a0,sp,768
    230e:	00090003          	lb	zero,0(s2)
    2312:	0100                	addi	s0,sp,128
        if (NEXT_SYMBOL == ',') /* end of this input */
    2314:	0905                	addi	s2,s2,1
    2316:	0306                	slli	t1,t1,0x1
            str++;
    2318:	0901                	addi	s2,s2,0
    231a:	0004                	0x4
        if (NEXT_SYMBOL == ',') /* end of this input */
    231c:	0501                	addi	a0,a0,0
    231e:	0305                	addi	t1,t1,1
                    transition_count[CORE_S2]++;
    2320:	0901                	addi	s2,s2,0
    2322:	000c                	0xc
                if (NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-')
    2324:	0301                	addi	t1,t1,0
    2326:	090a                	slli	s2,s2,0x2
    2328:	0000                	unimp
    232a:	0301                	addi	t1,t1,0
                    transition_count[CORE_S2]++;
    232c:	0902                	c.slli64	s2
    232e:	0008                	0x8
    2330:	0501                	addi	a0,a0,0
    2332:	0601                	addi	a2,a2,0
                if (NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-')
    2334:	00090103          	lb	sp,0(s2)
                    state = CORE_INVALID;
    2338:	0100                	addi	s0,sp,128
    233a:	1b05                	addi	s6,s6,-31
    *instr = str;
    233c:	0306                	slli	t1,t1,0x1
    233e:	7e9a                	flw	ft9,164(sp)
}
    2340:	3c09                	jal	1d52 <matrix_test+0x2d2>
    2342:	0100                	addi	s0,sp,128
    for (; *str && state != CORE_INVALID; str++)
    2344:	1105                	addi	sp,sp,-31
    2346:	00090103          	lb	sp,0(s2)
    234a:	0100                	addi	s0,sp,128
            str++;
    234c:	4c05                	li	s8,1
    234e:	0306                	slli	t1,t1,0x1
        if (NEXT_SYMBOL == ',') /* end of this input */
    2350:	0901                	addi	s2,s2,0
    2352:	0000                	unimp
                    transition_count[CORE_EXPONENT]++;
    2354:	0501                	addi	a0,a0,0
    2356:	030e                	slli	t1,t1,0x3
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    2358:	0901                	addi	s2,s2,0
    235a:	000c                	0xc
    235c:	0501                	addi	a0,a0,0
    235e:	033a                	slli	t1,t1,0xe
                    transition_count[CORE_EXPONENT]++;
    2360:	097f                	0x97f
    2362:	0004                	0x4
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    2364:	0501                	addi	a0,a0,0
    2366:	030e                	slli	t1,t1,0x3
                    transition_count[CORE_EXPONENT]++;
    2368:	0901                	addi	s2,s2,0
    236a:	0004                	0x4
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    236c:	0501                	addi	a0,a0,0
    236e:	0315                	addi	t1,t1,5
    for (; *str && state != CORE_INVALID; str++)
    2370:	097f                	0x97f
    2372:	0004                	0x4
    2374:	0501                	addi	a0,a0,0
    2376:	062e                	slli	a2,a2,0xb
            str++;
    2378:	04097e03          	0x4097e03
        if (NEXT_SYMBOL == ',') /* end of this input */
    237c:	0100                	addi	s0,sp,128
    237e:	1b05                	addi	s6,s6,-31
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    2380:	00090003          	lb	zero,0(s2)
        if (NEXT_SYMBOL == ',') /* end of this input */
    2384:	0100                	addi	s0,sp,128
    2386:	0d05                	addi	s10,s10,1
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    2388:	00090303          	lb	t1,0(s2)
    238c:	0100                	addi	s0,sp,128
    238e:	0e05                	addi	t3,t3,1
    2390:	0306                	slli	t1,t1,0x1
    2392:	0900                	addi	s0,sp,144
                    transition_count[CORE_INVALID]++;
    2394:	0000                	unimp
    2396:	0501                	addi	a0,a0,0
    2398:	0605                	addi	a2,a2,1
    239a:	08094303          	lbu	t1,128(s2)
                    state = CORE_INVALID;
    239e:	0100                	addi	s0,sp,128
                    transition_count[CORE_INVALID]++;
    23a0:	0805                	addi	a6,a6,1
    23a2:	0306                	slli	t1,t1,0x1
    23a4:	0900                	addi	s0,sp,144
    23a6:	0000                	unimp
    for (; *str && state != CORE_INVALID; str++)
    23a8:	0501                	addi	a0,a0,0
    23aa:	0309                	addi	t1,t1,2
    23ac:	0901                	addi	s2,s2,0
    23ae:	0008                	0x8
    23b0:	0601                	addi	a2,a2,0
    23b2:	0c090203          	lb	tp,192(s2)
    23b6:	0100                	addi	s0,sp,128
    23b8:	00090103          	lb	sp,0(s2)
        if (NEXT_SYMBOL == ',') /* end of this input */
    23bc:	0100                	addi	s0,sp,128
    23be:	00090103          	lb	sp,0(s2)
    for (; *str && state != CORE_INVALID; str++)
    23c2:	0100                	addi	s0,sp,128
    23c4:	1a05                	addi	s4,s4,-31
    23c6:	0306                	slli	t1,t1,0x1
    23c8:	097e                	slli	s2,s2,0x1f
    23ca:	0000                	unimp
    23cc:	0301                	addi	t1,t1,0
    23ce:	0902                	c.slli64	s2
    23d0:	0010                	0x10
    23d2:	0501                	addi	a0,a0,0
    23d4:	0609                	addi	a2,a2,2
    23d6:	0c097103          	0xc097103
        if (NEXT_SYMBOL == ',') /* end of this input */
    23da:	0100                	addi	s0,sp,128
    for (; *str && state != CORE_INVALID; str++)
    23dc:	1a05                	addi	s4,s4,-31
    23de:	0306                	slli	t1,t1,0x1
    23e0:	0900                	addi	s0,sp,144
    23e2:	0000                	unimp
                transition_count[CORE_START]++;
    23e4:	0501                	addi	a0,a0,0
    23e6:	0605                	addi	a2,a2,1
    for (; *str && state != CORE_INVALID; str++)
    23e8:	09029d03          	lh	s10,144(t0) # 5684 <modf+0x68>
    23ec:	000c                	0xc
    23ee:	0501                	addi	a0,a0,0
            str++;
    23f0:	0309                	addi	t1,t1,2
    23f2:	0901                	addi	s2,s2,0
        if (NEXT_SYMBOL == ',') /* end of this input */
    23f4:	0000                	unimp
    23f6:	0301                	addi	t1,t1,0
    for (; *str && state != CORE_INVALID; str++)
    23f8:	7de8                	flw	fa0,124(a1)
    23fa:	1009                	c.nop	-30
    23fc:	0100                	addi	s0,sp,128
    23fe:	00090103          	lb	sp,0(s2)
                    transition_count[CORE_S1]++;
    2402:	0100                	addi	s0,sp,128
    for (; *str && state != CORE_INVALID; str++)
    2404:	00090103          	lb	sp,0(s2)
    2408:	0100                	addi	s0,sp,128
    240a:	1a05                	addi	s4,s4,-31
        if (NEXT_SYMBOL == ',') /* end of this input */
    240c:	0306                	slli	t1,t1,0x1
    240e:	0900                	addi	s0,sp,144
            str++;
    2410:	0000                	unimp
    2412:	0501                	addi	a0,a0,0
        if (NEXT_SYMBOL == ',') /* end of this input */
    2414:	0605                	addi	a2,a2,1
    2416:	0c090203          	lb	tp,192(s2)
    for (; *str && state != CORE_INVALID; str++)
    241a:	0100                	addi	s0,sp,128
    241c:	0905                	addi	s2,s2,1
    241e:	0901f903          	0x901f903
    2422:	0004                	0x4
        if (NEXT_SYMBOL == ',') /* end of this input */
    2424:	0501                	addi	a0,a0,0
    2426:	0305                	addi	t1,t1,1
            break;
    2428:	0918                	addi	a4,sp,144
    242a:	000c                	0xc
    for (; *str && state != CORE_INVALID; str++)
    242c:	0301                	addi	t1,t1,0
    242e:	0902                	c.slli64	s2
    2430:	0000                	unimp
    2432:	0501                	addi	a0,a0,0
    2434:	0309                	addi	t1,t1,2
    2436:	094a                	slli	s2,s2,0x12
    2438:	0004                	0x4
    243a:	0301                	addi	t1,t1,0
                    state = CORE_S2;
    243c:	0902                	c.slli64	s2
    243e:	000c                	0xc
    2440:	0501                	addi	a0,a0,0
    2442:	0615                	addi	a2,a2,5
                    state = CORE_EXPONENT;
    2444:	00090003          	lb	zero,0(s2)
    2448:	0100                	addi	s0,sp,128
    244a:	0905                	addi	s2,s2,1
                    state = CORE_S1;
    244c:	0306                	slli	t1,t1,0x1
    244e:	0978                	addi	a4,sp,156
    2450:	0008                	0x8
    2452:	0501                	addi	a0,a0,0
    for (; *str && state != CORE_INVALID; str++)
    2454:	0628                	addi	a0,sp,776
    2456:	00090103          	lb	sp,0(s2)
        if (NEXT_SYMBOL == ',') /* end of this input */
    245a:	0100                	addi	s0,sp,128
    245c:	1905                	addi	s2,s2,-31
    245e:	10090103          	lb	sp,256(s2)
    for (; *str && state != CORE_INVALID; str++)
    2462:	0100                	addi	s0,sp,128
        if (NEXT_SYMBOL == ',') /* end of this input */
    2464:	0905                	addi	s2,s2,1
    2466:	0c097e03          	0xc097e03
    246a:	0100                	addi	s0,sp,128
{
    246c:	0505                	addi	a0,a0,1
    246e:	0306                	slli	t1,t1,0x1
    2470:	001c091b          	0x1c091b
    2474:	0501                	addi	a0,a0,0
    2476:	061a                	slli	a2,a2,0x6
    2478:	00090003          	lb	zero,0(s2)
    247c:	0100                	addi	s0,sp,128
    247e:	0805                	addi	a6,a6,1
    2480:	04090003          	lb	zero,64(s2)
    2484:	0100                	addi	s0,sp,128
    2486:	0d05                	addi	s10,s10,1
    2488:	0306                	slli	t1,t1,0x1
    248a:	7fa0                	flw	fs0,120(a5)
    248c:	0809                	addi	a6,a6,2
    248e:	0100                	addi	s0,sp,128
    2490:	00090103          	lb	sp,0(s2)
    2494:	0100                	addi	s0,sp,128
    2496:	0c090103          	lb	sp,192(s2)
    while (*p != 0)
    249a:	0100                	addi	s0,sp,128
    ee_u8 *p = memblock;
    249c:	0505                	addi	a0,a0,1
    249e:	00091303          	lh	t1,0(s2)
        final_counts[i] = track_counts[i] = 0;
    24a2:	0100                	addi	s0,sp,128
    24a4:	1605                	addi	a2,a2,-31
    24a6:	0306                	slli	t1,t1,0x1
    24a8:	0000096b          	0x96b
    24ac:	0501                	addi	a0,a0,0
    24ae:	060d                	addi	a2,a2,3
    24b0:	08097b03          	0x8097b03
    24b4:	0100                	addi	s0,sp,128
    24b6:	00090103          	lb	sp,0(s2)
    24ba:	0100                	addi	s0,sp,128
    24bc:	0c090103          	lb	sp,192(s2)
    24c0:	0100                	addi	s0,sp,128
    24c2:	0505                	addi	a0,a0,1
    24c4:	00091803          	lh	a6,0(s2)
    24c8:	0100                	addi	s0,sp,128
    24ca:	1605                	addi	a2,a2,-31
    24cc:	0306                	slli	t1,t1,0x1
    24ce:	0966                	slli	s2,s2,0x19
    24d0:	0000                	unimp
    24d2:	0501                	addi	a0,a0,0
    24d4:	060d                	addi	a2,a2,3
    24d6:	08091303          	lh	t1,128(s2)
    24da:	0100                	addi	s0,sp,128
    24dc:	00090103          	lb	sp,0(s2)
    24e0:	0100                	addi	s0,sp,128
    24e2:	0c090103          	lb	sp,192(s2)
{
    24e6:	0100                	addi	s0,sp,128
    24e8:	0505                	addi	a0,a0,1
    24ea:	00090503          	lb	a0,0(s2)
    24ee:	0100                	addi	s0,sp,128
    24f0:	1605                	addi	a2,a2,-31
    24f2:	0306                	slli	t1,t1,0x1
    24f4:	0979                	addi	s2,s2,30
    24f6:	0000                	unimp
    while (*p != 0)
    24f8:	0501                	addi	a0,a0,0
    24fa:	0305                	addi	t1,t1,1
    24fc:	096a                	slli	s2,s2,0x1a
    24fe:	0008                	0x8
        enum CORE_STATE fstate = core_state_transition(&p, track_counts);
    2500:	0901                	addi	s2,s2,0
    2502:	000c                	0xc
    2504:	0100                	addi	s0,sp,128
    2506:	f101                	bnez	a0,2406 <core_state_transition+0x2b2>
    2508:	03000013          	li	zero,48
        final_counts[fstate]++;
    250c:	6200                	flw	fs0,0(a2)
    250e:	0000                	unimp
    2510:	0100                	addi	s0,sp,128
    2512:	fb01                	bnez	a4,2422 <core_state_transition+0x2ce>
    2514:	0d0e                	slli	s10,s10,0x3
    2516:	0100                	addi	s0,sp,128
    while (*p != 0)
    2518:	0101                	addi	sp,sp,0
    251a:	0001                	nop
        final_counts[fstate]++;
    251c:	0000                	unimp
    251e:	0001                	nop
    while (*p != 0)
    2520:	0100                	addi	s0,sp,128
    2522:	6168732f          	vamoandei64.v	zero,(a6),v22,v6,v0.t
        final_counts[fstate]++;
    2526:	6572                	flw	fa0,28(sp)
    2528:	2f64                	fld	fs1,216(a4)
    252a:	65726f63          	bltu	tp,s7,2b88 <cvt+0x288>
    while (*p != 0)
    252e:	616d                	addi	sp,sp,240
    p = memblock;
    2530:	6b72                	flw	fs6,28(sp)
    2532:	0000                	unimp
    while (p < (memblock + blksize))
    2534:	65726f63          	bltu	tp,s7,2b92 <cvt+0x292>
    while (*p != 0)
    2538:	6d5f 7461 6972      	0x697274616d5f
    while (p < (memblock + blksize))
    253e:	2e78                	fld	fa4,216(a2)
        p += step;
    2540:	00010063          	beqz	sp,2540 <core_bench_state+0xd4>
        if (*p != ',')
    2544:	6300                	flw	fs0,0(a4)
    2546:	5f65726f          	jal	tp,59b3c <RAM_SIZE+0x49b3c>
    254a:	6f70                	flw	fa2,92(a4)
    254c:	7472                	flw	fs0,60(sp)
    254e:	656d                	lui	a0,0x1b
            *p ^= (ee_u8)seed1;
    2550:	682e                	flw	fa6,200(sp)
    2552:	0100                	addi	s0,sp,128
        if (*p != ',')
    2554:	0000                	unimp
    2556:	65726f63          	bltu	tp,s7,2bb4 <cvt+0x2b4>
            *p ^= (ee_u8)seed1;
    255a:	616d                	addi	sp,sp,240
        p += step;
    255c:	6b72                	flw	fs6,28(sp)
    255e:	682e                	flw	fa6,200(sp)
    2560:	0100                	addi	s0,sp,128
    2562:	0000                	unimp
    2564:	623c                	flw	fa5,64(a2)
    2566:	6975                	lui	s2,0x1d
    while (p < (memblock + blksize))
    2568:	746c                	flw	fa1,108(s0)
    256a:	692d                	lui	s2,0xb
    while (*p != 0)
    256c:	3e6e                	fld	ft8,248(sp)
    256e:	0000                	unimp
    p = memblock;
    2570:	0000                	unimp
    2572:	0500                	addi	s0,sp,640
    while (*p != 0)
    2574:	0001                	nop
    2576:	0205                	addi	tp,tp,1
    2578:	13b0                	addi	a2,sp,488
    257a:	0000                	unimp
        enum CORE_STATE fstate = core_state_transition(&p, track_counts);
    257c:	0101b503          	0x101b503
    2580:	0306                	slli	t1,t1,0x1
    2582:	0900                	addi	s0,sp,144
    2584:	0038                	addi	a4,sp,8
    2586:	0501                	addi	a0,a0,0
        final_counts[fstate]++;
    2588:	0605                	addi	a2,a2,1
    258a:	08090103          	lb	sp,128(s2) # b080 <__stack_top+0xff0>
    258e:	0100                	addi	s0,sp,128
    2590:	00090103          	lb	sp,0(s2)
    while (*p != 0)
    2594:	0100                	addi	s0,sp,128
    2596:	00090103          	lb	sp,0(s2)
        final_counts[fstate]++;
    259a:	0100                	addi	s0,sp,128
    while (*p != 0)
    259c:	00090103          	lb	sp,0(s2)
        final_counts[fstate]++;
    25a0:	0100                	addi	s0,sp,128
    25a2:	00090103          	lb	sp,0(s2)
    25a6:	0100                	addi	s0,sp,128
    while (*p != 0)
    25a8:	00090103          	lb	sp,0(s2)
    p = memblock;
    25ac:	0100                	addi	s0,sp,128
    25ae:	00090103          	lb	sp,0(s2)
    while (p < (memblock + blksize))
    25b2:	0100                	addi	s0,sp,128
        if (*p != ',')
    25b4:	0e05                	addi	t3,t3,1
    25b6:	0306                	slli	t1,t1,0x1
    25b8:	0901                	addi	s2,s2,0
    25ba:	0000                	unimp
            *p ^= (ee_u8)seed2;
    25bc:	0501                	addi	a0,a0,0
    25be:	0308                	addi	a0,sp,384
        if (*p != ',')
    25c0:	097f                	0x97f
    25c2:	0004                	0x4
            *p ^= (ee_u8)seed2;
    25c4:	0501                	addi	a0,a0,0
    25c6:	0203060b          	0x203060b
        p += step;
    25ca:	0809                	addi	a6,a6,2
    25cc:	0100                	addi	s0,sp,128
    25ce:	1305                	addi	t1,t1,-31
    25d0:	0306                	slli	t1,t1,0x1
    25d2:	0906                	slli	s2,s2,0x1
    while (p < (memblock + blksize))
    25d4:	0000                	unimp
    25d6:	0501                	addi	a0,a0,0
    25d8:	097a030b          	0x97a030b
    25dc:	0010                	0x10
    25de:	0501                	addi	a0,a0,0
        crc = crcu32(final_counts[i], crc);
    25e0:	0609                	addi	a2,a2,2
    25e2:	08090203          	lb	tp,128(s2)
    25e6:	0100                	addi	s0,sp,128
    for (i = 0; i < NUM_CORE_STATES; i++)
    25e8:	0a05                	addi	s4,s4,1
    25ea:	0306                	slli	t1,t1,0x1
        crc = crcu32(final_counts[i], crc);
    25ec:	0900                	addi	s0,sp,144
    25ee:	0004                	0x4
    25f0:	0501                	addi	a0,a0,0
    25f2:	0609                	addi	a2,a2,2
        crc = crcu32(track_counts[i], crc);
    25f4:	04090103          	lb	sp,64(s2)
    for (i = 0; i < NUM_CORE_STATES; i++)
    25f8:	0100                	addi	s0,sp,128
    25fa:	0b05                	addi	s6,s6,1
        crc = crcu32(track_counts[i], crc);
    25fc:	00097d03          	0x97d03
    2600:	0100                	addi	s0,sp,128
    2602:	0f05                	addi	t5,t5,1
    for (i = 0; i < NUM_CORE_STATES; i++)
    2604:	0306                	slli	t1,t1,0x1
    2606:	00000903          	lb	s2,0(zero) # 0 <RAM_START_ADDRESS>
}
    260a:	0501                	addi	a0,a0,0
    260c:	0900030b          	0x900030b
    2610:	000c                	0xc
    2612:	0301                	addi	t1,t1,0
    2614:	097d                	addi	s2,s2,31
    2616:	0004                	0x4
    2618:	0501                	addi	a0,a0,0
    261a:	0605                	addi	a2,a2,1
    261c:	04090503          	lb	a0,64(s2)
    2620:	0100                	addi	s0,sp,128
    2622:	00090103          	lb	sp,0(s2)
    2626:	0100                	addi	s0,sp,128
    2628:	00090103          	lb	sp,0(s2)
    262c:	0100                	addi	s0,sp,128
    262e:	0f05                	addi	t5,t5,1
    2630:	0306                	slli	t1,t1,0x1
    2632:	0900                	addi	s0,sp,144
    while (p < (memblock + blksize))
    2634:	0000                	unimp
    2636:	0501                	addi	a0,a0,0
    2638:	09000307          	vlse8.v	v6,(zero),a6,v0.t
    263c:	000c                	0xc
    263e:	0501                	addi	a0,a0,0
    while (*p != 0)
    2640:	0900030b          	0x900030b
    2644:	0004                	0x4
    2646:	0501                	addi	a0,a0,0
    switch (i)
    2648:	030a                	slli	t1,t1,0x2
    264a:	0914                	addi	a3,sp,144
    264c:	0008                	0x8
    264e:	0501                	addi	a0,a0,0
    2650:	096c0307          	vlse8.v	v6,(s8),s6,v0.t
    2654:	0004                	0x4
    2656:	0501                	addi	a0,a0,0
    2658:	0605                	addi	a2,a2,1
    265a:	04090203          	lb	tp,64(s2)
    265e:	0100                	addi	s0,sp,128
    2660:	1105                	addi	sp,sp,-31
    2662:	00090003          	lb	zero,0(s2)
    2666:	0100                	addi	s0,sp,128
            retval = seed5_volatile;
    2668:	0505                	addi	a0,a0,1
    266a:	0306                	slli	t1,t1,0x1
            break;
    266c:	0900                	addi	s0,sp,144
    266e:	0000                	unimp
            retval = seed1_volatile;
    2670:	0501                	addi	a0,a0,0
    2672:	031a                	slli	t1,t1,0x6
            break;
    2674:	0904                	addi	s1,sp,144
    2676:	0008                	0x8
            retval = seed2_volatile;
    2678:	0501                	addi	a0,a0,0
    267a:	097a030b          	0x97a030b
            break;
    267e:	0004                	0x4
            retval = seed3_volatile;
    2680:	0501                	addi	a0,a0,0
    2682:	031a                	slli	t1,t1,0x6
            break;
    2684:	0906                	slli	s2,s2,0x1
    2686:	0010                	0x10
            retval = seed4_volatile;
    2688:	0501                	addi	a0,a0,0
    268a:	0312                	slli	t1,t1,0x4
            break;
    268c:	00040907          	vle8.v	v18,(s0),v0.t
{
    2690:	0501                	addi	a0,a0,0
    2692:	0615                	addi	a2,a2,5
}
    2694:	04097703          	0x4097703
{
    2698:	0100                	addi	s0,sp,128
    269a:	0e05                	addi	t3,t3,1
    269c:	0306                	slli	t1,t1,0x1
    269e:	0974                	addi	a3,sp,156
            crc |= 0x8000;
    26a0:	0008                	0x8
    26a2:	0501                	addi	a0,a0,0
{
    26a4:	0310                	addi	a2,sp,384
    26a6:	090c                	addi	a1,sp,144
            crc |= 0x8000;
    26a8:	0004                	0x4
    26aa:	0501                	addi	a0,a0,0
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    26ac:	000d                	c.nop	3
    26ae:	0402                	c.slli64	s0
    for (i = 0; i < 8; i++)
    26b0:	02030603          	lb	a2,32(t1)
    26b4:	0409                	addi	s0,s0,2
    26b6:	0100                	addi	s0,sp,128
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    26b8:	2405                	jal	28d8 <crc16+0x6c>
    26ba:	0200                	addi	s0,sp,256
    for (i = 0; i < 8; i++)
    26bc:	0304                	addi	s1,sp,384
    26be:	0306                	slli	t1,t1,0x1
            crc |= 0x8000;
    26c0:	0900                	addi	s0,sp,144
    26c2:	0000                	unimp
        data >>= 1;
    26c4:	0501                	addi	a0,a0,0
    26c6:	001a                	c.slli	zero,0x6
        if (x16 == 1)
    26c8:	0402                	c.slli64	s0
    26ca:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
            crc |= 0x8000;
    26ce:	000c                	0xc
    26d0:	0501                	addi	a0,a0,0
    26d2:	000d                	c.nop	3
    for (i = 0; i < 8; i++)
    26d4:	0402                	c.slli64	s0
    26d6:	01030603          	lb	a2,16(t1)
}
    26da:	1c09                	addi	s8,s8,-30
{
    26dc:	0100                	addi	s0,sp,128
    26de:	2205                	jal	27fe <crcu32+0x9e>
            crc |= 0x8000;
    26e0:	0200                	addi	s0,sp,256
    26e2:	0304                	addi	s1,sp,384
{
    26e4:	0306                	slli	t1,t1,0x1
    26e6:	0900                	addi	s0,sp,144
    crc = crcu8((ee_u8)(newval), crc);
    26e8:	0000                	unimp
    26ea:	0501                	addi	a0,a0,0
    26ec:	000d                	c.nop	3
    26ee:	0402                	c.slli64	s0
            crc |= 0x8000;
    26f0:	01030603          	lb	a2,16(t1)
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    26f4:	0c09                	addi	s8,s8,2
    26f6:	0100                	addi	s0,sp,128
    for (i = 0; i < 8; i++)
    26f8:	0200                	addi	s0,sp,256
    26fa:	0304                	addi	s1,sp,384
        crc >>= 1;
    26fc:	00090103          	lb	sp,0(s2)
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    2700:	0100                	addi	s0,sp,128
    2702:	2105                	jal	2b22 <cvt+0x222>
    for (i = 0; i < 8; i++)
    2704:	0200                	addi	s0,sp,256
    2706:	0304                	addi	s1,sp,384
            crc |= 0x8000;
    2708:	0306                	slli	t1,t1,0x1
    270a:	0901                	addi	s2,s2,0
        data >>= 1;
    270c:	0000                	unimp
    270e:	0501                	addi	a0,a0,0
        if (x16 == 1)
    2710:	001a                	c.slli	zero,0x6
    2712:	0402                	c.slli64	s0
            crc |= 0x8000;
    2714:	097f0303          	lb	t1,151(t5)
    2718:	0004                	0x4
    271a:	0501                	addi	a0,a0,0
    for (i = 0; i < 8; i++)
    271c:	000d                	c.nop	3
    271e:	0402                	c.slli64	s0
            crc |= 0x8000;
    2720:	01030603          	lb	a2,16(t1)
    crc = crcu8((ee_u8)((newval) >> 8), crc);
    2724:	0409                	addi	s0,s0,2
    2726:	0100                	addi	s0,sp,128
    2728:	0200                	addi	s0,sp,256
    272a:	0304                	addi	s1,sp,384
            crc |= 0x8000;
    272c:	00090103          	lb	sp,0(s2)
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    2730:	0100                	addi	s0,sp,128
    2732:	0200                	addi	s0,sp,256
    for (i = 0; i < 8; i++)
    2734:	0304                	addi	s1,sp,384
    2736:	00090103          	lb	sp,0(s2)
    273a:	0100                	addi	s0,sp,128
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    273c:	1a05                	addi	s4,s4,-31
    273e:	0200                	addi	s0,sp,256
    for (i = 0; i < 8; i++)
    2740:	0304                	addi	s1,sp,384
    2742:	0306                	slli	t1,t1,0x1
            crc |= 0x8000;
    2744:	097f                	0x97f
    2746:	0000                	unimp
        data >>= 1;
    2748:	0001                	nop
    274a:	0402                	c.slli64	s0
        if (x16 == 1)
    274c:	09010303          	lb	t1,144(sp)
            crc |= 0x8000;
    2750:	0004                	0x4
    2752:	0501                	addi	a0,a0,0
    2754:	000d                	c.nop	3
    2756:	0402                	c.slli64	s0
    for (i = 0; i < 8; i++)
    2758:	01030603          	lb	a2,16(t1)
}
    275c:	0809                	addi	a6,a6,2
    275e:	0100                	addi	s0,sp,128
{
    2760:	1d05                	addi	s10,s10,-31
    2762:	0200                	addi	s0,sp,256
    return crcu16((ee_u16)newval, crc);
    2764:	0304                	addi	s1,sp,384
    2766:	0306                	slli	t1,t1,0x1
            crc |= 0x8000;
    2768:	00000977          	0x977
{
    276c:	0501                	addi	a0,a0,0
    276e:	0012                	c.slli	zero,0x4
    return crcu16((ee_u16)newval, crc);
    2770:	0402                	c.slli64	s0
    2772:	09090303          	lb	t1,144(s2)
    crc = crcu8((ee_u8)(newval), crc);
    2776:	0004                	0x4
    2778:	0501                	addi	a0,a0,0
    277a:	001c                	0x1c
            crc |= 0x8000;
    277c:	0402                	c.slli64	s0
    277e:	77030603          	lb	a2,1904(t1)
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    2782:	0409                	addi	s0,s0,2
    for (i = 0; i < 8; i++)
    2784:	0100                	addi	s0,sp,128
    2786:	1505                	addi	a0,a0,-31
        crc >>= 1;
    2788:	0200                	addi	s0,sp,256
    278a:	0304                	addi	s1,sp,384
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    278c:	00090003          	lb	zero,0(s2)
    for (i = 0; i < 8; i++)
    2790:	0100                	addi	s0,sp,128
    2792:	0905                	addi	s2,s2,1
            crc |= 0x8000;
    2794:	0200                	addi	s0,sp,256
    2796:	0304                	addi	s1,sp,384
        data >>= 1;
    2798:	0306                	slli	t1,t1,0x1
    279a:	0900                	addi	s0,sp,144
        if (x16 == 1)
    279c:	0000                	unimp
    279e:	0501                	addi	a0,a0,0
            crc |= 0x8000;
    27a0:	0012                	c.slli	zero,0x4
    27a2:	0402                	c.slli64	s0
    27a4:	0302                	c.slli64	t1
    27a6:	0909                	addi	s2,s2,2
    for (i = 0; i < 8; i++)
    27a8:	000c                	0xc
    27aa:	0501                	addi	a0,a0,0
            crc |= 0x8000;
    27ac:	0019                	c.nop	6
    27ae:	0402                	c.slli64	s0
    crc = crcu8((ee_u8)((newval) >> 8), crc);
    27b0:	0302                	c.slli64	t1
    27b2:	0975                	addi	s2,s2,29
    27b4:	000c                	0xc
    27b6:	0501                	addi	a0,a0,0
            crc |= 0x8000;
    27b8:	0012                	c.slli	zero,0x4
    27ba:	0402                	c.slli64	s0
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    27bc:	0302                	c.slli64	t1
    27be:	0004090b          	0x4090b
    for (i = 0; i < 8; i++)
    27c2:	0501                	addi	a0,a0,0
    27c4:	0018                	0x18
    27c6:	0402                	c.slli64	s0
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    27c8:	0602                	c.slli64	a2
    27ca:	04097503          	0x4097503
    for (i = 0; i < 8; i++)
    27ce:	0100                	addi	s0,sp,128
            crc |= 0x8000;
    27d0:	1105                	addi	sp,sp,-31
    27d2:	0200                	addi	s0,sp,256
        data >>= 1;
    27d4:	0204                	addi	s1,sp,256
    27d6:	00090003          	lb	zero,0(s2)
        if (x16 == 1)
    27da:	0100                	addi	s0,sp,128
            crc |= 0x8000;
    27dc:	0505                	addi	a0,a0,1
    27de:	0200                	addi	s0,sp,256
    27e0:	0204                	addi	s1,sp,256
    27e2:	0306                	slli	t1,t1,0x1
    for (i = 0; i < 8; i++)
    27e4:	0900                	addi	s0,sp,144
    27e6:	0000                	unimp
    crc = crc16((ee_s16)(newval >> 16), crc);
    27e8:	0601                	addi	a2,a2,0
    27ea:	08090f03          	lb	t5,128(s2)
            crc |= 0x8000;
    27ee:	0100                	addi	s0,sp,128
    return crcu16((ee_u16)newval, crc);
    27f0:	1605                	addi	a2,a2,-31
    27f2:	0306                	slli	t1,t1,0x1
    crc = crcu8((ee_u8)(newval), crc);
    27f4:	0902                	c.slli64	s2
    27f6:	0000                	unimp
    27f8:	0501                	addi	a0,a0,0
    27fa:	030a                	slli	t1,t1,0x2
            crc |= 0x8000;
    27fc:	097e                	slli	s2,s2,0x1f
    27fe:	0004                	0x4
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    2800:	0501                	addi	a0,a0,0
    2802:	0316                	slli	t1,t1,0x5
    for (i = 0; i < 8; i++)
    2804:	0902                	c.slli64	s2
    2806:	0008                	0x8
    2808:	0501                	addi	a0,a0,0
    280a:	030a                	slli	t1,t1,0x2
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    280c:	0900                	addi	s0,sp,144
    280e:	0010                	0x10
    for (i = 0; i < 8; i++)
    2810:	0301                	addi	t1,t1,0
    2812:	0901                	addi	s2,s2,0
            crc |= 0x8000;
    2814:	0004                	0x4
    2816:	0501                	addi	a0,a0,0
        data >>= 1;
    2818:	0301                	addi	t1,t1,0
    281a:	0906                	slli	s2,s2,0x1
        if (x16 == 1)
    281c:	0004                	0x4
    281e:	0501                	addi	a0,a0,0
            crc |= 0x8000;
    2820:	030a                	slli	t1,t1,0x2
    2822:	0978                	addi	a4,sp,156
    2824:	000c                	0xc
    2826:	0301                	addi	t1,t1,0
    for (i = 0; i < 8; i++)
    2828:	097f                	0x97f
    282a:	0004                	0x4
            crc |= 0x8000;
    282c:	0501                	addi	a0,a0,0
    282e:	0605                	addi	a2,a2,1
    crc = crcu8((ee_u8)((newval) >> 8), crc);
    2830:	04090103          	lb	sp,64(s2)
    2834:	0100                	addi	s0,sp,128
    2836:	00090103          	lb	sp,0(s2)
            crc |= 0x8000;
    283a:	0100                	addi	s0,sp,128
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    283c:	00090103          	lb	sp,0(s2)
    for (i = 0; i < 8; i++)
    2840:	0100                	addi	s0,sp,128
    2842:	0a05                	addi	s4,s4,1
    2844:	0306                	slli	t1,t1,0x1
    2846:	0900                	addi	s0,sp,144
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    2848:	0000                	unimp
    284a:	0501                	addi	a0,a0,0
    for (i = 0; i < 8; i++)
    284c:	0605                	addi	a2,a2,1
    284e:	04090503          	lb	a0,64(s2)
            crc |= 0x8000;
    2852:	0100                	addi	s0,sp,128
        data >>= 1;
    2854:	0105                	addi	sp,sp,1
    2856:	0306                	slli	t1,t1,0x1
        if (x16 == 1)
    2858:	0901                	addi	s2,s2,0
    285a:	0000                	unimp
            crc |= 0x8000;
    285c:	0501                	addi	a0,a0,0
    285e:	0605                	addi	a2,a2,1
    2860:	34096403          	0x34096403
    for (i = 0; i < 8; i++)
    2864:	0100                	addi	s0,sp,128
    2866:	00090103          	lb	sp,0(s2)
}
    286a:	0100                	addi	s0,sp,128
{
    286c:	00090103          	lb	sp,0(s2)
    return crcu16((ee_u16)newval, crc);
    2870:	0100                	addi	s0,sp,128
    2872:	0705                	addi	a4,a4,1
            crc |= 0x8000;
    2874:	0306                	slli	t1,t1,0x1
    2876:	0900                	addi	s0,sp,144
{
    2878:	0000                	unimp
    287a:	0501                	addi	a0,a0,0
    return crcu16((ee_u16)newval, crc);
    287c:	0900030b          	0x900030b
    crc = crcu8((ee_u8)(newval), crc);
    2880:	0008                	0x8
    2882:	0501                	addi	a0,a0,0
    2884:	09000307          	vlse8.v	v6,(zero),a6,v0.t
            crc |= 0x8000;
    2888:	0004                	0x4
    288a:	0501                	addi	a0,a0,0
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    288c:	0605                	addi	a2,a2,1
    288e:	04090203          	lb	tp,64(s2)
    for (i = 0; i < 8; i++)
    2892:	0100                	addi	s0,sp,128
        crc >>= 1;
    2894:	1105                	addi	sp,sp,-31
    2896:	00090003          	lb	zero,0(s2)
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    289a:	0100                	addi	s0,sp,128
    for (i = 0; i < 8; i++)
    289c:	0705                	addi	a4,a4,1
    289e:	0306                	slli	t1,t1,0x1
            crc |= 0x8000;
    28a0:	097c                	addi	a5,sp,156
    28a2:	0000                	unimp
        data >>= 1;
    28a4:	0501                	addi	a0,a0,0
    28a6:	0902030b          	0x902030b
        if (x16 == 1)
    28aa:	0004                	0x4
            crc |= 0x8000;
    28ac:	0501                	addi	a0,a0,0
    28ae:	0601                	addi	a2,a2,0
    28b0:	08092903          	lw	s2,128(s2)
    for (i = 0; i < 8; i++)
    28b4:	0100                	addi	s0,sp,128
    28b6:	0505                	addi	a0,a0,1
            crc |= 0x8000;
    28b8:	00090103          	lb	sp,0(s2)
    crc = crcu8((ee_u8)((newval) >> 8), crc);
    28bc:	0100                	addi	s0,sp,128
    28be:	00090103          	lb	sp,0(s2)
    28c2:	0100                	addi	s0,sp,128
            crc |= 0x8000;
    28c4:	00090103          	lb	sp,0(s2)
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    28c8:	0100                	addi	s0,sp,128
    28ca:	00090103          	lb	sp,0(s2)
    for (i = 0; i < 8; i++)
    28ce:	0100                	addi	s0,sp,128
    28d0:	1105                	addi	sp,sp,-31
    28d2:	00090003          	lb	zero,0(s2)
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    28d6:	0100                	addi	s0,sp,128
    for (i = 0; i < 8; i++)
    28d8:	0105                	addi	sp,sp,1
    28da:	0306                	slli	t1,t1,0x1
            crc |= 0x8000;
    28dc:	097c                	addi	a5,sp,156
    28de:	0000                	unimp
        data >>= 1;
    28e0:	0501                	addi	a0,a0,0
    28e2:	0305                	addi	t1,t1,1
        if (x16 == 1)
    28e4:	0904                	addi	s1,sp,144
    28e6:	0004                	0x4
            crc |= 0x8000;
    28e8:	0501                	addi	a0,a0,0
    28ea:	030c                	addi	a1,sp,384
    28ec:	0900                	addi	s0,sp,144
    28ee:	0014                	0x14
    for (i = 0; i < 8; i++)
    28f0:	0301                	addi	t1,t1,0
    28f2:	097e                	slli	s2,s2,0x1f
}
    28f4:	0004                	0x4
    28f6:	0501                	addi	a0,a0,0
}
    28f8:	0315                	addi	t1,t1,5
    28fa:	097f                	0x97f
    28fc:	0004                	0x4
    28fe:	0501                	addi	a0,a0,0
{
    2900:	030c                	addi	a1,sp,384
    2902:	0900                	addi	s0,sp,144
    2904:	0004                	0x4
    2906:	0501                	addi	a0,a0,0
    2908:	0305                	addi	t1,t1,1
    290a:	00040903          	lb	s2,0(s0)
    290e:	0501                	addi	a0,a0,0
    2910:	0615                	addi	a2,a2,5
    2912:	04090203          	lb	tp,64(s2)
    2916:	0100                	addi	s0,sp,128
    2918:	0105                	addi	sp,sp,1
    291a:	0306                	slli	t1,t1,0x1
    291c:	097a                	slli	s2,s2,0x1e
    291e:	0004                	0x4
    2920:	0501                	addi	a0,a0,0
    2922:	0315                	addi	t1,t1,5
    2924:	090c                	addi	a1,sp,144
    2926:	0008                	0x8
    2928:	0501                	addi	a0,a0,0
    292a:	0309                	addi	t1,t1,2
    292c:	097a                	slli	s2,s2,0x1e
    292e:	0004                	0x4
    2930:	0501                	addi	a0,a0,0
    2932:	0315                	addi	t1,t1,5
    2934:	0906                	slli	s2,s2,0x1
    2936:	0004                	0x4
    2938:	0501                	addi	a0,a0,0
    293a:	0611                	addi	a2,a2,4
    293c:	04090103          	lb	sp,64(s2)
    2940:	0100                	addi	s0,sp,128
    2942:	1505                	addi	a0,a0,-31
    2944:	0306                	slli	t1,t1,0x1
    2946:	0900                	addi	s0,sp,144
    2948:	0000                	unimp
    294a:	0501                	addi	a0,a0,0
    294c:	060d                	addi	a2,a2,3
    294e:	04090603          	lb	a2,64(s2)
    2952:	0100                	addi	s0,sp,128
    2954:	1c05                	addi	s8,s8,-31
    2956:	00097303          	0x97303
    if (arg < 0)
    295a:	0100                	addi	s0,sp,128
    295c:	1505                	addi	a0,a0,-31
    295e:	00090003          	lb	zero,0(s2)
    2962:	0100                	addi	s0,sp,128
    2964:	0905                	addi	s2,s2,1
    2966:	0306                	slli	t1,t1,0x1
    2968:	0900                	addi	s0,sp,144
    296a:	0000                	unimp
    296c:	0501                	addi	a0,a0,0
    296e:	060d                	addi	a2,a2,3
    2970:	04090203          	lb	tp,64(s2)
    2974:	0100                	addi	s0,sp,128
    2976:	1105                	addi	sp,sp,-31
    *sign = 0;
    2978:	00090403          	lb	s0,0(s2)
    arg = modf(arg, &fi);
    297c:	0100                	addi	s0,sp,128
    297e:	00090503          	lb	a0,0(s2)
    2982:	0100                	addi	s0,sp,128
    2984:	0306                	slli	t1,t1,0x1
    2986:	00040977          	0x40977
    298a:	0501                	addi	a0,a0,0
    if (fi != 0)
    298c:	060d                	addi	a2,a2,3
    298e:	04090103          	lb	sp,64(s2)
    2992:	0100                	addi	s0,sp,128
    arg = modf(arg, &fi);
    2994:	1505                	addi	a0,a0,-31
    2996:	0306                	slli	t1,t1,0x1
    if (fi != 0)
    2998:	00000903          	lb	s2,0(zero) # 0 <RAM_START_ADDRESS>
    299c:	0501                	addi	a0,a0,0
    299e:	0329                	addi	t1,t1,10
    arg = modf(arg, &fi);
    29a0:	0905                	addi	s2,s2,1
    29a2:	0008                	0x8
    if (fi != 0)
    29a4:	0501                	addi	a0,a0,0
    29a6:	0311                	addi	t1,t1,4
    29a8:	0978                	addi	a4,sp,156
    29aa:	0004                	0x4
    29ac:	0501                	addi	a0,a0,0
    29ae:	060d                	addi	a2,a2,3
    p1  = &buf[CVTBUFSIZE];
    29b0:	04090103          	lb	sp,64(s2)
    if (fi != 0)
    29b4:	0100                	addi	s0,sp,128
    29b6:	1505                	addi	a0,a0,-31
            *--p1 = (int)((fj + .03) * 10) + '0';
    29b8:	0306                	slli	t1,t1,0x1
    29ba:	0902                	c.slli64	s2
    29bc:	0000                	unimp
    29be:	0301                	addi	t1,t1,0
    29c0:	0905                	addi	s2,s2,1
    29c2:	0004                	0x4
    29c4:	0501                	addi	a0,a0,0
    29c6:	0310                	addi	a2,sp,384
            fj    = modf(fi / 10, &fi);
    29c8:	0979                	addi	s2,s2,30
    29ca:	0004                	0x4
    29cc:	0501                	addi	a0,a0,0
    29ce:	0315                	addi	t1,t1,5
            *--p1 = (int)((fj + .03) * 10) + '0';
    29d0:	00040907          	vle8.v	v18,(s0),v0.t
    29d4:	0501                	addi	a0,a0,0
    29d6:	0309                	addi	t1,t1,2
    p1  = &buf[CVTBUFSIZE];
    29d8:	0975                	addi	s2,s2,29
    29da:	0004                	0x4
            fj    = modf(fi / 10, &fi);
    29dc:	0501                	addi	a0,a0,0
    29de:	0315                	addi	t1,t1,5
    29e0:	0004090b          	0x4090b
    29e4:	0501                	addi	a0,a0,0
    29e6:	060d                	addi	a2,a2,3
    29e8:	04090203          	lb	tp,64(s2)
    29ec:	0100                	addi	s0,sp,128
    29ee:	1c05                	addi	s8,s8,-31
    29f0:	00097303          	0x97303
    29f4:	0100                	addi	s0,sp,128
    29f6:	1505                	addi	a0,a0,-31
            *--p1 = (int)((fj + .03) * 10) + '0';
    29f8:	00090003          	lb	zero,0(s2)
    29fc:	0100                	addi	s0,sp,128
    29fe:	0905                	addi	s2,s2,1
            fj    = modf(fi / 10, &fi);
    2a00:	0306                	slli	t1,t1,0x1
    2a02:	0900                	addi	s0,sp,144
    2a04:	0000                	unimp
    2a06:	0501                	addi	a0,a0,0
            *--p1 = (int)((fj + .03) * 10) + '0';
    2a08:	0018                	0x18
    2a0a:	0402                	c.slli64	s0
    2a0c:	0602                	c.slli64	a2
    2a0e:	04097e03          	0x4097e03
    2a12:	0100                	addi	s0,sp,128
    2a14:	1905                	addi	s2,s2,-31
    2a16:	0200                	addi	s0,sp,256
    2a18:	0204                	addi	s1,sp,256
    2a1a:	0306                	slli	t1,t1,0x1
        while (fi != 0)
    2a1c:	0900                	addi	s0,sp,144
    2a1e:	0000                	unimp
    2a20:	0501                	addi	a0,a0,0
    2a22:	0011                	c.nop	4
            *--p1 = (int)((fj + .03) * 10) + '0';
    2a24:	0402                	c.slli64	s0
    2a26:	0602                	c.slli64	a2
    2a28:	04090003          	lb	zero,64(s2)
    2a2c:	0100                	addi	s0,sp,128
    2a2e:	0505                	addi	a0,a0,1
    2a30:	0200                	addi	s0,sp,256
    2a32:	0204                	addi	s1,sp,256
    2a34:	0306                	slli	t1,t1,0x1
    2a36:	0900                	addi	s0,sp,144
        while (fi != 0)
    2a38:	0000                	unimp
    2a3a:	0601                	addi	a2,a2,0
    2a3c:	08091203          	lh	tp,128(s2)
    2a40:	0100                	addi	s0,sp,128
    2a42:	0105                	addi	sp,sp,1
    2a44:	0306                	slli	t1,t1,0x1
    2a46:	0901                	addi	s2,s2,0
    2a48:	0000                	unimp
    2a4a:	0501                	addi	a0,a0,0
    2a4c:	030c                	addi	a1,sp,384
    2a4e:	0004096b          	0x4096b
    2a52:	0501                	addi	a0,a0,0
    2a54:	0605                	addi	a2,a2,1
    2a56:	04091403          	lh	s0,64(s2)
    2a5a:	0100                	addi	s0,sp,128
        while (p1 < &buf[CVTBUFSIZE])
    2a5c:	0105                	addi	sp,sp,1
    2a5e:	0306                	slli	t1,t1,0x1
    2a60:	0901                	addi	s2,s2,0
    2a62:	0000                	unimp
    2a64:	0601                	addi	a2,a2,0
    2a66:	04090803          	lb	a6,64(s2)
            *p++ = *p1++;
    2a6a:	0100                	addi	s0,sp,128
    2a6c:	0505                	addi	a0,a0,1
    2a6e:	00090103          	lb	sp,0(s2)
    2a72:	0100                	addi	s0,sp,128
    2a74:	00090103          	lb	sp,0(s2)
        while (p1 < &buf[CVTBUFSIZE])
    2a78:	0100                	addi	s0,sp,128
    2a7a:	1105                	addi	sp,sp,-31
            *p++ = *p1++;
    2a7c:	00090003          	lb	zero,0(s2)
    2a80:	0100                	addi	s0,sp,128
    2a82:	0505                	addi	a0,a0,1
    p1 = &buf[ndigits];
    2a84:	0306                	slli	t1,t1,0x1
    2a86:	0900                	addi	s0,sp,144
    2a88:	0000                	unimp
    2a8a:	0501                	addi	a0,a0,0
    if (eflag == 0)
    2a8c:	0301                	addi	t1,t1,0
    2a8e:	097e                	slli	s2,s2,0x1f
    2a90:	0004                	0x4
    2a92:	0501                	addi	a0,a0,0
        p1 += r2;
    2a94:	09060333          	0x9060333
    *decpt = r2;
    2a98:	0050                	addi	a2,sp,4
    2a9a:	0501                	addi	a0,a0,0
    if (p1 < &buf[0])
    2a9c:	030c                	addi	a1,sp,384
    2a9e:	097c                	addi	a5,sp,156
    while (p <= p1 && p < &buf[CVTBUFSIZE])
    2aa0:	0004                	0x4
    2aa2:	0501                	addi	a0,a0,0
    2aa4:	0305                	addi	t1,t1,1
    2aa6:	0900                	addi	s0,sp,144
    2aa8:	0004                	0x4
    2aaa:	0501                	addi	a0,a0,0
        arg *= 10;
    2aac:	0615                	addi	a2,a2,5
    2aae:	04090203          	lb	tp,64(s2)
    2ab2:	0100                	addi	s0,sp,128
    2ab4:	0105                	addi	sp,sp,1
    2ab6:	0306                	slli	t1,t1,0x1
    while (p <= p1 && p < &buf[CVTBUFSIZE])
    2ab8:	097c                	addi	a5,sp,156
    2aba:	000c                	0xc
        arg *= 10;
    2abc:	0501                	addi	a0,a0,0
    2abe:	000d                	c.nop	3
    2ac0:	0402                	c.slli64	s0
    2ac2:	06030603          	lb	a2,96(t1)
    2ac6:	0409                	addi	s0,s0,2
    2ac8:	0100                	addi	s0,sp,128
    2aca:	3105                	jal	26ea <crcu16+0xe>
    2acc:	0200                	addi	s0,sp,256
    2ace:	0304                	addi	s1,sp,384
        arg  = modf(arg, &fj);
    2ad0:	0306                	slli	t1,t1,0x1
    2ad2:	0900                	addi	s0,sp,144
    2ad4:	0000                	unimp
    2ad6:	0501                	addi	a0,a0,0
    2ad8:	0009                	c.nop	2
    2ada:	0402                	c.slli64	s0
    2adc:	097e0303          	lb	t1,151(t3) # 1a097 <RAM_SIZE+0xa097>
        *p++ = (int)fj + '0';
    2ae0:	0008                	0x8
    2ae2:	0501                	addi	a0,a0,0
    2ae4:	0031                	c.nop	12
    2ae6:	0402                	c.slli64	s0
    2ae8:	09020303          	lb	t1,144(tp) # 90 <__do_global_dtors_aux+0x34>
    2aec:	0004                	0x4
    2aee:	0501                	addi	a0,a0,0
    2af0:	001a                	c.slli	zero,0x6
    2af2:	0402                	c.slli64	s0
    2af4:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    while (p <= p1 && p < &buf[CVTBUFSIZE])
    2af8:	0004                	0x4
    2afa:	0501                	addi	a0,a0,0
    if (p1 >= &buf[CVTBUFSIZE])
    2afc:	001c                	0x1c
    2afe:	0402                	c.slli64	s0
    *p1 += 5;
    2b00:	7e030603          	lb	a2,2016(t1)
    while (*p1 > '9')
    2b04:	0409                	addi	s0,s0,2
    2b06:	0100                	addi	s0,sp,128
    *p1 += 5;
    2b08:	1505                	addi	a0,a0,-31
    2b0a:	0200                	addi	s0,sp,256
    2b0c:	0304                	addi	s1,sp,384
    2b0e:	00090003          	lb	zero,0(s2)
    2b12:	0100                	addi	s0,sp,128
    while (*p1 > '9')
    2b14:	0905                	addi	s2,s2,1
    2b16:	0200                	addi	s0,sp,256
    2b18:	0304                	addi	s1,sp,384
    2b1a:	0306                	slli	t1,t1,0x1
        *p1 = '0';
    2b1c:	0900                	addi	s0,sp,144
    2b1e:	0000                	unimp
            *p1 = '1';
    2b20:	0501                	addi	a0,a0,0
    2b22:	0018                	0x18
    while (*p1 > '9')
    2b24:	0402                	c.slli64	s0
    2b26:	0602                	c.slli64	a2
        *p1 = '0';
    2b28:	08097e03          	0x8097e03
        if (p1 > buf)
    2b2c:	0100                	addi	s0,sp,128
    2b2e:	1905                	addi	s2,s2,-31
            ++*--p1;
    2b30:	0200                	addi	s0,sp,256
    2b32:	0204                	addi	s1,sp,256
    2b34:	0306                	slli	t1,t1,0x1
    2b36:	0900                	addi	s0,sp,144
    2b38:	0000                	unimp
    2b3a:	0501                	addi	a0,a0,0
    2b3c:	0011                	c.nop	4
    2b3e:	0402                	c.slli64	s0
    2b40:	0602                	c.slli64	a2
    2b42:	04090003          	lb	zero,64(s2)
    while (*p1 > '9')
    2b46:	0100                	addi	s0,sp,128
    *p = '\0';
    2b48:	0505                	addi	a0,a0,1
    2b4a:	0200                	addi	s0,sp,256
}
    2b4c:	0204                	addi	s1,sp,256
    2b4e:	0306                	slli	t1,t1,0x1
    2b50:	0900                	addi	s0,sp,144
    2b52:	0000                	unimp
    2b54:	0501                	addi	a0,a0,0
    2b56:	0301                	addi	t1,t1,0
    2b58:	000c0907          	vle8.v	v18,(s8),v0.t
    2b5c:	0601                	addi	a2,a2,0
    2b5e:	3c090703          	lb	a4,960(s2)
    2b62:	0100                	addi	s0,sp,128
    2b64:	0505                	addi	a0,a0,1
    2b66:	00090103          	lb	sp,0(s2)
    2b6a:	0100                	addi	s0,sp,128
    2b6c:	00090103          	lb	sp,0(s2)
    2b70:	0100                	addi	s0,sp,128
    2b72:	1105                	addi	sp,sp,-31
    2b74:	00090003          	lb	zero,0(s2)
    2b78:	0100                	addi	s0,sp,128
    2b7a:	0505                	addi	a0,a0,1
    2b7c:	0306                	slli	t1,t1,0x1
    2b7e:	0900                	addi	s0,sp,144
    2b80:	0000                	unimp
    2b82:	0501                	addi	a0,a0,0
    2b84:	031a                	slli	t1,t1,0x6
    2b86:	0904                	addi	s1,sp,144
    2b88:	000c                	0xc
    2b8a:	0501                	addi	a0,a0,0
    2b8c:	030c                	addi	a1,sp,384
    2b8e:	097c                	addi	a5,sp,156
    2b90:	0010                	0x10
    2b92:	0501                	addi	a0,a0,0
    2b94:	0305                	addi	t1,t1,1
    2b96:	0900                	addi	s0,sp,144
    if (arg < 0)
    2b98:	0004                	0x4
    2b9a:	0501                	addi	a0,a0,0
    2b9c:	0615                	addi	a2,a2,5
    2b9e:	04090203          	lb	tp,64(s2)
    2ba2:	0100                	addi	s0,sp,128
    2ba4:	0105                	addi	sp,sp,1
    2ba6:	0306                	slli	t1,t1,0x1
    2ba8:	097c                	addi	a5,sp,156
    2baa:	0004                	0x4
    2bac:	0501                	addi	a0,a0,0
    2bae:	000d                	c.nop	3
    2bb0:	0402                	c.slli64	s0
    2bb2:	06030603          	lb	a2,96(t1)
        *sign = 1;
    2bb6:	0409                	addi	s0,s0,2
    2bb8:	0100                	addi	s0,sp,128
    2bba:	1a05                	addi	s4,s4,-31
        arg   = -arg;
    2bbc:	0200                	addi	s0,sp,256
    2bbe:	0304                	addi	s1,sp,384
    2bc0:	0306                	slli	t1,t1,0x1
    2bc2:	0900                	addi	s0,sp,144
    2bc4:	0000                	unimp
    2bc6:	0501                	addi	a0,a0,0
            *p1 = '1';
    2bc8:	0009                	c.nop	2
    2bca:	0402                	c.slli64	s0
            (*decpt)++;
    2bcc:	097e0303          	lb	t1,151(t3)
    2bd0:	0004                	0x4
    2bd2:	0501                	addi	a0,a0,0
    2bd4:	001a                	c.slli	zero,0x6
    2bd6:	0402                	c.slli64	s0
            if (eflag == 0)
    2bd8:	09020303          	lb	t1,144(tp) # 90 <__do_global_dtors_aux+0x34>
    2bdc:	0004                	0x4
    2bde:	0501                	addi	a0,a0,0
    while (*p1 > '9')
    2be0:	001c                	0x1c
    2be2:	0402                	c.slli64	s0
    2be4:	7e030603          	lb	a2,2016(t1)
    2be8:	0809                	addi	a6,a6,2
    2bea:	0100                	addi	s0,sp,128
                if (p > buf)
    2bec:	1505                	addi	a0,a0,-31
    2bee:	0200                	addi	s0,sp,256
                    *p = '0';
    2bf0:	0304                	addi	s1,sp,384
    2bf2:	00090003          	lb	zero,0(s2)
    while (*p1 > '9')
    2bf6:	0100                	addi	s0,sp,128
                p++;
    2bf8:	0905                	addi	s2,s2,1
    2bfa:	0200                	addi	s0,sp,256
    while (*p1 > '9')
    2bfc:	0304                	addi	s1,sp,384
    2bfe:	0306                	slli	t1,t1,0x1
    2c00:	0900                	addi	s0,sp,144
    2c02:	0000                	unimp
    else if (arg > 0)
    2c04:	0501                	addi	a0,a0,0
    2c06:	0018                	0x18
    2c08:	0402                	c.slli64	s0
    2c0a:	0602                	c.slli64	a2
    2c0c:	04097e03          	0x4097e03
    2c10:	0100                	addi	s0,sp,128
    2c12:	1905                	addi	s2,s2,-31
    2c14:	0200                	addi	s0,sp,256
    2c16:	0204                	addi	s1,sp,256
    2c18:	0306                	slli	t1,t1,0x1
    2c1a:	0900                	addi	s0,sp,144
        while ((fj = arg * 10) < 1)
    2c1c:	0000                	unimp
    2c1e:	0501                	addi	a0,a0,0
    2c20:	0011                	c.nop	4
    2c22:	0402                	c.slli64	s0
    2c24:	0602                	c.slli64	a2
    2c26:	04090003          	lb	zero,64(s2)
    2c2a:	0100                	addi	s0,sp,128
    2c2c:	0505                	addi	a0,a0,1
    2c2e:	0200                	addi	s0,sp,256
    2c30:	0204                	addi	s1,sp,256
    2c32:	0306                	slli	t1,t1,0x1
    2c34:	0900                	addi	s0,sp,144
    2c36:	0000                	unimp
    2c38:	0501                	addi	a0,a0,0
    2c3a:	0301                	addi	t1,t1,0
    2c3c:	00080907          	vle8.v	v18,(a6),v0.t
    2c40:	0601                	addi	a2,a2,0
    2c42:	04090903          	lb	s2,64(s2)
    2c46:	0100                	addi	s0,sp,128
    2c48:	0505                	addi	a0,a0,1
    2c4a:	00090103          	lb	sp,0(s2)
    2c4e:	0100                	addi	s0,sp,128
    2c50:	00090103          	lb	sp,0(s2)
    2c54:	0100                	addi	s0,sp,128
    2c56:	1105                	addi	sp,sp,-31
    2c58:	00090003          	lb	zero,0(s2)
    r2    = 0;
    2c5c:	0100                	addi	s0,sp,128
    2c5e:	0505                	addi	a0,a0,1
        while ((fj = arg * 10) < 1)
    2c60:	0306                	slli	t1,t1,0x1
    2c62:	0900                	addi	s0,sp,144
    2c64:	0000                	unimp
    2c66:	0501                	addi	a0,a0,0
    2c68:	0301                	addi	t1,t1,0
    2c6a:	097e                	slli	s2,s2,0x1f
    2c6c:	0004                	0x4
    2c6e:	0501                	addi	a0,a0,0
    2c70:	030e                	slli	t1,t1,0x3
    2c72:	0904                	addi	s1,sp,144
    2c74:	0018                	0x18
    2c76:	0501                	addi	a0,a0,0
    2c78:	0301                	addi	t1,t1,0
    2c7a:	097c                	addi	a5,sp,156
    2c7c:	0004                	0x4
    2c7e:	0501                	addi	a0,a0,0
    2c80:	030e                	slli	t1,t1,0x3
    2c82:	0904                	addi	s1,sp,144
    2c84:	0014                	0x14
    2c86:	0501                	addi	a0,a0,0
    2c88:	0301                	addi	t1,t1,0
    2c8a:	097c                	addi	a5,sp,156
    2c8c:	0010                	0x10
    2c8e:	0501                	addi	a0,a0,0
    2c90:	030e                	slli	t1,t1,0x3
    2c92:	0904                	addi	s1,sp,144
    2c94:	0018                	0x18
    2c96:	0501                	addi	a0,a0,0
    2c98:	0609                	addi	a2,a2,2
    2c9a:	0c090003          	lb	zero,192(s2)
    2c9e:	0100                	addi	s0,sp,128
            r2--;
    2ca0:	00090103          	lb	sp,0(s2)
        while ((fj = arg * 10) < 1)
    2ca4:	0100                	addi	s0,sp,128
    2ca6:	1505                	addi	a0,a0,-31
    2ca8:	00090003          	lb	zero,0(s2)
    2cac:	0100                	addi	s0,sp,128
    2cae:	0e05                	addi	t3,t3,1
    2cb0:	0306                	slli	t1,t1,0x1
    2cb2:	097f                	0x97f
    2cb4:	0008                	0x8
    2cb6:	0501                	addi	a0,a0,0
        buf[0] = '\0';
    2cb8:	000d                	c.nop	3
    2cba:	0402                	c.slli64	s0
        return buf;
    2cbc:	03030603          	lb	a2,48(t1)
        buf[CVTBUFSIZE - 1] = '\0';
    2cc0:	0809                	addi	a6,a6,2
    2cc2:	0100                	addi	s0,sp,128
        return buf;
    2cc4:	2a05                	jal	2df4 <number+0xf0>
    2cc6:	0200                	addi	s0,sp,256
    2cc8:	0304                	addi	s1,sp,384
    2cca:	0306                	slli	t1,t1,0x1
    r2    = 0;
    2ccc:	0900                	addi	s0,sp,144
    2cce:	0000                	unimp
    2cd0:	0501                	addi	a0,a0,0
    2cd2:	0009                	c.nop	2
        while ((fj = arg * 10) < 1)
    2cd4:	0402                	c.slli64	s0
    2cd6:	097e0303          	lb	t1,151(t3)
    2cda:	0008                	0x8
    return cvt(arg, ndigits, decpt, sign, CVTBUF, 1);
    2cdc:	0501                	addi	a0,a0,0
    2cde:	002a                	c.slli	zero,0xa
    2ce0:	0402                	c.slli64	s0
    2ce2:	09020303          	lb	t1,144(tp) # 90 <__do_global_dtors_aux+0x34>
    2ce6:	0008                	0x8
    return cvt(arg, ndigits, decpt, sign, buf, 1);
    2ce8:	0501                	addi	a0,a0,0
    2cea:	0012                	c.slli	zero,0x4
    2cec:	0402                	c.slli64	s0
    2cee:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    return cvt(arg, ndigits, decpt, sign, CVTBUF, 0);
    2cf2:	0004                	0x4
    2cf4:	0501                	addi	a0,a0,0
    2cf6:	001c                	0x1c
    2cf8:	0402                	c.slli64	s0
    2cfa:	7e030603          	lb	a2,2016(t1)
    return cvt(arg, ndigits, decpt, sign, buf, 0);
    2cfe:	0409                	addi	s0,s0,2
    2d00:	0100                	addi	s0,sp,128
    2d02:	1505                	addi	a0,a0,-31
{
    2d04:	0200                	addi	s0,sp,256
    2d06:	0304                	addi	s1,sp,384
    2d08:	00090003          	lb	zero,0(s2)
    2d0c:	0100                	addi	s0,sp,128
    2d0e:	0905                	addi	s2,s2,1
    2d10:	0200                	addi	s0,sp,256
    2d12:	0304                	addi	s1,sp,384
    2d14:	0306                	slli	t1,t1,0x1
    2d16:	0900                	addi	s0,sp,144
    2d18:	0000                	unimp
    2d1a:	0501                	addi	a0,a0,0
    2d1c:	0018                	0x18
    2d1e:	0402                	c.slli64	s0
    2d20:	0602                	c.slli64	a2
    2d22:	08097d03          	0x8097d03
    2d26:	0100                	addi	s0,sp,128
    2d28:	1105                	addi	sp,sp,-31
    2d2a:	0200                	addi	s0,sp,256
    2d2c:	0204                	addi	s1,sp,256
    2d2e:	00090003          	lb	zero,0(s2)
    2d32:	0100                	addi	s0,sp,128
    2d34:	0505                	addi	a0,a0,1
    2d36:	0200                	addi	s0,sp,256
    2d38:	0204                	addi	s1,sp,256
    2d3a:	0306                	slli	t1,t1,0x1
    if (type & UPPERCASE)
    2d3c:	0900                	addi	s0,sp,144
    2d3e:	0000                	unimp
{
    2d40:	0501                	addi	a0,a0,0
    2d42:	0301                	addi	t1,t1,0
    2d44:	0908                	addi	a0,sp,144
    2d46:	000c                	0xc
    2d48:	0601                	addi	a2,a2,0
    2d4a:	38090903          	lb	s2,896(s2)
    2d4e:	0100                	addi	s0,sp,128
    2d50:	0505                	addi	a0,a0,1
    2d52:	00090103          	lb	sp,0(s2)
    if (type & UPPERCASE)
    2d56:	0100                	addi	s0,sp,128
        dig = upper_digits;
    2d58:	00090103          	lb	sp,0(s2)
    2d5c:	0100                	addi	s0,sp,128
    2d5e:	1105                	addi	sp,sp,-31
    if (type & LEFT)
    2d60:	00090003          	lb	zero,0(s2)
    2d64:	0100                	addi	s0,sp,128
    2d66:	0105                	addi	sp,sp,1
        type &= ~ZEROPAD;
    2d68:	0306                	slli	t1,t1,0x1
    2d6a:	097e                	slli	s2,s2,0x1f
    2d6c:	0000                	unimp
    2d6e:	0301                	addi	t1,t1,0
    c    = (type & ZEROPAD) ? '0' : ' ';
    2d70:	0900                	addi	s0,sp,144
    2d72:	0038                	addi	a4,sp,8
    2d74:	0501                	addi	a0,a0,0
    2d76:	0305                	addi	t1,t1,1
    if (type & SIGN)
    2d78:	0902                	c.slli64	s2
    2d7a:	0008                	0x8
    if (type & HEX_PREP)
    2d7c:	0501                	addi	a0,a0,0
    2d7e:	031a                	slli	t1,t1,0x6
    if (type & SIGN)
    2d80:	0904                	addi	s1,sp,144
    2d82:	0008                	0x8
        if (num < 0)
    2d84:	0501                	addi	a0,a0,0
    2d86:	030c                	addi	a1,sp,384
        else if (type & PLUS)
    2d88:	097c                	addi	a5,sp,156
    2d8a:	0018                	0x18
    2d8c:	0501                	addi	a0,a0,0
    2d8e:	0615                	addi	a2,a2,5
        else if (type & SPACE)
    2d90:	04090203          	lb	tp,64(s2)
    sign = 0;
    2d94:	0100                	addi	s0,sp,128
    2d96:	1a05                	addi	s4,s4,-31
        else if (type & SPACE)
    2d98:	0306                	slli	t1,t1,0x1
    2d9a:	0902                	c.slli64	s2
            sign = ' ';
    2d9c:	0004                	0x4
    2d9e:	0501                	addi	a0,a0,0
            size--;
    2da0:	0310                	addi	a2,sp,384
    2da2:	097e                	slli	s2,s2,0x1f
            sign = ' ';
    2da4:	001c                	0x1c
    2da6:	0501                	addi	a0,a0,0
    if (type & HEX_PREP)
    2da8:	060d                	addi	a2,a2,3
    2daa:	04090203          	lb	tp,64(s2)
        if (base == 16)
    2dae:	0100                	addi	s0,sp,128
    2db0:	00090103          	lb	sp,0(s2)
            size--;
    2db4:	0100                	addi	s0,sp,128
    2db6:	1905                	addi	s2,s2,-31
    2db8:	00090003          	lb	zero,0(s2)
    2dbc:	0100                	addi	s0,sp,128
    2dbe:	1105                	addi	sp,sp,-31
    if (num == 0)
    2dc0:	0200                	addi	s0,sp,256
    2dc2:	0304                	addi	s1,sp,384
        tmp[i++] = '0';
    2dc4:	0c090203          	lb	tp,192(s2)
    2dc8:	0100                	addi	s0,sp,128
    2dca:	3605                	jal	28ea <crc16+0x7e>
    2dcc:	0200                	addi	s0,sp,256
    2dce:	0304                	addi	s1,sp,384
    2dd0:	0306                	slli	t1,t1,0x1
    2dd2:	0900                	addi	s0,sp,144
    2dd4:	0000                	unimp
    2dd6:	0501                	addi	a0,a0,0
    2dd8:	000d                	c.nop	3
    2dda:	0402                	c.slli64	s0
    if (i > precision)
    2ddc:	097e0303          	lb	t1,151(t3)
    2de0:	0008                	0x8
    2de2:	0501                	addi	a0,a0,0
    2de4:	0036                	c.slli	zero,0xd
    2de6:	0402                	c.slli64	s0
    2de8:	09020303          	lb	t1,144(tp) # 90 <__do_global_dtors_aux+0x34>
    if (!(type & (ZEROPAD | LEFT)))
    2dec:	0008                	0x8
    2dee:	0501                	addi	a0,a0,0
    size -= precision;
    2df0:	001e                	c.slli	zero,0x7
    2df2:	0402                	c.slli64	s0
        while (size-- > 0)
    2df4:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    if (!(type & (ZEROPAD | LEFT)))
    2df8:	0004                	0x4
    2dfa:	0501                	addi	a0,a0,0
        while (size-- > 0)
    2dfc:	0020                	addi	s0,sp,8
    2dfe:	0402                	c.slli64	s0
            *str++ = ' ';
    2e00:	7e030603          	lb	a2,2016(t1)
    2e04:	0409                	addi	s0,s0,2
    2e06:	0100                	addi	s0,sp,128
    2e08:	1905                	addi	s2,s2,-31
    2e0a:	0200                	addi	s0,sp,256
    2e0c:	0304                	addi	s1,sp,384
    2e0e:	00090003          	lb	zero,0(s2)
    2e12:	0100                	addi	s0,sp,128
    2e14:	0d05                	addi	s10,s10,1
    2e16:	0200                	addi	s0,sp,256
        while (size-- > 0)
    2e18:	0304                	addi	s1,sp,384
    2e1a:	0306                	slli	t1,t1,0x1
    if (sign)
    2e1c:	0900                	addi	s0,sp,144
    2e1e:	0000                	unimp
    2e20:	0501                	addi	a0,a0,0
    2e22:	001c                	0x1c
        *str++ = sign;
    2e24:	0402                	c.slli64	s0
    2e26:	0602                	c.slli64	a2
    2e28:	08097d03          	0x8097d03
    if (type & HEX_PREP)
    2e2c:	0100                	addi	s0,sp,128
    2e2e:	1d05                	addi	s10,s10,-31
        if (base == 8)
    2e30:	0200                	addi	s0,sp,256
    2e32:	0204                	addi	s1,sp,256
    2e34:	0306                	slli	t1,t1,0x1
    2e36:	0900                	addi	s0,sp,144
        else if (base == 16)
    2e38:	0000                	unimp
    2e3a:	0501                	addi	a0,a0,0
    2e3c:	0015                	c.nop	5
    2e3e:	0402                	c.slli64	s0
    if (!(type & LEFT))
    2e40:	0602                	c.slli64	a2
    2e42:	04090003          	lb	zero,64(s2)
        while (size-- > 0)
    2e46:	0100                	addi	s0,sp,128
            *str++ = c;
    2e48:	0905                	addi	s2,s2,1
    2e4a:	0200                	addi	s0,sp,256
    2e4c:	0204                	addi	s1,sp,256
    2e4e:	0306                	slli	t1,t1,0x1
    2e50:	0900                	addi	s0,sp,144
    2e52:	0000                	unimp
    2e54:	0501                	addi	a0,a0,0
    2e56:	0018                	0x18
    2e58:	0402                	c.slli64	s0
    2e5a:	0602                	c.slli64	a2
        while (size-- > 0)
    2e5c:	14097e03          	0x14097e03
            *str++ = c;
    2e60:	0100                	addi	s0,sp,128
    2e62:	1905                	addi	s2,s2,-31
    2e64:	0200                	addi	s0,sp,256
    2e66:	0204                	addi	s1,sp,256
        while (size-- > 0)
    2e68:	0306                	slli	t1,t1,0x1
    2e6a:	0900                	addi	s0,sp,144
            *str++ = c;
    2e6c:	0000                	unimp
    2e6e:	0501                	addi	a0,a0,0
    2e70:	0011                	c.nop	4
    2e72:	0402                	c.slli64	s0
    while (size-- > 0)
    2e74:	0602                	c.slli64	a2
    2e76:	04090003          	lb	zero,64(s2)
    while (i < precision--)
    2e7a:	0100                	addi	s0,sp,128
        *str++ = '0';
    2e7c:	0505                	addi	a0,a0,1
    2e7e:	0200                	addi	s0,sp,256
    2e80:	0204                	addi	s1,sp,256
    2e82:	0306                	slli	t1,t1,0x1
    2e84:	0900                	addi	s0,sp,144
    2e86:	0000                	unimp
    2e88:	0501                	addi	a0,a0,0
    2e8a:	0301                	addi	t1,t1,0
    2e8c:	0018090b          	0x18090b
    2e90:	0601                	addi	a2,a2,0
    2e92:	3c090903          	lb	s2,960(s2)
    while (i-- > 0)
    2e96:	0100                	addi	s0,sp,128
        while (size-- > 0)
    2e98:	0505                	addi	a0,a0,1
    2e9a:	00090103          	lb	sp,0(s2)
    while (i-- > 0)
    2e9e:	0100                	addi	s0,sp,128
    2ea0:	00090103          	lb	sp,0(s2)
        *str++ = tmp[i];
    2ea4:	0100                	addi	s0,sp,128
    2ea6:	1105                	addi	sp,sp,-31
    2ea8:	00090003          	lb	zero,0(s2)
    while (i-- > 0)
    2eac:	0100                	addi	s0,sp,128
    2eae:	0105                	addi	sp,sp,1
    2eb0:	0306                	slli	t1,t1,0x1
    2eb2:	097e                	slli	s2,s2,0x1f
    2eb4:	0000                	unimp
    2eb6:	0301                	addi	t1,t1,0
        *str++ = tmp[i];
    2eb8:	0900                	addi	s0,sp,144
    2eba:	0038                	addi	a4,sp,8
    while (i-- > 0)
    2ebc:	0501                	addi	a0,a0,0
    2ebe:	0305                	addi	t1,t1,1
    2ec0:	0902                	c.slli64	s2
    2ec2:	0008                	0x8
        *str++ = tmp[i];
    2ec4:	0501                	addi	a0,a0,0
    2ec6:	031a                	slli	t1,t1,0x6
    2ec8:	0904                	addi	s1,sp,144
    2eca:	0008                	0x8
    while (size-- > 0)
    2ecc:	0501                	addi	a0,a0,0
    2ece:	030c                	addi	a1,sp,384
        *str++ = ' ';
    2ed0:	097c                	addi	a5,sp,156
    2ed2:	0018                	0x18
    2ed4:	0501                	addi	a0,a0,0
    2ed6:	0615                	addi	a2,a2,5
    2ed8:	04090203          	lb	tp,64(s2)
    2edc:	0100                	addi	s0,sp,128
    2ede:	1a05                	addi	s4,s4,-31
    2ee0:	0306                	slli	t1,t1,0x1
    2ee2:	0902                	c.slli64	s2
    2ee4:	0004                	0x4
    2ee6:	0501                	addi	a0,a0,0
    2ee8:	0310                	addi	a2,sp,384
    2eea:	097e                	slli	s2,s2,0x1f
    2eec:	001c                	0x1c
    2eee:	0501                	addi	a0,a0,0
    2ef0:	060d                	addi	a2,a2,3
    2ef2:	04090203          	lb	tp,64(s2)
}
    2ef6:	0100                	addi	s0,sp,128
    2ef8:	00090103          	lb	sp,0(s2)
    2efc:	0100                	addi	s0,sp,128
    2efe:	1905                	addi	s2,s2,-31
    2f00:	00090003          	lb	zero,0(s2)
    2f04:	0100                	addi	s0,sp,128
    2f06:	1105                	addi	sp,sp,-31
    2f08:	0200                	addi	s0,sp,256
    2f0a:	0304                	addi	s1,sp,384
    2f0c:	0c090203          	lb	tp,192(s2)
    2f10:	0100                	addi	s0,sp,128
    2f12:	1805                	addi	a6,a6,-31
    2f14:	0200                	addi	s0,sp,256
    2f16:	0304                	addi	s1,sp,384
    2f18:	0306                	slli	t1,t1,0x1
    2f1a:	0900                	addi	s0,sp,144
    2f1c:	0000                	unimp
    2f1e:	0501                	addi	a0,a0,0
    2f20:	000d                	c.nop	3
    2f22:	0402                	c.slli64	s0
    2f24:	097e0303          	lb	t1,151(t3)
    2f28:	0008                	0x8
    2f2a:	0501                	addi	a0,a0,0
    2f2c:	0018                	0x18
    2f2e:	0402                	c.slli64	s0
    2f30:	09020303          	lb	t1,144(tp) # 90 <__do_global_dtors_aux+0x34>
    if (!(type & (ZEROPAD | LEFT)))
    2f34:	0008                	0x8
    2f36:	0501                	addi	a0,a0,0
    2f38:	0011                	c.nop	4
    2f3a:	0402                	c.slli64	s0
    c    = (type & ZEROPAD) ? '0' : ' ';
    2f3c:	01030603          	lb	a2,16(t1)
    2f40:	0409                	addi	s0,s0,2
    2f42:	0100                	addi	s0,sp,128
    2f44:	2105                	jal	3364 <ee_printf+0x330>
    2f46:	0200                	addi	s0,sp,256
    2f48:	0304                	addi	s1,sp,384
    2f4a:	0306                	slli	t1,t1,0x1
    if (type & SIGN)
    2f4c:	0900                	addi	s0,sp,144
    2f4e:	0000                	unimp
    if (type & HEX_PREP)
    2f50:	0501                	addi	a0,a0,0
    2f52:	003a                	c.slli	zero,0xe
    if (type & SIGN)
    2f54:	0402                	c.slli64	s0
    2f56:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    2f5a:	0004                	0x4
    char *dig = digits;
    2f5c:	0501                	addi	a0,a0,0
    2f5e:	0038                	addi	a4,sp,8
    2f60:	0402                	c.slli64	s0
    2f62:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    2f66:	0004                	0x4
    sign = 0;
    2f68:	0501                	addi	a0,a0,0
    2f6a:	001e                	c.slli	zero,0x7
    2f6c:	0402                	c.slli64	s0
    2f6e:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
            sign = '-';
    2f72:	000c                	0xc
    2f74:	0501                	addi	a0,a0,0
    2f76:	0020                	addi	s0,sp,8
            num  = -num;
    2f78:	0402                	c.slli64	s0
    2f7a:	7d030603          	lb	a2,2000(t1)
            size--;
    2f7e:	0409                	addi	s0,s0,2
    if (type & HEX_PREP)
    2f80:	0100                	addi	s0,sp,128
    2f82:	1905                	addi	s2,s2,-31
    if (base < 2 || base > 36)
    2f84:	0200                	addi	s0,sp,256
    2f86:	0304                	addi	s1,sp,384
    2f88:	00090003          	lb	zero,0(s2)
            tmp[i++] = dig[((unsigned long)num) % (unsigned)base];
    2f8c:	0100                	addi	s0,sp,128
    2f8e:	0d05                	addi	s10,s10,1
    2f90:	0200                	addi	s0,sp,256
    2f92:	0304                	addi	s1,sp,384
    2f94:	0306                	slli	t1,t1,0x1
    2f96:	0900                	addi	s0,sp,144
    2f98:	0000                	unimp
    2f9a:	0501                	addi	a0,a0,0
    2f9c:	001c                	0x1c
    2f9e:	0402                	c.slli64	s0
    2fa0:	0602                	c.slli64	a2
    2fa2:	08097d03          	0x8097d03
    2fa6:	0100                	addi	s0,sp,128
    2fa8:	1d05                	addi	s10,s10,-31
    2faa:	0200                	addi	s0,sp,256
            num      = ((unsigned long)num) / (unsigned)base;
    2fac:	0204                	addi	s1,sp,256
    2fae:	0306                	slli	t1,t1,0x1
    2fb0:	0900                	addi	s0,sp,144
    2fb2:	0000                	unimp
            tmp[i++] = dig[((unsigned long)num) % (unsigned)base];
    2fb4:	0501                	addi	a0,a0,0
    2fb6:	0015                	c.nop	5
    2fb8:	0402                	c.slli64	s0
    2fba:	0602                	c.slli64	a2
            num      = ((unsigned long)num) / (unsigned)base;
    2fbc:	04090003          	lb	zero,64(s2)
    2fc0:	0100                	addi	s0,sp,128
    2fc2:	0905                	addi	s2,s2,1
        while (num != 0)
    2fc4:	0200                	addi	s0,sp,256
    2fc6:	0204                	addi	s1,sp,256
    2fc8:	0306                	slli	t1,t1,0x1
    2fca:	0900                	addi	s0,sp,144
            sign = '+';
    2fcc:	0000                	unimp
    2fce:	0501                	addi	a0,a0,0
            size--;
    2fd0:	0018                	0x18
    2fd2:	0402                	c.slli64	s0
            sign = '+';
    2fd4:	0602                	c.slli64	a2
    2fd6:	14097e03          	0x14097e03
    2fda:	0100                	addi	s0,sp,128
            *str++ = '0';
    2fdc:	1905                	addi	s2,s2,-31
    2fde:	0200                	addi	s0,sp,256
    2fe0:	0204                	addi	s1,sp,256
    2fe2:	0306                	slli	t1,t1,0x1
            *str++ = digits[33];
    2fe4:	0900                	addi	s0,sp,144
    2fe6:	0000                	unimp
    2fe8:	0501                	addi	a0,a0,0
    2fea:	0011                	c.nop	4
    2fec:	0402                	c.slli64	s0
    2fee:	0602                	c.slli64	a2
    2ff0:	04090003          	lb	zero,64(s2)
            size -= 2;
    2ff4:	0100                	addi	s0,sp,128
    2ff6:	0505                	addi	a0,a0,1
    2ff8:	0200                	addi	s0,sp,256
    2ffa:	0204                	addi	s1,sp,256
            *str++ = '0';
    2ffc:	0306                	slli	t1,t1,0x1
    2ffe:	0900                	addi	s0,sp,144
    3000:	0000                	unimp
    3002:	0501                	addi	a0,a0,0
    3004:	0301                	addi	t1,t1,0
    3006:	090c                	addi	a1,sp,144
    3008:	0018                	0x18
    300a:	0601                	addi	a2,a2,0
        while (size-- > 0)
    300c:	097e9c03          	lh	s8,151(t4)
    3010:	003c                	addi	a5,sp,8
    3012:	0501                	addi	a0,a0,0
    3014:	060c                	addi	a1,sp,768
    3016:	0c090203          	lb	tp,192(s2)
        while (size-- > 0)
    301a:	0100                	addi	s0,sp,128
    301c:	0105                	addi	sp,sp,1
    301e:	04097e03          	0x4097e03
    3022:	0100                	addi	s0,sp,128
    3024:	2c090003          	lb	zero,704(s2)
	*uart = c;
    3028:	0100                	addi	s0,sp,128
    302a:	0505                	addi	a0,a0,1
    302c:	0306                	slli	t1,t1,0x1
    302e:	0901                	addi	s2,s2,0
}
    3030:	000c                	0xc
    3032:	0301                	addi	t1,t1,0
{
    3034:	0901                	addi	s2,s2,0
    3036:	0000                	unimp
    3038:	0501                	addi	a0,a0,0
    303a:	060c                	addi	a1,sp,768
    303c:	00090003          	lb	zero,0(s2)
    3040:	0100                	addi	s0,sp,128
    3042:	0505                	addi	a0,a0,1
    3044:	0306                	slli	t1,t1,0x1
    3046:	0902                	c.slli64	s2
    3048:	0004                	0x4
    304a:	0501                	addi	a0,a0,0
    304c:	0311                	addi	t1,t1,4
    304e:	0199                	addi	gp,gp,6
    3050:	0009                	c.nop	2
    3052:	0100                	addi	s0,sp,128
    3054:	0505                	addi	a0,a0,1
    3056:	0306                	slli	t1,t1,0x1
    3058:	0900                	addi	s0,sp,144
    305a:	0000                	unimp
    305c:	0501                	addi	a0,a0,0
    305e:	031a                	slli	t1,t1,0x6
    3060:	0904                	addi	s1,sp,144
    3062:	0014                	0x14
    3064:	0501                	addi	a0,a0,0
    3066:	030c                	addi	a1,sp,384
    3068:	097c                	addi	a5,sp,156
    306a:	0018                	0x18
    306c:	0501                	addi	a0,a0,0
    306e:	0305                	addi	t1,t1,1
    3070:	0900                	addi	s0,sp,144
    3072:	0004                	0x4
    3074:	0501                	addi	a0,a0,0
    3076:	0615                	addi	a2,a2,5
    3078:	04090203          	lb	tp,64(s2)
    307c:	0100                	addi	s0,sp,128
    307e:	0105                	addi	sp,sp,1
    3080:	0306                	slli	t1,t1,0x1
    3082:	7ee1                	lui	t4,0xffff8
    3084:	0809                	addi	a6,a6,2
    3086:	0100                	addi	s0,sp,128
    for (str = buf; *fmt; fmt++)
    3088:	0d05                	addi	s10,s10,1
    308a:	0306                	slli	t1,t1,0x1
    va_start(args, fmt);
    308c:	01a1                	addi	gp,gp,8
    308e:	0409                	addi	s0,s0,2
    3090:	0100                	addi	s0,sp,128
    3092:	1a05                	addi	s4,s4,-31
    for (str = buf; *fmt; fmt++)
    3094:	0306                	slli	t1,t1,0x1
    3096:	0900                	addi	s0,sp,144
    3098:	0000                	unimp
    309a:	0501                	addi	a0,a0,0
    309c:	0309                	addi	t1,t1,2
    309e:	097e                	slli	s2,s2,0x1f
    30a0:	0004                	0x4
    30a2:	0501                	addi	a0,a0,0
                tmp[len++] = digits[n / 10];
    30a4:	031a                	slli	t1,t1,0x6
    30a6:	0902                	c.slli64	s2
    30a8:	0004                	0x4
    30aa:	0501                	addi	a0,a0,0
    for (str = buf; *fmt; fmt++)
    30ac:	061c                	addi	a5,sp,768
    30ae:	08097e03          	0x8097e03
    30b2:	0100                	addi	s0,sp,128
    30b4:	1505                	addi	a0,a0,-31
    30b6:	00090003          	lb	zero,0(s2)
                tmp[len++] = digits[n / 10];
    30ba:	0100                	addi	s0,sp,128
        if (*fmt != '%')
    30bc:	0905                	addi	s2,s2,1
    30be:	0306                	slli	t1,t1,0x1
    30c0:	0900                	addi	s0,sp,144
    30c2:	0000                	unimp
            *str++ = *fmt;
    30c4:	0501                	addi	a0,a0,0
    30c6:	0618                	addi	a4,sp,768
    for (str = buf; *fmt; fmt++)
    30c8:	04097e03          	0x4097e03
            *str++ = *fmt;
    30cc:	0100                	addi	s0,sp,128
    30ce:	1905                	addi	s2,s2,-31
            continue;
    30d0:	0306                	slli	t1,t1,0x1
    30d2:	0900                	addi	s0,sp,144
    for (str = buf; *fmt; fmt++)
    30d4:	0000                	unimp
    30d6:	0501                	addi	a0,a0,0
    *str = '\0';
    30d8:	0611                	addi	a2,a2,4
    30da:	04090003          	lb	zero,64(s2)
    while (*p)
    30de:	0100                	addi	s0,sp,128
    30e0:	0505                	addi	a0,a0,1
    30e2:	0306                	slli	t1,t1,0x1
    30e4:	0900                	addi	s0,sp,144
    30e6:	0000                	unimp
	*uart = c;
    30e8:	0501                	addi	a0,a0,0
    30ea:	09740333          	0x9740333
    30ee:	0010                	0x10
    30f0:	0501                	addi	a0,a0,0
    30f2:	0615                	addi	a2,a2,5
    while (*p)
    30f4:	08097e03          	0x8097e03
    30f8:	0100                	addi	s0,sp,128
    30fa:	0d05                	addi	s10,s10,1
        p++;
    30fc:	14090203          	lb	tp,320(s2)
    while (*p)
    3100:	0100                	addi	s0,sp,128
    3102:	3105                	jal	2d22 <number+0x1e>
}
    3104:	0306                	slli	t1,t1,0x1
    3106:	0900                	addi	s0,sp,144
    3108:	0000                	unimp
    310a:	0501                	addi	a0,a0,0
    310c:	0309                	addi	t1,t1,2
    310e:	097e                	slli	s2,s2,0x1f
    3110:	0008                	0x8
    3112:	0501                	addi	a0,a0,0
    3114:	0331                	addi	t1,t1,12
    3116:	0902                	c.slli64	s2
    3118:	0004                	0x4
    311a:	0501                	addi	a0,a0,0
    311c:	031a                	slli	t1,t1,0x6
    311e:	0900                	addi	s0,sp,144
    3120:	0004                	0x4
    3122:	0501                	addi	a0,a0,0
    3124:	061c                	addi	a5,sp,768
    3126:	04097e03          	0x4097e03
    312a:	0100                	addi	s0,sp,128
    312c:	1505                	addi	a0,a0,-31
    312e:	00090003          	lb	zero,0(s2)
    3132:	0100                	addi	s0,sp,128
    3134:	0905                	addi	s2,s2,1
    3136:	0306                	slli	t1,t1,0x1
    3138:	0900                	addi	s0,sp,144
    313a:	0000                	unimp
    313c:	0501                	addi	a0,a0,0
    313e:	0618                	addi	a4,sp,768
        flags = 0;
    3140:	08097e03          	0x8097e03
    3144:	0100                	addi	s0,sp,128
    3146:	1905                	addi	s2,s2,-31
        switch (*fmt)
    3148:	0306                	slli	t1,t1,0x1
    314a:	0900                	addi	s0,sp,144
        fmt++; // This also skips first '%'
    314c:	0000                	unimp
    314e:	0501                	addi	a0,a0,0
        switch (*fmt)
    3150:	0305                	addi	t1,t1,1
    3152:	0900                	addi	s0,sp,144
    3154:	0004                	0x4
    3156:	0501                	addi	a0,a0,0
    3158:	0319                	addi	t1,t1,6
    315a:	0900                	addi	s0,sp,144
    315c:	0008                	0x8
    315e:	0501                	addi	a0,a0,0
    3160:	0611                	addi	a2,a2,4
    3162:	04090003          	lb	zero,64(s2)
    3166:	0100                	addi	s0,sp,128
    3168:	0505                	addi	a0,a0,1
    316a:	0306                	slli	t1,t1,0x1
        if (is_digit(*fmt))
    316c:	0900                	addi	s0,sp,144
    316e:	0000                	unimp
    3170:	0501                	addi	a0,a0,0
    3172:	0315                	addi	t1,t1,5
    3174:	0969                	addi	s2,s2,26
    3176:	0018                	0x18
    3178:	0501                	addi	a0,a0,0
    317a:	0305                	addi	t1,t1,1
        else if (*fmt == '*')
    317c:	097a                	slli	s2,s2,0x1e
    317e:	0014                	0x14
        field_width = -1;
    3180:	0501                	addi	a0,a0,0
    3182:	0615                	addi	a2,a2,5
        else if (*fmt == '*')
    3184:	04090203          	lb	tp,64(s2)
        if (*fmt == '.')
    3188:	0100                	addi	s0,sp,128
    318a:	0306                	slli	t1,t1,0x1
        precision = -1;
    318c:	0906                	slli	s2,s2,0x1
    318e:	000c                	0xc
        if (*fmt == '.')
    3190:	0501                	addi	a0,a0,0
    3192:	0309                	addi	t1,t1,2
        if (*fmt == 'l' || *fmt == 'L')
    3194:	097a                	slli	s2,s2,0x1e
    3196:	0004                	0x4
    3198:	0501                	addi	a0,a0,0
    319a:	0315                	addi	t1,t1,5
    319c:	0906                	slli	s2,s2,0x1
    319e:	0004                	0x4
        switch (*fmt)
    31a0:	0501                	addi	a0,a0,0
    31a2:	0611                	addi	a2,a2,4
    31a4:	04090103          	lb	sp,64(s2)
    31a8:	0100                	addi	s0,sp,128
    31aa:	1505                	addi	a0,a0,-31
    31ac:	0306                	slli	t1,t1,0x1
    31ae:	0900                	addi	s0,sp,144
    31b0:	0000                	unimp
    31b2:	0501                	addi	a0,a0,0
    31b4:	060d                	addi	a2,a2,3
    31b6:	04090603          	lb	a2,64(s2)
    31ba:	0100                	addi	s0,sp,128
    31bc:	1c05                	addi	s8,s8,-31
    31be:	00097303          	0x97303
                flags |= ZEROPAD;
    31c2:	0100                	addi	s0,sp,128
    for (str = buf; *fmt; fmt++)
    31c4:	1505                	addi	a0,a0,-31
    31c6:	00090003          	lb	zero,0(s2)
    31ca:	0100                	addi	s0,sp,128
                flags |= LEFT;
    31cc:	0905                	addi	s2,s2,1
    31ce:	0306                	slli	t1,t1,0x1
    for (str = buf; *fmt; fmt++)
    31d0:	0900                	addi	s0,sp,144
    31d2:	0000                	unimp
    31d4:	0501                	addi	a0,a0,0
    31d6:	060d                	addi	a2,a2,3
                flags |= PLUS;
    31d8:	04090203          	lb	tp,64(s2)
    for (str = buf; *fmt; fmt++)
    31dc:	0100                	addi	s0,sp,128
    31de:	1105                	addi	sp,sp,-31
    31e0:	00090403          	lb	s0,0(s2)
                flags |= HEX_PREP;
    31e4:	0100                	addi	s0,sp,128
    31e6:	00090503          	lb	a0,0(s2)
    for (str = buf; *fmt; fmt++)
    31ea:	0100                	addi	s0,sp,128
    31ec:	0306                	slli	t1,t1,0x1
    31ee:	00040977          	0x40977
                flags |= SPACE;
    31f2:	0501                	addi	a0,a0,0
    for (str = buf; *fmt; fmt++)
    31f4:	060d                	addi	a2,a2,3
    31f6:	04090103          	lb	sp,64(s2)
    31fa:	0100                	addi	s0,sp,128
        if (*fmt == 'l' || *fmt == 'L')
    31fc:	1505                	addi	a0,a0,-31
    31fe:	0306                	slli	t1,t1,0x1
    3200:	00000903          	lb	s2,0(zero) # 0 <RAM_START_ADDRESS>
                if (*fmt != '%')
    3204:	0501                	addi	a0,a0,0
    3206:	0329                	addi	t1,t1,10
            *str++ = *fmt;
    3208:	0905                	addi	s2,s2,1
    320a:	0008                	0x8
                if (*fmt != '%')
    320c:	0501                	addi	a0,a0,0
    320e:	0311                	addi	t1,t1,4
                    *str++ = '%';
    3210:	0978                	addi	a4,sp,156
    3212:	0004                	0x4
                if (*fmt)
    3214:	0501                	addi	a0,a0,0
    3216:	060d                	addi	a2,a2,3
    3218:	04090103          	lb	sp,64(s2)
                    *str++ = '%';
    321c:	0100                	addi	s0,sp,128
    321e:	1505                	addi	a0,a0,-31
    *str = '\0';
    3220:	0306                	slli	t1,t1,0x1
    3222:	0902                	c.slli64	s2
    while (*p)
    3224:	0000                	unimp
    3226:	0301                	addi	t1,t1,0
    3228:	0905                	addi	s2,s2,1
    322a:	0004                	0x4
    int     n = 0;
    322c:	0501                	addi	a0,a0,0
    322e:	0310                	addi	a2,sp,384
    return n;
    3230:	0979                	addi	s2,s2,30
    3232:	0004                	0x4
        switch (*fmt)
    3234:	0501                	addi	a0,a0,0
    3236:	0315                	addi	t1,t1,5
    3238:	00040907          	vle8.v	v18,(s0),v0.t
            fmt++;
    323c:	0501                	addi	a0,a0,0
    323e:	0309                	addi	t1,t1,2
        switch (*fmt)
    3240:	0975                	addi	s2,s2,29
    3242:	0004                	0x4
    3244:	0501                	addi	a0,a0,0
    3246:	0315                	addi	t1,t1,5
    3248:	0004090b          	0x4090b
    324c:	0501                	addi	a0,a0,0
    324e:	060d                	addi	a2,a2,3
    3250:	04090203          	lb	tp,64(s2)
    3254:	0100                	addi	s0,sp,128
    3256:	1c05                	addi	s8,s8,-31
    3258:	00097303          	0x97303
    325c:	0100                	addi	s0,sp,128
    325e:	1505                	addi	a0,a0,-31
    3260:	00090003          	lb	zero,0(s2)
            if (is_digit(*fmt))
    3264:	0100                	addi	s0,sp,128
    3266:	0905                	addi	s2,s2,1
    3268:	0306                	slli	t1,t1,0x1
    326a:	0900                	addi	s0,sp,144
            ++fmt;
    326c:	0000                	unimp
    326e:	0501                	addi	a0,a0,0
            if (is_digit(*fmt))
    3270:	0618                	addi	a4,sp,768
    3272:	04097e03          	0x4097e03
    3276:	0100                	addi	s0,sp,128
    3278:	1905                	addi	s2,s2,-31
    327a:	0306                	slli	t1,t1,0x1
            else if (*fmt == '*')
    327c:	0900                	addi	s0,sp,144
    327e:	0000                	unimp
    3280:	0501                	addi	a0,a0,0
    3282:	0611                	addi	a2,a2,4
            ++fmt;
    3284:	04090003          	lb	zero,64(s2)
                precision = 0;
    3288:	0100                	addi	s0,sp,128
    328a:	0505                	addi	a0,a0,1
    328c:	0306                	slli	t1,t1,0x1
    328e:	0900                	addi	s0,sp,144
    int i = 0;
    3290:	0000                	unimp
    3292:	0601                	addi	a2,a2,0
    while (is_digit(**s))
    3294:	10091203          	lh	tp,256(s2)
        i = i * 10 + *((*s)++) - '0';
    3298:	0100                	addi	s0,sp,128
    329a:	0b05                	addi	s6,s6,1
    329c:	0306                	slli	t1,t1,0x1
    329e:	00097f87          	vle64.v	v31,(s2),v0.t
    32a2:	0100                	addi	s0,sp,128
    32a4:	0505                	addi	a0,a0,1
    32a6:	08090403          	lb	s0,128(s2)
    32aa:	0100                	addi	s0,sp,128
    while (is_digit(**s))
    32ac:	0b05                	addi	s6,s6,1
    32ae:	08097c03          	0x8097c03
        i = i * 10 + *((*s)++) - '0';
    32b2:	0100                	addi	s0,sp,128
    while (is_digit(**s))
    32b4:	0505                	addi	a0,a0,1
    32b6:	04090403          	lb	s0,64(s2)
    32ba:	0100                	addi	s0,sp,128
    32bc:	0306                	slli	t1,t1,0x1
    32be:	0900                	addi	s0,sp,144
    32c0:	0008                	0x8
    32c2:	0301                	addi	t1,t1,0
            field_width = va_arg(args, int);
    32c4:	0901                	addi	s2,s2,0
    32c6:	0004                	0x4
        if (*fmt == '.')
    32c8:	0501                	addi	a0,a0,0
    32ca:	0311                	addi	t1,t1,4
            fmt++;
    32cc:	00e2                	slli	ra,ra,0x18
    32ce:	0009                	c.nop	2
            field_width = va_arg(args, int);
    32d0:	0100                	addi	s0,sp,128
    32d2:	0505                	addi	a0,a0,1
            if (field_width < 0)
    32d4:	0306                	slli	t1,t1,0x1
    32d6:	7f9d                	lui	t6,0xfffe7
                field_width = -field_width;
    32d8:	0009                	c.nop	2
    32da:	0100                	addi	s0,sp,128
                flags |= LEFT;
    32dc:	1505                	addi	a0,a0,-31
    32de:	0306                	slli	t1,t1,0x1
    32e0:	00e5                	addi	ra,ra,25
    32e2:	1009                	c.nop	-30
                flags |= UPPERCASE;
    32e4:	0100                	addi	s0,sp,128
    32e6:	0306                	slli	t1,t1,0x1
                if (qualifier == 'l')
    32e8:	0906                	slli	s2,s2,0x1
    32ea:	000c                	0xc
                s = va_arg(args, char *);
    32ec:	0501                	addi	a0,a0,0
    32ee:	0309                	addi	t1,t1,2
                *str++ = (unsigned char)va_arg(args, int);
    32f0:	097a                	slli	s2,s2,0x1e
    32f2:	0004                	0x4
                if (qualifier == 'l')
    32f4:	0501                	addi	a0,a0,0
    32f6:	0315                	addi	t1,t1,5
        n = addr[i];
    32f8:	0906                	slli	s2,s2,0x1
    32fa:	0004                	0x4
    len = 0;
    32fc:	0501                	addi	a0,a0,0
    32fe:	0611                	addi	a2,a2,4
    3300:	04090103          	lb	sp,64(s2)
            if (n >= 100)
    3304:	0100                	addi	s0,sp,128
    3306:	1505                	addi	a0,a0,-31
            tmp[len++] = digits[0];
    3308:	0306                	slli	t1,t1,0x1
    330a:	0900                	addi	s0,sp,144
            tmp[len++] = '.';
    330c:	0000                	unimp
    330e:	0501                	addi	a0,a0,0
            tmp[len++] = digits[0];
    3310:	060d                	addi	a2,a2,3
    3312:	04090603          	lb	a2,64(s2)
        if (n == 0)
    3316:	0100                	addi	s0,sp,128
            tmp[len++] = digits[0];
    3318:	1c05                	addi	s8,s8,-31
    331a:	00097303          	0x97303
    331e:	0100                	addi	s0,sp,128
    3320:	1505                	addi	a0,a0,-31
    3322:	00090003          	lb	zero,0(s2)
    for (i = 0; i < 4; i++)
    3326:	0100                	addi	s0,sp,128
    3328:	0905                	addi	s2,s2,1
    332a:	0306                	slli	t1,t1,0x1
            tmp[len++] = '.';
    332c:	0900                	addi	s0,sp,144
    332e:	0000                	unimp
        n = addr[i];
    3330:	0501                	addi	a0,a0,0
    3332:	060d                	addi	a2,a2,3
            tmp[len++] = '.';
    3334:	04090203          	lb	tp,64(s2)
    3338:	0100                	addi	s0,sp,128
    333a:	1105                	addi	sp,sp,-31
    333c:	00090403          	lb	s0,0(s2)
            tmp[len++] = digits[0];
    3340:	0100                	addi	s0,sp,128
    3342:	00090503          	lb	a0,0(s2)
        if (n == 0)
    3346:	0100                	addi	s0,sp,128
            if (n >= 100)
    3348:	0306                	slli	t1,t1,0x1
    334a:	00040977          	0x40977
                tmp[len++] = digits[n / 100];
    334e:	0501                	addi	a0,a0,0
    3350:	060d                	addi	a2,a2,3
    3352:	04090103          	lb	sp,64(s2)
    3356:	0100                	addi	s0,sp,128
    3358:	1505                	addi	a0,a0,-31
    335a:	0306                	slli	t1,t1,0x1
    335c:	00000903          	lb	s2,0(zero) # 0 <RAM_START_ADDRESS>
    3360:	0501                	addi	a0,a0,0
    3362:	0329                	addi	t1,t1,10
    3364:	0905                	addi	s2,s2,1
    3366:	0008                	0x8
    3368:	0501                	addi	a0,a0,0
    336a:	0311                	addi	t1,t1,4
    336c:	0978                	addi	a4,sp,156
    336e:	0004                	0x4
    3370:	0501                	addi	a0,a0,0
    3372:	060d                	addi	a2,a2,3
    3374:	04090103          	lb	sp,64(s2)
                n          = n % 100;
    3378:	0100                	addi	s0,sp,128
    337a:	1505                	addi	a0,a0,-31
    337c:	0306                	slli	t1,t1,0x1
    337e:	0902                	c.slli64	s2
    3380:	0000                	unimp
    3382:	0301                	addi	t1,t1,0
                tmp[len++] = digits[n / 10];
    3384:	0905                	addi	s2,s2,1
    3386:	0004                	0x4
                n          = n % 100;
    3388:	0501                	addi	a0,a0,0
    338a:	0310                	addi	a2,sp,384
                tmp[len++] = digits[n / 10];
    338c:	0979                	addi	s2,s2,30
    338e:	0004                	0x4
    3390:	0501                	addi	a0,a0,0
    3392:	0315                	addi	t1,t1,5
    3394:	00040907          	vle8.v	v18,(s0),v0.t
    3398:	0501                	addi	a0,a0,0
    339a:	0309                	addi	t1,t1,2
    339c:	0975                	addi	s2,s2,29
    339e:	0004                	0x4
    33a0:	0501                	addi	a0,a0,0
    33a2:	0315                	addi	t1,t1,5
                n          = n % 10;
    33a4:	0004090b          	0x4090b
                tmp[len++] = digits[n / 10];
    33a8:	0501                	addi	a0,a0,0
    33aa:	060d                	addi	a2,a2,3
                n          = n % 10;
    33ac:	04090203          	lb	tp,64(s2)
                tmp[len++] = digits[n / 10];
    33b0:	0100                	addi	s0,sp,128
    33b2:	1c05                	addi	s8,s8,-31
                n          = n % 10;
    33b4:	00097303          	0x97303
                tmp[len++] = digits[n / 10];
    33b8:	0100                	addi	s0,sp,128
    33ba:	1505                	addi	a0,a0,-31
    33bc:	00090003          	lb	zero,0(s2)
    33c0:	0100                	addi	s0,sp,128
    33c2:	0905                	addi	s2,s2,1
    33c4:	0306                	slli	t1,t1,0x1
    33c6:	0900                	addi	s0,sp,144
            tmp[len++] = digits[n];
    33c8:	0000                	unimp
    33ca:	0501                	addi	a0,a0,0
                n          = n % 10;
    33cc:	0618                	addi	a4,sp,768
    33ce:	04097e03          	0x4097e03
                tmp[len++] = digits[n / 10];
    33d2:	0100                	addi	s0,sp,128
    33d4:	1905                	addi	s2,s2,-31
    33d6:	0306                	slli	t1,t1,0x1
    33d8:	0900                	addi	s0,sp,144
    33da:	0000                	unimp
            tmp[len++] = digits[n];
    33dc:	0501                	addi	a0,a0,0
    33de:	0611                	addi	a2,a2,4
    33e0:	04090003          	lb	zero,64(s2)
    33e4:	0100                	addi	s0,sp,128
    33e6:	0505                	addi	a0,a0,1
    33e8:	0306                	slli	t1,t1,0x1
    33ea:	0900                	addi	s0,sp,144
    33ec:	0000                	unimp
    33ee:	0601                	addi	a2,a2,0
    for (i = 0; i < 4; i++)
    33f0:	10091203          	lh	tp,256(s2)
    33f4:	0100                	addi	s0,sp,128
    33f6:	0b05                	addi	s6,s6,1
    if (!(type & LEFT))
    33f8:	0306                	slli	t1,t1,0x1
    33fa:	7f8c                	flw	fa1,56(a5)
                    while (--field_width > 0)
    33fc:	0009                	c.nop	2
    33fe:	0100                	addi	s0,sp,128
    if (!(type & LEFT))
    3400:	0505                	addi	a0,a0,1
    3402:	08090403          	lb	s0,128(s2)
        while (len < size--)
    3406:	0100                	addi	s0,sp,128
            *str++ = ' ';
    3408:	0b05                	addi	s6,s6,1
    340a:	08097c03          	0x8097c03
    340e:	0100                	addi	s0,sp,128
    3410:	0505                	addi	a0,a0,1
    3412:	04090403          	lb	s0,64(s2)
    3416:	0100                	addi	s0,sp,128
    3418:	0306                	slli	t1,t1,0x1
    341a:	0900                	addi	s0,sp,144
    341c:	0008                	0x8
    341e:	0301                	addi	t1,t1,0
        while (len < size--)
    3420:	0901                	addi	s2,s2,0
    3422:	0004                	0x4
            *str++ = ' ';
    3424:	0501                	addi	a0,a0,0
    3426:	0311                	addi	t1,t1,4
        while (len < size--)
    3428:	00dd                	addi	ra,ra,23
    342a:	0009                	c.nop	2
    342c:	0100                	addi	s0,sp,128
    342e:	0505                	addi	a0,a0,1
    while (len < size--)
    3430:	0306                	slli	t1,t1,0x1
    3432:	7fa2                	flw	ft11,40(sp)
        *str++ = tmp[i];
    3434:	0009                	c.nop	2
    3436:	0100                	addi	s0,sp,128
    3438:	1505                	addi	a0,a0,-31
    343a:	0306                	slli	t1,t1,0x1
    343c:	00e0                	addi	s0,sp,76
    343e:	1409                	addi	s0,s0,-30
    3440:	0100                	addi	s0,sp,128
    3442:	1005                	c.nop	-31
    3444:	0306                	slli	t1,t1,0x1
    3446:	0900                	addi	s0,sp,144
    while (len < size--)
    3448:	0008                	0x8
    344a:	0501                	addi	a0,a0,0
        *str++ = tmp[i];
    344c:	0315                	addi	t1,t1,5
    344e:	0906                	slli	s2,s2,0x1
    while (len < size--)
    3450:	0008                	0x8
    3452:	0501                	addi	a0,a0,0
        *str++ = ' ';
    3454:	031d                	addi	t1,t1,7
    3456:	097a                	slli	s2,s2,0x1e
    3458:	0004                	0x4
    345a:	0501                	addi	a0,a0,0
    345c:	0315                	addi	t1,t1,5
    345e:	0906                	slli	s2,s2,0x1
    3460:	0004                	0x4
    3462:	0501                	addi	a0,a0,0
    3464:	0611                	addi	a2,a2,4
    3466:	04090103          	lb	sp,64(s2)
    346a:	0100                	addi	s0,sp,128
    346c:	1505                	addi	a0,a0,-31
    346e:	0306                	slli	t1,t1,0x1
    for (str = buf; *fmt; fmt++)
    3470:	0900                	addi	s0,sp,144
    3472:	0000                	unimp
    3474:	0501                	addi	a0,a0,0
    3476:	060d                	addi	a2,a2,3
    3478:	04090603          	lb	a2,64(s2)
    347c:	0100                	addi	s0,sp,128
    347e:	1c05                	addi	s8,s8,-31
        if (*fmt == 'l' || *fmt == 'L')
    3480:	00097303          	0x97303
                if (!(flags & LEFT))
    3484:	0100                	addi	s0,sp,128
    3486:	1505                	addi	a0,a0,-31
                    while (--field_width > 0)
    3488:	00090003          	lb	zero,0(s2)
                if (!(flags & LEFT))
    348c:	0100                	addi	s0,sp,128
    348e:	0905                	addi	s2,s2,1
                *str++ = (unsigned char)va_arg(args, int);
    3490:	0306                	slli	t1,t1,0x1
    3492:	0900                	addi	s0,sp,144
    3494:	0000                	unimp
    3496:	0501                	addi	a0,a0,0
    3498:	060d                	addi	a2,a2,3
    349a:	08090203          	lb	tp,128(s2)
    349e:	0100                	addi	s0,sp,128
    for (str = buf; *fmt; fmt++)
    34a0:	1105                	addi	sp,sp,-31
    34a2:	00090403          	lb	s0,0(s2)
                while (--field_width > 0)
    34a6:	0100                	addi	s0,sp,128
                    *str++ = ' ';
    34a8:	00090503          	lb	a0,0(s2)
    34ac:	0100                	addi	s0,sp,128
    34ae:	0306                	slli	t1,t1,0x1
    34b0:	00040977          	0x40977
    34b4:	0501                	addi	a0,a0,0
    34b6:	060d                	addi	a2,a2,3
    for (str = buf; *fmt; fmt++)
    34b8:	04090103          	lb	sp,64(s2)
                    *str++ = ' ';
    34bc:	0100                	addi	s0,sp,128
    34be:	1505                	addi	a0,a0,-31
    for (str = buf; *fmt; fmt++)
    34c0:	0306                	slli	t1,t1,0x1
    34c2:	00000903          	lb	s2,0(zero) # 0 <RAM_START_ADDRESS>
    34c6:	0501                	addi	a0,a0,0
        if (*fmt == 'l' || *fmt == 'L')
    34c8:	0329                	addi	t1,t1,10
    34ca:	0905                	addi	s2,s2,1
                s = va_arg(args, char *);
    34cc:	0008                	0x8
    34ce:	0501                	addi	a0,a0,0
    34d0:	0311                	addi	t1,t1,4
    34d2:	0978                	addi	a4,sp,156
                if (!s)
    34d4:	0004                	0x4
    34d6:	0501                	addi	a0,a0,0
    for (sc = s; *sc != '\0' && count--; ++sc)
    34d8:	060d                	addi	a2,a2,3
    34da:	04090103          	lb	sp,64(s2)
    34de:	0100                	addi	s0,sp,128
    34e0:	1505                	addi	a0,a0,-31
    34e2:	0306                	slli	t1,t1,0x1
    34e4:	0902                	c.slli64	s2
    34e6:	0000                	unimp
    34e8:	0301                	addi	t1,t1,0
    34ea:	0905                	addi	s2,s2,1
    34ec:	0004                	0x4
    34ee:	0501                	addi	a0,a0,0
    34f0:	0310                	addi	a2,sp,384
    34f2:	0979                	addi	s2,s2,30
    34f4:	0004                	0x4
    34f6:	0501                	addi	a0,a0,0
    34f8:	0315                	addi	t1,t1,5
    34fa:	00040907          	vle8.v	v18,(s0),v0.t
    34fe:	0501                	addi	a0,a0,0
                if (!(flags & LEFT))
    3500:	031d                	addi	t1,t1,7
    3502:	0975                	addi	s2,s2,29
    return sc - s;
    3504:	0004                	0x4
    3506:	0501                	addi	a0,a0,0
                if (!(flags & LEFT))
    3508:	0315                	addi	t1,t1,5
    350a:	0004090b          	0x4090b
                for (i = 0; i < len; ++i)
    350e:	0501                	addi	a0,a0,0
    3510:	060d                	addi	a2,a2,3
    3512:	04090203          	lb	tp,64(s2)
    3516:	0100                	addi	s0,sp,128
                    *str++ = *s++;
    3518:	1c05                	addi	s8,s8,-31
    351a:	00097303          	0x97303
    351e:	0100                	addi	s0,sp,128
    3520:	1505                	addi	a0,a0,-31
    3522:	00090003          	lb	zero,0(s2)
    3526:	0100                	addi	s0,sp,128
                for (i = 0; i < len; ++i)
    3528:	0905                	addi	s2,s2,1
    352a:	0306                	slli	t1,t1,0x1
                    *str++ = *s++;
    352c:	0900                	addi	s0,sp,144
    352e:	0000                	unimp
    for (str = buf; *fmt; fmt++)
    3530:	0501                	addi	a0,a0,0
    3532:	0618                	addi	a4,sp,768
                while (len < field_width--)
    3534:	08097e03          	0x8097e03
                    *str++ = ' ';
    3538:	0100                	addi	s0,sp,128
    353a:	1905                	addi	s2,s2,-31
    353c:	0306                	slli	t1,t1,0x1
    353e:	0900                	addi	s0,sp,144
    3540:	0000                	unimp
    3542:	0501                	addi	a0,a0,0
    3544:	0611                	addi	a2,a2,4
    3546:	04090003          	lb	zero,64(s2)
    354a:	0100                	addi	s0,sp,128
    354c:	0505                	addi	a0,a0,1
    354e:	0306                	slli	t1,t1,0x1
    for (str = buf; *fmt; fmt++)
    3550:	0900                	addi	s0,sp,144
    3552:	0000                	unimp
    3554:	0601                	addi	a2,a2,0
    3556:	08091203          	lh	tp,128(s2)
    355a:	0100                	addi	s0,sp,128
        if (*fmt == 'l' || *fmt == 'L')
    355c:	0b05                	addi	s6,s6,1
    355e:	0306                	slli	t1,t1,0x1
                if (field_width == -1)
    3560:	7f91                	lui	t6,0xfffe4
    3562:	0009                	c.nop	2
    3564:	0100                	addi	s0,sp,128
    3566:	0505                	addi	a0,a0,1
                str = number(str,
    3568:	08090403          	lb	s0,128(s2)
    356c:	0100                	addi	s0,sp,128
    356e:	0b05                	addi	s6,s6,1
    3570:	08097c03          	0x8097c03
    3574:	0100                	addi	s0,sp,128
    3576:	0505                	addi	a0,a0,1
    for (str = buf; *fmt; fmt++)
    3578:	04090403          	lb	s0,64(s2)
                             (unsigned long)va_arg(args, void *),
    357c:	0100                	addi	s0,sp,128
    357e:	0b05                	addi	s6,s6,1
                str = number(str,
    3580:	0c097c03          	0xc097c03
    for (str = buf; *fmt; fmt++)
    3584:	0100                	addi	s0,sp,128
    3586:	0505                	addi	a0,a0,1
    3588:	0306                	slli	t1,t1,0x1
    358a:	0904                	addi	s1,sp,144
    358c:	0004                	0x4
    358e:	0301                	addi	t1,t1,0
            else if (n >= 10)
    3590:	0901                	addi	s2,s2,0
    3592:	0000                	unimp
    3594:	0501                	addi	a0,a0,0
    3596:	0311                	addi	t1,t1,4
                tmp[len++] = digits[n / 10];
    3598:	00d8                	addi	a4,sp,68
    359a:	0009                	c.nop	2
    359c:	0100                	addi	s0,sp,128
    359e:	0505                	addi	a0,a0,1
    35a0:	0306                	slli	t1,t1,0x1
    35a2:	00097fa7          	vse64.v	v31,(s2),v0.t
    35a6:	0100                	addi	s0,sp,128
    35a8:	1505                	addi	a0,a0,-31
    35aa:	0306                	slli	t1,t1,0x1
    35ac:	140900db          	0x140900db
    35b0:	0100                	addi	s0,sp,128
    35b2:	1005                	c.nop	-31
    35b4:	0306                	slli	t1,t1,0x1
    35b6:	0900                	addi	s0,sp,144
    35b8:	0008                	0x8
    35ba:	0501                	addi	a0,a0,0
    35bc:	0315                	addi	t1,t1,5
    35be:	0906                	slli	s2,s2,0x1
                n          = n % 10;
    35c0:	0008                	0x8
    35c2:	0501                	addi	a0,a0,0
                tmp[len++] = digits[n / 10];
    35c4:	031d                	addi	t1,t1,7
    35c6:	097a                	slli	s2,s2,0x1e
                n          = n % 10;
    35c8:	0004                	0x4
    35ca:	0501                	addi	a0,a0,0
    35cc:	0315                	addi	t1,t1,5
    35ce:	0906                	slli	s2,s2,0x1
            tmp[len++] = digits[n];
    35d0:	0004                	0x4
    35d2:	0501                	addi	a0,a0,0
    35d4:	0611                	addi	a2,a2,4
    35d6:	04090103          	lb	sp,64(s2)
                tmp[len++] = digits[n / 10];
    35da:	0100                	addi	s0,sp,128
            tmp[len++] = digits[n];
    35dc:	1505                	addi	a0,a0,-31
    35de:	0306                	slli	t1,t1,0x1
    35e0:	0900                	addi	s0,sp,144
    35e2:	0000                	unimp
                n          = n % 10;
    35e4:	0501                	addi	a0,a0,0
    35e6:	060d                	addi	a2,a2,3
            tmp[len++] = digits[n];
    35e8:	04090603          	lb	a2,64(s2)
    35ec:	0100                	addi	s0,sp,128
    35ee:	1c05                	addi	s8,s8,-31
    35f0:	00097303          	0x97303
    35f4:	0100                	addi	s0,sp,128
    35f6:	1505                	addi	a0,a0,-31
    int i = 0;
    35f8:	00090003          	lb	zero,0(s2)
    while (is_digit(**s))
    35fc:	0100                	addi	s0,sp,128
    35fe:	0905                	addi	s2,s2,1
        i = i * 10 + *((*s)++) - '0';
    3600:	0306                	slli	t1,t1,0x1
    3602:	0900                	addi	s0,sp,144
    3604:	0000                	unimp
    3606:	0501                	addi	a0,a0,0
    3608:	060d                	addi	a2,a2,3
    360a:	08090203          	lb	tp,128(s2)
    360e:	0100                	addi	s0,sp,128
    3610:	1105                	addi	sp,sp,-31
    3612:	00090403          	lb	s0,0(s2)
    while (is_digit(**s))
    3616:	0100                	addi	s0,sp,128
        i = i * 10 + *((*s)++) - '0';
    3618:	00090503          	lb	a0,0(s2)
    while (is_digit(**s))
    361c:	0100                	addi	s0,sp,128
    361e:	0306                	slli	t1,t1,0x1
    3620:	00040977          	0x40977
    3624:	0501                	addi	a0,a0,0
    3626:	060d                	addi	a2,a2,3
            if (precision < 0)
    3628:	04090103          	lb	sp,64(s2)
    362c:	0100                	addi	s0,sp,128
    362e:	1505                	addi	a0,a0,-31
                ++fmt;
    3630:	0306                	slli	t1,t1,0x1
    3632:	00000903          	lb	s2,0(zero) # 0 <RAM_START_ADDRESS>
    3636:	0501                	addi	a0,a0,0
        if (*fmt == 'l' || *fmt == 'L')
    3638:	0329                	addi	t1,t1,10
    363a:	0905                	addi	s2,s2,1
    363c:	0008                	0x8
    363e:	0501                	addi	a0,a0,0
    3640:	0311                	addi	t1,t1,4
    3642:	0978                	addi	a4,sp,156
    3644:	0004                	0x4
    3646:	0501                	addi	a0,a0,0
                precision = va_arg(args, int);
    3648:	060d                	addi	a2,a2,3
    364a:	04090103          	lb	sp,64(s2)
            if (precision < 0)
    364e:	0100                	addi	s0,sp,128
    3650:	1505                	addi	a0,a0,-31
    3652:	0306                	slli	t1,t1,0x1
    if (type & UPPERCASE)
    3654:	0902                	c.slli64	s2
    3656:	0000                	unimp
    char *dig = digits;
    3658:	0301                	addi	t1,t1,0
    365a:	0905                	addi	s2,s2,1
    if (type & UPPERCASE)
    365c:	0004                	0x4
    365e:	0501                	addi	a0,a0,0
        dig = upper_digits;
    3660:	0310                	addi	a2,sp,384
    3662:	0979                	addi	s2,s2,30
    3664:	0004                	0x4
    3666:	0501                	addi	a0,a0,0
        if (i != 0)
    3668:	0315                	addi	t1,t1,5
    366a:	00040907          	vle8.v	v18,(s0),v0.t
    366e:	0501                	addi	a0,a0,0
            tmp[len++] = ':';
    3670:	031d                	addi	t1,t1,7
    3672:	0975                	addi	s2,s2,29
    3674:	0004                	0x4
    3676:	0501                	addi	a0,a0,0
    3678:	0315                	addi	t1,t1,5
    367a:	0004090b          	0x4090b
        tmp[len++] = dig[addr[i] >> 4];
    367e:	0501                	addi	a0,a0,0
    for (i = 0; i < 6; i++)
    3680:	060d                	addi	a2,a2,3
    3682:	04090203          	lb	tp,64(s2)
    3686:	0100                	addi	s0,sp,128
        tmp[len++] = dig[addr[i] >> 4];
    3688:	1c05                	addi	s8,s8,-31
    368a:	00097303          	0x97303
        tmp[len++] = dig[addr[i] & 0x0F];
    368e:	0100                	addi	s0,sp,128
        tmp[len++] = dig[addr[i] >> 4];
    3690:	1505                	addi	a0,a0,-31
    3692:	00090003          	lb	zero,0(s2)
        tmp[len++] = dig[addr[i] & 0x0F];
    3696:	0100                	addi	s0,sp,128
        tmp[len++] = dig[addr[i] >> 4];
    3698:	0905                	addi	s2,s2,1
    369a:	0306                	slli	t1,t1,0x1
        tmp[len++] = dig[addr[i] & 0x0F];
    369c:	0900                	addi	s0,sp,144
    369e:	0000                	unimp
        tmp[len++] = dig[addr[i] >> 4];
    36a0:	0501                	addi	a0,a0,0
    36a2:	0618                	addi	a4,sp,768
        tmp[len++] = dig[addr[i] & 0x0F];
    36a4:	08097e03          	0x8097e03
    for (i = 0; i < 6; i++)
    36a8:	0100                	addi	s0,sp,128
    36aa:	1905                	addi	s2,s2,-31
    if (!(type & LEFT))
    36ac:	0306                	slli	t1,t1,0x1
    36ae:	0900                	addi	s0,sp,144
                    while (--field_width > 0)
    36b0:	0000                	unimp
    36b2:	0501                	addi	a0,a0,0
    if (!(type & LEFT))
    36b4:	0611                	addi	a2,a2,4
    36b6:	04090003          	lb	zero,64(s2)
        while (len < size--)
    36ba:	0100                	addi	s0,sp,128
    36bc:	0505                	addi	a0,a0,1
    36be:	0306                	slli	t1,t1,0x1
            *str++ = ' ';
    36c0:	0900                	addi	s0,sp,144
    36c2:	0000                	unimp
        while (len < size--)
    36c4:	0601                	addi	a2,a2,0
    36c6:	08091203          	lh	tp,128(s2)
            *str++ = ' ';
    36ca:	0100                	addi	s0,sp,128
    36cc:	0b05                	addi	s6,s6,1
    36ce:	0306                	slli	t1,t1,0x1
    36d0:	7f96                	flw	ft11,100(sp)
    36d2:	0009                	c.nop	2
        while (len < size--)
    36d4:	0100                	addi	s0,sp,128
    36d6:	0505                	addi	a0,a0,1
            *str++ = ' ';
    36d8:	0306                	slli	t1,t1,0x1
    36da:	0905                	addi	s2,s2,1
    while (len < size--)
    36dc:	0008                	0x8
    36de:	0501                	addi	a0,a0,0
            *str++ = ' ';
    36e0:	0311                	addi	t1,t1,4
    36e2:	0180                	addi	s0,sp,192
    while (len < size--)
    36e4:	0009                	c.nop	2
    36e6:	0100                	addi	s0,sp,128
        *str++ = tmp[i];
    36e8:	0b05                	addi	s6,s6,1
    36ea:	0306                	slli	t1,t1,0x1
    36ec:	00097efb          	0x97efb
    36f0:	0100                	addi	s0,sp,128
    36f2:	1505                	addi	a0,a0,-31
    36f4:	0306                	slli	t1,t1,0x1
    36f6:	08090187          	vlse8.v	v3,(s2),zero,v0.t
    36fa:	0100                	addi	s0,sp,128
    while (len < size--)
    36fc:	1005                	c.nop	-31
    36fe:	0306                	slli	t1,t1,0x1
        *str++ = tmp[i];
    3700:	0900                	addi	s0,sp,144
    3702:	0008                	0x8
    3704:	0501                	addi	a0,a0,0
    3706:	060d                	addi	a2,a2,3
    while (len < size--)
    3708:	08090203          	lb	tp,128(s2)
        *str++ = ' ';
    370c:	0100                	addi	s0,sp,128
    370e:	1a05                	addi	s4,s4,-31
    3710:	0306                	slli	t1,t1,0x1
    3712:	0900                	addi	s0,sp,144
    3714:	0000                	unimp
    3716:	0501                	addi	a0,a0,0
    3718:	0309                	addi	t1,t1,2
    371a:	097e                	slli	s2,s2,0x1f
    371c:	0004                	0x4
    371e:	0501                	addi	a0,a0,0
    3720:	031d                	addi	t1,t1,7
    3722:	0900                	addi	s0,sp,144
    3724:	0004                	0x4
    3726:	0501                	addi	a0,a0,0
    3728:	031a                	slli	t1,t1,0x6
    372a:	0902                	c.slli64	s2
    372c:	0004                	0x4
    372e:	0501                	addi	a0,a0,0
    for (str = buf; *fmt; fmt++)
    3730:	061c                	addi	a5,sp,768
    3732:	08097e03          	0x8097e03
    3736:	0100                	addi	s0,sp,128
    3738:	1505                	addi	a0,a0,-31
    373a:	00090003          	lb	zero,0(s2)
    373e:	0100                	addi	s0,sp,128
        *str++ = ' ';
    3740:	0905                	addi	s2,s2,1
    3742:	0306                	slli	t1,t1,0x1
    3744:	0900                	addi	s0,sp,144
    3746:	0000                	unimp
    3748:	0501                	addi	a0,a0,0
    374a:	0618                	addi	a4,sp,768
                if (*fmt)
    374c:	04097e03          	0x4097e03
    3750:	0100                	addi	s0,sp,128
    3752:	1905                	addi	s2,s2,-31
    3754:	0306                	slli	t1,t1,0x1
    3756:	0900                	addi	s0,sp,144
                    *str++ = *fmt;
    3758:	0000                	unimp
    375a:	0501                	addi	a0,a0,0
                if (*fmt)
    375c:	0611                	addi	a2,a2,4
    375e:	04090003          	lb	zero,64(s2)
                    *str++ = *fmt;
    3762:	0100                	addi	s0,sp,128
                    flags |= ZEROPAD;
    3764:	0505                	addi	a0,a0,1
    3766:	0306                	slli	t1,t1,0x1
                    field_width = 2 * sizeof(void *);
    3768:	0900                	addi	s0,sp,144
    376a:	0000                	unimp
    376c:	0601                	addi	a2,a2,0
    376e:	097f8103          	lb	sp,151(t6) # fffe4097 <RAM_SIZE+0xfffd4097>
                    s = "<NULL>";
    3772:	0008                	0x8
    3774:	0501                	addi	a0,a0,0
    3776:	0601                	addi	a2,a2,0
    3778:	00090103          	lb	sp,0(s2)
                    while (--field_width > 0)
    377c:	0100                	addi	s0,sp,128
    377e:	0c05                	addi	s8,s8,1
                        *str++ = ' ';
    3780:	08097f03          	0x8097f03
    3784:	0100                	addi	s0,sp,128
    3786:	0105                	addi	sp,sp,1
    3788:	04090103          	lb	sp,64(s2)
    378c:	0100                	addi	s0,sp,128
    378e:	0c05                	addi	s8,s8,1
    3790:	2c097f03          	0x2c097f03
    3794:	0100                	addi	s0,sp,128
    3796:	0105                	addi	sp,sp,1
    3798:	04090103          	lb	sp,64(s2)
                    while (len < field_width--)
    379c:	0100                	addi	s0,sp,128
    379e:	1105                	addi	sp,sp,-31
    37a0:	0306                	slli	t1,t1,0x1
    37a2:	00ee                	slli	ra,ra,0x1b
                        *str++ = ' ';
    37a4:	0809                	addi	a6,a6,2
    37a6:	0100                	addi	s0,sp,128
    37a8:	00096303          	0x96303
    37ac:	0100                	addi	s0,sp,128
    37ae:	0505                	addi	a0,a0,1
    37b0:	00091203          	lh	tp,0(s2)
    37b4:	0100                	addi	s0,sp,128
    37b6:	0b05                	addi	s6,s6,1
    37b8:	0306                	slli	t1,t1,0x1
    37ba:	00097f87          	vle64.v	v31,(s2),v0.t
    37be:	0100                	addi	s0,sp,128
    37c0:	0505                	addi	a0,a0,1
    37c2:	08090403          	lb	s0,128(s2)
    37c6:	0100                	addi	s0,sp,128
    37c8:	0b05                	addi	s6,s6,1
    37ca:	08097c03          	0x8097c03
    37ce:	0100                	addi	s0,sp,128
                flags |= SIGN;
    37d0:	0505                	addi	a0,a0,1
    37d2:	04090403          	lb	s0,64(s2)
        base = 10;
    37d6:	0100                	addi	s0,sp,128
                *str++ = (unsigned char)va_arg(args, int);
    37d8:	0306                	slli	t1,t1,0x1
    37da:	0900                	addi	s0,sp,144
        str = number(str, num, base, field_width, precision, flags);
    37dc:	0010                	0x10
    37de:	0301                	addi	t1,t1,0
    37e0:	0901                	addi	s2,s2,0
    37e2:	0004                	0x4
    37e4:	0501                	addi	a0,a0,0
    37e6:	0311                	addi	t1,t1,4
    37e8:	00e2                	slli	ra,ra,0x18
    37ea:	0009                	c.nop	2
    for (str = buf; *fmt; fmt++)
    37ec:	0100                	addi	s0,sp,128
    37ee:	0505                	addi	a0,a0,1
        str = number(str, num, base, field_width, precision, flags);
    37f0:	00091203          	lh	tp,0(s2)
    for (str = buf; *fmt; fmt++)
    37f4:	0100                	addi	s0,sp,128
    37f6:	0b05                	addi	s6,s6,1
    37f8:	0306                	slli	t1,t1,0x1
    37fa:	7f8c                	flw	fa1,56(a5)
    37fc:	0009                	c.nop	2
    37fe:	0100                	addi	s0,sp,128
                flags |= UPPERCASE;
    3800:	0505                	addi	a0,a0,1
    3802:	0c090403          	lb	s0,192(s2)
                base = 16;
    3806:	0100                	addi	s0,sp,128
    3808:	0b05                	addi	s6,s6,1
    380a:	08097c03          	0x8097c03
                base = 8;
    380e:	0100                	addi	s0,sp,128
                break;
    3810:	0505                	addi	a0,a0,1
    3812:	04090403          	lb	s0,64(s2)
                s = va_arg(args, char *);
    3816:	0100                	addi	s0,sp,128
                *str++ = (unsigned char)va_arg(args, int);
    3818:	0306                	slli	t1,t1,0x1
    381a:	0900                	addi	s0,sp,144
    381c:	0008                	0x8
    381e:	0301                	addi	t1,t1,0
    3820:	0901                	addi	s2,s2,0
    3822:	0004                	0x4
    for (str = buf; *fmt; fmt++)
    3824:	0501                	addi	a0,a0,0
    3826:	0311                	addi	t1,t1,4
    3828:	00dd                	addi	ra,ra,23
    382a:	0009                	c.nop	2
    382c:	0100                	addi	s0,sp,128
    382e:	0505                	addi	a0,a0,1
                flags |= SIGN;
    3830:	00091203          	lh	tp,0(s2)
                *str++ = (unsigned char)va_arg(args, int);
    3834:	0100                	addi	s0,sp,128
    3836:	0b05                	addi	s6,s6,1
    3838:	0306                	slli	t1,t1,0x1
    383a:	7f91                	lui	t6,0xfffe4
        base = 10;
    383c:	0009                	c.nop	2
    383e:	0100                	addi	s0,sp,128
    3840:	0505                	addi	a0,a0,1
    3842:	10090403          	lb	s0,256(s2)
                base = 16;
    3846:	0100                	addi	s0,sp,128
    3848:	0306                	slli	t1,t1,0x1
    384a:	0900                	addi	s0,sp,144
        switch (*fmt)
    384c:	0010                	0x10
    384e:	0301                	addi	t1,t1,0
    3850:	0901                	addi	s2,s2,0
    3852:	0004                	0x4
                *str++ = (unsigned char)va_arg(args, int);
    3854:	0501                	addi	a0,a0,0
    3856:	0311                	addi	t1,t1,4
    3858:	00d8                	addi	a4,sp,68
    385a:	0009                	c.nop	2
    385c:	0100                	addi	s0,sp,128
    385e:	0505                	addi	a0,a0,1
    3860:	00091203          	lh	tp,0(s2)
    3864:	0100                	addi	s0,sp,128
    3866:	0b05                	addi	s6,s6,1
    3868:	0306                	slli	t1,t1,0x1
    386a:	7f96                	flw	ft11,100(sp)
                base = 8;
    386c:	0009                	c.nop	2
    386e:	0100                	addi	s0,sp,128
    3870:	0505                	addi	a0,a0,1
    3872:	0306                	slli	t1,t1,0x1
                s = va_arg(args, char *);
    3874:	0905                	addi	s2,s2,1
    3876:	000c                	0xc
                flags |= UPPERCASE;
    3878:	0501                	addi	a0,a0,0
    387a:	0311                	addi	t1,t1,4
                *str++ = (unsigned char)va_arg(args, int);
    387c:	0180                	addi	s0,sp,192
    387e:	0009                	c.nop	2
    3880:	0100                	addi	s0,sp,128
    3882:	0105                	addi	sp,sp,1
    3884:	097ebd03          	0x97ebd03
    3888:	0004                	0x4
    388a:	0501                	addi	a0,a0,0
    388c:	0305                	addi	t1,t1,1
    388e:	0901                	addi	s2,s2,0
                base = 16;
    3890:	0000                	unimp
    3892:	0301                	addi	t1,t1,0
    3894:	0901                	addi	s2,s2,0
    3896:	0000                	unimp
                flags |= UPPERCASE;
    3898:	0301                	addi	t1,t1,0
    389a:	0901                	addi	s2,s2,0
                *str++ = (unsigned char)va_arg(args, int);
    389c:	0000                	unimp
    389e:	0301                	addi	t1,t1,0
    38a0:	0901                	addi	s2,s2,0
    38a2:	0000                	unimp
                base = 16;
    38a4:	0301                	addi	t1,t1,0
    38a6:	0901                	addi	s2,s2,0
    38a8:	0000                	unimp
    38aa:	0501                	addi	a0,a0,0
                if (!(flags & LEFT))
    38ac:	0601                	addi	a2,a2,0
    38ae:	00097b03          	0x97b03
    38b2:	0100                	addi	s0,sp,128
    return sc - s;
    38b4:	0b05                	addi	s6,s6,1
    38b6:	08090703          	lb	a4,128(s2)
    38ba:	0100                	addi	s0,sp,128
                *str++ = (unsigned char)va_arg(args, int);
    38bc:	0105                	addi	sp,sp,1
    38be:	04097903          	0x4097903
    38c2:	0100                	addi	s0,sp,128
    38c4:	0505                	addi	a0,a0,1
    38c6:	0306                	slli	t1,t1,0x1
    38c8:	00080907          	vle8.v	v18,(a6),v0.t
    for (str = buf; *fmt; fmt++)
    38cc:	0501                	addi	a0,a0,0
    38ce:	0003060b          	0x3060b
    38d2:	0009                	c.nop	2
    38d4:	0100                	addi	s0,sp,128
    38d6:	0105                	addi	sp,sp,1
    38d8:	0c097903          	0xc097903
    38dc:	0100                	addi	s0,sp,128
    38de:	0b05                	addi	s6,s6,1
                    while (len < field_width--)
    38e0:	04090703          	lb	a4,64(s2)
    38e4:	0100                	addi	s0,sp,128
    38e6:	0105                	addi	sp,sp,1
                    *str++ = *fmt;
    38e8:	08090303          	lb	t1,128(s2)
    38ec:	0100                	addi	s0,sp,128
    38ee:	0b05                	addi	s6,s6,1
    38f0:	0c097d03          	0xc097d03
        while (len < size--)
    38f4:	0100                	addi	s0,sp,128
    38f6:	0409                	addi	s0,s0,2
        while (len < size--)
    38f8:	0000                	unimp
    38fa:	0101                	addi	sp,sp,0
        while (len < size--)
    38fc:	000001a7          	vse8.v	v3,(zero),v0.t
    3900:	00540003          	lb	zero,5(s0)
    3904:	0000                	unimp
    3906:	0101                	addi	sp,sp,0
    3908:	000d0efb          	0xd0efb
    390c:	0101                	addi	sp,sp,0
    390e:	0101                	addi	sp,sp,0
    3910:	0000                	unimp
    3912:	0100                	addi	s0,sp,128
    3914:	0000                	unimp
    3916:	2f01                	jal	4026 <__adddf3+0x712>
    3918:	72616873          	csrrsi	a6,0x726,2
    391c:	6465                	lui	s0,0x19
    391e:	726f632f          	0x726f632f
    3922:	6d65                	lui	s10,0x19
    3924:	7261                	lui	tp,0xffff8
    3926:	6300006b          	0x6300006b
    392a:	5f65726f          	jal	tp,5af20 <RAM_SIZE+0x4af20>
    392e:	6f70                	flw	fa2,92(a4)
    3930:	7472                	flw	fs0,60(sp)
    3932:	656d                	lui	a0,0x1b
    3934:	632e                	flw	ft6,200(sp)
    3936:	0100                	addi	s0,sp,128
    3938:	0000                	unimp
    393a:	65726f63          	bltu	tp,s7,3f98 <__adddf3+0x684>
    393e:	705f 726f 6d74      	0x6d74726f705f
    3944:	2e65                	jal	3cfc <__adddf3+0x3e8>
    3946:	0068                	addi	a0,sp,12
    3948:	0001                	nop
    394a:	6300                	flw	fs0,0(a4)
    394c:	6d65726f          	jal	tp,5b022 <RAM_SIZE+0x4b022>
    3950:	7261                	lui	tp,0xffff8
    3952:	00682e6b          	0x682e6b
    3956:	0001                	nop
    3958:	0000                	unimp
    395a:	0105                	addi	sp,sp,1
    395c:	0500                	addi	s0,sp,640
    395e:	3402                	fld	fs0,32(sp)
    3960:	001f 0300 012e      	0x12e0300001f
    3966:	0205                	addi	tp,tp,1
    3968:	00090103          	lb	sp,0(s2)
    396c:	0100                	addi	s0,sp,128
    396e:	00090103          	lb	sp,0(s2)
    3972:	0100                	addi	s0,sp,128
    3974:	0905                	addi	s2,s2,1
    3976:	0306                	slli	t1,t1,0x1
    3978:	0900                	addi	s0,sp,144
    397a:	0000                	unimp
    397c:	0501                	addi	a0,a0,0
    397e:	0301                	addi	t1,t1,0
    3980:	0901                	addi	s2,s2,0
    3982:	0028                	addi	a0,sp,8
    3984:	0601                	addi	a2,a2,0
    3986:	08091c03          	lh	s8,128(s2)
    398a:	0100                	addi	s0,sp,128
    398c:	0505                	addi	a0,a0,1
    398e:	00090103          	lb	sp,0(s2)
    3992:	0100                	addi	s0,sp,128
    3994:	0205                	addi	tp,tp,1
    3996:	00096103          	0x96103
    399a:	0100                	addi	s0,sp,128
    399c:	00090103          	lb	sp,0(s2)
    39a0:	0100                	addi	s0,sp,128
    39a2:	0905                	addi	s2,s2,1
    39a4:	0306                	slli	t1,t1,0x1
    39a6:	0900                	addi	s0,sp,144
    39a8:	0000                	unimp
    39aa:	0501                	addi	a0,a0,0
    39ac:	0305                	addi	t1,t1,1
    39ae:	091e                	slli	s2,s2,0x7
    39b0:	002c                	addi	a1,sp,8
    39b2:	0501                	addi	a0,a0,0
    39b4:	0301                	addi	t1,t1,0
    39b6:	0901                	addi	s2,s2,0
    39b8:	0004                	0x4
    39ba:	0601                	addi	a2,a2,0
    39bc:	04090b03          	lb	s6,64(s2)
    39c0:	0100                	addi	s0,sp,128
    39c2:	0505                	addi	a0,a0,1
    39c4:	00090103          	lb	sp,0(s2)
    39c8:	0100                	addi	s0,sp,128
    39ca:	0205                	addi	tp,tp,1
    39cc:	00095403          	lhu	s0,0(s2)
    39d0:	0100                	addi	s0,sp,128
    39d2:	00090103          	lb	sp,0(s2)
    39d6:	0100                	addi	s0,sp,128
    39d8:	0905                	addi	s2,s2,1
    39da:	0306                	slli	t1,t1,0x1
    39dc:	0900                	addi	s0,sp,144
    39de:	0000                	unimp
    39e0:	0501                	addi	a0,a0,0
    39e2:	0305                	addi	t1,t1,1
    39e4:	002c092b          	0x2c092b
    39e8:	0501                	addi	a0,a0,0
    39ea:	0301                	addi	t1,t1,0
    39ec:	0901                	addi	s2,s2,0
    39ee:	0004                	0x4
    39f0:	0601                	addi	a2,a2,0
    39f2:	04090c03          	lb	s8,64(s2)
    39f6:	0100                	addi	s0,sp,128
    39f8:	0505                	addi	a0,a0,1
    39fa:	00090103          	lb	sp,0(s2)
    39fe:	0100                	addi	s0,sp,128
    3a00:	00090203          	lb	tp,0(s2)
    3a04:	0100                	addi	s0,sp,128
    3a06:	1005                	c.nop	-31
    3a08:	0306                	slli	t1,t1,0x1
    3a0a:	097e                	slli	s2,s2,0x1f
    3a0c:	0000                	unimp
    3a0e:	0501                	addi	a0,a0,0
    3a10:	0301                	addi	t1,t1,0
    3a12:	00080903          	lb	s2,0(a6)
    3a16:	0601                	addi	a2,a2,0
    3a18:	08090a03          	lb	s4,128(s2)
    3a1c:	0100                	addi	s0,sp,128
    3a1e:	0505                	addi	a0,a0,1
    3a20:	00090103          	lb	sp,0(s2)
    3a24:	0100                	addi	s0,sp,128
    3a26:	00090103          	lb	sp,0(s2)
    3a2a:	0100                	addi	s0,sp,128
    3a2c:	0105                	addi	sp,sp,1
    3a2e:	0306                	slli	t1,t1,0x1
    3a30:	097e                	slli	s2,s2,0x1f
    3a32:	0000                	unimp
    3a34:	0501                	addi	a0,a0,0
    3a36:	030e                	slli	t1,t1,0x3
    3a38:	0901                	addi	s2,s2,0
    3a3a:	0004                	0x4
    3a3c:	0501                	addi	a0,a0,0
    3a3e:	0301                	addi	t1,t1,0
    3a40:	097f                	0x97f
    3a42:	0004                	0x4
    3a44:	0501                	addi	a0,a0,0
    3a46:	030e                	slli	t1,t1,0x3
    3a48:	0901                	addi	s2,s2,0
    3a4a:	0004                	0x4
    3a4c:	0501                	addi	a0,a0,0
    3a4e:	0301                	addi	t1,t1,0
    3a50:	0902                	c.slli64	s2
    3a52:	0004                	0x4
    3a54:	0601                	addi	a2,a2,0
    3a56:	0c090a03          	lb	s4,192(s2)
    3a5a:	0100                	addi	s0,sp,128
    3a5c:	0505                	addi	a0,a0,1
    3a5e:	00090103          	lb	sp,0(s2)
    3a62:	0100                	addi	s0,sp,128
    3a64:	00090603          	lb	a2,0(s2)
    3a68:	0100                	addi	s0,sp,128
    3a6a:	00090403          	lb	s0,0(s2)
    3a6e:	0100                	addi	s0,sp,128
    3a70:	1405                	addi	s0,s0,-31
    3a72:	0306                	slli	t1,t1,0x1
    3a74:	0900                	addi	s0,sp,144
    3a76:	0000                	unimp
    3a78:	0501                	addi	a0,a0,0
    3a7a:	0301                	addi	t1,t1,0
    3a7c:	0901                	addi	s2,s2,0
    3a7e:	0008                	0x8
    3a80:	0601                	addi	a2,a2,0
    3a82:	04090603          	lb	a2,64(s2)
    3a86:	0100                	addi	s0,sp,128
    3a88:	0505                	addi	a0,a0,1
    3a8a:	00090103          	lb	sp,0(s2)
    3a8e:	0100                	addi	s0,sp,128
    3a90:	1405                	addi	s0,s0,-31
    3a92:	0306                	slli	t1,t1,0x1
    3a94:	0900                	addi	s0,sp,144
    3a96:	0000                	unimp
    3a98:	0501                	addi	a0,a0,0
    3a9a:	0301                	addi	t1,t1,0
    3a9c:	0901                	addi	s2,s2,0
    3a9e:	0004                	0x4
    3aa0:	0901                	addi	s2,s2,0
    3aa2:	0004                	0x4
    3aa4:	0100                	addi	s0,sp,128
    3aa6:	de01                	beqz	a2,39be <__adddf3+0xaa>
    3aa8:	0300000f          	fence	rw,unknown
    3aac:	6100                	flw	fs0,0(a0)
    3aae:	0000                	unimp
    3ab0:	0100                	addi	s0,sp,128
    3ab2:	fb01                	bnez	a4,39c2 <__adddf3+0xae>
    3ab4:	0d0e                	slli	s10,s10,0x3
    3ab6:	0100                	addi	s0,sp,128
    3ab8:	0101                	addi	sp,sp,0
    3aba:	0001                	nop
    3abc:	0000                	unimp
    3abe:	0001                	nop
    3ac0:	0100                	addi	s0,sp,128
    3ac2:	6168732f          	vamoandei64.v	zero,(a6),v22,v6,v0.t
    3ac6:	6572                	flw	fa0,28(sp)
    3ac8:	2f64                	fld	fs1,216(a4)
    3aca:	65726f63          	bltu	tp,s7,4128 <__divdf3+0x3c>
    3ace:	616d                	addi	sp,sp,240
    3ad0:	6b72                	flw	fs6,28(sp)
    3ad2:	0000                	unimp
    3ad4:	65726f63          	bltu	tp,s7,4132 <__divdf3+0x46>
    3ad8:	735f 6174 6574      	0x65746174735f
    3ade:	632e                	flw	ft6,200(sp)
    3ae0:	0100                	addi	s0,sp,128
    3ae2:	0000                	unimp
    3ae4:	65726f63          	bltu	tp,s7,4142 <__divdf3+0x56>
    3ae8:	705f 726f 6d74      	0x6d74726f705f
    3aee:	2e65                	jal	3ea6 <__adddf3+0x592>
    3af0:	0068                	addi	a0,sp,12
    3af2:	0001                	nop
    3af4:	6300                	flw	fs0,0(a4)
    3af6:	6d65726f          	jal	tp,5b1cc <RAM_SIZE+0x4b1cc>
    3afa:	7261                	lui	tp,0xffff8
    3afc:	00682e6b          	0x682e6b
    3b00:	0001                	nop
    3b02:	3c00                	fld	fs0,56(s0)
    3b04:	7562                	flw	fa0,56(sp)
    3b06:	6c69                	lui	s8,0x1a
    3b08:	2d74                	fld	fa3,216(a0)
    3b0a:	6e69                	lui	t3,0x1a
    3b0c:	003e                	c.slli	zero,0xf
    3b0e:	0000                	unimp
    3b10:	0000                	unimp
    3b12:	0105                	addi	sp,sp,1
    3b14:	0500                	addi	s0,sp,640
    3b16:	0c02                	c.slli64	s8
    3b18:	0020                	addi	s0,sp,8
    3b1a:	0300                	addi	s0,sp,384
    3b1c:	018c                	addi	a1,sp,192
    3b1e:	0501                	addi	a0,a0,0
    3b20:	0305                	addi	t1,t1,1
    3b22:	0901                	addi	s2,s2,0
    3b24:	0000                	unimp
    3b26:	0301                	addi	t1,t1,0
    3b28:	0901                	addi	s2,s2,0
    3b2a:	0000                	unimp
    3b2c:	0301                	addi	t1,t1,0
    3b2e:	0905                	addi	s2,s2,1
    3b30:	0000                	unimp
    3b32:	0501                	addi	a0,a0,0
    3b34:	0609                	addi	a2,a2,2
    3b36:	00090003          	lb	zero,0(s2)
    3b3a:	0100                	addi	s0,sp,128
    3b3c:	0505                	addi	a0,a0,1
    3b3e:	0306                	slli	t1,t1,0x1
    3b40:	0901                	addi	s2,s2,0
    3b42:	0004                	0x4
    3b44:	0301                	addi	t1,t1,0
    3b46:	0901                	addi	s2,s2,0
    3b48:	0000                	unimp
    3b4a:	0501                	addi	a0,a0,0
    3b4c:	0003060b          	0x3060b
    3b50:	0009                	c.nop	2
    3b52:	0100                	addi	s0,sp,128
    3b54:	0306                	slli	t1,t1,0x1
    3b56:	0900                	addi	s0,sp,144
    3b58:	0004                	0x4
    3b5a:	0501                	addi	a0,a0,0
    3b5c:	0601                	addi	a2,a2,0
    3b5e:	00097703          	0x97703
    3b62:	0100                	addi	s0,sp,128
    3b64:	0b05                	addi	s6,s6,1
    3b66:	04090903          	lb	s2,64(s2)
    3b6a:	0100                	addi	s0,sp,128
    3b6c:	0105                	addi	sp,sp,1
    3b6e:	10097703          	0x10097703
    3b72:	0100                	addi	s0,sp,128
    3b74:	2b05                	jal	40a4 <__adddf3+0x790>
    3b76:	08091803          	lh	a6,128(s2)
    3b7a:	0100                	addi	s0,sp,128
    3b7c:	0105                	addi	sp,sp,1
    3b7e:	04096803          	0x4096803
    3b82:	0100                	addi	s0,sp,128
    3b84:	0905                	addi	s2,s2,1
    3b86:	04091303          	lh	t1,64(s2)
    3b8a:	0100                	addi	s0,sp,128
    3b8c:	0c05                	addi	s8,s8,1
    3b8e:	08096e03          	0x8096e03
    3b92:	0100                	addi	s0,sp,128
    3b94:	0905                	addi	s2,s2,1
    3b96:	0306                	slli	t1,t1,0x1
    3b98:	0911                	addi	s2,s2,4
    3b9a:	0004                	0x4
    3b9c:	0301                	addi	t1,t1,0
    3b9e:	0901                	addi	s2,s2,0
    3ba0:	0000                	unimp
    3ba2:	0501                	addi	a0,a0,0
    3ba4:	061e                	slli	a2,a2,0x7
    3ba6:	0c097c03          	0xc097c03
    3baa:	0100                	addi	s0,sp,128
    3bac:	2b05                	jal	40dc <__adddf3+0x7c8>
    3bae:	04090903          	lb	s2,64(s2)
    3bb2:	0100                	addi	s0,sp,128
    3bb4:	0905                	addi	s2,s2,1
    3bb6:	04097b03          	0x4097b03
    3bba:	0100                	addi	s0,sp,128
    3bbc:	1605                	addi	a2,a2,-31
    3bbe:	10090a03          	lb	s4,256(s2)
    3bc2:	0100                	addi	s0,sp,128
    3bc4:	0905                	addi	s2,s2,1
    3bc6:	04097603          	0x4097603
    3bca:	0100                	addi	s0,sp,128
    3bcc:	1605                	addi	a2,a2,-31
    3bce:	04090a03          	lb	s4,64(s2)
    3bd2:	0100                	addi	s0,sp,128
    3bd4:	0905                	addi	s2,s2,1
    3bd6:	04097603          	0x4097603
    3bda:	0100                	addi	s0,sp,128
    3bdc:	1105                	addi	sp,sp,-31
    3bde:	0306                	slli	t1,t1,0x1
    3be0:	090a                	slli	s2,s2,0x2
    3be2:	0004                	0x4
    3be4:	0501                	addi	a0,a0,0
    3be6:	0616                	slli	a2,a2,0x5
    3be8:	00090003          	lb	zero,0(s2)
    3bec:	0100                	addi	s0,sp,128
    3bee:	1105                	addi	sp,sp,-31
    3bf0:	0306                	slli	t1,t1,0x1
    3bf2:	0901                	addi	s2,s2,0
    3bf4:	0004                	0x4
    3bf6:	0301                	addi	t1,t1,0
    3bf8:	0901                	addi	s2,s2,0
    3bfa:	0000                	unimp
    3bfc:	0501                	addi	a0,a0,0
    3bfe:	0616                	slli	a2,a2,0x5
    3c00:	04097f03          	0x4097f03
    3c04:	0100                	addi	s0,sp,128
    3c06:	0b05                	addi	s6,s6,1
    3c08:	0306                	slli	t1,t1,0x1
    3c0a:	0004096b          	0x4096b
    3c0e:	0501                	addi	a0,a0,0
    3c10:	061a                	slli	a2,a2,0x6
    3c12:	00090003          	lb	zero,0(s2)
    3c16:	0100                	addi	s0,sp,128
    3c18:	0b05                	addi	s6,s6,1
    3c1a:	04090003          	lb	zero,64(s2)
    3c1e:	0100                	addi	s0,sp,128
    3c20:	1105                	addi	sp,sp,-31
    3c22:	0200                	addi	s0,sp,256
    3c24:	0304                	addi	s1,sp,384
    3c26:	0306                	slli	t1,t1,0x1
    3c28:	0905                	addi	s2,s2,1
    3c2a:	0010                	0x10
    3c2c:	0501                	addi	a0,a0,0
    3c2e:	04020027          	vsuxei8.v	v0,(tp),v0,v0.t
    3c32:	00030603          	lb	a2,0(t1)
    3c36:	0009                	c.nop	2
    3c38:	0100                	addi	s0,sp,128
    3c3a:	0d05                	addi	s10,s10,1
    3c3c:	0200                	addi	s0,sp,256
    3c3e:	0304                	addi	s1,sp,384
    3c40:	04097f03          	0x4097f03
    3c44:	0100                	addi	s0,sp,128
    3c46:	2205                	jal	3d66 <__adddf3+0x452>
    3c48:	0200                	addi	s0,sp,256
    3c4a:	0304                	addi	s1,sp,384
    3c4c:	08090103          	lb	sp,128(s2)
    3c50:	0100                	addi	s0,sp,128
    3c52:	2305                	jal	4172 <__divdf3+0x86>
    3c54:	0200                	addi	s0,sp,256
    3c56:	0304                	addi	s1,sp,384
    3c58:	0306                	slli	t1,t1,0x1
    3c5a:	097f                	0x97f
    3c5c:	0004                	0x4
    3c5e:	0501                	addi	a0,a0,0
    3c60:	0019                	c.nop	6
    3c62:	0402                	c.slli64	s0
    3c64:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    3c68:	0000                	unimp
    3c6a:	0501                	addi	a0,a0,0
    3c6c:	000d                	c.nop	3
    3c6e:	0402                	c.slli64	s0
    3c70:	00030603          	lb	a2,0(t1)
    3c74:	0009                	c.nop	2
    3c76:	0100                	addi	s0,sp,128
    3c78:	0306                	slli	t1,t1,0x1
    3c7a:	0902                	c.slli64	s2
    3c7c:	0004                	0x4
    3c7e:	0501                	addi	a0,a0,0
    3c80:	061e                	slli	a2,a2,0x7
    3c82:	08090003          	lb	zero,128(s2)
    3c86:	0100                	addi	s0,sp,128
    3c88:	0d05                	addi	s10,s10,1
    3c8a:	0306                	slli	t1,t1,0x1
    3c8c:	0901                	addi	s2,s2,0
    3c8e:	000c                	0xc
    3c90:	0501                	addi	a0,a0,0
    3c92:	0803062b          	0x803062b
    3c96:	0009                	c.nop	2
    3c98:	0100                	addi	s0,sp,128
    3c9a:	1e05                	addi	t3,t3,-31
    3c9c:	08097703          	0x8097703
    3ca0:	0100                	addi	s0,sp,128
    3ca2:	0905                	addi	s2,s2,1
    3ca4:	0306                	slli	t1,t1,0x1
    3ca6:	00040903          	lb	s2,0(s0) # 19000 <RAM_SIZE+0x9000>
    3caa:	0301                	addi	t1,t1,0
    3cac:	0901                	addi	s2,s2,0
    3cae:	0000                	unimp
    3cb0:	0501                	addi	a0,a0,0
    3cb2:	0503062b          	0x503062b
    3cb6:	0009                	c.nop	2
    3cb8:	0100                	addi	s0,sp,128
    3cba:	0905                	addi	s2,s2,1
    3cbc:	04097b03          	0x4097b03
    3cc0:	0100                	addi	s0,sp,128
    3cc2:	1105                	addi	sp,sp,-31
    3cc4:	0306                	slli	t1,t1,0x1
    3cc6:	00040913          	mv	s2,s0
    3cca:	0501                	addi	a0,a0,0
    3ccc:	0616                	slli	a2,a2,0x5
    3cce:	00090003          	lb	zero,0(s2)
    3cd2:	0100                	addi	s0,sp,128
    3cd4:	1105                	addi	sp,sp,-31
    3cd6:	04090203          	lb	tp,64(s2)
    3cda:	0100                	addi	s0,sp,128
    3cdc:	1605                	addi	a2,a2,-31
    3cde:	04097e03          	0x4097e03
    3ce2:	0100                	addi	s0,sp,128
    3ce4:	1a05                	addi	s4,s4,-31
    3ce6:	04096303          	0x4096303
    3cea:	0100                	addi	s0,sp,128
    3cec:	1605                	addi	a2,a2,-31
    3cee:	04091d03          	lh	s10,64(s2)
    3cf2:	0100                	addi	s0,sp,128
    3cf4:	1105                	addi	sp,sp,-31
    3cf6:	0306                	slli	t1,t1,0x1
    3cf8:	0901                	addi	s2,s2,0
    3cfa:	0004                	0x4
    3cfc:	0301                	addi	t1,t1,0
    3cfe:	0901                	addi	s2,s2,0
    3d00:	0000                	unimp
    3d02:	0501                	addi	a0,a0,0
    3d04:	0616                	slli	a2,a2,0x5
    3d06:	00097f03          	0x97f03
    3d0a:	0100                	addi	s0,sp,128
    3d0c:	0b05                	addi	s6,s6,1
    3d0e:	0306                	slli	t1,t1,0x1
    3d10:	0962                	slli	s2,s2,0x18
    3d12:	0004                	0x4
    3d14:	0301                	addi	t1,t1,0
    3d16:	0925                	addi	s2,s2,9
    3d18:	0004                	0x4
    3d1a:	0501                	addi	a0,a0,0
    3d1c:	0601                	addi	a2,a2,0
    3d1e:	04090803          	lb	a6,64(s2)
    3d22:	0100                	addi	s0,sp,128
    3d24:	1605                	addi	a2,a2,-31
    3d26:	04097a03          	0x4097a03
    3d2a:	0100                	addi	s0,sp,128
    3d2c:	0105                	addi	sp,sp,1
    3d2e:	08090603          	lb	a2,128(s2)
    3d32:	0100                	addi	s0,sp,128
    3d34:	1605                	addi	a2,a2,-31
    3d36:	00097a03          	0x97a03
    3d3a:	0100                	addi	s0,sp,128
    3d3c:	0105                	addi	sp,sp,1
    3d3e:	04090603          	lb	a2,64(s2)
    3d42:	0100                	addi	s0,sp,128
    3d44:	1605                	addi	a2,a2,-31
    3d46:	04097a03          	0x4097a03
    3d4a:	0100                	addi	s0,sp,128
    3d4c:	1105                	addi	sp,sp,-31
    3d4e:	0306                	slli	t1,t1,0x1
    3d50:	0968                	addi	a0,sp,156
    3d52:	0004                	0x4
    3d54:	0501                	addi	a0,a0,0
    3d56:	0616                	slli	a2,a2,0x5
    3d58:	00090003          	lb	zero,0(s2)
    3d5c:	0100                	addi	s0,sp,128
    3d5e:	1105                	addi	sp,sp,-31
    3d60:	0306                	slli	t1,t1,0x1
    3d62:	0901                	addi	s2,s2,0
    3d64:	0004                	0x4
    3d66:	0301                	addi	t1,t1,0
    3d68:	0901                	addi	s2,s2,0
    3d6a:	0000                	unimp
    3d6c:	0501                	addi	a0,a0,0
    3d6e:	0616                	slli	a2,a2,0x5
    3d70:	04097f03          	0x4097f03
    3d74:	0100                	addi	s0,sp,128
    3d76:	1105                	addi	sp,sp,-31
    3d78:	04090103          	lb	sp,64(s2)
    3d7c:	0100                	addi	s0,sp,128
    3d7e:	0306                	slli	t1,t1,0x1
    3d80:	0908                	addi	a0,sp,144
    3d82:	0004                	0x4
    3d84:	0501                	addi	a0,a0,0
    3d86:	0616                	slli	a2,a2,0x5
    3d88:	00090003          	lb	zero,0(s2)
    3d8c:	0100                	addi	s0,sp,128
    3d8e:	1105                	addi	sp,sp,-31
    3d90:	0306                	slli	t1,t1,0x1
    3d92:	0901                	addi	s2,s2,0
    3d94:	000c                	0xc
    3d96:	0301                	addi	t1,t1,0
    3d98:	0901                	addi	s2,s2,0
    3d9a:	0000                	unimp
    3d9c:	0501                	addi	a0,a0,0
    3d9e:	0616                	slli	a2,a2,0x5
    3da0:	04097f03          	0x4097f03
    3da4:	0100                	addi	s0,sp,128
    3da6:	1105                	addi	sp,sp,-31
    3da8:	04090103          	lb	sp,64(s2)
    3dac:	0100                	addi	s0,sp,128
    3dae:	0105                	addi	sp,sp,1
    3db0:	04091203          	lh	tp,64(s2)
    3db4:	0100                	addi	s0,sp,128
    3db6:	0c05                	addi	s8,s8,1
    3db8:	0c094b03          	lbu	s6,192(s2)
    3dbc:	0100                	addi	s0,sp,128
    3dbe:	1605                	addi	a2,a2,-31
    3dc0:	04092f03          	lw	t5,64(s2)
    3dc4:	0100                	addi	s0,sp,128
    3dc6:	0105                	addi	sp,sp,1
    3dc8:	0306                	slli	t1,t1,0x1
    3dca:	091d                	addi	s2,s2,7
    3dcc:	0010                	0x10
    3dce:	0501                	addi	a0,a0,0
    3dd0:	0305                	addi	t1,t1,1
    3dd2:	0901                	addi	s2,s2,0
    3dd4:	0000                	unimp
    3dd6:	0501                	addi	a0,a0,0
    3dd8:	0615                	addi	a2,a2,5
    3dda:	00090003          	lb	zero,0(s2)
    3dde:	0100                	addi	s0,sp,128
    3de0:	0105                	addi	sp,sp,1
    3de2:	04097f03          	0x4097f03
    3de6:	0100                	addi	s0,sp,128
    3de8:	0505                	addi	a0,a0,1
    3dea:	0306                	slli	t1,t1,0x1
    3dec:	0902                	c.slli64	s2
    3dee:	0004                	0x4
    3df0:	0301                	addi	t1,t1,0
    3df2:	0901                	addi	s2,s2,0
    3df4:	0000                	unimp
    3df6:	0301                	addi	t1,t1,0
    3df8:	0901                	addi	s2,s2,0
    3dfa:	0000                	unimp
    3dfc:	0501                	addi	a0,a0,0
    3dfe:	030c                	addi	a1,sp,384
    3e00:	0900                	addi	s0,sp,144
    3e02:	0000                	unimp
    3e04:	0501                	addi	a0,a0,0
    3e06:	0615                	addi	a2,a2,5
    3e08:	00097f03          	0x97f03
    3e0c:	0100                	addi	s0,sp,128
    3e0e:	0c05                	addi	s8,s8,1
    3e10:	04090103          	lb	sp,64(s2)
    3e14:	0100                	addi	s0,sp,128
    3e16:	0505                	addi	a0,a0,1
    3e18:	04090003          	lb	zero,64(s2)
    3e1c:	0100                	addi	s0,sp,128
    3e1e:	0905                	addi	s2,s2,1
    3e20:	0306                	slli	t1,t1,0x1
    3e22:	0902                	c.slli64	s2
    3e24:	0008                	0x8
    3e26:	0301                	addi	t1,t1,0
    3e28:	0901                	addi	s2,s2,0
    3e2a:	0000                	unimp
    3e2c:	0501                	addi	a0,a0,0
    3e2e:	060c                	addi	a1,sp,768
    3e30:	00090003          	lb	zero,0(s2)
    3e34:	0100                	addi	s0,sp,128
    3e36:	2e05                	jal	4166 <__divdf3+0x7a>
    3e38:	04097d03          	0x4097d03
    3e3c:	0100                	addi	s0,sp,128
    3e3e:	0c05                	addi	s8,s8,1
    3e40:	04090303          	lb	t1,64(s2)
    3e44:	0100                	addi	s0,sp,128
    3e46:	0905                	addi	s2,s2,1
    3e48:	0306                	slli	t1,t1,0x1
    3e4a:	0905                	addi	s2,s2,1
    3e4c:	0004                	0x4
    3e4e:	0501                	addi	a0,a0,0
    3e50:	0311                	addi	t1,t1,4
    3e52:	00000903          	lb	s2,0(zero) # 0 <RAM_START_ADDRESS>
    3e56:	0501                	addi	a0,a0,0
    3e58:	0305                	addi	t1,t1,1
    3e5a:	095f 0000 0301      	0x3010000095f
    3e60:	0901                	addi	s2,s2,0
    3e62:	0000                	unimp
    3e64:	0501                	addi	a0,a0,0
    3e66:	062d                	addi	a2,a2,11
    3e68:	00093103          	0x93103
    3e6c:	0100                	addi	s0,sp,128
    3e6e:	1a05                	addi	s4,s4,-31
    3e70:	04094f03          	lbu	t5,64(s2)
    3e74:	0100                	addi	s0,sp,128
    3e76:	0c05                	addi	s8,s8,1
    3e78:	04090003          	lb	zero,64(s2)
    3e7c:	0100                	addi	s0,sp,128
    3e7e:	2d05                	jal	44ae <__divdf3+0x3c2>
    3e80:	08093103          	0x8093103
    3e84:	0100                	addi	s0,sp,128
    3e86:	0c05                	addi	s8,s8,1
    3e88:	04094f03          	lbu	t5,64(s2)
    3e8c:	0100                	addi	s0,sp,128
    3e8e:	1105                	addi	sp,sp,-31
    3e90:	0306                	slli	t1,t1,0x1
    3e92:	0931                	addi	s2,s2,12
    3e94:	0004                	0x4
    3e96:	0501                	addi	a0,a0,0
    3e98:	062d                	addi	a2,a2,11
    3e9a:	00090003          	lb	zero,0(s2)
    3e9e:	0100                	addi	s0,sp,128
    3ea0:	1105                	addi	sp,sp,-31
    3ea2:	0306                	slli	t1,t1,0x1
    3ea4:	0901                	addi	s2,s2,0
    3ea6:	0004                	0x4
    3ea8:	0501                	addi	a0,a0,0
    3eaa:	0963032b          	0x963032b
    3eae:	0000                	unimp
    3eb0:	0501                	addi	a0,a0,0
    3eb2:	030c                	addi	a1,sp,384
    3eb4:	0900                	addi	s0,sp,144
    3eb6:	0000                	unimp
    3eb8:	0501                	addi	a0,a0,0
    3eba:	0605                	addi	a2,a2,1
    3ebc:	04090003          	lb	zero,64(s2)
    3ec0:	0100                	addi	s0,sp,128
    3ec2:	0905                	addi	s2,s2,1
    3ec4:	0306                	slli	t1,t1,0x1
    3ec6:	0902                	c.slli64	s2
    3ec8:	0004                	0x4
    3eca:	0301                	addi	t1,t1,0
    3ecc:	0901                	addi	s2,s2,0
    3ece:	0000                	unimp
    3ed0:	0501                	addi	a0,a0,0
    3ed2:	0610                	addi	a2,sp,768
    3ed4:	00090203          	lb	tp,0(s2)
    3ed8:	0100                	addi	s0,sp,128
    3eda:	0c05                	addi	s8,s8,1
    3edc:	04097e03          	0x4097e03
    3ee0:	0100                	addi	s0,sp,128
    3ee2:	1a05                	addi	s4,s4,-31
    3ee4:	04096803          	0x4096803
    3ee8:	0100                	addi	s0,sp,128
    3eea:	1405                	addi	s0,s0,-31
    3eec:	0900c503          	lbu	a0,144(ra)
    3ef0:	0004                	0x4
    3ef2:	0501                	addi	a0,a0,0
    3ef4:	030c                	addi	a1,sp,384
    3ef6:	04097fbb          	0x4097fbb
    3efa:	0100                	addi	s0,sp,128
    3efc:	04091803          	lh	a6,64(s2)
    3f00:	0100                	addi	s0,sp,128
    3f02:	1105                	addi	sp,sp,-31
    3f04:	0306                	slli	t1,t1,0x1
    3f06:	092d                	addi	s2,s2,11
    3f08:	0004                	0x4
    3f0a:	0501                	addi	a0,a0,0
    3f0c:	0316                	slli	t1,t1,0x5
    3f0e:	0905                	addi	s2,s2,1
    3f10:	0000                	unimp
    3f12:	0501                	addi	a0,a0,0
    3f14:	0305                	addi	t1,t1,1
    3f16:	7fb5                	lui	t6,0xfffed
    3f18:	0009                	c.nop	2
    3f1a:	0100                	addi	s0,sp,128
    3f1c:	00090103          	lb	sp,0(s2)
    3f20:	0100                	addi	s0,sp,128
    3f22:	0c05                	addi	s8,s8,1
    3f24:	0306                	slli	t1,t1,0x1
    3f26:	0900                	addi	s0,sp,144
    3f28:	0000                	unimp
    3f2a:	0501                	addi	a0,a0,0
    3f2c:	0314                	addi	a3,sp,384
    3f2e:	00c5                	addi	ra,ra,17
    3f30:	0409                	addi	s0,s0,2
    3f32:	0100                	addi	s0,sp,128
    3f34:	2b05                	jal	4464 <__divdf3+0x378>
    3f36:	0306                	slli	t1,t1,0x1
    3f38:	0950                	addi	a2,sp,148
    3f3a:	0004                	0x4
    3f3c:	0501                	addi	a0,a0,0
    3f3e:	030c                	addi	a1,sp,384
    3f40:	0900                	addi	s0,sp,144
    3f42:	0000                	unimp
    3f44:	0501                	addi	a0,a0,0
    3f46:	0309                	addi	t1,t1,2
    3f48:	0902                	c.slli64	s2
    3f4a:	0000                	unimp
    3f4c:	0501                	addi	a0,a0,0
    3f4e:	060c                	addi	a1,sp,768
    3f50:	00096903          	0x96903
    3f54:	0100                	addi	s0,sp,128
    3f56:	04091503          	lh	a0,64(s2)
    3f5a:	0100                	addi	s0,sp,128
    3f5c:	0905                	addi	s2,s2,1
    3f5e:	0306                	slli	t1,t1,0x1
    3f60:	00040903          	lb	s2,0(s0)
    3f64:	0501                	addi	a0,a0,0
    3f66:	062e                	slli	a2,a2,0xb
    3f68:	00097d03          	0x97d03
    3f6c:	0100                	addi	s0,sp,128
    3f6e:	0505                	addi	a0,a0,1
    3f70:	08090003          	lb	zero,128(s2)
    3f74:	0100                	addi	s0,sp,128
    3f76:	0c05                	addi	s8,s8,1
    3f78:	04090303          	lb	t1,64(s2)
    3f7c:	0100                	addi	s0,sp,128
    3f7e:	2e05                	jal	42ae <__divdf3+0x1c2>
    3f80:	04097d03          	0x4097d03
    3f84:	0100                	addi	s0,sp,128
    3f86:	1105                	addi	sp,sp,-31
    3f88:	0306                	slli	t1,t1,0x1
    3f8a:	0930                	addi	a2,sp,152
    3f8c:	0004                	0x4
    3f8e:	0501                	addi	a0,a0,0
    3f90:	0316                	slli	t1,t1,0x5
    3f92:	0905                	addi	s2,s2,1
    3f94:	0000                	unimp
    3f96:	0501                	addi	a0,a0,0
    3f98:	0305                	addi	t1,t1,1
    3f9a:	7fb5                	lui	t6,0xfffed
    3f9c:	0009                	c.nop	2
    3f9e:	0100                	addi	s0,sp,128
    3fa0:	00090103          	lb	sp,0(s2)
    3fa4:	0100                	addi	s0,sp,128
    3fa6:	1a05                	addi	s4,s4,-31
    3fa8:	0306                	slli	t1,t1,0x1
    3faa:	0900                	addi	s0,sp,144
    3fac:	0000                	unimp
    3fae:	0501                	addi	a0,a0,0
    3fb0:	030c                	addi	a1,sp,384
    3fb2:	0900                	addi	s0,sp,144
    3fb4:	0004                	0x4
    3fb6:	0501                	addi	a0,a0,0
    3fb8:	0314                	addi	a3,sp,384
    3fba:	00c5                	addi	ra,ra,17
    3fbc:	0409                	addi	s0,s0,2
    3fbe:	0100                	addi	s0,sp,128
    3fc0:	1505                	addi	a0,a0,-31
    3fc2:	0306                	slli	t1,t1,0x1
    3fc4:	0902                	c.slli64	s2
    3fc6:	0004                	0x4
    3fc8:	0301                	addi	t1,t1,0
    3fca:	0901                	addi	s2,s2,0
    3fcc:	0000                	unimp
    3fce:	0501                	addi	a0,a0,0
    3fd0:	0003062f          	vamoaddei8.v	zero,(t1),v0,v12,v0.t
    3fd4:	0009                	c.nop	2
    3fd6:	0100                	addi	s0,sp,128
    3fd8:	1b05                	addi	s6,s6,-31
    3fda:	04097f03          	0x4097f03
    3fde:	0100                	addi	s0,sp,128
    3fe0:	2f05                	jal	4710 <__divdf3+0x624>
    3fe2:	04090103          	lb	sp,64(s2)
    3fe6:	0100                	addi	s0,sp,128
    3fe8:	2b05                	jal	4518 <__divdf3+0x42c>
    3fea:	0306                	slli	t1,t1,0x1
    3fec:	094d                	addi	s2,s2,19
    3fee:	0008                	0x8
    3ff0:	0501                	addi	a0,a0,0
    3ff2:	030c                	addi	a1,sp,384
    3ff4:	0900                	addi	s0,sp,144
    3ff6:	0000                	unimp
    3ff8:	0501                	addi	a0,a0,0
    3ffa:	0605                	addi	a2,a2,1
    3ffc:	04090003          	lb	zero,64(s2)
    4000:	0100                	addi	s0,sp,128
    4002:	0905                	addi	s2,s2,1
    4004:	0306                	slli	t1,t1,0x1
    4006:	0902                	c.slli64	s2
    4008:	0008                	0x8
    400a:	0301                	addi	t1,t1,0
    400c:	0901                	addi	s2,s2,0
    400e:	0000                	unimp
    4010:	0501                	addi	a0,a0,0
    4012:	060c                	addi	a1,sp,768
    4014:	00090003          	lb	zero,0(s2)
    4018:	0100                	addi	s0,sp,128
    401a:	1005                	c.nop	-31
    401c:	04090203          	lb	tp,64(s2)
    4020:	0100                	addi	s0,sp,128
    4022:	0c05                	addi	s8,s8,1
    4024:	04097e03          	0x4097e03
    4028:	0100                	addi	s0,sp,128
    402a:	1405                	addi	s0,s0,-31
    402c:	04093903          	0x4093903
    4030:	0100                	addi	s0,sp,128
    4032:	0c05                	addi	s8,s8,1
    4034:	097faf03          	lw	t5,151(t6) # fffed097 <RAM_SIZE+0xfffdd097>
    4038:	0004                	0x4
    403a:	0301                	addi	t1,t1,0
    403c:	0918                	addi	a4,sp,144
    403e:	0004                	0x4
    4040:	0501                	addi	a0,a0,0
    4042:	0611                	addi	a2,a2,4
    4044:	04093903          	0x4093903
    4048:	0100                	addi	s0,sp,128
    404a:	1605                	addi	a2,a2,-31
    404c:	00090503          	lb	a0,0(s2)
    4050:	0100                	addi	s0,sp,128
    4052:	0505                	addi	a0,a0,1
    4054:	097fa903          	lw	s2,151(t6)
    4058:	0000                	unimp
    405a:	0301                	addi	t1,t1,0
    405c:	0901                	addi	s2,s2,0
    405e:	0000                	unimp
    4060:	0501                	addi	a0,a0,0
    4062:	061a                	slli	a2,a2,0x6
    4064:	00090003          	lb	zero,0(s2)
    4068:	0100                	addi	s0,sp,128
    406a:	1405                	addi	s0,s0,-31
    406c:	0900d103          	lhu	sp,144(ra)
    4070:	0004                	0x4
    4072:	0501                	addi	a0,a0,0
    4074:	030c                	addi	a1,sp,384
    4076:	04097faf          	vamoaddei64.v	v31,(s2),v0,v31,v0.t
    407a:	0100                	addi	s0,sp,128
    407c:	1405                	addi	s0,s0,-31
    407e:	0900d103          	lhu	sp,144(ra)
    4082:	0004                	0x4
    4084:	0501                	addi	a0,a0,0
    4086:	4403062b          	0x4403062b
    408a:	0409                	addi	s0,s0,2
    408c:	0100                	addi	s0,sp,128
    408e:	0c05                	addi	s8,s8,1
    4090:	00090003          	lb	zero,0(s2)
    4094:	0100                	addi	s0,sp,128
    4096:	0905                	addi	s2,s2,1
    4098:	00090203          	lb	tp,0(s2)
    409c:	0100                	addi	s0,sp,128
    409e:	0c05                	addi	s8,s8,1
    40a0:	0306                	slli	t1,t1,0x1
    40a2:	0969                	addi	s2,s2,26
    40a4:	0000                	unimp
    40a6:	0501                	addi	a0,a0,0
    40a8:	0605                	addi	a2,a2,1
    40aa:	04090103          	lb	sp,64(s2)
    40ae:	0100                	addi	s0,sp,128
    40b0:	1505                	addi	a0,a0,-31
    40b2:	0900d703          	lhu	a4,144(ra)
    40b6:	0000                	unimp
    40b8:	0301                	addi	t1,t1,0
    40ba:	0901                	addi	s2,s2,0
    40bc:	0000                	unimp
    40be:	0501                	addi	a0,a0,0
    40c0:	0631                	addi	a2,a2,12
    40c2:	00090003          	lb	zero,0(s2)
    40c6:	0100                	addi	s0,sp,128
    40c8:	1b05                	addi	s6,s6,-31
    40ca:	08097f03          	0x8097f03
    40ce:	0100                	addi	s0,sp,128
    40d0:	3105                	jal	3cf0 <__adddf3+0x3dc>
    40d2:	04090103          	lb	sp,64(s2)
    40d6:	0100                	addi	s0,sp,128
    40d8:	2b05                	jal	4608 <__divdf3+0x51c>
    40da:	0306                	slli	t1,t1,0x1
    40dc:	7fbc                	flw	fa5,120(a5)
    40de:	0809                	addi	a6,a6,2
    40e0:	0100                	addi	s0,sp,128
    40e2:	0c05                	addi	s8,s8,1
    40e4:	00090003          	lb	zero,0(s2)
    40e8:	0100                	addi	s0,sp,128
    40ea:	0505                	addi	a0,a0,1
    40ec:	0900ea03          	0x900ea03
    40f0:	0000                	unimp
    40f2:	0501                	addi	a0,a0,0
    40f4:	060c                	addi	a1,sp,768
    40f6:	00090003          	lb	zero,0(s2)
    40fa:	0100                	addi	s0,sp,128
    40fc:	0505                	addi	a0,a0,1
    40fe:	0306                	slli	t1,t1,0x1
    4100:	0901                	addi	s2,s2,0
    4102:	0004                	0x4
    4104:	0501                	addi	a0,a0,0
    4106:	0601                	addi	a2,a2,0
    4108:	00090103          	lb	sp,0(s2)
    410c:	0100                	addi	s0,sp,128
    410e:	0505                	addi	a0,a0,1
    4110:	0306                	slli	t1,t1,0x1
    4112:	7f80                	flw	fs0,56(a5)
    4114:	0409                	addi	s0,s0,2
    4116:	0100                	addi	s0,sp,128
    4118:	1605                	addi	a2,a2,-31
    411a:	00092303          	lw	t1,0(s2)
    411e:	0100                	addi	s0,sp,128
    4120:	1905                	addi	s2,s2,-31
    4122:	0306                	slli	t1,t1,0x1
    4124:	0900                	addi	s0,sp,144
    4126:	0000                	unimp
    4128:	0501                	addi	a0,a0,0
    412a:	002d                	c.nop	11
    412c:	0402                	c.slli64	s0
    412e:	0301                	addi	t1,t1,0
    4130:	0900                	addi	s0,sp,144
    4132:	0008                	0x8
    4134:	0501                	addi	a0,a0,0
    4136:	0616                	slli	a2,a2,0x5
    4138:	08090403          	lb	s0,128(s2)
    413c:	0100                	addi	s0,sp,128
    413e:	1905                	addi	s2,s2,-31
    4140:	0306                	slli	t1,t1,0x1
    4142:	0900                	addi	s0,sp,144
    4144:	0000                	unimp
    4146:	0501                	addi	a0,a0,0
    4148:	0615                	addi	a2,a2,5
    414a:	08090603          	lb	a2,128(s2)
    414e:	0100                	addi	s0,sp,128
    4150:	00090103          	lb	sp,0(s2)
    4154:	0100                	addi	s0,sp,128
    4156:	3305                	jal	3e76 <__adddf3+0x562>
    4158:	0306                	slli	t1,t1,0x1
    415a:	0900                	addi	s0,sp,144
    415c:	0000                	unimp
    415e:	0501                	addi	a0,a0,0
    4160:	032d                	addi	t1,t1,11
    4162:	0902                	c.slli64	s2
    4164:	0004                	0x4
    4166:	0501                	addi	a0,a0,0
    4168:	097d031b          	0x97d031b
    416c:	0004                	0x4
    416e:	0501                	addi	a0,a0,0
    4170:	09010333          	0x9010333
    4174:	0004                	0x4
    4176:	0501                	addi	a0,a0,0
    4178:	0611                	addi	a2,a2,4
    417a:	08090203          	lb	tp,128(s2)
    417e:	0100                	addi	s0,sp,128
    4180:	00090103          	lb	sp,0(s2)
    4184:	0100                	addi	s0,sp,128
    4186:	2b05                	jal	46b6 <__divdf3+0x5ca>
    4188:	00096303          	0x96303
    418c:	0100                	addi	s0,sp,128
    418e:	0c05                	addi	s8,s8,1
    4190:	00090003          	lb	zero,0(s2)
    4194:	0100                	addi	s0,sp,128
    4196:	0505                	addi	a0,a0,1
    4198:	0900ea03          	0x900ea03
    419c:	0000                	unimp
    419e:	0501                	addi	a0,a0,0
    41a0:	060c                	addi	a1,sp,768
    41a2:	00090003          	lb	zero,0(s2)
    41a6:	0100                	addi	s0,sp,128
    41a8:	0505                	addi	a0,a0,1
    41aa:	0306                	slli	t1,t1,0x1
    41ac:	0901                	addi	s2,s2,0
    41ae:	0004                	0x4
    41b0:	0501                	addi	a0,a0,0
    41b2:	0601                	addi	a2,a2,0
    41b4:	00090103          	lb	sp,0(s2)
    41b8:	0100                	addi	s0,sp,128
    41ba:	0505                	addi	a0,a0,1
    41bc:	0306                	slli	t1,t1,0x1
    41be:	7f80                	flw	fs0,56(a5)
    41c0:	0409                	addi	s0,s0,2
    41c2:	0100                	addi	s0,sp,128
    41c4:	1505                	addi	a0,a0,-31
    41c6:	0900cb03          	lbu	s6,144(ra)
    41ca:	0000                	unimp
    41cc:	0301                	addi	t1,t1,0
    41ce:	0901                	addi	s2,s2,0
    41d0:	0000                	unimp
    41d2:	0501                	addi	a0,a0,0
    41d4:	0003062f          	vamoaddei8.v	zero,(t1),v0,v12,v0.t
    41d8:	0009                	c.nop	2
    41da:	0100                	addi	s0,sp,128
    41dc:	1b05                	addi	s6,s6,-31
    41de:	08097f03          	0x8097f03
    41e2:	0100                	addi	s0,sp,128
    41e4:	2f05                	jal	4914 <__eqdf2+0x44>
    41e6:	04090103          	lb	sp,64(s2)
    41ea:	0100                	addi	s0,sp,128
    41ec:	2b05                	jal	471c <__divdf3+0x630>
    41ee:	0306                	slli	t1,t1,0x1
    41f0:	0948                	addi	a0,sp,148
    41f2:	0008                	0x8
    41f4:	0501                	addi	a0,a0,0
    41f6:	030c                	addi	a1,sp,384
    41f8:	0900                	addi	s0,sp,144
    41fa:	0000                	unimp
    41fc:	0501                	addi	a0,a0,0
    41fe:	0305                	addi	t1,t1,1
    4200:	00ea                	slli	ra,ra,0x1a
    4202:	0009                	c.nop	2
    4204:	0100                	addi	s0,sp,128
    4206:	0c05                	addi	s8,s8,1
    4208:	0306                	slli	t1,t1,0x1
    420a:	0900                	addi	s0,sp,144
    420c:	0000                	unimp
    420e:	0501                	addi	a0,a0,0
    4210:	0605                	addi	a2,a2,1
    4212:	04090103          	lb	sp,64(s2)
    4216:	0100                	addi	s0,sp,128
    4218:	0105                	addi	sp,sp,1
    421a:	0306                	slli	t1,t1,0x1
    421c:	0901                	addi	s2,s2,0
    421e:	0000                	unimp
    4220:	0501                	addi	a0,a0,0
    4222:	0611                	addi	a2,a2,4
    4224:	097fb003          	0x97fb003
    4228:	0004                	0x4
    422a:	0501                	addi	a0,a0,0
    422c:	062d                	addi	a2,a2,11
    422e:	00090003          	lb	zero,0(s2)
    4232:	0100                	addi	s0,sp,128
    4234:	1105                	addi	sp,sp,-31
    4236:	0306                	slli	t1,t1,0x1
    4238:	0901                	addi	s2,s2,0
    423a:	0004                	0x4
    423c:	0501                	addi	a0,a0,0
    423e:	0963032b          	0x963032b
    4242:	0000                	unimp
    4244:	0501                	addi	a0,a0,0
    4246:	030c                	addi	a1,sp,384
    4248:	0900                	addi	s0,sp,144
    424a:	0000                	unimp
    424c:	0501                	addi	a0,a0,0
    424e:	0605                	addi	a2,a2,1
    4250:	04090003          	lb	zero,64(s2)
    4254:	0100                	addi	s0,sp,128
    4256:	0905                	addi	s2,s2,1
    4258:	0306                	slli	t1,t1,0x1
    425a:	0902                	c.slli64	s2
    425c:	0004                	0x4
    425e:	0301                	addi	t1,t1,0
    4260:	0901                	addi	s2,s2,0
    4262:	0000                	unimp
    4264:	0501                	addi	a0,a0,0
    4266:	0610                	addi	a2,sp,768
    4268:	00090203          	lb	tp,0(s2)
    426c:	0100                	addi	s0,sp,128
    426e:	0c05                	addi	s8,s8,1
    4270:	04097e03          	0x4097e03
    4274:	0100                	addi	s0,sp,128
    4276:	1105                	addi	sp,sp,-31
    4278:	0306                	slli	t1,t1,0x1
    427a:	091c                	addi	a5,sp,144
    427c:	0004                	0x4
    427e:	0501                	addi	a0,a0,0
    4280:	0305                	addi	t1,t1,1
    4282:	0000094b          	fnmsub.s	fs2,ft0,ft0,ft0,rne
    4286:	0301                	addi	t1,t1,0
    4288:	0901                	addi	s2,s2,0
    428a:	0000                	unimp
    428c:	0501                	addi	a0,a0,0
    428e:	062e                	slli	a2,a2,0xb
    4290:	00093c03          	0x93c03
    4294:	0100                	addi	s0,sp,128
    4296:	1a05                	addi	s4,s4,-31
    4298:	04094403          	lbu	s0,64(s2)
    429c:	0100                	addi	s0,sp,128
    429e:	0c05                	addi	s8,s8,1
    42a0:	04090003          	lb	zero,64(s2)
    42a4:	0100                	addi	s0,sp,128
    42a6:	2e05                	jal	45d6 <__divdf3+0x4ea>
    42a8:	08093c03          	0x8093c03
    42ac:	0100                	addi	s0,sp,128
    42ae:	0c05                	addi	s8,s8,1
    42b0:	04094403          	lbu	s0,64(s2)
    42b4:	0100                	addi	s0,sp,128
    42b6:	0505                	addi	a0,a0,1
    42b8:	0306                	slli	t1,t1,0x1
    42ba:	0901                	addi	s2,s2,0
    42bc:	0004                	0x4
    42be:	0501                	addi	a0,a0,0
    42c0:	0316                	slli	t1,t1,0x5
    42c2:	0938                	addi	a4,sp,152
    42c4:	0000                	unimp
    42c6:	0501                	addi	a0,a0,0
    42c8:	0619                	addi	a2,a2,6
    42ca:	00090003          	lb	zero,0(s2)
    42ce:	0100                	addi	s0,sp,128
    42d0:	1505                	addi	a0,a0,-31
    42d2:	0306                	slli	t1,t1,0x1
    42d4:	00080907          	vle8.v	v18,(a6),v0.t
    42d8:	0301                	addi	t1,t1,0
    42da:	0901                	addi	s2,s2,0
    42dc:	0000                	unimp
    42de:	0501                	addi	a0,a0,0
    42e0:	062e                	slli	a2,a2,0xb
    42e2:	00090003          	lb	zero,0(s2)
    42e6:	0100                	addi	s0,sp,128
    42e8:	2b05                	jal	4818 <__divdf3+0x72c>
    42ea:	0306                	slli	t1,t1,0x1
    42ec:	0954                	addi	a3,sp,148
    42ee:	0004                	0x4
    42f0:	0501                	addi	a0,a0,0
    42f2:	030c                	addi	a1,sp,384
    42f4:	0900                	addi	s0,sp,144
    42f6:	0000                	unimp
    42f8:	0501                	addi	a0,a0,0
    42fa:	2b03061b          	0x2b03061b
    42fe:	0009                	c.nop	2
    4300:	0100                	addi	s0,sp,128
    4302:	0505                	addi	a0,a0,1
    4304:	0306                	slli	t1,t1,0x1
    4306:	0004093f 060c0501 	0x60c05010004093f
    430e:	00090003          	lb	zero,0(s2)
    4312:	0100                	addi	s0,sp,128
    4314:	0505                	addi	a0,a0,1
    4316:	0306                	slli	t1,t1,0x1
    4318:	0901                	addi	s2,s2,0
    431a:	0004                	0x4
    431c:	0501                	addi	a0,a0,0
    431e:	0601                	addi	a2,a2,0
    4320:	00090103          	lb	sp,0(s2)
    4324:	0100                	addi	s0,sp,128
    4326:	0505                	addi	a0,a0,1
    4328:	0306                	slli	t1,t1,0x1
    432a:	7f80                	flw	fs0,56(a5)
    432c:	0409                	addi	s0,s0,2
    432e:	0100                	addi	s0,sp,128
    4330:	1505                	addi	a0,a0,-31
    4332:	00093503          	0x93503
    4336:	0100                	addi	s0,sp,128
    4338:	00090103          	lb	sp,0(s2)
    433c:	0100                	addi	s0,sp,128
    433e:	2e05                	jal	466e <__divdf3+0x582>
    4340:	0306                	slli	t1,t1,0x1
    4342:	0900                	addi	s0,sp,144
    4344:	0000                	unimp
    4346:	0501                	addi	a0,a0,0
    4348:	5e03062b          	0x5e03062b
    434c:	0409                	addi	s0,s0,2
    434e:	0100                	addi	s0,sp,128
    4350:	0c05                	addi	s8,s8,1
    4352:	00090003          	lb	zero,0(s2)
    4356:	0100                	addi	s0,sp,128
    4358:	0505                	addi	a0,a0,1
    435a:	0306                	slli	t1,t1,0x1
    435c:	0900                	addi	s0,sp,144
    435e:	0004                	0x4
    4360:	0501                	addi	a0,a0,0
    4362:	0609                	addi	a2,a2,2
    4364:	04090203          	lb	tp,64(s2)
    4368:	0100                	addi	s0,sp,128
    436a:	00090103          	lb	sp,0(s2)
    436e:	0100                	addi	s0,sp,128
    4370:	0c05                	addi	s8,s8,1
    4372:	0306                	slli	t1,t1,0x1
    4374:	0900                	addi	s0,sp,144
    4376:	0000                	unimp
    4378:	0501                	addi	a0,a0,0
    437a:	0310                	addi	a2,sp,384
    437c:	0902                	c.slli64	s2
    437e:	0004                	0x4
    4380:	0501                	addi	a0,a0,0
    4382:	030c                	addi	a1,sp,384
    4384:	097e                	slli	s2,s2,0x1f
    4386:	0004                	0x4
    4388:	0501                	addi	a0,a0,0
    438a:	0305                	addi	t1,t1,1
    438c:	097d                	addi	s2,s2,31
    438e:	0004                	0x4
    4390:	0501                	addi	a0,a0,0
    4392:	0615                	addi	a2,a2,5
    4394:	0c093e03          	0xc093e03
    4398:	0100                	addi	s0,sp,128
    439a:	00090103          	lb	sp,0(s2)
    439e:	0100                	addi	s0,sp,128
    43a0:	3105                	jal	3fc0 <__adddf3+0x6ac>
    43a2:	0306                	slli	t1,t1,0x1
    43a4:	0900                	addi	s0,sp,144
    43a6:	0000                	unimp
    43a8:	0501                	addi	a0,a0,0
    43aa:	4103062b          	0x4103062b
    43ae:	0c09                	addi	s8,s8,2
    43b0:	0100                	addi	s0,sp,128
    43b2:	0c05                	addi	s8,s8,1
    43b4:	00090003          	lb	zero,0(s2)
    43b8:	0100                	addi	s0,sp,128
    43ba:	0505                	addi	a0,a0,1
    43bc:	0306                	slli	t1,t1,0x1
    43be:	0900                	addi	s0,sp,144
    43c0:	0004                	0x4
    43c2:	0501                	addi	a0,a0,0
    43c4:	0609                	addi	a2,a2,2
    43c6:	04090203          	lb	tp,64(s2)
    43ca:	0100                	addi	s0,sp,128
    43cc:	00090103          	lb	sp,0(s2)
    43d0:	0100                	addi	s0,sp,128
    43d2:	0c05                	addi	s8,s8,1
    43d4:	0306                	slli	t1,t1,0x1
    43d6:	0900                	addi	s0,sp,144
    43d8:	0000                	unimp
    43da:	0501                	addi	a0,a0,0
    43dc:	0310                	addi	a2,sp,384
    43de:	0902                	c.slli64	s2
    43e0:	0004                	0x4
    43e2:	0501                	addi	a0,a0,0
    43e4:	030c                	addi	a1,sp,384
    43e6:	097e                	slli	s2,s2,0x1f
    43e8:	0004                	0x4
    43ea:	0501                	addi	a0,a0,0
    43ec:	0611                	addi	a2,a2,4
    43ee:	0900c503          	lbu	a0,144(ra)
    43f2:	0004                	0x4
    43f4:	0501                	addi	a0,a0,0
    43f6:	062e                	slli	a2,a2,0xb
    43f8:	00090303          	lb	t1,0(s2)
    43fc:	0100                	addi	s0,sp,128
    43fe:	1405                	addi	s0,s0,-31
    4400:	04097d03          	0x4097d03
    4404:	0100                	addi	s0,sp,128
    4406:	2e05                	jal	4736 <__divdf3+0x64a>
    4408:	08090303          	lb	t1,128(s2)
    440c:	0100                	addi	s0,sp,128
    440e:	1405                	addi	s0,s0,-31
    4410:	08097d03          	0x8097d03
    4414:	0100                	addi	s0,sp,128
    4416:	0505                	addi	a0,a0,1
    4418:	0306                	slli	t1,t1,0x1
    441a:	7fa4                	flw	fs1,120(a5)
    441c:	0409                	addi	s0,s0,2
    441e:	0100                	addi	s0,sp,128
    4420:	1505                	addi	a0,a0,-31
    4422:	0900ef03          	0x900ef03
    4426:	0000                	unimp
    4428:	0301                	addi	t1,t1,0
    442a:	0901                	addi	s2,s2,0
    442c:	0000                	unimp
    442e:	0501                	addi	a0,a0,0
    4430:	7fa4032b          	0x7fa4032b
    4434:	0009                	c.nop	2
    4436:	0100                	addi	s0,sp,128
    4438:	0c05                	addi	s8,s8,1
    443a:	00090003          	lb	zero,0(s2)
    443e:	0100                	addi	s0,sp,128
    4440:	1b05                	addi	s6,s6,-31
    4442:	0306                	slli	t1,t1,0x1
    4444:	000900db          	0x900db
    4448:	0100                	addi	s0,sp,128
    444a:	0505                	addi	a0,a0,1
    444c:	0306                	slli	t1,t1,0x1
    444e:	0004090f          	0x4090f
    4452:	0501                	addi	a0,a0,0
    4454:	060c                	addi	a1,sp,768
    4456:	00090003          	lb	zero,0(s2)
    445a:	0100                	addi	s0,sp,128
    445c:	0505                	addi	a0,a0,1
    445e:	0306                	slli	t1,t1,0x1
    4460:	0901                	addi	s2,s2,0
    4462:	0004                	0x4
    4464:	0501                	addi	a0,a0,0
    4466:	0601                	addi	a2,a2,0
    4468:	00090103          	lb	sp,0(s2)
    446c:	0100                	addi	s0,sp,128
    446e:	1505                	addi	a0,a0,-31
    4470:	0306                	slli	t1,t1,0x1
    4472:	095e                	slli	s2,s2,0x17
    4474:	0004                	0x4
    4476:	0301                	addi	t1,t1,0
    4478:	0901                	addi	s2,s2,0
    447a:	0000                	unimp
    447c:	0501                	addi	a0,a0,0
    447e:	7fb5032b          	0x7fb5032b
    4482:	0009                	c.nop	2
    4484:	0100                	addi	s0,sp,128
    4486:	0c05                	addi	s8,s8,1
    4488:	00090003          	lb	zero,0(s2)
    448c:	0100                	addi	s0,sp,128
    448e:	0505                	addi	a0,a0,1
    4490:	0306                	slli	t1,t1,0x1
    4492:	0900                	addi	s0,sp,144
    4494:	0004                	0x4
    4496:	0501                	addi	a0,a0,0
    4498:	0609                	addi	a2,a2,2
    449a:	04090203          	lb	tp,64(s2)
    449e:	0100                	addi	s0,sp,128
    44a0:	00090103          	lb	sp,0(s2)
    44a4:	0100                	addi	s0,sp,128
    44a6:	1005                	c.nop	-31
    44a8:	0306                	slli	t1,t1,0x1
    44aa:	0902                	c.slli64	s2
    44ac:	0000                	unimp
    44ae:	0501                	addi	a0,a0,0
    44b0:	030c                	addi	a1,sp,384
    44b2:	097e                	slli	s2,s2,0x1f
    44b4:	0004                	0x4
    44b6:	0501                	addi	a0,a0,0
    44b8:	0611                	addi	a2,a2,4
    44ba:	0900d103          	lhu	sp,144(ra)
    44be:	0004                	0x4
    44c0:	0501                	addi	a0,a0,0
    44c2:	0305                	addi	t1,t1,1
    44c4:	7f96                	flw	ft11,100(sp)
    44c6:	0009                	c.nop	2
    44c8:	0100                	addi	s0,sp,128
    44ca:	00090103          	lb	sp,0(s2)
    44ce:	0100                	addi	s0,sp,128
    44d0:	3405                	jal	3ef0 <__adddf3+0x5dc>
    44d2:	0306                	slli	t1,t1,0x1
    44d4:	00f1                	addi	ra,ra,28
    44d6:	0009                	c.nop	2
    44d8:	0100                	addi	s0,sp,128
    44da:	1a05                	addi	s4,s4,-31
    44dc:	097f8f03          	lb	t5,151(t6)
    44e0:	0004                	0x4
    44e2:	0501                	addi	a0,a0,0
    44e4:	030c                	addi	a1,sp,384
    44e6:	0900                	addi	s0,sp,144
    44e8:	0004                	0x4
    44ea:	0501                	addi	a0,a0,0
    44ec:	0334                	addi	a3,sp,392
    44ee:	00f1                	addi	ra,ra,28
    44f0:	0409                	addi	s0,s0,2
    44f2:	0100                	addi	s0,sp,128
    44f4:	0c05                	addi	s8,s8,1
    44f6:	097f8f03          	lb	t5,151(t6)
    44fa:	0004                	0x4
    44fc:	0501                	addi	a0,a0,0
    44fe:	0334                	addi	a3,sp,392
    4500:	00ec                	addi	a1,sp,76
    4502:	0409                	addi	s0,s0,2
    4504:	0100                	addi	s0,sp,128
    4506:	0c05                	addi	s8,s8,1
    4508:	097f9403          	lh	s0,151(t6)
    450c:	0004                	0x4
    450e:	0501                	addi	a0,a0,0
    4510:	0605                	addi	a2,a2,1
    4512:	04090103          	lb	sp,64(s2)
    4516:	0100                	addi	s0,sp,128
    4518:	1505                	addi	a0,a0,-31
    451a:	0900ea03          	0x900ea03
    451e:	0000                	unimp
    4520:	0301                	addi	t1,t1,0
    4522:	0901                	addi	s2,s2,0
    4524:	0000                	unimp
    4526:	0501                	addi	a0,a0,0
    4528:	7fa9032b          	0x7fa9032b
    452c:	0009                	c.nop	2
    452e:	0100                	addi	s0,sp,128
    4530:	0c05                	addi	s8,s8,1
    4532:	00090003          	lb	zero,0(s2)
    4536:	0100                	addi	s0,sp,128
    4538:	0505                	addi	a0,a0,1
    453a:	0306                	slli	t1,t1,0x1
    453c:	0900                	addi	s0,sp,144
    453e:	0004                	0x4
    4540:	0501                	addi	a0,a0,0
    4542:	0609                	addi	a2,a2,2
    4544:	04090203          	lb	tp,64(s2)
    4548:	0100                	addi	s0,sp,128
    454a:	00090103          	lb	sp,0(s2)
    454e:	0100                	addi	s0,sp,128
    4550:	1005                	c.nop	-31
    4552:	0306                	slli	t1,t1,0x1
    4554:	0902                	c.slli64	s2
    4556:	0000                	unimp
    4558:	0501                	addi	a0,a0,0
    455a:	030c                	addi	a1,sp,384
    455c:	097e                	slli	s2,s2,0x1f
    455e:	0004                	0x4
    4560:	0301                	addi	t1,t1,0
    4562:	0968                	addi	a0,sp,156
    4564:	0004                	0x4
    4566:	0301                	addi	t1,t1,0
    4568:	0918                	addi	a4,sp,144
    456a:	0004                	0x4
    456c:	0501                	addi	a0,a0,0
    456e:	0611                	addi	a2,a2,4
    4570:	0900dd03          	lhu	s10,144(ra)
    4574:	0004                	0x4
    4576:	0501                	addi	a0,a0,0
    4578:	0305                	addi	t1,t1,1
    457a:	7f8a                	flw	ft11,160(sp)
    457c:	0009                	c.nop	2
    457e:	0100                	addi	s0,sp,128
    4580:	00090103          	lb	sp,0(s2)
    4584:	0100                	addi	s0,sp,128
    4586:	2b05                	jal	4ab6 <__ledf2+0x76>
    4588:	00091503          	lh	a0,0(s2)
    458c:	0100                	addi	s0,sp,128
    458e:	0c05                	addi	s8,s8,1
    4590:	00090003          	lb	zero,0(s2)
    4594:	0100                	addi	s0,sp,128
    4596:	0905                	addi	s2,s2,1
    4598:	00090203          	lb	tp,0(s2)
    459c:	0100                	addi	s0,sp,128
    459e:	1a05                	addi	s4,s4,-31
    45a0:	0306                	slli	t1,t1,0x1
    45a2:	0969                	addi	s2,s2,26
    45a4:	0000                	unimp
    45a6:	0501                	addi	a0,a0,0
    45a8:	030c                	addi	a1,sp,384
    45aa:	0900                	addi	s0,sp,144
    45ac:	0004                	0x4
    45ae:	0501                	addi	a0,a0,0
    45b0:	0605                	addi	a2,a2,1
    45b2:	08090103          	lb	sp,128(s2)
    45b6:	0100                	addi	s0,sp,128
    45b8:	1505                	addi	a0,a0,-31
    45ba:	0900f603          	0x900f603
    45be:	0000                	unimp
    45c0:	0301                	addi	t1,t1,0
    45c2:	0901                	addi	s2,s2,0
    45c4:	0000                	unimp
    45c6:	0501                	addi	a0,a0,0
    45c8:	00030633          	add	a2,t1,zero
    45cc:	0009                	c.nop	2
    45ce:	0100                	addi	s0,sp,128
    45d0:	1b05                	addi	s6,s6,-31
    45d2:	08097f03          	0x8097f03
    45d6:	0100                	addi	s0,sp,128
    45d8:	3305                	jal	42f8 <__divdf3+0x20c>
    45da:	04090103          	lb	sp,64(s2)
    45de:	0100                	addi	s0,sp,128
    45e0:	2b05                	jal	4b10 <__ledf2+0xd0>
    45e2:	0306                	slli	t1,t1,0x1
    45e4:	7f9d                	lui	t6,0xfffe7
    45e6:	0809                	addi	a6,a6,2
    45e8:	0100                	addi	s0,sp,128
    45ea:	0c05                	addi	s8,s8,1
    45ec:	00090003          	lb	zero,0(s2)
    45f0:	0100                	addi	s0,sp,128
    45f2:	0905                	addi	s2,s2,1
    45f4:	08090303          	lb	t1,128(s2)
    45f8:	0100                	addi	s0,sp,128
    45fa:	2e05                	jal	492a <__eqdf2+0x5a>
    45fc:	0306                	slli	t1,t1,0x1
    45fe:	097d                	addi	s2,s2,31
    4600:	0000                	unimp
    4602:	0501                	addi	a0,a0,0
    4604:	0305                	addi	t1,t1,1
    4606:	0900                	addi	s0,sp,144
    4608:	0008                	0x8
    460a:	0501                	addi	a0,a0,0
    460c:	030c                	addi	a1,sp,384
    460e:	00040903          	lb	s2,0(s0)
    4612:	0501                	addi	a0,a0,0
    4614:	032e                	slli	t1,t1,0xb
    4616:	097d                	addi	s2,s2,31
    4618:	0004                	0x4
    461a:	0501                	addi	a0,a0,0
    461c:	030c                	addi	a1,sp,384
    461e:	0900                	addi	s0,sp,144
    4620:	0008                	0x8
    4622:	0501                	addi	a0,a0,0
    4624:	0609                	addi	a2,a2,2
    4626:	04090303          	lb	t1,64(s2)
    462a:	0100                	addi	s0,sp,128
    462c:	2e05                	jal	495c <__gedf2>
    462e:	0306                	slli	t1,t1,0x1
    4630:	097d                	addi	s2,s2,31
    4632:	0000                	unimp
    4634:	0501                	addi	a0,a0,0
    4636:	0305                	addi	t1,t1,1
    4638:	0900                	addi	s0,sp,144
    463a:	0008                	0x8
    463c:	0501                	addi	a0,a0,0
    463e:	030c                	addi	a1,sp,384
    4640:	00040903          	lb	s2,0(s0)
    4644:	0501                	addi	a0,a0,0
    4646:	032e                	slli	t1,t1,0xb
    4648:	097d                	addi	s2,s2,31
    464a:	0004                	0x4
    464c:	0501                	addi	a0,a0,0
    464e:	0611                	addi	a2,a2,4
    4650:	08091c03          	lh	s8,128(s2)
    4654:	0100                	addi	s0,sp,128
    4656:	2d05                	jal	4c86 <__muldf3+0x162>
    4658:	0306                	slli	t1,t1,0x1
    465a:	0900                	addi	s0,sp,144
    465c:	0000                	unimp
    465e:	0501                	addi	a0,a0,0
    4660:	0611                	addi	a2,a2,4
    4662:	04090103          	lb	sp,64(s2)
    4666:	0100                	addi	s0,sp,128
    4668:	2b05                	jal	4b98 <__muldf3+0x74>
    466a:	00096303          	0x96303
    466e:	0100                	addi	s0,sp,128
    4670:	0c05                	addi	s8,s8,1
    4672:	00090003          	lb	zero,0(s2)
    4676:	0100                	addi	s0,sp,128
    4678:	0505                	addi	a0,a0,1
    467a:	0306                	slli	t1,t1,0x1
    467c:	0900                	addi	s0,sp,144
    467e:	0004                	0x4
    4680:	0501                	addi	a0,a0,0
    4682:	0609                	addi	a2,a2,2
    4684:	04090203          	lb	tp,64(s2)
    4688:	0100                	addi	s0,sp,128
    468a:	00090103          	lb	sp,0(s2)
    468e:	0100                	addi	s0,sp,128
    4690:	1005                	c.nop	-31
    4692:	0306                	slli	t1,t1,0x1
    4694:	0902                	c.slli64	s2
    4696:	0000                	unimp
    4698:	0501                	addi	a0,a0,0
    469a:	030c                	addi	a1,sp,384
    469c:	097e                	slli	s2,s2,0x1f
    469e:	0004                	0x4
    46a0:	0501                	addi	a0,a0,0
    46a2:	032e                	slli	t1,t1,0xb
    46a4:	097d                	addi	s2,s2,31
    46a6:	0004                	0x4
    46a8:	0501                	addi	a0,a0,0
    46aa:	0615                	addi	a2,a2,5
    46ac:	08092603          	lw	a2,128(s2)
    46b0:	0100                	addi	s0,sp,128
    46b2:	00090103          	lb	sp,0(s2)
    46b6:	0100                	addi	s0,sp,128
    46b8:	2e05                	jal	49e8 <__gedf2+0x8c>
    46ba:	0306                	slli	t1,t1,0x1
    46bc:	0900                	addi	s0,sp,144
    46be:	0000                	unimp
    46c0:	0501                	addi	a0,a0,0
    46c2:	5903062b          	0x5903062b
    46c6:	0409                	addi	s0,s0,2
    46c8:	0100                	addi	s0,sp,128
    46ca:	0c05                	addi	s8,s8,1
    46cc:	00090003          	lb	zero,0(s2)
    46d0:	0100                	addi	s0,sp,128
    46d2:	0505                	addi	a0,a0,1
    46d4:	0306                	slli	t1,t1,0x1
    46d6:	0900                	addi	s0,sp,144
    46d8:	0004                	0x4
    46da:	0501                	addi	a0,a0,0
    46dc:	0609                	addi	a2,a2,2
    46de:	04090203          	lb	tp,64(s2)
    46e2:	0100                	addi	s0,sp,128
    46e4:	00090103          	lb	sp,0(s2)
    46e8:	0100                	addi	s0,sp,128
    46ea:	0c05                	addi	s8,s8,1
    46ec:	0306                	slli	t1,t1,0x1
    46ee:	0900                	addi	s0,sp,144
    46f0:	0000                	unimp
    46f2:	0501                	addi	a0,a0,0
    46f4:	0310                	addi	a2,sp,384
    46f6:	0902                	c.slli64	s2
    46f8:	0004                	0x4
    46fa:	0501                	addi	a0,a0,0
    46fc:	030c                	addi	a1,sp,384
    46fe:	097e                	slli	s2,s2,0x1f
    4700:	0004                	0x4
    4702:	0501                	addi	a0,a0,0
    4704:	0305                	addi	t1,t1,1
    4706:	097d                	addi	s2,s2,31
    4708:	0004                	0x4
    470a:	0501                	addi	a0,a0,0
    470c:	030c                	addi	a1,sp,384
    470e:	000c0903          	lb	s2,0(s8) # 1a000 <RAM_SIZE+0xa000>
    4712:	0501                	addi	a0,a0,0
    4714:	060d                	addi	a2,a2,3
    4716:	04090203          	lb	tp,64(s2)
    471a:	0100                	addi	s0,sp,128
    471c:	00090103          	lb	sp,0(s2)
    4720:	0100                	addi	s0,sp,128
    4722:	0505                	addi	a0,a0,1
    4724:	0306                	slli	t1,t1,0x1
    4726:	097a                	slli	s2,s2,0x1e
    4728:	0004                	0x4
    472a:	0501                	addi	a0,a0,0
    472c:	093e031b          	0x93e031b
    4730:	0010                	0x10
    4732:	0301                	addi	t1,t1,0
    4734:	090c                	addi	a1,sp,144
    4736:	0008                	0x8
    4738:	0301                	addi	t1,t1,0
    473a:	00080947          	fmsub.s	fs2,fa6,ft0,ft0,rne
    473e:	0501                	addi	a0,a0,0
    4740:	032e                	slli	t1,t1,0xb
    4742:	0008096f          	jal	s2,84742 <RAM_SIZE+0x74742>
    4746:	0501                	addi	a0,a0,0
    4748:	030c                	addi	a1,sp,384
    474a:	00040903          	lb	s2,0(s0)
    474e:	0501                	addi	a0,a0,0
    4750:	032e                	slli	t1,t1,0xb
    4752:	097d                	addi	s2,s2,31
    4754:	0008                	0x8
    4756:	0501                	addi	a0,a0,0
    4758:	030c                	addi	a1,sp,384
    475a:	00040903          	lb	s2,0(s0)
    475e:	0501                	addi	a0,a0,0
    4760:	0601                	addi	a2,a2,0
    4762:	097ed303          	lhu	t1,151(t4) # ffff8097 <RAM_SIZE+0xfffe8097>
    4766:	0008                	0x8
    4768:	0501                	addi	a0,a0,0
    476a:	0305                	addi	t1,t1,1
    476c:	0901                	addi	s2,s2,0
    476e:	0000                	unimp
    4770:	0301                	addi	t1,t1,0
    4772:	0901                	addi	s2,s2,0
    4774:	0000                	unimp
    4776:	0301                	addi	t1,t1,0
    4778:	0901                	addi	s2,s2,0
    477a:	0000                	unimp
    477c:	0501                	addi	a0,a0,0
    477e:	0601                	addi	a2,a2,0
    4780:	00097d03          	0x97d03
    4784:	0100                	addi	s0,sp,128
    4786:	28090003          	lb	zero,640(s2)
    478a:	0100                	addi	s0,sp,128
    478c:	0c05                	addi	s8,s8,1
    478e:	04090e03          	lb	t3,64(s2)
    4792:	0100                	addi	s0,sp,128
    4794:	04097503          	0x4097503
    4798:	0100                	addi	s0,sp,128
    479a:	0505                	addi	a0,a0,1
    479c:	0306                	slli	t1,t1,0x1
    479e:	0901                	addi	s2,s2,0
    47a0:	0004                	0x4
    47a2:	0301                	addi	t1,t1,0
    47a4:	0905                	addi	s2,s2,1
    47a6:	0000                	unimp
    47a8:	0501                	addi	a0,a0,0
    47aa:	0311                	addi	t1,t1,4
    47ac:	0900                	addi	s0,sp,144
    47ae:	0000                	unimp
    47b0:	0501                	addi	a0,a0,0
    47b2:	0203062b          	0x203062b
    47b6:	0009                	c.nop	2
    47b8:	0100                	addi	s0,sp,128
    47ba:	1905                	addi	s2,s2,-31
    47bc:	04090003          	lb	zero,64(s2)
    47c0:	0100                	addi	s0,sp,128
    47c2:	2b05                	jal	4cf2 <__muldf3+0x1ce>
    47c4:	04090003          	lb	zero,64(s2)
    47c8:	0100                	addi	s0,sp,128
    47ca:	1905                	addi	s2,s2,-31
    47cc:	1c090003          	lb	zero,448(s2)
    47d0:	0100                	addi	s0,sp,128
    47d2:	0b05                	addi	s6,s6,1
    47d4:	0306                	slli	t1,t1,0x1
    47d6:	001c0903          	lb	s2,1(s8)
    47da:	0501                	addi	a0,a0,0
    47dc:	7d03062b          	0x7d03062b
    47e0:	0009                	c.nop	2
    47e2:	0100                	addi	s0,sp,128
    47e4:	0105                	addi	sp,sp,1
    47e6:	04097503          	0x4097503
    47ea:	0100                	addi	s0,sp,128
    47ec:	0b05                	addi	s6,s6,1
    47ee:	14090e03          	lb	t3,320(s2)
    47f2:	0100                	addi	s0,sp,128
    47f4:	0905                	addi	s2,s2,1
    47f6:	0306                	slli	t1,t1,0x1
    47f8:	0902                	c.slli64	s2
    47fa:	0008                	0x8
    47fc:	0501                	addi	a0,a0,0
    47fe:	0622                	slli	a2,a2,0x8
    4800:	00090003          	lb	zero,0(s2)
    4804:	0100                	addi	s0,sp,128
    4806:	0905                	addi	s2,s2,1
    4808:	0306                	slli	t1,t1,0x1
    480a:	0901                	addi	s2,s2,0
    480c:	000c                	0xc
    480e:	0501                	addi	a0,a0,0
    4810:	061d                	addi	a2,a2,7
    4812:	00090003          	lb	zero,0(s2)
    4816:	0100                	addi	s0,sp,128
    4818:	0b05                	addi	s6,s6,1
    481a:	0c097d03          	0xc097d03
    481e:	0100                	addi	s0,sp,128
    4820:	1d05                	addi	s10,s10,-31
    4822:	04090303          	lb	t1,64(s2)
    4826:	0100                	addi	s0,sp,128
    4828:	0b05                	addi	s6,s6,1
    482a:	04097d03          	0x4097d03
    482e:	0100                	addi	s0,sp,128
    4830:	1d05                	addi	s10,s10,-31
    4832:	04090303          	lb	t1,64(s2)
    4836:	0100                	addi	s0,sp,128
    4838:	0b05                	addi	s6,s6,1
    483a:	0306                	slli	t1,t1,0x1
    483c:	097d                	addi	s2,s2,31
    483e:	0008                	0x8
    4840:	0501                	addi	a0,a0,0
    4842:	0b030607          	vlse8.v	v12,(t1),a6
    4846:	0409                	addi	s0,s0,2
    4848:	0100                	addi	s0,sp,128
    484a:	1a05                	addi	s4,s4,-31
    484c:	04090103          	lb	sp,64(s2)
    4850:	0100                	addi	s0,sp,128
    4852:	0c05                	addi	s8,s8,1
    4854:	04090803          	lb	a6,64(s2)
    4858:	0100                	addi	s0,sp,128
    485a:	0505                	addi	a0,a0,1
    485c:	0306                	slli	t1,t1,0x1
    485e:	00040977          	0x40977
    4862:	0301                	addi	t1,t1,0
    4864:	0901                	addi	s2,s2,0
    4866:	0000                	unimp
    4868:	0501                	addi	a0,a0,0
    486a:	0900030b          	0x900030b
    486e:	0000                	unimp
    4870:	0601                	addi	a2,a2,0
    4872:	04091803          	lh	a6,64(s2)
    4876:	0100                	addi	s0,sp,128
    4878:	0c05                	addi	s8,s8,1
    487a:	04096a03          	0x4096a03
    487e:	0100                	addi	s0,sp,128
    4880:	0d05                	addi	s10,s10,1
    4882:	08090003          	lb	zero,128(s2)
    4886:	0100                	addi	s0,sp,128
    4888:	0905                	addi	s2,s2,1
    488a:	0306                	slli	t1,t1,0x1
    488c:	0900                	addi	s0,sp,144
    488e:	0004                	0x4
    4890:	0501                	addi	a0,a0,0
    4892:	030d                	addi	t1,t1,3
    4894:	0901                	addi	s2,s2,0
    4896:	0000                	unimp
    4898:	0501                	addi	a0,a0,0
    489a:	0309                	addi	t1,t1,2
    489c:	0901                	addi	s2,s2,0
    489e:	0000                	unimp
    48a0:	0501                	addi	a0,a0,0
    48a2:	0610                	addi	a2,sp,768
    48a4:	00097f03          	0x97f03
    48a8:	0100                	addi	s0,sp,128
    48aa:	0c05                	addi	s8,s8,1
    48ac:	04097f03          	0x4097f03
    48b0:	0100                	addi	s0,sp,128
    48b2:	1005                	c.nop	-31
    48b4:	04090103          	lb	sp,64(s2)
    48b8:	0100                	addi	s0,sp,128
    48ba:	0b05                	addi	s6,s6,1
    48bc:	04090103          	lb	sp,64(s2)
    48c0:	0100                	addi	s0,sp,128
    48c2:	0306                	slli	t1,t1,0x1
    48c4:	097c                	addi	a5,sp,156
    48c6:	000c                	0xc
    48c8:	0501                	addi	a0,a0,0
    48ca:	0305                	addi	t1,t1,1
    48cc:	0906                	slli	s2,s2,0x1
    48ce:	0004                	0x4
    48d0:	0501                	addi	a0,a0,0
    48d2:	0203060b          	0x203060b
    48d6:	0009                	c.nop	2
    48d8:	0100                	addi	s0,sp,128
    48da:	0705                	addi	a4,a4,1
    48dc:	04097e03          	0x4097e03
    48e0:	0100                	addi	s0,sp,128
    48e2:	0505                	addi	a0,a0,1
    48e4:	0306                	slli	t1,t1,0x1
    48e6:	0902                	c.slli64	s2
    48e8:	0004                	0x4
    48ea:	0501                	addi	a0,a0,0
    48ec:	0900030b          	0x900030b
    48f0:	0000                	unimp
    48f2:	0501                	addi	a0,a0,0
    48f4:	0309                	addi	t1,t1,2
    48f6:	0902                	c.slli64	s2
    48f8:	0008                	0x8
    48fa:	0501                	addi	a0,a0,0
    48fc:	0622                	slli	a2,a2,0x8
    48fe:	00090003          	lb	zero,0(s2)
    4902:	0100                	addi	s0,sp,128
    4904:	0905                	addi	s2,s2,1
    4906:	0306                	slli	t1,t1,0x1
    4908:	0901                	addi	s2,s2,0
    490a:	000c                	0xc
    490c:	0501                	addi	a0,a0,0
    490e:	061d                	addi	a2,a2,7
    4910:	00090003          	lb	zero,0(s2)
    4914:	0100                	addi	s0,sp,128
    4916:	0b05                	addi	s6,s6,1
    4918:	0c097d03          	0xc097d03
    491c:	0100                	addi	s0,sp,128
    491e:	1d05                	addi	s10,s10,-31
    4920:	04090303          	lb	t1,64(s2)
    4924:	0100                	addi	s0,sp,128
    4926:	0b05                	addi	s6,s6,1
    4928:	04097d03          	0x4097d03
    492c:	0100                	addi	s0,sp,128
    492e:	1d05                	addi	s10,s10,-31
    4930:	04090303          	lb	t1,64(s2)
    4934:	0100                	addi	s0,sp,128
    4936:	0b05                	addi	s6,s6,1
    4938:	0306                	slli	t1,t1,0x1
    493a:	097d                	addi	s2,s2,31
    493c:	0008                	0x8
    493e:	0501                	addi	a0,a0,0
    4940:	0305                	addi	t1,t1,1
    4942:	0004090b          	0x4090b
    4946:	0501                	addi	a0,a0,0
    4948:	00030607          	vle8.v	v12,(t1),v0.t
    494c:	0009                	c.nop	2
    494e:	0100                	addi	s0,sp,128
    4950:	0505                	addi	a0,a0,1
    4952:	0306                	slli	t1,t1,0x1
    4954:	0901                	addi	s2,s2,0
    4956:	0004                	0x4
    4958:	0501                	addi	a0,a0,0
    495a:	0900030b          	0x900030b
    495e:	0000                	unimp
    4960:	0501                	addi	a0,a0,0
    4962:	060c                	addi	a1,sp,768
    4964:	04090203          	lb	tp,64(s2)
    4968:	0100                	addi	s0,sp,128
    496a:	0905                	addi	s2,s2,1
    496c:	0306                	slli	t1,t1,0x1
    496e:	0900                	addi	s0,sp,144
    4970:	0004                	0x4
    4972:	0501                	addi	a0,a0,0
    4974:	030d                	addi	t1,t1,3
    4976:	0901                	addi	s2,s2,0
    4978:	0000                	unimp
    497a:	0501                	addi	a0,a0,0
    497c:	0309                	addi	t1,t1,2
    497e:	0901                	addi	s2,s2,0
    4980:	0000                	unimp
    4982:	0501                	addi	a0,a0,0
    4984:	060d                	addi	a2,a2,3
    4986:	00097e03          	0x97e03
    498a:	0100                	addi	s0,sp,128
    498c:	1005                	c.nop	-31
    498e:	04090103          	lb	sp,64(s2)
    4992:	0100                	addi	s0,sp,128
    4994:	0c05                	addi	s8,s8,1
    4996:	04097f03          	0x4097f03
    499a:	0100                	addi	s0,sp,128
    499c:	1005                	c.nop	-31
    499e:	04090103          	lb	sp,64(s2)
    49a2:	0100                	addi	s0,sp,128
    49a4:	0b05                	addi	s6,s6,1
    49a6:	04090103          	lb	sp,64(s2)
    49aa:	0100                	addi	s0,sp,128
    49ac:	0306                	slli	t1,t1,0x1
    49ae:	097c                	addi	a5,sp,156
    49b0:	000c                	0xc
    49b2:	0501                	addi	a0,a0,0
    49b4:	0009                	c.nop	2
    49b6:	0402                	c.slli64	s0
    49b8:	09090303          	lb	t1,144(s2)
    49bc:	000c                	0xc
    49be:	0501                	addi	a0,a0,0
    49c0:	0402000f          	0x402000f
    49c4:	00030603          	lb	a2,0(t1)
    49c8:	0009                	c.nop	2
    49ca:	0100                	addi	s0,sp,128
    49cc:	0505                	addi	a0,a0,1
    49ce:	0200                	addi	s0,sp,256
    49d0:	0304                	addi	s1,sp,384
    49d2:	08097e03          	0x8097e03
    49d6:	0100                	addi	s0,sp,128
    49d8:	0f05                	addi	t5,t5,1
    49da:	0200                	addi	s0,sp,256
    49dc:	0304                	addi	s1,sp,384
    49de:	04090203          	lb	tp,64(s2)
    49e2:	0100                	addi	s0,sp,128
    49e4:	0905                	addi	s2,s2,1
    49e6:	0200                	addi	s0,sp,256
    49e8:	0304                	addi	s1,sp,384
    49ea:	0306                	slli	t1,t1,0x1
    49ec:	0901                	addi	s2,s2,0
    49ee:	0008                	0x8
    49f0:	0501                	addi	a0,a0,0
    49f2:	0402000f          	0x402000f
    49f6:	00030603          	lb	a2,0(t1)
    49fa:	0009                	c.nop	2
    49fc:	0100                	addi	s0,sp,128
    49fe:	0505                	addi	a0,a0,1
    4a00:	0200                	addi	s0,sp,256
    4a02:	0304                	addi	s1,sp,384
    4a04:	04097d03          	0x4097d03
    4a08:	0100                	addi	s0,sp,128
    4a0a:	0f05                	addi	t5,t5,1
    4a0c:	0200                	addi	s0,sp,256
    4a0e:	0304                	addi	s1,sp,384
    4a10:	04090303          	lb	t1,64(s2)
    4a14:	0100                	addi	s0,sp,128
    4a16:	2605                	jal	4d36 <__muldf3+0x212>
    4a18:	0200                	addi	s0,sp,256
    4a1a:	0304                	addi	s1,sp,384
    4a1c:	0306                	slli	t1,t1,0x1
    4a1e:	097d                	addi	s2,s2,31
    4a20:	0008                	0x8
    4a22:	0501                	addi	a0,a0,0
    4a24:	0011                	c.nop	4
    4a26:	0402                	c.slli64	s0
    4a28:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    4a2c:	0000                	unimp
    4a2e:	0501                	addi	a0,a0,0
    4a30:	0005                	c.nop	1
    4a32:	0402                	c.slli64	s0
    4a34:	00030603          	lb	a2,0(t1)
    4a38:	0009                	c.nop	2
    4a3a:	0100                	addi	s0,sp,128
    4a3c:	0105                	addi	sp,sp,1
    4a3e:	04090603          	lb	a2,64(s2)
    4a42:	0100                	addi	s0,sp,128
    4a44:	0505                	addi	a0,a0,1
    4a46:	0306                	slli	t1,t1,0x1
    4a48:	095e                	slli	s2,s2,0x17
    4a4a:	002c                	addi	a1,sp,8
    4a4c:	0301                	addi	t1,t1,0
    4a4e:	0901                	addi	s2,s2,0
    4a50:	0000                	unimp
    4a52:	0501                	addi	a0,a0,0
    4a54:	0900030b          	0x900030b
    4a58:	0000                	unimp
    4a5a:	0501                	addi	a0,a0,0
    4a5c:	061a                	slli	a2,a2,0x6
    4a5e:	00090003          	lb	zero,0(s2)
    4a62:	0100                	addi	s0,sp,128
    4a64:	0b05                	addi	s6,s6,1
    4a66:	04090003          	lb	zero,64(s2)
    4a6a:	0100                	addi	s0,sp,128
    4a6c:	0505                	addi	a0,a0,1
    4a6e:	0306                	slli	t1,t1,0x1
    4a70:	0906                	slli	s2,s2,0x1
    4a72:	0008                	0x8
    4a74:	0301                	addi	t1,t1,0
    4a76:	0902                	c.slli64	s2
    4a78:	0000                	unimp
    4a7a:	0501                	addi	a0,a0,0
    4a7c:	0900030b          	0x900030b
    4a80:	0000                	unimp
    4a82:	0901                	addi	s2,s2,0
    4a84:	0008                	0x8
    4a86:	0100                	addi	s0,sp,128
    4a88:	de01                	beqz	a2,49a0 <__gedf2+0x44>
    4a8a:	0009                	c.nop	2
    4a8c:	0300                	addi	s0,sp,384
    4a8e:	4400                	lw	s0,8(s0)
    4a90:	0000                	unimp
    4a92:	0100                	addi	s0,sp,128
    4a94:	fb01                	bnez	a4,49a4 <__gedf2+0x48>
    4a96:	0d0e                	slli	s10,s10,0x3
    4a98:	0100                	addi	s0,sp,128
    4a9a:	0101                	addi	sp,sp,0
    4a9c:	0001                	nop
    4a9e:	0000                	unimp
    4aa0:	0001                	nop
    4aa2:	0100                	addi	s0,sp,128
    4aa4:	6168732f          	vamoandei64.v	zero,(a6),v22,v6,v0.t
    4aa8:	6572                	flw	fa0,28(sp)
    4aaa:	2f64                	fld	fs1,216(a4)
    4aac:	65726f63          	bltu	tp,s7,510a <__muldf3+0x5e6>
    4ab0:	616d                	addi	sp,sp,240
    4ab2:	6b72                	flw	fs6,28(sp)
    4ab4:	0000                	unimp
    4ab6:	65726f63          	bltu	tp,s7,5114 <__muldf3+0x5f0>
    4aba:	755f 6974 2e6c      	0x2e6c6974755f
    4ac0:	00010063          	beqz	sp,4ac0 <__ledf2+0x80>
    4ac4:	6300                	flw	fs0,0(a4)
    4ac6:	5f65726f          	jal	tp,5c0bc <RAM_SIZE+0x4c0bc>
    4aca:	6f70                	flw	fa2,92(a4)
    4acc:	7472                	flw	fs0,60(sp)
    4ace:	656d                	lui	a0,0x1b
    4ad0:	682e                	flw	fa6,200(sp)
    4ad2:	0100                	addi	s0,sp,128
    4ad4:	0000                	unimp
    4ad6:	0500                	addi	s0,sp,640
    4ad8:	0001                	nop
    4ada:	0205                	addi	tp,tp,1
    4adc:	2648                	fld	fa0,136(a2)
    4ade:	0000                	unimp
    4ae0:	05012b03          	lw	s6,80(sp)
    4ae4:	0305                	addi	t1,t1,1
    4ae6:	0901                	addi	s2,s2,0
    4ae8:	0000                	unimp
    4aea:	0301                	addi	t1,t1,0
    4aec:	0901                	addi	s2,s2,0
    4aee:	0000                	unimp
    4af0:	0501                	addi	a0,a0,0
    4af2:	030d                	addi	t1,t1,3
    4af4:	0020090f          	0x20090f
    4af8:	0501                	addi	a0,a0,0
    4afa:	0614                	addi	a3,sp,768
    4afc:	00090003          	lb	zero,0(s2)
    4b00:	0100                	addi	s0,sp,128
    4b02:	0d05                	addi	s10,s10,1
    4b04:	0306                	slli	t1,t1,0x1
    4b06:	0901                	addi	s2,s2,0
    4b08:	0004                	0x4
    4b0a:	0301                	addi	t1,t1,0
    4b0c:	00040973          	0x40973
    4b10:	0501                	addi	a0,a0,0
    4b12:	0614                	addi	a3,sp,768
    4b14:	00090003          	lb	zero,0(s2)
    4b18:	0100                	addi	s0,sp,128
    4b1a:	0d05                	addi	s10,s10,1
    4b1c:	0306                	slli	t1,t1,0x1
    4b1e:	0901                	addi	s2,s2,0
    4b20:	0004                	0x4
    4b22:	0301                	addi	t1,t1,0
    4b24:	0902                	c.slli64	s2
    4b26:	0004                	0x4
    4b28:	0501                	addi	a0,a0,0
    4b2a:	0614                	addi	a3,sp,768
    4b2c:	00090003          	lb	zero,0(s2)
    4b30:	0100                	addi	s0,sp,128
    4b32:	0d05                	addi	s10,s10,1
    4b34:	0306                	slli	t1,t1,0x1
    4b36:	0901                	addi	s2,s2,0
    4b38:	0004                	0x4
    4b3a:	0301                	addi	t1,t1,0
    4b3c:	0902                	c.slli64	s2
    4b3e:	0004                	0x4
    4b40:	0501                	addi	a0,a0,0
    4b42:	0614                	addi	a3,sp,768
    4b44:	00090003          	lb	zero,0(s2)
    4b48:	0100                	addi	s0,sp,128
    4b4a:	0d05                	addi	s10,s10,1
    4b4c:	0306                	slli	t1,t1,0x1
    4b4e:	0901                	addi	s2,s2,0
    4b50:	0004                	0x4
    4b52:	0301                	addi	t1,t1,0
    4b54:	0902                	c.slli64	s2
    4b56:	0004                	0x4
    4b58:	0501                	addi	a0,a0,0
    4b5a:	0614                	addi	a3,sp,768
    4b5c:	00090003          	lb	zero,0(s2)
    4b60:	0100                	addi	s0,sp,128
    4b62:	0d05                	addi	s10,s10,1
    4b64:	0306                	slli	t1,t1,0x1
    4b66:	0901                	addi	s2,s2,0
    4b68:	0004                	0x4
    4b6a:	0501                	addi	a0,a0,0
    4b6c:	0601                	addi	a2,a2,0
    4b6e:	04097103          	0x4097103
    4b72:	0100                	addi	s0,sp,128
    4b74:	0505                	addi	a0,a0,1
    4b76:	0306                	slli	t1,t1,0x1
    4b78:	00040917          	auipc	s2,0x40
    4b7c:	0501                	addi	a0,a0,0
    4b7e:	0601                	addi	a2,a2,0
    4b80:	00090103          	lb	sp,0(s2) # 44b78 <RAM_SIZE+0x34b78>
    4b84:	0100                	addi	s0,sp,128
    4b86:	0306                	slli	t1,t1,0x1
    4b88:	00e2                	slli	ra,ra,0x18
    4b8a:	0409                	addi	s0,s0,2
    4b8c:	0100                	addi	s0,sp,128
    4b8e:	0505                	addi	a0,a0,1
    4b90:	00090103          	lb	sp,0(s2)
    4b94:	0100                	addi	s0,sp,128
    4b96:	00090203          	lb	tp,0(s2)
    4b9a:	0100                	addi	s0,sp,128
    4b9c:	0105                	addi	sp,sp,1
    4b9e:	0306                	slli	t1,t1,0x1
    4ba0:	097d                	addi	s2,s2,31
    4ba2:	0000                	unimp
    4ba4:	0501                	addi	a0,a0,0
    4ba6:	0611                	addi	a2,a2,4
    4ba8:	08090303          	lb	t1,128(s2)
    4bac:	0100                	addi	s0,sp,128
    4bae:	0306                	slli	t1,t1,0x1
    4bb0:	090e                	slli	s2,s2,0x3
    4bb2:	0000                	unimp
    4bb4:	0501                	addi	a0,a0,0
    4bb6:	0301                	addi	t1,t1,0
    4bb8:	0004096f          	jal	s2,44bb8 <RAM_SIZE+0x34bb8>
    4bbc:	0501                	addi	a0,a0,0
    4bbe:	0311                	addi	t1,t1,4
    4bc0:	0911                	addi	s2,s2,4
    4bc2:	0004                	0x4
    4bc4:	0501                	addi	a0,a0,0
    4bc6:	0609                	addi	a2,a2,2
    4bc8:	04097403          	0x4097403
    4bcc:	0100                	addi	s0,sp,128
    4bce:	0d05                	addi	s10,s10,1
    4bd0:	00090503          	lb	a0,0(s2)
    4bd4:	0100                	addi	s0,sp,128
    4bd6:	2205                	jal	4cf6 <__muldf3+0x1d2>
    4bd8:	0306                	slli	t1,t1,0x1
    4bda:	0000097b          	0x97b
    4bde:	0501                	addi	a0,a0,0
    4be0:	0305                	addi	t1,t1,1
    4be2:	097e                	slli	s2,s2,0x1f
    4be4:	0004                	0x4
    4be6:	0501                	addi	a0,a0,0
    4be8:	030d                	addi	t1,t1,3
    4bea:	0902                	c.slli64	s2
    4bec:	0008                	0x8
    4bee:	0501                	addi	a0,a0,0
    4bf0:	0609                	addi	a2,a2,2
    4bf2:	04090103          	lb	sp,64(s2)
    4bf6:	0100                	addi	s0,sp,128
    4bf8:	0d05                	addi	s10,s10,1
    4bfa:	00090503          	lb	a0,0(s2)
    4bfe:	0100                	addi	s0,sp,128
    4c00:	0905                	addi	s2,s2,1
    4c02:	00090403          	lb	s0,0(s2)
    4c06:	0100                	addi	s0,sp,128
    4c08:	00090103          	lb	sp,0(s2)
    4c0c:	0100                	addi	s0,sp,128
    4c0e:	0d05                	addi	s10,s10,1
    4c10:	00090103          	lb	sp,0(s2)
    4c14:	0100                	addi	s0,sp,128
    4c16:	0505                	addi	a0,a0,1
    4c18:	0306                	slli	t1,t1,0x1
    4c1a:	0972                	slli	s2,s2,0x1c
    4c1c:	0000                	unimp
    4c1e:	0501                	addi	a0,a0,0
    4c20:	0311                	addi	t1,t1,4
    4c22:	090e                	slli	s2,s2,0x3
    4c24:	0004                	0x4
    4c26:	0501                	addi	a0,a0,0
    4c28:	030e                	slli	t1,t1,0x3
    4c2a:	0975                	addi	s2,s2,29
    4c2c:	0004                	0x4
    4c2e:	0501                	addi	a0,a0,0
    4c30:	0609                	addi	a2,a2,2
    4c32:	04090203          	lb	tp,64(s2)
    4c36:	0100                	addi	s0,sp,128
    4c38:	0c05                	addi	s8,s8,1
    4c3a:	0306                	slli	t1,t1,0x1
    4c3c:	0900                	addi	s0,sp,144
    4c3e:	0000                	unimp
    4c40:	0501                	addi	a0,a0,0
    4c42:	0311                	addi	t1,t1,4
    4c44:	0909                	addi	s2,s2,2
    4c46:	0004                	0x4
    4c48:	0501                	addi	a0,a0,0
    4c4a:	0018                	0x18
    4c4c:	0402                	c.slli64	s0
    4c4e:	0602                	c.slli64	a2
    4c50:	08097203          	0x8097203
    4c54:	0100                	addi	s0,sp,128
    4c56:	1105                	addi	sp,sp,-31
    4c58:	0200                	addi	s0,sp,256
    4c5a:	0204                	addi	s1,sp,256
    4c5c:	00090003          	lb	zero,0(s2)
    4c60:	0100                	addi	s0,sp,128
    4c62:	0505                	addi	a0,a0,1
    4c64:	0200                	addi	s0,sp,256
    4c66:	0204                	addi	s1,sp,256
    4c68:	0306                	slli	t1,t1,0x1
    4c6a:	0900                	addi	s0,sp,144
    4c6c:	0000                	unimp
    4c6e:	0601                	addi	a2,a2,0
    4c70:	04091203          	lh	tp,64(s2)
    4c74:	0100                	addi	s0,sp,128
    4c76:	0105                	addi	sp,sp,1
    4c78:	0306                	slli	t1,t1,0x1
    4c7a:	0901                	addi	s2,s2,0
    4c7c:	0000                	unimp
    4c7e:	0601                	addi	a2,a2,0
    4c80:	04090303          	lb	t1,64(s2)
    4c84:	0100                	addi	s0,sp,128
    4c86:	0505                	addi	a0,a0,1
    4c88:	00090103          	lb	sp,0(s2)
    4c8c:	0100                	addi	s0,sp,128
    4c8e:	0105                	addi	sp,sp,1
    4c90:	0306                	slli	t1,t1,0x1
    4c92:	097f                	0x97f
    4c94:	0000                	unimp
    4c96:	0501                	addi	a0,a0,0
    4c98:	0311                	addi	t1,t1,4
    4c9a:	0978                	addi	a4,sp,156
    4c9c:	0004                	0x4
    4c9e:	0501                	addi	a0,a0,0
    4ca0:	0301                	addi	t1,t1,0
    4ca2:	0908                	addi	a0,sp,144
    4ca4:	0004                	0x4
    4ca6:	0501                	addi	a0,a0,0
    4ca8:	0901030b          	0x901030b
    4cac:	0004                	0x4
    4cae:	0501                	addi	a0,a0,0
    4cb0:	0611                	addi	a2,a2,4
    4cb2:	04096903          	0x4096903
    4cb6:	0100                	addi	s0,sp,128
    4cb8:	0b05                	addi	s6,s6,1
    4cba:	0306                	slli	t1,t1,0x1
    4cbc:	00000917          	auipc	s2,0x0
    4cc0:	0501                	addi	a0,a0,0
    4cc2:	0311                	addi	t1,t1,4
    4cc4:	00040977          	0x40977
    4cc8:	0501                	addi	a0,a0,0
    4cca:	0609                	addi	a2,a2,2
    4ccc:	04097403          	0x4097403
    4cd0:	0100                	addi	s0,sp,128
    4cd2:	0d05                	addi	s10,s10,1
    4cd4:	00090503          	lb	a0,0(s2) # 4cbc <__muldf3+0x198>
    4cd8:	0100                	addi	s0,sp,128
    4cda:	2205                	jal	4dfa <__muldf3+0x2d6>
    4cdc:	0306                	slli	t1,t1,0x1
    4cde:	0000097b          	0x97b
    4ce2:	0501                	addi	a0,a0,0
    4ce4:	0305                	addi	t1,t1,1
    4ce6:	097e                	slli	s2,s2,0x1f
    4ce8:	0004                	0x4
    4cea:	0501                	addi	a0,a0,0
    4cec:	030d                	addi	t1,t1,3
    4cee:	090c                	addi	a1,sp,144
    4cf0:	0004                	0x4
    4cf2:	0301                	addi	t1,t1,0
    4cf4:	0976                	slli	s2,s2,0x1d
    4cf6:	0004                	0x4
    4cf8:	0501                	addi	a0,a0,0
    4cfa:	0609                	addi	a2,a2,2
    4cfc:	04090103          	lb	sp,64(s2)
    4d00:	0100                	addi	s0,sp,128
    4d02:	0d05                	addi	s10,s10,1
    4d04:	00090503          	lb	a0,0(s2)
    4d08:	0100                	addi	s0,sp,128
    4d0a:	0905                	addi	s2,s2,1
    4d0c:	00090403          	lb	s0,0(s2)
    4d10:	0100                	addi	s0,sp,128
    4d12:	00090103          	lb	sp,0(s2)
    4d16:	0100                	addi	s0,sp,128
    4d18:	0d05                	addi	s10,s10,1
    4d1a:	00090103          	lb	sp,0(s2)
    4d1e:	0100                	addi	s0,sp,128
    4d20:	0505                	addi	a0,a0,1
    4d22:	0306                	slli	t1,t1,0x1
    4d24:	0972                	slli	s2,s2,0x1c
    4d26:	0000                	unimp
    4d28:	0501                	addi	a0,a0,0
    4d2a:	0311                	addi	t1,t1,4
    4d2c:	090e                	slli	s2,s2,0x3
    4d2e:	0004                	0x4
    4d30:	0501                	addi	a0,a0,0
    4d32:	030e                	slli	t1,t1,0x3
    4d34:	0975                	addi	s2,s2,29
    4d36:	0004                	0x4
    4d38:	0501                	addi	a0,a0,0
    4d3a:	0609                	addi	a2,a2,2
    4d3c:	04090203          	lb	tp,64(s2)
    4d40:	0100                	addi	s0,sp,128
    4d42:	0c05                	addi	s8,s8,1
    4d44:	0306                	slli	t1,t1,0x1
    4d46:	0900                	addi	s0,sp,144
    4d48:	0000                	unimp
    4d4a:	0501                	addi	a0,a0,0
    4d4c:	0311                	addi	t1,t1,4
    4d4e:	0909                	addi	s2,s2,2
    4d50:	0004                	0x4
    4d52:	0501                	addi	a0,a0,0
    4d54:	0618                	addi	a4,sp,768
    4d56:	08097203          	0x8097203
    4d5a:	0100                	addi	s0,sp,128
    4d5c:	1105                	addi	sp,sp,-31
    4d5e:	00090003          	lb	zero,0(s2)
    4d62:	0100                	addi	s0,sp,128
    4d64:	0505                	addi	a0,a0,1
    4d66:	0306                	slli	t1,t1,0x1
    4d68:	0900                	addi	s0,sp,144
    4d6a:	0000                	unimp
    4d6c:	0601                	addi	a2,a2,0
    4d6e:	04091203          	lh	tp,64(s2)
    4d72:	0100                	addi	s0,sp,128
    4d74:	00090603          	lb	a2,0(s2)
    4d78:	0100                	addi	s0,sp,128
    4d7a:	1105                	addi	sp,sp,-31
    4d7c:	0306                	slli	t1,t1,0x1
    4d7e:	0976                	slli	s2,s2,0x1d
    4d80:	0000                	unimp
    4d82:	0501                	addi	a0,a0,0
    4d84:	090a030b          	0x90a030b
    4d88:	0004                	0x4
    4d8a:	0501                	addi	a0,a0,0
    4d8c:	0611                	addi	a2,a2,4
    4d8e:	04096803          	0x4096803
    4d92:	0100                	addi	s0,sp,128
    4d94:	0b05                	addi	s6,s6,1
    4d96:	0306                	slli	t1,t1,0x1
    4d98:	0918                	addi	a4,sp,144
    4d9a:	0000                	unimp
    4d9c:	0501                	addi	a0,a0,0
    4d9e:	0311                	addi	t1,t1,4
    4da0:	0976                	slli	s2,s2,0x1d
    4da2:	0004                	0x4
    4da4:	0501                	addi	a0,a0,0
    4da6:	0609                	addi	a2,a2,2
    4da8:	04097403          	0x4097403
    4dac:	0100                	addi	s0,sp,128
    4dae:	0d05                	addi	s10,s10,1
    4db0:	00090503          	lb	a0,0(s2)
    4db4:	0100                	addi	s0,sp,128
    4db6:	2205                	jal	4ed6 <__muldf3+0x3b2>
    4db8:	0306                	slli	t1,t1,0x1
    4dba:	0000097b          	0x97b
    4dbe:	0501                	addi	a0,a0,0
    4dc0:	0305                	addi	t1,t1,1
    4dc2:	097e                	slli	s2,s2,0x1f
    4dc4:	0004                	0x4
    4dc6:	0501                	addi	a0,a0,0
    4dc8:	030d                	addi	t1,t1,3
    4dca:	0902                	c.slli64	s2
    4dcc:	0008                	0x8
    4dce:	0501                	addi	a0,a0,0
    4dd0:	0609                	addi	a2,a2,2
    4dd2:	04090103          	lb	sp,64(s2)
    4dd6:	0100                	addi	s0,sp,128
    4dd8:	0d05                	addi	s10,s10,1
    4dda:	00090503          	lb	a0,0(s2)
    4dde:	0100                	addi	s0,sp,128
    4de0:	0905                	addi	s2,s2,1
    4de2:	00090403          	lb	s0,0(s2)
    4de6:	0100                	addi	s0,sp,128
    4de8:	00090103          	lb	sp,0(s2)
    4dec:	0100                	addi	s0,sp,128
    4dee:	0d05                	addi	s10,s10,1
    4df0:	00090103          	lb	sp,0(s2)
    4df4:	0100                	addi	s0,sp,128
    4df6:	0505                	addi	a0,a0,1
    4df8:	0306                	slli	t1,t1,0x1
    4dfa:	0972                	slli	s2,s2,0x1c
    4dfc:	0000                	unimp
    4dfe:	0501                	addi	a0,a0,0
    4e00:	0311                	addi	t1,t1,4
    4e02:	090e                	slli	s2,s2,0x3
    4e04:	0004                	0x4
    4e06:	0501                	addi	a0,a0,0
    4e08:	030e                	slli	t1,t1,0x3
    4e0a:	0975                	addi	s2,s2,29
    4e0c:	0004                	0x4
    4e0e:	0501                	addi	a0,a0,0
    4e10:	0609                	addi	a2,a2,2
    4e12:	04090203          	lb	tp,64(s2)
    4e16:	0100                	addi	s0,sp,128
    4e18:	0c05                	addi	s8,s8,1
    4e1a:	0306                	slli	t1,t1,0x1
    4e1c:	0900                	addi	s0,sp,144
    4e1e:	0000                	unimp
    4e20:	0501                	addi	a0,a0,0
    4e22:	0311                	addi	t1,t1,4
    4e24:	0909                	addi	s2,s2,2
    4e26:	0004                	0x4
    4e28:	0501                	addi	a0,a0,0
    4e2a:	0618                	addi	a4,sp,768
    4e2c:	08097203          	0x8097203
    4e30:	0100                	addi	s0,sp,128
    4e32:	1105                	addi	sp,sp,-31
    4e34:	00090003          	lb	zero,0(s2)
    4e38:	0100                	addi	s0,sp,128
    4e3a:	0505                	addi	a0,a0,1
    4e3c:	0306                	slli	t1,t1,0x1
    4e3e:	0900                	addi	s0,sp,144
    4e40:	0000                	unimp
    4e42:	0601                	addi	a2,a2,0
    4e44:	04091203          	lh	tp,64(s2)
    4e48:	0100                	addi	s0,sp,128
    4e4a:	00090703          	lb	a4,0(s2)
    4e4e:	0100                	addi	s0,sp,128
    4e50:	0105                	addi	sp,sp,1
    4e52:	0306                	slli	t1,t1,0x1
    4e54:	0901                	addi	s2,s2,0
    4e56:	0000                	unimp
    4e58:	0601                	addi	a2,a2,0
    4e5a:	04090303          	lb	t1,64(s2)
    4e5e:	0100                	addi	s0,sp,128
    4e60:	0505                	addi	a0,a0,1
    4e62:	00090103          	lb	sp,0(s2)
    4e66:	0100                	addi	s0,sp,128
    4e68:	0105                	addi	sp,sp,1
    4e6a:	0306                	slli	t1,t1,0x1
    4e6c:	097f                	0x97f
    4e6e:	0000                	unimp
    4e70:	0501                	addi	a0,a0,0
    4e72:	030c                	addi	a1,sp,384
    4e74:	0908                	addi	a0,sp,144
    4e76:	0004                	0x4
    4e78:	0501                	addi	a0,a0,0
    4e7a:	0311                	addi	t1,t1,4
    4e7c:	0969                	addi	s2,s2,26
    4e7e:	0004                	0x4
    4e80:	0501                	addi	a0,a0,0
    4e82:	0301                	addi	t1,t1,0
    4e84:	0004090f          	0x4090f
    4e88:	0501                	addi	a0,a0,0
    4e8a:	0605                	addi	a2,a2,1
    4e8c:	04090803          	lb	a6,64(s2)
    4e90:	0100                	addi	s0,sp,128
    4e92:	0c05                	addi	s8,s8,1
    4e94:	0306                	slli	t1,t1,0x1
    4e96:	0900                	addi	s0,sp,144
    4e98:	0000                	unimp
    4e9a:	0501                	addi	a0,a0,0
    4e9c:	0605                	addi	a2,a2,1
    4e9e:	04097203          	0x4097203
    4ea2:	0100                	addi	s0,sp,128
    4ea4:	0b05                	addi	s6,s6,1
    4ea6:	0306                	slli	t1,t1,0x1
    4ea8:	0900                	addi	s0,sp,144
    4eaa:	0000                	unimp
    4eac:	0501                	addi	a0,a0,0
    4eae:	0611                	addi	a2,a2,4
    4eb0:	04096903          	0x4096903
    4eb4:	0100                	addi	s0,sp,128
    4eb6:	0b05                	addi	s6,s6,1
    4eb8:	0306                	slli	t1,t1,0x1
    4eba:	00000917          	auipc	s2,0x0
    4ebe:	0501                	addi	a0,a0,0
    4ec0:	0311                	addi	t1,t1,4
    4ec2:	00040977          	0x40977
    4ec6:	0501                	addi	a0,a0,0
    4ec8:	0609                	addi	a2,a2,2
    4eca:	04097403          	0x4097403
    4ece:	0100                	addi	s0,sp,128
    4ed0:	0d05                	addi	s10,s10,1
    4ed2:	00090503          	lb	a0,0(s2) # 4eba <__muldf3+0x396>
    4ed6:	0100                	addi	s0,sp,128
    4ed8:	2205                	jal	4ff8 <__muldf3+0x4d4>
    4eda:	0306                	slli	t1,t1,0x1
    4edc:	0000097b          	0x97b
    4ee0:	0501                	addi	a0,a0,0
    4ee2:	0305                	addi	t1,t1,1
    4ee4:	097e                	slli	s2,s2,0x1f
    4ee6:	0004                	0x4
    4ee8:	0501                	addi	a0,a0,0
    4eea:	030d                	addi	t1,t1,3
    4eec:	090c                	addi	a1,sp,144
    4eee:	0004                	0x4
    4ef0:	0301                	addi	t1,t1,0
    4ef2:	0976                	slli	s2,s2,0x1d
    4ef4:	0004                	0x4
    4ef6:	0501                	addi	a0,a0,0
    4ef8:	0609                	addi	a2,a2,2
    4efa:	04090103          	lb	sp,64(s2)
    4efe:	0100                	addi	s0,sp,128
    4f00:	0d05                	addi	s10,s10,1
    4f02:	00090503          	lb	a0,0(s2)
    4f06:	0100                	addi	s0,sp,128
    4f08:	0905                	addi	s2,s2,1
    4f0a:	00090403          	lb	s0,0(s2)
    4f0e:	0100                	addi	s0,sp,128
    4f10:	00090103          	lb	sp,0(s2)
    4f14:	0100                	addi	s0,sp,128
    4f16:	0d05                	addi	s10,s10,1
    4f18:	00090103          	lb	sp,0(s2)
    4f1c:	0100                	addi	s0,sp,128
    4f1e:	0505                	addi	a0,a0,1
    4f20:	0306                	slli	t1,t1,0x1
    4f22:	0972                	slli	s2,s2,0x1c
    4f24:	0000                	unimp
    4f26:	0501                	addi	a0,a0,0
    4f28:	0311                	addi	t1,t1,4
    4f2a:	090e                	slli	s2,s2,0x3
    4f2c:	0004                	0x4
    4f2e:	0501                	addi	a0,a0,0
    4f30:	030e                	slli	t1,t1,0x3
    4f32:	0975                	addi	s2,s2,29
    4f34:	0004                	0x4
    4f36:	0501                	addi	a0,a0,0
    4f38:	0609                	addi	a2,a2,2
    4f3a:	04090203          	lb	tp,64(s2)
    4f3e:	0100                	addi	s0,sp,128
    4f40:	0c05                	addi	s8,s8,1
    4f42:	0306                	slli	t1,t1,0x1
    4f44:	0900                	addi	s0,sp,144
    4f46:	0000                	unimp
    4f48:	0501                	addi	a0,a0,0
    4f4a:	0311                	addi	t1,t1,4
    4f4c:	0909                	addi	s2,s2,2
    4f4e:	0004                	0x4
    4f50:	0501                	addi	a0,a0,0
    4f52:	0618                	addi	a4,sp,768
    4f54:	08097203          	0x8097203
    4f58:	0100                	addi	s0,sp,128
    4f5a:	1105                	addi	sp,sp,-31
    4f5c:	00090003          	lb	zero,0(s2)
    4f60:	0100                	addi	s0,sp,128
    4f62:	0505                	addi	a0,a0,1
    4f64:	0306                	slli	t1,t1,0x1
    4f66:	0900                	addi	s0,sp,144
    4f68:	0000                	unimp
    4f6a:	0601                	addi	a2,a2,0
    4f6c:	04091203          	lh	tp,64(s2)
    4f70:	0100                	addi	s0,sp,128
    4f72:	00090603          	lb	a2,0(s2)
    4f76:	0100                	addi	s0,sp,128
    4f78:	1105                	addi	sp,sp,-31
    4f7a:	0306                	slli	t1,t1,0x1
    4f7c:	0976                	slli	s2,s2,0x1d
    4f7e:	0000                	unimp
    4f80:	0501                	addi	a0,a0,0
    4f82:	090a030b          	0x90a030b
    4f86:	0004                	0x4
    4f88:	0501                	addi	a0,a0,0
    4f8a:	0611                	addi	a2,a2,4
    4f8c:	04096803          	0x4096803
    4f90:	0100                	addi	s0,sp,128
    4f92:	0b05                	addi	s6,s6,1
    4f94:	0306                	slli	t1,t1,0x1
    4f96:	0918                	addi	a4,sp,144
    4f98:	0000                	unimp
    4f9a:	0501                	addi	a0,a0,0
    4f9c:	0311                	addi	t1,t1,4
    4f9e:	0976                	slli	s2,s2,0x1d
    4fa0:	0004                	0x4
    4fa2:	0501                	addi	a0,a0,0
    4fa4:	0609                	addi	a2,a2,2
    4fa6:	04097403          	0x4097403
    4faa:	0100                	addi	s0,sp,128
    4fac:	0d05                	addi	s10,s10,1
    4fae:	00090503          	lb	a0,0(s2)
    4fb2:	0100                	addi	s0,sp,128
    4fb4:	2205                	jal	50d4 <__muldf3+0x5b0>
    4fb6:	0306                	slli	t1,t1,0x1
    4fb8:	0000097b          	0x97b
    4fbc:	0501                	addi	a0,a0,0
    4fbe:	0305                	addi	t1,t1,1
    4fc0:	097e                	slli	s2,s2,0x1f
    4fc2:	0004                	0x4
    4fc4:	0501                	addi	a0,a0,0
    4fc6:	030d                	addi	t1,t1,3
    4fc8:	0902                	c.slli64	s2
    4fca:	0008                	0x8
    4fcc:	0501                	addi	a0,a0,0
    4fce:	0609                	addi	a2,a2,2
    4fd0:	04090103          	lb	sp,64(s2)
    4fd4:	0100                	addi	s0,sp,128
    4fd6:	0d05                	addi	s10,s10,1
    4fd8:	00090503          	lb	a0,0(s2)
    4fdc:	0100                	addi	s0,sp,128
    4fde:	0905                	addi	s2,s2,1
    4fe0:	00090403          	lb	s0,0(s2)
    4fe4:	0100                	addi	s0,sp,128
    4fe6:	00090103          	lb	sp,0(s2)
    4fea:	0100                	addi	s0,sp,128
    4fec:	0d05                	addi	s10,s10,1
    4fee:	00090103          	lb	sp,0(s2)
    4ff2:	0100                	addi	s0,sp,128
    4ff4:	0505                	addi	a0,a0,1
    4ff6:	0306                	slli	t1,t1,0x1
    4ff8:	0972                	slli	s2,s2,0x1c
    4ffa:	0000                	unimp
    4ffc:	0501                	addi	a0,a0,0
    4ffe:	0311                	addi	t1,t1,4
    5000:	090e                	slli	s2,s2,0x3
    5002:	0004                	0x4
    5004:	0501                	addi	a0,a0,0
    5006:	030e                	slli	t1,t1,0x3
    5008:	0975                	addi	s2,s2,29
    500a:	0004                	0x4
    500c:	0501                	addi	a0,a0,0
    500e:	0609                	addi	a2,a2,2
    5010:	04090203          	lb	tp,64(s2)
    5014:	0100                	addi	s0,sp,128
    5016:	0c05                	addi	s8,s8,1
    5018:	0306                	slli	t1,t1,0x1
    501a:	0900                	addi	s0,sp,144
    501c:	0000                	unimp
    501e:	0501                	addi	a0,a0,0
    5020:	0311                	addi	t1,t1,4
    5022:	0909                	addi	s2,s2,2
    5024:	0004                	0x4
    5026:	0501                	addi	a0,a0,0
    5028:	0618                	addi	a4,sp,768
    502a:	08097203          	0x8097203
    502e:	0100                	addi	s0,sp,128
    5030:	1105                	addi	sp,sp,-31
    5032:	00090003          	lb	zero,0(s2)
    5036:	0100                	addi	s0,sp,128
    5038:	0505                	addi	a0,a0,1
    503a:	0306                	slli	t1,t1,0x1
    503c:	0900                	addi	s0,sp,144
    503e:	0000                	unimp
    5040:	0601                	addi	a2,a2,0
    5042:	04091203          	lh	tp,64(s2)
    5046:	0100                	addi	s0,sp,128
    5048:	00090703          	lb	a4,0(s2)
    504c:	0100                	addi	s0,sp,128
    504e:	00090603          	lb	a2,0(s2)
    5052:	0100                	addi	s0,sp,128
    5054:	2105                	jal	5474 <memcpy+0x5c>
    5056:	0306                	slli	t1,t1,0x1
    5058:	0900                	addi	s0,sp,144
    505a:	0000                	unimp
    505c:	0501                	addi	a0,a0,0
    505e:	0605                	addi	a2,a2,1
    5060:	04090603          	lb	a2,64(s2)
    5064:	0100                	addi	s0,sp,128
    5066:	1105                	addi	sp,sp,-31
    5068:	0306                	slli	t1,t1,0x1
    506a:	0969                	addi	s2,s2,26
    506c:	0000                	unimp
    506e:	0501                	addi	a0,a0,0
    5070:	030c                	addi	a1,sp,384
    5072:	00040917          	auipc	s2,0x40
    5076:	0501                	addi	a0,a0,0
    5078:	0605                	addi	a2,a2,1
    507a:	04097203          	0x4097203
    507e:	0100                	addi	s0,sp,128
    5080:	0b05                	addi	s6,s6,1
    5082:	0306                	slli	t1,t1,0x1
    5084:	0900                	addi	s0,sp,144
    5086:	0000                	unimp
    5088:	0501                	addi	a0,a0,0
    508a:	0611                	addi	a2,a2,4
    508c:	08096903          	0x8096903
    5090:	0100                	addi	s0,sp,128
    5092:	0306                	slli	t1,t1,0x1
    5094:	090e                	slli	s2,s2,0x3
    5096:	0000                	unimp
    5098:	0501                	addi	a0,a0,0
    509a:	0609                	addi	a2,a2,2
    509c:	04097403          	0x4097403
    50a0:	0100                	addi	s0,sp,128
    50a2:	0d05                	addi	s10,s10,1
    50a4:	00090503          	lb	a0,0(s2) # 45072 <RAM_SIZE+0x35072>
    50a8:	0100                	addi	s0,sp,128
    50aa:	2205                	jal	51ca <__fixdfsi+0x1a>
    50ac:	0306                	slli	t1,t1,0x1
    50ae:	0000097b          	0x97b
    50b2:	0501                	addi	a0,a0,0
    50b4:	0305                	addi	t1,t1,1
    50b6:	097e                	slli	s2,s2,0x1f
    50b8:	0004                	0x4
    50ba:	0501                	addi	a0,a0,0
    50bc:	030d                	addi	t1,t1,3
    50be:	0902                	c.slli64	s2
    50c0:	0008                	0x8
    50c2:	0501                	addi	a0,a0,0
    50c4:	0609                	addi	a2,a2,2
    50c6:	04090103          	lb	sp,64(s2)
    50ca:	0100                	addi	s0,sp,128
    50cc:	0d05                	addi	s10,s10,1
    50ce:	00090503          	lb	a0,0(s2)
    50d2:	0100                	addi	s0,sp,128
    50d4:	0905                	addi	s2,s2,1
    50d6:	00090403          	lb	s0,0(s2)
    50da:	0100                	addi	s0,sp,128
    50dc:	00090103          	lb	sp,0(s2)
    50e0:	0100                	addi	s0,sp,128
    50e2:	0d05                	addi	s10,s10,1
    50e4:	00090103          	lb	sp,0(s2)
    50e8:	0100                	addi	s0,sp,128
    50ea:	0505                	addi	a0,a0,1
    50ec:	0306                	slli	t1,t1,0x1
    50ee:	0972                	slli	s2,s2,0x1c
    50f0:	0000                	unimp
    50f2:	0501                	addi	a0,a0,0
    50f4:	0311                	addi	t1,t1,4
    50f6:	090e                	slli	s2,s2,0x3
    50f8:	0004                	0x4
    50fa:	0501                	addi	a0,a0,0
    50fc:	030e                	slli	t1,t1,0x3
    50fe:	0975                	addi	s2,s2,29
    5100:	0004                	0x4
    5102:	0501                	addi	a0,a0,0
    5104:	0609                	addi	a2,a2,2
    5106:	04090203          	lb	tp,64(s2)
    510a:	0100                	addi	s0,sp,128
    510c:	0c05                	addi	s8,s8,1
    510e:	0306                	slli	t1,t1,0x1
    5110:	0900                	addi	s0,sp,144
    5112:	0000                	unimp
    5114:	0501                	addi	a0,a0,0
    5116:	0311                	addi	t1,t1,4
    5118:	0909                	addi	s2,s2,2
    511a:	0004                	0x4
    511c:	0501                	addi	a0,a0,0
    511e:	0618                	addi	a4,sp,768
    5120:	08097203          	0x8097203
    5124:	0100                	addi	s0,sp,128
    5126:	1105                	addi	sp,sp,-31
    5128:	00090003          	lb	zero,0(s2)
    512c:	0100                	addi	s0,sp,128
    512e:	0505                	addi	a0,a0,1
    5130:	0306                	slli	t1,t1,0x1
    5132:	0900                	addi	s0,sp,144
    5134:	0000                	unimp
    5136:	0601                	addi	a2,a2,0
    5138:	04091203          	lh	tp,64(s2)
    513c:	0100                	addi	s0,sp,128
    513e:	00090603          	lb	a2,0(s2)
    5142:	0100                	addi	s0,sp,128
    5144:	1105                	addi	sp,sp,-31
    5146:	0306                	slli	t1,t1,0x1
    5148:	0976                	slli	s2,s2,0x1d
    514a:	0000                	unimp
    514c:	0501                	addi	a0,a0,0
    514e:	090a030b          	0x90a030b
    5152:	0004                	0x4
    5154:	0501                	addi	a0,a0,0
    5156:	0611                	addi	a2,a2,4
    5158:	04096803          	0x4096803
    515c:	0100                	addi	s0,sp,128
    515e:	0b05                	addi	s6,s6,1
    5160:	0306                	slli	t1,t1,0x1
    5162:	0918                	addi	a4,sp,144
    5164:	0000                	unimp
    5166:	0501                	addi	a0,a0,0
    5168:	0311                	addi	t1,t1,4
    516a:	0976                	slli	s2,s2,0x1d
    516c:	0004                	0x4
    516e:	0501                	addi	a0,a0,0
    5170:	0609                	addi	a2,a2,2
    5172:	04097403          	0x4097403
    5176:	0100                	addi	s0,sp,128
    5178:	0d05                	addi	s10,s10,1
    517a:	00090503          	lb	a0,0(s2)
    517e:	0100                	addi	s0,sp,128
    5180:	2205                	jal	52a0 <__udivsi3+0x44>
    5182:	0306                	slli	t1,t1,0x1
    5184:	0000097b          	0x97b
    5188:	0501                	addi	a0,a0,0
    518a:	0305                	addi	t1,t1,1
    518c:	097e                	slli	s2,s2,0x1f
    518e:	0004                	0x4
    5190:	0501                	addi	a0,a0,0
    5192:	030d                	addi	t1,t1,3
    5194:	0902                	c.slli64	s2
    5196:	0008                	0x8
    5198:	0501                	addi	a0,a0,0
    519a:	0609                	addi	a2,a2,2
    519c:	04090103          	lb	sp,64(s2)
    51a0:	0100                	addi	s0,sp,128
    51a2:	0d05                	addi	s10,s10,1
    51a4:	00090503          	lb	a0,0(s2)
    51a8:	0100                	addi	s0,sp,128
    51aa:	0905                	addi	s2,s2,1
    51ac:	00090403          	lb	s0,0(s2)
    51b0:	0100                	addi	s0,sp,128
    51b2:	00090103          	lb	sp,0(s2)
    51b6:	0100                	addi	s0,sp,128
    51b8:	0d05                	addi	s10,s10,1
    51ba:	00090103          	lb	sp,0(s2)
    51be:	0100                	addi	s0,sp,128
    51c0:	0505                	addi	a0,a0,1
    51c2:	0306                	slli	t1,t1,0x1
    51c4:	0972                	slli	s2,s2,0x1c
    51c6:	0000                	unimp
    51c8:	0501                	addi	a0,a0,0
    51ca:	0311                	addi	t1,t1,4
    51cc:	090e                	slli	s2,s2,0x3
    51ce:	0004                	0x4
    51d0:	0501                	addi	a0,a0,0
    51d2:	030e                	slli	t1,t1,0x3
    51d4:	0975                	addi	s2,s2,29
    51d6:	0004                	0x4
    51d8:	0501                	addi	a0,a0,0
    51da:	0609                	addi	a2,a2,2
    51dc:	04090203          	lb	tp,64(s2)
    51e0:	0100                	addi	s0,sp,128
    51e2:	0c05                	addi	s8,s8,1
    51e4:	0306                	slli	t1,t1,0x1
    51e6:	0900                	addi	s0,sp,144
    51e8:	0000                	unimp
    51ea:	0501                	addi	a0,a0,0
    51ec:	0311                	addi	t1,t1,4
    51ee:	0909                	addi	s2,s2,2
    51f0:	0004                	0x4
    51f2:	0501                	addi	a0,a0,0
    51f4:	0618                	addi	a4,sp,768
    51f6:	08097203          	0x8097203
    51fa:	0100                	addi	s0,sp,128
    51fc:	1105                	addi	sp,sp,-31
    51fe:	00090003          	lb	zero,0(s2)
    5202:	0100                	addi	s0,sp,128
    5204:	0505                	addi	a0,a0,1
    5206:	0306                	slli	t1,t1,0x1
    5208:	0900                	addi	s0,sp,144
    520a:	0000                	unimp
    520c:	0601                	addi	a2,a2,0
    520e:	04091203          	lh	tp,64(s2)
    5212:	0100                	addi	s0,sp,128
    5214:	00090703          	lb	a4,0(s2)
    5218:	0100                	addi	s0,sp,128
    521a:	00090703          	lb	a4,0(s2)
    521e:	0100                	addi	s0,sp,128
    5220:	0105                	addi	sp,sp,1
    5222:	0306                	slli	t1,t1,0x1
    5224:	0901                	addi	s2,s2,0
    5226:	0000                	unimp
    5228:	0601                	addi	a2,a2,0
    522a:	04090303          	lb	t1,64(s2)
    522e:	0100                	addi	s0,sp,128
    5230:	0505                	addi	a0,a0,1
    5232:	00090103          	lb	sp,0(s2)
    5236:	0100                	addi	s0,sp,128
    5238:	0105                	addi	sp,sp,1
    523a:	0306                	slli	t1,t1,0x1
    523c:	097f                	0x97f
    523e:	0000                	unimp
    5240:	0501                	addi	a0,a0,0
    5242:	030c                	addi	a1,sp,384
    5244:	0901                	addi	s2,s2,0
    5246:	0004                	0x4
    5248:	0501                	addi	a0,a0,0
    524a:	0311                	addi	t1,t1,4
    524c:	0969                	addi	s2,s2,26
    524e:	0004                	0x4
    5250:	0501                	addi	a0,a0,0
    5252:	0301                	addi	t1,t1,0
    5254:	0916                	slli	s2,s2,0x5
    5256:	0004                	0x4
    5258:	0501                	addi	a0,a0,0
    525a:	030c                	addi	a1,sp,384
    525c:	0901                	addi	s2,s2,0
    525e:	0004                	0x4
    5260:	0501                	addi	a0,a0,0
    5262:	0605                	addi	a2,a2,1
    5264:	04097203          	0x4097203
    5268:	0100                	addi	s0,sp,128
    526a:	0b05                	addi	s6,s6,1
    526c:	0306                	slli	t1,t1,0x1
    526e:	0900                	addi	s0,sp,144
    5270:	0000                	unimp
    5272:	0501                	addi	a0,a0,0
    5274:	0611                	addi	a2,a2,4
    5276:	04096903          	0x4096903
    527a:	0100                	addi	s0,sp,128
    527c:	0b05                	addi	s6,s6,1
    527e:	0306                	slli	t1,t1,0x1
    5280:	00000917          	auipc	s2,0x0
    5284:	0501                	addi	a0,a0,0
    5286:	0311                	addi	t1,t1,4
    5288:	00040977          	0x40977
    528c:	0501                	addi	a0,a0,0
    528e:	0609                	addi	a2,a2,2
    5290:	04097403          	0x4097403
    5294:	0100                	addi	s0,sp,128
    5296:	0d05                	addi	s10,s10,1
    5298:	00090503          	lb	a0,0(s2) # 5280 <__udivsi3+0x24>
    529c:	0100                	addi	s0,sp,128
    529e:	2205                	jal	53be <__libc_init_array+0x3a>
    52a0:	0306                	slli	t1,t1,0x1
    52a2:	0000097b          	0x97b
    52a6:	0501                	addi	a0,a0,0
    52a8:	0305                	addi	t1,t1,1
    52aa:	097e                	slli	s2,s2,0x1f
    52ac:	0004                	0x4
    52ae:	0501                	addi	a0,a0,0
    52b0:	030d                	addi	t1,t1,3
    52b2:	090c                	addi	a1,sp,144
    52b4:	0004                	0x4
    52b6:	0301                	addi	t1,t1,0
    52b8:	0976                	slli	s2,s2,0x1d
    52ba:	0004                	0x4
    52bc:	0501                	addi	a0,a0,0
    52be:	0609                	addi	a2,a2,2
    52c0:	04090103          	lb	sp,64(s2)
    52c4:	0100                	addi	s0,sp,128
    52c6:	0d05                	addi	s10,s10,1
    52c8:	00090503          	lb	a0,0(s2)
    52cc:	0100                	addi	s0,sp,128
    52ce:	0905                	addi	s2,s2,1
    52d0:	00090403          	lb	s0,0(s2)
    52d4:	0100                	addi	s0,sp,128
    52d6:	00090103          	lb	sp,0(s2)
    52da:	0100                	addi	s0,sp,128
    52dc:	0d05                	addi	s10,s10,1
    52de:	00090103          	lb	sp,0(s2)
    52e2:	0100                	addi	s0,sp,128
    52e4:	0505                	addi	a0,a0,1
    52e6:	0306                	slli	t1,t1,0x1
    52e8:	0972                	slli	s2,s2,0x1c
    52ea:	0000                	unimp
    52ec:	0501                	addi	a0,a0,0
    52ee:	0311                	addi	t1,t1,4
    52f0:	090e                	slli	s2,s2,0x3
    52f2:	0004                	0x4
    52f4:	0501                	addi	a0,a0,0
    52f6:	030e                	slli	t1,t1,0x3
    52f8:	0975                	addi	s2,s2,29
    52fa:	0004                	0x4
    52fc:	0501                	addi	a0,a0,0
    52fe:	0609                	addi	a2,a2,2
    5300:	04090203          	lb	tp,64(s2)
    5304:	0100                	addi	s0,sp,128
    5306:	0c05                	addi	s8,s8,1
    5308:	0306                	slli	t1,t1,0x1
    530a:	0900                	addi	s0,sp,144
    530c:	0000                	unimp
    530e:	0501                	addi	a0,a0,0
    5310:	0311                	addi	t1,t1,4
    5312:	0909                	addi	s2,s2,2
    5314:	0004                	0x4
    5316:	0501                	addi	a0,a0,0
    5318:	0618                	addi	a4,sp,768
    531a:	08097203          	0x8097203
    531e:	0100                	addi	s0,sp,128
    5320:	1105                	addi	sp,sp,-31
    5322:	00090003          	lb	zero,0(s2)
    5326:	0100                	addi	s0,sp,128
    5328:	0505                	addi	a0,a0,1
    532a:	0306                	slli	t1,t1,0x1
    532c:	0900                	addi	s0,sp,144
    532e:	0000                	unimp
    5330:	0601                	addi	a2,a2,0
    5332:	04091203          	lh	tp,64(s2)
    5336:	0100                	addi	s0,sp,128
    5338:	00090603          	lb	a2,0(s2)
    533c:	0100                	addi	s0,sp,128
    533e:	1105                	addi	sp,sp,-31
    5340:	0306                	slli	t1,t1,0x1
    5342:	0976                	slli	s2,s2,0x1d
    5344:	0000                	unimp
    5346:	0501                	addi	a0,a0,0
    5348:	090a030b          	0x90a030b
    534c:	0004                	0x4
    534e:	0501                	addi	a0,a0,0
    5350:	0611                	addi	a2,a2,4
    5352:	04096803          	0x4096803
    5356:	0100                	addi	s0,sp,128
    5358:	0b05                	addi	s6,s6,1
    535a:	0306                	slli	t1,t1,0x1
    535c:	0918                	addi	a4,sp,144
    535e:	0000                	unimp
    5360:	0501                	addi	a0,a0,0
    5362:	0311                	addi	t1,t1,4
    5364:	0976                	slli	s2,s2,0x1d
    5366:	0004                	0x4
    5368:	0501                	addi	a0,a0,0
    536a:	0609                	addi	a2,a2,2
    536c:	04097403          	0x4097403
    5370:	0100                	addi	s0,sp,128
    5372:	0d05                	addi	s10,s10,1
    5374:	00090503          	lb	a0,0(s2)
    5378:	0100                	addi	s0,sp,128
    537a:	2205                	jal	549a <memcpy+0x82>
    537c:	0306                	slli	t1,t1,0x1
    537e:	0000097b          	0x97b
    5382:	0501                	addi	a0,a0,0
    5384:	0305                	addi	t1,t1,1
    5386:	097e                	slli	s2,s2,0x1f
    5388:	0004                	0x4
    538a:	0501                	addi	a0,a0,0
    538c:	030d                	addi	t1,t1,3
    538e:	0902                	c.slli64	s2
    5390:	0008                	0x8
    5392:	0501                	addi	a0,a0,0
    5394:	0609                	addi	a2,a2,2
    5396:	04090103          	lb	sp,64(s2)
    539a:	0100                	addi	s0,sp,128
    539c:	0d05                	addi	s10,s10,1
    539e:	00090503          	lb	a0,0(s2)
    53a2:	0100                	addi	s0,sp,128
    53a4:	0905                	addi	s2,s2,1
    53a6:	00090403          	lb	s0,0(s2)
    53aa:	0100                	addi	s0,sp,128
    53ac:	00090103          	lb	sp,0(s2)
    53b0:	0100                	addi	s0,sp,128
    53b2:	0d05                	addi	s10,s10,1
    53b4:	00090103          	lb	sp,0(s2)
    53b8:	0100                	addi	s0,sp,128
    53ba:	0505                	addi	a0,a0,1
    53bc:	0306                	slli	t1,t1,0x1
    53be:	0972                	slli	s2,s2,0x1c
    53c0:	0000                	unimp
    53c2:	0501                	addi	a0,a0,0
    53c4:	0311                	addi	t1,t1,4
    53c6:	090e                	slli	s2,s2,0x3
    53c8:	0004                	0x4
    53ca:	0501                	addi	a0,a0,0
    53cc:	030e                	slli	t1,t1,0x3
    53ce:	0975                	addi	s2,s2,29
    53d0:	0004                	0x4
    53d2:	0501                	addi	a0,a0,0
    53d4:	0609                	addi	a2,a2,2
    53d6:	04090203          	lb	tp,64(s2)
    53da:	0100                	addi	s0,sp,128
    53dc:	0c05                	addi	s8,s8,1
    53de:	0306                	slli	t1,t1,0x1
    53e0:	0900                	addi	s0,sp,144
    53e2:	0000                	unimp
    53e4:	0501                	addi	a0,a0,0
    53e6:	0311                	addi	t1,t1,4
    53e8:	0909                	addi	s2,s2,2
    53ea:	0004                	0x4
    53ec:	0501                	addi	a0,a0,0
    53ee:	0618                	addi	a4,sp,768
    53f0:	08097203          	0x8097203
    53f4:	0100                	addi	s0,sp,128
    53f6:	1105                	addi	sp,sp,-31
    53f8:	00090003          	lb	zero,0(s2)
    53fc:	0100                	addi	s0,sp,128
    53fe:	0505                	addi	a0,a0,1
    5400:	0306                	slli	t1,t1,0x1
    5402:	0900                	addi	s0,sp,144
    5404:	0000                	unimp
    5406:	0601                	addi	a2,a2,0
    5408:	04091203          	lh	tp,64(s2)
    540c:	0100                	addi	s0,sp,128
    540e:	00090703          	lb	a4,0(s2)
    5412:	0100                	addi	s0,sp,128
    5414:	0105                	addi	sp,sp,1
    5416:	0306                	slli	t1,t1,0x1
    5418:	090d                	addi	s2,s2,3
    541a:	0000                	unimp
    541c:	0601                	addi	a2,a2,0
    541e:	04090403          	lb	s0,64(s2)
    5422:	0100                	addi	s0,sp,128
    5424:	0505                	addi	a0,a0,1
    5426:	00090103          	lb	sp,0(s2)
    542a:	0100                	addi	s0,sp,128
    542c:	00090103          	lb	sp,0(s2)
    5430:	0100                	addi	s0,sp,128
    5432:	00090503          	lb	a0,0(s2)
    5436:	0100                	addi	s0,sp,128
    5438:	00090503          	lb	a0,0(s2)
    543c:	0100                	addi	s0,sp,128
    543e:	00090503          	lb	a0,0(s2)
    5442:	0100                	addi	s0,sp,128
    5444:	00090503          	lb	a0,0(s2)
    5448:	0100                	addi	s0,sp,128
    544a:	00090503          	lb	a0,0(s2)
    544e:	0100                	addi	s0,sp,128
    5450:	00090603          	lb	a2,0(s2)
    5454:	0100                	addi	s0,sp,128
    5456:	00090403          	lb	s0,0(s2)
    545a:	0100                	addi	s0,sp,128
    545c:	0105                	addi	sp,sp,1
    545e:	0306                	slli	t1,t1,0x1
    5460:	0901                	addi	s2,s2,0
    5462:	0000                	unimp
    5464:	0901                	addi	s2,s2,0
    5466:	0008                	0x8
    5468:	0100                	addi	s0,sp,128
    546a:	2801                	jal	547a <memcpy+0x62>
    546c:	0006                	c.slli	zero,0x1
    546e:	0300                	addi	s0,sp,384
    5470:	9800                	0x9800
    5472:	0000                	unimp
    5474:	0100                	addi	s0,sp,128
    5476:	fb01                	bnez	a4,5386 <__libc_init_array+0x2>
    5478:	0d0e                	slli	s10,s10,0x3
    547a:	0100                	addi	s0,sp,128
    547c:	0101                	addi	sp,sp,0
    547e:	0001                	nop
    5480:	0000                	unimp
    5482:	0001                	nop
    5484:	0100                	addi	s0,sp,128
    5486:	6168732f          	vamoandei64.v	zero,(a6),v22,v6,v0.t
    548a:	6572                	flw	fa0,28(sp)
    548c:	2f64                	fld	fs1,216(a4)
    548e:	65726f63          	bltu	tp,s7,5aec <__subdf3+0x7c>
    5492:	616d                	addi	sp,sp,240
    5494:	6b72                	flw	fs6,28(sp)
    5496:	2f00                	fld	fs0,24(a4)
    5498:	6972                	flw	fs2,28(sp)
    549a:	36766373          	csrrsi	t1,0x367,12
    549e:	2d34                	fld	fa3,88(a0)
    54a0:	6e75                	lui	t3,0x1d
    54a2:	776f6e6b          	0x776f6e6b
    54a6:	2d6e                	fld	fs10,216(sp)
    54a8:	6c65                	lui	s8,0x19
    54aa:	2d66                	fld	fs10,88(sp)
    54ac:	6f74                	flw	fa3,92(a4)
    54ae:	68636c6f          	jal	s8,3bb34 <RAM_SIZE+0x2bb34>
    54b2:	6961                	lui	s2,0x18
    54b4:	2d6e                	fld	fs10,216(sp)
    54b6:	3031                	jal	4cc2 <__muldf3+0x19e>
    54b8:	322e                	fld	ft4,232(sp)
    54ba:	302e                	fld	ft0,232(sp)
    54bc:	322d                	jal	4de6 <__muldf3+0x2c2>
    54be:	3230                	fld	fa2,96(a2)
    54c0:	2e30                	fld	fa2,88(a2)
    54c2:	3231                	jal	4dce <__muldf3+0x2aa>
    54c4:	382e                	fld	fa6,232(sp)
    54c6:	782d                	lui	a6,0xfffeb
    54c8:	3638                	fld	fa4,104(a2)
    54ca:	365f 2d34 696c      	0x696c2d34365f
    54d0:	756e                	flw	fa0,248(sp)
    54d2:	2d78                	fld	fa4,216(a0)
    54d4:	746e6563          	bltu	t3,t1,5c1e <__subdf3+0x1ae>
    54d8:	2f36736f          	jal	t1,6cfca <RAM_SIZE+0x5cfca>
    54dc:	6972                	flw	fs2,28(sp)
    54de:	36766373          	csrrsi	t1,0x367,12
    54e2:	2d34                	fld	fa3,88(a0)
    54e4:	6e75                	lui	t3,0x1d
    54e6:	776f6e6b          	0x776f6e6b
    54ea:	2d6e                	fld	fs10,216(sp)
    54ec:	6c65                	lui	s8,0x19
    54ee:	2f66                	fld	ft10,88(sp)
    54f0:	6e69                	lui	t3,0x1a
    54f2:	64756c63          	bltu	a0,t2,5b4a <__subdf3+0xda>
    54f6:	0065                	c.nop	25
    54f8:	6300                	flw	fs0,0(a4)
    54fa:	7476                	flw	fs0,124(sp)
    54fc:	632e                	flw	ft6,200(sp)
    54fe:	0100                	addi	s0,sp,128
    5500:	0000                	unimp
    5502:	616d                	addi	sp,sp,240
    5504:	6874                	flw	fa3,84(s0)
    5506:	682e                	flw	fa6,200(sp)
    5508:	0200                	addi	s0,sp,256
    550a:	0000                	unimp
    550c:	0500                	addi	s0,sp,640
    550e:	0001                	nop
    5510:	0205                	addi	tp,tp,1
    5512:	2900                	fld	fs0,16(a0)
    5514:	0000                	unimp
    5516:	05011503          	lh	a0,80(sp)
    551a:	0305                	addi	t1,t1,1
    551c:	0901                	addi	s2,s2,0
    551e:	0000                	unimp
    5520:	0301                	addi	t1,t1,0
    5522:	0901                	addi	s2,s2,0
    5524:	0000                	unimp
    5526:	0301                	addi	t1,t1,0
    5528:	0901                	addi	s2,s2,0
    552a:	0000                	unimp
    552c:	0301                	addi	t1,t1,0
    552e:	0902                	c.slli64	s2
    5530:	0000                	unimp
    5532:	0501                	addi	a0,a0,0
    5534:	0601                	addi	a2,a2,0
    5536:	00097b03          	0x97b03
    553a:	0100                	addi	s0,sp,128
    553c:	3c090003          	lb	zero,960(s2) # 183c0 <RAM_SIZE+0x83c0>
    5540:	0100                	addi	s0,sp,128
    5542:	0505                	addi	a0,a0,1
    5544:	0306                	slli	t1,t1,0x1
    5546:	0909                	addi	s2,s2,2
    5548:	001c                	0x1c
    554a:	0301                	addi	t1,t1,0
    554c:	0901                	addi	s2,s2,0
    554e:	0000                	unimp
    5550:	0301                	addi	t1,t1,0
    5552:	0901                	addi	s2,s2,0
    5554:	0000                	unimp
    5556:	0301                	addi	t1,t1,0
    5558:	0901                	addi	s2,s2,0
    555a:	0000                	unimp
    555c:	0501                	addi	a0,a0,0
    555e:	0608                	addi	a0,sp,768
    5560:	04090003          	lb	zero,64(s2)
    5564:	0100                	addi	s0,sp,128
    5566:	0b05                	addi	s6,s6,1
    5568:	1c097e03          	0x1c097e03
    556c:	0100                	addi	s0,sp,128
    556e:	0505                	addi	a0,a0,1
    5570:	0306                	slli	t1,t1,0x1
    5572:	00040907          	vle8.v	v18,(s0),v0.t
    5576:	0501                	addi	a0,a0,0
    5578:	0003060b          	0x3060b
    557c:	0009                	c.nop	2
    557e:	0100                	addi	s0,sp,128
    5580:	0c05                	addi	s8,s8,1
    5582:	10090303          	lb	t1,256(s2)
    5586:	0100                	addi	s0,sp,128
    5588:	0b05                	addi	s6,s6,1
    558a:	08097d03          	0x8097d03
    558e:	0100                	addi	s0,sp,128
    5590:	0805                	addi	a6,a6,1
    5592:	04090303          	lb	t1,64(s2)
    5596:	0100                	addi	s0,sp,128
    5598:	0b05                	addi	s6,s6,1
    559a:	08097d03          	0x8097d03
    559e:	0100                	addi	s0,sp,128
    55a0:	0805                	addi	a6,a6,1
    55a2:	04090303          	lb	t1,64(s2)
    55a6:	0100                	addi	s0,sp,128
    55a8:	0505                	addi	a0,a0,1
    55aa:	0306                	slli	t1,t1,0x1
    55ac:	097e                	slli	s2,s2,0x1f
    55ae:	0004                	0x4
    55b0:	0501                	addi	a0,a0,0
    55b2:	0608                	addi	a0,sp,768
    55b4:	00090203          	lb	tp,0(s2)
    55b8:	0100                	addi	s0,sp,128
    55ba:	0905                	addi	s2,s2,1
    55bc:	08097e03          	0x8097e03
    55c0:	0100                	addi	s0,sp,128
    55c2:	0505                	addi	a0,a0,1
    55c4:	0306                	slli	t1,t1,0x1
    55c6:	0902                	c.slli64	s2
    55c8:	0004                	0x4
    55ca:	0501                	addi	a0,a0,0
    55cc:	0608                	addi	a0,sp,768
    55ce:	00090003          	lb	zero,0(s2)
    55d2:	0100                	addi	s0,sp,128
    55d4:	1f05                	addi	t5,t5,-31
    55d6:	04090603          	lb	a2,64(s2)
    55da:	0100                	addi	s0,sp,128
    55dc:	1505                	addi	a0,a0,-31
    55de:	10097f03          	0x10097f03
    55e2:	0100                	addi	s0,sp,128
    55e4:	1f05                	addi	t5,t5,-31
    55e6:	08090103          	lb	sp,128(s2)
    55ea:	0100                	addi	s0,sp,128
    55ec:	0905                	addi	s2,s2,1
    55ee:	08097803          	0x8097803
    55f2:	0100                	addi	s0,sp,128
    55f4:	0d05                	addi	s10,s10,1
    55f6:	0306                	slli	t1,t1,0x1
    55f8:	00040907          	vle8.v	v18,(s0),v0.t
    55fc:	0501                	addi	a0,a0,0
    55fe:	0615                	addi	a2,a2,5
    5600:	00090003          	lb	zero,0(s2)
    5604:	0100                	addi	s0,sp,128
    5606:	1f05                	addi	t5,t5,-31
    5608:	1c090103          	lb	sp,448(s2)
    560c:	0100                	addi	s0,sp,128
    560e:	1305                	addi	t1,t1,-31
    5610:	08097f03          	0x8097f03
    5614:	0100                	addi	s0,sp,128
    5616:	0d05                	addi	s10,s10,1
    5618:	0306                	slli	t1,t1,0x1
    561a:	0901                	addi	s2,s2,0
    561c:	0008                	0x8
    561e:	0501                	addi	a0,a0,0
    5620:	061f 0003 0009      	0x90003061f
    5626:	0100                	addi	s0,sp,128
    5628:	2605                	jal	5948 <__fpclassifyd+0x1c>
    562a:	04090003          	lb	zero,64(s2)
    562e:	0100                	addi	s0,sp,128
    5630:	1505                	addi	a0,a0,-31
    5632:	0c090003          	lb	zero,192(s2)
    5636:	0100                	addi	s0,sp,128
    5638:	1305                	addi	t1,t1,-31
    563a:	04097d03          	0x4097d03
    563e:	0100                	addi	s0,sp,128
    5640:	2c05                	jal	5870 <__call_exitprocs+0xec>
    5642:	08090303          	lb	t1,128(s2)
    5646:	0100                	addi	s0,sp,128
    5648:	1305                	addi	t1,t1,-31
    564a:	04090003          	lb	zero,64(s2)
    564e:	0100                	addi	s0,sp,128
    5650:	2c05                	jal	5880 <__call_exitprocs+0xfc>
    5652:	04090003          	lb	zero,64(s2)
    5656:	0100                	addi	s0,sp,128
    5658:	1305                	addi	t1,t1,-31
    565a:	08090003          	lb	zero,128(s2)
    565e:	0100                	addi	s0,sp,128
    5660:	0d05                	addi	s10,s10,1
    5662:	0306                	slli	t1,t1,0x1
    5664:	0901                	addi	s2,s2,0
    5666:	0004                	0x4
    5668:	0501                	addi	a0,a0,0
    566a:	7c03060f          	0x7c03060f
    566e:	0009                	c.nop	2
    5670:	0100                	addi	s0,sp,128
    5672:	0306                	slli	t1,t1,0x1
    5674:	0900                	addi	s0,sp,144
    5676:	001c                	0x1c
    5678:	0301                	addi	t1,t1,0
    567a:	0906                	slli	s2,s2,0x1
    567c:	0008                	0x8
    567e:	0501                	addi	a0,a0,0
    5680:	0614                	addi	a3,sp,768
    5682:	0c090103          	lb	sp,192(s2)
    5686:	0100                	addi	s0,sp,128
    5688:	0d05                	addi	s10,s10,1
    568a:	0306                	slli	t1,t1,0x1
    568c:	0900                	addi	s0,sp,144
    568e:	0004                	0x4
    5690:	0501                	addi	a0,a0,0
    5692:	0612                	slli	a2,a2,0x4
    5694:	00090003          	lb	zero,0(s2)
    5698:	0100                	addi	s0,sp,128
    569a:	1705                	addi	a4,a4,-31
    569c:	04090003          	lb	zero,64(s2)
    56a0:	0100                	addi	s0,sp,128
    56a2:	0f05                	addi	t5,t5,1
    56a4:	04090003          	lb	zero,64(s2)
    56a8:	0100                	addi	s0,sp,128
    56aa:	0306                	slli	t1,t1,0x1
    56ac:	097f                	0x97f
    56ae:	0004                	0x4
    56b0:	0601                	addi	a2,a2,0
    56b2:	04090103          	lb	sp,64(s2)
    56b6:	0100                	addi	s0,sp,128
    56b8:	0505                	addi	a0,a0,1
    56ba:	0306                	slli	t1,t1,0x1
    56bc:	090a                	slli	s2,s2,0x2
    56be:	0008                	0x8
    56c0:	0501                	addi	a0,a0,0
    56c2:	0608                	addi	a0,sp,768
    56c4:	00090003          	lb	zero,0(s2)
    56c8:	0100                	addi	s0,sp,128
    56ca:	0505                	addi	a0,a0,1
    56cc:	0306                	slli	t1,t1,0x1
    56ce:	0901                	addi	s2,s2,0
    56d0:	0008                	0x8
    56d2:	0501                	addi	a0,a0,0
    56d4:	0608                	addi	a0,sp,768
    56d6:	00090003          	lb	zero,0(s2)
    56da:	0100                	addi	s0,sp,128
    56dc:	0905                	addi	s2,s2,1
    56de:	0306                	slli	t1,t1,0x1
    56e0:	0901                	addi	s2,s2,0
    56e2:	0008                	0x8
    56e4:	0501                	addi	a0,a0,0
    56e6:	060c                	addi	a1,sp,768
    56e8:	00090003          	lb	zero,0(s2)
    56ec:	0100                	addi	s0,sp,128
    56ee:	0505                	addi	a0,a0,1
    56f0:	0306                	slli	t1,t1,0x1
    56f2:	0901                	addi	s2,s2,0
    56f4:	0004                	0x4
    56f6:	0501                	addi	a0,a0,0
    56f8:	060c                	addi	a1,sp,768
    56fa:	00090003          	lb	zero,0(s2)
    56fe:	0100                	addi	s0,sp,128
    5700:	0505                	addi	a0,a0,1
    5702:	0306                	slli	t1,t1,0x1
    5704:	0901                	addi	s2,s2,0
    5706:	0004                	0x4
    5708:	0501                	addi	a0,a0,0
    570a:	0608                	addi	a0,sp,768
    570c:	00090003          	lb	zero,0(s2)
    5710:	0100                	addi	s0,sp,128
    5712:	0b05                	addi	s6,s6,1
    5714:	0306                	slli	t1,t1,0x1
    5716:	0905                	addi	s2,s2,1
    5718:	0004                	0x4
    571a:	0501                	addi	a0,a0,0
    571c:	0614                	addi	a3,sp,768
    571e:	08090003          	lb	zero,128(s2)
    5722:	0100                	addi	s0,sp,128
    5724:	0d05                	addi	s10,s10,1
    5726:	04090203          	lb	tp,64(s2)
    572a:	0100                	addi	s0,sp,128
    572c:	1405                	addi	s0,s0,-31
    572e:	0200                	addi	s0,sp,256
    5730:	0104                	addi	s1,sp,128
    5732:	0c097e03          	0xc097e03
    5736:	0100                	addi	s0,sp,128
    5738:	0905                	addi	s2,s2,1
    573a:	0306                	slli	t1,t1,0x1
    573c:	0902                	c.slli64	s2
    573e:	0004                	0x4
    5740:	0501                	addi	a0,a0,0
    5742:	060d                	addi	a2,a2,3
    5744:	00090003          	lb	zero,0(s2)
    5748:	0100                	addi	s0,sp,128
    574a:	0905                	addi	s2,s2,1
    574c:	0306                	slli	t1,t1,0x1
    574e:	0901                	addi	s2,s2,0
    5750:	0014                	0x14
    5752:	0501                	addi	a0,a0,0
    5754:	0610                	addi	a2,sp,768
    5756:	00090003          	lb	zero,0(s2)
    575a:	0100                	addi	s0,sp,128
    575c:	10090103          	lb	sp,256(s2)
    5760:	0100                	addi	s0,sp,128
    5762:	0905                	addi	s2,s2,1
    5764:	0306                	slli	t1,t1,0x1
    5766:	0900                	addi	s0,sp,144
    5768:	0008                	0x8
    576a:	0501                	addi	a0,a0,0
    576c:	0003060b          	0x3060b
    5770:	0009                	c.nop	2
    5772:	0100                	addi	s0,sp,128
    5774:	1005                	c.nop	-31
    5776:	04090003          	lb	zero,64(s2)
    577a:	0100                	addi	s0,sp,128
    577c:	1805                	addi	a6,a6,-31
    577e:	04090003          	lb	zero,64(s2)
    5782:	0100                	addi	s0,sp,128
    5784:	0e05                	addi	t3,t3,1
    5786:	04090003          	lb	zero,64(s2)
    578a:	0100                	addi	s0,sp,128
    578c:	0b05                	addi	s6,s6,1
    578e:	0306                	slli	t1,t1,0x1
    5790:	097c                	addi	a5,sp,156
    5792:	0004                	0x4
    5794:	0501                	addi	a0,a0,0
    5796:	0305                	addi	t1,t1,1
    5798:	0906                	slli	s2,s2,0x1
    579a:	0004                	0x4
    579c:	0501                	addi	a0,a0,0
    579e:	0608                	addi	a0,sp,768
    57a0:	00090003          	lb	zero,0(s2)
    57a4:	0100                	addi	s0,sp,128
    57a6:	0505                	addi	a0,a0,1
    57a8:	0306                	slli	t1,t1,0x1
    57aa:	0905                	addi	s2,s2,1
    57ac:	0004                	0x4
    57ae:	0301                	addi	t1,t1,0
    57b0:	0901                	addi	s2,s2,0
    57b2:	0000                	unimp
    57b4:	0501                	addi	a0,a0,0
    57b6:	0609                	addi	a2,a2,2
    57b8:	00090003          	lb	zero,0(s2)
    57bc:	0100                	addi	s0,sp,128
    57be:	0b05                	addi	s6,s6,1
    57c0:	04090103          	lb	sp,64(s2)
    57c4:	0100                	addi	s0,sp,128
    57c6:	0905                	addi	s2,s2,1
    57c8:	04097f03          	0x4097f03
    57cc:	0100                	addi	s0,sp,128
    57ce:	0505                	addi	a0,a0,1
    57d0:	0306                	slli	t1,t1,0x1
    57d2:	0901                	addi	s2,s2,0
    57d4:	000c                	0xc
    57d6:	0501                	addi	a0,a0,0
    57d8:	0900030b          	0x900030b
    57dc:	0000                	unimp
    57de:	0501                	addi	a0,a0,0
    57e0:	060d                	addi	a2,a2,3
    57e2:	08090203          	lb	tp,128(s2)
    57e6:	0100                	addi	s0,sp,128
    57e8:	1105                	addi	sp,sp,-31
    57ea:	04090503          	lb	a0,64(s2)
    57ee:	0100                	addi	s0,sp,128
    57f0:	0b05                	addi	s6,s6,1
    57f2:	04097903          	0x4097903
    57f6:	0100                	addi	s0,sp,128
    57f8:	0905                	addi	s2,s2,1
    57fa:	0306                	slli	t1,t1,0x1
    57fc:	0902                	c.slli64	s2
    57fe:	0004                	0x4
    5800:	0501                	addi	a0,a0,0
    5802:	030d                	addi	t1,t1,3
    5804:	0902                	c.slli64	s2
    5806:	0000                	unimp
    5808:	0301                	addi	t1,t1,0
    580a:	00000903          	lb	s2,0(zero) # 0 <RAM_START_ADDRESS>
    580e:	0601                	addi	a2,a2,0
    5810:	00097b03          	0x97b03
    5814:	0100                	addi	s0,sp,128
    5816:	0905                	addi	s2,s2,1
    5818:	0306                	slli	t1,t1,0x1
    581a:	0901                	addi	s2,s2,0
    581c:	0004                	0x4
    581e:	0501                	addi	a0,a0,0
    5820:	060c                	addi	a1,sp,768
    5822:	00090003          	lb	zero,0(s2)
    5826:	0100                	addi	s0,sp,128
    5828:	0d05                	addi	s10,s10,1
    582a:	04090103          	lb	sp,64(s2)
    582e:	0100                	addi	s0,sp,128
    5830:	0b05                	addi	s6,s6,1
    5832:	0306                	slli	t1,t1,0x1
    5834:	097c                	addi	a5,sp,156
    5836:	0014                	0x14
    5838:	0501                	addi	a0,a0,0
    583a:	0305                	addi	t1,t1,1
    583c:	0911                	addi	s2,s2,4
    583e:	0004                	0x4
    5840:	0501                	addi	a0,a0,0
    5842:	0608                	addi	a0,sp,768
    5844:	00090003          	lb	zero,0(s2)
    5848:	0100                	addi	s0,sp,128
    584a:	0505                	addi	a0,a0,1
    584c:	0306                	slli	t1,t1,0x1
    584e:	0901                	addi	s2,s2,0
    5850:	0004                	0x4
    5852:	0501                	addi	a0,a0,0
    5854:	0601                	addi	a2,a2,0
    5856:	00090103          	lb	sp,0(s2)
    585a:	0100                	addi	s0,sp,128
    585c:	0805                	addi	a6,a6,1
    585e:	097fbb03          	0x97fbb03
    5862:	004c                	addi	a1,sp,4
    5864:	0501                	addi	a0,a0,0
    5866:	0605                	addi	a2,a2,1
    5868:	14097d03          	0x14097d03
    586c:	0100                	addi	s0,sp,128
    586e:	00090103          	lb	sp,0(s2)
    5872:	0100                	addi	s0,sp,128
    5874:	00090103          	lb	sp,0(s2)
    5878:	0100                	addi	s0,sp,128
    587a:	00090103          	lb	sp,0(s2)
    587e:	0100                	addi	s0,sp,128
    5880:	0805                	addi	a6,a6,1
    5882:	0306                	slli	t1,t1,0x1
    5884:	0900                	addi	s0,sp,144
    5886:	0000                	unimp
    5888:	0501                	addi	a0,a0,0
    588a:	0609                	addi	a2,a2,2
    588c:	08090203          	lb	tp,128(s2)
    5890:	0100                	addi	s0,sp,128
    5892:	0f05                	addi	t5,t5,1
    5894:	0306                	slli	t1,t1,0x1
    5896:	0900                	addi	s0,sp,144
    5898:	0000                	unimp
    589a:	0501                	addi	a0,a0,0
    589c:	0609                	addi	a2,a2,2
    589e:	08090103          	lb	sp,128(s2)
    58a2:	0100                	addi	s0,sp,128
    58a4:	0f05                	addi	t5,t5,1
    58a6:	0306                	slli	t1,t1,0x1
    58a8:	0900                	addi	s0,sp,144
    58aa:	0000                	unimp
    58ac:	0501                	addi	a0,a0,0
    58ae:	0611                	addi	a2,a2,4
    58b0:	0c093a03          	0xc093a03
    58b4:	0100                	addi	s0,sp,128
    58b6:	00090203          	lb	tp,0(s2)
    58ba:	0100                	addi	s0,sp,128
    58bc:	0306                	slli	t1,t1,0x1
    58be:	097a                	slli	s2,s2,0x1e
    58c0:	0000                	unimp
    58c2:	0501                	addi	a0,a0,0
    58c4:	060d                	addi	a2,a2,3
    58c6:	04090103          	lb	sp,64(s2)
    58ca:	0100                	addi	s0,sp,128
    58cc:	1505                	addi	a0,a0,-31
    58ce:	0306                	slli	t1,t1,0x1
    58d0:	0900                	addi	s0,sp,144
    58d2:	0000                	unimp
    58d4:	0501                	addi	a0,a0,0
    58d6:	060d                	addi	a2,a2,3
    58d8:	0c090103          	lb	sp,192(s2)
    58dc:	0100                	addi	s0,sp,128
    58de:	1005                	c.nop	-31
    58e0:	0306                	slli	t1,t1,0x1
    58e2:	0900                	addi	s0,sp,144
    58e4:	0000                	unimp
    58e6:	0501                	addi	a0,a0,0
    58e8:	030c                	addi	a1,sp,384
    58ea:	00080977          	0x80977
    58ee:	0501                	addi	a0,a0,0
    58f0:	0003060b          	0x3060b
    58f4:	0409                	addi	s0,s0,2
    58f6:	0100                	addi	s0,sp,128
    58f8:	1505                	addi	a0,a0,-31
    58fa:	08090c03          	lb	s8,128(s2)
    58fe:	0100                	addi	s0,sp,128
    5900:	1405                	addi	s0,s0,-31
    5902:	0306                	slli	t1,t1,0x1
    5904:	097f                	0x97f
    5906:	0000                	unimp
    5908:	0501                	addi	a0,a0,0
    590a:	0318                	addi	a4,sp,384
    590c:	0901                	addi	s2,s2,0
    590e:	0004                	0x4
    5910:	0501                	addi	a0,a0,0
    5912:	030c                	addi	a1,sp,384
    5914:	0974                	addi	a3,sp,156
    5916:	0004                	0x4
    5918:	0501                	addi	a0,a0,0
    591a:	0312                	slli	t1,t1,0x4
    591c:	090d                	addi	s2,s2,3
    591e:	0004                	0x4
    5920:	0501                	addi	a0,a0,0
    5922:	7303060b          	0x7303060b
    5926:	0409                	addi	s0,s0,2
    5928:	0100                	addi	s0,sp,128
    592a:	0a05                	addi	s4,s4,1
    592c:	08096203          	0x8096203
    5930:	0100                	addi	s0,sp,128
    5932:	0d05                	addi	s10,s10,1
    5934:	0306                	slli	t1,t1,0x1
    5936:	0900                	addi	s0,sp,144
    5938:	0000                	unimp
    593a:	0501                	addi	a0,a0,0
    593c:	0203060f          	0x203060f
    5940:	1809                	addi	a6,a6,-30
    5942:	0100                	addi	s0,sp,128
    5944:	1a05                	addi	s4,s4,-31
    5946:	0306                	slli	t1,t1,0x1
    5948:	0900                	addi	s0,sp,144
    594a:	0000                	unimp
    594c:	0501                	addi	a0,a0,0
    594e:	0900030f          	0x900030f
    5952:	001c                	0x1c
    5954:	0501                	addi	a0,a0,0
    5956:	031a                	slli	t1,t1,0x6
    5958:	0900                	addi	s0,sp,144
    595a:	0008                	0x8
    595c:	0501                	addi	a0,a0,0
    595e:	0900030f          	0x900030f
    5962:	0004                	0x4
    5964:	0501                	addi	a0,a0,0
    5966:	031a                	slli	t1,t1,0x6
    5968:	0900                	addi	s0,sp,144
    596a:	0008                	0x8
    596c:	0501                	addi	a0,a0,0
    596e:	0314                	addi	a3,sp,384
    5970:	0900                	addi	s0,sp,144
    5972:	0004                	0x4
    5974:	0501                	addi	a0,a0,0
    5976:	0900030f          	0x900030f
    597a:	0008                	0x8
    597c:	0501                	addi	a0,a0,0
    597e:	0967030b          	0x967030b
    5982:	0004                	0x4
    5984:	0501                	addi	a0,a0,0
    5986:	0919030f          	0x919030f
    598a:	0004                	0x4
    598c:	0501                	addi	a0,a0,0
    598e:	031a                	slli	t1,t1,0x6
    5990:	0900                	addi	s0,sp,144
    5992:	0004                	0x4
    5994:	0501                	addi	a0,a0,0
    5996:	060d                	addi	a2,a2,3
    5998:	0c090203          	lb	tp,192(s2)
    599c:	0100                	addi	s0,sp,128
    599e:	00090103          	lb	sp,0(s2)
    59a2:	0100                	addi	s0,sp,128
    59a4:	1a05                	addi	s4,s4,-31
    59a6:	0306                	slli	t1,t1,0x1
    59a8:	097d                	addi	s2,s2,31
    59aa:	0000                	unimp
    59ac:	0501                	addi	a0,a0,0
    59ae:	0900030f          	0x900030f
    59b2:	0014                	0x14
    59b4:	0501                	addi	a0,a0,0
    59b6:	031a                	slli	t1,t1,0x6
    59b8:	0900                	addi	s0,sp,144
    59ba:	0010                	0x10
    59bc:	0501                	addi	a0,a0,0
    59be:	0900030f          	0x900030f
    59c2:	0008                	0x8
    59c4:	0301                	addi	t1,t1,0
    59c6:	00040903          	lb	s2,0(s0)
    59ca:	0601                	addi	a2,a2,0
    59cc:	04097d03          	0x4097d03
    59d0:	0100                	addi	s0,sp,128
    59d2:	0905                	addi	s2,s2,1
    59d4:	14090c03          	lb	s8,320(s2)
    59d8:	0100                	addi	s0,sp,128
    59da:	1005                	c.nop	-31
    59dc:	0306                	slli	t1,t1,0x1
    59de:	0900                	addi	s0,sp,144
    59e0:	0000                	unimp
    59e2:	0501                	addi	a0,a0,0
    59e4:	0609                	addi	a2,a2,2
    59e6:	04090103          	lb	sp,64(s2)
    59ea:	0100                	addi	s0,sp,128
    59ec:	1005                	c.nop	-31
    59ee:	0306                	slli	t1,t1,0x1
    59f0:	0900                	addi	s0,sp,144
    59f2:	0000                	unimp
    59f4:	0501                	addi	a0,a0,0
    59f6:	0609                	addi	a2,a2,2
    59f8:	04090a03          	lb	s4,64(s2)
    59fc:	0100                	addi	s0,sp,128
    59fe:	1d05                	addi	s10,s10,-31
    5a00:	0306                	slli	t1,t1,0x1
    5a02:	0900                	addi	s0,sp,144
    5a04:	0000                	unimp
    5a06:	0501                	addi	a0,a0,0
    5a08:	0609                	addi	a2,a2,2
    5a0a:	04090103          	lb	sp,64(s2)
    5a0e:	0100                	addi	s0,sp,128
    5a10:	1005                	c.nop	-31
    5a12:	0306                	slli	t1,t1,0x1
    5a14:	0900                	addi	s0,sp,144
    5a16:	0000                	unimp
    5a18:	0501                	addi	a0,a0,0
    5a1a:	094f030b          	0x94f030b
    5a1e:	0008                	0x8
    5a20:	0501                	addi	a0,a0,0
    5a22:	0919030f          	0x919030f
    5a26:	0008                	0x8
    5a28:	0501                	addi	a0,a0,0
    5a2a:	0601                	addi	a2,a2,0
    5a2c:	08093303          	0x8093303
    5a30:	0100                	addi	s0,sp,128
    5a32:	0505                	addi	a0,a0,1
    5a34:	00090103          	lb	sp,0(s2)
    5a38:	0100                	addi	s0,sp,128
    5a3a:	0c05                	addi	s8,s8,1
    5a3c:	0306                	slli	t1,t1,0x1
    5a3e:	0900                	addi	s0,sp,144
    5a40:	0000                	unimp
    5a42:	0501                	addi	a0,a0,0
    5a44:	0601                	addi	a2,a2,0
    5a46:	0c090503          	lb	a0,192(s2)
    5a4a:	0100                	addi	s0,sp,128
    5a4c:	0505                	addi	a0,a0,1
    5a4e:	00090103          	lb	sp,0(s2)
    5a52:	0100                	addi	s0,sp,128
    5a54:	0c05                	addi	s8,s8,1
    5a56:	0306                	slli	t1,t1,0x1
    5a58:	0900                	addi	s0,sp,144
    5a5a:	0000                	unimp
    5a5c:	0501                	addi	a0,a0,0
    5a5e:	0601                	addi	a2,a2,0
    5a60:	08090503          	lb	a0,128(s2)
    5a64:	0100                	addi	s0,sp,128
    5a66:	0505                	addi	a0,a0,1
    5a68:	00090103          	lb	sp,0(s2)
    5a6c:	0100                	addi	s0,sp,128
    5a6e:	0c05                	addi	s8,s8,1
    5a70:	0306                	slli	t1,t1,0x1
    5a72:	0900                	addi	s0,sp,144
    5a74:	0000                	unimp
    5a76:	0501                	addi	a0,a0,0
    5a78:	0601                	addi	a2,a2,0
    5a7a:	0c090503          	lb	a0,192(s2)
    5a7e:	0100                	addi	s0,sp,128
    5a80:	0505                	addi	a0,a0,1
    5a82:	00090103          	lb	sp,0(s2)
    5a86:	0100                	addi	s0,sp,128
    5a88:	0c05                	addi	s8,s8,1
    5a8a:	0306                	slli	t1,t1,0x1
    5a8c:	0900                	addi	s0,sp,144
    5a8e:	0000                	unimp
    5a90:	0901                	addi	s2,s2,0
    5a92:	0008                	0x8
    5a94:	0100                	addi	s0,sp,128
    5a96:	0601                	addi	a2,a2,0
    5a98:	03000017          	auipc	zero,0x3000
    5a9c:	da00                	sw	s0,48(a2)
    5a9e:	0000                	unimp
    5aa0:	0100                	addi	s0,sp,128
    5aa2:	fb01                	bnez	a4,59b2 <__register_exitproc+0x12>
    5aa4:	0d0e                	slli	s10,s10,0x3
    5aa6:	0100                	addi	s0,sp,128
    5aa8:	0101                	addi	sp,sp,0
    5aaa:	0001                	nop
    5aac:	0000                	unimp
    5aae:	0001                	nop
    5ab0:	0100                	addi	s0,sp,128
    5ab2:	6168732f          	vamoandei64.v	zero,(a6),v22,v6,v0.t
    5ab6:	6572                	flw	fa0,28(sp)
    5ab8:	2f64                	fld	fs1,216(a4)
    5aba:	65726f63          	bltu	tp,s7,6118 <__subdf3+0x6a8>
    5abe:	616d                	addi	sp,sp,240
    5ac0:	6b72                	flw	fs6,28(sp)
    5ac2:	2f00                	fld	fs0,24(a4)
    5ac4:	6972                	flw	fs2,28(sp)
    5ac6:	36766373          	csrrsi	t1,0x367,12
    5aca:	2d34                	fld	fa3,88(a0)
    5acc:	6e75                	lui	t3,0x1d
    5ace:	776f6e6b          	0x776f6e6b
    5ad2:	2d6e                	fld	fs10,216(sp)
    5ad4:	6c65                	lui	s8,0x19
    5ad6:	2d66                	fld	fs10,88(sp)
    5ad8:	6f74                	flw	fa3,92(a4)
    5ada:	68636c6f          	jal	s8,3c160 <RAM_SIZE+0x2c160>
    5ade:	6961                	lui	s2,0x18
    5ae0:	2d6e                	fld	fs10,216(sp)
    5ae2:	3031                	jal	52ee <__modsi3+0x16>
    5ae4:	322e                	fld	ft4,232(sp)
    5ae6:	302e                	fld	ft0,232(sp)
    5ae8:	322d                	jal	5412 <__libc_init_array+0x8e>
    5aea:	3230                	fld	fa2,96(a2)
    5aec:	2e30                	fld	fa2,88(a2)
    5aee:	3231                	jal	53fa <__libc_init_array+0x76>
    5af0:	382e                	fld	fa6,232(sp)
    5af2:	782d                	lui	a6,0xfffeb
    5af4:	3638                	fld	fa4,104(a2)
    5af6:	365f 2d34 696c      	0x696c2d34365f
    5afc:	756e                	flw	fa0,248(sp)
    5afe:	2d78                	fld	fa4,216(a0)
    5b00:	746e6563          	bltu	t3,t1,624a <__subdf3+0x7da>
    5b04:	2f36736f          	jal	t1,6d5f6 <RAM_SIZE+0x5d5f6>
    5b08:	696c                	flw	fa1,84(a0)
    5b0a:	2f62                	fld	ft10,24(sp)
    5b0c:	2f636367          	0x2f636367
    5b10:	6972                	flw	fs2,28(sp)
    5b12:	36766373          	csrrsi	t1,0x367,12
    5b16:	2d34                	fld	fa3,88(a0)
    5b18:	6e75                	lui	t3,0x1d
    5b1a:	776f6e6b          	0x776f6e6b
    5b1e:	2d6e                	fld	fs10,216(sp)
    5b20:	6c65                	lui	s8,0x19
    5b22:	2f66                	fld	ft10,88(sp)
    5b24:	3031                	jal	5330 <__clzsi2+0x28>
    5b26:	322e                	fld	ft4,232(sp)
    5b28:	302e                	fld	ft0,232(sp)
    5b2a:	636e692f          	vamoandei32.v	zero,(t3),v22,v18
    5b2e:	756c                	flw	fa1,108(a0)
    5b30:	6564                	flw	fs1,76(a0)
    5b32:	0000                	unimp
    5b34:	6565                	lui	a0,0x19
    5b36:	705f 6972 746e      	0x746e6972705f
    5b3c:	2e66                	fld	ft8,88(sp)
    5b3e:	00010063          	beqz	sp,5b3e <__subdf3+0xce>
    5b42:	7300                	flw	fs0,32(a4)
    5b44:	6474                	flw	fa3,76(s0)
    5b46:	6564                	flw	fs1,76(a0)
    5b48:	2e66                	fld	ft8,88(sp)
    5b4a:	0068                	addi	a0,sp,12
    5b4c:	0002                	c.slli64	zero
    5b4e:	6300                	flw	fs0,0(a4)
    5b50:	5f65726f          	jal	tp,5d146 <RAM_SIZE+0x4d146>
    5b54:	6f70                	flw	fa2,92(a4)
    5b56:	7472                	flw	fs0,60(sp)
    5b58:	656d                	lui	a0,0x1b
    5b5a:	682e                	flw	fa6,200(sp)
    5b5c:	0100                	addi	s0,sp,128
    5b5e:	0000                	unimp
    5b60:	61647473          	csrrci	s0,0x616,8
    5b64:	6772                	flw	fa4,28(sp)
    5b66:	682e                	flw	fa6,200(sp)
    5b68:	0200                	addi	s0,sp,256
    5b6a:	0000                	unimp
    5b6c:	623c                	flw	fa5,64(a2)
    5b6e:	6975                	lui	s2,0x1d
    5b70:	746c                	flw	fa1,108(s0)
    5b72:	692d                	lui	s2,0xb
    5b74:	3e6e                	fld	ft8,248(sp)
    5b76:	0000                	unimp
    5b78:	0000                	unimp
    5b7a:	0500                	addi	s0,sp,640
    5b7c:	0001                	nop
    5b7e:	0205                	addi	tp,tp,1
    5b80:	2d04                	fld	fs1,24(a0)
    5b82:	0000                	unimp
    5b84:	05013503          	0x5013503
    5b88:	0305                	addi	t1,t1,1
    5b8a:	0901                	addi	s2,s2,0
    5b8c:	0000                	unimp
    5b8e:	0301                	addi	t1,t1,0
    5b90:	0901                	addi	s2,s2,0
    5b92:	0000                	unimp
    5b94:	0301                	addi	t1,t1,0
    5b96:	0901                	addi	s2,s2,0
    5b98:	0000                	unimp
    5b9a:	0301                	addi	t1,t1,0
    5b9c:	0902                	c.slli64	s2
    5b9e:	0000                	unimp
    5ba0:	0501                	addi	a0,a0,0
    5ba2:	0601                	addi	a2,a2,0
    5ba4:	00097b03          	0x97b03
    5ba8:	0100                	addi	s0,sp,128
    5baa:	0e05                	addi	t3,t3,1
    5bac:	38090503          	lb	a0,896(s2) # b380 <__stack_top+0x12f0>
    5bb0:	0100                	addi	s0,sp,128
    5bb2:	0105                	addi	sp,sp,1
    5bb4:	04097b03          	0x4097b03
    5bb8:	0100                	addi	s0,sp,128
    5bba:	0805                	addi	a6,a6,1
    5bbc:	14090503          	lb	a0,320(s2)
    5bc0:	0100                	addi	s0,sp,128
    5bc2:	0d05                	addi	s10,s10,1
    5bc4:	04090103          	lb	sp,64(s2)
    5bc8:	0100                	addi	s0,sp,128
    5bca:	0505                	addi	a0,a0,1
    5bcc:	0306                	slli	t1,t1,0x1
    5bce:	0901                	addi	s2,s2,0
    5bd0:	0008                	0x8
    5bd2:	0501                	addi	a0,a0,0
    5bd4:	060e                	slli	a2,a2,0x3
    5bd6:	00090003          	lb	zero,0(s2)
    5bda:	0100                	addi	s0,sp,128
    5bdc:	0805                	addi	a6,a6,1
    5bde:	04090003          	lb	zero,64(s2)
    5be2:	0100                	addi	s0,sp,128
    5be4:	0905                	addi	s2,s2,1
    5be6:	0306                	slli	t1,t1,0x1
    5be8:	0901                	addi	s2,s2,0
    5bea:	0004                	0x4
    5bec:	0501                	addi	a0,a0,0
    5bee:	060e                	slli	a2,a2,0x3
    5bf0:	00090003          	lb	zero,0(s2)
    5bf4:	0100                	addi	s0,sp,128
    5bf6:	0505                	addi	a0,a0,1
    5bf8:	0306                	slli	t1,t1,0x1
    5bfa:	0901                	addi	s2,s2,0
    5bfc:	0004                	0x4
    5bfe:	0301                	addi	t1,t1,0
    5c00:	00000903          	lb	s2,0(zero) # 0 <RAM_START_ADDRESS>
    5c04:	0501                	addi	a0,a0,0
    5c06:	060e                	slli	a2,a2,0x3
    5c08:	00097c03          	0x97c03
    5c0c:	0100                	addi	s0,sp,128
    5c0e:	0a05                	addi	s4,s4,1
    5c10:	04090403          	lb	s0,64(s2)
    5c14:	0100                	addi	s0,sp,128
    5c16:	0505                	addi	a0,a0,1
    5c18:	0306                	slli	t1,t1,0x1
    5c1a:	0901                	addi	s2,s2,0
    5c1c:	0008                	0x8
    5c1e:	0301                	addi	t1,t1,0
    5c20:	0901                	addi	s2,s2,0
    5c22:	0000                	unimp
    5c24:	0501                	addi	a0,a0,0
    5c26:	060e                	slli	a2,a2,0x3
    5c28:	00090003          	lb	zero,0(s2)
    5c2c:	0100                	addi	s0,sp,128
    5c2e:	04091403          	lh	s0,64(s2)
    5c32:	0100                	addi	s0,sp,128
    5c34:	0805                	addi	a6,a6,1
    5c36:	04096c03          	0x4096c03
    5c3a:	0100                	addi	s0,sp,128
    5c3c:	0905                	addi	s2,s2,1
    5c3e:	0306                	slli	t1,t1,0x1
    5c40:	0902                	c.slli64	s2
    5c42:	0004                	0x4
    5c44:	0501                	addi	a0,a0,0
    5c46:	060c                	addi	a1,sp,768
    5c48:	00090003          	lb	zero,0(s2)
    5c4c:	0100                	addi	s0,sp,128
    5c4e:	0e05                	addi	t3,t3,1
    5c50:	0306                	slli	t1,t1,0x1
    5c52:	0906                	slli	s2,s2,0x1
    5c54:	0004                	0x4
    5c56:	0501                	addi	a0,a0,0
    5c58:	00030617          	auipc	a2,0x30
    5c5c:	0009                	c.nop	2
    5c5e:	0100                	addi	s0,sp,128
    5c60:	1105                	addi	sp,sp,-31
    5c62:	04090003          	lb	zero,64(s2)
    5c66:	0100                	addi	s0,sp,128
    5c68:	0e05                	addi	t3,t3,1
    5c6a:	0306                	slli	t1,t1,0x1
    5c6c:	0905                	addi	s2,s2,1
    5c6e:	0004                	0x4
    5c70:	0501                	addi	a0,a0,0
    5c72:	00030617          	auipc	a2,0x30
    5c76:	0009                	c.nop	2
    5c78:	0100                	addi	s0,sp,128
    5c7a:	0a05                	addi	s4,s4,1
    5c7c:	04097203          	0x4097203
    5c80:	0100                	addi	s0,sp,128
    5c82:	1105                	addi	sp,sp,-31
    5c84:	04090e03          	lb	t3,64(s2)
    5c88:	0100                	addi	s0,sp,128
    5c8a:	0d05                	addi	s10,s10,1
    5c8c:	0306                	slli	t1,t1,0x1
    5c8e:	0902                	c.slli64	s2
    5c90:	0004                	0x4
    5c92:	0301                	addi	t1,t1,0
    5c94:	0901                	addi	s2,s2,0
    5c96:	0000                	unimp
    5c98:	0501                	addi	a0,a0,0
    5c9a:	0612                	slli	a2,a2,0x4
    5c9c:	00097f03          	0x97f03
    5ca0:	0100                	addi	s0,sp,128
    5ca2:	1105                	addi	sp,sp,-31
    5ca4:	04090103          	lb	sp,64(s2)
    5ca8:	0100                	addi	s0,sp,128
    5caa:	1205                	addi	tp,tp,-31
    5cac:	04097f03          	0x4097f03
    5cb0:	0100                	addi	s0,sp,128
    5cb2:	0505                	addi	a0,a0,1
    5cb4:	0306                	slli	t1,t1,0x1
    5cb6:	0905                	addi	s2,s2,1
    5cb8:	0004                	0x4
    5cba:	0501                	addi	a0,a0,0
    5cbc:	0608                	addi	a0,sp,768
    5cbe:	00090003          	lb	zero,0(s2)
    5cc2:	0100                	addi	s0,sp,128
    5cc4:	0905                	addi	s2,s2,1
    5cc6:	0306                	slli	t1,t1,0x1
    5cc8:	0902                	c.slli64	s2
    5cca:	0004                	0x4
    5ccc:	0501                	addi	a0,a0,0
    5cce:	060c                	addi	a1,sp,768
    5cd0:	00090003          	lb	zero,0(s2)
    5cd4:	0100                	addi	s0,sp,128
    5cd6:	0e05                	addi	t3,t3,1
    5cd8:	0306                	slli	t1,t1,0x1
    5cda:	0902                	c.slli64	s2
    5cdc:	0008                	0x8
    5cde:	0501                	addi	a0,a0,0
    5ce0:	0611                	addi	a2,a2,4
    5ce2:	00090103          	lb	sp,0(s2)
    5ce6:	0100                	addi	s0,sp,128
    5ce8:	0505                	addi	a0,a0,1
    5cea:	0306                	slli	t1,t1,0x1
    5cec:	000c0903          	lb	s2,0(s8) # 19000 <RAM_SIZE+0x9000>
    5cf0:	0301                	addi	t1,t1,0
    5cf2:	0902                	c.slli64	s2
    5cf4:	0000                	unimp
    5cf6:	0501                	addi	a0,a0,0
    5cf8:	0608                	addi	a0,sp,768
    5cfa:	00090003          	lb	zero,0(s2)
    5cfe:	0100                	addi	s0,sp,128
    5d00:	0905                	addi	s2,s2,1
    5d02:	0306                	slli	t1,t1,0x1
    5d04:	0901                	addi	s2,s2,0
    5d06:	0004                	0x4
    5d08:	0501                	addi	a0,a0,0
    5d0a:	0612                	slli	a2,a2,0x4
    5d0c:	00090003          	lb	zero,0(s2)
    5d10:	0100                	addi	s0,sp,128
    5d12:	0e05                	addi	t3,t3,1
    5d14:	10090003          	lb	zero,256(s2)
    5d18:	0100                	addi	s0,sp,128
    5d1a:	0505                	addi	a0,a0,1
    5d1c:	0306                	slli	t1,t1,0x1
    5d1e:	090a                	slli	s2,s2,0x2
    5d20:	0008                	0x8
    5d22:	0301                	addi	t1,t1,0
    5d24:	0902                	c.slli64	s2
    5d26:	0010                	0x10
    5d28:	0501                	addi	a0,a0,0
    5d2a:	0608                	addi	a0,sp,768
    5d2c:	00090103          	lb	sp,0(s2)
    5d30:	0100                	addi	s0,sp,128
    5d32:	0a05                	addi	s4,s4,1
    5d34:	04097f03          	0x4097f03
    5d38:	0100                	addi	s0,sp,128
    5d3a:	0505                	addi	a0,a0,1
    5d3c:	0306                	slli	t1,t1,0x1
    5d3e:	0901                	addi	s2,s2,0
    5d40:	0004                	0x4
    5d42:	0501                	addi	a0,a0,0
    5d44:	0614                	addi	a3,sp,768
    5d46:	00090103          	lb	sp,0(s2)
    5d4a:	0100                	addi	s0,sp,128
    5d4c:	0805                	addi	a6,a6,1
    5d4e:	04097f03          	0x4097f03
    5d52:	0100                	addi	s0,sp,128
    5d54:	0f05                	addi	t5,t5,1
    5d56:	0306                	slli	t1,t1,0x1
    5d58:	0901                	addi	s2,s2,0
    5d5a:	0004                	0x4
    5d5c:	0501                	addi	a0,a0,0
    5d5e:	0614                	addi	a3,sp,768
    5d60:	04090103          	lb	sp,64(s2)
    5d64:	0100                	addi	s0,sp,128
    5d66:	1105                	addi	sp,sp,-31
    5d68:	0c090003          	lb	zero,192(s2)
    5d6c:	0100                	addi	s0,sp,128
    5d6e:	1405                	addi	s0,s0,-31
    5d70:	04090003          	lb	zero,64(s2)
    5d74:	0100                	addi	s0,sp,128
    5d76:	1105                	addi	sp,sp,-31
    5d78:	04090003          	lb	zero,64(s2)
    5d7c:	0100                	addi	s0,sp,128
    5d7e:	1405                	addi	s0,s0,-31
    5d80:	04097f03          	0x4097f03
    5d84:	0100                	addi	s0,sp,128
    5d86:	0505                	addi	a0,a0,1
    5d88:	0306                	slli	t1,t1,0x1
    5d8a:	0902                	c.slli64	s2
    5d8c:	0004                	0x4
    5d8e:	0501                	addi	a0,a0,0
    5d90:	0608                	addi	a0,sp,768
    5d92:	00090003          	lb	zero,0(s2)
    5d96:	0100                	addi	s0,sp,128
    5d98:	0905                	addi	s2,s2,1
    5d9a:	0306                	slli	t1,t1,0x1
    5d9c:	0901                	addi	s2,s2,0
    5d9e:	0008                	0x8
    5da0:	0501                	addi	a0,a0,0
    5da2:	0610                	addi	a2,sp,768
    5da4:	00090003          	lb	zero,0(s2)
    5da8:	0100                	addi	s0,sp,128
    5daa:	0d05                	addi	s10,s10,1
    5dac:	04090003          	lb	zero,64(s2)
    5db0:	0100                	addi	s0,sp,128
    5db2:	0505                	addi	a0,a0,1
    5db4:	0306                	slli	t1,t1,0x1
    5db6:	0902                	c.slli64	s2
    5db8:	0004                	0x4
    5dba:	0501                	addi	a0,a0,0
    5dbc:	0608                	addi	a0,sp,768
    5dbe:	00090003          	lb	zero,0(s2)
    5dc2:	0100                	addi	s0,sp,128
    5dc4:	0905                	addi	s2,s2,1
    5dc6:	0306                	slli	t1,t1,0x1
    5dc8:	0902                	c.slli64	s2
    5dca:	0004                	0x4
    5dcc:	0501                	addi	a0,a0,0
    5dce:	060c                	addi	a1,sp,768
    5dd0:	00090003          	lb	zero,0(s2)
    5dd4:	0100                	addi	s0,sp,128
    5dd6:	0e05                	addi	t3,t3,1
    5dd8:	0306                	slli	t1,t1,0x1
    5dda:	0902                	c.slli64	s2
    5ddc:	0008                	0x8
    5dde:	0501                	addi	a0,a0,0
    5de0:	0611                	addi	a2,a2,4
    5de2:	00090003          	lb	zero,0(s2)
    5de6:	0100                	addi	s0,sp,128
    5de8:	0505                	addi	a0,a0,1
    5dea:	0306                	slli	t1,t1,0x1
    5dec:	00080907          	vle8.v	v18,(a6),v0.t
    5df0:	0501                	addi	a0,a0,0
    5df2:	0608                	addi	a0,sp,768
    5df4:	00090003          	lb	zero,0(s2)
    5df8:	0100                	addi	s0,sp,128
    5dfa:	0f05                	addi	t5,t5,1
    5dfc:	0306                	slli	t1,t1,0x1
    5dfe:	0901                	addi	s2,s2,0
    5e00:	0004                	0x4
    5e02:	0501                	addi	a0,a0,0
    5e04:	0614                	addi	a3,sp,768
    5e06:	04090103          	lb	sp,64(s2)
    5e0a:	0100                	addi	s0,sp,128
    5e0c:	14097f03          	0x14097f03
    5e10:	0100                	addi	s0,sp,128
    5e12:	04090103          	lb	sp,64(s2)
    5e16:	0100                	addi	s0,sp,128
    5e18:	08097f03          	0x8097f03
    5e1c:	0100                	addi	s0,sp,128
    5e1e:	04090103          	lb	sp,64(s2)
    5e22:	0100                	addi	s0,sp,128
    5e24:	1105                	addi	sp,sp,-31
    5e26:	04090003          	lb	zero,64(s2)
    5e2a:	0100                	addi	s0,sp,128
    5e2c:	1005                	c.nop	-31
    5e2e:	04090503          	lb	a0,64(s2)
    5e32:	0100                	addi	s0,sp,128
    5e34:	0b05                	addi	s6,s6,1
    5e36:	0306                	slli	t1,t1,0x1
    5e38:	097c                	addi	a5,sp,156
    5e3a:	0004                	0x4
    5e3c:	0501                	addi	a0,a0,0
    5e3e:	0610                	addi	a2,sp,768
    5e40:	04090103          	lb	sp,64(s2)
    5e44:	0100                	addi	s0,sp,128
    5e46:	0d05                	addi	s10,s10,1
    5e48:	14090003          	lb	zero,320(s2)
    5e4c:	0100                	addi	s0,sp,128
    5e4e:	0b05                	addi	s6,s6,1
    5e50:	0306                	slli	t1,t1,0x1
    5e52:	0901                	addi	s2,s2,0
    5e54:	0004                	0x4
    5e56:	0501                	addi	a0,a0,0
    5e58:	0614                	addi	a3,sp,768
    5e5a:	04097c03          	0x4097c03
    5e5e:	0100                	addi	s0,sp,128
    5e60:	0b05                	addi	s6,s6,1
    5e62:	04090403          	lb	s0,64(s2)
    5e66:	0100                	addi	s0,sp,128
    5e68:	1505                	addi	a0,a0,-31
    5e6a:	08090103          	lb	sp,128(s2)
    5e6e:	0100                	addi	s0,sp,128
    5e70:	0905                	addi	s2,s2,1
    5e72:	0306                	slli	t1,t1,0x1
    5e74:	0900                	addi	s0,sp,144
    5e76:	0004                	0x4
    5e78:	0501                	addi	a0,a0,0
    5e7a:	060d                	addi	a2,a2,3
    5e7c:	00090003          	lb	zero,0(s2)
    5e80:	0100                	addi	s0,sp,128
    5e82:	0b05                	addi	s6,s6,1
    5e84:	04097f03          	0x4097f03
    5e88:	0100                	addi	s0,sp,128
    5e8a:	1005                	c.nop	-31
    5e8c:	0c090103          	lb	sp,192(s2)
    5e90:	0100                	addi	s0,sp,128
    5e92:	0b05                	addi	s6,s6,1
    5e94:	0306                	slli	t1,t1,0x1
    5e96:	097f                	0x97f
    5e98:	0004                	0x4
    5e9a:	0501                	addi	a0,a0,0
    5e9c:	060d                	addi	a2,a2,3
    5e9e:	08090103          	lb	sp,128(s2)
    5ea2:	0100                	addi	s0,sp,128
    5ea4:	0b05                	addi	s6,s6,1
    5ea6:	0306                	slli	t1,t1,0x1
    5ea8:	0901                	addi	s2,s2,0
    5eaa:	0008                	0x8
    5eac:	0501                	addi	a0,a0,0
    5eae:	0610                	addi	a2,sp,768
    5eb0:	04090103          	lb	sp,64(s2)
    5eb4:	0100                	addi	s0,sp,128
    5eb6:	0d05                	addi	s10,s10,1
    5eb8:	20090003          	lb	zero,512(s2)
    5ebc:	0100                	addi	s0,sp,128
    5ebe:	0105                	addi	sp,sp,1
    5ec0:	04090303          	lb	t1,64(s2)
    5ec4:	0100                	addi	s0,sp,128
    5ec6:	1005                	c.nop	-31
    5ec8:	40096403          	0x40096403
    5ecc:	0100                	addi	s0,sp,128
    5ece:	0505                	addi	a0,a0,1
    5ed0:	0306                	slli	t1,t1,0x1
    5ed2:	0008094f          	fnmadd.s	fs2,fa6,ft0,ft0,rne
    5ed6:	0301                	addi	t1,t1,0
    5ed8:	00000903          	lb	s2,0(zero) # 0 <RAM_START_ADDRESS>
    5edc:	0501                	addi	a0,a0,0
    5ede:	060a                	slli	a2,a2,0x2
    5ee0:	00090003          	lb	zero,0(s2)
    5ee4:	0100                	addi	s0,sp,128
    5ee6:	1205                	addi	tp,tp,-31
    5ee8:	04090003          	lb	zero,64(s2)
    5eec:	0100                	addi	s0,sp,128
    5eee:	0a05                	addi	s4,s4,1
    5ef0:	04090003          	lb	zero,64(s2)
    5ef4:	0100                	addi	s0,sp,128
    5ef6:	0505                	addi	a0,a0,1
    5ef8:	0306                	slli	t1,t1,0x1
    5efa:	0901                	addi	s2,s2,0
    5efc:	0008                	0x8
    5efe:	0301                	addi	t1,t1,0
    5f00:	0901                	addi	s2,s2,0
    5f02:	0000                	unimp
    5f04:	0501                	addi	a0,a0,0
    5f06:	060e                	slli	a2,a2,0x3
    5f08:	00090003          	lb	zero,0(s2)
    5f0c:	0100                	addi	s0,sp,128
    5f0e:	04091403          	lh	s0,64(s2)
    5f12:	0100                	addi	s0,sp,128
    5f14:	0805                	addi	a6,a6,1
    5f16:	04096c03          	0x4096c03
    5f1a:	0100                	addi	s0,sp,128
    5f1c:	0b05                	addi	s6,s6,1
    5f1e:	08097403          	0x8097403
    5f22:	0100                	addi	s0,sp,128
    5f24:	0a05                	addi	s4,s4,1
    5f26:	0c090b03          	lb	s6,192(s2)
    5f2a:	0100                	addi	s0,sp,128
    5f2c:	0d05                	addi	s10,s10,1
    5f2e:	0306                	slli	t1,t1,0x1
    5f30:	0905                	addi	s2,s2,1
    5f32:	0008                	0x8
    5f34:	0301                	addi	t1,t1,0
    5f36:	0901                	addi	s2,s2,0
    5f38:	0000                	unimp
    5f3a:	0501                	addi	a0,a0,0
    5f3c:	0612                	slli	a2,a2,0x4
    5f3e:	00097f03          	0x97f03
    5f42:	0100                	addi	s0,sp,128
    5f44:	08090103          	lb	sp,128(s2)
    5f48:	0100                	addi	s0,sp,128
    5f4a:	0d05                	addi	s10,s10,1
    5f4c:	0306                	slli	t1,t1,0x1
    5f4e:	0901                	addi	s2,s2,0
    5f50:	0004                	0x4
    5f52:	0501                	addi	a0,a0,0
    5f54:	0611                	addi	a2,a2,4
    5f56:	00090003          	lb	zero,0(s2)
    5f5a:	0100                	addi	s0,sp,128
    5f5c:	0505                	addi	a0,a0,1
    5f5e:	0306                	slli	t1,t1,0x1
    5f60:	090e                	slli	s2,s2,0x3
    5f62:	0004                	0x4
    5f64:	0501                	addi	a0,a0,0
    5f66:	0608                	addi	a0,sp,768
    5f68:	00090003          	lb	zero,0(s2)
    5f6c:	0100                	addi	s0,sp,128
    5f6e:	1205                	addi	tp,tp,-31
    5f70:	04096703          	0x4096703
    5f74:	0100                	addi	s0,sp,128
    5f76:	0d05                	addi	s10,s10,1
    5f78:	0306                	slli	t1,t1,0x1
    5f7a:	0929                	addi	s2,s2,10
    5f7c:	0008                	0x8
    5f7e:	0501                	addi	a0,a0,0
    5f80:	0631                	addi	a2,a2,12
    5f82:	00090003          	lb	zero,0(s2)
    5f86:	0100                	addi	s0,sp,128
    5f88:	1b05                	addi	s6,s6,-31
    5f8a:	0c090003          	lb	zero,192(s2)
    5f8e:	0100                	addi	s0,sp,128
    5f90:	1205                	addi	tp,tp,-31
    5f92:	0c090003          	lb	zero,192(s2)
    5f96:	0100                	addi	s0,sp,128
    5f98:	1605                	addi	a2,a2,-31
    5f9a:	04090003          	lb	zero,64(s2)
    5f9e:	0100                	addi	s0,sp,128
    5fa0:	2d05                	jal	65d0 <__subdf3+0xb60>
    5fa2:	04090103          	lb	sp,64(s2)
    5fa6:	0100                	addi	s0,sp,128
    5fa8:	1605                	addi	a2,a2,-31
    5faa:	08097f03          	0x8097f03
    5fae:	0100                	addi	s0,sp,128
    5fb0:	0d05                	addi	s10,s10,1
    5fb2:	0306                	slli	t1,t1,0x1
    5fb4:	0901                	addi	s2,s2,0
    5fb6:	0004                	0x4
    5fb8:	0501                	addi	a0,a0,0
    5fba:	061d                	addi	a2,a2,7
    5fbc:	00097f03          	0x97f03
    5fc0:	0100                	addi	s0,sp,128
    5fc2:	2d05                	jal	65f2 <__subdf3+0xb82>
    5fc4:	04090103          	lb	sp,64(s2)
    5fc8:	0100                	addi	s0,sp,128
    5fca:	0f05                	addi	t5,t5,1
    5fcc:	0306                	slli	t1,t1,0x1
    5fce:	097d                	addi	s2,s2,31
    5fd0:	0008                	0x8
    5fd2:	0501                	addi	a0,a0,0
    5fd4:	030d                	addi	t1,t1,3
    5fd6:	0968                	addi	a0,sp,156
    5fd8:	0008                	0x8
    5fda:	0301                	addi	t1,t1,0
    5fdc:	0901                	addi	s2,s2,0
    5fde:	0000                	unimp
    5fe0:	0501                	addi	a0,a0,0
    5fe2:	0612                	slli	a2,a2,0x4
    5fe4:	00097f03          	0x97f03
    5fe8:	0100                	addi	s0,sp,128
    5fea:	1105                	addi	sp,sp,-31
    5fec:	04090103          	lb	sp,64(s2)
    5ff0:	0100                	addi	s0,sp,128
    5ff2:	1205                	addi	tp,tp,-31
    5ff4:	04097f03          	0x4097f03
    5ff8:	0100                	addi	s0,sp,128
    5ffa:	0d05                	addi	s10,s10,1
    5ffc:	0306                	slli	t1,t1,0x1
    5ffe:	092e                	slli	s2,s2,0xb
    6000:	0008                	0x8
    6002:	0501                	addi	a0,a0,0
    6004:	0614                	addi	a3,sp,768
    6006:	00090003          	lb	zero,0(s2)
    600a:	0100                	addi	s0,sp,128
    600c:	0d05                	addi	s10,s10,1
    600e:	0306                	slli	t1,t1,0x1
    6010:	0901                	addi	s2,s2,0
    6012:	0008                	0x8
    6014:	0501                	addi	a0,a0,0
    6016:	0614                	addi	a3,sp,768
    6018:	00090003          	lb	zero,0(s2)
    601c:	0100                	addi	s0,sp,128
    601e:	1105                	addi	sp,sp,-31
    6020:	08090003          	lb	zero,128(s2)
    6024:	0100                	addi	s0,sp,128
    6026:	0d05                	addi	s10,s10,1
    6028:	0306                	slli	t1,t1,0x1
    602a:	095e                	slli	s2,s2,0x17
    602c:	0008                	0x8
    602e:	0501                	addi	a0,a0,0
    6030:	0612                	slli	a2,a2,0x4
    6032:	00090003          	lb	zero,0(s2)
    6036:	0100                	addi	s0,sp,128
    6038:	0d05                	addi	s10,s10,1
    603a:	0306                	slli	t1,t1,0x1
    603c:	091e                	slli	s2,s2,0x7
    603e:	0008                	0x8
    6040:	0501                	addi	a0,a0,0
    6042:	0614                	addi	a3,sp,768
    6044:	00090003          	lb	zero,0(s2)
    6048:	0100                	addi	s0,sp,128
    604a:	1105                	addi	sp,sp,-31
    604c:	08090003          	lb	zero,128(s2)
    6050:	0100                	addi	s0,sp,128
    6052:	1405                	addi	s0,s0,-31
    6054:	08090903          	lb	s2,128(s2)
    6058:	0100                	addi	s0,sp,128
    605a:	0c096f03          	0xc096f03
    605e:	0100                	addi	s0,sp,128
    6060:	0105                	addi	sp,sp,1
    6062:	0306                	slli	t1,t1,0x1
    6064:	100904a7          	vse128.v	v9,(s2),v0.t
    6068:	0100                	addi	s0,sp,128
    606a:	0205                	addi	tp,tp,1
    606c:	00090103          	lb	sp,0(s2)
    6070:	0100                	addi	s0,sp,128
    6072:	00090103          	lb	sp,0(s2)
    6076:	0100                	addi	s0,sp,128
    6078:	0805                	addi	a6,a6,1
    607a:	0306                	slli	t1,t1,0x1
    607c:	0900                	addi	s0,sp,144
    607e:	0000                	unimp
    6080:	0501                	addi	a0,a0,0
    6082:	0301                	addi	t1,t1,0
    6084:	090e                	slli	s2,s2,0x3
    6086:	0008                	0x8
    6088:	0601                	addi	a2,a2,0
    608a:	04090403          	lb	s0,64(s2)
    608e:	0100                	addi	s0,sp,128
    6090:	0505                	addi	a0,a0,1
    6092:	00090103          	lb	sp,0(s2)
    6096:	0100                	addi	s0,sp,128
    6098:	00090103          	lb	sp,0(s2)
    609c:	0100                	addi	s0,sp,128
    609e:	00090103          	lb	sp,0(s2)
    60a2:	0100                	addi	s0,sp,128
    60a4:	00090203          	lb	tp,0(s2)
    60a8:	0100                	addi	s0,sp,128
    60aa:	0105                	addi	sp,sp,1
    60ac:	0306                	slli	t1,t1,0x1
    60ae:	0000097b          	0x97b
    60b2:	0301                	addi	t1,t1,0
    60b4:	0900                	addi	s0,sp,144
    60b6:	0038                	addi	a4,sp,8
    60b8:	0501                	addi	a0,a0,0
    60ba:	0315                	addi	t1,t1,5
    60bc:	7eb0                	flw	fa2,120(a3)
    60be:	1c09                	addi	s8,s8,-30
    60c0:	0100                	addi	s0,sp,128
    60c2:	0505                	addi	a0,a0,1
    60c4:	0901d503          	lhu	a0,144(gp) # 7420 <__global_pointer$+0x90>
    60c8:	0004                	0x4
    60ca:	0601                	addi	a2,a2,0
    60cc:	08090103          	lb	sp,128(s2)
    60d0:	0100                	addi	s0,sp,128
    60d2:	097e9d03          	lh	s10,151(t4)
    60d6:	0000                	unimp
    60d8:	0301                	addi	t1,t1,0
    60da:	0901                	addi	s2,s2,0
    60dc:	0000                	unimp
    60de:	0301                	addi	t1,t1,0
    60e0:	0901                	addi	s2,s2,0
    60e2:	0000                	unimp
    60e4:	0301                	addi	t1,t1,0
    60e6:	0901                	addi	s2,s2,0
    60e8:	0000                	unimp
    60ea:	0301                	addi	t1,t1,0
    60ec:	0901                	addi	s2,s2,0
    60ee:	0000                	unimp
    60f0:	0301                	addi	t1,t1,0
    60f2:	0902                	c.slli64	s2
    60f4:	0000                	unimp
    60f6:	0301                	addi	t1,t1,0
    60f8:	0902                	c.slli64	s2
    60fa:	0000                	unimp
    60fc:	0301                	addi	t1,t1,0
    60fe:	0901                	addi	s2,s2,0
    6100:	0000                	unimp
    6102:	0301                	addi	t1,t1,0
    6104:	0902                	c.slli64	s2
    6106:	0000                	unimp
    6108:	0301                	addi	t1,t1,0
    610a:	0902                	c.slli64	s2
    610c:	0000                	unimp
    610e:	0501                	addi	a0,a0,0
    6110:	0315                	addi	t1,t1,5
    6112:	0900                	addi	s0,sp,144
    6114:	0000                	unimp
    6116:	0501                	addi	a0,a0,0
    6118:	0605                	addi	a2,a2,1
    611a:	00090003          	lb	zero,0(s2)
    611e:	0100                	addi	s0,sp,128
    6120:	0e05                	addi	t3,t3,1
    6122:	04090003          	lb	zero,64(s2)
    6126:	0100                	addi	s0,sp,128
    6128:	2405                	jal	6348 <__subdf3+0x8d8>
    612a:	097de903          	0x97de903
    612e:	000c                	0xc
    6130:	0501                	addi	a0,a0,0
    6132:	030e                	slli	t1,t1,0x3
    6134:	08090297          	auipc	t0,0x8090
    6138:	0100                	addi	s0,sp,128
    613a:	2405                	jal	635a <__subdf3+0x8ea>
    613c:	097de903          	0x97de903
    6140:	000c                	0xc
    6142:	0501                	addi	a0,a0,0
    6144:	0609                	addi	a2,a2,2
    6146:	09029903          	lh	s2,144(t0) # 80961c4 <RAM_SIZE+0x80861c4>
    614a:	0004                	0x4
    614c:	0501                	addi	a0,a0,0
    614e:	060c                	addi	a1,sp,768
    6150:	00090003          	lb	zero,0(s2)
    6154:	0100                	addi	s0,sp,128
    6156:	0d05                	addi	s10,s10,1
    6158:	0306                	slli	t1,t1,0x1
    615a:	0902                	c.slli64	s2
    615c:	0008                	0x8
    615e:	0501                	addi	a0,a0,0
    6160:	0614                	addi	a3,sp,768
    6162:	00090003          	lb	zero,0(s2)
    6166:	0100                	addi	s0,sp,128
    6168:	0d05                	addi	s10,s10,1
    616a:	0306                	slli	t1,t1,0x1
    616c:	0901                	addi	s2,s2,0
    616e:	0004                	0x4
    6170:	0501                	addi	a0,a0,0
    6172:	0615                	addi	a2,a2,5
    6174:	00097b03          	0x97b03
    6178:	0100                	addi	s0,sp,128
    617a:	1105                	addi	sp,sp,-31
    617c:	04090403          	lb	s0,64(s2)
    6180:	0100                	addi	s0,sp,128
    6182:	0d05                	addi	s10,s10,1
    6184:	04090103          	lb	sp,64(s2)
    6188:	0100                	addi	s0,sp,128
    618a:	1b05                	addi	s6,s6,-31
    618c:	0306                	slli	t1,t1,0x1
    618e:	0004097b          	0x4097b
    6192:	0501                	addi	a0,a0,0
    6194:	0315                	addi	t1,t1,5
    6196:	0900                	addi	s0,sp,144
    6198:	0000                	unimp
    619a:	0501                	addi	a0,a0,0
    619c:	0605                	addi	a2,a2,1
    619e:	00090003          	lb	zero,0(s2)
    61a2:	0100                	addi	s0,sp,128
    61a4:	0306                	slli	t1,t1,0x1
    61a6:	01b6                	slli	gp,gp,0xd
    61a8:	0409                	addi	s0,s0,2
    61aa:	0100                	addi	s0,sp,128
    61ac:	0a05                	addi	s4,s4,1
    61ae:	0306                	slli	t1,t1,0x1
    61b0:	0900                	addi	s0,sp,144
    61b2:	0000                	unimp
    61b4:	0501                	addi	a0,a0,0
    61b6:	0605                	addi	a2,a2,1
    61b8:	04090103          	lb	sp,64(s2)
    61bc:	0100                	addi	s0,sp,128
    61be:	00092003          	lw	zero,0(s2)
    61c2:	0100                	addi	s0,sp,128
    61c4:	00090103          	lb	sp,0(s2)
    61c8:	0100                	addi	s0,sp,128
    61ca:	00090103          	lb	sp,0(s2)
    61ce:	0100                	addi	s0,sp,128
    61d0:	0b05                	addi	s6,s6,1
    61d2:	00090003          	lb	zero,0(s2)
    61d6:	0100                	addi	s0,sp,128
    61d8:	0c05                	addi	s8,s8,1
    61da:	0306                	slli	t1,t1,0x1
    61dc:	0900                	addi	s0,sp,144
    61de:	0000                	unimp
    61e0:	0501                	addi	a0,a0,0
    61e2:	0900030b          	0x900030b
    61e6:	0004                	0x4
    61e8:	0501                	addi	a0,a0,0
    61ea:	0308                	addi	a0,sp,384
    61ec:	0965                	addi	s2,s2,25
    61ee:	0008                	0x8
    61f0:	0501                	addi	a0,a0,0
    61f2:	0609                	addi	a2,a2,2
    61f4:	08091d03          	lh	s10,128(s2)
    61f8:	0100                	addi	s0,sp,128
    61fa:	0205                	addi	tp,tp,1
    61fc:	00096203          	0x96203
    6200:	0100                	addi	s0,sp,128
    6202:	00090103          	lb	sp,0(s2)
    6206:	0100                	addi	s0,sp,128
    6208:	0805                	addi	a6,a6,1
    620a:	0306                	slli	t1,t1,0x1
    620c:	0900                	addi	s0,sp,144
    620e:	0000                	unimp
    6210:	0501                	addi	a0,a0,0
    6212:	0609                	addi	a2,a2,2
    6214:	04091e03          	lh	t3,64(s2)
    6218:	0100                	addi	s0,sp,128
    621a:	0c05                	addi	s8,s8,1
    621c:	0306                	slli	t1,t1,0x1
    621e:	097d                	addi	s2,s2,31
    6220:	0000                	unimp
    6222:	0501                	addi	a0,a0,0
    6224:	0609                	addi	a2,a2,2
    6226:	08090403          	lb	s0,128(s2)
    622a:	0100                	addi	s0,sp,128
    622c:	0a05                	addi	s4,s4,1
    622e:	0306                	slli	t1,t1,0x1
    6230:	0900                	addi	s0,sp,144
    6232:	0000                	unimp
    6234:	0501                	addi	a0,a0,0
    6236:	7c03060b          	0x7c03060b
    623a:	0409                	addi	s0,s0,2
    623c:	0100                	addi	s0,sp,128
    623e:	0105                	addi	sp,sp,1
    6240:	0306                	slli	t1,t1,0x1
    6242:	0908                	addi	a0,sp,144
    6244:	0004                	0x4
    6246:	0501                	addi	a0,a0,0
    6248:	7ea8030f          	0x7ea8030f
    624c:	3c09                	jal	5c5e <__subdf3+0x1ee>
    624e:	0100                	addi	s0,sp,128
    6250:	0905                	addi	s2,s2,1
    6252:	0306                	slli	t1,t1,0x1
    6254:	0902                	c.slli64	s2
    6256:	0008                	0x8
    6258:	0501                	addi	a0,a0,0
    625a:	0611                	addi	a2,a2,4
    625c:	00090103          	lb	sp,0(s2)
    6260:	0100                	addi	s0,sp,128
    6262:	0c05                	addi	s8,s8,1
    6264:	04097f03          	0x4097f03
    6268:	0100                	addi	s0,sp,128
    626a:	0905                	addi	s2,s2,1
    626c:	0306                	slli	t1,t1,0x1
    626e:	0901                	addi	s2,s2,0
    6270:	0004                	0x4
    6272:	0301                	addi	t1,t1,0
    6274:	0914                	addi	a3,sp,144
    6276:	001c                	0x1c
    6278:	0301                	addi	t1,t1,0
    627a:	0901                	addi	s2,s2,0
    627c:	0000                	unimp
    627e:	0501                	addi	a0,a0,0
    6280:	060d                	addi	a2,a2,3
    6282:	00090003          	lb	zero,0(s2)
    6286:	0100                	addi	s0,sp,128
    6288:	0c05                	addi	s8,s8,1
    628a:	04090003          	lb	zero,64(s2)
    628e:	0100                	addi	s0,sp,128
    6290:	0e05                	addi	t3,t3,1
    6292:	0306                	slli	t1,t1,0x1
    6294:	0902                	c.slli64	s2
    6296:	000c                	0xc
    6298:	0501                	addi	a0,a0,0
    629a:	0611                	addi	a2,a2,4
    629c:	00090003          	lb	zero,0(s2)
    62a0:	0100                	addi	s0,sp,128
    62a2:	1505                	addi	a0,a0,-31
    62a4:	04097d03          	0x4097d03
    62a8:	0100                	addi	s0,sp,128
    62aa:	1105                	addi	sp,sp,-31
    62ac:	04090303          	lb	t1,64(s2)
    62b0:	0100                	addi	s0,sp,128
    62b2:	0905                	addi	s2,s2,1
    62b4:	0306                	slli	t1,t1,0x1
    62b6:	090c                	addi	a1,sp,144
    62b8:	0004                	0x4
    62ba:	0301                	addi	t1,t1,0
    62bc:	0901                	addi	s2,s2,0
    62be:	0000                	unimp
    62c0:	0501                	addi	a0,a0,0
    62c2:	060c                	addi	a1,sp,768
    62c4:	00090003          	lb	zero,0(s2)
    62c8:	0100                	addi	s0,sp,128
    62ca:	1305                	addi	t1,t1,-31
    62cc:	04097f03          	0x4097f03
    62d0:	0100                	addi	s0,sp,128
    62d2:	0c05                	addi	s8,s8,1
    62d4:	04090103          	lb	sp,64(s2)
    62d8:	0100                	addi	s0,sp,128
    62da:	0905                	addi	s2,s2,1
    62dc:	0306                	slli	t1,t1,0x1
    62de:	0004090f          	0x4090f
    62e2:	0301                	addi	t1,t1,0
    62e4:	0901                	addi	s2,s2,0
    62e6:	0000                	unimp
    62e8:	0501                	addi	a0,a0,0
    62ea:	0619                	addi	a2,a2,6
    62ec:	00090003          	lb	zero,0(s2)
    62f0:	0100                	addi	s0,sp,128
    62f2:	0905                	addi	s2,s2,1
    62f4:	0306                	slli	t1,t1,0x1
    62f6:	000c0907          	vle8.v	v18,(s8),v0.t
    62fa:	0301                	addi	t1,t1,0
    62fc:	0902                	c.slli64	s2
    62fe:	0000                	unimp
    6300:	0501                	addi	a0,a0,0
    6302:	0311                	addi	t1,t1,4
    6304:	0952                	slli	s2,s2,0x14
    6306:	0020                	addi	s0,sp,8
    6308:	0501                	addi	a0,a0,0
    630a:	00030617          	auipc	a2,0x30
    630e:	0009                	c.nop	2
    6310:	0100                	addi	s0,sp,128
    6312:	1105                	addi	sp,sp,-31
    6314:	0306                	slli	t1,t1,0x1
    6316:	0901                	addi	s2,s2,0
    6318:	0004                	0x4
    631a:	0501                	addi	a0,a0,0
    631c:	060e                	slli	a2,a2,0x3
    631e:	00096403          	0x96403
    6322:	0100                	addi	s0,sp,128
    6324:	1105                	addi	sp,sp,-31
    6326:	0306                	slli	t1,t1,0x1
    6328:	0008090f          	0x8090f
    632c:	0501                	addi	a0,a0,0
    632e:	00030617          	auipc	a2,0x30
    6332:	0009                	c.nop	2
    6334:	0100                	addi	s0,sp,128
    6336:	1105                	addi	sp,sp,-31
    6338:	0306                	slli	t1,t1,0x1
    633a:	0901                	addi	s2,s2,0
    633c:	0004                	0x4
    633e:	0501                	addi	a0,a0,0
    6340:	060e                	slli	a2,a2,0x3
    6342:	00097003          	0x97003
    6346:	0100                	addi	s0,sp,128
    6348:	1105                	addi	sp,sp,-31
    634a:	0306                	slli	t1,t1,0x1
    634c:	0912                	slli	s2,s2,0x4
    634e:	0008                	0x8
    6350:	0501                	addi	a0,a0,0
    6352:	00030617          	auipc	a2,0x30
    6356:	0009                	c.nop	2
    6358:	0100                	addi	s0,sp,128
    635a:	1105                	addi	sp,sp,-31
    635c:	0306                	slli	t1,t1,0x1
    635e:	0901                	addi	s2,s2,0
    6360:	0004                	0x4
    6362:	0501                	addi	a0,a0,0
    6364:	060e                	slli	a2,a2,0x3
    6366:	00096d03          	0x96d03
    636a:	0100                	addi	s0,sp,128
    636c:	1105                	addi	sp,sp,-31
    636e:	0306                	slli	t1,t1,0x1
    6370:	0918                	addi	a4,sp,144
    6372:	0008                	0x8
    6374:	0501                	addi	a0,a0,0
    6376:	00030617          	auipc	a2,0x30
    637a:	0009                	c.nop	2
    637c:	0100                	addi	s0,sp,128
    637e:	1105                	addi	sp,sp,-31
    6380:	0306                	slli	t1,t1,0x1
    6382:	0901                	addi	s2,s2,0
    6384:	0004                	0x4
    6386:	0501                	addi	a0,a0,0
    6388:	060e                	slli	a2,a2,0x3
    638a:	00096703          	0x96703
    638e:	0100                	addi	s0,sp,128
    6390:	1105                	addi	sp,sp,-31
    6392:	0306                	slli	t1,t1,0x1
    6394:	0915                	addi	s2,s2,5
    6396:	0008                	0x8
    6398:	0501                	addi	a0,a0,0
    639a:	00030617          	auipc	a2,0x30
    639e:	0009                	c.nop	2
    63a0:	0100                	addi	s0,sp,128
    63a2:	1105                	addi	sp,sp,-31
    63a4:	0306                	slli	t1,t1,0x1
    63a6:	0901                	addi	s2,s2,0
    63a8:	0004                	0x4
    63aa:	0501                	addi	a0,a0,0
    63ac:	060e                	slli	a2,a2,0x3
    63ae:	00096a03          	0x96a03
    63b2:	0100                	addi	s0,sp,128
    63b4:	1905                	addi	s2,s2,-31
    63b6:	0900c003          	lbu	zero,144(ra)
    63ba:	0008                	0x8
    63bc:	0501                	addi	a0,a0,0
    63be:	0611                	addi	a2,a2,4
    63c0:	0900e303          	0x900e303
    63c4:	0008                	0x8
    63c6:	0501                	addi	a0,a0,0
    63c8:	0614                	addi	a3,sp,768
    63ca:	00090003          	lb	zero,0(s2)
    63ce:	0100                	addi	s0,sp,128
    63d0:	1105                	addi	sp,sp,-31
    63d2:	097ee103          	0x97ee103
    63d6:	0004                	0x4
    63d8:	0501                	addi	a0,a0,0
    63da:	0314                	addi	a3,sp,384
    63dc:	019f 0409 0100      	0x1000409019f
    63e2:	1505                	addi	a0,a0,-31
    63e4:	0306                	slli	t1,t1,0x1
    63e6:	0901                	addi	s2,s2,0
    63e8:	0004                	0x4
    63ea:	0501                	addi	a0,a0,0
    63ec:	061c                	addi	a5,sp,768
    63ee:	00090003          	lb	zero,0(s2)
    63f2:	0100                	addi	s0,sp,128
    63f4:	1105                	addi	sp,sp,-31
    63f6:	0306                	slli	t1,t1,0x1
    63f8:	0901                	addi	s2,s2,0
    63fa:	0004                	0x4
    63fc:	0501                	addi	a0,a0,0
    63fe:	0615                	addi	a2,a2,5
    6400:	00090003          	lb	zero,0(s2)
    6404:	0100                	addi	s0,sp,128
    6406:	1405                	addi	s0,s0,-31
    6408:	04090003          	lb	zero,64(s2)
    640c:	0100                	addi	s0,sp,128
    640e:	1905                	addi	s2,s2,-31
    6410:	04097f03          	0x4097f03
    6414:	0100                	addi	s0,sp,128
    6416:	0505                	addi	a0,a0,1
    6418:	0306                	slli	t1,t1,0x1
    641a:	0912                	slli	s2,s2,0x4
    641c:	0004                	0x4
    641e:	0501                	addi	a0,a0,0
    6420:	060a                	slli	a2,a2,0x2
    6422:	00090003          	lb	zero,0(s2)
    6426:	0100                	addi	s0,sp,128
    6428:	0505                	addi	a0,a0,1
    642a:	0306                	slli	t1,t1,0x1
    642c:	0901                	addi	s2,s2,0
    642e:	0004                	0x4
    6430:	0301                	addi	t1,t1,0
    6432:	0920                	addi	s0,sp,152
    6434:	0000                	unimp
    6436:	0301                	addi	t1,t1,0
    6438:	0901                	addi	s2,s2,0
    643a:	0000                	unimp
    643c:	0301                	addi	t1,t1,0
    643e:	0901                	addi	s2,s2,0
    6440:	0000                	unimp
    6442:	0501                	addi	a0,a0,0
    6444:	0900030b          	0x900030b
    6448:	0000                	unimp
    644a:	0501                	addi	a0,a0,0
    644c:	060c                	addi	a1,sp,768
    644e:	00090003          	lb	zero,0(s2)
    6452:	0100                	addi	s0,sp,128
    6454:	0b05                	addi	s6,s6,1
    6456:	04090003          	lb	zero,64(s2)
    645a:	0100                	addi	s0,sp,128
    645c:	0d05                	addi	s10,s10,1
    645e:	04097a03          	0x4097a03
    6462:	0100                	addi	s0,sp,128
    6464:	0505                	addi	a0,a0,1
    6466:	0306                	slli	t1,t1,0x1
    6468:	090d                	addi	s2,s2,3
    646a:	0004                	0x4
    646c:	0501                	addi	a0,a0,0
    646e:	060c                	addi	a1,sp,768
    6470:	00090003          	lb	zero,0(s2)
    6474:	0100                	addi	s0,sp,128
    6476:	0d05                	addi	s10,s10,1
    6478:	0306                	slli	t1,t1,0x1
    647a:	7ee2                	flw	ft9,56(sp)
    647c:	0409                	addi	s0,s0,2
    647e:	0100                	addi	s0,sp,128
    6480:	00090103          	lb	sp,0(s2)
    6484:	0100                	addi	s0,sp,128
    6486:	1105                	addi	sp,sp,-31
    6488:	0306                	slli	t1,t1,0x1
    648a:	0906                	slli	s2,s2,0x1
    648c:	0000                	unimp
    648e:	0501                	addi	a0,a0,0
    6490:	0310                	addi	a2,sp,384
    6492:	097a                	slli	s2,s2,0x1e
    6494:	0008                	0x8
    6496:	0501                	addi	a0,a0,0
    6498:	0609                	addi	a2,a2,2
    649a:	04090403          	lb	s0,64(s2)
    649e:	0100                	addi	s0,sp,128
    64a0:	00090203          	lb	tp,0(s2)
    64a4:	0100                	addi	s0,sp,128
    64a6:	0d05                	addi	s10,s10,1
    64a8:	24096903          	0x24096903
    64ac:	0100                	addi	s0,sp,128
    64ae:	1105                	addi	sp,sp,-31
    64b0:	0306                	slli	t1,t1,0x1
    64b2:	0901                	addi	s2,s2,0
    64b4:	0000                	unimp
    64b6:	0501                	addi	a0,a0,0
    64b8:	0310                	addi	a2,sp,384
    64ba:	0900                	addi	s0,sp,144
    64bc:	0004                	0x4
    64be:	0501                	addi	a0,a0,0
    64c0:	030d                	addi	t1,t1,3
    64c2:	097f                	0x97f
    64c4:	0004                	0x4
    64c6:	0601                	addi	a2,a2,0
    64c8:	04090103          	lb	sp,64(s2)
    64cc:	0100                	addi	s0,sp,128
    64ce:	1105                	addi	sp,sp,-31
    64d0:	0306                	slli	t1,t1,0x1
    64d2:	0900                	addi	s0,sp,144
    64d4:	0000                	unimp
    64d6:	0501                	addi	a0,a0,0
    64d8:	0310                	addi	a2,sp,384
    64da:	0900                	addi	s0,sp,144
    64dc:	0004                	0x4
    64de:	0501                	addi	a0,a0,0
    64e0:	0612                	slli	a2,a2,0x4
    64e2:	08090203          	lb	tp,128(s2)
    64e6:	0100                	addi	s0,sp,128
    64e8:	1505                	addi	a0,a0,-31
    64ea:	0306                	slli	t1,t1,0x1
    64ec:	0900                	addi	s0,sp,144
    64ee:	0000                	unimp
    64f0:	0501                	addi	a0,a0,0
    64f2:	030d                	addi	t1,t1,3
    64f4:	097d                	addi	s2,s2,31
    64f6:	0008                	0x8
    64f8:	0501                	addi	a0,a0,0
    64fa:	0909031b          	0x909031b
    64fe:	0004                	0x4
    6500:	0501                	addi	a0,a0,0
    6502:	0309                	addi	t1,t1,2
    6504:	08097c97          	auipc	s9,0x8097
    6508:	0100                	addi	s0,sp,128
    650a:	0b05                	addi	s6,s6,1
    650c:	04090103          	lb	sp,64(s2)
    6510:	0100                	addi	s0,sp,128
    6512:	0905                	addi	s2,s2,1
    6514:	0306                	slli	t1,t1,0x1
    6516:	0901                	addi	s2,s2,0
    6518:	0004                	0x4
    651a:	0501                	addi	a0,a0,0
    651c:	0003060f          	0x3060f
    6520:	0009                	c.nop	2
    6522:	0100                	addi	s0,sp,128
    6524:	1c05                	addi	s8,s8,-31
    6526:	08090003          	lb	zero,128(s2)
    652a:	0100                	addi	s0,sp,128
    652c:	0f05                	addi	t5,t5,1
    652e:	04090003          	lb	zero,64(s2)
    6532:	0100                	addi	s0,sp,128
    6534:	1405                	addi	s0,s0,-31
    6536:	04090003          	lb	zero,64(s2)
    653a:	0100                	addi	s0,sp,128
    653c:	0c05                	addi	s8,s8,1
    653e:	04097f03          	0x4097f03
    6542:	0100                	addi	s0,sp,128
    6544:	0b05                	addi	s6,s6,1
    6546:	04090103          	lb	sp,64(s2)
    654a:	0100                	addi	s0,sp,128
    654c:	0306                	slli	t1,t1,0x1
    654e:	097f                	0x97f
    6550:	0004                	0x4
    6552:	0501                	addi	a0,a0,0
    6554:	060c                	addi	a1,sp,768
    6556:	00090003          	lb	zero,0(s2)
    655a:	0100                	addi	s0,sp,128
    655c:	0b05                	addi	s6,s6,1
    655e:	04090003          	lb	zero,64(s2)
    6562:	0100                	addi	s0,sp,128
    6564:	0d05                	addi	s10,s10,1
    6566:	0306                	slli	t1,t1,0x1
    6568:	03d2                	slli	t2,t2,0x14
    656a:	0c09                	addi	s8,s8,2
    656c:	0100                	addi	s0,sp,128
    656e:	1905                	addi	s2,s2,-31
    6570:	0306                	slli	t1,t1,0x1
    6572:	0901                	addi	s2,s2,0
    6574:	0000                	unimp
    6576:	0501                	addi	a0,a0,0
    6578:	030d                	addi	t1,t1,3
    657a:	090a                	slli	s2,s2,0x2
    657c:	0004                	0x4
    657e:	0501                	addi	a0,a0,0
    6580:	0310                	addi	a2,sp,384
    6582:	0975                	addi	s2,s2,29
    6584:	0004                	0x4
    6586:	0501                	addi	a0,a0,0
    6588:	060d                	addi	a2,a2,3
    658a:	04090103          	lb	sp,64(s2)
    658e:	0100                	addi	s0,sp,128
    6590:	00090103          	lb	sp,0(s2)
    6594:	0100                	addi	s0,sp,128
    6596:	1905                	addi	s2,s2,-31
    6598:	0306                	slli	t1,t1,0x1
    659a:	097f                	0x97f
    659c:	0000                	unimp
    659e:	0501                	addi	a0,a0,0
    65a0:	0310                	addi	a2,sp,384
    65a2:	0901                	addi	s2,s2,0
    65a4:	0004                	0x4
    65a6:	0501                	addi	a0,a0,0
    65a8:	0611                	addi	a2,a2,4
    65aa:	04090203          	lb	tp,64(s2)
    65ae:	0100                	addi	s0,sp,128
    65b0:	1d05                	addi	s10,s10,-31
    65b2:	0306                	slli	t1,t1,0x1
    65b4:	0900                	addi	s0,sp,144
    65b6:	0000                	unimp
    65b8:	0501                	addi	a0,a0,0
    65ba:	0611                	addi	a2,a2,4
    65bc:	04090103          	lb	sp,64(s2)
    65c0:	0100                	addi	s0,sp,128
    65c2:	1705                	addi	a4,a4,-31
    65c4:	0306                	slli	t1,t1,0x1
    65c6:	0900                	addi	s0,sp,144
    65c8:	0000                	unimp
    65ca:	0501                	addi	a0,a0,0
    65cc:	0611                	addi	a2,a2,4
    65ce:	0900c703          	lbu	a4,144(ra)
    65d2:	0008                	0x8
    65d4:	0501                	addi	a0,a0,0
    65d6:	00030617          	auipc	a2,0x30
    65da:	0009                	c.nop	2
    65dc:	0100                	addi	s0,sp,128
    65de:	1105                	addi	sp,sp,-31
    65e0:	0306                	slli	t1,t1,0x1
    65e2:	00040903          	lb	s2,0(s0)
    65e6:	0501                	addi	a0,a0,0
    65e8:	0614                	addi	a3,sp,768
    65ea:	00090003          	lb	zero,0(s2)
    65ee:	0100                	addi	s0,sp,128
    65f0:	1305                	addi	t1,t1,-31
    65f2:	04096103          	0x4096103
    65f6:	0100                	addi	s0,sp,128
    65f8:	2905                	jal	6a28 <errpat+0x2a8>
    65fa:	04097a03          	0x4097a03
    65fe:	0100                	addi	s0,sp,128
    6600:	1405                	addi	s0,s0,-31
    6602:	04092503          	lw	a0,64(s2)
    6606:	0100                	addi	s0,sp,128
    6608:	1505                	addi	a0,a0,-31
    660a:	0306                	slli	t1,t1,0x1
    660c:	00040907          	vle8.v	v18,(s0),v0.t
    6610:	0501                	addi	a0,a0,0
    6612:	0311                	addi	t1,t1,4
    6614:	00097cdb          	0x97cdb
    6618:	0100                	addi	s0,sp,128
    661a:	0905                	addi	s2,s2,1
    661c:	00090203          	lb	tp,0(s2)
    6620:	0100                	addi	s0,sp,128
    6622:	0b05                	addi	s6,s6,1
    6624:	0306                	slli	t1,t1,0x1
    6626:	0902                	c.slli64	s2
    6628:	0000                	unimp
    662a:	0501                	addi	a0,a0,0
    662c:	0309                	addi	t1,t1,2
    662e:	0004097b          	0x4097b
    6632:	0501                	addi	a0,a0,0
    6634:	0310                	addi	a2,sp,384
    6636:	0008090b          	0x8090b
    663a:	0501                	addi	a0,a0,0
    663c:	0318                	addi	a4,sp,384
    663e:	097d                	addi	s2,s2,31
    6640:	0004                	0x4
    6642:	0301                	addi	t1,t1,0
    6644:	097c                	addi	a5,sp,156
    6646:	0004                	0x4
    6648:	0501                	addi	a0,a0,0
    664a:	0609                	addi	a2,a2,2
    664c:	04090103          	lb	sp,64(s2)
    6650:	0100                	addi	s0,sp,128
    6652:	00090203          	lb	tp,0(s2)
    6656:	0100                	addi	s0,sp,128
    6658:	1405                	addi	s0,s0,-31
    665a:	0306                	slli	t1,t1,0x1
    665c:	0901                	addi	s2,s2,0
    665e:	0000                	unimp
    6660:	0501                	addi	a0,a0,0
    6662:	030c                	addi	a1,sp,384
    6664:	097f                	0x97f
    6666:	0004                	0x4
    6668:	0501                	addi	a0,a0,0
    666a:	060d                	addi	a2,a2,3
    666c:	04090103          	lb	sp,64(s2)
    6670:	0100                	addi	s0,sp,128
    6672:	1805                	addi	a6,a6,-31
    6674:	0306                	slli	t1,t1,0x1
    6676:	0900                	addi	s0,sp,144
    6678:	0000                	unimp
    667a:	0601                	addi	a2,a2,0
    667c:	0c097903          	0xc097903
    6680:	0100                	addi	s0,sp,128
    6682:	1105                	addi	sp,sp,-31
    6684:	00090003          	lb	zero,0(s2)
    6688:	0100                	addi	s0,sp,128
    668a:	0505                	addi	a0,a0,1
    668c:	0306                	slli	t1,t1,0x1
    668e:	0900                	addi	s0,sp,144
    6690:	0000                	unimp
    6692:	0501                	addi	a0,a0,0
    6694:	0609                	addi	a2,a2,2
    6696:	08090203          	lb	tp,128(s2)
    669a:	0100                	addi	s0,sp,128
    669c:	0d05                	addi	s10,s10,1
    669e:	00090103          	lb	sp,0(s2)
    66a2:	0100                	addi	s0,sp,128
    66a4:	1805                	addi	a6,a6,-31
    66a6:	0306                	slli	t1,t1,0x1
    66a8:	0900                	addi	s0,sp,144
    66aa:	0000                	unimp
    66ac:	0501                	addi	a0,a0,0
    66ae:	0901030b          	0x901030b
    66b2:	0004                	0x4
    66b4:	0501                	addi	a0,a0,0
    66b6:	0318                	addi	a4,sp,384
    66b8:	097f                	0x97f
    66ba:	0004                	0x4
    66bc:	0501                	addi	a0,a0,0
    66be:	0314                	addi	a3,sp,384
    66c0:	0900                	addi	s0,sp,144
    66c2:	0004                	0x4
    66c4:	0501                	addi	a0,a0,0
    66c6:	0318                	addi	a4,sp,384
    66c8:	0900                	addi	s0,sp,144
    66ca:	0004                	0x4
    66cc:	0501                	addi	a0,a0,0
    66ce:	0609                	addi	a2,a2,2
    66d0:	04090103          	lb	sp,64(s2)
    66d4:	0100                	addi	s0,sp,128
    66d6:	00090203          	lb	tp,0(s2)
    66da:	0100                	addi	s0,sp,128
    66dc:	1405                	addi	s0,s0,-31
    66de:	0306                	slli	t1,t1,0x1
    66e0:	0901                	addi	s2,s2,0
    66e2:	0000                	unimp
    66e4:	0501                	addi	a0,a0,0
    66e6:	030c                	addi	a1,sp,384
    66e8:	097f                	0x97f
    66ea:	0004                	0x4
    66ec:	0501                	addi	a0,a0,0
    66ee:	060d                	addi	a2,a2,3
    66f0:	04090403          	lb	s0,64(s2)
    66f4:	0100                	addi	s0,sp,128
    66f6:	1005                	c.nop	-31
    66f8:	0306                	slli	t1,t1,0x1
    66fa:	0900                	addi	s0,sp,144
    66fc:	0000                	unimp
    66fe:	0501                	addi	a0,a0,0
    6700:	0611                	addi	a2,a2,4
    6702:	04090203          	lb	tp,64(s2)
    6706:	0100                	addi	s0,sp,128
    6708:	2705                	jal	6e28 <impure_data+0x258>
    670a:	0306                	slli	t1,t1,0x1
    670c:	0900                	addi	s0,sp,144
    670e:	0000                	unimp
    6710:	0501                	addi	a0,a0,0
    6712:	0324                	addi	s1,sp,392
    6714:	0900                	addi	s0,sp,144
    6716:	0018                	0x18
    6718:	0501                	addi	a0,a0,0
    671a:	031c                	addi	a5,sp,384
    671c:	0900                	addi	s0,sp,144
    671e:	0004                	0x4
    6720:	0501                	addi	a0,a0,0
    6722:	0611                	addi	a2,a2,4
    6724:	10090103          	lb	sp,256(s2)
    6728:	0100                	addi	s0,sp,128
    672a:	1c05                	addi	s8,s8,-31
    672c:	0306                	slli	t1,t1,0x1
    672e:	0900                	addi	s0,sp,144
    6730:	0000                	unimp
    6732:	0501                	addi	a0,a0,0
    6734:	09010327          	vsse8.v	v6,(sp),a6,v0.t
    6738:	000c                	0xc
    673a:	0501                	addi	a0,a0,0
    673c:	031c                	addi	a5,sp,384
    673e:	097f                	0x97f
    6740:	0004                	0x4
    6742:	0501                	addi	a0,a0,0
    6744:	0611                	addi	a2,a2,4
    6746:	04090103          	lb	sp,64(s2)
    674a:	0100                	addi	s0,sp,128
    674c:	2705                	jal	6e6c <impure_data+0x29c>
    674e:	0306                	slli	t1,t1,0x1
    6750:	0900                	addi	s0,sp,144
    6752:	0000                	unimp
    6754:	0501                	addi	a0,a0,0
    6756:	0324                	addi	s1,sp,392
    6758:	0900                	addi	s0,sp,144
    675a:	0004                	0x4
    675c:	0501                	addi	a0,a0,0
    675e:	031c                	addi	a5,sp,384
    6760:	0900                	addi	s0,sp,144
    6762:	0004                	0x4
    6764:	0501                	addi	a0,a0,0
    6766:	0318                	addi	a4,sp,384
    6768:	0900                	addi	s0,sp,144
    676a:	000c                	0xc
    676c:	0501                	addi	a0,a0,0
    676e:	031c                	addi	a5,sp,384
    6770:	0901                	addi	s2,s2,0
    6772:	0004                	0x4
    6774:	0301                	addi	t1,t1,0
    6776:	097f                	0x97f
    6778:	0004                	0x4
    677a:	0301                	addi	t1,t1,0
    677c:	0901                	addi	s2,s2,0
    677e:	0004                	0x4
    6780:	0501                	addi	a0,a0,0
    6782:	0318                	addi	a4,sp,384
    6784:	097f                	0x97f
    6786:	0004                	0x4
    6788:	0501                	addi	a0,a0,0
    678a:	0611                	addi	a2,a2,4
    678c:	04090103          	lb	sp,64(s2)
    6790:	0100                	addi	s0,sp,128
    6792:	1c05                	addi	s8,s8,-31
    6794:	0306                	slli	t1,t1,0x1
    6796:	0900                	addi	s0,sp,144
    6798:	0000                	unimp
    679a:	0501                	addi	a0,a0,0
    679c:	0318                	addi	a4,sp,384
    679e:	097f                	0x97f
    67a0:	0004                	0x4
    67a2:	0501                	addi	a0,a0,0
    67a4:	0314                	addi	a3,sp,384
    67a6:	0909                	addi	s2,s2,2
    67a8:	0010                	0x10
    67aa:	0501                	addi	a0,a0,0
    67ac:	031c                	addi	a5,sp,384
    67ae:	0978                	addi	a4,sp,156
    67b0:	0004                	0x4
    67b2:	0501                	addi	a0,a0,0
    67b4:	0318                	addi	a4,sp,384
    67b6:	097f                	0x97f
    67b8:	0004                	0x4
    67ba:	0501                	addi	a0,a0,0
    67bc:	060d                	addi	a2,a2,3
    67be:	0c090903          	lb	s2,192(s2)
    67c2:	0100                	addi	s0,sp,128
    67c4:	2005                	jal	67e4 <errpat+0x64>
    67c6:	0306                	slli	t1,t1,0x1
    67c8:	0900                	addi	s0,sp,144
    67ca:	0000                	unimp
    67cc:	0501                	addi	a0,a0,0
    67ce:	0318                	addi	a4,sp,384
    67d0:	0900                	addi	s0,sp,144
    67d2:	0004                	0x4
    67d4:	0601                	addi	a2,a2,0
    67d6:	10096903          	0x10096903
    67da:	0100                	addi	s0,sp,128
    67dc:	1105                	addi	sp,sp,-31
    67de:	00090003          	lb	zero,0(s2)
    67e2:	0100                	addi	s0,sp,128
    67e4:	0505                	addi	a0,a0,1
    67e6:	0306                	slli	t1,t1,0x1
    67e8:	0900                	addi	s0,sp,144
    67ea:	0000                	unimp
    67ec:	0601                	addi	a2,a2,0
    67ee:	08091b03          	lh	s6,128(s2)
    67f2:	0100                	addi	s0,sp,128
    67f4:	1005                	c.nop	-31
    67f6:	0306                	slli	t1,t1,0x1
    67f8:	0900                	addi	s0,sp,144
    67fa:	0000                	unimp
    67fc:	0501                	addi	a0,a0,0
    67fe:	02dc031b          	0x2dc031b
    6802:	0409                	addi	s0,s0,2
    6804:	0100                	addi	s0,sp,128
    6806:	0805                	addi	a6,a6,1
    6808:	097da403          	lw	s0,151(s11)
    680c:	0004                	0x4
    680e:	0501                	addi	a0,a0,0
    6810:	0103060f          	0x103060f
    6814:	0409                	addi	s0,s0,2
    6816:	0100                	addi	s0,sp,128
    6818:	1405                	addi	s0,s0,-31
    681a:	0306                	slli	t1,t1,0x1
    681c:	0901                	addi	s2,s2,0
    681e:	0004                	0x4
    6820:	0501                	addi	a0,a0,0
    6822:	031a                	slli	t1,t1,0x6
    6824:	097f                	0x97f
    6826:	0018                	0x18
    6828:	0501                	addi	a0,a0,0
    682a:	0311                	addi	t1,t1,4
    682c:	0901                	addi	s2,s2,0
    682e:	0004                	0x4
    6830:	0501                	addi	a0,a0,0
    6832:	031a                	slli	t1,t1,0x6
    6834:	097f                	0x97f
    6836:	0004                	0x4
    6838:	0501                	addi	a0,a0,0
    683a:	0316                	slli	t1,t1,0x5
    683c:	0904                	addi	s1,sp,144
    683e:	0008                	0x8
    6840:	0501                	addi	a0,a0,0
    6842:	0605                	addi	a2,a2,1
    6844:	04097e03          	0x4097e03
    6848:	0100                	addi	s0,sp,128
    684a:	1105                	addi	sp,sp,-31
    684c:	00090003          	lb	zero,0(s2)
    6850:	0100                	addi	s0,sp,128
    6852:	1005                	c.nop	-31
    6854:	0306                	slli	t1,t1,0x1
    6856:	0901                	addi	s2,s2,0
    6858:	0000                	unimp
    685a:	0501                	addi	a0,a0,0
    685c:	0901030b          	0x901030b
    6860:	0014                	0x14
    6862:	0501                	addi	a0,a0,0
    6864:	030d                	addi	t1,t1,3
    6866:	097f                	0x97f
    6868:	0004                	0x4
    686a:	0501                	addi	a0,a0,0
    686c:	0103060b          	0x103060b
    6870:	0409                	addi	s0,s0,2
    6872:	0100                	addi	s0,sp,128
    6874:	1005                	c.nop	-31
    6876:	0306                	slli	t1,t1,0x1
    6878:	0901                	addi	s2,s2,0
    687a:	0004                	0x4
    687c:	0501                	addi	a0,a0,0
    687e:	030d                	addi	t1,t1,3
    6880:	0900                	addi	s0,sp,144
    6882:	0018                	0x18
    6884:	0501                	addi	a0,a0,0
    6886:	0605                	addi	a2,a2,1
    6888:	04090203          	lb	tp,64(s2)
    688c:	0100                	addi	s0,sp,128
    688e:	1505                	addi	a0,a0,-31
    6890:	0306                	slli	t1,t1,0x1
    6892:	00090287          	vle8.v	v5,(s2),v0.t
    6896:	0100                	addi	s0,sp,128
    6898:	1e05                	addi	t3,t3,-31
    689a:	04090003          	lb	zero,64(s2)
    689e:	0100                	addi	s0,sp,128
    68a0:	1b05                	addi	s6,s6,-31
    68a2:	0306                	slli	t1,t1,0x1
    68a4:	0900                	addi	s0,sp,144
    68a6:	0004                	0x4
    68a8:	0501                	addi	a0,a0,0
    68aa:	0315                	addi	t1,t1,5
    68ac:	0900                	addi	s0,sp,144
    68ae:	0000                	unimp
    68b0:	0501                	addi	a0,a0,0
    68b2:	0605                	addi	a2,a2,1
    68b4:	00090003          	lb	zero,0(s2)
    68b8:	0100                	addi	s0,sp,128
    68ba:	1905                	addi	s2,s2,-31
    68bc:	0900c003          	lbu	zero,144(ra)
    68c0:	0008                	0x8
    68c2:	0501                	addi	a0,a0,0
    68c4:	0611                	addi	a2,a2,4
    68c6:	04090c03          	lb	s8,64(s2)
    68ca:	0100                	addi	s0,sp,128
    68cc:	1d05                	addi	s10,s10,-31
    68ce:	0306                	slli	t1,t1,0x1
    68d0:	0900                	addi	s0,sp,144
    68d2:	0000                	unimp
    68d4:	0501                	addi	a0,a0,0
    68d6:	0901031b          	0x901031b
    68da:	0004                	0x4
    68dc:	0501                	addi	a0,a0,0
    68de:	0314                	addi	a3,sp,384
    68e0:	097f                	0x97f
    68e2:	0004                	0x4
    68e4:	0501                	addi	a0,a0,0
    68e6:	0611                	addi	a2,a2,4
    68e8:	04090303          	lb	t1,64(s2)
    68ec:	0100                	addi	s0,sp,128
    68ee:	1a05                	addi	s4,s4,-31
    68f0:	0306                	slli	t1,t1,0x1
    68f2:	0900                	addi	s0,sp,144
    68f4:	0000                	unimp
    68f6:	0501                	addi	a0,a0,0
    68f8:	0315                	addi	t1,t1,5
    68fa:	0900                	addi	s0,sp,144
    68fc:	0004                	0x4
    68fe:	0501                	addi	a0,a0,0
    6900:	0329                	addi	t1,t1,10
    6902:	0900                	addi	s0,sp,144
    6904:	0004                	0x4
    6906:	0501                	addi	a0,a0,0
    6908:	031a                	slli	t1,t1,0x6
    690a:	0900                	addi	s0,sp,144
    690c:	0004                	0x4
    690e:	0501                	addi	a0,a0,0
    6910:	0611                	addi	a2,a2,4
    6912:	04090103          	lb	sp,64(s2)
    6916:	0100                	addi	s0,sp,128
    6918:	1705                	addi	a4,a4,-31
    691a:	00090003          	lb	zero,0(s2)
    691e:	0100                	addi	s0,sp,128
    6920:	1e05                	addi	t3,t3,-31
    6922:	0306                	slli	t1,t1,0x1
    6924:	7fb0                	flw	fa2,120(a5)
    6926:	0009                	c.nop	2
    6928:	0100                	addi	s0,sp,128
    692a:	1705                	addi	a4,a4,-31
    692c:	0900d003          	lhu	zero,144(ra)
    6930:	0004                	0x4
    6932:	0501                	addi	a0,a0,0
    6934:	031c                	addi	a5,sp,384
    6936:	0901                	addi	s2,s2,0
    6938:	0004                	0x4
    693a:	0501                	addi	a0,a0,0
    693c:	0315                	addi	t1,t1,5
    693e:	10097faf          	0x10097faf
    6942:	0100                	addi	s0,sp,128
    6944:	1905                	addi	s2,s2,-31
    6946:	0900d103          	lhu	sp,144(ra)
    694a:	0004                	0x4
    694c:	0501                	addi	a0,a0,0
    694e:	af03061b          	0xaf03061b
    6952:	097f                	0x97f
    6954:	0004                	0x4
    6956:	0501                	addi	a0,a0,0
    6958:	0315                	addi	t1,t1,5
    695a:	0900                	addi	s0,sp,144
    695c:	0000                	unimp
    695e:	0501                	addi	a0,a0,0
    6960:	0605                	addi	a2,a2,1
    6962:	00090003          	lb	zero,0(s2)
    6966:	0100                	addi	s0,sp,128
    6968:	1905                	addi	s2,s2,-31
    696a:	0900c003          	lbu	zero,144(ra)
    696e:	0008                	0x8
    6970:	0501                	addi	a0,a0,0
    6972:	0611                	addi	a2,a2,4
    6974:	04091503          	lh	a0,64(s2)
    6978:	0100                	addi	s0,sp,128
    697a:	1305                	addi	t1,t1,-31
    697c:	0306                	slli	t1,t1,0x1
    697e:	0900                	addi	s0,sp,144
    6980:	0000                	unimp
    6982:	0501                	addi	a0,a0,0
    6984:	0611                	addi	a2,a2,4
    6986:	08090103          	lb	sp,128(s2)
    698a:	0100                	addi	s0,sp,128
    698c:	1405                	addi	s0,s0,-31
    698e:	0306                	slli	t1,t1,0x1
    6990:	0900                	addi	s0,sp,144
    6992:	0000                	unimp
    6994:	0501                	addi	a0,a0,0
    6996:	0611                	addi	a2,a2,4
    6998:	04090203          	lb	tp,64(s2)
    699c:	0100                	addi	s0,sp,128
    699e:	0505                	addi	a0,a0,1
    69a0:	097bf103          	0x97bf103
    69a4:	0000                	unimp
    69a6:	0301                	addi	t1,t1,0
    69a8:	0901                	addi	s2,s2,0
    69aa:	0000                	unimp
    69ac:	0501                	addi	a0,a0,0
    69ae:	0312                	slli	t1,t1,0x4
    69b0:	0900                	addi	s0,sp,144
    69b2:	0000                	unimp
    69b4:	0501                	addi	a0,a0,0
    69b6:	0605                	addi	a2,a2,1
    69b8:	00090003          	lb	zero,0(s2)
    69bc:	0100                	addi	s0,sp,128
    69be:	1e05                	addi	t3,t3,-31
    69c0:	08090003          	lb	zero,128(s2)
    69c4:	0100                	addi	s0,sp,128
    69c6:	0905                	addi	s2,s2,1
    69c8:	0306                	slli	t1,t1,0x1
    69ca:	0901                	addi	s2,s2,0
    69cc:	0014                	0x14
    69ce:	0501                	addi	a0,a0,0
    69d0:	032a                	slli	t1,t1,0xa
    69d2:	097f                	0x97f
    69d4:	0000                	unimp
    69d6:	0501                	addi	a0,a0,0
    69d8:	0605                	addi	a2,a2,1
    69da:	00090003          	lb	zero,0(s2)
    69de:	0100                	addi	s0,sp,128
    69e0:	2a05                	jal	6b10 <__clz_tab+0x94>
    69e2:	04090003          	lb	zero,64(s2)
    69e6:	0100                	addi	s0,sp,128
    69e8:	1205                	addi	tp,tp,-31
    69ea:	0306                	slli	t1,t1,0x1
    69ec:	0900                	addi	s0,sp,144
    69ee:	0004                	0x4
    69f0:	0501                	addi	a0,a0,0
    69f2:	0605                	addi	a2,a2,1
    69f4:	00090003          	lb	zero,0(s2)
    69f8:	0100                	addi	s0,sp,128
    69fa:	0306                	slli	t1,t1,0x1
    69fc:	0902                	c.slli64	s2
    69fe:	0004                	0x4
    6a00:	0501                	addi	a0,a0,0
    6a02:	061d                	addi	a2,a2,7
    6a04:	09048d03          	lb	s10,144(s1)
    6a08:	0000                	unimp
    6a0a:	0501                	addi	a0,a0,0
    6a0c:	7bf3030f          	0x7bf3030f
    6a10:	0409                	addi	s0,s0,2
    6a12:	0100                	addi	s0,sp,128
    6a14:	1105                	addi	sp,sp,-31
    6a16:	0306                	slli	t1,t1,0x1
    6a18:	048d                	addi	s1,s1,3
    6a1a:	0409                	addi	s0,s0,2
    6a1c:	0100                	addi	s0,sp,128
    6a1e:	1405                	addi	s0,s0,-31
    6a20:	0306                	slli	t1,t1,0x1
    6a22:	0900                	addi	s0,sp,144
    6a24:	0000                	unimp
    6a26:	0501                	addi	a0,a0,0
    6a28:	0611                	addi	a2,a2,4
    6a2a:	04090303          	lb	t1,64(s2)
    6a2e:	0100                	addi	s0,sp,128
    6a30:	1d05                	addi	s10,s10,-31
    6a32:	00090003          	lb	zero,0(s2)
    6a36:	0100                	addi	s0,sp,128
    6a38:	1105                	addi	sp,sp,-31
    6a3a:	0306                	slli	t1,t1,0x1
    6a3c:	0900                	addi	s0,sp,144
    6a3e:	0000                	unimp
    6a40:	0501                	addi	a0,a0,0
    6a42:	0615                	addi	a2,a2,5
    6a44:	0c090103          	lb	sp,192(s2)
    6a48:	0100                	addi	s0,sp,128
    6a4a:	1e05                	addi	t3,t3,-31
    6a4c:	0306                	slli	t1,t1,0x1
    6a4e:	0900                	addi	s0,sp,144
    6a50:	0000                	unimp
    6a52:	0501                	addi	a0,a0,0
    6a54:	0320                	addi	s0,sp,392
    6a56:	0900                	addi	s0,sp,144
    6a58:	0004                	0x4
    6a5a:	0501                	addi	a0,a0,0
    6a5c:	0319                	addi	t1,t1,6
    6a5e:	0900                	addi	s0,sp,144
    6a60:	0004                	0x4
    6a62:	0501                	addi	a0,a0,0
    6a64:	031c                	addi	a5,sp,384
    6a66:	0900                	addi	s0,sp,144
    6a68:	0004                	0x4
    6a6a:	0501                	addi	a0,a0,0
    6a6c:	0626                	slli	a2,a2,0x9
    6a6e:	04097f03          	0x4097f03
    6a72:	0100                	addi	s0,sp,128
    6a74:	1d05                	addi	s10,s10,-31
    6a76:	00090003          	lb	zero,0(s2)
    6a7a:	0100                	addi	s0,sp,128
    6a7c:	1105                	addi	sp,sp,-31
    6a7e:	0306                	slli	t1,t1,0x1
    6a80:	0900                	addi	s0,sp,144
    6a82:	0000                	unimp
    6a84:	0501                	addi	a0,a0,0
    6a86:	0319                	addi	t1,t1,6
    6a88:	0901                	addi	s2,s2,0
    6a8a:	0004                	0x4
    6a8c:	0501                	addi	a0,a0,0
    6a8e:	01030617          	auipc	a2,0x1030
    6a92:	0409                	addi	s0,s0,2
    6a94:	0100                	addi	s0,sp,128
    6a96:	1e05                	addi	t3,t3,-31
    6a98:	0306                	slli	t1,t1,0x1
    6a9a:	7fa2                	flw	ft11,40(sp)
    6a9c:	0009                	c.nop	2
    6a9e:	0100                	addi	s0,sp,128
    6aa0:	1705                	addi	a4,a4,-31
    6aa2:	0900de03          	lhu	t3,144(ra)
    6aa6:	0004                	0x4
    6aa8:	0501                	addi	a0,a0,0
    6aaa:	031c                	addi	a5,sp,384
    6aac:	0901                	addi	s2,s2,0
    6aae:	0004                	0x4
    6ab0:	0501                	addi	a0,a0,0
    6ab2:	0319                	addi	t1,t1,6
    6ab4:	0900                	addi	s0,sp,144
    6ab6:	0014                	0x14
    6ab8:	0501                	addi	a0,a0,0
    6aba:	0315                	addi	t1,t1,5
    6abc:	7fa1                	lui	t6,0xfffe8
    6abe:	0409                	addi	s0,s0,2
    6ac0:	0100                	addi	s0,sp,128
    6ac2:	1b05                	addi	s6,s6,-31
    6ac4:	0306                	slli	t1,t1,0x1
    6ac6:	0900                	addi	s0,sp,144
    6ac8:	0004                	0x4
    6aca:	0501                	addi	a0,a0,0
    6acc:	0315                	addi	t1,t1,5
    6ace:	0900                	addi	s0,sp,144
    6ad0:	0000                	unimp
    6ad2:	0501                	addi	a0,a0,0
    6ad4:	0605                	addi	a2,a2,1
    6ad6:	00090003          	lb	zero,0(s2)
    6ada:	0100                	addi	s0,sp,128
    6adc:	1905                	addi	s2,s2,-31
    6ade:	0900c003          	lbu	zero,144(ra)
    6ae2:	0008                	0x8
    6ae4:	0501                	addi	a0,a0,0
    6ae6:	0611                	addi	a2,a2,4
    6ae8:	04092303          	lw	t1,64(s2)
    6aec:	0100                	addi	s0,sp,128
    6aee:	1405                	addi	s0,s0,-31
    6af0:	0306                	slli	t1,t1,0x1
    6af2:	0900                	addi	s0,sp,144
    6af4:	0000                	unimp
    6af6:	0501                	addi	a0,a0,0
    6af8:	0611                	addi	a2,a2,4
    6afa:	08090503          	lb	a0,128(s2)
    6afe:	0100                	addi	s0,sp,128
    6b00:	1705                	addi	a4,a4,-31
    6b02:	0306                	slli	t1,t1,0x1
    6b04:	0900                	addi	s0,sp,144
    6b06:	0000                	unimp
    6b08:	0501                	addi	a0,a0,0
    6b0a:	0315                	addi	t1,t1,5
    6b0c:	7f98                	flw	fa4,56(a5)
    6b0e:	1009                	c.nop	-30
    6b10:	0100                	addi	s0,sp,128
    6b12:	2d05                	jal	7142 <__bss_end+0xb2>
    6b14:	0900e903          	0x900e903
    6b18:	0004                	0x4
    6b1a:	0501                	addi	a0,a0,0
    6b1c:	097f0317          	auipc	t1,0x97f0
    6b20:	0004                	0x4
    6b22:	0501                	addi	a0,a0,0
    6b24:	0611                	addi	a2,a2,4
    6b26:	04090603          	lb	a2,64(s2)
    6b2a:	0100                	addi	s0,sp,128
    6b2c:	1e05                	addi	t3,t3,-31
    6b2e:	0306                	slli	t1,t1,0x1
    6b30:	7f92                	flw	ft11,36(sp)
    6b32:	0009                	c.nop	2
    6b34:	0100                	addi	s0,sp,128
    6b36:	1b05                	addi	s6,s6,-31
    6b38:	0306                	slli	t1,t1,0x1
    6b3a:	0900                	addi	s0,sp,144
    6b3c:	0004                	0x4
    6b3e:	0501                	addi	a0,a0,0
    6b40:	0315                	addi	t1,t1,5
    6b42:	0900                	addi	s0,sp,144
    6b44:	0000                	unimp
    6b46:	0501                	addi	a0,a0,0
    6b48:	0605                	addi	a2,a2,1
    6b4a:	00090003          	lb	zero,0(s2)
    6b4e:	0100                	addi	s0,sp,128
    6b50:	1205                	addi	tp,tp,-31
    6b52:	0306                	slli	t1,t1,0x1
    6b54:	08097de7          	0x8097de7
    6b58:	0100                	addi	s0,sp,128
    6b5a:	1505                	addi	a0,a0,-31
    6b5c:	0306                	slli	t1,t1,0x1
    6b5e:	0900                	addi	s0,sp,144
    6b60:	0000                	unimp
    6b62:	0501                	addi	a0,a0,0
    6b64:	0611                	addi	a2,a2,4
    6b66:	08090203          	lb	tp,128(s2)
    6b6a:	0100                	addi	s0,sp,128
    6b6c:	2705                	jal	728c <__bss_end+0x1fc>
    6b6e:	0306                	slli	t1,t1,0x1
    6b70:	0900                	addi	s0,sp,144
    6b72:	0000                	unimp
    6b74:	0501                	addi	a0,a0,0
    6b76:	0324                	addi	s1,sp,392
    6b78:	0900                	addi	s0,sp,144
    6b7a:	0018                	0x18
    6b7c:	0501                	addi	a0,a0,0
    6b7e:	031c                	addi	a5,sp,384
    6b80:	0900                	addi	s0,sp,144
    6b82:	0004                	0x4
    6b84:	0301                	addi	t1,t1,0
    6b86:	0901                	addi	s2,s2,0
    6b88:	000c                	0xc
    6b8a:	0301                	addi	t1,t1,0
    6b8c:	097f                	0x97f
    6b8e:	0004                	0x4
    6b90:	0501                	addi	a0,a0,0
    6b92:	0611                	addi	a2,a2,4
    6b94:	04090103          	lb	sp,64(s2)
    6b98:	0100                	addi	s0,sp,128
    6b9a:	1c05                	addi	s8,s8,-31
    6b9c:	0306                	slli	t1,t1,0x1
    6b9e:	0900                	addi	s0,sp,144
    6ba0:	0000                	unimp
    6ba2:	0501                	addi	a0,a0,0
    6ba4:	0314                	addi	a3,sp,384
    6ba6:	00080903          	lb	s2,0(a6) # fffeb000 <RAM_SIZE+0xfffdb000>
    6baa:	0501                	addi	a0,a0,0
    6bac:	0318                	addi	a4,sp,384
    6bae:	097c                	addi	a5,sp,156
    6bb0:	0008                	0x8
    6bb2:	0501                	addi	a0,a0,0
    6bb4:	0314                	addi	a3,sp,384
    6bb6:	0904                	addi	s1,sp,144
    6bb8:	0004                	0x4
    6bba:	0501                	addi	a0,a0,0
    6bbc:	031c                	addi	a5,sp,384
    6bbe:	097d                	addi	s2,s2,31
    6bc0:	0008                	0x8
    6bc2:	0501                	addi	a0,a0,0
    6bc4:	0314                	addi	a3,sp,384
    6bc6:	00040903          	lb	s2,0(s0)
    6bca:	0501                	addi	a0,a0,0
    6bcc:	0309                	addi	t1,t1,2
    6bce:	7ee5                	lui	t4,0xffff9
    6bd0:	1009                	c.nop	-30
    6bd2:	0100                	addi	s0,sp,128
    6bd4:	0b05                	addi	s6,s6,1
    6bd6:	04090103          	lb	sp,64(s2)
    6bda:	0100                	addi	s0,sp,128
    6bdc:	0905                	addi	s2,s2,1
    6bde:	0306                	slli	t1,t1,0x1
    6be0:	0901                	addi	s2,s2,0
    6be2:	0004                	0x4
    6be4:	0501                	addi	a0,a0,0
    6be6:	0003060f          	0x3060f
    6bea:	0009                	c.nop	2
    6bec:	0100                	addi	s0,sp,128
    6bee:	1c05                	addi	s8,s8,-31
    6bf0:	08090003          	lb	zero,128(s2)
    6bf4:	0100                	addi	s0,sp,128
    6bf6:	0f05                	addi	t5,t5,1
    6bf8:	04090003          	lb	zero,64(s2)
    6bfc:	0100                	addi	s0,sp,128
    6bfe:	1405                	addi	s0,s0,-31
    6c00:	04090003          	lb	zero,64(s2)
    6c04:	0100                	addi	s0,sp,128
    6c06:	0c05                	addi	s8,s8,1
    6c08:	04097f03          	0x4097f03
    6c0c:	0100                	addi	s0,sp,128
    6c0e:	0b05                	addi	s6,s6,1
    6c10:	04090103          	lb	sp,64(s2)
    6c14:	0100                	addi	s0,sp,128
    6c16:	0306                	slli	t1,t1,0x1
    6c18:	097f                	0x97f
    6c1a:	0004                	0x4
    6c1c:	0501                	addi	a0,a0,0
    6c1e:	060c                	addi	a1,sp,768
    6c20:	00090003          	lb	zero,0(s2)
    6c24:	0100                	addi	s0,sp,128
    6c26:	0b05                	addi	s6,s6,1
    6c28:	04090003          	lb	zero,64(s2)
    6c2c:	0100                	addi	s0,sp,128
    6c2e:	0d05                	addi	s10,s10,1
    6c30:	0306                	slli	t1,t1,0x1
    6c32:	080903e7          	jalr	t2,128(s2)
    6c36:	0100                	addi	s0,sp,128
    6c38:	1105                	addi	sp,sp,-31
    6c3a:	08097d03          	0x8097d03
    6c3e:	0100                	addi	s0,sp,128
    6c40:	08090103          	lb	sp,128(s2)
    6c44:	0100                	addi	s0,sp,128
    6c46:	0d05                	addi	s10,s10,1
    6c48:	0306                	slli	t1,t1,0x1
    6c4a:	0908                	addi	a0,sp,144
    6c4c:	0000                	unimp
    6c4e:	0501                	addi	a0,a0,0
    6c50:	0978031b          	0x978031b
    6c54:	0010                	0x10
    6c56:	0501                	addi	a0,a0,0
    6c58:	060d                	addi	a2,a2,3
    6c5a:	04090203          	lb	tp,64(s2)
    6c5e:	0100                	addi	s0,sp,128
    6c60:	1505                	addi	a0,a0,-31
    6c62:	08093b03          	0x8093b03
    6c66:	0100                	addi	s0,sp,128
    6c68:	0505                	addi	a0,a0,1
    6c6a:	097cc003          	lbu	zero,151(s9) # 809d59b <RAM_SIZE+0x808d59b>
    6c6e:	0000                	unimp
    6c70:	0301                	addi	t1,t1,0
    6c72:	0901                	addi	s2,s2,0
    6c74:	0000                	unimp
    6c76:	0301                	addi	t1,t1,0
    6c78:	0901                	addi	s2,s2,0
    6c7a:	0000                	unimp
    6c7c:	0301                	addi	t1,t1,0
    6c7e:	0902                	c.slli64	s2
    6c80:	0000                	unimp
    6c82:	0501                	addi	a0,a0,0
    6c84:	060e                	slli	a2,a2,0x3
    6c86:	00090003          	lb	zero,0(s2)
    6c8a:	0100                	addi	s0,sp,128
    6c8c:	0b05                	addi	s6,s6,1
    6c8e:	04097d03          	0x4097d03
    6c92:	0100                	addi	s0,sp,128
    6c94:	0805                	addi	a6,a6,1
    6c96:	04090303          	lb	t1,64(s2)
    6c9a:	0100                	addi	s0,sp,128
    6c9c:	0d05                	addi	s10,s10,1
    6c9e:	04090103          	lb	sp,64(s2)
    6ca2:	0100                	addi	s0,sp,128
    6ca4:	0505                	addi	a0,a0,1
    6ca6:	0306                	slli	t1,t1,0x1
    6ca8:	0901                	addi	s2,s2,0
    6caa:	0008                	0x8
    6cac:	0301                	addi	t1,t1,0
    6cae:	0901                	addi	s2,s2,0
    6cb0:	0000                	unimp
    6cb2:	0501                	addi	a0,a0,0
    6cb4:	0311                	addi	t1,t1,4
    6cb6:	0900                	addi	s0,sp,144
    6cb8:	0000                	unimp
    6cba:	0501                	addi	a0,a0,0
    6cbc:	0309                	addi	t1,t1,2
    6cbe:	0902                	c.slli64	s2
    6cc0:	0000                	unimp
    6cc2:	0501                	addi	a0,a0,0
    6cc4:	0618                	addi	a4,sp,768
    6cc6:	08090103          	lb	sp,128(s2)
    6cca:	0100                	addi	s0,sp,128
    6ccc:	0905                	addi	s2,s2,1
    6cce:	0306                	slli	t1,t1,0x1
    6cd0:	097f                	0x97f
    6cd2:	0008                	0x8
    6cd4:	0501                	addi	a0,a0,0
    6cd6:	030d                	addi	t1,t1,3
    6cd8:	0901                	addi	s2,s2,0
    6cda:	0000                	unimp
    6cdc:	0501                	addi	a0,a0,0
    6cde:	0618                	addi	a4,sp,768
    6ce0:	00090003          	lb	zero,0(s2)
    6ce4:	0100                	addi	s0,sp,128
    6ce6:	0905                	addi	s2,s2,1
    6ce8:	0306                	slli	t1,t1,0x1
    6cea:	0901                	addi	s2,s2,0
    6cec:	0004                	0x4
    6cee:	0501                	addi	a0,a0,0
    6cf0:	061e                	slli	a2,a2,0x7
    6cf2:	00090003          	lb	zero,0(s2)
    6cf6:	0100                	addi	s0,sp,128
    6cf8:	0505                	addi	a0,a0,1
    6cfa:	04097c03          	0x4097c03
    6cfe:	0100                	addi	s0,sp,128
    6d00:	2205                	jal	6e20 <impure_data+0x250>
    6d02:	08090403          	lb	s0,128(s2)
    6d06:	0100                	addi	s0,sp,128
    6d08:	04090103          	lb	sp,64(s2)
    6d0c:	0100                	addi	s0,sp,128
    6d0e:	1905                	addi	s2,s2,-31
    6d10:	04097f03          	0x4097f03
    6d14:	0100                	addi	s0,sp,128
    6d16:	04090103          	lb	sp,64(s2)
    6d1a:	0100                	addi	s0,sp,128
    6d1c:	1405                	addi	s0,s0,-31
    6d1e:	04097f03          	0x4097f03
    6d22:	0100                	addi	s0,sp,128
    6d24:	04090103          	lb	sp,64(s2)
    6d28:	0100                	addi	s0,sp,128
    6d2a:	04097f03          	0x4097f03
    6d2e:	0100                	addi	s0,sp,128
    6d30:	0905                	addi	s2,s2,1
    6d32:	0306                	slli	t1,t1,0x1
    6d34:	0901                	addi	s2,s2,0
    6d36:	0004                	0x4
    6d38:	0501                	addi	a0,a0,0
    6d3a:	0614                	addi	a3,sp,768
    6d3c:	00090003          	lb	zero,0(s2)
    6d40:	0100                	addi	s0,sp,128
    6d42:	1805                	addi	a6,a6,-31
    6d44:	0306                	slli	t1,t1,0x1
    6d46:	0004097b          	0x4097b
    6d4a:	0501                	addi	a0,a0,0
    6d4c:	0311                	addi	t1,t1,4
    6d4e:	0900                	addi	s0,sp,144
    6d50:	0000                	unimp
    6d52:	0501                	addi	a0,a0,0
    6d54:	0605                	addi	a2,a2,1
    6d56:	00090003          	lb	zero,0(s2)
    6d5a:	0100                	addi	s0,sp,128
    6d5c:	0306                	slli	t1,t1,0x1
    6d5e:	0908                	addi	a0,sp,144
    6d60:	0004                	0x4
    6d62:	0501                	addi	a0,a0,0
    6d64:	0610                	addi	a2,sp,768
    6d66:	00090003          	lb	zero,0(s2)
    6d6a:	0100                	addi	s0,sp,128
    6d6c:	1b05                	addi	s6,s6,-31
    6d6e:	09038903          	lb	s2,144(t2)
    6d72:	0004                	0x4
    6d74:	0501                	addi	a0,a0,0
    6d76:	0308                	addi	a0,sp,384
    6d78:	04097cf7          	0x4097cf7
    6d7c:	0100                	addi	s0,sp,128
    6d7e:	0f05                	addi	t5,t5,1
    6d80:	0306                	slli	t1,t1,0x1
    6d82:	0901                	addi	s2,s2,0
    6d84:	0004                	0x4
    6d86:	0501                	addi	a0,a0,0
    6d88:	0614                	addi	a3,sp,768
    6d8a:	08090103          	lb	sp,128(s2)
    6d8e:	0100                	addi	s0,sp,128
    6d90:	1a05                	addi	s4,s4,-31
    6d92:	04097f03          	0x4097f03
    6d96:	0100                	addi	s0,sp,128
    6d98:	1405                	addi	s0,s0,-31
    6d9a:	04090103          	lb	sp,64(s2)
    6d9e:	0100                	addi	s0,sp,128
    6da0:	1a05                	addi	s4,s4,-31
    6da2:	0c097f03          	0xc097f03
    6da6:	0100                	addi	s0,sp,128
    6da8:	1405                	addi	s0,s0,-31
    6daa:	04090103          	lb	sp,64(s2)
    6dae:	0100                	addi	s0,sp,128
    6db0:	1605                	addi	a2,a2,-31
    6db2:	04090303          	lb	t1,64(s2)
    6db6:	0100                	addi	s0,sp,128
    6db8:	1105                	addi	sp,sp,-31
    6dba:	04097d03          	0x4097d03
    6dbe:	0100                	addi	s0,sp,128
    6dc0:	1605                	addi	a2,a2,-31
    6dc2:	04090303          	lb	t1,64(s2)
    6dc6:	0100                	addi	s0,sp,128
    6dc8:	1005                	c.nop	-31
    6dca:	04097f03          	0x4097f03
    6dce:	0100                	addi	s0,sp,128
    6dd0:	0505                	addi	a0,a0,1
    6dd2:	0306                	slli	t1,t1,0x1
    6dd4:	097f                	0x97f
    6dd6:	0010                	0x10
    6dd8:	0501                	addi	a0,a0,0
    6dda:	0311                	addi	t1,t1,4
    6ddc:	0900                	addi	s0,sp,144
    6dde:	0000                	unimp
    6de0:	0501                	addi	a0,a0,0
    6de2:	0610                	addi	a2,sp,768
    6de4:	00090103          	lb	sp,0(s2)
    6de8:	0100                	addi	s0,sp,128
    6dea:	0b05                	addi	s6,s6,1
    6dec:	04090103          	lb	sp,64(s2)
    6df0:	0100                	addi	s0,sp,128
    6df2:	1005                	c.nop	-31
    6df4:	04097f03          	0x4097f03
    6df8:	0100                	addi	s0,sp,128
    6dfa:	0d05                	addi	s10,s10,1
    6dfc:	04090003          	lb	zero,64(s2)
    6e00:	0100                	addi	s0,sp,128
    6e02:	0b05                	addi	s6,s6,1
    6e04:	0306                	slli	t1,t1,0x1
    6e06:	0901                	addi	s2,s2,0
    6e08:	0004                	0x4
    6e0a:	0501                	addi	a0,a0,0
    6e0c:	0610                	addi	a2,sp,768
    6e0e:	04090103          	lb	sp,64(s2)
    6e12:	0100                	addi	s0,sp,128
    6e14:	0d05                	addi	s10,s10,1
    6e16:	20090003          	lb	zero,512(s2)
    6e1a:	0100                	addi	s0,sp,128
    6e1c:	0505                	addi	a0,a0,1
    6e1e:	0306                	slli	t1,t1,0x1
    6e20:	0902                	c.slli64	s2
    6e22:	0004                	0x4
    6e24:	0501                	addi	a0,a0,0
    6e26:	0615                	addi	a2,a2,5
    6e28:	0902b403          	0x902b403
    6e2c:	0000                	unimp
    6e2e:	0501                	addi	a0,a0,0
    6e30:	031e                	slli	t1,t1,0x7
    6e32:	0900                	addi	s0,sp,144
    6e34:	0004                	0x4
    6e36:	0501                	addi	a0,a0,0
    6e38:	0003061b          	0x3061b
    6e3c:	0409                	addi	s0,s0,2
    6e3e:	0100                	addi	s0,sp,128
    6e40:	1505                	addi	a0,a0,-31
    6e42:	00090003          	lb	zero,0(s2)
    6e46:	0100                	addi	s0,sp,128
    6e48:	0505                	addi	a0,a0,1
    6e4a:	0306                	slli	t1,t1,0x1
    6e4c:	0900                	addi	s0,sp,144
    6e4e:	0000                	unimp
    6e50:	0501                	addi	a0,a0,0
    6e52:	0310                	addi	a2,sp,384
    6e54:	08097df7          	0x8097df7
    6e58:	0100                	addi	s0,sp,128
    6e5a:	1105                	addi	sp,sp,-31
    6e5c:	0306                	slli	t1,t1,0x1
    6e5e:	03ae                	slli	t2,t2,0xb
    6e60:	0c09                	addi	s8,s8,2
    6e62:	0100                	addi	s0,sp,128
    6e64:	1505                	addi	a0,a0,-31
    6e66:	0306                	slli	t1,t1,0x1
    6e68:	0900                	addi	s0,sp,144
    6e6a:	0000                	unimp
    6e6c:	0501                	addi	a0,a0,0
    6e6e:	031c                	addi	a5,sp,384
    6e70:	0901                	addi	s2,s2,0
    6e72:	000c                	0xc
    6e74:	0501                	addi	a0,a0,0
    6e76:	0315                	addi	t1,t1,5
    6e78:	097f                	0x97f
    6e7a:	0004                	0x4
    6e7c:	0601                	addi	a2,a2,0
    6e7e:	04090103          	lb	sp,64(s2)
    6e82:	0100                	addi	s0,sp,128
    6e84:	097fbf03          	0x97fbf03
    6e88:	0004                	0x4
    6e8a:	0301                	addi	t1,t1,0
    6e8c:	0901                	addi	s2,s2,0
    6e8e:	0000                	unimp
    6e90:	0501                	addi	a0,a0,0
    6e92:	0003061b          	0x3061b
    6e96:	0009                	c.nop	2
    6e98:	0100                	addi	s0,sp,128
    6e9a:	2105                	jal	72ba <__bss_end+0x22a>
    6e9c:	04097f03          	0x4097f03
    6ea0:	0100                	addi	s0,sp,128
    6ea2:	1705                	addi	a4,a4,-31
    6ea4:	08097203          	0x8097203
    6ea8:	0100                	addi	s0,sp,128
    6eaa:	1b05                	addi	s6,s6,-31
    6eac:	0306                	slli	t1,t1,0x1
    6eae:	0976                	slli	s2,s2,0x1d
    6eb0:	000c                	0xc
    6eb2:	0501                	addi	a0,a0,0
    6eb4:	0620                	addi	s0,sp,776
    6eb6:	04090103          	lb	sp,64(s2)
    6eba:	0100                	addi	s0,sp,128
    6ebc:	1d05                	addi	s10,s10,-31
    6ebe:	0c090003          	lb	zero,192(s2)
    6ec2:	0100                	addi	s0,sp,128
    6ec4:	2005                	jal	6ee4 <impure_data+0x314>
    6ec6:	04090003          	lb	zero,64(s2)
    6eca:	0100                	addi	s0,sp,128
    6ecc:	1d05                	addi	s10,s10,-31
    6ece:	04090003          	lb	zero,64(s2)
    6ed2:	0100                	addi	s0,sp,128
    6ed4:	1b05                	addi	s6,s6,-31
    6ed6:	0306                	slli	t1,t1,0x1
    6ed8:	090c                	addi	a1,sp,144
    6eda:	0008                	0x8
    6edc:	0501                	addi	a0,a0,0
    6ede:	062d                	addi	a2,a2,11
    6ee0:	00090003          	lb	zero,0(s2)
    6ee4:	0100                	addi	s0,sp,128
    6ee6:	1b05                	addi	s6,s6,-31
    6ee8:	04090003          	lb	zero,64(s2)
    6eec:	0100                	addi	s0,sp,128
    6eee:	2005                	jal	6f0e <impure_data+0x33e>
    6ef0:	04090103          	lb	sp,64(s2)
    6ef4:	0100                	addi	s0,sp,128
    6ef6:	1d05                	addi	s10,s10,-31
    6ef8:	1c090003          	lb	zero,448(s2)
    6efc:	0100                	addi	s0,sp,128
    6efe:	1105                	addi	sp,sp,-31
    6f00:	0306                	slli	t1,t1,0x1
    6f02:	0935                	addi	s2,s2,13
    6f04:	0010                	0x10
    6f06:	0501                	addi	a0,a0,0
    6f08:	00030617          	auipc	a2,0x30
    6f0c:	0009                	c.nop	2
    6f0e:	0100                	addi	s0,sp,128
    6f10:	0e05                	addi	t3,t3,1
    6f12:	097fb703          	0x97fb703
    6f16:	0004                	0x4
    6f18:	0501                	addi	a0,a0,0
    6f1a:	0609                	addi	a2,a2,2
    6f1c:	0900e503          	0x900e503
    6f20:	0004                	0x4
    6f22:	0501                	addi	a0,a0,0
    6f24:	0629                	addi	a2,a2,10
    6f26:	097fa303          	lw	t1,151(t6) # fffe8097 <RAM_SIZE+0xfffd8097>
    6f2a:	0000                	unimp
    6f2c:	0501                	addi	a0,a0,0
    6f2e:	060d                	addi	a2,a2,3
    6f30:	0900e203          	0x900e203
    6f34:	0004                	0x4
    6f36:	0501                	addi	a0,a0,0
    6f38:	0203060f          	0x203060f
    6f3c:	0009                	c.nop	2
    6f3e:	0100                	addi	s0,sp,128
    6f40:	0905                	addi	s2,s2,1
    6f42:	0306                	slli	t1,t1,0x1
    6f44:	0900                	addi	s0,sp,144
    6f46:	0008                	0x8
    6f48:	0501                	addi	a0,a0,0
    6f4a:	0003060f          	0x3060f
    6f4e:	0009                	c.nop	2
    6f50:	0100                	addi	s0,sp,128
    6f52:	1505                	addi	a0,a0,-31
    6f54:	097ecd03          	lbu	s10,151(t4) # ffff9097 <RAM_SIZE+0xfffe9097>
    6f58:	0008                	0x8
    6f5a:	0501                	addi	a0,a0,0
    6f5c:	01b3030f          	0x1b3030f
    6f60:	0409                	addi	s0,s0,2
    6f62:	0100                	addi	s0,sp,128
    6f64:	1e05                	addi	t3,t3,-31
    6f66:	097ecd03          	lbu	s10,151(t4)
    6f6a:	0004                	0x4
    6f6c:	0501                	addi	a0,a0,0
    6f6e:	0003061b          	0x3061b
    6f72:	0409                	addi	s0,s0,2
    6f74:	0100                	addi	s0,sp,128
    6f76:	1505                	addi	a0,a0,-31
    6f78:	00090003          	lb	zero,0(s2)
    6f7c:	0100                	addi	s0,sp,128
    6f7e:	0505                	addi	a0,a0,1
    6f80:	0306                	slli	t1,t1,0x1
    6f82:	0900                	addi	s0,sp,144
    6f84:	0000                	unimp
    6f86:	0501                	addi	a0,a0,0
    6f88:	0611                	addi	a2,a2,4
    6f8a:	09018803          	lb	a6,144(gp) # 7420 <__global_pointer$+0x90>
    6f8e:	0008                	0x8
    6f90:	0501                	addi	a0,a0,0
    6f92:	00030617          	auipc	a2,0x30
    6f96:	0009                	c.nop	2
    6f98:	0100                	addi	s0,sp,128
    6f9a:	1605                	addi	a2,a2,-31
    6f9c:	04090303          	lb	t1,64(s2)
    6fa0:	0100                	addi	s0,sp,128
    6fa2:	1105                	addi	sp,sp,-31
    6fa4:	0306                	slli	t1,t1,0x1
    6fa6:	0979                	addi	s2,s2,30
    6fa8:	0008                	0x8
    6faa:	0301                	addi	t1,t1,0
    6fac:	0901                	addi	s2,s2,0
    6fae:	0000                	unimp
    6fb0:	0501                	addi	a0,a0,0
    6fb2:	0616                	slli	a2,a2,0x5
    6fb4:	00097f03          	0x97f03
    6fb8:	0100                	addi	s0,sp,128
    6fba:	1105                	addi	sp,sp,-31
    6fbc:	04090103          	lb	sp,64(s2)
    6fc0:	0100                	addi	s0,sp,128
    6fc2:	1305                	addi	t1,t1,-31
    6fc4:	04095003          	lhu	zero,64(s2)
    6fc8:	0100                	addi	s0,sp,128
    6fca:	2905                	jal	73fa <__global_pointer$+0x6a>
    6fcc:	04097a03          	0x4097a03
    6fd0:	0100                	addi	s0,sp,128
    6fd2:	0e05                	addi	t3,t3,1
    6fd4:	097fb103          	0x97fb103
    6fd8:	000c                	0xc
    6fda:	0501                	addi	a0,a0,0
    6fdc:	0611                	addi	a2,a2,4
    6fde:	09019003          	lh	zero,144(gp) # 7420 <__global_pointer$+0x90>
    6fe2:	000c                	0xc
    6fe4:	0501                	addi	a0,a0,0
    6fe6:	00030617          	auipc	a2,0x30
    6fea:	0009                	c.nop	2
    6fec:	0100                	addi	s0,sp,128
    6fee:	0905                	addi	s2,s2,1
    6ff0:	0306                	slli	t1,t1,0x1
    6ff2:	091c                	addi	a5,sp,144
    6ff4:	0004                	0x4
    6ff6:	0501                	addi	a0,a0,0
    6ff8:	0629                	addi	a2,a2,10
    6ffa:	097fa303          	lw	t1,151(t6)
    6ffe:	0000                	unimp
    7000:	0501                	addi	a0,a0,0
    7002:	030e                	slli	t1,t1,0x3
    7004:	0978                	addi	a4,sp,156
    7006:	0008                	0x8
    7008:	0501                	addi	a0,a0,0
    700a:	0316                	slli	t1,t1,0x5
    700c:	00c4                	addi	s1,sp,68
    700e:	0809                	addi	a6,a6,2
    7010:	0100                	addi	s0,sp,128
    7012:	1105                	addi	sp,sp,-31
    7014:	097fbe03          	0x97fbe03
    7018:	0008                	0x8
    701a:	0501                	addi	a0,a0,0
    701c:	0609                	addi	a2,a2,2
    701e:	0900e303          	0x900e303
    7022:	0008                	0x8
    7024:	0501                	addi	a0,a0,0
    7026:	0629                	addi	a2,a2,10
    7028:	097fa303          	lw	t1,151(t6)
    702c:	0000                	unimp
    702e:	0501                	addi	a0,a0,0
    7030:	0611                	addi	a2,a2,4
    7032:	10093503          	0x10093503
    7036:	0100                	addi	s0,sp,128
    7038:	00090103          	lb	sp,0(s2)
    703c:	0100                	addi	s0,sp,128
    703e:	0905                	addi	s2,s2,1
    7040:	00092703          	lw	a4,0(s2)
    7044:	0100                	addi	s0,sp,128
    7046:	2905                	jal	7476 <__global_pointer$+0xe6>
    7048:	0306                	slli	t1,t1,0x1
    704a:	00097fa3          	0x97fa3
    704e:	0100                	addi	s0,sp,128
    7050:	1605                	addi	a2,a2,-31
    7052:	08093503          	0x8093503
    7056:	0100                	addi	s0,sp,128
    7058:	1105                	addi	sp,sp,-31
    705a:	0306                	slli	t1,t1,0x1
    705c:	096d                	addi	s2,s2,27
    705e:	0008                	0x8
    7060:	0501                	addi	a0,a0,0
    7062:	64030613          	addi	a2,t1,1600 # 97f715c <RAM_SIZE+0x97e715c>
    7066:	0009                	c.nop	2
    7068:	0100                	addi	s0,sp,128
    706a:	1705                	addi	a4,a4,-31
    706c:	04091c03          	lh	s8,64(s2)
    7070:	0100                	addi	s0,sp,128
    7072:	1105                	addi	sp,sp,-31
    7074:	0306                	slli	t1,t1,0x1
    7076:	00040903          	lb	s2,0(s0)
    707a:	0501                	addi	a0,a0,0
    707c:	0629                	addi	a2,a2,10
    707e:	00095b03          	lhu	s6,0(s2)
    7082:	0100                	addi	s0,sp,128
    7084:	0905                	addi	s2,s2,1
    7086:	0306                	slli	t1,t1,0x1
    7088:	00dd                	addi	ra,ra,23
    708a:	0c09                	addi	s8,s8,2
    708c:	0100                	addi	s0,sp,128
    708e:	2905                	jal	74be <__global_pointer$+0x12e>
    7090:	0306                	slli	t1,t1,0x1
    7092:	00097fa3          	0x97fa3
    7096:	0100                	addi	s0,sp,128
    7098:	1605                	addi	a2,a2,-31
    709a:	08093c03          	0x8093c03
    709e:	0100                	addi	s0,sp,128
    70a0:	1105                	addi	sp,sp,-31
    70a2:	0306                	slli	t1,t1,0x1
    70a4:	097d                	addi	s2,s2,31
    70a6:	0008                	0x8
    70a8:	0501                	addi	a0,a0,0
    70aa:	00030617          	auipc	a2,0x30
    70ae:	0009                	c.nop	2
    70b0:	0100                	addi	s0,sp,128
    70b2:	0905                	addi	s2,s2,1
    70b4:	0306                	slli	t1,t1,0x1
    70b6:	0924                	addi	s1,sp,152
    70b8:	0004                	0x4
    70ba:	0501                	addi	a0,a0,0
    70bc:	0629                	addi	a2,a2,10
    70be:	097fa303          	lw	t1,151(t6)
    70c2:	0000                	unimp
    70c4:	0501                	addi	a0,a0,0
    70c6:	0316                	slli	t1,t1,0x5
    70c8:	093c                	addi	a5,sp,152
    70ca:	0008                	0x8
    70cc:	0501                	addi	a0,a0,0
    70ce:	0605                	addi	a2,a2,1
    70d0:	097bc103          	lbu	sp,151(s7)
    70d4:	0008                	0x8
    70d6:	0501                	addi	a0,a0,0
    70d8:	0311                	addi	t1,t1,4
    70da:	048d                	addi	s1,s1,3
    70dc:	0009                	c.nop	2
    70de:	0100                	addi	s0,sp,128
    70e0:	1d05                	addi	s10,s10,-31
    70e2:	0306                	slli	t1,t1,0x1
    70e4:	0900                	addi	s0,sp,144
    70e6:	0000                	unimp
    70e8:	0501                	addi	a0,a0,0
    70ea:	0314                	addi	a3,sp,384
    70ec:	0900                	addi	s0,sp,144
    70ee:	0004                	0x4
    70f0:	0501                	addi	a0,a0,0
    70f2:	7bf3030f          	0x7bf3030f
    70f6:	0409                	addi	s0,s0,2
    70f8:	0100                	addi	s0,sp,128
    70fa:	1105                	addi	sp,sp,-31
    70fc:	0306                	slli	t1,t1,0x1
    70fe:	08090483          	lb	s1,128(s2)
    7102:	0100                	addi	s0,sp,128
    7104:	1a05                	addi	s4,s4,-31
    7106:	0306                	slli	t1,t1,0x1
    7108:	0900                	addi	s0,sp,144
    710a:	0000                	unimp
    710c:	0501                	addi	a0,a0,0
    710e:	0315                	addi	t1,t1,5
    7110:	0900                	addi	s0,sp,144
    7112:	0004                	0x4
    7114:	0501                	addi	a0,a0,0
    7116:	0329                	addi	t1,t1,10
    7118:	0900                	addi	s0,sp,144
    711a:	0004                	0x4
    711c:	0501                	addi	a0,a0,0
    711e:	031a                	slli	t1,t1,0x6
    7120:	0900                	addi	s0,sp,144
    7122:	0004                	0x4
    7124:	0501                	addi	a0,a0,0
    7126:	0611                	addi	a2,a2,4
    7128:	04090103          	lb	sp,64(s2)
    712c:	0100                	addi	s0,sp,128
    712e:	1705                	addi	a4,a4,-31
    7130:	00090003          	lb	zero,0(s2)
    7134:	0100                	addi	s0,sp,128
    7136:	1e05                	addi	t3,t3,-31
    7138:	0306                	slli	t1,t1,0x1
    713a:	7fb0                	flw	fa2,120(a5)
    713c:	0009                	c.nop	2
    713e:	0100                	addi	s0,sp,128
    7140:	1505                	addi	a0,a0,-31
    7142:	04090003          	lb	zero,64(s2)
    7146:	0100                	addi	s0,sp,128
    7148:	1b05                	addi	s6,s6,-31
    714a:	0306                	slli	t1,t1,0x1
    714c:	0900                	addi	s0,sp,144
    714e:	0008                	0x8
    7150:	0501                	addi	a0,a0,0
    7152:	0315                	addi	t1,t1,5
    7154:	0900                	addi	s0,sp,144
    7156:	0000                	unimp
    7158:	0501                	addi	a0,a0,0
    715a:	0605                	addi	a2,a2,1
    715c:	00090003          	lb	zero,0(s2)
    7160:	0100                	addi	s0,sp,128
    7162:	2d05                	jal	7792 <__global_pointer$+0x402>
    7164:	0900da03          	lhu	s4,144(ra)
    7168:	0008                	0x8
    716a:	0501                	addi	a0,a0,0
    716c:	0319                	addi	t1,t1,6
    716e:	00cc                	addi	a1,sp,68
    7170:	0809                	addi	a6,a6,2
    7172:	0100                	addi	s0,sp,128
    7174:	1505                	addi	a0,a0,-31
    7176:	0306                	slli	t1,t1,0x1
    7178:	0900                	addi	s0,sp,144
    717a:	0004                	0x4
    717c:	0501                	addi	a0,a0,0
    717e:	061c                	addi	a5,sp,768
    7180:	00090003          	lb	zero,0(s2)
    7184:	0100                	addi	s0,sp,128
    7186:	1a05                	addi	s4,s4,-31
    7188:	097c9f03          	lh	t5,151(s9)
    718c:	0008                	0x8
    718e:	0301                	addi	t1,t1,0
    7190:	092d                	addi	s2,s2,11
    7192:	0004                	0x4
    7194:	0301                	addi	t1,t1,0
    7196:	00040953          	fadd.s	fs2,fs0,ft0,rne
    719a:	0901                	addi	s2,s2,0
    719c:	0018                	0x18
    719e:	0100                	addi	s0,sp,128
    71a0:	0d01                	addi	s10,s10,0
    71a2:	0010                	0x10
    71a4:	0300                	addi	s0,sp,384
    71a6:	5300                	lw	s0,32(a4)
    71a8:	0000                	unimp
    71aa:	0100                	addi	s0,sp,128
    71ac:	fb01                	bnez	a4,70bc <__bss_end+0x2c>
    71ae:	0d0e                	slli	s10,s10,0x3
    71b0:	0100                	addi	s0,sp,128
    71b2:	0101                	addi	sp,sp,0
    71b4:	0001                	nop
    71b6:	0000                	unimp
    71b8:	0001                	nop
    71ba:	0100                	addi	s0,sp,128
    71bc:	2e2e                	fld	ft8,200(sp)
    71be:	2f2e2e2f          	0x2f2e2e2f
    71c2:	2e2e                	fld	ft8,200(sp)
    71c4:	2f2e2e2f          	0x2f2e2e2f
    71c8:	2e2e                	fld	ft8,200(sp)
    71ca:	7369722f          	0x7369722f
    71ce:	672d7663          	bgeu	s10,s2,783a <__global_pointer$+0x4aa>
    71d2:	6c2f6363          	bltu	t5,sp,7898 <__heap_end+0x8>
    71d6:	6269                	lui	tp,0x1a
    71d8:	2f636367          	0x2f636367
    71dc:	74666f73          	csrrsi	t5,0x746,12
    71e0:	662d                	lui	a2,0xb
    71e2:	0070                	addi	a2,sp,12
    71e4:	6100                	flw	fs0,0(a0)
    71e6:	6464                	flw	fs1,76(s0)
    71e8:	6664                	flw	fs1,76(a2)
    71ea:	00632e33          	slt	t3,t1,t1
    71ee:	0001                	nop
    71f0:	6400                	flw	fs0,8(s0)
    71f2:	6c62756f          	jal	a0,2e8b8 <RAM_SIZE+0x1e8b8>
    71f6:	2e65                	jal	75ae <__global_pointer$+0x21e>
    71f8:	0068                	addi	a0,sp,12
    71fa:	0001                	nop
    71fc:	0000                	unimp
    71fe:	0105                	addi	sp,sp,1
    7200:	0500                	addi	s0,sp,640
    7202:	1402                	slli	s0,s0,0x20
    7204:	0039                	c.nop	14
    7206:	0300                	addi	s0,sp,384
    7208:	03050123          	sb	a6,34(a0) # 1b022 <RAM_SIZE+0xb022>
    720c:	00090103          	lb	sp,0(s2)
    7210:	0100                	addi	s0,sp,128
    7212:	00090003          	lb	zero,0(s2)
    7216:	0100                	addi	s0,sp,128
    7218:	0d05                	addi	s10,s10,1
    721a:	00090003          	lb	zero,0(s2)
    721e:	0100                	addi	s0,sp,128
    7220:	0305                	addi	t1,t1,1
    7222:	00090103          	lb	sp,0(s2)
    7226:	0100                	addi	s0,sp,128
    7228:	00090003          	lb	zero,0(s2)
    722c:	0100                	addi	s0,sp,128
    722e:	00090003          	lb	zero,0(s2)
    7232:	0100                	addi	s0,sp,128
    7234:	00090003          	lb	zero,0(s2)
    7238:	0100                	addi	s0,sp,128
    723a:	00090103          	lb	sp,0(s2)
    723e:	0100                	addi	s0,sp,128
    7240:	00090003          	lb	zero,0(s2)
    7244:	0100                	addi	s0,sp,128
    7246:	00090003          	lb	zero,0(s2)
    724a:	0100                	addi	s0,sp,128
    724c:	00090003          	lb	zero,0(s2)
    7250:	0100                	addi	s0,sp,128
    7252:	00090103          	lb	sp,0(s2)
    7256:	0100                	addi	s0,sp,128
    7258:	00090003          	lb	zero,0(s2)
    725c:	0100                	addi	s0,sp,128
    725e:	00090003          	lb	zero,0(s2)
    7262:	0100                	addi	s0,sp,128
    7264:	00090003          	lb	zero,0(s2)
    7268:	0100                	addi	s0,sp,128
    726a:	00090103          	lb	sp,0(s2)
    726e:	0100                	addi	s0,sp,128
    7270:	00090203          	lb	tp,0(s2)
    7274:	0100                	addi	s0,sp,128
    7276:	00090103          	lb	sp,0(s2)
    727a:	0100                	addi	s0,sp,128
    727c:	00090003          	lb	zero,0(s2)
    7280:	0100                	addi	s0,sp,128
    7282:	00090003          	lb	zero,0(s2)
    7286:	0100                	addi	s0,sp,128
    7288:	00090003          	lb	zero,0(s2)
    728c:	0100                	addi	s0,sp,128
    728e:	00090003          	lb	zero,0(s2)
    7292:	0100                	addi	s0,sp,128
    7294:	00090003          	lb	zero,0(s2)
    7298:	0100                	addi	s0,sp,128
    729a:	0105                	addi	sp,sp,1
    729c:	0306                	slli	t1,t1,0x1
    729e:	0978                	addi	a4,sp,156
    72a0:	0008                	0x8
    72a2:	0501                	addi	a0,a0,0
    72a4:	09080303          	lb	t1,144(a6)
    72a8:	0004                	0x4
    72aa:	0601                	addi	a2,a2,0
    72ac:	04090003          	lb	zero,64(s2)
    72b0:	0100                	addi	s0,sp,128
    72b2:	0306                	slli	t1,t1,0x1
    72b4:	0901                	addi	s2,s2,0
    72b6:	0004                	0x4
    72b8:	0501                	addi	a0,a0,0
    72ba:	0301                	addi	t1,t1,0
    72bc:	00080977          	0x80977
    72c0:	0501                	addi	a0,a0,0
    72c2:	09080303          	lb	t1,144(a6)
    72c6:	0004                	0x4
    72c8:	0601                	addi	a2,a2,0
    72ca:	08090003          	lb	zero,128(s2)
    72ce:	0100                	addi	s0,sp,128
    72d0:	0306                	slli	t1,t1,0x1
    72d2:	0901                	addi	s2,s2,0
    72d4:	0004                	0x4
    72d6:	0501                	addi	a0,a0,0
    72d8:	0301                	addi	t1,t1,0
    72da:	00040977          	0x40977
    72de:	0501                	addi	a0,a0,0
    72e0:	09080303          	lb	t1,144(a6)
    72e4:	0004                	0x4
    72e6:	0601                	addi	a2,a2,0
    72e8:	08090003          	lb	zero,128(s2)
    72ec:	0100                	addi	s0,sp,128
    72ee:	00090003          	lb	zero,0(s2)
    72f2:	0100                	addi	s0,sp,128
    72f4:	00090003          	lb	zero,0(s2)
    72f8:	0100                	addi	s0,sp,128
    72fa:	00090003          	lb	zero,0(s2)
    72fe:	0100                	addi	s0,sp,128
    7300:	00090003          	lb	zero,0(s2)
    7304:	0100                	addi	s0,sp,128
    7306:	0306                	slli	t1,t1,0x1
    7308:	0901                	addi	s2,s2,0
    730a:	0000                	unimp
    730c:	0501                	addi	a0,a0,0
    730e:	0301                	addi	t1,t1,0
    7310:	00080977          	0x80977
    7314:	0501                	addi	a0,a0,0
    7316:	09090303          	lb	t1,144(s2)
    731a:	000c                	0xc
    731c:	0301                	addi	t1,t1,0
    731e:	097f                	0x97f
    7320:	0008                	0x8
    7322:	0601                	addi	a2,a2,0
    7324:	04090003          	lb	zero,64(s2)
    7328:	0100                	addi	s0,sp,128
    732a:	00090003          	lb	zero,0(s2)
    732e:	0100                	addi	s0,sp,128
    7330:	00090103          	lb	sp,0(s2)
    7334:	0100                	addi	s0,sp,128
    7336:	00090003          	lb	zero,0(s2)
    733a:	0100                	addi	s0,sp,128
    733c:	00090003          	lb	zero,0(s2)
    7340:	0100                	addi	s0,sp,128
    7342:	00090003          	lb	zero,0(s2)
    7346:	0100                	addi	s0,sp,128
    7348:	00090003          	lb	zero,0(s2)
    734c:	0100                	addi	s0,sp,128
    734e:	00090003          	lb	zero,0(s2)
    7352:	0100                	addi	s0,sp,128
    7354:	00090003          	lb	zero,0(s2)
    7358:	0100                	addi	s0,sp,128
    735a:	00090003          	lb	zero,0(s2)
    735e:	0100                	addi	s0,sp,128
    7360:	00090003          	lb	zero,0(s2)
    7364:	0100                	addi	s0,sp,128
    7366:	00090003          	lb	zero,0(s2)
    736a:	0100                	addi	s0,sp,128
    736c:	00090003          	lb	zero,0(s2)
    7370:	0100                	addi	s0,sp,128
    7372:	00090003          	lb	zero,0(s2)
    7376:	0100                	addi	s0,sp,128
    7378:	00090003          	lb	zero,0(s2)
    737c:	0100                	addi	s0,sp,128
    737e:	04090003          	lb	zero,64(s2)
    7382:	0100                	addi	s0,sp,128
    7384:	00090003          	lb	zero,0(s2)
    7388:	0100                	addi	s0,sp,128
    738a:	00090103          	lb	sp,0(s2)
    738e:	0100                	addi	s0,sp,128
    7390:	00090003          	lb	zero,0(s2)
    7394:	0100                	addi	s0,sp,128
    7396:	00090003          	lb	zero,0(s2)
    739a:	0100                	addi	s0,sp,128
    739c:	00090003          	lb	zero,0(s2)
    73a0:	0100                	addi	s0,sp,128
    73a2:	00090003          	lb	zero,0(s2)
    73a6:	0100                	addi	s0,sp,128
    73a8:	00090003          	lb	zero,0(s2)
    73ac:	0100                	addi	s0,sp,128
    73ae:	00090003          	lb	zero,0(s2)
    73b2:	0100                	addi	s0,sp,128
    73b4:	00090003          	lb	zero,0(s2)
    73b8:	0100                	addi	s0,sp,128
    73ba:	0200                	addi	s0,sp,256
    73bc:	0704                	addi	s1,sp,896
    73be:	08090003          	lb	zero,128(s2)
    73c2:	0100                	addi	s0,sp,128
    73c4:	0200                	addi	s0,sp,256
    73c6:	0704                	addi	s1,sp,896
    73c8:	00090003          	lb	zero,0(s2)
    73cc:	0100                	addi	s0,sp,128
    73ce:	0200                	addi	s0,sp,256
    73d0:	0704                	addi	s1,sp,896
    73d2:	00090003          	lb	zero,0(s2)
    73d6:	0100                	addi	s0,sp,128
    73d8:	0200                	addi	s0,sp,256
    73da:	0904                	addi	s1,sp,144
    73dc:	04090003          	lb	zero,64(s2)
    73e0:	0100                	addi	s0,sp,128
    73e2:	0200                	addi	s0,sp,256
    73e4:	0904                	addi	s1,sp,144
    73e6:	00090003          	lb	zero,0(s2)
    73ea:	0100                	addi	s0,sp,128
    73ec:	0200                	addi	s0,sp,256
    73ee:	0b04                	addi	s1,sp,400
    73f0:	04090003          	lb	zero,64(s2)
    73f4:	0100                	addi	s0,sp,128
    73f6:	0200                	addi	s0,sp,256
    73f8:	0e04                	addi	s1,sp,784
    73fa:	08090003          	lb	zero,128(s2)
    73fe:	0100                	addi	s0,sp,128
    7400:	0200                	addi	s0,sp,256
    7402:	0e04                	addi	s1,sp,784
    7404:	00090003          	lb	zero,0(s2)
    7408:	0100                	addi	s0,sp,128
    740a:	0200                	addi	s0,sp,256
    740c:	0e04                	addi	s1,sp,784
    740e:	04090003          	lb	zero,64(s2)
    7412:	0100                	addi	s0,sp,128
    7414:	0200                	addi	s0,sp,256
    7416:	1704                	addi	s1,sp,928
    7418:	04090003          	lb	zero,64(s2)
    741c:	0100                	addi	s0,sp,128
    741e:	0200                	addi	s0,sp,256
    7420:	1704                	addi	s1,sp,928
    7422:	00090003          	lb	zero,0(s2)
    7426:	0100                	addi	s0,sp,128
    7428:	0200                	addi	s0,sp,256
    742a:	1704                	addi	s1,sp,928
    742c:	00090003          	lb	zero,0(s2)
    7430:	0100                	addi	s0,sp,128
    7432:	0200                	addi	s0,sp,256
    7434:	1704                	addi	s1,sp,928
    7436:	04090003          	lb	zero,64(s2)
    743a:	0100                	addi	s0,sp,128
    743c:	0200                	addi	s0,sp,256
    743e:	1704                	addi	s1,sp,928
    7440:	0c090003          	lb	zero,192(s2)
    7444:	0100                	addi	s0,sp,128
    7446:	0200                	addi	s0,sp,256
    7448:	1704                	addi	s1,sp,928
    744a:	00090003          	lb	zero,0(s2)
    744e:	0100                	addi	s0,sp,128
    7450:	0200                	addi	s0,sp,256
    7452:	1704                	addi	s1,sp,928
    7454:	00090003          	lb	zero,0(s2)
    7458:	0100                	addi	s0,sp,128
    745a:	0200                	addi	s0,sp,256
    745c:	5004                	lw	s1,32(s0)
    745e:	04090003          	lb	zero,64(s2)
    7462:	0100                	addi	s0,sp,128
    7464:	0200                	addi	s0,sp,256
    7466:	5004                	lw	s1,32(s0)
    7468:	00090003          	lb	zero,0(s2)
    746c:	0100                	addi	s0,sp,128
    746e:	0200                	addi	s0,sp,256
    7470:	5004                	lw	s1,32(s0)
    7472:	00090003          	lb	zero,0(s2)
    7476:	0100                	addi	s0,sp,128
    7478:	0200                	addi	s0,sp,256
    747a:	5004                	lw	s1,32(s0)
    747c:	0306                	slli	t1,t1,0x1
    747e:	097f                	0x97f
    7480:	0000                	unimp
    7482:	0001                	nop
    7484:	0402                	c.slli64	s0
    7486:	0350                	addi	a2,sp,388
    7488:	0901                	addi	s2,s2,0
    748a:	0004                	0x4
    748c:	0001                	nop
    748e:	0402                	c.slli64	s0
    7490:	0618                	addi	a4,sp,768
    7492:	04090003          	lb	zero,64(s2)
    7496:	0100                	addi	s0,sp,128
    7498:	0306                	slli	t1,t1,0x1
    749a:	0900                	addi	s0,sp,144
    749c:	0008                	0x8
    749e:	0001                	nop
    74a0:	0402                	c.slli64	s0
    74a2:	060c                	addi	a1,sp,768
    74a4:	08090003          	lb	zero,128(s2)
    74a8:	0100                	addi	s0,sp,128
    74aa:	0200                	addi	s0,sp,256
    74ac:	2604                	fld	fs1,8(a2)
    74ae:	08090003          	lb	zero,128(s2)
    74b2:	0100                	addi	s0,sp,128
    74b4:	0200                	addi	s0,sp,256
    74b6:	2f04                	fld	fs1,24(a4)
    74b8:	0c090003          	lb	zero,192(s2)
    74bc:	0100                	addi	s0,sp,128
    74be:	0200                	addi	s0,sp,256
    74c0:	3004                	fld	fs1,32(s0)
    74c2:	08090003          	lb	zero,128(s2)
    74c6:	0100                	addi	s0,sp,128
    74c8:	0200                	addi	s0,sp,256
    74ca:	3204                	fld	fs1,32(a2)
    74cc:	08090003          	lb	zero,128(s2)
    74d0:	0100                	addi	s0,sp,128
    74d2:	0200                	addi	s0,sp,256
    74d4:	3204                	fld	fs1,32(a2)
    74d6:	20090003          	lb	zero,512(s2)
    74da:	0100                	addi	s0,sp,128
    74dc:	0200                	addi	s0,sp,256
    74de:	4004                	lw	s1,0(s0)
    74e0:	04090003          	lb	zero,64(s2)
    74e4:	0100                	addi	s0,sp,128
    74e6:	0200                	addi	s0,sp,256
    74e8:	4004                	lw	s1,0(s0)
    74ea:	00090003          	lb	zero,0(s2)
    74ee:	0100                	addi	s0,sp,128
    74f0:	0200                	addi	s0,sp,256
    74f2:	4004                	lw	s1,0(s0)
    74f4:	00090003          	lb	zero,0(s2)
    74f8:	0100                	addi	s0,sp,128
    74fa:	0200                	addi	s0,sp,256
    74fc:	4004                	lw	s1,0(s0)
    74fe:	04090003          	lb	zero,64(s2)
    7502:	0100                	addi	s0,sp,128
    7504:	0200                	addi	s0,sp,256
    7506:	4004                	lw	s1,0(s0)
    7508:	0c090003          	lb	zero,192(s2)
    750c:	0100                	addi	s0,sp,128
    750e:	0200                	addi	s0,sp,256
    7510:	4004                	lw	s1,0(s0)
    7512:	00090003          	lb	zero,0(s2)
    7516:	0100                	addi	s0,sp,128
    7518:	0200                	addi	s0,sp,256
    751a:	7a04                	flw	fs1,48(a2)
    751c:	04090003          	lb	zero,64(s2)
    7520:	0100                	addi	s0,sp,128
    7522:	0300                	addi	s0,sp,384
    7524:	b604                	fsd	fs1,40(a2)
    7526:	0301                	addi	t1,t1,0
    7528:	0900                	addi	s0,sp,144
    752a:	000c                	0xc
    752c:	0001                	nop
    752e:	01b60403          	lb	s0,27(a2) # b01b <__stack_top+0xf8b>
    7532:	00090003          	lb	zero,0(s2)
    7536:	0100                	addi	s0,sp,128
    7538:	0300                	addi	s0,sp,384
    753a:	b604                	fsd	fs1,40(a2)
    753c:	0301                	addi	t1,t1,0
    753e:	0900                	addi	s0,sp,144
    7540:	0004                	0x4
    7542:	0001                	nop
    7544:	01b60403          	lb	s0,27(a2)
    7548:	00090003          	lb	zero,0(s2)
    754c:	0100                	addi	s0,sp,128
    754e:	0300                	addi	s0,sp,384
    7550:	b604                	fsd	fs1,40(a2)
    7552:	0301                	addi	t1,t1,0
    7554:	0900                	addi	s0,sp,144
    7556:	0000                	unimp
    7558:	0001                	nop
    755a:	01b60403          	lb	s0,27(a2)
    755e:	00090003          	lb	zero,0(s2)
    7562:	0100                	addi	s0,sp,128
    7564:	0306                	slli	t1,t1,0x1
    7566:	0900                	addi	s0,sp,144
    7568:	0008                	0x8
    756a:	0001                	nop
    756c:	0402                	c.slli64	s0
    756e:	00030633          	add	a2,t1,zero
    7572:	2809                	jal	7584 <__global_pointer$+0x1f4>
    7574:	0100                	addi	s0,sp,128
    7576:	0200                	addi	s0,sp,256
    7578:	3a04                	fld	fs1,48(a2)
    757a:	0306                	slli	t1,t1,0x1
    757c:	0900                	addi	s0,sp,144
    757e:	0014                	0x14
    7580:	0001                	nop
    7582:	0402                	c.slli64	s0
    7584:	033d                	addi	t1,t1,15
    7586:	0900                	addi	s0,sp,144
    7588:	000c                	0xc
    758a:	0001                	nop
    758c:	0402                	c.slli64	s0
    758e:	063d                	addi	a2,a2,15
    7590:	0c090003          	lb	zero,192(s2)
    7594:	0100                	addi	s0,sp,128
    7596:	0200                	addi	s0,sp,256
    7598:	3104                	fld	fs1,32(a0)
    759a:	0306                	slli	t1,t1,0x1
    759c:	0900                	addi	s0,sp,144
    759e:	0000                	unimp
    75a0:	0001                	nop
    75a2:	0402                	c.slli64	s0
    75a4:	0631                	addi	a2,a2,12
    75a6:	08090003          	lb	zero,128(s2)
    75aa:	0100                	addi	s0,sp,128
    75ac:	0200                	addi	s0,sp,256
    75ae:	0a04                	addi	s1,sp,272
    75b0:	0c090003          	lb	zero,192(s2)
    75b4:	0100                	addi	s0,sp,128
    75b6:	0200                	addi	s0,sp,256
    75b8:	4204                	lw	s1,0(a2)
    75ba:	04090003          	lb	zero,64(s2)
    75be:	0100                	addi	s0,sp,128
    75c0:	0200                	addi	s0,sp,256
    75c2:	4204                	lw	s1,0(a2)
    75c4:	04090003          	lb	zero,64(s2)
    75c8:	0100                	addi	s0,sp,128
    75ca:	0200                	addi	s0,sp,256
    75cc:	4204                	lw	s1,0(a2)
    75ce:	00090003          	lb	zero,0(s2)
    75d2:	0100                	addi	s0,sp,128
    75d4:	0200                	addi	s0,sp,256
    75d6:	4404                	lw	s1,8(s0)
    75d8:	04090003          	lb	zero,64(s2)
    75dc:	0100                	addi	s0,sp,128
    75de:	0200                	addi	s0,sp,256
    75e0:	4704                	lw	s1,8(a4)
    75e2:	08090003          	lb	zero,128(s2)
    75e6:	0100                	addi	s0,sp,128
    75e8:	0200                	addi	s0,sp,256
    75ea:	4704                	lw	s1,8(a4)
    75ec:	00090003          	lb	zero,0(s2)
    75f0:	0100                	addi	s0,sp,128
    75f2:	0200                	addi	s0,sp,256
    75f4:	4704                	lw	s1,8(a4)
    75f6:	04090003          	lb	zero,64(s2)
    75fa:	0100                	addi	s0,sp,128
    75fc:	0200                	addi	s0,sp,256
    75fe:	5004                	lw	s1,32(s0)
    7600:	04090003          	lb	zero,64(s2)
    7604:	0100                	addi	s0,sp,128
    7606:	0200                	addi	s0,sp,256
    7608:	5004                	lw	s1,32(s0)
    760a:	00090003          	lb	zero,0(s2)
    760e:	0100                	addi	s0,sp,128
    7610:	0200                	addi	s0,sp,256
    7612:	5004                	lw	s1,32(s0)
    7614:	00090003          	lb	zero,0(s2)
    7618:	0100                	addi	s0,sp,128
    761a:	0200                	addi	s0,sp,256
    761c:	5004                	lw	s1,32(s0)
    761e:	04090003          	lb	zero,64(s2)
    7622:	0100                	addi	s0,sp,128
    7624:	0200                	addi	s0,sp,256
    7626:	5104                	lw	s1,32(a0)
    7628:	10090003          	lb	zero,256(s2)
    762c:	0100                	addi	s0,sp,128
    762e:	0306                	slli	t1,t1,0x1
    7630:	097f                	0x97f
    7632:	0008                	0x8
    7634:	0001                	nop
    7636:	0402                	c.slli64	s0
    7638:	0645                	addi	a2,a2,17
    763a:	0c090103          	lb	sp,192(s2)
    763e:	0100                	addi	s0,sp,128
    7640:	0200                	addi	s0,sp,256
    7642:	5f04                	lw	s1,56(a4)
    7644:	08090003          	lb	zero,128(s2)
    7648:	0100                	addi	s0,sp,128
    764a:	0200                	addi	s0,sp,256
    764c:	6804                	flw	fs1,16(s0)
    764e:	0c090003          	lb	zero,192(s2)
    7652:	0100                	addi	s0,sp,128
    7654:	0200                	addi	s0,sp,256
    7656:	6904                	flw	fs1,16(a0)
    7658:	08090003          	lb	zero,128(s2)
    765c:	0100                	addi	s0,sp,128
    765e:	0200                	addi	s0,sp,256
    7660:	6b04                	flw	fs1,16(a4)
    7662:	08090003          	lb	zero,128(s2)
    7666:	0100                	addi	s0,sp,128
    7668:	0200                	addi	s0,sp,256
    766a:	6b04                	flw	fs1,16(a4)
    766c:	20090003          	lb	zero,512(s2)
    7670:	0100                	addi	s0,sp,128
    7672:	0200                	addi	s0,sp,256
    7674:	7904                	flw	fs1,48(a0)
    7676:	04090003          	lb	zero,64(s2)
    767a:	0100                	addi	s0,sp,128
    767c:	0200                	addi	s0,sp,256
    767e:	7904                	flw	fs1,48(a0)
    7680:	00090003          	lb	zero,0(s2)
    7684:	0100                	addi	s0,sp,128
    7686:	0200                	addi	s0,sp,256
    7688:	7904                	flw	fs1,48(a0)
    768a:	00090003          	lb	zero,0(s2)
    768e:	0100                	addi	s0,sp,128
    7690:	0200                	addi	s0,sp,256
    7692:	7904                	flw	fs1,48(a0)
    7694:	04090003          	lb	zero,64(s2)
    7698:	0100                	addi	s0,sp,128
    769a:	0200                	addi	s0,sp,256
    769c:	7904                	flw	fs1,48(a0)
    769e:	0c090003          	lb	zero,192(s2)
    76a2:	0100                	addi	s0,sp,128
    76a4:	0200                	addi	s0,sp,256
    76a6:	7904                	flw	fs1,48(a0)
    76a8:	00090003          	lb	zero,0(s2)
    76ac:	0100                	addi	s0,sp,128
    76ae:	0200                	addi	s0,sp,256
    76b0:	7904                	flw	fs1,48(a0)
    76b2:	0306                	slli	t1,t1,0x1
    76b4:	097f                	0x97f
    76b6:	0000                	unimp
    76b8:	0001                	nop
    76ba:	0402                	c.slli64	s0
    76bc:	066c                	addi	a1,sp,780
    76be:	08090103          	lb	sp,128(s2)
    76c2:	0100                	addi	s0,sp,128
    76c4:	0200                	addi	s0,sp,256
    76c6:	7304                	flw	fs1,32(a4)
    76c8:	0306                	slli	t1,t1,0x1
    76ca:	0900                	addi	s0,sp,144
    76cc:	0014                	0x14
    76ce:	0001                	nop
    76d0:	0402                	c.slli64	s0
    76d2:	0376                	slli	t1,t1,0x1d
    76d4:	0900                	addi	s0,sp,144
    76d6:	000c                	0xc
    76d8:	0001                	nop
    76da:	0402                	c.slli64	s0
    76dc:	0676                	slli	a2,a2,0x1d
    76de:	0c090003          	lb	zero,192(s2)
    76e2:	0100                	addi	s0,sp,128
    76e4:	0200                	addi	s0,sp,256
    76e6:	6a04                	flw	fs1,16(a2)
    76e8:	0306                	slli	t1,t1,0x1
    76ea:	0900                	addi	s0,sp,144
    76ec:	0000                	unimp
    76ee:	0001                	nop
    76f0:	0402                	c.slli64	s0
    76f2:	066a                	slli	a2,a2,0x1a
    76f4:	08090003          	lb	zero,128(s2)
    76f8:	0100                	addi	s0,sp,128
    76fa:	0200                	addi	s0,sp,256
    76fc:	4304                	lw	s1,0(a4)
    76fe:	0c090003          	lb	zero,192(s2)
    7702:	0100                	addi	s0,sp,128
    7704:	0200                	addi	s0,sp,256
    7706:	7b04                	flw	fs1,48(a4)
    7708:	0c090003          	lb	zero,192(s2)
    770c:	0100                	addi	s0,sp,128
    770e:	0200                	addi	s0,sp,256
    7710:	7d04                	flw	fs1,56(a0)
    7712:	08090003          	lb	zero,128(s2)
    7716:	0100                	addi	s0,sp,128
    7718:	0200                	addi	s0,sp,256
    771a:	7d04                	flw	fs1,56(a0)
    771c:	00090003          	lb	zero,0(s2)
    7720:	0100                	addi	s0,sp,128
    7722:	0300                	addi	s0,sp,384
    7724:	8004                	0x8004
    7726:	0301                	addi	t1,t1,0
    7728:	0900                	addi	s0,sp,144
    772a:	0004                	0x4
    772c:	0001                	nop
    772e:	01860403          	lb	s0,24(a2)
    7732:	08090003          	lb	zero,128(s2)
    7736:	0100                	addi	s0,sp,128
    7738:	0300                	addi	s0,sp,384
    773a:	8604                	0x8604
    773c:	0301                	addi	t1,t1,0
    773e:	0900                	addi	s0,sp,144
    7740:	0000                	unimp
    7742:	0001                	nop
    7744:	01860403          	lb	s0,24(a2)
    7748:	00090003          	lb	zero,0(s2)
    774c:	0100                	addi	s0,sp,128
    774e:	0300                	addi	s0,sp,384
    7750:	8604                	0x8604
    7752:	0301                	addi	t1,t1,0
    7754:	0900                	addi	s0,sp,144
    7756:	0000                	unimp
    7758:	0001                	nop
    775a:	01860403          	lb	s0,24(a2)
    775e:	04090003          	lb	zero,64(s2)
    7762:	0100                	addi	s0,sp,128
    7764:	0300                	addi	s0,sp,384
    7766:	8604                	0x8604
    7768:	0301                	addi	t1,t1,0
    776a:	0900                	addi	s0,sp,144
    776c:	000c                	0xc
    776e:	0001                	nop
    7770:	01860403          	lb	s0,24(a2)
    7774:	00090003          	lb	zero,0(s2)
    7778:	0100                	addi	s0,sp,128
    777a:	0300                	addi	s0,sp,384
    777c:	8604                	0x8604
    777e:	0301                	addi	t1,t1,0
    7780:	0900                	addi	s0,sp,144
    7782:	0000                	unimp
    7784:	0001                	nop
    7786:	01880403          	lb	s0,24(a6)
    778a:	10090003          	lb	zero,256(s2)
    778e:	0100                	addi	s0,sp,128
    7790:	0300                	addi	s0,sp,384
    7792:	8804                	0x8804
    7794:	0301                	addi	t1,t1,0
    7796:	0900                	addi	s0,sp,144
    7798:	000c                	0xc
    779a:	0001                	nop
    779c:	03a50403          	lb	s0,58(a0)
    77a0:	04090003          	lb	zero,64(s2)
    77a4:	0100                	addi	s0,sp,128
    77a6:	0300                	addi	s0,sp,384
    77a8:	a504                	fsd	fs1,8(a0)
    77aa:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    77ae:	0000                	unimp
    77b0:	0001                	nop
    77b2:	03a50403          	lb	s0,58(a0)
    77b6:	00090103          	lb	sp,0(s2)
    77ba:	0100                	addi	s0,sp,128
    77bc:	0300                	addi	s0,sp,384
    77be:	a504                	fsd	fs1,8(a0)
    77c0:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    77c4:	0000                	unimp
    77c6:	0001                	nop
    77c8:	03a50403          	lb	s0,58(a0)
    77cc:	00090003          	lb	zero,0(s2)
    77d0:	0100                	addi	s0,sp,128
    77d2:	0300                	addi	s0,sp,384
    77d4:	a504                	fsd	fs1,8(a0)
    77d6:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    77da:	0000                	unimp
    77dc:	0001                	nop
    77de:	03a50403          	lb	s0,58(a0)
    77e2:	00090003          	lb	zero,0(s2)
    77e6:	0100                	addi	s0,sp,128
    77e8:	0200                	addi	s0,sp,256
    77ea:	2504                	fld	fs1,8(a0)
    77ec:	08090003          	lb	zero,128(s2)
    77f0:	0100                	addi	s0,sp,128
    77f2:	0200                	addi	s0,sp,256
    77f4:	2504                	fld	fs1,8(a0)
    77f6:	00090003          	lb	zero,0(s2)
    77fa:	0100                	addi	s0,sp,128
    77fc:	0200                	addi	s0,sp,256
    77fe:	2504                	fld	fs1,8(a0)
    7800:	00090003          	lb	zero,0(s2)
    7804:	0100                	addi	s0,sp,128
    7806:	0200                	addi	s0,sp,256
    7808:	2504                	fld	fs1,8(a0)
    780a:	00090003          	lb	zero,0(s2)
    780e:	0100                	addi	s0,sp,128
    7810:	0200                	addi	s0,sp,256
    7812:	2c04                	fld	fs1,24(s0)
    7814:	0c090003          	lb	zero,192(s2)
    7818:	0100                	addi	s0,sp,128
    781a:	0200                	addi	s0,sp,256
    781c:	2c04                	fld	fs1,24(s0)
    781e:	00090003          	lb	zero,0(s2)
    7822:	0100                	addi	s0,sp,128
    7824:	0200                	addi	s0,sp,256
    7826:	2c04                	fld	fs1,24(s0)
    7828:	00090003          	lb	zero,0(s2)
    782c:	0100                	addi	s0,sp,128
    782e:	0200                	addi	s0,sp,256
    7830:	2c04                	fld	fs1,24(s0)
    7832:	04090003          	lb	zero,64(s2)
    7836:	0100                	addi	s0,sp,128
    7838:	0200                	addi	s0,sp,256
    783a:	2c04                	fld	fs1,24(s0)
    783c:	08090003          	lb	zero,128(s2)
    7840:	0100                	addi	s0,sp,128
    7842:	0300                	addi	s0,sp,384
    7844:	9904                	0x9904
    7846:	0301                	addi	t1,t1,0
    7848:	097f                	0x97f
    784a:	0008                	0x8
    784c:	0001                	nop
    784e:	01990403          	lb	s0,25(s2)
    7852:	00090003          	lb	zero,0(s2)
    7856:	0100                	addi	s0,sp,128
    7858:	0300                	addi	s0,sp,384
    785a:	9904                	0x9904
    785c:	0301                	addi	t1,t1,0
    785e:	0900                	addi	s0,sp,144
    7860:	0000                	unimp
    7862:	0001                	nop
    7864:	01990403          	lb	s0,25(s2)
    7868:	00090003          	lb	zero,0(s2)
    786c:	0100                	addi	s0,sp,128
    786e:	0300                	addi	s0,sp,384
    7870:	9904                	0x9904
    7872:	0301                	addi	t1,t1,0
    7874:	0900                	addi	s0,sp,144
    7876:	0000                	unimp
    7878:	0001                	nop
    787a:	01990403          	lb	s0,25(s2)
    787e:	00090003          	lb	zero,0(s2)
    7882:	0100                	addi	s0,sp,128
    7884:	0300                	addi	s0,sp,384
    7886:	9904                	0x9904
    7888:	0301                	addi	t1,t1,0
    788a:	0900                	addi	s0,sp,144
    788c:	0000                	unimp
    788e:	0001                	nop
    7890:	01990403          	lb	s0,25(s2)
    7894:	00090003          	lb	zero,0(s2)
    7898:	0100                	addi	s0,sp,128
    789a:	0300                	addi	s0,sp,384
    789c:	9b04                	0x9b04
    789e:	0301                	addi	t1,t1,0
    78a0:	0900                	addi	s0,sp,144
    78a2:	0004                	0x4
    78a4:	0601                	addi	a2,a2,0
    78a6:	08090003          	lb	zero,128(s2)
    78aa:	0100                	addi	s0,sp,128
    78ac:	0200                	addi	s0,sp,256
    78ae:	7c04                	flw	fs1,56(s0)
    78b0:	0306                	slli	t1,t1,0x1
    78b2:	0900                	addi	s0,sp,144
    78b4:	0014                	0x14
    78b6:	0001                	nop
    78b8:	0402                	c.slli64	s0
    78ba:	037c                	addi	a5,sp,396
    78bc:	0900                	addi	s0,sp,144
    78be:	0000                	unimp
    78c0:	0001                	nop
    78c2:	0402                	c.slli64	s0
    78c4:	037c                	addi	a5,sp,396
    78c6:	0900                	addi	s0,sp,144
    78c8:	0000                	unimp
    78ca:	0001                	nop
    78cc:	0402                	c.slli64	s0
    78ce:	037c                	addi	a5,sp,396
    78d0:	0900                	addi	s0,sp,144
    78d2:	0000                	unimp
    78d4:	0001                	nop
    78d6:	0402                	c.slli64	s0
    78d8:	037c                	addi	a5,sp,396
    78da:	0900                	addi	s0,sp,144
    78dc:	0000                	unimp
    78de:	0001                	nop
    78e0:	0402                	c.slli64	s0
    78e2:	037c                	addi	a5,sp,396
    78e4:	0900                	addi	s0,sp,144
    78e6:	0000                	unimp
    78e8:	0001                	nop
    78ea:	0402                	c.slli64	s0
    78ec:	037c                	addi	a5,sp,396
    78ee:	0900                	addi	s0,sp,144
    78f0:	0000                	unimp
    78f2:	0001                	nop
    78f4:	0402                	c.slli64	s0
    78f6:	037c                	addi	a5,sp,396
    78f8:	0900                	addi	s0,sp,144
    78fa:	0000                	unimp
    78fc:	0001                	nop
    78fe:	0402                	c.slli64	s0
    7900:	037c                	addi	a5,sp,396
    7902:	0900                	addi	s0,sp,144
    7904:	0000                	unimp
    7906:	0001                	nop
    7908:	0402                	c.slli64	s0
    790a:	037c                	addi	a5,sp,396
    790c:	0900                	addi	s0,sp,144
    790e:	0000                	unimp
    7910:	0001                	nop
    7912:	0402                	c.slli64	s0
    7914:	037c                	addi	a5,sp,396
    7916:	0900                	addi	s0,sp,144
    7918:	0000                	unimp
    791a:	0601                	addi	a2,a2,0
    791c:	08090003          	lb	zero,128(s2)
    7920:	0100                	addi	s0,sp,128
    7922:	0200                	addi	s0,sp,256
    7924:	0804                	addi	s1,sp,16
    7926:	0306                	slli	t1,t1,0x1
    7928:	0900                	addi	s0,sp,144
    792a:	0028                	addi	a0,sp,8
    792c:	0001                	nop
    792e:	0402                	c.slli64	s0
    7930:	0308                	addi	a0,sp,384
    7932:	0900                	addi	s0,sp,144
    7934:	0000                	unimp
    7936:	0001                	nop
    7938:	01c80403          	lb	s0,28(a6)
    793c:	04090003          	lb	zero,64(s2)
    7940:	0100                	addi	s0,sp,128
    7942:	0300                	addi	s0,sp,384
    7944:	c804                	sw	s1,16(s0)
    7946:	0301                	addi	t1,t1,0
    7948:	0900                	addi	s0,sp,144
    794a:	0000                	unimp
    794c:	0001                	nop
    794e:	01c80403          	lb	s0,28(a6)
    7952:	00090003          	lb	zero,0(s2)
    7956:	0100                	addi	s0,sp,128
    7958:	0300                	addi	s0,sp,384
    795a:	ca04                	sw	s1,16(a2)
    795c:	0301                	addi	t1,t1,0
    795e:	0900                	addi	s0,sp,144
    7960:	0004                	0x4
    7962:	0001                	nop
    7964:	01cd0403          	lb	s0,28(s10) # 1901c <RAM_SIZE+0x901c>
    7968:	08090003          	lb	zero,128(s2)
    796c:	0100                	addi	s0,sp,128
    796e:	0300                	addi	s0,sp,384
    7970:	cd04                	sw	s1,24(a0)
    7972:	0301                	addi	t1,t1,0
    7974:	0900                	addi	s0,sp,144
    7976:	0000                	unimp
    7978:	0001                	nop
    797a:	01cd0403          	lb	s0,28(s10)
    797e:	04090003          	lb	zero,64(s2)
    7982:	0100                	addi	s0,sp,128
    7984:	0300                	addi	s0,sp,384
    7986:	d604                	sw	s1,40(a2)
    7988:	0301                	addi	t1,t1,0
    798a:	0900                	addi	s0,sp,144
    798c:	0004                	0x4
    798e:	0001                	nop
    7990:	01d60403          	lb	s0,29(a2)
    7994:	00090003          	lb	zero,0(s2)
    7998:	0100                	addi	s0,sp,128
    799a:	0300                	addi	s0,sp,384
    799c:	d604                	sw	s1,40(a2)
    799e:	0301                	addi	t1,t1,0
    79a0:	0900                	addi	s0,sp,144
    79a2:	0000                	unimp
    79a4:	0001                	nop
    79a6:	01d60403          	lb	s0,29(a2)
    79aa:	04090003          	lb	zero,64(s2)
    79ae:	0100                	addi	s0,sp,128
    79b0:	0300                	addi	s0,sp,384
    79b2:	d604                	sw	s1,40(a2)
    79b4:	0301                	addi	t1,t1,0
    79b6:	0900                	addi	s0,sp,144
    79b8:	000c                	0xc
    79ba:	0001                	nop
    79bc:	01d60403          	lb	s0,29(a2)
    79c0:	00090003          	lb	zero,0(s2)
    79c4:	0100                	addi	s0,sp,128
    79c6:	0300                	addi	s0,sp,384
    79c8:	d604                	sw	s1,40(a2)
    79ca:	0301                	addi	t1,t1,0
    79cc:	0900                	addi	s0,sp,144
    79ce:	0000                	unimp
    79d0:	0001                	nop
    79d2:	028f0403          	lb	s0,40(t5)
    79d6:	0306                	slli	t1,t1,0x1
    79d8:	097f                	0x97f
    79da:	0004                	0x4
    79dc:	0001                	nop
    79de:	028f0403          	lb	s0,40(t5)
    79e2:	04090103          	lb	sp,64(s2)
    79e6:	0100                	addi	s0,sp,128
    79e8:	0300                	addi	s0,sp,384
    79ea:	d704                	sw	s1,40(a4)
    79ec:	0601                	addi	a2,a2,0
    79ee:	04090003          	lb	zero,64(s2)
    79f2:	0100                	addi	s0,sp,128
    79f4:	0300                	addi	s0,sp,384
    79f6:	ee04                	fsw	fs1,24(a2)
    79f8:	0301                	addi	t1,t1,0
    79fa:	0900                	addi	s0,sp,144
    79fc:	0008                	0x8
    79fe:	0001                	nop
    7a00:	01ef0403          	lb	s0,30(t5)
    7a04:	08090003          	lb	zero,128(s2)
    7a08:	0100                	addi	s0,sp,128
    7a0a:	0300                	addi	s0,sp,384
    7a0c:	f104                	fsw	fs1,32(a0)
    7a0e:	0301                	addi	t1,t1,0
    7a10:	0900                	addi	s0,sp,144
    7a12:	0008                	0x8
    7a14:	0001                	nop
    7a16:	01f10403          	lb	s0,31(sp)
    7a1a:	20090003          	lb	zero,512(s2)
    7a1e:	0100                	addi	s0,sp,128
    7a20:	0300                	addi	s0,sp,384
    7a22:	ff04                	fsw	fs1,56(a4)
    7a24:	0301                	addi	t1,t1,0
    7a26:	0900                	addi	s0,sp,144
    7a28:	0004                	0x4
    7a2a:	0001                	nop
    7a2c:	01ff0403          	lb	s0,31(t5)
    7a30:	00090003          	lb	zero,0(s2)
    7a34:	0100                	addi	s0,sp,128
    7a36:	0300                	addi	s0,sp,384
    7a38:	ff04                	fsw	fs1,56(a4)
    7a3a:	0301                	addi	t1,t1,0
    7a3c:	0900                	addi	s0,sp,144
    7a3e:	0000                	unimp
    7a40:	0001                	nop
    7a42:	01ff0403          	lb	s0,31(t5)
    7a46:	04090003          	lb	zero,64(s2)
    7a4a:	0100                	addi	s0,sp,128
    7a4c:	0300                	addi	s0,sp,384
    7a4e:	ff04                	fsw	fs1,56(a4)
    7a50:	0301                	addi	t1,t1,0
    7a52:	0900                	addi	s0,sp,144
    7a54:	000c                	0xc
    7a56:	0001                	nop
    7a58:	01ff0403          	lb	s0,31(t5)
    7a5c:	00090003          	lb	zero,0(s2)
    7a60:	0100                	addi	s0,sp,128
    7a62:	0300                	addi	s0,sp,384
    7a64:	b904                	fsd	fs1,48(a0)
    7a66:	0302                	c.slli64	t1
    7a68:	0900                	addi	s0,sp,144
    7a6a:	0004                	0x4
    7a6c:	0001                	nop
    7a6e:	02f50403          	lb	s0,47(a0)
    7a72:	0c090003          	lb	zero,192(s2)
    7a76:	0100                	addi	s0,sp,128
    7a78:	0300                	addi	s0,sp,384
    7a7a:	f504                	fsw	fs1,40(a0)
    7a7c:	0302                	c.slli64	t1
    7a7e:	0900                	addi	s0,sp,144
    7a80:	0000                	unimp
    7a82:	0001                	nop
    7a84:	01cb0403          	lb	s0,28(s6)
    7a88:	10090003          	lb	zero,256(s2)
    7a8c:	0100                	addi	s0,sp,128
    7a8e:	0300                	addi	s0,sp,384
    7a90:	e504                	fsw	fs1,8(a0)
    7a92:	0301                	addi	t1,t1,0
    7a94:	0900                	addi	s0,sp,144
    7a96:	0008                	0x8
    7a98:	0001                	nop
    7a9a:	01f20403          	lb	s0,31(tp) # 1a01f <RAM_SIZE+0xa01f>
    7a9e:	10090003          	lb	zero,256(s2)
    7aa2:	0100                	addi	s0,sp,128
    7aa4:	0300                	addi	s0,sp,384
    7aa6:	f904                	fsw	fs1,48(a0)
    7aa8:	0601                	addi	a2,a2,0
    7aaa:	14090003          	lb	zero,320(s2)
    7aae:	0100                	addi	s0,sp,128
    7ab0:	0300                	addi	s0,sp,384
    7ab2:	fc04                	fsw	fs1,56(s0)
    7ab4:	0301                	addi	t1,t1,0
    7ab6:	0900                	addi	s0,sp,144
    7ab8:	000c                	0xc
    7aba:	0001                	nop
    7abc:	01fc0403          	lb	s0,31(s8)
    7ac0:	0306                	slli	t1,t1,0x1
    7ac2:	0900                	addi	s0,sp,144
    7ac4:	000c                	0xc
    7ac6:	0001                	nop
    7ac8:	01f00403          	lb	s0,31(zero) # 1f <_start+0xf>
    7acc:	0306                	slli	t1,t1,0x1
    7ace:	0900                	addi	s0,sp,144
    7ad0:	0000                	unimp
    7ad2:	0001                	nop
    7ad4:	01f00403          	lb	s0,31(zero) # 1f <_start+0xf>
    7ad8:	0306                	slli	t1,t1,0x1
    7ada:	0900                	addi	s0,sp,144
    7adc:	0008                	0x8
    7ade:	0001                	nop
    7ae0:	01c90403          	lb	s0,28(s2)
    7ae4:	0c090003          	lb	zero,192(s2)
    7ae8:	0100                	addi	s0,sp,128
    7aea:	0300                	addi	s0,sp,384
    7aec:	8104                	0x8104
    7aee:	0302                	c.slli64	t1
    7af0:	0900                	addi	s0,sp,144
    7af2:	0004                	0x4
    7af4:	0001                	nop
    7af6:	02810403          	lb	s0,40(sp)
    7afa:	04090003          	lb	zero,64(s2)
    7afe:	0100                	addi	s0,sp,128
    7b00:	0300                	addi	s0,sp,384
    7b02:	8104                	0x8104
    7b04:	0302                	c.slli64	t1
    7b06:	0900                	addi	s0,sp,144
    7b08:	0000                	unimp
    7b0a:	0001                	nop
    7b0c:	02810403          	lb	s0,40(sp)
    7b10:	00090003          	lb	zero,0(s2)
    7b14:	0100                	addi	s0,sp,128
    7b16:	0300                	addi	s0,sp,384
    7b18:	8304                	0x8304
    7b1a:	0302                	c.slli64	t1
    7b1c:	0900                	addi	s0,sp,144
    7b1e:	0004                	0x4
    7b20:	0001                	nop
    7b22:	02860403          	lb	s0,40(a2)
    7b26:	08090003          	lb	zero,128(s2)
    7b2a:	0100                	addi	s0,sp,128
    7b2c:	0300                	addi	s0,sp,384
    7b2e:	8604                	0x8604
    7b30:	0302                	c.slli64	t1
    7b32:	0900                	addi	s0,sp,144
    7b34:	0000                	unimp
    7b36:	0001                	nop
    7b38:	02860403          	lb	s0,40(a2)
    7b3c:	04090003          	lb	zero,64(s2)
    7b40:	0100                	addi	s0,sp,128
    7b42:	0300                	addi	s0,sp,384
    7b44:	8f04                	0x8f04
    7b46:	0302                	c.slli64	t1
    7b48:	0900                	addi	s0,sp,144
    7b4a:	0004                	0x4
    7b4c:	0001                	nop
    7b4e:	028f0403          	lb	s0,40(t5)
    7b52:	00090003          	lb	zero,0(s2)
    7b56:	0100                	addi	s0,sp,128
    7b58:	0300                	addi	s0,sp,384
    7b5a:	8f04                	0x8f04
    7b5c:	0302                	c.slli64	t1
    7b5e:	0900                	addi	s0,sp,144
    7b60:	0000                	unimp
    7b62:	0001                	nop
    7b64:	028f0403          	lb	s0,40(t5)
    7b68:	04090003          	lb	zero,64(s2)
    7b6c:	0100                	addi	s0,sp,128
    7b6e:	0300                	addi	s0,sp,384
    7b70:	8f04                	0x8f04
    7b72:	0302                	c.slli64	t1
    7b74:	0900                	addi	s0,sp,144
    7b76:	000c                	0xc
    7b78:	0001                	nop
    7b7a:	028f0403          	lb	s0,40(t5)
    7b7e:	00090003          	lb	zero,0(s2)
    7b82:	0100                	addi	s0,sp,128
    7b84:	0300                	addi	s0,sp,384
    7b86:	8f04                	0x8f04
    7b88:	0302                	c.slli64	t1
    7b8a:	0900                	addi	s0,sp,144
    7b8c:	0000                	unimp
    7b8e:	0001                	nop
    7b90:	02900403          	lb	s0,41(zero) # 29 <_start+0x19>
    7b94:	08090003          	lb	zero,128(s2)
    7b98:	0100                	addi	s0,sp,128
    7b9a:	0306                	slli	t1,t1,0x1
    7b9c:	097f                	0x97f
    7b9e:	0008                	0x8
    7ba0:	0301                	addi	t1,t1,0
    7ba2:	0901                	addi	s2,s2,0
    7ba4:	0008                	0x8
    7ba6:	0001                	nop
    7ba8:	02840403          	lb	s0,40(s0)
    7bac:	0306                	slli	t1,t1,0x1
    7bae:	0900                	addi	s0,sp,144
    7bb0:	0008                	0x8
    7bb2:	0001                	nop
    7bb4:	029e0403          	lb	s0,41(t3) # 1d029 <RAM_SIZE+0xd029>
    7bb8:	08090003          	lb	zero,128(s2)
    7bbc:	0100                	addi	s0,sp,128
    7bbe:	0300                	addi	s0,sp,384
    7bc0:	a704                	fsd	fs1,8(a4)
    7bc2:	0302                	c.slli64	t1
    7bc4:	0900                	addi	s0,sp,144
    7bc6:	000c                	0xc
    7bc8:	0001                	nop
    7bca:	02a80403          	lb	s0,42(a6)
    7bce:	08090003          	lb	zero,128(s2)
    7bd2:	0100                	addi	s0,sp,128
    7bd4:	0300                	addi	s0,sp,384
    7bd6:	aa04                	fsd	fs1,16(a2)
    7bd8:	0302                	c.slli64	t1
    7bda:	0900                	addi	s0,sp,144
    7bdc:	0008                	0x8
    7bde:	0001                	nop
    7be0:	02aa0403          	lb	s0,42(s4) # 1e02a <RAM_SIZE+0xe02a>
    7be4:	20090003          	lb	zero,512(s2)
    7be8:	0100                	addi	s0,sp,128
    7bea:	0300                	addi	s0,sp,384
    7bec:	b804                	fsd	fs1,48(s0)
    7bee:	0302                	c.slli64	t1
    7bf0:	0900                	addi	s0,sp,144
    7bf2:	0004                	0x4
    7bf4:	0001                	nop
    7bf6:	02b80403          	lb	s0,43(a6)
    7bfa:	00090003          	lb	zero,0(s2)
    7bfe:	0100                	addi	s0,sp,128
    7c00:	0300                	addi	s0,sp,384
    7c02:	b804                	fsd	fs1,48(s0)
    7c04:	0302                	c.slli64	t1
    7c06:	0900                	addi	s0,sp,144
    7c08:	0000                	unimp
    7c0a:	0001                	nop
    7c0c:	02b80403          	lb	s0,43(a6)
    7c10:	04090003          	lb	zero,64(s2)
    7c14:	0100                	addi	s0,sp,128
    7c16:	0300                	addi	s0,sp,384
    7c18:	b804                	fsd	fs1,48(s0)
    7c1a:	0302                	c.slli64	t1
    7c1c:	0900                	addi	s0,sp,144
    7c1e:	000c                	0xc
    7c20:	0001                	nop
    7c22:	02b80403          	lb	s0,43(a6)
    7c26:	00090003          	lb	zero,0(s2)
    7c2a:	0100                	addi	s0,sp,128
    7c2c:	0300                	addi	s0,sp,384
    7c2e:	b804                	fsd	fs1,48(s0)
    7c30:	0602                	c.slli64	a2
    7c32:	00097f03          	0x97f03
    7c36:	0100                	addi	s0,sp,128
    7c38:	0300                	addi	s0,sp,384
    7c3a:	ab04                	fsd	fs1,16(a4)
    7c3c:	0602                	c.slli64	a2
    7c3e:	0c090103          	lb	sp,192(s2)
    7c42:	0100                	addi	s0,sp,128
    7c44:	0300                	addi	s0,sp,384
    7c46:	b204                	fsd	fs1,32(a2)
    7c48:	0602                	c.slli64	a2
    7c4a:	14090003          	lb	zero,320(s2)
    7c4e:	0100                	addi	s0,sp,128
    7c50:	0300                	addi	s0,sp,384
    7c52:	b504                	fsd	fs1,40(a0)
    7c54:	0302                	c.slli64	t1
    7c56:	0900                	addi	s0,sp,144
    7c58:	000c                	0xc
    7c5a:	0001                	nop
    7c5c:	02b50403          	lb	s0,43(a0)
    7c60:	0306                	slli	t1,t1,0x1
    7c62:	0900                	addi	s0,sp,144
    7c64:	000c                	0xc
    7c66:	0001                	nop
    7c68:	02a90403          	lb	s0,42(s2)
    7c6c:	0306                	slli	t1,t1,0x1
    7c6e:	0900                	addi	s0,sp,144
    7c70:	0000                	unimp
    7c72:	0001                	nop
    7c74:	02a90403          	lb	s0,42(s2)
    7c78:	0306                	slli	t1,t1,0x1
    7c7a:	0900                	addi	s0,sp,144
    7c7c:	0008                	0x8
    7c7e:	0001                	nop
    7c80:	02820403          	lb	s0,40(tp) # 28 <_start+0x18>
    7c84:	0c090003          	lb	zero,192(s2)
    7c88:	0100                	addi	s0,sp,128
    7c8a:	0300                	addi	s0,sp,384
    7c8c:	ba04                	fsd	fs1,48(a2)
    7c8e:	0302                	c.slli64	t1
    7c90:	0900                	addi	s0,sp,144
    7c92:	000c                	0xc
    7c94:	0001                	nop
    7c96:	02bc0403          	lb	s0,43(s8)
    7c9a:	0c090003          	lb	zero,192(s2)
    7c9e:	0100                	addi	s0,sp,128
    7ca0:	0300                	addi	s0,sp,384
    7ca2:	bc04                	fsd	fs1,56(s0)
    7ca4:	0302                	c.slli64	t1
    7ca6:	0900                	addi	s0,sp,144
    7ca8:	0000                	unimp
    7caa:	0001                	nop
    7cac:	02be0403          	lb	s0,43(t3)
    7cb0:	04090003          	lb	zero,64(s2)
    7cb4:	0100                	addi	s0,sp,128
    7cb6:	0300                	addi	s0,sp,384
    7cb8:	be04                	fsd	fs1,56(a2)
    7cba:	0302                	c.slli64	t1
    7cbc:	0900                	addi	s0,sp,144
    7cbe:	0000                	unimp
    7cc0:	0601                	addi	a2,a2,0
    7cc2:	04097f03          	0x4097f03
    7cc6:	0100                	addi	s0,sp,128
    7cc8:	0300                	addi	s0,sp,384
    7cca:	bf04                	fsd	fs1,56(a4)
    7ccc:	0602                	c.slli64	a2
    7cce:	10090103          	lb	sp,256(s2)
    7cd2:	0100                	addi	s0,sp,128
    7cd4:	0300                	addi	s0,sp,384
    7cd6:	c604                	sw	s1,8(a2)
    7cd8:	0302                	c.slli64	t1
    7cda:	0900                	addi	s0,sp,144
    7cdc:	0004                	0x4
    7cde:	0001                	nop
    7ce0:	02c60403          	lb	s0,44(a2)
    7ce4:	00090003          	lb	zero,0(s2)
    7ce8:	0100                	addi	s0,sp,128
    7cea:	0300                	addi	s0,sp,384
    7cec:	c604                	sw	s1,8(a2)
    7cee:	0302                	c.slli64	t1
    7cf0:	0900                	addi	s0,sp,144
    7cf2:	0000                	unimp
    7cf4:	0001                	nop
    7cf6:	02c60403          	lb	s0,44(a2)
    7cfa:	00090003          	lb	zero,0(s2)
    7cfe:	0100                	addi	s0,sp,128
    7d00:	0300                	addi	s0,sp,384
    7d02:	c604                	sw	s1,8(a2)
    7d04:	0302                	c.slli64	t1
    7d06:	0900                	addi	s0,sp,144
    7d08:	0004                	0x4
    7d0a:	0001                	nop
    7d0c:	02c60403          	lb	s0,44(a2)
    7d10:	0c090003          	lb	zero,192(s2)
    7d14:	0100                	addi	s0,sp,128
    7d16:	0300                	addi	s0,sp,384
    7d18:	c604                	sw	s1,8(a2)
    7d1a:	0302                	c.slli64	t1
    7d1c:	0900                	addi	s0,sp,144
    7d1e:	0000                	unimp
    7d20:	0001                	nop
    7d22:	02c60403          	lb	s0,44(a2)
    7d26:	00090003          	lb	zero,0(s2)
    7d2a:	0100                	addi	s0,sp,128
    7d2c:	0300                	addi	s0,sp,384
    7d2e:	c604                	sw	s1,8(a2)
    7d30:	0302                	c.slli64	t1
    7d32:	0900                	addi	s0,sp,144
    7d34:	0000                	unimp
    7d36:	0001                	nop
    7d38:	02c80403          	lb	s0,44(a6)
    7d3c:	0c090003          	lb	zero,192(s2)
    7d40:	0100                	addi	s0,sp,128
    7d42:	0300                	addi	s0,sp,384
    7d44:	c804                	sw	s1,16(s0)
    7d46:	0302                	c.slli64	t1
    7d48:	0900                	addi	s0,sp,144
    7d4a:	0000                	unimp
    7d4c:	0001                	nop
    7d4e:	02c80403          	lb	s0,44(a6)
    7d52:	00090003          	lb	zero,0(s2)
    7d56:	0100                	addi	s0,sp,128
    7d58:	0300                	addi	s0,sp,384
    7d5a:	c804                	sw	s1,16(s0)
    7d5c:	0302                	c.slli64	t1
    7d5e:	0900                	addi	s0,sp,144
    7d60:	0004                	0x4
    7d62:	0001                	nop
    7d64:	02c80403          	lb	s0,44(a6)
    7d68:	0c090003          	lb	zero,192(s2)
    7d6c:	0100                	addi	s0,sp,128
    7d6e:	0300                	addi	s0,sp,384
    7d70:	c804                	sw	s1,16(s0)
    7d72:	0302                	c.slli64	t1
    7d74:	0900                	addi	s0,sp,144
    7d76:	0000                	unimp
    7d78:	0001                	nop
    7d7a:	02c80403          	lb	s0,44(a6)
    7d7e:	00090003          	lb	zero,0(s2)
    7d82:	0100                	addi	s0,sp,128
    7d84:	0300                	addi	s0,sp,384
    7d86:	c904                	sw	s1,16(a0)
    7d88:	0302                	c.slli64	t1
    7d8a:	0900                	addi	s0,sp,144
    7d8c:	0004                	0x4
    7d8e:	0601                	addi	a2,a2,0
    7d90:	08090003          	lb	zero,128(s2)
    7d94:	0100                	addi	s0,sp,128
    7d96:	0300                	addi	s0,sp,384
    7d98:	dc04                	sw	s1,56(s0)
    7d9a:	0602                	c.slli64	a2
    7d9c:	0c090003          	lb	zero,192(s2)
    7da0:	0100                	addi	s0,sp,128
    7da2:	0300                	addi	s0,sp,384
    7da4:	dc04                	sw	s1,56(s0)
    7da6:	0302                	c.slli64	t1
    7da8:	0900                	addi	s0,sp,144
    7daa:	0000                	unimp
    7dac:	0001                	nop
    7dae:	02dc0403          	lb	s0,45(s8)
    7db2:	00090003          	lb	zero,0(s2)
    7db6:	0100                	addi	s0,sp,128
    7db8:	0300                	addi	s0,sp,384
    7dba:	dc04                	sw	s1,56(s0)
    7dbc:	0302                	c.slli64	t1
    7dbe:	0900                	addi	s0,sp,144
    7dc0:	0000                	unimp
    7dc2:	0001                	nop
    7dc4:	02dc0403          	lb	s0,45(s8)
    7dc8:	00090003          	lb	zero,0(s2)
    7dcc:	0100                	addi	s0,sp,128
    7dce:	0300                	addi	s0,sp,384
    7dd0:	dc04                	sw	s1,56(s0)
    7dd2:	0302                	c.slli64	t1
    7dd4:	0900                	addi	s0,sp,144
    7dd6:	0000                	unimp
    7dd8:	0001                	nop
    7dda:	02dc0403          	lb	s0,45(s8)
    7dde:	00090003          	lb	zero,0(s2)
    7de2:	0100                	addi	s0,sp,128
    7de4:	0300                	addi	s0,sp,384
    7de6:	dc04                	sw	s1,56(s0)
    7de8:	0302                	c.slli64	t1
    7dea:	0900                	addi	s0,sp,144
    7dec:	0000                	unimp
    7dee:	0001                	nop
    7df0:	02dd0403          	lb	s0,45(s10)
    7df4:	04090003          	lb	zero,64(s2)
    7df8:	0100                	addi	s0,sp,128
    7dfa:	0306                	slli	t1,t1,0x1
    7dfc:	097f                	0x97f
    7dfe:	0004                	0x4
    7e00:	0301                	addi	t1,t1,0
    7e02:	0901                	addi	s2,s2,0
    7e04:	0008                	0x8
    7e06:	0001                	nop
    7e08:	02de0403          	lb	s0,45(t3)
    7e0c:	0306                	slli	t1,t1,0x1
    7e0e:	0900                	addi	s0,sp,144
    7e10:	0008                	0x8
    7e12:	0001                	nop
    7e14:	02bb0403          	lb	s0,43(s6)
    7e18:	08090003          	lb	zero,128(s2)
    7e1c:	0100                	addi	s0,sp,128
    7e1e:	0300                	addi	s0,sp,384
    7e20:	bb04                	fsd	fs1,48(a4)
    7e22:	0302                	c.slli64	t1
    7e24:	0900                	addi	s0,sp,144
    7e26:	0000                	unimp
    7e28:	0001                	nop
    7e2a:	02bb0403          	lb	s0,43(s6)
    7e2e:	00090003          	lb	zero,0(s2)
    7e32:	0100                	addi	s0,sp,128
    7e34:	0300                	addi	s0,sp,384
    7e36:	bb04                	fsd	fs1,48(a4)
    7e38:	0302                	c.slli64	t1
    7e3a:	0900                	addi	s0,sp,144
    7e3c:	0000                	unimp
    7e3e:	0001                	nop
    7e40:	02bb0403          	lb	s0,43(s6)
    7e44:	04090003          	lb	zero,64(s2)
    7e48:	0100                	addi	s0,sp,128
    7e4a:	0300                	addi	s0,sp,384
    7e4c:	bb04                	fsd	fs1,48(a4)
    7e4e:	0302                	c.slli64	t1
    7e50:	0900                	addi	s0,sp,144
    7e52:	000c                	0xc
    7e54:	0001                	nop
    7e56:	02bb0403          	lb	s0,43(s6)
    7e5a:	00090003          	lb	zero,0(s2)
    7e5e:	0100                	addi	s0,sp,128
    7e60:	0300                	addi	s0,sp,384
    7e62:	bb04                	fsd	fs1,48(a4)
    7e64:	0302                	c.slli64	t1
    7e66:	0900                	addi	s0,sp,144
    7e68:	0000                	unimp
    7e6a:	0001                	nop
    7e6c:	02bb0403          	lb	s0,43(s6)
    7e70:	00090003          	lb	zero,0(s2)
    7e74:	0100                	addi	s0,sp,128
    7e76:	0300                	addi	s0,sp,384
    7e78:	ee04                	fsw	fs1,24(a2)
    7e7a:	0302                	c.slli64	t1
    7e7c:	0900                	addi	s0,sp,144
    7e7e:	000c                	0xc
    7e80:	0001                	nop
    7e82:	02ee0403          	lb	s0,46(t3)
    7e86:	00090003          	lb	zero,0(s2)
    7e8a:	0100                	addi	s0,sp,128
    7e8c:	0300                	addi	s0,sp,384
    7e8e:	ee04                	fsw	fs1,24(a2)
    7e90:	0302                	c.slli64	t1
    7e92:	0900                	addi	s0,sp,144
    7e94:	0000                	unimp
    7e96:	0001                	nop
    7e98:	02ee0403          	lb	s0,46(t3)
    7e9c:	04090003          	lb	zero,64(s2)
    7ea0:	0100                	addi	s0,sp,128
    7ea2:	0300                	addi	s0,sp,384
    7ea4:	ee04                	fsw	fs1,24(a2)
    7ea6:	0302                	c.slli64	t1
    7ea8:	0900                	addi	s0,sp,144
    7eaa:	000c                	0xc
    7eac:	0001                	nop
    7eae:	02ee0403          	lb	s0,46(t3)
    7eb2:	00090003          	lb	zero,0(s2)
    7eb6:	0100                	addi	s0,sp,128
    7eb8:	0300                	addi	s0,sp,384
    7eba:	ee04                	fsw	fs1,24(a2)
    7ebc:	0302                	c.slli64	t1
    7ebe:	0900                	addi	s0,sp,144
    7ec0:	0000                	unimp
    7ec2:	0001                	nop
    7ec4:	02f70403          	lb	s0,47(a4)
    7ec8:	04090003          	lb	zero,64(s2)
    7ecc:	0100                	addi	s0,sp,128
    7ece:	0300                	addi	s0,sp,384
    7ed0:	f704                	fsw	fs1,40(a4)
    7ed2:	0302                	c.slli64	t1
    7ed4:	0900                	addi	s0,sp,144
    7ed6:	0000                	unimp
    7ed8:	0001                	nop
    7eda:	02fa0403          	lb	s0,47(s4)
    7ede:	04090003          	lb	zero,64(s2)
    7ee2:	0100                	addi	s0,sp,128
    7ee4:	0300                	addi	s0,sp,384
    7ee6:	fa04                	fsw	fs1,48(a2)
    7ee8:	0302                	c.slli64	t1
    7eea:	0900                	addi	s0,sp,144
    7eec:	0000                	unimp
    7eee:	0001                	nop
    7ef0:	02fa0403          	lb	s0,47(s4)
    7ef4:	00090003          	lb	zero,0(s2)
    7ef8:	0100                	addi	s0,sp,128
    7efa:	0300                	addi	s0,sp,384
    7efc:	fa04                	fsw	fs1,48(a2)
    7efe:	0302                	c.slli64	t1
    7f00:	0900                	addi	s0,sp,144
    7f02:	0000                	unimp
    7f04:	0001                	nop
    7f06:	02fa0403          	lb	s0,47(s4)
    7f0a:	08090003          	lb	zero,128(s2)
    7f0e:	0100                	addi	s0,sp,128
    7f10:	0300                	addi	s0,sp,384
    7f12:	8804                	0x8804
    7f14:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    7f18:	0000                	unimp
    7f1a:	0001                	nop
    7f1c:	03880403          	lb	s0,56(a6)
    7f20:	00090003          	lb	zero,0(s2)
    7f24:	0100                	addi	s0,sp,128
    7f26:	0300                	addi	s0,sp,384
    7f28:	8804                	0x8804
    7f2a:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    7f2e:	0004                	0x4
    7f30:	0001                	nop
    7f32:	038e0403          	lb	s0,56(t3)
    7f36:	08090003          	lb	zero,128(s2)
    7f3a:	0100                	addi	s0,sp,128
    7f3c:	0300                	addi	s0,sp,384
    7f3e:	8e04                	0x8e04
    7f40:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    7f44:	0000                	unimp
    7f46:	0001                	nop
    7f48:	038e0403          	lb	s0,56(t3)
    7f4c:	14090003          	lb	zero,320(s2)
    7f50:	0100                	addi	s0,sp,128
    7f52:	0300                	addi	s0,sp,384
    7f54:	9204                	0x9204
    7f56:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    7f5a:	0004                	0x4
    7f5c:	0001                	nop
    7f5e:	03930403          	lb	s0,57(t1)
    7f62:	04090003          	lb	zero,64(s2)
    7f66:	0100                	addi	s0,sp,128
    7f68:	0300                	addi	s0,sp,384
    7f6a:	9304                	0x9304
    7f6c:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    7f70:	0008                	0x8
    7f72:	0001                	nop
    7f74:	03950403          	lb	s0,57(a0)
    7f78:	08090003          	lb	zero,128(s2)
    7f7c:	0100                	addi	s0,sp,128
    7f7e:	0300                	addi	s0,sp,384
    7f80:	9504                	0x9504
    7f82:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    7f86:	0020                	addi	s0,sp,8
    7f88:	0001                	nop
    7f8a:	03a10403          	lb	s0,58(sp)
    7f8e:	0306                	slli	t1,t1,0x1
    7f90:	0900                	addi	s0,sp,144
    7f92:	0004                	0x4
    7f94:	0001                	nop
    7f96:	02ef0403          	lb	s0,46(t5)
    7f9a:	0306                	slli	t1,t1,0x1
    7f9c:	0900                	addi	s0,sp,144
    7f9e:	0008                	0x8
    7fa0:	0601                	addi	a2,a2,0
    7fa2:	0c090003          	lb	zero,192(s2)
    7fa6:	0100                	addi	s0,sp,128
    7fa8:	0300                	addi	s0,sp,384
    7faa:	8104                	0x8104
    7fac:	00030603          	lb	a2,0(t1)
    7fb0:	0809                	addi	a6,a6,2
    7fb2:	0100                	addi	s0,sp,128
    7fb4:	0300                	addi	s0,sp,384
    7fb6:	8104                	0x8104
    7fb8:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    7fbc:	0000                	unimp
    7fbe:	0001                	nop
    7fc0:	03810403          	lb	s0,56(sp)
    7fc4:	00090003          	lb	zero,0(s2)
    7fc8:	0100                	addi	s0,sp,128
    7fca:	0300                	addi	s0,sp,384
    7fcc:	8104                	0x8104
    7fce:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    7fd2:	0000                	unimp
    7fd4:	0001                	nop
    7fd6:	03810403          	lb	s0,56(sp)
    7fda:	08090003          	lb	zero,128(s2)
    7fde:	0100                	addi	s0,sp,128
    7fe0:	0300                	addi	s0,sp,384
    7fe2:	8104                	0x8104
    7fe4:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    7fe8:	0000                	unimp
    7fea:	0001                	nop
    7fec:	038a0403          	lb	s0,56(s4)
    7ff0:	08090003          	lb	zero,128(s2)
    7ff4:	0100                	addi	s0,sp,128
    7ff6:	0300                	addi	s0,sp,384
    7ff8:	8a04                	0x8a04
    7ffa:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    7ffe:	0008                	0x8
    8000:	0001                	nop
    8002:	03960403          	lb	s0,57(a2)
    8006:	08090003          	lb	zero,128(s2)
    800a:	0100                	addi	s0,sp,128
    800c:	0300                	addi	s0,sp,384
    800e:	9e04                	0x9e04
    8010:	00030603          	lb	a2,0(t1)
    8014:	1409                	addi	s0,s0,-30
    8016:	0100                	addi	s0,sp,128
    8018:	0300                	addi	s0,sp,384
    801a:	a104                	fsd	fs1,0(a0)
    801c:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    8020:	000c                	0xc
    8022:	0001                	nop
    8024:	03a10403          	lb	s0,58(sp)
    8028:	0306                	slli	t1,t1,0x1
    802a:	0900                	addi	s0,sp,144
    802c:	000c                	0xc
    802e:	0001                	nop
    8030:	03940403          	lb	s0,57(s0)
    8034:	08090003          	lb	zero,128(s2)
    8038:	0100                	addi	s0,sp,128
    803a:	0300                	addi	s0,sp,384
    803c:	9404                	0x9404
    803e:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    8042:	0004                	0x4
    8044:	0601                	addi	a2,a2,0
    8046:	10097f03          	0x10097f03
    804a:	0100                	addi	s0,sp,128
    804c:	08090103          	lb	sp,128(s2)
    8050:	0100                	addi	s0,sp,128
    8052:	08097f03          	0x8097f03
    8056:	0100                	addi	s0,sp,128
    8058:	0200                	addi	s0,sp,256
    805a:	2f04                	fld	fs1,24(a4)
    805c:	0306                	slli	t1,t1,0x1
    805e:	0902                	c.slli64	s2
    8060:	0018                	0x18
    8062:	0001                	nop
    8064:	0402                	c.slli64	s0
    8066:	0900032f          	vamoswapei8.v	zero,(zero),v16,v6,v0.t
    806a:	0000                	unimp
    806c:	0001                	nop
    806e:	0402                	c.slli64	s0
    8070:	0900032f          	vamoswapei8.v	zero,(zero),v16,v6,v0.t
    8074:	0000                	unimp
    8076:	0001                	nop
    8078:	0402                	c.slli64	s0
    807a:	0900033f 0001000c 	0x1000c0900033f
    8082:	0402                	c.slli64	s0
    8084:	0900033f 00010000 	0x100000900033f
    808c:	0402                	c.slli64	s0
    808e:	0900033f 06010004 	0x60100040900033f
    8096:	08090003          	lb	zero,128(s2)
    809a:	0100                	addi	s0,sp,128
    809c:	0200                	addi	s0,sp,256
    809e:	4f04                	lw	s1,24(a4)
    80a0:	0306                	slli	t1,t1,0x1
    80a2:	0900                	addi	s0,sp,144
    80a4:	000c                	0xc
    80a6:	0001                	nop
    80a8:	0402                	c.slli64	s0
    80aa:	0900034f          	fnmadd.s	ft6,ft0,fa6,ft1,rne
    80ae:	0000                	unimp
    80b0:	0001                	nop
    80b2:	0402                	c.slli64	s0
    80b4:	0900034f          	fnmadd.s	ft6,ft0,fa6,ft1,rne
    80b8:	0000                	unimp
    80ba:	0001                	nop
    80bc:	0402                	c.slli64	s0
    80be:	0900034f          	fnmadd.s	ft6,ft0,fa6,ft1,rne
    80c2:	000c                	0xc
    80c4:	0001                	nop
    80c6:	0402                	c.slli64	s0
    80c8:	0900034f          	fnmadd.s	ft6,ft0,fa6,ft1,rne
    80cc:	0008                	0x8
    80ce:	0001                	nop
    80d0:	0402                	c.slli64	s0
    80d2:	0650                	addi	a2,sp,772
    80d4:	04090003          	lb	zero,64(s2)
    80d8:	0100                	addi	s0,sp,128
    80da:	0c090003          	lb	zero,192(s2)
    80de:	0100                	addi	s0,sp,128
    80e0:	0200                	addi	s0,sp,256
    80e2:	5a04                	lw	s1,48(a2)
    80e4:	0306                	slli	t1,t1,0x1
    80e6:	0900                	addi	s0,sp,144
    80e8:	000c                	0xc
    80ea:	0001                	nop
    80ec:	0402                	c.slli64	s0
    80ee:	035a                	slli	t1,t1,0x16
    80f0:	0900                	addi	s0,sp,144
    80f2:	0000                	unimp
    80f4:	0001                	nop
    80f6:	0402                	c.slli64	s0
    80f8:	035a                	slli	t1,t1,0x16
    80fa:	0900                	addi	s0,sp,144
    80fc:	0000                	unimp
    80fe:	0001                	nop
    8100:	0402                	c.slli64	s0
    8102:	035a                	slli	t1,t1,0x16
    8104:	0900                	addi	s0,sp,144
    8106:	0000                	unimp
    8108:	0001                	nop
    810a:	0402                	c.slli64	s0
    810c:	035a                	slli	t1,t1,0x16
    810e:	0900                	addi	s0,sp,144
    8110:	0000                	unimp
    8112:	0001                	nop
    8114:	0402                	c.slli64	s0
    8116:	035a                	slli	t1,t1,0x16
    8118:	0900                	addi	s0,sp,144
    811a:	0000                	unimp
    811c:	0001                	nop
    811e:	0402                	c.slli64	s0
    8120:	035a                	slli	t1,t1,0x16
    8122:	0900                	addi	s0,sp,144
    8124:	0000                	unimp
    8126:	0001                	nop
    8128:	0402                	c.slli64	s0
    812a:	035a                	slli	t1,t1,0x16
    812c:	0900                	addi	s0,sp,144
    812e:	0000                	unimp
    8130:	0001                	nop
    8132:	0402                	c.slli64	s0
    8134:	035a                	slli	t1,t1,0x16
    8136:	0900                	addi	s0,sp,144
    8138:	0000                	unimp
    813a:	0501                	addi	a0,a0,0
    813c:	0001                	nop
    813e:	0402                	c.slli64	s0
    8140:	065a                	slli	a2,a2,0x16
    8142:	0c090403          	lb	s0,192(s2)
    8146:	0100                	addi	s0,sp,128
    8148:	0305                	addi	t1,t1,1
    814a:	0200                	addi	s0,sp,256
    814c:	5a04                	lw	s1,48(a2)
    814e:	08097c03          	0x8097c03
    8152:	0100                	addi	s0,sp,128
    8154:	0200                	addi	s0,sp,256
    8156:	5a04                	lw	s1,48(a2)
    8158:	0306                	slli	t1,t1,0x1
    815a:	0900                	addi	s0,sp,144
    815c:	0014                	0x14
    815e:	0001                	nop
    8160:	0402                	c.slli64	s0
    8162:	035a                	slli	t1,t1,0x16
    8164:	0900                	addi	s0,sp,144
    8166:	0000                	unimp
    8168:	0001                	nop
    816a:	0402                	c.slli64	s0
    816c:	035a                	slli	t1,t1,0x16
    816e:	0901                	addi	s2,s2,0
    8170:	0000                	unimp
    8172:	0001                	nop
    8174:	0402                	c.slli64	s0
    8176:	035a                	slli	t1,t1,0x16
    8178:	0900                	addi	s0,sp,144
    817a:	0000                	unimp
    817c:	0001                	nop
    817e:	0402                	c.slli64	s0
    8180:	035a                	slli	t1,t1,0x16
    8182:	0900                	addi	s0,sp,144
    8184:	0000                	unimp
    8186:	0001                	nop
    8188:	0402                	c.slli64	s0
    818a:	035a                	slli	t1,t1,0x16
    818c:	0902                	c.slli64	s2
    818e:	0000                	unimp
    8190:	0501                	addi	a0,a0,0
    8192:	0001                	nop
    8194:	0402                	c.slli64	s0
    8196:	065a                	slli	a2,a2,0x16
    8198:	00090103          	lb	sp,0(s2)
    819c:	0100                	addi	s0,sp,128
    819e:	0305                	addi	t1,t1,1
    81a0:	20097a03          	0x20097a03
    81a4:	0100                	addi	s0,sp,128
    81a6:	08090103          	lb	sp,128(s2)
    81aa:	0100                	addi	s0,sp,128
    81ac:	3c09                	jal	7bbe <__heap_end+0x32e>
    81ae:	0000                	unimp
    81b0:	0101                	addi	sp,sp,0
    81b2:	10a4                	addi	s1,sp,104
    81b4:	0000                	unimp
    81b6:	00600003          	lb	zero,6(zero) # 6 <RAM_START_ADDRESS+0x6>
    81ba:	0000                	unimp
    81bc:	0101                	addi	sp,sp,0
    81be:	000d0efb          	0xd0efb
    81c2:	0101                	addi	sp,sp,0
    81c4:	0101                	addi	sp,sp,0
    81c6:	0000                	unimp
    81c8:	0100                	addi	s0,sp,128
    81ca:	0000                	unimp
    81cc:	2e01                	jal	84dc <__heap_end+0xc4c>
    81ce:	2f2e                	fld	ft10,200(sp)
    81d0:	2e2e                	fld	ft8,200(sp)
    81d2:	2f2e2e2f          	0x2f2e2e2f
    81d6:	2e2e                	fld	ft8,200(sp)
    81d8:	2f2e2e2f          	0x2f2e2e2f
    81dc:	6972                	flw	fs2,28(sp)
    81de:	2d766373          	csrrsi	t1,0x2d7,12
    81e2:	2f636367          	0x2f636367
    81e6:	696c                	flw	fa1,84(a0)
    81e8:	6762                	flw	fa4,24(sp)
    81ea:	732f6363          	bltu	t5,s2,8910 <__heap_end+0x1080>
    81ee:	2d74666f          	jal	a2,4ecc4 <RAM_SIZE+0x3ecc4>
    81f2:	7066                	flw	ft0,120(sp)
    81f4:	0000                	unimp
    81f6:	6964                	flw	fs1,84(a0)
    81f8:	6476                	flw	fs0,92(sp)
    81fa:	3366                	fld	ft6,120(sp)
    81fc:	632e                	flw	ft6,200(sp)
    81fe:	0100                	addi	s0,sp,128
    8200:	0000                	unimp
    8202:	74666f73          	csrrsi	t5,0x746,12
    8206:	662d                	lui	a2,0xb
    8208:	2e70                	fld	fa2,216(a2)
    820a:	0068                	addi	a0,sp,12
    820c:	0001                	nop
    820e:	6400                	flw	fs0,8(s0)
    8210:	6c62756f          	jal	a0,2f8d6 <RAM_SIZE+0x1f8d6>
    8214:	2e65                	jal	85cc <__heap_end+0xd3c>
    8216:	0068                	addi	a0,sp,12
    8218:	0001                	nop
    821a:	0000                	unimp
    821c:	0105                	addi	sp,sp,1
    821e:	0500                	addi	s0,sp,640
    8220:	ec02                	fsw	ft0,24(sp)
    8222:	0040                	addi	s0,sp,4
    8224:	0300                	addi	s0,sp,384
    8226:	03050123          	sb	a6,34(a0)
    822a:	00090103          	lb	sp,0(s2)
    822e:	0100                	addi	s0,sp,128
    8230:	00090003          	lb	zero,0(s2)
    8234:	0100                	addi	s0,sp,128
    8236:	0d05                	addi	s10,s10,1
    8238:	00090003          	lb	zero,0(s2)
    823c:	0100                	addi	s0,sp,128
    823e:	0305                	addi	t1,t1,1
    8240:	00090103          	lb	sp,0(s2)
    8244:	0100                	addi	s0,sp,128
    8246:	00090003          	lb	zero,0(s2)
    824a:	0100                	addi	s0,sp,128
    824c:	00090003          	lb	zero,0(s2)
    8250:	0100                	addi	s0,sp,128
    8252:	00090003          	lb	zero,0(s2)
    8256:	0100                	addi	s0,sp,128
    8258:	00090103          	lb	sp,0(s2)
    825c:	0100                	addi	s0,sp,128
    825e:	00090003          	lb	zero,0(s2)
    8262:	0100                	addi	s0,sp,128
    8264:	00090003          	lb	zero,0(s2)
    8268:	0100                	addi	s0,sp,128
    826a:	00090003          	lb	zero,0(s2)
    826e:	0100                	addi	s0,sp,128
    8270:	00090103          	lb	sp,0(s2)
    8274:	0100                	addi	s0,sp,128
    8276:	00090003          	lb	zero,0(s2)
    827a:	0100                	addi	s0,sp,128
    827c:	00090003          	lb	zero,0(s2)
    8280:	0100                	addi	s0,sp,128
    8282:	00090003          	lb	zero,0(s2)
    8286:	0100                	addi	s0,sp,128
    8288:	00090103          	lb	sp,0(s2)
    828c:	0100                	addi	s0,sp,128
    828e:	00090203          	lb	tp,0(s2)
    8292:	0100                	addi	s0,sp,128
    8294:	00090103          	lb	sp,0(s2)
    8298:	0100                	addi	s0,sp,128
    829a:	00090003          	lb	zero,0(s2)
    829e:	0100                	addi	s0,sp,128
    82a0:	00090003          	lb	zero,0(s2)
    82a4:	0100                	addi	s0,sp,128
    82a6:	00090003          	lb	zero,0(s2)
    82aa:	0100                	addi	s0,sp,128
    82ac:	00090003          	lb	zero,0(s2)
    82b0:	0100                	addi	s0,sp,128
    82b2:	00090003          	lb	zero,0(s2)
    82b6:	0100                	addi	s0,sp,128
    82b8:	0105                	addi	sp,sp,1
    82ba:	0306                	slli	t1,t1,0x1
    82bc:	0978                	addi	a4,sp,156
    82be:	0000                	unimp
    82c0:	0501                	addi	a0,a0,0
    82c2:	09080303          	lb	t1,144(a6)
    82c6:	0008                	0x8
    82c8:	0501                	addi	a0,a0,0
    82ca:	0301                	addi	t1,t1,0
    82cc:	0978                	addi	a4,sp,156
    82ce:	0004                	0x4
    82d0:	0501                	addi	a0,a0,0
    82d2:	09080303          	lb	t1,144(a6)
    82d6:	0014                	0x14
    82d8:	0501                	addi	a0,a0,0
    82da:	0301                	addi	t1,t1,0
    82dc:	0978                	addi	a4,sp,156
    82de:	0004                	0x4
    82e0:	0501                	addi	a0,a0,0
    82e2:	09080303          	lb	t1,144(a6)
    82e6:	001c                	0x1c
    82e8:	0501                	addi	a0,a0,0
    82ea:	0301                	addi	t1,t1,0
    82ec:	0978                	addi	a4,sp,156
    82ee:	0004                	0x4
    82f0:	0501                	addi	a0,a0,0
    82f2:	09080303          	lb	t1,144(a6)
    82f6:	000c                	0xc
    82f8:	0601                	addi	a2,a2,0
    82fa:	04090003          	lb	zero,64(s2)
    82fe:	0100                	addi	s0,sp,128
    8300:	00090003          	lb	zero,0(s2)
    8304:	0100                	addi	s0,sp,128
    8306:	04090003          	lb	zero,64(s2)
    830a:	0100                	addi	s0,sp,128
    830c:	00090003          	lb	zero,0(s2)
    8310:	0100                	addi	s0,sp,128
    8312:	00090003          	lb	zero,0(s2)
    8316:	0100                	addi	s0,sp,128
    8318:	0200                	addi	s0,sp,256
    831a:	0104                	addi	s1,sp,128
    831c:	0c090003          	lb	zero,192(s2)
    8320:	0100                	addi	s0,sp,128
    8322:	0200                	addi	s0,sp,256
    8324:	0104                	addi	s1,sp,128
    8326:	00090003          	lb	zero,0(s2)
    832a:	0100                	addi	s0,sp,128
    832c:	0200                	addi	s0,sp,256
    832e:	0104                	addi	s1,sp,128
    8330:	00090003          	lb	zero,0(s2)
    8334:	0100                	addi	s0,sp,128
    8336:	0200                	addi	s0,sp,256
    8338:	0104                	addi	s1,sp,128
    833a:	00090003          	lb	zero,0(s2)
    833e:	0100                	addi	s0,sp,128
    8340:	0200                	addi	s0,sp,256
    8342:	0104                	addi	s1,sp,128
    8344:	14090003          	lb	zero,320(s2)
    8348:	0100                	addi	s0,sp,128
    834a:	0200                	addi	s0,sp,256
    834c:	0104                	addi	s1,sp,128
    834e:	04090003          	lb	zero,64(s2)
    8352:	0100                	addi	s0,sp,128
    8354:	0200                	addi	s0,sp,256
    8356:	0104                	addi	s1,sp,128
    8358:	00090003          	lb	zero,0(s2)
    835c:	0100                	addi	s0,sp,128
    835e:	0200                	addi	s0,sp,256
    8360:	0104                	addi	s1,sp,128
    8362:	04090003          	lb	zero,64(s2)
    8366:	0100                	addi	s0,sp,128
    8368:	0200                	addi	s0,sp,256
    836a:	0104                	addi	s1,sp,128
    836c:	00090003          	lb	zero,0(s2)
    8370:	0100                	addi	s0,sp,128
    8372:	0200                	addi	s0,sp,256
    8374:	2904                	fld	fs1,16(a0)
    8376:	00090003          	lb	zero,0(s2)
    837a:	0100                	addi	s0,sp,128
    837c:	0200                	addi	s0,sp,256
    837e:	2904                	fld	fs1,16(a0)
    8380:	00090003          	lb	zero,0(s2)
    8384:	0100                	addi	s0,sp,128
    8386:	0200                	addi	s0,sp,256
    8388:	0804                	addi	s1,sp,16
    838a:	04090003          	lb	zero,64(s2)
    838e:	0100                	addi	s0,sp,128
    8390:	0200                	addi	s0,sp,256
    8392:	0804                	addi	s1,sp,16
    8394:	00090003          	lb	zero,0(s2)
    8398:	0100                	addi	s0,sp,128
    839a:	0200                	addi	s0,sp,256
    839c:	0804                	addi	s1,sp,16
    839e:	00090103          	lb	sp,0(s2)
    83a2:	0100                	addi	s0,sp,128
    83a4:	0200                	addi	s0,sp,256
    83a6:	0804                	addi	s1,sp,16
    83a8:	00090003          	lb	zero,0(s2)
    83ac:	0100                	addi	s0,sp,128
    83ae:	0200                	addi	s0,sp,256
    83b0:	0804                	addi	s1,sp,16
    83b2:	00090003          	lb	zero,0(s2)
    83b6:	0100                	addi	s0,sp,128
    83b8:	0200                	addi	s0,sp,256
    83ba:	0804                	addi	s1,sp,16
    83bc:	00090003          	lb	zero,0(s2)
    83c0:	0100                	addi	s0,sp,128
    83c2:	0200                	addi	s0,sp,256
    83c4:	0804                	addi	s1,sp,16
    83c6:	00090003          	lb	zero,0(s2)
    83ca:	0100                	addi	s0,sp,128
    83cc:	0200                	addi	s0,sp,256
    83ce:	0804                	addi	s1,sp,16
    83d0:	00090003          	lb	zero,0(s2)
    83d4:	0100                	addi	s0,sp,128
    83d6:	0200                	addi	s0,sp,256
    83d8:	0804                	addi	s1,sp,16
    83da:	10090003          	lb	zero,256(s2)
    83de:	0100                	addi	s0,sp,128
    83e0:	0200                	addi	s0,sp,256
    83e2:	0804                	addi	s1,sp,16
    83e4:	00090003          	lb	zero,0(s2)
    83e8:	0100                	addi	s0,sp,128
    83ea:	0200                	addi	s0,sp,256
    83ec:	0804                	addi	s1,sp,16
    83ee:	04090003          	lb	zero,64(s2)
    83f2:	0100                	addi	s0,sp,128
    83f4:	0200                	addi	s0,sp,256
    83f6:	0804                	addi	s1,sp,16
    83f8:	00090003          	lb	zero,0(s2)
    83fc:	0100                	addi	s0,sp,128
    83fe:	0200                	addi	s0,sp,256
    8400:	0804                	addi	s1,sp,16
    8402:	00090003          	lb	zero,0(s2)
    8406:	0100                	addi	s0,sp,128
    8408:	0306                	slli	t1,t1,0x1
    840a:	0900                	addi	s0,sp,144
    840c:	0004                	0x4
    840e:	0001                	nop
    8410:	0402                	c.slli64	s0
    8412:	0601                	addi	a2,a2,0
    8414:	08090003          	lb	zero,128(s2)
    8418:	0100                	addi	s0,sp,128
    841a:	0200                	addi	s0,sp,256
    841c:	0104                	addi	s1,sp,128
    841e:	00090003          	lb	zero,0(s2)
    8422:	0100                	addi	s0,sp,128
    8424:	0200                	addi	s0,sp,256
    8426:	0104                	addi	s1,sp,128
    8428:	00090003          	lb	zero,0(s2)
    842c:	0100                	addi	s0,sp,128
    842e:	0200                	addi	s0,sp,256
    8430:	0104                	addi	s1,sp,128
    8432:	00090003          	lb	zero,0(s2)
    8436:	0100                	addi	s0,sp,128
    8438:	0200                	addi	s0,sp,256
    843a:	0104                	addi	s1,sp,128
    843c:	14090003          	lb	zero,320(s2)
    8440:	0100                	addi	s0,sp,128
    8442:	0200                	addi	s0,sp,256
    8444:	0104                	addi	s1,sp,128
    8446:	04090003          	lb	zero,64(s2)
    844a:	0100                	addi	s0,sp,128
    844c:	0200                	addi	s0,sp,256
    844e:	0104                	addi	s1,sp,128
    8450:	00090003          	lb	zero,0(s2)
    8454:	0100                	addi	s0,sp,128
    8456:	0200                	addi	s0,sp,256
    8458:	0104                	addi	s1,sp,128
    845a:	04090003          	lb	zero,64(s2)
    845e:	0100                	addi	s0,sp,128
    8460:	0200                	addi	s0,sp,256
    8462:	0104                	addi	s1,sp,128
    8464:	00090003          	lb	zero,0(s2)
    8468:	0100                	addi	s0,sp,128
    846a:	0200                	addi	s0,sp,256
    846c:	2904                	fld	fs1,16(a0)
    846e:	00090003          	lb	zero,0(s2)
    8472:	0100                	addi	s0,sp,128
    8474:	0200                	addi	s0,sp,256
    8476:	2904                	fld	fs1,16(a0)
    8478:	00090003          	lb	zero,0(s2)
    847c:	0100                	addi	s0,sp,128
    847e:	0200                	addi	s0,sp,256
    8480:	0804                	addi	s1,sp,16
    8482:	04090003          	lb	zero,64(s2)
    8486:	0100                	addi	s0,sp,128
    8488:	0200                	addi	s0,sp,256
    848a:	0804                	addi	s1,sp,16
    848c:	00090003          	lb	zero,0(s2)
    8490:	0100                	addi	s0,sp,128
    8492:	0200                	addi	s0,sp,256
    8494:	0804                	addi	s1,sp,16
    8496:	00090103          	lb	sp,0(s2)
    849a:	0100                	addi	s0,sp,128
    849c:	0200                	addi	s0,sp,256
    849e:	0804                	addi	s1,sp,16
    84a0:	00090003          	lb	zero,0(s2)
    84a4:	0100                	addi	s0,sp,128
    84a6:	0200                	addi	s0,sp,256
    84a8:	0804                	addi	s1,sp,16
    84aa:	14090003          	lb	zero,320(s2)
    84ae:	0100                	addi	s0,sp,128
    84b0:	0200                	addi	s0,sp,256
    84b2:	0804                	addi	s1,sp,16
    84b4:	04090003          	lb	zero,64(s2)
    84b8:	0100                	addi	s0,sp,128
    84ba:	0200                	addi	s0,sp,256
    84bc:	0204                	addi	s1,sp,256
    84be:	20097e03          	0x20097e03
    84c2:	0100                	addi	s0,sp,128
    84c4:	0200                	addi	s0,sp,256
    84c6:	0d04                	addi	s1,sp,656
    84c8:	08090003          	lb	zero,128(s2)
    84cc:	0100                	addi	s0,sp,128
    84ce:	0200                	addi	s0,sp,256
    84d0:	0d04                	addi	s1,sp,656
    84d2:	00090003          	lb	zero,0(s2)
    84d6:	0100                	addi	s0,sp,128
    84d8:	0200                	addi	s0,sp,256
    84da:	0d04                	addi	s1,sp,656
    84dc:	00090003          	lb	zero,0(s2)
    84e0:	0100                	addi	s0,sp,128
    84e2:	0200                	addi	s0,sp,256
    84e4:	0d04                	addi	s1,sp,656
    84e6:	00090003          	lb	zero,0(s2)
    84ea:	0100                	addi	s0,sp,128
    84ec:	0200                	addi	s0,sp,256
    84ee:	1104                	addi	s1,sp,160
    84f0:	04090003          	lb	zero,64(s2)
    84f4:	0100                	addi	s0,sp,128
    84f6:	0200                	addi	s0,sp,256
    84f8:	1104                	addi	s1,sp,160
    84fa:	00090003          	lb	zero,0(s2)
    84fe:	0100                	addi	s0,sp,128
    8500:	0200                	addi	s0,sp,256
    8502:	1104                	addi	s1,sp,160
    8504:	00090003          	lb	zero,0(s2)
    8508:	0100                	addi	s0,sp,128
    850a:	0200                	addi	s0,sp,256
    850c:	1104                	addi	s1,sp,160
    850e:	00090003          	lb	zero,0(s2)
    8512:	0100                	addi	s0,sp,128
    8514:	0200                	addi	s0,sp,256
    8516:	1104                	addi	s1,sp,160
    8518:	08090003          	lb	zero,128(s2)
    851c:	0100                	addi	s0,sp,128
    851e:	0200                	addi	s0,sp,256
    8520:	1f04                	addi	s1,sp,944
    8522:	00090003          	lb	zero,0(s2)
    8526:	0100                	addi	s0,sp,128
    8528:	0200                	addi	s0,sp,256
    852a:	1f04                	addi	s1,sp,944
    852c:	00090003          	lb	zero,0(s2)
    8530:	0100                	addi	s0,sp,128
    8532:	0200                	addi	s0,sp,256
    8534:	1f04                	addi	s1,sp,944
    8536:	04090003          	lb	zero,64(s2)
    853a:	0100                	addi	s0,sp,128
    853c:	0200                	addi	s0,sp,256
    853e:	2004                	fld	fs1,0(s0)
    8540:	08090003          	lb	zero,128(s2)
    8544:	0100                	addi	s0,sp,128
    8546:	0200                	addi	s0,sp,256
    8548:	2004                	fld	fs1,0(s0)
    854a:	08090003          	lb	zero,128(s2)
    854e:	0100                	addi	s0,sp,128
    8550:	0200                	addi	s0,sp,256
    8552:	2004                	fld	fs1,0(s0)
    8554:	10090003          	lb	zero,256(s2)
    8558:	0100                	addi	s0,sp,128
    855a:	0200                	addi	s0,sp,256
    855c:	2004                	fld	fs1,0(s0)
    855e:	04090003          	lb	zero,64(s2)
    8562:	0100                	addi	s0,sp,128
    8564:	0200                	addi	s0,sp,256
    8566:	2904                	fld	fs1,16(a0)
    8568:	00090003          	lb	zero,0(s2)
    856c:	0100                	addi	s0,sp,128
    856e:	0200                	addi	s0,sp,256
    8570:	1804                	addi	s1,sp,48
    8572:	0c090003          	lb	zero,192(s2)
    8576:	0100                	addi	s0,sp,128
    8578:	0200                	addi	s0,sp,256
    857a:	1804                	addi	s1,sp,48
    857c:	00090003          	lb	zero,0(s2)
    8580:	0100                	addi	s0,sp,128
    8582:	0200                	addi	s0,sp,256
    8584:	1804                	addi	s1,sp,48
    8586:	00090003          	lb	zero,0(s2)
    858a:	0100                	addi	s0,sp,128
    858c:	0200                	addi	s0,sp,256
    858e:	1804                	addi	s1,sp,48
    8590:	00090003          	lb	zero,0(s2)
    8594:	0100                	addi	s0,sp,128
    8596:	0200                	addi	s0,sp,256
    8598:	1804                	addi	s1,sp,48
    859a:	04090003          	lb	zero,64(s2)
    859e:	0100                	addi	s0,sp,128
    85a0:	0200                	addi	s0,sp,256
    85a2:	1804                	addi	s1,sp,48
    85a4:	00090003          	lb	zero,0(s2)
    85a8:	0100                	addi	s0,sp,128
    85aa:	0200                	addi	s0,sp,256
    85ac:	2104                	fld	fs1,0(a0)
    85ae:	08090003          	lb	zero,128(s2)
    85b2:	0100                	addi	s0,sp,128
    85b4:	0200                	addi	s0,sp,256
    85b6:	2104                	fld	fs1,0(a0)
    85b8:	08090003          	lb	zero,128(s2)
    85bc:	0100                	addi	s0,sp,128
    85be:	0200                	addi	s0,sp,256
    85c0:	0304                	addi	s1,sp,384
    85c2:	08090003          	lb	zero,128(s2)
    85c6:	0100                	addi	s0,sp,128
    85c8:	0306                	slli	t1,t1,0x1
    85ca:	0900                	addi	s0,sp,144
    85cc:	000c                	0xc
    85ce:	0001                	nop
    85d0:	0402                	c.slli64	s0
    85d2:	0602                	c.slli64	a2
    85d4:	30090103          	lb	sp,768(s2)
    85d8:	0100                	addi	s0,sp,128
    85da:	0200                	addi	s0,sp,256
    85dc:	0d04                	addi	s1,sp,656
    85de:	08090003          	lb	zero,128(s2)
    85e2:	0100                	addi	s0,sp,128
    85e4:	0200                	addi	s0,sp,256
    85e6:	0d04                	addi	s1,sp,656
    85e8:	00090003          	lb	zero,0(s2)
    85ec:	0100                	addi	s0,sp,128
    85ee:	0200                	addi	s0,sp,256
    85f0:	0d04                	addi	s1,sp,656
    85f2:	00090003          	lb	zero,0(s2)
    85f6:	0100                	addi	s0,sp,128
    85f8:	0200                	addi	s0,sp,256
    85fa:	0d04                	addi	s1,sp,656
    85fc:	00090003          	lb	zero,0(s2)
    8600:	0100                	addi	s0,sp,128
    8602:	0200                	addi	s0,sp,256
    8604:	1104                	addi	s1,sp,160
    8606:	04090003          	lb	zero,64(s2)
    860a:	0100                	addi	s0,sp,128
    860c:	0200                	addi	s0,sp,256
    860e:	1104                	addi	s1,sp,160
    8610:	00090003          	lb	zero,0(s2)
    8614:	0100                	addi	s0,sp,128
    8616:	0200                	addi	s0,sp,256
    8618:	1104                	addi	s1,sp,160
    861a:	00090003          	lb	zero,0(s2)
    861e:	0100                	addi	s0,sp,128
    8620:	0200                	addi	s0,sp,256
    8622:	1104                	addi	s1,sp,160
    8624:	00090003          	lb	zero,0(s2)
    8628:	0100                	addi	s0,sp,128
    862a:	0200                	addi	s0,sp,256
    862c:	1104                	addi	s1,sp,160
    862e:	08090003          	lb	zero,128(s2)
    8632:	0100                	addi	s0,sp,128
    8634:	0200                	addi	s0,sp,256
    8636:	1f04                	addi	s1,sp,944
    8638:	00090003          	lb	zero,0(s2)
    863c:	0100                	addi	s0,sp,128
    863e:	0200                	addi	s0,sp,256
    8640:	1f04                	addi	s1,sp,944
    8642:	00090003          	lb	zero,0(s2)
    8646:	0100                	addi	s0,sp,128
    8648:	0200                	addi	s0,sp,256
    864a:	1f04                	addi	s1,sp,944
    864c:	04090003          	lb	zero,64(s2)
    8650:	0100                	addi	s0,sp,128
    8652:	0200                	addi	s0,sp,256
    8654:	2004                	fld	fs1,0(s0)
    8656:	08090003          	lb	zero,128(s2)
    865a:	0100                	addi	s0,sp,128
    865c:	0200                	addi	s0,sp,256
    865e:	2004                	fld	fs1,0(s0)
    8660:	08090003          	lb	zero,128(s2)
    8664:	0100                	addi	s0,sp,128
    8666:	0200                	addi	s0,sp,256
    8668:	2004                	fld	fs1,0(s0)
    866a:	10090003          	lb	zero,256(s2)
    866e:	0100                	addi	s0,sp,128
    8670:	0200                	addi	s0,sp,256
    8672:	2004                	fld	fs1,0(s0)
    8674:	04090003          	lb	zero,64(s2)
    8678:	0100                	addi	s0,sp,128
    867a:	0200                	addi	s0,sp,256
    867c:	2904                	fld	fs1,16(a0)
    867e:	00090003          	lb	zero,0(s2)
    8682:	0100                	addi	s0,sp,128
    8684:	0200                	addi	s0,sp,256
    8686:	1804                	addi	s1,sp,48
    8688:	0c090003          	lb	zero,192(s2)
    868c:	0100                	addi	s0,sp,128
    868e:	0200                	addi	s0,sp,256
    8690:	1804                	addi	s1,sp,48
    8692:	00090003          	lb	zero,0(s2)
    8696:	0100                	addi	s0,sp,128
    8698:	0200                	addi	s0,sp,256
    869a:	1804                	addi	s1,sp,48
    869c:	00090003          	lb	zero,0(s2)
    86a0:	0100                	addi	s0,sp,128
    86a2:	0200                	addi	s0,sp,256
    86a4:	1804                	addi	s1,sp,48
    86a6:	00090003          	lb	zero,0(s2)
    86aa:	0100                	addi	s0,sp,128
    86ac:	0200                	addi	s0,sp,256
    86ae:	1804                	addi	s1,sp,48
    86b0:	08090003          	lb	zero,128(s2)
    86b4:	0100                	addi	s0,sp,128
    86b6:	0200                	addi	s0,sp,256
    86b8:	1804                	addi	s1,sp,48
    86ba:	00090003          	lb	zero,0(s2)
    86be:	0100                	addi	s0,sp,128
    86c0:	0200                	addi	s0,sp,256
    86c2:	2104                	fld	fs1,0(a0)
    86c4:	08090003          	lb	zero,128(s2)
    86c8:	0100                	addi	s0,sp,128
    86ca:	0200                	addi	s0,sp,256
    86cc:	2104                	fld	fs1,0(a0)
    86ce:	08090003          	lb	zero,128(s2)
    86d2:	0100                	addi	s0,sp,128
    86d4:	0200                	addi	s0,sp,256
    86d6:	0304                	addi	s1,sp,384
    86d8:	08090003          	lb	zero,128(s2)
    86dc:	0100                	addi	s0,sp,128
    86de:	0306                	slli	t1,t1,0x1
    86e0:	0900                	addi	s0,sp,144
    86e2:	0008                	0x8
    86e4:	0001                	nop
    86e6:	0402                	c.slli64	s0
    86e8:	0602                	c.slli64	a2
    86ea:	30090103          	lb	sp,768(s2)
    86ee:	0100                	addi	s0,sp,128
    86f0:	0200                	addi	s0,sp,256
    86f2:	0204                	addi	s1,sp,256
    86f4:	00090003          	lb	zero,0(s2)
    86f8:	0100                	addi	s0,sp,128
    86fa:	0200                	addi	s0,sp,256
    86fc:	0204                	addi	s1,sp,256
    86fe:	00090003          	lb	zero,0(s2)
    8702:	0100                	addi	s0,sp,128
    8704:	0200                	addi	s0,sp,256
    8706:	0204                	addi	s1,sp,256
    8708:	00090003          	lb	zero,0(s2)
    870c:	0100                	addi	s0,sp,128
    870e:	0200                	addi	s0,sp,256
    8710:	0204                	addi	s1,sp,256
    8712:	00090003          	lb	zero,0(s2)
    8716:	0100                	addi	s0,sp,128
    8718:	0200                	addi	s0,sp,256
    871a:	0204                	addi	s1,sp,256
    871c:	00090003          	lb	zero,0(s2)
    8720:	0100                	addi	s0,sp,128
    8722:	0200                	addi	s0,sp,256
    8724:	0204                	addi	s1,sp,256
    8726:	00090003          	lb	zero,0(s2)
    872a:	0100                	addi	s0,sp,128
    872c:	0200                	addi	s0,sp,256
    872e:	0204                	addi	s1,sp,256
    8730:	00090003          	lb	zero,0(s2)
    8734:	0100                	addi	s0,sp,128
    8736:	0200                	addi	s0,sp,256
    8738:	0204                	addi	s1,sp,256
    873a:	00090003          	lb	zero,0(s2)
    873e:	0100                	addi	s0,sp,128
    8740:	0200                	addi	s0,sp,256
    8742:	0204                	addi	s1,sp,256
    8744:	00090003          	lb	zero,0(s2)
    8748:	0100                	addi	s0,sp,128
    874a:	0200                	addi	s0,sp,256
    874c:	0b04                	addi	s1,sp,400
    874e:	0306                	slli	t1,t1,0x1
    8750:	0900                	addi	s0,sp,144
    8752:	0004                	0x4
    8754:	0001                	nop
    8756:	0402                	c.slli64	s0
    8758:	030c                	addi	a1,sp,384
    875a:	0900                	addi	s0,sp,144
    875c:	0004                	0x4
    875e:	0001                	nop
    8760:	0402                	c.slli64	s0
    8762:	060e                	slli	a2,a2,0x3
    8764:	04090003          	lb	zero,64(s2)
    8768:	0100                	addi	s0,sp,128
    876a:	0200                	addi	s0,sp,256
    876c:	0e04                	addi	s1,sp,784
    876e:	00090003          	lb	zero,0(s2)
    8772:	0100                	addi	s0,sp,128
    8774:	0200                	addi	s0,sp,256
    8776:	0e04                	addi	s1,sp,784
    8778:	08090003          	lb	zero,128(s2)
    877c:	0100                	addi	s0,sp,128
    877e:	0200                	addi	s0,sp,256
    8780:	1304                	addi	s1,sp,416
    8782:	0c090003          	lb	zero,192(s2)
    8786:	0100                	addi	s0,sp,128
    8788:	0200                	addi	s0,sp,256
    878a:	1304                	addi	s1,sp,416
    878c:	00090003          	lb	zero,0(s2)
    8790:	0100                	addi	s0,sp,128
    8792:	0200                	addi	s0,sp,256
    8794:	1304                	addi	s1,sp,416
    8796:	00090003          	lb	zero,0(s2)
    879a:	0100                	addi	s0,sp,128
    879c:	0200                	addi	s0,sp,256
    879e:	1304                	addi	s1,sp,416
    87a0:	0c090003          	lb	zero,192(s2)
    87a4:	0100                	addi	s0,sp,128
    87a6:	0200                	addi	s0,sp,256
    87a8:	1304                	addi	s1,sp,416
    87aa:	14090003          	lb	zero,320(s2)
    87ae:	0100                	addi	s0,sp,128
    87b0:	0200                	addi	s0,sp,256
    87b2:	1304                	addi	s1,sp,416
    87b4:	00090003          	lb	zero,0(s2)
    87b8:	0100                	addi	s0,sp,128
    87ba:	0200                	addi	s0,sp,256
    87bc:	1304                	addi	s1,sp,416
    87be:	00090003          	lb	zero,0(s2)
    87c2:	0100                	addi	s0,sp,128
    87c4:	0200                	addi	s0,sp,256
    87c6:	1304                	addi	s1,sp,416
    87c8:	00090003          	lb	zero,0(s2)
    87cc:	0100                	addi	s0,sp,128
    87ce:	0200                	addi	s0,sp,256
    87d0:	1304                	addi	s1,sp,416
    87d2:	00090003          	lb	zero,0(s2)
    87d6:	0100                	addi	s0,sp,128
    87d8:	0200                	addi	s0,sp,256
    87da:	1304                	addi	s1,sp,416
    87dc:	00090003          	lb	zero,0(s2)
    87e0:	0100                	addi	s0,sp,128
    87e2:	0200                	addi	s0,sp,256
    87e4:	1304                	addi	s1,sp,416
    87e6:	04090003          	lb	zero,64(s2)
    87ea:	0100                	addi	s0,sp,128
    87ec:	0200                	addi	s0,sp,256
    87ee:	1304                	addi	s1,sp,416
    87f0:	00090003          	lb	zero,0(s2)
    87f4:	0100                	addi	s0,sp,128
    87f6:	0200                	addi	s0,sp,256
    87f8:	1304                	addi	s1,sp,416
    87fa:	0c090003          	lb	zero,192(s2)
    87fe:	0100                	addi	s0,sp,128
    8800:	0200                	addi	s0,sp,256
    8802:	1304                	addi	s1,sp,416
    8804:	0c090003          	lb	zero,192(s2)
    8808:	0100                	addi	s0,sp,128
    880a:	0200                	addi	s0,sp,256
    880c:	1304                	addi	s1,sp,416
    880e:	18090003          	lb	zero,384(s2)
    8812:	0100                	addi	s0,sp,128
    8814:	0200                	addi	s0,sp,256
    8816:	1604                	addi	s1,sp,800
    8818:	08090003          	lb	zero,128(s2)
    881c:	0100                	addi	s0,sp,128
    881e:	0200                	addi	s0,sp,256
    8820:	1604                	addi	s1,sp,800
    8822:	08090003          	lb	zero,128(s2)
    8826:	0100                	addi	s0,sp,128
    8828:	0200                	addi	s0,sp,256
    882a:	1804                	addi	s1,sp,48
    882c:	04090003          	lb	zero,64(s2)
    8830:	0100                	addi	s0,sp,128
    8832:	0200                	addi	s0,sp,256
    8834:	1a04                	addi	s1,sp,304
    8836:	04090003          	lb	zero,64(s2)
    883a:	0100                	addi	s0,sp,128
    883c:	0200                	addi	s0,sp,256
    883e:	1c04                	addi	s1,sp,560
    8840:	08090003          	lb	zero,128(s2)
    8844:	0100                	addi	s0,sp,128
    8846:	0200                	addi	s0,sp,256
    8848:	1c04                	addi	s1,sp,560
    884a:	04090003          	lb	zero,64(s2)
    884e:	0100                	addi	s0,sp,128
    8850:	0200                	addi	s0,sp,256
    8852:	1c04                	addi	s1,sp,560
    8854:	00090003          	lb	zero,0(s2)
    8858:	0100                	addi	s0,sp,128
    885a:	0200                	addi	s0,sp,256
    885c:	1c04                	addi	s1,sp,560
    885e:	14090003          	lb	zero,320(s2)
    8862:	0100                	addi	s0,sp,128
    8864:	0200                	addi	s0,sp,256
    8866:	1c04                	addi	s1,sp,560
    8868:	0c090003          	lb	zero,192(s2)
    886c:	0100                	addi	s0,sp,128
    886e:	0200                	addi	s0,sp,256
    8870:	1c04                	addi	s1,sp,560
    8872:	1c090003          	lb	zero,448(s2)
    8876:	0100                	addi	s0,sp,128
    8878:	0200                	addi	s0,sp,256
    887a:	1d04                	addi	s1,sp,688
    887c:	08090003          	lb	zero,128(s2)
    8880:	0100                	addi	s0,sp,128
    8882:	0200                	addi	s0,sp,256
    8884:	1d04                	addi	s1,sp,688
    8886:	08090003          	lb	zero,128(s2)
    888a:	0100                	addi	s0,sp,128
    888c:	0200                	addi	s0,sp,256
    888e:	1f04                	addi	s1,sp,944
    8890:	04090003          	lb	zero,64(s2)
    8894:	0100                	addi	s0,sp,128
    8896:	0200                	addi	s0,sp,256
    8898:	2104                	fld	fs1,0(a0)
    889a:	04090003          	lb	zero,64(s2)
    889e:	0100                	addi	s0,sp,128
    88a0:	0200                	addi	s0,sp,256
    88a2:	2304                	fld	fs1,0(a4)
    88a4:	08090003          	lb	zero,128(s2)
    88a8:	0100                	addi	s0,sp,128
    88aa:	0200                	addi	s0,sp,256
    88ac:	2304                	fld	fs1,0(a4)
    88ae:	10090003          	lb	zero,256(s2)
    88b2:	0100                	addi	s0,sp,128
    88b4:	0200                	addi	s0,sp,256
    88b6:	2304                	fld	fs1,0(a4)
    88b8:	00090003          	lb	zero,0(s2)
    88bc:	0100                	addi	s0,sp,128
    88be:	0200                	addi	s0,sp,256
    88c0:	2304                	fld	fs1,0(a4)
    88c2:	00090003          	lb	zero,0(s2)
    88c6:	0100                	addi	s0,sp,128
    88c8:	0200                	addi	s0,sp,256
    88ca:	2304                	fld	fs1,0(a4)
    88cc:	00090003          	lb	zero,0(s2)
    88d0:	0100                	addi	s0,sp,128
    88d2:	0200                	addi	s0,sp,256
    88d4:	2304                	fld	fs1,0(a4)
    88d6:	00090003          	lb	zero,0(s2)
    88da:	0100                	addi	s0,sp,128
    88dc:	0200                	addi	s0,sp,256
    88de:	2304                	fld	fs1,0(a4)
    88e0:	00090003          	lb	zero,0(s2)
    88e4:	0100                	addi	s0,sp,128
    88e6:	0200                	addi	s0,sp,256
    88e8:	2304                	fld	fs1,0(a4)
    88ea:	00090003          	lb	zero,0(s2)
    88ee:	0100                	addi	s0,sp,128
    88f0:	0200                	addi	s0,sp,256
    88f2:	2304                	fld	fs1,0(a4)
    88f4:	00090003          	lb	zero,0(s2)
    88f8:	0100                	addi	s0,sp,128
    88fa:	0200                	addi	s0,sp,256
    88fc:	2304                	fld	fs1,0(a4)
    88fe:	10090003          	lb	zero,256(s2)
    8902:	0100                	addi	s0,sp,128
    8904:	0200                	addi	s0,sp,256
    8906:	2304                	fld	fs1,0(a4)
    8908:	00090003          	lb	zero,0(s2)
    890c:	0100                	addi	s0,sp,128
    890e:	0200                	addi	s0,sp,256
    8910:	2304                	fld	fs1,0(a4)
    8912:	04090003          	lb	zero,64(s2)
    8916:	0100                	addi	s0,sp,128
    8918:	0200                	addi	s0,sp,256
    891a:	2304                	fld	fs1,0(a4)
    891c:	00090003          	lb	zero,0(s2)
    8920:	0100                	addi	s0,sp,128
    8922:	0200                	addi	s0,sp,256
    8924:	2304                	fld	fs1,0(a4)
    8926:	04090003          	lb	zero,64(s2)
    892a:	0100                	addi	s0,sp,128
    892c:	0200                	addi	s0,sp,256
    892e:	2304                	fld	fs1,0(a4)
    8930:	04090003          	lb	zero,64(s2)
    8934:	0100                	addi	s0,sp,128
    8936:	0200                	addi	s0,sp,256
    8938:	2304                	fld	fs1,0(a4)
    893a:	04090003          	lb	zero,64(s2)
    893e:	0100                	addi	s0,sp,128
    8940:	0200                	addi	s0,sp,256
    8942:	2304                	fld	fs1,0(a4)
    8944:	04090003          	lb	zero,64(s2)
    8948:	0100                	addi	s0,sp,128
    894a:	0200                	addi	s0,sp,256
    894c:	2304                	fld	fs1,0(a4)
    894e:	00090003          	lb	zero,0(s2)
    8952:	0100                	addi	s0,sp,128
    8954:	0200                	addi	s0,sp,256
    8956:	2304                	fld	fs1,0(a4)
    8958:	08090003          	lb	zero,128(s2)
    895c:	0100                	addi	s0,sp,128
    895e:	0200                	addi	s0,sp,256
    8960:	2304                	fld	fs1,0(a4)
    8962:	00090003          	lb	zero,0(s2)
    8966:	0100                	addi	s0,sp,128
    8968:	0200                	addi	s0,sp,256
    896a:	2304                	fld	fs1,0(a4)
    896c:	04090003          	lb	zero,64(s2)
    8970:	0100                	addi	s0,sp,128
    8972:	0200                	addi	s0,sp,256
    8974:	2304                	fld	fs1,0(a4)
    8976:	04090003          	lb	zero,64(s2)
    897a:	0100                	addi	s0,sp,128
    897c:	0200                	addi	s0,sp,256
    897e:	2304                	fld	fs1,0(a4)
    8980:	00090003          	lb	zero,0(s2)
    8984:	0100                	addi	s0,sp,128
    8986:	0200                	addi	s0,sp,256
    8988:	2304                	fld	fs1,0(a4)
    898a:	08090003          	lb	zero,128(s2)
    898e:	0100                	addi	s0,sp,128
    8990:	0200                	addi	s0,sp,256
    8992:	2304                	fld	fs1,0(a4)
    8994:	00090003          	lb	zero,0(s2)
    8998:	0100                	addi	s0,sp,128
    899a:	0200                	addi	s0,sp,256
    899c:	2304                	fld	fs1,0(a4)
    899e:	04090003          	lb	zero,64(s2)
    89a2:	0100                	addi	s0,sp,128
    89a4:	0200                	addi	s0,sp,256
    89a6:	2304                	fld	fs1,0(a4)
    89a8:	04090003          	lb	zero,64(s2)
    89ac:	0100                	addi	s0,sp,128
    89ae:	0200                	addi	s0,sp,256
    89b0:	2304                	fld	fs1,0(a4)
    89b2:	00090003          	lb	zero,0(s2)
    89b6:	0100                	addi	s0,sp,128
    89b8:	0200                	addi	s0,sp,256
    89ba:	2304                	fld	fs1,0(a4)
    89bc:	08090003          	lb	zero,128(s2)
    89c0:	0100                	addi	s0,sp,128
    89c2:	0200                	addi	s0,sp,256
    89c4:	2304                	fld	fs1,0(a4)
    89c6:	00090003          	lb	zero,0(s2)
    89ca:	0100                	addi	s0,sp,128
    89cc:	0200                	addi	s0,sp,256
    89ce:	2304                	fld	fs1,0(a4)
    89d0:	04090003          	lb	zero,64(s2)
    89d4:	0100                	addi	s0,sp,128
    89d6:	0200                	addi	s0,sp,256
    89d8:	2304                	fld	fs1,0(a4)
    89da:	10090003          	lb	zero,256(s2)
    89de:	0100                	addi	s0,sp,128
    89e0:	0200                	addi	s0,sp,256
    89e2:	2304                	fld	fs1,0(a4)
    89e4:	00090003          	lb	zero,0(s2)
    89e8:	0100                	addi	s0,sp,128
    89ea:	0200                	addi	s0,sp,256
    89ec:	2304                	fld	fs1,0(a4)
    89ee:	00090003          	lb	zero,0(s2)
    89f2:	0100                	addi	s0,sp,128
    89f4:	0200                	addi	s0,sp,256
    89f6:	2404                	fld	fs1,8(s0)
    89f8:	04090003          	lb	zero,64(s2)
    89fc:	0100                	addi	s0,sp,128
    89fe:	0200                	addi	s0,sp,256
    8a00:	2604                	fld	fs1,8(a2)
    8a02:	04090003          	lb	zero,64(s2)
    8a06:	0100                	addi	s0,sp,128
    8a08:	0200                	addi	s0,sp,256
    8a0a:	2604                	fld	fs1,8(a2)
    8a0c:	1c090003          	lb	zero,448(s2)
    8a10:	0100                	addi	s0,sp,128
    8a12:	0200                	addi	s0,sp,256
    8a14:	2604                	fld	fs1,8(a2)
    8a16:	04090003          	lb	zero,64(s2)
    8a1a:	0100                	addi	s0,sp,128
    8a1c:	0200                	addi	s0,sp,256
    8a1e:	2604                	fld	fs1,8(a2)
    8a20:	00090003          	lb	zero,0(s2)
    8a24:	0100                	addi	s0,sp,128
    8a26:	0200                	addi	s0,sp,256
    8a28:	2604                	fld	fs1,8(a2)
    8a2a:	00090003          	lb	zero,0(s2)
    8a2e:	0100                	addi	s0,sp,128
    8a30:	0200                	addi	s0,sp,256
    8a32:	2804                	fld	fs1,16(s0)
    8a34:	0306                	slli	t1,t1,0x1
    8a36:	0900                	addi	s0,sp,144
    8a38:	0004                	0x4
    8a3a:	0001                	nop
    8a3c:	0402                	c.slli64	s0
    8a3e:	0329                	addi	t1,t1,10
    8a40:	0900                	addi	s0,sp,144
    8a42:	0008                	0x8
    8a44:	0001                	nop
    8a46:	0402                	c.slli64	s0
    8a48:	0003062b          	0x3062b
    8a4c:	0409                	addi	s0,s0,2
    8a4e:	0100                	addi	s0,sp,128
    8a50:	0200                	addi	s0,sp,256
    8a52:	2b04                	fld	fs1,16(a4)
    8a54:	14090003          	lb	zero,320(s2)
    8a58:	0100                	addi	s0,sp,128
    8a5a:	0200                	addi	s0,sp,256
    8a5c:	2b04                	fld	fs1,16(a4)
    8a5e:	00090003          	lb	zero,0(s2)
    8a62:	0100                	addi	s0,sp,128
    8a64:	0200                	addi	s0,sp,256
    8a66:	2b04                	fld	fs1,16(a4)
    8a68:	00090003          	lb	zero,0(s2)
    8a6c:	0100                	addi	s0,sp,128
    8a6e:	0200                	addi	s0,sp,256
    8a70:	2b04                	fld	fs1,16(a4)
    8a72:	00090003          	lb	zero,0(s2)
    8a76:	0100                	addi	s0,sp,128
    8a78:	0200                	addi	s0,sp,256
    8a7a:	2b04                	fld	fs1,16(a4)
    8a7c:	00090003          	lb	zero,0(s2)
    8a80:	0100                	addi	s0,sp,128
    8a82:	0200                	addi	s0,sp,256
    8a84:	2b04                	fld	fs1,16(a4)
    8a86:	00090003          	lb	zero,0(s2)
    8a8a:	0100                	addi	s0,sp,128
    8a8c:	0200                	addi	s0,sp,256
    8a8e:	2b04                	fld	fs1,16(a4)
    8a90:	00090003          	lb	zero,0(s2)
    8a94:	0100                	addi	s0,sp,128
    8a96:	0200                	addi	s0,sp,256
    8a98:	2e04                	fld	fs1,24(a2)
    8a9a:	0306                	slli	t1,t1,0x1
    8a9c:	0900                	addi	s0,sp,144
    8a9e:	0004                	0x4
    8aa0:	0001                	nop
    8aa2:	0402                	c.slli64	s0
    8aa4:	0900032f          	vamoswapei8.v	zero,(zero),v16,v6,v0.t
    8aa8:	0004                	0x4
    8aaa:	0001                	nop
    8aac:	0402                	c.slli64	s0
    8aae:	0331                	addi	t1,t1,12
    8ab0:	0900                	addi	s0,sp,144
    8ab2:	0004                	0x4
    8ab4:	0001                	nop
    8ab6:	0402                	c.slli64	s0
    8ab8:	0334                	addi	a3,sp,392
    8aba:	0900                	addi	s0,sp,144
    8abc:	0004                	0x4
    8abe:	0001                	nop
    8ac0:	0402                	c.slli64	s0
    8ac2:	0335                	addi	t1,t1,13
    8ac4:	0900                	addi	s0,sp,144
    8ac6:	0004                	0x4
    8ac8:	0001                	nop
    8aca:	0402                	c.slli64	s0
    8acc:	00030637          	lui	a2,0x30
    8ad0:	0409                	addi	s0,s0,2
    8ad2:	0100                	addi	s0,sp,128
    8ad4:	0200                	addi	s0,sp,256
    8ad6:	3704                	fld	fs1,40(a4)
    8ad8:	10090003          	lb	zero,256(s2)
    8adc:	0100                	addi	s0,sp,128
    8ade:	0200                	addi	s0,sp,256
    8ae0:	3704                	fld	fs1,40(a4)
    8ae2:	00090003          	lb	zero,0(s2)
    8ae6:	0100                	addi	s0,sp,128
    8ae8:	0200                	addi	s0,sp,256
    8aea:	3704                	fld	fs1,40(a4)
    8aec:	00090003          	lb	zero,0(s2)
    8af0:	0100                	addi	s0,sp,128
    8af2:	0200                	addi	s0,sp,256
    8af4:	3704                	fld	fs1,40(a4)
    8af6:	00090003          	lb	zero,0(s2)
    8afa:	0100                	addi	s0,sp,128
    8afc:	0200                	addi	s0,sp,256
    8afe:	3704                	fld	fs1,40(a4)
    8b00:	04090003          	lb	zero,64(s2)
    8b04:	0100                	addi	s0,sp,128
    8b06:	0200                	addi	s0,sp,256
    8b08:	3904                	fld	fs1,48(a0)
    8b0a:	00090003          	lb	zero,0(s2)
    8b0e:	0100                	addi	s0,sp,128
    8b10:	0200                	addi	s0,sp,256
    8b12:	3904                	fld	fs1,48(a0)
    8b14:	00090003          	lb	zero,0(s2)
    8b18:	0100                	addi	s0,sp,128
    8b1a:	0200                	addi	s0,sp,256
    8b1c:	3904                	fld	fs1,48(a0)
    8b1e:	00090003          	lb	zero,0(s2)
    8b22:	0100                	addi	s0,sp,128
    8b24:	0200                	addi	s0,sp,256
    8b26:	3904                	fld	fs1,48(a0)
    8b28:	00090003          	lb	zero,0(s2)
    8b2c:	0100                	addi	s0,sp,128
    8b2e:	0200                	addi	s0,sp,256
    8b30:	3904                	fld	fs1,48(a0)
    8b32:	04090003          	lb	zero,64(s2)
    8b36:	0100                	addi	s0,sp,128
    8b38:	0200                	addi	s0,sp,256
    8b3a:	3904                	fld	fs1,48(a0)
    8b3c:	0c090003          	lb	zero,192(s2)
    8b40:	0100                	addi	s0,sp,128
    8b42:	0200                	addi	s0,sp,256
    8b44:	3904                	fld	fs1,48(a0)
    8b46:	00090003          	lb	zero,0(s2)
    8b4a:	0100                	addi	s0,sp,128
    8b4c:	0200                	addi	s0,sp,256
    8b4e:	3904                	fld	fs1,48(a0)
    8b50:	00090003          	lb	zero,0(s2)
    8b54:	0100                	addi	s0,sp,128
    8b56:	0200                	addi	s0,sp,256
    8b58:	3b04                	fld	fs1,48(a4)
    8b5a:	08090003          	lb	zero,128(s2)
    8b5e:	0100                	addi	s0,sp,128
    8b60:	0200                	addi	s0,sp,256
    8b62:	3b04                	fld	fs1,48(a4)
    8b64:	00090003          	lb	zero,0(s2)
    8b68:	0100                	addi	s0,sp,128
    8b6a:	0200                	addi	s0,sp,256
    8b6c:	3b04                	fld	fs1,48(a4)
    8b6e:	00090003          	lb	zero,0(s2)
    8b72:	0100                	addi	s0,sp,128
    8b74:	0200                	addi	s0,sp,256
    8b76:	3b04                	fld	fs1,48(a4)
    8b78:	00090003          	lb	zero,0(s2)
    8b7c:	0100                	addi	s0,sp,128
    8b7e:	0200                	addi	s0,sp,256
    8b80:	3b04                	fld	fs1,48(a4)
    8b82:	00090003          	lb	zero,0(s2)
    8b86:	0100                	addi	s0,sp,128
    8b88:	0200                	addi	s0,sp,256
    8b8a:	3b04                	fld	fs1,48(a4)
    8b8c:	00090003          	lb	zero,0(s2)
    8b90:	0100                	addi	s0,sp,128
    8b92:	0200                	addi	s0,sp,256
    8b94:	3b04                	fld	fs1,48(a4)
    8b96:	00090003          	lb	zero,0(s2)
    8b9a:	0100                	addi	s0,sp,128
    8b9c:	0200                	addi	s0,sp,256
    8b9e:	3b04                	fld	fs1,48(a4)
    8ba0:	0c090003          	lb	zero,192(s2)
    8ba4:	0100                	addi	s0,sp,128
    8ba6:	0200                	addi	s0,sp,256
    8ba8:	3b04                	fld	fs1,48(a4)
    8baa:	14090003          	lb	zero,320(s2)
    8bae:	0100                	addi	s0,sp,128
    8bb0:	0200                	addi	s0,sp,256
    8bb2:	3b04                	fld	fs1,48(a4)
    8bb4:	20090003          	lb	zero,512(s2)
    8bb8:	0100                	addi	s0,sp,128
    8bba:	0200                	addi	s0,sp,256
    8bbc:	3d04                	fld	fs1,56(a0)
    8bbe:	08090003          	lb	zero,128(s2)
    8bc2:	0100                	addi	s0,sp,128
    8bc4:	0200                	addi	s0,sp,256
    8bc6:	3d04                	fld	fs1,56(a0)
    8bc8:	08090003          	lb	zero,128(s2)
    8bcc:	0100                	addi	s0,sp,128
    8bce:	0200                	addi	s0,sp,256
    8bd0:	3f04                	fld	fs1,56(a4)
    8bd2:	04090003          	lb	zero,64(s2)
    8bd6:	0100                	addi	s0,sp,128
    8bd8:	0200                	addi	s0,sp,256
    8bda:	4104                	lw	s1,0(a0)
    8bdc:	04090003          	lb	zero,64(s2)
    8be0:	0100                	addi	s0,sp,128
    8be2:	0200                	addi	s0,sp,256
    8be4:	4304                	lw	s1,0(a4)
    8be6:	08090003          	lb	zero,128(s2)
    8bea:	0100                	addi	s0,sp,128
    8bec:	0200                	addi	s0,sp,256
    8bee:	4304                	lw	s1,0(a4)
    8bf0:	04090003          	lb	zero,64(s2)
    8bf4:	0100                	addi	s0,sp,128
    8bf6:	0200                	addi	s0,sp,256
    8bf8:	4304                	lw	s1,0(a4)
    8bfa:	00090003          	lb	zero,0(s2)
    8bfe:	0100                	addi	s0,sp,128
    8c00:	0200                	addi	s0,sp,256
    8c02:	4304                	lw	s1,0(a4)
    8c04:	0c090003          	lb	zero,192(s2)
    8c08:	0100                	addi	s0,sp,128
    8c0a:	0200                	addi	s0,sp,256
    8c0c:	4304                	lw	s1,0(a4)
    8c0e:	14090003          	lb	zero,320(s2)
    8c12:	0100                	addi	s0,sp,128
    8c14:	0200                	addi	s0,sp,256
    8c16:	4304                	lw	s1,0(a4)
    8c18:	20090003          	lb	zero,512(s2)
    8c1c:	0100                	addi	s0,sp,128
    8c1e:	0200                	addi	s0,sp,256
    8c20:	4404                	lw	s1,8(s0)
    8c22:	08090003          	lb	zero,128(s2)
    8c26:	0100                	addi	s0,sp,128
    8c28:	0200                	addi	s0,sp,256
    8c2a:	4404                	lw	s1,8(s0)
    8c2c:	08090003          	lb	zero,128(s2)
    8c30:	0100                	addi	s0,sp,128
    8c32:	0200                	addi	s0,sp,256
    8c34:	4604                	lw	s1,8(a2)
    8c36:	04090003          	lb	zero,64(s2)
    8c3a:	0100                	addi	s0,sp,128
    8c3c:	0200                	addi	s0,sp,256
    8c3e:	4804                	lw	s1,16(s0)
    8c40:	04090003          	lb	zero,64(s2)
    8c44:	0100                	addi	s0,sp,128
    8c46:	0200                	addi	s0,sp,256
    8c48:	4a04                	lw	s1,16(a2)
    8c4a:	08090003          	lb	zero,128(s2)
    8c4e:	0100                	addi	s0,sp,128
    8c50:	0200                	addi	s0,sp,256
    8c52:	4a04                	lw	s1,16(a2)
    8c54:	14090003          	lb	zero,320(s2)
    8c58:	0100                	addi	s0,sp,128
    8c5a:	0200                	addi	s0,sp,256
    8c5c:	4a04                	lw	s1,16(a2)
    8c5e:	00090003          	lb	zero,0(s2)
    8c62:	0100                	addi	s0,sp,128
    8c64:	0200                	addi	s0,sp,256
    8c66:	4a04                	lw	s1,16(a2)
    8c68:	00090003          	lb	zero,0(s2)
    8c6c:	0100                	addi	s0,sp,128
    8c6e:	0200                	addi	s0,sp,256
    8c70:	4a04                	lw	s1,16(a2)
    8c72:	00090003          	lb	zero,0(s2)
    8c76:	0100                	addi	s0,sp,128
    8c78:	0200                	addi	s0,sp,256
    8c7a:	4a04                	lw	s1,16(a2)
    8c7c:	00090003          	lb	zero,0(s2)
    8c80:	0100                	addi	s0,sp,128
    8c82:	0200                	addi	s0,sp,256
    8c84:	4a04                	lw	s1,16(a2)
    8c86:	00090003          	lb	zero,0(s2)
    8c8a:	0100                	addi	s0,sp,128
    8c8c:	0200                	addi	s0,sp,256
    8c8e:	4a04                	lw	s1,16(a2)
    8c90:	00090003          	lb	zero,0(s2)
    8c94:	0100                	addi	s0,sp,128
    8c96:	0200                	addi	s0,sp,256
    8c98:	4a04                	lw	s1,16(a2)
    8c9a:	00090003          	lb	zero,0(s2)
    8c9e:	0100                	addi	s0,sp,128
    8ca0:	0200                	addi	s0,sp,256
    8ca2:	4a04                	lw	s1,16(a2)
    8ca4:	04090003          	lb	zero,64(s2)
    8ca8:	0100                	addi	s0,sp,128
    8caa:	0200                	addi	s0,sp,256
    8cac:	4a04                	lw	s1,16(a2)
    8cae:	00090003          	lb	zero,0(s2)
    8cb2:	0100                	addi	s0,sp,128
    8cb4:	0200                	addi	s0,sp,256
    8cb6:	4a04                	lw	s1,16(a2)
    8cb8:	00090003          	lb	zero,0(s2)
    8cbc:	0100                	addi	s0,sp,128
    8cbe:	0200                	addi	s0,sp,256
    8cc0:	4a04                	lw	s1,16(a2)
    8cc2:	00090003          	lb	zero,0(s2)
    8cc6:	0100                	addi	s0,sp,128
    8cc8:	0200                	addi	s0,sp,256
    8cca:	4a04                	lw	s1,16(a2)
    8ccc:	04090003          	lb	zero,64(s2)
    8cd0:	0100                	addi	s0,sp,128
    8cd2:	0200                	addi	s0,sp,256
    8cd4:	4a04                	lw	s1,16(a2)
    8cd6:	04090003          	lb	zero,64(s2)
    8cda:	0100                	addi	s0,sp,128
    8cdc:	0200                	addi	s0,sp,256
    8cde:	4a04                	lw	s1,16(a2)
    8ce0:	04090003          	lb	zero,64(s2)
    8ce4:	0100                	addi	s0,sp,128
    8ce6:	0200                	addi	s0,sp,256
    8ce8:	4a04                	lw	s1,16(a2)
    8cea:	04090003          	lb	zero,64(s2)
    8cee:	0100                	addi	s0,sp,128
    8cf0:	0200                	addi	s0,sp,256
    8cf2:	4a04                	lw	s1,16(a2)
    8cf4:	00090003          	lb	zero,0(s2)
    8cf8:	0100                	addi	s0,sp,128
    8cfa:	0200                	addi	s0,sp,256
    8cfc:	4a04                	lw	s1,16(a2)
    8cfe:	08090003          	lb	zero,128(s2)
    8d02:	0100                	addi	s0,sp,128
    8d04:	0200                	addi	s0,sp,256
    8d06:	4a04                	lw	s1,16(a2)
    8d08:	00090003          	lb	zero,0(s2)
    8d0c:	0100                	addi	s0,sp,128
    8d0e:	0200                	addi	s0,sp,256
    8d10:	4a04                	lw	s1,16(a2)
    8d12:	04090003          	lb	zero,64(s2)
    8d16:	0100                	addi	s0,sp,128
    8d18:	0200                	addi	s0,sp,256
    8d1a:	4a04                	lw	s1,16(a2)
    8d1c:	04090003          	lb	zero,64(s2)
    8d20:	0100                	addi	s0,sp,128
    8d22:	0200                	addi	s0,sp,256
    8d24:	4a04                	lw	s1,16(a2)
    8d26:	00090003          	lb	zero,0(s2)
    8d2a:	0100                	addi	s0,sp,128
    8d2c:	0200                	addi	s0,sp,256
    8d2e:	4a04                	lw	s1,16(a2)
    8d30:	08090003          	lb	zero,128(s2)
    8d34:	0100                	addi	s0,sp,128
    8d36:	0200                	addi	s0,sp,256
    8d38:	4a04                	lw	s1,16(a2)
    8d3a:	00090003          	lb	zero,0(s2)
    8d3e:	0100                	addi	s0,sp,128
    8d40:	0200                	addi	s0,sp,256
    8d42:	4a04                	lw	s1,16(a2)
    8d44:	04090003          	lb	zero,64(s2)
    8d48:	0100                	addi	s0,sp,128
    8d4a:	0200                	addi	s0,sp,256
    8d4c:	4a04                	lw	s1,16(a2)
    8d4e:	04090003          	lb	zero,64(s2)
    8d52:	0100                	addi	s0,sp,128
    8d54:	0200                	addi	s0,sp,256
    8d56:	4a04                	lw	s1,16(a2)
    8d58:	00090003          	lb	zero,0(s2)
    8d5c:	0100                	addi	s0,sp,128
    8d5e:	0200                	addi	s0,sp,256
    8d60:	4a04                	lw	s1,16(a2)
    8d62:	08090003          	lb	zero,128(s2)
    8d66:	0100                	addi	s0,sp,128
    8d68:	0200                	addi	s0,sp,256
    8d6a:	4a04                	lw	s1,16(a2)
    8d6c:	00090003          	lb	zero,0(s2)
    8d70:	0100                	addi	s0,sp,128
    8d72:	0200                	addi	s0,sp,256
    8d74:	4a04                	lw	s1,16(a2)
    8d76:	04090003          	lb	zero,64(s2)
    8d7a:	0100                	addi	s0,sp,128
    8d7c:	0200                	addi	s0,sp,256
    8d7e:	4a04                	lw	s1,16(a2)
    8d80:	10090003          	lb	zero,256(s2)
    8d84:	0100                	addi	s0,sp,128
    8d86:	0200                	addi	s0,sp,256
    8d88:	4a04                	lw	s1,16(a2)
    8d8a:	00090003          	lb	zero,0(s2)
    8d8e:	0100                	addi	s0,sp,128
    8d90:	0200                	addi	s0,sp,256
    8d92:	4a04                	lw	s1,16(a2)
    8d94:	00090003          	lb	zero,0(s2)
    8d98:	0100                	addi	s0,sp,128
    8d9a:	0200                	addi	s0,sp,256
    8d9c:	4b04                	lw	s1,16(a4)
    8d9e:	04090003          	lb	zero,64(s2)
    8da2:	0100                	addi	s0,sp,128
    8da4:	0200                	addi	s0,sp,256
    8da6:	4d04                	lw	s1,24(a0)
    8da8:	08090003          	lb	zero,128(s2)
    8dac:	0100                	addi	s0,sp,128
    8dae:	0200                	addi	s0,sp,256
    8db0:	4d04                	lw	s1,24(a0)
    8db2:	1c090003          	lb	zero,448(s2)
    8db6:	0100                	addi	s0,sp,128
    8db8:	0200                	addi	s0,sp,256
    8dba:	4d04                	lw	s1,24(a0)
    8dbc:	04090003          	lb	zero,64(s2)
    8dc0:	0100                	addi	s0,sp,128
    8dc2:	0200                	addi	s0,sp,256
    8dc4:	4d04                	lw	s1,24(a0)
    8dc6:	00090003          	lb	zero,0(s2)
    8dca:	0100                	addi	s0,sp,128
    8dcc:	0200                	addi	s0,sp,256
    8dce:	4d04                	lw	s1,24(a0)
    8dd0:	00090003          	lb	zero,0(s2)
    8dd4:	0100                	addi	s0,sp,128
    8dd6:	0200                	addi	s0,sp,256
    8dd8:	4f04                	lw	s1,24(a4)
    8dda:	0306                	slli	t1,t1,0x1
    8ddc:	0900                	addi	s0,sp,144
    8dde:	0004                	0x4
    8de0:	0001                	nop
    8de2:	0402                	c.slli64	s0
    8de4:	0350                	addi	a2,sp,388
    8de6:	0900                	addi	s0,sp,144
    8de8:	0004                	0x4
    8dea:	0001                	nop
    8dec:	0402                	c.slli64	s0
    8dee:	0652                	slli	a2,a2,0x14
    8df0:	08090003          	lb	zero,128(s2)
    8df4:	0100                	addi	s0,sp,128
    8df6:	0200                	addi	s0,sp,256
    8df8:	5204                	lw	s1,32(a2)
    8dfa:	08090003          	lb	zero,128(s2)
    8dfe:	0100                	addi	s0,sp,128
    8e00:	0200                	addi	s0,sp,256
    8e02:	5204                	lw	s1,32(a2)
    8e04:	00090003          	lb	zero,0(s2)
    8e08:	0100                	addi	s0,sp,128
    8e0a:	0200                	addi	s0,sp,256
    8e0c:	5204                	lw	s1,32(a2)
    8e0e:	00090003          	lb	zero,0(s2)
    8e12:	0100                	addi	s0,sp,128
    8e14:	0200                	addi	s0,sp,256
    8e16:	5204                	lw	s1,32(a2)
    8e18:	00090003          	lb	zero,0(s2)
    8e1c:	0100                	addi	s0,sp,128
    8e1e:	0200                	addi	s0,sp,256
    8e20:	5204                	lw	s1,32(a2)
    8e22:	00090003          	lb	zero,0(s2)
    8e26:	0100                	addi	s0,sp,128
    8e28:	0200                	addi	s0,sp,256
    8e2a:	5204                	lw	s1,32(a2)
    8e2c:	00090003          	lb	zero,0(s2)
    8e30:	0100                	addi	s0,sp,128
    8e32:	0200                	addi	s0,sp,256
    8e34:	5204                	lw	s1,32(a2)
    8e36:	00090003          	lb	zero,0(s2)
    8e3a:	0100                	addi	s0,sp,128
    8e3c:	0200                	addi	s0,sp,256
    8e3e:	5804                	lw	s1,48(s0)
    8e40:	0306                	slli	t1,t1,0x1
    8e42:	0900                	addi	s0,sp,144
    8e44:	0004                	0x4
    8e46:	0001                	nop
    8e48:	0402                	c.slli64	s0
    8e4a:	0900035b          	0x900035b
    8e4e:	0004                	0x4
    8e50:	0001                	nop
    8e52:	0402                	c.slli64	s0
    8e54:	035c                	addi	a5,sp,388
    8e56:	0900                	addi	s0,sp,144
    8e58:	0004                	0x4
    8e5a:	0001                	nop
    8e5c:	0402                	c.slli64	s0
    8e5e:	065e                	slli	a2,a2,0x17
    8e60:	04090003          	lb	zero,64(s2)
    8e64:	0100                	addi	s0,sp,128
    8e66:	0200                	addi	s0,sp,256
    8e68:	5e04                	lw	s1,56(a2)
    8e6a:	10090003          	lb	zero,256(s2)
    8e6e:	0100                	addi	s0,sp,128
    8e70:	0200                	addi	s0,sp,256
    8e72:	5e04                	lw	s1,56(a2)
    8e74:	00090003          	lb	zero,0(s2)
    8e78:	0100                	addi	s0,sp,128
    8e7a:	0200                	addi	s0,sp,256
    8e7c:	5e04                	lw	s1,56(a2)
    8e7e:	00090003          	lb	zero,0(s2)
    8e82:	0100                	addi	s0,sp,128
    8e84:	0200                	addi	s0,sp,256
    8e86:	5e04                	lw	s1,56(a2)
    8e88:	00090003          	lb	zero,0(s2)
    8e8c:	0100                	addi	s0,sp,128
    8e8e:	0200                	addi	s0,sp,256
    8e90:	5e04                	lw	s1,56(a2)
    8e92:	04090003          	lb	zero,64(s2)
    8e96:	0100                	addi	s0,sp,128
    8e98:	0200                	addi	s0,sp,256
    8e9a:	6004                	flw	fs1,0(s0)
    8e9c:	04090003          	lb	zero,64(s2)
    8ea0:	0100                	addi	s0,sp,128
    8ea2:	0200                	addi	s0,sp,256
    8ea4:	6004                	flw	fs1,0(s0)
    8ea6:	00090003          	lb	zero,0(s2)
    8eaa:	0100                	addi	s0,sp,128
    8eac:	0200                	addi	s0,sp,256
    8eae:	6204                	flw	fs1,0(a2)
    8eb0:	0306                	slli	t1,t1,0x1
    8eb2:	0900                	addi	s0,sp,144
    8eb4:	0004                	0x4
    8eb6:	0001                	nop
    8eb8:	0402                	c.slli64	s0
    8eba:	00030663          	beqz	t1,8ec6 <__heap_end+0x1636>
    8ebe:	0409                	addi	s0,s0,2
    8ec0:	0100                	addi	s0,sp,128
    8ec2:	0200                	addi	s0,sp,256
    8ec4:	0204                	addi	s1,sp,256
    8ec6:	04090103          	lb	sp,64(s2)
    8eca:	0100                	addi	s0,sp,128
    8ecc:	0200                	addi	s0,sp,256
    8ece:	0204                	addi	s1,sp,256
    8ed0:	04090003          	lb	zero,64(s2)
    8ed4:	0100                	addi	s0,sp,128
    8ed6:	0200                	addi	s0,sp,256
    8ed8:	0604                	addi	s1,sp,768
    8eda:	04090003          	lb	zero,64(s2)
    8ede:	0100                	addi	s0,sp,128
    8ee0:	0200                	addi	s0,sp,256
    8ee2:	0604                	addi	s1,sp,768
    8ee4:	00090003          	lb	zero,0(s2)
    8ee8:	0100                	addi	s0,sp,128
    8eea:	0200                	addi	s0,sp,256
    8eec:	0804                	addi	s1,sp,16
    8eee:	08090003          	lb	zero,128(s2)
    8ef2:	0100                	addi	s0,sp,128
    8ef4:	0200                	addi	s0,sp,256
    8ef6:	0804                	addi	s1,sp,16
    8ef8:	00090003          	lb	zero,0(s2)
    8efc:	0100                	addi	s0,sp,128
    8efe:	0200                	addi	s0,sp,256
    8f00:	0804                	addi	s1,sp,16
    8f02:	00090003          	lb	zero,0(s2)
    8f06:	0100                	addi	s0,sp,128
    8f08:	0200                	addi	s0,sp,256
    8f0a:	0804                	addi	s1,sp,16
    8f0c:	00090003          	lb	zero,0(s2)
    8f10:	0100                	addi	s0,sp,128
    8f12:	0200                	addi	s0,sp,256
    8f14:	0a04                	addi	s1,sp,272
    8f16:	0c090003          	lb	zero,192(s2)
    8f1a:	0100                	addi	s0,sp,128
    8f1c:	0200                	addi	s0,sp,256
    8f1e:	0a04                	addi	s1,sp,272
    8f20:	00090003          	lb	zero,0(s2)
    8f24:	0100                	addi	s0,sp,128
    8f26:	0200                	addi	s0,sp,256
    8f28:	0a04                	addi	s1,sp,272
    8f2a:	00090003          	lb	zero,0(s2)
    8f2e:	0100                	addi	s0,sp,128
    8f30:	0200                	addi	s0,sp,256
    8f32:	0a04                	addi	s1,sp,272
    8f34:	04090003          	lb	zero,64(s2)
    8f38:	0100                	addi	s0,sp,128
    8f3a:	0200                	addi	s0,sp,256
    8f3c:	0a04                	addi	s1,sp,272
    8f3e:	08090003          	lb	zero,128(s2)
    8f42:	0100                	addi	s0,sp,128
    8f44:	0200                	addi	s0,sp,256
    8f46:	0904                	addi	s1,sp,144
    8f48:	04090003          	lb	zero,64(s2)
    8f4c:	0100                	addi	s0,sp,128
    8f4e:	0200                	addi	s0,sp,256
    8f50:	0904                	addi	s1,sp,144
    8f52:	00090003          	lb	zero,0(s2)
    8f56:	0100                	addi	s0,sp,128
    8f58:	0200                	addi	s0,sp,256
    8f5a:	1804                	addi	s1,sp,48
    8f5c:	0c090003          	lb	zero,192(s2)
    8f60:	0100                	addi	s0,sp,128
    8f62:	0200                	addi	s0,sp,256
    8f64:	1804                	addi	s1,sp,48
    8f66:	0c090003          	lb	zero,192(s2)
    8f6a:	0100                	addi	s0,sp,128
    8f6c:	0200                	addi	s0,sp,256
    8f6e:	1a04                	addi	s1,sp,304
    8f70:	04090003          	lb	zero,64(s2)
    8f74:	0100                	addi	s0,sp,128
    8f76:	0200                	addi	s0,sp,256
    8f78:	1a04                	addi	s1,sp,304
    8f7a:	00090003          	lb	zero,0(s2)
    8f7e:	0100                	addi	s0,sp,128
    8f80:	0200                	addi	s0,sp,256
    8f82:	1a04                	addi	s1,sp,304
    8f84:	00090003          	lb	zero,0(s2)
    8f88:	0100                	addi	s0,sp,128
    8f8a:	0200                	addi	s0,sp,256
    8f8c:	1a04                	addi	s1,sp,304
    8f8e:	00090003          	lb	zero,0(s2)
    8f92:	0100                	addi	s0,sp,128
    8f94:	0306                	slli	t1,t1,0x1
    8f96:	0900                	addi	s0,sp,144
    8f98:	0008                	0x8
    8f9a:	0001                	nop
    8f9c:	0402                	c.slli64	s0
    8f9e:	00030677          	0x30677
    8fa2:	1009                	c.nop	-30
    8fa4:	0100                	addi	s0,sp,128
    8fa6:	0200                	addi	s0,sp,256
    8fa8:	7704                	flw	fs1,40(a4)
    8faa:	00090003          	lb	zero,0(s2)
    8fae:	0100                	addi	s0,sp,128
    8fb0:	0200                	addi	s0,sp,256
    8fb2:	7704                	flw	fs1,40(a4)
    8fb4:	00090003          	lb	zero,0(s2)
    8fb8:	0100                	addi	s0,sp,128
    8fba:	0200                	addi	s0,sp,256
    8fbc:	7704                	flw	fs1,40(a4)
    8fbe:	00090003          	lb	zero,0(s2)
    8fc2:	0100                	addi	s0,sp,128
    8fc4:	0200                	addi	s0,sp,256
    8fc6:	7704                	flw	fs1,40(a4)
    8fc8:	00090003          	lb	zero,0(s2)
    8fcc:	0100                	addi	s0,sp,128
    8fce:	0200                	addi	s0,sp,256
    8fd0:	7704                	flw	fs1,40(a4)
    8fd2:	00090003          	lb	zero,0(s2)
    8fd6:	0100                	addi	s0,sp,128
    8fd8:	0200                	addi	s0,sp,256
    8fda:	7704                	flw	fs1,40(a4)
    8fdc:	00090003          	lb	zero,0(s2)
    8fe0:	0100                	addi	s0,sp,128
    8fe2:	0200                	addi	s0,sp,256
    8fe4:	7704                	flw	fs1,40(a4)
    8fe6:	00090003          	lb	zero,0(s2)
    8fea:	0100                	addi	s0,sp,128
    8fec:	0105                	addi	sp,sp,1
    8fee:	0200                	addi	s0,sp,256
    8ff0:	7704                	flw	fs1,40(a4)
    8ff2:	0306                	slli	t1,t1,0x1
    8ff4:	0904                	addi	s1,sp,144
    8ff6:	000c                	0xc
    8ff8:	0501                	addi	a0,a0,0
    8ffa:	04020003          	lb	zero,64(tp) # 40 <_start+0x30>
    8ffe:	097c0377          	0x97c0377
    9002:	0008                	0x8
    9004:	0001                	nop
    9006:	0402                	c.slli64	s0
    9008:	00030677          	0x30677
    900c:	1409                	addi	s0,s0,-30
    900e:	0100                	addi	s0,sp,128
    9010:	0200                	addi	s0,sp,256
    9012:	7704                	flw	fs1,40(a4)
    9014:	00090003          	lb	zero,0(s2)
    9018:	0100                	addi	s0,sp,128
    901a:	0200                	addi	s0,sp,256
    901c:	7704                	flw	fs1,40(a4)
    901e:	00090103          	lb	sp,0(s2)
    9022:	0100                	addi	s0,sp,128
    9024:	0200                	addi	s0,sp,256
    9026:	7704                	flw	fs1,40(a4)
    9028:	00090003          	lb	zero,0(s2)
    902c:	0100                	addi	s0,sp,128
    902e:	0200                	addi	s0,sp,256
    9030:	7704                	flw	fs1,40(a4)
    9032:	00090003          	lb	zero,0(s2)
    9036:	0100                	addi	s0,sp,128
    9038:	0200                	addi	s0,sp,256
    903a:	7704                	flw	fs1,40(a4)
    903c:	00090203          	lb	tp,0(s2)
    9040:	0100                	addi	s0,sp,128
    9042:	0105                	addi	sp,sp,1
    9044:	0200                	addi	s0,sp,256
    9046:	7704                	flw	fs1,40(a4)
    9048:	0306                	slli	t1,t1,0x1
    904a:	0901                	addi	s2,s2,0
    904c:	0000                	unimp
    904e:	0501                	addi	a0,a0,0
    9050:	04020003          	lb	zero,64(tp) # 40 <_start+0x30>
    9054:	7b03060f          	0x7b03060f
    9058:	3c09                	jal	8a6a <__heap_end+0x11da>
    905a:	0100                	addi	s0,sp,128
    905c:	0200                	addi	s0,sp,256
    905e:	0f04                	addi	s1,sp,912
    9060:	04090003          	lb	zero,64(s2)
    9064:	0100                	addi	s0,sp,128
    9066:	0200                	addi	s0,sp,256
    9068:	0f04                	addi	s1,sp,912
    906a:	00090003          	lb	zero,0(s2)
    906e:	0100                	addi	s0,sp,128
    9070:	0200                	addi	s0,sp,256
    9072:	0f04                	addi	s1,sp,912
    9074:	00090003          	lb	zero,0(s2)
    9078:	0100                	addi	s0,sp,128
    907a:	0200                	addi	s0,sp,256
    907c:	0804                	addi	s1,sp,16
    907e:	0306                	slli	t1,t1,0x1
    9080:	097e                	slli	s2,s2,0x1f
    9082:	0008                	0x8
    9084:	0001                	nop
    9086:	0402                	c.slli64	s0
    9088:	0608                	addi	a0,sp,768
    908a:	04090203          	lb	tp,64(s2)
    908e:	0100                	addi	s0,sp,128
    9090:	0200                	addi	s0,sp,256
    9092:	0804                	addi	s1,sp,16
    9094:	00090003          	lb	zero,0(s2)
    9098:	0100                	addi	s0,sp,128
    909a:	0200                	addi	s0,sp,256
    909c:	0804                	addi	s1,sp,16
    909e:	00090003          	lb	zero,0(s2)
    90a2:	0100                	addi	s0,sp,128
    90a4:	0200                	addi	s0,sp,256
    90a6:	0804                	addi	s1,sp,16
    90a8:	00090003          	lb	zero,0(s2)
    90ac:	0100                	addi	s0,sp,128
    90ae:	0200                	addi	s0,sp,256
    90b0:	6c04                	flw	fs1,24(s0)
    90b2:	0c090003          	lb	zero,192(s2)
    90b6:	0100                	addi	s0,sp,128
    90b8:	0200                	addi	s0,sp,256
    90ba:	6c04                	flw	fs1,24(s0)
    90bc:	00090103          	lb	sp,0(s2)
    90c0:	0100                	addi	s0,sp,128
    90c2:	0200                	addi	s0,sp,256
    90c4:	6c04                	flw	fs1,24(s0)
    90c6:	00090003          	lb	zero,0(s2)
    90ca:	0100                	addi	s0,sp,128
    90cc:	0200                	addi	s0,sp,256
    90ce:	6c04                	flw	fs1,24(s0)
    90d0:	00090003          	lb	zero,0(s2)
    90d4:	0100                	addi	s0,sp,128
    90d6:	0306                	slli	t1,t1,0x1
    90d8:	0900                	addi	s0,sp,144
    90da:	0008                	0x8
    90dc:	0001                	nop
    90de:	0402                	c.slli64	s0
    90e0:	0305                	addi	t1,t1,1
    90e2:	097e                	slli	s2,s2,0x1f
    90e4:	0020                	addi	s0,sp,8
    90e6:	0001                	nop
    90e8:	0402                	c.slli64	s0
    90ea:	0605                	addi	a2,a2,1
    90ec:	04090103          	lb	sp,64(s2)
    90f0:	0100                	addi	s0,sp,128
    90f2:	0200                	addi	s0,sp,256
    90f4:	0504                	addi	s1,sp,640
    90f6:	00090003          	lb	zero,0(s2)
    90fa:	0100                	addi	s0,sp,128
    90fc:	0200                	addi	s0,sp,256
    90fe:	0504                	addi	s1,sp,640
    9100:	00090003          	lb	zero,0(s2)
    9104:	0100                	addi	s0,sp,128
    9106:	0200                	addi	s0,sp,256
    9108:	0504                	addi	s1,sp,640
    910a:	00090003          	lb	zero,0(s2)
    910e:	0100                	addi	s0,sp,128
    9110:	0306                	slli	t1,t1,0x1
    9112:	0900                	addi	s0,sp,144
    9114:	0004                	0x4
    9116:	0001                	nop
    9118:	0402                	c.slli64	s0
    911a:	0103063b          	0x103063b
    911e:	1409                	addi	s0,s0,-30
    9120:	0100                	addi	s0,sp,128
    9122:	0200                	addi	s0,sp,256
    9124:	3b04                	fld	fs1,48(a4)
    9126:	00090003          	lb	zero,0(s2)
    912a:	0100                	addi	s0,sp,128
    912c:	0200                	addi	s0,sp,256
    912e:	3b04                	fld	fs1,48(a4)
    9130:	00090003          	lb	zero,0(s2)
    9134:	0100                	addi	s0,sp,128
    9136:	0200                	addi	s0,sp,256
    9138:	3b04                	fld	fs1,48(a4)
    913a:	08090003          	lb	zero,128(s2)
    913e:	0100                	addi	s0,sp,128
    9140:	0200                	addi	s0,sp,256
    9142:	3c04                	fld	fs1,56(s0)
    9144:	08090003          	lb	zero,128(s2)
    9148:	0100                	addi	s0,sp,128
    914a:	0200                	addi	s0,sp,256
    914c:	3e04                	fld	fs1,56(a2)
    914e:	08090003          	lb	zero,128(s2)
    9152:	0100                	addi	s0,sp,128
    9154:	0200                	addi	s0,sp,256
    9156:	3e04                	fld	fs1,56(a2)
    9158:	1c090003          	lb	zero,448(s2)
    915c:	0100                	addi	s0,sp,128
    915e:	0200                	addi	s0,sp,256
    9160:	4b04                	lw	s1,16(a4)
    9162:	04090003          	lb	zero,64(s2)
    9166:	0100                	addi	s0,sp,128
    9168:	0200                	addi	s0,sp,256
    916a:	4b04                	lw	s1,16(a4)
    916c:	00090003          	lb	zero,0(s2)
    9170:	0100                	addi	s0,sp,128
    9172:	0200                	addi	s0,sp,256
    9174:	4c04                	lw	s1,24(s0)
    9176:	08090003          	lb	zero,128(s2)
    917a:	0100                	addi	s0,sp,128
    917c:	0200                	addi	s0,sp,256
    917e:	4c04                	lw	s1,24(s0)
    9180:	00090003          	lb	zero,0(s2)
    9184:	0100                	addi	s0,sp,128
    9186:	0200                	addi	s0,sp,256
    9188:	4c04                	lw	s1,24(s0)
    918a:	00090003          	lb	zero,0(s2)
    918e:	0100                	addi	s0,sp,128
    9190:	0200                	addi	s0,sp,256
    9192:	4c04                	lw	s1,24(s0)
    9194:	00090003          	lb	zero,0(s2)
    9198:	0100                	addi	s0,sp,128
    919a:	0200                	addi	s0,sp,256
    919c:	4e04                	lw	s1,24(a2)
    919e:	0c090003          	lb	zero,192(s2)
    91a2:	0100                	addi	s0,sp,128
    91a4:	0200                	addi	s0,sp,256
    91a6:	4e04                	lw	s1,24(a2)
    91a8:	00090003          	lb	zero,0(s2)
    91ac:	0100                	addi	s0,sp,128
    91ae:	0200                	addi	s0,sp,256
    91b0:	4e04                	lw	s1,24(a2)
    91b2:	00090003          	lb	zero,0(s2)
    91b6:	0100                	addi	s0,sp,128
    91b8:	0200                	addi	s0,sp,256
    91ba:	4e04                	lw	s1,24(a2)
    91bc:	04090003          	lb	zero,64(s2)
    91c0:	0100                	addi	s0,sp,128
    91c2:	0200                	addi	s0,sp,256
    91c4:	4e04                	lw	s1,24(a2)
    91c6:	08090003          	lb	zero,128(s2)
    91ca:	0100                	addi	s0,sp,128
    91cc:	0200                	addi	s0,sp,256
    91ce:	4d04                	lw	s1,24(a0)
    91d0:	04090003          	lb	zero,64(s2)
    91d4:	0100                	addi	s0,sp,128
    91d6:	0200                	addi	s0,sp,256
    91d8:	4d04                	lw	s1,24(a0)
    91da:	00090003          	lb	zero,0(s2)
    91de:	0100                	addi	s0,sp,128
    91e0:	0200                	addi	s0,sp,256
    91e2:	5d04                	lw	s1,56(a0)
    91e4:	0c090003          	lb	zero,192(s2)
    91e8:	0100                	addi	s0,sp,128
    91ea:	0200                	addi	s0,sp,256
    91ec:	5d04                	lw	s1,56(a0)
    91ee:	00090003          	lb	zero,0(s2)
    91f2:	0100                	addi	s0,sp,128
    91f4:	0200                	addi	s0,sp,256
    91f6:	5d04                	lw	s1,56(a0)
    91f8:	00090003          	lb	zero,0(s2)
    91fc:	0100                	addi	s0,sp,128
    91fe:	0200                	addi	s0,sp,256
    9200:	5d04                	lw	s1,56(a0)
    9202:	0c090003          	lb	zero,192(s2)
    9206:	0100                	addi	s0,sp,128
    9208:	0306                	slli	t1,t1,0x1
    920a:	0900                	addi	s0,sp,144
    920c:	0004                	0x4
    920e:	0001                	nop
    9210:	0402                	c.slli64	s0
    9212:	0003063f 01000809 	0x10008090003063f
    921a:	0200                	addi	s0,sp,256
    921c:	4704                	lw	s1,8(a4)
    921e:	0306                	slli	t1,t1,0x1
    9220:	0900                	addi	s0,sp,144
    9222:	0018                	0x18
    9224:	0001                	nop
    9226:	0402                	c.slli64	s0
    9228:	034a                	slli	t1,t1,0x12
    922a:	0900                	addi	s0,sp,144
    922c:	0008                	0x8
    922e:	0001                	nop
    9230:	0402                	c.slli64	s0
    9232:	064a                	slli	a2,a2,0x12
    9234:	0c090003          	lb	zero,192(s2)
    9238:	0100                	addi	s0,sp,128
    923a:	0306                	slli	t1,t1,0x1
    923c:	0900                	addi	s0,sp,144
    923e:	0008                	0x8
    9240:	0301                	addi	t1,t1,0
    9242:	097f                	0x97f
    9244:	0030                	addi	a2,sp,8
    9246:	0601                	addi	a2,a2,0
    9248:	04090003          	lb	zero,64(s2)
    924c:	0100                	addi	s0,sp,128
    924e:	00090003          	lb	zero,0(s2)
    9252:	0100                	addi	s0,sp,128
    9254:	0809                	addi	a6,a6,2
    9256:	0000                	unimp
    9258:	0101                	addi	sp,sp,0
    925a:	024a                	slli	tp,tp,0x12
    925c:	0000                	unimp
    925e:	00650003          	lb	zero,6(a0)
    9262:	0000                	unimp
    9264:	0101                	addi	sp,sp,0
    9266:	000d0efb          	0xd0efb
    926a:	0101                	addi	sp,sp,0
    926c:	0101                	addi	sp,sp,0
    926e:	0000                	unimp
    9270:	0100                	addi	s0,sp,128
    9272:	0000                	unimp
    9274:	2e01                	jal	9584 <__heap_end+0x1cf4>
    9276:	2f2e                	fld	ft10,200(sp)
    9278:	2e2e                	fld	ft8,200(sp)
    927a:	2f2e2e2f          	0x2f2e2e2f
    927e:	2e2e                	fld	ft8,200(sp)
    9280:	2f2e2e2f          	0x2f2e2e2f
    9284:	6972                	flw	fs2,28(sp)
    9286:	2d766373          	csrrsi	t1,0x2d7,12
    928a:	2f636367          	0x2f636367
    928e:	696c                	flw	fa1,84(a0)
    9290:	6762                	flw	fa4,24(sp)
    9292:	732f6363          	bltu	t5,s2,99b8 <__heap_end+0x2128>
    9296:	2d74666f          	jal	a2,4fd6c <RAM_SIZE+0x3fd6c>
    929a:	7066                	flw	ft0,120(sp)
    929c:	2e00                	fld	fs0,24(a2)
    929e:	0000                	unimp
    92a0:	7165                	addi	sp,sp,-400
    92a2:	6664                	flw	fs1,76(a2)
    92a4:	2e32                	fld	ft8,264(sp)
    92a6:	00010063          	beqz	sp,92a6 <__heap_end+0x1a16>
    92aa:	7300                	flw	fs0,32(a4)
    92ac:	7066                	flw	ft0,120(sp)
    92ae:	6d2d                	lui	s10,0xb
    92b0:	6361                	lui	t1,0x18
    92b2:	6968                	flw	fa0,84(a0)
    92b4:	656e                	flw	fa0,216(sp)
    92b6:	682e                	flw	fa6,200(sp)
    92b8:	0200                	addi	s0,sp,256
    92ba:	0000                	unimp
    92bc:	6f64                	flw	fs1,92(a4)
    92be:	6275                	lui	tp,0x1d
    92c0:	656c                	flw	fa1,76(a0)
    92c2:	682e                	flw	fa6,200(sp)
    92c4:	0100                	addi	s0,sp,128
    92c6:	0000                	unimp
    92c8:	0500                	addi	s0,sp,640
    92ca:	0001                	nop
    92cc:	0205                	addi	tp,tp,1
    92ce:	48d0                	lw	a2,20(s1)
    92d0:	0000                	unimp
    92d2:	05012303          	lw	t1,80(sp)
    92d6:	09010303          	lb	t1,144(sp)
    92da:	0000                	unimp
    92dc:	0301                	addi	t1,t1,0
    92de:	0900                	addi	s0,sp,144
    92e0:	0000                	unimp
    92e2:	0501                	addi	a0,a0,0
    92e4:	030d                	addi	t1,t1,3
    92e6:	0900                	addi	s0,sp,144
    92e8:	0000                	unimp
    92ea:	0501                	addi	a0,a0,0
    92ec:	09010303          	lb	t1,144(sp)
    92f0:	0000                	unimp
    92f2:	0301                	addi	t1,t1,0
    92f4:	0900                	addi	s0,sp,144
    92f6:	0000                	unimp
    92f8:	0301                	addi	t1,t1,0
    92fa:	0900                	addi	s0,sp,144
    92fc:	0000                	unimp
    92fe:	0301                	addi	t1,t1,0
    9300:	0900                	addi	s0,sp,144
    9302:	0000                	unimp
    9304:	0301                	addi	t1,t1,0
    9306:	0901                	addi	s2,s2,0
    9308:	0000                	unimp
    930a:	0301                	addi	t1,t1,0
    930c:	0900                	addi	s0,sp,144
    930e:	0000                	unimp
    9310:	0301                	addi	t1,t1,0
    9312:	0900                	addi	s0,sp,144
    9314:	0000                	unimp
    9316:	0301                	addi	t1,t1,0
    9318:	0900                	addi	s0,sp,144
    931a:	0000                	unimp
    931c:	0301                	addi	t1,t1,0
    931e:	0901                	addi	s2,s2,0
    9320:	0000                	unimp
    9322:	0301                	addi	t1,t1,0
    9324:	0902                	c.slli64	s2
    9326:	0000                	unimp
    9328:	0301                	addi	t1,t1,0
    932a:	0901                	addi	s2,s2,0
    932c:	0000                	unimp
    932e:	0301                	addi	t1,t1,0
    9330:	0900                	addi	s0,sp,144
    9332:	0000                	unimp
    9334:	0301                	addi	t1,t1,0
    9336:	0900                	addi	s0,sp,144
    9338:	0000                	unimp
    933a:	0301                	addi	t1,t1,0
    933c:	0900                	addi	s0,sp,144
    933e:	0000                	unimp
    9340:	0601                	addi	a2,a2,0
    9342:	0c090103          	lb	sp,192(s2)
    9346:	0100                	addi	s0,sp,128
    9348:	0105                	addi	sp,sp,1
    934a:	04097803          	0x4097803
    934e:	0100                	addi	s0,sp,128
    9350:	0305                	addi	t1,t1,1
    9352:	0306                	slli	t1,t1,0x1
    9354:	00080907          	vle8.v	v18,(a6),v0.t
    9358:	0601                	addi	a2,a2,0
    935a:	04090203          	lb	tp,64(s2)
    935e:	0100                	addi	s0,sp,128
    9360:	04097e03          	0x4097e03
    9364:	0100                	addi	s0,sp,128
    9366:	0306                	slli	t1,t1,0x1
    9368:	0900                	addi	s0,sp,144
    936a:	0004                	0x4
    936c:	0301                	addi	t1,t1,0
    936e:	0900                	addi	s0,sp,144
    9370:	0000                	unimp
    9372:	0601                	addi	a2,a2,0
    9374:	04090103          	lb	sp,64(s2)
    9378:	0100                	addi	s0,sp,128
    937a:	04097f03          	0x4097f03
    937e:	0100                	addi	s0,sp,128
    9380:	0306                	slli	t1,t1,0x1
    9382:	0900                	addi	s0,sp,144
    9384:	0004                	0x4
    9386:	0301                	addi	t1,t1,0
    9388:	0901                	addi	s2,s2,0
    938a:	0000                	unimp
    938c:	0301                	addi	t1,t1,0
    938e:	0900                	addi	s0,sp,144
    9390:	0000                	unimp
    9392:	0301                	addi	t1,t1,0
    9394:	0900                	addi	s0,sp,144
    9396:	0000                	unimp
    9398:	0301                	addi	t1,t1,0
    939a:	0900                	addi	s0,sp,144
    939c:	0000                	unimp
    939e:	0301                	addi	t1,t1,0
    93a0:	0900                	addi	s0,sp,144
    93a2:	0000                	unimp
    93a4:	0301                	addi	t1,t1,0
    93a6:	0900                	addi	s0,sp,144
    93a8:	0000                	unimp
    93aa:	0301                	addi	t1,t1,0
    93ac:	0900                	addi	s0,sp,144
    93ae:	0004                	0x4
    93b0:	0301                	addi	t1,t1,0
    93b2:	0900                	addi	s0,sp,144
    93b4:	0004                	0x4
    93b6:	0301                	addi	t1,t1,0
    93b8:	0901                	addi	s2,s2,0
    93ba:	0000                	unimp
    93bc:	0301                	addi	t1,t1,0
    93be:	0900                	addi	s0,sp,144
    93c0:	0000                	unimp
    93c2:	0301                	addi	t1,t1,0
    93c4:	0900                	addi	s0,sp,144
    93c6:	0000                	unimp
    93c8:	0301                	addi	t1,t1,0
    93ca:	0900                	addi	s0,sp,144
    93cc:	0000                	unimp
    93ce:	0301                	addi	t1,t1,0
    93d0:	0900                	addi	s0,sp,144
    93d2:	0000                	unimp
    93d4:	0001                	nop
    93d6:	0402                	c.slli64	s0
    93d8:	0614                	addi	a3,sp,768
    93da:	04090003          	lb	zero,64(s2)
    93de:	0100                	addi	s0,sp,128
    93e0:	0c090003          	lb	zero,192(s2)
    93e4:	0100                	addi	s0,sp,128
    93e6:	0105                	addi	sp,sp,1
    93e8:	04090403          	lb	s0,64(s2)
    93ec:	0100                	addi	s0,sp,128
    93ee:	0305                	addi	t1,t1,1
    93f0:	0200                	addi	s0,sp,256
    93f2:	1704                	addi	s1,sp,928
    93f4:	04097c03          	0x4097c03
    93f8:	0100                	addi	s0,sp,128
    93fa:	0200                	addi	s0,sp,256
    93fc:	1804                	addi	s1,sp,48
    93fe:	04090003          	lb	zero,64(s2)
    9402:	0100                	addi	s0,sp,128
    9404:	0200                	addi	s0,sp,256
    9406:	4e04                	lw	s1,24(a2)
    9408:	0306                	slli	t1,t1,0x1
    940a:	0900                	addi	s0,sp,144
    940c:	000c                	0xc
    940e:	0001                	nop
    9410:	0402                	c.slli64	s0
    9412:	034e                	slli	t1,t1,0x13
    9414:	0900                	addi	s0,sp,144
    9416:	0000                	unimp
    9418:	0001                	nop
    941a:	0402                	c.slli64	s0
    941c:	034e                	slli	t1,t1,0x13
    941e:	0900                	addi	s0,sp,144
    9420:	0000                	unimp
    9422:	0001                	nop
    9424:	0402                	c.slli64	s0
    9426:	034e                	slli	t1,t1,0x13
    9428:	0900                	addi	s0,sp,144
    942a:	0000                	unimp
    942c:	0001                	nop
    942e:	0402                	c.slli64	s0
    9430:	034e                	slli	t1,t1,0x13
    9432:	0900                	addi	s0,sp,144
    9434:	0000                	unimp
    9436:	0001                	nop
    9438:	0402                	c.slli64	s0
    943a:	034e                	slli	t1,t1,0x13
    943c:	0900                	addi	s0,sp,144
    943e:	0000                	unimp
    9440:	0001                	nop
    9442:	0402                	c.slli64	s0
    9444:	034e                	slli	t1,t1,0x13
    9446:	0900                	addi	s0,sp,144
    9448:	0000                	unimp
    944a:	0001                	nop
    944c:	0402                	c.slli64	s0
    944e:	034e                	slli	t1,t1,0x13
    9450:	0900                	addi	s0,sp,144
    9452:	0000                	unimp
    9454:	0001                	nop
    9456:	0402                	c.slli64	s0
    9458:	034e                	slli	t1,t1,0x13
    945a:	0900                	addi	s0,sp,144
    945c:	0000                	unimp
    945e:	0001                	nop
    9460:	0402                	c.slli64	s0
    9462:	034e                	slli	t1,t1,0x13
    9464:	0900                	addi	s0,sp,144
    9466:	0000                	unimp
    9468:	0001                	nop
    946a:	0402                	c.slli64	s0
    946c:	0650                	addi	a2,sp,772
    946e:	08090003          	lb	zero,128(s2)
    9472:	0100                	addi	s0,sp,128
    9474:	0200                	addi	s0,sp,256
    9476:	5204                	lw	s1,32(a2)
    9478:	04090003          	lb	zero,64(s2)
    947c:	0100                	addi	s0,sp,128
    947e:	0200                	addi	s0,sp,256
    9480:	5404                	lw	s1,40(s0)
    9482:	04090003          	lb	zero,64(s2)
    9486:	0100                	addi	s0,sp,128
    9488:	0200                	addi	s0,sp,256
    948a:	5504                	lw	s1,40(a0)
    948c:	04090003          	lb	zero,64(s2)
    9490:	0100                	addi	s0,sp,128
    9492:	0200                	addi	s0,sp,256
    9494:	5804                	lw	s1,48(s0)
    9496:	04090003          	lb	zero,64(s2)
    949a:	0100                	addi	s0,sp,128
    949c:	0c090003          	lb	zero,192(s2)
    94a0:	0100                	addi	s0,sp,128
    94a2:	0809                	addi	a6,a6,2
    94a4:	0000                	unimp
    94a6:	0101                	addi	sp,sp,0
    94a8:	02df 0000 0003      	0x3000002df
    94ae:	0065                	c.nop	25
    94b0:	0000                	unimp
    94b2:	0101                	addi	sp,sp,0
    94b4:	000d0efb          	0xd0efb
    94b8:	0101                	addi	sp,sp,0
    94ba:	0101                	addi	sp,sp,0
    94bc:	0000                	unimp
    94be:	0100                	addi	s0,sp,128
    94c0:	0000                	unimp
    94c2:	2e01                	jal	97d2 <__heap_end+0x1f42>
    94c4:	2f2e                	fld	ft10,200(sp)
    94c6:	2e2e                	fld	ft8,200(sp)
    94c8:	2f2e2e2f          	0x2f2e2e2f
    94cc:	2e2e                	fld	ft8,200(sp)
    94ce:	2f2e2e2f          	0x2f2e2e2f
    94d2:	6972                	flw	fs2,28(sp)
    94d4:	2d766373          	csrrsi	t1,0x2d7,12
    94d8:	2f636367          	0x2f636367
    94dc:	696c                	flw	fa1,84(a0)
    94de:	6762                	flw	fa4,24(sp)
    94e0:	732f6363          	bltu	t5,s2,9c06 <__heap_end+0x2376>
    94e4:	2d74666f          	jal	a2,4ffba <RAM_SIZE+0x3ffba>
    94e8:	7066                	flw	ft0,120(sp)
    94ea:	2e00                	fld	fs0,24(a2)
    94ec:	0000                	unimp
    94ee:	66646567          	0x66646567
    94f2:	2e32                	fld	ft8,264(sp)
    94f4:	00010063          	beqz	sp,94f4 <__heap_end+0x1c64>
    94f8:	7300                	flw	fs0,32(a4)
    94fa:	7066                	flw	ft0,120(sp)
    94fc:	6d2d                	lui	s10,0xb
    94fe:	6361                	lui	t1,0x18
    9500:	6968                	flw	fa0,84(a0)
    9502:	656e                	flw	fa0,216(sp)
    9504:	682e                	flw	fa6,200(sp)
    9506:	0200                	addi	s0,sp,256
    9508:	0000                	unimp
    950a:	6f64                	flw	fs1,92(a4)
    950c:	6275                	lui	tp,0x1d
    950e:	656c                	flw	fa1,76(a0)
    9510:	682e                	flw	fa6,200(sp)
    9512:	0100                	addi	s0,sp,128
    9514:	0000                	unimp
    9516:	0500                	addi	s0,sp,640
    9518:	0001                	nop
    951a:	0205                	addi	tp,tp,1
    951c:	495c                	lw	a5,20(a0)
    951e:	0000                	unimp
    9520:	05012303          	lw	t1,80(sp)
    9524:	09010303          	lb	t1,144(sp)
    9528:	0000                	unimp
    952a:	0301                	addi	t1,t1,0
    952c:	0900                	addi	s0,sp,144
    952e:	0000                	unimp
    9530:	0501                	addi	a0,a0,0
    9532:	030d                	addi	t1,t1,3
    9534:	0900                	addi	s0,sp,144
    9536:	0000                	unimp
    9538:	0501                	addi	a0,a0,0
    953a:	09010303          	lb	t1,144(sp)
    953e:	0000                	unimp
    9540:	0301                	addi	t1,t1,0
    9542:	0900                	addi	s0,sp,144
    9544:	0000                	unimp
    9546:	0301                	addi	t1,t1,0
    9548:	0900                	addi	s0,sp,144
    954a:	0000                	unimp
    954c:	0301                	addi	t1,t1,0
    954e:	0900                	addi	s0,sp,144
    9550:	0000                	unimp
    9552:	0301                	addi	t1,t1,0
    9554:	0901                	addi	s2,s2,0
    9556:	0000                	unimp
    9558:	0301                	addi	t1,t1,0
    955a:	0900                	addi	s0,sp,144
    955c:	0000                	unimp
    955e:	0301                	addi	t1,t1,0
    9560:	0900                	addi	s0,sp,144
    9562:	0000                	unimp
    9564:	0301                	addi	t1,t1,0
    9566:	0900                	addi	s0,sp,144
    9568:	0000                	unimp
    956a:	0301                	addi	t1,t1,0
    956c:	0901                	addi	s2,s2,0
    956e:	0000                	unimp
    9570:	0301                	addi	t1,t1,0
    9572:	0902                	c.slli64	s2
    9574:	0000                	unimp
    9576:	0301                	addi	t1,t1,0
    9578:	0901                	addi	s2,s2,0
    957a:	0000                	unimp
    957c:	0301                	addi	t1,t1,0
    957e:	0900                	addi	s0,sp,144
    9580:	0000                	unimp
    9582:	0301                	addi	t1,t1,0
    9584:	0900                	addi	s0,sp,144
    9586:	0000                	unimp
    9588:	0301                	addi	t1,t1,0
    958a:	0900                	addi	s0,sp,144
    958c:	0000                	unimp
    958e:	0501                	addi	a0,a0,0
    9590:	0601                	addi	a2,a2,0
    9592:	10097903          	0x10097903
    9596:	0100                	addi	s0,sp,128
    9598:	0305                	addi	t1,t1,1
    959a:	0306                	slli	t1,t1,0x1
    959c:	00080907          	vle8.v	v18,(a6),v0.t
    95a0:	0301                	addi	t1,t1,0
    95a2:	0900                	addi	s0,sp,144
    95a4:	0000                	unimp
    95a6:	0301                	addi	t1,t1,0
    95a8:	0900                	addi	s0,sp,144
    95aa:	0004                	0x4
    95ac:	0301                	addi	t1,t1,0
    95ae:	0900                	addi	s0,sp,144
    95b0:	0004                	0x4
    95b2:	0301                	addi	t1,t1,0
    95b4:	0901                	addi	s2,s2,0
    95b6:	0000                	unimp
    95b8:	0301                	addi	t1,t1,0
    95ba:	0900                	addi	s0,sp,144
    95bc:	0000                	unimp
    95be:	0301                	addi	t1,t1,0
    95c0:	0900                	addi	s0,sp,144
    95c2:	0000                	unimp
    95c4:	0301                	addi	t1,t1,0
    95c6:	0900                	addi	s0,sp,144
    95c8:	0000                	unimp
    95ca:	0601                	addi	a2,a2,0
    95cc:	00090103          	lb	sp,0(s2)
    95d0:	0100                	addi	s0,sp,128
    95d2:	04097f03          	0x4097f03
    95d6:	0100                	addi	s0,sp,128
    95d8:	0306                	slli	t1,t1,0x1
    95da:	0900                	addi	s0,sp,144
    95dc:	000c                	0xc
    95de:	0301                	addi	t1,t1,0
    95e0:	0900                	addi	s0,sp,144
    95e2:	0000                	unimp
    95e4:	0301                	addi	t1,t1,0
    95e6:	0900                	addi	s0,sp,144
    95e8:	0004                	0x4
    95ea:	0301                	addi	t1,t1,0
    95ec:	0900                	addi	s0,sp,144
    95ee:	0004                	0x4
    95f0:	0301                	addi	t1,t1,0
    95f2:	0901                	addi	s2,s2,0
    95f4:	0000                	unimp
    95f6:	0301                	addi	t1,t1,0
    95f8:	0900                	addi	s0,sp,144
    95fa:	0000                	unimp
    95fc:	0301                	addi	t1,t1,0
    95fe:	0900                	addi	s0,sp,144
    9600:	0000                	unimp
    9602:	0301                	addi	t1,t1,0
    9604:	0900                	addi	s0,sp,144
    9606:	0000                	unimp
    9608:	0301                	addi	t1,t1,0
    960a:	0900                	addi	s0,sp,144
    960c:	0000                	unimp
    960e:	0001                	nop
    9610:	0402                	c.slli64	s0
    9612:	0614                	addi	a3,sp,768
    9614:	04090003          	lb	zero,64(s2)
    9618:	0100                	addi	s0,sp,128
    961a:	08090003          	lb	zero,128(s2)
    961e:	0100                	addi	s0,sp,128
    9620:	0200                	addi	s0,sp,256
    9622:	1704                	addi	s1,sp,928
    9624:	08090003          	lb	zero,128(s2)
    9628:	0100                	addi	s0,sp,128
    962a:	0200                	addi	s0,sp,256
    962c:	1804                	addi	s1,sp,48
    962e:	04090003          	lb	zero,64(s2)
    9632:	0100                	addi	s0,sp,128
    9634:	0200                	addi	s0,sp,256
    9636:	3e04                	fld	fs1,56(a2)
    9638:	0306                	slli	t1,t1,0x1
    963a:	0900                	addi	s0,sp,144
    963c:	0008                	0x8
    963e:	0001                	nop
    9640:	0402                	c.slli64	s0
    9642:	033e                	slli	t1,t1,0xf
    9644:	0900                	addi	s0,sp,144
    9646:	0000                	unimp
    9648:	0001                	nop
    964a:	0402                	c.slli64	s0
    964c:	033e                	slli	t1,t1,0xf
    964e:	0900                	addi	s0,sp,144
    9650:	0000                	unimp
    9652:	0001                	nop
    9654:	0402                	c.slli64	s0
    9656:	033e                	slli	t1,t1,0xf
    9658:	0900                	addi	s0,sp,144
    965a:	0000                	unimp
    965c:	0001                	nop
    965e:	0402                	c.slli64	s0
    9660:	033e                	slli	t1,t1,0xf
    9662:	0900                	addi	s0,sp,144
    9664:	0000                	unimp
    9666:	0001                	nop
    9668:	0402                	c.slli64	s0
    966a:	033e                	slli	t1,t1,0xf
    966c:	0900                	addi	s0,sp,144
    966e:	0000                	unimp
    9670:	0001                	nop
    9672:	0402                	c.slli64	s0
    9674:	033e                	slli	t1,t1,0xf
    9676:	0900                	addi	s0,sp,144
    9678:	0000                	unimp
    967a:	0001                	nop
    967c:	0402                	c.slli64	s0
    967e:	033e                	slli	t1,t1,0xf
    9680:	0900                	addi	s0,sp,144
    9682:	0000                	unimp
    9684:	0001                	nop
    9686:	0402                	c.slli64	s0
    9688:	033e                	slli	t1,t1,0xf
    968a:	0900                	addi	s0,sp,144
    968c:	0000                	unimp
    968e:	0001                	nop
    9690:	0402                	c.slli64	s0
    9692:	033e                	slli	t1,t1,0xf
    9694:	0900                	addi	s0,sp,144
    9696:	0000                	unimp
    9698:	0001                	nop
    969a:	0402                	c.slli64	s0
    969c:	033e                	slli	t1,t1,0xf
    969e:	0900                	addi	s0,sp,144
    96a0:	0000                	unimp
    96a2:	0001                	nop
    96a4:	0402                	c.slli64	s0
    96a6:	033e                	slli	t1,t1,0xf
    96a8:	0900                	addi	s0,sp,144
    96aa:	0000                	unimp
    96ac:	0001                	nop
    96ae:	0402                	c.slli64	s0
    96b0:	0003063f 01000409 	0x10004090003063f
    96b8:	0200                	addi	s0,sp,256
    96ba:	3f04                	fld	fs1,56(a4)
    96bc:	0306                	slli	t1,t1,0x1
    96be:	0900                	addi	s0,sp,144
    96c0:	0008                	0x8
    96c2:	0001                	nop
    96c4:	0402                	c.slli64	s0
    96c6:	0645                	addi	a2,a2,17
    96c8:	04090003          	lb	zero,64(s2)
    96cc:	0100                	addi	s0,sp,128
    96ce:	0306                	slli	t1,t1,0x1
    96d0:	0900                	addi	s0,sp,144
    96d2:	0008                	0x8
    96d4:	0301                	addi	t1,t1,0
    96d6:	0900                	addi	s0,sp,144
    96d8:	0004                	0x4
    96da:	0301                	addi	t1,t1,0
    96dc:	0900                	addi	s0,sp,144
    96de:	0000                	unimp
    96e0:	0301                	addi	t1,t1,0
    96e2:	0900                	addi	s0,sp,144
    96e4:	0000                	unimp
    96e6:	0001                	nop
    96e8:	0402                	c.slli64	s0
    96ea:	035f 0900 0004      	0x40900035f
    96f0:	0001                	nop
    96f2:	0402                	c.slli64	s0
    96f4:	09000377          	0x9000377
    96f8:	0004                	0x4
    96fa:	0601                	addi	a2,a2,0
    96fc:	04090003          	lb	zero,64(s2)
    9700:	0100                	addi	s0,sp,128
    9702:	0200                	addi	s0,sp,256
    9704:	5004                	lw	s1,32(s0)
    9706:	0306                	slli	t1,t1,0x1
    9708:	0900                	addi	s0,sp,144
    970a:	0008                	0x8
    970c:	0001                	nop
    970e:	0402                	c.slli64	s0
    9710:	0350                	addi	a2,sp,388
    9712:	0900                	addi	s0,sp,144
    9714:	0000                	unimp
    9716:	0601                	addi	a2,a2,0
    9718:	08090003          	lb	zero,128(s2)
    971c:	0100                	addi	s0,sp,128
    971e:	0200                	addi	s0,sp,256
    9720:	6604                	flw	fs1,8(a2)
    9722:	0306                	slli	t1,t1,0x1
    9724:	0900                	addi	s0,sp,144
    9726:	0008                	0x8
    9728:	0001                	nop
    972a:	01820403          	lb	s0,24(tp) # 1d018 <RAM_SIZE+0xd018>
    972e:	04090003          	lb	zero,64(s2)
    9732:	0100                	addi	s0,sp,128
    9734:	0105                	addi	sp,sp,1
    9736:	0306                	slli	t1,t1,0x1
    9738:	0904                	addi	s1,sp,144
    973a:	0004                	0x4
    973c:	0501                	addi	a0,a0,0
    973e:	04020003          	lb	zero,64(tp) # 40 <_start+0x30>
    9742:	066d                	addi	a2,a2,27
    9744:	04097c03          	0x4097c03
    9748:	0100                	addi	s0,sp,128
    974a:	0200                	addi	s0,sp,256
    974c:	7404                	flw	fs1,40(s0)
    974e:	0306                	slli	t1,t1,0x1
    9750:	0900                	addi	s0,sp,144
    9752:	0004                	0x4
    9754:	0001                	nop
    9756:	0402                	c.slli64	s0
    9758:	0375                	addi	t1,t1,29
    975a:	0900                	addi	s0,sp,144
    975c:	0004                	0x4
    975e:	0001                	nop
    9760:	01800403          	lb	s0,24(zero) # 18 <_start+0x8>
    9764:	0306                	slli	t1,t1,0x1
    9766:	0900                	addi	s0,sp,144
    9768:	0004                	0x4
    976a:	0601                	addi	a2,a2,0
    976c:	04090003          	lb	zero,64(s2)
    9770:	0100                	addi	s0,sp,128
    9772:	0306                	slli	t1,t1,0x1
    9774:	0900                	addi	s0,sp,144
    9776:	0010                	0x10
    9778:	0301                	addi	t1,t1,0
    977a:	0900                	addi	s0,sp,144
    977c:	0008                	0x8
    977e:	0301                	addi	t1,t1,0
    9780:	0900                	addi	s0,sp,144
    9782:	000c                	0xc
    9784:	0901                	addi	s2,s2,0
    9786:	000c                	0xc
    9788:	0100                	addi	s0,sp,128
    978a:	df01                	beqz	a4,96a2 <__heap_end+0x1e12>
    978c:	0002                	c.slli64	zero
    978e:	0300                	addi	s0,sp,384
    9790:	6500                	flw	fs0,8(a0)
    9792:	0000                	unimp
    9794:	0100                	addi	s0,sp,128
    9796:	fb01                	bnez	a4,96a6 <__heap_end+0x1e16>
    9798:	0d0e                	slli	s10,s10,0x3
    979a:	0100                	addi	s0,sp,128
    979c:	0101                	addi	sp,sp,0
    979e:	0001                	nop
    97a0:	0000                	unimp
    97a2:	0001                	nop
    97a4:	0100                	addi	s0,sp,128
    97a6:	2e2e                	fld	ft8,200(sp)
    97a8:	2f2e2e2f          	0x2f2e2e2f
    97ac:	2e2e                	fld	ft8,200(sp)
    97ae:	2f2e2e2f          	0x2f2e2e2f
    97b2:	2e2e                	fld	ft8,200(sp)
    97b4:	7369722f          	0x7369722f
    97b8:	672d7663          	bgeu	s10,s2,9e24 <__heap_end+0x2594>
    97bc:	6c2f6363          	bltu	t5,sp,9e82 <__heap_end+0x25f2>
    97c0:	6269                	lui	tp,0x1a
    97c2:	2f636367          	0x2f636367
    97c6:	74666f73          	csrrsi	t5,0x746,12
    97ca:	662d                	lui	a2,0xb
    97cc:	0070                	addi	a2,sp,12
    97ce:	002e                	c.slli	zero,0xb
    97d0:	6c00                	flw	fs0,24(s0)
    97d2:	6465                	lui	s0,0x19
    97d4:	3266                	fld	ft4,120(sp)
    97d6:	632e                	flw	ft6,200(sp)
    97d8:	0100                	addi	s0,sp,128
    97da:	0000                	unimp
    97dc:	2d706673          	csrrsi	a2,0x2d7,0
    97e0:	616d                	addi	sp,sp,240
    97e2:	6e696863          	bltu	s2,t1,9ed2 <__heap_end+0x2642>
    97e6:	2e65                	jal	9b9e <__heap_end+0x230e>
    97e8:	0068                	addi	a0,sp,12
    97ea:	0002                	c.slli64	zero
    97ec:	6400                	flw	fs0,8(s0)
    97ee:	6c62756f          	jal	a0,30eb4 <RAM_SIZE+0x20eb4>
    97f2:	2e65                	jal	9baa <__heap_end+0x231a>
    97f4:	0068                	addi	a0,sp,12
    97f6:	0001                	nop
    97f8:	0000                	unimp
    97fa:	0105                	addi	sp,sp,1
    97fc:	0500                	addi	s0,sp,640
    97fe:	4002                	0x4002
    9800:	004a                	c.slli	zero,0x12
    9802:	0300                	addi	s0,sp,384
    9804:	03050123          	sb	a6,34(a0)
    9808:	00090103          	lb	sp,0(s2)
    980c:	0100                	addi	s0,sp,128
    980e:	00090003          	lb	zero,0(s2)
    9812:	0100                	addi	s0,sp,128
    9814:	0d05                	addi	s10,s10,1
    9816:	00090003          	lb	zero,0(s2)
    981a:	0100                	addi	s0,sp,128
    981c:	0305                	addi	t1,t1,1
    981e:	00090103          	lb	sp,0(s2)
    9822:	0100                	addi	s0,sp,128
    9824:	00090003          	lb	zero,0(s2)
    9828:	0100                	addi	s0,sp,128
    982a:	00090003          	lb	zero,0(s2)
    982e:	0100                	addi	s0,sp,128
    9830:	00090003          	lb	zero,0(s2)
    9834:	0100                	addi	s0,sp,128
    9836:	00090103          	lb	sp,0(s2)
    983a:	0100                	addi	s0,sp,128
    983c:	00090003          	lb	zero,0(s2)
    9840:	0100                	addi	s0,sp,128
    9842:	00090003          	lb	zero,0(s2)
    9846:	0100                	addi	s0,sp,128
    9848:	00090003          	lb	zero,0(s2)
    984c:	0100                	addi	s0,sp,128
    984e:	00090103          	lb	sp,0(s2)
    9852:	0100                	addi	s0,sp,128
    9854:	00090203          	lb	tp,0(s2)
    9858:	0100                	addi	s0,sp,128
    985a:	00090103          	lb	sp,0(s2)
    985e:	0100                	addi	s0,sp,128
    9860:	00090003          	lb	zero,0(s2)
    9864:	0100                	addi	s0,sp,128
    9866:	00090003          	lb	zero,0(s2)
    986a:	0100                	addi	s0,sp,128
    986c:	00090003          	lb	zero,0(s2)
    9870:	0100                	addi	s0,sp,128
    9872:	0105                	addi	sp,sp,1
    9874:	0306                	slli	t1,t1,0x1
    9876:	0979                	addi	s2,s2,30
    9878:	0010                	0x10
    987a:	0501                	addi	a0,a0,0
    987c:	07030603          	lb	a2,112(t1) # 18070 <RAM_SIZE+0x8070>
    9880:	0809                	addi	a6,a6,2
    9882:	0100                	addi	s0,sp,128
    9884:	00090003          	lb	zero,0(s2)
    9888:	0100                	addi	s0,sp,128
    988a:	04090003          	lb	zero,64(s2)
    988e:	0100                	addi	s0,sp,128
    9890:	04090003          	lb	zero,64(s2)
    9894:	0100                	addi	s0,sp,128
    9896:	00090103          	lb	sp,0(s2)
    989a:	0100                	addi	s0,sp,128
    989c:	00090003          	lb	zero,0(s2)
    98a0:	0100                	addi	s0,sp,128
    98a2:	00090003          	lb	zero,0(s2)
    98a6:	0100                	addi	s0,sp,128
    98a8:	00090003          	lb	zero,0(s2)
    98ac:	0100                	addi	s0,sp,128
    98ae:	0306                	slli	t1,t1,0x1
    98b0:	0901                	addi	s2,s2,0
    98b2:	0000                	unimp
    98b4:	0301                	addi	t1,t1,0
    98b6:	097f                	0x97f
    98b8:	0004                	0x4
    98ba:	0601                	addi	a2,a2,0
    98bc:	0c090003          	lb	zero,192(s2)
    98c0:	0100                	addi	s0,sp,128
    98c2:	00090003          	lb	zero,0(s2)
    98c6:	0100                	addi	s0,sp,128
    98c8:	04090003          	lb	zero,64(s2)
    98cc:	0100                	addi	s0,sp,128
    98ce:	04090003          	lb	zero,64(s2)
    98d2:	0100                	addi	s0,sp,128
    98d4:	00090103          	lb	sp,0(s2)
    98d8:	0100                	addi	s0,sp,128
    98da:	00090003          	lb	zero,0(s2)
    98de:	0100                	addi	s0,sp,128
    98e0:	00090003          	lb	zero,0(s2)
    98e4:	0100                	addi	s0,sp,128
    98e6:	00090003          	lb	zero,0(s2)
    98ea:	0100                	addi	s0,sp,128
    98ec:	00090003          	lb	zero,0(s2)
    98f0:	0100                	addi	s0,sp,128
    98f2:	0200                	addi	s0,sp,256
    98f4:	1404                	addi	s1,sp,544
    98f6:	0306                	slli	t1,t1,0x1
    98f8:	0900                	addi	s0,sp,144
    98fa:	0004                	0x4
    98fc:	0301                	addi	t1,t1,0
    98fe:	0900                	addi	s0,sp,144
    9900:	0008                	0x8
    9902:	0001                	nop
    9904:	0402                	c.slli64	s0
    9906:	09000317          	auipc	t1,0x9000
    990a:	0008                	0x8
    990c:	0001                	nop
    990e:	0402                	c.slli64	s0
    9910:	0318                	addi	a4,sp,384
    9912:	0900                	addi	s0,sp,144
    9914:	0004                	0x4
    9916:	0001                	nop
    9918:	0402                	c.slli64	s0
    991a:	063e                	slli	a2,a2,0xf
    991c:	08090003          	lb	zero,128(s2)
    9920:	0100                	addi	s0,sp,128
    9922:	0200                	addi	s0,sp,256
    9924:	3e04                	fld	fs1,56(a2)
    9926:	00090003          	lb	zero,0(s2)
    992a:	0100                	addi	s0,sp,128
    992c:	0200                	addi	s0,sp,256
    992e:	3e04                	fld	fs1,56(a2)
    9930:	00090003          	lb	zero,0(s2)
    9934:	0100                	addi	s0,sp,128
    9936:	0200                	addi	s0,sp,256
    9938:	3e04                	fld	fs1,56(a2)
    993a:	00090003          	lb	zero,0(s2)
    993e:	0100                	addi	s0,sp,128
    9940:	0200                	addi	s0,sp,256
    9942:	3e04                	fld	fs1,56(a2)
    9944:	00090003          	lb	zero,0(s2)
    9948:	0100                	addi	s0,sp,128
    994a:	0200                	addi	s0,sp,256
    994c:	3e04                	fld	fs1,56(a2)
    994e:	00090003          	lb	zero,0(s2)
    9952:	0100                	addi	s0,sp,128
    9954:	0200                	addi	s0,sp,256
    9956:	3e04                	fld	fs1,56(a2)
    9958:	00090003          	lb	zero,0(s2)
    995c:	0100                	addi	s0,sp,128
    995e:	0200                	addi	s0,sp,256
    9960:	3e04                	fld	fs1,56(a2)
    9962:	00090003          	lb	zero,0(s2)
    9966:	0100                	addi	s0,sp,128
    9968:	0200                	addi	s0,sp,256
    996a:	3e04                	fld	fs1,56(a2)
    996c:	00090003          	lb	zero,0(s2)
    9970:	0100                	addi	s0,sp,128
    9972:	0200                	addi	s0,sp,256
    9974:	3e04                	fld	fs1,56(a2)
    9976:	00090003          	lb	zero,0(s2)
    997a:	0100                	addi	s0,sp,128
    997c:	0200                	addi	s0,sp,256
    997e:	3e04                	fld	fs1,56(a2)
    9980:	00090003          	lb	zero,0(s2)
    9984:	0100                	addi	s0,sp,128
    9986:	0200                	addi	s0,sp,256
    9988:	3e04                	fld	fs1,56(a2)
    998a:	00090003          	lb	zero,0(s2)
    998e:	0100                	addi	s0,sp,128
    9990:	0200                	addi	s0,sp,256
    9992:	3f04                	fld	fs1,56(a4)
    9994:	0306                	slli	t1,t1,0x1
    9996:	0900                	addi	s0,sp,144
    9998:	0004                	0x4
    999a:	0001                	nop
    999c:	0402                	c.slli64	s0
    999e:	0003063f 01000809 	0x10008090003063f
    99a6:	0200                	addi	s0,sp,256
    99a8:	4504                	lw	s1,8(a0)
    99aa:	0306                	slli	t1,t1,0x1
    99ac:	0900                	addi	s0,sp,144
    99ae:	0004                	0x4
    99b0:	0601                	addi	a2,a2,0
    99b2:	08090003          	lb	zero,128(s2)
    99b6:	0100                	addi	s0,sp,128
    99b8:	04090003          	lb	zero,64(s2)
    99bc:	0100                	addi	s0,sp,128
    99be:	00090003          	lb	zero,0(s2)
    99c2:	0100                	addi	s0,sp,128
    99c4:	00090003          	lb	zero,0(s2)
    99c8:	0100                	addi	s0,sp,128
    99ca:	0200                	addi	s0,sp,256
    99cc:	5f04                	lw	s1,56(a4)
    99ce:	04090003          	lb	zero,64(s2)
    99d2:	0100                	addi	s0,sp,128
    99d4:	0200                	addi	s0,sp,256
    99d6:	7704                	flw	fs1,40(a4)
    99d8:	04090003          	lb	zero,64(s2)
    99dc:	0100                	addi	s0,sp,128
    99de:	0306                	slli	t1,t1,0x1
    99e0:	0900                	addi	s0,sp,144
    99e2:	0004                	0x4
    99e4:	0001                	nop
    99e6:	0402                	c.slli64	s0
    99e8:	0650                	addi	a2,sp,772
    99ea:	08090003          	lb	zero,128(s2)
    99ee:	0100                	addi	s0,sp,128
    99f0:	0200                	addi	s0,sp,256
    99f2:	5004                	lw	s1,32(s0)
    99f4:	00090003          	lb	zero,0(s2)
    99f8:	0100                	addi	s0,sp,128
    99fa:	0306                	slli	t1,t1,0x1
    99fc:	0900                	addi	s0,sp,144
    99fe:	0008                	0x8
    9a00:	0001                	nop
    9a02:	0402                	c.slli64	s0
    9a04:	0666                	slli	a2,a2,0x19
    9a06:	08090003          	lb	zero,128(s2)
    9a0a:	0100                	addi	s0,sp,128
    9a0c:	0300                	addi	s0,sp,384
    9a0e:	8204                	0x8204
    9a10:	0301                	addi	t1,t1,0
    9a12:	0900                	addi	s0,sp,144
    9a14:	0004                	0x4
    9a16:	0501                	addi	a0,a0,0
    9a18:	0601                	addi	a2,a2,0
    9a1a:	04090403          	lb	s0,64(s2)
    9a1e:	0100                	addi	s0,sp,128
    9a20:	0305                	addi	t1,t1,1
    9a22:	0200                	addi	s0,sp,256
    9a24:	6d04                	flw	fs1,24(a0)
    9a26:	0306                	slli	t1,t1,0x1
    9a28:	097c                	addi	a5,sp,156
    9a2a:	0004                	0x4
    9a2c:	0001                	nop
    9a2e:	0402                	c.slli64	s0
    9a30:	0674                	addi	a3,sp,780
    9a32:	04090003          	lb	zero,64(s2)
    9a36:	0100                	addi	s0,sp,128
    9a38:	0200                	addi	s0,sp,256
    9a3a:	7504                	flw	fs1,40(a0)
    9a3c:	04090003          	lb	zero,64(s2)
    9a40:	0100                	addi	s0,sp,128
    9a42:	0300                	addi	s0,sp,384
    9a44:	8004                	0x8004
    9a46:	0601                	addi	a2,a2,0
    9a48:	04090003          	lb	zero,64(s2)
    9a4c:	0100                	addi	s0,sp,128
    9a4e:	0306                	slli	t1,t1,0x1
    9a50:	0900                	addi	s0,sp,144
    9a52:	0004                	0x4
    9a54:	0601                	addi	a2,a2,0
    9a56:	10090003          	lb	zero,256(s2)
    9a5a:	0100                	addi	s0,sp,128
    9a5c:	08090003          	lb	zero,128(s2)
    9a60:	0100                	addi	s0,sp,128
    9a62:	0c090003          	lb	zero,192(s2)
    9a66:	0100                	addi	s0,sp,128
    9a68:	0c09                	addi	s8,s8,2
    9a6a:	0000                	unimp
    9a6c:	0101                	addi	sp,sp,0
    9a6e:	101f 0000 0003      	0x30000101f
    9a74:	0060                	addi	s0,sp,12
    9a76:	0000                	unimp
    9a78:	0101                	addi	sp,sp,0
    9a7a:	000d0efb          	0xd0efb
    9a7e:	0101                	addi	sp,sp,0
    9a80:	0101                	addi	sp,sp,0
    9a82:	0000                	unimp
    9a84:	0100                	addi	s0,sp,128
    9a86:	0000                	unimp
    9a88:	2e01                	jal	9d98 <__heap_end+0x2508>
    9a8a:	2f2e                	fld	ft10,200(sp)
    9a8c:	2e2e                	fld	ft8,200(sp)
    9a8e:	2f2e2e2f          	0x2f2e2e2f
    9a92:	2e2e                	fld	ft8,200(sp)
    9a94:	2f2e2e2f          	0x2f2e2e2f
    9a98:	6972                	flw	fs2,28(sp)
    9a9a:	2d766373          	csrrsi	t1,0x2d7,12
    9a9e:	2f636367          	0x2f636367
    9aa2:	696c                	flw	fa1,84(a0)
    9aa4:	6762                	flw	fa4,24(sp)
    9aa6:	732f6363          	bltu	t5,s2,a1cc <__stack_top+0x13c>
    9aaa:	2d74666f          	jal	a2,50580 <RAM_SIZE+0x40580>
    9aae:	7066                	flw	ft0,120(sp)
    9ab0:	0000                	unimp
    9ab2:	756d                	lui	a0,0xffffb
    9ab4:	646c                	flw	fa1,76(s0)
    9ab6:	3366                	fld	ft6,120(sp)
    9ab8:	632e                	flw	ft6,200(sp)
    9aba:	0100                	addi	s0,sp,128
    9abc:	0000                	unimp
    9abe:	74666f73          	csrrsi	t5,0x746,12
    9ac2:	662d                	lui	a2,0xb
    9ac4:	2e70                	fld	fa2,216(a2)
    9ac6:	0068                	addi	a0,sp,12
    9ac8:	0001                	nop
    9aca:	6400                	flw	fs0,8(s0)
    9acc:	6c62756f          	jal	a0,31192 <RAM_SIZE+0x21192>
    9ad0:	2e65                	jal	9e88 <__heap_end+0x25f8>
    9ad2:	0068                	addi	a0,sp,12
    9ad4:	0001                	nop
    9ad6:	0000                	unimp
    9ad8:	0105                	addi	sp,sp,1
    9ada:	0500                	addi	s0,sp,640
    9adc:	2402                	fld	fs0,0(sp)
    9ade:	0300004b          	fnmsub.d	ft0,ft0,fa6,ft0,rne
    9ae2:	03050123          	sb	a6,34(a0) # ffffb022 <RAM_SIZE+0xfffeb022>
    9ae6:	00090103          	lb	sp,0(s2)
    9aea:	0100                	addi	s0,sp,128
    9aec:	00090003          	lb	zero,0(s2)
    9af0:	0100                	addi	s0,sp,128
    9af2:	0d05                	addi	s10,s10,1
    9af4:	00090003          	lb	zero,0(s2)
    9af8:	0100                	addi	s0,sp,128
    9afa:	0305                	addi	t1,t1,1
    9afc:	00090103          	lb	sp,0(s2)
    9b00:	0100                	addi	s0,sp,128
    9b02:	00090003          	lb	zero,0(s2)
    9b06:	0100                	addi	s0,sp,128
    9b08:	00090003          	lb	zero,0(s2)
    9b0c:	0100                	addi	s0,sp,128
    9b0e:	00090003          	lb	zero,0(s2)
    9b12:	0100                	addi	s0,sp,128
    9b14:	00090103          	lb	sp,0(s2)
    9b18:	0100                	addi	s0,sp,128
    9b1a:	00090003          	lb	zero,0(s2)
    9b1e:	0100                	addi	s0,sp,128
    9b20:	00090003          	lb	zero,0(s2)
    9b24:	0100                	addi	s0,sp,128
    9b26:	00090003          	lb	zero,0(s2)
    9b2a:	0100                	addi	s0,sp,128
    9b2c:	00090103          	lb	sp,0(s2)
    9b30:	0100                	addi	s0,sp,128
    9b32:	00090003          	lb	zero,0(s2)
    9b36:	0100                	addi	s0,sp,128
    9b38:	00090003          	lb	zero,0(s2)
    9b3c:	0100                	addi	s0,sp,128
    9b3e:	00090003          	lb	zero,0(s2)
    9b42:	0100                	addi	s0,sp,128
    9b44:	00090103          	lb	sp,0(s2)
    9b48:	0100                	addi	s0,sp,128
    9b4a:	00090203          	lb	tp,0(s2)
    9b4e:	0100                	addi	s0,sp,128
    9b50:	00090103          	lb	sp,0(s2)
    9b54:	0100                	addi	s0,sp,128
    9b56:	00090003          	lb	zero,0(s2)
    9b5a:	0100                	addi	s0,sp,128
    9b5c:	00090003          	lb	zero,0(s2)
    9b60:	0100                	addi	s0,sp,128
    9b62:	00090003          	lb	zero,0(s2)
    9b66:	0100                	addi	s0,sp,128
    9b68:	00090003          	lb	zero,0(s2)
    9b6c:	0100                	addi	s0,sp,128
    9b6e:	00090003          	lb	zero,0(s2)
    9b72:	0100                	addi	s0,sp,128
    9b74:	0105                	addi	sp,sp,1
    9b76:	0306                	slli	t1,t1,0x1
    9b78:	0978                	addi	a4,sp,156
    9b7a:	0000                	unimp
    9b7c:	0501                	addi	a0,a0,0
    9b7e:	09080303          	lb	t1,144(a6)
    9b82:	0008                	0x8
    9b84:	0501                	addi	a0,a0,0
    9b86:	0301                	addi	t1,t1,0
    9b88:	0978                	addi	a4,sp,156
    9b8a:	0004                	0x4
    9b8c:	0501                	addi	a0,a0,0
    9b8e:	09080303          	lb	t1,144(a6)
    9b92:	0014                	0x14
    9b94:	0501                	addi	a0,a0,0
    9b96:	0301                	addi	t1,t1,0
    9b98:	0978                	addi	a4,sp,156
    9b9a:	0004                	0x4
    9b9c:	0501                	addi	a0,a0,0
    9b9e:	09080303          	lb	t1,144(a6)
    9ba2:	000c                	0xc
    9ba4:	0501                	addi	a0,a0,0
    9ba6:	0301                	addi	t1,t1,0
    9ba8:	0978                	addi	a4,sp,156
    9baa:	0004                	0x4
    9bac:	0501                	addi	a0,a0,0
    9bae:	09080303          	lb	t1,144(a6)
    9bb2:	000c                	0xc
    9bb4:	0601                	addi	a2,a2,0
    9bb6:	04090003          	lb	zero,64(s2)
    9bba:	0100                	addi	s0,sp,128
    9bbc:	00090003          	lb	zero,0(s2)
    9bc0:	0100                	addi	s0,sp,128
    9bc2:	04090003          	lb	zero,64(s2)
    9bc6:	0100                	addi	s0,sp,128
    9bc8:	00090003          	lb	zero,0(s2)
    9bcc:	0100                	addi	s0,sp,128
    9bce:	00090003          	lb	zero,0(s2)
    9bd2:	0100                	addi	s0,sp,128
    9bd4:	0200                	addi	s0,sp,256
    9bd6:	0104                	addi	s1,sp,128
    9bd8:	0c090003          	lb	zero,192(s2)
    9bdc:	0100                	addi	s0,sp,128
    9bde:	0200                	addi	s0,sp,256
    9be0:	0104                	addi	s1,sp,128
    9be2:	00090003          	lb	zero,0(s2)
    9be6:	0100                	addi	s0,sp,128
    9be8:	0200                	addi	s0,sp,256
    9bea:	0104                	addi	s1,sp,128
    9bec:	00090003          	lb	zero,0(s2)
    9bf0:	0100                	addi	s0,sp,128
    9bf2:	0200                	addi	s0,sp,256
    9bf4:	0104                	addi	s1,sp,128
    9bf6:	00090003          	lb	zero,0(s2)
    9bfa:	0100                	addi	s0,sp,128
    9bfc:	0200                	addi	s0,sp,256
    9bfe:	0104                	addi	s1,sp,128
    9c00:	14090003          	lb	zero,320(s2)
    9c04:	0100                	addi	s0,sp,128
    9c06:	0200                	addi	s0,sp,256
    9c08:	0104                	addi	s1,sp,128
    9c0a:	04090003          	lb	zero,64(s2)
    9c0e:	0100                	addi	s0,sp,128
    9c10:	0200                	addi	s0,sp,256
    9c12:	0104                	addi	s1,sp,128
    9c14:	00090003          	lb	zero,0(s2)
    9c18:	0100                	addi	s0,sp,128
    9c1a:	0200                	addi	s0,sp,256
    9c1c:	0104                	addi	s1,sp,128
    9c1e:	04090003          	lb	zero,64(s2)
    9c22:	0100                	addi	s0,sp,128
    9c24:	0200                	addi	s0,sp,256
    9c26:	0104                	addi	s1,sp,128
    9c28:	00090003          	lb	zero,0(s2)
    9c2c:	0100                	addi	s0,sp,128
    9c2e:	0200                	addi	s0,sp,256
    9c30:	2904                	fld	fs1,16(a0)
    9c32:	00090003          	lb	zero,0(s2)
    9c36:	0100                	addi	s0,sp,128
    9c38:	0200                	addi	s0,sp,256
    9c3a:	2904                	fld	fs1,16(a0)
    9c3c:	00090003          	lb	zero,0(s2)
    9c40:	0100                	addi	s0,sp,128
    9c42:	0200                	addi	s0,sp,256
    9c44:	0804                	addi	s1,sp,16
    9c46:	04090003          	lb	zero,64(s2)
    9c4a:	0100                	addi	s0,sp,128
    9c4c:	0200                	addi	s0,sp,256
    9c4e:	0804                	addi	s1,sp,16
    9c50:	00090003          	lb	zero,0(s2)
    9c54:	0100                	addi	s0,sp,128
    9c56:	0200                	addi	s0,sp,256
    9c58:	0804                	addi	s1,sp,16
    9c5a:	00090103          	lb	sp,0(s2)
    9c5e:	0100                	addi	s0,sp,128
    9c60:	0200                	addi	s0,sp,256
    9c62:	0804                	addi	s1,sp,16
    9c64:	00090003          	lb	zero,0(s2)
    9c68:	0100                	addi	s0,sp,128
    9c6a:	0200                	addi	s0,sp,256
    9c6c:	0804                	addi	s1,sp,16
    9c6e:	00090003          	lb	zero,0(s2)
    9c72:	0100                	addi	s0,sp,128
    9c74:	0200                	addi	s0,sp,256
    9c76:	0804                	addi	s1,sp,16
    9c78:	00090003          	lb	zero,0(s2)
    9c7c:	0100                	addi	s0,sp,128
    9c7e:	0200                	addi	s0,sp,256
    9c80:	0804                	addi	s1,sp,16
    9c82:	00090003          	lb	zero,0(s2)
    9c86:	0100                	addi	s0,sp,128
    9c88:	0200                	addi	s0,sp,256
    9c8a:	0804                	addi	s1,sp,16
    9c8c:	00090003          	lb	zero,0(s2)
    9c90:	0100                	addi	s0,sp,128
    9c92:	0200                	addi	s0,sp,256
    9c94:	0804                	addi	s1,sp,16
    9c96:	10090003          	lb	zero,256(s2)
    9c9a:	0100                	addi	s0,sp,128
    9c9c:	0200                	addi	s0,sp,256
    9c9e:	0804                	addi	s1,sp,16
    9ca0:	00090003          	lb	zero,0(s2)
    9ca4:	0100                	addi	s0,sp,128
    9ca6:	0200                	addi	s0,sp,256
    9ca8:	0804                	addi	s1,sp,16
    9caa:	04090003          	lb	zero,64(s2)
    9cae:	0100                	addi	s0,sp,128
    9cb0:	0200                	addi	s0,sp,256
    9cb2:	0804                	addi	s1,sp,16
    9cb4:	00090003          	lb	zero,0(s2)
    9cb8:	0100                	addi	s0,sp,128
    9cba:	0200                	addi	s0,sp,256
    9cbc:	0804                	addi	s1,sp,16
    9cbe:	00090003          	lb	zero,0(s2)
    9cc2:	0100                	addi	s0,sp,128
    9cc4:	0306                	slli	t1,t1,0x1
    9cc6:	0900                	addi	s0,sp,144
    9cc8:	0004                	0x4
    9cca:	0001                	nop
    9ccc:	0402                	c.slli64	s0
    9cce:	0601                	addi	a2,a2,0
    9cd0:	08090003          	lb	zero,128(s2)
    9cd4:	0100                	addi	s0,sp,128
    9cd6:	0200                	addi	s0,sp,256
    9cd8:	0104                	addi	s1,sp,128
    9cda:	00090003          	lb	zero,0(s2)
    9cde:	0100                	addi	s0,sp,128
    9ce0:	0200                	addi	s0,sp,256
    9ce2:	0104                	addi	s1,sp,128
    9ce4:	00090003          	lb	zero,0(s2)
    9ce8:	0100                	addi	s0,sp,128
    9cea:	0200                	addi	s0,sp,256
    9cec:	0104                	addi	s1,sp,128
    9cee:	00090003          	lb	zero,0(s2)
    9cf2:	0100                	addi	s0,sp,128
    9cf4:	0200                	addi	s0,sp,256
    9cf6:	0104                	addi	s1,sp,128
    9cf8:	14090003          	lb	zero,320(s2)
    9cfc:	0100                	addi	s0,sp,128
    9cfe:	0200                	addi	s0,sp,256
    9d00:	0104                	addi	s1,sp,128
    9d02:	08090003          	lb	zero,128(s2)
    9d06:	0100                	addi	s0,sp,128
    9d08:	0200                	addi	s0,sp,256
    9d0a:	0104                	addi	s1,sp,128
    9d0c:	00090003          	lb	zero,0(s2)
    9d10:	0100                	addi	s0,sp,128
    9d12:	0200                	addi	s0,sp,256
    9d14:	0104                	addi	s1,sp,128
    9d16:	00090003          	lb	zero,0(s2)
    9d1a:	0100                	addi	s0,sp,128
    9d1c:	0200                	addi	s0,sp,256
    9d1e:	0104                	addi	s1,sp,128
    9d20:	00090003          	lb	zero,0(s2)
    9d24:	0100                	addi	s0,sp,128
    9d26:	0200                	addi	s0,sp,256
    9d28:	2904                	fld	fs1,16(a0)
    9d2a:	00090003          	lb	zero,0(s2)
    9d2e:	0100                	addi	s0,sp,128
    9d30:	0200                	addi	s0,sp,256
    9d32:	2904                	fld	fs1,16(a0)
    9d34:	00090003          	lb	zero,0(s2)
    9d38:	0100                	addi	s0,sp,128
    9d3a:	0200                	addi	s0,sp,256
    9d3c:	0804                	addi	s1,sp,16
    9d3e:	04090003          	lb	zero,64(s2)
    9d42:	0100                	addi	s0,sp,128
    9d44:	0200                	addi	s0,sp,256
    9d46:	0804                	addi	s1,sp,16
    9d48:	00090003          	lb	zero,0(s2)
    9d4c:	0100                	addi	s0,sp,128
    9d4e:	0200                	addi	s0,sp,256
    9d50:	0804                	addi	s1,sp,16
    9d52:	00090103          	lb	sp,0(s2)
    9d56:	0100                	addi	s0,sp,128
    9d58:	0200                	addi	s0,sp,256
    9d5a:	0804                	addi	s1,sp,16
    9d5c:	00090003          	lb	zero,0(s2)
    9d60:	0100                	addi	s0,sp,128
    9d62:	0200                	addi	s0,sp,256
    9d64:	0804                	addi	s1,sp,16
    9d66:	18090003          	lb	zero,384(s2)
    9d6a:	0100                	addi	s0,sp,128
    9d6c:	0200                	addi	s0,sp,256
    9d6e:	0804                	addi	s1,sp,16
    9d70:	04090003          	lb	zero,64(s2)
    9d74:	0100                	addi	s0,sp,128
    9d76:	0200                	addi	s0,sp,256
    9d78:	0204                	addi	s1,sp,256
    9d7a:	20097e03          	0x20097e03
    9d7e:	0100                	addi	s0,sp,128
    9d80:	0200                	addi	s0,sp,256
    9d82:	0d04                	addi	s1,sp,656
    9d84:	08090003          	lb	zero,128(s2)
    9d88:	0100                	addi	s0,sp,128
    9d8a:	0200                	addi	s0,sp,256
    9d8c:	0d04                	addi	s1,sp,656
    9d8e:	00090003          	lb	zero,0(s2)
    9d92:	0100                	addi	s0,sp,128
    9d94:	0200                	addi	s0,sp,256
    9d96:	0d04                	addi	s1,sp,656
    9d98:	00090003          	lb	zero,0(s2)
    9d9c:	0100                	addi	s0,sp,128
    9d9e:	0200                	addi	s0,sp,256
    9da0:	0d04                	addi	s1,sp,656
    9da2:	00090003          	lb	zero,0(s2)
    9da6:	0100                	addi	s0,sp,128
    9da8:	0200                	addi	s0,sp,256
    9daa:	1104                	addi	s1,sp,160
    9dac:	04090003          	lb	zero,64(s2)
    9db0:	0100                	addi	s0,sp,128
    9db2:	0200                	addi	s0,sp,256
    9db4:	1104                	addi	s1,sp,160
    9db6:	00090003          	lb	zero,0(s2)
    9dba:	0100                	addi	s0,sp,128
    9dbc:	0200                	addi	s0,sp,256
    9dbe:	1104                	addi	s1,sp,160
    9dc0:	00090003          	lb	zero,0(s2)
    9dc4:	0100                	addi	s0,sp,128
    9dc6:	0200                	addi	s0,sp,256
    9dc8:	1104                	addi	s1,sp,160
    9dca:	00090003          	lb	zero,0(s2)
    9dce:	0100                	addi	s0,sp,128
    9dd0:	0200                	addi	s0,sp,256
    9dd2:	1104                	addi	s1,sp,160
    9dd4:	08090003          	lb	zero,128(s2)
    9dd8:	0100                	addi	s0,sp,128
    9dda:	0200                	addi	s0,sp,256
    9ddc:	1f04                	addi	s1,sp,944
    9dde:	00090003          	lb	zero,0(s2)
    9de2:	0100                	addi	s0,sp,128
    9de4:	0200                	addi	s0,sp,256
    9de6:	1f04                	addi	s1,sp,944
    9de8:	00090003          	lb	zero,0(s2)
    9dec:	0100                	addi	s0,sp,128
    9dee:	0200                	addi	s0,sp,256
    9df0:	1f04                	addi	s1,sp,944
    9df2:	04090003          	lb	zero,64(s2)
    9df6:	0100                	addi	s0,sp,128
    9df8:	0200                	addi	s0,sp,256
    9dfa:	2004                	fld	fs1,0(s0)
    9dfc:	08090003          	lb	zero,128(s2)
    9e00:	0100                	addi	s0,sp,128
    9e02:	0200                	addi	s0,sp,256
    9e04:	2004                	fld	fs1,0(s0)
    9e06:	08090003          	lb	zero,128(s2)
    9e0a:	0100                	addi	s0,sp,128
    9e0c:	0200                	addi	s0,sp,256
    9e0e:	2004                	fld	fs1,0(s0)
    9e10:	10090003          	lb	zero,256(s2)
    9e14:	0100                	addi	s0,sp,128
    9e16:	0200                	addi	s0,sp,256
    9e18:	2004                	fld	fs1,0(s0)
    9e1a:	04090003          	lb	zero,64(s2)
    9e1e:	0100                	addi	s0,sp,128
    9e20:	0200                	addi	s0,sp,256
    9e22:	2904                	fld	fs1,16(a0)
    9e24:	00090003          	lb	zero,0(s2)
    9e28:	0100                	addi	s0,sp,128
    9e2a:	0200                	addi	s0,sp,256
    9e2c:	1804                	addi	s1,sp,48
    9e2e:	0c090003          	lb	zero,192(s2)
    9e32:	0100                	addi	s0,sp,128
    9e34:	0200                	addi	s0,sp,256
    9e36:	1804                	addi	s1,sp,48
    9e38:	00090003          	lb	zero,0(s2)
    9e3c:	0100                	addi	s0,sp,128
    9e3e:	0200                	addi	s0,sp,256
    9e40:	1804                	addi	s1,sp,48
    9e42:	00090003          	lb	zero,0(s2)
    9e46:	0100                	addi	s0,sp,128
    9e48:	0200                	addi	s0,sp,256
    9e4a:	1804                	addi	s1,sp,48
    9e4c:	00090003          	lb	zero,0(s2)
    9e50:	0100                	addi	s0,sp,128
    9e52:	0200                	addi	s0,sp,256
    9e54:	1804                	addi	s1,sp,48
    9e56:	04090003          	lb	zero,64(s2)
    9e5a:	0100                	addi	s0,sp,128
    9e5c:	0200                	addi	s0,sp,256
    9e5e:	1804                	addi	s1,sp,48
    9e60:	00090003          	lb	zero,0(s2)
    9e64:	0100                	addi	s0,sp,128
    9e66:	0200                	addi	s0,sp,256
    9e68:	2104                	fld	fs1,0(a0)
    9e6a:	08090003          	lb	zero,128(s2)
    9e6e:	0100                	addi	s0,sp,128
    9e70:	0200                	addi	s0,sp,256
    9e72:	2104                	fld	fs1,0(a0)
    9e74:	08090003          	lb	zero,128(s2)
    9e78:	0100                	addi	s0,sp,128
    9e7a:	0200                	addi	s0,sp,256
    9e7c:	0304                	addi	s1,sp,384
    9e7e:	08090003          	lb	zero,128(s2)
    9e82:	0100                	addi	s0,sp,128
    9e84:	0306                	slli	t1,t1,0x1
    9e86:	0900                	addi	s0,sp,144
    9e88:	0008                	0x8
    9e8a:	0001                	nop
    9e8c:	0402                	c.slli64	s0
    9e8e:	0602                	c.slli64	a2
    9e90:	30090103          	lb	sp,768(s2)
    9e94:	0100                	addi	s0,sp,128
    9e96:	0200                	addi	s0,sp,256
    9e98:	0d04                	addi	s1,sp,656
    9e9a:	08090003          	lb	zero,128(s2)
    9e9e:	0100                	addi	s0,sp,128
    9ea0:	0200                	addi	s0,sp,256
    9ea2:	0d04                	addi	s1,sp,656
    9ea4:	00090003          	lb	zero,0(s2)
    9ea8:	0100                	addi	s0,sp,128
    9eaa:	0200                	addi	s0,sp,256
    9eac:	0d04                	addi	s1,sp,656
    9eae:	00090003          	lb	zero,0(s2)
    9eb2:	0100                	addi	s0,sp,128
    9eb4:	0200                	addi	s0,sp,256
    9eb6:	0d04                	addi	s1,sp,656
    9eb8:	00090003          	lb	zero,0(s2)
    9ebc:	0100                	addi	s0,sp,128
    9ebe:	0200                	addi	s0,sp,256
    9ec0:	1104                	addi	s1,sp,160
    9ec2:	04090003          	lb	zero,64(s2)
    9ec6:	0100                	addi	s0,sp,128
    9ec8:	0200                	addi	s0,sp,256
    9eca:	1104                	addi	s1,sp,160
    9ecc:	00090003          	lb	zero,0(s2)
    9ed0:	0100                	addi	s0,sp,128
    9ed2:	0200                	addi	s0,sp,256
    9ed4:	1104                	addi	s1,sp,160
    9ed6:	00090003          	lb	zero,0(s2)
    9eda:	0100                	addi	s0,sp,128
    9edc:	0200                	addi	s0,sp,256
    9ede:	1104                	addi	s1,sp,160
    9ee0:	00090003          	lb	zero,0(s2)
    9ee4:	0100                	addi	s0,sp,128
    9ee6:	0200                	addi	s0,sp,256
    9ee8:	1104                	addi	s1,sp,160
    9eea:	08090003          	lb	zero,128(s2)
    9eee:	0100                	addi	s0,sp,128
    9ef0:	0200                	addi	s0,sp,256
    9ef2:	1f04                	addi	s1,sp,944
    9ef4:	00090003          	lb	zero,0(s2)
    9ef8:	0100                	addi	s0,sp,128
    9efa:	0200                	addi	s0,sp,256
    9efc:	1f04                	addi	s1,sp,944
    9efe:	00090003          	lb	zero,0(s2)
    9f02:	0100                	addi	s0,sp,128
    9f04:	0200                	addi	s0,sp,256
    9f06:	1f04                	addi	s1,sp,944
    9f08:	04090003          	lb	zero,64(s2)
    9f0c:	0100                	addi	s0,sp,128
    9f0e:	0200                	addi	s0,sp,256
    9f10:	2004                	fld	fs1,0(s0)
    9f12:	08090003          	lb	zero,128(s2)
    9f16:	0100                	addi	s0,sp,128
    9f18:	0200                	addi	s0,sp,256
    9f1a:	2004                	fld	fs1,0(s0)
    9f1c:	08090003          	lb	zero,128(s2)
    9f20:	0100                	addi	s0,sp,128
    9f22:	0200                	addi	s0,sp,256
    9f24:	2004                	fld	fs1,0(s0)
    9f26:	10090003          	lb	zero,256(s2)
    9f2a:	0100                	addi	s0,sp,128
    9f2c:	0200                	addi	s0,sp,256
    9f2e:	2004                	fld	fs1,0(s0)
    9f30:	04090003          	lb	zero,64(s2)
    9f34:	0100                	addi	s0,sp,128
    9f36:	0200                	addi	s0,sp,256
    9f38:	2904                	fld	fs1,16(a0)
    9f3a:	00090003          	lb	zero,0(s2)
    9f3e:	0100                	addi	s0,sp,128
    9f40:	0200                	addi	s0,sp,256
    9f42:	1804                	addi	s1,sp,48
    9f44:	0c090003          	lb	zero,192(s2)
    9f48:	0100                	addi	s0,sp,128
    9f4a:	0200                	addi	s0,sp,256
    9f4c:	1804                	addi	s1,sp,48
    9f4e:	00090003          	lb	zero,0(s2)
    9f52:	0100                	addi	s0,sp,128
    9f54:	0200                	addi	s0,sp,256
    9f56:	1804                	addi	s1,sp,48
    9f58:	00090003          	lb	zero,0(s2)
    9f5c:	0100                	addi	s0,sp,128
    9f5e:	0200                	addi	s0,sp,256
    9f60:	1804                	addi	s1,sp,48
    9f62:	00090003          	lb	zero,0(s2)
    9f66:	0100                	addi	s0,sp,128
    9f68:	0200                	addi	s0,sp,256
    9f6a:	1804                	addi	s1,sp,48
    9f6c:	08090003          	lb	zero,128(s2)
    9f70:	0100                	addi	s0,sp,128
    9f72:	0200                	addi	s0,sp,256
    9f74:	1804                	addi	s1,sp,48
    9f76:	00090003          	lb	zero,0(s2)
    9f7a:	0100                	addi	s0,sp,128
    9f7c:	0200                	addi	s0,sp,256
    9f7e:	2104                	fld	fs1,0(a0)
    9f80:	08090003          	lb	zero,128(s2)
    9f84:	0100                	addi	s0,sp,128
    9f86:	0200                	addi	s0,sp,256
    9f88:	2104                	fld	fs1,0(a0)
    9f8a:	08090003          	lb	zero,128(s2)
    9f8e:	0100                	addi	s0,sp,128
    9f90:	0200                	addi	s0,sp,256
    9f92:	0304                	addi	s1,sp,384
    9f94:	08090003          	lb	zero,128(s2)
    9f98:	0100                	addi	s0,sp,128
    9f9a:	0306                	slli	t1,t1,0x1
    9f9c:	0900                	addi	s0,sp,144
    9f9e:	0008                	0x8
    9fa0:	0001                	nop
    9fa2:	0402                	c.slli64	s0
    9fa4:	0602                	c.slli64	a2
    9fa6:	30090103          	lb	sp,768(s2)
    9faa:	0100                	addi	s0,sp,128
    9fac:	0200                	addi	s0,sp,256
    9fae:	0204                	addi	s1,sp,256
    9fb0:	00090003          	lb	zero,0(s2)
    9fb4:	0100                	addi	s0,sp,128
    9fb6:	0200                	addi	s0,sp,256
    9fb8:	0204                	addi	s1,sp,256
    9fba:	00090003          	lb	zero,0(s2)
    9fbe:	0100                	addi	s0,sp,128
    9fc0:	0200                	addi	s0,sp,256
    9fc2:	0204                	addi	s1,sp,256
    9fc4:	00090003          	lb	zero,0(s2)
    9fc8:	0100                	addi	s0,sp,128
    9fca:	0200                	addi	s0,sp,256
    9fcc:	0204                	addi	s1,sp,256
    9fce:	00090003          	lb	zero,0(s2)
    9fd2:	0100                	addi	s0,sp,128
    9fd4:	0200                	addi	s0,sp,256
    9fd6:	0204                	addi	s1,sp,256
    9fd8:	00090003          	lb	zero,0(s2)
    9fdc:	0100                	addi	s0,sp,128
    9fde:	0200                	addi	s0,sp,256
    9fe0:	0204                	addi	s1,sp,256
    9fe2:	00090003          	lb	zero,0(s2)
    9fe6:	0100                	addi	s0,sp,128
    9fe8:	0200                	addi	s0,sp,256
    9fea:	0204                	addi	s1,sp,256
    9fec:	00090003          	lb	zero,0(s2)
    9ff0:	0100                	addi	s0,sp,128
    9ff2:	0200                	addi	s0,sp,256
    9ff4:	0204                	addi	s1,sp,256
    9ff6:	00090003          	lb	zero,0(s2)
    9ffa:	0100                	addi	s0,sp,128
    9ffc:	0200                	addi	s0,sp,256
    9ffe:	0204                	addi	s1,sp,256
    a000:	00090003          	lb	zero,0(s2)
    a004:	0100                	addi	s0,sp,128
    a006:	0200                	addi	s0,sp,256
    a008:	0204                	addi	s1,sp,256
    a00a:	00090003          	lb	zero,0(s2)
    a00e:	0100                	addi	s0,sp,128
    a010:	0200                	addi	s0,sp,256
    a012:	0204                	addi	s1,sp,256
    a014:	0c090003          	lb	zero,192(s2)
    a018:	0100                	addi	s0,sp,128
    a01a:	0200                	addi	s0,sp,256
    a01c:	0204                	addi	s1,sp,256
    a01e:	00090003          	lb	zero,0(s2)
    a022:	0100                	addi	s0,sp,128
    a024:	0200                	addi	s0,sp,256
    a026:	0204                	addi	s1,sp,256
    a028:	0c090003          	lb	zero,192(s2)
    a02c:	0100                	addi	s0,sp,128
    a02e:	0200                	addi	s0,sp,256
    a030:	0204                	addi	s1,sp,256
    a032:	00090003          	lb	zero,0(s2)
    a036:	0100                	addi	s0,sp,128
    a038:	0200                	addi	s0,sp,256
    a03a:	0204                	addi	s1,sp,256
    a03c:	04090003          	lb	zero,64(s2)
    a040:	0100                	addi	s0,sp,128
    a042:	0200                	addi	s0,sp,256
    a044:	0204                	addi	s1,sp,256
    a046:	04090003          	lb	zero,64(s2)
    a04a:	0100                	addi	s0,sp,128
    a04c:	0200                	addi	s0,sp,256
    a04e:	0204                	addi	s1,sp,256
    a050:	04090003          	lb	zero,64(s2)
    a054:	0100                	addi	s0,sp,128
    a056:	0200                	addi	s0,sp,256
    a058:	0204                	addi	s1,sp,256
    a05a:	04090003          	lb	zero,64(s2)
    a05e:	0100                	addi	s0,sp,128
    a060:	0200                	addi	s0,sp,256
    a062:	0204                	addi	s1,sp,256
    a064:	00090003          	lb	zero,0(s2)
    a068:	0100                	addi	s0,sp,128
    a06a:	0200                	addi	s0,sp,256
    a06c:	0204                	addi	s1,sp,256
    a06e:	08090003          	lb	zero,128(s2)
    a072:	0100                	addi	s0,sp,128
    a074:	0200                	addi	s0,sp,256
    a076:	0204                	addi	s1,sp,256
    a078:	00090003          	lb	zero,0(s2)
    a07c:	0100                	addi	s0,sp,128
    a07e:	0200                	addi	s0,sp,256
    a080:	0204                	addi	s1,sp,256
    a082:	04090003          	lb	zero,64(s2)
    a086:	0100                	addi	s0,sp,128
    a088:	0200                	addi	s0,sp,256
    a08a:	0204                	addi	s1,sp,256
    a08c:	04090003          	lb	zero,64(s2)
    a090:	0100                	addi	s0,sp,128
    a092:	0200                	addi	s0,sp,256
    a094:	0204                	addi	s1,sp,256
    a096:	00090003          	lb	zero,0(s2)
    a09a:	0100                	addi	s0,sp,128
    a09c:	0200                	addi	s0,sp,256
    a09e:	0204                	addi	s1,sp,256
    a0a0:	08090003          	lb	zero,128(s2)
    a0a4:	0100                	addi	s0,sp,128
    a0a6:	0200                	addi	s0,sp,256
    a0a8:	0204                	addi	s1,sp,256
    a0aa:	00090003          	lb	zero,0(s2)
    a0ae:	0100                	addi	s0,sp,128
    a0b0:	0200                	addi	s0,sp,256
    a0b2:	0204                	addi	s1,sp,256
    a0b4:	04090003          	lb	zero,64(s2)
    a0b8:	0100                	addi	s0,sp,128
    a0ba:	0200                	addi	s0,sp,256
    a0bc:	0204                	addi	s1,sp,256
    a0be:	04090003          	lb	zero,64(s2)
    a0c2:	0100                	addi	s0,sp,128
    a0c4:	0200                	addi	s0,sp,256
    a0c6:	0204                	addi	s1,sp,256
    a0c8:	00090003          	lb	zero,0(s2)
    a0cc:	0100                	addi	s0,sp,128
    a0ce:	0200                	addi	s0,sp,256
    a0d0:	0204                	addi	s1,sp,256
    a0d2:	08090003          	lb	zero,128(s2)
    a0d6:	0100                	addi	s0,sp,128
    a0d8:	0200                	addi	s0,sp,256
    a0da:	0204                	addi	s1,sp,256
    a0dc:	00090003          	lb	zero,0(s2)
    a0e0:	0100                	addi	s0,sp,128
    a0e2:	0200                	addi	s0,sp,256
    a0e4:	0204                	addi	s1,sp,256
    a0e6:	04090003          	lb	zero,64(s2)
    a0ea:	0100                	addi	s0,sp,128
    a0ec:	0200                	addi	s0,sp,256
    a0ee:	0204                	addi	s1,sp,256
    a0f0:	10090003          	lb	zero,256(s2)
    a0f4:	0100                	addi	s0,sp,128
    a0f6:	0200                	addi	s0,sp,256
    a0f8:	0204                	addi	s1,sp,256
    a0fa:	00090003          	lb	zero,0(s2)
    a0fe:	0100                	addi	s0,sp,128
    a100:	0200                	addi	s0,sp,256
    a102:	0204                	addi	s1,sp,256
    a104:	00090003          	lb	zero,0(s2)
    a108:	0100                	addi	s0,sp,128
    a10a:	0200                	addi	s0,sp,256
    a10c:	0904                	addi	s1,sp,144
    a10e:	04090003          	lb	zero,64(s2)
    a112:	0100                	addi	s0,sp,128
    a114:	0200                	addi	s0,sp,256
    a116:	0b04                	addi	s1,sp,400
    a118:	04090003          	lb	zero,64(s2)
    a11c:	0100                	addi	s0,sp,128
    a11e:	0200                	addi	s0,sp,256
    a120:	0b04                	addi	s1,sp,400
    a122:	1c090003          	lb	zero,448(s2)
    a126:	0100                	addi	s0,sp,128
    a128:	0200                	addi	s0,sp,256
    a12a:	0b04                	addi	s1,sp,400
    a12c:	00090003          	lb	zero,0(s2)
    a130:	0100                	addi	s0,sp,128
    a132:	0200                	addi	s0,sp,256
    a134:	0b04                	addi	s1,sp,400
    a136:	00090003          	lb	zero,0(s2)
    a13a:	0100                	addi	s0,sp,128
    a13c:	0200                	addi	s0,sp,256
    a13e:	0b04                	addi	s1,sp,400
    a140:	00090003          	lb	zero,0(s2)
    a144:	0100                	addi	s0,sp,128
    a146:	0200                	addi	s0,sp,256
    a148:	0b04                	addi	s1,sp,400
    a14a:	00090003          	lb	zero,0(s2)
    a14e:	0100                	addi	s0,sp,128
    a150:	0200                	addi	s0,sp,256
    a152:	0b04                	addi	s1,sp,400
    a154:	00090003          	lb	zero,0(s2)
    a158:	0100                	addi	s0,sp,128
    a15a:	0200                	addi	s0,sp,256
    a15c:	0b04                	addi	s1,sp,400
    a15e:	00090003          	lb	zero,0(s2)
    a162:	0100                	addi	s0,sp,128
    a164:	0200                	addi	s0,sp,256
    a166:	0b04                	addi	s1,sp,400
    a168:	00090003          	lb	zero,0(s2)
    a16c:	0100                	addi	s0,sp,128
    a16e:	0200                	addi	s0,sp,256
    a170:	0b04                	addi	s1,sp,400
    a172:	00090003          	lb	zero,0(s2)
    a176:	0100                	addi	s0,sp,128
    a178:	0200                	addi	s0,sp,256
    a17a:	0b04                	addi	s1,sp,400
    a17c:	00090003          	lb	zero,0(s2)
    a180:	0100                	addi	s0,sp,128
    a182:	0200                	addi	s0,sp,256
    a184:	0b04                	addi	s1,sp,400
    a186:	00090003          	lb	zero,0(s2)
    a18a:	0100                	addi	s0,sp,128
    a18c:	0200                	addi	s0,sp,256
    a18e:	0b04                	addi	s1,sp,400
    a190:	04090003          	lb	zero,64(s2)
    a194:	0100                	addi	s0,sp,128
    a196:	0200                	addi	s0,sp,256
    a198:	0b04                	addi	s1,sp,400
    a19a:	04090003          	lb	zero,64(s2)
    a19e:	0100                	addi	s0,sp,128
    a1a0:	0200                	addi	s0,sp,256
    a1a2:	0b04                	addi	s1,sp,400
    a1a4:	04090003          	lb	zero,64(s2)
    a1a8:	0100                	addi	s0,sp,128
    a1aa:	0200                	addi	s0,sp,256
    a1ac:	0b04                	addi	s1,sp,400
    a1ae:	04090003          	lb	zero,64(s2)
    a1b2:	0100                	addi	s0,sp,128
    a1b4:	0200                	addi	s0,sp,256
    a1b6:	0b04                	addi	s1,sp,400
    a1b8:	00090003          	lb	zero,0(s2)
    a1bc:	0100                	addi	s0,sp,128
    a1be:	0200                	addi	s0,sp,256
    a1c0:	0b04                	addi	s1,sp,400
    a1c2:	08090003          	lb	zero,128(s2)
    a1c6:	0100                	addi	s0,sp,128
    a1c8:	0200                	addi	s0,sp,256
    a1ca:	0b04                	addi	s1,sp,400
    a1cc:	00090003          	lb	zero,0(s2)
    a1d0:	0100                	addi	s0,sp,128
    a1d2:	0200                	addi	s0,sp,256
    a1d4:	0b04                	addi	s1,sp,400
    a1d6:	04090003          	lb	zero,64(s2)
    a1da:	0100                	addi	s0,sp,128
    a1dc:	0200                	addi	s0,sp,256
    a1de:	0b04                	addi	s1,sp,400
    a1e0:	04090003          	lb	zero,64(s2)
    a1e4:	0100                	addi	s0,sp,128
    a1e6:	0200                	addi	s0,sp,256
    a1e8:	0b04                	addi	s1,sp,400
    a1ea:	00090003          	lb	zero,0(s2)
    a1ee:	0100                	addi	s0,sp,128
    a1f0:	0200                	addi	s0,sp,256
    a1f2:	0b04                	addi	s1,sp,400
    a1f4:	08090003          	lb	zero,128(s2)
    a1f8:	0100                	addi	s0,sp,128
    a1fa:	0200                	addi	s0,sp,256
    a1fc:	0b04                	addi	s1,sp,400
    a1fe:	00090003          	lb	zero,0(s2)
    a202:	0100                	addi	s0,sp,128
    a204:	0200                	addi	s0,sp,256
    a206:	0b04                	addi	s1,sp,400
    a208:	04090003          	lb	zero,64(s2)
    a20c:	0100                	addi	s0,sp,128
    a20e:	0200                	addi	s0,sp,256
    a210:	0b04                	addi	s1,sp,400
    a212:	04090003          	lb	zero,64(s2)
    a216:	0100                	addi	s0,sp,128
    a218:	0200                	addi	s0,sp,256
    a21a:	0b04                	addi	s1,sp,400
    a21c:	00090003          	lb	zero,0(s2)
    a220:	0100                	addi	s0,sp,128
    a222:	0200                	addi	s0,sp,256
    a224:	0b04                	addi	s1,sp,400
    a226:	08090003          	lb	zero,128(s2)
    a22a:	0100                	addi	s0,sp,128
    a22c:	0200                	addi	s0,sp,256
    a22e:	0b04                	addi	s1,sp,400
    a230:	00090003          	lb	zero,0(s2)
    a234:	0100                	addi	s0,sp,128
    a236:	0200                	addi	s0,sp,256
    a238:	0b04                	addi	s1,sp,400
    a23a:	04090003          	lb	zero,64(s2)
    a23e:	0100                	addi	s0,sp,128
    a240:	0200                	addi	s0,sp,256
    a242:	0b04                	addi	s1,sp,400
    a244:	10090003          	lb	zero,256(s2)
    a248:	0100                	addi	s0,sp,128
    a24a:	0200                	addi	s0,sp,256
    a24c:	0b04                	addi	s1,sp,400
    a24e:	00090003          	lb	zero,0(s2)
    a252:	0100                	addi	s0,sp,128
    a254:	0200                	addi	s0,sp,256
    a256:	0b04                	addi	s1,sp,400
    a258:	00090003          	lb	zero,0(s2)
    a25c:	0100                	addi	s0,sp,128
    a25e:	0200                	addi	s0,sp,256
    a260:	0c04                	addi	s1,sp,528
    a262:	04090003          	lb	zero,64(s2)
    a266:	0100                	addi	s0,sp,128
    a268:	0200                	addi	s0,sp,256
    a26a:	0e04                	addi	s1,sp,784
    a26c:	08090003          	lb	zero,128(s2)
    a270:	0100                	addi	s0,sp,128
    a272:	0200                	addi	s0,sp,256
    a274:	0e04                	addi	s1,sp,784
    a276:	28090003          	lb	zero,640(s2)
    a27a:	0100                	addi	s0,sp,128
    a27c:	0200                	addi	s0,sp,256
    a27e:	0e04                	addi	s1,sp,784
    a280:	04090003          	lb	zero,64(s2)
    a284:	0100                	addi	s0,sp,128
    a286:	0200                	addi	s0,sp,256
    a288:	0e04                	addi	s1,sp,784
    a28a:	00090003          	lb	zero,0(s2)
    a28e:	0100                	addi	s0,sp,128
    a290:	0200                	addi	s0,sp,256
    a292:	0e04                	addi	s1,sp,784
    a294:	00090003          	lb	zero,0(s2)
    a298:	0100                	addi	s0,sp,128
    a29a:	0200                	addi	s0,sp,256
    a29c:	0e04                	addi	s1,sp,784
    a29e:	00090003          	lb	zero,0(s2)
    a2a2:	0100                	addi	s0,sp,128
    a2a4:	0200                	addi	s0,sp,256
    a2a6:	0e04                	addi	s1,sp,784
    a2a8:	00090003          	lb	zero,0(s2)
    a2ac:	0100                	addi	s0,sp,128
    a2ae:	0200                	addi	s0,sp,256
    a2b0:	0e04                	addi	s1,sp,784
    a2b2:	00090003          	lb	zero,0(s2)
    a2b6:	0100                	addi	s0,sp,128
    a2b8:	0200                	addi	s0,sp,256
    a2ba:	0e04                	addi	s1,sp,784
    a2bc:	00090003          	lb	zero,0(s2)
    a2c0:	0100                	addi	s0,sp,128
    a2c2:	0200                	addi	s0,sp,256
    a2c4:	0e04                	addi	s1,sp,784
    a2c6:	00090003          	lb	zero,0(s2)
    a2ca:	0100                	addi	s0,sp,128
    a2cc:	0200                	addi	s0,sp,256
    a2ce:	0e04                	addi	s1,sp,784
    a2d0:	00090003          	lb	zero,0(s2)
    a2d4:	0100                	addi	s0,sp,128
    a2d6:	0200                	addi	s0,sp,256
    a2d8:	0e04                	addi	s1,sp,784
    a2da:	00090003          	lb	zero,0(s2)
    a2de:	0100                	addi	s0,sp,128
    a2e0:	0200                	addi	s0,sp,256
    a2e2:	0e04                	addi	s1,sp,784
    a2e4:	04090003          	lb	zero,64(s2)
    a2e8:	0100                	addi	s0,sp,128
    a2ea:	0200                	addi	s0,sp,256
    a2ec:	0e04                	addi	s1,sp,784
    a2ee:	04090003          	lb	zero,64(s2)
    a2f2:	0100                	addi	s0,sp,128
    a2f4:	0200                	addi	s0,sp,256
    a2f6:	0e04                	addi	s1,sp,784
    a2f8:	04090003          	lb	zero,64(s2)
    a2fc:	0100                	addi	s0,sp,128
    a2fe:	0200                	addi	s0,sp,256
    a300:	0e04                	addi	s1,sp,784
    a302:	04090003          	lb	zero,64(s2)
    a306:	0100                	addi	s0,sp,128
    a308:	0200                	addi	s0,sp,256
    a30a:	0e04                	addi	s1,sp,784
    a30c:	00090003          	lb	zero,0(s2)
    a310:	0100                	addi	s0,sp,128
    a312:	0200                	addi	s0,sp,256
    a314:	0e04                	addi	s1,sp,784
    a316:	08090003          	lb	zero,128(s2)
    a31a:	0100                	addi	s0,sp,128
    a31c:	0200                	addi	s0,sp,256
    a31e:	0e04                	addi	s1,sp,784
    a320:	00090003          	lb	zero,0(s2)
    a324:	0100                	addi	s0,sp,128
    a326:	0200                	addi	s0,sp,256
    a328:	0e04                	addi	s1,sp,784
    a32a:	04090003          	lb	zero,64(s2)
    a32e:	0100                	addi	s0,sp,128
    a330:	0200                	addi	s0,sp,256
    a332:	0e04                	addi	s1,sp,784
    a334:	04090003          	lb	zero,64(s2)
    a338:	0100                	addi	s0,sp,128
    a33a:	0200                	addi	s0,sp,256
    a33c:	0e04                	addi	s1,sp,784
    a33e:	00090003          	lb	zero,0(s2)
    a342:	0100                	addi	s0,sp,128
    a344:	0200                	addi	s0,sp,256
    a346:	0e04                	addi	s1,sp,784
    a348:	08090003          	lb	zero,128(s2)
    a34c:	0100                	addi	s0,sp,128
    a34e:	0200                	addi	s0,sp,256
    a350:	0e04                	addi	s1,sp,784
    a352:	00090003          	lb	zero,0(s2)
    a356:	0100                	addi	s0,sp,128
    a358:	0200                	addi	s0,sp,256
    a35a:	0e04                	addi	s1,sp,784
    a35c:	04090003          	lb	zero,64(s2)
    a360:	0100                	addi	s0,sp,128
    a362:	0200                	addi	s0,sp,256
    a364:	0e04                	addi	s1,sp,784
    a366:	04090003          	lb	zero,64(s2)
    a36a:	0100                	addi	s0,sp,128
    a36c:	0200                	addi	s0,sp,256
    a36e:	0e04                	addi	s1,sp,784
    a370:	00090003          	lb	zero,0(s2)
    a374:	0100                	addi	s0,sp,128
    a376:	0200                	addi	s0,sp,256
    a378:	0e04                	addi	s1,sp,784
    a37a:	08090003          	lb	zero,128(s2)
    a37e:	0100                	addi	s0,sp,128
    a380:	0200                	addi	s0,sp,256
    a382:	0e04                	addi	s1,sp,784
    a384:	00090003          	lb	zero,0(s2)
    a388:	0100                	addi	s0,sp,128
    a38a:	0200                	addi	s0,sp,256
    a38c:	0e04                	addi	s1,sp,784
    a38e:	04090003          	lb	zero,64(s2)
    a392:	0100                	addi	s0,sp,128
    a394:	0200                	addi	s0,sp,256
    a396:	0e04                	addi	s1,sp,784
    a398:	10090003          	lb	zero,256(s2)
    a39c:	0100                	addi	s0,sp,128
    a39e:	0200                	addi	s0,sp,256
    a3a0:	0e04                	addi	s1,sp,784
    a3a2:	00090003          	lb	zero,0(s2)
    a3a6:	0100                	addi	s0,sp,128
    a3a8:	0200                	addi	s0,sp,256
    a3aa:	0e04                	addi	s1,sp,784
    a3ac:	00090003          	lb	zero,0(s2)
    a3b0:	0100                	addi	s0,sp,128
    a3b2:	0200                	addi	s0,sp,256
    a3b4:	0f04                	addi	s1,sp,912
    a3b6:	04090003          	lb	zero,64(s2)
    a3ba:	0100                	addi	s0,sp,128
    a3bc:	0200                	addi	s0,sp,256
    a3be:	1104                	addi	s1,sp,160
    a3c0:	04090003          	lb	zero,64(s2)
    a3c4:	0100                	addi	s0,sp,128
    a3c6:	0200                	addi	s0,sp,256
    a3c8:	1104                	addi	s1,sp,160
    a3ca:	1c090003          	lb	zero,448(s2)
    a3ce:	0100                	addi	s0,sp,128
    a3d0:	0200                	addi	s0,sp,256
    a3d2:	1104                	addi	s1,sp,160
    a3d4:	04090003          	lb	zero,64(s2)
    a3d8:	0100                	addi	s0,sp,128
    a3da:	0200                	addi	s0,sp,256
    a3dc:	1104                	addi	s1,sp,160
    a3de:	00090003          	lb	zero,0(s2)
    a3e2:	0100                	addi	s0,sp,128
    a3e4:	0200                	addi	s0,sp,256
    a3e6:	1104                	addi	s1,sp,160
    a3e8:	00090003          	lb	zero,0(s2)
    a3ec:	0100                	addi	s0,sp,128
    a3ee:	0200                	addi	s0,sp,256
    a3f0:	1104                	addi	s1,sp,160
    a3f2:	00090003          	lb	zero,0(s2)
    a3f6:	0100                	addi	s0,sp,128
    a3f8:	0200                	addi	s0,sp,256
    a3fa:	1104                	addi	s1,sp,160
    a3fc:	00090003          	lb	zero,0(s2)
    a400:	0100                	addi	s0,sp,128
    a402:	0200                	addi	s0,sp,256
    a404:	1104                	addi	s1,sp,160
    a406:	00090003          	lb	zero,0(s2)
    a40a:	0100                	addi	s0,sp,128
    a40c:	0200                	addi	s0,sp,256
    a40e:	1104                	addi	s1,sp,160
    a410:	00090003          	lb	zero,0(s2)
    a414:	0100                	addi	s0,sp,128
    a416:	0200                	addi	s0,sp,256
    a418:	1104                	addi	s1,sp,160
    a41a:	00090003          	lb	zero,0(s2)
    a41e:	0100                	addi	s0,sp,128
    a420:	0200                	addi	s0,sp,256
    a422:	1104                	addi	s1,sp,160
    a424:	00090003          	lb	zero,0(s2)
    a428:	0100                	addi	s0,sp,128
    a42a:	0200                	addi	s0,sp,256
    a42c:	1104                	addi	s1,sp,160
    a42e:	00090003          	lb	zero,0(s2)
    a432:	0100                	addi	s0,sp,128
    a434:	0200                	addi	s0,sp,256
    a436:	1104                	addi	s1,sp,160
    a438:	04090003          	lb	zero,64(s2)
    a43c:	0100                	addi	s0,sp,128
    a43e:	0200                	addi	s0,sp,256
    a440:	1104                	addi	s1,sp,160
    a442:	04090003          	lb	zero,64(s2)
    a446:	0100                	addi	s0,sp,128
    a448:	0200                	addi	s0,sp,256
    a44a:	1104                	addi	s1,sp,160
    a44c:	04090003          	lb	zero,64(s2)
    a450:	0100                	addi	s0,sp,128
    a452:	0200                	addi	s0,sp,256
    a454:	1104                	addi	s1,sp,160
    a456:	04090003          	lb	zero,64(s2)
    a45a:	0100                	addi	s0,sp,128
    a45c:	0200                	addi	s0,sp,256
    a45e:	1104                	addi	s1,sp,160
    a460:	00090003          	lb	zero,0(s2)
    a464:	0100                	addi	s0,sp,128
    a466:	0200                	addi	s0,sp,256
    a468:	1104                	addi	s1,sp,160
    a46a:	08090003          	lb	zero,128(s2)
    a46e:	0100                	addi	s0,sp,128
    a470:	0200                	addi	s0,sp,256
    a472:	1104                	addi	s1,sp,160
    a474:	00090003          	lb	zero,0(s2)
    a478:	0100                	addi	s0,sp,128
    a47a:	0200                	addi	s0,sp,256
    a47c:	1104                	addi	s1,sp,160
    a47e:	04090003          	lb	zero,64(s2)
    a482:	0100                	addi	s0,sp,128
    a484:	0200                	addi	s0,sp,256
    a486:	1104                	addi	s1,sp,160
    a488:	04090003          	lb	zero,64(s2)
    a48c:	0100                	addi	s0,sp,128
    a48e:	0200                	addi	s0,sp,256
    a490:	1104                	addi	s1,sp,160
    a492:	00090003          	lb	zero,0(s2)
    a496:	0100                	addi	s0,sp,128
    a498:	0200                	addi	s0,sp,256
    a49a:	1104                	addi	s1,sp,160
    a49c:	08090003          	lb	zero,128(s2)
    a4a0:	0100                	addi	s0,sp,128
    a4a2:	0200                	addi	s0,sp,256
    a4a4:	1104                	addi	s1,sp,160
    a4a6:	00090003          	lb	zero,0(s2)
    a4aa:	0100                	addi	s0,sp,128
    a4ac:	0200                	addi	s0,sp,256
    a4ae:	1104                	addi	s1,sp,160
    a4b0:	04090003          	lb	zero,64(s2)
    a4b4:	0100                	addi	s0,sp,128
    a4b6:	0200                	addi	s0,sp,256
    a4b8:	1104                	addi	s1,sp,160
    a4ba:	04090003          	lb	zero,64(s2)
    a4be:	0100                	addi	s0,sp,128
    a4c0:	0200                	addi	s0,sp,256
    a4c2:	1104                	addi	s1,sp,160
    a4c4:	00090003          	lb	zero,0(s2)
    a4c8:	0100                	addi	s0,sp,128
    a4ca:	0200                	addi	s0,sp,256
    a4cc:	1104                	addi	s1,sp,160
    a4ce:	08090003          	lb	zero,128(s2)
    a4d2:	0100                	addi	s0,sp,128
    a4d4:	0200                	addi	s0,sp,256
    a4d6:	1104                	addi	s1,sp,160
    a4d8:	00090003          	lb	zero,0(s2)
    a4dc:	0100                	addi	s0,sp,128
    a4de:	0200                	addi	s0,sp,256
    a4e0:	1104                	addi	s1,sp,160
    a4e2:	04090003          	lb	zero,64(s2)
    a4e6:	0100                	addi	s0,sp,128
    a4e8:	0200                	addi	s0,sp,256
    a4ea:	1104                	addi	s1,sp,160
    a4ec:	10090003          	lb	zero,256(s2)
    a4f0:	0100                	addi	s0,sp,128
    a4f2:	0200                	addi	s0,sp,256
    a4f4:	1104                	addi	s1,sp,160
    a4f6:	00090003          	lb	zero,0(s2)
    a4fa:	0100                	addi	s0,sp,128
    a4fc:	0200                	addi	s0,sp,256
    a4fe:	1104                	addi	s1,sp,160
    a500:	00090003          	lb	zero,0(s2)
    a504:	0100                	addi	s0,sp,128
    a506:	0200                	addi	s0,sp,256
    a508:	1204                	addi	s1,sp,288
    a50a:	04090003          	lb	zero,64(s2)
    a50e:	0100                	addi	s0,sp,128
    a510:	0200                	addi	s0,sp,256
    a512:	1404                	addi	s1,sp,544
    a514:	04090003          	lb	zero,64(s2)
    a518:	0100                	addi	s0,sp,128
    a51a:	0200                	addi	s0,sp,256
    a51c:	1404                	addi	s1,sp,544
    a51e:	00090003          	lb	zero,0(s2)
    a522:	0100                	addi	s0,sp,128
    a524:	0200                	addi	s0,sp,256
    a526:	1404                	addi	s1,sp,544
    a528:	00090003          	lb	zero,0(s2)
    a52c:	0100                	addi	s0,sp,128
    a52e:	0200                	addi	s0,sp,256
    a530:	1404                	addi	s1,sp,544
    a532:	00090003          	lb	zero,0(s2)
    a536:	0100                	addi	s0,sp,128
    a538:	0200                	addi	s0,sp,256
    a53a:	1404                	addi	s1,sp,544
    a53c:	00090003          	lb	zero,0(s2)
    a540:	0100                	addi	s0,sp,128
    a542:	0200                	addi	s0,sp,256
    a544:	1404                	addi	s1,sp,544
    a546:	00090003          	lb	zero,0(s2)
    a54a:	0100                	addi	s0,sp,128
    a54c:	0200                	addi	s0,sp,256
    a54e:	1404                	addi	s1,sp,544
    a550:	18090003          	lb	zero,384(s2)
    a554:	0100                	addi	s0,sp,128
    a556:	0200                	addi	s0,sp,256
    a558:	1404                	addi	s1,sp,544
    a55a:	08090003          	lb	zero,128(s2)
    a55e:	0100                	addi	s0,sp,128
    a560:	0200                	addi	s0,sp,256
    a562:	1404                	addi	s1,sp,544
    a564:	04090003          	lb	zero,64(s2)
    a568:	0100                	addi	s0,sp,128
    a56a:	0200                	addi	s0,sp,256
    a56c:	1404                	addi	s1,sp,544
    a56e:	00090003          	lb	zero,0(s2)
    a572:	0100                	addi	s0,sp,128
    a574:	0200                	addi	s0,sp,256
    a576:	1404                	addi	s1,sp,544
    a578:	04090003          	lb	zero,64(s2)
    a57c:	0100                	addi	s0,sp,128
    a57e:	0200                	addi	s0,sp,256
    a580:	1404                	addi	s1,sp,544
    a582:	00090003          	lb	zero,0(s2)
    a586:	0100                	addi	s0,sp,128
    a588:	0200                	addi	s0,sp,256
    a58a:	1404                	addi	s1,sp,544
    a58c:	00090003          	lb	zero,0(s2)
    a590:	0100                	addi	s0,sp,128
    a592:	0200                	addi	s0,sp,256
    a594:	1404                	addi	s1,sp,544
    a596:	00090003          	lb	zero,0(s2)
    a59a:	0100                	addi	s0,sp,128
    a59c:	0200                	addi	s0,sp,256
    a59e:	1404                	addi	s1,sp,544
    a5a0:	00090003          	lb	zero,0(s2)
    a5a4:	0100                	addi	s0,sp,128
    a5a6:	0200                	addi	s0,sp,256
    a5a8:	1404                	addi	s1,sp,544
    a5aa:	00090003          	lb	zero,0(s2)
    a5ae:	0100                	addi	s0,sp,128
    a5b0:	0200                	addi	s0,sp,256
    a5b2:	1404                	addi	s1,sp,544
    a5b4:	04090003          	lb	zero,64(s2)
    a5b8:	0100                	addi	s0,sp,128
    a5ba:	0200                	addi	s0,sp,256
    a5bc:	1404                	addi	s1,sp,544
    a5be:	04090003          	lb	zero,64(s2)
    a5c2:	0100                	addi	s0,sp,128
    a5c4:	0200                	addi	s0,sp,256
    a5c6:	1404                	addi	s1,sp,544
    a5c8:	04090003          	lb	zero,64(s2)
    a5cc:	0100                	addi	s0,sp,128
    a5ce:	0200                	addi	s0,sp,256
    a5d0:	1404                	addi	s1,sp,544
    a5d2:	00090003          	lb	zero,0(s2)
    a5d6:	0100                	addi	s0,sp,128
    a5d8:	0200                	addi	s0,sp,256
    a5da:	1404                	addi	s1,sp,544
    a5dc:	04090003          	lb	zero,64(s2)
    a5e0:	0100                	addi	s0,sp,128
    a5e2:	0200                	addi	s0,sp,256
    a5e4:	1404                	addi	s1,sp,544
    a5e6:	00090003          	lb	zero,0(s2)
    a5ea:	0100                	addi	s0,sp,128
    a5ec:	0200                	addi	s0,sp,256
    a5ee:	1404                	addi	s1,sp,544
    a5f0:	00090003          	lb	zero,0(s2)
    a5f4:	0100                	addi	s0,sp,128
    a5f6:	0200                	addi	s0,sp,256
    a5f8:	1404                	addi	s1,sp,544
    a5fa:	00090003          	lb	zero,0(s2)
    a5fe:	0100                	addi	s0,sp,128
    a600:	0200                	addi	s0,sp,256
    a602:	1404                	addi	s1,sp,544
    a604:	00090003          	lb	zero,0(s2)
    a608:	0100                	addi	s0,sp,128
    a60a:	0200                	addi	s0,sp,256
    a60c:	1404                	addi	s1,sp,544
    a60e:	00090003          	lb	zero,0(s2)
    a612:	0100                	addi	s0,sp,128
    a614:	0200                	addi	s0,sp,256
    a616:	1404                	addi	s1,sp,544
    a618:	00090003          	lb	zero,0(s2)
    a61c:	0100                	addi	s0,sp,128
    a61e:	0200                	addi	s0,sp,256
    a620:	1404                	addi	s1,sp,544
    a622:	00090003          	lb	zero,0(s2)
    a626:	0100                	addi	s0,sp,128
    a628:	0200                	addi	s0,sp,256
    a62a:	1404                	addi	s1,sp,544
    a62c:	00090003          	lb	zero,0(s2)
    a630:	0100                	addi	s0,sp,128
    a632:	0200                	addi	s0,sp,256
    a634:	1404                	addi	s1,sp,544
    a636:	00090003          	lb	zero,0(s2)
    a63a:	0100                	addi	s0,sp,128
    a63c:	0200                	addi	s0,sp,256
    a63e:	1404                	addi	s1,sp,544
    a640:	00090003          	lb	zero,0(s2)
    a644:	0100                	addi	s0,sp,128
    a646:	0200                	addi	s0,sp,256
    a648:	1404                	addi	s1,sp,544
    a64a:	00090003          	lb	zero,0(s2)
    a64e:	0100                	addi	s0,sp,128
    a650:	0200                	addi	s0,sp,256
    a652:	1404                	addi	s1,sp,544
    a654:	00090003          	lb	zero,0(s2)
    a658:	0100                	addi	s0,sp,128
    a65a:	0200                	addi	s0,sp,256
    a65c:	1404                	addi	s1,sp,544
    a65e:	00090003          	lb	zero,0(s2)
    a662:	0100                	addi	s0,sp,128
    a664:	0200                	addi	s0,sp,256
    a666:	1404                	addi	s1,sp,544
    a668:	00090003          	lb	zero,0(s2)
    a66c:	0100                	addi	s0,sp,128
    a66e:	0200                	addi	s0,sp,256
    a670:	1404                	addi	s1,sp,544
    a672:	00090003          	lb	zero,0(s2)
    a676:	0100                	addi	s0,sp,128
    a678:	0200                	addi	s0,sp,256
    a67a:	1404                	addi	s1,sp,544
    a67c:	00090003          	lb	zero,0(s2)
    a680:	0100                	addi	s0,sp,128
    a682:	0200                	addi	s0,sp,256
    a684:	1404                	addi	s1,sp,544
    a686:	00090003          	lb	zero,0(s2)
    a68a:	0100                	addi	s0,sp,128
    a68c:	0200                	addi	s0,sp,256
    a68e:	1404                	addi	s1,sp,544
    a690:	00090003          	lb	zero,0(s2)
    a694:	0100                	addi	s0,sp,128
    a696:	0200                	addi	s0,sp,256
    a698:	1404                	addi	s1,sp,544
    a69a:	00090003          	lb	zero,0(s2)
    a69e:	0100                	addi	s0,sp,128
    a6a0:	0200                	addi	s0,sp,256
    a6a2:	1404                	addi	s1,sp,544
    a6a4:	00090003          	lb	zero,0(s2)
    a6a8:	0100                	addi	s0,sp,128
    a6aa:	0200                	addi	s0,sp,256
    a6ac:	1404                	addi	s1,sp,544
    a6ae:	00090003          	lb	zero,0(s2)
    a6b2:	0100                	addi	s0,sp,128
    a6b4:	0200                	addi	s0,sp,256
    a6b6:	1404                	addi	s1,sp,544
    a6b8:	00090003          	lb	zero,0(s2)
    a6bc:	0100                	addi	s0,sp,128
    a6be:	0200                	addi	s0,sp,256
    a6c0:	1404                	addi	s1,sp,544
    a6c2:	00090003          	lb	zero,0(s2)
    a6c6:	0100                	addi	s0,sp,128
    a6c8:	0200                	addi	s0,sp,256
    a6ca:	1404                	addi	s1,sp,544
    a6cc:	00090003          	lb	zero,0(s2)
    a6d0:	0100                	addi	s0,sp,128
    a6d2:	0200                	addi	s0,sp,256
    a6d4:	1404                	addi	s1,sp,544
    a6d6:	00090003          	lb	zero,0(s2)
    a6da:	0100                	addi	s0,sp,128
    a6dc:	0200                	addi	s0,sp,256
    a6de:	1404                	addi	s1,sp,544
    a6e0:	34090003          	lb	zero,832(s2)
    a6e4:	0100                	addi	s0,sp,128
    a6e6:	0200                	addi	s0,sp,256
    a6e8:	1404                	addi	s1,sp,544
    a6ea:	00090003          	lb	zero,0(s2)
    a6ee:	0100                	addi	s0,sp,128
    a6f0:	0200                	addi	s0,sp,256
    a6f2:	1404                	addi	s1,sp,544
    a6f4:	00090003          	lb	zero,0(s2)
    a6f8:	0100                	addi	s0,sp,128
    a6fa:	0200                	addi	s0,sp,256
    a6fc:	1404                	addi	s1,sp,544
    a6fe:	00090003          	lb	zero,0(s2)
    a702:	0100                	addi	s0,sp,128
    a704:	0200                	addi	s0,sp,256
    a706:	1404                	addi	s1,sp,544
    a708:	00090003          	lb	zero,0(s2)
    a70c:	0100                	addi	s0,sp,128
    a70e:	0200                	addi	s0,sp,256
    a710:	1404                	addi	s1,sp,544
    a712:	00090003          	lb	zero,0(s2)
    a716:	0100                	addi	s0,sp,128
    a718:	0200                	addi	s0,sp,256
    a71a:	1404                	addi	s1,sp,544
    a71c:	00090003          	lb	zero,0(s2)
    a720:	0100                	addi	s0,sp,128
    a722:	0200                	addi	s0,sp,256
    a724:	1404                	addi	s1,sp,544
    a726:	1c090003          	lb	zero,448(s2)
    a72a:	0100                	addi	s0,sp,128
    a72c:	0200                	addi	s0,sp,256
    a72e:	1404                	addi	s1,sp,544
    a730:	00090003          	lb	zero,0(s2)
    a734:	0100                	addi	s0,sp,128
    a736:	0200                	addi	s0,sp,256
    a738:	1404                	addi	s1,sp,544
    a73a:	00090003          	lb	zero,0(s2)
    a73e:	0100                	addi	s0,sp,128
    a740:	0200                	addi	s0,sp,256
    a742:	1404                	addi	s1,sp,544
    a744:	00090003          	lb	zero,0(s2)
    a748:	0100                	addi	s0,sp,128
    a74a:	0200                	addi	s0,sp,256
    a74c:	1404                	addi	s1,sp,544
    a74e:	00090003          	lb	zero,0(s2)
    a752:	0100                	addi	s0,sp,128
    a754:	0200                	addi	s0,sp,256
    a756:	2604                	fld	fs1,8(a2)
    a758:	0c090003          	lb	zero,192(s2)
    a75c:	0100                	addi	s0,sp,128
    a75e:	0200                	addi	s0,sp,256
    a760:	2604                	fld	fs1,8(a2)
    a762:	00090003          	lb	zero,0(s2)
    a766:	0100                	addi	s0,sp,128
    a768:	0200                	addi	s0,sp,256
    a76a:	2604                	fld	fs1,8(a2)
    a76c:	14090003          	lb	zero,320(s2)
    a770:	0100                	addi	s0,sp,128
    a772:	0200                	addi	s0,sp,256
    a774:	0204                	addi	s1,sp,256
    a776:	04090103          	lb	sp,64(s2)
    a77a:	0100                	addi	s0,sp,128
    a77c:	0200                	addi	s0,sp,256
    a77e:	0204                	addi	s1,sp,256
    a780:	04090003          	lb	zero,64(s2)
    a784:	0100                	addi	s0,sp,128
    a786:	0200                	addi	s0,sp,256
    a788:	0604                	addi	s1,sp,768
    a78a:	04090003          	lb	zero,64(s2)
    a78e:	0100                	addi	s0,sp,128
    a790:	0200                	addi	s0,sp,256
    a792:	0604                	addi	s1,sp,768
    a794:	00090003          	lb	zero,0(s2)
    a798:	0100                	addi	s0,sp,128
    a79a:	0200                	addi	s0,sp,256
    a79c:	0804                	addi	s1,sp,16
    a79e:	08090003          	lb	zero,128(s2)
    a7a2:	0100                	addi	s0,sp,128
    a7a4:	0200                	addi	s0,sp,256
    a7a6:	0804                	addi	s1,sp,16
    a7a8:	00090003          	lb	zero,0(s2)
    a7ac:	0100                	addi	s0,sp,128
    a7ae:	0200                	addi	s0,sp,256
    a7b0:	0804                	addi	s1,sp,16
    a7b2:	00090003          	lb	zero,0(s2)
    a7b6:	0100                	addi	s0,sp,128
    a7b8:	0200                	addi	s0,sp,256
    a7ba:	0804                	addi	s1,sp,16
    a7bc:	00090003          	lb	zero,0(s2)
    a7c0:	0100                	addi	s0,sp,128
    a7c2:	0200                	addi	s0,sp,256
    a7c4:	0a04                	addi	s1,sp,272
    a7c6:	0c090003          	lb	zero,192(s2)
    a7ca:	0100                	addi	s0,sp,128
    a7cc:	0200                	addi	s0,sp,256
    a7ce:	0a04                	addi	s1,sp,272
    a7d0:	00090003          	lb	zero,0(s2)
    a7d4:	0100                	addi	s0,sp,128
    a7d6:	0200                	addi	s0,sp,256
    a7d8:	0a04                	addi	s1,sp,272
    a7da:	00090003          	lb	zero,0(s2)
    a7de:	0100                	addi	s0,sp,128
    a7e0:	0200                	addi	s0,sp,256
    a7e2:	0a04                	addi	s1,sp,272
    a7e4:	04090003          	lb	zero,64(s2)
    a7e8:	0100                	addi	s0,sp,128
    a7ea:	0200                	addi	s0,sp,256
    a7ec:	0a04                	addi	s1,sp,272
    a7ee:	08090003          	lb	zero,128(s2)
    a7f2:	0100                	addi	s0,sp,128
    a7f4:	0200                	addi	s0,sp,256
    a7f6:	0904                	addi	s1,sp,144
    a7f8:	04090003          	lb	zero,64(s2)
    a7fc:	0100                	addi	s0,sp,128
    a7fe:	0200                	addi	s0,sp,256
    a800:	0904                	addi	s1,sp,144
    a802:	00090003          	lb	zero,0(s2)
    a806:	0100                	addi	s0,sp,128
    a808:	0200                	addi	s0,sp,256
    a80a:	1804                	addi	s1,sp,48
    a80c:	0c090003          	lb	zero,192(s2)
    a810:	0100                	addi	s0,sp,128
    a812:	0200                	addi	s0,sp,256
    a814:	1804                	addi	s1,sp,48
    a816:	0c090003          	lb	zero,192(s2)
    a81a:	0100                	addi	s0,sp,128
    a81c:	0200                	addi	s0,sp,256
    a81e:	1a04                	addi	s1,sp,304
    a820:	04090003          	lb	zero,64(s2)
    a824:	0100                	addi	s0,sp,128
    a826:	0200                	addi	s0,sp,256
    a828:	1a04                	addi	s1,sp,304
    a82a:	00090003          	lb	zero,0(s2)
    a82e:	0100                	addi	s0,sp,128
    a830:	0200                	addi	s0,sp,256
    a832:	1a04                	addi	s1,sp,304
    a834:	00090003          	lb	zero,0(s2)
    a838:	0100                	addi	s0,sp,128
    a83a:	0200                	addi	s0,sp,256
    a83c:	1a04                	addi	s1,sp,304
    a83e:	00090003          	lb	zero,0(s2)
    a842:	0100                	addi	s0,sp,128
    a844:	0306                	slli	t1,t1,0x1
    a846:	0900                	addi	s0,sp,144
    a848:	0008                	0x8
    a84a:	0001                	nop
    a84c:	0402                	c.slli64	s0
    a84e:	00030677          	0x30677
    a852:	1009                	c.nop	-30
    a854:	0100                	addi	s0,sp,128
    a856:	0200                	addi	s0,sp,256
    a858:	7704                	flw	fs1,40(a4)
    a85a:	00090003          	lb	zero,0(s2)
    a85e:	0100                	addi	s0,sp,128
    a860:	0200                	addi	s0,sp,256
    a862:	7704                	flw	fs1,40(a4)
    a864:	00090003          	lb	zero,0(s2)
    a868:	0100                	addi	s0,sp,128
    a86a:	0200                	addi	s0,sp,256
    a86c:	7704                	flw	fs1,40(a4)
    a86e:	00090003          	lb	zero,0(s2)
    a872:	0100                	addi	s0,sp,128
    a874:	0200                	addi	s0,sp,256
    a876:	7704                	flw	fs1,40(a4)
    a878:	00090003          	lb	zero,0(s2)
    a87c:	0100                	addi	s0,sp,128
    a87e:	0200                	addi	s0,sp,256
    a880:	7704                	flw	fs1,40(a4)
    a882:	00090003          	lb	zero,0(s2)
    a886:	0100                	addi	s0,sp,128
    a888:	0200                	addi	s0,sp,256
    a88a:	7704                	flw	fs1,40(a4)
    a88c:	00090003          	lb	zero,0(s2)
    a890:	0100                	addi	s0,sp,128
    a892:	0200                	addi	s0,sp,256
    a894:	7704                	flw	fs1,40(a4)
    a896:	00090003          	lb	zero,0(s2)
    a89a:	0100                	addi	s0,sp,128
    a89c:	0105                	addi	sp,sp,1
    a89e:	0200                	addi	s0,sp,256
    a8a0:	7704                	flw	fs1,40(a4)
    a8a2:	0306                	slli	t1,t1,0x1
    a8a4:	0904                	addi	s1,sp,144
    a8a6:	001c                	0x1c
    a8a8:	0501                	addi	a0,a0,0
    a8aa:	04020003          	lb	zero,64(tp) # 1a040 <RAM_SIZE+0xa040>
    a8ae:	097c0377          	0x97c0377
    a8b2:	0004                	0x4
    a8b4:	0001                	nop
    a8b6:	0402                	c.slli64	s0
    a8b8:	00030677          	0x30677
    a8bc:	0409                	addi	s0,s0,2
    a8be:	0100                	addi	s0,sp,128
    a8c0:	0200                	addi	s0,sp,256
    a8c2:	7704                	flw	fs1,40(a4)
    a8c4:	00090003          	lb	zero,0(s2)
    a8c8:	0100                	addi	s0,sp,128
    a8ca:	0200                	addi	s0,sp,256
    a8cc:	7704                	flw	fs1,40(a4)
    a8ce:	00090103          	lb	sp,0(s2)
    a8d2:	0100                	addi	s0,sp,128
    a8d4:	0200                	addi	s0,sp,256
    a8d6:	7704                	flw	fs1,40(a4)
    a8d8:	00090003          	lb	zero,0(s2)
    a8dc:	0100                	addi	s0,sp,128
    a8de:	0200                	addi	s0,sp,256
    a8e0:	7704                	flw	fs1,40(a4)
    a8e2:	00090003          	lb	zero,0(s2)
    a8e6:	0100                	addi	s0,sp,128
    a8e8:	0200                	addi	s0,sp,256
    a8ea:	7704                	flw	fs1,40(a4)
    a8ec:	00090203          	lb	tp,0(s2)
    a8f0:	0100                	addi	s0,sp,128
    a8f2:	0105                	addi	sp,sp,1
    a8f4:	0200                	addi	s0,sp,256
    a8f6:	7704                	flw	fs1,40(a4)
    a8f8:	0306                	slli	t1,t1,0x1
    a8fa:	0901                	addi	s2,s2,0
    a8fc:	0000                	unimp
    a8fe:	0501                	addi	a0,a0,0
    a900:	04020003          	lb	zero,64(tp) # 40 <_start+0x30>
    a904:	09790307          	vlse8.v	v6,(s2),s7,v0.t
    a908:	0030                	addi	a2,sp,8
    a90a:	0001                	nop
    a90c:	0402                	c.slli64	s0
    a90e:	02030607          	vle8.v	v12,(t1)
    a912:	0409                	addi	s0,s0,2
    a914:	0100                	addi	s0,sp,128
    a916:	0200                	addi	s0,sp,256
    a918:	2f04                	fld	fs1,24(a4)
    a91a:	0c090003          	lb	zero,192(s2)
    a91e:	0100                	addi	s0,sp,128
    a920:	0200                	addi	s0,sp,256
    a922:	2f04                	fld	fs1,24(a4)
    a924:	00090103          	lb	sp,0(s2)
    a928:	0100                	addi	s0,sp,128
    a92a:	0200                	addi	s0,sp,256
    a92c:	2f04                	fld	fs1,24(a4)
    a92e:	00090003          	lb	zero,0(s2)
    a932:	0100                	addi	s0,sp,128
    a934:	0200                	addi	s0,sp,256
    a936:	2f04                	fld	fs1,24(a4)
    a938:	00090003          	lb	zero,0(s2)
    a93c:	0100                	addi	s0,sp,128
    a93e:	0306                	slli	t1,t1,0x1
    a940:	0900                	addi	s0,sp,144
    a942:	0008                	0x8
    a944:	0001                	nop
    a946:	0402                	c.slli64	s0
    a948:	0304                	addi	s1,sp,384
    a94a:	097e                	slli	s2,s2,0x1f
    a94c:	001c                	0x1c
    a94e:	0001                	nop
    a950:	0402                	c.slli64	s0
    a952:	0604                	addi	s1,sp,768
    a954:	04090103          	lb	sp,64(s2)
    a958:	0100                	addi	s0,sp,128
    a95a:	0306                	slli	t1,t1,0x1
    a95c:	0900                	addi	s0,sp,144
    a95e:	0004                	0x4
    a960:	0001                	nop
    a962:	0402                	c.slli64	s0
    a964:	0103063b          	0x103063b
    a968:	0809                	addi	a6,a6,2
    a96a:	0100                	addi	s0,sp,128
    a96c:	0200                	addi	s0,sp,256
    a96e:	3b04                	fld	fs1,48(a4)
    a970:	00090003          	lb	zero,0(s2)
    a974:	0100                	addi	s0,sp,128
    a976:	0200                	addi	s0,sp,256
    a978:	3b04                	fld	fs1,48(a4)
    a97a:	00090003          	lb	zero,0(s2)
    a97e:	0100                	addi	s0,sp,128
    a980:	0200                	addi	s0,sp,256
    a982:	3b04                	fld	fs1,48(a4)
    a984:	08090003          	lb	zero,128(s2)
    a988:	0100                	addi	s0,sp,128
    a98a:	0200                	addi	s0,sp,256
    a98c:	3c04                	fld	fs1,56(s0)
    a98e:	08090003          	lb	zero,128(s2)
    a992:	0100                	addi	s0,sp,128
    a994:	0200                	addi	s0,sp,256
    a996:	3e04                	fld	fs1,56(a2)
    a998:	08090003          	lb	zero,128(s2)
    a99c:	0100                	addi	s0,sp,128
    a99e:	0200                	addi	s0,sp,256
    a9a0:	3e04                	fld	fs1,56(a2)
    a9a2:	1c090003          	lb	zero,448(s2)
    a9a6:	0100                	addi	s0,sp,128
    a9a8:	0200                	addi	s0,sp,256
    a9aa:	4b04                	lw	s1,16(a4)
    a9ac:	04090003          	lb	zero,64(s2)
    a9b0:	0100                	addi	s0,sp,128
    a9b2:	0200                	addi	s0,sp,256
    a9b4:	4b04                	lw	s1,16(a4)
    a9b6:	00090003          	lb	zero,0(s2)
    a9ba:	0100                	addi	s0,sp,128
    a9bc:	0200                	addi	s0,sp,256
    a9be:	4c04                	lw	s1,24(s0)
    a9c0:	08090003          	lb	zero,128(s2)
    a9c4:	0100                	addi	s0,sp,128
    a9c6:	0200                	addi	s0,sp,256
    a9c8:	4c04                	lw	s1,24(s0)
    a9ca:	00090003          	lb	zero,0(s2)
    a9ce:	0100                	addi	s0,sp,128
    a9d0:	0200                	addi	s0,sp,256
    a9d2:	4c04                	lw	s1,24(s0)
    a9d4:	00090003          	lb	zero,0(s2)
    a9d8:	0100                	addi	s0,sp,128
    a9da:	0200                	addi	s0,sp,256
    a9dc:	4c04                	lw	s1,24(s0)
    a9de:	00090003          	lb	zero,0(s2)
    a9e2:	0100                	addi	s0,sp,128
    a9e4:	0200                	addi	s0,sp,256
    a9e6:	4e04                	lw	s1,24(a2)
    a9e8:	0c090003          	lb	zero,192(s2)
    a9ec:	0100                	addi	s0,sp,128
    a9ee:	0200                	addi	s0,sp,256
    a9f0:	4e04                	lw	s1,24(a2)
    a9f2:	00090003          	lb	zero,0(s2)
    a9f6:	0100                	addi	s0,sp,128
    a9f8:	0200                	addi	s0,sp,256
    a9fa:	4e04                	lw	s1,24(a2)
    a9fc:	00090003          	lb	zero,0(s2)
    aa00:	0100                	addi	s0,sp,128
    aa02:	0200                	addi	s0,sp,256
    aa04:	4e04                	lw	s1,24(a2)
    aa06:	04090003          	lb	zero,64(s2)
    aa0a:	0100                	addi	s0,sp,128
    aa0c:	0200                	addi	s0,sp,256
    aa0e:	4e04                	lw	s1,24(a2)
    aa10:	08090003          	lb	zero,128(s2)
    aa14:	0100                	addi	s0,sp,128
    aa16:	0200                	addi	s0,sp,256
    aa18:	4d04                	lw	s1,24(a0)
    aa1a:	04090003          	lb	zero,64(s2)
    aa1e:	0100                	addi	s0,sp,128
    aa20:	0200                	addi	s0,sp,256
    aa22:	4d04                	lw	s1,24(a0)
    aa24:	00090003          	lb	zero,0(s2)
    aa28:	0100                	addi	s0,sp,128
    aa2a:	0200                	addi	s0,sp,256
    aa2c:	5d04                	lw	s1,56(a0)
    aa2e:	0c090003          	lb	zero,192(s2)
    aa32:	0100                	addi	s0,sp,128
    aa34:	0200                	addi	s0,sp,256
    aa36:	5d04                	lw	s1,56(a0)
    aa38:	00090003          	lb	zero,0(s2)
    aa3c:	0100                	addi	s0,sp,128
    aa3e:	0200                	addi	s0,sp,256
    aa40:	5d04                	lw	s1,56(a0)
    aa42:	00090003          	lb	zero,0(s2)
    aa46:	0100                	addi	s0,sp,128
    aa48:	0200                	addi	s0,sp,256
    aa4a:	5d04                	lw	s1,56(a0)
    aa4c:	0c090003          	lb	zero,192(s2)
    aa50:	0100                	addi	s0,sp,128
    aa52:	0306                	slli	t1,t1,0x1
    aa54:	0900                	addi	s0,sp,144
    aa56:	0004                	0x4
    aa58:	0001                	nop
    aa5a:	0402                	c.slli64	s0
    aa5c:	0003063f 01000809 	0x10008090003063f
    aa64:	0200                	addi	s0,sp,256
    aa66:	4704                	lw	s1,8(a4)
    aa68:	0306                	slli	t1,t1,0x1
    aa6a:	0900                	addi	s0,sp,144
    aa6c:	0018                	0x18
    aa6e:	0001                	nop
    aa70:	0402                	c.slli64	s0
    aa72:	034a                	slli	t1,t1,0x12
    aa74:	0900                	addi	s0,sp,144
    aa76:	0008                	0x8
    aa78:	0001                	nop
    aa7a:	0402                	c.slli64	s0
    aa7c:	064a                	slli	a2,a2,0x12
    aa7e:	0c090003          	lb	zero,192(s2)
    aa82:	0100                	addi	s0,sp,128
    aa84:	0306                	slli	t1,t1,0x1
    aa86:	0900                	addi	s0,sp,144
    aa88:	0008                	0x8
    aa8a:	0901                	addi	s2,s2,0
    aa8c:	0034                	addi	a3,sp,8
    aa8e:	0100                	addi	s0,sp,128
    aa90:	0e01                	addi	t3,t3,0
    aa92:	0002                	c.slli64	zero
    aa94:	0300                	addi	s0,sp,384
    aa96:	6100                	flw	fs0,0(a0)
    aa98:	0000                	unimp
    aa9a:	0100                	addi	s0,sp,128
    aa9c:	fb01                	bnez	a4,a9ac <__stack_top+0x91c>
    aa9e:	0d0e                	slli	s10,s10,0x3
    aaa0:	0100                	addi	s0,sp,128
    aaa2:	0101                	addi	sp,sp,0
    aaa4:	0001                	nop
    aaa6:	0000                	unimp
    aaa8:	0001                	nop
    aaaa:	0100                	addi	s0,sp,128
    aaac:	2e2e                	fld	ft8,200(sp)
    aaae:	2f2e2e2f          	0x2f2e2e2f
    aab2:	2e2e                	fld	ft8,200(sp)
    aab4:	2f2e2e2f          	0x2f2e2e2f
    aab8:	2e2e                	fld	ft8,200(sp)
    aaba:	7369722f          	0x7369722f
    aabe:	672d7663          	bgeu	s10,s2,b12a <__stack_top+0x109a>
    aac2:	6c2f6363          	bltu	t5,sp,b188 <__stack_top+0x10f8>
    aac6:	6269                	lui	tp,0x1a
    aac8:	2f636367          	0x2f636367
    aacc:	74666f73          	csrrsi	t5,0x746,12
    aad0:	662d                	lui	a2,0xb
    aad2:	0070                	addi	a2,sp,12
    aad4:	6600                	flw	fs0,8(a2)
    aad6:	7869                	lui	a6,0xffffa
    aad8:	6664                	flw	fs1,76(a2)
    aada:	632e6973          	csrrsi	s2,0x632,28
    aade:	0100                	addi	s0,sp,128
    aae0:	0000                	unimp
    aae2:	74666f73          	csrrsi	t5,0x746,12
    aae6:	662d                	lui	a2,0xb
    aae8:	2e70                	fld	fa2,216(a2)
    aaea:	0068                	addi	a0,sp,12
    aaec:	0001                	nop
    aaee:	6400                	flw	fs0,8(s0)
    aaf0:	6c62756f          	jal	a0,321b6 <RAM_SIZE+0x221b6>
    aaf4:	2e65                	jal	aeac <__stack_top+0xe1c>
    aaf6:	0068                	addi	a0,sp,12
    aaf8:	0001                	nop
    aafa:	0000                	unimp
    aafc:	0105                	addi	sp,sp,1
    aafe:	0500                	addi	s0,sp,640
    ab00:	b002                	fsd	ft0,32(sp)
    ab02:	0051                	c.nop	20
    ab04:	0300                	addi	s0,sp,384
    ab06:	03050123          	sb	a6,34(a0)
    ab0a:	00090103          	lb	sp,0(s2)
    ab0e:	0100                	addi	s0,sp,128
    ab10:	00090003          	lb	zero,0(s2)
    ab14:	0100                	addi	s0,sp,128
    ab16:	0d05                	addi	s10,s10,1
    ab18:	00090003          	lb	zero,0(s2)
    ab1c:	0100                	addi	s0,sp,128
    ab1e:	0305                	addi	t1,t1,1
    ab20:	00090103          	lb	sp,0(s2)
    ab24:	0100                	addi	s0,sp,128
    ab26:	00090003          	lb	zero,0(s2)
    ab2a:	0100                	addi	s0,sp,128
    ab2c:	00090003          	lb	zero,0(s2)
    ab30:	0100                	addi	s0,sp,128
    ab32:	00090003          	lb	zero,0(s2)
    ab36:	0100                	addi	s0,sp,128
    ab38:	00090103          	lb	sp,0(s2)
    ab3c:	0100                	addi	s0,sp,128
    ab3e:	00090203          	lb	tp,0(s2)
    ab42:	0100                	addi	s0,sp,128
    ab44:	00090103          	lb	sp,0(s2)
    ab48:	0100                	addi	s0,sp,128
    ab4a:	00090003          	lb	zero,0(s2)
    ab4e:	0100                	addi	s0,sp,128
    ab50:	00090003          	lb	zero,0(s2)
    ab54:	0100                	addi	s0,sp,128
    ab56:	00090003          	lb	zero,0(s2)
    ab5a:	0100                	addi	s0,sp,128
    ab5c:	00090003          	lb	zero,0(s2)
    ab60:	0100                	addi	s0,sp,128
    ab62:	0306                	slli	t1,t1,0x1
    ab64:	0901                	addi	s2,s2,0
    ab66:	0010                	0x10
    ab68:	0301                	addi	t1,t1,0
    ab6a:	097f                	0x97f
    ab6c:	0004                	0x4
    ab6e:	0601                	addi	a2,a2,0
    ab70:	04090003          	lb	zero,64(s2)
    ab74:	0100                	addi	s0,sp,128
    ab76:	00090003          	lb	zero,0(s2)
    ab7a:	0100                	addi	s0,sp,128
    ab7c:	04090003          	lb	zero,64(s2)
    ab80:	0100                	addi	s0,sp,128
    ab82:	00090103          	lb	sp,0(s2)
    ab86:	0100                	addi	s0,sp,128
    ab88:	00090003          	lb	zero,0(s2)
    ab8c:	0100                	addi	s0,sp,128
    ab8e:	0200                	addi	s0,sp,256
    ab90:	0a04                	addi	s1,sp,272
    ab92:	04090003          	lb	zero,64(s2)
    ab96:	0100                	addi	s0,sp,128
    ab98:	0200                	addi	s0,sp,256
    ab9a:	0a04                	addi	s1,sp,272
    ab9c:	00090003          	lb	zero,0(s2)
    aba0:	0100                	addi	s0,sp,128
    aba2:	0200                	addi	s0,sp,256
    aba4:	0e04                	addi	s1,sp,784
    aba6:	08090003          	lb	zero,128(s2)
    abaa:	0100                	addi	s0,sp,128
    abac:	0200                	addi	s0,sp,256
    abae:	0e04                	addi	s1,sp,784
    abb0:	00090003          	lb	zero,0(s2)
    abb4:	0100                	addi	s0,sp,128
    abb6:	0200                	addi	s0,sp,256
    abb8:	0e04                	addi	s1,sp,784
    abba:	00090003          	lb	zero,0(s2)
    abbe:	0100                	addi	s0,sp,128
    abc0:	0200                	addi	s0,sp,256
    abc2:	0e04                	addi	s1,sp,784
    abc4:	00090003          	lb	zero,0(s2)
    abc8:	0100                	addi	s0,sp,128
    abca:	0200                	addi	s0,sp,256
    abcc:	0e04                	addi	s1,sp,784
    abce:	0c090003          	lb	zero,192(s2)
    abd2:	0100                	addi	s0,sp,128
    abd4:	0200                	addi	s0,sp,256
    abd6:	0d04                	addi	s1,sp,656
    abd8:	04090003          	lb	zero,64(s2)
    abdc:	0100                	addi	s0,sp,128
    abde:	0200                	addi	s0,sp,256
    abe0:	0d04                	addi	s1,sp,656
    abe2:	00090003          	lb	zero,0(s2)
    abe6:	0100                	addi	s0,sp,128
    abe8:	0200                	addi	s0,sp,256
    abea:	0d04                	addi	s1,sp,656
    abec:	04090003          	lb	zero,64(s2)
    abf0:	0100                	addi	s0,sp,128
    abf2:	0200                	addi	s0,sp,256
    abf4:	0d04                	addi	s1,sp,656
    abf6:	00090003          	lb	zero,0(s2)
    abfa:	0100                	addi	s0,sp,128
    abfc:	0200                	addi	s0,sp,256
    abfe:	1e04                	addi	s1,sp,816
    ac00:	10090003          	lb	zero,256(s2)
    ac04:	0100                	addi	s0,sp,128
    ac06:	0200                	addi	s0,sp,256
    ac08:	1e04                	addi	s1,sp,816
    ac0a:	00090003          	lb	zero,0(s2)
    ac0e:	0100                	addi	s0,sp,128
    ac10:	0200                	addi	s0,sp,256
    ac12:	1e04                	addi	s1,sp,816
    ac14:	10090003          	lb	zero,256(s2)
    ac18:	0100                	addi	s0,sp,128
    ac1a:	0200                	addi	s0,sp,256
    ac1c:	2b04                	fld	fs1,16(a4)
    ac1e:	00090003          	lb	zero,0(s2)
    ac22:	0100                	addi	s0,sp,128
    ac24:	0200                	addi	s0,sp,256
    ac26:	2b04                	fld	fs1,16(a4)
    ac28:	00090003          	lb	zero,0(s2)
    ac2c:	0100                	addi	s0,sp,128
    ac2e:	0200                	addi	s0,sp,256
    ac30:	2d04                	fld	fs1,24(a0)
    ac32:	04090003          	lb	zero,64(s2)
    ac36:	0100                	addi	s0,sp,128
    ac38:	0200                	addi	s0,sp,256
    ac3a:	2a04                	fld	fs1,16(a2)
    ac3c:	08090003          	lb	zero,128(s2)
    ac40:	0100                	addi	s0,sp,128
    ac42:	0200                	addi	s0,sp,256
    ac44:	2a04                	fld	fs1,16(a2)
    ac46:	00090003          	lb	zero,0(s2)
    ac4a:	0100                	addi	s0,sp,128
    ac4c:	0200                	addi	s0,sp,256
    ac4e:	2a04                	fld	fs1,16(a2)
    ac50:	0c090003          	lb	zero,192(s2)
    ac54:	0100                	addi	s0,sp,128
    ac56:	0306                	slli	t1,t1,0x1
    ac58:	0900                	addi	s0,sp,144
    ac5a:	0004                	0x4
    ac5c:	0001                	nop
    ac5e:	0402                	c.slli64	s0
    ac60:	0003063b          	0x3063b
    ac64:	0409                	addi	s0,s0,2
    ac66:	0100                	addi	s0,sp,128
    ac68:	0200                	addi	s0,sp,256
    ac6a:	3b04                	fld	fs1,48(a4)
    ac6c:	00090103          	lb	sp,0(s2)
    ac70:	0100                	addi	s0,sp,128
    ac72:	0200                	addi	s0,sp,256
    ac74:	3b04                	fld	fs1,48(a4)
    ac76:	00090003          	lb	zero,0(s2)
    ac7a:	0100                	addi	s0,sp,128
    ac7c:	0200                	addi	s0,sp,256
    ac7e:	3b04                	fld	fs1,48(a4)
    ac80:	00090003          	lb	zero,0(s2)
    ac84:	0100                	addi	s0,sp,128
    ac86:	0200                	addi	s0,sp,256
    ac88:	3b04                	fld	fs1,48(a4)
    ac8a:	00090203          	lb	tp,0(s2)
    ac8e:	0100                	addi	s0,sp,128
    ac90:	0105                	addi	sp,sp,1
    ac92:	0200                	addi	s0,sp,256
    ac94:	3b04                	fld	fs1,48(a4)
    ac96:	0306                	slli	t1,t1,0x1
    ac98:	0901                	addi	s2,s2,0
    ac9a:	0000                	unimp
    ac9c:	0901                	addi	s2,s2,0
    ac9e:	0004                	0x4
    aca0:	0100                	addi	s0,sp,128
    aca2:	9201                	srli	a2,a2,0x20
    aca4:	0000                	unimp
    aca6:	0300                	addi	s0,sp,384
    aca8:	4c00                	lw	s0,24(s0)
    acaa:	0000                	unimp
    acac:	0100                	addi	s0,sp,128
    acae:	fb01                	bnez	a4,abbe <__stack_top+0xb2e>
    acb0:	0d0e                	slli	s10,s10,0x3
    acb2:	0100                	addi	s0,sp,128
    acb4:	0101                	addi	sp,sp,0
    acb6:	0001                	nop
    acb8:	0000                	unimp
    acba:	0001                	nop
    acbc:	0100                	addi	s0,sp,128
    acbe:	2e2e                	fld	ft8,200(sp)
    acc0:	2f2e2e2f          	0x2f2e2e2f
    acc4:	2e2e                	fld	ft8,200(sp)
    acc6:	2f2e2e2f          	0x2f2e2e2f
    acca:	2e2e                	fld	ft8,200(sp)
    accc:	7369722f          	0x7369722f
    acd0:	672d7663          	bgeu	s10,s2,b33c <__stack_top+0x12ac>
    acd4:	6c2f6363          	bltu	t5,sp,b39a <__stack_top+0x130a>
    acd8:	6269                	lui	tp,0x1a
    acda:	2f636367          	0x2f636367
    acde:	666e6f63          	bltu	t3,t1,b35c <__stack_top+0x12cc>
    ace2:	6769                	lui	a4,0x1a
    ace4:	7369722f          	0x7369722f
    ace8:	00007663          	bgeu	zero,zero,acf4 <__stack_top+0xc64>
    acec:	756d                	lui	a0,0xffffb
    acee:	646c                	flw	fa1,76(s0)
    acf0:	3369                	jal	aa7a <__stack_top+0x9ea>
    acf2:	532e                	lw	t1,232(sp)
    acf4:	0100                	addi	s0,sp,128
    acf6:	0000                	unimp
    acf8:	0000                	unimp
    acfa:	0205                	addi	tp,tp,1
    acfc:	5230                	lw	a2,96(a2)
    acfe:	0000                	unimp
    ad00:	03012403          	lw	s0,48(sp)
    ad04:	0901                	addi	s2,s2,0
    ad06:	0004                	0x4
    ad08:	0301                	addi	t1,t1,0
    ad0a:	0902                	c.slli64	s2
    ad0c:	0004                	0x4
    ad0e:	0301                	addi	t1,t1,0
    ad10:	0901                	addi	s2,s2,0
    ad12:	0004                	0x4
    ad14:	0301                	addi	t1,t1,0
    ad16:	0901                	addi	s2,s2,0
    ad18:	0004                	0x4
    ad1a:	0301                	addi	t1,t1,0
    ad1c:	0902                	c.slli64	s2
    ad1e:	0004                	0x4
    ad20:	0301                	addi	t1,t1,0
    ad22:	0901                	addi	s2,s2,0
    ad24:	0004                	0x4
    ad26:	0301                	addi	t1,t1,0
    ad28:	0901                	addi	s2,s2,0
    ad2a:	0004                	0x4
    ad2c:	0301                	addi	t1,t1,0
    ad2e:	0901                	addi	s2,s2,0
    ad30:	0004                	0x4
    ad32:	0901                	addi	s2,s2,0
    ad34:	0004                	0x4
    ad36:	0100                	addi	s0,sp,128
    ad38:	6801                	0x6801
    ad3a:	0001                	nop
    ad3c:	0300                	addi	s0,sp,384
    ad3e:	4900                	lw	s0,16(a0)
    ad40:	0000                	unimp
    ad42:	0100                	addi	s0,sp,128
    ad44:	fb01                	bnez	a4,ac54 <__stack_top+0xbc4>
    ad46:	0d0e                	slli	s10,s10,0x3
    ad48:	0100                	addi	s0,sp,128
    ad4a:	0101                	addi	sp,sp,0
    ad4c:	0001                	nop
    ad4e:	0000                	unimp
    ad50:	0001                	nop
    ad52:	0100                	addi	s0,sp,128
    ad54:	2e2e                	fld	ft8,200(sp)
    ad56:	2f2e2e2f          	0x2f2e2e2f
    ad5a:	2e2e                	fld	ft8,200(sp)
    ad5c:	2f2e2e2f          	0x2f2e2e2f
    ad60:	2e2e                	fld	ft8,200(sp)
    ad62:	7369722f          	0x7369722f
    ad66:	672d7663          	bgeu	s10,s2,b3d2 <__stack_top+0x1342>
    ad6a:	6c2f6363          	bltu	t5,sp,b430 <__stack_top+0x13a0>
    ad6e:	6269                	lui	tp,0x1a
    ad70:	2f636367          	0x2f636367
    ad74:	666e6f63          	bltu	t3,t1,b3f2 <__stack_top+0x1362>
    ad78:	6769                	lui	a4,0x1a
    ad7a:	7369722f          	0x7369722f
    ad7e:	00007663          	bgeu	zero,zero,ad8a <__stack_top+0xcfa>
    ad82:	6964                	flw	fs1,84(a0)
    ad84:	2e76                	fld	ft8,344(sp)
    ad86:	00010053          	fadd.s	ft0,ft2,ft0,rne
    ad8a:	0000                	unimp
    ad8c:	0500                	addi	s0,sp,640
    ad8e:	5402                	lw	s0,32(sp)
    ad90:	0052                	c.slli	zero,0x14
    ad92:	0300                	addi	s0,sp,384
    ad94:	00c4                	addi	s1,sp,68
    ad96:	0301                	addi	t1,t1,0
    ad98:	0901                	addi	s2,s2,0
    ad9a:	0004                	0x4
    ad9c:	0301                	addi	t1,t1,0
    ad9e:	0904                	addi	s1,sp,144
    ada0:	0004                	0x4
    ada2:	0301                	addi	t1,t1,0
    ada4:	0901                	addi	s2,s2,0
    ada6:	0004                	0x4
    ada8:	0301                	addi	t1,t1,0
    adaa:	0901                	addi	s2,s2,0
    adac:	0004                	0x4
    adae:	0301                	addi	t1,t1,0
    adb0:	0901                	addi	s2,s2,0
    adb2:	0004                	0x4
    adb4:	0301                	addi	t1,t1,0
    adb6:	0901                	addi	s2,s2,0
    adb8:	0004                	0x4
    adba:	0301                	addi	t1,t1,0
    adbc:	0901                	addi	s2,s2,0
    adbe:	0004                	0x4
    adc0:	0301                	addi	t1,t1,0
    adc2:	0902                	c.slli64	s2
    adc4:	0004                	0x4
    adc6:	0301                	addi	t1,t1,0
    adc8:	0901                	addi	s2,s2,0
    adca:	0004                	0x4
    adcc:	0301                	addi	t1,t1,0
    adce:	0901                	addi	s2,s2,0
    add0:	0004                	0x4
    add2:	0301                	addi	t1,t1,0
    add4:	0901                	addi	s2,s2,0
    add6:	0004                	0x4
    add8:	0301                	addi	t1,t1,0
    adda:	0902                	c.slli64	s2
    addc:	0004                	0x4
    adde:	0301                	addi	t1,t1,0
    ade0:	0902                	c.slli64	s2
    ade2:	0004                	0x4
    ade4:	0301                	addi	t1,t1,0
    ade6:	0901                	addi	s2,s2,0
    ade8:	0004                	0x4
    adea:	0301                	addi	t1,t1,0
    adec:	0901                	addi	s2,s2,0
    adee:	0004                	0x4
    adf0:	0301                	addi	t1,t1,0
    adf2:	0902                	c.slli64	s2
    adf4:	0004                	0x4
    adf6:	0301                	addi	t1,t1,0
    adf8:	0901                	addi	s2,s2,0
    adfa:	0004                	0x4
    adfc:	0301                	addi	t1,t1,0
    adfe:	0901                	addi	s2,s2,0
    ae00:	0004                	0x4
    ae02:	0301                	addi	t1,t1,0
    ae04:	0902                	c.slli64	s2
    ae06:	0004                	0x4
    ae08:	0301                	addi	t1,t1,0
    ae0a:	0905                	addi	s2,s2,1
    ae0c:	0004                	0x4
    ae0e:	0301                	addi	t1,t1,0
    ae10:	0901                	addi	s2,s2,0
    ae12:	0004                	0x4
    ae14:	0301                	addi	t1,t1,0
    ae16:	0901                	addi	s2,s2,0
    ae18:	0004                	0x4
    ae1a:	0301                	addi	t1,t1,0
    ae1c:	0901                	addi	s2,s2,0
    ae1e:	0004                	0x4
    ae20:	0301                	addi	t1,t1,0
    ae22:	0905                	addi	s2,s2,1
    ae24:	0004                	0x4
    ae26:	0301                	addi	t1,t1,0
    ae28:	0902                	c.slli64	s2
    ae2a:	0004                	0x4
    ae2c:	0301                	addi	t1,t1,0
    ae2e:	0902                	c.slli64	s2
    ae30:	0004                	0x4
    ae32:	0301                	addi	t1,t1,0
    ae34:	0901                	addi	s2,s2,0
    ae36:	0004                	0x4
    ae38:	0301                	addi	t1,t1,0
    ae3a:	0902                	c.slli64	s2
    ae3c:	0004                	0x4
    ae3e:	0301                	addi	t1,t1,0
    ae40:	0902                	c.slli64	s2
    ae42:	0004                	0x4
    ae44:	0301                	addi	t1,t1,0
    ae46:	0901                	addi	s2,s2,0
    ae48:	0004                	0x4
    ae4a:	0301                	addi	t1,t1,0
    ae4c:	0901                	addi	s2,s2,0
    ae4e:	0004                	0x4
    ae50:	0301                	addi	t1,t1,0
    ae52:	0901                	addi	s2,s2,0
    ae54:	0004                	0x4
    ae56:	0301                	addi	t1,t1,0
    ae58:	0904                	addi	s1,sp,144
    ae5a:	0004                	0x4
    ae5c:	0301                	addi	t1,t1,0
    ae5e:	0901                	addi	s2,s2,0
    ae60:	0004                	0x4
    ae62:	0301                	addi	t1,t1,0
    ae64:	0901                	addi	s2,s2,0
    ae66:	0004                	0x4
    ae68:	0301                	addi	t1,t1,0
    ae6a:	0902                	c.slli64	s2
    ae6c:	0004                	0x4
    ae6e:	0301                	addi	t1,t1,0
    ae70:	0901                	addi	s2,s2,0
    ae72:	0004                	0x4
    ae74:	0301                	addi	t1,t1,0
    ae76:	0901                	addi	s2,s2,0
    ae78:	0004                	0x4
    ae7a:	0301                	addi	t1,t1,0
    ae7c:	0902                	c.slli64	s2
    ae7e:	0004                	0x4
    ae80:	0301                	addi	t1,t1,0
    ae82:	0901                	addi	s2,s2,0
    ae84:	0004                	0x4
    ae86:	0301                	addi	t1,t1,0
    ae88:	0902                	c.slli64	s2
    ae8a:	0004                	0x4
    ae8c:	0301                	addi	t1,t1,0
    ae8e:	0901                	addi	s2,s2,0
    ae90:	0004                	0x4
    ae92:	0301                	addi	t1,t1,0
    ae94:	0901                	addi	s2,s2,0
    ae96:	0004                	0x4
    ae98:	0301                	addi	t1,t1,0
    ae9a:	0901                	addi	s2,s2,0
    ae9c:	0004                	0x4
    ae9e:	0901                	addi	s2,s2,0
    aea0:	0004                	0x4
    aea2:	0100                	addi	s0,sp,128
    aea4:	df01                	beqz	a4,adbc <__stack_top+0xd2c>
    aea6:	0000                	unimp
    aea8:	0300                	addi	s0,sp,384
    aeaa:	4d00                	lw	s0,24(a0)
    aeac:	0000                	unimp
    aeae:	0100                	addi	s0,sp,128
    aeb0:	fb01                	bnez	a4,adc0 <__stack_top+0xd30>
    aeb2:	0d0e                	slli	s10,s10,0x3
    aeb4:	0100                	addi	s0,sp,128
    aeb6:	0101                	addi	sp,sp,0
    aeb8:	0001                	nop
    aeba:	0000                	unimp
    aebc:	0001                	nop
    aebe:	0100                	addi	s0,sp,128
    aec0:	2e2e                	fld	ft8,200(sp)
    aec2:	2f2e2e2f          	0x2f2e2e2f
    aec6:	2e2e                	fld	ft8,200(sp)
    aec8:	2f2e2e2f          	0x2f2e2e2f
    aecc:	2e2e                	fld	ft8,200(sp)
    aece:	7369722f          	0x7369722f
    aed2:	672d7663          	bgeu	s10,s2,b53e <__stack_top+0x14ae>
    aed6:	6c2f6363          	bltu	t5,sp,b59c <__stack_top+0x150c>
    aeda:	6269                	lui	tp,0x1a
    aedc:	00636367          	0x636367
    aee0:	6c00                	flw	fs0,24(s0)
    aee2:	6269                	lui	tp,0x1a
    aee4:	32636367          	0x32636367
    aee8:	632e                	flw	ft6,200(sp)
    aeea:	0100                	addi	s0,sp,128
    aeec:	0000                	unimp
    aeee:	696c                	flw	fa1,84(a0)
    aef0:	6762                	flw	fa4,24(sp)
    aef2:	2e326363          	bltu	tp,gp,b1d8 <__stack_top+0x1148>
    aef6:	0068                	addi	a0,sp,12
    aef8:	0001                	nop
    aefa:	0000                	unimp
    aefc:	0105                	addi	sp,sp,1
    aefe:	0500                	addi	s0,sp,640
    af00:	0802                	c.slli64	a6
    af02:	03000053          	fadd.d	ft0,ft0,fa6,rne
    af06:	05c2                	slli	a1,a1,0x10
    af08:	0501                	addi	a0,a0,0
    af0a:	09010303          	lb	t1,144(sp)
    af0e:	0000                	unimp
    af10:	0301                	addi	t1,t1,0
    af12:	0902                	c.slli64	s2
    af14:	0000                	unimp
    af16:	0301                	addi	t1,t1,0
    af18:	0900                	addi	s0,sp,144
    af1a:	0000                	unimp
    af1c:	0301                	addi	t1,t1,0
    af1e:	0900                	addi	s0,sp,144
    af20:	0000                	unimp
    af22:	0301                	addi	t1,t1,0
    af24:	0900                	addi	s0,sp,144
    af26:	0000                	unimp
    af28:	0301                	addi	t1,t1,0
    af2a:	0900                	addi	s0,sp,144
    af2c:	0000                	unimp
    af2e:	0001                	nop
    af30:	0402                	c.slli64	s0
    af32:	00030603          	lb	a2,0(t1) # 9009906 <RAM_SIZE+0x8ff9906>
    af36:	0809                	addi	a6,a6,2
    af38:	0100                	addi	s0,sp,128
    af3a:	0200                	addi	s0,sp,256
    af3c:	0e04                	addi	s1,sp,784
    af3e:	0306                	slli	t1,t1,0x1
    af40:	0900                	addi	s0,sp,144
    af42:	000c                	0xc
    af44:	0001                	nop
    af46:	0402                	c.slli64	s0
    af48:	030e                	slli	t1,t1,0x3
    af4a:	0900                	addi	s0,sp,144
    af4c:	0000                	unimp
    af4e:	0001                	nop
    af50:	0402                	c.slli64	s0
    af52:	030e                	slli	t1,t1,0x3
    af54:	0902                	c.slli64	s2
    af56:	0000                	unimp
    af58:	0001                	nop
    af5a:	0402                	c.slli64	s0
    af5c:	060e                	slli	a2,a2,0x3
    af5e:	00097e03          	0x97e03
    af62:	0100                	addi	s0,sp,128
    af64:	0105                	addi	sp,sp,1
    af66:	0200                	addi	s0,sp,256
    af68:	0e04                	addi	s1,sp,784
    af6a:	1c090303          	lb	t1,448(s2)
    af6e:	0100                	addi	s0,sp,128
    af70:	0305                	addi	t1,t1,1
    af72:	0200                	addi	s0,sp,256
    af74:	0404                	addi	s1,sp,512
    af76:	08097d03          	0x8097d03
    af7a:	0100                	addi	s0,sp,128
    af7c:	0c090003          	lb	zero,192(s2)
    af80:	0100                	addi	s0,sp,128
    af82:	0809                	addi	a6,a6,2
    af84:	0000                	unimp
    af86:	0101                	addi	sp,sp,0
    af88:	00000053          	fadd.s	ft0,ft0,ft0,rne
    af8c:	004d0003          	lb	zero,4(s10) # b004 <__stack_top+0xf74>
    af90:	0000                	unimp
    af92:	0101                	addi	sp,sp,0
    af94:	000d0efb          	0xd0efb
    af98:	0101                	addi	sp,sp,0
    af9a:	0101                	addi	sp,sp,0
    af9c:	0000                	unimp
    af9e:	0100                	addi	s0,sp,128
    afa0:	0000                	unimp
    afa2:	2e01                	jal	b2b2 <__stack_top+0x1222>
    afa4:	2f2e                	fld	ft10,200(sp)
    afa6:	2e2e                	fld	ft8,200(sp)
    afa8:	2f2e2e2f          	0x2f2e2e2f
    afac:	2e2e                	fld	ft8,200(sp)
    afae:	2f2e2e2f          	0x2f2e2e2f
    afb2:	6972                	flw	fs2,28(sp)
    afb4:	2d766373          	csrrsi	t1,0x2d7,12
    afb8:	2f636367          	0x2f636367
    afbc:	696c                	flw	fa1,84(a0)
    afbe:	6762                	flw	fa4,24(sp)
    afc0:	00006363          	bltu	zero,zero,afc6 <__stack_top+0xf36>
    afc4:	696c                	flw	fa1,84(a0)
    afc6:	6762                	flw	fa4,24(sp)
    afc8:	2e326363          	bltu	tp,gp,b2ae <__stack_top+0x121e>
    afcc:	0068                	addi	a0,sp,12
    afce:	0001                	nop
    afd0:	6c00                	flw	fs0,24(s0)
    afd2:	6269                	lui	tp,0x1a
    afd4:	32636367          	0x32636367
    afd8:	632e                	flw	ft6,200(sp)
    afda:	0100                	addi	s0,sp,128
    afdc:	0000                	unimp
    afde:	7200                	flw	fs0,32(a2)
    afe0:	0010                	0x10
    afe2:	0300                	addi	s0,sp,384
    afe4:	5300                	lw	s0,32(a4)
    afe6:	0000                	unimp
    afe8:	0100                	addi	s0,sp,128
    afea:	fb01                	bnez	a4,aefa <__stack_top+0xe6a>
    afec:	0d0e                	slli	s10,s10,0x3
    afee:	0100                	addi	s0,sp,128
    aff0:	0101                	addi	sp,sp,0
    aff2:	0001                	nop
    aff4:	0000                	unimp
    aff6:	0001                	nop
    aff8:	0100                	addi	s0,sp,128
    affa:	2e2e                	fld	ft8,200(sp)
    affc:	2f2e2e2f          	0x2f2e2e2f
    b000:	2e2e                	fld	ft8,200(sp)
    b002:	2f2e2e2f          	0x2f2e2e2f
    b006:	2e2e                	fld	ft8,200(sp)
    b008:	7369722f          	0x7369722f
    b00c:	672d7663          	bgeu	s10,s2,b678 <__stack_top+0x15e8>
    b010:	6c2f6363          	bltu	t5,sp,b6d6 <__stack_top+0x1646>
    b014:	6269                	lui	tp,0x1a
    b016:	2f636367          	0x2f636367
    b01a:	74666f73          	csrrsi	t5,0x746,12
    b01e:	662d                	lui	a2,0xb
    b020:	0070                	addi	a2,sp,12
    b022:	7300                	flw	fs0,32(a4)
    b024:	6275                	lui	tp,0x1d
    b026:	6664                	flw	fs1,76(a2)
    b028:	00632e33          	slt	t3,t1,t1
    b02c:	0001                	nop
    b02e:	6400                	flw	fs0,8(s0)
    b030:	6c62756f          	jal	a0,326f6 <RAM_SIZE+0x226f6>
    b034:	2e65                	jal	b3ec <__stack_top+0x135c>
    b036:	0068                	addi	a0,sp,12
    b038:	0001                	nop
    b03a:	0000                	unimp
    b03c:	0105                	addi	sp,sp,1
    b03e:	0500                	addi	s0,sp,640
    b040:	7002                	flw	ft0,32(sp)
    b042:	005a                	c.slli	zero,0x16
    b044:	0300                	addi	s0,sp,384
    b046:	03050123          	sb	a6,34(a0) # ffffb022 <RAM_SIZE+0xfffeb022>
    b04a:	00090103          	lb	sp,0(s2)
    b04e:	0100                	addi	s0,sp,128
    b050:	00090003          	lb	zero,0(s2)
    b054:	0100                	addi	s0,sp,128
    b056:	0d05                	addi	s10,s10,1
    b058:	00090003          	lb	zero,0(s2)
    b05c:	0100                	addi	s0,sp,128
    b05e:	0305                	addi	t1,t1,1
    b060:	00090103          	lb	sp,0(s2)
    b064:	0100                	addi	s0,sp,128
    b066:	00090003          	lb	zero,0(s2)
    b06a:	0100                	addi	s0,sp,128
    b06c:	00090003          	lb	zero,0(s2)
    b070:	0100                	addi	s0,sp,128
    b072:	00090003          	lb	zero,0(s2)
    b076:	0100                	addi	s0,sp,128
    b078:	00090103          	lb	sp,0(s2)
    b07c:	0100                	addi	s0,sp,128
    b07e:	00090003          	lb	zero,0(s2)
    b082:	0100                	addi	s0,sp,128
    b084:	00090003          	lb	zero,0(s2)
    b088:	0100                	addi	s0,sp,128
    b08a:	00090003          	lb	zero,0(s2)
    b08e:	0100                	addi	s0,sp,128
    b090:	00090103          	lb	sp,0(s2)
    b094:	0100                	addi	s0,sp,128
    b096:	00090003          	lb	zero,0(s2)
    b09a:	0100                	addi	s0,sp,128
    b09c:	00090003          	lb	zero,0(s2)
    b0a0:	0100                	addi	s0,sp,128
    b0a2:	00090003          	lb	zero,0(s2)
    b0a6:	0100                	addi	s0,sp,128
    b0a8:	00090103          	lb	sp,0(s2)
    b0ac:	0100                	addi	s0,sp,128
    b0ae:	00090203          	lb	tp,0(s2)
    b0b2:	0100                	addi	s0,sp,128
    b0b4:	00090103          	lb	sp,0(s2)
    b0b8:	0100                	addi	s0,sp,128
    b0ba:	00090003          	lb	zero,0(s2)
    b0be:	0100                	addi	s0,sp,128
    b0c0:	00090003          	lb	zero,0(s2)
    b0c4:	0100                	addi	s0,sp,128
    b0c6:	00090003          	lb	zero,0(s2)
    b0ca:	0100                	addi	s0,sp,128
    b0cc:	00090003          	lb	zero,0(s2)
    b0d0:	0100                	addi	s0,sp,128
    b0d2:	00090003          	lb	zero,0(s2)
    b0d6:	0100                	addi	s0,sp,128
    b0d8:	0105                	addi	sp,sp,1
    b0da:	0306                	slli	t1,t1,0x1
    b0dc:	0978                	addi	a4,sp,156
    b0de:	0008                	0x8
    b0e0:	0501                	addi	a0,a0,0
    b0e2:	09080303          	lb	t1,144(a6) # ffffa090 <RAM_SIZE+0xfffea090>
    b0e6:	0004                	0x4
    b0e8:	0601                	addi	a2,a2,0
    b0ea:	04090003          	lb	zero,64(s2)
    b0ee:	0100                	addi	s0,sp,128
    b0f0:	0306                	slli	t1,t1,0x1
    b0f2:	0901                	addi	s2,s2,0
    b0f4:	0004                	0x4
    b0f6:	0501                	addi	a0,a0,0
    b0f8:	0301                	addi	t1,t1,0
    b0fa:	00080977          	0x80977
    b0fe:	0501                	addi	a0,a0,0
    b100:	09080303          	lb	t1,144(a6)
    b104:	0004                	0x4
    b106:	0601                	addi	a2,a2,0
    b108:	08090003          	lb	zero,128(s2)
    b10c:	0100                	addi	s0,sp,128
    b10e:	0105                	addi	sp,sp,1
    b110:	0306                	slli	t1,t1,0x1
    b112:	0978                	addi	a4,sp,156
    b114:	0004                	0x4
    b116:	0501                	addi	a0,a0,0
    b118:	09080303          	lb	t1,144(a6)
    b11c:	0004                	0x4
    b11e:	0601                	addi	a2,a2,0
    b120:	08090003          	lb	zero,128(s2)
    b124:	0100                	addi	s0,sp,128
    b126:	00090003          	lb	zero,0(s2)
    b12a:	0100                	addi	s0,sp,128
    b12c:	00090003          	lb	zero,0(s2)
    b130:	0100                	addi	s0,sp,128
    b132:	00090003          	lb	zero,0(s2)
    b136:	0100                	addi	s0,sp,128
    b138:	00090003          	lb	zero,0(s2)
    b13c:	0100                	addi	s0,sp,128
    b13e:	0306                	slli	t1,t1,0x1
    b140:	0901                	addi	s2,s2,0
    b142:	0000                	unimp
    b144:	0301                	addi	t1,t1,0
    b146:	097f                	0x97f
    b148:	0004                	0x4
    b14a:	0601                	addi	a2,a2,0
    b14c:	04090003          	lb	zero,64(s2)
    b150:	0100                	addi	s0,sp,128
    b152:	00090003          	lb	zero,0(s2)
    b156:	0100                	addi	s0,sp,128
    b158:	00090103          	lb	sp,0(s2)
    b15c:	0100                	addi	s0,sp,128
    b15e:	00090003          	lb	zero,0(s2)
    b162:	0100                	addi	s0,sp,128
    b164:	00090003          	lb	zero,0(s2)
    b168:	0100                	addi	s0,sp,128
    b16a:	00090003          	lb	zero,0(s2)
    b16e:	0100                	addi	s0,sp,128
    b170:	00090003          	lb	zero,0(s2)
    b174:	0100                	addi	s0,sp,128
    b176:	00090003          	lb	zero,0(s2)
    b17a:	0100                	addi	s0,sp,128
    b17c:	00090003          	lb	zero,0(s2)
    b180:	0100                	addi	s0,sp,128
    b182:	0105                	addi	sp,sp,1
    b184:	0306                	slli	t1,t1,0x1
    b186:	00040977          	0x40977
    b18a:	0501                	addi	a0,a0,0
    b18c:	09090303          	lb	t1,144(s2)
    b190:	000c                	0xc
    b192:	0601                	addi	a2,a2,0
    b194:	04090003          	lb	zero,64(s2)
    b198:	0100                	addi	s0,sp,128
    b19a:	0306                	slli	t1,t1,0x1
    b19c:	0901                	addi	s2,s2,0
    b19e:	0000                	unimp
    b1a0:	0301                	addi	t1,t1,0
    b1a2:	097f                	0x97f
    b1a4:	0004                	0x4
    b1a6:	0601                	addi	a2,a2,0
    b1a8:	04090003          	lb	zero,64(s2)
    b1ac:	0100                	addi	s0,sp,128
    b1ae:	00090003          	lb	zero,0(s2)
    b1b2:	0100                	addi	s0,sp,128
    b1b4:	00090003          	lb	zero,0(s2)
    b1b8:	0100                	addi	s0,sp,128
    b1ba:	00090003          	lb	zero,0(s2)
    b1be:	0100                	addi	s0,sp,128
    b1c0:	04090003          	lb	zero,64(s2)
    b1c4:	0100                	addi	s0,sp,128
    b1c6:	04090003          	lb	zero,64(s2)
    b1ca:	0100                	addi	s0,sp,128
    b1cc:	00090003          	lb	zero,0(s2)
    b1d0:	0100                	addi	s0,sp,128
    b1d2:	00090103          	lb	sp,0(s2)
    b1d6:	0100                	addi	s0,sp,128
    b1d8:	00090003          	lb	zero,0(s2)
    b1dc:	0100                	addi	s0,sp,128
    b1de:	0200                	addi	s0,sp,256
    b1e0:	0204                	addi	s1,sp,256
    b1e2:	0306                	slli	t1,t1,0x1
    b1e4:	0900                	addi	s0,sp,144
    b1e6:	0004                	0x4
    b1e8:	0001                	nop
    b1ea:	0402                	c.slli64	s0
    b1ec:	00030603          	lb	a2,0(t1)
    b1f0:	0809                	addi	a6,a6,2
    b1f2:	0100                	addi	s0,sp,128
    b1f4:	0200                	addi	s0,sp,256
    b1f6:	0b04                	addi	s1,sp,400
    b1f8:	04090003          	lb	zero,64(s2)
    b1fc:	0100                	addi	s0,sp,128
    b1fe:	0200                	addi	s0,sp,256
    b200:	0b04                	addi	s1,sp,400
    b202:	00090003          	lb	zero,0(s2)
    b206:	0100                	addi	s0,sp,128
    b208:	0200                	addi	s0,sp,256
    b20a:	0b04                	addi	s1,sp,400
    b20c:	00090003          	lb	zero,0(s2)
    b210:	0100                	addi	s0,sp,128
    b212:	0200                	addi	s0,sp,256
    b214:	0b04                	addi	s1,sp,400
    b216:	00090003          	lb	zero,0(s2)
    b21a:	0100                	addi	s0,sp,128
    b21c:	0200                	addi	s0,sp,256
    b21e:	0b04                	addi	s1,sp,400
    b220:	00090003          	lb	zero,0(s2)
    b224:	0100                	addi	s0,sp,128
    b226:	0200                	addi	s0,sp,256
    b228:	0b04                	addi	s1,sp,400
    b22a:	00090003          	lb	zero,0(s2)
    b22e:	0100                	addi	s0,sp,128
    b230:	0200                	addi	s0,sp,256
    b232:	0b04                	addi	s1,sp,400
    b234:	00090003          	lb	zero,0(s2)
    b238:	0100                	addi	s0,sp,128
    b23a:	0200                	addi	s0,sp,256
    b23c:	0b04                	addi	s1,sp,400
    b23e:	00090003          	lb	zero,0(s2)
    b242:	0100                	addi	s0,sp,128
    b244:	0200                	addi	s0,sp,256
    b246:	0c04                	addi	s1,sp,528
    b248:	08090003          	lb	zero,128(s2)
    b24c:	0100                	addi	s0,sp,128
    b24e:	0200                	addi	s0,sp,256
    b250:	0c04                	addi	s1,sp,528
    b252:	00090003          	lb	zero,0(s2)
    b256:	0100                	addi	s0,sp,128
    b258:	0200                	addi	s0,sp,256
    b25a:	0c04                	addi	s1,sp,528
    b25c:	00090003          	lb	zero,0(s2)
    b260:	0100                	addi	s0,sp,128
    b262:	0200                	addi	s0,sp,256
    b264:	0e04                	addi	s1,sp,784
    b266:	04090003          	lb	zero,64(s2)
    b26a:	0100                	addi	s0,sp,128
    b26c:	0200                	addi	s0,sp,256
    b26e:	0e04                	addi	s1,sp,784
    b270:	00090003          	lb	zero,0(s2)
    b274:	0100                	addi	s0,sp,128
    b276:	0200                	addi	s0,sp,256
    b278:	1004                	addi	s1,sp,32
    b27a:	04090003          	lb	zero,64(s2)
    b27e:	0100                	addi	s0,sp,128
    b280:	0200                	addi	s0,sp,256
    b282:	1304                	addi	s1,sp,416
    b284:	08090003          	lb	zero,128(s2)
    b288:	0100                	addi	s0,sp,128
    b28a:	0200                	addi	s0,sp,256
    b28c:	1304                	addi	s1,sp,416
    b28e:	00090003          	lb	zero,0(s2)
    b292:	0100                	addi	s0,sp,128
    b294:	0200                	addi	s0,sp,256
    b296:	1304                	addi	s1,sp,416
    b298:	04090003          	lb	zero,64(s2)
    b29c:	0100                	addi	s0,sp,128
    b29e:	0200                	addi	s0,sp,256
    b2a0:	1c04                	addi	s1,sp,560
    b2a2:	04090003          	lb	zero,64(s2)
    b2a6:	0100                	addi	s0,sp,128
    b2a8:	0200                	addi	s0,sp,256
    b2aa:	1c04                	addi	s1,sp,560
    b2ac:	00090003          	lb	zero,0(s2)
    b2b0:	0100                	addi	s0,sp,128
    b2b2:	0200                	addi	s0,sp,256
    b2b4:	1c04                	addi	s1,sp,560
    b2b6:	00090003          	lb	zero,0(s2)
    b2ba:	0100                	addi	s0,sp,128
    b2bc:	0200                	addi	s0,sp,256
    b2be:	1c04                	addi	s1,sp,560
    b2c0:	04090003          	lb	zero,64(s2)
    b2c4:	0100                	addi	s0,sp,128
    b2c6:	0200                	addi	s0,sp,256
    b2c8:	1c04                	addi	s1,sp,560
    b2ca:	0c090003          	lb	zero,192(s2)
    b2ce:	0100                	addi	s0,sp,128
    b2d0:	0200                	addi	s0,sp,256
    b2d2:	1c04                	addi	s1,sp,560
    b2d4:	00090003          	lb	zero,0(s2)
    b2d8:	0100                	addi	s0,sp,128
    b2da:	0200                	addi	s0,sp,256
    b2dc:	1c04                	addi	s1,sp,560
    b2de:	00090003          	lb	zero,0(s2)
    b2e2:	0100                	addi	s0,sp,128
    b2e4:	0200                	addi	s0,sp,256
    b2e6:	5504                	lw	s1,40(a0)
    b2e8:	04090003          	lb	zero,64(s2)
    b2ec:	0100                	addi	s0,sp,128
    b2ee:	0200                	addi	s0,sp,256
    b2f0:	5504                	lw	s1,40(a0)
    b2f2:	00090003          	lb	zero,0(s2)
    b2f6:	0100                	addi	s0,sp,128
    b2f8:	0200                	addi	s0,sp,256
    b2fa:	5504                	lw	s1,40(a0)
    b2fc:	00090003          	lb	zero,0(s2)
    b300:	0100                	addi	s0,sp,128
    b302:	0200                	addi	s0,sp,256
    b304:	5504                	lw	s1,40(a0)
    b306:	0306                	slli	t1,t1,0x1
    b308:	097f                	0x97f
    b30a:	0000                	unimp
    b30c:	0001                	nop
    b30e:	0402                	c.slli64	s0
    b310:	0355                	addi	t1,t1,21
    b312:	0901                	addi	s2,s2,0
    b314:	0004                	0x4
    b316:	0001                	nop
    b318:	0402                	c.slli64	s0
    b31a:	061d                	addi	a2,a2,7
    b31c:	04090003          	lb	zero,64(s2)
    b320:	0100                	addi	s0,sp,128
    b322:	0306                	slli	t1,t1,0x1
    b324:	0900                	addi	s0,sp,144
    b326:	0008                	0x8
    b328:	0001                	nop
    b32a:	0402                	c.slli64	s0
    b32c:	0611                	addi	a2,a2,4
    b32e:	08090003          	lb	zero,128(s2)
    b332:	0100                	addi	s0,sp,128
    b334:	0200                	addi	s0,sp,256
    b336:	2b04                	fld	fs1,16(a4)
    b338:	08090003          	lb	zero,128(s2)
    b33c:	0100                	addi	s0,sp,128
    b33e:	0200                	addi	s0,sp,256
    b340:	3404                	fld	fs1,40(s0)
    b342:	0c090003          	lb	zero,192(s2)
    b346:	0100                	addi	s0,sp,128
    b348:	0200                	addi	s0,sp,256
    b34a:	3504                	fld	fs1,40(a0)
    b34c:	08090003          	lb	zero,128(s2)
    b350:	0100                	addi	s0,sp,128
    b352:	0200                	addi	s0,sp,256
    b354:	3704                	fld	fs1,40(a4)
    b356:	08090003          	lb	zero,128(s2)
    b35a:	0100                	addi	s0,sp,128
    b35c:	0200                	addi	s0,sp,256
    b35e:	3704                	fld	fs1,40(a4)
    b360:	20090003          	lb	zero,512(s2)
    b364:	0100                	addi	s0,sp,128
    b366:	0200                	addi	s0,sp,256
    b368:	4504                	lw	s1,8(a0)
    b36a:	04090003          	lb	zero,64(s2)
    b36e:	0100                	addi	s0,sp,128
    b370:	0200                	addi	s0,sp,256
    b372:	4504                	lw	s1,8(a0)
    b374:	00090003          	lb	zero,0(s2)
    b378:	0100                	addi	s0,sp,128
    b37a:	0200                	addi	s0,sp,256
    b37c:	4504                	lw	s1,8(a0)
    b37e:	00090003          	lb	zero,0(s2)
    b382:	0100                	addi	s0,sp,128
    b384:	0200                	addi	s0,sp,256
    b386:	4504                	lw	s1,8(a0)
    b388:	04090003          	lb	zero,64(s2)
    b38c:	0100                	addi	s0,sp,128
    b38e:	0200                	addi	s0,sp,256
    b390:	4504                	lw	s1,8(a0)
    b392:	0c090003          	lb	zero,192(s2)
    b396:	0100                	addi	s0,sp,128
    b398:	0200                	addi	s0,sp,256
    b39a:	4504                	lw	s1,8(a0)
    b39c:	00090003          	lb	zero,0(s2)
    b3a0:	0100                	addi	s0,sp,128
    b3a2:	0200                	addi	s0,sp,256
    b3a4:	7f04                	flw	fs1,56(a4)
    b3a6:	04090003          	lb	zero,64(s2)
    b3aa:	0100                	addi	s0,sp,128
    b3ac:	0300                	addi	s0,sp,384
    b3ae:	bb04                	fsd	fs1,48(a4)
    b3b0:	0301                	addi	t1,t1,0
    b3b2:	0900                	addi	s0,sp,144
    b3b4:	000c                	0xc
    b3b6:	0001                	nop
    b3b8:	01bb0403          	lb	s0,27(s6)
    b3bc:	00090003          	lb	zero,0(s2)
    b3c0:	0100                	addi	s0,sp,128
    b3c2:	0300                	addi	s0,sp,384
    b3c4:	bb04                	fsd	fs1,48(a4)
    b3c6:	0301                	addi	t1,t1,0
    b3c8:	0900                	addi	s0,sp,144
    b3ca:	0004                	0x4
    b3cc:	0001                	nop
    b3ce:	01bb0403          	lb	s0,27(s6)
    b3d2:	00090003          	lb	zero,0(s2)
    b3d6:	0100                	addi	s0,sp,128
    b3d8:	0300                	addi	s0,sp,384
    b3da:	bb04                	fsd	fs1,48(a4)
    b3dc:	0301                	addi	t1,t1,0
    b3de:	0900                	addi	s0,sp,144
    b3e0:	0000                	unimp
    b3e2:	0001                	nop
    b3e4:	01bb0403          	lb	s0,27(s6)
    b3e8:	00090003          	lb	zero,0(s2)
    b3ec:	0100                	addi	s0,sp,128
    b3ee:	0306                	slli	t1,t1,0x1
    b3f0:	0900                	addi	s0,sp,144
    b3f2:	0008                	0x8
    b3f4:	0001                	nop
    b3f6:	0402                	c.slli64	s0
    b3f8:	0638                	addi	a4,sp,776
    b3fa:	28090003          	lb	zero,640(s2)
    b3fe:	0100                	addi	s0,sp,128
    b400:	0200                	addi	s0,sp,256
    b402:	3f04                	fld	fs1,56(a4)
    b404:	0306                	slli	t1,t1,0x1
    b406:	0900                	addi	s0,sp,144
    b408:	0014                	0x14
    b40a:	0001                	nop
    b40c:	0402                	c.slli64	s0
    b40e:	0342                	slli	t1,t1,0x10
    b410:	0900                	addi	s0,sp,144
    b412:	000c                	0xc
    b414:	0001                	nop
    b416:	0402                	c.slli64	s0
    b418:	0642                	slli	a2,a2,0x10
    b41a:	0c090003          	lb	zero,192(s2)
    b41e:	0100                	addi	s0,sp,128
    b420:	0200                	addi	s0,sp,256
    b422:	3604                	fld	fs1,40(a2)
    b424:	0306                	slli	t1,t1,0x1
    b426:	0900                	addi	s0,sp,144
    b428:	0000                	unimp
    b42a:	0001                	nop
    b42c:	0402                	c.slli64	s0
    b42e:	0636                	slli	a2,a2,0xd
    b430:	08090003          	lb	zero,128(s2)
    b434:	0100                	addi	s0,sp,128
    b436:	0200                	addi	s0,sp,256
    b438:	0f04                	addi	s1,sp,912
    b43a:	0c090003          	lb	zero,192(s2)
    b43e:	0100                	addi	s0,sp,128
    b440:	0200                	addi	s0,sp,256
    b442:	4704                	lw	s1,8(a4)
    b444:	04090003          	lb	zero,64(s2)
    b448:	0100                	addi	s0,sp,128
    b44a:	0200                	addi	s0,sp,256
    b44c:	4704                	lw	s1,8(a4)
    b44e:	04090003          	lb	zero,64(s2)
    b452:	0100                	addi	s0,sp,128
    b454:	0200                	addi	s0,sp,256
    b456:	4704                	lw	s1,8(a4)
    b458:	00090003          	lb	zero,0(s2)
    b45c:	0100                	addi	s0,sp,128
    b45e:	0200                	addi	s0,sp,256
    b460:	4904                	lw	s1,16(a0)
    b462:	04090003          	lb	zero,64(s2)
    b466:	0100                	addi	s0,sp,128
    b468:	0200                	addi	s0,sp,256
    b46a:	4c04                	lw	s1,24(s0)
    b46c:	08090003          	lb	zero,128(s2)
    b470:	0100                	addi	s0,sp,128
    b472:	0200                	addi	s0,sp,256
    b474:	4c04                	lw	s1,24(s0)
    b476:	00090003          	lb	zero,0(s2)
    b47a:	0100                	addi	s0,sp,128
    b47c:	0200                	addi	s0,sp,256
    b47e:	4c04                	lw	s1,24(s0)
    b480:	04090003          	lb	zero,64(s2)
    b484:	0100                	addi	s0,sp,128
    b486:	0200                	addi	s0,sp,256
    b488:	5504                	lw	s1,40(a0)
    b48a:	04090003          	lb	zero,64(s2)
    b48e:	0100                	addi	s0,sp,128
    b490:	0200                	addi	s0,sp,256
    b492:	5504                	lw	s1,40(a0)
    b494:	00090003          	lb	zero,0(s2)
    b498:	0100                	addi	s0,sp,128
    b49a:	0200                	addi	s0,sp,256
    b49c:	5504                	lw	s1,40(a0)
    b49e:	00090003          	lb	zero,0(s2)
    b4a2:	0100                	addi	s0,sp,128
    b4a4:	0200                	addi	s0,sp,256
    b4a6:	5504                	lw	s1,40(a0)
    b4a8:	04090003          	lb	zero,64(s2)
    b4ac:	0100                	addi	s0,sp,128
    b4ae:	0200                	addi	s0,sp,256
    b4b0:	5604                	lw	s1,40(a2)
    b4b2:	10090003          	lb	zero,256(s2)
    b4b6:	0100                	addi	s0,sp,128
    b4b8:	0306                	slli	t1,t1,0x1
    b4ba:	097f                	0x97f
    b4bc:	0008                	0x8
    b4be:	0001                	nop
    b4c0:	0402                	c.slli64	s0
    b4c2:	064a                	slli	a2,a2,0x12
    b4c4:	0c090103          	lb	sp,192(s2)
    b4c8:	0100                	addi	s0,sp,128
    b4ca:	0200                	addi	s0,sp,256
    b4cc:	6404                	flw	fs1,8(s0)
    b4ce:	08090003          	lb	zero,128(s2)
    b4d2:	0100                	addi	s0,sp,128
    b4d4:	0200                	addi	s0,sp,256
    b4d6:	6d04                	flw	fs1,24(a0)
    b4d8:	0c090003          	lb	zero,192(s2)
    b4dc:	0100                	addi	s0,sp,128
    b4de:	0200                	addi	s0,sp,256
    b4e0:	6e04                	flw	fs1,24(a2)
    b4e2:	08090003          	lb	zero,128(s2)
    b4e6:	0100                	addi	s0,sp,128
    b4e8:	0200                	addi	s0,sp,256
    b4ea:	7004                	flw	fs1,32(s0)
    b4ec:	08090003          	lb	zero,128(s2)
    b4f0:	0100                	addi	s0,sp,128
    b4f2:	0200                	addi	s0,sp,256
    b4f4:	7004                	flw	fs1,32(s0)
    b4f6:	20090003          	lb	zero,512(s2)
    b4fa:	0100                	addi	s0,sp,128
    b4fc:	0200                	addi	s0,sp,256
    b4fe:	7e04                	flw	fs1,56(a2)
    b500:	04090003          	lb	zero,64(s2)
    b504:	0100                	addi	s0,sp,128
    b506:	0200                	addi	s0,sp,256
    b508:	7e04                	flw	fs1,56(a2)
    b50a:	00090003          	lb	zero,0(s2)
    b50e:	0100                	addi	s0,sp,128
    b510:	0200                	addi	s0,sp,256
    b512:	7e04                	flw	fs1,56(a2)
    b514:	00090003          	lb	zero,0(s2)
    b518:	0100                	addi	s0,sp,128
    b51a:	0200                	addi	s0,sp,256
    b51c:	7e04                	flw	fs1,56(a2)
    b51e:	04090003          	lb	zero,64(s2)
    b522:	0100                	addi	s0,sp,128
    b524:	0200                	addi	s0,sp,256
    b526:	7e04                	flw	fs1,56(a2)
    b528:	0c090003          	lb	zero,192(s2)
    b52c:	0100                	addi	s0,sp,128
    b52e:	0200                	addi	s0,sp,256
    b530:	7e04                	flw	fs1,56(a2)
    b532:	00090003          	lb	zero,0(s2)
    b536:	0100                	addi	s0,sp,128
    b538:	0200                	addi	s0,sp,256
    b53a:	7e04                	flw	fs1,56(a2)
    b53c:	0306                	slli	t1,t1,0x1
    b53e:	097f                	0x97f
    b540:	0000                	unimp
    b542:	0001                	nop
    b544:	0402                	c.slli64	s0
    b546:	0671                	addi	a2,a2,28
    b548:	08090103          	lb	sp,128(s2)
    b54c:	0100                	addi	s0,sp,128
    b54e:	0200                	addi	s0,sp,256
    b550:	7804                	flw	fs1,48(s0)
    b552:	0306                	slli	t1,t1,0x1
    b554:	0900                	addi	s0,sp,144
    b556:	0014                	0x14
    b558:	0001                	nop
    b55a:	0402                	c.slli64	s0
    b55c:	0900037b          	0x900037b
    b560:	000c                	0xc
    b562:	0001                	nop
    b564:	0402                	c.slli64	s0
    b566:	0003067b          	0x3067b
    b56a:	0c09                	addi	s8,s8,2
    b56c:	0100                	addi	s0,sp,128
    b56e:	0200                	addi	s0,sp,256
    b570:	6f04                	flw	fs1,24(a4)
    b572:	0306                	slli	t1,t1,0x1
    b574:	0900                	addi	s0,sp,144
    b576:	0000                	unimp
    b578:	0001                	nop
    b57a:	0402                	c.slli64	s0
    b57c:	0003066f          	jal	a2,3b57c <RAM_SIZE+0x2b57c>
    b580:	0809                	addi	a6,a6,2
    b582:	0100                	addi	s0,sp,128
    b584:	0200                	addi	s0,sp,256
    b586:	4804                	lw	s1,16(s0)
    b588:	0c090003          	lb	zero,192(s2)
    b58c:	0100                	addi	s0,sp,128
    b58e:	0300                	addi	s0,sp,384
    b590:	8004                	0x8004
    b592:	0301                	addi	t1,t1,0
    b594:	0900                	addi	s0,sp,144
    b596:	000c                	0xc
    b598:	0001                	nop
    b59a:	01820403          	lb	s0,24(tp) # 1d018 <RAM_SIZE+0xd018>
    b59e:	08090003          	lb	zero,128(s2)
    b5a2:	0100                	addi	s0,sp,128
    b5a4:	0300                	addi	s0,sp,384
    b5a6:	8204                	0x8204
    b5a8:	0301                	addi	t1,t1,0
    b5aa:	0900                	addi	s0,sp,144
    b5ac:	0000                	unimp
    b5ae:	0001                	nop
    b5b0:	01850403          	lb	s0,24(a0)
    b5b4:	04090003          	lb	zero,64(s2)
    b5b8:	0100                	addi	s0,sp,128
    b5ba:	0300                	addi	s0,sp,384
    b5bc:	8b04                	0x8b04
    b5be:	0301                	addi	t1,t1,0
    b5c0:	0900                	addi	s0,sp,144
    b5c2:	0008                	0x8
    b5c4:	0001                	nop
    b5c6:	018b0403          	lb	s0,24(s6)
    b5ca:	00090003          	lb	zero,0(s2)
    b5ce:	0100                	addi	s0,sp,128
    b5d0:	0300                	addi	s0,sp,384
    b5d2:	8b04                	0x8b04
    b5d4:	0301                	addi	t1,t1,0
    b5d6:	0900                	addi	s0,sp,144
    b5d8:	0000                	unimp
    b5da:	0001                	nop
    b5dc:	018b0403          	lb	s0,24(s6)
    b5e0:	00090003          	lb	zero,0(s2)
    b5e4:	0100                	addi	s0,sp,128
    b5e6:	0300                	addi	s0,sp,384
    b5e8:	8b04                	0x8b04
    b5ea:	0301                	addi	t1,t1,0
    b5ec:	0900                	addi	s0,sp,144
    b5ee:	0004                	0x4
    b5f0:	0001                	nop
    b5f2:	018b0403          	lb	s0,24(s6)
    b5f6:	0c090003          	lb	zero,192(s2)
    b5fa:	0100                	addi	s0,sp,128
    b5fc:	0300                	addi	s0,sp,384
    b5fe:	8b04                	0x8b04
    b600:	0301                	addi	t1,t1,0
    b602:	0900                	addi	s0,sp,144
    b604:	0000                	unimp
    b606:	0001                	nop
    b608:	018b0403          	lb	s0,24(s6)
    b60c:	00090003          	lb	zero,0(s2)
    b610:	0100                	addi	s0,sp,128
    b612:	0300                	addi	s0,sp,384
    b614:	8d04                	0x8d04
    b616:	0301                	addi	t1,t1,0
    b618:	0900                	addi	s0,sp,144
    b61a:	0010                	0x10
    b61c:	0001                	nop
    b61e:	018d0403          	lb	s0,24(s10)
    b622:	0c090003          	lb	zero,192(s2)
    b626:	0100                	addi	s0,sp,128
    b628:	0300                	addi	s0,sp,384
    b62a:	aa04                	fsd	fs1,16(a2)
    b62c:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    b630:	0004                	0x4
    b632:	0001                	nop
    b634:	03aa0403          	lb	s0,58(s4)
    b638:	00090003          	lb	zero,0(s2)
    b63c:	0100                	addi	s0,sp,128
    b63e:	0300                	addi	s0,sp,384
    b640:	aa04                	fsd	fs1,16(a2)
    b642:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    b646:	0000                	unimp
    b648:	0001                	nop
    b64a:	03aa0403          	lb	s0,58(s4)
    b64e:	00090103          	lb	sp,0(s2)
    b652:	0100                	addi	s0,sp,128
    b654:	0300                	addi	s0,sp,384
    b656:	aa04                	fsd	fs1,16(a2)
    b658:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    b65c:	0000                	unimp
    b65e:	0001                	nop
    b660:	03aa0403          	lb	s0,58(s4)
    b664:	00090003          	lb	zero,0(s2)
    b668:	0100                	addi	s0,sp,128
    b66a:	0300                	addi	s0,sp,384
    b66c:	aa04                	fsd	fs1,16(a2)
    b66e:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    b672:	0000                	unimp
    b674:	0001                	nop
    b676:	03aa0403          	lb	s0,58(s4)
    b67a:	00090003          	lb	zero,0(s2)
    b67e:	0100                	addi	s0,sp,128
    b680:	0200                	addi	s0,sp,256
    b682:	2504                	fld	fs1,8(a0)
    b684:	08090003          	lb	zero,128(s2)
    b688:	0100                	addi	s0,sp,128
    b68a:	0200                	addi	s0,sp,256
    b68c:	2504                	fld	fs1,8(a0)
    b68e:	00090003          	lb	zero,0(s2)
    b692:	0100                	addi	s0,sp,128
    b694:	0200                	addi	s0,sp,256
    b696:	2504                	fld	fs1,8(a0)
    b698:	00090003          	lb	zero,0(s2)
    b69c:	0100                	addi	s0,sp,128
    b69e:	0200                	addi	s0,sp,256
    b6a0:	2504                	fld	fs1,8(a0)
    b6a2:	00090003          	lb	zero,0(s2)
    b6a6:	0100                	addi	s0,sp,128
    b6a8:	0200                	addi	s0,sp,256
    b6aa:	2c04                	fld	fs1,24(s0)
    b6ac:	0c090003          	lb	zero,192(s2)
    b6b0:	0100                	addi	s0,sp,128
    b6b2:	0200                	addi	s0,sp,256
    b6b4:	2c04                	fld	fs1,24(s0)
    b6b6:	00090003          	lb	zero,0(s2)
    b6ba:	0100                	addi	s0,sp,128
    b6bc:	0200                	addi	s0,sp,256
    b6be:	2c04                	fld	fs1,24(s0)
    b6c0:	00090003          	lb	zero,0(s2)
    b6c4:	0100                	addi	s0,sp,128
    b6c6:	0200                	addi	s0,sp,256
    b6c8:	2c04                	fld	fs1,24(s0)
    b6ca:	04090003          	lb	zero,64(s2)
    b6ce:	0100                	addi	s0,sp,128
    b6d0:	0200                	addi	s0,sp,256
    b6d2:	2c04                	fld	fs1,24(s0)
    b6d4:	08090003          	lb	zero,128(s2)
    b6d8:	0100                	addi	s0,sp,128
    b6da:	0300                	addi	s0,sp,384
    b6dc:	9e04                	0x9e04
    b6de:	0301                	addi	t1,t1,0
    b6e0:	097f                	0x97f
    b6e2:	0008                	0x8
    b6e4:	0001                	nop
    b6e6:	019e0403          	lb	s0,25(t3)
    b6ea:	00090003          	lb	zero,0(s2)
    b6ee:	0100                	addi	s0,sp,128
    b6f0:	0300                	addi	s0,sp,384
    b6f2:	9e04                	0x9e04
    b6f4:	0301                	addi	t1,t1,0
    b6f6:	0900                	addi	s0,sp,144
    b6f8:	0000                	unimp
    b6fa:	0001                	nop
    b6fc:	019e0403          	lb	s0,25(t3)
    b700:	00090003          	lb	zero,0(s2)
    b704:	0100                	addi	s0,sp,128
    b706:	0300                	addi	s0,sp,384
    b708:	9e04                	0x9e04
    b70a:	0301                	addi	t1,t1,0
    b70c:	0900                	addi	s0,sp,144
    b70e:	0000                	unimp
    b710:	0001                	nop
    b712:	019e0403          	lb	s0,25(t3)
    b716:	00090003          	lb	zero,0(s2)
    b71a:	0100                	addi	s0,sp,128
    b71c:	0300                	addi	s0,sp,384
    b71e:	9e04                	0x9e04
    b720:	0301                	addi	t1,t1,0
    b722:	0900                	addi	s0,sp,144
    b724:	0000                	unimp
    b726:	0001                	nop
    b728:	019e0403          	lb	s0,25(t3)
    b72c:	00090003          	lb	zero,0(s2)
    b730:	0100                	addi	s0,sp,128
    b732:	0300                	addi	s0,sp,384
    b734:	a004                	fsd	fs1,0(s0)
    b736:	0301                	addi	t1,t1,0
    b738:	0900                	addi	s0,sp,144
    b73a:	0004                	0x4
    b73c:	0601                	addi	a2,a2,0
    b73e:	08090003          	lb	zero,128(s2)
    b742:	0100                	addi	s0,sp,128
    b744:	0300                	addi	s0,sp,384
    b746:	8104                	0x8104
    b748:	0601                	addi	a2,a2,0
    b74a:	14090003          	lb	zero,320(s2)
    b74e:	0100                	addi	s0,sp,128
    b750:	0300                	addi	s0,sp,384
    b752:	8104                	0x8104
    b754:	0301                	addi	t1,t1,0
    b756:	0900                	addi	s0,sp,144
    b758:	0000                	unimp
    b75a:	0001                	nop
    b75c:	01810403          	lb	s0,24(sp)
    b760:	00090003          	lb	zero,0(s2)
    b764:	0100                	addi	s0,sp,128
    b766:	0300                	addi	s0,sp,384
    b768:	8104                	0x8104
    b76a:	0301                	addi	t1,t1,0
    b76c:	0900                	addi	s0,sp,144
    b76e:	0000                	unimp
    b770:	0001                	nop
    b772:	01810403          	lb	s0,24(sp)
    b776:	00090003          	lb	zero,0(s2)
    b77a:	0100                	addi	s0,sp,128
    b77c:	0300                	addi	s0,sp,384
    b77e:	8104                	0x8104
    b780:	0301                	addi	t1,t1,0
    b782:	0900                	addi	s0,sp,144
    b784:	0000                	unimp
    b786:	0001                	nop
    b788:	01810403          	lb	s0,24(sp)
    b78c:	00090003          	lb	zero,0(s2)
    b790:	0100                	addi	s0,sp,128
    b792:	0300                	addi	s0,sp,384
    b794:	8104                	0x8104
    b796:	0301                	addi	t1,t1,0
    b798:	0900                	addi	s0,sp,144
    b79a:	0000                	unimp
    b79c:	0001                	nop
    b79e:	01810403          	lb	s0,24(sp)
    b7a2:	00090003          	lb	zero,0(s2)
    b7a6:	0100                	addi	s0,sp,128
    b7a8:	0300                	addi	s0,sp,384
    b7aa:	8104                	0x8104
    b7ac:	0301                	addi	t1,t1,0
    b7ae:	0900                	addi	s0,sp,144
    b7b0:	0000                	unimp
    b7b2:	0001                	nop
    b7b4:	01810403          	lb	s0,24(sp)
    b7b8:	00090003          	lb	zero,0(s2)
    b7bc:	0100                	addi	s0,sp,128
    b7be:	0306                	slli	t1,t1,0x1
    b7c0:	0900                	addi	s0,sp,144
    b7c2:	0008                	0x8
    b7c4:	0001                	nop
    b7c6:	0402                	c.slli64	s0
    b7c8:	060d                	addi	a2,a2,3
    b7ca:	28090003          	lb	zero,640(s2)
    b7ce:	0100                	addi	s0,sp,128
    b7d0:	0200                	addi	s0,sp,256
    b7d2:	0d04                	addi	s1,sp,656
    b7d4:	00090003          	lb	zero,0(s2)
    b7d8:	0100                	addi	s0,sp,128
    b7da:	0300                	addi	s0,sp,384
    b7dc:	cd04                	sw	s1,24(a0)
    b7de:	0301                	addi	t1,t1,0
    b7e0:	0900                	addi	s0,sp,144
    b7e2:	0004                	0x4
    b7e4:	0001                	nop
    b7e6:	01cd0403          	lb	s0,28(s10)
    b7ea:	00090003          	lb	zero,0(s2)
    b7ee:	0100                	addi	s0,sp,128
    b7f0:	0300                	addi	s0,sp,384
    b7f2:	cd04                	sw	s1,24(a0)
    b7f4:	0301                	addi	t1,t1,0
    b7f6:	0900                	addi	s0,sp,144
    b7f8:	0000                	unimp
    b7fa:	0001                	nop
    b7fc:	01cf0403          	lb	s0,28(t5)
    b800:	04090003          	lb	zero,64(s2)
    b804:	0100                	addi	s0,sp,128
    b806:	0300                	addi	s0,sp,384
    b808:	d204                	sw	s1,32(a2)
    b80a:	0301                	addi	t1,t1,0
    b80c:	0900                	addi	s0,sp,144
    b80e:	0008                	0x8
    b810:	0001                	nop
    b812:	01d20403          	lb	s0,29(tp) # 1d <_start+0xd>
    b816:	00090003          	lb	zero,0(s2)
    b81a:	0100                	addi	s0,sp,128
    b81c:	0300                	addi	s0,sp,384
    b81e:	d204                	sw	s1,32(a2)
    b820:	0301                	addi	t1,t1,0
    b822:	0900                	addi	s0,sp,144
    b824:	0004                	0x4
    b826:	0001                	nop
    b828:	01db0403          	lb	s0,29(s6)
    b82c:	04090003          	lb	zero,64(s2)
    b830:	0100                	addi	s0,sp,128
    b832:	0300                	addi	s0,sp,384
    b834:	db04                	sw	s1,48(a4)
    b836:	0301                	addi	t1,t1,0
    b838:	0900                	addi	s0,sp,144
    b83a:	0000                	unimp
    b83c:	0001                	nop
    b83e:	01db0403          	lb	s0,29(s6)
    b842:	00090003          	lb	zero,0(s2)
    b846:	0100                	addi	s0,sp,128
    b848:	0300                	addi	s0,sp,384
    b84a:	db04                	sw	s1,48(a4)
    b84c:	0301                	addi	t1,t1,0
    b84e:	0900                	addi	s0,sp,144
    b850:	0004                	0x4
    b852:	0001                	nop
    b854:	01db0403          	lb	s0,29(s6)
    b858:	0c090003          	lb	zero,192(s2)
    b85c:	0100                	addi	s0,sp,128
    b85e:	0300                	addi	s0,sp,384
    b860:	db04                	sw	s1,48(a4)
    b862:	0301                	addi	t1,t1,0
    b864:	0900                	addi	s0,sp,144
    b866:	0000                	unimp
    b868:	0001                	nop
    b86a:	01db0403          	lb	s0,29(s6)
    b86e:	00090003          	lb	zero,0(s2)
    b872:	0100                	addi	s0,sp,128
    b874:	0300                	addi	s0,sp,384
    b876:	9404                	0x9404
    b878:	0602                	c.slli64	a2
    b87a:	04097f03          	0x4097f03
    b87e:	0100                	addi	s0,sp,128
    b880:	0300                	addi	s0,sp,384
    b882:	9404                	0x9404
    b884:	0302                	c.slli64	t1
    b886:	0901                	addi	s2,s2,0
    b888:	0004                	0x4
    b88a:	0001                	nop
    b88c:	01dc0403          	lb	s0,29(s8)
    b890:	0306                	slli	t1,t1,0x1
    b892:	0900                	addi	s0,sp,144
    b894:	0004                	0x4
    b896:	0001                	nop
    b898:	01f30403          	lb	s0,31(t1)
    b89c:	08090003          	lb	zero,128(s2)
    b8a0:	0100                	addi	s0,sp,128
    b8a2:	0300                	addi	s0,sp,384
    b8a4:	f404                	fsw	fs1,40(s0)
    b8a6:	0301                	addi	t1,t1,0
    b8a8:	0900                	addi	s0,sp,144
    b8aa:	0008                	0x8
    b8ac:	0001                	nop
    b8ae:	01f60403          	lb	s0,31(a2) # b01f <__stack_top+0xf8f>
    b8b2:	08090003          	lb	zero,128(s2)
    b8b6:	0100                	addi	s0,sp,128
    b8b8:	0300                	addi	s0,sp,384
    b8ba:	f604                	fsw	fs1,40(a2)
    b8bc:	0301                	addi	t1,t1,0
    b8be:	0900                	addi	s0,sp,144
    b8c0:	0020                	addi	s0,sp,8
    b8c2:	0001                	nop
    b8c4:	02840403          	lb	s0,40(s0) # 19028 <RAM_SIZE+0x9028>
    b8c8:	04090003          	lb	zero,64(s2)
    b8cc:	0100                	addi	s0,sp,128
    b8ce:	0300                	addi	s0,sp,384
    b8d0:	8404                	0x8404
    b8d2:	0302                	c.slli64	t1
    b8d4:	0900                	addi	s0,sp,144
    b8d6:	0000                	unimp
    b8d8:	0001                	nop
    b8da:	02840403          	lb	s0,40(s0)
    b8de:	00090003          	lb	zero,0(s2)
    b8e2:	0100                	addi	s0,sp,128
    b8e4:	0300                	addi	s0,sp,384
    b8e6:	8404                	0x8404
    b8e8:	0302                	c.slli64	t1
    b8ea:	0900                	addi	s0,sp,144
    b8ec:	0004                	0x4
    b8ee:	0001                	nop
    b8f0:	02840403          	lb	s0,40(s0)
    b8f4:	0c090003          	lb	zero,192(s2)
    b8f8:	0100                	addi	s0,sp,128
    b8fa:	0300                	addi	s0,sp,384
    b8fc:	8404                	0x8404
    b8fe:	0302                	c.slli64	t1
    b900:	0900                	addi	s0,sp,144
    b902:	0000                	unimp
    b904:	0001                	nop
    b906:	02be0403          	lb	s0,43(t3)
    b90a:	04090003          	lb	zero,64(s2)
    b90e:	0100                	addi	s0,sp,128
    b910:	0300                	addi	s0,sp,384
    b912:	fa04                	fsw	fs1,48(a2)
    b914:	0302                	c.slli64	t1
    b916:	0900                	addi	s0,sp,144
    b918:	000c                	0xc
    b91a:	0001                	nop
    b91c:	02fa0403          	lb	s0,47(s4)
    b920:	00090003          	lb	zero,0(s2)
    b924:	0100                	addi	s0,sp,128
    b926:	0300                	addi	s0,sp,384
    b928:	d004                	sw	s1,32(s0)
    b92a:	0301                	addi	t1,t1,0
    b92c:	0900                	addi	s0,sp,144
    b92e:	0010                	0x10
    b930:	0001                	nop
    b932:	01ea0403          	lb	s0,30(s4)
    b936:	08090003          	lb	zero,128(s2)
    b93a:	0100                	addi	s0,sp,128
    b93c:	0300                	addi	s0,sp,384
    b93e:	f704                	fsw	fs1,40(a4)
    b940:	0301                	addi	t1,t1,0
    b942:	0900                	addi	s0,sp,144
    b944:	0010                	0x10
    b946:	0001                	nop
    b948:	01fe0403          	lb	s0,31(t3)
    b94c:	0306                	slli	t1,t1,0x1
    b94e:	0900                	addi	s0,sp,144
    b950:	0014                	0x14
    b952:	0001                	nop
    b954:	02810403          	lb	s0,40(sp)
    b958:	0c090003          	lb	zero,192(s2)
    b95c:	0100                	addi	s0,sp,128
    b95e:	0300                	addi	s0,sp,384
    b960:	8104                	0x8104
    b962:	0602                	c.slli64	a2
    b964:	0c090003          	lb	zero,192(s2)
    b968:	0100                	addi	s0,sp,128
    b96a:	0300                	addi	s0,sp,384
    b96c:	f504                	fsw	fs1,40(a0)
    b96e:	0601                	addi	a2,a2,0
    b970:	00090003          	lb	zero,0(s2)
    b974:	0100                	addi	s0,sp,128
    b976:	0300                	addi	s0,sp,384
    b978:	f504                	fsw	fs1,40(a0)
    b97a:	0601                	addi	a2,a2,0
    b97c:	08090003          	lb	zero,128(s2)
    b980:	0100                	addi	s0,sp,128
    b982:	0300                	addi	s0,sp,384
    b984:	ce04                	sw	s1,24(a2)
    b986:	0301                	addi	t1,t1,0
    b988:	0900                	addi	s0,sp,144
    b98a:	000c                	0xc
    b98c:	0001                	nop
    b98e:	02860403          	lb	s0,40(a2)
    b992:	04090003          	lb	zero,64(s2)
    b996:	0100                	addi	s0,sp,128
    b998:	0300                	addi	s0,sp,384
    b99a:	8604                	0x8604
    b99c:	0302                	c.slli64	t1
    b99e:	0900                	addi	s0,sp,144
    b9a0:	0004                	0x4
    b9a2:	0001                	nop
    b9a4:	02860403          	lb	s0,40(a2)
    b9a8:	00090003          	lb	zero,0(s2)
    b9ac:	0100                	addi	s0,sp,128
    b9ae:	0300                	addi	s0,sp,384
    b9b0:	8604                	0x8604
    b9b2:	0302                	c.slli64	t1
    b9b4:	0900                	addi	s0,sp,144
    b9b6:	0000                	unimp
    b9b8:	0001                	nop
    b9ba:	02880403          	lb	s0,40(a6)
    b9be:	04090003          	lb	zero,64(s2)
    b9c2:	0100                	addi	s0,sp,128
    b9c4:	0300                	addi	s0,sp,384
    b9c6:	8b04                	0x8b04
    b9c8:	0302                	c.slli64	t1
    b9ca:	0900                	addi	s0,sp,144
    b9cc:	0008                	0x8
    b9ce:	0001                	nop
    b9d0:	028b0403          	lb	s0,40(s6)
    b9d4:	00090003          	lb	zero,0(s2)
    b9d8:	0100                	addi	s0,sp,128
    b9da:	0300                	addi	s0,sp,384
    b9dc:	8b04                	0x8b04
    b9de:	0302                	c.slli64	t1
    b9e0:	0900                	addi	s0,sp,144
    b9e2:	0004                	0x4
    b9e4:	0001                	nop
    b9e6:	02940403          	lb	s0,41(s0)
    b9ea:	04090003          	lb	zero,64(s2)
    b9ee:	0100                	addi	s0,sp,128
    b9f0:	0300                	addi	s0,sp,384
    b9f2:	9404                	0x9404
    b9f4:	0302                	c.slli64	t1
    b9f6:	0900                	addi	s0,sp,144
    b9f8:	0000                	unimp
    b9fa:	0001                	nop
    b9fc:	02940403          	lb	s0,41(s0)
    ba00:	00090003          	lb	zero,0(s2)
    ba04:	0100                	addi	s0,sp,128
    ba06:	0300                	addi	s0,sp,384
    ba08:	9404                	0x9404
    ba0a:	0302                	c.slli64	t1
    ba0c:	0900                	addi	s0,sp,144
    ba0e:	0004                	0x4
    ba10:	0001                	nop
    ba12:	02940403          	lb	s0,41(s0)
    ba16:	0c090003          	lb	zero,192(s2)
    ba1a:	0100                	addi	s0,sp,128
    ba1c:	0300                	addi	s0,sp,384
    ba1e:	9404                	0x9404
    ba20:	0302                	c.slli64	t1
    ba22:	0900                	addi	s0,sp,144
    ba24:	0000                	unimp
    ba26:	0001                	nop
    ba28:	02940403          	lb	s0,41(s0)
    ba2c:	00090003          	lb	zero,0(s2)
    ba30:	0100                	addi	s0,sp,128
    ba32:	0300                	addi	s0,sp,384
    ba34:	9504                	0x9504
    ba36:	0302                	c.slli64	t1
    ba38:	0900                	addi	s0,sp,144
    ba3a:	0008                	0x8
    ba3c:	0601                	addi	a2,a2,0
    ba3e:	08097f03          	0x8097f03
    ba42:	0100                	addi	s0,sp,128
    ba44:	08090103          	lb	sp,128(s2)
    ba48:	0100                	addi	s0,sp,128
    ba4a:	0300                	addi	s0,sp,384
    ba4c:	8904                	0x8904
    ba4e:	0602                	c.slli64	a2
    ba50:	08090003          	lb	zero,128(s2)
    ba54:	0100                	addi	s0,sp,128
    ba56:	0300                	addi	s0,sp,384
    ba58:	a304                	fsd	fs1,0(a4)
    ba5a:	0302                	c.slli64	t1
    ba5c:	0900                	addi	s0,sp,144
    ba5e:	0008                	0x8
    ba60:	0001                	nop
    ba62:	02ac0403          	lb	s0,42(s8)
    ba66:	0c090003          	lb	zero,192(s2)
    ba6a:	0100                	addi	s0,sp,128
    ba6c:	0300                	addi	s0,sp,384
    ba6e:	ad04                	fsd	fs1,24(a0)
    ba70:	0302                	c.slli64	t1
    ba72:	0900                	addi	s0,sp,144
    ba74:	0008                	0x8
    ba76:	0001                	nop
    ba78:	02af0403          	lb	s0,42(t5)
    ba7c:	08090003          	lb	zero,128(s2)
    ba80:	0100                	addi	s0,sp,128
    ba82:	0300                	addi	s0,sp,384
    ba84:	af04                	fsd	fs1,24(a4)
    ba86:	0302                	c.slli64	t1
    ba88:	0900                	addi	s0,sp,144
    ba8a:	0020                	addi	s0,sp,8
    ba8c:	0001                	nop
    ba8e:	02bd0403          	lb	s0,43(s10)
    ba92:	04090003          	lb	zero,64(s2)
    ba96:	0100                	addi	s0,sp,128
    ba98:	0300                	addi	s0,sp,384
    ba9a:	bd04                	fsd	fs1,56(a0)
    ba9c:	0302                	c.slli64	t1
    ba9e:	0900                	addi	s0,sp,144
    baa0:	0000                	unimp
    baa2:	0001                	nop
    baa4:	02bd0403          	lb	s0,43(s10)
    baa8:	00090003          	lb	zero,0(s2)
    baac:	0100                	addi	s0,sp,128
    baae:	0300                	addi	s0,sp,384
    bab0:	bd04                	fsd	fs1,56(a0)
    bab2:	0302                	c.slli64	t1
    bab4:	0900                	addi	s0,sp,144
    bab6:	0004                	0x4
    bab8:	0001                	nop
    baba:	02bd0403          	lb	s0,43(s10)
    babe:	0c090003          	lb	zero,192(s2)
    bac2:	0100                	addi	s0,sp,128
    bac4:	0300                	addi	s0,sp,384
    bac6:	bd04                	fsd	fs1,56(a0)
    bac8:	0302                	c.slli64	t1
    baca:	0900                	addi	s0,sp,144
    bacc:	0000                	unimp
    bace:	0001                	nop
    bad0:	02bd0403          	lb	s0,43(s10)
    bad4:	0306                	slli	t1,t1,0x1
    bad6:	097f                	0x97f
    bad8:	0000                	unimp
    bada:	0001                	nop
    badc:	02b00403          	lb	s0,43(zero) # 2b <_start+0x1b>
    bae0:	0306                	slli	t1,t1,0x1
    bae2:	0901                	addi	s2,s2,0
    bae4:	000c                	0xc
    bae6:	0001                	nop
    bae8:	02b70403          	lb	s0,43(a4) # 1a02b <RAM_SIZE+0xa02b>
    baec:	0306                	slli	t1,t1,0x1
    baee:	0900                	addi	s0,sp,144
    baf0:	0014                	0x14
    baf2:	0001                	nop
    baf4:	02ba0403          	lb	s0,43(s4)
    baf8:	0c090003          	lb	zero,192(s2)
    bafc:	0100                	addi	s0,sp,128
    bafe:	0300                	addi	s0,sp,384
    bb00:	ba04                	fsd	fs1,48(a2)
    bb02:	0602                	c.slli64	a2
    bb04:	0c090003          	lb	zero,192(s2)
    bb08:	0100                	addi	s0,sp,128
    bb0a:	0300                	addi	s0,sp,384
    bb0c:	ae04                	fsd	fs1,24(a2)
    bb0e:	0602                	c.slli64	a2
    bb10:	00090003          	lb	zero,0(s2)
    bb14:	0100                	addi	s0,sp,128
    bb16:	0300                	addi	s0,sp,384
    bb18:	ae04                	fsd	fs1,24(a2)
    bb1a:	0602                	c.slli64	a2
    bb1c:	08090003          	lb	zero,128(s2)
    bb20:	0100                	addi	s0,sp,128
    bb22:	0300                	addi	s0,sp,384
    bb24:	8704                	0x8704
    bb26:	0302                	c.slli64	t1
    bb28:	0900                	addi	s0,sp,144
    bb2a:	000c                	0xc
    bb2c:	0001                	nop
    bb2e:	02bf0403          	lb	s0,43(t5)
    bb32:	0c090003          	lb	zero,192(s2)
    bb36:	0100                	addi	s0,sp,128
    bb38:	0300                	addi	s0,sp,384
    bb3a:	c104                	sw	s1,0(a0)
    bb3c:	0302                	c.slli64	t1
    bb3e:	0900                	addi	s0,sp,144
    bb40:	000c                	0xc
    bb42:	0001                	nop
    bb44:	02c10403          	lb	s0,44(sp)
    bb48:	00090003          	lb	zero,0(s2)
    bb4c:	0100                	addi	s0,sp,128
    bb4e:	0300                	addi	s0,sp,384
    bb50:	c304                	sw	s1,0(a4)
    bb52:	0302                	c.slli64	t1
    bb54:	0900                	addi	s0,sp,144
    bb56:	0004                	0x4
    bb58:	0001                	nop
    bb5a:	02c30403          	lb	s0,44(t1)
    bb5e:	00090003          	lb	zero,0(s2)
    bb62:	0100                	addi	s0,sp,128
    bb64:	0306                	slli	t1,t1,0x1
    bb66:	097f                	0x97f
    bb68:	0004                	0x4
    bb6a:	0001                	nop
    bb6c:	02c40403          	lb	s0,44(s0)
    bb70:	0306                	slli	t1,t1,0x1
    bb72:	0901                	addi	s2,s2,0
    bb74:	0010                	0x10
    bb76:	0001                	nop
    bb78:	02cb0403          	lb	s0,44(s6)
    bb7c:	04090003          	lb	zero,64(s2)
    bb80:	0100                	addi	s0,sp,128
    bb82:	0300                	addi	s0,sp,384
    bb84:	cb04                	sw	s1,16(a4)
    bb86:	0302                	c.slli64	t1
    bb88:	0900                	addi	s0,sp,144
    bb8a:	0000                	unimp
    bb8c:	0001                	nop
    bb8e:	02cb0403          	lb	s0,44(s6)
    bb92:	00090003          	lb	zero,0(s2)
    bb96:	0100                	addi	s0,sp,128
    bb98:	0300                	addi	s0,sp,384
    bb9a:	cb04                	sw	s1,16(a4)
    bb9c:	0302                	c.slli64	t1
    bb9e:	0900                	addi	s0,sp,144
    bba0:	0000                	unimp
    bba2:	0001                	nop
    bba4:	02cb0403          	lb	s0,44(s6)
    bba8:	04090003          	lb	zero,64(s2)
    bbac:	0100                	addi	s0,sp,128
    bbae:	0300                	addi	s0,sp,384
    bbb0:	cb04                	sw	s1,16(a4)
    bbb2:	0302                	c.slli64	t1
    bbb4:	0900                	addi	s0,sp,144
    bbb6:	000c                	0xc
    bbb8:	0001                	nop
    bbba:	02cb0403          	lb	s0,44(s6)
    bbbe:	00090003          	lb	zero,0(s2)
    bbc2:	0100                	addi	s0,sp,128
    bbc4:	0300                	addi	s0,sp,384
    bbc6:	cb04                	sw	s1,16(a4)
    bbc8:	0302                	c.slli64	t1
    bbca:	0900                	addi	s0,sp,144
    bbcc:	0000                	unimp
    bbce:	0001                	nop
    bbd0:	02cb0403          	lb	s0,44(s6)
    bbd4:	00090003          	lb	zero,0(s2)
    bbd8:	0100                	addi	s0,sp,128
    bbda:	0300                	addi	s0,sp,384
    bbdc:	cd04                	sw	s1,24(a0)
    bbde:	0302                	c.slli64	t1
    bbe0:	0900                	addi	s0,sp,144
    bbe2:	000c                	0xc
    bbe4:	0001                	nop
    bbe6:	02cd0403          	lb	s0,44(s10)
    bbea:	00090003          	lb	zero,0(s2)
    bbee:	0100                	addi	s0,sp,128
    bbf0:	0300                	addi	s0,sp,384
    bbf2:	cd04                	sw	s1,24(a0)
    bbf4:	0302                	c.slli64	t1
    bbf6:	0900                	addi	s0,sp,144
    bbf8:	0000                	unimp
    bbfa:	0001                	nop
    bbfc:	02cd0403          	lb	s0,44(s10)
    bc00:	04090003          	lb	zero,64(s2)
    bc04:	0100                	addi	s0,sp,128
    bc06:	0300                	addi	s0,sp,384
    bc08:	cd04                	sw	s1,24(a0)
    bc0a:	0302                	c.slli64	t1
    bc0c:	0900                	addi	s0,sp,144
    bc0e:	000c                	0xc
    bc10:	0001                	nop
    bc12:	02cd0403          	lb	s0,44(s10)
    bc16:	00090003          	lb	zero,0(s2)
    bc1a:	0100                	addi	s0,sp,128
    bc1c:	0300                	addi	s0,sp,384
    bc1e:	cd04                	sw	s1,24(a0)
    bc20:	0302                	c.slli64	t1
    bc22:	0900                	addi	s0,sp,144
    bc24:	0000                	unimp
    bc26:	0001                	nop
    bc28:	02ce0403          	lb	s0,44(t3)
    bc2c:	04090003          	lb	zero,64(s2)
    bc30:	0100                	addi	s0,sp,128
    bc32:	0306                	slli	t1,t1,0x1
    bc34:	0900                	addi	s0,sp,144
    bc36:	0008                	0x8
    bc38:	0001                	nop
    bc3a:	02e10403          	lb	s0,46(sp)
    bc3e:	0306                	slli	t1,t1,0x1
    bc40:	0900                	addi	s0,sp,144
    bc42:	000c                	0xc
    bc44:	0001                	nop
    bc46:	02e10403          	lb	s0,46(sp)
    bc4a:	00090003          	lb	zero,0(s2)
    bc4e:	0100                	addi	s0,sp,128
    bc50:	0300                	addi	s0,sp,384
    bc52:	e104                	fsw	fs1,0(a0)
    bc54:	0302                	c.slli64	t1
    bc56:	0900                	addi	s0,sp,144
    bc58:	0000                	unimp
    bc5a:	0001                	nop
    bc5c:	02e10403          	lb	s0,46(sp)
    bc60:	00090003          	lb	zero,0(s2)
    bc64:	0100                	addi	s0,sp,128
    bc66:	0300                	addi	s0,sp,384
    bc68:	e104                	fsw	fs1,0(a0)
    bc6a:	0302                	c.slli64	t1
    bc6c:	0900                	addi	s0,sp,144
    bc6e:	0000                	unimp
    bc70:	0001                	nop
    bc72:	02e10403          	lb	s0,46(sp)
    bc76:	00090003          	lb	zero,0(s2)
    bc7a:	0100                	addi	s0,sp,128
    bc7c:	0300                	addi	s0,sp,384
    bc7e:	e104                	fsw	fs1,0(a0)
    bc80:	0302                	c.slli64	t1
    bc82:	0900                	addi	s0,sp,144
    bc84:	0000                	unimp
    bc86:	0001                	nop
    bc88:	02e10403          	lb	s0,46(sp)
    bc8c:	00090003          	lb	zero,0(s2)
    bc90:	0100                	addi	s0,sp,128
    bc92:	0300                	addi	s0,sp,384
    bc94:	e204                	fsw	fs1,0(a2)
    bc96:	0302                	c.slli64	t1
    bc98:	0900                	addi	s0,sp,144
    bc9a:	0004                	0x4
    bc9c:	0601                	addi	a2,a2,0
    bc9e:	04097f03          	0x4097f03
    bca2:	0100                	addi	s0,sp,128
    bca4:	08090103          	lb	sp,128(s2)
    bca8:	0100                	addi	s0,sp,128
    bcaa:	0300                	addi	s0,sp,384
    bcac:	e304                	fsw	fs1,0(a4)
    bcae:	0602                	c.slli64	a2
    bcb0:	08090003          	lb	zero,128(s2)
    bcb4:	0100                	addi	s0,sp,128
    bcb6:	0300                	addi	s0,sp,384
    bcb8:	c004                	sw	s1,0(s0)
    bcba:	0302                	c.slli64	t1
    bcbc:	0900                	addi	s0,sp,144
    bcbe:	0008                	0x8
    bcc0:	0001                	nop
    bcc2:	02c00403          	lb	s0,44(zero) # 2c <_start+0x1c>
    bcc6:	00090003          	lb	zero,0(s2)
    bcca:	0100                	addi	s0,sp,128
    bccc:	0300                	addi	s0,sp,384
    bcce:	c004                	sw	s1,0(s0)
    bcd0:	0302                	c.slli64	t1
    bcd2:	0900                	addi	s0,sp,144
    bcd4:	0000                	unimp
    bcd6:	0001                	nop
    bcd8:	02c00403          	lb	s0,44(zero) # 2c <_start+0x1c>
    bcdc:	00090003          	lb	zero,0(s2)
    bce0:	0100                	addi	s0,sp,128
    bce2:	0300                	addi	s0,sp,384
    bce4:	c004                	sw	s1,0(s0)
    bce6:	0302                	c.slli64	t1
    bce8:	0900                	addi	s0,sp,144
    bcea:	0004                	0x4
    bcec:	0001                	nop
    bcee:	02c00403          	lb	s0,44(zero) # 2c <_start+0x1c>
    bcf2:	0c090003          	lb	zero,192(s2)
    bcf6:	0100                	addi	s0,sp,128
    bcf8:	0300                	addi	s0,sp,384
    bcfa:	c004                	sw	s1,0(s0)
    bcfc:	0302                	c.slli64	t1
    bcfe:	0900                	addi	s0,sp,144
    bd00:	0000                	unimp
    bd02:	0001                	nop
    bd04:	02c00403          	lb	s0,44(zero) # 2c <_start+0x1c>
    bd08:	00090003          	lb	zero,0(s2)
    bd0c:	0100                	addi	s0,sp,128
    bd0e:	0300                	addi	s0,sp,384
    bd10:	c004                	sw	s1,0(s0)
    bd12:	0302                	c.slli64	t1
    bd14:	0900                	addi	s0,sp,144
    bd16:	0000                	unimp
    bd18:	0001                	nop
    bd1a:	02f30403          	lb	s0,47(t1)
    bd1e:	0c090003          	lb	zero,192(s2)
    bd22:	0100                	addi	s0,sp,128
    bd24:	0300                	addi	s0,sp,384
    bd26:	f304                	fsw	fs1,32(a4)
    bd28:	0302                	c.slli64	t1
    bd2a:	0900                	addi	s0,sp,144
    bd2c:	0000                	unimp
    bd2e:	0001                	nop
    bd30:	02f30403          	lb	s0,47(t1)
    bd34:	00090003          	lb	zero,0(s2)
    bd38:	0100                	addi	s0,sp,128
    bd3a:	0300                	addi	s0,sp,384
    bd3c:	f304                	fsw	fs1,32(a4)
    bd3e:	0302                	c.slli64	t1
    bd40:	0900                	addi	s0,sp,144
    bd42:	0004                	0x4
    bd44:	0001                	nop
    bd46:	02f30403          	lb	s0,47(t1)
    bd4a:	0c090003          	lb	zero,192(s2)
    bd4e:	0100                	addi	s0,sp,128
    bd50:	0300                	addi	s0,sp,384
    bd52:	f304                	fsw	fs1,32(a4)
    bd54:	0302                	c.slli64	t1
    bd56:	0900                	addi	s0,sp,144
    bd58:	0000                	unimp
    bd5a:	0001                	nop
    bd5c:	02f30403          	lb	s0,47(t1)
    bd60:	00090003          	lb	zero,0(s2)
    bd64:	0100                	addi	s0,sp,128
    bd66:	0300                	addi	s0,sp,384
    bd68:	fc04                	fsw	fs1,56(s0)
    bd6a:	0302                	c.slli64	t1
    bd6c:	0900                	addi	s0,sp,144
    bd6e:	0004                	0x4
    bd70:	0001                	nop
    bd72:	02fc0403          	lb	s0,47(s8)
    bd76:	00090003          	lb	zero,0(s2)
    bd7a:	0100                	addi	s0,sp,128
    bd7c:	0300                	addi	s0,sp,384
    bd7e:	ff04                	fsw	fs1,56(a4)
    bd80:	0302                	c.slli64	t1
    bd82:	0900                	addi	s0,sp,144
    bd84:	0004                	0x4
    bd86:	0001                	nop
    bd88:	02ff0403          	lb	s0,47(t5)
    bd8c:	00090003          	lb	zero,0(s2)
    bd90:	0100                	addi	s0,sp,128
    bd92:	0300                	addi	s0,sp,384
    bd94:	ff04                	fsw	fs1,56(a4)
    bd96:	0302                	c.slli64	t1
    bd98:	0900                	addi	s0,sp,144
    bd9a:	0000                	unimp
    bd9c:	0001                	nop
    bd9e:	02ff0403          	lb	s0,47(t5)
    bda2:	00090003          	lb	zero,0(s2)
    bda6:	0100                	addi	s0,sp,128
    bda8:	0300                	addi	s0,sp,384
    bdaa:	ff04                	fsw	fs1,56(a4)
    bdac:	0302                	c.slli64	t1
    bdae:	0900                	addi	s0,sp,144
    bdb0:	0008                	0x8
    bdb2:	0001                	nop
    bdb4:	038d0403          	lb	s0,56(s10)
    bdb8:	00090003          	lb	zero,0(s2)
    bdbc:	0100                	addi	s0,sp,128
    bdbe:	0300                	addi	s0,sp,384
    bdc0:	8d04                	0x8d04
    bdc2:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    bdc6:	0000                	unimp
    bdc8:	0001                	nop
    bdca:	038d0403          	lb	s0,56(s10)
    bdce:	04090003          	lb	zero,64(s2)
    bdd2:	0100                	addi	s0,sp,128
    bdd4:	0300                	addi	s0,sp,384
    bdd6:	9304                	0x9304
    bdd8:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    bddc:	0008                	0x8
    bdde:	0001                	nop
    bde0:	03930403          	lb	s0,57(t1)
    bde4:	00090003          	lb	zero,0(s2)
    bde8:	0100                	addi	s0,sp,128
    bdea:	0300                	addi	s0,sp,384
    bdec:	9304                	0x9304
    bdee:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    bdf2:	0014                	0x14
    bdf4:	0001                	nop
    bdf6:	03970403          	lb	s0,57(a4)
    bdfa:	04090003          	lb	zero,64(s2)
    bdfe:	0100                	addi	s0,sp,128
    be00:	0300                	addi	s0,sp,384
    be02:	9804                	0x9804
    be04:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    be08:	0004                	0x4
    be0a:	0001                	nop
    be0c:	03980403          	lb	s0,57(a6)
    be10:	08090003          	lb	zero,128(s2)
    be14:	0100                	addi	s0,sp,128
    be16:	0300                	addi	s0,sp,384
    be18:	9a04                	0x9a04
    be1a:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    be1e:	0008                	0x8
    be20:	0001                	nop
    be22:	039a0403          	lb	s0,57(s4)
    be26:	20090003          	lb	zero,512(s2)
    be2a:	0100                	addi	s0,sp,128
    be2c:	0300                	addi	s0,sp,384
    be2e:	a604                	fsd	fs1,8(a2)
    be30:	00030603          	lb	a2,0(t1)
    be34:	0409                	addi	s0,s0,2
    be36:	0100                	addi	s0,sp,128
    be38:	0300                	addi	s0,sp,384
    be3a:	f404                	fsw	fs1,40(s0)
    be3c:	0602                	c.slli64	a2
    be3e:	08090003          	lb	zero,128(s2)
    be42:	0100                	addi	s0,sp,128
    be44:	0306                	slli	t1,t1,0x1
    be46:	0900                	addi	s0,sp,144
    be48:	000c                	0xc
    be4a:	0001                	nop
    be4c:	03860403          	lb	s0,56(a2)
    be50:	0306                	slli	t1,t1,0x1
    be52:	0900                	addi	s0,sp,144
    be54:	0008                	0x8
    be56:	0001                	nop
    be58:	03860403          	lb	s0,56(a2)
    be5c:	00090003          	lb	zero,0(s2)
    be60:	0100                	addi	s0,sp,128
    be62:	0300                	addi	s0,sp,384
    be64:	8604                	0x8604
    be66:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    be6a:	0000                	unimp
    be6c:	0001                	nop
    be6e:	03860403          	lb	s0,56(a2)
    be72:	00090003          	lb	zero,0(s2)
    be76:	0100                	addi	s0,sp,128
    be78:	0300                	addi	s0,sp,384
    be7a:	8604                	0x8604
    be7c:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    be80:	0008                	0x8
    be82:	0001                	nop
    be84:	03860403          	lb	s0,56(a2)
    be88:	00090003          	lb	zero,0(s2)
    be8c:	0100                	addi	s0,sp,128
    be8e:	0300                	addi	s0,sp,384
    be90:	8f04                	0x8f04
    be92:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    be96:	0008                	0x8
    be98:	0001                	nop
    be9a:	038f0403          	lb	s0,56(t5)
    be9e:	08090003          	lb	zero,128(s2)
    bea2:	0100                	addi	s0,sp,128
    bea4:	0300                	addi	s0,sp,384
    bea6:	9b04                	0x9b04
    bea8:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    beac:	0008                	0x8
    beae:	0001                	nop
    beb0:	03a30403          	lb	s0,58(t1)
    beb4:	0306                	slli	t1,t1,0x1
    beb6:	0900                	addi	s0,sp,144
    beb8:	0014                	0x14
    beba:	0001                	nop
    bebc:	03a60403          	lb	s0,58(a2)
    bec0:	0c090003          	lb	zero,192(s2)
    bec4:	0100                	addi	s0,sp,128
    bec6:	0300                	addi	s0,sp,384
    bec8:	a604                	fsd	fs1,8(a2)
    beca:	00030603          	lb	a2,0(t1)
    bece:	0c09                	addi	s8,s8,2
    bed0:	0100                	addi	s0,sp,128
    bed2:	0300                	addi	s0,sp,384
    bed4:	9904                	0x9904
    bed6:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    beda:	0008                	0x8
    bedc:	0001                	nop
    bede:	03990403          	lb	s0,57(s2)
    bee2:	04090003          	lb	zero,64(s2)
    bee6:	0100                	addi	s0,sp,128
    bee8:	0306                	slli	t1,t1,0x1
    beea:	097f                	0x97f
    beec:	0010                	0x10
    beee:	0301                	addi	t1,t1,0
    bef0:	0901                	addi	s2,s2,0
    bef2:	0008                	0x8
    bef4:	0301                	addi	t1,t1,0
    bef6:	097f                	0x97f
    bef8:	0008                	0x8
    befa:	0001                	nop
    befc:	0402                	c.slli64	s0
    befe:	0203062f          	vamoaddei8.v	zero,(t1),v0,v12
    bf02:	1809                	addi	a6,a6,-30
    bf04:	0100                	addi	s0,sp,128
    bf06:	0200                	addi	s0,sp,256
    bf08:	2f04                	fld	fs1,24(a4)
    bf0a:	00090003          	lb	zero,0(s2)
    bf0e:	0100                	addi	s0,sp,128
    bf10:	0200                	addi	s0,sp,256
    bf12:	2f04                	fld	fs1,24(a4)
    bf14:	00090003          	lb	zero,0(s2)
    bf18:	0100                	addi	s0,sp,128
    bf1a:	0200                	addi	s0,sp,256
    bf1c:	3f04                	fld	fs1,56(a4)
    bf1e:	0c090003          	lb	zero,192(s2)
    bf22:	0100                	addi	s0,sp,128
    bf24:	0200                	addi	s0,sp,256
    bf26:	3f04                	fld	fs1,56(a4)
    bf28:	00090003          	lb	zero,0(s2)
    bf2c:	0100                	addi	s0,sp,128
    bf2e:	0200                	addi	s0,sp,256
    bf30:	3f04                	fld	fs1,56(a4)
    bf32:	04090003          	lb	zero,64(s2)
    bf36:	0100                	addi	s0,sp,128
    bf38:	0306                	slli	t1,t1,0x1
    bf3a:	0900                	addi	s0,sp,144
    bf3c:	0008                	0x8
    bf3e:	0001                	nop
    bf40:	0402                	c.slli64	s0
    bf42:	0003064f          	fnmadd.s	fa2,ft6,ft0,ft0,rne
    bf46:	0c09                	addi	s8,s8,2
    bf48:	0100                	addi	s0,sp,128
    bf4a:	0200                	addi	s0,sp,256
    bf4c:	4f04                	lw	s1,24(a4)
    bf4e:	00090003          	lb	zero,0(s2)
    bf52:	0100                	addi	s0,sp,128
    bf54:	0200                	addi	s0,sp,256
    bf56:	4f04                	lw	s1,24(a4)
    bf58:	00090003          	lb	zero,0(s2)
    bf5c:	0100                	addi	s0,sp,128
    bf5e:	0200                	addi	s0,sp,256
    bf60:	4f04                	lw	s1,24(a4)
    bf62:	0c090003          	lb	zero,192(s2)
    bf66:	0100                	addi	s0,sp,128
    bf68:	0200                	addi	s0,sp,256
    bf6a:	4f04                	lw	s1,24(a4)
    bf6c:	08090003          	lb	zero,128(s2)
    bf70:	0100                	addi	s0,sp,128
    bf72:	0200                	addi	s0,sp,256
    bf74:	5004                	lw	s1,32(s0)
    bf76:	0306                	slli	t1,t1,0x1
    bf78:	0900                	addi	s0,sp,144
    bf7a:	0004                	0x4
    bf7c:	0301                	addi	t1,t1,0
    bf7e:	0900                	addi	s0,sp,144
    bf80:	000c                	0xc
    bf82:	0001                	nop
    bf84:	0402                	c.slli64	s0
    bf86:	065a                	slli	a2,a2,0x16
    bf88:	0c090003          	lb	zero,192(s2)
    bf8c:	0100                	addi	s0,sp,128
    bf8e:	0200                	addi	s0,sp,256
    bf90:	5a04                	lw	s1,48(a2)
    bf92:	00090003          	lb	zero,0(s2)
    bf96:	0100                	addi	s0,sp,128
    bf98:	0200                	addi	s0,sp,256
    bf9a:	5a04                	lw	s1,48(a2)
    bf9c:	00090003          	lb	zero,0(s2)
    bfa0:	0100                	addi	s0,sp,128
    bfa2:	0200                	addi	s0,sp,256
    bfa4:	5a04                	lw	s1,48(a2)
    bfa6:	00090003          	lb	zero,0(s2)
    bfaa:	0100                	addi	s0,sp,128
    bfac:	0200                	addi	s0,sp,256
    bfae:	5a04                	lw	s1,48(a2)
    bfb0:	00090003          	lb	zero,0(s2)
    bfb4:	0100                	addi	s0,sp,128
    bfb6:	0200                	addi	s0,sp,256
    bfb8:	5a04                	lw	s1,48(a2)
    bfba:	00090003          	lb	zero,0(s2)
    bfbe:	0100                	addi	s0,sp,128
    bfc0:	0200                	addi	s0,sp,256
    bfc2:	5a04                	lw	s1,48(a2)
    bfc4:	00090003          	lb	zero,0(s2)
    bfc8:	0100                	addi	s0,sp,128
    bfca:	0200                	addi	s0,sp,256
    bfcc:	5a04                	lw	s1,48(a2)
    bfce:	00090003          	lb	zero,0(s2)
    bfd2:	0100                	addi	s0,sp,128
    bfd4:	0200                	addi	s0,sp,256
    bfd6:	5a04                	lw	s1,48(a2)
    bfd8:	00090003          	lb	zero,0(s2)
    bfdc:	0100                	addi	s0,sp,128
    bfde:	0105                	addi	sp,sp,1
    bfe0:	0200                	addi	s0,sp,256
    bfe2:	5a04                	lw	s1,48(a2)
    bfe4:	0306                	slli	t1,t1,0x1
    bfe6:	0904                	addi	s1,sp,144
    bfe8:	000c                	0xc
    bfea:	0501                	addi	a0,a0,0
    bfec:	04020003          	lb	zero,64(tp) # 40 <_start+0x30>
    bff0:	035a                	slli	t1,t1,0x16
    bff2:	097c                	addi	a5,sp,156
    bff4:	0008                	0x8
    bff6:	0001                	nop
    bff8:	0402                	c.slli64	s0
    bffa:	065a                	slli	a2,a2,0x16
    bffc:	14090003          	lb	zero,320(s2)
    c000:	0100                	addi	s0,sp,128
    c002:	0200                	addi	s0,sp,256
    c004:	5a04                	lw	s1,48(a2)
    c006:	00090003          	lb	zero,0(s2)
    c00a:	0100                	addi	s0,sp,128
    c00c:	0200                	addi	s0,sp,256
    c00e:	5a04                	lw	s1,48(a2)
    c010:	00090103          	lb	sp,0(s2)
    c014:	0100                	addi	s0,sp,128
    c016:	0200                	addi	s0,sp,256
    c018:	5a04                	lw	s1,48(a2)
    c01a:	00090003          	lb	zero,0(s2)
    c01e:	0100                	addi	s0,sp,128
    c020:	0200                	addi	s0,sp,256
    c022:	5a04                	lw	s1,48(a2)
    c024:	00090003          	lb	zero,0(s2)
    c028:	0100                	addi	s0,sp,128
    c02a:	0200                	addi	s0,sp,256
    c02c:	5a04                	lw	s1,48(a2)
    c02e:	00090203          	lb	tp,0(s2)
    c032:	0100                	addi	s0,sp,128
    c034:	0105                	addi	sp,sp,1
    c036:	0200                	addi	s0,sp,256
    c038:	5a04                	lw	s1,48(a2)
    c03a:	0306                	slli	t1,t1,0x1
    c03c:	0901                	addi	s2,s2,0
    c03e:	0000                	unimp
    c040:	0501                	addi	a0,a0,0
    c042:	097a0303          	lb	t1,151(s4)
    c046:	0020                	addi	s0,sp,8
    c048:	0301                	addi	t1,t1,0
    c04a:	0901                	addi	s2,s2,0
    c04c:	0008                	0x8
    c04e:	0901                	addi	s2,s2,0
    c050:	003c                	addi	a5,sp,8
    c052:	0100                	addi	s0,sp,128
    c054:	01              	Address 0x000000000000c054 is out of bounds.


Disassembly of section .debug_info:

00000000 <.debug_info>:
lui     sp,%hi(__stack_top)                                             
       0:	0022                	c.slli	zero,0x8
       2:	0000                	unimp
addi    sp,sp,%lo(__stack_top)
       4:	0002                	c.slli64	zero
       6:	0000                	unimp
jal   zero, _start
       8:	0000                	unimp
       a:	0104                	addi	s1,sp,128
	...
      14:	000c                	0xc
      16:	0000                	unimp
      18:	0000                	unimp
      1a:	0000                	unimp
      1c:	0019                	c.nop	6
      1e:	0000                	unimp
      20:	0030                	addi	a2,sp,8
      22:	0000                	unimp
      24:	8001                	c.srli64	s0
      26:	0d08                	addi	a0,sp,656
      28:	0000                	unimp
      2a:	0004                	0x4
      2c:	0014                	0x14
      2e:	0000                	unimp
      30:	0104                	addi	s1,sp,128
      32:	0082                	c.slli64	ra
      34:	0000                	unimp
      36:	600c                	flw	fa1,0(s0)
      38:	0000                	unimp
      3a:	1900                	addi	s0,sp,176
      3c:	0000                	unimp
      3e:	c400                	sw	s0,8(s0)
      40:	0000                	unimp
      42:	9c00                	0x9c00
      44:	0008                	0x8
      46:	5300                	lw	s0,32(a4)
      48:	0000                	unimp
      4a:	0200                	addi	s0,sp,256
      4c:	0504                	addi	s1,sp,640
      4e:	6e69                	lui	t3,0x1a
      50:	0074                	addi	a3,sp,12
      52:	c7070403          	lb	s0,-912(a4)
      56:	0008                	0x8
      58:	0300                	addi	s0,sp,384
      5a:	0508                	addi	a0,sp,640
      5c:	000001bb          	0x1bb
      60:	87041003          	lh	zero,-1936(s0)
      64:	0011                	c.nop	4
      66:	0400                	addi	s0,sp,512
      68:	00000303          	lb	t1,0(zero) # 0 <RAM_START_ADDRESS>
      6c:	5f02                	lw	t5,32(sp)
      6e:	4d18                	lw	a4,24(a0)
      70:	0000                	unimp
      72:	0300                	addi	s0,sp,384
      74:	0502                	c.slli64	a0
      76:	00c9                	addi	ra,ra,18
      78:	0000                	unimp
      7a:	3504                	fld	fs1,40(a0)
      7c:	0002                	c.slli64	zero
      7e:	0200                	addi	s0,sp,256
      80:	1860                	addi	s0,sp,60
      82:	0060                	addi	s0,sp,12
      84:	0000                	unimp
      86:	ba070203          	lb	tp,-1120(a4)
      8a:	0002                	c.slli64	zero
      8c:	0400                	addi	s0,sp,512
      8e:	0118                	addi	a4,sp,128
      90:	0000                	unimp
      92:	6102                	flw	ft2,0(sp)
      94:	2518                	fld	fa4,8(a0)
      96:	0000                	unimp
      98:	0300                	addi	s0,sp,384
      9a:	0408                	addi	a0,sp,512
      9c:	118c                	addi	a1,sp,224
      9e:	0000                	unimp
      a0:	f504                	fsw	fs1,40(a0)
      a2:	0000                	unimp
      a4:	0200                	addi	s0,sp,256
      a6:	00861863          	bne	a2,s0,b6 <frame_dummy+0x12>
      aa:	0000                	unimp
      ac:	62080103          	lb	sp,1568(a6)
      b0:	0002                	c.slli64	zero
      b2:	0400                	addi	s0,sp,512
      b4:	000003b3          	add	t2,zero,zero
      b8:	6402                	flw	fs0,0(sp)
      ba:	2c18                	fld	fa4,24(s0)
      bc:	0000                	unimp
      be:	0500                	addi	s0,sp,640
      c0:	0000034b          	fnmsub.s	ft6,ft0,ft0,ft0,rne
    if (res == NULL)
      c4:	0201                	addi	tp,tp,0
      c6:	10c4                	addi	s1,sp,100
    return a->idx - b->idx;
      c8:	00b4                	addi	a3,sp,72
      ca:	0000                	unimp
      cc:	af06                	fsd	ft1,408(sp)
      ce:	0001                	nop
}
      d0:	0200                	addi	s0,sp,256
      d2:	0bc6                	slli	s7,s7,0x11
      d4:	007a                	c.slli	zero,0x1e
      d6:	0000                	unimp
        a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16 >> 8));
      d8:	0000                	unimp
      da:	ba04                	fsd	fs1,48(a2)
      dc:	02000003          	lb	zero,32(zero) # 20 <_start+0x10>
      e0:	009903c7          	fmsub.s	ft7,fs2,fs1,ft0,rne
      e4:	0000                	unimp
      e6:	1405                	addi	s0,s0,-31
      e8:	0002                	c.slli64	zero
      ea:	0400                	addi	s0,sp,512
      ec:	e8105b03          	lhu	s6,-383(zero) # fffffe81 <RAM_SIZE+0xfffefe81>
      f0:	0000                	unimp
      f2:	0600                	addi	s0,sp,768
        b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16 >> 8));
      f4:	0000035b          	0x35b
    return a->idx - b->idx;
      f8:	410c5d03          	lhu	s10,1040(s8)
        b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16 >> 8));
      fc:	0000                	unimp
      fe:	0000                	unimp
     100:	78646907          	vlsseg4e512.v	v18,(s0),t1,v0.t
     104:	0300                	addi	s0,sp,384
     106:	0c5e                	slli	s8,s8,0x17
     108:	0041                	c.nop	16
     10a:	0000                	unimp
     10c:	0002                	c.slli64	zero
     10e:	9904                	0x9904
     110:	0002                	c.slli64	zero
     112:	0300                	addi	s0,sp,384
    return a->idx - b->idx;
     114:	035f 00c0 0000      	0xc0035f
}
     11a:	4a05                	li	s4,1
     11c:	0000                	unimp
     11e:	0800                	addi	s0,sp,16
{
     120:	1c106103          	0x1c106103
     124:	0001                	nop
     126:	0600                	addi	s0,sp,768
    ee_s16 data = *pdata;
     128:	03cd                	addi	t2,t2,19
     12a:	0000                	unimp
{
     12c:	1c196303          	0x1c196303
     130:	0001                	nop
     132:	0000                	unimp
          & 1;  /* bit 7 indicates if the function result has been cached */
     134:	5c06                	lw	s8,96(sp)
     136:	0001                	nop
{
     138:	0300                	addi	s0,sp,384
     13a:	1964                	addi	s1,sp,188
     13c:	0122                	slli	sp,sp,0x8
     13e:	0000                	unimp
    if (optype) /* if cached, use cache */
     140:	0004                	0x4
     142:	0408                	addi	a0,sp,512
     144:	00f4                	addi	a3,sp,76
     146:	0000                	unimp
}
     148:	0408                	addi	a0,sp,512
     14a:	00c0                	addi	s0,sp,68
        return (data & 0x007f);
     14c:	0000                	unimp
     14e:	5604                	lw	s1,40(a2)
}
     150:	0000                	unimp
     152:	0300                	addi	s0,sp,384
     154:	0365                	addi	t1,t1,25
     156:	00f4                	addi	a3,sp,76
     158:	0000                	unimp
     15a:	1104                	addi	s1,sp,160
     15c:	0001                	nop
     15e:	0300                	addi	s0,sp,384
     160:	106a                	c.slli	zero,0x3a
     162:	0041                	c.nop	16
     164:	0000                	unimp
     166:	d304                	sw	s1,32(a4)
        ee_s16 flag = data & 0x7; /* bits 0-2 is type of function to perform */
     168:	0002                	c.slli64	zero
     16a:	0300                	addi	s0,sp,384
               & 0xf);       /* bits 3-6 is specific data for the operation */
     16c:	0067106b          	0x67106b
        ee_s16 dtype
     170:	0000                	unimp
     172:	7305                	lui	t1,0xfffe1
        dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
     174:	10000003          	lb	zero,256(zero) # 100 <cmp_idx+0x3c>
        ee_s16 flag = data & 0x7; /* bits 0-2 is type of function to perform */
     178:	86107103          	0x86107103
                retval = core_bench_state(res->size,
     17c:	0001                	nop
     17e:	0700                	addi	s0,sp,896
     180:	004e                	c.slli	zero,0x13
     182:	250d7303          	0x250d7303
        dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
     186:	0000                	unimp
        switch (flag)
     188:	0000                	unimp
     18a:	03004107          	flq	ft2,48(zero) # 30 <_start+0x20>
     18e:	0d74                	addi	a3,sp,668
     190:	0186                	slli	gp,gp,0x1
     192:	0000                	unimp
        res->crc = crcu16(retval, res->crc);
     194:	0704                	addi	s1,sp,896
     196:	0042                	c.slli	zero,0x10
     198:	860d7503          	0x860d7503
     19c:	0001                	nop
     19e:	0800                	addi	s0,sp,16
     1a0:	03004307          	flq	ft6,48(zero) # 30 <_start+0x20>
     1a4:	0d76                	slli	s10,s10,0x1d
     1a6:	018c                	addi	a1,sp,192
     1a8:	0000                	unimp
     1aa:	000c                	0xc
        *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
     1ac:	0408                	addi	a0,sp,512
     1ae:	0134                	addi	a3,sp,136
        retval &= 0x007f;
     1b0:	0000                	unimp
     1b2:	0408                	addi	a0,sp,512
        *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
     1b4:	0140                	addi	s0,sp,132
     1b6:	0000                	unimp
        res->crc = crcu16(retval, res->crc);
     1b8:	8704                	0x8704
     1ba:	0002                	c.slli64	zero
        *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
     1bc:	0300                	addi	s0,sp,384
     1be:	014c0377          	0x14c0377
     1c2:	0000                	unimp
}
     1c4:	4d05                	li	s10,1
     1c6:	0001                	nop
     1c8:	4400                	lw	s0,8(s0)
     1ca:	6f108903          	lb	s2,1777(ra)
     1ce:	0002                	c.slli64	zero
     1d0:	0600                	addi	s0,sp,768
     1d2:	0000017b          	0x17b
     1d6:	41198c03          	lb	s8,1041(s3)
     1da:	0000                	unimp
     1dc:	0000                	unimp
     1de:	8106                	mv	sp,ra
                retval = core_bench_state(res->size,
     1e0:	0001                	nop
     1e2:	0300                	addi	s0,sp,384
     1e4:	198d                	addi	s3,s3,-29
     1e6:	0041                	c.nop	16
     1e8:	0000                	unimp
     1ea:	0602                	c.slli64	a2
     1ec:	00000187          	vle8.v	v3,(zero),v0.t
     1f0:	41198e03          	lb	t3,1041(s3)
     1f4:	0000                	unimp
     1f6:	0400                	addi	s0,sp,512
     1f8:	1a06                	slli	s4,s4,0x21
     1fa:	0005                	c.nop	1
     1fc:	0300                	addi	s0,sp,384
     1fe:	026f198f          	0x26f198f
     202:	0000                	unimp
     204:	0608                	addi	a0,sp,768
     206:	02b5                	addi	t0,t0,13
                if (res->crcstate == 0)
     208:	0000                	unimp
     20a:	8d199003          	lh	zero,-1839(s3)
                retval = core_bench_state(res->size,
     20e:	0000                	unimp
     210:	1800                	addi	s0,sp,48
     212:	6806                	flw	fa6,64(sp)
                if (res->crcstate == 0)
     214:	03000003          	lb	zero,48(zero) # 30 <_start+0x20>
        res->crc = crcu16(retval, res->crc);
     218:	1991                	addi	s3,s3,-28
     21a:	008d                	addi	ra,ra,3
                    res->crcstate = retval;
     21c:	0000                	unimp
     21e:	061c                	addi	a5,sp,768
     220:	0345                	addi	t1,t1,17
     222:	0000                	unimp
                retval = core_bench_matrix(&(res->mat), dtype, res->crc);
     224:	8d199203          	lh	tp,-1839(s3)
     228:	0000                	unimp
     22a:	2000                	fld	fs0,0(s0)
     22c:	ba06                	fsd	ft1,304(sp)
     22e:	0009                	c.nop	2
                if (res->crcmatrix == 0)
     230:	0300                	addi	s0,sp,384
     232:	011c1993          	slli	s3,s8,0x11
                retval = core_bench_matrix(&(res->mat), dtype, res->crc);
     236:	0000                	unimp
     238:	0724                	addi	s1,sp,904
     23a:	616d                	addi	sp,sp,240
                if (res->crcmatrix == 0)
     23c:	0074                	addi	a3,sp,12
     23e:	92199403          	lh	s0,-1759(s3)
        res->crc = crcu16(retval, res->crc);
     242:	0001                	nop
                    res->crcmatrix = retval;
     244:	2800                	fld	fs0,16(s0)
     246:	63726307          	0x63726307
     24a:	0300                	addi	s0,sp,384
        res->crc = crcu16(retval, res->crc);
     24c:	0c96                	slli	s9,s9,0x5
     24e:	0054                	addi	a3,sp,4
     250:	0000                	unimp
     252:	0638                	addi	a4,sp,776
{
     254:	018d                	addi	gp,gp,3
     256:	0000                	unimp
     258:	540c9703          	lh	a4,1344(s9)
     25c:	0000                	unimp
     25e:	3a00                	fld	fs0,48(a2)
    ee_s16 val1 = calc_func(&(a->data16), res);
     260:	2b06                	fld	fs6,64(sp)
     262:	03000003          	lb	zero,48(zero) # 30 <_start+0x20>
{
     266:	0c98                	addi	a4,sp,592
     268:	0054                	addi	a3,sp,4
     26a:	0000                	unimp
     26c:	063c                	addi	a5,sp,776
     26e:	01f9                	addi	gp,gp,30
    ee_s16 val1 = calc_func(&(a->data16), res);
     270:	0000                	unimp
     272:	540c9903          	lh	s2,1344(s9)
     276:	0000                	unimp
    ee_s16 val2 = calc_func(&(b->data16), res);
     278:	3e00                	fld	fs0,56(a2)
     27a:	72726507          	0x72726507
     27e:	0300                	addi	s0,sp,384
    ee_s16 val1 = calc_func(&(a->data16), res);
     280:	0c9a                	slli	s9,s9,0x6
     282:	0041                	c.nop	16
    ee_s16 val2 = calc_func(&(b->data16), res);
     284:	0000                	unimp
     286:	0640                	addi	s0,sp,772
}
     288:	0340                	addi	s0,sp,388
     28a:	0000                	unimp
     28c:	b4139c03          	lh	s8,-1215(t2)
     290:	0000                	unimp
     292:	4200                	lw	s0,0(a2)
     294:	0900                	addi	s0,sp,144
     296:	027f                	0x27f
     298:	0000                	unimp
     29a:	027f                	0x27f
     29c:	0000                	unimp
     29e:	2c0a                	fld	fs8,128(sp)
    to->data16 = from->data16;
     2a0:	0000                	unimp
     2a2:	0300                	addi	s0,sp,384
    to->idx    = from->idx;
     2a4:	0b00                	addi	s0,sp,400
     2a6:	0404                	addi	s1,sp,512
    to->data16 = from->data16;
     2a8:	0161                	addi	sp,sp,24
     2aa:	0000                	unimp
    to->idx    = from->idx;
     2ac:	9e039d03          	lh	s10,-1568(t2)
}
     2b0:	0001                	nop
     2b2:	0400                	addi	s0,sp,512
    if ((*memblock + 1) >= memblock_end)
     2b4:	01df 0000 4001      	0x4001000001df
     2ba:	9912                	add	s2,s2,tp
     2bc:	0002                	c.slli64	zero
     2be:	0800                	addi	s0,sp,16
    if ((*datablock + 1) >= datablock_end)
     2c0:	9f04                	0x9f04
     2c2:	0002                	c.slli64	zero
     2c4:	0c00                	addi	s0,sp,528
     2c6:	00000067          	jr	zero # 0 <RAM_START_ADDRESS>
     2ca:	02b8                	addi	a4,sp,328
    (*memblock)++;
     2cc:	0000                	unimp
     2ce:	b80d                	j	fffffb00 <RAM_SIZE+0xfffefb00>
    newitem->next      = insert_point->next;
     2d0:	0002                	c.slli64	zero
     2d2:	0d00                	addi	s0,sp,656
    to->data16 = from->data16;
     2d4:	02b8                	addi	a4,sp,328
     2d6:	0000                	unimp
    to->idx    = from->idx;
     2d8:	be0d                	j	fffffe0a <RAM_SIZE+0xfffefe0a>
     2da:	0002                	c.slli64	zero
    newitem->next      = insert_point->next;
     2dc:	0000                	unimp
     2de:	0408                	addi	a0,sp,512
    insert_point->next = newitem;
     2e0:	00e8                	addi	a0,sp,76
     2e2:	0000                	unimp
    newitem->info = *datablock;
     2e4:	0408                	addi	a0,sp,512
     2e6:	0281                	addi	t0,t0,0
    (*datablock)++;
     2e8:	0000                	unimp
     2ea:	390e                	fld	fs2,224(sp)
}
     2ec:	0001                	nop
     2ee:	0100                	addi	s0,sp,128
    (*datablock)++;
     2f0:	01f4                	addi	a3,sp,204
     2f2:	b001                	j	fffffaf2 <RAM_SIZE+0xfffefaf2>
     2f4:	d8000003          	lb	zero,-640(zero) # fffffd80 <RAM_SIZE+0xfffefd80>
    copy_info(newitem->info, info);
     2f8:	4c000003          	lb	zero,1216(zero) # 4c0 <core_list_mergesort+0xe8>
    to->data16 = from->data16;
     2fc:	0001                	nop
     2fe:	0100                	addi	s0,sp,128
    to->idx    = from->idx;
     300:	b09c                	fsd	fa5,32(s1)
     302:	0f000003          	lb	zero,240(zero) # f0 <cmp_idx+0x2c>
}
     306:	09ba                	slli	s3,s3,0xe
        return NULL;
     308:	0000                	unimp
     30a:	f401                	bnez	s0,212 <calc_func+0xf2>
}
     30c:	2001                	jal	30c <core_list_insert_new+0x58>
     30e:	03b0                	addi	a2,sp,456
     310:	0000                	unimp
     312:	0000                	unimp
{
     314:	0000                	unimp
     316:	6310                	flw	fa2,0(a4)
    list_head *ret = item->next;
     318:	706d                	c.lui	zero,0xffffb
     31a:	0100                	addi	s0,sp,128
    tmp        = item->info;
     31c:	01f4                	addi	a3,sp,204
     31e:	00028d2f          	vamoaddei8.v	zero,(t0),v0,v26,v0.t
    item->info = ret->info;
     322:	4100                	lw	s0,0(a0)
    item->next = item->next->next;
     324:	0000                	unimp
     326:	1000                	addi	s0,sp,32
    item->info = ret->info;
     328:	6572                	flw	fa0,28(sp)
     32a:	f4010073          	0xf4010073
    ret->info  = tmp;
     32e:	4201                	li	tp,0
    item->next = item->next->next;
     330:	02be                	slli	t0,t0,0xf
     332:	0000                	unimp
    ret->next  = NULL;
     334:	006d                	c.nop	27
     336:	0000                	unimp
}
     338:	7011                	c.lui	zero,0xfffe4
     33a:	0100                	addi	s0,sp,128
    item_removed->info  = item_modified->info;
     33c:	01f6                	slli	gp,gp,0x1d
     33e:	b010                	fsd	fa2,32(s0)
    tmp                 = item_removed->info;
     340:	99000003          	lb	zero,-1648(zero) # fffff990 <RAM_SIZE+0xfffef990>
    item_removed->next  = item_modified->next;
     344:	0000                	unimp
     346:	1100                	addi	s0,sp,160
    item_removed->info  = item_modified->info;
     348:	0071                	c.nop	28
     34a:	f601                	bnez	a2,252 <calc_func+0x132>
    item_modified->info = tmp;
     34c:	1401                	addi	s0,s0,-32
     34e:	03b0                	addi	a2,sp,456
    item_removed->next  = item_modified->next;
     350:	0000                	unimp
     352:	00e4                	addi	s1,sp,76
    item_modified->next = item_removed;
     354:	0000                	unimp
     356:	6511                	lui	a0,0x4
}
     358:	0100                	addi	s0,sp,128
     35a:	01f6                	slli	gp,gp,0x1d
    if (info->idx >= 0)
     35c:	b018                	fsd	fa4,32(s0)
     35e:	51000003          	lb	zero,1296(zero) # 510 <core_list_mergesort+0x138>
     362:	0001                	nop
        while (list && (list->info->idx != info->idx))
     364:	1200                	addi	s0,sp,288
     366:	025d                	addi	tp,tp,23
     368:	0000                	unimp
     36a:	f601                	bnez	a2,272 <cmp_complex+0x1e>
            list = list->next;
     36c:	1c01                	addi	s8,s8,-32
     36e:	03b0                	addi	a2,sp,456
        while (list && (list->info->idx != info->idx))
     370:	0000                	unimp
     372:	0000019b          	0x19b
     376:	a812                	fsd	ft4,16(sp)
     378:	0001                	nop
     37a:	0100                	addi	s0,sp,128
     37c:	671001f7          	0x671001f7
     380:	0000                	unimp
     382:	e700                	fsw	fs0,8(a4)
        while (list && ((list->info->data16 & 0xff) != info->data16))
     384:	0001                	nop
     386:	1200                	addi	s0,sp,288
     388:	020c                	addi	a1,sp,256
     38a:	0000                	unimp
     38c:	f701                	bnez	a4,294 <cmp_complex+0x40>
     38e:	1801                	addi	a6,a6,-32
            list = list->next;
     390:	00000067          	jr	zero # 0 <RAM_START_ADDRESS>
        while (list && ((list->info->data16 & 0xff) != info->data16))
     394:	0206                	slli	tp,tp,0x1
     396:	0000                	unimp
     398:	ad12                	fsd	ft4,152(sp)
     39a:	01000003          	lb	zero,16(zero) # 10 <_start>
     39e:	672101f7          	0x672101f7
     3a2:	0000                	unimp
     3a4:	3100                	fld	fs0,32(a0)
     3a6:	0002                	c.slli64	zero
     3a8:	1200                	addi	s0,sp,288
     3aa:	02da                	slli	t0,t0,0x16
}
     3ac:	0000                	unimp
     3ae:	f701                	bnez	a4,2b6 <core_list_insert_new+0x2>
     3b0:	2801                	jal	3c0 <core_list_reverse+0xc>
     3b2:	00000067          	jr	zero # 0 <RAM_START_ADDRESS>
    while (list)
     3b6:	0000025b          	0x25b
    list_head *next = NULL, *tmp;
     3ba:	6911                	lui	s2,0x4
     3bc:	0100                	addi	s0,sp,128
     3be:	672f01f7          	0x672f01f7
     3c2:	0000                	unimp
        tmp        = list->next;
     3c4:	7900                	flw	fs0,48(a0)
     3c6:	0002                	c.slli64	zero
        list->next = next;
     3c8:	1300                	addi	s0,sp,416
     3ca:	0474                	addi	a3,sp,524
    while (list)
     3cc:	0000                	unimp
     3ce:	0114                	addi	a3,sp,128
     3d0:	025c                	addi	a5,sp,260
     3d2:	008a                	slli	ra,ra,0x2
}
     3d4:	0000                	unimp
     3d6:	0408                	addi	a0,sp,512
{
     3d8:	0128                	addi	a0,sp,136
     3da:	0000                	unimp
     3dc:	8015                	srli	s0,s0,0x5
     3de:	01000003          	lb	zero,16(zero) # 10 <_start>
     3e2:	01d1                	addi	gp,gp,20
     3e4:	b001                	j	fffffbe4 <RAM_SIZE+0xfffefbe4>
     3e6:	01000003          	lb	zero,16(zero) # 10 <_start>
     3ea:	03f0                	addi	a2,sp,460
     3ec:	0000                	unimp
     3ee:	ba16                	fsd	ft5,304(sp)
     3f0:	0009                	c.nop	2
     3f2:	0100                	addi	s0,sp,128
     3f4:	01d1                	addi	gp,gp,20
     3f6:	b01e                	fsd	ft7,32(sp)
     3f8:	17000003          	lb	zero,368(zero) # 170 <calc_func+0x50>
     3fc:	03cd                	addi	t2,t2,19
     3fe:	0000                	unimp
     400:	d301                	beqz	a4,300 <core_list_insert_new+0x4c>
     402:	1001                	c.nop	-32
     404:	03b0                	addi	a2,sp,456
     406:	0000                	unimp
     408:	7418                	flw	fa4,40(s0)
     40a:	706d                	c.lui	zero,0xffffb
     40c:	0100                	addi	s0,sp,128
     40e:	b01e01d3          	0xb01e01d3
     412:	00000003          	lb	zero,0(zero) # 0 <RAM_START_ADDRESS>
     416:	7015                	c.lui	zero,0xfffe5
    insize = 1;
     418:	0002                	c.slli64	zero
     41a:	0100                	addi	s0,sp,128
        if (nmerges <= 1) /* allow for nmerges==0, the empty list case */
     41c:	b00101b3          	0xb00101b3
        while (p)
     420:	01000003          	lb	zero,16(zero) # 10 <_start>
        nmerges = 0; /* count number of merges we do in this pass */
     424:	041d                	addi	s0,s0,7
     426:	0000                	unimp
        tail = NULL;
     428:	ba16                	fsd	ft5,304(sp)
     42a:	0009                	c.nop	2
        list = NULL;
     42c:	0100                	addi	s0,sp,128
     42e:	b01b01b3          	0xb01b01b3
            nmerges++; /* there exists a merge to be done */
     432:	16000003          	lb	zero,352(zero) # 160 <calc_func+0x40>
     436:	015c                	addi	a5,sp,132
            psize = 0;
     438:	0000                	unimp
     43a:	b301                	j	13a <calc_func+0x1a>
                q = q->next;
     43c:	2c01                	jal	64c <core_bench_list+0x128>
     43e:	02b8                	addi	a4,sp,328
                psize++;
     440:	0000                	unimp
     442:	1500                	addi	s0,sp,672
                if (!q)
     444:	01c9                	addi	gp,gp,18
     446:	0000                	unimp
            for (i = 0; i < insize; i++)
     448:	9801                	andi	s0,s0,-32
     44a:	0101                	addi	sp,sp,0
                    list = e;
     44c:	03b0                	addi	a2,sp,456
     44e:	0000                	unimp
     450:	5701                	li	a4,-32
     452:	0004                	0x4
     454:	1600                	addi	s0,sp,800
     456:	02f6                	slli	t0,t0,0x1d
            while (psize > 0 || (qsize > 0 && q))
     458:	0000                	unimp
     45a:	9801                	andi	s0,s0,-32
                else if (qsize == 0 || !q)
     45c:	2201                	jal	55c <core_bench_list+0x38>
     45e:	03b0                	addi	a2,sp,456
     460:	0000                	unimp
     462:	3c16                	fld	fs8,352(sp)
                else if (cmp(p->info, q->info, res) <= 0)
     464:	0000                	unimp
     466:	0100                	addi	s0,sp,128
     468:	0198                	addi	a4,sp,192
     46a:	0003b03b          	0x3b03b
     46e:	1800                	addi	s0,sp,48
     470:	6d74                	flw	fa3,92(a0)
     472:	0070                	addi	a2,sp,12
     474:	9a01                	andi	a2,a2,-32
     476:	1001                	c.nop	-32
                    qsize--;
     478:	02b8                	addi	a4,sp,328
     47a:	0000                	unimp
                    q = q->next;
     47c:	1500                	addi	s0,sp,672
     47e:	02e0                	addi	s0,sp,332
                    qsize--;
     480:	0000                	unimp
     482:	7901                	lui	s2,0xfffe0
                if (tail)
     484:	0101                	addi	sp,sp,0
     486:	03b0                	addi	a2,sp,456
                    tail->next = e;
     488:	0000                	unimp
     48a:	9101                	srli	a0,a0,0x20
                    list = e;
     48c:	0004                	0x4
     48e:	1600                	addi	s0,sp,800
            while (psize > 0 || (qsize > 0 && q))
     490:	012d                	addi	sp,sp,11
     492:	0000                	unimp
     494:	7901                	lui	s2,0xfffe0
     496:	1d01                	addi	s10,s10,-32
     498:	03b0                	addi	a2,sp,456
     49a:	0000                	unimp
                    qsize--;
     49c:	7418                	flw	fa4,40(s0)
     49e:	706d                	c.lui	zero,0xffffb
     4a0:	0100                	addi	s0,sp,128
     4a2:	b810017b          	0xb810017b
                    q = q->next;
     4a6:	0002                	c.slli64	zero
                if (tail)
     4a8:	1800                	addi	s0,sp,48
     4aa:	6572                	flw	fa0,28(sp)
                    list = e;
     4ac:	0074                	addi	a3,sp,12
     4ae:	7c01                	lui	s8,0xfffe0
     4b0:	1001                	c.nop	-32
     4b2:	03b0                	addi	a2,sp,456
     4b4:	0000                	unimp
     4b6:	1500                	addi	s0,sp,672
                    psize--;
     4b8:	000000d3          	fadd.s	ft1,ft0,ft0,rne
     4bc:	5001                	c.li	zero,-32
     4be:	0101                	addi	sp,sp,0
                    p = p->next;
     4c0:	03b0                	addi	a2,sp,456
     4c2:	0000                	unimp
     4c4:	ff01                	bnez	a4,3dc <core_list_mergesort+0x4>
     4c6:	0004                	0x4
        while (p)
     4c8:	1600                	addi	s0,sp,800
     4ca:	016e                	slli	sp,sp,0x1b
        tail->next = NULL;
     4cc:	0000                	unimp
     4ce:	5001                	c.li	zero,-32
        if (nmerges <= 1) /* allow for nmerges==0, the empty list case */
     4d0:	2201                	jal	5d0 <core_bench_list+0xac>
     4d2:	03b0                	addi	a2,sp,456
        insize *= 2;
     4d4:	0000                	unimp
     4d6:	5c16                	lw	s8,100(sp)
        p    = list;
     4d8:	0001                	nop
     4da:	0100                	addi	s0,sp,128
     4dc:	0151                	addi	sp,sp,20
     4de:	b822                	fsd	fs0,48(sp)
        tail->next = NULL;
     4e0:	0002                	c.slli64	zero
     4e2:	1600                	addi	s0,sp,800
     4e4:	051a                	slli	a0,a0,0x6
     4e6:	0000                	unimp
}
     4e8:	5201                	li	tp,-32
     4ea:	2201                	jal	5ea <core_bench_list+0xc6>
     4ec:	04ff                	0x4ff
     4ee:	0000                	unimp
     4f0:	1f16                	slli	t5,t5,0x25
     4f2:	0001                	nop
     4f4:	0100                	addi	s0,sp,128
     4f6:	05220153          	fadd.h	ft2,ft4,fs2,rne
     4fa:	0005                	c.nop	1
     4fc:	1600                	addi	s0,sp,800
     4fe:	0228                	addi	a0,sp,264
     500:	0000                	unimp
     502:	5401                	li	s0,-32
     504:	2201                	jal	604 <core_bench_list+0xe0>
     506:	03b0                	addi	a2,sp,456
     508:	0000                	unimp
     50a:	0a16                	slli	s4,s4,0x5
     50c:	01000003          	lb	zero,16(zero) # 10 <_start>
     510:	0155                	addi	sp,sp,21
     512:	b822                	fsd	fs0,48(sp)
     514:	0002                	c.slli64	zero
     516:	1700                	addi	s0,sp,928
     518:	039c                	addi	a5,sp,448
     51a:	0000                	unimp
     51c:	5701                	li	a4,-32
     51e:	1001                	c.nop	-32
     520:	03b0                	addi	a2,sp,456
     522:	0000                	unimp
{
     524:	0800                	addi	s0,sp,16
     526:	b004                	fsd	fs1,32(s0)
    ee_s16     find_num = res->seed3;
     528:	08000003          	lb	zero,128(zero) # 80 <__do_global_dtors_aux+0x24>
{
     52c:	b804                	fsd	fs1,48(s0)
     52e:	0002                	c.slli64	zero
     530:	1900                	addi	s0,sp,176
     532:	023c                	addi	a5,sp,264
     534:	0000                	unimp
     536:	fb01                	bnez	a4,446 <core_list_mergesort+0x6e>
     538:	b001                	j	fffffd38 <RAM_SIZE+0xfffefd38>
     53a:	ac000003          	lb	zero,-1344(zero) # fffffac0 <RAM_SIZE+0xfffefac0>
     53e:	b4000007          	vluxseg6ei128.v	v0,(zero),v0,v0.t
     542:	0001                	nop
     544:	0100                	addi	s0,sp,128
     546:	569c                	lw	a5,40(a3)
     548:	1a000007          	vlse128.v	v0,(zero),zero
    list_head *list     = res->list;
     54c:	02b2                	slli	t0,t0,0xc
     54e:	0000                	unimp
    for (i = 0; i < find_num; i++)
     550:	fb01                	bnez	a4,460 <core_list_mergesort+0x88>
     552:	00008d17          	auipc	s10,0x8
    info.idx = finder_idx;
     556:	b000                	fsd	fs0,32(s0)
    for (i = 0; i < find_num; i++)
     558:	0002                	c.slli64	zero
     55a:	1a00                	addi	s0,sp,304
    ee_u16     found = 0, missed = 0;
     55c:	051a                	slli	a0,a0,0x6
     55e:	0000                	unimp
     560:	fb01                	bnez	a4,470 <core_list_mergesort+0x98>
     562:	0003b02b          	0x3b02b
    ee_u16     retval = 0;
     566:	d100                	sw	s0,32(a0)
        info.data16 = (i & 0xff);
     568:	0002                	c.slli64	zero
     56a:	1a00                	addi	s0,sp,304
    if (info->idx >= 0)
     56c:	02f1                	addi	t0,t0,28
     56e:	0000                	unimp
        while (list && (list->info->idx != info->idx))
     570:	fb01                	bnez	a4,480 <core_list_mergesort+0xa8>
     572:	413c                	lw	a5,64(a0)
     574:	0000                	unimp
     576:	3200                	fld	fs0,32(a2)
     578:	1b000003          	lb	zero,432(zero) # 1b0 <calc_func+0x90>
            list = list->next;
     57c:	0129                	addi	sp,sp,10
     57e:	0000                	unimp
        while (list && (list->info->idx != info->idx))
     580:	fe01                	bnez	a2,498 <core_list_mergesort+0xc0>
     582:	8d0c                	0x8d0c
     584:	0000                	unimp
     586:	1400                	addi	s0,sp,544
     588:	b51c                	fsd	fa5,40(a0)
     58a:	0002                	c.slli64	zero
     58c:	0100                	addi	s0,sp,128
     58e:	0cff                	0xcff
    list_head *next = NULL, *tmp;
     590:	008d                	addi	ra,ra,3
     592:	0000                	unimp
     594:	00000353          	fadd.s	ft6,ft0,ft0,rne
     598:	2812                	fld	fa6,256(sp)
     59a:	0002                	c.slli64	zero
     59c:	0100                	addi	s0,sp,128
     59e:	0102                	c.slli64	sp
        tmp        = list->next;
     5a0:	b010                	fsd	fa2,32(s0)
     5a2:	71000003          	lb	zero,1808(zero) # 710 <core_bench_list+0x1ec>
        list->next = next;
     5a6:	12000003          	lb	zero,288(zero) # 120 <calc_func>
    while (list)
     5aa:	011f 0000 0301      	0x3010000011f
            if (this_find->info->data16 & 0x1) /* use found value */
     5b0:	1001                	c.nop	-32
     5b2:	02b8                	addi	a4,sp,328
            found++;
     5b4:	0000                	unimp
     5b6:	0000038f          	0x38f
     5ba:	0a12                	slli	s4,s4,0x4
            if (this_find->info->data16 & 0x1) /* use found value */
     5bc:	01000003          	lb	zero,16(zero) # 10 <_start>
            found++;
     5c0:	0104                	addi	s1,sp,128
     5c2:	b810                	fsd	fa2,48(s0)
            if (this_find->info->data16 & 0x1) /* use found value */
     5c4:	0002                	c.slli64	zero
     5c6:	ce00                	sw	s0,24(a2)
     5c8:	11000003          	lb	zero,272(zero) # 110 <cmp_idx+0x4c>
                retval += (this_find->info->data16 >> 9) & 1;
     5cc:	0069                	c.nop	26
     5ce:	0601                	addi	a2,a2,0
     5d0:	1001                	c.nop	-32
     5d2:	008d                	addi	ra,ra,3
     5d4:	0000                	unimp
     5d6:	03fe                	slli	t2,t2,0x1f
     5d8:	0000                	unimp
     5da:	a112                	fsd	ft4,128(sp)
     5dc:	0001                	nop
     5de:	0100                	addi	s0,sp,128
            if (this_find->next != NULL)
     5e0:	b0100107          	0xb0100107
     5e4:	71000003          	lb	zero,1808(zero) # 710 <core_bench_list+0x1ec>
                this_find->next = finder->next;
     5e8:	0004                	0x4
     5ea:	1200                	addi	s0,sp,288
     5ec:	09ba                	slli	s3,s3,0xe
     5ee:	0000                	unimp
                finder->next    = list->next;
     5f0:	0701                	addi	a4,a4,0
     5f2:	1901                	addi	s2,s2,-32
     5f4:	03b0                	addi	a2,sp,456
     5f6:	0000                	unimp
                list->next      = finder;
     5f8:	04a6                	slli	s1,s1,0x9
     5fa:	0000                	unimp
        if (info.idx >= 0)
     5fc:	00015c17          	auipc	s8,0x15
            info.idx++;
     600:	0100                	addi	s0,sp,128
     602:	0108                	addi	a0,sp,128
     604:	e810                	fsw	fa2,16(s0)
     606:	0000                	unimp
     608:	1d00                	addi	s0,sp,688
     60a:	0100                	addi	s0,sp,128
    for (i = 0; i < find_num; i++)
     60c:	0000                	unimp
     60e:	068a                	slli	a3,a3,0x2
     610:	0000                	unimp
     612:	e812                	fsw	ft4,16(sp)
     614:	0000                	unimp
     616:	0100                	addi	s0,sp,128
     618:	0119                	addi	sp,sp,6
     61a:	5410                	lw	a2,40(s0)
    retval += found * 4 - missed;
     61c:	0000                	unimp
     61e:	dd00                	sw	s0,56(a0)
     620:	0004                	0x4
     622:	1100                	addi	s0,sp,160
     624:	6164                	flw	fs1,68(a0)
     626:	0074                	addi	a3,sp,12
     628:	1a01                	addi	s4,s4,-32
     62a:	1001                	c.nop	-32
     62c:	0054                	addi	a3,sp,4
     62e:	0000                	unimp
    if (finder_idx > 0)
     630:	000004f7          	0x4f7
        list = core_list_mergesort(list, cmp_complex, res);
     634:	911e                	add	sp,sp,t2
     636:	0004                	0x4
     638:	3c00                	fld	fs0,56(s0)
     63a:	0008                	0x8
     63c:	2000                	fld	fs0,0(s0)
     63e:	0001                	nop
     640:	0100                	addi	s0,sp,128
     642:	011e                	slli	sp,sp,0x7
    remover = core_list_remove(list->next);
     644:	1f09                	addi	t5,t5,-30
     646:	04e4                	addi	s1,sp,588
    list_head *ret = item->next;
     648:	0000                	unimp
     64a:	0519                	addi	a0,a0,6
     64c:	0000                	unimp
     64e:	d71f 0004 2c00      	0x2c000004d71f
    item->info = ret->info;
     654:	0005                	c.nop	1
     656:	1f00                	addi	s0,sp,944
    item->next = item->next->next;
     658:	04ca                	slli	s1,s1,0x12
     65a:	0000                	unimp
    item->info = ret->info;
     65c:	0000053f 0004bd1f 	0x4bd1f0000053f
    item->next = item->next->next;
     664:	5700                	lw	s0,40(a4)
     666:	0005                	c.nop	1
    ret->next  = NULL;
     668:	1f00                	addi	s0,sp,944
     66a:	04b0                	addi	a2,sp,584
    if (info->idx >= 0)
     66c:	0000                	unimp
     66e:	0000056f          	jal	a0,66e <core_bench_list+0x14a>
        while (list && (list->info->idx != info->idx))
     672:	a31f 0004 8700      	0x87000004a31f
     678:	0005                	c.nop	1
     67a:	2000                	fld	fs0,0(s0)
            list = list->next;
     67c:	0120                	addi	s0,sp,136
     67e:	0000                	unimp
        while (list && (list->info->idx != info->idx))
     680:	f121                	bnez	a0,5c0 <core_bench_list+0x9c>
     682:	0004                	0x4
        finder = list->next;
     684:	9a00                	0x9a00
     686:	0005                	c.nop	1
    while (finder)
     688:	1e00                	addi	s0,sp,816
     68a:	09bc                	addi	a5,sp,216
        retval = crc16(list->info->data16, retval);
     68c:	0000                	unimp
     68e:	083c                	addi	a5,sp,24
     690:	0000                	unimp
     692:	0160                	addi	s0,sp,140
     694:	0000                	unimp
     696:	6501                	0x6501
     698:	0501                	addi	a0,a0,0
     69a:	d41f 0009 ba00      	0xba000009d41f
     6a0:	0005                	c.nop	1
     6a2:	1f00                	addi	s0,sp,944
    while (finder)
     6a4:	09c9                	addi	s3,s3,18
     6a6:	0000                	unimp
    remover = core_list_undo_remove(remover, list->next);
     6a8:	05d2                	slli	a1,a1,0x14
     6aa:	0000                	unimp
    tmp                 = item_removed->info;
     6ac:	0000                	unimp
     6ae:	0000                	unimp
    item_removed->info  = item_modified->info;
     6b0:	c81d                	beqz	s0,6e6 <core_bench_list+0x1c2>
     6b2:	0000                	unimp
    item_removed->next  = item_modified->next;
     6b4:	a500                	fsd	fs0,8(a0)
     6b6:	0006                	c.slli	zero,0x1
    item_removed->info  = item_modified->info;
     6b8:	1100                	addi	s0,sp,160
     6ba:	6170                	flw	fa2,68(a0)
    item_modified->info = tmp;
     6bc:	0074                	addi	a3,sp,12
     6be:	2a01                	jal	7ce <core_list_init+0x22>
    item_removed->next  = item_modified->next;
     6c0:	1401                	addi	s0,s0,-32
     6c2:	0054                	addi	a3,sp,4
    list = core_list_mergesort(list, cmp_idx, NULL);
     6c4:	0000                	unimp
     6c6:	05e5                	addi	a1,a1,25
    item_modified->next = item_removed;
     6c8:	0000                	unimp
     6ca:	2200                	fld	fs0,0(a2)
    list = core_list_mergesort(list, cmp_idx, NULL);
     6cc:	0491                	addi	s1,s1,4
     6ce:	0000                	unimp
     6d0:	07fc                	addi	a5,sp,972
     6d2:	0000                	unimp
     6d4:	00a8                	addi	a0,sp,72
     6d6:	0000                	unimp
    finder = list->next;
     6d8:	1301                	addi	t1,t1,-32
     6da:	0501                	addi	a0,a0,0
    list = core_list_mergesort(list, cmp_idx, NULL);
     6dc:	0724                	addi	s1,sp,904
     6de:	0000                	unimp
    while (finder)
     6e0:	e41f 0004 1f00      	0x1f000004e41f
        retval = crc16(list->info->data16, retval);
     6e6:	0006                	c.slli	zero,0x1
     6e8:	1f00                	addi	s0,sp,944
     6ea:	000004d7          	vadd.vv	v9,v0,v0,v0.t
     6ee:	063d                	addi	a2,a2,15
     6f0:	0000                	unimp
     6f2:	ca1f 0004 5b00      	0x5b000004ca1f
     6f8:	0006                	c.slli	zero,0x1
     6fa:	1f00                	addi	s0,sp,944
    while (finder)
     6fc:	04bd                	addi	s1,s1,15
     6fe:	0000                	unimp
}
     700:	00000683          	lb	a3,0(zero) # 0 <RAM_START_ADDRESS>
     704:	b01f 0004 ab00      	0xab000004b01f
     70a:	0006                	c.slli	zero,0x1
     70c:	1f00                	addi	s0,sp,944
     70e:	000004a3          	sb	zero,9(zero) # 9 <RAM_START_ADDRESS+0x9>
     712:	000006d3          	fadd.s	fa3,ft0,ft0,rne
     716:	a820                	fsd	fs0,80(s0)
     718:	0000                	unimp
     71a:	2100                	fld	fs0,0(a0)
     71c:	04f1                	addi	s1,s1,28
     71e:	0000                	unimp
     720:	06f1                	addi	a3,a3,28
     722:	0000                	unimp
     724:	0009bc23          	0x9bc23
        while (list && ((list->info->data16 & 0xff) != info->data16))
     728:	2400                	fld	fs0,8(s0)
     72a:	0008                	0x8
     72c:	1000                	addi	s0,sp,32
     72e:	0000                	unimp
     730:	0100                	addi	s0,sp,128
     732:	0165                	addi	sp,sp,25
            list = list->next;
     734:	1f05                	addi	t5,t5,-31
     736:	09d4                	addi	a3,sp,212
        while (list && ((list->info->data16 & 0xff) != info->data16))
     738:	0000                	unimp
     73a:	0704                	addi	s1,sp,896
        finder = list->next;
     73c:	0000                	unimp
     73e:	c91f 0009 1c00      	0x1c000009c91f
    while (finder)
     744:	00000007          	vle8.v	v0,(zero),v0.t
        while (list && ((list->info->data16 & 0xff) != info->data16))
     748:	0000                	unimp
     74a:	d424                	sw	s1,104(s0)
     74c:	d2000007          	vlseg7e128.v	v0,(zero)
     750:	000c                	0xc
     752:	2400                	fld	fs0,8(s0)
            list = list->next;
     754:	08b8                	addi	a4,sp,88
     756:	0000                	unimp
        while (list && ((list->info->data16 & 0xff) != info->data16))
     758:	0cd2                	slli	s9,s9,0x14
     75a:	0000                	unimp
     75c:	5025                	c.li	zero,-23
     75e:	0009                	c.nop	2
     760:	c400                	sw	s0,8(s0)
     762:	0002                	c.slli64	zero
     764:	1400                	addi	s0,sp,544
     766:	5a01                	li	s4,-32
     768:	5b01f303          	0x5b01f303
            retval += (list->next->info->data16 >> 8) & 1;
     76c:	0114                	addi	a3,sp,128
     76e:	c403055b          	0xc403055b
            missed++;
     772:	0000                	unimp
     774:	1400                	addi	s0,sp,544
     776:	5c01                	li	s8,-32
            retval += (list->next->info->data16 >> 8) & 1;
     778:	3001                	jal	ffffff78 <RAM_SIZE+0xfffeff78>
     77a:	0000                	unimp
            missed++;
     77c:	0119                	addi	sp,sp,6
     77e:	0001                	nop
            retval += (list->next->info->data16 >> 8) & 1;
     780:	0100                	addi	s0,sp,128
     782:	019f 0054 0000      	0x54019f
     788:	0524                	addi	s1,sp,648
     78a:	0000                	unimp
     78c:	0288                	addi	a0,sp,320
     78e:	0000                	unimp
     790:	9c01                	0x9c01
     792:	09bc                	addi	a5,sp,216
     794:	0000                	unimp
     796:	7226                	flw	ft4,104(sp)
    info.idx = finder_idx;
     798:	7365                	lui	t1,0xffff9
     79a:	0100                	addi	s0,sp,128
    for (i = 0; i < find_num; i++)
     79c:	1f9f 02be 0000      	0x2be1f9f
     7a2:	0000073b          	0x73b
            retval += (list->next->info->data16 >> 8) & 1;
     7a6:	351a                	fld	fa0,416(sp)
     7a8:	01000003          	lb	zero,16(zero) # 10 <_start>
{
     7ac:	2b9f 0041 0000      	0x412b9f
     7b2:	0772                	slli	a4,a4,0x1c
     7b4:	0000                	unimp
     7b6:	321c                	fld	fa5,32(a2)
    ee_u32 size     = (blksize / per_item)
     7b8:	0001                	nop
     7ba:	0100                	addi	s0,sp,128
{
     7bc:	10a1                	addi	ra,ra,-24
     7be:	0054                	addi	a3,sp,4
     7c0:	0000                	unimp
     7c2:	079e                	slli	a5,a5,0x7
     7c4:	0000                	unimp
     7c6:	621c                	flw	fa5,0(a2)
     7c8:	01000003          	lb	zero,16(zero) # 10 <_start>
     7cc:	10a2                	slli	ra,ra,0x28
     7ce:	0054                	addi	a3,sp,4
    ee_u32 size     = (blksize / per_item)
     7d0:	0000                	unimp
     7d2:	0000080b          	0x80b
     7d6:	951c                	0x951c
    list_head *memblock_end  = memblock + size;
     7d8:	0001                	nop
     7da:	0100                	addi	s0,sp,128
     7dc:	1ba2                	slli	s7,s7,0x28
     7de:	0054                	addi	a3,sp,4
    list->info->data16 = (ee_s16)0x8080;
     7e0:	0000                	unimp
     7e2:	00000857          	vadd.vv	v16,v0,v0,v0.t
    list->next         = NULL;
     7e6:	ba1c                	fsd	fa5,48(a2)
    list->info         = datablock;
     7e8:	0009                	c.nop	2
     7ea:	0100                	addi	s0,sp,128
    list->info->data16 = (ee_s16)0x8080;
     7ec:	03b010a3          	sh	s11,33(zero) # 21 <_start+0x11>
    list_data *datablock_end = datablock + size;
     7f0:	0000                	unimp
     7f2:	0882                	c.slli64	a7
    list->info->data16 = (ee_s16)0x8080;
     7f4:	0000                	unimp
     7f6:	a41c                	fsd	fa5,8(s0)
    list->info->idx    = 0x0000;
     7f8:	01000003          	lb	zero,16(zero) # 10 <_start>
    if ((*memblock + 1) >= memblock_end)
     7fc:	10a4                	addi	s1,sp,104
     7fe:	0041                	c.nop	16
    list_data *datablock_end = datablock + size;
     800:	0000                	unimp
     802:	08cc                	addi	a1,sp,84
    memblock++;
     804:	0000                	unimp
     806:	a81c                	fsd	fa5,16(s0)
    datablock++;
     808:	0002                	c.slli64	zero
     80a:	0100                	addi	s0,sp,128
    if ((*memblock + 1) >= memblock_end)
     80c:	10a5                	addi	ra,ra,-23
     80e:	03b0                	addi	a2,sp,456
    if ((*datablock + 1) >= datablock_end)
     810:	0000                	unimp
     812:	08f6                	slli	a7,a7,0x1d
     814:	0000                	unimp
     816:	a11c                	fsd	fa5,0(a0)
    newitem->info = *datablock;
     818:	0001                	nop
     81a:	0100                	addi	s0,sp,128
    newitem->next      = insert_point->next;
     81c:	10a6                	slli	ra,ra,0x29
     81e:	03b0                	addi	a2,sp,456
    insert_point->next = newitem;
     820:	0000                	unimp
     822:	0909                	addi	s2,s2,2
    to->idx    = from->idx;
     824:	0000                	unimp
     826:	7f1c                	flw	fa5,56(a4)
    to->data16 = from->data16;
     828:	0002                	c.slli64	zero
     82a:	0100                	addi	s0,sp,128
     82c:	19a6                	slli	s3,s3,0x29
     82e:	03b0                	addi	a2,sp,456
    to->idx    = from->idx;
     830:	0000                	unimp
     832:	0000096b          	0x96b
    for (i = 0; i < size; i++)
     836:	5c1c                	lw	a5,56(s0)
            ee_u16 pat = (ee_u16)(i++ ^ seed); /* get a pseudo random number */
     838:	0001                	nop
     83a:	0100                	addi	s0,sp,128
    to->idx    = from->idx;
     83c:	00e810a7          	fsh	fa4,1(a6)
            ee_u16 pat = (ee_u16)(i++ ^ seed); /* get a pseudo random number */
     840:	0000                	unimp
     842:	0989                	addi	s3,s3,2
     844:	0000                	unimp
     846:	01006927          	0x1006927
    to->idx    = from->idx;
     84a:	10a8                	addi	a0,sp,104
    if ((*datablock + 1) >= datablock_end)
     84c:	0041                	c.nop	16
     84e:	0000                	unimp
     850:	0a2c                	addi	a1,sp,280
     852:	0000                	unimp
        ee_u16 datpat = ((ee_u16)(seed ^ i) & 0xf);
     854:	f028                	fsw	fa0,96(s0)
     856:	6c000003          	lb	zero,1728(zero) # 6c0 <core_bench_list+0x19c>
            = (datpat << 3) | (i & 0x7); /* alternate between algorithms */
     85a:	0005                	c.nop	1
     85c:	3000                	fld	fs0,32(s0)
     85e:	0000                	unimp
     860:	0100                	addi	s0,sp,128
     862:	17b0                	addi	a2,sp,1000
        ee_u16 dat
     864:	0875                	addi	a6,a6,29
     866:	0000                	unimp
        info.data16 = (dat << 8) | dat;  /* fill the data with actual data and
     868:	0f1f 0004 7800      	0x780000040f1f
    if ((*memblock + 1) >= memblock_end)
     86e:	000a                	c.slli	zero,0x2
    for (i = 0; i < size; i++)
     870:	1f00                	addi	s0,sp,944
     872:	0402                	c.slli64	s0
    if ((*datablock + 1) >= datablock_end)
     874:	0000                	unimp
     876:	0aa0                	addi	s0,sp,344
        info.data16 = (dat << 8) | dat;  /* fill the data with actual data and
     878:	0000                	unimp
     87a:	0003f023          	0x3f023
    if ((*memblock + 1) >= memblock_end)
     87e:	4800                	lw	s0,16(s0)
    if ((*datablock + 1) >= datablock_end)
     880:	24000007          	vluxseg2ei8.v	v0,(zero),v0,v0.t
    newitem->next      = insert_point->next;
     884:	0000                	unimp
     886:	0100                	addi	s0,sp,128
    insert_point->next = newitem;
     888:	290101b3          	0x290101b3
    newitem->info = *datablock;
     88c:	0000040f          	0x40f
    to->data16 = from->data16;
     890:	021f 0004 c900      	0xc9000004021f
    to->idx    = from->idx;
     896:	000a                	c.slli	zero,0x2
    return newitem;
     898:	0000                	unimp
     89a:	2a00                	fld	fs0,16(a2)
     89c:	03b6                	slli	t2,t2,0xd
     89e:	0000                	unimp
     8a0:	0590                	addi	a2,sp,704
     8a2:	0000                	unimp
    for (i = 0; i < size; i++)
     8a4:	001c                	0x1c
     8a6:	0000                	unimp
    while (finder->next != NULL)
     8a8:	b101                	j	4a8 <core_list_mergesort+0xd0>
     8aa:	0008a517          	auipc	a0,0x8a
     8ae:	1f00                	addi	s0,sp,944
        if (i < size / 5) /* first 20% of the list in order */
     8b0:	03c8                	addi	a0,sp,452
     8b2:	0000                	unimp
     8b4:	00000ae7          	jalr	s5,zero # 0 <RAM_START_ADDRESS>
                                & (((i & 0x07) << 8)
     8b8:	d521                	beqz	a0,800 <HEAP_SIZE>
     8ba:	1b000003          	lb	zero,432(zero) # 1b0 <calc_func+0x90>
        if (i < size / 5) /* first 20% of the list in order */
     8be:	2100000b          	0x2100000b
     8c2:	03e2                	slli	t2,t2,0x18
                                & (((i & 0x07) << 8)
     8c4:	0000                	unimp
     8c6:	0b50                	addi	a2,sp,404
     8c8:	0000                	unimp
     8ca:	2800                	fld	fs0,16(s0)
    while (finder->next != NULL)
     8cc:	00000457          	vadd.vv	v8,v0,v0,v0.t
     8d0:	0648                	addi	a0,sp,772
     8d2:	0000                	unimp
            finder->info->idx = i++;
     8d4:	0048                	addi	a0,sp,4
     8d6:	0000                	unimp
    while (finder->next != NULL)
     8d8:	cf01                	beqz	a4,8f0 <HEAP_SIZE+0xf0>
     8da:	0008db0f          	0x8db0f
     8de:	1f00                	addi	s0,sp,944
     8e0:	0469                	addi	s0,s0,26
     8e2:	0000                	unimp
     8e4:	0b6e                	slli	s6,s6,0x1b
     8e6:	0000                	unimp
     8e8:	4820                	lw	s0,80(s0)
     8ea:	0000                	unimp
     8ec:	2100                	fld	fs0,0(a0)
     8ee:	0476                	slli	s0,s0,0x1d
            ee_u16 pat = (ee_u16)(i++ ^ seed); /* get a pseudo random number */
     8f0:	0000                	unimp
     8f2:	0b81                	addi	s7,s7,0
                                & (((i & 0x07) << 8)
     8f4:	0000                	unimp
     8f6:	8321                	srli	a4,a4,0x8
                                   | pat); /* make sure the mixed items end up
     8f8:	0004                	0x4
     8fa:	9400                	0x9400
                                & (((i & 0x07) << 8)
     8fc:	0000000b          	0xb
            finder->info->idx = i++;
     900:	2800                	fld	fs0,16(s0)
     902:	03f0                	addi	a2,sp,460
        if (i < size / 5) /* first 20% of the list in order */
     904:	0000                	unimp
     906:	0648                	addi	a0,sp,772
            finder->info->idx = 0x3fff
     908:	0000                	unimp
     90a:	0060                	addi	s0,sp,12
    while (finder->next != NULL)
     90c:	0000                	unimp
     90e:	d201                	beqz	a2,80e <HEAP_SIZE+0xe>
     910:	220e                	fld	ft4,192(sp)
     912:	0009                	c.nop	2
     914:	1f00                	addi	s0,sp,944
     916:	0000040f          	0x40f
     91a:	00000ba7          	vse8.v	v23,(zero),v0.t
     91e:	021f 0004 cf00      	0xcf000004021f
     924:	2300000b          	0x2300000b
}
     928:	03f0                	addi	a2,sp,460
     92a:	0000                	unimp
     92c:	0728                	addi	a0,sp,904
     92e:	0000                	unimp
     930:	0014                	0x14
     932:	0000                	unimp
     934:	b301                	j	634 <core_bench_list+0x110>
     936:	0101                	addi	sp,sp,0
    list = core_list_mergesort(list, cmp_idx, NULL);
     938:	0f29                	addi	t5,t5,10
     93a:	0004                	0x4
}
     93c:	1f00                	addi	s0,sp,944
     93e:	0402                	c.slli64	s0
    list = core_list_mergesort(list, cmp_idx, NULL);
     940:	0000                	unimp
     942:	0bf8                	addi	a4,sp,476
     944:	0000                	unimp
     946:	0000                	unimp
}
     948:	1d28                	addi	a0,sp,696
     94a:	0004                	0x4
    list = core_list_mergesort(list, cmp_idx, NULL);
     94c:	ac00                	fsd	fs0,24(s0)
     94e:	0006                	c.slli	zero,0x1
    memblock++;
     950:	8000                	0x8000
     952:	0000                	unimp
    datablock++;
     954:	0100                	addi	s0,sp,128
     956:	0fdd                	addi	t6,t6,23
     958:	0958                	addi	a4,sp,148
     95a:	0000                	unimp
     95c:	3c1f 0004 0b00      	0xb0000043c1f
{
     962:	000c                	0xc
     964:	1f00                	addi	s0,sp,944
     966:	0000042f          	vamoaddei8.v	zero,(zero),v0,v8,v0.t
    ee_u32        iterations = res->iterations;
     96a:	0c1f 0000 8020      	0x802000000c1f
{
     970:	0000                	unimp
     972:	2100                	fld	fs0,0(a0)
     974:	0449                	addi	s0,s0,18
     976:	0000                	unimp
    res->crc                 = 0;
     978:	0c32                	slli	s8,s8,0xc
     97a:	0000                	unimp
    res->crcmatrix           = 0;
     97c:	0000                	unimp
     97e:	0006402b          	0x6402b
    for (i = 0; i < iterations; i++)
     982:	c400                	sw	s0,8(s0)
     984:	0002                	c.slli64	zero
     986:	7500                	flw	fs0,40(a0)
     988:	0009                	c.nop	2
     98a:	1400                	addi	s0,sp,544
        crc      = core_bench_list(res, 1);
     98c:	5a01                	li	s4,-32
     98e:	7802                	flw	fa6,32(sp)
     990:	1400                	addi	s0,sp,544
     992:	5b01                	li	s6,-32
     994:	0305                	addi	t1,t1,1
     996:	0254                	addi	a3,sp,260
        res->crc = crcu16(crc, res->crc);
     998:	0000                	unimp
     99a:	2b00                	fld	fs0,16(a4)
     99c:	069c                	addi	a5,sp,832
     99e:	0000                	unimp
        crc      = core_bench_list(res, -1);
     9a0:	00000cdb          	0xcdb
        res->crc = crcu16(crc, res->crc);
     9a4:	0989                	addi	s3,s3,2
     9a6:	0000                	unimp
        crc      = core_bench_list(res, -1);
     9a8:	0114                	addi	a3,sp,128
     9aa:	0082025b          	0x82025b
     9ae:	2b00                	fld	fs0,16(a4)
        res->crc = crcu16(crc, res->crc);
     9b0:	06d8                	addi	a4,sp,836
     9b2:	0000                	unimp
     9b4:	02c4                	addi	s1,sp,324
     9b6:	0000                	unimp
     9b8:	000009ab          	0x9ab
        if (i == 0)
     9bc:	0114                	addi	a3,sp,128
     9be:	025a                	slli	tp,tp,0x16
            res->crclist = res->crc;
     9c0:	0078                	addi	a4,sp,12
     9c2:	0114                	addi	a3,sp,128
    for (i = 0; i < iterations; i++)
     9c4:	c403055b          	0xc403055b
     9c8:	0000                	unimp
     9ca:	1400                	addi	s0,sp,544
}
     9cc:	5c01                	li	s8,-32
     9ce:	3001                	jal	1ce <calc_func+0xae>
     9d0:	2c00                	fld	fs0,24(s0)
     9d2:	06f4                	addi	a3,sp,844
     9d4:	0000                	unimp
     9d6:	00000cdb          	0xcdb
     9da:	0114                	addi	a3,sp,128
     9dc:	0082025b          	0x82025b
     9e0:	0000                	unimp
     9e2:	572d                	li	a4,-21
     9e4:	0001                	nop
     9e6:	0100                	addi	s0,sp,128
{
     9e8:	0191                	addi	gp,gp,4
     9ea:	e101                	bnez	a0,9ea <main+0x2>
     9ec:	0009                	c.nop	2
     9ee:	2e00                	fld	fs0,24(a2)
     9f0:	6f74                	flw	fa3,92(a4)
     9f2:	0100                	addi	s0,sp,128
     9f4:	1691                	addi	a3,a3,-28
     9f6:	02b8                	addi	a4,sp,328
     9f8:	0000                	unimp
     9fa:	0003c82f          	0x3c82f
     9fe:	0100                	addi	s0,sp,128
     a00:	2591                	jal	1044 <main+0x65c>
     a02:	02b8                	addi	a4,sp,328
     a04:	0000                	unimp
     a06:	1900                	addi	s0,sp,176
     a08:	0220                	addi	s0,sp,264
     a0a:	0000                	unimp
     a0c:	8601                	c.srai64	a2
     a0e:	6701                	0x6701
     a10:	0000                	unimp
     a12:	c400                	sw	s0,8(s0)
     a14:	0000                	unimp
     a16:	5c00                	lw	s0,56(s0)
     a18:	0000                	unimp
     a1a:	0100                	addi	s0,sp,128
    int   argc = 0;
     a1c:	249c                	fld	fa5,8(s1)
     a1e:	000a                	c.slli	zero,0x2
{
     a20:	2600                	fld	fs0,8(a2)
     a22:	0061                	c.nop	24
    int   argc = 0;
     a24:	8601                	c.srai64	a2
     a26:	b814                	fsd	fa3,48(s0)
     a28:	0002                	c.slli64	zero
     a2a:	4600                	lw	s0,8(a2)
     a2c:	000c                	0xc
     a2e:	3000                	fld	fs0,32(s0)
     a30:	0062                	c.slli	zero,0x18
     a32:	8601                	c.srai64	a2
     a34:	b822                	fsd	fs0,48(sp)
     a36:	0002                	c.slli64	zero
     a38:	0100                	addi	s0,sp,128
     a3a:	6572305b          	0x6572305b
     a3e:	86010073          	0x86010073
     a42:	0002be33          	sltu	t3,t0,zero
     a46:	0100                	addi	s0,sp,128
     a48:	005c                	addi	a5,sp,4
     a4a:	1819                	addi	a6,a6,-26
	for(int i = 0; i < 12; i++) { 
     a4c:	01000003          	lb	zero,16(zero) # 10 <_start>
     a50:	0179                	addi	sp,sp,30
     a52:	00000067          	jr	zero # 0 <RAM_START_ADDRESS>
    int   argc = 0;
     a56:	0254                	addi	a3,sp,260
     a58:	0000                	unimp
     a5a:	004c                	addi	a1,sp,4
	  uart_send_char(hello[i]);
     a5c:	0000                	unimp
     a5e:	9c01                	0x9c01
     a60:	0abd                	addi	s5,s5,15
     a62:	0000                	unimp
     a64:	6126                	flw	ft2,72(sp)
     a66:	0100                	addi	s0,sp,128
	for(int i = 0; i < 12; i++) { 
     a68:	1879                	addi	a6,a6,-2
     a6a:	02b8                	addi	a4,sp,328
	ee_printf("Hello World\n");
     a6c:	0000                	unimp
     a6e:	0c80                	addi	s0,sp,592
     a70:	0000                	unimp
     a72:	6226                	flw	ft4,72(sp)
    portable_init(&(results[0].port), &argc, argv);
     a74:	0100                	addi	s0,sp,128
     a76:	2679                	jal	e04 <main+0x41c>
     a78:	02b8                	addi	a4,sp,328
     a7a:	0000                	unimp
     a7c:	0ca1                	addi	s9,s9,8
     a7e:	0000                	unimp
     a80:	7226                	flw	ft4,104(sp)
     a82:	7365                	lui	t1,0xffff9
     a84:	0100                	addi	s0,sp,128
     a86:	3779                	jal	a14 <main+0x2c>
     a88:	02be                	slli	t0,t0,0xf
     a8a:	0000                	unimp
     a8c:	0ccd                	addi	s9,s9,19
     a8e:	0000                	unimp
     a90:	9c1c                	0x9c1c
     a92:	0001                	nop
     a94:	0100                	addi	s0,sp,128
     a96:	00410c7b          	0x410c7b
     a9a:	0000                	unimp
     a9c:	0d04                	addi	s1,sp,656
     a9e:	0000                	unimp
     aa0:	a31c                	fsd	fa5,0(a4)
     aa2:	0002                	c.slli64	zero
     aa4:	0100                	addi	s0,sp,128
     aa6:	0c7c                	addi	a5,sp,540
    results[0].seed1      = get_seed(1);
     aa8:	0041                	c.nop	16
     aaa:	0000                	unimp
     aac:	00000d17          	auipc	s10,0x0
     ab0:	0002742b          	0x2742b
     ab4:	bd00                	fsd	fs0,56(a0)
     ab6:	000a                	c.slli	zero,0x2
     ab8:	a500                	fsd	fs0,8(a0)
     aba:	000a                	c.slli	zero,0x2
     abc:	1400                	addi	s0,sp,544
     abe:	5a01                	li	s4,-32
     ac0:	5a01f303          	0x5a01f303
     ac4:	0114                	addi	a3,sp,128
     ac6:	0078025b          	0x78025b
    results[0].seed2      = get_seed(2);
     aca:	2c00                	fld	fs0,24(s0)
    results[0].seed1      = get_seed(1);
     acc:	0288                	addi	a0,sp,320
     ace:	0000                	unimp
    results[0].seed2      = get_seed(2);
     ad0:	0abd                	addi	s5,s5,15
     ad2:	0000                	unimp
     ad4:	0114                	addi	a3,sp,128
     ad6:	025a                	slli	tp,tp,0x16
     ad8:	0079                	c.nop	30
     ada:	0114                	addi	a3,sp,128
    results[0].seed3      = get_seed(3);
     adc:	01f3035b          	0x1f3035b
    results[0].seed2      = get_seed(2);
     ae0:	005c                	addi	a5,sp,4
     ae2:	1900                	addi	s0,sp,176
    results[0].seed3      = get_seed(3);
     ae4:	0202                	c.slli64	tp
     ae6:	0000                	unimp
     ae8:	4601                	li	a2,0
     aea:	4101                	li	sp,0
     aec:	0000                	unimp
     aee:	2000                	fld	fs0,0(s0)
    results[0].iterations = get_seed_32(4);
     af0:	0001                	nop
     af2:	3400                	fld	fs0,40(s0)
    results[0].seed3      = get_seed(3);
     af4:	0001                	nop
     af6:	0100                	addi	s0,sp,128
    results[0].iterations = get_seed_32(4);
     af8:	709c                	flw	fa5,32(s1)
     afa:	1a00000b          	0x1a00000b
     afe:	02cd                	addi	t0,t0,19
    results[0].execs = get_seed_32(5);
     b00:	0000                	unimp
     b02:	4601                	li	a2,0
    results[0].iterations = get_seed_32(4);
     b04:	000b7013          	andi	zero,s6,0
    results[0].execs = get_seed_32(5);
     b08:	2a00                	fld	fs0,16(a2)
     b0a:	000d                	c.nop	3
    if (results[0].execs == 0)
     b0c:	2600                	fld	fs0,8(a2)
     b0e:	6572                	flw	fa0,28(sp)
    results[0].execs = get_seed_32(5);
     b10:	46010073          	0x46010073
    if ((results[0].seed1 == 0) && (results[0].seed2 == 0)
     b14:	be28                	fsd	fa0,120(a2)
     b16:	0002                	c.slli64	zero
     b18:	9b00                	0x9b00
     b1a:	000d                	c.nop	3
     b1c:	1c00                	addi	s0,sp,560
     b1e:	029e                	slli	t0,t0,0x7
     b20:	0000                	unimp
     b22:	4801                	li	a6,0
     b24:	410c                	lw	a1,0(a0)
     b26:	0000                	unimp
     b28:	d200                	sw	s0,32(a2)
     b2a:	000d                	c.nop	3
     b2c:	1c00                	addi	s0,sp,560
     b2e:	0132                	slli	sp,sp,0xc
     b30:	0000                	unimp
     b32:	4901                	li	s2,0
     b34:	410c                	lw	a1,0(a0)
     b36:	0000                	unimp
        && (results[0].seed3 == 0))
     b38:	0800                	addi	s0,sp,16
     b3a:	000e                	c.slli	zero,0x3
     b3c:	1c00                	addi	s0,sp,560
     b3e:	0324                	addi	s1,sp,392
     b40:	0000                	unimp
     b42:	4a01                	li	s4,0
        if ((1 << (ee_u32)i) & results[0].execs)
     b44:	7a0c                	flw	fa1,48(a2)
     b46:	0000                	unimp
    results[i].memblock[0] = stack_memblock + i * TOTAL_DATA_SIZE;
     b48:	3c00                	fld	fs0,56(s0)
     b4a:	000e                	c.slli	zero,0x3
     b4c:	2000                	fld	fs0,0(s0)
     b4e:	0000                	unimp
     b50:	0000                	unimp
     b52:	d51c                	sw	a5,40(a0)
     b54:	0008                	0x8
     b56:	0100                	addi	s0,sp,128
     b58:	1051                	c.nop	-12
     b5a:	0041                	c.nop	16
     b5c:	0000                	unimp
     b5e:	00000e8b          	0xe8b
     b62:	ef1c                	fsw	fa5,24(a4)
        if ((1 << (ee_u32)i) & results[0].execs)
     b64:	0000                	unimp
     b66:	0100                	addi	s0,sp,128
     b68:	1052                	c.slli	zero,0x34
     b6a:	0041                	c.nop	16
            num_algorithms++;
     b6c:	0000                	unimp
     b6e:	0ee1                	addi	t4,t4,24
    results[i].memblock[0] = stack_memblock + i * TOTAL_DATA_SIZE;
     b70:	0000                	unimp
     b72:	a824                	fsd	fs1,80(s0)
     b74:	0001                	nop
     b76:	e700                	fsw	fs0,8(a4)
    results[i].err         = 0;
     b78:	000c                	0xc
     b7a:	2400                	fld	fs0,8(s0)
        if ((1 << (ee_u32)i) & results[0].execs)
     b7c:	0208                	addi	a0,sp,256
     b7e:	0000                	unimp
     b80:	00000cf3          	0xcf3
            num_algorithms++;
     b84:	302c                	fld	fa1,96(s0)
     b86:	0002                	c.slli64	zero
        if ((1 << (ee_u32)i) & results[0].execs)
     b88:	ff00                	fsw	fs0,56(a4)
     b8a:	000c                	0xc
            num_algorithms++;
     b8c:	1400                	addi	s0,sp,544
     b8e:	5a01                	li	s4,-32
     b90:	7902                	flw	fs2,32(sp)
     b92:	0028                	addi	a0,sp,8
     b94:	0000                	unimp
     b96:	0408                	addi	a0,sp,512
        results[i].size = results[i].size / num_algorithms;
     b98:	0041                	c.nop	16
     b9a:	0000                	unimp
     b9c:	bc31                	j	5b8 <core_bench_list+0x94>
     b9e:	0009                	c.nop	2
     ba0:	a000                	fsd	fs0,0(s0)
     ba2:	0002                	c.slli64	zero
     ba4:	1400                	addi	s0,sp,544
     ba6:	0000                	unimp
     ba8:	0100                	addi	s0,sp,128
     baa:	989c                	0x989c
     bac:	3200000b          	0x3200000b
     bb0:	09c9                	addi	s3,s3,18
     bb2:	0000                	unimp
     bb4:	5a01                	li	s4,-32
     bb6:	d432                	sw	a2,40(sp)
     bb8:	0009                	c.nop	2
     bba:	0100                	addi	s0,sp,128
     bbc:	9131005b          	0x9131005b
    for (i = 0; i < NUM_ALGORITHMS; i++)
     bc0:	0004                	0x4
     bc2:	b400                	fsd	fs0,40(s0)
        results[i].size = results[i].size / num_algorithms;
     bc4:	0002                	c.slli64	zero
     bc6:	6000                	flw	fs0,0(s0)
    ee_u16       i, j = 0, num_algorithms = 0;
     bc8:	0000                	unimp
     bca:	0100                	addi	s0,sp,128
        if ((1 << (ee_u32)i) & results[0].execs)
     bcc:	0b9c                	addi	a5,sp,464
     bce:	000c                	0xc
    for (i = 0; i < NUM_ALGORITHMS; i++)
     bd0:	1f00                	addi	s0,sp,944
     bd2:	000004a3          	sb	zero,9(zero) # 9 <RAM_START_ADDRESS+0x9>
        if ((1 << (ee_u32)i) & results[0].execs)
     bd6:	0f5e                	slli	t5,t5,0x17
     bd8:	0000                	unimp
     bda:	b032                	fsd	fa2,32(sp)
    for (i = 0; i < NUM_ALGORITHMS; i++)
     bdc:	0004                	0x4
     bde:	0100                	addi	s0,sp,128
        if ((1 << (ee_u32)i) & results[0].execs)
     be0:	04bd1f5b          	0x4bd1f5b
    for (i = 0; i < NUM_ALGORITHMS; i++)
     be4:	0000                	unimp
     be6:	0f98                	addi	a4,sp,976
     be8:	0000                	unimp
     bea:	ca32                	sw	a2,20(sp)
        if (results[i].execs & ID_LIST)
     bec:	0004                	0x4
     bee:	0100                	addi	s0,sp,128
        if (results[i].execs & ID_MATRIX)
     bf0:	1f5d                	addi	t5,t5,-9
     bf2:	000004d7          	vadd.vv	v9,v0,v0,v0.t
        if (results[i].execs & ID_STATE)
     bf6:	0fc4                	addi	s1,sp,980
     bf8:	0000                	unimp
     bfa:	e41f 0004 e500      	0xe5000004e41f
            core_init_state(
     c00:	2100000f          	0x2100000f
     c04:	04f1                	addi	s1,s1,28
     c06:	0000                	unimp
                results[0].size, results[i].seed1, results[i].memblock[3]);
     c08:	1011                	c.nop	-28
     c0a:	0000                	unimp
            core_init_state(
     c0c:	bc1e                	fsd	ft7,56(sp)
     c0e:	0009                	c.nop	2
     c10:	d400                	sw	s0,40(s0)
     c12:	0002                	c.slli64	zero
     c14:	1800                	addi	s0,sp,48
     c16:	0000                	unimp
     c18:	0100                	addi	s0,sp,128
     c1a:	0165                	addi	sp,sp,25
     c1c:	1f05                	addi	t5,t5,-31
     c1e:	09d4                	addi	a3,sp,212
     c20:	0000                	unimp
     c22:	1024                	addi	s1,sp,40
     c24:	0000                	unimp
     c26:	c91f 0009 3700      	0x37000009c91f
    if (results[0].iterations == 0)
     c2c:	0010                	0x10
     c2e:	0000                	unimp
        results[0].iterations = 1;
     c30:	3100                	fld	fs0,32(a0)
     c32:	00000457          	vadd.vv	v8,v0,v0,v0.t
     c36:	0314                	addi	a3,sp,384
            iterate(&results[0]);
     c38:	0000                	unimp
     c3a:	0028                	addi	a0,sp,8
            results[0].iterations *= 10;
     c3c:	0000                	unimp
     c3e:	9c01                	0x9c01
            iterate(&results[0]);
     c40:	0c36                	slli	s8,s8,0xd
     c42:	0000                	unimp
     c44:	691f 0004 4a00      	0x4a000004691f
     c4a:	0010                	0x10
     c4c:	3300                	fld	fs0,32(a4)
     c4e:	0476                	slli	s0,s0,0x1d
     c50:	0000                	unimp
     c52:	5d01                	li	s10,-32
            results[0].iterations *= 10;
     c54:	00048333          	add	t1,s1,zero
     c58:	0100                	addi	s0,sp,128
     c5a:	005a                	c.slli	zero,0x16
     c5c:	1d31                	addi	s10,s10,-20
     c5e:	0004                	0x4
     c60:	3c00                	fld	fs0,56(s0)
     c62:	20000003          	lb	zero,512(zero) # 200 <calc_func+0xe0>
     c66:	0000                	unimp
            start_time();
     c68:	0100                	addi	s0,sp,128
     c6a:	5f9c                	lw	a5,56(a5)
            iterate(&results[0]);
     c6c:	000c                	0xc
     c6e:	3200                	fld	fs0,32(a2)
     c70:	0000042f          	vamoaddei8.v	zero,(zero),v0,v8,v0.t
            stop_time();
     c74:	5a01                	li	s4,-32
     c76:	3c32                	fld	fs8,296(sp)
            secs_passed = time_in_secs(get_time());
     c78:	0004                	0x4
     c7a:	0100                	addi	s0,sp,128
     c7c:	0449335b          	0x449335b
        while (secs_passed < (secs_ret)1)
     c80:	0000                	unimp
     c82:	5d01                	li	s10,-32
        results[0].iterations *= 1 + 10 / divisor;
     c84:	3100                	fld	fs0,32(a0)
     c86:	03f0                	addi	a2,sp,460
     c88:	0000                	unimp
     c8a:	035c                	addi	a5,sp,388
     c8c:	0000                	unimp
     c8e:	0058                	addi	a4,sp,4
     c90:	0000                	unimp
     c92:	9c01                	0x9c01
     c94:	00000ca3          	sb	zero,25(zero) # 19 <_start+0x9>
     c98:	021f 0004 6800      	0x68000004021f
     c9e:	0010                	0x10
    start_time();
     ca0:	3200                	fld	fs0,32(a2)
     ca2:	0000040f          	0x40f
    iterate(&results[0]);
     ca6:	5b01                	li	s6,-32
     ca8:	0003f023          	0x3f023
     cac:	8400                	0x8400
     cae:	24000003          	lb	zero,576(zero) # 240 <calc_func+0x120>
     cb2:	0000                	unimp
     cb4:	0100                	addi	s0,sp,128
     cb6:	290101b3          	0x290101b3
     cba:	0000040f          	0x40f
     cbe:	021f 0004 aa00      	0xaa000004021f
    stop_time();
     cc4:	0010                	0x10
     cc6:	0000                	unimp
    total_time = get_time();
     cc8:	3100                	fld	fs0,32(a0)
     cca:	03b6                	slli	t2,t2,0xd
    seedcrc = crc16(results[0].seed1, seedcrc);
     ccc:	0000                	unimp
     cce:	03b4                	addi	a3,sp,456
     cd0:	0000                	unimp
     cd2:	0024                	addi	s1,sp,8
     cd4:	0000                	unimp
     cd6:	9c01                	0x9c01
     cd8:	0cd2                	slli	s9,s9,0x14
     cda:	0000                	unimp
    total_time = get_time();
     cdc:	c81f 0003 bd00      	0xbd000003c81f
    seedcrc = crc16(results[0].seed1, seedcrc);
     ce2:	0010                	0x10
     ce4:	2100                	fld	fs0,0(a0)
     ce6:	03d5                	addi	t2,t2,21
     ce8:	0000                	unimp
     cea:	10f1                	addi	ra,ra,-4
     cec:	0000                	unimp
     cee:	e221                	bnez	a2,d2e <main+0x346>
    seedcrc = crc16(results[0].seed2, seedcrc);
     cf0:	26000003          	lb	zero,608(zero) # 260 <cmp_complex+0xc>
    seedcrc = crc16(results[0].seed1, seedcrc);
     cf4:	0011                	c.nop	4
     cf6:	0000                	unimp
    seedcrc = crc16(results[0].seed2, seedcrc);
     cf8:	9234                	0x9234
     cfa:	92000003          	lb	zero,-1760(zero) # fffff920 <RAM_SIZE+0xfffef920>
     cfe:	35000003          	lb	zero,848(zero) # 350 <core_list_undo_remove+0x14>
    seedcrc = crc16(results[0].seed3, seedcrc);
     d02:	000000fb          	0xfb
    seedcrc = crc16(results[0].seed2, seedcrc);
     d06:	000000fb          	0xfb
    seedcrc = crc16(results[0].seed3, seedcrc);
     d0a:	35084b03          	lbu	s6,848(a6)
     d0e:	0292                	slli	t0,t0,0x4
     d10:	0000                	unimp
     d12:	0292                	slli	t0,t0,0x4
    seedcrc = crc16(results[0].size, seedcrc);
     d14:	0000                	unimp
     d16:	35084c03          	lbu	s8,848(a6)
     d1a:	01e8                	addi	a0,sp,204
    switch (seedcrc)
     d1c:	0000                	unimp
     d1e:	01e8                	addi	a0,sp,204
     d20:	0000                	unimp
     d22:	3508ab03          	lw	s6,848(a7) # 800350 <RAM_SIZE+0x7f0350>
    seedcrc = crc16(results[0].size, seedcrc);
     d26:	0000024b          	fnmsub.s	ft4,ft0,ft0,ft0,rne
    switch (seedcrc)
     d2a:	0000024b          	fnmsub.s	ft4,ft0,ft0,ft0,rne
     d2e:	0008b703          	0x8b703
     d32:	0af1                	addi	s5,s5,28
     d34:	0000                	unimp
     d36:	0004                	0x4
     d38:	031f 0000 0104      	0x1040000031f
     d3e:	0082                	c.slli64	ra
     d40:	0000                	unimp
     d42:	aa0c                	fsd	fa1,16(a2)
     d44:	0004                	0x4
     d46:	1900                	addi	s0,sp,176
            ee_printf("Profile generation run parameters for coremark.\n");
     d48:	0000                	unimp
     d4a:	c000                	sw	s0,0(s0)
     d4c:	0001                	nop
     d4e:	0000                	unimp
     d50:	0000                	unimp
     d52:	ff00                	fsw	fs0,56(a4)
            known_id = 2;
     d54:	0014                	0x14
     d56:	0200                	addi	s0,sp,256
        for (i = 0; i < default_num_contexts; i++)
     d58:	0504                	addi	s1,sp,640
     d5a:	6e69                	lui	t3,0x1a
     d5c:	0074                	addi	a3,sp,12
     d5e:	c7070403          	lb	s0,-912(a4)
     d62:	0008                	0x8
     d64:	0300                	addi	s0,sp,384
     d66:	0508                	addi	a0,sp,640
            results[i].err = 0;
     d68:	000001bb          	0x1bb
     d6c:	87041003          	lh	zero,-1936(s0)
     d70:	0011                	c.nop	4
     d72:	0400                	addi	s0,sp,512
                && (results[i].crclist != list_known_crc[known_id]))
     d74:	00000303          	lb	t1,0(zero) # 0 <RAM_START_ADDRESS>
            results[i].err = 0;
     d78:	5f02                	lw	t5,32(sp)
     d7a:	4d18                	lw	a4,24(a0)
     d7c:	0000                	unimp
     d7e:	0300                	addi	s0,sp,384
                && (results[i].crclist != list_known_crc[known_id]))
     d80:	0502                	c.slli64	a0
     d82:	00c9                	addi	ra,ra,18
            results[i].err = 0;
     d84:	0000                	unimp
     d86:	3504                	fld	fs1,40(a0)
                && (results[i].crclist != list_known_crc[known_id]))
     d88:	0002                	c.slli64	zero
     d8a:	0200                	addi	s0,sp,256
            results[i].err = 0;
     d8c:	1860                	addi	s0,sp,60
     d8e:	0060                	addi	s0,sp,12
                && (results[i].crclist != list_known_crc[known_id]))
     d90:	0000                	unimp
     d92:	ba070203          	lb	tp,-1120(a4)
                ee_printf("[%u]ERROR! list crc 0x%04x - should be 0x%04x\n",
     d96:	0002                	c.slli64	zero
                ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n",
     d98:	0400                	addi	s0,sp,512
     d9a:	0118                	addi	a4,sp,128
                ee_printf("[%u]ERROR! state crc 0x%04x - should be 0x%04x\n",
     d9c:	0000                	unimp
     d9e:	6102                	flw	ft2,0(sp)
     da0:	2518                	fld	fa4,8(a0)
     da2:	0000                	unimp
            total_errors += results[i].err;
     da4:	0300                	addi	s0,sp,384
     da6:	0408                	addi	a0,sp,512
     da8:	118c                	addi	a1,sp,224
     daa:	0000                	unimp
     dac:	f504                	fsw	fs1,40(a0)
     dae:	0000                	unimp
     db0:	0200                	addi	s0,sp,256
     db2:	00861863          	bne	a2,s0,dc2 <main+0x3da>
     db6:	0000                	unimp
        for (i = 0; i < default_num_contexts; i++)
     db8:	62080103          	lb	sp,1568(a6)
     dbc:	0002                	c.slli64	zero
     dbe:	0400                	addi	s0,sp,512
            total_errors += results[i].err;
     dc0:	000003b3          	add	t2,zero,zero
        for (i = 0; i < default_num_contexts; i++)
     dc4:	6402                	flw	fs0,0(sp)
     dc6:	2c18                	fld	fa4,24(s0)
            total_errors += results[i].err;
     dc8:	0000                	unimp
     dca:	0400                	addi	s0,sp,512
     dcc:	0562                	slli	a0,a0,0x18
     dce:	0000                	unimp
        for (i = 0; i < default_num_contexts; i++)
     dd0:	7202                	flw	ft4,32(sp)
     dd2:	8d10                	0x8d10
            total_errors += results[i].err;
     dd4:	0000                	unimp
     dd6:	0500                	addi	s0,sp,640
     dd8:	048d                	addi	s1,s1,3
     dda:	0000                	unimp
        for (i = 0; i < default_num_contexts; i++)
     ddc:	c202                	sw	zero,4(sp)
     dde:	00008d0f          	0x8d0f
            results[i].err = 0;
     de2:	0600                	addi	s0,sp,768
     de4:	0000034b          	fnmsub.s	ft6,ft0,ft0,ft0,rne
     de8:	0201                	addi	tp,tp,0
     dea:	10c4                	addi	s1,sp,100
     dec:	00cc                	addi	a1,sp,68
     dee:	0000                	unimp
     df0:	0001af07          	flw	ft10,0(gp) # 7390 <__global_pointer$>
     df4:	0200                	addi	s0,sp,256
     df6:	0bc6                	slli	s7,s7,0x11
     df8:	007a                	c.slli	zero,0x1e
     dfa:	0000                	unimp
            if ((results[i].execs & ID_LIST)
     dfc:	0000                	unimp
     dfe:	ba04                	fsd	fs1,48(a2)
            results[i].err = 0;
     e00:	02000003          	lb	zero,32(zero) # 20 <_start+0x10>
            if ((results[i].execs & ID_LIST)
     e04:	00b103c7          	fmsub.s	ft7,ft2,fa1,ft0,rne
     e08:	0000                	unimp
     e0a:	cd04                	sw	s1,24(a0)
                && (results[i].crclist != list_known_crc[known_id]))
     e0c:	0004                	0x4
     e0e:	0300                	addi	s0,sp,384
     e10:	1039                	c.nop	-18
     e12:	008d                	addi	ra,ra,3
     e14:	0000                	unimp
     e16:	1406                	slli	s0,s0,0x21
                ee_printf("[%u]ERROR! list crc 0x%04x - should be 0x%04x\n",
     e18:	0002                	c.slli64	zero
     e1a:	0400                	addi	s0,sp,512
     e1c:	0c105b03          	lhu	s6,193(zero) # c1 <frame_dummy+0x1d>
     e20:	0001                	nop
     e22:	0700                	addi	s0,sp,896
                results[i].err++;
     e24:	0000035b          	0x35b
     e28:	410c5d03          	lhu	s10,1040(s8) # 15a0c <RAM_SIZE+0x5a0c>
     e2c:	0000                	unimp
     e2e:	0000                	unimp
            if ((results[i].execs & ID_MATRIX)
     e30:	6908                	flw	fa0,16(a0)
     e32:	7864                	flw	fs1,116(s0)
     e34:	0300                	addi	s0,sp,384
     e36:	0c5e                	slli	s8,s8,0x17
     e38:	0041                	c.nop	16
     e3a:	0000                	unimp
     e3c:	0002                	c.slli64	zero
     e3e:	4a06                	lw	s4,64(sp)
     e40:	0000                	unimp
     e42:	0800                	addi	s0,sp,16
     e44:	34106103          	0x34106103
     e48:	0001                	nop
     e4a:	0700                	addi	s0,sp,896
     e4c:	03cd                	addi	t2,t2,19
     e4e:	0000                	unimp
     e50:	34196303          	0x34196303
                && (results[i].crcmatrix != matrix_known_crc[known_id]))
     e54:	0001                	nop
     e56:	0000                	unimp
     e58:	00015c07          	vle16.v	v24,(sp),v0.t
     e5c:	0300                	addi	s0,sp,384
     e5e:	1964                	addi	s1,sp,188
                ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n",
     e60:	013a                	slli	sp,sp,0xe
     e62:	0000                	unimp
     e64:	0004                	0x4
     e66:	0409                	addi	s0,s0,2
     e68:	010c                	addi	a1,sp,128
     e6a:	0000                	unimp
                results[i].err++;
     e6c:	0409                	addi	s0,s0,2
     e6e:	00e4                	addi	s1,sp,76
            if ((results[i].execs & ID_STATE)
     e70:	0000                	unimp
     e72:	1104                	addi	s1,sp,160
                results[i].err++;
     e74:	0001                	nop
     e76:	0300                	addi	s0,sp,384
     e78:	106a                	c.slli	zero,0x3a
     e7a:	0041                	c.nop	16
                && (results[i].crcstate != state_known_crc[known_id]))
     e7c:	0000                	unimp
     e7e:	d304                	sw	s1,32(a4)
            if ((results[i].execs & ID_STATE)
     e80:	0002                	c.slli64	zero
     e82:	0300                	addi	s0,sp,384
                && (results[i].crcstate != state_known_crc[known_id]))
     e84:	0067106b          	0x67106b
            if ((results[i].execs & ID_STATE)
     e88:	0000                	unimp
     e8a:	7306                	flw	ft6,96(sp)
                && (results[i].crcstate != state_known_crc[known_id]))
     e8c:	10000003          	lb	zero,256(zero) # 100 <cmp_idx+0x3c>
     e90:	92107103          	0x92107103
     e94:	0001                	nop
     e96:	0800                	addi	s0,sp,16
     e98:	004e                	c.slli	zero,0x13
     e9a:	250d7303          	0x250d7303
     e9e:	0000                	unimp
     ea0:	0000                	unimp
     ea2:	4108                	lw	a0,0(a0)
     ea4:	0300                	addi	s0,sp,384
     ea6:	0d74                	addi	a3,sp,668
            total_errors += results[i].err;
     ea8:	0192                	slli	gp,gp,0x4
     eaa:	0000                	unimp
     eac:	0804                	addi	s1,sp,16
     eae:	0042                	c.slli	zero,0x10
            results[i].list = core_list_init(
     eb0:	920d7503          	0x920d7503
     eb4:	0001                	nop
     eb6:	0800                	addi	s0,sp,16
     eb8:	4308                	lw	a0,0(a4)
     eba:	0300                	addi	s0,sp,384
     ebc:	0d76                	slli	s10,s10,0x1d
     ebe:	0198                	addi	a4,sp,192
     ec0:	0000                	unimp
     ec2:	000c                	0xc
     ec4:	0409                	addi	s0,s0,2
     ec6:	0140                	addi	s0,sp,132
     ec8:	0000                	unimp
     eca:	0409                	addi	s0,s0,2
     ecc:	014c                	addi	a1,sp,132
     ece:	0000                	unimp
     ed0:	8704                	0x8704
     ed2:	0002                	c.slli64	zero
     ed4:	0300                	addi	s0,sp,384
     ed6:	01580377          	0x1580377
     eda:	0000                	unimp
        if (results[i].execs & ID_MATRIX)
     edc:	4d06                	lw	s10,64(sp)
     ede:	0001                	nop
            results[i].list = core_list_init(
     ee0:	4400                	lw	s0,8(s0)
     ee2:	7b108903          	lb	s2,1969(ra)
     ee6:	0002                	c.slli64	zero
        if (results[i].execs & ID_MATRIX)
     ee8:	0700                	addi	s0,sp,896
     eea:	0000017b          	0x17b
                                 | (((ee_s32)results[i].seed2) << 16),
     eee:	41198c03          	lb	s8,1041(s3)
     ef2:	0000                	unimp
     ef4:	0000                	unimp
     ef6:	00018107          	vle8.v	v2,(gp),v0.t
     efa:	0300                	addi	s0,sp,384
            core_init_matrix(results[0].size,
     efc:	198d                	addi	s3,s3,-29
     efe:	0041                	c.nop	16
                                 | (((ee_s32)results[i].seed2) << 16),
     f00:	0000                	unimp
     f02:	0702                	c.slli64	a4
     f04:	00000187          	vle8.v	v3,(zero),v0.t
                             (ee_s32)results[i].seed1
     f08:	41198e03          	lb	t3,1041(s3)
                                 | (((ee_s32)results[i].seed2) << 16),
     f0c:	0000                	unimp
     f0e:	0400                	addi	s0,sp,512
            core_init_matrix(results[0].size,
     f10:	00051a07          	flh	fs4,0(a0) # 8a8aa <RAM_SIZE+0x7a8aa>
                             (ee_s32)results[i].seed1
     f14:	0300                	addi	s0,sp,384
     f16:	027b198f          	0x27b198f
            core_init_matrix(results[0].size,
     f1a:	0000                	unimp
                                 | (((ee_s32)results[i].seed2) << 16),
     f1c:	0708                	addi	a0,sp,896
     f1e:	02b5                	addi	t0,t0,13
            core_init_matrix(results[0].size,
     f20:	0000                	unimp
     f22:	8d199003          	lh	zero,-1839(s3)
     f26:	0000                	unimp
     f28:	1800                	addi	s0,sp,48
     f2a:	00036807          	vle32.v	v16,(t1),v0.t
        if (results[i].execs & ID_STATE)
     f2e:	0300                	addi	s0,sp,384
     f30:	1991                	addi	s3,s3,-28
     f32:	008d                	addi	ra,ra,3
                ee_printf("[%u]ERROR! state crc 0x%04x - should be 0x%04x\n",
     f34:	0000                	unimp
     f36:	071c                	addi	a5,sp,896
     f38:	0345                	addi	t1,t1,17
     f3a:	0000                	unimp
     f3c:	8d199203          	lh	tp,-1839(s3)
                results[i].err++;
     f40:	0000                	unimp
     f42:	2000                	fld	fs0,0(s0)
     f44:	0009ba07          	fld	fs4,0(s3)
     f48:	0300                	addi	s0,sp,384
     f4a:	01341993          	slli	s3,s0,0x13
     f4e:	0000                	unimp
     f50:	0824                	addi	s1,sp,24
     f52:	616d                	addi	sp,sp,240
     f54:	0074                	addi	a3,sp,12
     f56:	9e199403          	lh	s0,-1567(s3)
    switch (seedcrc)
     f5a:	0001                	nop
     f5c:	2800                	fld	fs0,16(s0)
     f5e:	6308                	flw	fa0,0(a4)
     f60:	6372                	flw	ft6,28(sp)
     f62:	0300                	addi	s0,sp,384
     f64:	0c96                	slli	s9,s9,0x5
     f66:	0054                	addi	a3,sp,4
     f68:	0000                	unimp
     f6a:	0738                	addi	a4,sp,904
     f6c:	018d                	addi	gp,gp,3
     f6e:	0000                	unimp
            ee_printf("2K performance run parameters for coremark.\n");
     f70:	540c9703          	lh	a4,1344(s9)
     f74:	0000                	unimp
     f76:	3a00                	fld	fs0,48(a2)
     f78:	00032b07          	flw	fs6,0(t1) # ffff9000 <RAM_SIZE+0xfffe9000>
            known_id = 3;
     f7c:	0300                	addi	s0,sp,384
     f7e:	0c98                	addi	a4,sp,592
     f80:	0054                	addi	a3,sp,4
     f82:	0000                	unimp
        for (i = 0; i < default_num_contexts; i++)
     f84:	073c                	addi	a5,sp,904
     f86:	01f9                	addi	gp,gp,30
    total_errors += check_data_types();
     f88:	0000                	unimp
     f8a:	540c9903          	lh	s2,1344(s9)
    ee_printf("CoreMark Size    : %lu\n", (long unsigned)results[0].size);
     f8e:	0000                	unimp
    total_errors += check_data_types();
     f90:	3e00                	fld	fs0,56(a2)
     f92:	6508                	flw	fa0,8(a0)
    ee_printf("CoreMark Size    : %lu\n", (long unsigned)results[0].size);
     f94:	7272                	flw	ft4,60(sp)
     f96:	0300                	addi	s0,sp,384
     f98:	0c9a                	slli	s9,s9,0x6
     f9a:	0041                	c.nop	16
     f9c:	0000                	unimp
     f9e:	0740                	addi	s0,sp,900
    ee_printf("Total ticks      : %lu\n", (long unsigned)total_time);
     fa0:	0340                	addi	s0,sp,388
     fa2:	0000                	unimp
     fa4:	cc139c03          	lh	s8,-831(t2)
     fa8:	0000                	unimp
     faa:	4200                	lw	s0,0(a2)
     fac:	0a00                	addi	s0,sp,272
     fae:	0000028b          	0x28b
    ee_printf("Total time (secs): %d\n", time_in_secs(total_time));
     fb2:	0000028b          	0x28b
     fb6:	00002c0b          	0x2c0b
     fba:	0300                	addi	s0,sp,384
     fbc:	0c00                	addi	s0,sp,528
     fbe:	0404                	addi	s1,sp,512
     fc0:	0161                	addi	sp,sp,24
     fc2:	0000                	unimp
     fc4:	aa039d03          	lh	s10,-1376(t2)
    total_errors += check_data_types();
     fc8:	0001                	nop
     fca:	0a00                	addi	s0,sp,272
    if (time_in_secs(total_time) > 0)
     fcc:	0054                	addi	a3,sp,4
     fce:	0000                	unimp
    total_errors += check_data_types();
     fd0:	02a9                	addi	t0,t0,10
     fd2:	0000                	unimp
    if (time_in_secs(total_time) > 0)
     fd4:	00002c0b          	0x2c0b
     fd8:	0400                	addi	s0,sp,512
     fda:	0d00                	addi	s0,sp,656
    if (time_in_secs(total_time) < 10)
     fdc:	047e                	slli	s0,s0,0x1f
     fde:	0000                	unimp
     fe0:	2401                	jal	11e0 <main+0x7f8>
     fe2:	0002990f          	0x2990f
     fe6:	0500                	addi	s0,sp,640
     fe8:	00667c03          	0x667c03
    ee_printf("Iterations       : %lu\n",
     fec:	0d00                	addi	s0,sp,656
     fee:	04ed                	addi	s1,s1,27
     ff0:	0000                	unimp
     ff2:	2901                	jal	1402 <core_init_matrix+0x52>
        total_errors++;
     ff4:	0002990f          	0x2990f
     ff8:	0500                	addi	s0,sp,640
     ffa:	00668803          	lb	a6,6(a3) # 7ff00006 <RAM_SIZE+0x7fef0006>
    ee_printf("Iterations       : %lu\n",
     ffe:	0d00                	addi	s0,sp,656
    1000:	03e5                	addi	t2,t2,25
    1002:	0000                	unimp
    1004:	2e01                	jal	1314 <main+0x92c>
    1006:	0002990f          	0x2990f
    100a:	0500                	addi	s0,sp,640
    100c:	00669403          	lh	s0,6(a3)
    ee_printf("Compiler version : %s\n", COMPILER_VERSION);
    1010:	0a00                	addi	s0,sp,272
    1012:	000002ef          	jal	t0,1012 <main+0x62a>
    1016:	000002ef          	jal	t0,1016 <main+0x62e>
    101a:	00002c0b          	0x2c0b
    101e:	0200                	addi	s0,sp,256
    1020:	0900                	addi	s0,sp,144
    1022:	f504                	fsw	fs1,40(a0)
    ee_printf("Compiler flags   : %s\n", COMPILER_FLAGS);
    1024:	0002                	c.slli64	zero
    1026:	0300                	addi	s0,sp,384
    1028:	0801                	addi	a6,a6,0
    102a:	0000026b          	0x26b
    102e:	f50e                	fsw	ft3,168(sp)
    1030:	0002                	c.slli64	zero
    1032:	0f00                	addi	s0,sp,912
    1034:	0000043b          	0x43b
    ee_printf("Memory location  : %s\n", MEM_LOCATION);
    1038:	5701                	li	a4,-32
    103a:	0002df07          	vle16.v	v30,(t0),v0.t
    103e:	0500                	addi	s0,sp,640
    1040:	006bc003          	lbu	zero,6(s7)
    1044:	1000                	addi	s0,sp,32
    1046:	040a                	slli	s0,s0,0x2
    1048:	0000                	unimp
    104a:	6d01                	0x6d01
    ee_printf("seedcrc          : 0x%04x\n", seedcrc);
    104c:	e801                	bnez	s0,105c <main+0x674>
    104e:	0009                	c.nop	2
    1050:	c800                	sw	s0,16(s0)
    1052:	0009                	c.nop	2
    1054:	0100                	addi	s0,sp,128
    1056:	379c                	fld	fa5,40(a5)
    1058:	0009                	c.nop	2
    105a:	0d00                	addi	s0,sp,656
    if (results[0].execs & ID_LIST)
    105c:	0455                	addi	s0,s0,21
    105e:	0000                	unimp
    1060:	6f01                	0x6f01
    1062:	0000250b          	0x250b
    1066:	0300                	addi	s0,sp,384
        for (i = 0; i < default_num_contexts; i++)
    1068:	b491                	j	aac <main+0xc4>
    106a:	04e80d6f          	jal	s10,810b8 <RAM_SIZE+0x710b8>
    106e:	0000                	unimp
            ee_printf("[%d]crclist       : 0x%04x\n", i, results[i].crclist);
    1070:	7001                	c.lui	zero,0xfffe0
    1072:	0009370b          	0x9370b
    1076:	0300                	addi	s0,sp,384
    1078:	b891                	j	8cc <HEAP_SIZE+0xcc>
    107a:	04c70d6f          	jal	s10,710c6 <RAM_SIZE+0x610c6>
    107e:	0000                	unimp
    1080:	7601                	lui	a2,0xfffe0
    1082:	470e                	lw	a4,192(sp)
    1084:	0009                	c.nop	2
    1086:	0600                	addi	s0,sp,768
        for (i = 0; i < default_num_contexts; i++)
    1088:	00626003          	0x626003
    108c:	9f00                	0x9f00
    108e:	6911                	lui	s2,0x4
            ee_printf("[%d]crclist       : 0x%04x\n", i, results[i].crclist);
    1090:	0100                	addi	s0,sp,128
    1092:	0054127b          	0x54127b
    1096:	0000                	unimp
    1098:	1144                	addi	s1,sp,164
    109a:	0000                	unimp
    109c:	6a11                	lui	s4,0x4
    109e:	0100                	addi	s0,sp,128
    10a0:	0054157b          	0x54157b
    10a4:	0000                	unimp
    10a6:	126c                	addi	a1,sp,300
    10a8:	0000                	unimp
    10aa:	4e12                	lw	t3,4(sp)
    10ac:	0005                	c.nop	1
    10ae:	0100                	addi	s0,sp,128
    10b0:	00541c7b          	0x541c7b
    10b4:	0000                	unimp
    10b6:	12da                	slli	t0,t0,0x36
    10b8:	0000                	unimp
    10ba:	df12                	sw	tp,188(sp)
    10bc:	0004                	0x4
    10be:	0100                	addi	s0,sp,128
        for (i = 0; i < default_num_contexts; i++)
    10c0:	127c                	addi	a5,sp,300
    10c2:	0041                	c.nop	16
    10c4:	0000                	unimp
    10c6:	1339                	addi	t1,t1,-18
    10c8:	0000                	unimp
    10ca:	fd12                	fsw	ft4,184(sp)
    10cc:	01000003          	lb	zero,16(zero) # 10 <_start>
    10d0:	217c                	fld	fa5,192(a0)
    10d2:	0041                	c.nop	16
    10d4:	0000                	unimp
    10d6:	000013cb          	fnmsub.s	ft7,ft0,ft0,ft0,rtz
    if (results[0].execs & ID_MATRIX)
    10da:	a212                	fsd	ft4,256(sp)
    10dc:	0004                	0x4
    10de:	0100                	addi	s0,sp,128
        for (i = 0; i < default_num_contexts; i++)
    10e0:	127d                	addi	tp,tp,-1
    10e2:	0054                	addi	a3,sp,4
    10e4:	0000                	unimp
    10e6:	1496                	slli	s1,s1,0x25
            ee_printf("[%d]crcmatrix     : 0x%04x\n", i, results[i].crcmatrix);
    10e8:	0000                	unimp
    10ea:	0912                	slli	s2,s2,0x4
    10ec:	0005                	c.nop	1
    10ee:	0100                	addi	s0,sp,128
    10f0:	127e                	slli	tp,tp,0x3f
    10f2:	0099                	addi	ra,ra,6
    10f4:	0000                	unimp
    10f6:	1531                	addi	a0,a0,-20
    10f8:	0000                	unimp
    10fa:	660d                	lui	a2,0x3
    10fc:	0001                	nop
    10fe:	0100                	addi	s0,sp,128
        for (i = 0; i < default_num_contexts; i++)
    1100:	127f                	0x127f
    1102:	094d                	addi	s2,s2,19
    1104:	0000                	unimp
    1106:	6fbc9103          	lh	sp,1787(s9)
            ee_printf("[%d]crcmatrix     : 0x%04x\n", i, results[i].crcmatrix);
    110a:	140d                	addi	s0,s0,-29
    110c:	0005                	c.nop	1
    110e:	0100                	addi	s0,sp,128
    1110:	0b81                	addi	s7,s7,0
    1112:	095d                	addi	s2,s2,23
    1114:	0000                	unimp
    1116:	70809103          	lh	sp,1800(ra)
    111a:	00018013          	mv	zero,gp
    111e:	2500                	fld	fs0,8(a0)
    1120:	0004                	0x4
    1122:	1100                	addi	s0,sp,160
    1124:	0069                	c.nop	26
    1126:	7701                	lui	a4,0xfffe0
    1128:	250a                	fld	fa0,128(sp)
    112a:	0000                	unimp
    112c:	6500                	flw	fs0,8(a0)
    112e:	0015                	c.nop	5
    1130:	1400                	addi	s0,sp,544
    1132:	0a5c                	addi	a5,sp,276
    1134:	0000                	unimp
    1136:	000c                	0xc
        for (i = 0; i < default_num_contexts; i++)
    1138:	0000                	unimp
    113a:	3f15                	jal	106e <main+0x686>
    113c:	0005                	c.nop	1
    113e:	0100                	addi	s0,sp,128
    1140:	0478                	addi	a4,sp,524
    1142:	0025                	c.nop	9
    1144:	0000                	unimp
    1146:	041a                	slli	s0,s0,0x6
    1148:	0000                	unimp
    114a:	0016                	c.slli	zero,0x5
    114c:	000a6817          	auipc	a6,0xa6
    if (results[0].execs & ID_STATE)
    1150:	2200                	fld	fs0,0(a2)
    1152:	000a                	c.slli	zero,0x2
    1154:	0000                	unimp
    1156:	1300                	addi	s0,sp,416
        for (i = 0; i < default_num_contexts; i++)
    1158:	0198                	addi	a4,sp,192
    115a:	0000                	unimp
    115c:	0448                	addi	a0,sp,516
    115e:	0000                	unimp
            ee_printf("[%d]crcstate      : 0x%04x\n", i, results[i].crcstate);
    1160:	6311                	lui	t1,0x4
    1162:	7874                	flw	fa3,116(s0)
    1164:	0100                	addi	s0,sp,128
    1166:	10d6                	slli	ra,ra,0x35
    1168:	008d                	addi	ra,ra,3
    116a:	0000                	unimp
    116c:	000015b3          	sll	a1,zero,zero
    1170:	00128c17          	auipc	s8,0x128
    1174:	2e00                	fld	fs0,24(a2)
    1176:	000a                	c.slli	zero,0x2
        for (i = 0; i < default_num_contexts; i++)
    1178:	0000                	unimp
    117a:	3018                	fld	fa4,32(s0)
    117c:	000c                	0xc
    117e:	7000                	flw	fs0,32(s0)
            ee_printf("[%d]crcstate      : 0x%04x\n", i, results[i].crcstate);
    1180:	0000                	unimp
    1182:	c000                	sw	s0,0(s0)
    1184:	0004                	0x4
    1186:	1200                	addi	s0,sp,288
    1188:	0464                	addi	s1,sp,524
    118a:	0000                	unimp
    118c:	f901                	bnez	a0,109c <main+0x6b4>
    118e:	d812                	sw	tp,48(sp)
    1190:	0000                	unimp
    1192:	d300                	sw	s0,32(a4)
    1194:	0015                	c.nop	5
    1196:	1200                	addi	s0,sp,288
    1198:	056d                	addi	a0,a0,27
    119a:	0000                	unimp
    119c:	fa01                	bnez	a2,10ac <main+0x6c4>
    119e:	8d12                	mv	s10,tp
    11a0:	0000                	unimp
    11a2:	fd00                	fsw	fs0,56(a0)
    11a4:	0015                	c.nop	5
    11a6:	1700                	addi	s0,sp,928
    11a8:	0c6c                	addi	a1,sp,540
    11aa:	0000                	unimp
    11ac:	00000a37          	lui	s4,0x0
        for (i = 0; i < default_num_contexts; i++)
    11b0:	7419                	lui	s0,0xfffe6
    11b2:	000c                	0xc
    11b4:	6e00                	flw	fs0,24(a2)
    11b6:	0009                	c.nop	2
    11b8:	9200                	0x9200
    11ba:	0004                	0x4
    11bc:	1a00                	addi	s0,sp,304
    11be:	5a01                	li	s4,-32
    11c0:	7802                	flw	fa6,32(sp)
    11c2:	0000                	unimp
        ee_printf("[%d]crcfinal      : 0x%04x\n", i, results[i].crc);
    11c4:	000c7817          	auipc	a6,0xc7
    for (i = 0; i < default_num_contexts; i++)
    11c8:	4300                	lw	s0,0(a4)
    11ca:	000a                	c.slli	zero,0x2
        ee_printf("[%d]crcfinal      : 0x%04x\n", i, results[i].crc);
    11cc:	1700                	addi	s0,sp,928
    11ce:	0c7c                	addi	a5,sp,540
    11d0:	0000                	unimp
    11d2:	00000a4f          	fnmadd.s	fs4,ft0,ft0,ft0,rne
    11d6:	000c8017          	auipc	zero,0xc8
    11da:	5b00                	lw	s0,48(a4)
    for (i = 0; i < default_num_contexts; i++)
    11dc:	000a                	c.slli	zero,0x2
    11de:	1700                	addi	s0,sp,928
    11e0:	0c90                	addi	a2,sp,592
    11e2:	0000                	unimp
        ee_printf("[%d]crcfinal      : 0x%04x\n", i, results[i].crc);
    11e4:	00000a67          	jalr	s4,zero # 0 <RAM_START_ADDRESS>
    11e8:	000c9c17          	auipc	s8,0xc9
    for (i = 0; i < default_num_contexts; i++)
    11ec:	2e00                	fld	fs0,24(a2)
    11ee:	000a                	c.slli	zero,0x2
        ee_printf("[%d]crcfinal      : 0x%04x\n", i, results[i].crc);
    11f0:	0000                	unimp
    11f2:	7419                	lui	s0,0xfffe6
    11f4:	000a                	c.slli	zero,0x2
    11f6:	7000                	flw	fs0,32(s0)
    11f8:	000a                	c.slli	zero,0x2
    11fa:	d700                	sw	s0,40(a4)
    11fc:	0004                	0x4
    11fe:	1a00                	addi	s0,sp,304
    1200:	5a01                	li	s4,-32
    1202:	0305                	addi	t1,t1,1
    1204:	6260                	flw	fs0,68(a2)
    1206:	0000                	unimp
    1208:	1900                	addi	s0,sp,176
    120a:	0aa8                	addi	a0,sp,344
    120c:	0000                	unimp
    120e:	0a7c                	addi	a5,sp,284
    1210:	0000                	unimp
    1212:	0508                	addi	a0,sp,640
    for (i = 0; i < default_num_contexts; i++)
    1214:	0000                	unimp
    1216:	011a                	slli	sp,sp,0x6
    1218:	035a                	slli	t1,t1,0x16
    121a:	fe91                	bnez	a3,1136 <main+0x74e>
    121c:	5b011a6f          	jal	s4,127cc <RAM_SIZE+0x27cc>
    1220:	910a                	add	sp,sp,sp
    1222:	6fac                	flw	fa1,88(a5)
    1224:	7806                	flw	fa6,96(sp)
    1226:	2200                	fld	fs0,0(a2)
    if (total_errors == 0)
    1228:	1a2fe423          	0x1a2fe423
    if (total_errors > 0)
    122c:	5c01                	li	s8,-32
    122e:	910a                	add	sp,sp,sp
        ee_printf("Errors detected\n");
    1230:	6fac                	flw	fa1,88(a5)
    1232:	7806                	flw	fa6,96(sp)
    1234:	2200                	fld	fs0,0(a2)
    1236:	002fe823          	0x2fe823
    123a:	b019                	j	a40 <main+0x58>
    portable_fini(&(results[0].port));
    123c:	000a                	c.slli	zero,0x2
    123e:	8800                	0x8800
    1240:	000a                	c.slli	zero,0x2
    1242:	1b00                	addi	s0,sp,432
}
    1244:	0005                	c.nop	1
    1246:	1a00                	addi	s0,sp,304
    1248:	5a01                	li	s4,-32
    124a:	3101                	jal	e4a <main+0x462>
    124c:	1900                	addi	s0,sp,176
    124e:	0ad4                	addi	a3,sp,340
    1250:	0000                	unimp
    1252:	0a88                	addi	a0,sp,336
    1254:	0000                	unimp
    1256:	052e                	slli	a0,a0,0xb
    1258:	0000                	unimp
    125a:	011a                	slli	sp,sp,0x6
    125c:	015a                	slli	sp,sp,0x16
    125e:	0032                	c.slli	zero,0xc
    1260:	e819                	bnez	s0,1276 <main+0x88e>
    1262:	000a                	c.slli	zero,0x2
    1264:	8800                	0x8800
    1266:	000a                	c.slli	zero,0x2
    1268:	4100                	lw	s0,0(a0)
    126a:	0005                	c.nop	1
    126c:	1a00                	addi	s0,sp,304
    126e:	5a01                	li	s4,-32
    1270:	3301                	jal	f70 <main+0x588>
    1272:	1900                	addi	s0,sp,176
    1274:	0afc                	addi	a5,sp,348
    1276:	0000                	unimp
    1278:	0a88                	addi	a0,sp,336
    127a:	0000                	unimp
    127c:	0554                	addi	a3,sp,644
    127e:	0000                	unimp
                    = (char *)(results[ctx].memblock[0]) + results[0].size * j;
    1280:	011a                	slli	sp,sp,0x6
    1282:	015a                	slli	sp,sp,0x16
    1284:	0034                	addi	a3,sp,8
    1286:	0c19                	addi	s8,s8,6
    1288:	8800000b          	0x8800000b
            j++;
    128c:	000a                	c.slli	zero,0x2
    128e:	6700                	flw	fs0,8(a4)
                    = (char *)(results[ctx].memblock[0]) + results[0].size * j;
    1290:	0005                	c.nop	1
    1292:	1a00                	addi	s0,sp,304
            j++;
    1294:	5a01                	li	s4,-32
    1296:	3501                	jal	1096 <main+0x6ae>
                    = (char *)(results[ctx].memblock[0]) + results[0].size * j;
    1298:	1700                	addi	s0,sp,928
    129a:	0ba0                	addi	s0,sp,472
            j++;
    129c:	0000                	unimp
    129e:	00000a67          	jalr	s4,zero # 0 <RAM_START_ADDRESS>
    12a2:	000c2817          	auipc	a6,0xc2
    if ((results[0].seed1 == 1) && (results[0].seed2 == 0)
    12a6:	9400                	0x9400
    12a8:	000a                	c.slli	zero,0x2
    12aa:	1700                	addi	s0,sp,928
        && (results[0].seed3 == 0))
    12ac:	0ca4                	addi	s1,sp,600
    12ae:	0000                	unimp
    12b0:	00000a37          	lui	s4,0x0
    12b4:	c419                	beqz	s0,12c2 <main+0x8da>
    12b6:	000c                	0xc
        results[0].seed1 = 0x3415;
    12b8:	6e00                	flw	fs0,24(a2)
    12ba:	0009                	c.nop	2
    12bc:	a000                	fsd	fs0,0(s0)
    12be:	0005                	c.nop	1
    12c0:	1a00                	addi	s0,sp,304
    12c2:	5a01                	li	s4,-32
    12c4:	910c                	0x910c
    12c6:	7800                	flw	fs0,48(s0)
        results[0].seed3 = 0x66;
    12c8:	2200                	fld	fs0,0(a2)
    12ca:	0079                	c.nop	30
    12cc:	0a22                	slli	s4,s4,0x8
    12ce:	0844                	addi	s1,sp,20
    12d0:	001c                	0x1c
    12d2:	000cc817          	auipc	a6,0xcc
        results[0].execs = ALL_ALGORITHMS_MASK;
    12d6:	4300                	lw	s0,0(a4)
    12d8:	000a                	c.slli	zero,0x2
    12da:	1700                	addi	s0,sp,928
    12dc:	0ccc                	addi	a1,sp,596
    12de:	0000                	unimp
        ee_printf(
    12e0:	00000a4f          	fnmadd.s	fs4,ft0,ft0,ft0,rne
    12e4:	f019                	bnez	s0,11ea <main+0x802>
    12e6:	000c                	0xc
    12e8:	a000                	fsd	fs0,0(s0)
    12ea:	000a                	c.slli	zero,0x2
    12ec:	c500                	sw	s0,8(a0)
    12ee:	0005                	c.nop	1
        results[0].seed3 = 0x66;
    12f0:	1a00                	addi	s0,sp,304
    12f2:	5b01                	li	s6,-32
    12f4:	3001                	jal	af4 <main+0x10c>
    12f6:	1700                	addi	s0,sp,928
    12f8:	0d00                	addi	s0,sp,656
    12fa:	0000                	unimp
    if ((results[0].seed1 == 1) && (results[0].seed2 == 0)
    12fc:	0aa0                	addi	s0,sp,344
    12fe:	0000                	unimp
        ee_printf(
    1300:	000d1017          	auipc	zero,0xd1
    1304:	a000                	fsd	fs0,0(s0)
    1306:	000a                	c.slli	zero,0x2
    1308:	1700                	addi	s0,sp,928
    130a:	0d1c                	addi	a5,sp,656
    if (total_errors < 0)
    130c:	0000                	unimp
    130e:	0aa0                	addi	s0,sp,344
        ee_printf(
    1310:	0000                	unimp
    1312:	5419                	li	s0,-26
    1314:	000d                	c.nop	3
    1316:	7000                	flw	fs0,32(s0)
    1318:	000a                	c.slli	zero,0x2
    131a:	f700                	fsw	fs0,40(a4)
        total_errors++;
    131c:	0005                	c.nop	1
    131e:	1a00                	addi	s0,sp,304
    1320:	5a01                	li	s4,-32
    1322:	0305                	addi	t1,t1,1
                  default_num_contexts * results[0].iterations
    1324:	62cc                	flw	fa1,4(a3)
    1326:	0000                	unimp
    1328:	1900                	addi	s0,sp,176
    132a:	0e24                	addi	s1,sp,792
    132c:	0000                	unimp
    132e:	0a70                	addi	a2,sp,284
    1330:	0000                	unimp
    1332:	0620                	addi	s0,sp,776
                      / time_in_secs(total_time));
    1334:	0000                	unimp
    1336:	011a                	slli	sp,sp,0x6
    1338:	055a                	slli	a0,a0,0x16
    133a:	00635c03          	lhu	s8,6(t1) # 4006 <__adddf3+0x6f2>
    133e:	1a00                	addi	s0,sp,304
        ee_printf("Iterations/Sec   : %d\n",
    1340:	5b01                	li	s6,-32
    1342:	7902                	flw	fs2,32(sp)
    1344:	1a00                	addi	s0,sp,304
    1346:	5d01                	li	s10,-32
    1348:	8908                	0x8908
    134a:	9400                	0x9400
    134c:	0a02                	c.slli64	s4
    134e:	ffff                	0xffff
    1350:	001a                	c.slli	zero,0x6
    1352:	6c19                	lui	s8,0x6
    1354:	000e                	c.slli	zero,0x3
    1356:	7000                	flw	fs0,32(s0)
    1358:	000a                	c.slli	zero,0x2
    135a:	4900                	lw	s0,16(a0)
    if (results[0].execs & ID_STATE)
    135c:	0006                	c.slli	zero,0x1
    135e:	1a00                	addi	s0,sp,304
    1360:	5a01                	li	s4,-32
    1362:	0305                	addi	t1,t1,1
    1364:	638c                	flw	fa1,0(a5)
    1366:	0000                	unimp
            ee_printf("6k validation run parameters for coremark.\n");
    1368:	011a                	slli	sp,sp,0x6
    136a:	0079025b          	0x79025b
    136e:	011a                	slli	sp,sp,0x6
    1370:	085d                	addi	a6,a6,23
    1372:	0c89                	addi	s9,s9,2
            known_id = 1;
    1374:	0294                	addi	a3,sp,320
    1376:	ff0a                	fsw	ft2,188(sp)
    1378:	1aff                	0x1aff
    137a:	1900                	addi	s0,sp,176
            ee_printf("6k performance run parameters for coremark.\n");
    137c:	0edc                	addi	a5,sp,852
    137e:	0000                	unimp
    1380:	0aac                	addi	a1,sp,344
    1382:	0000                	unimp
    1384:	065d                	addi	a2,a2,23
    1386:	0000                	unimp
            known_id = 0;
    1388:	011a                	slli	sp,sp,0x6
    138a:	025a                	slli	tp,tp,0x16
    138c:	19000083          	lb	ra,400(zero) # 190 <calc_func+0x70>
            ee_printf("2K validation run parameters for coremark.\n");
    1390:	0f2c                	addi	a1,sp,920
    1392:	0000                	unimp
    1394:	0ab8                	addi	a4,sp,344
    1396:	0000                	unimp
    1398:	0672                	slli	a2,a2,0x1c
    139a:	0000                	unimp
            known_id = 4;
    139c:	011a                	slli	sp,sp,0x6
    139e:	035d                	addi	t1,t1,23
    13a0:	e491                	bnez	s1,13ac <main+0x9c4>
    13a2:	4019006f          	j	91fa2 <RAM_SIZE+0x81fa2>
    switch (seedcrc)
    13a6:	7000000f          	0x7000000f
    13aa:	000a                	c.slli	zero,0x2
    13ac:	8f00                	0x8f00
    13ae:	0006                	c.slli	zero,0x1
{
    13b0:	1a00                	addi	s0,sp,304
    13b2:	5a01                	li	s4,-32
    13b4:	0305                	addi	t1,t1,1
    13b6:	63c0                	flw	fs0,4(a5)
    13b8:	0000                	unimp
    13ba:	011a                	slli	sp,sp,0x6
    13bc:	0079025b          	0x79025b
    13c0:	1900                	addi	s0,sp,176
    13c2:	0f7c                	addi	a5,sp,924
    13c4:	0000                	unimp
    13c6:	0a70                	addi	a2,sp,284
    13c8:	0000                	unimp
    13ca:	06a6                	slli	a3,a3,0x9
    13cc:	0000                	unimp
    13ce:	011a                	slli	sp,sp,0x6
    13d0:	055a                	slli	a0,a0,0x16
    13d2:	00630003          	lb	zero,6(t1)
    13d6:	0000                	unimp
    13d8:	000f8c17          	auipc	s8,0xf8
    13dc:	c400                	sw	s0,8(s0)
    13de:	000a                	c.slli	zero,0x2
    13e0:	1900                	addi	s0,sp,176
    13e2:	0fa0                	addi	s0,sp,984
    13e4:	0000                	unimp
    13e6:	0a70                	addi	a2,sp,284
    13e8:	0000                	unimp
    13ea:	06c6                	slli	a3,a3,0x11
    13ec:	0000                	unimp
    13ee:	011a                	slli	sp,sp,0x6
        seed = 1;
    13f0:	055a                	slli	a0,a0,0x16
    13f2:	0063f003          	0x63f003
    if (seed == 0)
    13f6:	0000                	unimp
    13f8:	b019                	j	bfe <main+0x216>
    13fa:	7000000f          	0x7000000f
    A = (MATDAT *)align_mem(memblk);
    13fe:	000a                	c.slli	zero,0x2
    1400:	e300                	fsw	fs0,0(a4)
    1402:	0006                	c.slli	zero,0x1
    1404:	1a00                	addi	s0,sp,304
    1406:	5a01                	li	s4,-32
    1408:	0305                	addi	t1,t1,1
    140a:	6408                	flw	fa0,8(s0)
    while (j < blksize)
    140c:	0000                	unimp
    140e:	011a                	slli	sp,sp,0x6
    1410:	0083025b          	0x83025b
        i++;
    1414:	1900                	addi	s0,sp,176
    1416:	0fb8                	addi	a4,sp,984
    1418:	0000                	unimp
    141a:	00000a5b          	0xa5b
        j = i * i * 2 * 4;
    141e:	000006f7          	0x6f7
    1422:	011a                	slli	sp,sp,0x6
    1424:	025a                	slli	tp,tp,0x16
    1426:	19000083          	lb	ra,400(zero) # 190 <calc_func+0x70>
    142a:	0fc8                	addi	a0,sp,980
    while (j < blksize)
    142c:	0000                	unimp
    142e:	0a70                	addi	a2,sp,284
    B = A + N * N;
    1430:	0000                	unimp
    1432:	070e                	slli	a4,a4,0x3
    1434:	0000                	unimp
    1436:	011a                	slli	sp,sp,0x6
    1438:	055a                	slli	a0,a0,0x16
    143a:	00642003          	lw	zero,6(s0) # fffe6006 <RAM_SIZE+0xfffd6006>
    143e:	0000                	unimp
    1440:	d819                	beqz	s0,1356 <main+0x96e>
    1442:	5b00000f          	0x5b00000f
    1446:	000a                	c.slli	zero,0x2
    p->N = N;
    1448:	2200                	fld	fs0,0(a2)
    144a:	1a000007          	vlse128.v	v0,(zero),zero
    B = A + N * N;
    144e:	5a01                	li	s4,-32
    for (i = 0; i < N; i++)
    1450:	8302                	jr	t1
    1452:	0000                	unimp
    1454:	e419                	bnez	s0,1462 <core_init_matrix+0xb2>
    1456:	5b00000f          	0x5b00000f
            seed         = ((order * seed) % 65536);
    145a:	000a                	c.slli	zero,0x2
    B = A + N * N;
    145c:	3600                	fld	fs0,40(a2)
    145e:	1a000007          	vlse128.v	v0,(zero),zero
    1462:	5a01                	li	s4,-32
    1464:	8302                	jr	t1
    1466:	0000                	unimp
    1468:	00100017          	auipc	zero,0x100
            seed         = ((order * seed) % 65536);
    146c:	2e00                	fld	fs0,24(a2)
    146e:	000a                	c.slli	zero,0x2
            order++;
    1470:	1900                	addi	s0,sp,176
    1472:	1010                	addi	a2,sp,32
        for (j = 0; j < N; j++)
    1474:	0000                	unimp
    1476:	0a70                	addi	a2,sp,284
    1478:	0000                	unimp
    147a:	0756                	slli	a4,a4,0x15
        seed = 1;
    147c:	0000                	unimp
    147e:	011a                	slli	sp,sp,0x6
        for (j = 0; j < N; j++)
    1480:	055a                	slli	a0,a0,0x16
    1482:	00649003          	lh	zero,6(s1)
            seed         = ((order * seed) % 65536);
    1486:	0000                	unimp
    1488:	2419                	jal	168e <matrix_mul_const+0x6e>
    148a:	0010                	0x10
    148c:	7000                	flw	fs0,32(s0)
    148e:	000a                	c.slli	zero,0x2
    1490:	7600                	flw	fs0,40(a2)
    1492:	1a000007          	vlse128.v	v0,(zero),zero
    1496:	5a01                	li	s4,-32
    1498:	0305                	addi	t1,t1,1
    149a:	64b4                	flw	fa3,72(s1)
    149c:	0000                	unimp
    149e:	011a                	slli	sp,sp,0x6
    14a0:	a803055b          	0xa803055b
    14a4:	0064                	addi	s1,sp,12
    14a6:	0000                	unimp
    14a8:	3819                	jal	cbe <main+0x2d6>
    14aa:	0010                	0x10
            val          = (seed + order);
    14ac:	7000                	flw	fs0,32(s0)
    14ae:	000a                	c.slli	zero,0x2
    14b0:	9600                	0x9600
    14b2:	1a000007          	vlse128.v	v0,(zero),zero
    14b6:	5a01                	li	s4,-32
            val          = (val + order);
    14b8:	0305                	addi	t1,t1,1
    14ba:	64dc                	flw	fa5,12(s1)
            B[i * N + j] = val;
    14bc:	0000                	unimp
    14be:	011a                	slli	sp,sp,0x6
            val          = matrix_clip(val, 1);
    14c0:	cc03055b          	0xcc03055b
            A[i * N + j] = val;
    14c4:	0064                	addi	s1,sp,12
    14c6:	0000                	unimp
    14c8:	4c19                	li	s8,6
    14ca:	0010                	0x10
        for (j = 0; j < N; j++)
    14cc:	7000                	flw	fs0,32(s0)
    14ce:	000a                	c.slli	zero,0x2
            order++;
    14d0:	b600                	fsd	fs0,40(a2)
    14d2:	1a000007          	vlse128.v	v0,(zero),zero
        for (j = 0; j < N; j++)
    14d6:	5a01                	li	s4,-32
    14d8:	0305                	addi	t1,t1,1
    14da:	64fc                	flw	fa5,76(s1)
    14dc:	0000                	unimp
    14de:	011a                	slli	sp,sp,0x6
            order++;
    14e0:	f403055b          	0xf403055b
    14e4:	0064                	addi	s1,sp,12
    14e6:	0000                	unimp
    14e8:	5c19                	li	s8,-26
    14ea:	0010                	0x10
    for (i = 0; i < N; i++)
    14ec:	7000                	flw	fs0,32(s0)
    14ee:	000a                	c.slli	zero,0x2
            order++;
    14f0:	d300                	sw	s0,32(a4)
    14f2:	1a000007          	vlse128.v	v0,(zero),zero
    for (i = 0; i < N; i++)
    14f6:	5a01                	li	s4,-32
    14f8:	0305                	addi	t1,t1,1
    14fa:	6514                	flw	fa3,8(a0)
    p->C = (MATRES *)align_mem(B + N * N);
    14fc:	0000                	unimp
    14fe:	011a                	slli	sp,sp,0x6
    p->A = A;
    1500:	0082025b          	0x82025b
    1504:	1900                	addi	s0,sp,176
    1506:	10c0                	addi	s0,sp,100
    p->C = (MATRES *)align_mem(B + N * N);
    1508:	0000                	unimp
    150a:	0a70                	addi	a2,sp,284
    150c:	0000                	unimp
    150e:	07f0                	addi	a2,sp,972
    1510:	0000                	unimp
    1512:	011a                	slli	sp,sp,0x6
    1514:	055a                	slli	a0,a0,0x16
    1516:	00653003          	0x653003
    151a:	1a00                	addi	s0,sp,304
    p->N = N;
    151c:	5b01                	li	s6,-32
    151e:	7802                	flw	fa6,32(sp)
}
    1520:	0000                	unimp
    1522:	3819                	jal	d38 <main+0x350>
    1524:	0011                	c.nop	4
    1526:	7000                	flw	fs0,32(s0)
    1528:	000a                	c.slli	zero,0x2
    152a:	0d00                	addi	s0,sp,656
    p->B = B;
    152c:	0008                	0x8
    152e:	1a00                	addi	s0,sp,304
    p->A = A;
    1530:	5a01                	li	s4,-32
    1532:	0305                	addi	t1,t1,1
    p->N = N;
    1534:	654c                	flw	fa1,12(a0)
    1536:	0000                	unimp
}
    1538:	011a                	slli	sp,sp,0x6
    153a:	0078025b          	0x78025b
    153e:	1900                	addi	s0,sp,176
    1540:	11b0                	addi	a2,sp,232
    1542:	0000                	unimp
    1544:	0a70                	addi	a2,sp,284
    1546:	0000                	unimp
    1548:	082a                	slli	a6,a6,0xa
    154a:	0000                	unimp
    154c:	011a                	slli	sp,sp,0x6
    154e:	055a                	slli	a0,a0,0x16
    1550:	00656803          	0x656803
    1554:	1a00                	addi	s0,sp,304
    1556:	5b01                	li	s6,-32
    1558:	7802                	flw	fa6,32(sp)
    155a:	0000                	unimp
    155c:	1419                	addi	s0,s0,-26
    155e:	0012                	c.slli	zero,0x4
    1560:	7000                	flw	fs0,32(s0)
    1562:	000a                	c.slli	zero,0x2
    1564:	4700                	lw	s0,8(a4)
    1566:	0008                	0x8
    1568:	1a00                	addi	s0,sp,304
    156a:	5a01                	li	s4,-32
    B = A + N * N;
    156c:	0305                	addi	t1,t1,1
    156e:	6584                	flw	fs1,8(a1)
    1570:	0000                	unimp
    1572:	011a                	slli	sp,sp,0x6
    1574:	0078025b          	0x78025b
    1578:	1900                	addi	s0,sp,176
    157a:	123c                	addi	a5,sp,296
    N = i - 1;
    157c:	0000                	unimp
    157e:	0a70                	addi	a2,sp,284
    B = A + N * N;
    1580:	0000                	unimp
    1582:	085e                	slli	a6,a6,0x17
    1584:	0000                	unimp
    1586:	011a                	slli	sp,sp,0x6
{
    1588:	055a                	slli	a0,a0,0x16
    158a:	0065ec03          	0x65ec03
    for (i = 0; i < N; i++)
    158e:	0000                	unimp
    1590:	4419                	li	s0,6
    1592:	0012                	c.slli	zero,0x4
    1594:	d000                	sw	s0,32(s0)
    1596:	000a                	c.slli	zero,0x2
    1598:	7300                	flw	fs0,32(a4)
    159a:	0008                	0x8
    159c:	1a00                	addi	s0,sp,304
    159e:	5a01                	li	s4,-32
    15a0:	6ffe9103          	lh	sp,1791(t4)
    ee_s16 ret = 0;
    15a4:	1900                	addi	s0,sp,176
    15a6:	12ec                	addi	a1,sp,364
    MATRES tmp = 0, prev = 0, cur = 0;
    15a8:	0000                	unimp
    15aa:	0a70                	addi	a2,sp,284
    15ac:	0000                	unimp
    15ae:	088a                	slli	a7,a7,0x2
    for (i = 0; i < N; i++)
    15b0:	0000                	unimp
    15b2:	011a                	slli	sp,sp,0x6
        for (j = 0; j < N; j++)
    15b4:	055a                	slli	a0,a0,0x16
    15b6:	00660003          	lb	zero,6(a2) # 3006 <number+0x302>
{
    15ba:	0000                	unimp
    15bc:	0c19                	addi	s8,s8,6
    15be:	70000013          	li	zero,1792
                ret += 10;
    15c2:	000a                	c.slli	zero,0x2
        for (j = 0; j < N; j++)
    15c4:	a100                	fsd	fs0,0(a0)
    15c6:	0008                	0x8
                ret += 10;
    15c8:	1a00                	addi	s0,sp,304
    15ca:	5a01                	li	s4,-32
                tmp = 0;
    15cc:	0305                	addi	t1,t1,1
    15ce:	65a0                	flw	fs0,72(a1)
        for (j = 0; j < N; j++)
    15d0:	0000                	unimp
    15d2:	1900                	addi	s0,sp,176
                ret += (cur > prev) ? 1 : 0;
    15d4:	131c                	addi	a5,sp,416
    15d6:	0000                	unimp
            cur = C[i * N + j];
    15d8:	0a70                	addi	a2,sp,284
    15da:	0000                	unimp
                ret += 10;
    15dc:	08b8                	addi	a4,sp,88
    15de:	0000                	unimp
    15e0:	011a                	slli	sp,sp,0x6
    15e2:	055a                	slli	a0,a0,0x16
                ret += (cur > prev) ? 1 : 0;
    15e4:	00645003          	lhu	zero,6(s0)
            tmp += cur;
    15e8:	0000                	unimp
    15ea:	00133017          	auipc	zero,0x133
                ret += 10;
    15ee:	2e00                	fld	fs0,24(a2)
                ret += (cur > prev) ? 1 : 0;
    15f0:	000a                	c.slli	zero,0x2
    15f2:	1900                	addi	s0,sp,176
            if (tmp > clipval)
    15f4:	133c                	addi	a5,sp,424
    15f6:	0000                	unimp
                ret += (cur > prev) ? 1 : 0;
    15f8:	00000a5b          	0xa5b
        for (j = 0; j < N; j++)
    15fc:	08d5                	addi	a7,a7,21
    15fe:	0000                	unimp
                ret += (cur > prev) ? 1 : 0;
    1600:	011a                	slli	sp,sp,0x6
    1602:	025a                	slli	tp,tp,0x16
        for (j = 0; j < N; j++)
    1604:	17000083          	lb	ra,368(zero) # 170 <calc_func+0x50>
    for (i = 0; i < N; i++)
    1608:	1348                	addi	a0,sp,420
    160a:	0000                	unimp
    160c:	00000a67          	jalr	s4,zero # 0 <RAM_START_ADDRESS>
    1610:	5819                	li	a6,-26
    1612:	70000013          	li	zero,1792
}
    1616:	000a                	c.slli	zero,0x2
    ee_s16 ret = 0;
    1618:	f500                	fsw	fs0,40(a0)
    161a:	0008                	0x8
}
    161c:	1a00                	addi	s0,sp,304
    161e:	5a01                	li	s4,-32
    for (i = 0; i < N; i++)
    1620:	0305                	addi	t1,t1,1
    1622:	6438                	flw	fa4,72(s0)
{
    1624:	0000                	unimp
    1626:	1900                	addi	s0,sp,176
    1628:	1374                	addi	a3,sp,428
    162a:	0000                	unimp
    162c:	0a70                	addi	a2,sp,284
    162e:	0000                	unimp
    1630:	090c                	addi	a1,sp,144
    1632:	0000                	unimp
    1634:	011a                	slli	sp,sp,0x6
    1636:	055a                	slli	a0,a0,0x16
    1638:	0062a003          	lw	zero,6(t0)
    163c:	0000                	unimp
    163e:	8819                	andi	s0,s0,6
    1640:	70000013          	li	zero,1792
    1644:	000a                	c.slli	zero,0x2
    1646:	2300                	fld	fs0,0(a4)
    1648:	0009                	c.nop	2
    164a:	1a00                	addi	s0,sp,304
    164c:	5a01                	li	s4,-32
    164e:	0305                	addi	t1,t1,1
    1650:	6270                	flw	fa2,68(a2)
    1652:	0000                	unimp
    1654:	1b00                	addi	s0,sp,432
    1656:	139c                	addi	a5,sp,480
    1658:	0000                	unimp
    165a:	0a70                	addi	a2,sp,284
    165c:	0000                	unimp
    165e:	011a                	slli	sp,sp,0x6
    1660:	055a                	slli	a0,a0,0x16
    1662:	00633003          	0x633003
    1666:	0000                	unimp
    1668:	0a00                	addi	s0,sp,272
    166a:	000002ef          	jal	t0,166a <matrix_mul_const+0x4a>
    166e:	00000947          	fmsub.s	fs2,ft0,ft0,ft0,rne
    1672:	00002c0b          	0x2c0b
            C[i * N + j] = (MATRES)A[i * N + j] * (MATRES)val;
    1676:	0000                	unimp
    for (i = 0; i < N; i++)
    1678:	0900                	addi	s0,sp,144
    167a:	fc04                	fsw	fs1,56(s0)
    167c:	0002                	c.slli64	zero
    167e:	0a00                	addi	s0,sp,272
        for (j = 0; j < N; j++)
    1680:	028d                	addi	t0,t0,3
    1682:	0000                	unimp
    1684:	095d                	addi	s2,s2,23
    1686:	0000                	unimp
    1688:	00002c0b          	0x2c0b
{
    168c:	0000                	unimp
    168e:	0a00                	addi	s0,sp,272
            C[i * N + j] = (MATRES)A[i * N + j] * (MATRES)val;
    1690:	007a                	c.slli	zero,0x1e
    1692:	0000                	unimp
    1694:	096e                	slli	s2,s2,0x1b
    1696:	0000                	unimp
        for (j = 0; j < N; j++)
    1698:	2c1c                	fld	fa5,24(s0)
    169a:	0000                	unimp
            C[i * N + j] = (MATRES)A[i * N + j] * (MATRES)val;
    169c:	cf00                	sw	s0,24(a4)
    169e:	f51d0007          	vluxseg8ei128.v	v0,(s10),v17,v0.t
    16a2:	01000003          	lb	zero,16(zero) # 10 <_start>
        for (j = 0; j < N; j++)
    16a6:	0134                	addi	a3,sp,136
    16a8:	0000028b          	0x28b
    for (i = 0; i < N; i++)
    16ac:	0960                	addi	s0,sp,156
    16ae:	0000                	unimp
    16b0:	0088                	addi	a0,sp,64
    16b2:	0000                	unimp
    16b4:	9c01                	0x9c01
    16b6:	0a1c                	addi	a5,sp,272
    16b8:	0000                	unimp
    16ba:	5d1e                	lw	s10,228(sp)
}
    16bc:	0005                	c.nop	1
    16be:	0100                	addi	s0,sp,128
    16c0:	0f34                	addi	a3,sp,920
    16c2:	0000028b          	0x28b
    16c6:	0000161b          	0x161b
    16ca:	6911                	lui	s2,0x4
    16cc:	0100                	addi	s0,sp,128
    16ce:	1336                	slli	t1,t1,0x2d
    16d0:	008d                	addi	ra,ra,3
    16d2:	0000                	unimp
    16d4:	00001647          	fmsub.s	fa2,ft0,ft0,ft0,rtz
    16d8:	6311                	lui	t1,0x4
    16da:	6372                	flw	ft6,28(sp)
    16dc:	0100                	addi	s0,sp,128
    16de:	00541337          	lui	t1,0x541
    16e2:	0000                	unimp
    16e4:	167d                	addi	a2,a2,-1
    16e6:	0000                	unimp
    16e8:	7211                	lui	tp,0xfffe4
    16ea:	7365                	lui	t1,0xffff9
    16ec:	0100                	addi	s0,sp,128
    16ee:	1338                	addi	a4,sp,424
    16f0:	0a1c                	addi	a5,sp,272
    16f2:	0000                	unimp
    16f4:	0000169b          	0x169b
    for (i = 0; i < N; i++)
    16f8:	6812                	flw	fa6,4(sp)
    16fa:	01000003          	lb	zero,16(zero) # 10 <_start>
    16fe:	1339                	addi	t1,t1,-18
    1700:	008d                	addi	ra,ra,3
    1702:	0000                	unimp
            A[i * N + j] += val;
    1704:	000016c7          	fmsub.s	fa3,ft0,ft0,ft0,rtz
    1708:	9819                	andi	s0,s0,-26
    170a:	0009                	c.nop	2
    170c:	dc00                	sw	s0,56(s0)
    170e:	000a                	c.slli	zero,0x2
    1710:	ef00                	fsw	fs0,24(a4)
    1712:	0009                	c.nop	2
    for (i = 0; i < N; i++)
    1714:	1a00                	addi	s0,sp,304
    1716:	5a01                	li	s4,-32
    1718:	7802                	flw	fa6,32(sp)
    171a:	1a00                	addi	s0,sp,304
        for (j = 0; j < N; j++)
    171c:	5b01                	li	s6,-32
    171e:	3101                	jal	131e <main+0x936>
{
    1720:	1700                	addi	s0,sp,928
    1722:	09a0                	addi	s0,sp,216
            A[i * N + j] += val;
    1724:	0000                	unimp
    1726:	0ae8                	addi	a0,sp,348
        for (j = 0; j < N; j++)
    1728:	0000                	unimp
    172a:	b019                	j	f30 <main+0x548>
            A[i * N + j] += val;
    172c:	0009                	c.nop	2
    172e:	dc00                	sw	s0,56(s0)
    1730:	000a                	c.slli	zero,0x2
    1732:	1200                	addi	s0,sp,288
        for (j = 0; j < N; j++)
    1734:	000a                	c.slli	zero,0x2
    1736:	1a00                	addi	s0,sp,304
    for (i = 0; i < N; i++)
    1738:	5a01                	li	s4,-32
    173a:	7802                	flw	fa6,32(sp)
    173c:	1a00                	addi	s0,sp,304
    173e:	5b01                	li	s6,-32
    1740:	0902                	c.slli64	s2
    1742:	00ff                	0xff
}
    1744:	0009b817          	auipc	a6,0x9b
    for (i = 0; i < N; i++)
    1748:	e800                	fsw	fs0,16(s0)
    174a:	000a                	c.slli	zero,0x2
{
    174c:	0000                	unimp
    174e:	0409                	addi	s0,s0,2
    1750:	028d                	addi	t0,t0,3
    1752:	0000                	unimp
    1754:	3f1f 0005 3f00      	0x3f0000053f1f
    175a:	0005                	c.nop	1
    175c:	0100                	addi	s0,sp,128
    175e:	0478                	addi	a4,sp,524
    1760:	d220                	sw	s0,96(a2)
    1762:	d2000003          	lb	zero,-736(zero) # fffffd20 <RAM_SIZE+0xfffefd20>
        C[i] = 0;
    1766:	1f000003          	lb	zero,496(zero) # 1f0 <calc_func+0xd0>
{
    176a:	04fe                	slli	s1,s1,0x1f
    176c:	0000                	unimp
    176e:	04fe                	slli	s1,s1,0x1f
    1770:	0000                	unimp
    1772:	1f0c4403          	lbu	s0,496(s8) # f95c8 <RAM_SIZE+0xe95c8>
    1776:	045a                	slli	s0,s0,0x16
    1778:	0000                	unimp
    177a:	045a                	slli	s0,s0,0x16
        C[i] = 0;
    177c:	0000                	unimp
    177e:	1f0c4503          	lbu	a0,496(s8)
    1782:	04d6                	slli	s1,s1,0x15
    1784:	0000                	unimp
    1786:	04d6                	slli	s1,s1,0x15
    1788:	0000                	unimp
    178a:	1f0c4603          	lbu	a2,496(s8)
{
    178e:	0000040f          	0x40f
    1792:	0000040f          	0x40f
    1796:	200c4703          	lbu	a4,512(s8)
    179a:	0392                	slli	t2,t2,0x4
    179c:	0000                	unimp
    179e:	0392                	slli	t2,t2,0x4
    17a0:	0000                	unimp
    17a2:	db1f 0003 db00      	0xdb000003db1f
        C[i] = 0;
    17a8:	02000003          	lb	zero,32(zero) # 20 <_start+0x10>
    17ac:	05d8                	addi	a4,sp,708
    17ae:	2d1f 0004 2d00      	0x2d0000042d1f
        for (j = 0; j < N; j++)
    17b4:	0004                	0x4
    17b6:	0200                	addi	s0,sp,256
        C[i] = 0;
    17b8:	06ca                	slli	a3,a3,0x12
    17ba:	231f 0005 2300      	0x23000005231f
            C[i] += (MATRES)A[i * N + j] * (MATRES)B[j];
    17c0:	0005                	c.nop	1
    17c2:	0100                	addi	s0,sp,128
    17c4:	0850                	addi	a2,sp,20
    17c6:	2f1f 0005 2f00      	0x2f0000052f1f
        for (j = 0; j < N; j++)
    17cc:	0005                	c.nop	1
    17ce:	0300                	addi	s0,sp,384
            C[i] += (MATRES)A[i * N + j] * (MATRES)B[j];
    17d0:	08aa                	slli	a7,a7,0xa
    17d2:	fb1f 0000 fb00      	0xfb000000fb1f
        for (j = 0; j < N; j++)
    17d8:	0000                	unimp
    17da:	0300                	addi	s0,sp,384
    17dc:	3c1f084b          	fnmsub.h	fa6,ft10,ft1,ft7,rne
    for (i = 0; i < N; i++)
    17e0:	0002                	c.slli64	zero
    17e2:	3c00                	fld	fs0,56(s0)
    17e4:	0002                	c.slli64	zero
    17e6:	0300                	addi	s0,sp,384
    17e8:	0ca6                	slli	s9,s9,0x9
    17ea:	441f 0004 4400      	0x44000004441f
}
    17f0:	0004                	0x4
    17f2:	0300                	addi	s0,sp,384
    17f4:	1c1f08b3          	0x1c1f08b3
    17f8:	0004                	0x4
    17fa:	1c00                	addi	s0,sp,560
    17fc:	0004                	0x4
    17fe:	0300                	addi	s0,sp,384
    1800:	084e                	slli	a6,a6,0x13
    1802:	701f 0004 7000      	0x70000004701f
    1808:	0004                	0x4
    180a:	0200                	addi	s0,sp,256
    180c:	011f06cb          	fnmsub.s	fa3,ft10,fa7,ft0,rne
    1810:	0001                	nop
    1812:	0100                	addi	s0,sp,128
    1814:	0001                	nop
    1816:	0300                	addi	s0,sp,384
    1818:	921f0ca7          	0x921f0ca7
    181c:	0002                	c.slli64	zero
    181e:	9200                	0x9200
    1820:	0002                	c.slli64	zero
    1822:	0300                	addi	s0,sp,384
{
    1824:	084c                	addi	a1,sp,20
    1826:	4c00                	lw	s0,24(s0)
    1828:	0400000b          	0x400000b
    182c:	e700                	fsw	fs0,8(a4)
    182e:	0004                	0x4
    1830:	0400                	addi	s0,sp,512
    1832:	8201                	c.srli64	a2
    1834:	0000                	unimp
    1836:	0c00                	addi	s0,sp,528
    1838:	05b5                	addi	a1,a1,13
    183a:	0000                	unimp
    183c:	0019                	c.nop	6
    183e:	0000                	unimp
    1840:	13b0                	addi	a2,sp,488
    1842:	0000                	unimp
    1844:	0b84                	addi	s1,sp,464
    1846:	0000                	unimp
    1848:	00002507          	flw	fa0,0(zero) # 0 <RAM_START_ADDRESS>
    184c:	0402                	c.slli64	s0
    184e:	6905                	lui	s2,0x1
    1850:	746e                	flw	fs0,248(sp)
    1852:	0300                	addi	s0,sp,384
    1854:	0704                	addi	s1,sp,896
    1856:	000008c7          	fmsub.s	fa7,ft0,ft0,ft0,rne
    185a:	bb050803          	lb	a6,-1104(a0)
    185e:	0001                	nop
    1860:	0300                	addi	s0,sp,384
    1862:	0410                	addi	a2,sp,512
    for (i = 0; i < N; i++)
    1864:	00001187          	flh	ft3,0(zero) # 0 <RAM_START_ADDRESS>
    1868:	0304                	addi	s1,sp,384
    186a:	02000003          	lb	zero,32(zero) # 20 <_start+0x10>
            C[i * N + j] = 0;
    186e:	185f 004d 0000      	0x4d185f
    1874:	c9050203          	lb	tp,-880(a0)
    1878:	0000                	unimp
    187a:	0400                	addi	s0,sp,512
    187c:	0235                	addi	tp,tp,13
    187e:	0000                	unimp
    1880:	6002                	flw	ft0,0(sp)
    1882:	6018                	flw	fa4,0(s0)
    for (i = 0; i < N; i++)
    1884:	0000                	unimp
    1886:	0300                	addi	s0,sp,384
        for (j = 0; j < N; j++)
    1888:	0702                	c.slli64	a4
    188a:	02ba                	slli	t0,t0,0xe
            C[i * N + j] = 0;
    188c:	0000                	unimp
    188e:	1804                	addi	s1,sp,48
    1890:	0001                	nop
    1892:	0200                	addi	s0,sp,256
    1894:	1861                	addi	a6,a6,-8
    1896:	0025                	c.nop	9
    1898:	0000                	unimp
    189a:	8c040803          	lb	a6,-1856(s0)
    189e:	0011                	c.nop	4
    18a0:	0300                	addi	s0,sp,384
    18a2:	0801                	addi	a6,a6,0
    18a4:	0262                	slli	tp,tp,0x18
    18a6:	0000                	unimp
        for (j = 0; j < N; j++)
    18a8:	b304                	fsd	fs1,32(a4)
    18aa:	02000003          	lb	zero,32(zero) # 20 <_start+0x10>
            for (k = 0; k < N; k++)
    18ae:	1864                	addi	s1,sp,60
    18b0:	002c                	addi	a1,sp,8
    18b2:	0000                	unimp
    18b4:	0904                	addi	s1,sp,144
    18b6:	0006                	c.slli	zero,0x1
                C[i * N + j] += (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
    18b8:	0200                	addi	s0,sp,256
    18ba:	1865                	addi	a6,a6,-7
    18bc:	0081                	addi	ra,ra,0
    18be:	0000                	unimp
            for (k = 0; k < N; k++)
    18c0:	1104                	addi	s1,sp,160
    18c2:	0001                	nop
    18c4:	0300                	addi	s0,sp,384
    18c6:	106a                	c.slli	zero,0x3a
                C[i * N + j] += (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
    18c8:	0041                	c.nop	16
    18ca:	0000                	unimp
    18cc:	d304                	sw	s1,32(a4)
    18ce:	0002                	c.slli64	zero
            for (k = 0; k < N; k++)
    18d0:	0300                	addi	s0,sp,384
    18d2:	0067106b          	0x67106b
    18d6:	0000                	unimp
        for (j = 0; j < N; j++)
    18d8:	7305                	lui	t1,0xfffe1
    18da:	10000003          	lb	zero,256(zero) # 100 <cmp_idx+0x3c>
    18de:	eb107103          	0xeb107103
    18e2:	0000                	unimp
    18e4:	0600                	addi	s0,sp,768
    18e6:	004e                	c.slli	zero,0x13
    18e8:	250d7303          	0x250d7303
    18ec:	0000                	unimp
    18ee:	0000                	unimp
    for (i = 0; i < N; i++)
    18f0:	4106                	lw	sp,64(sp)
    18f2:	0300                	addi	s0,sp,384
    18f4:	0d74                	addi	a3,sp,668
    18f6:	000000eb          	0xeb
    18fa:	0604                	addi	s1,sp,768
    18fc:	0042                	c.slli	zero,0x10
    18fe:	eb0d7503          	0xeb0d7503
    1902:	0000                	unimp
    1904:	0800                	addi	s0,sp,16
    1906:	4306                	lw	t1,64(sp)
    1908:	0300                	addi	s0,sp,384
    190a:	0d76                	slli	s10,s10,0x1d
}
    190c:	00f1                	addi	ra,ra,28
    190e:	0000                	unimp
    1910:	000c                	0xc
    1912:	00990407          	0x990407
    1916:	0000                	unimp
    1918:	00a50407          	0xa50407
    191c:	0000                	unimp
    191e:	8704                	0x8704
    1920:	0002                	c.slli64	zero
    1922:	0300                	addi	s0,sp,384
    1924:	00b10377          	0xb10377
    1928:	0000                	unimp
    192a:	0408                	addi	a0,sp,512
    192c:	8709                	srai	a4,a4,0x2
    192e:	0005                	c.nop	1
    1930:	0100                	addi	s0,sp,128
    1932:	0158                	addi	a4,sp,132
    1934:	4801                	li	a6,0
    1936:	0019                	c.nop	6
    1938:	3800                	fld	fs0,48(s0)
    193a:	0001                	nop
    193c:	0100                	addi	s0,sp,128
    193e:	d09c                	sw	a5,32(s1)
    1940:	0001                	nop
    1942:	0a00                	addi	s0,sp,272
    1944:	004e                	c.slli	zero,0x13
    1946:	5801                	li	a6,-32
{
    1948:	2501                	jal	1f48 <barebones_clock+0x14>
    194a:	0081                	addi	ra,ra,0
    194c:	0000                	unimp
    194e:	16da                	slli	a3,a3,0x36
    1950:	0000                	unimp
    1952:	430a                	lw	t1,128(sp)
    1954:	0100                	addi	s0,sp,128
    1956:	0158                	addi	a4,sp,132
    1958:	f130                	fsw	fa2,96(a0)
    195a:	0000                	unimp
    195c:	0600                	addi	s0,sp,768
    195e:	0a000017          	auipc	zero,0xa000
    1962:	0041                	c.nop	16
    1964:	5801                	li	a6,-32
    1966:	3b01                	jal	1676 <matrix_mul_const+0x56>
    1968:	000000eb          	0xeb
    196c:	00001733          	sll	a4,zero,zero
    1970:	420a                	lw	tp,128(sp)
    1972:	0100                	addi	s0,sp,128
    1974:	0158                	addi	a4,sp,132
    1976:	eb46                	fsw	fa7,148(sp)
    1978:	0000                	unimp
    197a:	5400                	lw	s0,40(s0)
    197c:	0b000017          	auipc	zero,0xb000
    1980:	0069                	c.nop	26
    1982:	5a01                	li	s4,-32
    1984:	0c01                	addi	s8,s8,0
    1986:	0081                	addi	ra,ra,0
    for (i = 0; i < N; i++)
    1988:	0000                	unimp
    198a:	1781                	addi	a5,a5,-32
    198c:	0000                	unimp
    198e:	01006a0b          	0x1006a0b
            C[i * N + j] = 0;
    1992:	015a                	slli	sp,sp,0x16
    1994:	0000810f          	0x810f
    1998:	ab00                	fsd	fs0,16(a4)
    199a:	0b000017          	auipc	zero,0xb000
    199e:	5a01006b          	0x5a01006b
    19a2:	1201                	addi	tp,tp,-32
    19a4:	0081                	addi	ra,ra,0
    19a6:	0000                	unimp
    for (i = 0; i < N; i++)
    19a8:	17e2                	slli	a5,a5,0x38
    19aa:	0000                	unimp
        for (j = 0; j < N; j++)
    19ac:	d80c                	sw	a1,48(s0)
    19ae:	0001                	nop
            C[i * N + j] = 0;
    19b0:	b200                	fsd	fs0,32(a2)
    19b2:	0001                	nop
    19b4:	0b00                	addi	s0,sp,400
    19b6:	6d74                	flw	fa3,92(a0)
    19b8:	0070                	addi	a2,sp,12
    19ba:	6201                	0x6201
    19bc:	1801                	addi	a6,a6,-32
    19be:	00a5                	addi	ra,ra,9
    19c0:	0000                	unimp
    19c2:	17f6                	slli	a5,a5,0x3d
    19c4:	0000                	unimp
    19c6:	f00d                	bnez	s0,18e8 <matrix_mul_matrix+0xc4>
    19c8:	0019                	c.nop	6
    19ca:	2f00                	fld	fs0,24(a4)
        for (j = 0; j < N; j++)
    19cc:	0d00000b          	0xd00000b
            for (k = 0; k < N; k++)
    19d0:	1a04                	addi	s1,sp,304
    19d2:	0000                	unimp
    19d4:	00000b2f          	vamoaddei8.v	zero,(zero),v0,v22,v0.t
    19d8:	0e00                	addi	s0,sp,784
    19da:	19c8                	addi	a0,sp,244
                MATRES tmp = (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
    19dc:	0000                	unimp
    19de:	0b38                	addi	a4,sp,408
    19e0:	0000                	unimp
    19e2:	025a010f          	0x25a010f
            for (k = 0; k < N; k++)
    19e6:	0082                	c.slli64	ra
    19e8:	015b010f          	0x15b010f
                MATRES tmp = (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
    19ec:	0f30                	addi	a2,sp,920
    19ee:	5c01                	li	s8,-32
                C[i * N + j] += bit_extract(tmp, 2, 4) * bit_extract(tmp, 5, 7);
    19f0:	9104                	0x9104
    19f2:	7fb4                	flw	fa3,120(a5)
    19f4:	0006                	c.slli	zero,0x1
    19f6:	0900                	addi	s0,sp,144
    19f8:	0625                	addi	a2,a2,9
    19fa:	0000                	unimp
    19fc:	4201                	li	tp,0
    19fe:	0101                	addi	sp,sp,0
    1a00:	1824                	addi	s1,sp,56
    1a02:	0000                	unimp
    1a04:	0124                	addi	s1,sp,136
    1a06:	0000                	unimp
            for (k = 0; k < N; k++)
    1a08:	9c01                	0x9c01
    1a0a:	0000027b          	0x27b
    1a0e:	4e0a                	lw	t3,128(sp)
        for (j = 0; j < N; j++)
    1a10:	0100                	addi	s0,sp,128
    1a12:	0142                	slli	sp,sp,0x10
    1a14:	811a                	mv	sp,t1
    1a16:	0000                	unimp
    1a18:	0900                	addi	s0,sp,144
    1a1a:	0018                	0x18
    1a1c:	0a00                	addi	s0,sp,272
    1a1e:	42010043          	fmadd.d	ft0,ft2,ft0,fs0,rne
    1a22:	2501                	jal	2022 <core_init_state+0x16>
    1a24:	00f1                	addi	ra,ra,28
    1a26:	0000                	unimp
    for (i = 0; i < N; i++)
    1a28:	1835                	addi	a6,a6,-19
    1a2a:	0000                	unimp
    1a2c:	410a                	lw	sp,128(sp)
    1a2e:	0100                	addi	s0,sp,128
    1a30:	0142                	slli	sp,sp,0x10
    1a32:	eb30                	fsw	fa2,80(a4)
    1a34:	0000                	unimp
    1a36:	6200                	flw	fs0,0(a2)
    1a38:	0018                	0x18
    1a3a:	0a00                	addi	s0,sp,272
    1a3c:	0042                	c.slli	zero,0x10
    1a3e:	4201                	li	tp,0
    1a40:	3b01                	jal	1750 <matrix_mul_vect+0x8>
    1a42:	000000eb          	0xeb
}
    1a46:	00001883          	lh	a7,0(zero) # 0 <RAM_START_ADDRESS>
    1a4a:	0100690b          	0x100690b
    1a4e:	0144                	addi	s1,sp,132
    1a50:	810c                	0x810c
    1a52:	0000                	unimp
    1a54:	b000                	fsd	fs0,32(s0)
    1a56:	0018                	0x18
    1a58:	0b00                	addi	s0,sp,400
    1a5a:	006a                	c.slli	zero,0x1a
    1a5c:	4401                	li	s0,0
    1a5e:	0f01                	addi	t5,t5,0
    1a60:	0081                	addi	ra,ra,0
    1a62:	0000                	unimp
    1a64:	18da                	slli	a7,a7,0x36
    1a66:	0000                	unimp
    1a68:	01006b0b          	0x1006b0b
    1a6c:	0144                	addi	s1,sp,132
    1a6e:	8112                	mv	sp,tp
    1a70:	0000                	unimp
    1a72:	1100                	addi	s0,sp,160
    1a74:	0019                	c.nop	6
    1a76:	1000                	addi	s0,sp,32
    1a78:	18a4                	addi	s1,sp,120
    1a7a:	0000                	unimp
    1a7c:	0b38                	addi	a4,sp,408
    1a7e:	0000                	unimp
{
    1a80:	0271                	addi	tp,tp,28
    1a82:	0000                	unimp
    1a84:	025a010f          	0x25a010f
    1a88:	0082                	c.slli64	ra
    1a8a:	015b010f          	0x15b010f
    MATDAT clipval = matrix_big(val);
    1a8e:	0f30                	addi	a2,sp,920
{
    1a90:	5c01                	li	s8,-32
    1a92:	9104                	0x9104
    1a94:	7fb4                	flw	fa3,120(a5)
    1a96:	0006                	c.slli	zero,0x1
    1a98:	cc0d                	beqz	s0,1ad2 <matrix_test+0x52>
    1a9a:	0018                	0x18
    1a9c:	2f00                	fld	fs0,24(a4)
    1a9e:	0000000b          	0xb
    1aa2:	e809                	bnez	s0,1ab4 <matrix_test+0x34>
    1aa4:	0005                	c.nop	1
    1aa6:	0100                	addi	s0,sp,128
    1aa8:	4801012f          	0x4801012f
    1aac:	dc000017          	auipc	zero,0xdc000
    1ab0:	0000                	unimp
    1ab2:	0100                	addi	s0,sp,128
    1ab4:	179c                	addi	a5,sp,992
    1ab6:	0a000003          	lb	zero,160(zero) # a0 <__do_global_dtors_aux+0x44>
    1aba:	004e                	c.slli	zero,0x13
    1abc:	2f01                	jal	21cc <core_state_transition+0x78>
    1abe:	1801                	addi	a6,a6,-32
    1ac0:	0081                	addi	ra,ra,0
    1ac2:	0000                	unimp
    1ac4:	1925                	addi	s2,s2,-23
    1ac6:	0000                	unimp
    MATDAT clipval = matrix_big(val);
    1ac8:	430a                	lw	t1,128(sp)
    1aca:	0100                	addi	s0,sp,128
    for (i = 0; i < N; i++)
    1acc:	f123012f          	0xf123012f
    1ad0:	0000                	unimp
    1ad2:	5c00                	lw	s0,56(s0)
    1ad4:	0019                	c.nop	6
    1ad6:	0a00                	addi	s0,sp,272
    1ad8:	0041                	c.nop	16
    1ada:	2f01                	jal	21ea <core_state_transition+0x96>
    1adc:	2e01                	jal	1dec <matrix_test+0x36c>
    1ade:	000000eb          	0xeb
            A[i * N + j] += val;
    1ae2:	00001993          	slli	s3,zero,0x0
    1ae6:	420a                	lw	tp,128(sp)
    1ae8:	0100                	addi	s0,sp,128
    1aea:	eb39012f          	0xeb39012f
    1aee:	0000                	unimp
    1af0:	ca00                	sw	s0,16(a2)
    1af2:	0019                	c.nop	6
    1af4:	0b00                	addi	s0,sp,400
    1af6:	0069                	c.nop	26
    for (i = 0; i < N; i++)
    1af8:	3101                	jal	16f8 <matrix_add_const>
    1afa:	0c01                	addi	s8,s8,0
    1afc:	0081                	addi	ra,ra,0
    1afe:	0000                	unimp
        for (j = 0; j < N; j++)
    1b00:	1a01                	addi	s4,s4,-32
    1b02:	0000                	unimp
    1b04:	01006a0b          	0x1006a0b
{
    1b08:	0131                	addi	sp,sp,12
    1b0a:	0000810f          	0x810f
            A[i * N + j] += val;
    1b0e:	2100                	fld	fs0,0(a0)
        for (j = 0; j < N; j++)
    1b10:	001a                	c.slli	zero,0x6
    1b12:	1000                	addi	s0,sp,32
            A[i * N + j] += val;
    1b14:	17a8                	addi	a0,sp,1000
    1b16:	0000                	unimp
    1b18:	0b38                	addi	a4,sp,408
    1b1a:	0000                	unimp
        for (j = 0; j < N; j++)
    1b1c:	030d                	addi	t1,t1,3
    1b1e:	0000                	unimp
    for (i = 0; i < N; i++)
    1b20:	025a010f          	0x25a010f
    1b24:	0084                	addi	s1,sp,64
    1b26:	015b010f          	0x15b010f
    1b2a:	0f30                	addi	a2,sp,920
    1b2c:	5c01                	li	s8,-32
    1b2e:	8504                	0x8504
    1b30:	3200                	fld	fs0,32(a2)
    1b32:	0024                	addi	s1,sp,8
            C[i * N + j] = (MATRES)A[i * N + j] * (MATRES)val;
    1b34:	d40d                	beqz	s0,1a5e <matrix_mul_matrix_bitextract+0x116>
    1b36:	2f000017          	auipc	zero,0x2f000
    1b3a:	0000000b          	0xb
        for (j = 0; j < N; j++)
    1b3e:	f811                	bnez	s0,1a52 <matrix_mul_matrix_bitextract+0x10a>
    1b40:	0005                	c.nop	1
    1b42:	0100                	addi	s0,sp,128
    1b44:	011d                	addi	sp,sp,7
    1b46:	0101                	addi	sp,sp,0
    1b48:	035f 0000 4e12      	0x4e120000035f
    1b4e:	0100                	addi	s0,sp,128
            C[i * N + j] = (MATRES)A[i * N + j] * (MATRES)val;
    1b50:	011d                	addi	sp,sp,7
    1b52:	8119                	srli	a0,a0,0x6
    1b54:	0000                	unimp
    1b56:	1200                	addi	s0,sp,288
        for (j = 0; j < N; j++)
    1b58:	0041                	c.nop	16
    1b5a:	1d01                	addi	s10,s10,-32
            C[i * N + j] = (MATRES)A[i * N + j] * (MATRES)val;
    1b5c:	2401                	jal	1d5c <matrix_test+0x2dc>
    1b5e:	000000eb          	0xeb
    1b62:	7612                	flw	fa2,36(sp)
        for (j = 0; j < N; j++)
    1b64:	6c61                	lui	s8,0x18
    1b66:	0100                	addi	s0,sp,128
    1b68:	011d                	addi	sp,sp,7
    1b6a:	992e                	add	s2,s2,a1
    for (i = 0; i < N; i++)
    1b6c:	0000                	unimp
    1b6e:	1300                	addi	s0,sp,416
    1b70:	0069                	c.nop	26
    1b72:	1f01                	addi	t5,t5,-32
    1b74:	0c01                	addi	s8,s8,0
    1b76:	0081                	addi	ra,ra,0
    1b78:	0000                	unimp
    1b7a:	01006a13          	ori	s4,zero,16
    1b7e:	011f 810f 0000      	0x810f011f
    1b84:	0000                	unimp
    1b86:	1411                	addi	s0,s0,-28
    1b88:	0006                	c.slli	zero,0x1
    1b8a:	0100                	addi	s0,sp,128
    1b8c:	010d                	addi	sp,sp,3
    1b8e:	0101                	addi	sp,sp,0
    1b90:	03b2                	slli	t2,t2,0xc
    1b92:	0000                	unimp
            if (tmp > clipval)
    1b94:	4e12                	lw	t3,4(sp)
    1b96:	0100                	addi	s0,sp,128
    1b98:	010d                	addi	sp,sp,3
    1b9a:	8119                	srli	a0,a0,0x6
    1b9c:	0000                	unimp
    1b9e:	1200                	addi	s0,sp,288
    1ba0:	0d010043          	fmadd.h	ft0,ft2,fa6,ft1,rne
    1ba4:	2401                	jal	1da4 <matrix_test+0x324>
    1ba6:	00f1                	addi	ra,ra,28
    for (i = 0; i < N; i++)
    1ba8:	0000                	unimp
    1baa:	4112                	lw	sp,4(sp)
        for (j = 0; j < N; j++)
    1bac:	0100                	addi	s0,sp,128
    1bae:	010d                	addi	sp,sp,3
    1bb0:	0000eb2f          	vamoaddei32.v	zero,(ra),v0,v22,v0.t
    1bb4:	1200                	addi	s0,sp,288
    1bb6:	6176                	flw	ft2,92(sp)
                ret += 10;
    1bb8:	006c                	addi	a1,sp,12
    1bba:	0d01                	addi	s10,s10,0
        for (j = 0; j < N; j++)
    1bbc:	3901                	jal	17cc <matrix_mul_vect+0x84>
    1bbe:	0099                	addi	ra,ra,6
                ret += 10;
    1bc0:	0000                	unimp
    1bc2:	01006913          	ori	s2,zero,16
                tmp = 0;
    1bc6:	810c010f          	0x810c010f
        for (j = 0; j < N; j++)
    1bca:	0000                	unimp
                ret += (cur > prev) ? 1 : 0;
    1bcc:	1300                	addi	s0,sp,416
    1bce:	006a                	c.slli	zero,0x1a
            cur = C[i * N + j];
    1bd0:	0f01                	addi	t5,t5,0
    1bd2:	0f01                	addi	t5,t5,0
                ret += 10;
    1bd4:	0081                	addi	ra,ra,0
    1bd6:	0000                	unimp
    1bd8:	1400                	addi	s0,sp,544
    1bda:	0575                	addi	a0,a0,29
                ret += (cur > prev) ? 1 : 0;
    1bdc:	0000                	unimp
    1bde:	ee01                	bnez	a2,1bf6 <matrix_test+0x176>
            tmp += cur;
    1be0:	4101                	li	sp,0
    1be2:	0000                	unimp
                ret += 10;
    1be4:	0100                	addi	s0,sp,128
    1be6:	0428                	addi	a0,sp,520
                ret += (cur > prev) ? 1 : 0;
    1be8:	0000                	unimp
    1bea:	4e15                	li	t3,5
            if (tmp > clipval)
    1bec:	0100                	addi	s0,sp,128
    1bee:	13ee                	slli	t2,t2,0x3b
                ret += (cur > prev) ? 1 : 0;
    1bf0:	0081                	addi	ra,ra,0
    1bf2:	0000                	unimp
        for (j = 0; j < N; j++)
    1bf4:	4315                	li	t1,5
    1bf6:	0100                	addi	s0,sp,128
                ret += (cur > prev) ? 1 : 0;
    1bf8:	1eee                	slli	t4,t4,0x3b
    1bfa:	00f1                	addi	ra,ra,28
        for (j = 0; j < N; j++)
    1bfc:	0000                	unimp
    1bfe:	e016                	fsw	ft5,0(sp)
    for (i = 0; i < N; i++)
    1c00:	0005                	c.nop	1
    1c02:	0100                	addi	s0,sp,128
    1c04:	28ee                	fld	fa7,216(sp)
    1c06:	0099                	addi	ra,ra,6
    1c08:	0000                	unimp
    1c0a:	706d7417          	auipc	s0,0x706d7
    1c0e:	0100                	addi	s0,sp,128
    1c10:	0cf0                	addi	a2,sp,604
    1c12:	00a5                	addi	ra,ra,9
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1c14:	0000                	unimp
    1c16:	3d18                	fld	fa4,56(a0)
    1c18:	0006                	c.slli	zero,0x1
    1c1a:	0100                	addi	s0,sp,128
    matrix_mul_vect(N, C, A, B);
    1c1c:	15f0                	addi	a2,sp,748
    1c1e:	00a5                	addi	ra,ra,9
    1c20:	0000                	unimp
    1c22:	72756317          	auipc	t1,0x72756
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1c26:	0100                	addi	s0,sp,128
    matrix_mul_vect(N, C, A, B);
    1c28:	1ff0                	addi	a2,sp,1020
    1c2a:	00a5                	addi	ra,ra,9
    1c2c:	0000                	unimp
    1c2e:	74657217          	auipc	tp,0x74657
    1c32:	0100                	addi	s0,sp,128
    1c34:	0cf1                	addi	s9,s9,28
    1c36:	0041                	c.nop	16
    1c38:	0000                	unimp
    1c3a:	01006917          	auipc	s2,0x1006
    1c3e:	0cf2                	slli	s9,s9,0x1c
    1c40:	0081                	addi	ra,ra,0
    1c42:	0000                	unimp
        for (j = 0; j < N; j++)
    1c44:	01006a17          	auipc	s4,0x1006
    1c48:	0ff2                	slli	t6,t6,0x1c
    1c4a:	0081                	addi	ra,ra,0
    1c4c:	0000                	unimp
    1c4e:	1900                	addi	s0,sp,176
                ret += 10;
    1c50:	0444                	addi	s1,sp,516
    1c52:	0000                	unimp
        for (j = 0; j < N; j++)
    1c54:	b501                	j	1a54 <matrix_mul_matrix_bitextract+0x10c>
    1c56:	8101                	c.srli64	a0
                ret += 10;
    1c58:	0000                	unimp
    1c5a:	b000                	fsd	fs0,32(s0)
                tmp = 0;
    1c5c:	d8000013          	li	zero,-640
        for (j = 0; j < N; j++)
    1c60:	0001                	nop
    1c62:	0100                	addi	s0,sp,128
                ret += (cur > prev) ? 1 : 0;
    1c64:	029c                	addi	a5,sp,320
    1c66:	0005                	c.nop	1
            cur = C[i * N + j];
    1c68:	1a00                	addi	s0,sp,304
    1c6a:	02b2                	slli	t0,t0,0xc
                ret += 10;
    1c6c:	0000                	unimp
    1c6e:	b501                	j	1a6e <matrix_mul_matrix_bitextract+0x126>
    1c70:	8119                	srli	a0,a0,0x6
    1c72:	0000                	unimp
                ret += (cur > prev) ? 1 : 0;
    1c74:	3500                	fld	fs0,40(a0)
    1c76:	001a                	c.slli	zero,0x6
            tmp += cur;
    1c78:	1a00                	addi	s0,sp,304
    1c7a:	0580                	addi	s0,sp,704
                ret += 10;
    1c7c:	0000                	unimp
    1c7e:	b501                	j	1a7e <matrix_mul_matrix_bitextract+0x136>
                ret += (cur > prev) ? 1 : 0;
    1c80:	0328                	addi	a0,sp,392
    1c82:	0001                	nop
            if (tmp > clipval)
    1c84:	6c00                	flw	fs0,24(s0)
    1c86:	001a                	c.slli	zero,0x6
                ret += (cur > prev) ? 1 : 0;
    1c88:	1a00                	addi	s0,sp,304
    1c8a:	02f1                	addi	t0,t0,28
        for (j = 0; j < N; j++)
    1c8c:	0000                	unimp
    1c8e:	b501                	j	1a8e <matrix_test+0xe>
                ret += (cur > prev) ? 1 : 0;
    1c90:	00006737          	lui	a4,0x6
        for (j = 0; j < N; j++)
    1c94:	9a00                	0x9a00
    1c96:	001a                	c.slli	zero,0x6
    for (i = 0; i < N; i++)
    1c98:	1b00                	addi	s0,sp,432
    1c9a:	0070                	addi	a2,sp,12
    1c9c:	b501                	j	1a9c <matrix_test+0x1c>
    1c9e:	0249                	addi	tp,tp,18
    1ca0:	0005                	c.nop	1
    1ca2:	c300                	sw	s0,0(a4)
    1ca4:	001a                	c.slli	zero,0x6
    1ca6:	1c00                	addi	s0,sp,560
    1ca8:	004e                	c.slli	zero,0x13
    1caa:	b701                	j	1baa <matrix_test+0x12a>
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1cac:	810d                	srli	a0,a0,0x3
    1cae:	0000                	unimp
    1cb0:	fb00                	fsw	fs0,48(a4)
    1cb2:	001a                	c.slli	zero,0x6
    matrix_mul_matrix(N, C, A, B);
    1cb4:	1c00                	addi	s0,sp,560
    1cb6:	0041                	c.nop	16
    1cb8:	b801                	j	14c8 <core_init_matrix+0x118>
    1cba:	eb0d                	bnez	a4,1cec <matrix_test+0x26c>
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1cbc:	0000                	unimp
    1cbe:	2700                	fld	fs0,8(a4)
    matrix_mul_matrix(N, C, A, B);
    1cc0:	1c00001b          	0x1c00001b
    1cc4:	0042                	c.slli	zero,0x10
    1cc6:	b901                	j	18d6 <matrix_mul_matrix+0xb2>
    1cc8:	eb0d                	bnez	a4,1cfa <matrix_test+0x27a>
    1cca:	0000                	unimp
    1ccc:	5900                	lw	s0,48(a0)
    1cce:	1d00001b          	0x1d00001b
    1cd2:	00000637          	lui	a2,0x0
    1cd6:	ba01                	j	15e6 <matrix_sum+0x5e>
    1cd8:	670d                	lui	a4,0x3
    1cda:	0000                	unimp
    1cdc:	7700                	flw	fs0,40(a4)
    1cde:	1c00001b          	0x1c00001b
        for (j = 0; j < N; j++)
    1ce2:	6176                	flw	ft2,92(sp)
    1ce4:	006c                	addi	a1,sp,12
    1ce6:	bb01                	j	19f6 <matrix_mul_matrix_bitextract+0xae>
    1ce8:	990d                	andi	a0,a0,-29
    1cea:	0000                	unimp
    1cec:	b800                	fsd	fs0,48(s0)
    1cee:	1c00001b          	0x1c00001b
                ret += 10;
    1cf2:	0069                	c.nop	26
        for (j = 0; j < N; j++)
    1cf4:	bc01                	j	1704 <matrix_add_const+0xc>
    1cf6:	810d                	srli	a0,a0,0x3
                ret += 10;
    1cf8:	0000                	unimp
    1cfa:	3600                	fld	fs0,40(a2)
                tmp = 0;
    1cfc:	001c                	0x1c
    1cfe:	1c00                	addi	s0,sp,560
        for (j = 0; j < N; j++)
    1d00:	006a                	c.slli	zero,0x1a
    1d02:	bc01                	j	1712 <matrix_add_const+0x1a>
    1d04:	8114                	0x8114
    1d06:	0000                	unimp
                ret += (cur > prev) ? 1 : 0;
    1d08:	9000                	0x9000
    1d0a:	001c                	0x1c
            cur = C[i * N + j];
    1d0c:	0d00                	addi	s0,sp,656
    1d0e:	1428                	addi	a0,sp,552
                ret += 10;
    1d10:	0000                	unimp
    1d12:	00000b2f          	vamoaddei8.v	zero,(zero),v0,v22,v0.t
    1d16:	3c0d                	jal	1748 <matrix_mul_vect>
                ret += (cur > prev) ? 1 : 0;
    1d18:	0014                	0x14
    1d1a:	2f00                	fld	fs0,24(a4)
            tmp += cur;
    1d1c:	0d00000b          	0xd00000b
                ret += 10;
    1d20:	1490                	addi	a2,sp,608
    1d22:	0000                	unimp
                ret += (cur > prev) ? 1 : 0;
    1d24:	00000b2f          	vamoaddei8.v	zero,(zero),v0,v22,v0.t
            if (tmp > clipval)
    1d28:	0700                	addi	s0,sp,896
    1d2a:	f704                	fsw	fs1,40(a4)
                ret += (cur > prev) ? 1 : 0;
    1d2c:	0000                	unimp
    1d2e:	1900                	addi	s0,sp,176
        for (j = 0; j < N; j++)
    1d30:	05d4                	addi	a3,sp,708
    1d32:	0000                	unimp
                ret += (cur > prev) ? 1 : 0;
    1d34:	8201                	c.srli64	a2
    1d36:	4101                	li	sp,0
        for (j = 0; j < N; j++)
    1d38:	0000                	unimp
    1d3a:	8000                	0x8000
    1d3c:	001a                	c.slli	zero,0x6
    1d3e:	7800                	flw	fs0,48(s0)
    for (i = 0; i < N; i++)
    1d40:	0004                	0x4
    1d42:	0100                	addi	s0,sp,128
    1d44:	979c                	0x979c
    1d46:	0009                	c.nop	2
    1d48:	1b00                	addi	s0,sp,432
    1d4a:	004e                	c.slli	zero,0x13
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1d4c:	8201                	c.srli64	a2
    1d4e:	8114                	0x8114
    1d50:	0000                	unimp
    1d52:	f100                	fsw	fs0,32(a0)
    matrix_mul_matrix_bitextract(N, C, A, B);
    1d54:	001c                	0x1c
    1d56:	1b00                	addi	s0,sp,432
    1d58:	82010043          	fmadd.d	ft0,ft2,ft0,fa6,rne
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1d5c:	f11f 0000 2b00      	0x2b000000f11f
    matrix_mul_matrix_bitextract(N, C, A, B);
    1d62:	001d                	c.nop	7
    1d64:	1b00                	addi	s0,sp,432
    1d66:	0041                	c.nop	16
    1d68:	8201                	c.srli64	a2
    1d6a:	eb2a                	fsw	fa0,148(sp)
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1d6c:	0000                	unimp
    1d6e:	6200                	flw	fs0,0(a2)
    matrix_mul_matrix_bitextract(N, C, A, B);
    1d70:	001d                	c.nop	7
    1d72:	1b00                	addi	s0,sp,432
    1d74:	0042                	c.slli	zero,0x10
    1d76:	8201                	c.srli64	a2
    1d78:	eb35                	bnez	a4,1dec <matrix_test+0x36c>
    1d7a:	0000                	unimp
    1d7c:	a700                	fsd	fs0,8(a4)
    1d7e:	001d                	c.nop	7
    1d80:	1b00                	addi	s0,sp,432
    1d82:	6176                	flw	ft2,92(sp)
        for (j = 0; j < N; j++)
    1d84:	006c                	addi	a1,sp,12
    1d86:	8201                	c.srli64	a2
    1d88:	0000993f 001dec00 	0x1dec000000993f
    1d90:	1c00                	addi	s0,sp,560
    1d92:	00637263          	bgeu	t1,t1,1d96 <matrix_test+0x316>
                ret += 10;
    1d96:	8401                	c.srai64	s0
        for (j = 0; j < N; j++)
    1d98:	540c                	lw	a1,40(s0)
    1d9a:	0000                	unimp
                ret += 10;
    1d9c:	2600                	fld	fs0,8(a2)
    1d9e:	001e                	c.slli	zero,0x7
                tmp = 0;
    1da0:	1d00                	addi	s0,sp,688
    1da2:	05e0                	addi	s0,sp,716
        for (j = 0; j < N; j++)
    1da4:	0000                	unimp
    1da6:	8501                	c.srai64	a0
    1da8:	990c                	0x990c
    1daa:	0000                	unimp
                ret += (cur > prev) ? 1 : 0;
    1dac:	9e00                	0x9e00
    1dae:	001e                	c.slli	zero,0x7
            cur = C[i * N + j];
    1db0:	1e00                	addi	s0,sp,816
    1db2:	00000317          	auipc	t1,0x0
                ret += 10;
    1db6:	1acc                	addi	a1,sp,372
    1db8:	0000                	unimp
    1dba:	01f0                	addi	a2,sp,204
                ret += (cur > prev) ? 1 : 0;
    1dbc:	0000                	unimp
    1dbe:	8701                	c.srai64	a4
            tmp += cur;
    1dc0:	d205                	beqz	a2,1ce0 <matrix_test+0x260>
    1dc2:	0005                	c.nop	1
                ret += 10;
    1dc4:	1f00                	addi	s0,sp,944
    1dc6:	0000033b          	0x33b
                ret += (cur > prev) ? 1 : 0;
    1dca:	1ed9                	addi	t4,t4,-10
            if (tmp > clipval)
    1dcc:	0000                	unimp
    1dce:	301f 0003 f700      	0xf7000003301f
        for (j = 0; j < N; j++)
    1dd4:	001e                	c.slli	zero,0x7
    1dd6:	1f00                	addi	s0,sp,944
                ret += (cur > prev) ? 1 : 0;
    1dd8:	0325                	addi	t1,t1,9
    1dda:	0000                	unimp
        for (j = 0; j < N; j++)
    1ddc:	00001f17          	auipc	t5,0x1
    1de0:	f020                	fsw	fs0,96(s0)
    1de2:	0001                	nop
    for (i = 0; i < N; i++)
    1de4:	2100                	fld	fs0,0(a0)
    1de6:	0348                	addi	a0,sp,388
    1de8:	0000                	unimp
    1dea:	1f2a                	slli	t5,t5,0x2a
    1dec:	0000                	unimp
    1dee:	5321                	li	t1,-24
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1df0:	54000003          	lb	zero,1344(zero) # 540 <core_bench_list+0x1c>
    1df4:	001f 0000 1e00      	0x1e000000001f
    1dfa:	035f 0000 1b34      	0x1b340000035f
        for (j = 0; j < N; j++)
    1e00:	0000                	unimp
    1e02:	0210                	addi	a2,sp,256
    1e04:	0000                	unimp
    1e06:	8b01                	andi	a4,a4,0
    1e08:	1c05                	addi	s8,s8,-31
    1e0a:	0006                	c.slli	zero,0x1
    1e0c:	2200                	fld	fs0,0(a2)
    1e0e:	038e                	slli	t2,t2,0x3
            A[i * N + j] += val;
    1e10:	0000                	unimp
    1e12:	8322                	mv	t1,s0
        for (j = 0; j < N; j++)
    1e14:	22000003          	lb	zero,544(zero) # 220 <calc_func+0x100>
    1e18:	0378                	addi	a4,sp,396
    1e1a:	0000                	unimp
            A[i * N + j] += val;
    1e1c:	6d22                	flw	fs10,8(sp)
    1e1e:	20000003          	lb	zero,512(zero) # 200 <calc_func+0xe0>
    1e22:	0210                	addi	a2,sp,256
        for (j = 0; j < N; j++)
    1e24:	0000                	unimp
    1e26:	9b21                	andi	a4,a4,-24
    for (i = 0; i < N; i++)
    1e28:	68000003          	lb	zero,1664(zero) # 680 <core_bench_list+0x15c>
    1e2c:	001f 2100 03a6      	0x3a62100001f
    1e32:	0000                	unimp
}
    1e34:	1f88                	addi	a0,sp,1008
    1e36:	0000                	unimp
    1e38:	600d                	c.lui	zero,0x3
    1e3a:	2f00001b          	0x2f00001b
    return crc;
    1e3e:	0000000b          	0xb
}
    1e42:	1e00                	addi	s0,sp,816
    1e44:	03b2                	slli	t2,t2,0xc
    1e46:	0000                	unimp
    1e48:	1b94                	addi	a3,sp,496
    1e4a:	0000                	unimp
    1e4c:	0238                	addi	a4,sp,264
    1e4e:	0000                	unimp
    1e50:	8c01                	sub	s0,s0,s0
    1e52:	00067c0b          	0x67c0b
    1e56:	2200                	fld	fs0,0(a2)
    1e58:	000003d7          	vadd.vv	v7,v0,v0,v0.t
    1e5c:	cd22                	sw	s0,152(sp)
    1e5e:	22000003          	lb	zero,544(zero) # 220 <calc_func+0x100>
    1e62:	000003c3          	fmadd.s	ft7,ft0,ft0,ft0,rne
    1e66:	3820                	fld	fs0,112(s0)
    1e68:	0002                	c.slli64	zero
    1e6a:	2100                	fld	fs0,0(a0)
    return crc;
    1e6c:	000003e3          	beqz	zero,2672 <get_seed_32+0x2a>
}
    1e70:	1f9c                	addi	a5,sp,1008
    1e72:	0000                	unimp
    1e74:	ef21                	bnez	a4,1ecc <matrix_test+0x44c>
    1e76:	c6000003          	lb	zero,-928(zero) # fffffc60 <RAM_SIZE+0xfffefc60>
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1e7a:	001f 2100 03fb      	0x3fb2100001f
    matrix_mul_vect(N, C, A, B);
    1e80:	0000                	unimp
    1e82:	1ffa                	slli	t6,t6,0x3e
    1e84:	0000                	unimp
    1e86:	0721                	addi	a4,a4,8
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1e88:	0004                	0x4
    1e8a:	1800                	addi	s0,sp,48
    matrix_mul_vect(N, C, A, B);
    1e8c:	0020                	addi	s0,sp,8
    1e8e:	2100                	fld	fs0,0(a0)
    1e90:	00000413          	li	s0,0
    1e94:	2041                	jal	1f14 <core_bench_matrix+0x1c>
    1e96:	0000                	unimp
    1e98:	1d21                	addi	s10,s10,-24
    1e9a:	0004                	0x4
    1e9c:	5f00                	lw	s0,56(a4)
    1e9e:	0020                	addi	s0,sp,8
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1ea0:	0000                	unimp
    1ea2:	1e00                	addi	s0,sp,816
    1ea4:	03b2                	slli	t2,t2,0xc
    1ea6:	0000                	unimp
    1ea8:	1c34                	addi	a3,sp,568
    1eaa:	0000                	unimp
    matrix_mul_matrix(N, C, A, B);
    1eac:	0260                	addi	s0,sp,268
    1eae:	0000                	unimp
    1eb0:	9101                	srli	a0,a0,0x20
    1eb2:	0006e80b          	0x6e80b
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1eb6:	1f00                	addi	s0,sp,944
    matrix_mul_matrix(N, C, A, B);
    1eb8:	000003d7          	vadd.vv	v7,v0,v0,v0.t
    1ebc:	00002073          	csrr	zero,ustatus
    1ec0:	cd1f 0003 8c00      	0x8c000003cd1f
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1ec6:	0020                	addi	s0,sp,8
    1ec8:	1f00                	addi	s0,sp,944
    1eca:	000003c3          	fmadd.s	ft7,ft0,ft0,ft0,rne
    1ece:	209f 0000 6020      	0x60200000209f
    matrix_mul_matrix_bitextract(N, C, A, B);
    1ed4:	0002                	c.slli64	zero
    1ed6:	2100                	fld	fs0,0(a0)
    1ed8:	000003e3          	beqz	zero,26de <crcu16+0x2>
    1edc:	20b2                	fld	ft1,264(sp)
    1ede:	0000                	unimp
    1ee0:	ef21                	bnez	a4,1f38 <barebones_clock+0x4>
    1ee2:	e8000003          	lb	zero,-384(zero) # fffffe80 <RAM_SIZE+0xfffefe80>
    1ee6:	0020                	addi	s0,sp,8
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1ee8:	2100                	fld	fs0,0(a0)
    1eea:	000003fb          	0x3fb
    1eee:	2128                	fld	fa0,64(a0)
    1ef0:	0000                	unimp
    1ef2:	0721                	addi	a4,a4,8
    for (i = 0; i < N; i++)
    1ef4:	0004                	0x4
    1ef6:	4600                	lw	s0,8(a2)
{
    1ef8:	0021                	c.nop	8
    1efa:	2100                	fld	fs0,0(a0)
    1efc:	00000413          	li	s0,0
    crc = crc16(matrix_test(N, C, A, B, val), crc);
    1f00:	0000217b          	0x217b
{
    1f04:	1d21                	addi	s10,s10,-24
    1f06:	0004                	0x4
    1f08:	a500                	fsd	fs0,8(a0)
    1f0a:	0021                	c.nop	8
    crc = crc16(matrix_test(N, C, A, B, val), crc);
    1f0c:	0000                	unimp
    1f0e:	1e00                	addi	s0,sp,816
    1f10:	03b2                	slli	t2,t2,0xc
    1f12:	0000                	unimp
    1f14:	1ccc                	addi	a1,sp,628
    1f16:	0000                	unimp
{
    1f18:	0288                	addi	a0,sp,320
    1f1a:	0000                	unimp
    crc = crc16(matrix_test(N, C, A, B, val), crc);
    1f1c:	9601                	srai	a2,a2,0x20
    1f1e:	0007540b          	0x7540b
    1f22:	1f00                	addi	s0,sp,944
}
    1f24:	000003d7          	vadd.vv	v7,v0,v0,v0.t
    1f28:	21b9                	jal	2376 <core_state_transition+0x222>
    1f2a:	0000                	unimp
    1f2c:	cd1f 0003 d200      	0xd2000003cd1f
    crc = crc16(matrix_test(N, C, A, B, val), crc);
    1f32:	0021                	c.nop	8
	return *time_ptr;
    1f34:	1f00                	addi	s0,sp,944
    1f36:	000003c3          	fmadd.s	ft7,ft0,ft0,ft0,rne
    1f3a:	21e5                	jal	2422 <core_state_transition+0x2ce>
    1f3c:	0000                	unimp
    1f3e:	8820                	0x8820
    1f40:	0002                	c.slli64	zero
    1f42:	2100                	fld	fs0,0(a0)
    1f44:	000003e3          	beqz	zero,274a <crcu16+0x6e>
    1f48:	21f8                	fld	fa4,192(a1)
    1f4a:	0000                	unimp
    1f4c:	ef21                	bnez	a4,1fa4 <stop_time+0xc>
    1f4e:	2e000003          	lb	zero,736(zero) # 2e0 <core_list_insert_new+0x2c>
    1f52:	0022                	c.slli	zero,0x8
    1f54:	2100                	fld	fs0,0(a0)
    1f56:	000003fb          	0x3fb
    1f5a:	226e                	fld	ft4,216(sp)
}
    1f5c:	0000                	unimp
    1f5e:	0721                	addi	a4,a4,8
    1f60:	0004                	0x4
    1f62:	8c00                	0x8c00
	return *time_ptr;
    1f64:	0022                	c.slli	zero,0x8
    1f66:	2100                	fld	fs0,0(a0)
    1f68:	00000413          	li	s0,0
    1f6c:	22c1                	jal	212c <core_init_state+0x120>
    1f6e:	0000                	unimp
    1f70:	1d21                	addi	s10,s10,-24
    1f72:	0004                	0x4
    1f74:	e000                	fsw	fs0,0(s0)
    1f76:	0022                	c.slli	zero,0x8
    1f78:	0000                	unimp
    1f7a:	1e00                	addi	s0,sp,816
    1f7c:	03b2                	slli	t2,t2,0xc
    1f7e:	0000                	unimp
    1f80:	1d70                	addi	a2,sp,700
    1f82:	0000                	unimp
    1f84:	02a8                	addi	a0,sp,328
    1f86:	0000                	unimp
    1f88:	9b01                	andi	a4,a4,-32
    1f8a:	0007bc0b          	0x7bc0b
    1f8e:	2200                	fld	fs0,0(a2)
    GETMYTIME(&start_time_val);
    1f90:	000003d7          	vadd.vv	v7,v0,v0,v0.t
}
    1f94:	cd1f 0003 2f00      	0x2f000003cd1f
	return *time_ptr;
    1f9a:	1f000023          	sb	a6,480(zero) # 1e0 <calc_func+0xc0>
    1f9e:	000003c3          	fmadd.s	ft7,ft0,ft0,ft0,rne
    1fa2:	2342                	fld	ft6,16(sp)
    1fa4:	0000                	unimp
    1fa6:	a820                	fsd	fs0,80(s0)
    1fa8:	0002                	c.slli64	zero
    1faa:	2100                	fld	fs0,0(a0)
    1fac:	000003e3          	beqz	zero,27b2 <crcu32+0x52>
    1fb0:	2355                	jal	2554 <core_bench_state+0xe8>
    1fb2:	0000                	unimp
    1fb4:	ef21                	bnez	a4,200c <core_init_state>
    1fb6:	8b000003          	lb	zero,-1872(zero) # fffff8b0 <RAM_SIZE+0xfffef8b0>
    1fba:	21000023          	sb	a6,512(zero) # 200 <calc_func+0xe0>
    1fbe:	000003fb          	0x3fb
    1fc2:	000023cb          	fnmsub.s	ft7,ft0,ft0,ft0,rdn
    GETMYTIME(&stop_time_val);
    1fc6:	0721                	addi	a4,a4,8
}
    1fc8:	0004                	0x4
    1fca:	e900                	fsw	fs0,16(a0)
    CORE_TICKS elapsed
    1fcc:	21000023          	sb	a6,512(zero) # 200 <calc_func+0xe0>
    1fd0:	00000413          	li	s0,0
}
    1fd4:	241e                	fld	fs0,448(sp)
    1fd6:	0000                	unimp
    1fd8:	1d21                	addi	s10,s10,-24
    1fda:	0004                	0x4
{
    1fdc:	3d00                	fld	fs0,56(a0)
    1fde:	0024                	addi	s1,sp,8
    secs_ret retval = ((secs_ret)ticks) / (secs_ret)EE_TICKS_PER_SEC;
    1fe0:	0000                	unimp
    1fe2:	1e00                	addi	s0,sp,816
{
    1fe4:	00000317          	auipc	t1,0x0
    secs_ret retval = ((secs_ret)ticks) / (secs_ret)EE_TICKS_PER_SEC;
    1fe8:	1df8                	addi	a4,sp,764
    1fea:	0000                	unimp
}
    1fec:	02c8                	addi	a0,sp,324
    1fee:	0000                	unimp
    1ff0:	a001                	j	1ff0 <time_in_secs+0x14>
    1ff2:	0005                	c.nop	1
    1ff4:	0008                	0x8
    1ff6:	2200                	fld	fs0,0(a2)
    p->portable_id = 1;
    1ff8:	0000033b          	0x33b
    1ffc:	301f 0003 8c00      	0x8c000003301f
}
    2002:	0024                	addi	s1,sp,8
    p->portable_id = 0;
    2004:	1f00                	addi	s0,sp,944
    2006:	0325                	addi	t1,t1,9
}
    2008:	0000                	unimp
    200a:	24ae                	fld	fs1,200(sp)
    size--;
    200c:	0000                	unimp
    200e:	c820                	sw	s0,80(s0)
    while ((total + next + 1) < size)
    2010:	0002                	c.slli64	zero
    2012:	2100                	fld	fs0,0(a0)
{
    2014:	0348                	addi	a0,sp,388
    2016:	0000                	unimp
    while ((total + next + 1) < size)
    2018:	24cd                	jal	22fa <core_state_transition+0x1a6>
    201a:	0000                	unimp
    201c:	5321                	li	t1,-24
    201e:	f8000003          	lb	zero,-128(zero) # ffffff80 <RAM_SIZE+0xfffeff80>
    2022:	0024                	addi	s1,sp,8
    2024:	0000                	unimp
    2026:	1000                	addi	s0,sp,32
{
    2028:	1c1c                	addi	a5,sp,560
    202a:	0000                	unimp
    202c:	00000b43          	fmadd.s	fs6,ft0,ft0,ft0,rne
                buf  = intpat[(seed >> 3) & 0x3];
    2030:	00000813          	li	a6,0
{
    2034:	015b010f          	0x15b010f
        switch (seed & 0x7)
    2038:	0030                	addi	a2,sp,8
    203a:	3410                	fld	fa2,40(s0)
    203c:	001c                	0x1c
    203e:	7b00                	flw	fs0,48(a4)
    ee_u32 total = 0, next = 0, i;
    2040:	0002                	c.slli64	zero
    2042:	3d00                	fld	fs0,56(a0)
        switch (seed & 0x7)
    2044:	0008                	0x8
    2046:	0f00                	addi	s0,sp,912
    2048:	5a01                	li	s4,-32
    204a:	8302                	jr	t1
    204c:	0f00                	addi	s0,sp,912
    204e:	5b01                	li	s6,-32
            *(p + total + i) = ',';
    2050:	7902                	flw	fs2,32(sp)
    2052:	0f00                	addi	s0,sp,912
                buf  = intpat[(seed >> 3) & 0x3];
    2054:	5c01                	li	s8,-32
    2056:	9104                	0x9104
        switch (seed & 0x7)
    2058:	7fb8                	flw	fa4,120(a5)
    205a:	0f06                	slli	t5,t5,0x1
    205c:	5d01                	li	s10,-32
    205e:	9104                	0x9104
    2060:	7fbc                	flw	fa5,120(a5)
    2062:	0006                	c.slli	zero,0x1
    2064:	b410                	fsd	fa2,40(s0)
    2066:	001c                	0x1c
                buf  = floatpat[(seed >> 3) & 0x3];
    2068:	4300                	lw	s0,0(a4)
    206a:	5100000b          	0x5100000b
        switch (seed & 0x7)
    206e:	0008                	0x8
                buf  = floatpat[(seed >> 3) & 0x3];
    2070:	0f00                	addi	s0,sp,912
    2072:	5b01                	li	s6,-32
        switch (seed & 0x7)
    2074:	8902                	jr	s2
    2076:	0000                	unimp
                buf  = floatpat[(seed >> 3) & 0x3];
    2078:	cc10                	sw	a2,24(s0)
    207a:	001c                	0x1c
                break;
    207c:	d000                	sw	s0,32(s0)
    207e:	0001                	nop
                next = 8;
    2080:	7b00                	flw	fs0,48(a4)
    2082:	0008                	0x8
    while ((total + next + 1) < size)
    2084:	0f00                	addi	s0,sp,912
    2086:	5a01                	li	s4,-32
    2088:	8302                	jr	t1
    208a:	0f00                	addi	s0,sp,912
    208c:	5b01                	li	s6,-32
    208e:	7902                	flw	fs2,32(sp)
    2090:	0f00                	addi	s0,sp,912
    2092:	5c01                	li	s8,-32
    2094:	9104                	0x9104
    2096:	7fb8                	flw	fa4,120(a5)
                *(p + total + i) = buf[i];
    2098:	0f06                	slli	t5,t5,0x1
    209a:	5d01                	li	s10,-32
            for (i = 0; i < next; i++)
    209c:	9104                	0x9104
    209e:	7fbc                	flw	fa5,120(a5)
    20a0:	0006                	c.slli	zero,0x1
    20a2:	5410                	lw	a2,40(s0)
                *(p + total + i) = buf[i];
    20a4:	001d                	c.nop	7
    20a6:	4300                	lw	s0,0(a4)
            for (i = 0; i < next; i++)
    20a8:	8f00000b          	0x8f00000b
            *(p + total + i) = ',';
    20ac:	0008                	0x8
    20ae:	0f00                	addi	s0,sp,912
    20b0:	5b01                	li	s6,-32
    20b2:	8502                	jr	a0
    20b4:	0000                	unimp
    20b6:	6c10                	flw	fa2,24(s0)
    20b8:	001d                	c.nop	7
    20ba:	0500                	addi	s0,sp,640
    20bc:	0001                	nop
    20be:	b900                	fsd	fs0,48(a0)
                buf  = intpat[(seed >> 3) & 0x3];
    20c0:	0008                	0x8
    20c2:	0f00                	addi	s0,sp,912
    20c4:	5a01                	li	s4,-32
    20c6:	8302                	jr	t1
            *(p + total + i) = ',';
    20c8:	0f00                	addi	s0,sp,912
    20ca:	5b01                	li	s6,-32
                buf  = intpat[(seed >> 3) & 0x3];
    20cc:	7902                	flw	fs2,32(sp)
    20ce:	0f00                	addi	s0,sp,912
        switch (seed & 0x7)
    20d0:	5c01                	li	s8,-32
    20d2:	9104                	0x9104
                buf  = errpat[(seed >> 3) & 0x3];
    20d4:	7fb8                	flw	fa4,120(a5)
    20d6:	0f06                	slli	t5,t5,0x1
                break;
    20d8:	5d01                	li	s10,-32
    20da:	9104                	0x9104
                buf  = errpat[(seed >> 3) & 0x3];
    20dc:	7fbc                	flw	fa5,120(a5)
    20de:	0006                	c.slli	zero,0x1
    while ((total + next + 1) < size)
    20e0:	f810                	fsw	fa2,48(s0)
    20e2:	001d                	c.nop	7
                buf  = errpat[(seed >> 3) & 0x3];
    20e4:	4300                	lw	s0,0(a4)
    20e6:	cd00000b          	0xcd00000b
                next = 8;
    20ea:	0008                	0x8
    while ((total + next + 1) < size)
    20ec:	0f00                	addi	s0,sp,912
    20ee:	5b01                	li	s6,-32
    while (total < size)
    20f0:	8202                	jr	tp
    20f2:	0000                	unimp
}
    20f4:	8010                	0x8010
    20f6:	001e                	c.slli	zero,0x7
        *(p + total) = 0;
    20f8:	4300                	lw	s0,0(a4)
    20fa:	e000000b          	0xe000000b
    20fe:	0008                	0x8
    2100:	0f00                	addi	s0,sp,912
    2102:	5b01                	li	s6,-32
}
    2104:	3001                	jal	1904 <matrix_mul_matrix+0xe0>
    2106:	1000                	addi	s0,sp,32
        *(p + total) = 0;
    2108:	1ea0                	addi	s0,sp,888
    210a:	0000                	unimp
                buf  = intpat[(seed >> 3) & 0x3];
    210c:	0000027b          	0x27b
                break;
    2110:	0905                	addi	s2,s2,1
    2112:	0000                	unimp
                next = 4;
    2114:	015a010f          	0x15a010f
                break;
    2118:	0f30                	addi	a2,sp,920
    211a:	5b01                	li	s6,-32
                buf  = scipat[(seed >> 3) & 0x3];
    211c:	7902                	flw	fs2,32(sp)
    211e:	0f00                	addi	s0,sp,912
    2120:	5c01                	li	s8,-32
    2122:	8202                	jr	tp
    2124:	0f00                	addi	s0,sp,912
    2126:	5d01                	li	s10,-32
                break;
    2128:	8302                	jr	t1
    212a:	0000                	unimp
                next = 8;
    212c:	ac10                	fsd	fa2,24(s0)
    212e:	001e                	c.slli	zero,0x7
                break;
    2130:	4300                	lw	s0,0(a4)
    2132:	1e00000b          	0x1e00000b
}
    2136:	0009                	c.nop	2
    2138:	0f00                	addi	s0,sp,912
    213a:	5a01                	li	s4,-32
    213c:	3001                	jal	193c <matrix_mul_matrix+0x118>
    213e:	025b010f          	0x25b010f
    ee_u32 total = 0, next = 0, i;
    2142:	0078                	addi	a4,sp,12
        *(p + total) = 0;
    2144:	1000                	addi	s0,sp,32
    2146:	1ec4                	addi	s1,sp,884
    2148:	0000                	unimp
    214a:	01d0                	addi	a2,sp,196
    214c:	0000                	unimp
    214e:	00000943          	fmadd.s	fs2,ft0,ft0,ft0,rne
    2152:	015a010f          	0x15a010f
    ee_u8 *         str = *instr;
    2156:	0f30                	addi	a2,sp,920
{
    2158:	5b01                	li	s6,-32
    215a:	7902                	flw	fs2,32(sp)
    enum CORE_STATE state = CORE_START;
    215c:	0f00                	addi	s0,sp,912
    215e:	5c01                	li	s8,-32
    for (; *str && state != CORE_INVALID; str++)
    2160:	8202                	jr	tp
    2162:	0f00                	addi	s0,sp,912
    2164:	5d01                	li	s10,-32
    2166:	8302                	jr	t1
    2168:	0000                	unimp
    216a:	d010                	sw	a2,32(s0)
        if (NEXT_SYMBOL == ',') /* end of this input */
    216c:	001e                	c.slli	zero,0x7
    216e:	4300                	lw	s0,0(a4)
    for (; *str && state != CORE_INVALID; str++)
    2170:	5c00000b          	0x5c00000b
        if (NEXT_SYMBOL == ',') /* end of this input */
    2174:	0009                	c.nop	2
    2176:	0f00                	addi	s0,sp,912
                transition_count[CORE_START]++;
    2178:	5a01                	li	s4,-32
    217a:	3001                	jal	197a <matrix_mul_matrix_bitextract+0x32>
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    217c:	025b010f          	0x25b010f
    2180:	0078                	addi	a4,sp,12
    2182:	1000                	addi	s0,sp,32
    2184:	1ee8                	addi	a0,sp,892
    2186:	0000                	unimp
                transition_count[CORE_START]++;
    2188:	0105                	addi	sp,sp,1
    218a:	0000                	unimp
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    218c:	0981                	addi	s3,s3,0
    218e:	0000                	unimp
                transition_count[CORE_START]++;
    2190:	015a010f          	0x15a010f
    for (; *str && state != CORE_INVALID; str++)
    2194:	0f30                	addi	a2,sp,920
    2196:	5b01                	li	s6,-32
    2198:	7902                	flw	fs2,32(sp)
    219a:	0f00                	addi	s0,sp,912
            str++;
    219c:	5c01                	li	s8,-32
    219e:	8202                	jr	tp
        if (NEXT_SYMBOL == ',') /* end of this input */
    21a0:	0f00                	addi	s0,sp,912
    21a2:	5d01                	li	s10,-32
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    21a4:	8302                	jr	t1
    21a6:	0000                	unimp
                if (NEXT_SYMBOL == '.')
    21a8:	f40e                	fsw	ft3,40(sp)
    21aa:	001e                	c.slli	zero,0x7
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    21ac:	4300                	lw	s0,0(a4)
    21ae:	0f00000b          	0xf00000b
        if (NEXT_SYMBOL == ',') /* end of this input */
    21b2:	5a01                	li	s4,-32
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    21b4:	3001                	jal	19b4 <matrix_mul_matrix_bitextract+0x6c>
    21b6:	025b010f          	0x25b010f
                if (NEXT_SYMBOL == '.')
    21ba:	0078                	addi	a4,sp,12
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    21bc:	0000                	unimp
    21be:	4b19                	li	s6,6
    for (; *str && state != CORE_INVALID; str++)
    21c0:	0002                	c.slli64	zero
    21c2:	0100                	addi	s0,sp,128
    21c4:	015c                	addi	a5,sp,132
    21c6:	0054                	addi	a3,sp,4
    21c8:	0000                	unimp
    21ca:	1ef8                	addi	a4,sp,892
    21cc:	0000                	unimp
    21ce:	003c                	addi	a5,sp,8
        if (NEXT_SYMBOL == ',') /* end of this input */
    21d0:	0000                	unimp
    21d2:	9c01                	0x9c01
    for (; *str && state != CORE_INVALID; str++)
    21d4:	0a3a                	slli	s4,s4,0xe
    21d6:	0000                	unimp
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    21d8:	0100701b          	0x100701b
    21dc:	1f5c                	addi	a5,sp,948
    21de:	0502                	c.slli64	a0
                if (NEXT_SYMBOL == '.')
    21e0:	0000                	unimp
    21e2:	0000252f          	amoadd.w	a0,zero,(zero)
                    transition_count[CORE_INT]++;
    21e6:	f11a                	fsw	ft6,160(sp)
                    state = CORE_FLOAT;
    21e8:	0002                	c.slli64	zero
    21ea:	0100                	addi	s0,sp,128
                    transition_count[CORE_INT]++;
    21ec:	295c                	fld	fa5,144(a0)
    21ee:	0041                	c.nop	16
    21f0:	0000                	unimp
    21f2:	2550                	fld	fa2,136(a0)
    for (; *str && state != CORE_INVALID; str++)
    21f4:	0000                	unimp
    21f6:	6372631b          	0x6372631b
    21fa:	0100                	addi	s0,sp,128
    21fc:	365c                	fld	fa5,168(a2)
    21fe:	0054                	addi	a3,sp,4
        if (NEXT_SYMBOL == ',') /* end of this input */
    2200:	0000                	unimp
    2202:	2571                	jal	288e <crc16+0x22>
            str++;
    2204:	0000                	unimp
    2206:	4e1c                	lw	a5,24(a2)
        if (NEXT_SYMBOL == ',') /* end of this input */
    2208:	0100                	addi	s0,sp,128
    220a:	0d5e                	slli	s10,s10,0x17
                if (NEXT_SYMBOL == 'E' || NEXT_SYMBOL == 'e')
    220c:	0081                	addi	ra,ra,0
    220e:	0000                	unimp
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    2210:	2592                	fld	fa1,256(sp)
    2212:	0000                	unimp
        if (NEXT_SYMBOL == ',') /* end of this input */
    2214:	431c                	lw	a5,0(a4)
    2216:	0100                	addi	s0,sp,128
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    2218:	0d5f 00f1 0000      	0xf10d5f
                if (NEXT_SYMBOL == 'E' || NEXT_SYMBOL == 'e')
    221e:	000025b3          	sltz	a1,zero
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    2222:	411c                	lw	a5,0(a0)
                if (NEXT_SYMBOL == 'E' || NEXT_SYMBOL == 'e')
    2224:	0100                	addi	s0,sp,128
    2226:	0d60                	addi	s0,sp,668
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    2228:	000000eb          	0xeb
                    transition_count[CORE_FLOAT]++;
    222c:	25d6                	fld	fa1,336(sp)
    222e:	0000                	unimp
    2230:	421c                	lw	a5,0(a2)
    2232:	0100                	addi	s0,sp,128
                    state = CORE_INVALID;
    2234:	0d61                	addi	s10,s10,24
    2236:	000000eb          	0xeb
                    transition_count[CORE_FLOAT]++;
    223a:	25f9                	jal	2908 <cvt+0x8>
    223c:	0000                	unimp
    223e:	761c                	flw	fa5,40(a2)
    *instr = str;
    2240:	6c61                	lui	s8,0x18
    2242:	0100                	addi	s0,sp,128
}
    2244:	0d62                	slli	s10,s10,0x18
    2246:	0099                	addi	ra,ra,6
                else if (NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-')
    2248:	0000                	unimp
    224a:	261c                	fld	fa5,8(a2)
    224c:	0000                	unimp
    224e:	200d                	jal	2270 <core_state_transition+0x11c>
    2250:	001f 0800 0005      	0x50800001f
    2256:	2300                	fld	fs0,0(a4)
                else if (NEXT_SYMBOL == '.')
    2258:	1f34                	addi	a3,sp,952
    225a:	0000                	unimp
    225c:	00000b43          	fmadd.s	fs6,ft0,ft0,ft0,rne
                    transition_count[CORE_INVALID]++;
    2260:	2400                	fld	fs0,8(s0)
    2262:	03b2                	slli	t2,t2,0xc
                transition_count[CORE_START]++;
    2264:	0000                	unimp
    2266:	1588                	addi	a0,sp,736
                    state = CORE_INVALID;
    2268:	0000                	unimp
    226a:	0098                	addi	a4,sp,64
                    transition_count[CORE_INVALID]++;
    226c:	0000                	unimp
    226e:	9c01                	0x9c01
    2270:	0a9d                	addi	s5,s5,7
    2272:	0000                	unimp
    *instr = str;
    2274:	c31f 0003 2f00      	0x2f000003c31f
}
    227a:	0026                	c.slli	zero,0x9
                    transition_count[CORE_INT]++;
    227c:	1f00                	addi	s0,sp,944
    227e:	03cd                	addi	t2,t2,19
    2280:	0000                	unimp
    2282:	00002663          	0x2663
                    state = CORE_INVALID;
    2286:	d725                	beqz	a4,21ee <core_state_transition+0x9a>
                    transition_count[CORE_INT]++;
    2288:	01000003          	lb	zero,16(zero) # 10 <_start>
    228c:	215c                	fld	fa5,128(a0)
    228e:	000003e3          	beqz	zero,2a94 <cvt+0x194>
    *instr = str;
    2292:	0000268f          	0x268f
}
    2296:	ef21                	bnez	a4,22ee <core_state_transition+0x19a>
                transition_count[CORE_START]++;
    2298:	d1000003          	lb	zero,-752(zero) # fffffd10 <RAM_SIZE+0xfffefd10>
    for (; *str && state != CORE_INVALID; str++)
    229c:	0026                	c.slli	zero,0x9
    229e:	2100                	fld	fs0,0(a0)
    22a0:	000003fb          	0x3fb
            str++;
    22a4:	271d                	jal	29ca <cvt+0xca>
    22a6:	0000                	unimp
        if (NEXT_SYMBOL == ',') /* end of this input */
    22a8:	0721                	addi	a4,a4,8
    22aa:	0004                	0x4
                    transition_count[CORE_S1]++;
    22ac:	5300                	lw	s0,32(a4)
    22ae:	21000027          	0x21000027
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    22b2:	00000413          	li	s0,0
    22b6:	2794                	fld	fa3,8(a5)
    22b8:	0000                	unimp
    22ba:	1d21                	addi	s10,s10,-24
                    transition_count[CORE_S1]++;
    22bc:	0004                	0x4
    22be:	bf00                	fsd	fs0,56(a4)
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    22c0:	00000027          	vse8.v	v0,(zero),v0.t
                else if (NEXT_SYMBOL == '.')
    22c4:	5f24                	lw	s1,120(a4)
    22c6:	20000003          	lb	zero,512(zero) # 200 <calc_func+0xe0>
    22ca:	0016                	c.slli	zero,0x5
                    transition_count[CORE_S1]++;
    22cc:	d800                	sw	s0,48(s0)
    22ce:	0000                	unimp
                    state = CORE_INVALID;
    22d0:	0100                	addi	s0,sp,128
    22d2:	f09c                	fsw	fa5,32(s1)
    *instr = str;
    22d4:	000a                	c.slli	zero,0x2
    22d6:	1f00                	addi	s0,sp,944
}
    22d8:	036d                	addi	t1,t1,27
    22da:	0000                	unimp
                    transition_count[CORE_S1]++;
    22dc:	000027d3          	fadd.s	fa5,ft0,ft0,rdn
    for (; *str && state != CORE_INVALID; str++)
    22e0:	781f 0003 0a00      	0xa000003781f
    22e6:	0028                	addi	a0,sp,8
        if (NEXT_SYMBOL == ',') /* end of this input */
    22e8:	1f00                	addi	s0,sp,944
    22ea:	00000383          	lb	t2,0(zero) # 0 <RAM_START_ADDRESS>
            str++;
    22ee:	2841                	jal	237e <core_state_transition+0x22a>
        if (NEXT_SYMBOL == ',') /* end of this input */
    22f0:	0000                	unimp
    22f2:	8e1f 0003 6d00      	0x6d0000038e1f
    for (; *str && state != CORE_INVALID; str++)
    22f8:	0028                	addi	a0,sp,8
    22fa:	2100                	fld	fs0,0(a0)
    22fc:	0000039b          	0x39b
                    transition_count[CORE_FLOAT]++;
    2300:	2899                	jal	2356 <core_state_transition+0x202>
    2302:	0000                	unimp
    2304:	a621                	j	260c <core_bench_state+0x1a0>
    2306:	c4000003          	lb	zero,-960(zero) # fffffc40 <RAM_SIZE+0xfffefc40>
    230a:	0028                	addi	a0,sp,8
    for (; *str && state != CORE_INVALID; str++)
    230c:	0d00                	addi	s0,sp,656
    230e:	16a0                	addi	s0,sp,872
    2310:	0000                	unimp
    2312:	00000b2f          	vamoaddei8.v	zero,(zero),v0,v22,v0.t
        if (NEXT_SYMBOL == ',') /* end of this input */
    2316:	2400                	fld	fs0,8(s0)
            str++;
    2318:	00000317          	auipc	t1,0x0
        if (NEXT_SYMBOL == ',') /* end of this input */
    231c:	16f8                	addi	a4,sp,876
    231e:	0000                	unimp
                    transition_count[CORE_S2]++;
    2320:	0050                	addi	a2,sp,4
    2322:	0000                	unimp
                if (NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-')
    2324:	9c01                	0x9c01
    2326:	00000b2f          	vamoaddei8.v	zero,(zero),v0,v22,v0.t
    232a:	2525                	jal	2952 <cvt+0x52>
                    transition_count[CORE_S2]++;
    232c:	01000003          	lb	zero,16(zero) # 10 <_start>
    2330:	1f5a                	slli	t5,t5,0x36
    2332:	0330                	addi	a2,sp,392
                if (NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-')
    2334:	0000                	unimp
    2336:	28d8                	fld	fa4,144(s1)
                    state = CORE_INVALID;
    2338:	0000                	unimp
    233a:	3b1f 0003 f900      	0xf90000033b1f
}
    2340:	0028                	addi	a0,sp,8
    2342:	2100                	fld	fs0,0(a0)
    for (; *str && state != CORE_INVALID; str++)
    2344:	0348                	addi	a0,sp,388
    2346:	0000                	unimp
    2348:	291a                	fld	fs2,384(sp)
    234a:	0000                	unimp
            str++;
    234c:	5321                	li	t1,-24
    234e:	39000003          	lb	zero,912(zero) # 390 <core_list_find+0x34>
        if (NEXT_SYMBOL == ',') /* end of this input */
    2352:	0029                	c.nop	10
                    transition_count[CORE_EXPONENT]++;
    2354:	0000                	unimp
    2356:	d226                	sw	s1,36(sp)
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    2358:	d2000003          	lb	zero,-736(zero) # fffffd20 <RAM_SIZE+0xfffefd20>
    235c:	27000003          	lb	zero,624(zero) # 270 <cmp_complex+0x1c>
                    transition_count[CORE_EXPONENT]++;
    2360:	05ae                	slli	a1,a1,0xb
    2362:	0000                	unimp
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    2364:	05a4                	addi	s1,sp,712
    2366:	0000                	unimp
                    transition_count[CORE_EXPONENT]++;
    2368:	0004                	0x4
    236a:	fb28                	fsw	fa0,112(a4)
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    236c:	0000                	unimp
    236e:	fb00                	fsw	fs0,48(a4)
    for (; *str && state != CORE_INVALID; str++)
    2370:	0000                	unimp
    2372:	0300                	addi	s0,sp,384
    2374:	0300084b          	fnmsub.d	fa6,ft0,fa6,ft0,rne
            str++;
    2378:	04000003          	lb	zero,64(zero) # 40 <_start+0x30>
        if (NEXT_SYMBOL == ',') /* end of this input */
    237c:	3d00                	fld	fs0,56(a0)
    237e:	04000007          	vluxei8.v	v0,(zero),v0,v0.t
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    2382:	8201                	c.srli64	a2
        if (NEXT_SYMBOL == ',') /* end of this input */
    2384:	0000                	unimp
    2386:	0c00                	addi	s0,sp,528
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    2388:	0000066f          	jal	a2,2388 <core_state_transition+0x234>
    238c:	0019                	c.nop	6
    238e:	0000                	unimp
    2390:	1f34                	addi	a3,sp,952
    2392:	0000                	unimp
                    transition_count[CORE_INVALID]++;
    2394:	00d8                	addi	a4,sp,68
    2396:	0000                	unimp
    2398:	38fc                	fld	fa5,240(s1)
    239a:	0000                	unimp
                    state = CORE_INVALID;
    239c:	0402                	c.slli64	s0
    239e:	0008c707          	flq	fa4,0(a7)
                    transition_count[CORE_INVALID]++;
    23a2:	0300                	addi	s0,sp,384
    23a4:	0504                	addi	s1,sp,640
    23a6:	6e69                	lui	t3,0x1a
    for (; *str && state != CORE_INVALID; str++)
    23a8:	0074                	addi	a3,sp,12
    23aa:	0802                	c.slli64	a6
    23ac:	bb05                	j	20dc <core_init_state+0xd0>
    23ae:	0001                	nop
    23b0:	0200                	addi	s0,sp,256
    23b2:	0410                	addi	a2,sp,512
    23b4:	00001187          	flh	ft3,0(zero) # 0 <RAM_START_ADDRESS>
    23b8:	0202                	c.slli64	tp
    23ba:	c905                	beqz	a0,23ea <core_state_transition+0x296>
        if (NEXT_SYMBOL == ',') /* end of this input */
    23bc:	0000                	unimp
    23be:	0200                	addi	s0,sp,256
    for (; *str && state != CORE_INVALID; str++)
    23c0:	0702                	c.slli64	a4
    23c2:	02ba                	slli	t0,t0,0xe
    23c4:	0000                	unimp
    23c6:	1804                	addi	s1,sp,48
    23c8:	0001                	nop
    23ca:	0200                	addi	s0,sp,256
    23cc:	1861                	addi	a6,a6,-8
    23ce:	002c                	addi	a1,sp,8
    23d0:	0000                	unimp
    23d2:	4f05                	li	t5,1
    23d4:	0000                	unimp
    23d6:	0200                	addi	s0,sp,256
        if (NEXT_SYMBOL == ',') /* end of this input */
    23d8:	0408                	addi	a0,sp,512
    23da:	118c                	addi	a1,sp,224
    for (; *str && state != CORE_INVALID; str++)
    23dc:	0000                	unimp
    23de:	f504                	fsw	fs1,40(a0)
    23e0:	0000                	unimp
    23e2:	0200                	addi	s0,sp,256
                transition_count[CORE_START]++;
    23e4:	00731863          	bne	t1,t2,23f4 <core_state_transition+0x2a0>
    for (; *str && state != CORE_INVALID; str++)
    23e8:	0000                	unimp
    23ea:	0102                	c.slli64	sp
    23ec:	6208                	flw	fa0,0(a2)
    23ee:	0002                	c.slli64	zero
            str++;
    23f0:	0400                	addi	s0,sp,512
    23f2:	000003b3          	add	t2,zero,zero
        if (NEXT_SYMBOL == ',') /* end of this input */
    23f6:	6402                	flw	fs0,0(sp)
    for (; *str && state != CORE_INVALID; str++)
    23f8:	2518                	fld	fa4,8(a0)
    23fa:	0000                	unimp
    23fc:	0600                	addi	s0,sp,768
    23fe:	007a                	c.slli	zero,0x1e
                    transition_count[CORE_S1]++;
    2400:	0000                	unimp
    2402:	6204                	flw	fs1,0(a2)
    for (; *str && state != CORE_INVALID; str++)
    2404:	0005                	c.nop	1
    2406:	0200                	addi	s0,sp,256
    2408:	1072                	c.slli	zero,0x3c
    240a:	007a                	c.slli	zero,0x1e
        if (NEXT_SYMBOL == ',') /* end of this input */
    240c:	0000                	unimp
    240e:	00048d07          	vle8.v	v26,(s1),v0.t
            str++;
    2412:	0200                	addi	s0,sp,256
        if (NEXT_SYMBOL == ',') /* end of this input */
    2414:	0fc2                	slli	t6,t6,0x10
    2416:	007a                	c.slli	zero,0x1e
    for (; *str && state != CORE_INVALID; str++)
    2418:	0000                	unimp
    241a:	4b08                	lw	a0,16(a4)
    241c:	01000003          	lb	zero,16(zero) # 10 <_start>
    2420:	c402                	sw	zero,8(sp)
    2422:	be10                	fsd	fa2,56(a2)
        if (NEXT_SYMBOL == ',') /* end of this input */
    2424:	0000                	unimp
    2426:	0900                	addi	s0,sp,144
            break;
    2428:	000001af          	vamoaddei8.v	zero,(zero),v0,v3,v0.t
    for (; *str && state != CORE_INVALID; str++)
    242c:	c602                	sw	zero,12(sp)
    242e:	0000670b          	0x670b
    2432:	0000                	unimp
    2434:	0400                	addi	s0,sp,512
    2436:	03ba                	slli	t2,t2,0xe
    2438:	0000                	unimp
    243a:	c702                	sw	zero,140(sp)
                    state = CORE_S2;
    243c:	0000a303          	lw	t1,0(ra)
    2440:	0400                	addi	s0,sp,512
    2442:	04cd                	addi	s1,s1,19
                    state = CORE_EXPONENT;
    2444:	0000                	unimp
    2446:	7a103903          	0x7a103903
    244a:	0000                	unimp
                    state = CORE_S1;
    244c:	0a00                	addi	s0,sp,272
    244e:	06d2                	slli	a3,a3,0x14
    2450:	0000                	unimp
    2452:	1b01                	addi	s6,s6,-32
    for (; *str && state != CORE_INVALID; str++)
    2454:	5b11                	li	s6,-28
    2456:	0000                	unimp
        if (NEXT_SYMBOL == ',') /* end of this input */
    2458:	0500                	addi	s0,sp,640
    245a:	00701403          	lh	s0,7(zero) # 7 <RAM_START_ADDRESS+0x7>
    245e:	0a00                	addi	s0,sp,272
    for (; *str && state != CORE_INVALID; str++)
    2460:	000006c3          	fmadd.s	fa3,ft0,ft0,ft0,rne
        if (NEXT_SYMBOL == ',') /* end of this input */
    2464:	1c01                	addi	s8,s8,-32
    2466:	5b11                	li	s6,-28
    2468:	0000                	unimp
    246a:	0500                	addi	s0,sp,640
{
    246c:	00701003          	lh	zero,7(zero) # 7 <RAM_START_ADDRESS+0x7>
    2470:	0a00                	addi	s0,sp,272
    2472:	0650                	addi	a2,sp,772
    2474:	0000                	unimp
    2476:	1d01                	addi	s10,s10,-32
    2478:	5b11                	li	s6,-28
    247a:	0000                	unimp
    247c:	0500                	addi	s0,sp,640
    247e:	006bb403          	0x6bb403
    2482:	0a00                	addi	s0,sp,272
    2484:	06a6                	slli	a3,a3,0x9
    2486:	0000                	unimp
    2488:	2401                	jal	2688 <get_seed_32+0x40>
    248a:	5b11                	li	s6,-28
    248c:	0000                	unimp
    248e:	0500                	addi	s0,sp,640
    2490:	00700c03          	lb	s8,7(zero) # 7 <RAM_START_ADDRESS+0x7>
    2494:	0a00                	addi	s0,sp,272
    2496:	06e1                	addi	a3,a3,24
    while (*p != 0)
    2498:	0000                	unimp
    249a:	2501                	jal	2a9a <cvt+0x19a>
    ee_u8 *p = memblock;
    249c:	5b11                	li	s6,-28
    249e:	0000                	unimp
        final_counts[i] = track_counts[i] = 0;
    24a0:	0500                	addi	s0,sp,640
    24a2:	00700803          	lb	a6,7(zero) # 7 <RAM_START_ADDRESS+0x7>
    24a6:	0b00                	addi	s0,sp,400
    24a8:	068e                	slli	a3,a3,0x3
    24aa:	0000                	unimp
    24ac:	4201                	li	tp,0
    24ae:	7a15                	lui	s4,0xfffe5
    24b0:	0000                	unimp
    24b2:	0500                	addi	s0,sp,640
    24b4:	00700403          	lb	s0,7(zero) # 7 <RAM_START_ADDRESS+0x7>
    24b8:	0b00                	addi	s0,sp,400
    24ba:	06b5                	addi	a3,a3,13
    24bc:	0000                	unimp
    24be:	4201                	li	tp,0
    24c0:	7a25                	lui	s4,0xfffe9
    24c2:	0000                	unimp
    24c4:	0500                	addi	s0,sp,640
    24c6:	00700003          	lb	zero,7(zero) # 7 <RAM_START_ADDRESS+0x7>
    24ca:	0c00                	addi	s0,sp,528
    24cc:	00000097          	auipc	ra,0x0
    24d0:	7c01                	lui	s8,0xfffe0
    24d2:	0508                	addi	a0,sp,640
    24d4:	006bb003          	0x6bb003
    24d8:	0d00                	addi	s0,sp,656
    24da:	0470                	addi	a2,sp,524
    24dc:	0000                	unimp
    24de:	9501                	srai	a0,a0,0x20
    24e0:	0401                	addi	s0,s0,0
    24e2:	0020                	addi	s0,sp,8
{
    24e4:	0800                	addi	s0,sp,16
    24e6:	0000                	unimp
    24e8:	0100                	addi	s0,sp,128
    24ea:	859c                	0x859c
    24ec:	0001                	nop
    24ee:	0e00                	addi	s0,sp,784
    24f0:	0070                	addi	a2,sp,12
    24f2:	9501                	srai	a0,a0,0x20
    24f4:	851e                	mv	a0,t2
    24f6:	0001                	nop
    while (*p != 0)
    24f8:	0100                	addi	s0,sp,128
    24fa:	005a                	c.slli	zero,0x16
    24fc:	00be040f          	0xbe040f
        enum CORE_STATE fstate = core_state_transition(&p, track_counts);
    2500:	0000                	unimp
    2502:	2d0d                	jal	2b34 <cvt+0x234>
    2504:	0004                	0x4
    2506:	0100                	addi	s0,sp,128
    2508:	1ff80183          	lb	gp,511(a6) # 9c943 <RAM_SIZE+0x8c943>
        final_counts[fstate]++;
    250c:	0000                	unimp
    250e:	000c                	0xc
    2510:	0000                	unimp
    2512:	9c01                	0x9c01
    2514:	01ca                	slli	gp,gp,0x12
    2516:	0000                	unimp
    while (*p != 0)
    2518:	700e                	flw	ft0,224(sp)
    251a:	0100                	addi	s0,sp,128
        final_counts[fstate]++;
    251c:	01851e83          	lh	t4,24(a0)
    while (*p != 0)
    2520:	0000                	unimp
    2522:	5a01                	li	s4,-32
        final_counts[fstate]++;
    2524:	5510                	lw	a2,40(a0)
    2526:	0004                	0x4
    2528:	0100                	addi	s0,sp,128
    252a:	01ca2683          	lw	a3,28(s4) # fffe901c <RAM_SIZE+0xfffd901c>
    while (*p != 0)
    252e:	0000                	unimp
    p = memblock;
    2530:	5b01                	li	s6,-32
    2532:	e810                	fsw	fa2,16(s0)
    while (p < (memblock + blksize))
    2534:	0004                	0x4
    2536:	0100                	addi	s0,sp,128
    while (*p != 0)
    2538:	01d03283          	0x1d03283
    while (p < (memblock + blksize))
    253c:	0000                	unimp
    253e:	5c01                	li	s8,-32
        p += step;
    2540:	0f00                	addi	s0,sp,912
    2542:	2c04                	fld	fs1,24(s0)
        if (*p != ',')
    2544:	0000                	unimp
    2546:	0f00                	addi	s0,sp,912
    2548:	d604                	sw	s1,40(a2)
    254a:	0001                	nop
    254c:	0f00                	addi	s0,sp,912
    254e:	dc04                	sw	s1,56(s0)
            *p ^= (ee_u8)seed1;
    2550:	0001                	nop
    2552:	0200                	addi	s0,sp,256
        if (*p != ',')
    2554:	0801                	addi	a6,a6,0
    2556:	0000026b          	0x26b
            *p ^= (ee_u8)seed1;
    255a:	0f11                	addi	t5,t5,4
        p += step;
    255c:	0004                	0x4
    255e:	0100                	addi	s0,sp,128
    2560:	0176                	slli	sp,sp,0x1d
    2562:	00ca                	slli	ra,ra,0x12
    2564:	0000                	unimp
    2566:	1fdc                	addi	a5,sp,1012
    while (p < (memblock + blksize))
    2568:	0000                	unimp
    256a:	001c                	0x1c
    while (*p != 0)
    256c:	0000                	unimp
    256e:	9c01                	0x9c01
    p = memblock;
    2570:	00000227          	vse8.v	v4,(zero),v0.t
    while (*p != 0)
    2574:	4212                	lw	tp,4(sp)
    2576:	0006                	c.slli	zero,0x1
    2578:	0100                	addi	s0,sp,128
    257a:	1976                	slli	s2,s2,0x3d
        enum CORE_STATE fstate = core_state_transition(&p, track_counts);
    257c:	0000008b          	0x8b
    2580:	294d                	jal	2a32 <cvt+0x132>
    2582:	0000                	unimp
    2584:	00013213          	sltiu	tp,sp,0
        final_counts[fstate]++;
    2588:	0100                	addi	s0,sp,128
    258a:	0e78                	addi	a4,sp,796
    258c:	00ca                	slli	ra,ra,0x12
    258e:	0000                	unimp
    2590:	296e                	fld	fs2,216(sp)
    2592:	0000                	unimp
    while (*p != 0)
    2594:	ec14                	fsw	fa3,24(s0)
    2596:	001f fd00 0002      	0x2fd00001f
    259c:	0000                	unimp
    259e:	d611                	beqz	a2,24aa <core_bench_state+0x3e>
        final_counts[fstate]++;
    25a0:	0004                	0x4
    25a2:	0100                	addi	s0,sp,128
    25a4:	0168                	addi	a0,sp,140
    25a6:	0000008b          	0x8b
    while (*p != 0)
    25aa:	1fcc                	addi	a1,sp,1012
    p = memblock;
    25ac:	0000                	unimp
    25ae:	0010                	0x10
    while (p < (memblock + blksize))
    25b0:	0000                	unimp
    25b2:	9c01                	0x9c01
        if (*p != ',')
    25b4:	0252                	slli	tp,tp,0x14
    25b6:	0000                	unimp
    25b8:	00064813          	xori	a6,a2,0
            *p ^= (ee_u8)seed2;
    25bc:	0100                	addi	s0,sp,128
    25be:	106a                	c.slli	zero,0x3a
        if (*p != ',')
    25c0:	0000008b          	0x8b
            *p ^= (ee_u8)seed2;
    25c4:	29a5                	jal	2a3c <cvt+0x13c>
    25c6:	0000                	unimp
        p += step;
    25c8:	0d00                	addi	s0,sp,656
    25ca:	045a                	slli	s0,s0,0x16
    25cc:	0000                	unimp
    25ce:	5a01                	li	s4,-32
    25d0:	9801                	andi	s0,s0,-32
    25d2:	001f 3400 0000      	0x3400001f
    while (p < (memblock + blksize))
    25d8:	0100                	addi	s0,sp,128
    25da:	849c                	0x849c
    25dc:	0002                	c.slli64	zero
    25de:	1500                	addi	s0,sp,672
        crc = crcu32(final_counts[i], crc);
    25e0:	02b6                	slli	t0,t0,0xd
    25e2:	0000                	unimp
    25e4:	1f98                	addi	a4,sp,1008
    25e6:	0000                	unimp
    for (i = 0; i < NUM_CORE_STATES; i++)
    25e8:	002c                	addi	a1,sp,8
    25ea:	0000                	unimp
        crc = crcu32(final_counts[i], crc);
    25ec:	5c01                	li	s8,-32
    25ee:	1605                	addi	a2,a2,-31
    25f0:	000002c7          	fmsub.s	ft5,ft0,ft0,ft0,rne
        crc = crcu32(track_counts[i], crc);
    25f4:	f5b6fdef          	jal	s11,fff7254e <RAM_SIZE+0xfff6254e>
    for (i = 0; i < NUM_CORE_STATES; i++)
    25f8:	007d                	c.nop	31
    25fa:	0d00                	addi	s0,sp,656
        crc = crcu32(track_counts[i], crc);
    25fc:	04fe                	slli	s1,s1,0x1f
    25fe:	0000                	unimp
    2600:	4d01                	li	s10,0
    2602:	6401                	0x6401
    for (i = 0; i < NUM_CORE_STATES; i++)
    2604:	001f 3400 0000      	0x3400001f
}
    260a:	0100                	addi	s0,sp,128
    260c:	b69c                	fsd	fa5,40(a3)
    260e:	0002                	c.slli64	zero
    2610:	1500                	addi	s0,sp,672
    2612:	02b6                	slli	t0,t0,0xd
    2614:	0000                	unimp
    2616:	1f64                	addi	s1,sp,956
    2618:	0000                	unimp
    261a:	002c                	addi	a1,sp,8
    261c:	0000                	unimp
    261e:	4f01                	li	t5,0
    2620:	1605                	addi	a2,a2,-31
    2622:	000002c7          	fmsub.s	ft5,ft0,ft0,ft0,rne
    2626:	f5b6fdef          	jal	s11,fff72580 <RAM_SIZE+0xfff62580>
    262a:	007d                	c.nop	31
    262c:	1700                	addi	s0,sp,928
    262e:	065f 0000 2e01      	0x2e010000065f
    while (p < (memblock + blksize))
    2634:	7a01                	lui	s4,0xfffe0
    2636:	0000                	unimp
    2638:	0100                	addi	s0,sp,128
    263a:	02d4                	addi	a3,sp,324
    263c:	0000                	unimp
    263e:	9d18                	0x9d18
    while (*p != 0)
    2640:	0006                	c.slli	zero,0x1
    2642:	0100                	addi	s0,sp,128
    2644:	1d30                	addi	a2,sp,696
    2646:	02da                	slli	t0,t0,0x16
    switch (i)
    2648:	0000                	unimp
    264a:	0f00                	addi	s0,sp,912
    264c:	8604                	0x8604
    264e:	0000                	unimp
    2650:	0600                	addi	s0,sp,768
    2652:	02d4                	addi	a3,sp,324
    2654:	0000                	unimp
    2656:	b619                	j	215c <core_state_transition+0x8>
    2658:	0002                	c.slli64	zero
    265a:	3400                	fld	fs0,40(s0)
    265c:	001f 3000 0000      	0x3000001f
    2662:	0100                	addi	s0,sp,128
    2664:	fd9c                	fsw	fa5,56(a1)
    2666:	0002                	c.slli64	zero
            retval = seed5_volatile;
    2668:	1600                	addi	s0,sp,800
    266a:	000002c7          	fmsub.s	ft5,ft0,ft0,ft0,rne
            break;
    266e:	f5b6fdef          	jal	s11,fff725c8 <RAM_SIZE+0xfff625c8>
            retval = seed1_volatile;
    2672:	007d                	c.nop	31
            break;
    2674:	921a                	add	tp,tp,t1
    2676:	92000003          	lb	zero,-1760(zero) # fffff920 <RAM_SIZE+0xfffef920>
            retval = seed2_volatile;
    267a:	00000003          	lb	zero,0(zero) # 0 <RAM_START_ADDRESS>
            break;
    267e:	04e2                	slli	s1,s1,0x18
            retval = seed3_volatile;
    2680:	0000                	unimp
    2682:	0004                	0x4
            break;
    2684:	000008db          	0x8db
            retval = seed4_volatile;
    2688:	0104                	addi	s1,sp,128
    268a:	0082                	c.slli64	ra
            break;
    268c:	0000                	unimp
    268e:	990c                	0x990c
{
    2690:	19000007          	vlse128.v	v0,(zero),a6,v0.t
}
    2694:	0000                	unimp
    2696:	0c00                	addi	s0,sp,528
{
    2698:	0020                	addi	s0,sp,8
    269a:	3c00                	fld	fs0,56(s0)
    269c:	0006                	c.slli	zero,0x1
    269e:	a700                	fsd	fs0,8(a4)
            crc |= 0x8000;
    26a0:	003a                	c.slli	zero,0xe
    26a2:	0200                	addi	s0,sp,256
{
    26a4:	0504                	addi	s1,sp,640
    26a6:	6e69                	lui	t3,0x1a
            crc |= 0x8000;
    26a8:	0074                	addi	a3,sp,12
    26aa:	c7070403          	lb	s0,-912(a4) # 2c70 <cvt+0x370>
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    26ae:	0008                	0x8
    for (i = 0; i < 8; i++)
    26b0:	0300                	addi	s0,sp,384
    26b2:	0508                	addi	a0,sp,640
    26b4:	000001bb          	0x1bb
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    26b8:	87041003          	lh	zero,-1936(s0) # 706d847a <RAM_SIZE+0x706c847a>
    for (i = 0; i < 8; i++)
    26bc:	0011                	c.nop	4
    26be:	0400                	addi	s0,sp,512
            crc |= 0x8000;
    26c0:	00000303          	lb	t1,0(zero) # 0 <RAM_START_ADDRESS>
        data >>= 1;
    26c4:	5f02                	lw	t5,32(sp)
    26c6:	4d18                	lw	a4,24(a0)
        if (x16 == 1)
    26c8:	0000                	unimp
    26ca:	0300                	addi	s0,sp,384
            crc |= 0x8000;
    26cc:	0502                	c.slli64	a0
    26ce:	00c9                	addi	ra,ra,18
    26d0:	0000                	unimp
    26d2:	3504                	fld	fs1,40(a0)
    for (i = 0; i < 8; i++)
    26d4:	0002                	c.slli64	zero
    26d6:	0200                	addi	s0,sp,256
}
    26d8:	1860                	addi	s0,sp,60
    26da:	0060                	addi	s0,sp,12
{
    26dc:	0000                	unimp
    26de:	ba070203          	lb	tp,-1120(a4)
            crc |= 0x8000;
    26e2:	0002                	c.slli64	zero
{
    26e4:	0300                	addi	s0,sp,384
    26e6:	0408                	addi	a0,sp,512
    crc = crcu8((ee_u8)(newval), crc);
    26e8:	118c                	addi	a1,sp,224
    26ea:	0000                	unimp
    26ec:	f504                	fsw	fs1,40(a0)
    26ee:	0000                	unimp
            crc |= 0x8000;
    26f0:	0200                	addi	s0,sp,256
    26f2:	007a1863          	bne	s4,t2,2702 <crcu16+0x26>
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    26f6:	0000                	unimp
    for (i = 0; i < 8; i++)
    26f8:	62080103          	lb	sp,1568(a6)
        crc >>= 1;
    26fc:	0002                	c.slli64	zero
    26fe:	0400                	addi	s0,sp,512
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    2700:	000003b3          	add	t2,zero,zero
    for (i = 0; i < 8; i++)
    2704:	6402                	flw	fs0,0(sp)
    2706:	2c18                	fld	fa4,24(s0)
            crc |= 0x8000;
    2708:	0000                	unimp
    270a:	0500                	addi	s0,sp,640
        data >>= 1;
    270c:	06f0                	addi	a2,sp,844
    270e:	0000                	unimp
        if (x16 == 1)
    2710:	002c0407          	0x2c0407
            crc |= 0x8000;
    2714:	0000                	unimp
    2716:	d60e7b03          	0xd60e7b03
    271a:	0000                	unimp
    for (i = 0; i < 8; i++)
    271c:	0600                	addi	s0,sp,768
    271e:	0780                	addi	s0,sp,960
            crc |= 0x8000;
    2720:	0000                	unimp
    2722:	0600                	addi	s0,sp,768
    crc = crcu8((ee_u8)((newval) >> 8), crc);
    2724:	000007b7          	lui	a5,0x0
    2728:	0601                	addi	a2,a2,0
    272a:	07f6                	slli	a5,a5,0x1d
            crc |= 0x8000;
    272c:	0000                	unimp
    272e:	0602                	c.slli64	a2
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    2730:	07fe                	slli	a5,a5,0x1f
    2732:	0000                	unimp
    for (i = 0; i < 8; i++)
    2734:	07770603          	lb	a2,119(a4)
    2738:	0000                	unimp
    273a:	0604                	addi	s1,sp,768
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    273c:	000007cf          	fnmadd.s	fa5,ft0,ft0,ft0,rne
    for (i = 0; i < 8; i++)
    2740:	0605                	addi	a2,a2,1
    2742:	00000763          	beqz	zero,2750 <crcu16+0x74>
            crc |= 0x8000;
    2746:	0606                	slli	a2,a2,0x1
        data >>= 1;
    2748:	0728                	addi	a0,sp,904
    274a:	0000                	unimp
        if (x16 == 1)
    274c:	07e60607          	vluxei8.v	v12,(a2),v30
            crc |= 0x8000;
    2750:	0000                	unimp
    2752:	0008                	0x8
    2754:	0000e607          	vle32.v	v12,(ra),v0.t
    for (i = 0; i < 8; i++)
    2758:	e600                	fsw	fs0,8(a2)
    275a:	0000                	unimp
}
    275c:	0800                	addi	s0,sp,16
    275e:	002c                	addi	a1,sp,8
{
    2760:	0000                	unimp
    2762:	04090003          	lb	zero,64(s2) # 1007c7a <RAM_SIZE+0xff7c7a>
    return crcu16((ee_u16)newval, crc);
    2766:	006e                	c.slli	zero,0x1b
            crc |= 0x8000;
    2768:	0000                	unimp
    276a:	210a                	fld	ft2,128(sp)
{
    276c:	01000007          	vle8ff.v	v0,(zero),v0.t
    return crcu16((ee_u16)newval, crc);
    2770:	0f72                	slli	t5,t5,0x1c
    2772:	00d6                	slli	ra,ra,0x15
    crc = crcu8((ee_u8)(newval), crc);
    2774:	0000                	unimp
    2776:	0305                	addi	t1,t1,1
    2778:	6750                	flw	fa2,12(a4)
    277a:	0000                	unimp
            crc |= 0x8000;
    277c:	110a                	slli	sp,sp,0x22
    277e:	01000007          	vle8ff.v	v0,(zero),v0.t
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    2782:	0f74                	addi	a3,sp,924
    for (i = 0; i < 8; i++)
    2784:	00d6                	slli	ra,ra,0x15
    2786:	0000                	unimp
        crc >>= 1;
    2788:	0305                	addi	t1,t1,1
    278a:	6760                	flw	fs0,76(a4)
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    278c:	0000                	unimp
    278e:	060a                	slli	a2,a2,0x2
    for (i = 0; i < 8; i++)
    2790:	0008                	0x8
    2792:	0100                	addi	s0,sp,128
            crc |= 0x8000;
    2794:	0f78                	addi	a4,sp,924
    2796:	00d6                	slli	ra,ra,0x15
        data >>= 1;
    2798:	0000                	unimp
    279a:	0305                	addi	t1,t1,1
        if (x16 == 1)
    279c:	6770                	flw	fa2,76(a4)
    279e:	0000                	unimp
            crc |= 0x8000;
    27a0:	920a                	add	tp,tp,sp
    27a2:	01000007          	vle8ff.v	v0,(zero),v0.t
    27a6:	0f7c                	addi	a5,sp,924
    for (i = 0; i < 8; i++)
    27a8:	00d6                	slli	ra,ra,0x15
    27aa:	0000                	unimp
            crc |= 0x8000;
    27ac:	0305                	addi	t1,t1,1
    27ae:	6780                	flw	fs0,8(a5)
    crc = crcu8((ee_u8)((newval) >> 8), crc);
    27b0:	0000                	unimp
    27b2:	0006fb0b          	0x6fb0b
    27b6:	0100                	addi	s0,sp,128
            crc |= 0x8000;
    27b8:	01d9                	addi	gp,gp,22
    27ba:	008d                	addi	ra,ra,3
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    27bc:	0000                	unimp
    27be:	2154                	fld	fa3,128(a0)
    for (i = 0; i < 8; i++)
    27c0:	0000                	unimp
    27c2:	0318                	addi	a4,sp,384
    27c4:	0000                	unimp
    27c6:	9c01                	0x9c01
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    27c8:	000002a7          	vse8.v	v5,(zero),v0.t
    for (i = 0; i < 8; i++)
    27cc:	710c                	flw	fa1,32(a0)
    27ce:	01000007          	vle8ff.v	v0,(zero),v0.t
            crc |= 0x8000;
    27d2:	1fd9                	addi	t6,t6,-10
        data >>= 1;
    27d4:	000002a7          	vse8.v	v5,(zero),v0.t
        if (x16 == 1)
    27d8:	29d0                	fld	fa2,144(a1)
    27da:	0000                	unimp
            crc |= 0x8000;
    27dc:	520d                	li	tp,-29
    27de:	01000007          	vle8ff.v	v0,(zero),v0.t
    27e2:	2ed9                	jal	2bb8 <cvt+0x2b8>
    for (i = 0; i < 8; i++)
    27e4:	02ad                	addi	t0,t0,11
    27e6:	0000                	unimp
    crc = crc16((ee_s16)(newval >> 16), crc);
    27e8:	5b01                	li	s6,-32
    27ea:	730e                	flw	ft6,224(sp)
            crc |= 0x8000;
    27ec:	7274                	flw	fa3,100(a2)
    27ee:	0100                	addi	s0,sp,128
    return crcu16((ee_u16)newval, crc);
    27f0:	00e615db          	0xe615db
    crc = crcu8((ee_u8)(newval), crc);
    27f4:	0000                	unimp
    27f6:	29ee                	fld	fs3,216(sp)
    27f8:	0000                	unimp
    27fa:	0007da0f          	0x7da0f
            crc |= 0x8000;
    27fe:	0100                	addi	s0,sp,128
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    2800:	15dc                	addi	a5,sp,740
    2802:	006e                	c.slli	zero,0x1b
    for (i = 0; i < 8; i++)
    2804:	0000                	unimp
    2806:	2b81                	jal	2d56 <number+0x52>
    2808:	0000                	unimp
    280a:	0001f30f          	0x1f30f
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    280e:	0100                	addi	s0,sp,128
    for (i = 0; i < 8; i++)
    2810:	15dd                	addi	a1,a1,-9
    2812:	008d                	addi	ra,ra,3
            crc |= 0x8000;
    2814:	0000                	unimp
    2816:	00002c4f          	fnmadd.s	fs8,ft0,ft0,ft0,rdn
        data >>= 1;
    281a:	b310                	fsd	fa2,32(a4)
        if (x16 == 1)
    281c:	0002                	c.slli64	zero
    281e:	7800                	flw	fs0,48(s0)
            crc |= 0x8000;
    2820:	0021                	c.nop	8
    2822:	e800                	fsw	fs0,16(s0)
    2824:	0002                	c.slli64	zero
    2826:	0100                	addi	s0,sp,128
    for (i = 0; i < 8; i++)
    2828:	15e9                	addi	a1,a1,-6
    282a:	01c9                	addi	gp,gp,18
            crc |= 0x8000;
    282c:	0000                	unimp
    282e:	c411                	beqz	s0,283a <STACK_SIZE+0x3a>
    crc = crcu8((ee_u8)((newval) >> 8), crc);
    2830:	0002                	c.slli64	zero
    2832:	6b00                	flw	fs0,16(a4)
    2834:	002d                	c.nop	11
    2836:	1200                	addi	s0,sp,288
            crc |= 0x8000;
    2838:	02e8                	addi	a0,sp,332
    283a:	0000                	unimp
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    283c:	0002ce13          	xori	t3,t0,0
    for (i = 0; i < 8; i++)
    2840:	7e00                	flw	fs0,56(a2)
    2842:	002d                	c.nop	11
    2844:	0000                	unimp
    2846:	1400                	addi	s0,sp,544
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    2848:	000002b3          	add	t0,zero,zero
    for (i = 0; i < 8; i++)
    284c:	21a4                	fld	fs1,64(a1)
    284e:	0000                	unimp
            crc |= 0x8000;
    2850:	0310                	addi	a2,sp,384
    2852:	0000                	unimp
        data >>= 1;
    2854:	1301                	addi	t1,t1,-32
    2856:	1b01                	addi	s6,s6,-32
        if (x16 == 1)
    2858:	000001f7          	0x1f7
            crc |= 0x8000;
    285c:	c411                	beqz	s0,2868 <STACK_SIZE+0x68>
    285e:	0002                	c.slli64	zero
    2860:	9200                	0x9200
    2862:	002d                	c.nop	11
    for (i = 0; i < 8; i++)
    2864:	1200                	addi	s0,sp,288
    2866:	0310                	addi	a2,sp,384
}
    2868:	0000                	unimp
    286a:	0002ce13          	xori	t3,t0,0
{
    286e:	b000                	fsd	fs0,32(s0)
    return crcu16((ee_u16)newval, crc);
    2870:	002d                	c.nop	11
    2872:	0000                	unimp
            crc |= 0x8000;
    2874:	1400                	addi	s0,sp,544
    2876:	000002b3          	add	t0,zero,zero
{
    287a:	2210                	fld	fa2,0(a2)
    return crcu16((ee_u16)newval, crc);
    287c:	0000                	unimp
    287e:	0348                	addi	a0,sp,388
    crc = crcu8((ee_u8)(newval), crc);
    2880:	0000                	unimp
    2882:	1f01                	addi	t5,t5,-32
    2884:	1b01                	addi	s6,s6,-32
    2886:	0225                	addi	tp,tp,9
            crc |= 0x8000;
    2888:	0000                	unimp
    288a:	c411                	beqz	s0,2896 <crc16+0x2a>
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    288c:	0002                	c.slli64	zero
    288e:	c400                	sw	s0,8(s0)
    for (i = 0; i < 8; i++)
    2890:	002d                	c.nop	11
    2892:	1200                	addi	s0,sp,288
        crc >>= 1;
    2894:	0348                	addi	a0,sp,388
    2896:	0000                	unimp
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    2898:	0002ce13          	xori	t3,t0,0
    for (i = 0; i < 8; i++)
    289c:	d700                	sw	s0,40(a4)
    289e:	002d                	c.nop	11
            crc |= 0x8000;
    28a0:	0000                	unimp
    28a2:	1000                	addi	s0,sp,32
        data >>= 1;
    28a4:	000002b3          	add	t0,zero,zero
        if (x16 == 1)
    28a8:	22ac                	fld	fa1,64(a3)
    28aa:	0000                	unimp
            crc |= 0x8000;
    28ac:	0370                	addi	a2,sp,396
    28ae:	0000                	unimp
    28b0:	fd01                	bnez	a0,27c8 <crcu32+0x68>
    28b2:	5215                	li	tp,-27
    for (i = 0; i < 8; i++)
    28b4:	0002                	c.slli64	zero
    28b6:	1100                	addi	s0,sp,160
            crc |= 0x8000;
    28b8:	02c4                	addi	s1,sp,324
    28ba:	0000                	unimp
    crc = crcu8((ee_u8)((newval) >> 8), crc);
    28bc:	00002deb          	0x2deb
    28c0:	7012                	flw	ft0,36(sp)
    28c2:	13000003          	lb	zero,304(zero) # 130 <calc_func+0x10>
            crc |= 0x8000;
    28c6:	02ce                	slli	t0,t0,0x13
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    28c8:	0000                	unimp
    28ca:	2dfe                	fld	fs11,472(sp)
    for (i = 0; i < 8; i++)
    28cc:	0000                	unimp
    28ce:	0000                	unimp
    28d0:	b314                	fsd	fa3,32(a4)
    28d2:	0002                	c.slli64	zero
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    28d4:	3800                	fld	fs0,48(s0)
    28d6:	98000023          	sb	zero,-1664(zero) # fffff980 <RAM_SIZE+0xfffef980>
    for (i = 0; i < 8; i++)
    28da:	01000003          	lb	zero,16(zero) # 10 <_start>
            crc |= 0x8000;
    28de:	0132                	slli	sp,sp,0xc
        data >>= 1;
    28e0:	8015                	srli	s0,s0,0x5
    28e2:	0002                	c.slli64	zero
        if (x16 == 1)
    28e4:	1100                	addi	s0,sp,160
    28e6:	02c4                	addi	s1,sp,324
            crc |= 0x8000;
    28e8:	0000                	unimp
    28ea:	2e2a                	fld	ft8,136(sp)
    28ec:	0000                	unimp
    28ee:	9812                	add	a6,a6,tp
    for (i = 0; i < 8; i++)
    28f0:	13000003          	lb	zero,304(zero) # 130 <calc_func+0x10>
}
    28f4:	02ce                	slli	t0,t0,0x13
    28f6:	0000                	unimp
}
    28f8:	2e56                	fld	ft8,336(sp)
    28fa:	0000                	unimp
    28fc:	0000                	unimp
    28fe:	b315                	j	2622 <core_bench_state+0x1b6>
{
    2900:	0002                	c.slli64	zero
    2902:	8000                	0x8000
    2904:	c8000023          	sb	zero,-896(zero) # fffffc80 <RAM_SIZE+0xfffefc80>
    2908:	01000003          	lb	zero,16(zero) # 10 <_start>
    290c:	013e                	slli	sp,sp,0xf
    290e:	1616                	slli	a2,a2,0x25
    2910:	02c4                	addi	s1,sp,324
    2912:	0000                	unimp
    2914:	c812                	sw	tp,16(sp)
    2916:	13000003          	lb	zero,304(zero) # 130 <calc_func+0x10>
    291a:	02ce                	slli	t0,t0,0x13
    291c:	0000                	unimp
    291e:	2e8e                	fld	ft9,192(sp)
    2920:	0000                	unimp
    2922:	0000                	unimp
    2924:	0900                	addi	s0,sp,144
    2926:	e604                	fsw	fs1,8(a2)
    2928:	0000                	unimp
    292a:	0900                	addi	s0,sp,144
    292c:	8104                	0x8104
    292e:	0000                	unimp
    2930:	1700                	addi	s0,sp,928
    2932:	07c4                	addi	s1,sp,964
    2934:	0000                	unimp
    2936:	c601                	beqz	a2,293e <cvt+0x3e>
    2938:	6e01                	0x6e01
    293a:	0000                	unimp
    293c:	0100                	addi	s0,sp,128
    293e:	000002db          	0x2db
    2942:	6318                	flw	fa4,0(a4)
    2944:	0100                	addi	s0,sp,128
    2946:	12c6                	slli	t0,t0,0x31
    2948:	006e                	c.slli	zero,0x1b
    294a:	0000                	unimp
    294c:	3219                	jal	2252 <core_state_transition+0xfe>
    294e:	0001                	nop
    2950:	0100                	addi	s0,sp,128
    2952:	0bc8                	addi	a0,sp,468
    2954:	006e                	c.slli	zero,0x1b
    2956:	0000                	unimp
    if (arg < 0)
    2958:	1a00                	addi	s0,sp,304
    295a:	0000052f          	vamoaddei8.v	zero,(zero),v0,v10,v0.t
    295e:	8c01                	sub	s0,s0,s0
    2960:	0c01                	addi	s8,s8,0
    2962:	0020                	addi	s0,sp,8
    2964:	4800                	lw	s0,16(s0)
    2966:	0001                	nop
    2968:	0100                	addi	s0,sp,128
    296a:	8a9c                	0x8a9c
    296c:	0c000003          	lb	zero,192(zero) # c0 <frame_dummy+0x1c>
    2970:	02b5                	addi	t0,t0,13
    2972:	0000                	unimp
    2974:	8c01                	sub	s0,s0,s0
    2976:	8118                	0x8118
    *sign = 0;
    2978:	0000                	unimp
    297a:	a200                	fsd	fs0,0(a2)
    arg = modf(arg, &fi);
    297c:	002e                	c.slli	zero,0xb
    297e:	0c00                	addi	s0,sp,528
    2980:	02f1                	addi	t0,t0,28
    2982:	0000                	unimp
    2984:	8c01                	sub	s0,s0,s0
    2986:	4125                	li	sp,9
    2988:	0000                	unimp
    298a:	d600                	sw	s0,40(a2)
    if (fi != 0)
    298c:	002e                	c.slli	zero,0xb
    298e:	1b00                	addi	s0,sp,432
    2990:	0070                	addi	a2,sp,12
    2992:	8c01                	sub	s0,s0,s0
    arg = modf(arg, &fi);
    2994:	e632                	fsw	fa2,12(sp)
    2996:	0000                	unimp
    if (fi != 0)
    2998:	1800                	addi	s0,sp,48
    299a:	0f00002f          	vamoswapei8.v	v0,(zero),v16,v0
    299e:	080d                	addi	a6,a6,3
    arg = modf(arg, &fi);
    29a0:	0000                	unimp
    29a2:	8e01                	sub	a2,a2,s0
    if (fi != 0)
    29a4:	810c                	0x810c
    29a6:	0000                	unimp
    29a8:	7300                	flw	fs0,32(a4)
    29aa:	0f00002f          	vamoswapei8.v	v0,(zero),v16,v0
    29ae:	03cd                	addi	t2,t2,19
    p1  = &buf[CVTBUFSIZE];
    29b0:	0000                	unimp
    29b2:	8e01                	sub	a2,a2,s0
    if (fi != 0)
    29b4:	00008117          	auipc	sp,0x8
            *--p1 = (int)((fj + .03) * 10) + '0';
    29b8:	d600                	sw	s0,40(a2)
    29ba:	1c00002f          	0x1c00002f
    29be:	0069                	c.nop	26
    29c0:	8e01                	sub	a2,a2,s0
    29c2:	8121                	srli	a0,a0,0x8
    29c4:	0000                	unimp
    29c6:	0e00                	addi	s0,sp,784
            fj    = modf(fi / 10, &fi);
    29c8:	7562                	flw	fa0,56(sp)
    29ca:	0066                	c.slli	zero,0x19
    29cc:	8f01                	sub	a4,a4,s0
    29ce:	e60c                	fsw	fa1,8(a2)
            *--p1 = (int)((fj + .03) * 10) + '0';
    29d0:	0000                	unimp
    29d2:	4700                	lw	s0,8(a4)
    29d4:	0030                	addi	a2,sp,8
    29d6:	1d00                	addi	s0,sp,688
    p1  = &buf[CVTBUFSIZE];
    29d8:	210c                	fld	fa1,0(a0)
    29da:	0000                	unimp
            fj    = modf(fi / 10, &fi);
    29dc:	04ce                	slli	s1,s1,0x13
    29de:	0000                	unimp
    29e0:	036c                	addi	a1,sp,396
    29e2:	0000                	unimp
    29e4:	011e                	slli	sp,sp,0x7
    29e6:	0030015b          	0x30015b
    29ea:	541f 0021 ce00      	0xce000021541f
    29f0:	0004                	0x4
    29f2:	1e00                	addi	s0,sp,816
    29f4:	5a01                	li	s4,-32
    29f6:	5c01f303          	0x5c01f303
            *--p1 = (int)((fj + .03) * 10) + '0';
    29fa:	011e                	slli	sp,sp,0x7
    29fc:	1e30015b          	0x1e30015b
            fj    = modf(fi / 10, &fi);
    2a00:	5c01                	li	s8,-32
    2a02:	5a01f303          	0x5a01f303
    2a06:	0000                	unimp
            *--p1 = (int)((fj + .03) * 10) + '0';
    2a08:	0001e80b          	0x1e80b
    2a0c:	0100                	addi	s0,sp,128
    2a0e:	012e                	slli	sp,sp,0xb
    2a10:	0054                	addi	a3,sp,4
    2a12:	0000                	unimp
    2a14:	246c                	fld	fa1,200(s0)
    2a16:	0000                	unimp
    2a18:	01dc                	addi	a5,sp,196
    2a1a:	0000                	unimp
        while (fi != 0)
    2a1c:	9c01                	0x9c01
    2a1e:	04be                	slli	s1,s1,0xf
    2a20:	0000                	unimp
    2a22:	b20c                	fsd	fa1,32(a2)
            *--p1 = (int)((fj + .03) * 10) + '0';
    2a24:	0002                	c.slli64	zero
    2a26:	0100                	addi	s0,sp,128
    2a28:	192e                	slli	s2,s2,0x2b
    2a2a:	0081                	addi	ra,ra,0
    2a2c:	0000                	unimp
    2a2e:	00003093          	sltiu	ra,zero,0
    2a32:	1a0c                	addi	a1,sp,304
    2a34:	0005                	c.nop	1
    2a36:	0100                	addi	s0,sp,128
        while (fi != 0)
    2a38:	00e6192f          	0xe6192f
    2a3c:	0000                	unimp
    2a3e:	30d8                	fld	fa4,160(s1)
    2a40:	0000                	unimp
    2a42:	7b0c                	flw	fa1,48(a4)
    2a44:	0001                	nop
    2a46:	0100                	addi	s0,sp,128
    2a48:	1930                	addi	a2,sp,184
    2a4a:	0041                	c.nop	16
    2a4c:	0000                	unimp
    2a4e:	0000310f          	0x310f
    2a52:	810c                	0x810c
    2a54:	0001                	nop
    2a56:	0100                	addi	s0,sp,128
    2a58:	1931                	addi	s2,s2,-20
    2a5a:	0041                	c.nop	16
        while (p1 < &buf[CVTBUFSIZE])
    2a5c:	0000                	unimp
    2a5e:	3149                	jal	26e0 <crcu16+0x4>
    2a60:	0000                	unimp
    2a62:	130c                	addi	a1,sp,416
    2a64:	0008                	0x8
    2a66:	0100                	addi	s0,sp,128
            *p++ = *p1++;
    2a68:	1932                	slli	s2,s2,0x2c
    2a6a:	0041                	c.nop	16
    2a6c:	0000                	unimp
    2a6e:	00003183          	0x3183
    2a72:	6372631b          	0x6372631b
    2a76:	0100                	addi	s0,sp,128
        while (p1 < &buf[CVTBUFSIZE])
    2a78:	00541933          	sll	s2,s0,t0
            *p++ = *p1++;
    2a7c:	0000                	unimp
    2a7e:	31bd                	jal	26ec <crcu16+0x10>
    2a80:	0000                	unimp
    2a82:	380a                	fld	fa6,160(sp)
    p1 = &buf[ndigits];
    2a84:	01000007          	vle8ff.v	v0,(zero),v0.t
    2a88:	0c35                	addi	s8,s8,13
    2a8a:	04be                	slli	s1,s1,0xf
    if (eflag == 0)
    2a8c:	0000                	unimp
    2a8e:	7f909103          	lh	sp,2041(ra) # 2cc5 <cvt+0x3c5>
    2a92:	450a                	lw	a0,128(sp)
        p1 += r2;
    2a94:	01000007          	vle8ff.v	v0,(zero),v0.t
    *decpt = r2;
    2a98:	0c36                	slli	s8,s8,0xd
    2a9a:	04be                	slli	s1,s1,0xf
    if (p1 < &buf[0])
    2a9c:	0000                	unimp
    2a9e:	7fb09103          	lh	sp,2043(ra)
    while (p <= p1 && p < &buf[CVTBUFSIZE])
    2aa2:	7020                	flw	fs0,96(s0)
    2aa4:	0100                	addi	s0,sp,128
    2aa6:	00e60c37          	lui	s8,0xe60
    2aaa:	0000                	unimp
        arg *= 10;
    2aac:	7f8c9103          	lh	sp,2040(s9)
    2ab0:	690e                	flw	fs2,192(sp)
    2ab2:	0100                	addi	s0,sp,128
    2ab4:	0c38                	addi	a4,sp,536
    2ab6:	0081                	addi	ra,ra,0
    while (p <= p1 && p < &buf[CVTBUFSIZE])
    2ab8:	0000                	unimp
    2aba:	3218                	fld	fa4,32(a2)
        arg *= 10;
    2abc:	0000                	unimp
    2abe:	e821                	bnez	s0,2b0e <cvt+0x20e>
    2ac0:	70000003          	lb	zero,1792(zero) # 700 <core_bench_list+0x1dc>
    2ac4:	0004                	0x4
    2ac6:	0f00                	addi	s0,sp,912
    2ac8:	0000078b          	0x78b
    2acc:	4401                	li	s0,0
    2ace:	8d19                	sub	a0,a0,a4
        arg  = modf(arg, &fj);
    2ad0:	0000                	unimp
    2ad2:	2c00                	fld	fs0,24(s0)
    2ad4:	0032                	c.slli	zero,0xc
    2ad6:	2200                	fld	fs0,0(a2)
    2ad8:	250c                	fld	fa1,8(a0)
    2ada:	0000                	unimp
    2adc:	0134                	addi	a3,sp,136
    2ade:	0000                	unimp
        *p++ = (int)fj + '0';
    2ae0:	011e                	slli	sp,sp,0x7
    2ae2:	025a                	slli	tp,tp,0x16
    2ae4:	011e0087          	0x11e0087
    2ae8:	0082025b          	0x82025b
    2aec:	0000                	unimp
    2aee:	0821                	addi	a6,a6,8
    2af0:	0004                	0x4
    2af2:	a000                	fsd	fs0,0(s0)
    2af4:	0004                	0x4
    2af6:	0f00                	addi	s0,sp,912
    while (p <= p1 && p < &buf[CVTBUFSIZE])
    2af8:	0000078b          	0x78b
    if (p1 >= &buf[CVTBUFSIZE])
    2afc:	5801                	li	a6,-32
    2afe:	8d19                	sub	a0,a0,a4
    *p1 += 5;
    2b00:	0000                	unimp
    2b02:	4a00                	lw	s0,16(a2)
    while (*p1 > '9')
    2b04:	0032                	c.slli	zero,0xc
    2b06:	2200                	fld	fs0,0(a2)
    *p1 += 5;
    2b08:	2588                	fld	fa0,8(a1)
    2b0a:	0000                	unimp
    2b0c:	0134                	addi	a3,sp,136
    2b0e:	0000                	unimp
    2b10:	011e                	slli	sp,sp,0x7
    2b12:	025a                	slli	tp,tp,0x16
    while (*p1 > '9')
    2b14:	011e0087          	0x11e0087
    2b18:	0082025b          	0x82025b
        *p1 = '0';
    2b1c:	0000                	unimp
    2b1e:	0025f023          	0x25f023
            *p1 = '1';
    2b22:	d900                	sw	s0,48(a0)
    while (*p1 > '9')
    2b24:	0004                	0x4
    2b26:	b400                	fsd	fs0,40(s0)
        *p1 = '0';
    2b28:	0004                	0x4
    2b2a:	1e00                	addi	s0,sp,816
        if (p1 > buf)
    2b2c:	5b01                	li	s6,-32
    2b2e:	7902                	flw	fs2,32(sp)
            ++*--p1;
    2b30:	0000                	unimp
    2b32:	0024                	addi	s1,sp,8
    2b34:	0026                	c.slli	zero,0x9
    2b36:	d900                	sw	s0,48(a0)
    2b38:	0004                	0x4
    2b3a:	0000                	unimp
    2b3c:	00008107          	vle8.v	v2,(ra),v0.t
    2b40:	ce00                	sw	s0,24(a2)
    2b42:	0004                	0x4
    while (*p1 > '9')
    2b44:	0800                	addi	s0,sp,16
    2b46:	002c                	addi	a1,sp,8
    *p = '\0';
    2b48:	0000                	unimp
    2b4a:	ae250007          	vloxseg6ei8.v	v0,(a0),v2
}
    2b4e:	0005                	c.nop	1
    2b50:	a400                	fsd	fs0,8(s0)
    2b52:	0005                	c.nop	1
    2b54:	0400                	addi	s0,sp,512
    2b56:	2600                	fld	fs0,8(a2)
    2b58:	071a                	slli	a4,a4,0x6
    2b5a:	0000                	unimp
    2b5c:	071a                	slli	a4,a4,0x6
    2b5e:	0000                	unimp
    2b60:	00084d03          	lbu	s10,0(a6)
    2b64:	057f                	0x57f
    2b66:	0000                	unimp
    2b68:	0004                	0x4
    2b6a:	0b11                	addi	s6,s6,4
    2b6c:	0000                	unimp
    2b6e:	0104                	addi	s1,sp,128
    2b70:	0082                	c.slli64	ra
    2b72:	0000                	unimp
    2b74:	2b0c                	fld	fa1,16(a4)
    2b76:	0008                	0x8
    2b78:	1900                	addi	s0,sp,176
    2b7a:	0000                	unimp
    2b7c:	4800                	lw	s0,16(s0)
    2b7e:	0026                	c.slli	zero,0x9
    2b80:	b800                	fsd	fs0,48(s0)
    2b82:	0002                	c.slli64	zero
    2b84:	8900                	0x8900
    2b86:	004a                	c.slli	zero,0x12
    2b88:	0200                	addi	s0,sp,256
    2b8a:	0504                	addi	s1,sp,640
    2b8c:	6e69                	lui	t3,0x1a
    2b8e:	0074                	addi	a3,sp,12
    2b90:	c7070403          	lb	s0,-912(a4)
    2b94:	0008                	0x8
    2b96:	0300                	addi	s0,sp,384
    if (arg < 0)
    2b98:	0508                	addi	a0,sp,640
    2b9a:	000001bb          	0x1bb
    2b9e:	87041003          	lh	zero,-1936(s0)
    2ba2:	0011                	c.nop	4
    2ba4:	0400                	addi	s0,sp,512
    2ba6:	00000303          	lb	t1,0(zero) # 0 <RAM_START_ADDRESS>
    2baa:	5f02                	lw	t5,32(sp)
    2bac:	4d18                	lw	a4,24(a0)
    2bae:	0000                	unimp
    2bb0:	0300                	addi	s0,sp,384
    2bb2:	0502                	c.slli64	a0
        *sign = 1;
    2bb4:	00c9                	addi	ra,ra,18
    2bb6:	0000                	unimp
    2bb8:	3504                	fld	fs1,40(a0)
    2bba:	0002                	c.slli64	zero
        arg   = -arg;
    2bbc:	0200                	addi	s0,sp,256
    2bbe:	1860                	addi	s0,sp,60
    2bc0:	0060                	addi	s0,sp,12
    2bc2:	0000                	unimp
    2bc4:	ba070203          	lb	tp,-1120(a4)
            *p1 = '1';
    2bc8:	0002                	c.slli64	zero
    2bca:	0400                	addi	s0,sp,512
            (*decpt)++;
    2bcc:	0118                	addi	a4,sp,128
    2bce:	0000                	unimp
    2bd0:	6102                	flw	ft2,0(sp)
    2bd2:	2518                	fld	fa4,8(a0)
    2bd4:	0000                	unimp
    2bd6:	0500                	addi	s0,sp,640
            if (eflag == 0)
    2bd8:	00000067          	jr	zero # 0 <RAM_START_ADDRESS>
    2bdc:	8c040803          	lb	a6,-1856(s0)
    while (*p1 > '9')
    2be0:	0011                	c.nop	4
    2be2:	0400                	addi	s0,sp,512
    2be4:	00f5                	addi	ra,ra,29
    2be6:	0000                	unimp
    2be8:	6302                	flw	ft6,0(sp)
    2bea:	8b18                	0x8b18
                if (p > buf)
    2bec:	0000                	unimp
    2bee:	0300                	addi	s0,sp,384
                    *p = '0';
    2bf0:	0801                	addi	a6,a6,0
    2bf2:	0262                	slli	tp,tp,0x18
    while (*p1 > '9')
    2bf4:	0000                	unimp
    2bf6:	b304                	fsd	fs1,32(a4)
                p++;
    2bf8:	02000003          	lb	zero,32(zero) # 20 <_start+0x10>
    while (*p1 > '9')
    2bfc:	1864                	addi	s1,sp,60
    2bfe:	002c                	addi	a1,sp,8
    2c00:	0000                	unimp
    2c02:	d206                	sw	ra,36(sp)
    else if (arg > 0)
    2c04:	0006                	c.slli	zero,0x1
    2c06:	0100                	addi	s0,sp,128
    2c08:	1825                	addi	a6,a6,-23
    2c0a:	00000073          	ecall
    2c0e:	c306                	sw	ra,132(sp)
    2c10:	0006                	c.slli	zero,0x1
    2c12:	0100                	addi	s0,sp,128
    2c14:	1826                	slli	a6,a6,0x29
    2c16:	00000073          	ecall
    2c1a:	5006                	0x5006
        while ((fj = arg * 10) < 1)
    2c1c:	0006                	c.slli	zero,0x1
    2c1e:	0100                	addi	s0,sp,128
    2c20:	00731827          	fsh	ft7,16(t1) # 2328 <core_state_transition+0x1d4>
    2c24:	0000                	unimp
    2c26:	a606                	fsd	ft1,264(sp)
    2c28:	0006                	c.slli	zero,0x1
    2c2a:	0100                	addi	s0,sp,128
    2c2c:	1828                	addi	a0,sp,56
    2c2e:	00000073          	ecall
    2c32:	e106                	fsw	ft1,128(sp)
    2c34:	0006                	c.slli	zero,0x1
    2c36:	0100                	addi	s0,sp,128
    2c38:	1829                	addi	a6,a6,-22
    2c3a:	00000073          	ecall
    2c3e:	00041c07          	flh	fs8,0(s0)
    2c42:	0100                	addi	s0,sp,128
    2c44:	01d2                	slli	gp,gp,0x14
    2c46:	007f                	0x7f
    2c48:	0000                	unimp
    2c4a:	28f8                	fld	fa4,208(s1)
    2c4c:	0000                	unimp
    2c4e:	0008                	0x8
    2c50:	0000                	unimp
    2c52:	9c01                	0x9c01
    2c54:	0102                	c.slli64	sp
    2c56:	0000                	unimp
    2c58:	3208                	fld	fa0,32(a2)
    2c5a:	0001                	nop
    r2    = 0;
    2c5c:	0100                	addi	s0,sp,128
    2c5e:	0bd4                	addi	a3,sp,468
        while ((fj = arg * 10) < 1)
    2c60:	007f                	0x7f
    2c62:	0000                	unimp
    2c64:	0000                	unimp
    2c66:	fb09                	bnez	a4,2b78 <cvt+0x278>
    2c68:	0000                	unimp
    2c6a:	0100                	addi	s0,sp,128
    2c6c:	01cc                	addi	a1,sp,196
    2c6e:	0054                	addi	a3,sp,4
    2c70:	0000                	unimp
    2c72:	2c01                	jal	2e82 <number+0x17e>
    2c74:	0001                	nop
    2c76:	0a00                	addi	s0,sp,272
    2c78:	081e                	slli	a6,a6,0x7
    2c7a:	0000                	unimp
    2c7c:	cc01                	beqz	s0,2c94 <cvt+0x394>
    2c7e:	410e                	lw	sp,192(sp)
    2c80:	0000                	unimp
    2c82:	0b00                	addi	s0,sp,400
    2c84:	00637263          	bgeu	t1,t1,2c88 <cvt+0x388>
    2c88:	cc01                	beqz	s0,2ca0 <cvt+0x3a0>
    2c8a:	541d                	li	s0,-25
    2c8c:	0000                	unimp
    2c8e:	0000                	unimp
    2c90:	00071a07          	flh	fs4,0(a4)
    2c94:	0100                	addi	s0,sp,128
    2c96:	01c5                	addi	gp,gp,17
    2c98:	0054                	addi	a3,sp,4
    2c9a:	0000                	unimp
    2c9c:	2760                	fld	fs0,200(a4)
    2c9e:	0000                	unimp
            r2--;
    2ca0:	010c                	addi	a1,sp,128
    2ca2:	0000                	unimp
        while ((fj = arg * 10) < 1)
    2ca4:	9c01                	0x9c01
    2ca6:	0000030f          	0x30f
    2caa:	1e0c                	addi	a1,sp,816
    2cac:	0008                	0x8
    2cae:	0100                	addi	s0,sp,128
    2cb0:	0fc5                	addi	t6,t6,17
    2cb2:	0092                	slli	ra,ra,0x4
    2cb4:	0000                	unimp
    2cb6:	325d                	jal	265c <get_seed_32+0x14>
        buf[0] = '\0';
    2cb8:	0000                	unimp
    2cba:	630d                	lui	t1,0x3
        return buf;
    2cbc:	6372                	flw	ft6,28(sp)
    2cbe:	0100                	addi	s0,sp,128
        buf[CVTBUFSIZE - 1] = '\0';
    2cc0:	1ec5                	addi	t4,t4,-15
    2cc2:	0054                	addi	a3,sp,4
        return buf;
    2cc4:	0000                	unimp
    2cc6:	3289                	jal	2608 <core_bench_state+0x19c>
    2cc8:	0000                	unimp
    2cca:	020e                	slli	tp,tp,0x3
    r2    = 0;
    2ccc:	0001                	nop
    2cce:	6400                	flw	fs0,8(s0)
    2cd0:	68000027          	vssseg4e8.v	v0,(zero),zero,v0.t
        while ((fj = arg * 10) < 1)
    2cd4:	0004                	0x4
    2cd6:	0100                	addi	s0,sp,128
    2cd8:	023c0bc7          	fmsub.d	fs7,fs8,ft3,ft0,rne
    return cvt(arg, ndigits, decpt, sign, CVTBUF, 1);
    2cdc:	0000                	unimp
    2cde:	00011f0f          	0x11f0f
    2ce2:	c000                	sw	s0,0(s0)
    2ce4:	0032                	c.slli	zero,0xc
    2ce6:	0f00                	addi	s0,sp,912
    return cvt(arg, ndigits, decpt, sign, buf, 1);
    2ce8:	00000113          	li	sp,0
    2cec:	000032d3          	fadd.s	ft5,ft0,ft0,rup
    return cvt(arg, ndigits, decpt, sign, CVTBUF, 0);
    2cf0:	0f10                	addi	a2,sp,912
    2cf2:	68000003          	lb	zero,1664(zero) # 680 <core_bench_list+0x15c>
    2cf6:	80000027          	vsseg5e8.v	v0,(zero),v0.t
    2cfa:	0004                	0x4
    return cvt(arg, ndigits, decpt, sign, buf, 0);
    2cfc:	0100                	addi	s0,sp,128
    2cfe:	0cce                	slli	s9,s9,0x13
    2d00:	00032c0f          	0x32c0f
{
    2d04:	e600                	fsw	fs0,8(a2)
    2d06:	0032                	c.slli	zero,0xc
    2d08:	0f00                	addi	s0,sp,912
    2d0a:	0320                	addi	s0,sp,392
    2d0c:	0000                	unimp
    2d0e:	3304                	fld	fs1,32(a4)
    2d10:	0000                	unimp
    2d12:	390e                	fld	fs2,224(sp)
    2d14:	68000003          	lb	zero,1664(zero) # 680 <core_bench_list+0x15c>
    2d18:	98000027          	vssseg5e128.v	v0,(zero),zero,v0.t
    2d1c:	0004                	0x4
    2d1e:	0100                	addi	s0,sp,128
    2d20:	0bc0                	addi	s0,sp,468
    2d22:	01f6                	slli	gp,gp,0x1d
    2d24:	0000                	unimp
    2d26:	0003560f          	0x3560f
    2d2a:	2800                	fld	fs0,16(s0)
    2d2c:	0f000033          	0xf000033
    2d30:	034a                	slli	t1,t1,0x12
    2d32:	0000                	unimp
    2d34:	00003357          	vadd.vi	v6,v0,0,v0.t
    2d38:	9811                	andi	s0,s0,-28
    2d3a:	0004                	0x4
    if (type & UPPERCASE)
    2d3c:	1200                	addi	s0,sp,288
    2d3e:	0362                	slli	t1,t1,0x18
{
    2d40:	0000                	unimp
    2d42:	336a                	fld	ft6,184(sp)
    2d44:	0000                	unimp
    2d46:	6c12                	flw	fs8,4(sp)
    2d48:	8d000003          	lb	zero,-1840(zero) # fffff8d0 <RAM_SIZE+0xfffef8d0>
    2d4c:	12000033          	0x12000033
    2d50:	0378                	addi	a4,sp,396
    2d52:	0000                	unimp
    if (type & UPPERCASE)
    2d54:	33a0                	fld	fs0,96(a5)
    2d56:	0000                	unimp
        dig = upper_digits;
    2d58:	0000                	unimp
    2d5a:	3910                	fld	fa2,48(a0)
    2d5c:	ac000003          	lb	zero,-1344(zero) # fffffac0 <RAM_SIZE+0xfffefac0>
    if (type & LEFT)
    2d60:	b8000027          	vssseg6e128.v	v0,(zero),zero,v0.t
    2d64:	0004                	0x4
    2d66:	0100                	addi	s0,sp,128
        type &= ~ZEROPAD;
    2d68:	0bc1                	addi	s7,s7,16
    2d6a:	0003560f          	0x3560f
    2d6e:	b400                	fsd	fs0,40(s0)
    c    = (type & ZEROPAD) ? '0' : ' ';
    2d70:	0f000033          	0xf000033
    2d74:	034a                	slli	t1,t1,0x12
    2d76:	0000                	unimp
    if (type & SIGN)
    2d78:	000033e3          	0x33e3
    if (type & HEX_PREP)
    2d7c:	b811                	j	2590 <core_bench_state+0x124>
    2d7e:	0004                	0x4
    if (type & SIGN)
    2d80:	1200                	addi	s0,sp,288
    2d82:	0362                	slli	t1,t1,0x18
        if (num < 0)
    2d84:	0000                	unimp
    2d86:	33f6                	fld	ft7,376(sp)
        else if (type & PLUS)
    2d88:	0000                	unimp
    2d8a:	6c12                	flw	fs8,4(sp)
    2d8c:	19000003          	lb	zero,400(zero) # 190 <calc_func+0x70>
        else if (type & SPACE)
    2d90:	0034                	addi	a3,sp,8
    2d92:	1200                	addi	s0,sp,288
    sign = 0;
    2d94:	0378                	addi	a4,sp,396
    2d96:	0000                	unimp
        else if (type & SPACE)
    2d98:	342c                	fld	fa1,104(s0)
    2d9a:	0000                	unimp
            sign = ' ';
    2d9c:	0000                	unimp
    2d9e:	0000                	unimp
            size--;
    2da0:	00010213          	mv	tp,sp
            sign = ' ';
    2da4:	ec00                	fsw	fs0,24(s0)
    2da6:	7c000027          	vsoxseg4ei128.v	v0,(zero),v0,v0.t
    if (type & HEX_PREP)
    2daa:	0000                	unimp
        if (base == 16)
    2dac:	0100                	addi	s0,sp,128
    2dae:	0bc8                	addi	a0,sp,468
    2db0:	00011f0f          	0x11f0f
            size--;
    2db4:	4000                	lw	s0,0(s0)
    2db6:	0034                	addi	a3,sp,8
    2db8:	0f00                	addi	s0,sp,912
    2dba:	00000113          	li	sp,0
    2dbe:	00003453          	fadd.s	fs0,ft0,ft0,rup
    if (num == 0)
    2dc2:	0f10                	addi	a2,sp,912
        tmp[i++] = '0';
    2dc4:	ec000003          	lb	zero,-320(zero) # fffffec0 <RAM_SIZE+0xfffefec0>
    2dc8:	d8000027          	vssseg7e128.v	v0,(zero),zero,v0.t
    2dcc:	0004                	0x4
    2dce:	0100                	addi	s0,sp,128
    2dd0:	0cce                	slli	s9,s9,0x13
    2dd2:	00032c0f          	0x32c0f
    2dd6:	8100                	0x8100
    2dd8:	0034                	addi	a3,sp,8
    2dda:	0f00                	addi	s0,sp,912
    if (i > precision)
    2ddc:	0320                	addi	s0,sp,392
    2dde:	0000                	unimp
    2de0:	349f 0000 390e      	0x390e0000349f
    2de6:	ec000003          	lb	zero,-320(zero) # fffffec0 <RAM_SIZE+0xfffefec0>
    2dea:	f0000027          	vsseg8e128.v	v0,(zero),v0.t
    if (!(type & (ZEROPAD | LEFT)))
    2dee:	0004                	0x4
    size -= precision;
    2df0:	0100                	addi	s0,sp,128
    2df2:	0bc0                	addi	s0,sp,468
        while (size-- > 0)
    2df4:	02c8                	addi	a0,sp,324
    2df6:	0000                	unimp
    if (!(type & (ZEROPAD | LEFT)))
    2df8:	0003560f          	0x3560f
        while (size-- > 0)
    2dfc:	cd00                	sw	s0,24(a0)
    2dfe:	0034                	addi	a3,sp,8
            *str++ = ' ';
    2e00:	0f00                	addi	s0,sp,912
    2e02:	034a                	slli	t1,t1,0x12
    2e04:	0000                	unimp
    2e06:	34fc                	fld	fa5,232(s1)
    2e08:	0000                	unimp
    2e0a:	f011                	bnez	s0,2d0e <number+0xa>
    2e0c:	0004                	0x4
    2e0e:	1200                	addi	s0,sp,288
    2e10:	0362                	slli	t1,t1,0x18
    2e12:	0000                	unimp
    2e14:	0000350f          	0x350f
        while (size-- > 0)
    2e18:	6c12                	flw	fs8,4(sp)
    2e1a:	32000003          	lb	zero,800(zero) # 320 <core_list_remove+0xc>
    if (sign)
    2e1e:	0035                	c.nop	13
    2e20:	1200                	addi	s0,sp,288
    2e22:	0378                	addi	a4,sp,396
        *str++ = sign;
    2e24:	0000                	unimp
    2e26:	3545                	jal	2cc6 <cvt+0x3c6>
    2e28:	0000                	unimp
    2e2a:	0000                	unimp
    if (type & HEX_PREP)
    2e2c:	3910                	fld	fa2,48(a0)
    2e2e:	2c000003          	lb	zero,704(zero) # 2c0 <core_list_insert_new+0xc>
        if (base == 8)
    2e32:	0028                	addi	a0,sp,8
    2e34:	0800                	addi	s0,sp,16
    2e36:	0005                	c.nop	1
        else if (base == 16)
    2e38:	0100                	addi	s0,sp,128
    2e3a:	0bc1                	addi	s7,s7,16
    2e3c:	0003560f          	0x3560f
    if (!(type & LEFT))
    2e40:	5900                	lw	s0,48(a0)
    2e42:	0035                	c.nop	13
        while (size-- > 0)
    2e44:	0f00                	addi	s0,sp,912
    2e46:	034a                	slli	t1,t1,0x12
            *str++ = c;
    2e48:	0000                	unimp
    2e4a:	3588                	fld	fa0,40(a1)
    2e4c:	0000                	unimp
    2e4e:	0811                	addi	a6,a6,4
    2e50:	0005                	c.nop	1
    2e52:	1200                	addi	s0,sp,288
    2e54:	0362                	slli	t1,t1,0x18
    2e56:	0000                	unimp
    2e58:	0000359b          	0x359b
        while (size-- > 0)
    2e5c:	6c12                	flw	fs8,4(sp)
    2e5e:	be000003          	lb	zero,-1056(zero) # fffffbe0 <RAM_SIZE+0xfffefbe0>
            *str++ = c;
    2e62:	0035                	c.nop	13
    2e64:	1200                	addi	s0,sp,288
    2e66:	0378                	addi	a4,sp,396
        while (size-- > 0)
    2e68:	0000                	unimp
    2e6a:	35d1                	jal	2d2e <number+0x2a>
            *str++ = c;
    2e6c:	0000                	unimp
    2e6e:	0000                	unimp
    2e70:	0000                	unimp
    2e72:	0900                	addi	s0,sp,144
    while (size-- > 0)
    2e74:	0292                	slli	t0,t0,0x4
    2e76:	0000                	unimp
    while (i < precision--)
    2e78:	be01                	j	2988 <cvt+0x88>
    2e7a:	5401                	li	s0,-32
        *str++ = '0';
    2e7c:	0000                	unimp
    2e7e:	0100                	addi	s0,sp,128
    2e80:	0339                	addi	t1,t1,14
    2e82:	0000                	unimp
    2e84:	1e0a                	slli	t3,t3,0x22
    2e86:	0008                	0x8
    2e88:	0100                	addi	s0,sp,128
    2e8a:	0fbe                	slli	t6,t6,0xf
    2e8c:	0054                	addi	a3,sp,4
    2e8e:	0000                	unimp
    2e90:	6372630b          	0x6372630b
    while (i-- > 0)
    2e94:	0100                	addi	s0,sp,128
    2e96:	1ebe                	slli	t4,t4,0x2f
        while (size-- > 0)
    2e98:	0054                	addi	a3,sp,4
    2e9a:	0000                	unimp
    while (i-- > 0)
    2e9c:	0900                	addi	s0,sp,144
    2e9e:	0825                	addi	a6,a6,9
    2ea0:	0000                	unimp
    2ea2:	a501                	j	34a2 <ee_printf+0x46e>
        *str++ = tmp[i];
    2ea4:	5401                	li	s0,-32
    2ea6:	0000                	unimp
    2ea8:	0100                	addi	s0,sp,128
    2eaa:	0385                	addi	t2,t2,1
    while (i-- > 0)
    2eac:	0000                	unimp
    2eae:	9e0a                	add	t3,t3,sp
    2eb0:	0002                	c.slli64	zero
    2eb2:	0100                	addi	s0,sp,128
    2eb4:	0da5                	addi	s11,s11,9
    2eb6:	007f                	0x7f
        *str++ = tmp[i];
    2eb8:	0000                	unimp
    2eba:	6372630b          	0x6372630b
    while (i-- > 0)
    2ebe:	0100                	addi	s0,sp,128
    2ec0:	1aa5                	addi	s5,s5,-23
    2ec2:	0054                	addi	a3,sp,4
        *str++ = tmp[i];
    2ec4:	0000                	unimp
    2ec6:	6914                	flw	fa3,16(a0)
    2ec8:	0100                	addi	s0,sp,128
    2eca:	007f0ba7          	0x7f0ba7
    while (size-- > 0)
    2ece:	0000                	unimp
        *str++ = ' ';
    2ed0:	7814                	flw	fa3,48(s0)
    2ed2:	3631                	jal	29de <cvt+0xde>
    2ed4:	0100                	addi	s0,sp,128
    2ed6:	007f12a7          	fsh	ft7,5(t5) # 2de1 <number+0xdd>
    2eda:	0000                	unimp
    2edc:	1815                	addi	a6,a6,-27
    2ede:	0008                	0x8
    2ee0:	0100                	addi	s0,sp,128
    2ee2:	007f1ba7          	fsh	ft7,23(t5)
    2ee6:	0000                	unimp
    2ee8:	0700                	addi	s0,sp,896
    2eea:	00000523          	sb	zero,10(zero) # a <RAM_START_ADDRESS+0xa>
    2eee:	2b01                	jal	33fe <ee_printf+0x3ca>
    2ef0:	6701                	0x6701
    2ef2:	0000                	unimp
}
    2ef4:	4800                	lw	s0,16(s0)
    2ef6:	0026                	c.slli	zero,0x9
    2ef8:	5000                	lw	s0,32(s0)
    2efa:	0000                	unimp
    2efc:	0100                	addi	s0,sp,128
    2efe:	be9c                	fsd	fa5,56(a3)
    2f00:	0d000003          	lb	zero,208(zero) # d0 <cmp_idx+0xc>
    2f04:	0069                	c.nop	26
    2f06:	2b01                	jal	3416 <ee_printf+0x3e2>
    2f08:	2511                	jal	350c <ee_printf+0x4d8>
    2f0a:	0000                	unimp
    2f0c:	e500                	fsw	fs0,8(a0)
    2f0e:	0035                	c.nop	13
    2f10:	1600                	addi	s0,sp,800
    2f12:	0132                	slli	sp,sp,0xc
    2f14:	0000                	unimp
    2f16:	2d01                	jal	3526 <ee_printf+0x4f2>
    2f18:	670c                	flw	fa1,8(a4)
    2f1a:	0000                	unimp
    2f1c:	0600                	addi	s0,sp,768
    2f1e:	0036                	c.slli	zero,0xd
    2f20:	0000                	unimp
    2f22:	00033917          	auipc	s2,0x33
    2f26:	9800                	0x9800
    2f28:	0026                	c.slli	zero,0x9
    2f2a:	4400                	lw	s0,8(s0)
    2f2c:	0000                	unimp
    2f2e:	0100                	addi	s0,sp,128
    2f30:	ff9c                	fsw	fa5,56(a5)
    2f32:	0f000003          	lb	zero,240(zero) # f0 <cmp_idx+0x2c>
    if (!(type & (ZEROPAD | LEFT)))
    2f36:	034a                	slli	t1,t1,0x12
    2f38:	0000                	unimp
    2f3a:	3651                	jal	2abe <cvt+0x1be>
    c    = (type & ZEROPAD) ? '0' : ' ';
    2f3c:	0000                	unimp
    2f3e:	0003560f          	0x3560f
    2f42:	6f00                	flw	fs0,24(a4)
    2f44:	0036                	c.slli	zero,0xd
    2f46:	1200                	addi	s0,sp,288
    2f48:	0362                	slli	t1,t1,0x18
    2f4a:	0000                	unimp
    if (type & SIGN)
    2f4c:	36a9                	jal	2a96 <cvt+0x196>
    2f4e:	0000                	unimp
    if (type & HEX_PREP)
    2f50:	6c12                	flw	fs8,4(sp)
    2f52:	cc000003          	lb	zero,-832(zero) # fffffcc0 <RAM_SIZE+0xfffefcc0>
    if (type & SIGN)
    2f56:	0036                	c.slli	zero,0xd
    2f58:	1200                	addi	s0,sp,288
    2f5a:	0378                	addi	a4,sp,396
    char *dig = digits;
    2f5c:	0000                	unimp
    2f5e:	000036eb          	0x36eb
    2f62:	1700                	addi	s0,sp,928
    2f64:	0000030f          	0x30f
    sign = 0;
    2f68:	26dc                	fld	fa5,136(a3)
    2f6a:	0000                	unimp
    2f6c:	0084                	addi	s1,sp,64
    2f6e:	0000                	unimp
            sign = '-';
    2f70:	9c01                	0x9c01
    2f72:	04b1                	addi	s1,s1,12
    2f74:	0000                	unimp
    2f76:	0003200f          	0x3200f
            num  = -num;
    2f7a:	0b00                	addi	s0,sp,400
            size--;
    2f7c:	0f000037          	lui	zero,0xf000
    if (type & HEX_PREP)
    2f80:	032c                	addi	a1,sp,392
    2f82:	0000                	unimp
    if (base < 2 || base > 36)
    2f84:	372c                	fld	fa1,104(a4)
    2f86:	0000                	unimp
    2f88:	390e                	fld	fs2,224(sp)
    2f8a:	e0000003          	lb	zero,-512(zero) # fffffe00 <RAM_SIZE+0xfffefe00>
            tmp[i++] = dig[((unsigned long)num) % (unsigned)base];
    2f8e:	0026                	c.slli	zero,0x9
    2f90:	2800                	fld	fs0,16(s0)
    2f92:	0004                	0x4
    2f94:	0100                	addi	s0,sp,128
    2f96:	0bc0                	addi	s0,sp,468
    2f98:	046c                	addi	a1,sp,524
    2f9a:	0000                	unimp
    2f9c:	0003560f          	0x3560f
    2fa0:	6300                	flw	fs0,0(a4)
    2fa2:	0f000037          	lui	zero,0xf000
    2fa6:	034a                	slli	t1,t1,0x12
    2fa8:	0000                	unimp
    2faa:	3792                	fld	fa5,288(sp)
            num      = ((unsigned long)num) / (unsigned)base;
    2fac:	0000                	unimp
    2fae:	2811                	jal	2fc2 <number+0x2be>
    2fb0:	0004                	0x4
    2fb2:	1200                	addi	s0,sp,288
            tmp[i++] = dig[((unsigned long)num) % (unsigned)base];
    2fb4:	0362                	slli	t1,t1,0x18
    2fb6:	0000                	unimp
    2fb8:	37a5                	jal	2f20 <number+0x21c>
    2fba:	0000                	unimp
            num      = ((unsigned long)num) / (unsigned)base;
    2fbc:	6c12                	flw	fs8,4(sp)
    2fbe:	c8000003          	lb	zero,-896(zero) # fffffc80 <RAM_SIZE+0xfffefc80>
    2fc2:	12000037          	lui	zero,0x12000
        while (num != 0)
    2fc6:	0378                	addi	a4,sp,396
    2fc8:	0000                	unimp
    2fca:	000037db          	0x37db
            sign = '+';
    2fce:	0000                	unimp
            size--;
    2fd0:	3910                	fld	fa2,48(a0)
    2fd2:	20000003          	lb	zero,512(zero) # 200 <calc_func+0xe0>
            sign = '+';
    2fd6:	48000027          	vssseg3e8.v	v0,(zero),zero,v0.t
    2fda:	0004                	0x4
            *str++ = '0';
    2fdc:	0100                	addi	s0,sp,128
    2fde:	0bc1                	addi	s7,s7,16
    2fe0:	0003560f          	0x3560f
            *str++ = digits[33];
    2fe4:	ef00                	fsw	fs0,24(a4)
    2fe6:	0f000037          	lui	zero,0xf000
    2fea:	034a                	slli	t1,t1,0x12
    2fec:	0000                	unimp
    2fee:	381e                	fld	fa6,480(sp)
    2ff0:	0000                	unimp
    2ff2:	4811                	li	a6,4
            size -= 2;
    2ff4:	0004                	0x4
    2ff6:	1200                	addi	s0,sp,288
    2ff8:	0362                	slli	t1,t1,0x18
    2ffa:	0000                	unimp
            *str++ = '0';
    2ffc:	3831                	jal	2818 <STACK_SIZE+0x18>
    2ffe:	0000                	unimp
    3000:	6c12                	flw	fs8,4(sp)
    3002:	54000003          	lb	zero,1344(zero) # 540 <core_bench_list+0x1c>
    3006:	0038                	addi	a4,sp,8
    3008:	1200                	addi	s0,sp,288
    300a:	0378                	addi	a4,sp,396
        while (size-- > 0)
    300c:	0000                	unimp
    300e:	00003867          	0x3867
    3012:	0000                	unimp
    3014:	1800                	addi	s0,sp,48
    3016:	0102                	c.slli64	sp
        while (size-- > 0)
    3018:	0000                	unimp
    301a:	286c                	fld	fa1,208(s0)
    301c:	0000                	unimp
    301e:	008c                	addi	a1,sp,64
    3020:	0000                	unimp
    3022:	9c01                	0x9c01
    3024:	0001130f          	0x1130f
	*uart = c;
    3028:	7b00                	flw	fs0,48(a4)
    302a:	0038                	addi	a4,sp,8
    302c:	0f00                	addi	s0,sp,912
    302e:	011f 0000 389c      	0x389c0000011f
{
    3034:	0000                	unimp
    3036:	0f10                	addi	a2,sp,912
    3038:	74000003          	lb	zero,1856(zero) # 740 <core_bench_list+0x21c>
    303c:	0028                	addi	a0,sp,8
    303e:	2800                	fld	fs0,16(s0)
    3040:	0005                	c.nop	1
    3042:	0100                	addi	s0,sp,128
    3044:	0cce                	slli	s9,s9,0x13
    3046:	00032c0f          	0x32c0f
    304a:	bd00                	fsd	fs0,56(a0)
    304c:	0038                	addi	a4,sp,8
    304e:	0f00                	addi	s0,sp,912
    3050:	0320                	addi	s0,sp,392
    3052:	0000                	unimp
    3054:	000038db          	0x38db
    3058:	390e                	fld	fs2,224(sp)
    305a:	74000003          	lb	zero,1856(zero) # 740 <core_bench_list+0x21c>
    305e:	0028                	addi	a0,sp,8
    3060:	4000                	lw	s0,0(s0)
    3062:	0005                	c.nop	1
    3064:	0100                	addi	s0,sp,128
    3066:	0bc0                	addi	s0,sp,468
    3068:	053c                	addi	a5,sp,648
    306a:	0000                	unimp
    306c:	0003560f          	0x3560f
    3070:	ee00                	fsw	fs0,24(a2)
    3072:	0038                	addi	a4,sp,8
    3074:	0f00                	addi	s0,sp,912
    3076:	034a                	slli	t1,t1,0x12
    3078:	0000                	unimp
    307a:	391d                	jal	2cb0 <cvt+0x3b0>
    307c:	0000                	unimp
    307e:	4011                	c.li	zero,4
    3080:	0005                	c.nop	1
    3082:	1200                	addi	s0,sp,288
    3084:	0362                	slli	t1,t1,0x18
    3086:	0000                	unimp
    for (str = buf; *fmt; fmt++)
    3088:	3930                	fld	fa2,112(a0)
    308a:	0000                	unimp
    va_start(args, fmt);
    308c:	6c12                	flw	fs8,4(sp)
    308e:	53000003          	lb	zero,1328(zero) # 530 <core_bench_list+0xc>
    3092:	0039                	c.nop	14
    for (str = buf; *fmt; fmt++)
    3094:	1200                	addi	s0,sp,288
    3096:	0378                	addi	a4,sp,396
    3098:	0000                	unimp
    309a:	3966                	fld	fs2,120(sp)
    309c:	0000                	unimp
    309e:	0000                	unimp
    30a0:	3910                	fld	fa2,48(a0)
    30a2:	b8000003          	lb	zero,-1152(zero) # fffffb80 <RAM_SIZE+0xfffefb80>
                tmp[len++] = digits[n / 10];
    30a6:	0028                	addi	a0,sp,8
    30a8:	6000                	flw	fs0,0(s0)
    30aa:	0005                	c.nop	1
    for (str = buf; *fmt; fmt++)
    30ac:	0100                	addi	s0,sp,128
    30ae:	0bc1                	addi	s7,s7,16
    30b0:	0003560f          	0x3560f
    30b4:	7a00                	flw	fs0,48(a2)
    30b6:	0039                	c.nop	14
                tmp[len++] = digits[n / 10];
    30b8:	0f00                	addi	s0,sp,912
    30ba:	034a                	slli	t1,t1,0x12
        if (*fmt != '%')
    30bc:	0000                	unimp
    30be:	39a9                	jal	2d18 <number+0x14>
    30c0:	0000                	unimp
    30c2:	6011                	c.lui	zero,0x4
            *str++ = *fmt;
    30c4:	0005                	c.nop	1
    30c6:	1200                	addi	s0,sp,288
    for (str = buf; *fmt; fmt++)
    30c8:	0362                	slli	t1,t1,0x18
    30ca:	0000                	unimp
            *str++ = *fmt;
    30cc:	39bc                	fld	fa5,112(a1)
    30ce:	0000                	unimp
            continue;
    30d0:	6c12                	flw	fs8,4(sp)
    30d2:	df000003          	lb	zero,-528(zero) # fffffdf0 <RAM_SIZE+0xfffefdf0>
    for (str = buf; *fmt; fmt++)
    30d6:	0039                	c.nop	14
    *str = '\0';
    30d8:	1200                	addi	s0,sp,288
    30da:	0378                	addi	a4,sp,396
    while (*p)
    30dc:	0000                	unimp
    30de:	39f2                	fld	fs3,312(sp)
    30e0:	0000                	unimp
    30e2:	0000                	unimp
    30e4:	0000                	unimp
    30e6:	fc00                	fsw	fs0,56(s0)
	*uart = c;
    30e8:	0004                	0x4
    30ea:	0400                	addi	s0,sp,512
    30ec:	8900                	0x8900
    30ee:	000c                	0xc
    30f0:	0400                	addi	s0,sp,512
    30f2:	8201                	c.srli64	a2
    while (*p)
    30f4:	0000                	unimp
    30f6:	0c00                	addi	s0,sp,528
    30f8:	088a                	slli	a7,a7,0x2
    30fa:	0000                	unimp
        p++;
    30fc:	0019                	c.nop	6
    30fe:	0000                	unimp
    while (*p)
    3100:	2900                	fld	fs0,16(a0)
    3102:	0000                	unimp
}
    3104:	0404                	addi	s1,sp,512
    3106:	0000                	unimp
    3108:	0000546b          	0x546b
    310c:	0802                	c.slli64	a6
    310e:	8c04                	0x8c04
    3110:	0011                	c.nop	4
    3112:	0300                	addi	s0,sp,384
    3114:	0504                	addi	s1,sp,640
    3116:	6e69                	lui	t3,0x1a
    3118:	0074                	addi	a3,sp,12
    311a:	0402                	c.slli64	s0
    311c:	0008c707          	flq	fa4,0(a7)
    3120:	0200                	addi	s0,sp,256
    3122:	0508                	addi	a0,sp,640
    3124:	000001bb          	0x1bb
    3128:	1002                	c.slli	zero,0x20
    312a:	8704                	0x8704
    312c:	0011                	c.nop	4
    312e:	0200                	addi	s0,sp,256
    3130:	0601                	addi	a2,a2,0
    3132:	0264                	addi	s1,sp,268
    3134:	0000                	unimp
    3136:	0102                	c.slli64	sp
    3138:	6208                	flw	fa0,0(a2)
    313a:	0002                	c.slli64	zero
    313c:	0200                	addi	s0,sp,256
    313e:	0502                	c.slli64	a0
        flags = 0;
    3140:	00c9                	addi	ra,ra,18
    3142:	0000                	unimp
    3144:	0202                	c.slli64	tp
    3146:	0002ba07          	fld	fs4,0(t0)
        switch (*fmt)
    314a:	0200                	addi	s0,sp,256
        fmt++; // This also skips first '%'
    314c:	0504                	addi	s1,sp,640
    314e:	01c0                	addi	s0,sp,196
        switch (*fmt)
    3150:	0000                	unimp
    3152:	0402                	c.slli64	s0
    3154:	0008c207          	flq	ft4,0(a7)
    3158:	0200                	addi	s0,sp,256
    315a:	0708                	addi	a0,sp,896
    315c:	08bd                	addi	a7,a7,15
    315e:	0000                	unimp
    3160:	0404                	addi	s1,sp,512
    3162:	007f                	0x7f
    3164:	0000                	unimp
    3166:	0102                	c.slli64	sp
    3168:	6b08                	flw	fa0,16(a4)
    316a:	0002                	c.slli64	zero
        if (is_digit(*fmt))
    316c:	0200                	addi	s0,sp,256
    316e:	0404                	addi	s1,sp,512
    3170:	11ad                	addi	gp,gp,-21
    3172:	0000                	unimp
    3174:	7f05                	lui	t5,0xfffe1
    3176:	0000                	unimp
    3178:	9d00                	0x9d00
    317a:	0000                	unimp
        else if (*fmt == '*')
    317c:	0600                	addi	s0,sp,768
    317e:	00000033          	add	zero,zero,zero
        field_width = -1;
    3182:	ae07004f          	fnmadd.q	ft0,fa4,ft0,fs5,rne
        else if (*fmt == '*')
    3186:	0008                	0x8
        if (*fmt == '.')
    3188:	0100                	addi	s0,sp,128
    318a:	0d12                	slli	s10,s10,0x4
        precision = -1;
    318c:	008d                	addi	ra,ra,3
    318e:	0000                	unimp
        if (*fmt == '.')
    3190:	0305                	addi	t1,t1,1
    3192:	703c                	flw	fa5,96(s0)
        if (*fmt == 'l' || *fmt == 'L')
    3194:	0000                	unimp
    3196:	7a08                	flw	fa0,48(a2)
    3198:	0008                	0x8
    319a:	0100                	addi	s0,sp,128
    319c:	017c                	addi	a5,sp,140
    319e:	0079                	c.nop	30
        switch (*fmt)
    31a0:	0000                	unimp
    31a2:	2cfc                	fld	fa5,216(s1)
    31a4:	0000                	unimp
    31a6:	0008                	0x8
    31a8:	0000                	unimp
    31aa:	9c01                	0x9c01
    31ac:	00000153          	fadd.s	ft2,ft0,ft0,rne
    31b0:	6109                	addi	sp,sp,128
    31b2:	6772                	flw	fa4,28(sp)
    31b4:	0100                	addi	s0,sp,128
    31b6:	107c                	addi	a5,sp,44
    31b8:	0025                	c.nop	9
    31ba:	0000                	unimp
    31bc:	3a06                	fld	fs4,96(sp)
    31be:	0000                	unimp
                flags |= ZEROPAD;
    31c0:	b50a                	fsd	ft2,168(sp)
    31c2:	0008                	0x8
    for (str = buf; *fmt; fmt++)
    31c4:	0100                	addi	s0,sp,128
    31c6:	197c                	addi	a5,sp,188
    31c8:	002c                	addi	a1,sp,8
    31ca:	0000                	unimp
                flags |= LEFT;
    31cc:	3a2e                	fld	fs4,232(sp)
    31ce:	0000                	unimp
    for (str = buf; *fmt; fmt++)
    31d0:	480a                	lw	a6,128(sp)
    31d2:	0008                	0x8
    31d4:	0100                	addi	s0,sp,128
    31d6:	277c                	fld	fa5,200(a4)
                flags |= PLUS;
    31d8:	00000153          	fadd.s	ft2,ft0,ft0,rne
    for (str = buf; *fmt; fmt++)
    31dc:	00003a4f          	fnmadd.s	fs4,ft0,ft0,ft0,rup
    31e0:	ed0a                	fsw	ft2,152(sp)
    31e2:	0008                	0x8
                flags |= HEX_PREP;
    31e4:	0100                	addi	s0,sp,128
    31e6:	337c                	fld	fa5,224(a4)
    for (str = buf; *fmt; fmt++)
    31e8:	00000153          	fadd.s	ft2,ft0,ft0,rne
    31ec:	3a70                	fld	fa2,240(a2)
    31ee:	0000                	unimp
                flags |= SPACE;
    31f0:	6209                	lui	tp,0x2
    31f2:	6675                	lui	a2,0x1d
    for (str = buf; *fmt; fmt++)
    31f4:	0100                	addi	s0,sp,128
    31f6:	3f7c                	fld	fa5,248(a4)
    31f8:	0079                	c.nop	30
    31fa:	0000                	unimp
        if (*fmt == 'l' || *fmt == 'L')
    31fc:	3a91                	jal	2b50 <cvt+0x250>
    31fe:	0000                	unimp
    3200:	002d040b          	0x2d040b
                if (*fmt != '%')
    3204:	2900                	fld	fs0,16(a0)
    3206:	0c000003          	lb	zero,192(zero) # c0 <frame_dummy+0x1c>
            *str++ = *fmt;
    320a:	5a06                	lw	s4,96(sp)
                if (*fmt != '%')
    320c:	935b0493          	addi	s1,s6,-1739
                    *str++ = '%';
    3210:	0504                	addi	s1,sp,640
    3212:	0af503f3          	0xaf503f3
                if (*fmt)
    3216:	0c25                	addi	s8,s8,9
    3218:	5c01                	li	s8,-32
    321a:	5c01f303          	0x5c01f303
                    *str++ = '%';
    321e:	010c                	addi	a1,sp,128
    *str = '\0';
    3220:	035d                	addi	t1,t1,23
    3222:	0c5d01f3          	0xc5d01f3
    while (*p)
    3226:	5e01                	li	t3,-32
    3228:	5e01f303          	0x5e01f303
    int     n = 0;
    322c:	010c                	addi	a1,sp,128
    322e:	035f 01f3 0c5f      	0xc5f01f3035f
        switch (*fmt)
    3234:	6001                	0x6001
    3236:	3001                	jal	2a36 <cvt+0x136>
    3238:	0000                	unimp
    323a:	0404                	addi	s1,sp,512
            fmt++;
    323c:	002c                	addi	a1,sp,8
    323e:	0000                	unimp
        switch (*fmt)
    3240:	e808                	fsw	fa0,16(s0)
    3242:	0008                	0x8
    3244:	0100                	addi	s0,sp,128
    3246:	0176                	slli	sp,sp,0x1d
    3248:	0079                	c.nop	30
    324a:	0000                	unimp
    324c:	2cf0                	fld	fa2,216(s1)
    324e:	0000                	unimp
    3250:	000c                	0xc
    3252:	0000                	unimp
    3254:	9c01                	0x9c01
    3256:	000001ef          	jal	gp,3256 <ee_printf+0x222>
    325a:	6109                	addi	sp,sp,128
    325c:	6772                	flw	fa4,28(sp)
    325e:	0100                	addi	s0,sp,128
    3260:	0d76                	slli	s10,s10,0x1d
    3262:	0025                	c.nop	9
            if (is_digit(*fmt))
    3264:	0000                	unimp
    3266:	3ab2                	fld	fs5,296(sp)
    3268:	0000                	unimp
    326a:	b50a                	fsd	ft2,168(sp)
            ++fmt;
    326c:	0008                	0x8
    326e:	0100                	addi	s0,sp,128
            if (is_digit(*fmt))
    3270:	1676                	slli	a2,a2,0x3d
    3272:	002c                	addi	a1,sp,8
    3274:	0000                	unimp
    3276:	3ada                	fld	fs5,432(sp)
    3278:	0000                	unimp
    327a:	480a                	lw	a6,128(sp)
            else if (*fmt == '*')
    327c:	0008                	0x8
    327e:	0100                	addi	s0,sp,128
    3280:	2476                	fld	fs0,344(sp)
    3282:	00000153          	fadd.s	ft2,ft0,ft0,rne
            ++fmt;
    3286:	00003afb          	0x3afb
                precision = 0;
    328a:	ed0a                	fsw	ft2,152(sp)
    328c:	0008                	0x8
    328e:	0100                	addi	s0,sp,128
    int i = 0;
    3290:	3076                	fld	ft0,376(sp)
    3292:	00000153          	fadd.s	ft2,ft0,ft0,rne
    while (is_digit(**s))
    3296:	3b1c                	fld	fa5,48(a4)
        i = i * 10 + *((*s)++) - '0';
    3298:	0000                	unimp
    329a:	002cfc0b          	0x2cfc0b
    329e:	2900                	fld	fs0,16(a0)
    32a0:	0c000003          	lb	zero,192(zero) # c0 <frame_dummy+0x1c>
    32a4:	5a06                	lw	s4,96(sp)
    32a6:	935b0493          	addi	s1,s6,-1739
    32aa:	0504                	addi	s1,sp,640
    while (is_digit(**s))
    32ac:	0af503f3          	0xaf503f3
        i = i * 10 + *((*s)++) - '0';
    32b0:	0c25                	addi	s8,s8,9
    32b2:	5c01                	li	s8,-32
    while (is_digit(**s))
    32b4:	5c01f303          	0x5c01f303
    32b8:	010c                	addi	a1,sp,128
    32ba:	035d                	addi	t1,t1,23
    32bc:	0c5d01f3          	0xc5d01f3
    32c0:	5e01                	li	t3,-32
    32c2:	5e01f303          	0x5e01f303
            field_width = va_arg(args, int);
    32c6:	010c                	addi	a1,sp,128
        if (*fmt == '.')
    32c8:	055f 3c03 0070      	0x703c03055f
            fmt++;
    32ce:	0c00                	addi	s0,sp,528
            field_width = va_arg(args, int);
    32d0:	6001                	0x6001
    32d2:	3001                	jal	2ad2 <cvt+0x1d2>
            if (field_width < 0)
    32d4:	0000                	unimp
    32d6:	8208                	0x8208
                field_width = -field_width;
    32d8:	0008                	0x8
    32da:	0100                	addi	s0,sp,128
                flags |= LEFT;
    32dc:	0170                	addi	a2,sp,140
    32de:	0079                	c.nop	30
    32e0:	0000                	unimp
    32e2:	2ce8                	fld	fa0,216(s1)
                flags |= UPPERCASE;
    32e4:	0000                	unimp
    32e6:	0008                	0x8
                if (qualifier == 'l')
    32e8:	0000                	unimp
    32ea:	9c01                	0x9c01
                s = va_arg(args, char *);
    32ec:	00000293          	li	t0,0
                *str++ = (unsigned char)va_arg(args, int);
    32f0:	6109                	addi	sp,sp,128
    32f2:	6772                	flw	fa4,28(sp)
                if (qualifier == 'l')
    32f4:	0100                	addi	s0,sp,128
    32f6:	1070                	addi	a2,sp,44
        n = addr[i];
    32f8:	0025                	c.nop	9
    32fa:	0000                	unimp
    len = 0;
    32fc:	3b3d                	jal	303a <ee_printf+0x6>
    32fe:	0000                	unimp
    3300:	b50a                	fsd	ft2,168(sp)
    3302:	0008                	0x8
            if (n >= 100)
    3304:	0100                	addi	s0,sp,128
    3306:	1970                	addi	a2,sp,188
            tmp[len++] = digits[0];
    3308:	002c                	addi	a1,sp,8
    330a:	0000                	unimp
            tmp[len++] = '.';
    330c:	3b65                	jal	30c4 <ee_printf+0x90>
    330e:	0000                	unimp
            tmp[len++] = digits[0];
    3310:	480a                	lw	a6,128(sp)
    3312:	0008                	0x8
        if (n == 0)
    3314:	0100                	addi	s0,sp,128
    3316:	2770                	fld	fa2,200(a4)
            tmp[len++] = digits[0];
    3318:	00000153          	fadd.s	ft2,ft0,ft0,rne
    331c:	3b86                	fld	fs7,96(sp)
    331e:	0000                	unimp
    3320:	ed0a                	fsw	ft2,152(sp)
    3322:	0008                	0x8
    for (i = 0; i < 4; i++)
    3324:	0100                	addi	s0,sp,128
    3326:	3370                	fld	fa2,224(a4)
    3328:	00000153          	fadd.s	ft2,ft0,ft0,rne
            tmp[len++] = '.';
    332c:	00003ba7          	fsd	ft0,23(zero) # 17 <_start+0x7>
        n = addr[i];
    3330:	6209                	lui	tp,0x2
    3332:	6675                	lui	a2,0x1d
            tmp[len++] = '.';
    3334:	0100                	addi	s0,sp,128
    3336:	3f70                	fld	fa2,248(a4)
    3338:	0079                	c.nop	30
    333a:	0000                	unimp
    333c:	3bc8                	fld	fa0,176(a5)
    333e:	0000                	unimp
            tmp[len++] = digits[0];
    3340:	002cf00b          	0x2cf00b
        if (n == 0)
    3344:	2900                	fld	fs0,16(a0)
    3346:	0c000003          	lb	zero,192(zero) # c0 <frame_dummy+0x1c>
            if (n >= 100)
    334a:	5a06                	lw	s4,96(sp)
                tmp[len++] = digits[n / 100];
    334c:	935b0493          	addi	s1,s6,-1739
    3350:	0504                	addi	s1,sp,640
    3352:	0af503f3          	0xaf503f3
    3356:	0c25                	addi	s8,s8,9
    3358:	5c01                	li	s8,-32
    335a:	5c01f303          	0x5c01f303
    335e:	010c                	addi	a1,sp,128
    3360:	035d                	addi	t1,t1,23
    3362:	0c5d01f3          	0xc5d01f3
    3366:	5e01                	li	t3,-32
    3368:	5e01f303          	0x5e01f303
    336c:	010c                	addi	a1,sp,128
    336e:	035f 01f3 0c5f      	0xc5f01f3035f
    3374:	6001                	0x6001
    3376:	3101                	jal	2f76 <number+0x272>
                n          = n % 100;
    3378:	0000                	unimp
    337a:	a108                	fsd	fa0,0(a0)
    337c:	0008                	0x8
    337e:	0100                	addi	s0,sp,128
    3380:	016a                	slli	sp,sp,0x1a
    3382:	0079                	c.nop	30
                tmp[len++] = digits[n / 10];
    3384:	0000                	unimp
    3386:	2cdc                	fld	fa5,152(s1)
                n          = n % 100;
    3388:	0000                	unimp
    338a:	000c                	0xc
                tmp[len++] = digits[n / 10];
    338c:	0000                	unimp
    338e:	9c01                	0x9c01
    3390:	0329                	addi	t1,t1,10
    3392:	0000                	unimp
    3394:	6109                	addi	sp,sp,128
    3396:	6772                	flw	fa4,28(sp)
    3398:	0100                	addi	s0,sp,128
    339a:	0d6a                	slli	s10,s10,0x1a
    339c:	0025                	c.nop	9
    339e:	0000                	unimp
    33a0:	3be9                	jal	317a <ee_printf+0x146>
    33a2:	0000                	unimp
                n          = n % 10;
    33a4:	b50a                	fsd	ft2,168(sp)
    33a6:	0008                	0x8
                tmp[len++] = digits[n / 10];
    33a8:	0100                	addi	s0,sp,128
    33aa:	166a                	slli	a2,a2,0x3a
                n          = n % 10;
    33ac:	002c                	addi	a1,sp,8
    33ae:	0000                	unimp
                tmp[len++] = digits[n / 10];
    33b0:	3c11                	jal	2dc4 <number+0xc0>
    33b2:	0000                	unimp
                n          = n % 10;
    33b4:	480a                	lw	a6,128(sp)
    33b6:	0008                	0x8
                tmp[len++] = digits[n / 10];
    33b8:	0100                	addi	s0,sp,128
    33ba:	246a                	fld	fs0,152(sp)
    33bc:	00000153          	fadd.s	ft2,ft0,ft0,rne
    33c0:	3c32                	fld	fs8,296(sp)
    33c2:	0000                	unimp
    33c4:	ed0a                	fsw	ft2,152(sp)
    33c6:	0008                	0x8
            tmp[len++] = digits[n];
    33c8:	0100                	addi	s0,sp,128
    33ca:	306a                	fld	ft0,184(sp)
                n          = n % 10;
    33cc:	00000153          	fadd.s	ft2,ft0,ft0,rne
                tmp[len++] = digits[n / 10];
    33d0:	00003c53          	fadd.s	fs8,ft0,ft0,rup
    33d4:	002ce80b          	0x2ce80b
    33d8:	2900                	fld	fs0,16(a0)
    33da:	0c000003          	lb	zero,192(zero) # c0 <frame_dummy+0x1c>
            tmp[len++] = digits[n];
    33de:	5a06                	lw	s4,96(sp)
    33e0:	935b0493          	addi	s1,s6,-1739
    33e4:	0504                	addi	s1,sp,640
    33e6:	0af503f3          	0xaf503f3
    33ea:	0c25                	addi	s8,s8,9
    33ec:	5c01                	li	s8,-32
    33ee:	5c01f303          	0x5c01f303
    for (i = 0; i < 4; i++)
    33f2:	010c                	addi	a1,sp,128
    33f4:	035d                	addi	t1,t1,23
    33f6:	0c5d01f3          	0xc5d01f3
    if (!(type & LEFT))
    33fa:	5e01                	li	t3,-32
                    while (--field_width > 0)
    33fc:	5e01f303          	0x5e01f303
    if (!(type & LEFT))
    3400:	010c                	addi	a1,sp,128
    3402:	055f 3c03 0070      	0x703c03055f
            *str++ = ' ';
    3408:	0c00                	addi	s0,sp,528
    340a:	6001                	0x6001
    340c:	3101                	jal	300c <number+0x308>
    340e:	0000                	unimp
    3410:	630d                	lui	t1,0x3
    3412:	7476                	flw	fs0,124(sp)
    3414:	0100                	addi	s0,sp,128
    3416:	0115                	addi	sp,sp,5
    3418:	0079                	c.nop	30
    341a:	0000                	unimp
    341c:	2900                	fld	fs0,16(a0)
    341e:	0000                	unimp
        while (len < size--)
    3420:	03dc                	addi	a5,sp,452
    3422:	0000                	unimp
            *str++ = ' ';
    3424:	9c01                	0x9c01
    3426:	04b4                	addi	a3,sp,584
        while (len < size--)
    3428:	0000                	unimp
    342a:	6109                	addi	sp,sp,128
    342c:	6772                	flw	fa4,28(sp)
    342e:	0100                	addi	s0,sp,128
    while (len < size--)
    3430:	0c15                	addi	s8,s8,5
    3432:	0025                	c.nop	9
        *str++ = tmp[i];
    3434:	0000                	unimp
    3436:	3c74                	fld	fa3,248(s0)
    3438:	0000                	unimp
    343a:	b50a                	fsd	ft2,168(sp)
    343c:	0008                	0x8
    343e:	0100                	addi	s0,sp,128
    3440:	1515                	addi	a0,a0,-27
    3442:	002c                	addi	a1,sp,8
    3444:	0000                	unimp
    3446:	3d6c                	fld	fa1,248(a0)
    while (len < size--)
    3448:	0000                	unimp
    344a:	480a                	lw	a6,128(sp)
        *str++ = tmp[i];
    344c:	0008                	0x8
    344e:	0100                	addi	s0,sp,128
    while (len < size--)
    3450:	2315                	jal	3974 <__adddf3+0x60>
    3452:	00000153          	fadd.s	ft2,ft0,ft0,rne
        *str++ = ' ';
    3456:	3dbd                	jal	32d4 <ee_printf+0x2a0>
    3458:	0000                	unimp
    345a:	ed0a                	fsw	ft2,152(sp)
    345c:	0008                	0x8
    345e:	0100                	addi	s0,sp,128
    3460:	2f15                	jal	3b94 <__adddf3+0x280>
    3462:	00000153          	fadd.s	ft2,ft0,ft0,rne
    3466:	3dff                	0x3dff
    3468:	0000                	unimp
    346a:	6209                	lui	tp,0x2
    346c:	6675                	lui	a2,0x1d
    346e:	0100                	addi	s0,sp,128
    for (str = buf; *fmt; fmt++)
    3470:	3b15                	jal	31a4 <ee_printf+0x170>
    3472:	0079                	c.nop	30
    3474:	0000                	unimp
    3476:	3e44                	fld	fs1,184(a2)
    3478:	0000                	unimp
    347a:	d40a                	sw	sp,40(sp)
    347c:	0008                	0x8
    347e:	0100                	addi	s0,sp,128
        if (*fmt == 'l' || *fmt == 'L')
    3480:	4415                	li	s0,5
    3482:	002c                	addi	a1,sp,8
                if (!(flags & LEFT))
    3484:	0000                	unimp
    3486:	00003e83          	0x3e83
                    while (--field_width > 0)
    348a:	720e                	flw	ft4,224(sp)
                if (!(flags & LEFT))
    348c:	0032                	c.slli	zero,0xc
    348e:	1701                	addi	a4,a4,-32
                *str++ = (unsigned char)va_arg(args, int);
    3490:	2c0c                	fld	fa1,24(s0)
    3492:	0000                	unimp
    3494:	c800                	sw	s0,16(s0)
    3496:	003e                	c.slli	zero,0xf
    3498:	0f00                	addi	s0,sp,912
    349a:	6966                	flw	fs2,88(sp)
    349c:	0100                	addi	s0,sp,128
    349e:	0c18                	addi	a4,sp,528
    for (str = buf; *fmt; fmt++)
    34a0:	0025                	c.nop	9
    34a2:	0000                	unimp
                while (--field_width > 0)
    34a4:	7fb09103          	lh	sp,2043(ra)
                    *str++ = ' ';
    34a8:	006a660f          	0x6a660f
    34ac:	1801                	addi	a6,a6,-32
    34ae:	2510                	fld	fa2,8(a0)
    34b0:	0000                	unimp
    34b2:	0300                	addi	s0,sp,384
    34b4:	b891                	j	2d08 <number+0x4>
    34b6:	0e7f                	0xe7f
    for (str = buf; *fmt; fmt++)
    34b8:	0070                	addi	a2,sp,12
    34ba:	1901                	addi	s2,s2,-32
                    *str++ = ' ';
    34bc:	790c                	flw	fa1,48(a0)
    34be:	0000                	unimp
    for (str = buf; *fmt; fmt++)
    34c0:	4500                	lw	s0,8(a0)
    34c2:	0e00003f 01003170 	0x10031700e00003f
        if (*fmt == 'l' || *fmt == 'L')
    34ca:	1019                	c.nop	-26
                s = va_arg(args, char *);
    34cc:	0079                	c.nop	30
    34ce:	0000                	unimp
    34d0:	00003fd3          	fadd.s	ft11,ft0,ft0,rup
                if (!s)
    34d4:	7410                	flw	fa2,40(s0)
    34d6:	0029                	c.nop	10
    for (sc = s; *sc != '\0' && count--; ++sc)
    34d8:	b400                	fsd	fs0,40(s0)
    34da:	0004                	0x4
    34dc:	1100                	addi	s0,sp,160
    34de:	298c                	fld	fa1,16(a1)
    34e0:	0000                	unimp
    34e2:	04bd                	addi	s1,s1,15
    34e4:	0000                	unimp
    34e6:	0000040b          	0x40b
    34ea:	010c                	addi	a1,sp,128
    34ec:	035c                	addi	a5,sp,388
    34ee:	b091                	j	2d32 <number+0x2e>
    34f0:	007f                	0x7f
    34f2:	b010                	fsd	fa2,32(s0)
    34f4:	0029                	c.nop	10
    34f6:	c900                	sw	s0,16(a0)
    34f8:	0004                	0x4
    34fa:	1000                	addi	s0,sp,32
    34fc:	29f0                	fld	fa2,208(a1)
    34fe:	0000                	unimp
                if (!(flags & LEFT))
    3500:	04d2                	slli	s1,s1,0x14
    3502:	0000                	unimp
    return sc - s;
    3504:	f811                	bnez	s0,3418 <ee_printf+0x3e4>
    3506:	0029                	c.nop	10
                if (!(flags & LEFT))
    3508:	bd00                	fsd	fs0,56(a0)
    350a:	0004                	0x4
                for (i = 0; i < len; ++i)
    350c:	3200                	fld	fs0,32(a2)
    350e:	0004                	0x4
    3510:	0c00                	addi	s0,sp,528
    3512:	5c01                	li	s8,-32
    3514:	7fb09103          	lh	sp,2043(ra)
                    *str++ = *s++;
    3518:	1000                	addi	s0,sp,32
    351a:	2a0c                	fld	fa1,16(a2)
    351c:	0000                	unimp
    351e:	000004db          	0x4db
    3522:	1810                	addi	a2,sp,48
    3524:	002a                	c.slli	zero,0xa
    3526:	e400                	fsw	fs0,8(s0)
                for (i = 0; i < len; ++i)
    3528:	0004                	0x4
    352a:	1000                	addi	s0,sp,32
                    *str++ = *s++;
    352c:	2a1c                	fld	fa5,16(a2)
    352e:	0000                	unimp
    for (str = buf; *fmt; fmt++)
    3530:	04ed                	addi	s1,s1,27
    3532:	0000                	unimp
                while (len < field_width--)
    3534:	5010                	lw	a2,32(s0)
    3536:	002a                	c.slli	zero,0xa
                    *str++ = ' ';
    3538:	c900                	sw	s0,16(a0)
    353a:	0004                	0x4
    353c:	1000                	addi	s0,sp,32
    353e:	2ad0                	fld	fa2,144(a3)
    3540:	0000                	unimp
    3542:	04e4                	addi	s1,sp,588
    3544:	0000                	unimp
    3546:	d811                	beqz	s0,345a <ee_printf+0x426>
    3548:	002a                	c.slli	zero,0xa
    354a:	bd00                	fsd	fs0,56(a0)
    354c:	0004                	0x4
    354e:	7400                	flw	fs0,40(s0)
    for (str = buf; *fmt; fmt++)
    3550:	0004                	0x4
    3552:	0c00                	addi	s0,sp,528
    3554:	5c01                	li	s8,-32
    3556:	7fb89103          	lh	sp,2043(a7)
    355a:	1000                	addi	s0,sp,32
        if (*fmt == 'l' || *fmt == 'L')
    355c:	2af0                	fld	fa2,208(a3)
    355e:	0000                	unimp
                if (field_width == -1)
    3560:	04ed                	addi	s1,s1,27
    3562:	0000                	unimp
    3564:	b010                	fsd	fa2,32(s0)
    3566:	b400002b          	0xb400002b
                str = number(str,
    356a:	0004                	0x4
    356c:	1000                	addi	s0,sp,32
    356e:	2c18                	fld	fa4,24(s0)
    3570:	0000                	unimp
    3572:	04f6                	slli	s1,s1,0x1d
    3574:	0000                	unimp
    3576:	3810                	fld	fa2,48(s0)
    for (str = buf; *fmt; fmt++)
    3578:	002c                	addi	a1,sp,8
    357a:	e400                	fsw	fs0,8(s0)
                             (unsigned long)va_arg(args, void *),
    357c:	0004                	0x4
    357e:	1000                	addi	s0,sp,32
                str = number(str,
    3580:	2c5c                	fld	fa5,152(s0)
    3582:	0000                	unimp
    for (str = buf; *fmt; fmt++)
    3584:	04b4                	addi	a3,sp,584
    3586:	0000                	unimp
    3588:	8410                	0x8410
    358a:	002c                	addi	a1,sp,8
    358c:	e400                	fsw	fs0,8(s0)
    358e:	0004                	0x4
            else if (n >= 10)
    3590:	1000                	addi	s0,sp,32
    3592:	2ca0                	fld	fs0,88(s1)
    3594:	0000                	unimp
    3596:	04b4                	addi	a3,sp,584
                tmp[len++] = digits[n / 10];
    3598:	0000                	unimp
    359a:	1200                	addi	s0,sp,288
    359c:	08a6                	slli	a7,a7,0x9
    359e:	0000                	unimp
    35a0:	08a6                	slli	a7,a7,0x9
    35a2:	0000                	unimp
    35a4:	0008da13          	srli	s4,a7,0x0
    35a8:	da00                	sw	s0,48(a2)
    35aa:	0008                	0x8
    35ac:	0200                	addi	s0,sp,256
    35ae:	0f5c                	addi	a5,sp,916
    35b0:	7212                	flw	ft4,36(sp)
    35b2:	0008                	0x8
    35b4:	7200                	flw	fs0,32(a2)
    35b6:	0008                	0x8
    35b8:	1200                	addi	s0,sp,288
    35ba:	084e                	slli	a6,a6,0x13
    35bc:	0000                	unimp
    35be:	084e                	slli	a6,a6,0x13
                n          = n % 10;
    35c0:	0000                	unimp
    35c2:	5712                	lw	a4,36(sp)
                tmp[len++] = digits[n / 10];
    35c4:	0008                	0x8
    35c6:	5700                	lw	s0,40(a4)
                n          = n % 10;
    35c8:	0008                	0x8
    35ca:	1200                	addi	s0,sp,288
    35cc:	08df 0000 08df      	0x8df000008df
            tmp[len++] = digits[n];
    35d2:	0000                	unimp
    35d4:	6012                	flw	ft0,4(sp)
    35d6:	0008                	0x8
                tmp[len++] = digits[n / 10];
    35d8:	6000                	flw	fs0,0(s0)
    35da:	0008                	0x8
            tmp[len++] = digits[n];
    35dc:	1200                	addi	s0,sp,288
    35de:	086a                	slli	a6,a6,0x1a
    35e0:	0000                	unimp
    35e2:	086a                	slli	a6,a6,0x1a
                n          = n % 10;
    35e4:	0000                	unimp
    35e6:	0b00                	addi	s0,sp,400
            tmp[len++] = digits[n];
    35e8:	0009                	c.nop	2
    35ea:	0400                	addi	s0,sp,512
    35ec:	af00                	fsd	fs0,24(a4)
    35ee:	000d                	c.nop	3
    35f0:	0400                	addi	s0,sp,512
    35f2:	8201                	c.srli64	a2
    35f4:	0000                	unimp
    35f6:	0c00                	addi	s0,sp,528
    int i = 0;
    35f8:	0000093f 00000019 	0x190000093f
        i = i * 10 + *((*s)++) - '0';
    3600:	2d04                	fld	fs1,24(a0)
    3602:	0000                	unimp
    3604:	0c10                	addi	a2,sp,528
    3606:	0000                	unimp
    3608:	00005a97          	auipc	s5,0x5
    360c:	0402                	c.slli64	s0
    360e:	6905                	lui	s2,0x1
    3610:	746e                	flw	fs0,248(sp)
    3612:	0300                	addi	s0,sp,384
    while (is_digit(**s))
    3614:	0995                	addi	s3,s3,5
    3616:	0000                	unimp
        i = i * 10 + *((*s)++) - '0';
    3618:	d102                	sw	zero,160(sp)
    361a:	00003817          	auipc	a6,0x3
    while (is_digit(**s))
    361e:	0400                	addi	s0,sp,512
    3620:	0704                	addi	s1,sp,896
    3622:	000008c7          	fmsub.s	fa7,ft0,ft0,ft0,rne
    3626:	0804                	addi	s1,sp,16
            if (precision < 0)
    3628:	bb05                	j	3358 <ee_printf+0x324>
    362a:	0001                	nop
    362c:	0400                	addi	s0,sp,512
    362e:	0410                	addi	a2,sp,512
                ++fmt;
    3630:	00001187          	flh	ft3,0(zero) # 0 <RAM_START_ADDRESS>
    3634:	0204                	addi	s1,sp,256
    3636:	c905                	beqz	a0,3666 <ee_printf+0x632>
        if (*fmt == 'l' || *fmt == 'L')
    3638:	0000                	unimp
    363a:	0400                	addi	s0,sp,512
    363c:	0702                	c.slli64	a4
    363e:	02ba                	slli	t0,t0,0xe
    3640:	0000                	unimp
    3642:	0804                	addi	s1,sp,16
    3644:	8c04                	0x8c04
    3646:	0011                	c.nop	4
                precision = va_arg(args, int);
    3648:	0400                	addi	s0,sp,512
    364a:	0801                	addi	a6,a6,0
            if (precision < 0)
    364c:	0262                	slli	tp,tp,0x18
    364e:	0000                	unimp
    3650:	00099203          	lh	tp,0(s3)
    if (type & UPPERCASE)
    3654:	0300                	addi	s0,sp,384
    3656:	1866                	slli	a6,a6,0x39
    char *dig = digits;
    3658:	002c                	addi	a1,sp,8
    365a:	0000                	unimp
    if (type & UPPERCASE)
    365c:	0009b003          	0x9b003
        dig = upper_digits;
    3660:	0400                	addi	s0,sp,512
    3662:	1b28                	addi	a0,sp,440
    3664:	0081                	addi	ra,ra,0
    3666:	0000                	unimp
        if (i != 0)
    3668:	0405                	addi	s0,s0,1
    366a:	0980                	addi	s0,sp,208
    366c:	0000                	unimp
    366e:	0009b703          	0x9b703
            tmp[len++] = ':';
    3672:	0400                	addi	s0,sp,512
    3674:	00751863          	bne	a0,t2,3684 <ee_printf+0x650>
    3678:	0000                	unimp
    367a:	3806                	fld	fa6,96(sp)
        tmp[len++] = dig[addr[i] >> 4];
    367c:	0009                	c.nop	2
    367e:	0100                	addi	s0,sp,128
    for (i = 0; i < 6; i++)
    3680:	121e                	slli	tp,tp,0x27
    3682:	009f 0000 0407      	0x4070000009f
        tmp[len++] = dig[addr[i] >> 4];
    3688:	00a5                	addi	ra,ra,9
    368a:	0000                	unimp
        tmp[len++] = dig[addr[i] & 0x0F];
    368c:	0104                	addi	s1,sp,128
    368e:	6b08                	flw	fa0,16(a4)
        tmp[len++] = dig[addr[i] >> 4];
    3690:	0002                	c.slli64	zero
    3692:	0800                	addi	s0,sp,16
        tmp[len++] = dig[addr[i] & 0x0F];
    3694:	00a5                	addi	ra,ra,9
    3696:	0000                	unimp
        tmp[len++] = dig[addr[i] >> 4];
    3698:	3206                	fld	ft4,96(sp)
    369a:	0009                	c.nop	2
        tmp[len++] = dig[addr[i] & 0x0F];
    369c:	0100                	addi	s0,sp,128
    369e:	121f 009f 0000      	0x9f121f
    36a4:	db09                	beqz	a4,35b6 <ee_printf+0x582>
    36a6:	01000003          	lb	zero,16(zero) # 10 <_start>
    for (i = 0; i < 6; i++)
    36aa:	250102ab          	0x250102ab
    if (!(type & LEFT))
    36ae:	0000                	unimp
                    while (--field_width > 0)
    36b0:	3400                	fld	fs0,40(s0)
    36b2:	0030                	addi	a2,sp,8
    if (!(type & LEFT))
    36b4:	e000                	fsw	fs0,0(s0)
    36b6:	0008                	0x8
        while (len < size--)
    36b8:	0100                	addi	s0,sp,128
    36ba:	c69c                	sw	a5,8(a3)
    36bc:	0004                	0x4
    36be:	0a00                	addi	s0,sp,272
            *str++ = ' ';
    36c0:	6d66                	flw	fs10,88(sp)
    36c2:	0074                	addi	a3,sp,12
        while (len < size--)
    36c4:	ab01                	j	3bd4 <__adddf3+0x2c0>
    36c6:	1702                	slli	a4,a4,0x20
            *str++ = ' ';
    36c8:	04c6                	slli	s1,s1,0x11
    36ca:	0000                	unimp
    36cc:	4065                	c.li	zero,25
    36ce:	0000                	unimp
    36d0:	75620c0b          	0x75620c0b
        while (len < size--)
    36d4:	0066                	c.slli	zero,0x19
    36d6:	ad01                	j	3ce6 <__adddf3+0x3d2>
            *str++ = ' ';
    36d8:	0d02                	c.slli64	s10
    36da:	04cc                	addi	a1,sp,580
    while (len < size--)
    36dc:	0000                	unimp
    36de:	77a09103          	lh	sp,1914(ra)
            *str++ = ' ';
    36e2:	700d                	c.lui	zero,0xfffe3
    while (len < size--)
    36e4:	0100                	addi	s0,sp,128
    36e6:	02ad                	addi	t0,t0,11
        *str++ = tmp[i];
    36e8:	9f19                	0x9f19
    36ea:	0000                	unimp
    36ec:	9f00                	0x9f00
    36ee:	0040                	addi	s0,sp,4
    36f0:	0e00                	addi	s0,sp,784
    36f2:	0000096b          	0x96b
    36f6:	ae01                	j	3a06 <__adddf3+0xf2>
    36f8:	0d02                	c.slli64	s10
    36fa:	00000087          	vle8.v	v1,(zero),v0.t
    while (len < size--)
    36fe:	77849103          	lh	sp,1912(s1)
        *str++ = tmp[i];
    3702:	6e0d                	lui	t3,0x3
    3704:	0100                	addi	s0,sp,128
    3706:	250d02af          	vamoxorei8.v	v5,(s10),v16,v5,v0.t
    while (len < size--)
    370a:	0000                	unimp
        *str++ = ' ';
    370c:	bd00                	fsd	fs0,56(a0)
    370e:	0040                	addi	s0,sp,4
    3710:	0f00                	addi	s0,sp,912
    3712:	0504                	addi	s1,sp,640
    3714:	0000                	unimp
    3716:	3088                	fld	fa0,32(s1)
    3718:	0000                	unimp
    371a:	0580                	addi	s0,sp,704
    371c:	0000                	unimp
    371e:	b201                	j	301e <number+0x31a>
    3720:	0502                	c.slli64	a0
    3722:	0000049b          	0x49b
    3726:	3010                	fld	fa2,32(s0)
    3728:	0005                	c.nop	1
    372a:	fb00                	fsw	fs0,48(a4)
    372c:	0040                	addi	s0,sp,4
    372e:	1000                	addi	s0,sp,32
    for (str = buf; *fmt; fmt++)
    3730:	00000523          	sb	zero,10(zero) # a <RAM_START_ADDRESS+0xa>
    3734:	4221                	li	tp,8
    3736:	0000                	unimp
    3738:	1610                	addi	a2,sp,800
    373a:	0005                	c.nop	1
    373c:	7500                	flw	fs0,40(a0)
    373e:	11000043          	fmadd.s	ft0,ft0,fa6,ft2,rne
        *str++ = ' ';
    3742:	0580                	addi	s0,sp,704
    3744:	0000                	unimp
    3746:	3d12                	fld	fs10,288(sp)
    3748:	0005                	c.nop	1
    374a:	c500                	sw	s0,8(a0)
                if (*fmt)
    374c:	13000043          	fmadd.d	ft0,ft0,fa6,ft2,rne
    3750:	054a                	slli	a0,a0,0x12
    3752:	0000                	unimp
    3754:	5712                	lw	a4,36(sp)
    3756:	0005                	c.nop	1
                    *str++ = *fmt;
    3758:	e400                	fsw	fs0,8(s0)
    375a:	12000043          	fmadd.d	ft0,ft0,ft0,ft2,rne
                if (*fmt)
    375e:	0562                	slli	a0,a0,0x18
                    *str++ = *fmt;
    3760:	0000                	unimp
    3762:	43f8                	lw	a4,68(a5)
                    flags |= ZEROPAD;
    3764:	0000                	unimp
    3766:	6f12                	flw	ft10,4(sp)
                    field_width = 2 * sizeof(void *);
    3768:	0005                	c.nop	1
    376a:	bf00                	fsd	fs0,56(a4)
    376c:	0044                	addi	s1,sp,4
    376e:	1200                	addi	s0,sp,288
                    s = "<NULL>";
    3770:	057c                	addi	a5,sp,652
    3772:	0000                	unimp
    3774:	0000464b          	fnmsub.s	fa2,ft0,ft0,ft0,rmm
    3778:	8712                	mv	a4,tp
    377a:	0005                	c.nop	1
                    while (--field_width > 0)
    377c:	7f00                	flw	fs0,56(a4)
    377e:	0046                	c.slli	zero,0x11
                        *str++ = ' ';
    3780:	1200                	addi	s0,sp,288
    3782:	0594                	addi	a3,sp,704
    3784:	0000                	unimp
    3786:	4724                	lw	s1,72(a4)
    3788:	0000                	unimp
    378a:	a112                	fsd	ft4,128(sp)
    378c:	0005                	c.nop	1
    378e:	a200                	fsd	fs0,0(a2)
    3790:	0048                	addi	a0,sp,4
    3792:	1200                	addi	s0,sp,288
    3794:	05ae                	slli	a1,a1,0xb
    3796:	0000                	unimp
    3798:	48de                	lw	a7,212(sp)
    379a:	0000                	unimp
                    while (len < field_width--)
    379c:	bb14                	fsd	fa3,48(a4)
    379e:	0005                	c.nop	1
    37a0:	0f00                	addi	s0,sp,912
    37a2:	05cc                	addi	a1,sp,708
                        *str++ = ' ';
    37a4:	0000                	unimp
    37a6:	30a4                	fld	fs1,96(s1)
    37a8:	0000                	unimp
    37aa:	05a8                	addi	a0,sp,712
    37ac:	0000                	unimp
    37ae:	5701                	li	a4,-32
    37b0:	1b02                	slli	s6,s6,0x20
    37b2:	02b6                	slli	t0,t0,0xd
    37b4:	0000                	unimp
    37b6:	0115                	addi	sp,sp,5
    37b8:	0006                	c.slli	zero,0x1
    37ba:	1000                	addi	s0,sp,32
    37bc:	060d                	addi	a2,a2,3
    37be:	0000                	unimp
    37c0:	49ae                	lw	s3,200(sp)
    37c2:	0000                	unimp
    37c4:	f510                	fsw	fa2,40(a0)
    37c6:	0005                	c.nop	1
    37c8:	f000                	fsw	fs0,32(s0)
    37ca:	0049                	c.nop	18
    37cc:	1500                	addi	s0,sp,672
    37ce:	05e9                	addi	a1,a1,26
                flags |= SIGN;
    37d0:	0000                	unimp
    37d2:	dd10                	sw	a2,56(a0)
        base = 10;
    37d4:	0005                	c.nop	1
    37d6:	8a00                	0x8a00
                *str++ = (unsigned char)va_arg(args, int);
    37d8:	004a                	c.slli	zero,0x12
    37da:	1100                	addi	s0,sp,160
        str = number(str, num, base, field_width, precision, flags);
    37dc:	05a8                	addi	a0,sp,712
    37de:	0000                	unimp
    37e0:	1916                	slli	s2,s2,0x25
    37e2:	0006                	c.slli	zero,0x1
    37e4:	0300                	addi	s0,sp,384
    37e6:	8891                	andi	s1,s1,4
    37e8:	06251277          	0x6251277
    for (str = buf; *fmt; fmt++)
    37ec:	0000                	unimp
    37ee:	4ad4                	lw	a3,20(a3)
        str = number(str, num, base, field_width, precision, flags);
    37f0:	0000                	unimp
    37f2:	2f12                	fld	ft10,256(sp)
    for (str = buf; *fmt; fmt++)
    37f4:	0006                	c.slli	zero,0x1
    37f6:	3c00                	fld	fs0,56(s0)
    37f8:	1200004b          	fnmsub.d	ft0,ft0,ft0,ft2,rne
    37fc:	0639                	addi	a2,a2,14
    37fe:	0000                	unimp
                flags |= UPPERCASE;
    3800:	4b9c                	lw	a5,16(a5)
    3802:	0000                	unimp
                base = 16;
    3804:	00336417          	auipc	s0,0x336
    3808:	d400                	sw	s0,40(s0)
    380a:	0008                	0x8
                base = 8;
    380c:	1700                	addi	s0,sp,928
    380e:	3384                	fld	fs1,32(a5)
                break;
    3810:	0000                	unimp
    3812:	08dd                	addi	a7,a7,23
                s = va_arg(args, char *);
    3814:	0000                	unimp
    3816:	00339017          	auipc	zero,0x339
                *str++ = (unsigned char)va_arg(args, int);
    381a:	d400                	sw	s0,40(s0)
    381c:	0008                	0x8
    381e:	1700                	addi	s0,sp,928
    3820:	33b8                	fld	fa4,96(a5)
    3822:	0000                	unimp
    for (str = buf; *fmt; fmt++)
    3824:	08dd                	addi	a7,a7,23
    3826:	0000                	unimp
    3828:	2018                	fld	fa4,0(s0)
    382a:	0034                	addi	a3,sp,8
    382c:	e600                	fsw	fs0,8(a2)
    382e:	0008                	0x8
                flags |= SIGN;
    3830:	6100                	flw	fs0,0(a0)
    3832:	0002                	c.slli64	zero
                *str++ = (unsigned char)va_arg(args, int);
    3834:	1900                	addi	s0,sp,176
    3836:	5a01                	li	s4,-32
    3838:	8502                	jr	a0
    383a:	1900                	addi	s0,sp,176
        base = 10;
    383c:	5b01                	li	s6,-32
    383e:	0802                	c.slli64	a6
    3840:	1920                	addi	s0,sp,184
    3842:	5c01                	li	s8,-32
                base = 16;
    3844:	7802                	flw	fa6,32(sp)
    3846:	0000                	unimp
    3848:	4818                	lw	a4,16(s0)
    384a:	0034                	addi	a3,sp,8
        switch (*fmt)
    384c:	f100                	fsw	fs0,32(a0)
    384e:	0008                	0x8
    3850:	8200                	0x8200
    3852:	0002                	c.slli64	zero
                *str++ = (unsigned char)va_arg(args, int);
    3854:	1900                	addi	s0,sp,176
    3856:	5a01                	li	s4,-32
    3858:	8502                	jr	a0
    385a:	1900                	addi	s0,sp,176
    385c:	5b01                	li	s6,-32
    385e:	77889103          	lh	sp,1912(a7)
    3862:	0119                	addi	sp,sp,6
    3864:	025c                	addi	a5,sp,260
    3866:	1800008b          	0x1800008b
    386a:	346c                	fld	fa1,232(s0)
                base = 8;
    386c:	0000                	unimp
    386e:	08e6                	slli	a7,a7,0x19
    3870:	0000                	unimp
    3872:	02a2                	slli	t0,t0,0x8
                s = va_arg(args, char *);
    3874:	0000                	unimp
    3876:	0119                	addi	sp,sp,6
                flags |= UPPERCASE;
    3878:	025a                	slli	tp,tp,0x16
    387a:	0085                	addi	ra,ra,1
                *str++ = (unsigned char)va_arg(args, int);
    387c:	0119                	addi	sp,sp,6
    387e:	2008025b          	0x2008025b
    3882:	0119                	addi	sp,sp,6
    3884:	025c                	addi	a5,sp,260
    3886:	0078                	addi	a4,sp,12
    3888:	1700                	addi	s0,sp,928
    388a:	35b0                	fld	fa2,104(a1)
    388c:	0000                	unimp
    388e:	08d4                	addi	a3,sp,84
                base = 16;
    3890:	0000                	unimp
    3892:	0035d017          	auipc	zero,0x35d
    3896:	dd00                	sw	s0,56(a0)
                flags |= UPPERCASE;
    3898:	0008                	0x8
    389a:	0000                	unimp
                *str++ = (unsigned char)va_arg(args, int);
    389c:	1a00                	addi	s0,sp,304
    389e:	0850                	addi	a2,sp,20
    38a0:	0000                	unimp
    38a2:	3290                	fld	fa2,32(a3)
                base = 16;
    38a4:	0000                	unimp
    38a6:	0034                	addi	a3,sp,8
    38a8:	0000                	unimp
    38aa:	fe01                	bnez	a2,37c2 <ee_printf+0x78e>
                if (!(flags & LEFT))
    38ac:	1b01                	addi	s6,s6,-32
    38ae:	02da                	slli	t0,t0,0x16
    38b0:	0000                	unimp
    38b2:	6115                	addi	sp,sp,288
    return sc - s;
    38b4:	0008                	0x8
    38b6:	1200                	addi	s0,sp,288
    38b8:	0000086b          	0x86b
                *str++ = (unsigned char)va_arg(args, int);
    38bc:	4c55                	li	s8,21
    38be:	0000                	unimp
    38c0:	0f00                	addi	s0,sp,912
    38c2:	087c                	addi	a5,sp,28
    38c4:	0000                	unimp
    38c6:	34d8                	fld	fa4,168(s1)
    38c8:	0000                	unimp
    38ca:	05e8                	addi	a0,sp,716
    for (str = buf; *fmt; fmt++)
    38cc:	0000                	unimp
    38ce:	3401                	jal	32ce <ee_printf+0x29a>
    38d0:	1702                	slli	a4,a4,0x20
    38d2:	0311                	addi	t1,t1,4
    38d4:	0000                	unimp
    38d6:	9710                	0x9710
    38d8:	0008                	0x8
    38da:	7300                	flw	fs0,32(a4)
    38dc:	004c                	addi	a1,sp,4
    38de:	1000                	addi	s0,sp,32
                    while (len < field_width--)
    38e0:	088d                	addi	a7,a7,3
    38e2:	0000                	unimp
    38e4:	4c88                	lw	a0,24(s1)
    38e6:	0000                	unimp
                    *str++ = *fmt;
    38e8:	e811                	bnez	s0,38fc <ee_printf+0x8c8>
    38ea:	0005                	c.nop	1
    38ec:	1200                	addi	s0,sp,288
    38ee:	000008a3          	sb	zero,17(zero) # 11 <_start+0x1>
    38f2:	00004c9b          	0x4c9b
        while (len < size--)
    38f6:	0000                	unimp
        while (len < size--)
    38f8:	501a                	0x501a
    38fa:	0008                	0x8
        while (len < size--)
    38fc:	f800                	fsw	fs0,48(s0)
    38fe:	0035                	c.nop	13
    3900:	3000                	fld	fs0,32(s0)
    3902:	0000                	unimp
    3904:	0100                	addi	s0,sp,128
    3906:	0210                	addi	a2,sp,256
    3908:	351d                	jal	372e <ee_printf+0x6fa>
    390a:	15000003          	lb	zero,336(zero) # 150 <calc_func+0x30>
    390e:	0861                	addi	a6,a6,24
    3910:	0000                	unimp
    3912:	6b12                	flw	fs6,4(sp)
    3914:	0008                	0x8
    3916:	b900                	fsd	fs0,48(a0)
    3918:	004c                	addi	a1,sp,4
    391a:	0000                	unimp
    391c:	00065c0f          	0x65c0f
    3920:	5400                	lw	s0,40(s0)
    3922:	0036                	c.slli	zero,0xd
    3924:	1000                	addi	s0,sp,32
    3926:	0006                	c.slli	zero,0x1
    3928:	0100                	addi	s0,sp,128
    392a:	0251                	addi	tp,tp,20
    392c:	0003f61b          	0x3f61b
    3930:	1500                	addi	s0,sp,672
    3932:	0691                	addi	a3,a3,4
    3934:	0000                	unimp
    3936:	9d10                	0x9d10
    3938:	0006                	c.slli	zero,0x1
    393a:	d900                	sw	s0,48(a0)
    393c:	004c                	addi	a1,sp,4
    393e:	1000                	addi	s0,sp,32
    3940:	0685                	addi	a3,a3,1
    3942:	0000                	unimp
    3944:	4cec                	lw	a1,92(s1)
    3946:	0000                	unimp
    3948:	7915                	lui	s2,0xfffe5
    394a:	0006                	c.slli	zero,0x1
    394c:	1000                	addi	s0,sp,32
    394e:	066d                	addi	a2,a2,27
    3950:	0000                	unimp
    3952:	4d54                	lw	a3,28(a0)
    3954:	0000                	unimp
    3956:	1011                	c.nop	-28
    3958:	0006                	c.slli	zero,0x1
    395a:	1600                	addi	s0,sp,800
    395c:	06a9                	addi	a3,a3,10
    395e:	0000                	unimp
    3960:	77889103          	lh	sp,1912(a7)
    3964:	b512                	fsd	ft4,168(sp)
    3966:	0006                	c.slli	zero,0x1
    3968:	9300                	0x9300
    396a:	004d                	c.nop	19
    396c:	1200                	addi	s0,sp,288
    396e:	06c1                	addi	a3,a3,16
    3970:	0000                	unimp
    3972:	4dc1                	li	s11,16
    3974:	0000                	unimp
    3976:	cb12                	sw	tp,148(sp)
    3978:	0006                	c.slli	zero,0x1
    397a:	e100                	fsw	fs0,0(a0)
    397c:	004d                	c.nop	19
    397e:	1800                	addi	s0,sp,48
    3980:	36dc                	fld	fa5,168(a3)
    3982:	0000                	unimp
    3984:	08e6                	slli	a7,a7,0x19
    3986:	0000                	unimp
    3988:	03b8                	addi	a4,sp,456
    398a:	0000                	unimp
    398c:	0119                	addi	sp,sp,6
    398e:	025a                	slli	tp,tp,0x16
    3990:	0085                	addi	ra,ra,1
    3992:	0119                	addi	sp,sp,6
    3994:	2008025b          	0x2008025b
    3998:	0119                	addi	sp,sp,6
    399a:	025c                	addi	a5,sp,260
    399c:	0088                	addi	a0,sp,64
    399e:	1800                	addi	s0,sp,48
    39a0:	36fc                	fld	fa5,232(a3)
    39a2:	0000                	unimp
    39a4:	08f1                	addi	a7,a7,28
    39a6:	0000                	unimp
    39a8:	03d8                	addi	a4,sp,452
    39aa:	0000                	unimp
    39ac:	0119                	addi	sp,sp,6
    39ae:	025a                	slli	tp,tp,0x16
    39b0:	0085                	addi	ra,ra,1
    39b2:	0119                	addi	sp,sp,6
    39b4:	8891035b          	0x8891035b
    39b8:	5c011977          	0x5c011977
    39bc:	4101                	li	sp,0
    39be:	1b00                	addi	s0,sp,432
    39c0:	372c                	fld	fa1,104(a4)
    39c2:	0000                	unimp
    39c4:	08e6                	slli	a7,a7,0x19
    39c6:	0000                	unimp
    39c8:	0119                	addi	sp,sp,6
    39ca:	025a                	slli	tp,tp,0x16
    39cc:	0085                	addi	ra,ra,1
    39ce:	0119                	addi	sp,sp,6
    39d0:	2008025b          	0x2008025b
    39d4:	0119                	addi	sp,sp,6
    39d6:	025c                	addi	a5,sp,260
    39d8:	0088                	addi	a0,sp,64
    39da:	0000                	unimp
    39dc:	1800                	addi	s0,sp,48
    39de:	34b8                	fld	fa4,104(s1)
    39e0:	0000                	unimp
    39e2:	08e6                	slli	a7,a7,0x19
    39e4:	0000                	unimp
    39e6:	0416                	slli	s0,s0,0x5
    39e8:	0000                	unimp
    39ea:	0119                	addi	sp,sp,6
    39ec:	025a                	slli	tp,tp,0x16
    39ee:	0185                	addi	gp,gp,1
    39f0:	0119                	addi	sp,sp,6
    39f2:	2008025b          	0x2008025b
    39f6:	0119                	addi	sp,sp,6
    39f8:	025c                	addi	a5,sp,260
    39fa:	0079                	c.nop	30
    39fc:	1800                	addi	s0,sp,48
    39fe:	354c                	fld	fa1,168(a0)
    3a00:	0000                	unimp
    3a02:	08e6                	slli	a7,a7,0x19
    3a04:	0000                	unimp
    3a06:	0436                	slli	s0,s0,0xd
    3a08:	0000                	unimp
    3a0a:	0119                	addi	sp,sp,6
    3a0c:	025a                	slli	tp,tp,0x16
    3a0e:	0085                	addi	ra,ra,1
    3a10:	0119                	addi	sp,sp,6
    3a12:	2008025b          	0x2008025b
    3a16:	0119                	addi	sp,sp,6
    3a18:	025c                	addi	a5,sp,260
    3a1a:	0079                	c.nop	30
    3a1c:	1800                	addi	s0,sp,48
    3a1e:	3578                	fld	fa4,232(a0)
    3a20:	0000                	unimp
    3a22:	06d8                	addi	a4,sp,836
    3a24:	0000                	unimp
    3a26:	0000044f          	fnmadd.s	fs0,ft0,ft0,ft0,rne
    3a2a:	0119                	addi	sp,sp,6
    3a2c:	025a                	slli	tp,tp,0x16
    3a2e:	0085                	addi	ra,ra,1
    3a30:	0119                	addi	sp,sp,6
    3a32:	015c                	addi	a5,sp,132
    3a34:	0040                	addi	s0,sp,4
    3a36:	9418                	0x9418
    3a38:	e6000037          	lui	zero,0xe6000
    3a3c:	0008                	0x8
    3a3e:	6900                	flw	fs0,16(a0)
    3a40:	0004                	0x4
    3a42:	1900                	addi	s0,sp,176
    3a44:	5b01                	li	s6,-32
    3a46:	0802                	c.slli64	a6
    3a48:	1920                	addi	s0,sp,184
    3a4a:	5c01                	li	s8,-32
    3a4c:	7902                	flw	fs2,32(sp)
    3a4e:	0000                	unimp
    3a50:	bc18                	fsd	fa4,56(s0)
    3a52:	e6000037          	lui	zero,0xe6000
    3a56:	0008                	0x8
    3a58:	8900                	0x8900
    3a5a:	0004                	0x4
    3a5c:	1900                	addi	s0,sp,176
    3a5e:	5a01                	li	s4,-32
    3a60:	8502                	jr	a0
    3a62:	1900                	addi	s0,sp,176
    3a64:	5b01                	li	s6,-32
    3a66:	0802                	c.slli64	a6
    3a68:	1920                	addi	s0,sp,184
    3a6a:	5c01                	li	s8,-32
    3a6c:	8902                	jr	s2
    3a6e:	0000                	unimp
    3a70:	0037ec1b          	0x37ec1b
    3a74:	d800                	sw	s0,48(s0)
    3a76:	0006                	c.slli	zero,0x1
    3a78:	1900                	addi	s0,sp,176
    3a7a:	5a01                	li	s4,-32
    3a7c:	8502                	jr	a0
    3a7e:	0000                	unimp
    3a80:	0000                	unimp
    3a82:	dd1c                	sw	a5,56(a0)
    3a84:	0004                	0x4
    3a86:	e800                	fsw	fs0,16(s0)
    3a88:	0030                	addi	a2,sp,8
    3a8a:	3800                	fld	fs0,48(s0)
    3a8c:	0006                	c.slli	zero,0x1
    3a8e:	0100                	addi	s0,sp,128
    3a90:	100902b7          	lui	t0,0x10090
    3a94:	000004eb          	0x4eb
    3a98:	4e2e                	lw	t3,200(sp)
    3a9a:	0000                	unimp
    3a9c:	3811                	jal	32b0 <ee_printf+0x27c>
    3a9e:	0006                	c.slli	zero,0x1
    3aa0:	1200                	addi	s0,sp,288
    3aa2:	04f6                	slli	s1,s1,0x1d
    3aa4:	0000                	unimp
    3aa6:	4e41                	li	t3,16
    3aa8:	0000                	unimp
    3aaa:	0000                	unimp
    3aac:	0700                	addi	s0,sp,896
    3aae:	ac04                	fsd	fs1,24(s0)
    3ab0:	0000                	unimp
    3ab2:	1d00                	addi	s0,sp,688
    3ab4:	00a5                	addi	ra,ra,9
    3ab6:	0000                	unimp
    3ab8:	04dd                	addi	s1,s1,23
    3aba:	0000                	unimp
    3abc:	381e                	fld	fa6,480(sp)
    3abe:	0000                	unimp
    3ac0:	ff00                	fsw	fs0,56(a4)
    3ac2:	3f1f0003          	lb	zero,1009(t5) # fffe13f1 <RAM_SIZE+0xfffd13f1>
    3ac6:	0005                	c.nop	1
    3ac8:	0100                	addi	s0,sp,128
    3aca:	01010297          	auipc	t0,0x1010
    3ace:	0504                	addi	s1,sp,640
    3ad0:	0000                	unimp
    3ad2:	6320                	flw	fs0,64(a4)
    3ad4:	0100                	addi	s0,sp,128
    3ad6:	a5150297          	auipc	t0,0xa5150
    3ada:	0000                	unimp
    3adc:	2100                	fld	fs0,0(a0)
    3ade:	00000927          	vse8.v	v18,(zero),v0.t
    3ae2:	9901                	andi	a0,a0,-32
    3ae4:	0802                	c.slli64	a6
    3ae6:	009f 0000 2200      	0x22000000009f
    3aec:	000009bf 0101cd01 	0x101cd01000009bf
    3af4:	0025                	c.nop	9
    3af6:	0000                	unimp
    3af8:	c501                	beqz	a0,3b00 <__adddf3+0x1ec>
    3afa:	0005                	c.nop	1
    3afc:	2000                	fld	fs0,0(s0)
    3afe:	7562                	flw	fa0,56(sp)
    3b00:	0066                	c.slli	zero,0x19
    3b02:	cd01                	beqz	a0,3b1a <__adddf3+0x206>
    3b04:	1301                	addi	t1,t1,-32
    3b06:	009f 0000 6620      	0x66200000009f
    3b0c:	746d                	lui	s0,0xffffb
    3b0e:	0100                	addi	s0,sp,128
    3b10:	01cd                	addi	gp,gp,19
    3b12:	c624                	sw	s1,72(a2)
    3b14:	0004                	0x4
    3b16:	2300                	fld	fs0,0(a4)
    3b18:	0000096b          	0x96b
    3b1c:	cd01                	beqz	a0,3b34 <__adddf3+0x220>
    3b1e:	3101                	jal	371e <ee_printf+0x6ea>
    3b20:	00000087          	vle8.v	v1,(zero),v0.t
    3b24:	6c24                	flw	fs1,88(s0)
    3b26:	6e65                	lui	t3,0x19
    3b28:	0100                	addi	s0,sp,128
    3b2a:	251301cf          	fnmadd.h	ft3,ft6,fa7,ft4,rne
    3b2e:	0000                	unimp
    3b30:	2400                	fld	fs0,8(s0)
    3b32:	756e                	flw	fa0,248(sp)
    3b34:	006d                	c.nop	27
    3b36:	d001                	beqz	s0,3a36 <__adddf3+0x122>
    3b38:	1301                	addi	t1,t1,-32
    3b3a:	05c5                	addi	a1,a1,17
    3b3c:	0000                	unimp
    3b3e:	6924                	flw	fs1,80(a0)
    3b40:	0100                	addi	s0,sp,128
    3b42:	01d1                	addi	gp,gp,20
    3b44:	00002513          	slti	a0,zero,0
    3b48:	2100                	fld	fs0,0(a0)
    3b4a:	09d2                	slli	s3,s3,0x14
    3b4c:	0000                	unimp
    3b4e:	d101                	beqz	a0,3a4e <__adddf3+0x13a>
    3b50:	1601                	addi	a2,a2,-32
    3b52:	0025                	c.nop	9
    3b54:	0000                	unimp
    3b56:	7324                	flw	fs1,96(a4)
    3b58:	7274                	flw	fa3,100(a2)
    3b5a:	0100                	addi	s0,sp,128
    3b5c:	01d2                	slli	gp,gp,0x14
    3b5e:	00009f13          	slli	t5,ra,0x0
    3b62:	2400                	fld	fs0,8(s0)
    3b64:	d3010073          	0xd3010073
    3b68:	1301                	addi	t1,t1,-32
    3b6a:	009f 0000 6521      	0x65210000009f
    3b70:	0009                	c.nop	2
    3b72:	0100                	addi	s0,sp,128
    3b74:	01d5                	addi	gp,gp,21
    3b76:	2509                	jal	4178 <__divdf3+0x8c>
    3b78:	0000                	unimp
    3b7a:	2100                	fld	fs0,0(a0)
    3b7c:	0914                	addi	a3,sp,144
    3b7e:	0000                	unimp
    3b80:	d701                	beqz	a4,3a88 <__adddf3+0x174>
    3b82:	0901                	addi	s2,s2,0
    3b84:	0025                	c.nop	9
    3b86:	0000                	unimp
    3b88:	d721                	beqz	a4,3ad0 <__adddf3+0x1bc>
    3b8a:	0009                	c.nop	2
    3b8c:	0100                	addi	s0,sp,128
    3b8e:	01d8                	addi	a4,sp,196
    3b90:	2509                	jal	4192 <__divdf3+0xa6>
    3b92:	0000                	unimp
    3b94:	2100                	fld	fs0,0(a0)
    3b96:	099c                	addi	a5,sp,208
    3b98:	0000                	unimp
    3b9a:	da01                	beqz	a2,3aaa <__adddf3+0x196>
    3b9c:	0901                	addi	s2,s2,0
    3b9e:	0025                	c.nop	9
    3ba0:	0000                	unimp
    3ba2:	2025                	jal	3bca <__adddf3+0x2b6>
    3ba4:	0009                	c.nop	2
    3ba6:	0100                	addi	s0,sp,128
    3ba8:	01e6                	slli	gp,gp,0x19
    3baa:	0005                	c.nop	1
    3bac:	0404                	addi	s1,sp,512
    3bae:	0008c207          	flq	ft4,0(a7)
    3bb2:	2600                	fld	fs0,8(a2)
    3bb4:	0970                	addi	a2,sp,156
    3bb6:	0000                	unimp
    3bb8:	ac01                	j	3dc8 <__adddf3+0x4b4>
    3bba:	9f01                	0x9f01
    3bbc:	0000                	unimp
    3bbe:	0100                	addi	s0,sp,128
    3bc0:	0646                	slli	a2,a2,0x11
    3bc2:	0000                	unimp
    3bc4:	72747327          	0x72747327
    3bc8:	0100                	addi	s0,sp,128
    3bca:	0dac                	addi	a1,sp,728
    3bcc:	009f 0000 2d28      	0x2d280000009f
    3bd2:	0009                	c.nop	2
    3bd4:	0100                	addi	s0,sp,128
    3bd6:	21ac                	fld	fa1,64(a1)
    3bd8:	0646                	slli	a2,a2,0x11
    3bda:	0000                	unimp
    3bdc:	b528                	fsd	fa0,104(a0)
    3bde:	0002                	c.slli64	zero
    3be0:	0100                	addi	s0,sp,128
    3be2:	2bac                	fld	fa1,80(a5)
    3be4:	0025                	c.nop	9
    3be6:	0000                	unimp
    3be8:	d728                	sw	a0,104(a4)
    3bea:	0009                	c.nop	2
    3bec:	0100                	addi	s0,sp,128
    3bee:	35ac                	fld	fa1,104(a1)
    3bf0:	0025                	c.nop	9
    3bf2:	0000                	unimp
    3bf4:	b028                	fsd	fa0,96(s0)
    3bf6:	000a                	c.slli	zero,0x2
    3bf8:	0100                	addi	s0,sp,128
    3bfa:	44ac                	lw	a1,72(s1)
    3bfc:	0025                	c.nop	9
    3bfe:	0000                	unimp
    3c00:	7429                	lui	s0,0xfffea
    3c02:	706d                	c.lui	zero,0xffffb
    3c04:	0100                	addi	s0,sp,128
    3c06:	0aae                	slli	s5,s5,0xb
    3c08:	064c                	addi	a1,sp,772
    3c0a:	0000                	unimp
    3c0c:	6929                	lui	s2,0xa
    3c0e:	0100                	addi	s0,sp,128
    3c10:	00250aaf          	vamoaddei8.v	zero,(a0),v2,v21,v0.t
    3c14:	0000                	unimp
    3c16:	6e29                	lui	t3,0xa
    3c18:	0100                	addi	s0,sp,128
    3c1a:	00250daf          	vamoaddei8.v	zero,(a0),v2,v27,v0.t
    3c1e:	0000                	unimp
    3c20:	6c29                	lui	s8,0xa
    3c22:	6e65                	lui	t3,0x19
    3c24:	0100                	addi	s0,sp,128
    3c26:	002510af          	0x2510af
    3c2a:	0000                	unimp
    3c2c:	0700                	addi	s0,sp,896
    3c2e:	6204                	flw	fs1,0(a2)
    3c30:	0000                	unimp
    3c32:	1d00                	addi	s0,sp,688
    3c34:	00a5                	addi	ra,ra,9
    3c36:	0000                	unimp
    3c38:	065c                	addi	a5,sp,772
    3c3a:	0000                	unimp
    3c3c:	382a                	fld	fa6,168(sp)
    3c3e:	0000                	unimp
    3c40:	1700                	addi	s0,sp,928
    3c42:	2600                	fld	fs0,8(a2)
    3c44:	092c                	addi	a1,sp,152
    3c46:	0000                	unimp
    3c48:	8f01                	sub	a4,a4,s0
    3c4a:	9f01                	0x9f01
    3c4c:	0000                	unimp
    3c4e:	0100                	addi	s0,sp,128
    3c50:	06d8                	addi	a4,sp,836
    3c52:	0000                	unimp
    3c54:	72747327          	0x72747327
    3c58:	0100                	addi	s0,sp,128
    3c5a:	009f0d8f          	0x9f0d8f
    3c5e:	0000                	unimp
    3c60:	2d28                	fld	fa0,88(a0)
    3c62:	0009                	c.nop	2
    3c64:	0100                	addi	s0,sp,128
    3c66:	0646218f          	0x646218f
    3c6a:	0000                	unimp
    3c6c:	b528                	fsd	fa0,104(a0)
    3c6e:	0002                	c.slli64	zero
    3c70:	0100                	addi	s0,sp,128
    3c72:	00252b8f          	0x252b8f
    3c76:	0000                	unimp
    3c78:	d728                	sw	a0,104(a4)
    3c7a:	0009                	c.nop	2
    3c7c:	0100                	addi	s0,sp,128
    3c7e:	0025358f          	0x25358f
    3c82:	0000                	unimp
    3c84:	b028                	fsd	fa0,96(s0)
    3c86:	000a                	c.slli	zero,0x2
    3c88:	0100                	addi	s0,sp,128
    3c8a:	0025448f          	0x25448f
    3c8e:	0000                	unimp
    3c90:	7429                	lui	s0,0xfffea
    3c92:	706d                	c.lui	zero,0xffffb
    3c94:	0100                	addi	s0,sp,128
    3c96:	0b91                	addi	s7,s7,4
    3c98:	064c                	addi	a1,sp,772
    3c9a:	0000                	unimp
    3c9c:	6429                	lui	s0,0xa
    3c9e:	6769                	lui	a4,0x1a
    3ca0:	0100                	addi	s0,sp,128
    3ca2:	0b92                	slli	s7,s7,0x4
    3ca4:	009f 0000 6929      	0x69290000009f
    3caa:	0100                	addi	s0,sp,128
    3cac:	00250b93          	addi	s7,a0,2
    3cb0:	0000                	unimp
    3cb2:	6c29                	lui	s8,0xa
    3cb4:	6e65                	lui	t3,0x19
    3cb6:	0100                	addi	s0,sp,128
    3cb8:	00250e93          	addi	t4,a0,2
    3cbc:	0000                	unimp
    3cbe:	2b00                	fld	fs0,16(a4)
    3cc0:	000009cb          	fnmsub.s	fs3,ft0,ft0,ft0,rne
    3cc4:	3501                	jal	3ac4 <__adddf3+0x1b0>
    3cc6:	9f01                	0x9f01
    3cc8:	0000                	unimp
    3cca:	0400                	addi	s0,sp,512
    3ccc:	002d                	c.nop	11
    3cce:	2400                	fld	fs0,8(s0)
    3cd0:	01000003          	lb	zero,16(zero) # 10 <_start>
    3cd4:	399c                	fld	fa5,48(a1)
    3cd6:	0008                	0x8
    3cd8:	2c00                	fld	fs0,24(s0)
    3cda:	00727473          	csrrci	s0,0x7,4
    3cde:	3501                	jal	3ade <__adddf3+0x1ca>
    3ce0:	9f0e                	add	t5,t5,gp
    3ce2:	0000                	unimp
    3ce4:	5900                	lw	s0,48(a0)
    3ce6:	004e                	c.slli	zero,0x13
    3ce8:	2c00                	fld	fs0,24(s0)
    3cea:	756e                	flw	fa0,248(sp)
    3cec:	006d                	c.nop	27
    3cee:	3501                	jal	3aee <__adddf3+0x1da>
    3cf0:	3918                	fld	fa4,48(a0)
    3cf2:	0008                	0x8
    3cf4:	5a00                	lw	s0,48(a2)
    3cf6:	2d00004f          	fnmadd.h	ft0,ft0,fa6,ft5,rne
    3cfa:	09d2                	slli	s3,s3,0x14
    3cfc:	0000                	unimp
    3cfe:	3501                	jal	3afe <__adddf3+0x1ea>
    3d00:	2521                	jal	4308 <__divdf3+0x21c>
    3d02:	0000                	unimp
    3d04:	8e00                	0x8e00
    3d06:	2d00004f          	fnmadd.h	ft0,ft0,fa6,ft5,rne
    3d0a:	02b5                	addi	t0,t0,13
    3d0c:	0000                	unimp
    3d0e:	3501                	jal	3b0e <__adddf3+0x1fa>
    3d10:	0000252b          	0x252b
    3d14:	fc00                	fsw	fs0,56(s0)
    3d16:	2d00004f          	fnmadd.h	ft0,ft0,fa6,ft5,rne
    3d1a:	000009d7          	vadd.vv	v19,v0,v0,v0.t
    3d1e:	3501                	jal	3b1e <__adddf3+0x20a>
    3d20:	2535                	jal	434c <__divdf3+0x260>
    3d22:	0000                	unimp
    3d24:	ba00                	fsd	fs0,48(a2)
    3d26:	0050                	addi	a2,sp,4
    3d28:	2d00                	fld	fs0,24(a0)
    3d2a:	0ab0                	addi	a2,sp,344
    3d2c:	0000                	unimp
    3d2e:	3501                	jal	3b2e <__adddf3+0x21a>
    3d30:	2544                	fld	fs1,136(a0)
    3d32:	0000                	unimp
    3d34:	4100                	lw	s0,0(a0)
    3d36:	0051                	c.nop	20
    3d38:	2e00                	fld	fs0,24(a2)
    3d3a:	37010063          	beq	sp,a6,409a <__adddf3+0x786>
    3d3e:	0000a50b          	0xa50b
    3d42:	7500                	flw	fs0,40(a0)
    3d44:	0051                	c.nop	20
    3d46:	2f00                	fld	fs0,24(a4)
    3d48:	08ed                	addi	a7,a7,27
    3d4a:	0000                	unimp
    3d4c:	3701                	jal	3c4c <__adddf3+0x338>
    3d4e:	a50e                	fsd	ft3,136(sp)
    3d50:	0000                	unimp
    3d52:	b100                	fsd	fs0,32(a0)
    3d54:	0051                	c.nop	20
    3d56:	3000                	fld	fs0,32(s0)
    3d58:	6d74                	flw	fa3,92(a0)
    3d5a:	0070                	addi	a2,sp,12
    3d5c:	3701                	jal	3c5c <__adddf3+0x348>
    3d5e:	4014                	lw	a3,0(s0)
    3d60:	0008                	0x8
    3d62:	0300                	addi	s0,sp,384
    3d64:	fc91                	bnez	s1,3c80 <__adddf3+0x36c>
    3d66:	2e7e                	fld	ft8,472(sp)
    3d68:	6964                	flw	fs1,84(a0)
    3d6a:	38010067          	jr	896(sp) # ad34 <__stack_top+0xca4>
    3d6e:	00009f0b          	0x9f0b
    3d72:	1100                	addi	s0,sp,160
    3d74:	0052                	c.slli	zero,0x14
    3d76:	2e00                	fld	fs0,24(a2)
    3d78:	0069                	c.nop	26
    3d7a:	3901                	jal	398a <__adddf3+0x76>
    3d7c:	0000250b          	0x250b
    3d80:	6500                	flw	fs0,8(a0)
    3d82:	0052                	c.slli	zero,0x14
    3d84:	1800                	addi	s0,sp,48
    3d86:	2e14                	fld	fa3,24(a2)
    3d88:	0000                	unimp
    3d8a:	08e6                	slli	a7,a7,0x19
    3d8c:	0000                	unimp
    3d8e:	000007bf 035a0119 	0x35a0119000007bf
    3d96:	195a01f3          	0x195a01f3
    3d9a:	5b01                	li	s6,-32
    3d9c:	0802                	c.slli64	a6
    3d9e:	1920                	addi	s0,sp,184
    3da0:	5c01                	li	s8,-32
    3da2:	8202                	jr	tp
    3da4:	0000                	unimp
    3da6:	7018                	flw	fa4,32(s0)
    3da8:	002e                	c.slli	zero,0xb
    3daa:	e600                	fsw	fs0,8(a2)
    3dac:	0008                	0x8
    3dae:	e100                	fsw	fs0,0(a0)
    3db0:	19000007          	vlse128.v	v0,(zero),a6,v0.t
    3db4:	5a01                	li	s4,-32
    3db6:	8b02                	jr	s6
    3db8:	1900                	addi	s0,sp,176
    3dba:	5b01                	li	s6,-32
    3dbc:	9104                	0x9104
    3dbe:	7eec                	flw	fa1,124(a3)
    3dc0:	1906                	slli	s2,s2,0x21
    3dc2:	5c01                	li	s8,-32
    3dc4:	8402                	jr	s0
    3dc6:	0000                	unimp
    3dc8:	9018                	0x9018
    3dca:	002e                	c.slli	zero,0xb
    3dcc:	e600                	fsw	fs0,8(a2)
    3dce:	0008                	0x8
    3dd0:	0100                	addi	s0,sp,128
    3dd2:	0008                	0x8
    3dd4:	1900                	addi	s0,sp,176
    3dd6:	5a01                	li	s4,-32
    3dd8:	8b02                	jr	s6
    3dda:	1900                	addi	s0,sp,176
    3ddc:	5b01                	li	s6,-32
    3dde:	0802                	c.slli64	a6
    3de0:	1930                	addi	a2,sp,184
    3de2:	5c01                	li	s8,-32
    3de4:	8302                	jr	t1
    3de6:	0000                	unimp
    3de8:	f018                	fsw	fa4,32(s0)
    3dea:	002e                	c.slli	zero,0xb
    3dec:	e600                	fsw	fs0,8(a2)
    3dee:	0008                	0x8
    3df0:	2600                	fld	fs0,8(a2)
    3df2:	0008                	0x8
    3df4:	1900                	addi	s0,sp,176
    3df6:	5a01                	li	s4,-32
    3df8:	87008b07          	vluxseg5ei8.v	v22,(ra),v16
    3dfc:	2200                	fld	fs0,0(a2)
    3dfe:	01190123          	sb	a7,2(s2) # a002 <__heap_end+0x2772>
    3e02:	2008025b          	0x2008025b
    3e06:	0119                	addi	sp,sp,6
    3e08:	025c                	addi	a5,sp,260
    3e0a:	0078                	addi	a4,sp,12
    3e0c:	1700                	addi	s0,sp,928
    3e0e:	2f98                	fld	fa4,24(a5)
    3e10:	0000                	unimp
    3e12:	08fc                	addi	a5,sp,92
    3e14:	0000                	unimp
    3e16:	002fc017          	auipc	zero,0x2fc
    3e1a:	0500                	addi	s0,sp,640
    3e1c:	0009                	c.nop	2
    3e1e:	0000                	unimp
    3e20:	0404                	addi	s1,sp,512
    3e22:	c005                	beqz	s0,3e42 <__adddf3+0x52e>
    3e24:	0001                	nop
    3e26:	1d00                	addi	s0,sp,688
    3e28:	00a5                	addi	ra,ra,9
    3e2a:	0000                	unimp
    3e2c:	0850                	addi	a2,sp,20
    3e2e:	0000                	unimp
    3e30:	382a                	fld	fa6,168(sp)
    3e32:	0000                	unimp
    3e34:	4100                	lw	s0,0(a0)
    3e36:	2600                	fld	fs0,8(a2)
    3e38:	09a6                	slli	s3,s3,0x9
    3e3a:	0000                	unimp
    3e3c:	2c01                	jal	404c <__adddf3+0x738>
    3e3e:	2501                	jal	443e <__divdf3+0x352>
    3e40:	0000                	unimp
    3e42:	0100                	addi	s0,sp,128
    3e44:	0876                	slli	a6,a6,0x1d
    3e46:	0000                	unimp
    3e48:	01007327          	0x1007327
    3e4c:	182c                	addi	a1,sp,56
    3e4e:	0876                	slli	a6,a6,0x1d
    3e50:	0000                	unimp
    3e52:	6929                	lui	s2,0xa
    3e54:	0100                	addi	s0,sp,128
    3e56:	092e                	slli	s2,s2,0xb
    3e58:	0025                	c.nop	9
    3e5a:	0000                	unimp
    3e5c:	0700                	addi	s0,sp,896
    3e5e:	c604                	sw	s1,8(a2)
    3e60:	0004                	0x4
    3e62:	2600                	fld	fs0,8(a2)
    3e64:	08f2                	slli	a7,a7,0x1c
    3e66:	0000                	unimp
    3e68:	2301                	jal	4368 <__divdf3+0x27c>
    3e6a:	6901                	0x6901
    3e6c:	0000                	unimp
    3e6e:	0100                	addi	s0,sp,128
    3e70:	000008af          	vamoaddei8.v	zero,(zero),v0,v17,v0.t
    3e74:	01007327          	0x1007327
    3e78:	04c61523          	sh	a2,74(a2) # 1d04a <RAM_SIZE+0xd04a>
    3e7c:	0000                	unimp
    3e7e:	5d28                	lw	a0,120(a0)
    3e80:	01000007          	vle8ff.v	v0,(zero),v0.t
    3e84:	00692223          	sw	t1,4(s2) # a004 <__heap_end+0x2774>
    3e88:	0000                	unimp
    3e8a:	7329                	lui	t1,0xfffea
    3e8c:	25010063          	beq	sp,a6,40cc <__adddf3+0x7b8>
    3e90:	c611                	beqz	a2,3e9c <__adddf3+0x588>
    3e92:	0004                	0x4
    3e94:	0000                	unimp
    3e96:	dd31                	beqz	a0,3df2 <__adddf3+0x4de>
    3e98:	0004                	0x4
    3e9a:	2800                	fld	fs0,16(s0)
    3e9c:	0030                	addi	a2,sp,8
    3e9e:	0c00                	addi	s0,sp,528
    3ea0:	0000                	unimp
    3ea2:	0100                	addi	s0,sp,128
    3ea4:	d49c                	sw	a5,40(s1)
    3ea6:	0008                	0x8
    3ea8:	3200                	fld	fs0,32(a2)
    3eaa:	000004eb          	0x4eb
    3eae:	5a01                	li	s4,-32
    3eb0:	0004f633          	and	a2,s1,zero
    3eb4:	ee00                	fsw	fs0,24(a2)
    3eb6:	b6fd                	j	3aa4 <__adddf3+0x190>
    3eb8:	7df5                	lui	s11,0xffffd
    3eba:	3400                	fld	fs0,40(s0)
    3ebc:	095c                	addi	a5,sp,148
    3ebe:	0000                	unimp
    3ec0:	095c                	addi	a5,sp,148
    3ec2:	0000                	unimp
    3ec4:	0b34                	addi	a3,sp,408
    3ec6:	0009                	c.nop	2
    3ec8:	0b00                	addi	s0,sp,400
    3eca:	0009                	c.nop	2
    3ecc:	3500                	fld	fs0,40(a0)
    3ece:	05ae                	slli	a1,a1,0xb
    3ed0:	0000                	unimp
    3ed2:	05a4                	addi	s1,sp,712
    3ed4:	0000                	unimp
    3ed6:	0005                	c.nop	1
    3ed8:	0435                	addi	s0,s0,13
    3eda:	0009                	c.nop	2
    3edc:	fa00                	fsw	fs0,48(a2)
    3ede:	0008                	0x8
    3ee0:	0500                	addi	s0,sp,640
    3ee2:	3400                	fld	fs0,40(s0)
    3ee4:	0976                	slli	s2,s2,0x1d
    3ee6:	0000                	unimp
    3ee8:	0976                	slli	s2,s2,0x1d
    3eea:	0000                	unimp
    3eec:	9234                	0x9234
    3eee:	92000003          	lb	zero,-1760(zero) # fffff920 <RAM_SIZE+0xfffef920>
    3ef2:	00000003          	lb	zero,0(zero) # 0 <RAM_START_ADDRESS>
    3ef6:	057d                	addi	a0,a0,31
    3ef8:	0000                	unimp
    3efa:	0004                	0x4
    3efc:	00001097          	auipc	ra,0x1
    3f00:	0104                	addi	s1,sp,128
    3f02:	0ab5                	addi	s5,s5,13
    3f04:	0000                	unimp
    3f06:	e60c                	fsw	fa1,8(a2)
    3f08:	0009                	c.nop	2
    3f0a:	1d00                	addi	s0,sp,688
    3f0c:	000a                	c.slli	zero,0x2
    3f0e:	1400                	addi	s0,sp,544
    3f10:	0039                	c.nop	14
    3f12:	d800                	sw	s0,48(s0)
    3f14:	a1000007          	vlseg6e8ff.v	v0,(zero),v0.t
    3f18:	0071                	c.nop	28
    3f1a:	0200                	addi	s0,sp,256
    3f1c:	0408                	addi	a0,sp,512
    3f1e:	118c                	addi	a1,sp,224
    3f20:	0000                	unimp
    3f22:	69050403          	lb	s0,1680(a0)
    3f26:	746e                	flw	fs0,248(sp)
    3f28:	0200                	addi	s0,sp,256
    3f2a:	0601                	addi	a2,a2,0
    3f2c:	0264                	addi	s1,sp,268
    3f2e:	0000                	unimp
    3f30:	0802                	c.slli64	a6
    3f32:	bb05                	j	3c62 <__adddf3+0x34e>
    3f34:	0001                	nop
    3f36:	0200                	addi	s0,sp,256
    3f38:	0801                	addi	a6,a6,0
    3f3a:	0262                	slli	tp,tp,0x18
    3f3c:	0000                	unimp
    3f3e:	0402                	c.slli64	s0
    3f40:	0008c707          	flq	fa4,0(a7)
    3f44:	0200                	addi	s0,sp,256
    3f46:	0708                	addi	a0,sp,896
    3f48:	08bd                	addi	a7,a7,15
    3f4a:	0000                	unimp
    3f4c:	0202                	c.slli64	tp
    3f4e:	0002ba07          	fld	fs4,0(t0) # a5153ad6 <RAM_SIZE+0xa5143ad6>
    3f52:	0400                	addi	s0,sp,512
    3f54:	0aae                	slli	s5,s5,0xb
    3f56:	0000                	unimp
    3f58:	4802                	lw	a6,0(sp)
    3f5a:	0000250f          	0x250f
    3f5e:	0500                	addi	s0,sp,640
    3f60:	0208                	addi	a0,sp,256
    3f62:	00b3034f          	fnmadd.s	ft6,ft6,fa1,ft0,rne
    3f66:	0000                	unimp
    3f68:	1706                	slli	a4,a4,0x21
    3f6a:	000a                	c.slli	zero,0x2
    3f6c:	0200                	addi	s0,sp,256
    3f6e:	00480e57          	vadd.vv	v28,v4,v16,v0.t
    3f72:	0000                	unimp
    3f74:	2004                	fld	fs1,0(s0)
    3f76:	0000                	unimp
    3f78:	9706                	add	a4,a4,ra
    3f7a:	0200000b          	0x200000b
    3f7e:	0e58                	addi	a4,sp,788
    3f80:	0048                	addi	a0,sp,4
    3f82:	0000                	unimp
    3f84:	1404                	addi	s1,sp,544
    3f86:	040c                	addi	a1,sp,512
    3f88:	70786507          	0x70786507
    3f8c:	0200                	addi	s0,sp,256
    3f8e:	0e59                	addi	t3,t3,22
    3f90:	0048                	addi	a0,sp,4
    3f92:	0000                	unimp
    3f94:	0b04                	addi	s1,sp,400
    3f96:	0401                	addi	s0,s0,0
    3f98:	ed06                	fsw	ft1,152(sp)
    3f9a:	0008                	0x8
    3f9c:	0200                	addi	s0,sp,256
    3f9e:	0e5a                	slli	t3,t3,0x16
    3fa0:	0048                	addi	a0,sp,4
    3fa2:	0000                	unimp
    3fa4:	0104                	addi	s1,sp,128
    3fa6:	0400                	addi	s0,sp,512
    3fa8:	0800                	addi	s0,sp,16
    3faa:	0c38                	addi	a4,sp,536
    3fac:	0000                	unimp
    3fae:	0208                	addi	a0,sp,256
    3fb0:	074c                	addi	a1,sp,900
    3fb2:	00d9                	addi	ra,ra,22
    3fb4:	0000                	unimp
    3fb6:	6609                	lui	a2,0x2
    3fb8:	746c                	flw	fa1,108(s0)
    3fba:	0200                	addi	s0,sp,256
    3fbc:	0a4e                	slli	s4,s4,0x13
    3fbe:	005d                	c.nop	23
    3fc0:	0000                	unimp
    3fc2:	710a                	flw	ft2,160(sp)
    3fc4:	000c                	0xc
    3fc6:	0200                	addi	s0,sp,256
    3fc8:	055c                	addi	a5,sp,644
    3fca:	0069                	c.nop	26
    3fcc:	0000                	unimp
    3fce:	0b00                	addi	s0,sp,400
    3fd0:	00000857          	vadd.vv	v16,v0,v0,v0.t
    3fd4:	2301                	jal	44d4 <__divdf3+0x3e8>
    3fd6:	5d01                	li	s10,-32
    3fd8:	0000                	unimp
    3fda:	1400                	addi	s0,sp,544
    3fdc:	0039                	c.nop	14
    3fde:	d800                	sw	s0,48(s0)
    3fe0:	01000007          	vle8ff.v	v0,(zero),v0.t
    3fe4:	699c                	flw	fa5,16(a1)
    3fe6:	0005                	c.nop	1
    3fe8:	0c00                	addi	s0,sp,528
    3fea:	0061                	c.nop	24
    3fec:	2301                	jal	44ec <__divdf3+0x400>
    3fee:	5d12                	lw	s10,36(sp)
    3ff0:	0000                	unimp
    3ff2:	d800                	sw	s0,48(s0)
    3ff4:	0052                	c.slli	zero,0x14
    3ff6:	0c00                	addi	s0,sp,528
    3ff8:	0062                	c.slli	zero,0x18
    3ffa:	2301                	jal	44fa <__divdf3+0x40e>
    3ffc:	5d1c                	lw	a5,56(a0)
    3ffe:	0000                	unimp
    4000:	0000                	unimp
    4002:	0054                	addi	a3,sp,4
    4004:	0d00                	addi	s0,sp,656
    4006:	0b78                	addi	a4,sp,412
    4008:	0000                	unimp
    400a:	2501                	jal	460a <__divdf3+0x51e>
    400c:	00002c03          	lw	s8,0(zero) # 0 <RAM_START_ADDRESS>
    4010:	2800                	fld	fs0,16(s0)
    4012:	0054                	addi	a3,sp,4
    4014:	0e00                	addi	s0,sp,784
    4016:	0c88                	addi	a0,sp,592
    4018:	0000                	unimp
    401a:	2501                	jal	461a <__divdf3+0x52e>
    401c:	00002c03          	lw	s8,0(zero) # 0 <RAM_START_ADDRESS>
    4020:	0000                	unimp
    4022:	635f410f          	0x635f410f
    4026:	0100                	addi	s0,sp,128
    4028:	0326                	slli	t1,t1,0x9
    402a:	0569                	addi	a0,a0,26
    402c:	0000                	unimp
    402e:	4110                	lw	a2,0(a0)
    4030:	735f 0100 0326      	0x3260100735f
    4036:	0569                	addi	a0,a0,26
    4038:	0000                	unimp
    403a:	5478                	lw	a4,108(s0)
    403c:	0000                	unimp
    403e:	4110                	lw	a2,0(a0)
    4040:	655f 0100 0326      	0x3260100655f
    4046:	0569                	addi	a0,a0,26
    4048:	0000                	unimp
    404a:	551a                	lw	a0,164(sp)
    404c:	0000                	unimp
    404e:	a20d                	j	4170 <__divdf3+0x84>
    4050:	0100000b          	0x100000b
    4054:	0326                	slli	t1,t1,0x9
    4056:	0570                	addi	a2,sp,652
    4058:	0000                	unimp
    405a:	0000560b          	0x560b
    405e:	6e0d                	lui	t3,0x3
    4060:	0100000b          	0x100000b
    4064:	0326                	slli	t1,t1,0x9
    4066:	0570                	addi	a2,sp,652
    4068:	0000                	unimp
    406a:	5768                	lw	a0,108(a4)
    406c:	0000                	unimp
    406e:	635f420f          	0x635f420f
    4072:	0100                	addi	s0,sp,128
    4074:	05690327          	vsuxei8.v	v6,(s2),v22,v0.t
    4078:	0000                	unimp
    407a:	4210                	lw	a2,0(a2)
    407c:	735f 0100 0327      	0x3270100735f
    4082:	0569                	addi	a0,a0,26
    4084:	0000                	unimp
    4086:	58cd                	li	a7,-13
    4088:	0000                	unimp
    408a:	4210                	lw	a2,0(a2)
    408c:	655f 0100 0327      	0x3270100655f
    4092:	0569                	addi	a0,a0,26
    4094:	0000                	unimp
    4096:	00005943          	fmadd.s	fs2,ft0,ft0,ft0,unknown
    409a:	bc0d                	j	3acc <__adddf3+0x1b8>
    409c:	0100000b          	0x100000b
    40a0:	05700327          	vsuxei8.v	v6,(zero),v23,v0.t
    40a4:	0000                	unimp
    40a6:	5982                	lw	s3,32(sp)
    40a8:	0000                	unimp
    40aa:	c10d                	beqz	a0,40cc <__adddf3+0x7b8>
    40ac:	0100000b          	0x100000b
    40b0:	05700327          	vsuxei8.v	v6,(zero),v23,v0.t
    40b4:	0000                	unimp
    40b6:	5a92                	lw	s5,36(sp)
    40b8:	0000                	unimp
    40ba:	635f520f          	0x635f520f
    40be:	0100                	addi	s0,sp,128
    40c0:	0328                	addi	a0,sp,392
    40c2:	0569                	addi	a0,a0,26
    40c4:	0000                	unimp
    40c6:	5210                	lw	a2,32(a2)
    40c8:	735f 0100 0328      	0x3280100735f
    40ce:	0569                	addi	a0,a0,26
    40d0:	0000                	unimp
    40d2:	5afd                	li	s5,-1
    40d4:	0000                	unimp
    40d6:	5210                	lw	a2,32(a2)
    40d8:	655f 0100 0328      	0x3280100655f
    40de:	0569                	addi	a0,a0,26
    40e0:	0000                	unimp
    40e2:	5baa                	lw	s7,168(sp)
    40e4:	0000                	unimp
    40e6:	540d                	li	s0,-29
    40e8:	0100000b          	0x100000b
    40ec:	0328                	addi	a0,sp,392
    40ee:	0570                	addi	a2,sp,652
    40f0:	0000                	unimp
    40f2:	00005d0f          	0x5d0f
    40f6:	8d0d                	sub	a0,a0,a1
    40f8:	000c                	0xc
    40fa:	0100                	addi	s0,sp,128
    40fc:	0328                	addi	a0,sp,392
    40fe:	0570                	addi	a2,sp,652
    4100:	0000                	unimp
    4102:	5f45                	li	t5,-15
    4104:	0000                	unimp
    4106:	0100720f          	0x100720f
    410a:	0a29                	addi	s4,s4,10
    410c:	005d                	c.nop	23
    410e:	0000                	unimp
    4110:	5011                	c.li	zero,-28
    4112:	0006                	c.slli	zero,0x1
    4114:	3000                	fld	fs0,32(s0)
    4116:	0002                	c.slli64	zero
    4118:	1200                	addi	s0,sp,288
    411a:	00000ba7          	vse8.v	v23,(zero),v0.t
    411e:	2c01                	jal	432e <__divdf3+0x242>
    4120:	0000b303          	0xb303
    4124:	0000                	unimp
    4126:	7811                	lui	a6,0xfffe4
    4128:	0006                	c.slli	zero,0x1
    412a:	4600                	lw	s0,8(a2)
    412c:	0002                	c.slli64	zero
    412e:	1200                	addi	s0,sp,288
    4130:	00000ba7          	vse8.v	v23,(zero),v0.t
    4134:	2d01                	jal	4744 <__divdf3+0x658>
    4136:	0000b303          	0xb303
    413a:	0000                	unimp
    413c:	c011                	beqz	s0,4140 <__divdf3+0x54>
    413e:	0006                	c.slli	zero,0x1
    4140:	2c00                	fld	fs0,24(s0)
    4142:	13000003          	lb	zero,304(zero) # 130 <calc_func+0x10>
    4146:	0c62                	slli	s8,s8,0x18
    4148:	0000                	unimp
    414a:	2e01                	jal	445a <__divdf3+0x36e>
    414c:	0039d403          	lhu	s0,3(s3)
    4150:	1300                	addi	s0,sp,416
    4152:	00000c67          	jalr	s8,zero # 0 <RAM_START_ADDRESS>
    4156:	2e01                	jal	4466 <__divdf3+0x37a>
    4158:	003af403          	0x3af403
    415c:	1300                	addi	s0,sp,416
    415e:	0c6c                	addi	a1,sp,540
    4160:	0000                	unimp
    4162:	2e01                	jal	4472 <__divdf3+0x386>
    4164:	003a1c03          	lh	s8,3(s4) # fffe0003 <RAM_SIZE+0xfffd0003>
    4168:	1300                	addi	s0,sp,416
    416a:	0c7f                	0xc7f
    416c:	0000                	unimp
    416e:	2e01                	jal	447e <__divdf3+0x392>
    4170:	003bd003          	lhu	zero,3(s7)
    4174:	0d00                	addi	s0,sp,656
    4176:	0c21                	addi	s8,s8,8
    4178:	0000                	unimp
    417a:	2e01                	jal	448a <__divdf3+0x39e>
    417c:	00002c03          	lw	s8,0(zero) # 0 <RAM_START_ADDRESS>
    4180:	3300                	fld	fs0,32(a4)
    4182:	0061                	c.nop	24
    4184:	1100                	addi	s0,sp,160
    4186:	0718                	addi	a4,sp,896
    4188:	0000                	unimp
    418a:	02a9                	addi	t0,t0,10
    418c:	0000                	unimp
    418e:	5f10                	lw	a2,56(a4)
    4190:	785f 0100 032e      	0x32e0100785f
    4196:	0570                	addi	a2,sp,652
    4198:	0000                	unimp
    419a:	00006203          	0x6203
    419e:	1100                	addi	s0,sp,160
    41a0:	0748                	addi	a0,sp,900
    41a2:	0000                	unimp
    41a4:	000002c3          	fmadd.s	ft5,ft0,ft0,ft0,rne
    41a8:	5f10                	lw	a2,56(a4)
    41aa:	785f 0100 032e      	0x32e0100785f
    41b0:	0570                	addi	a2,sp,652
    41b2:	0000                	unimp
    41b4:	6216                	flw	ft4,68(sp)
    41b6:	0000                	unimp
    41b8:	1100                	addi	s0,sp,160
    41ba:	0730                	addi	a2,sp,904
    41bc:	0000                	unimp
    41be:	02dd                	addi	t0,t0,23
    41c0:	0000                	unimp
    41c2:	5f10                	lw	a2,56(a4)
    41c4:	785f 0100 032e      	0x32e0100785f
    41ca:	0570                	addi	a2,sp,652
    41cc:	0000                	unimp
    41ce:	6229                	lui	tp,0xa
    41d0:	0000                	unimp
    41d2:	1400                	addi	s0,sp,544
    41d4:	3b28                	fld	fa0,112(a4)
    41d6:	0000                	unimp
    41d8:	0010                	0x10
    41da:	0000                	unimp
    41dc:	000002fb          	0x2fb
    41e0:	5f10                	lw	a2,56(a4)
    41e2:	785f 0100 032e      	0x32e0100785f
    41e8:	0570                	addi	a2,sp,652
    41ea:	0000                	unimp
    41ec:	623c                	flw	fa5,64(a2)
    41ee:	0000                	unimp
    41f0:	1100                	addi	s0,sp,160
    41f2:	0760                	addi	s0,sp,908
    41f4:	0000                	unimp
    41f6:	0315                	addi	t1,t1,5
    41f8:	0000                	unimp
    41fa:	5f10                	lw	a2,56(a4)
    41fc:	785f 0100 032e      	0x32e0100785f
    4202:	0570                	addi	a2,sp,652
    4204:	0000                	unimp
    4206:	0000624f          	fnmadd.s	ft4,ft0,ft0,ft0,unknown
    420a:	1500                	addi	s0,sp,672
    420c:	0778                	addi	a4,sp,908
    420e:	0000                	unimp
    4210:	5f10                	lw	a2,56(a4)
    4212:	785f 0100 032e      	0x32e0100785f
    4218:	0570                	addi	a2,sp,652
    421a:	0000                	unimp
    421c:	6262                	flw	ft4,24(sp)
    421e:	0000                	unimp
    4220:	0000                	unimp
    4222:	9011                	srli	s0,s0,0x24
    4224:	8e000007          	vloxseg5ei8.v	v0,(zero),v0
    4228:	0004                	0x4
    422a:	1300                	addi	s0,sp,416
    422c:	00000b73          	0xb73
    4230:	2e01                	jal	4540 <__divdf3+0x454>
    4232:	003c8403          	lb	s0,3(s9)
    4236:	1300                	addi	s0,sp,416
    4238:	09e1                	addi	s3,s3,24
    423a:	0000                	unimp
    423c:	2e01                	jal	454c <__divdf3+0x460>
    423e:	003da003          	lw	zero,3(s11) # ffffd003 <RAM_SIZE+0xfffed003>
    4242:	1300                	addi	s0,sp,416
    4244:	0b7d                	addi	s6,s6,31
    4246:	0000                	unimp
    4248:	2e01                	jal	4558 <__divdf3+0x46c>
    424a:	003ccc03          	lbu	s8,3(s9)
    424e:	1300                	addi	s0,sp,416
    4250:	0b9d                	addi	s7,s7,7
    4252:	0000                	unimp
    4254:	2e01                	jal	4564 <__divdf3+0x478>
    4256:	003ef803          	0x3ef803
    425a:	1300                	addi	s0,sp,416
    425c:	0c59                	addi	s8,s8,22
    425e:	0000                	unimp
    4260:	2e01                	jal	4570 <__divdf3+0x484>
    4262:	003bd003          	lhu	zero,3(s7)
    4266:	0d00                	addi	s0,sp,656
    4268:	0c21                	addi	s8,s8,8
    426a:	0000                	unimp
    426c:	2e01                	jal	457c <__divdf3+0x490>
    426e:	00002c03          	lw	s8,0(zero) # 0 <RAM_START_ADDRESS>
    4272:	9500                	0x9500
    4274:	0062                	c.slli	zero,0x18
    4276:	1100                	addi	s0,sp,160
    4278:	07f8                	addi	a4,sp,972
    427a:	0000                	unimp
    427c:	0000039b          	0x39b
    4280:	5f10                	lw	a2,56(a4)
    4282:	785f 0100 032e      	0x32e0100785f
    4288:	0570                	addi	a2,sp,652
    428a:	0000                	unimp
    428c:	6384                	flw	fs1,0(a5)
    428e:	0000                	unimp
    4290:	1100                	addi	s0,sp,160
    4292:	0810                	addi	a2,sp,16
    4294:	0000                	unimp
    4296:	03b5                	addi	t2,t2,13
    4298:	0000                	unimp
    429a:	5f10                	lw	a2,56(a4)
    429c:	785f 0100 032e      	0x32e0100785f
    42a2:	0570                	addi	a2,sp,652
    42a4:	0000                	unimp
    42a6:	00006397          	auipc	t2,0x6
    42aa:	1400                	addi	s0,sp,544
    42ac:	3d5c                	fld	fa5,184(a0)
    42ae:	0000                	unimp
    42b0:	0010                	0x10
    42b2:	0000                	unimp
    42b4:	000003d3          	fadd.s	ft7,ft0,ft0,rne
    42b8:	5f10                	lw	a2,56(a4)
    42ba:	785f 0100 032e      	0x32e0100785f
    42c0:	0570                	addi	a2,sp,652
    42c2:	0000                	unimp
    42c4:	63aa                	flw	ft7,136(sp)
    42c6:	0000                	unimp
    42c8:	1400                	addi	s0,sp,544
    42ca:	3dd4                	fld	fa3,184(a1)
    42cc:	0000                	unimp
    42ce:	0010                	0x10
    42d0:	0000                	unimp
    42d2:	03f1                	addi	t2,t2,28
    42d4:	0000                	unimp
    42d6:	5f10                	lw	a2,56(a4)
    42d8:	785f 0100 032e      	0x32e0100785f
    42de:	0570                	addi	a2,sp,652
    42e0:	0000                	unimp
    42e2:	63bd                	lui	t2,0xf
    42e4:	0000                	unimp
    42e6:	1100                	addi	s0,sp,160
    42e8:	0848                	addi	a0,sp,20
    42ea:	0000                	unimp
    42ec:	0000040b          	0x40b
    42f0:	5f10                	lw	a2,56(a4)
    42f2:	785f 0100 032e      	0x32e0100785f
    42f8:	0570                	addi	a2,sp,652
    42fa:	0000                	unimp
    42fc:	63d0                	flw	fa2,4(a5)
    42fe:	0000                	unimp
    4300:	1400                	addi	s0,sp,544
    4302:	3e80                	fld	fs0,56(a3)
    4304:	0000                	unimp
    4306:	0010                	0x10
    4308:	0000                	unimp
    430a:	0429                	addi	s0,s0,10
    430c:	0000                	unimp
    430e:	5f10                	lw	a2,56(a4)
    4310:	785f 0100 032e      	0x32e0100785f
    4316:	0570                	addi	a2,sp,652
    4318:	0000                	unimp
    431a:	63ee                	flw	ft7,216(sp)
    431c:	0000                	unimp
    431e:	1400                	addi	s0,sp,544
    4320:	3ec8                	fld	fa0,184(a3)
    4322:	0000                	unimp
    4324:	0010                	0x10
    4326:	0000                	unimp
    4328:	00000447          	fmsub.s	fs0,ft0,ft0,ft0,rne
    432c:	5f10                	lw	a2,56(a4)
    432e:	785f 0100 032e      	0x32e0100785f
    4334:	0570                	addi	a2,sp,652
    4336:	0000                	unimp
    4338:	6401                	0x6401
    433a:	0000                	unimp
    433c:	1400                	addi	s0,sp,544
    433e:	3ee4                	fld	fs1,248(a3)
    4340:	0000                	unimp
    4342:	0010                	0x10
    4344:	0000                	unimp
    4346:	0465                	addi	s0,s0,25
    4348:	0000                	unimp
    434a:	5f10                	lw	a2,56(a4)
    434c:	785f 0100 032e      	0x32e0100785f
    4352:	0570                	addi	a2,sp,652
    4354:	0000                	unimp
    4356:	0000642f          	vamoaddei32.v	zero,(zero),v0,v8,v0.t
    435a:	1500                	addi	s0,sp,672
    435c:	0828                	addi	a0,sp,24
    435e:	0000                	unimp
    4360:	c60d                	beqz	a2,438a <__divdf3+0x29e>
    4362:	0100000b          	0x100000b
    4366:	032e                	slli	t1,t1,0xb
    4368:	002c                	addi	a1,sp,8
    436a:	0000                	unimp
    436c:	6442                	flw	fs0,16(sp)
    436e:	0000                	unimp
    4370:	0416                	slli	s0,s0,0x5
    4372:	7700003f 16000005 	0x160000057700003f
    437a:	3f84                	fld	fs1,56(a5)
    437c:	0000                	unimp
    437e:	00000577          	0x577
    4382:	0000                	unimp
    4384:	6011                	c.lui	zero,0x4
    4386:	0008                	0x8
    4388:	5600                	lw	s0,40(a2)
    438a:	0005                	c.nop	1
    438c:	1200                	addi	s0,sp,288
    438e:	0bdc                	addi	a5,sp,468
    4390:	0000                	unimp
    4392:	2f01                	jal	4aa2 <__ledf2+0x62>
    4394:	00002c03          	lw	s8,0(zero) # 0 <RAM_START_ADDRESS>
    4398:	1700                	addi	s0,sp,928
    439a:	00000517          	auipc	a0,0x0
    439e:	4412                	lw	s0,4(sp)
    43a0:	000c                	0xc
    43a2:	0100                	addi	s0,sp,128
    43a4:	0569032f          	vamoaddei8.v	v6,(s2),v22,v6,v0.t
    43a8:	0000                	unimp
    43aa:	5912                	lw	s2,36(sp)
    43ac:	0100000b          	0x100000b
    43b0:	0569032f          	vamoaddei8.v	v6,(s2),v22,v6,v0.t
    43b4:	0000                	unimp
    43b6:	8212                	mv	tp,tp
    43b8:	0100000b          	0x100000b
    43bc:	0569032f          	vamoaddei8.v	v6,(s2),v22,v6,v0.t
    43c0:	0000                	unimp
    43c2:	f512                	fsw	ft4,168(sp)
    43c4:	0100000b          	0x100000b
    43c8:	0570032f          	vamoaddei8.v	v6,(zero),v23,v6,v0.t
    43cc:	0000                	unimp
    43ce:	0b12                	slli	s6,s6,0x4
    43d0:	000c                	0xc
    43d2:	0100                	addi	s0,sp,128
    43d4:	0570032f          	vamoaddei8.v	v6,(zero),v23,v6,v0.t
    43d8:	0000                	unimp
    43da:	0004f617          	auipc	a2,0x4f
    43de:	0f00                	addi	s0,sp,912
    43e0:	5f5f 0078 2f01      	0x2f0100785f5f
    43e6:	00057003          	0x57003
    43ea:	0000                	unimp
    43ec:	00050817          	auipc	a6,0x50
    43f0:	0f00                	addi	s0,sp,912
    43f2:	5f5f 0078 2f01      	0x2f0100785f5f
    43f8:	00057003          	0x57003
    43fc:	0000                	unimp
    43fe:	0f18                	addi	a4,sp,912
    4400:	5f5f 0078 2f01      	0x2f0100785f5f
    4406:	00057003          	0x57003
    440a:	0000                	unimp
    440c:	1400                	addi	s0,sp,544
    440e:	3be4                	fld	fs1,240(a5)
    4410:	0000                	unimp
    4412:	0014                	0x14
    4414:	0000                	unimp
    4416:	0535                	addi	a0,a0,13
    4418:	0000                	unimp
    441a:	5f10                	lw	a2,56(a4)
    441c:	785f 0100 032f      	0x32f0100785f
    4422:	0570                	addi	a2,sp,652
    4424:	0000                	unimp
    4426:	64b1                	lui	s1,0xc
    4428:	0000                	unimp
    442a:	1700                	addi	s0,sp,928
    442c:	00000547          	fmsub.s	fa0,ft0,ft0,ft0,rne
    4430:	785f5f0f          	0x785f5f0f
    4434:	0100                	addi	s0,sp,128
    4436:	0570032f          	vamoaddei8.v	v6,(zero),v23,v6,v0.t
    443a:	0000                	unimp
    443c:	1800                	addi	s0,sp,48
    443e:	785f5f0f          	0x785f5f0f
    4442:	0100                	addi	s0,sp,128
    4444:	0570032f          	vamoaddei8.v	v6,(zero),v23,v6,v0.t
    4448:	0000                	unimp
    444a:	0000                	unimp
    444c:	8015                	srli	s0,s0,0x5
    444e:	0008                	0x8
    4450:	1200                	addi	s0,sp,288
    4452:	00000a9b          	0xa9b
    4456:	2f01                	jal	4b66 <__muldf3+0x42>
    4458:	0000b303          	0xb303
    445c:	0000                	unimp
    445e:	0200                	addi	s0,sp,256
    4460:	0504                	addi	s1,sp,640
    4462:	01c0                	addi	s0,sp,196
    4464:	0000                	unimp
    4466:	0402                	c.slli64	s0
    4468:	0008c207          	flq	ft4,0(a7)
    446c:	1900                	addi	s0,sp,176
    446e:	0c76                	slli	s8,s8,0x1d
    4470:	0000                	unimp
    4472:	0c76                	slli	s8,s8,0x1d
    4474:	0000                	unimp
    4476:	f100                	fsw	fs0,32(a0)
    4478:	0008                	0x8
    447a:	0400                	addi	s0,sp,512
    447c:	0a00                	addi	s0,sp,272
    447e:	0012                	c.slli	zero,0x4
    4480:	0400                	addi	s0,sp,512
    4482:	b501                	j	4282 <__divdf3+0x196>
    4484:	000a                	c.slli	zero,0x2
    4486:	0c00                	addi	s0,sp,528
    4488:	00000dbb          	0xdbb
    448c:	0a1d                	addi	s4,s4,7
    448e:	0000                	unimp
    4490:	40ec                	lw	a1,68(s1)
    4492:	0000                	unimp
    4494:	07e4                	addi	s1,sp,972
    4496:	0000                	unimp
    4498:	81b2                	mv	gp,a2
    449a:	0000                	unimp
    449c:	0802                	c.slli64	a6
    449e:	8c04                	0x8c04
    44a0:	0011                	c.nop	4
    44a2:	0300                	addi	s0,sp,384
    44a4:	0504                	addi	s1,sp,640
    44a6:	6e69                	lui	t3,0x1a
    44a8:	0074                	addi	a3,sp,12
    44aa:	0102                	c.slli64	sp
    44ac:	6406                	flw	fs0,64(sp)
    44ae:	0002                	c.slli64	zero
    44b0:	0200                	addi	s0,sp,256
    44b2:	0508                	addi	a0,sp,640
    44b4:	000001bb          	0x1bb
    44b8:	0102                	c.slli64	sp
    44ba:	6208                	flw	fa0,0(a2)
    44bc:	0002                	c.slli64	zero
    44be:	0200                	addi	s0,sp,256
    44c0:	0704                	addi	s1,sp,896
    44c2:	000008c7          	fmsub.s	fa7,ft0,ft0,ft0,rne
    44c6:	0802                	c.slli64	a6
    44c8:	0008bd07          	fld	fs10,0(a7)
    44cc:	0400                	addi	s0,sp,512
    44ce:	0cea                	slli	s9,s9,0x1a
    44d0:	0000                	unimp
    44d2:	4e02                	lw	t3,0(sp)
    44d4:	1601                	addi	a2,a2,-32
    44d6:	00000063          	beqz	zero,44d6 <__divdf3+0x3ea>
    44da:	0202                	c.slli64	tp
    44dc:	0002ba07          	fld	fs4,0(t0)
    44e0:	0500                	addi	s0,sp,640
    44e2:	0aae                	slli	s5,s5,0xb
    44e4:	0000                	unimp
    44e6:	250f4803          	lbu	a6,592(t5)
    44ea:	0000                	unimp
    44ec:	0600                	addi	s0,sp,768
    44ee:	0308                	addi	a0,sp,384
    44f0:	00c0034f          	fnmadd.s	ft6,ft0,fa2,ft0,rne
    44f4:	0000                	unimp
    44f6:	000a1707          	flh	fa4,0(s4)
    44fa:	0300                	addi	s0,sp,384
    44fc:	00480e57          	vadd.vv	v28,v4,v16,v0.t
    4500:	0000                	unimp
    4502:	2004                	fld	fs1,0(s0)
    4504:	0000                	unimp
    4506:	000b9707          	flh	fa4,0(s7)
    450a:	0300                	addi	s0,sp,384
    450c:	0e58                	addi	a4,sp,788
    450e:	0048                	addi	a0,sp,4
    4510:	0000                	unimp
    4512:	1404                	addi	s1,sp,544
    4514:	040c                	addi	a1,sp,512
    4516:	6508                	flw	fa0,8(a0)
    4518:	7078                	flw	fa4,100(s0)
    451a:	0300                	addi	s0,sp,384
    451c:	0e59                	addi	t3,t3,22
    451e:	0048                	addi	a0,sp,4
    4520:	0000                	unimp
    4522:	0b04                	addi	s1,sp,400
    4524:	0401                	addi	s0,s0,0
    4526:	0008ed07          	vle32.v	v26,(a7),v0.t
    452a:	0300                	addi	s0,sp,384
    452c:	0e5a                	slli	t3,t3,0x16
    452e:	0048                	addi	a0,sp,4
    4530:	0000                	unimp
    4532:	0104                	addi	s1,sp,128
    4534:	0400                	addi	s0,sp,512
    4536:	0900                	addi	s0,sp,144
    4538:	0c38                	addi	a4,sp,536
    453a:	0000                	unimp
    453c:	0308                	addi	a0,sp,384
    453e:	074c                	addi	a1,sp,900
    4540:	00e6                	slli	ra,ra,0x19
    4542:	0000                	unimp
    4544:	660a                	flw	fa2,128(sp)
    4546:	746c                	flw	fa1,108(s0)
    4548:	0300                	addi	s0,sp,384
    454a:	0a4e                	slli	s4,s4,0x13
    454c:	006a                	c.slli	zero,0x1a
    454e:	0000                	unimp
    4550:	000c710b          	0xc710b
    4554:	0300                	addi	s0,sp,384
    4556:	055c                	addi	a5,sp,644
    4558:	0076                	c.slli	zero,0x1d
    455a:	0000                	unimp
    455c:	0c00                	addi	s0,sp,528
    455e:	084e                	slli	a6,a6,0x13
    4560:	0000                	unimp
    4562:	2301                	jal	4a62 <__ledf2+0x22>
    4564:	6a01                	0x6a01
    4566:	0000                	unimp
    4568:	ec00                	fsw	fs0,24(s0)
    456a:	0040                	addi	s0,sp,4
    456c:	e400                	fsw	fs0,8(s0)
    456e:	01000007          	vle8ff.v	v0,(zero),v0.t
    4572:	c29c                	sw	a5,0(a3)
    4574:	0008                	0x8
    4576:	0d00                	addi	s0,sp,656
    4578:	0061                	c.nop	24
    457a:	2301                	jal	4a7a <__ledf2+0x3a>
    457c:	6a12                	flw	fs4,4(sp)
    457e:	0000                	unimp
    4580:	c400                	sw	s0,8(s0)
    4582:	0064                	addi	s1,sp,12
    4584:	0d00                	addi	s0,sp,656
    4586:	0062                	c.slli	zero,0x18
    4588:	2301                	jal	4a88 <__ledf2+0x48>
    458a:	6a1c                	flw	fa5,16(a2)
    458c:	0000                	unimp
    458e:	4c00                	lw	s0,24(s0)
    4590:	0065                	c.nop	25
    4592:	0e00                	addi	s0,sp,784
    4594:	0b78                	addi	a4,sp,412
    4596:	0000                	unimp
    4598:	2501                	jal	4b98 <__muldf3+0x74>
    459a:	00002c03          	lw	s8,0(zero) # 0 <RAM_START_ADDRESS>
    459e:	d400                	sw	s0,40(s0)
    45a0:	0065                	c.nop	25
    45a2:	0f00                	addi	s0,sp,912
    45a4:	0c88                	addi	a0,sp,592
    45a6:	0000                	unimp
    45a8:	2501                	jal	4ba8 <__muldf3+0x84>
    45aa:	00002c03          	lw	s8,0(zero) # 0 <RAM_START_ADDRESS>
    45ae:	0000                	unimp
    45b0:	4110                	lw	a2,0(a0)
    45b2:	635f 0100 0326      	0x3260100635f
    45b8:	08c2                	slli	a7,a7,0x10
    45ba:	0000                	unimp
    45bc:	65f4                	flw	fa3,76(a1)
    45be:	0000                	unimp
    45c0:	4110                	lw	a2,0(a0)
    45c2:	735f 0100 0326      	0x3260100735f
    45c8:	08c2                	slli	a7,a7,0x10
    45ca:	0000                	unimp
    45cc:	0000663f 655f4110 	0x655f41100000663f
    45d4:	0100                	addi	s0,sp,128
    45d6:	0326                	slli	t1,t1,0x9
    45d8:	08c2                	slli	a7,a7,0x10
    45da:	0000                	unimp
    45dc:	00006687          	vle32.v	v13,(zero),v0.t
    45e0:	a20e                	fsd	ft3,256(sp)
    45e2:	0100000b          	0x100000b
    45e6:	0326                	slli	t1,t1,0x9
    45e8:	08c9                	addi	a7,a7,18
    45ea:	0000                	unimp
    45ec:	00006733          	or	a4,zero,zero
    45f0:	6e0e                	flw	ft8,192(sp)
    45f2:	0100000b          	0x100000b
    45f6:	0326                	slli	t1,t1,0x9
    45f8:	08c9                	addi	a7,a7,18
    45fa:	0000                	unimp
    45fc:	000067cb          	fnmsub.s	fa5,ft0,ft0,ft0,unknown
    4600:	4210                	lw	a2,0(a2)
    4602:	635f 0100 0327      	0x3270100635f
    4608:	08c2                	slli	a7,a7,0x10
    460a:	0000                	unimp
    460c:	6872                	flw	fa6,28(sp)
    460e:	0000                	unimp
    4610:	4210                	lw	a2,0(a2)
    4612:	735f 0100 0327      	0x3270100735f
    4618:	08c2                	slli	a7,a7,0x10
    461a:	0000                	unimp
    461c:	68b2                	flw	fa7,12(sp)
    461e:	0000                	unimp
    4620:	4210                	lw	a2,0(a2)
    4622:	655f 0100 0327      	0x3270100655f
    4628:	08c2                	slli	a7,a7,0x10
    462a:	0000                	unimp
    462c:	690a                	flw	fs2,128(sp)
    462e:	0000                	unimp
    4630:	bc0e                	fsd	ft3,56(sp)
    4632:	0100000b          	0x100000b
    4636:	08c90327          	vsse8.v	v6,(s2),a2,v0.t
    463a:	0000                	unimp
    463c:	000069af          	vamoaddei32.v	zero,(zero),v0,v19,v0.t
    4640:	c10e                	sw	gp,128(sp)
    4642:	0100000b          	0x100000b
    4646:	08c90327          	vsse8.v	v6,(s2),a2,v0.t
    464a:	0000                	unimp
    464c:	6a3c                	flw	fa5,80(a2)
    464e:	0000                	unimp
    4650:	5210                	lw	a2,32(a2)
    4652:	635f 0100 0328      	0x3280100635f
    4658:	08c2                	slli	a7,a7,0x10
    465a:	0000                	unimp
    465c:	6ad6                	flw	fs5,84(sp)
    465e:	0000                	unimp
    4660:	5210                	lw	a2,32(a2)
    4662:	735f 0100 0328      	0x3280100735f
    4668:	08c2                	slli	a7,a7,0x10
    466a:	0000                	unimp
    466c:	00006b23          	0x6b23
    4670:	5210                	lw	a2,32(a2)
    4672:	655f 0100 0328      	0x3280100655f
    4678:	08c2                	slli	a7,a7,0x10
    467a:	0000                	unimp
    467c:	6ba8                	flw	fa0,80(a5)
    467e:	0000                	unimp
    4680:	540e                	lw	s0,224(sp)
    4682:	0100000b          	0x100000b
    4686:	0328                	addi	a0,sp,392
    4688:	08c9                	addi	a7,a7,18
    468a:	0000                	unimp
    468c:	6c54                	flw	fa3,28(s0)
    468e:	0000                	unimp
    4690:	8d0e                	mv	s10,gp
    4692:	000c                	0xc
    4694:	0100                	addi	s0,sp,128
    4696:	0328                	addi	a0,sp,392
    4698:	08c9                	addi	a7,a7,18
    469a:	0000                	unimp
    469c:	6d84                	flw	fs1,24(a1)
    469e:	0000                	unimp
    46a0:	7211                	lui	tp,0xfffe4
    46a2:	0100                	addi	s0,sp,128
    46a4:	0a29                	addi	s4,s4,10
    46a6:	006a                	c.slli	zero,0x1a
    46a8:	0000                	unimp
    46aa:	9812                	add	a6,a6,tp
    46ac:	0008                	0x8
    46ae:	4900                	lw	s0,16(a0)
    46b0:	0002                	c.slli64	zero
    46b2:	1300                	addi	s0,sp,416
    46b4:	00000ba7          	vse8.v	v23,(zero),v0.t
    46b8:	2c01                	jal	48c8 <__divdf3+0x7dc>
    46ba:	0000c003          	lbu	zero,0(ra) # 4efc <__muldf3+0x3d8>
    46be:	0000                	unimp
    46c0:	d812                	sw	tp,48(sp)
    46c2:	0008                	0x8
    46c4:	7500                	flw	fs0,40(a0)
    46c6:	0002                	c.slli64	zero
    46c8:	0e00                	addi	s0,sp,784
    46ca:	00000d1b          	0xd1b
    46ce:	2c01                	jal	48de <__eqdf2+0xe>
    46d0:	0008c203          	lbu	tp,0(a7)
    46d4:	2000                	fld	fs0,0(s0)
    46d6:	006e                	c.slli	zero,0x1b
    46d8:	1400                	addi	s0,sp,544
    46da:	41fc                	lw	a5,68(a1)
    46dc:	0000                	unimp
    46de:	08d0                	addi	a2,sp,84
    46e0:	0000                	unimp
    46e2:	3414                	fld	fa3,40(s0)
    46e4:	0042                	c.slli	zero,0x10
    46e6:	d000                	sw	s0,32(s0)
    46e8:	0008                	0x8
    46ea:	0000                	unimp
    46ec:	f012                	fsw	ft4,32(sp)
    46ee:	0008                	0x8
    46f0:	8b00                	0x8b00
    46f2:	0002                	c.slli64	zero
    46f4:	1300                	addi	s0,sp,416
    46f6:	00000ba7          	vse8.v	v23,(zero),v0.t
    46fa:	2d01                	jal	4d0a <__muldf3+0x1e6>
    46fc:	0000c003          	lbu	zero,0(ra)
    4700:	0000                	unimp
    4702:	0812                	slli	a6,a6,0x4
    4704:	0009                	c.nop	2
    4706:	b700                	fsd	fs0,40(a4)
    4708:	0002                	c.slli64	zero
    470a:	0e00                	addi	s0,sp,784
    470c:	00000d1b          	0xd1b
    4710:	2d01                	jal	4d20 <__muldf3+0x1fc>
    4712:	0008c203          	lbu	tp,0(a7)
    4716:	5400                	lw	s0,40(s0)
    4718:	006e                	c.slli	zero,0x1b
    471a:	1400                	addi	s0,sp,544
    471c:	429c                	lw	a5,0(a3)
    471e:	0000                	unimp
    4720:	08d0                	addi	a2,sp,84
    4722:	0000                	unimp
    4724:	d814                	sw	a3,48(s0)
    4726:	0042                	c.slli	zero,0x10
    4728:	d000                	sw	s0,32(s0)
    472a:	0008                	0x8
    472c:	0000                	unimp
    472e:	2012                	fld	ft0,256(sp)
    4730:	0009                	c.nop	2
    4732:	6f00                	flw	fs0,24(a4)
    4734:	0e000007          	vloxei8.v	v0,(zero),v0
    4738:	00000e07          	vle8.v	v28,(zero),v0.t
    473c:	2e01                	jal	4a4c <__ledf2+0xc>
    473e:	0008c903          	lbu	s2,0(a7)
    4742:	8800                	0x8800
    4744:	006e                	c.slli	zero,0x1b
    4746:	0e00                	addi	s0,sp,784
    4748:	00000d8b          	0xd8b
    474c:	2e01                	jal	4a5c <__ledf2+0x1c>
    474e:	0008c903          	lbu	s2,0(a7)
    4752:	b500                	fsd	fs0,40(a0)
    4754:	006e                	c.slli	zero,0x1b
    4756:	0e00                	addi	s0,sp,784
    4758:	0d72                	slli	s10,s10,0x1c
    475a:	0000                	unimp
    475c:	2e01                	jal	4a6c <__ledf2+0x2c>
    475e:	0008c903          	lbu	s2,0(a7)
    4762:	e300                	fsw	fs0,0(a4)
    4764:	006e                	c.slli	zero,0x1b
    4766:	0e00                	addi	s0,sp,784
    4768:	00000d4f          	fnmadd.s	fs10,ft0,ft0,ft0,rne
    476c:	2e01                	jal	4a7c <__ledf2+0x3c>
    476e:	0008c903          	lbu	s2,0(a7)
    4772:	0200                	addi	s0,sp,256
    4774:	0e00006f          	j	4854 <__divdf3+0x768>
    4778:	0d36                	slli	s10,s10,0xd
    477a:	0000                	unimp
    477c:	2e01                	jal	4a8c <__ledf2+0x4c>
    477e:	0008c903          	lbu	s2,0(a7)
    4782:	5700                	lw	s0,40(a4)
    4784:	0e00006f          	j	4864 <__divdf3+0x778>
    4788:	0cf2                	slli	s9,s9,0x1c
    478a:	0000                	unimp
    478c:	2e01                	jal	4a9c <__ledf2+0x5c>
    478e:	0008c903          	lbu	s2,0(a7)
    4792:	c300                	sw	s0,0(a4)
    4794:	0e00006f          	j	4874 <__divdf3+0x788>
    4798:	0ccc                	addi	a1,sp,596
    479a:	0000                	unimp
    479c:	2e01                	jal	4aac <__ledf2+0x6c>
    479e:	0008c903          	lbu	s2,0(a7)
    47a2:	fe00                	fsw	fs0,56(a2)
    47a4:	1200006f          	j	48c4 <__divdf3+0x7d8>
    47a8:	0940                	addi	s0,sp,148
    47aa:	0000                	unimp
    47ac:	03e0                	addi	s0,sp,460
    47ae:	0000                	unimp
    47b0:	6c0e                	flw	fs8,192(sp)
    47b2:	000e                	c.slli	zero,0x3
    47b4:	0100                	addi	s0,sp,128
    47b6:	032e                	slli	t1,t1,0xb
    47b8:	08c9                	addi	a7,a7,18
    47ba:	0000                	unimp
    47bc:	00007027          	vse64.v	v0,(zero),v0.t
    47c0:	500e                	0x500e
    47c2:	000e                	c.slli	zero,0x3
    47c4:	0100                	addi	s0,sp,128
    47c6:	032e                	slli	t1,t1,0xb
    47c8:	08c9                	addi	a7,a7,18
    47ca:	0000                	unimp
    47cc:	7050                	flw	fa2,36(s0)
    47ce:	0000                	unimp
    47d0:	e50e                	fsw	ft3,136(sp)
    47d2:	000c                	0xc
    47d4:	0100                	addi	s0,sp,128
    47d6:	032e                	slli	t1,t1,0xb
    47d8:	08c9                	addi	a7,a7,18
    47da:	0000                	unimp
    47dc:	7085                	lui	ra,0xfffe1
    47de:	0000                	unimp
    47e0:	370e                	fld	fa4,224(sp)
    47e2:	000e                	c.slli	zero,0x3
    47e4:	0100                	addi	s0,sp,128
    47e6:	032e                	slli	t1,t1,0xb
    47e8:	08c9                	addi	a7,a7,18
    47ea:	0000                	unimp
    47ec:	70b9                	lui	ra,0xfffee
    47ee:	0000                	unimp
    47f0:	c70e                	sw	gp,140(sp)
    47f2:	000c                	0xc
    47f4:	0100                	addi	s0,sp,128
    47f6:	032e                	slli	t1,t1,0xb
    47f8:	08c9                	addi	a7,a7,18
    47fa:	0000                	unimp
    47fc:	70ed                	lui	ra,0xffffb
    47fe:	0000                	unimp
    4800:	c20e                	sw	gp,4(sp)
    4802:	000c                	0xc
    4804:	0100                	addi	s0,sp,128
    4806:	032e                	slli	t1,t1,0xb
    4808:	08c9                	addi	a7,a7,18
    480a:	0000                	unimp
    480c:	7148                	flw	fa0,36(a0)
    480e:	0000                	unimp
    4810:	5f10                	lw	a2,56(a4)
    4812:	6d5f 0100 032e      	0x32e01006d5f
    4818:	08c9                	addi	a7,a7,18
    481a:	0000                	unimp
    481c:	7176                	flw	ft2,124(sp)
    481e:	0000                	unimp
    4820:	7014                	flw	fa3,32(s0)
    4822:	d9000043          	fmadd.s	ft0,ft0,fa6,fs11,rne
    4826:	0008                	0x8
    4828:	1400                	addi	s0,sp,544
    482a:	4380                	lw	s0,0(a5)
    482c:	0000                	unimp
    482e:	08e2                	slli	a7,a7,0x18
    4830:	0000                	unimp
    4832:	9014                	0x9014
    4834:	eb000043          	fmadd.d	ft0,ft0,fa6,ft9,rne
    4838:	0008                	0x8
    483a:	1400                	addi	s0,sp,544
    483c:	43cc                	lw	a1,4(a5)
    483e:	0000                	unimp
    4840:	08d9                	addi	a7,a7,22
    4842:	0000                	unimp
    4844:	dc14                	sw	a3,56(s0)
    4846:	e2000043          	fmadd.d	ft0,ft0,ft0,ft8,rne
    484a:	0008                	0x8
    484c:	1400                	addi	s0,sp,544
    484e:	43ec                	lw	a1,68(a5)
    4850:	0000                	unimp
    4852:	000008eb          	0x8eb
    4856:	1500                	addi	s0,sp,672
    4858:	442c                	lw	a1,72(s0)
    485a:	0000                	unimp
    485c:	0088                	addi	a0,sp,64
    485e:	0000                	unimp
    4860:	050e                	slli	a0,a0,0x3
    4862:	0000                	unimp
    4864:	110e                	slli	sp,sp,0x23
    4866:	000d                	c.nop	3
    4868:	0100                	addi	s0,sp,128
    486a:	032e                	slli	t1,t1,0xb
    486c:	08c9                	addi	a7,a7,18
    486e:	0000                	unimp
    4870:	71aa                	flw	ft3,168(sp)
    4872:	0000                	unimp
    4874:	3c0e                	fld	fs8,224(sp)
    4876:	000e                	c.slli	zero,0x3
    4878:	0100                	addi	s0,sp,128
    487a:	032e                	slli	t1,t1,0xb
    487c:	08c9                	addi	a7,a7,18
    487e:	0000                	unimp
    4880:	71c8                	flw	fa0,36(a1)
    4882:	0000                	unimp
    4884:	160e                	slli	a2,a2,0x23
    4886:	000d                	c.nop	3
    4888:	0100                	addi	s0,sp,128
    488a:	032e                	slli	t1,t1,0xb
    488c:	08c9                	addi	a7,a7,18
    488e:	0000                	unimp
    4890:	71f1                	lui	gp,0xffffc
    4892:	0000                	unimp
    4894:	410e                	lw	sp,192(sp)
    4896:	000e                	c.slli	zero,0x3
    4898:	0100                	addi	s0,sp,128
    489a:	032e                	slli	t1,t1,0xb
    489c:	08c9                	addi	a7,a7,18
    489e:	0000                	unimp
    48a0:	7204                	flw	fs1,32(a2)
    48a2:	0000                	unimp
    48a4:	680e                	flw	fa6,192(sp)
    48a6:	000d                	c.nop	3
    48a8:	0100                	addi	s0,sp,128
    48aa:	032e                	slli	t1,t1,0xb
    48ac:	0056                	c.slli	zero,0x15
    48ae:	0000                	unimp
    48b0:	7222                	flw	ft4,40(sp)
    48b2:	0000                	unimp
    48b4:	4b0e                	lw	s6,192(sp)
    48b6:	000e                	c.slli	zero,0x3
    48b8:	0100                	addi	s0,sp,128
    48ba:	032e                	slli	t1,t1,0xb
    48bc:	0056                	c.slli	zero,0x15
    48be:	0000                	unimp
    48c0:	7235                	lui	tp,0xfffed
    48c2:	0000                	unimp
    48c4:	6d0e                	flw	fs10,192(sp)
    48c6:	000d                	c.nop	3
    48c8:	0100                	addi	s0,sp,128
    48ca:	032e                	slli	t1,t1,0xb
    48cc:	0056                	c.slli	zero,0x15
    48ce:	0000                	unimp
    48d0:	00007253          	fadd.s	ft4,ft0,ft0
    48d4:	460e                	lw	a2,192(sp)
    48d6:	000e                	c.slli	zero,0x3
    48d8:	0100                	addi	s0,sp,128
    48da:	032e                	slli	t1,t1,0xb
    48dc:	0056                	c.slli	zero,0x15
    48de:	0000                	unimp
    48e0:	7275                	lui	tp,0xffffd
    48e2:	0000                	unimp
    48e4:	4015                	c.li	zero,5
    48e6:	0044                	addi	s1,sp,4
    48e8:	1000                	addi	s0,sp,32
    48ea:	0000                	unimp
    48ec:	9700                	0x9700
    48ee:	0004                	0x4
    48f0:	1600                	addi	s0,sp,800
    48f2:	0e71                	addi	t3,t3,28
    48f4:	0000                	unimp
    48f6:	2e01                	jal	4c06 <__muldf3+0xe2>
    48f8:	0008c903          	lbu	s2,0(a7)
    48fc:	0100                	addi	s0,sp,128
    48fe:	165a                	slli	a2,a2,0x36
    4900:	00000d0b          	0xd0b
    4904:	2e01                	jal	4c14 <__muldf3+0xf0>
    4906:	0008c903          	lbu	s2,0(a7)
    490a:	0100                	addi	s0,sp,128
    490c:	5015005b          	0x5015005b
    4910:	0044                	addi	s1,sp,4
    4912:	1000                	addi	s0,sp,32
    4914:	0000                	unimp
    4916:	c100                	sw	s0,0(a0)
    4918:	0004                	0x4
    491a:	1600                	addi	s0,sp,800
    491c:	0e71                	addi	t3,t3,28
    491e:	0000                	unimp
    4920:	2e01                	jal	4c30 <__muldf3+0x10c>
    4922:	0008c903          	lbu	s2,0(a7)
    4926:	0100                	addi	s0,sp,128
    4928:	165a                	slli	a2,a2,0x36
    492a:	00000d0b          	0xd0b
    492e:	2e01                	jal	4c3e <__muldf3+0x11a>
    4930:	0008c903          	lbu	s2,0(a7)
    4934:	0100                	addi	s0,sp,128
    4936:	6015005b          	0x6015005b
    493a:	0044                	addi	s1,sp,4
    493c:	1000                	addi	s0,sp,32
    493e:	0000                	unimp
    4940:	eb00                	fsw	fs0,16(a4)
    4942:	0004                	0x4
    4944:	1600                	addi	s0,sp,800
    4946:	0e71                	addi	t3,t3,28
    4948:	0000                	unimp
    494a:	2e01                	jal	4c5a <__muldf3+0x136>
    494c:	0008c903          	lbu	s2,0(a7)
    4950:	0100                	addi	s0,sp,128
    4952:	165a                	slli	a2,a2,0x36
    4954:	00000d0b          	0xd0b
    4958:	2e01                	jal	4c68 <__muldf3+0x144>
    495a:	0008c903          	lbu	s2,0(a7)
    495e:	0100                	addi	s0,sp,128
    4960:	6017005b          	0x6017005b
    4964:	0009                	c.nop	2
    4966:	1600                	addi	s0,sp,800
    4968:	0e71                	addi	t3,t3,28
    496a:	0000                	unimp
    496c:	2e01                	jal	4c7c <__muldf3+0x158>
    496e:	0008c903          	lbu	s2,0(a7)
    4972:	0100                	addi	s0,sp,128
    4974:	165a                	slli	a2,a2,0x36
    4976:	00000d0b          	0xd0b
    497a:	2e01                	jal	4c8a <__muldf3+0x166>
    497c:	0008c903          	lbu	s2,0(a7)
    4980:	0100                	addi	s0,sp,128
    4982:	1200005b          	0x1200005b
    4986:	0978                	addi	a4,sp,156
    4988:	0000                	unimp
    498a:	0528                	addi	a0,sp,648
    498c:	0000                	unimp
    498e:	5f10                	lw	a2,56(a4)
    4990:	785f 0100 032e      	0x32e0100785f
    4996:	08c9                	addi	a7,a7,18
    4998:	0000                	unimp
    499a:	00007293          	andi	t0,zero,0
    499e:	1200                	addi	s0,sp,288
    49a0:	0990                	addi	a2,sp,208
    49a2:	0000                	unimp
    49a4:	0542                	slli	a0,a0,0x10
    49a6:	0000                	unimp
    49a8:	5f10                	lw	a2,56(a4)
    49aa:	785f 0100 032e      	0x32e0100785f
    49b0:	08c9                	addi	a7,a7,18
    49b2:	0000                	unimp
    49b4:	72a6                	flw	ft5,104(sp)
    49b6:	0000                	unimp
    49b8:	1500                	addi	s0,sp,672
    49ba:	4504                	lw	s1,8(a0)
    49bc:	0000                	unimp
    49be:	0010                	0x10
    49c0:	0000                	unimp
    49c2:	0560                	addi	s0,sp,652
    49c4:	0000                	unimp
    49c6:	5f10                	lw	a2,56(a4)
    49c8:	785f 0100 032e      	0x32e0100785f
    49ce:	08c9                	addi	a7,a7,18
    49d0:	0000                	unimp
    49d2:	72b9                	lui	t0,0xfffee
    49d4:	0000                	unimp
    49d6:	1200                	addi	s0,sp,288
    49d8:	09a8                	addi	a0,sp,216
    49da:	0000                	unimp
    49dc:	0610                	addi	a2,sp,768
    49de:	0000                	unimp
    49e0:	6c0e                	flw	fs8,192(sp)
    49e2:	000e                	c.slli	zero,0x3
    49e4:	0100                	addi	s0,sp,128
    49e6:	032e                	slli	t1,t1,0xb
    49e8:	08c9                	addi	a7,a7,18
    49ea:	0000                	unimp
    49ec:	72cc                	flw	fa1,36(a3)
    49ee:	0000                	unimp
    49f0:	500e                	0x500e
    49f2:	000e                	c.slli	zero,0x3
    49f4:	0100                	addi	s0,sp,128
    49f6:	032e                	slli	t1,t1,0xb
    49f8:	08c9                	addi	a7,a7,18
    49fa:	0000                	unimp
    49fc:	72ea                	flw	ft5,184(sp)
    49fe:	0000                	unimp
    4a00:	e50e                	fsw	ft3,136(sp)
    4a02:	000c                	0xc
    4a04:	0100                	addi	s0,sp,128
    4a06:	032e                	slli	t1,t1,0xb
    4a08:	08c9                	addi	a7,a7,18
    4a0a:	0000                	unimp
    4a0c:	731f 0000 370e      	0x370e0000731f
    4a12:	000e                	c.slli	zero,0x3
    4a14:	0100                	addi	s0,sp,128
    4a16:	032e                	slli	t1,t1,0xb
    4a18:	08c9                	addi	a7,a7,18
    4a1a:	0000                	unimp
    4a1c:	7360                	flw	fs0,100(a4)
    4a1e:	0000                	unimp
    4a20:	c70e                	sw	gp,140(sp)
    4a22:	000c                	0xc
    4a24:	0100                	addi	s0,sp,128
    4a26:	032e                	slli	t1,t1,0xb
    4a28:	08c9                	addi	a7,a7,18
    4a2a:	0000                	unimp
    4a2c:	7396                	flw	ft7,100(sp)
    4a2e:	0000                	unimp
    4a30:	c20e                	sw	gp,4(sp)
    4a32:	000c                	0xc
    4a34:	0100                	addi	s0,sp,128
    4a36:	032e                	slli	t1,t1,0xb
    4a38:	08c9                	addi	a7,a7,18
    4a3a:	0000                	unimp
    4a3c:	73ec                	flw	fa1,100(a5)
    4a3e:	0000                	unimp
    4a40:	5f10                	lw	a2,56(a4)
    4a42:	6d5f 0100 032e      	0x32e01006d5f
    4a48:	08c9                	addi	a7,a7,18
    4a4a:	0000                	unimp
    4a4c:	742c                	flw	fa1,104(s0)
    4a4e:	0000                	unimp
    4a50:	2814                	fld	fa3,16(s0)
    4a52:	0045                	c.nop	17
    4a54:	d900                	sw	s0,48(a0)
    4a56:	0008                	0x8
    4a58:	1400                	addi	s0,sp,544
    4a5a:	4538                	lw	a4,72(a0)
    4a5c:	0000                	unimp
    4a5e:	08e2                	slli	a7,a7,0x18
    4a60:	0000                	unimp
    4a62:	4814                	lw	a3,16(s0)
    4a64:	0045                	c.nop	17
    4a66:	eb00                	fsw	fs0,16(a4)
    4a68:	0008                	0x8
    4a6a:	1400                	addi	s0,sp,544
    4a6c:	458c                	lw	a1,8(a1)
    4a6e:	0000                	unimp
    4a70:	08d9                	addi	a7,a7,22
    4a72:	0000                	unimp
    4a74:	9c14                	0x9c14
    4a76:	0045                	c.nop	17
    4a78:	e200                	fsw	fs0,0(a2)
    4a7a:	0008                	0x8
    4a7c:	1400                	addi	s0,sp,544
    4a7e:	45ac                	lw	a1,72(a1)
    4a80:	0000                	unimp
    4a82:	000008eb          	0x8eb
    4a86:	1500                	addi	s0,sp,672
    4a88:	45f4                	lw	a3,76(a1)
    4a8a:	0000                	unimp
    4a8c:	007c                	addi	a5,sp,12
    4a8e:	0000                	unimp
    4a90:	073e                	slli	a4,a4,0xf
    4a92:	0000                	unimp
    4a94:	110e                	slli	sp,sp,0x23
    4a96:	000d                	c.nop	3
    4a98:	0100                	addi	s0,sp,128
    4a9a:	032e                	slli	t1,t1,0xb
    4a9c:	08c9                	addi	a7,a7,18
    4a9e:	0000                	unimp
    4aa0:	746d                	lui	s0,0xffffb
    4aa2:	0000                	unimp
    4aa4:	3c0e                	fld	fs8,224(sp)
    4aa6:	000e                	c.slli	zero,0x3
    4aa8:	0100                	addi	s0,sp,128
    4aaa:	032e                	slli	t1,t1,0xb
    4aac:	08c9                	addi	a7,a7,18
    4aae:	0000                	unimp
    4ab0:	0000748b          	0x748b
    4ab4:	160e                	slli	a2,a2,0x23
    4ab6:	000d                	c.nop	3
    4ab8:	0100                	addi	s0,sp,128
    4aba:	032e                	slli	t1,t1,0xb
    4abc:	08c9                	addi	a7,a7,18
    4abe:	0000                	unimp
    4ac0:	74d8                	flw	fa4,44(s1)
    4ac2:	0000                	unimp
    4ac4:	410e                	lw	sp,192(sp)
    4ac6:	000e                	c.slli	zero,0x3
    4ac8:	0100                	addi	s0,sp,128
    4aca:	032e                	slli	t1,t1,0xb
    4acc:	08c9                	addi	a7,a7,18
    4ace:	0000                	unimp
    4ad0:	7501                	lui	a0,0xfffe0
    4ad2:	0000                	unimp
    4ad4:	680e                	flw	fa6,192(sp)
    4ad6:	000d                	c.nop	3
    4ad8:	0100                	addi	s0,sp,128
    4ada:	032e                	slli	t1,t1,0xb
    4adc:	0056                	c.slli	zero,0x15
    4ade:	0000                	unimp
    4ae0:	751f 0000 4b0e      	0x4b0e0000751f
    4ae6:	000e                	c.slli	zero,0x3
    4ae8:	0100                	addi	s0,sp,128
    4aea:	032e                	slli	t1,t1,0xb
    4aec:	0056                	c.slli	zero,0x15
    4aee:	0000                	unimp
    4af0:	753d                	lui	a0,0xfffef
    4af2:	0000                	unimp
    4af4:	6d0e                	flw	fs10,192(sp)
    4af6:	000d                	c.nop	3
    4af8:	0100                	addi	s0,sp,128
    4afa:	032e                	slli	t1,t1,0xb
    4afc:	0056                	c.slli	zero,0x15
    4afe:	0000                	unimp
    4b00:	0000755b          	0x755b
    4b04:	460e                	lw	a2,192(sp)
    4b06:	000e                	c.slli	zero,0x3
    4b08:	0100                	addi	s0,sp,128
    4b0a:	032e                	slli	t1,t1,0xb
    4b0c:	0056                	c.slli	zero,0x15
    4b0e:	0000                	unimp
    4b10:	758c                	flw	fa1,40(a1)
    4b12:	0000                	unimp
    4b14:	f815                	bnez	s0,4a48 <__ledf2+0x8>
    4b16:	0045                	c.nop	17
    4b18:	1000                	addi	s0,sp,32
    4b1a:	0000                	unimp
    4b1c:	c700                	sw	s0,8(a4)
    4b1e:	0006                	c.slli	zero,0x1
    4b20:	1600                	addi	s0,sp,800
    4b22:	0e71                	addi	t3,t3,28
    4b24:	0000                	unimp
    4b26:	2e01                	jal	4e36 <__muldf3+0x312>
    4b28:	0008c903          	lbu	s2,0(a7)
    4b2c:	0100                	addi	s0,sp,128
    4b2e:	165a                	slli	a2,a2,0x36
    4b30:	00000d0b          	0xd0b
    4b34:	2e01                	jal	4e44 <__muldf3+0x320>
    4b36:	0008c903          	lbu	s2,0(a7)
    4b3a:	0100                	addi	s0,sp,128
    4b3c:	0815005b          	0x815005b
    4b40:	0046                	c.slli	zero,0x11
    4b42:	1000                	addi	s0,sp,32
    4b44:	0000                	unimp
    4b46:	f100                	fsw	fs0,32(a0)
    4b48:	0006                	c.slli	zero,0x1
    4b4a:	1600                	addi	s0,sp,800
    4b4c:	0e71                	addi	t3,t3,28
    4b4e:	0000                	unimp
    4b50:	2e01                	jal	4e60 <__muldf3+0x33c>
    4b52:	0008c903          	lbu	s2,0(a7)
    4b56:	0100                	addi	s0,sp,128
    4b58:	165a                	slli	a2,a2,0x36
    4b5a:	00000d0b          	0xd0b
    4b5e:	2e01                	jal	4e6e <__muldf3+0x34a>
    4b60:	0008c903          	lbu	s2,0(a7)
    4b64:	0100                	addi	s0,sp,128
    4b66:	1815005b          	0x1815005b
    4b6a:	0046                	c.slli	zero,0x11
    4b6c:	1000                	addi	s0,sp,32
    4b6e:	0000                	unimp
    4b70:	1b00                	addi	s0,sp,432
    4b72:	16000007          	0x16000007
    4b76:	0e71                	addi	t3,t3,28
    4b78:	0000                	unimp
    4b7a:	2e01                	jal	4e8a <__muldf3+0x366>
    4b7c:	0008c903          	lbu	s2,0(a7)
    4b80:	0100                	addi	s0,sp,128
    4b82:	165a                	slli	a2,a2,0x36
    4b84:	00000d0b          	0xd0b
    4b88:	2e01                	jal	4e98 <__muldf3+0x374>
    4b8a:	0008c903          	lbu	s2,0(a7)
    4b8e:	0100                	addi	s0,sp,128
    4b90:	c017005b          	0xc017005b
    4b94:	0009                	c.nop	2
    4b96:	1600                	addi	s0,sp,800
    4b98:	0e71                	addi	t3,t3,28
    4b9a:	0000                	unimp
    4b9c:	2e01                	jal	4eac <__muldf3+0x388>
    4b9e:	0008c903          	lbu	s2,0(a7)
    4ba2:	0100                	addi	s0,sp,128
    4ba4:	165a                	slli	a2,a2,0x36
    4ba6:	00000d0b          	0xd0b
    4baa:	2e01                	jal	4eba <__muldf3+0x396>
    4bac:	0008c903          	lbu	s2,0(a7)
    4bb0:	0100                	addi	s0,sp,128
    4bb2:	1200005b          	0x1200005b
    4bb6:	09d8                	addi	a4,sp,212
    4bb8:	0000                	unimp
    4bba:	0758                	addi	a4,sp,900
    4bbc:	0000                	unimp
    4bbe:	5f10                	lw	a2,56(a4)
    4bc0:	785f 0100 032e      	0x32e0100785f
    4bc6:	08c9                	addi	a7,a7,18
    4bc8:	0000                	unimp
    4bca:	75aa                	flw	fa1,168(sp)
    4bcc:	0000                	unimp
    4bce:	1700                	addi	s0,sp,928
    4bd0:	09f0                	addi	a2,sp,220
    4bd2:	0000                	unimp
    4bd4:	5f10                	lw	a2,56(a4)
    4bd6:	785f 0100 032e      	0x32e0100785f
    4bdc:	08c9                	addi	a7,a7,18
    4bde:	0000                	unimp
    4be0:	75c8                	flw	fa0,44(a1)
    4be2:	0000                	unimp
    4be4:	0000                	unimp
    4be6:	d815                	beqz	s0,4b1a <__ledf2+0xda>
    4be8:	0046                	c.slli	zero,0x11
    4bea:	1000                	addi	s0,sp,32
    4bec:	0000                	unimp
    4bee:	8d00                	0x8d00
    4bf0:	10000007          	vle128.v	v0,(zero),v0.t
    4bf4:	5f5f 0078 2f01      	0x2f0100785f5f
    4bfa:	0008c903          	lbu	s2,0(a7)
    4bfe:	db00                	sw	s0,48(a4)
    4c00:	0075                	c.nop	29
    4c02:	0000                	unimp
    4c04:	9f18                	0x9f18
    4c06:	11000007          	vle128ff.v	v0,(zero),v0.t
    4c0a:	5f5f 0078 2f01      	0x2f0100785f5f
    4c10:	0008c903          	lbu	s2,0(a7)
    4c14:	0000                	unimp
    4c16:	b118                	fsd	fa4,32(a0)
    4c18:	11000007          	vle128ff.v	v0,(zero),v0.t
    4c1c:	5f5f 0078 2f01      	0x2f0100785f5f
    4c22:	0008c903          	lbu	s2,0(a7)
    4c26:	0000                	unimp
    4c28:	2812                	fld	fa6,256(sp)
    4c2a:	000a                	c.slli	zero,0x2
    4c2c:	af00                	fsd	fs0,24(a4)
    4c2e:	0008                	0x8
    4c30:	1300                	addi	s0,sp,416
    4c32:	0dec                	addi	a1,sp,732
    4c34:	0000                	unimp
    4c36:	2f01                	jal	5346 <__clzsi2+0x3e>
    4c38:	00002c03          	lw	s8,0(zero) # 0 <RAM_START_ADDRESS>
    4c3c:	1800                	addi	s0,sp,48
    4c3e:	083a                	slli	a6,a6,0xe
    4c40:	0000                	unimp
    4c42:	000e2013          	slti	zero,t3,0
    4c46:	0100                	addi	s0,sp,128
    4c48:	08c2032f          	vamoswapei8.v	zero,(tp),v12,v6,v0.t
    4c4c:	0000                	unimp
    4c4e:	000da413          	slti	s0,s11,0
    4c52:	0100                	addi	s0,sp,128
    4c54:	08c2032f          	vamoswapei8.v	zero,(tp),v12,v6,v0.t
    4c58:	0000                	unimp
    4c5a:	000e5513          	srli	a0,t3,0x0
    4c5e:	0100                	addi	s0,sp,128
    4c60:	08c2032f          	vamoswapei8.v	zero,(tp),v12,v6,v0.t
    4c64:	0000                	unimp
    4c66:	000c9213          	slli	tp,s9,0x0
    4c6a:	0100                	addi	s0,sp,128
    4c6c:	08c9032f          	vamoswapei8.v	zero,(s2),v12,v6,v0.t
    4c70:	0000                	unimp
    4c72:	000caa13          	slti	s4,s9,0
    4c76:	0100                	addi	s0,sp,128
    4c78:	08c9032f          	vamoswapei8.v	zero,(s2),v12,v6,v0.t
    4c7c:	0000                	unimp
    4c7e:	1918                	addi	a4,sp,176
    4c80:	0008                	0x8
    4c82:	1100                	addi	s0,sp,160
    4c84:	5f5f 0078 2f01      	0x2f0100785f5f
    4c8a:	0008c903          	lbu	s2,0(a7)
    4c8e:	0000                	unimp
    4c90:	2b18                	fld	fa4,16(a4)
    4c92:	0008                	0x8
    4c94:	1100                	addi	s0,sp,160
    4c96:	5f5f 0078 2f01      	0x2f0100785f5f
    4c9c:	0008c903          	lbu	s2,0(a7)
    4ca0:	0000                	unimp
    4ca2:	1119                	addi	sp,sp,-26
    4ca4:	5f5f 0078 2f01      	0x2f0100785f5f
    4caa:	0008c903          	lbu	s2,0(a7)
    4cae:	0000                	unimp
    4cb0:	1500                	addi	s0,sp,672
    4cb2:	482c                	lw	a1,80(s0)
    4cb4:	0000                	unimp
    4cb6:	0010                	0x10
    4cb8:	0000                	unimp
    4cba:	0858                	addi	a4,sp,20
    4cbc:	0000                	unimp
    4cbe:	5f10                	lw	a2,56(a4)
    4cc0:	785f 0100 032f      	0x32f0100785f
    4cc6:	08c9                	addi	a7,a7,18
    4cc8:	0000                	unimp
    4cca:	75ee                	flw	fa1,248(sp)
    4ccc:	0000                	unimp
    4cce:	1800                	addi	s0,sp,48
    4cd0:	086a                	slli	a6,a6,0x1a
    4cd2:	0000                	unimp
    4cd4:	5f11                	li	t5,-28
    4cd6:	785f 0100 032f      	0x32f0100785f
    4cdc:	08c9                	addi	a7,a7,18
    4cde:	0000                	unimp
    4ce0:	1800                	addi	s0,sp,48
    4ce2:	087c                	addi	a5,sp,28
    4ce4:	0000                	unimp
    4ce6:	5f11                	li	t5,-28
    4ce8:	785f 0100 032f      	0x32f0100785f
    4cee:	08c9                	addi	a7,a7,18
    4cf0:	0000                	unimp
    4cf2:	1800                	addi	s0,sp,48
    4cf4:	088e                	slli	a7,a7,0x3
    4cf6:	0000                	unimp
    4cf8:	5f11                	li	t5,-28
    4cfa:	785f 0100 032f      	0x32f0100785f
    4d00:	08c9                	addi	a7,a7,18
    4d02:	0000                	unimp
    4d04:	1800                	addi	s0,sp,48
    4d06:	08a0                	addi	s0,sp,88
    4d08:	0000                	unimp
    4d0a:	5f11                	li	t5,-28
    4d0c:	785f 0100 032f      	0x32f0100785f
    4d12:	08c9                	addi	a7,a7,18
    4d14:	0000                	unimp
    4d16:	1900                	addi	s0,sp,176
    4d18:	5f11                	li	t5,-28
    4d1a:	785f 0100 032f      	0x32f0100785f
    4d20:	08c9                	addi	a7,a7,18
    4d22:	0000                	unimp
    4d24:	0000                	unimp
    4d26:	000a1017          	auipc	zero,0xa1
    4d2a:	1300                	addi	s0,sp,416
    4d2c:	00000a9b          	0xa9b
    4d30:	2f01                	jal	5440 <memcpy+0x28>
    4d32:	0000c003          	lbu	zero,0(ra) # ffffb000 <RAM_SIZE+0xfffeb000>
    4d36:	0000                	unimp
    4d38:	0200                	addi	s0,sp,256
    4d3a:	0504                	addi	s1,sp,640
    4d3c:	01c0                	addi	s0,sp,196
    4d3e:	0000                	unimp
    4d40:	0402                	c.slli64	s0
    4d42:	0008c207          	flq	ft4,0(a7)
    4d46:	1a00                	addi	s0,sp,304
    4d48:	0c76                	slli	s8,s8,0x1d
    4d4a:	0000                	unimp
    4d4c:	0c76                	slli	s8,s8,0x1d
    4d4e:	0000                	unimp
    4d50:	921a                	add	tp,tp,t1
    4d52:	92000003          	lb	zero,-1760(zero) # fffff920 <RAM_SIZE+0xfffef920>
    4d56:	1a000003          	lb	zero,416(zero) # 1a0 <calc_func+0x80>
    4d5a:	03d2                	slli	t2,t2,0x14
    4d5c:	0000                	unimp
    4d5e:	03d2                	slli	t2,t2,0x14
    4d60:	0000                	unimp
    4d62:	761a                	flw	fa2,164(sp)
    4d64:	0009                	c.nop	2
    4d66:	7600                	flw	fs0,40(a2)
    4d68:	0009                	c.nop	2
    4d6a:	0000                	unimp
    4d6c:	0251                	addi	tp,tp,20
    4d6e:	0000                	unimp
    4d70:	0004                	0x4
    4d72:	138e                	slli	t2,t2,0x23
    4d74:	0000                	unimp
    4d76:	0104                	addi	s1,sp,128
    4d78:	0ab5                	addi	s5,s5,13
    4d7a:	0000                	unimp
    4d7c:	7f0c                	flw	fa1,56(a4)
    4d7e:	000e                	c.slli	zero,0x3
    4d80:	1d00                	addi	s0,sp,688
    4d82:	000a                	c.slli	zero,0x2
    4d84:	d000                	sw	s0,32(s0)
    4d86:	0048                	addi	a0,sp,4
    4d88:	8c00                	0x8c00
    4d8a:	0000                	unimp
    4d8c:	5a00                	lw	s0,48(a2)
    4d8e:	0092                	slli	ra,ra,0x4
    4d90:	0200                	addi	s0,sp,256
    4d92:	0408                	addi	a0,sp,512
    4d94:	118c                	addi	a1,sp,224
    4d96:	0000                	unimp
    4d98:	000eaf03          	lw	t5,0(t4)
    4d9c:	0200                	addi	s0,sp,256
    4d9e:	0d52                	slli	s10,s10,0x14
    4da0:	0038                	addi	a4,sp,8
    4da2:	0000                	unimp
    4da4:	0404                	addi	s1,sp,512
    4da6:	6905                	lui	s2,0x1
    4da8:	746e                	flw	fs0,248(sp)
    4daa:	0200                	addi	s0,sp,256
    4dac:	0601                	addi	a2,a2,0
    4dae:	0264                	addi	s1,sp,268
    4db0:	0000                	unimp
    4db2:	0802                	c.slli64	a6
    4db4:	bb05                	j	4ae4 <__ledf2+0xa4>
    4db6:	0001                	nop
    4db8:	0200                	addi	s0,sp,256
    4dba:	0801                	addi	a6,a6,0
    4dbc:	0262                	slli	tp,tp,0x18
    4dbe:	0000                	unimp
    4dc0:	0402                	c.slli64	s0
    4dc2:	0008c707          	flq	fa4,0(a7)
    4dc6:	0200                	addi	s0,sp,256
    4dc8:	0708                	addi	a0,sp,896
    4dca:	08bd                	addi	a7,a7,15
    4dcc:	0000                	unimp
    4dce:	0202                	c.slli64	tp
    4dd0:	0002ba07          	fld	fs4,0(t0) # fffee000 <RAM_SIZE+0xfffde000>
    4dd4:	0300                	addi	s0,sp,384
    4dd6:	0aae                	slli	s5,s5,0xb
    4dd8:	0000                	unimp
    4dda:	250f4803          	lbu	a6,592(t5)
    4dde:	0000                	unimp
    4de0:	0500                	addi	s0,sp,640
    4de2:	0308                	addi	a0,sp,384
    4de4:	00bf034f          	fnmadd.s	ft6,ft10,fa1,ft0,rne
    4de8:	0000                	unimp
    4dea:	1706                	slli	a4,a4,0x21
    4dec:	000a                	c.slli	zero,0x2
    4dee:	0300                	addi	s0,sp,384
    4df0:	00540e57          	vadd.vv	v28,v5,v8,v0.t
    4df4:	0000                	unimp
    4df6:	2004                	fld	fs1,0(s0)
    4df8:	0000                	unimp
    4dfa:	9706                	add	a4,a4,ra
    4dfc:	0300000b          	0x300000b
    4e00:	0e58                	addi	a4,sp,788
    4e02:	0054                	addi	a3,sp,4
    4e04:	0000                	unimp
    4e06:	1404                	addi	s1,sp,544
    4e08:	040c                	addi	a1,sp,512
    4e0a:	70786507          	0x70786507
    4e0e:	0300                	addi	s0,sp,384
    4e10:	0e59                	addi	t3,t3,22
    4e12:	0054                	addi	a3,sp,4
    4e14:	0000                	unimp
    4e16:	0b04                	addi	s1,sp,400
    4e18:	0401                	addi	s0,s0,0
    4e1a:	ed06                	fsw	ft1,152(sp)
    4e1c:	0008                	0x8
    4e1e:	0300                	addi	s0,sp,384
    4e20:	0e5a                	slli	t3,t3,0x16
    4e22:	0054                	addi	a3,sp,4
    4e24:	0000                	unimp
    4e26:	0104                	addi	s1,sp,128
    4e28:	0400                	addi	s0,sp,512
    4e2a:	0800                	addi	s0,sp,16
    4e2c:	0c38                	addi	a4,sp,536
    4e2e:	0000                	unimp
    4e30:	0308                	addi	a0,sp,384
    4e32:	074c                	addi	a1,sp,900
    4e34:	00e5                	addi	ra,ra,25
    4e36:	0000                	unimp
    4e38:	6609                	lui	a2,0x2
    4e3a:	746c                	flw	fa1,108(s0)
    4e3c:	0300                	addi	s0,sp,384
    4e3e:	0a4e                	slli	s4,s4,0x13
    4e40:	0069                	c.nop	26
    4e42:	0000                	unimp
    4e44:	710a                	flw	ft2,160(sp)
    4e46:	000c                	0xc
    4e48:	0300                	addi	s0,sp,384
    4e4a:	055c                	addi	a5,sp,644
    4e4c:	0075                	c.nop	29
    4e4e:	0000                	unimp
    4e50:	0b00                	addi	s0,sp,400
    4e52:	00000e77          	0xe77
    4e56:	2301                	jal	5356 <exit+0x2>
    4e58:	2c01                	jal	5068 <__muldf3+0x544>
    4e5a:	0000                	unimp
    4e5c:	d000                	sw	s0,32(s0)
    4e5e:	0048                	addi	a0,sp,4
    4e60:	8c00                	0x8c00
    4e62:	0000                	unimp
    4e64:	0100                	addi	s0,sp,128
    4e66:	469c                	lw	a5,8(a3)
    4e68:	0002                	c.slli64	zero
    4e6a:	0c00                	addi	s0,sp,528
    4e6c:	0061                	c.nop	24
    4e6e:	2301                	jal	536e <exit+0x1a>
    4e70:	6911                	lui	s2,0x4
    4e72:	0000                	unimp
    4e74:	0100                	addi	s0,sp,128
    4e76:	0076                	c.slli	zero,0x1d
    4e78:	0c00                	addi	s0,sp,528
    4e7a:	0062                	c.slli	zero,0x18
    4e7c:	2301                	jal	537c <exit+0x28>
    4e7e:	0000691b          	0x691b
    4e82:	2900                	fld	fs0,16(a0)
    4e84:	0076                	c.slli	zero,0x1d
    4e86:	0d00                	addi	s0,sp,656
    4e88:	0b78                	addi	a4,sp,412
    4e8a:	0000                	unimp
    4e8c:	2501                	jal	548c <memcpy+0x74>
    4e8e:	00003803          	0x3803
    4e92:	0000                	unimp
    4e94:	880d                	andi	s0,s0,3
    4e96:	000c                	0xc
    4e98:	0100                	addi	s0,sp,128
    4e9a:	0325                	addi	t1,t1,9
    4e9c:	0038                	addi	a4,sp,8
    4e9e:	0000                	unimp
    4ea0:	0e00                	addi	s0,sp,784
    4ea2:	5f41                	li	t5,-16
    4ea4:	26010063          	beqz	sp,5104 <__muldf3+0x5e0>
    4ea8:	00024603          	lbu	a2,0(tp) # ffffd000 <RAM_SIZE+0xfffed000>
    4eac:	0f00                	addi	s0,sp,912
    4eae:	5f41                	li	t5,-16
    4eb0:	26010073          	0x26010073
    4eb4:	00024603          	lbu	a2,0(tp) # 0 <RAM_START_ADDRESS>
    4eb8:	0600                	addi	s0,sp,768
    4eba:	ff08007b          	0xff08007b
    4ebe:	9f1a                	add	t5,t5,t1
    4ec0:	655f410f          	0x655f410f
    4ec4:	0100                	addi	s0,sp,128
    4ec6:	0326                	slli	t1,t1,0x9
    4ec8:	0246                	slli	tp,tp,0x11
    4eca:	0000                	unimp
    4ecc:	5e01                	li	t3,-32
    4ece:	a210                	fsd	fa2,0(a2)
    4ed0:	0100000b          	0x100000b
    4ed4:	0326                	slli	t1,t1,0x9
    4ed6:	024d                	addi	tp,tp,19
    4ed8:	0000                	unimp
    4eda:	5601                	li	a2,-32
    4edc:	6e10                	flw	fa2,24(a2)
    4ede:	0100000b          	0x100000b
    4ee2:	0326                	slli	t1,t1,0x9
    4ee4:	024d                	addi	tp,tp,19
    4ee6:	0000                	unimp
    4ee8:	6101                	0x6101
    4eea:	420e                	lw	tp,192(sp)
    4eec:	635f 0100 0327      	0x3270100635f
    4ef2:	0246                	slli	tp,tp,0x11
    4ef4:	0000                	unimp
    4ef6:	735f420f          	0x735f420f
    4efa:	0100                	addi	s0,sp,128
    4efc:	02460327          	0x2460327
    4f00:	0000                	unimp
    4f02:	7d06                	flw	fs10,96(sp)
    4f04:	0800                	addi	s0,sp,16
    4f06:	1aff                	0x1aff
    4f08:	0f9f 5f42 0065      	0x655f420f9f
    4f0e:	2701                	jal	560e <memset+0xce>
    4f10:	00024603          	lbu	a2,0(tp) # 0 <RAM_START_ADDRESS>
    4f14:	0100                	addi	s0,sp,128
    4f16:	1160                	addi	s0,sp,172
    4f18:	0bbc                	addi	a5,sp,472
    4f1a:	0000                	unimp
    4f1c:	2701                	jal	561c <modf>
    4f1e:	00024d03          	lbu	s10,0(tp) # 0 <RAM_START_ADDRESS>
    4f22:	7100                	flw	fs0,32(a0)
    4f24:	0076                	c.slli	zero,0x1d
    4f26:	1000                	addi	s0,sp,32
    4f28:	0bc1                	addi	s7,s7,16
    4f2a:	0000                	unimp
    4f2c:	2701                	jal	562c <modf+0x10>
    4f2e:	00024d03          	lbu	s10,0(tp) # 0 <RAM_START_ADDRESS>
    4f32:	0100                	addi	s0,sp,128
    4f34:	0f5f 0072 2801      	0x280100720f5f
    4f3a:	00002c0b          	0x2c0b
    4f3e:	0100                	addi	s0,sp,128
    4f40:	125a                	slli	tp,tp,0x36
    4f42:	0a40                	addi	s0,sp,276
    4f44:	0000                	unimp
    4f46:	000001eb          	0x1eb
    4f4a:	000ba713          	slti	a4,s7,0
    4f4e:	0100                	addi	s0,sp,128
    4f50:	00bf032b          	0xbf032b
    4f54:	0000                	unimp
    4f56:	1200                	addi	s0,sp,288
    4f58:	0a68                	addi	a0,sp,284
    4f5a:	0000                	unimp
    4f5c:	0201                	addi	tp,tp,0
    4f5e:	0000                	unimp
    4f60:	000ba713          	slti	a4,s7,0
    4f64:	0100                	addi	s0,sp,128
    4f66:	032c                	addi	a1,sp,392
    4f68:	000000bf 02131400 	0x2131400000000bf
    4f70:	0000                	unimp
    4f72:	000ebd13          	sltiu	s10,t4,0
    4f76:	0100                	addi	s0,sp,128
    4f78:	032d                	addi	t1,t1,11
    4f7a:	0038                	addi	a4,sp,8
    4f7c:	0000                	unimp
    4f7e:	1400                	addi	s0,sp,544
    4f80:	0225                	addi	tp,tp,9
    4f82:	0000                	unimp
    4f84:	000ebd13          	sltiu	s10,t4,0
    4f88:	0100                	addi	s0,sp,128
    4f8a:	032d                	addi	t1,t1,11
    4f8c:	0038                	addi	a4,sp,8
    4f8e:	0000                	unimp
    4f90:	1400                	addi	s0,sp,544
    4f92:	00000237          	lui	tp,0x0
    4f96:	000ebd13          	sltiu	s10,t4,0
    4f9a:	0100                	addi	s0,sp,128
    4f9c:	032d                	addi	t1,t1,11
    4f9e:	0038                	addi	a4,sp,8
    4fa0:	0000                	unimp
    4fa2:	1500                	addi	s0,sp,672
    4fa4:	000ebd13          	sltiu	s10,t4,0
    4fa8:	0100                	addi	s0,sp,128
    4faa:	032d                	addi	t1,t1,11
    4fac:	0038                	addi	a4,sp,8
    4fae:	0000                	unimp
    4fb0:	0000                	unimp
    4fb2:	0402                	c.slli64	s0
    4fb4:	c005                	beqz	s0,4fd4 <__muldf3+0x4b0>
    4fb6:	0001                	nop
    4fb8:	0200                	addi	s0,sp,256
    4fba:	0704                	addi	s1,sp,896
    4fbc:	08c2                	slli	a7,a7,0x10
    4fbe:	0000                	unimp
    4fc0:	4f00                	lw	s0,24(a4)
    4fc2:	0002                	c.slli64	zero
    4fc4:	0400                	addi	s0,sp,512
    4fc6:	d900                	sw	s0,48(a0)
    4fc8:	0014                	0x14
    4fca:	0400                	addi	s0,sp,512
    4fcc:	b501                	j	4dcc <__muldf3+0x2a8>
    4fce:	000a                	c.slli	zero,0x2
    4fd0:	0c00                	addi	s0,sp,528
    4fd2:	0ed6                	slli	t4,t4,0x15
    4fd4:	0000                	unimp
    4fd6:	0a1d                	addi	s4,s4,7
    4fd8:	0000                	unimp
    4fda:	495c                	lw	a5,20(a0)
    4fdc:	0000                	unimp
    4fde:	00e4                	addi	s1,sp,76
    4fe0:	0000                	unimp
    4fe2:	94a8                	0x94a8
    4fe4:	0000                	unimp
    4fe6:	0802                	c.slli64	a6
    4fe8:	8c04                	0x8c04
    4fea:	0011                	c.nop	4
    4fec:	0300                	addi	s0,sp,384
    4fee:	00000eaf          	vamoaddei8.v	zero,(zero),v0,v29,v0.t
    4ff2:	5202                	lw	tp,32(sp)
    4ff4:	380d                	jal	4826 <__divdf3+0x73a>
    4ff6:	0000                	unimp
    4ff8:	0400                	addi	s0,sp,512
    4ffa:	0504                	addi	s1,sp,640
    4ffc:	6e69                	lui	t3,0x1a
    4ffe:	0074                	addi	a3,sp,12
    5000:	0102                	c.slli64	sp
    5002:	6406                	flw	fs0,64(sp)
    5004:	0002                	c.slli64	zero
    5006:	0200                	addi	s0,sp,256
    5008:	0508                	addi	a0,sp,640
    500a:	000001bb          	0x1bb
    500e:	0102                	c.slli64	sp
    5010:	6208                	flw	fa0,0(a2)
    5012:	0002                	c.slli64	zero
    5014:	0200                	addi	s0,sp,256
    5016:	0704                	addi	s1,sp,896
    5018:	000008c7          	fmsub.s	fa7,ft0,ft0,ft0,rne
    501c:	0802                	c.slli64	a6
    501e:	0008bd07          	fld	fs10,0(a7)
    5022:	0200                	addi	s0,sp,256
    5024:	0702                	c.slli64	a4
    5026:	02ba                	slli	t0,t0,0xe
    5028:	0000                	unimp
    502a:	000aae03          	lw	t3,0(s5) # 8608 <__heap_end+0xd78>
    502e:	0300                	addi	s0,sp,384
    5030:	0f48                	addi	a0,sp,916
    5032:	0025                	c.nop	9
    5034:	0000                	unimp
    5036:	0805                	addi	a6,a6,1
    5038:	bf034f03          	lbu	t5,-1040(t1) # fffe9bf0 <RAM_SIZE+0xfffd9bf0>
    503c:	0000                	unimp
    503e:	0600                	addi	s0,sp,768
    5040:	00000a17          	auipc	s4,0x0
    5044:	540e5703          	lhu	a4,1344(t3) # 1a540 <RAM_SIZE+0xa540>
    5048:	0000                	unimp
    504a:	0400                	addi	s0,sp,512
    504c:	0020                	addi	s0,sp,8
    504e:	0600                	addi	s0,sp,768
    5050:	00000b97          	auipc	s7,0x0
    5054:	540e5803          	lhu	a6,1344(t3)
    5058:	0000                	unimp
    505a:	0400                	addi	s0,sp,512
    505c:	0c14                	addi	a3,sp,528
    505e:	0704                	addi	s1,sp,896
    5060:	7865                	lui	a6,0xffff9
    5062:	0070                	addi	a2,sp,12
    5064:	540e5903          	lhu	s2,1344(t3)
    5068:	0000                	unimp
    506a:	0400                	addi	s0,sp,512
    506c:	0604010b          	0x604010b
    5070:	08ed                	addi	a7,a7,27
    5072:	0000                	unimp
    5074:	540e5a03          	lhu	s4,1344(t3)
    5078:	0000                	unimp
    507a:	0400                	addi	s0,sp,512
    507c:	0001                	nop
    507e:	0004                	0x4
    5080:	3808                	fld	fa0,48(s0)
    5082:	000c                	0xc
    5084:	0800                	addi	s0,sp,16
    5086:	e5074c03          	lbu	s8,-432(a4) # 19e50 <RAM_SIZE+0x9e50>
    508a:	0000                	unimp
    508c:	0900                	addi	s0,sp,144
    508e:	6c66                	flw	fs8,88(sp)
    5090:	0074                	addi	a3,sp,12
    5092:	690a4e03          	lbu	t3,1680(s4) # 56d0 <modf+0xb4>
    5096:	0000                	unimp
    5098:	0a00                	addi	s0,sp,272
    509a:	0c71                	addi	s8,s8,28
    509c:	0000                	unimp
    509e:	75055c03          	lhu	s8,1872(a0) # fffef750 <RAM_SIZE+0xfffdf750>
    50a2:	0000                	unimp
    50a4:	0000                	unimp
    50a6:	000ece0b          	0xece0b
    50aa:	0100                	addi	s0,sp,128
    50ac:	002c0123          	sb	sp,2(s8) # a002 <__heap_end+0x2772>
    50b0:	0000                	unimp
    50b2:	495c                	lw	a5,20(a0)
    50b4:	0000                	unimp
    50b6:	00e4                	addi	s1,sp,76
    50b8:	0000                	unimp
    50ba:	9c01                	0x9c01
    50bc:	0244                	addi	s1,sp,260
    50be:	0000                	unimp
    50c0:	610c                	flw	fa1,0(a0)
    50c2:	0100                	addi	s0,sp,128
    50c4:	00691123          	sh	t1,2(s2) # 4002 <__adddf3+0x6ee>
    50c8:	0000                	unimp
    50ca:	76a5                	lui	a3,0xfffe9
    50cc:	0000                	unimp
    50ce:	620c                	flw	fa1,0(a2)
    50d0:	0100                	addi	s0,sp,128
    50d2:	00691b23          	sh	t1,22(s2)
    50d6:	0000                	unimp
    50d8:	76cd                	lui	a3,0xffff3
    50da:	0000                	unimp
    50dc:	780d                	lui	a6,0xfffe3
    50de:	0100000b          	0x100000b
    50e2:	0325                	addi	t1,t1,9
    50e4:	0038                	addi	a4,sp,8
    50e6:	0000                	unimp
    50e8:	0d00                	addi	s0,sp,656
    50ea:	0c88                	addi	a0,sp,592
    50ec:	0000                	unimp
    50ee:	2501                	jal	56ee <modf+0xd2>
    50f0:	00003803          	0x3803
    50f4:	0000                	unimp
    50f6:	410e                	lw	sp,192(sp)
    50f8:	635f 0100 0326      	0x3260100635f
    50fe:	0244                	addi	s1,sp,260
    5100:	0000                	unimp
    5102:	735f410f          	0x735f410f
    5106:	0100                	addi	s0,sp,128
    5108:	0326                	slli	t1,t1,0x9
    510a:	0244                	addi	s1,sp,260
    510c:	0000                	unimp
    510e:	7705                	lui	a4,0xfffe1
    5110:	0000                	unimp
    5112:	4110                	lw	a2,0(a0)
    5114:	655f 0100 0326      	0x3260100655f
    511a:	0244                	addi	s1,sp,260
    511c:	0000                	unimp
    511e:	6001                	0x6001
    5120:	a211                	j	5224 <__fixdfsi+0x74>
    5122:	0100000b          	0x100000b
    5126:	0326                	slli	t1,t1,0x9
    5128:	0000024b          	fnmsub.s	ft4,ft0,ft0,ft0,rne
    512c:	5601                	li	a2,-32
    512e:	6e11                	lui	t3,0x4
    5130:	0100000b          	0x100000b
    5134:	0326                	slli	t1,t1,0x9
    5136:	0000024b          	fnmsub.s	ft4,ft0,ft0,ft0,rne
    513a:	6101                	0x6101
    513c:	420e                	lw	tp,192(sp)
    513e:	635f 0100 0327      	0x3270100635f
    5144:	0244                	addi	s1,sp,260
    5146:	0000                	unimp
    5148:	4210                	lw	a2,0(a2)
    514a:	735f 0100 0327      	0x3270100735f
    5150:	0244                	addi	s1,sp,260
    5152:	0000                	unimp
    5154:	5d01                	li	s10,-32
    5156:	4210                	lw	a2,0(a2)
    5158:	655f 0100 0327      	0x3270100655f
    515e:	0244                	addi	s1,sp,260
    5160:	0000                	unimp
    5162:	5b01                	li	s6,-32
    5164:	bc12                	fsd	ft4,56(sp)
    5166:	0100000b          	0x100000b
    516a:	024b0327          	0x24b0327
    516e:	0000                	unimp
    5170:	775a                	flw	fa4,180(sp)
    5172:	0000                	unimp
    5174:	c111                	beqz	a0,5178 <__muldf3+0x654>
    5176:	0100000b          	0x100000b
    517a:	024b0327          	0x24b0327
    517e:	0000                	unimp
    5180:	5e01                	li	t3,-32
    5182:	7210                	flw	fa2,32(a2)
    5184:	0100                	addi	s0,sp,128
    5186:	0b28                	addi	a0,sp,408
    5188:	002c                	addi	a1,sp,8
    518a:	0000                	unimp
    518c:	5a01                	li	s4,-32
    518e:	000a8813          	mv	a6,s5
    5192:	e300                	fsw	fs0,0(a4)
    5194:	0001                	nop
    5196:	1400                	addi	s0,sp,544
    5198:	00000ba7          	vse8.v	v23,(zero),v0.t
    519c:	2b01                	jal	56ac <modf+0x90>
    519e:	0000bf03          	0xbf03
    51a2:	0000                	unimp
    51a4:	000aa013          	slti	zero,s5,0
    51a8:	f900                	fsw	fs0,48(a0)
    51aa:	0001                	nop
    51ac:	1400                	addi	s0,sp,544
    51ae:	00000ba7          	vse8.v	v23,(zero),v0.t
    51b2:	2c01                	jal	53c2 <__libc_init_array+0x3e>
    51b4:	0000bf03          	0xbf03
    51b8:	0000                	unimp
    51ba:	0b15                	addi	s6,s6,5
    51bc:	0002                	c.slli64	zero
    51be:	1400                	addi	s0,sp,544
    51c0:	0ebd                	addi	t4,t4,15
    51c2:	0000                	unimp
    51c4:	2d01                	jal	57d4 <__call_exitprocs+0x50>
    51c6:	00003803          	0x3803
    51ca:	0000                	unimp
    51cc:	1d15                	addi	s10,s10,-27
    51ce:	0002                	c.slli64	zero
    51d0:	1400                	addi	s0,sp,544
    51d2:	0ebd                	addi	t4,t4,15
    51d4:	0000                	unimp
    51d6:	2d01                	jal	57e6 <__call_exitprocs+0x62>
    51d8:	00003803          	0x3803
    51dc:	0000                	unimp
    51de:	b816                	fsd	ft5,48(sp)
    51e0:	000a                	c.slli	zero,0x2
    51e2:	1200                	addi	s0,sp,288
    51e4:	0f06                	slli	t5,t5,0x1
    51e6:	0000                	unimp
    51e8:	2d01                	jal	57f8 <__call_exitprocs+0x74>
    51ea:	00003803          	0x3803
    51ee:	8300                	0x8300
    51f0:	12000077          	0x12000077
    51f4:	0f18                	addi	a4,sp,912
    51f6:	0000                	unimp
    51f8:	2d01                	jal	5808 <__call_exitprocs+0x84>
    51fa:	00003803          	0x3803
    51fe:	a200                	fsd	fs0,0(a2)
    5200:	00000077          	0x77
    5204:	0200                	addi	s0,sp,256
    5206:	0504                	addi	s1,sp,640
    5208:	01c0                	addi	s0,sp,196
    520a:	0000                	unimp
    520c:	0402                	c.slli64	s0
    520e:	0008c207          	flq	ft4,0(a7)
    5212:	0000                	unimp
    5214:	0000024f          	fnmadd.s	ft4,ft0,ft0,ft0,rne
    5218:	0004                	0x4
    521a:	00001637          	lui	a2,0x1
    521e:	0104                	addi	s1,sp,128
    5220:	0ab5                	addi	s5,s5,13
    5222:	0000                	unimp
    5224:	320c                	fld	fa1,32(a2)
    5226:	1d00000f          	0x1d00000f
    522a:	000a                	c.slli	zero,0x2
    522c:	4000                	lw	s0,0(s0)
    522e:	004a                	c.slli	zero,0x12
    5230:	e400                	fsw	fs0,8(s0)
    5232:	0000                	unimp
    5234:	8b00                	0x8b00
    5236:	02000097          	auipc	ra,0x2000
    523a:	0408                	addi	a0,sp,512
    523c:	118c                	addi	a1,sp,224
    523e:	0000                	unimp
    5240:	000eaf03          	lw	t5,0(t4)
    5244:	0200                	addi	s0,sp,256
    5246:	0d52                	slli	s10,s10,0x14
    5248:	0038                	addi	a4,sp,8
    524a:	0000                	unimp
    524c:	0404                	addi	s1,sp,512
    524e:	6905                	lui	s2,0x1
    5250:	746e                	flw	fs0,248(sp)
    5252:	0200                	addi	s0,sp,256
    5254:	0601                	addi	a2,a2,0
    5256:	0264                	addi	s1,sp,268
    5258:	0000                	unimp
    525a:	0802                	c.slli64	a6
    525c:	bb05                	j	4f8c <__muldf3+0x468>
    525e:	0001                	nop
    5260:	0200                	addi	s0,sp,256
    5262:	0801                	addi	a6,a6,0
    5264:	0262                	slli	tp,tp,0x18
    5266:	0000                	unimp
    5268:	0402                	c.slli64	s0
    526a:	0008c707          	flq	fa4,0(a7)
    526e:	0200                	addi	s0,sp,256
    5270:	0708                	addi	a0,sp,896
    5272:	08bd                	addi	a7,a7,15
    5274:	0000                	unimp
    5276:	0202                	c.slli64	tp
    5278:	0002ba07          	fld	fs4,0(t0)
    527c:	0300                	addi	s0,sp,384
    527e:	0aae                	slli	s5,s5,0xb
    5280:	0000                	unimp
    5282:	250f4803          	lbu	a6,592(t5)
    5286:	0000                	unimp
    5288:	0500                	addi	s0,sp,640
    528a:	0308                	addi	a0,sp,384
    528c:	00bf034f          	fnmadd.s	ft6,ft10,fa1,ft0,rne
    5290:	0000                	unimp
    5292:	1706                	slli	a4,a4,0x21
    5294:	000a                	c.slli	zero,0x2
    5296:	0300                	addi	s0,sp,384
    5298:	00540e57          	vadd.vv	v28,v5,v8,v0.t
    529c:	0000                	unimp
    529e:	2004                	fld	fs1,0(s0)
    52a0:	0000                	unimp
    52a2:	9706                	add	a4,a4,ra
    52a4:	0300000b          	0x300000b
    52a8:	0e58                	addi	a4,sp,788
    52aa:	0054                	addi	a3,sp,4
    52ac:	0000                	unimp
    52ae:	1404                	addi	s1,sp,544
    52b0:	040c                	addi	a1,sp,512
    52b2:	70786507          	0x70786507
    52b6:	0300                	addi	s0,sp,384
    52b8:	0e59                	addi	t3,t3,22
    52ba:	0054                	addi	a3,sp,4
    52bc:	0000                	unimp
    52be:	0b04                	addi	s1,sp,400
    52c0:	0401                	addi	s0,s0,0
    52c2:	ed06                	fsw	ft1,152(sp)
    52c4:	0008                	0x8
    52c6:	0300                	addi	s0,sp,384
    52c8:	0e5a                	slli	t3,t3,0x16
    52ca:	0054                	addi	a3,sp,4
    52cc:	0000                	unimp
    52ce:	0104                	addi	s1,sp,128
    52d0:	0400                	addi	s0,sp,512
    52d2:	0800                	addi	s0,sp,16
    52d4:	0c38                	addi	a4,sp,536
    52d6:	0000                	unimp
    52d8:	0308                	addi	a0,sp,384
    52da:	074c                	addi	a1,sp,900
    52dc:	00e5                	addi	ra,ra,25
    52de:	0000                	unimp
    52e0:	6609                	lui	a2,0x2
    52e2:	746c                	flw	fa1,108(s0)
    52e4:	0300                	addi	s0,sp,384
    52e6:	0a4e                	slli	s4,s4,0x13
    52e8:	0069                	c.nop	26
    52ea:	0000                	unimp
    52ec:	710a                	flw	ft2,160(sp)
    52ee:	000c                	0xc
    52f0:	0300                	addi	s0,sp,384
    52f2:	055c                	addi	a5,sp,644
    52f4:	0075                	c.nop	29
    52f6:	0000                	unimp
    52f8:	0b00                	addi	s0,sp,400
    52fa:	0f2a                	slli	t5,t5,0xa
    52fc:	0000                	unimp
    52fe:	2301                	jal	57fe <__call_exitprocs+0x7a>
    5300:	2c01                	jal	5510 <memcpy+0xf8>
    5302:	0000                	unimp
    5304:	4000                	lw	s0,0(s0)
    5306:	004a                	c.slli	zero,0x12
    5308:	e400                	fsw	fs0,8(s0)
    530a:	0000                	unimp
    530c:	0100                	addi	s0,sp,128
    530e:	449c                	lw	a5,8(s1)
    5310:	0002                	c.slli64	zero
    5312:	0c00                	addi	s0,sp,528
    5314:	0061                	c.nop	24
    5316:	2301                	jal	5816 <__call_exitprocs+0x92>
    5318:	6911                	lui	s2,0x4
    531a:	0000                	unimp
    531c:	da00                	sw	s0,48(a2)
    531e:	0c000077          	0xc000077
    5322:	0062                	c.slli	zero,0x18
    5324:	2301                	jal	5824 <__call_exitprocs+0xa0>
    5326:	0000691b          	0x691b
    532a:	0200                	addi	s0,sp,256
    532c:	0078                	addi	a4,sp,12
    532e:	0d00                	addi	s0,sp,656
    5330:	0b78                	addi	a4,sp,412
    5332:	0000                	unimp
    5334:	2501                	jal	5934 <__fpclassifyd+0x8>
    5336:	00003803          	0x3803
    533a:	0000                	unimp
    533c:	880d                	andi	s0,s0,3
    533e:	000c                	0xc
    5340:	0100                	addi	s0,sp,128
    5342:	0325                	addi	t1,t1,9
    5344:	0038                	addi	a4,sp,8
    5346:	0000                	unimp
    5348:	0e00                	addi	s0,sp,784
    534a:	5f41                	li	t5,-16
    534c:	26010063          	beqz	sp,55ac <memset+0x6c>
    5350:	00024403          	lbu	s0,0(tp) # 0 <RAM_START_ADDRESS>
    5354:	0f00                	addi	s0,sp,912
    5356:	5f41                	li	t5,-16
    5358:	26010073          	0x26010073
    535c:	00024403          	lbu	s0,0(tp) # 0 <RAM_START_ADDRESS>
    5360:	3a00                	fld	fs0,48(a2)
    5362:	0078                	addi	a4,sp,12
    5364:	1000                	addi	s0,sp,32
    5366:	5f41                	li	t5,-16
    5368:	0065                	c.nop	25
    536a:	2601                	jal	566a <modf+0x4e>
    536c:	00024403          	lbu	s0,0(tp) # 0 <RAM_START_ADDRESS>
    5370:	0100                	addi	s0,sp,128
    5372:	1160                	addi	s0,sp,172
    5374:	0ba2                	slli	s7,s7,0x8
    5376:	0000                	unimp
    5378:	2601                	jal	5678 <modf+0x5c>
    537a:	00024b03          	lbu	s6,0(tp) # 0 <RAM_START_ADDRESS>
    537e:	0100                	addi	s0,sp,128
    5380:	1156                	slli	sp,sp,0x35
    5382:	0b6e                	slli	s6,s6,0x1b
    5384:	0000                	unimp
    5386:	2601                	jal	5686 <modf+0x6a>
    5388:	00024b03          	lbu	s6,0(tp) # 0 <RAM_START_ADDRESS>
    538c:	0100                	addi	s0,sp,128
    538e:	0e61                	addi	t3,t3,24
    5390:	5f42                	lw	t5,48(sp)
    5392:	27010063          	beq	sp,a6,55f2 <memset+0xb2>
    5396:	00024403          	lbu	s0,0(tp) # 0 <RAM_START_ADDRESS>
    539a:	1000                	addi	s0,sp,32
    539c:	5f42                	lw	t5,48(sp)
    539e:	27010073          	0x27010073
    53a2:	00024403          	lbu	s0,0(tp) # 0 <RAM_START_ADDRESS>
    53a6:	0100                	addi	s0,sp,128
    53a8:	105d                	c.nop	-9
    53aa:	5f42                	lw	t5,48(sp)
    53ac:	0065                	c.nop	25
    53ae:	2701                	jal	5aae <__subdf3+0x3e>
    53b0:	00024403          	lbu	s0,0(tp) # 0 <RAM_START_ADDRESS>
    53b4:	0100                	addi	s0,sp,128
    53b6:	0bbc125b          	0xbbc125b
    53ba:	0000                	unimp
    53bc:	2701                	jal	5abc <__subdf3+0x4c>
    53be:	00024b03          	lbu	s6,0(tp) # 0 <RAM_START_ADDRESS>
    53c2:	8f00                	0x8f00
    53c4:	0078                	addi	a4,sp,12
    53c6:	1100                	addi	s0,sp,160
    53c8:	0bc1                	addi	s7,s7,16
    53ca:	0000                	unimp
    53cc:	2701                	jal	5acc <__subdf3+0x5c>
    53ce:	00024b03          	lbu	s6,0(tp) # 0 <RAM_START_ADDRESS>
    53d2:	0100                	addi	s0,sp,128
    53d4:	105e                	c.slli	zero,0x37
    53d6:	0072                	c.slli	zero,0x1c
    53d8:	2801                	jal	53e8 <__libc_init_array+0x64>
    53da:	00002c0b          	0x2c0b
    53de:	0100                	addi	s0,sp,128
    53e0:	135a                	slli	t1,t1,0x36
    53e2:	0ad8                	addi	a4,sp,340
    53e4:	0000                	unimp
    53e6:	000001e3          	beqz	zero,5be8 <__subdf3+0x178>
    53ea:	a714                	fsd	fa3,8(a4)
    53ec:	0100000b          	0x100000b
    53f0:	00bf032b          	0xbf032b
    53f4:	0000                	unimp
    53f6:	1300                	addi	s0,sp,416
    53f8:	0af0                	addi	a2,sp,348
    53fa:	0000                	unimp
    53fc:	01f9                	addi	gp,gp,30
    53fe:	0000                	unimp
    5400:	a714                	fsd	fa3,8(a4)
    5402:	0100000b          	0x100000b
    5406:	032c                	addi	a1,sp,392
    5408:	000000bf 020b1500 	0x20b1500000000bf
    5410:	0000                	unimp
    5412:	bd14                	fsd	fa3,56(a0)
    5414:	000e                	c.slli	zero,0x3
    5416:	0100                	addi	s0,sp,128
    5418:	032d                	addi	t1,t1,11
    541a:	0038                	addi	a4,sp,8
    541c:	0000                	unimp
    541e:	1500                	addi	s0,sp,672
    5420:	021d                	addi	tp,tp,7
    5422:	0000                	unimp
    5424:	bd14                	fsd	fa3,56(a0)
    5426:	000e                	c.slli	zero,0x3
    5428:	0100                	addi	s0,sp,128
    542a:	032d                	addi	t1,t1,11
    542c:	0038                	addi	a4,sp,8
    542e:	0000                	unimp
    5430:	1600                	addi	s0,sp,800
    5432:	0b08                	addi	a0,sp,400
    5434:	0000                	unimp
    5436:	0612                	slli	a2,a2,0x4
    5438:	0100000f          	fence	w,unknown
    543c:	032d                	addi	t1,t1,11
    543e:	0038                	addi	a4,sp,8
    5440:	0000                	unimp
    5442:	78b8                	flw	fa4,112(s1)
    5444:	0000                	unimp
    5446:	1812                	slli	a6,a6,0x24
    5448:	0100000f          	fence	w,unknown
    544c:	032d                	addi	t1,t1,11
    544e:	0038                	addi	a4,sp,8
    5450:	0000                	unimp
    5452:	000078d7          	vsetvli	a7,zero,e8,m1,tu,mu,d1
    5456:	0000                	unimp
    5458:	0402                	c.slli64	s0
    545a:	c005                	beqz	s0,547a <memcpy+0x62>
    545c:	0001                	nop
    545e:	0200                	addi	s0,sp,256
    5460:	0704                	addi	s1,sp,896
    5462:	08c2                	slli	a7,a7,0x10
    5464:	0000                	unimp
    5466:	e200                	fsw	fs0,0(a2)
    5468:	0009                	c.nop	2
    546a:	0400                	addi	s0,sp,512
    546c:	9500                	0x9500
    546e:	04000017          	auipc	zero,0x4000
    5472:	b501                	j	5272 <__udivsi3+0x16>
    5474:	000a                	c.slli	zero,0x2
    5476:	0c00                	addi	s0,sp,528
    5478:	0fd9                	addi	t6,t6,22
    547a:	0000                	unimp
    547c:	0a1d                	addi	s4,s4,7
    547e:	0000                	unimp
    5480:	4b24                	lw	s1,80(a4)
    5482:	0000                	unimp
    5484:	068c                	addi	a1,sp,832
    5486:	0000                	unimp
    5488:	9a6e                	add	s4,s4,s11
    548a:	0000                	unimp
    548c:	0802                	c.slli64	a6
    548e:	8c04                	0x8c04
    5490:	0011                	c.nop	4
    5492:	0300                	addi	s0,sp,384
    5494:	0504                	addi	s1,sp,640
    5496:	6e69                	lui	t3,0x1a
    5498:	0074                	addi	a3,sp,12
    549a:	0102                	c.slli64	sp
    549c:	6406                	flw	fs0,64(sp)
    549e:	0002                	c.slli64	zero
    54a0:	0200                	addi	s0,sp,256
    54a2:	0508                	addi	a0,sp,640
    54a4:	000001bb          	0x1bb
    54a8:	0102                	c.slli64	sp
    54aa:	6208                	flw	fa0,0(a2)
    54ac:	0002                	c.slli64	zero
    54ae:	0200                	addi	s0,sp,256
    54b0:	0704                	addi	s1,sp,896
    54b2:	000008c7          	fmsub.s	fa7,ft0,ft0,ft0,rne
    54b6:	0802                	c.slli64	a6
    54b8:	0008bd07          	fld	fs10,0(a7)
    54bc:	0400                	addi	s0,sp,512
    54be:	0cea                	slli	s9,s9,0x1a
    54c0:	0000                	unimp
    54c2:	4e02                	lw	t3,0(sp)
    54c4:	1601                	addi	a2,a2,-32
    54c6:	00000063          	beqz	zero,54c6 <memcpy+0xae>
    54ca:	0202                	c.slli64	tp
    54cc:	0002ba07          	fld	fs4,0(t0)
    54d0:	0500                	addi	s0,sp,640
    54d2:	0aae                	slli	s5,s5,0xb
    54d4:	0000                	unimp
    54d6:	250f4803          	lbu	a6,592(t5)
    54da:	0000                	unimp
    54dc:	0600                	addi	s0,sp,768
    54de:	0308                	addi	a0,sp,384
    54e0:	00c0034f          	fnmadd.s	ft6,ft0,fa2,ft0,rne
    54e4:	0000                	unimp
    54e6:	000a1707          	flh	fa4,0(s4)
    54ea:	0300                	addi	s0,sp,384
    54ec:	00480e57          	vadd.vv	v28,v4,v16,v0.t
    54f0:	0000                	unimp
    54f2:	2004                	fld	fs1,0(s0)
    54f4:	0000                	unimp
    54f6:	000b9707          	flh	fa4,0(s7) # 5050 <__muldf3+0x52c>
    54fa:	0300                	addi	s0,sp,384
    54fc:	0e58                	addi	a4,sp,788
    54fe:	0048                	addi	a0,sp,4
    5500:	0000                	unimp
    5502:	1404                	addi	s1,sp,544
    5504:	040c                	addi	a1,sp,512
    5506:	6508                	flw	fa0,8(a0)
    5508:	7078                	flw	fa4,100(s0)
    550a:	0300                	addi	s0,sp,384
    550c:	0e59                	addi	t3,t3,22
    550e:	0048                	addi	a0,sp,4
    5510:	0000                	unimp
    5512:	0b04                	addi	s1,sp,400
    5514:	0401                	addi	s0,s0,0
    5516:	0008ed07          	vle32.v	v26,(a7),v0.t
    551a:	0300                	addi	s0,sp,384
    551c:	0e5a                	slli	t3,t3,0x16
    551e:	0048                	addi	a0,sp,4
    5520:	0000                	unimp
    5522:	0104                	addi	s1,sp,128
    5524:	0400                	addi	s0,sp,512
    5526:	0900                	addi	s0,sp,144
    5528:	0c38                	addi	a4,sp,536
    552a:	0000                	unimp
    552c:	0308                	addi	a0,sp,384
    552e:	074c                	addi	a1,sp,900
    5530:	00e6                	slli	ra,ra,0x19
    5532:	0000                	unimp
    5534:	660a                	flw	fa2,128(sp)
    5536:	746c                	flw	fa1,108(s0)
    5538:	0300                	addi	s0,sp,384
    553a:	0a4e                	slli	s4,s4,0x13
    553c:	006a                	c.slli	zero,0x1a
    553e:	0000                	unimp
    5540:	000c710b          	0xc710b
    5544:	0300                	addi	s0,sp,384
    5546:	055c                	addi	a5,sp,644
    5548:	0076                	c.slli	zero,0x1d
    554a:	0000                	unimp
    554c:	0c00                	addi	s0,sp,528
    554e:	08df 0000 2301      	0x2301000008df
    5554:	6a01                	0x6a01
    5556:	0000                	unimp
    5558:	2400                	fld	fs0,8(s0)
    555a:	8c00004b          	fnmsub.h	ft0,ft0,ft0,fa7,rne
    555e:	0006                	c.slli	zero,0x1
    5560:	0100                	addi	s0,sp,128
    5562:	be9c                	fsd	fa5,56(a3)
    5564:	0009                	c.nop	2
    5566:	0d00                	addi	s0,sp,656
    5568:	0061                	c.nop	24
    556a:	2301                	jal	5a6a <__errno+0x2>
    556c:	6a12                	flw	fs4,4(sp)
    556e:	0000                	unimp
    5570:	0f00                	addi	s0,sp,912
    5572:	0079                	c.nop	30
    5574:	0d00                	addi	s0,sp,656
    5576:	0062                	c.slli	zero,0x18
    5578:	2301                	jal	5a78 <__subdf3+0x8>
    557a:	6a1c                	flw	fa5,16(a2)
    557c:	0000                	unimp
    557e:	9700                	0x9700
    5580:	0079                	c.nop	30
    5582:	0e00                	addi	s0,sp,784
    5584:	0b78                	addi	a4,sp,412
    5586:	0000                	unimp
    5588:	2501                	jal	5b88 <__subdf3+0x118>
    558a:	00002c03          	lw	s8,0(zero) # 0 <RAM_START_ADDRESS>
    558e:	1f00                	addi	s0,sp,944
    5590:	007a                	c.slli	zero,0x1e
    5592:	0f00                	addi	s0,sp,912
    5594:	0c88                	addi	a0,sp,592
    5596:	0000                	unimp
    5598:	2501                	jal	5b98 <__subdf3+0x128>
    559a:	00002c03          	lw	s8,0(zero) # 0 <RAM_START_ADDRESS>
    559e:	0000                	unimp
    55a0:	4110                	lw	a2,0(a0)
    55a2:	635f 0100 0326      	0x3260100635f
    55a8:	09be                	slli	s3,s3,0xf
    55aa:	0000                	unimp
    55ac:	00007a3f 735f4110 	0x735f411000007a3f
    55b4:	0100                	addi	s0,sp,128
    55b6:	0326                	slli	t1,t1,0x9
    55b8:	09be                	slli	s3,s3,0xf
    55ba:	0000                	unimp
    55bc:	7a8a                	flw	fs5,160(sp)
    55be:	0000                	unimp
    55c0:	4110                	lw	a2,0(a0)
    55c2:	655f 0100 0326      	0x3260100655f
    55c8:	09be                	slli	s3,s3,0xf
    55ca:	0000                	unimp
    55cc:	7ad2                	flw	fs5,52(sp)
    55ce:	0000                	unimp
    55d0:	a20e                	fsd	ft3,256(sp)
    55d2:	0100000b          	0x100000b
    55d6:	0326                	slli	t1,t1,0x9
    55d8:	09c5                	addi	s3,s3,17
    55da:	0000                	unimp
    55dc:	7b7e                	flw	fs6,252(sp)
    55de:	0000                	unimp
    55e0:	6e0e                	flw	ft8,192(sp)
    55e2:	0100000b          	0x100000b
    55e6:	0326                	slli	t1,t1,0x9
    55e8:	09c5                	addi	s3,s3,17
    55ea:	0000                	unimp
    55ec:	7c00                	flw	fs0,56(s0)
    55ee:	0000                	unimp
    55f0:	4210                	lw	a2,0(a2)
    55f2:	635f 0100 0327      	0x3270100635f
    55f8:	09be                	slli	s3,s3,0xf
    55fa:	0000                	unimp
    55fc:	00007cb3          	and	s9,zero,zero
    5600:	4210                	lw	a2,0(a2)
    5602:	735f 0100 0327      	0x3270100735f
    5608:	09be                	slli	s3,s3,0xf
    560a:	0000                	unimp
    560c:	00007cf3          	csrrci	s9,ustatus,0
    5610:	4210                	lw	a2,0(a2)
    5612:	655f 0100 0327      	0x3270100655f
    5618:	09be                	slli	s3,s3,0xf
    561a:	0000                	unimp
    561c:	00007d4b          	fnmsub.s	fs10,ft0,ft0,ft0
    5620:	bc0e                	fsd	ft3,56(sp)
    5622:	0100000b          	0x100000b
    5626:	09c50327          	vsse8.v	v6,(a0),t3,v0.t
    562a:	0000                	unimp
    562c:	7e02                	flw	ft8,32(sp)
    562e:	0000                	unimp
    5630:	c10e                	sw	gp,128(sp)
    5632:	0100000b          	0x100000b
    5636:	09c50327          	vsse8.v	v6,(a0),t3,v0.t
    563a:	0000                	unimp
    563c:	7e79                	lui	t3,0xffffe
    563e:	0000                	unimp
    5640:	5210                	lw	a2,32(a2)
    5642:	635f 0100 0328      	0x3280100635f
    5648:	09be                	slli	s3,s3,0xf
    564a:	0000                	unimp
    564c:	7ef5                	lui	t4,0xffffd
    564e:	0000                	unimp
    5650:	5210                	lw	a2,32(a2)
    5652:	735f 0100 0328      	0x3280100735f
    5658:	09be                	slli	s3,s3,0xf
    565a:	0000                	unimp
    565c:	7f20                	flw	fs0,120(a4)
    565e:	0000                	unimp
    5660:	5210                	lw	a2,32(a2)
    5662:	655f 0100 0328      	0x3280100655f
    5668:	09be                	slli	s3,s3,0xf
    566a:	0000                	unimp
    566c:	7f8a                	flw	ft11,160(sp)
    566e:	0000                	unimp
    5670:	540e                	lw	s0,224(sp)
    5672:	0100000b          	0x100000b
    5676:	0328                	addi	a0,sp,392
    5678:	09c5                	addi	s3,s3,17
    567a:	0000                	unimp
    567c:	8019                	srli	s0,s0,0x6
    567e:	0000                	unimp
    5680:	8d0e                	mv	s10,gp
    5682:	000c                	0xc
    5684:	0100                	addi	s0,sp,128
    5686:	0328                	addi	a0,sp,392
    5688:	09c5                	addi	s3,s3,17
    568a:	0000                	unimp
    568c:	811d                	srli	a0,a0,0x7
    568e:	0000                	unimp
    5690:	7211                	lui	tp,0xfffe4
    5692:	0100                	addi	s0,sp,128
    5694:	0a29                	addi	s4,s4,10
    5696:	006a                	c.slli	zero,0x1a
    5698:	0000                	unimp
    569a:	2812                	fld	fa6,256(sp)
    569c:	4900000b          	0x4900000b
    56a0:	0002                	c.slli64	zero
    56a2:	1300                	addi	s0,sp,416
    56a4:	00000ba7          	vse8.v	v23,(zero),v0.t
    56a8:	2c01                	jal	58b8 <register_fini+0x14>
    56aa:	0000c003          	lbu	zero,0(ra) # 2005236 <RAM_SIZE+0x1ff5236>
    56ae:	0000                	unimp
    56b0:	6012                	flw	ft0,4(sp)
    56b2:	7500000b          	0x7500000b
    56b6:	0002                	c.slli64	zero
    56b8:	0e00                	addi	s0,sp,784
    56ba:	00000d1b          	0xd1b
    56be:	2c01                	jal	58ce <atexit+0x12>
    56c0:	0009be03          	0x9be03
    56c4:	8200                	0x8200
    56c6:	0081                	addi	ra,ra,0
    56c8:	1400                	addi	s0,sp,544
    56ca:	4c28                	lw	a0,88(s0)
    56cc:	0000                	unimp
    56ce:	09dc                	addi	a5,sp,212
    56d0:	0000                	unimp
    56d2:	6014                	flw	fa3,0(s0)
    56d4:	004c                	addi	a1,sp,4
    56d6:	dc00                	sw	s0,56(s0)
    56d8:	0009                	c.nop	2
    56da:	0000                	unimp
    56dc:	7812                	flw	fa6,36(sp)
    56de:	8b00000b          	0x8b00000b
    56e2:	0002                	c.slli64	zero
    56e4:	1300                	addi	s0,sp,416
    56e6:	00000ba7          	vse8.v	v23,(zero),v0.t
    56ea:	2d01                	jal	5cfa <__subdf3+0x28a>
    56ec:	0000c003          	lbu	zero,0(ra)
    56f0:	0000                	unimp
    56f2:	9012                	c.add	zero,tp
    56f4:	b700000b          	0xb700000b
    56f8:	0002                	c.slli64	zero
    56fa:	0e00                	addi	s0,sp,784
    56fc:	00000d1b          	0xd1b
    5700:	2d01                	jal	5d10 <__subdf3+0x2a0>
    5702:	0009be03          	0x9be03
    5706:	b600                	fsd	fs0,40(a2)
    5708:	0081                	addi	ra,ra,0
    570a:	1400                	addi	s0,sp,544
    570c:	4cc4                	lw	s1,28(s1)
    570e:	0000                	unimp
    5710:	09dc                	addi	a5,sp,212
    5712:	0000                	unimp
    5714:	0014                	0x14
    5716:	004d                	c.nop	19
    5718:	dc00                	sw	s0,56(s0)
    571a:	0009                	c.nop	2
    571c:	0000                	unimp
    571e:	5015                	c.li	zero,-27
    5720:	004d                	c.nop	19
    5722:	5c00                	lw	s0,56(s0)
    5724:	0002                	c.slli64	zero
    5726:	6b00                	flw	fs0,16(a4)
    5728:	0008                	0x8
    572a:	0e00                	addi	s0,sp,784
    572c:	1055                	c.nop	-11
    572e:	0000                	unimp
    5730:	2e01                	jal	5a40 <_exit+0x8>
    5732:	0009cc03          	lbu	s8,0(s3)
    5736:	ea00                	fsw	fs0,16(a2)
    5738:	0081                	addi	ra,ra,0
    573a:	1200                	addi	s0,sp,288
    573c:	0ba8                	addi	a0,sp,472
    573e:	0000                	unimp
    5740:	07fe                	slli	a5,a5,0x1f
    5742:	0000                	unimp
    5744:	800e                	c.mv	zero,gp
    5746:	0010                	0x10
    5748:	0100                	addi	s0,sp,128
    574a:	032e                	slli	t1,t1,0xb
    574c:	09c5                	addi	s3,s3,17
    574e:	0000                	unimp
    5750:	00008227          	vse8.v	v4,(ra),v0.t
    5754:	9c0e                	add	s8,s8,gp
    5756:	0010                	0x10
    5758:	0100                	addi	s0,sp,128
    575a:	032e                	slli	t1,t1,0xb
    575c:	09c5                	addi	s3,s3,17
    575e:	0000                	unimp
    5760:	823a                	mv	tp,a4
    5762:	0000                	unimp
    5764:	0a0e                	slli	s4,s4,0x3
    5766:	0010                	0x10
    5768:	0100                	addi	s0,sp,128
    576a:	032e                	slli	t1,t1,0xb
    576c:	09c5                	addi	s3,s3,17
    576e:	0000                	unimp
    5770:	8258                	0x8258
    5772:	0000                	unimp
    5774:	260e                	fld	fa2,192(sp)
    5776:	0010                	0x10
    5778:	0100                	addi	s0,sp,128
    577a:	032e                	slli	t1,t1,0xb
    577c:	09c5                	addi	s3,s3,17
    577e:	0000                	unimp
    5780:	0000826b          	0x826b
    5784:	c012                	sw	tp,0(sp)
    5786:	4700000b          	0x4700000b
    578a:	0004                	0x4
    578c:	0e00                	addi	s0,sp,784
    578e:	0d11                	addi	s10,s10,4
    5790:	0000                	unimp
    5792:	2e01                	jal	5aa2 <__subdf3+0x32>
    5794:	0009c503          	lbu	a0,0(s3)
    5798:	8900                	0x8900
    579a:	0082                	c.slli64	ra
    579c:	0e00                	addi	s0,sp,784
    579e:	0e3c                	addi	a5,sp,792
    57a0:	0000                	unimp
    57a2:	2e01                	jal	5ab2 <__subdf3+0x42>
    57a4:	0009c503          	lbu	a0,0(s3)
    57a8:	9c00                	0x9c00
    57aa:	0082                	c.slli64	ra
    57ac:	0e00                	addi	s0,sp,784
    57ae:	0d16                	slli	s10,s10,0x5
    57b0:	0000                	unimp
    57b2:	2e01                	jal	5ac2 <__subdf3+0x52>
    57b4:	0009c503          	lbu	a0,0(s3)
    57b8:	ba00                	fsd	fs0,48(a2)
    57ba:	0082                	c.slli64	ra
    57bc:	0e00                	addi	s0,sp,784
    57be:	0e41                	addi	t3,t3,16
    57c0:	0000                	unimp
    57c2:	2e01                	jal	5ad2 <__subdf3+0x62>
    57c4:	0009c503          	lbu	a0,0(s3)
    57c8:	d800                	sw	s0,48(s0)
    57ca:	0082                	c.slli64	ra
    57cc:	0e00                	addi	s0,sp,784
    57ce:	0d68                	addi	a0,sp,668
    57d0:	0000                	unimp
    57d2:	2e01                	jal	5ae2 <__subdf3+0x72>
    57d4:	00005603          	lhu	a2,0(zero) # 0 <RAM_START_ADDRESS>
    57d8:	f600                	fsw	fs0,40(a2)
    57da:	0082                	c.slli64	ra
    57dc:	0e00                	addi	s0,sp,784
    57de:	00000e4b          	fnmsub.s	ft8,ft0,ft0,ft0,rne
    57e2:	2e01                	jal	5af2 <__subdf3+0x82>
    57e4:	00005603          	lhu	a2,0(zero) # 0 <RAM_START_ADDRESS>
    57e8:	0900                	addi	s0,sp,144
    57ea:	0e000083          	lb	ra,224(zero) # e0 <cmp_idx+0x1c>
    57ee:	0d6d                	addi	s10,s10,27
    57f0:	0000                	unimp
    57f2:	2e01                	jal	5b02 <__subdf3+0x92>
    57f4:	00005603          	lhu	a2,0(zero) # 0 <RAM_START_ADDRESS>
    57f8:	1c00                	addi	s0,sp,560
    57fa:	0e000083          	lb	ra,224(zero) # e0 <cmp_idx+0x1c>
    57fe:	0e46                	slli	t3,t3,0x11
    5800:	0000                	unimp
    5802:	2e01                	jal	5b12 <__subdf3+0xa2>
    5804:	00005603          	lhu	a2,0(zero) # 0 <RAM_START_ADDRESS>
    5808:	2f00                	fld	fs0,24(a4)
    580a:	15000083          	lb	ra,336(zero) # 150 <calc_func+0x30>
    580e:	4d68                	lw	a0,92(a0)
    5810:	0000                	unimp
    5812:	0010                	0x10
    5814:	0000                	unimp
    5816:	03d0                	addi	a2,sp,452
    5818:	0000                	unimp
    581a:	7116                	flw	ft2,100(sp)
    581c:	000e                	c.slli	zero,0x3
    581e:	0100                	addi	s0,sp,128
    5820:	032e                	slli	t1,t1,0xb
    5822:	09c5                	addi	s3,s3,17
    5824:	0000                	unimp
    5826:	5a01                	li	s4,-32
    5828:	0b16                	slli	s6,s6,0x5
    582a:	000d                	c.nop	3
    582c:	0100                	addi	s0,sp,128
    582e:	032e                	slli	t1,t1,0xb
    5830:	09c5                	addi	s3,s3,17
    5832:	0000                	unimp
    5834:	5b01                	li	s6,-32
    5836:	1500                	addi	s0,sp,672
    5838:	4d78                	lw	a4,92(a0)
    583a:	0000                	unimp
    583c:	0010                	0x10
    583e:	0000                	unimp
    5840:	03fa                	slli	t2,t2,0x1e
    5842:	0000                	unimp
    5844:	7116                	flw	ft2,100(sp)
    5846:	000e                	c.slli	zero,0x3
    5848:	0100                	addi	s0,sp,128
    584a:	032e                	slli	t1,t1,0xb
    584c:	09c5                	addi	s3,s3,17
    584e:	0000                	unimp
    5850:	5a01                	li	s4,-32
    5852:	0b16                	slli	s6,s6,0x5
    5854:	000d                	c.nop	3
    5856:	0100                	addi	s0,sp,128
    5858:	032e                	slli	t1,t1,0xb
    585a:	09c5                	addi	s3,s3,17
    585c:	0000                	unimp
    585e:	5b01                	li	s6,-32
    5860:	1500                	addi	s0,sp,672
    5862:	4d88                	lw	a0,24(a1)
    5864:	0000                	unimp
    5866:	0010                	0x10
    5868:	0000                	unimp
    586a:	0424                	addi	s1,sp,520
    586c:	0000                	unimp
    586e:	7116                	flw	ft2,100(sp)
    5870:	000e                	c.slli	zero,0x3
    5872:	0100                	addi	s0,sp,128
    5874:	032e                	slli	t1,t1,0xb
    5876:	09c5                	addi	s3,s3,17
    5878:	0000                	unimp
    587a:	5a01                	li	s4,-32
    587c:	0b16                	slli	s6,s6,0x5
    587e:	000d                	c.nop	3
    5880:	0100                	addi	s0,sp,128
    5882:	032e                	slli	t1,t1,0xb
    5884:	09c5                	addi	s3,s3,17
    5886:	0000                	unimp
    5888:	5b01                	li	s6,-32
    588a:	1700                	addi	s0,sp,928
    588c:	0bd8                	addi	a4,sp,468
    588e:	0000                	unimp
    5890:	7116                	flw	ft2,100(sp)
    5892:	000e                	c.slli	zero,0x3
    5894:	0100                	addi	s0,sp,128
    5896:	032e                	slli	t1,t1,0xb
    5898:	09c5                	addi	s3,s3,17
    589a:	0000                	unimp
    589c:	5a01                	li	s4,-32
    589e:	0b16                	slli	s6,s6,0x5
    58a0:	000d                	c.nop	3
    58a2:	0100                	addi	s0,sp,128
    58a4:	032e                	slli	t1,t1,0xb
    58a6:	09c5                	addi	s3,s3,17
    58a8:	0000                	unimp
    58aa:	5b01                	li	s6,-32
    58ac:	0000                	unimp
    58ae:	f012                	fsw	ft4,32(sp)
    58b0:	6900000b          	0x6900000b
    58b4:	0005                	c.nop	1
    58b6:	0e00                	addi	s0,sp,784
    58b8:	0d11                	addi	s10,s10,4
    58ba:	0000                	unimp
    58bc:	2e01                	jal	5bcc <__subdf3+0x15c>
    58be:	0009c503          	lbu	a0,0(s3)
    58c2:	4200                	lw	s0,0(a2)
    58c4:	0e000083          	lb	ra,224(zero) # e0 <cmp_idx+0x1c>
    58c8:	0e3c                	addi	a5,sp,792
    58ca:	0000                	unimp
    58cc:	2e01                	jal	5bdc <__subdf3+0x16c>
    58ce:	0009c503          	lbu	a0,0(s3)
    58d2:	6000                	flw	fs0,0(s0)
    58d4:	0e000083          	lb	ra,224(zero) # e0 <cmp_idx+0x1c>
    58d8:	0d16                	slli	s10,s10,0x5
    58da:	0000                	unimp
    58dc:	2e01                	jal	5bec <__subdf3+0x17c>
    58de:	0009c503          	lbu	a0,0(s3)
    58e2:	8900                	0x8900
    58e4:	0e000083          	lb	ra,224(zero) # e0 <cmp_idx+0x1c>
    58e8:	0e41                	addi	t3,t3,16
    58ea:	0000                	unimp
    58ec:	2e01                	jal	5bfc <__subdf3+0x18c>
    58ee:	0009c503          	lbu	a0,0(s3)
    58f2:	9c00                	0x9c00
    58f4:	13000083          	lb	ra,304(zero) # 130 <calc_func+0x10>
    58f8:	0d68                	addi	a0,sp,668
    58fa:	0000                	unimp
    58fc:	2e01                	jal	5c0c <__subdf3+0x19c>
    58fe:	00005603          	lhu	a2,0(zero) # 0 <RAM_START_ADDRESS>
    5902:	1300                	addi	s0,sp,416
    5904:	00000e4b          	fnmsub.s	ft8,ft0,ft0,ft0,rne
    5908:	2e01                	jal	5c18 <__subdf3+0x1a8>
    590a:	00005603          	lhu	a2,0(zero) # 0 <RAM_START_ADDRESS>
    590e:	0e00                	addi	s0,sp,784
    5910:	0d6d                	addi	s10,s10,27
    5912:	0000                	unimp
    5914:	2e01                	jal	5c24 <__subdf3+0x1b4>
    5916:	00005603          	lhu	a2,0(zero) # 0 <RAM_START_ADDRESS>
    591a:	ba00                	fsd	fs0,48(a2)
    591c:	0e000083          	lb	ra,224(zero) # e0 <cmp_idx+0x1c>
    5920:	0e46                	slli	t3,t3,0x11
    5922:	0000                	unimp
    5924:	2e01                	jal	5c34 <__subdf3+0x1c4>
    5926:	00005603          	lhu	a2,0(zero) # 0 <RAM_START_ADDRESS>
    592a:	cd00                	sw	s0,24(a0)
    592c:	15000083          	lb	ra,336(zero) # 150 <calc_func+0x30>
    5930:	4dd8                	lw	a4,28(a1)
    5932:	0000                	unimp
    5934:	0010                	0x10
    5936:	0000                	unimp
    5938:	04f2                	slli	s1,s1,0x1c
    593a:	0000                	unimp
    593c:	7116                	flw	ft2,100(sp)
    593e:	000e                	c.slli	zero,0x3
    5940:	0100                	addi	s0,sp,128
    5942:	032e                	slli	t1,t1,0xb
    5944:	09c5                	addi	s3,s3,17
    5946:	0000                	unimp
    5948:	5a01                	li	s4,-32
    594a:	0b16                	slli	s6,s6,0x5
    594c:	000d                	c.nop	3
    594e:	0100                	addi	s0,sp,128
    5950:	032e                	slli	t1,t1,0xb
    5952:	09c5                	addi	s3,s3,17
    5954:	0000                	unimp
    5956:	5b01                	li	s6,-32
    5958:	1500                	addi	s0,sp,672
    595a:	4de8                	lw	a0,92(a1)
    595c:	0000                	unimp
    595e:	0010                	0x10
    5960:	0000                	unimp
    5962:	051c                	addi	a5,sp,640
    5964:	0000                	unimp
    5966:	7116                	flw	ft2,100(sp)
    5968:	000e                	c.slli	zero,0x3
    596a:	0100                	addi	s0,sp,128
    596c:	032e                	slli	t1,t1,0xb
    596e:	09c5                	addi	s3,s3,17
    5970:	0000                	unimp
    5972:	5a01                	li	s4,-32
    5974:	0b16                	slli	s6,s6,0x5
    5976:	000d                	c.nop	3
    5978:	0100                	addi	s0,sp,128
    597a:	032e                	slli	t1,t1,0xb
    597c:	09c5                	addi	s3,s3,17
    597e:	0000                	unimp
    5980:	5b01                	li	s6,-32
    5982:	1500                	addi	s0,sp,672
    5984:	4df8                	lw	a4,92(a1)
    5986:	0000                	unimp
    5988:	0010                	0x10
    598a:	0000                	unimp
    598c:	0546                	slli	a0,a0,0x11
    598e:	0000                	unimp
    5990:	7116                	flw	ft2,100(sp)
    5992:	000e                	c.slli	zero,0x3
    5994:	0100                	addi	s0,sp,128
    5996:	032e                	slli	t1,t1,0xb
    5998:	09c5                	addi	s3,s3,17
    599a:	0000                	unimp
    599c:	5a01                	li	s4,-32
    599e:	0b16                	slli	s6,s6,0x5
    59a0:	000d                	c.nop	3
    59a2:	0100                	addi	s0,sp,128
    59a4:	032e                	slli	t1,t1,0xb
    59a6:	09c5                	addi	s3,s3,17
    59a8:	0000                	unimp
    59aa:	5b01                	li	s6,-32
    59ac:	1700                	addi	s0,sp,928
    59ae:	0c10                	addi	a2,sp,528
    59b0:	0000                	unimp
    59b2:	7116                	flw	ft2,100(sp)
    59b4:	000e                	c.slli	zero,0x3
    59b6:	0100                	addi	s0,sp,128
    59b8:	032e                	slli	t1,t1,0xb
    59ba:	09c5                	addi	s3,s3,17
    59bc:	0000                	unimp
    59be:	5a01                	li	s4,-32
    59c0:	0b16                	slli	s6,s6,0x5
    59c2:	000d                	c.nop	3
    59c4:	0100                	addi	s0,sp,128
    59c6:	032e                	slli	t1,t1,0xb
    59c8:	09c5                	addi	s3,s3,17
    59ca:	0000                	unimp
    59cc:	5b01                	li	s6,-32
    59ce:	0000                	unimp
    59d0:	2812                	fld	fa6,256(sp)
    59d2:	000c                	0xc
    59d4:	8b00                	0x8b00
    59d6:	0006                	c.slli	zero,0x1
    59d8:	0e00                	addi	s0,sp,784
    59da:	0d11                	addi	s10,s10,4
    59dc:	0000                	unimp
    59de:	2e01                	jal	5cee <__subdf3+0x27e>
    59e0:	0009c503          	lbu	a0,0(s3)
    59e4:	e000                	fsw	fs0,0(s0)
    59e6:	0e000083          	lb	ra,224(zero) # e0 <cmp_idx+0x1c>
    59ea:	0e3c                	addi	a5,sp,792
    59ec:	0000                	unimp
    59ee:	2e01                	jal	5cfe <__subdf3+0x28e>
    59f0:	0009c503          	lbu	a0,0(s3)
    59f4:	fe00                	fsw	fs0,56(a2)
    59f6:	0e000083          	lb	ra,224(zero) # e0 <cmp_idx+0x1c>
    59fa:	0d16                	slli	s10,s10,0x5
    59fc:	0000                	unimp
    59fe:	2e01                	jal	5d0e <__subdf3+0x29e>
    5a00:	0009c503          	lbu	a0,0(s3)
    5a04:	1c00                	addi	s0,sp,560
    5a06:	0084                	addi	s1,sp,64
    5a08:	0e00                	addi	s0,sp,784
    5a0a:	0e41                	addi	t3,t3,16
    5a0c:	0000                	unimp
    5a0e:	2e01                	jal	5d1e <__subdf3+0x2ae>
    5a10:	0009c503          	lbu	a0,0(s3)
    5a14:	3a00                	fld	fs0,48(a2)
    5a16:	0084                	addi	s1,sp,64
    5a18:	1300                	addi	s0,sp,416
    5a1a:	0d68                	addi	a0,sp,668
    5a1c:	0000                	unimp
    5a1e:	2e01                	jal	5d2e <__subdf3+0x2be>
    5a20:	00005603          	lhu	a2,0(zero) # 0 <RAM_START_ADDRESS>
    5a24:	1300                	addi	s0,sp,416
    5a26:	00000e4b          	fnmsub.s	ft8,ft0,ft0,ft0,rne
    5a2a:	2e01                	jal	5d3a <__subdf3+0x2ca>
    5a2c:	00005603          	lhu	a2,0(zero) # 0 <RAM_START_ADDRESS>
    5a30:	0e00                	addi	s0,sp,784
    5a32:	0d6d                	addi	s10,s10,27
    5a34:	0000                	unimp
    5a36:	2e01                	jal	5d46 <__subdf3+0x2d6>
    5a38:	00005603          	lhu	a2,0(zero) # 0 <RAM_START_ADDRESS>
    5a3c:	5800                	lw	s0,48(s0)
    5a3e:	0084                	addi	s1,sp,64
    5a40:	0e00                	addi	s0,sp,784
    5a42:	0e46                	slli	t3,t3,0x11
    5a44:	0000                	unimp
    5a46:	2e01                	jal	5d56 <__subdf3+0x2e6>
    5a48:	00005603          	lhu	a2,0(zero) # 0 <RAM_START_ADDRESS>
    5a4c:	7600                	flw	fs0,40(a2)
    5a4e:	0084                	addi	s1,sp,64
    5a50:	1500                	addi	s0,sp,672
    5a52:	4e5c                	lw	a5,28(a2)
    5a54:	0000                	unimp
    5a56:	0010                	0x10
    5a58:	0000                	unimp
    5a5a:	0614                	addi	a3,sp,768
    5a5c:	0000                	unimp
    5a5e:	7116                	flw	ft2,100(sp)
    5a60:	000e                	c.slli	zero,0x3
    5a62:	0100                	addi	s0,sp,128
    5a64:	032e                	slli	t1,t1,0xb
    5a66:	09c5                	addi	s3,s3,17
    5a68:	0000                	unimp
    5a6a:	5a01                	li	s4,-32
    5a6c:	0b16                	slli	s6,s6,0x5
    5a6e:	000d                	c.nop	3
    5a70:	0100                	addi	s0,sp,128
    5a72:	032e                	slli	t1,t1,0xb
    5a74:	09c5                	addi	s3,s3,17
    5a76:	0000                	unimp
    5a78:	5b01                	li	s6,-32
    5a7a:	1500                	addi	s0,sp,672
    5a7c:	4e6c                	lw	a1,92(a2)
    5a7e:	0000                	unimp
    5a80:	0010                	0x10
    5a82:	0000                	unimp
    5a84:	063e                	slli	a2,a2,0xf
    5a86:	0000                	unimp
    5a88:	7116                	flw	ft2,100(sp)
    5a8a:	000e                	c.slli	zero,0x3
    5a8c:	0100                	addi	s0,sp,128
    5a8e:	032e                	slli	t1,t1,0xb
    5a90:	09c5                	addi	s3,s3,17
    5a92:	0000                	unimp
    5a94:	5a01                	li	s4,-32
    5a96:	0b16                	slli	s6,s6,0x5
    5a98:	000d                	c.nop	3
    5a9a:	0100                	addi	s0,sp,128
    5a9c:	032e                	slli	t1,t1,0xb
    5a9e:	09c5                	addi	s3,s3,17
    5aa0:	0000                	unimp
    5aa2:	5b01                	li	s6,-32
    5aa4:	1500                	addi	s0,sp,672
    5aa6:	4e7c                	lw	a5,92(a2)
    5aa8:	0000                	unimp
    5aaa:	0010                	0x10
    5aac:	0000                	unimp
    5aae:	0668                	addi	a0,sp,780
    5ab0:	0000                	unimp
    5ab2:	7116                	flw	ft2,100(sp)
    5ab4:	000e                	c.slli	zero,0x3
    5ab6:	0100                	addi	s0,sp,128
    5ab8:	032e                	slli	t1,t1,0xb
    5aba:	09c5                	addi	s3,s3,17
    5abc:	0000                	unimp
    5abe:	5a01                	li	s4,-32
    5ac0:	0b16                	slli	s6,s6,0x5
    5ac2:	000d                	c.nop	3
    5ac4:	0100                	addi	s0,sp,128
    5ac6:	032e                	slli	t1,t1,0xb
    5ac8:	09c5                	addi	s3,s3,17
    5aca:	0000                	unimp
    5acc:	5b01                	li	s6,-32
    5ace:	1700                	addi	s0,sp,928
    5ad0:	0c40                	addi	s0,sp,532
    5ad2:	0000                	unimp
    5ad4:	7116                	flw	ft2,100(sp)
    5ad6:	000e                	c.slli	zero,0x3
    5ad8:	0100                	addi	s0,sp,128
    5ada:	032e                	slli	t1,t1,0xb
    5adc:	09c5                	addi	s3,s3,17
    5ade:	0000                	unimp
    5ae0:	5a01                	li	s4,-32
    5ae2:	0b16                	slli	s6,s6,0x5
    5ae4:	000d                	c.nop	3
    5ae6:	0100                	addi	s0,sp,128
    5ae8:	032e                	slli	t1,t1,0xb
    5aea:	09c5                	addi	s3,s3,17
    5aec:	0000                	unimp
    5aee:	5b01                	li	s6,-32
    5af0:	0000                	unimp
    5af2:	5812                	lw	a6,36(sp)
    5af4:	000c                	0xc
    5af6:	ad00                	fsd	fs0,24(a0)
    5af8:	0e000007          	vloxei8.v	v0,(zero),v0
    5afc:	0d11                	addi	s10,s10,4
    5afe:	0000                	unimp
    5b00:	2e01                	jal	5e10 <__subdf3+0x3a0>
    5b02:	0009c503          	lbu	a0,0(s3)
    5b06:	8900                	0x8900
    5b08:	0084                	addi	s1,sp,64
    5b0a:	0e00                	addi	s0,sp,784
    5b0c:	0e3c                	addi	a5,sp,792
    5b0e:	0000                	unimp
    5b10:	2e01                	jal	5e20 <__subdf3+0x3b0>
    5b12:	0009c503          	lbu	a0,0(s3)
    5b16:	b200                	fsd	fs0,32(a2)
    5b18:	0084                	addi	s1,sp,64
    5b1a:	0e00                	addi	s0,sp,784
    5b1c:	0d16                	slli	s10,s10,0x5
    5b1e:	0000                	unimp
    5b20:	2e01                	jal	5e30 <__subdf3+0x3c0>
    5b22:	0009c503          	lbu	a0,0(s3)
    5b26:	db00                	sw	s0,48(a4)
    5b28:	0084                	addi	s1,sp,64
    5b2a:	0e00                	addi	s0,sp,784
    5b2c:	0e41                	addi	t3,t3,16
    5b2e:	0000                	unimp
    5b30:	2e01                	jal	5e40 <__subdf3+0x3d0>
    5b32:	0009c503          	lbu	a0,0(s3)
    5b36:	f900                	fsw	fs0,48(a0)
    5b38:	0084                	addi	s1,sp,64
    5b3a:	1300                	addi	s0,sp,416
    5b3c:	0d68                	addi	a0,sp,668
    5b3e:	0000                	unimp
    5b40:	2e01                	jal	5e50 <__subdf3+0x3e0>
    5b42:	00005603          	lhu	a2,0(zero) # 0 <RAM_START_ADDRESS>
    5b46:	1300                	addi	s0,sp,416
    5b48:	00000e4b          	fnmsub.s	ft8,ft0,ft0,ft0,rne
    5b4c:	2e01                	jal	5e5c <__subdf3+0x3ec>
    5b4e:	00005603          	lhu	a2,0(zero) # 0 <RAM_START_ADDRESS>
    5b52:	0e00                	addi	s0,sp,784
    5b54:	0d6d                	addi	s10,s10,27
    5b56:	0000                	unimp
    5b58:	2e01                	jal	5e68 <__subdf3+0x3f8>
    5b5a:	00005603          	lhu	a2,0(zero) # 0 <RAM_START_ADDRESS>
    5b5e:	1700                	addi	s0,sp,928
    5b60:	0085                	addi	ra,ra,1
    5b62:	0e00                	addi	s0,sp,784
    5b64:	0e46                	slli	t3,t3,0x11
    5b66:	0000                	unimp
    5b68:	2e01                	jal	5e78 <__subdf3+0x408>
    5b6a:	00005603          	lhu	a2,0(zero) # 0 <RAM_START_ADDRESS>
    5b6e:	3500                	fld	fs0,40(a0)
    5b70:	0085                	addi	ra,ra,1
    5b72:	1500                	addi	s0,sp,672
    5b74:	4ed0                	lw	a2,28(a3)
    5b76:	0000                	unimp
    5b78:	0010                	0x10
    5b7a:	0000                	unimp
    5b7c:	0736                	slli	a4,a4,0xd
    5b7e:	0000                	unimp
    5b80:	7116                	flw	ft2,100(sp)
    5b82:	000e                	c.slli	zero,0x3
    5b84:	0100                	addi	s0,sp,128
    5b86:	032e                	slli	t1,t1,0xb
    5b88:	09c5                	addi	s3,s3,17
    5b8a:	0000                	unimp
    5b8c:	5a01                	li	s4,-32
    5b8e:	0b16                	slli	s6,s6,0x5
    5b90:	000d                	c.nop	3
    5b92:	0100                	addi	s0,sp,128
    5b94:	032e                	slli	t1,t1,0xb
    5b96:	09c5                	addi	s3,s3,17
    5b98:	0000                	unimp
    5b9a:	5b01                	li	s6,-32
    5b9c:	1500                	addi	s0,sp,672
    5b9e:	4ee0                	lw	s0,92(a3)
    5ba0:	0000                	unimp
    5ba2:	0010                	0x10
    5ba4:	0000                	unimp
    5ba6:	0760                	addi	s0,sp,908
    5ba8:	0000                	unimp
    5baa:	7116                	flw	ft2,100(sp)
    5bac:	000e                	c.slli	zero,0x3
    5bae:	0100                	addi	s0,sp,128
    5bb0:	032e                	slli	t1,t1,0xb
    5bb2:	09c5                	addi	s3,s3,17
    5bb4:	0000                	unimp
    5bb6:	5a01                	li	s4,-32
    5bb8:	0b16                	slli	s6,s6,0x5
    5bba:	000d                	c.nop	3
    5bbc:	0100                	addi	s0,sp,128
    5bbe:	032e                	slli	t1,t1,0xb
    5bc0:	09c5                	addi	s3,s3,17
    5bc2:	0000                	unimp
    5bc4:	5b01                	li	s6,-32
    5bc6:	1500                	addi	s0,sp,672
    5bc8:	4ef0                	lw	a2,92(a3)
    5bca:	0000                	unimp
    5bcc:	0010                	0x10
    5bce:	0000                	unimp
    5bd0:	078a                	slli	a5,a5,0x2
    5bd2:	0000                	unimp
    5bd4:	7116                	flw	ft2,100(sp)
    5bd6:	000e                	c.slli	zero,0x3
    5bd8:	0100                	addi	s0,sp,128
    5bda:	032e                	slli	t1,t1,0xb
    5bdc:	09c5                	addi	s3,s3,17
    5bde:	0000                	unimp
    5be0:	5a01                	li	s4,-32
    5be2:	0b16                	slli	s6,s6,0x5
    5be4:	000d                	c.nop	3
    5be6:	0100                	addi	s0,sp,128
    5be8:	032e                	slli	t1,t1,0xb
    5bea:	09c5                	addi	s3,s3,17
    5bec:	0000                	unimp
    5bee:	5b01                	li	s6,-32
    5bf0:	1700                	addi	s0,sp,928
    5bf2:	0c80                	addi	s0,sp,592
    5bf4:	0000                	unimp
    5bf6:	7116                	flw	ft2,100(sp)
    5bf8:	000e                	c.slli	zero,0x3
    5bfa:	0100                	addi	s0,sp,128
    5bfc:	032e                	slli	t1,t1,0xb
    5bfe:	09c5                	addi	s3,s3,17
    5c00:	0000                	unimp
    5c02:	5a01                	li	s4,-32
    5c04:	0b16                	slli	s6,s6,0x5
    5c06:	000d                	c.nop	3
    5c08:	0100                	addi	s0,sp,128
    5c0a:	032e                	slli	t1,t1,0xb
    5c0c:	09c5                	addi	s3,s3,17
    5c0e:	0000                	unimp
    5c10:	5b01                	li	s6,-32
    5c12:	0000                	unimp
    5c14:	9812                	add	a6,a6,tp
    5c16:	000c                	0xc
    5c18:	d700                	sw	s0,40(a4)
    5c1a:	0e000007          	vloxei8.v	v0,(zero),v0
    5c1e:	106d                	c.nop	-5
    5c20:	0000                	unimp
    5c22:	2e01                	jal	5f32 <__subdf3+0x4c2>
    5c24:	0009c503          	lbu	a0,0(s3)
    5c28:	4800                	lw	s0,16(s0)
    5c2a:	0085                	addi	ra,ra,1
    5c2c:	0e00                	addi	s0,sp,784
    5c2e:	1042                	c.slli	zero,0x30
    5c30:	0000                	unimp
    5c32:	2e01                	jal	5f42 <__subdf3+0x4d2>
    5c34:	0009c503          	lbu	a0,0(s3)
    5c38:	5b00                	lw	s0,48(a4)
    5c3a:	0085                	addi	ra,ra,1
    5c3c:	0000                	unimp
    5c3e:	000cc817          	auipc	a6,0xcc
    5c42:	0e00                	addi	s0,sp,784
    5c44:	106d                	c.nop	-5
    5c46:	0000                	unimp
    5c48:	2e01                	jal	5f58 <__subdf3+0x4e8>
    5c4a:	0009c503          	lbu	a0,0(s3)
    5c4e:	a700                	fsd	fs0,8(a4)
    5c50:	0085                	addi	ra,ra,1
    5c52:	0e00                	addi	s0,sp,784
    5c54:	1042                	c.slli	zero,0x30
    5c56:	0000                	unimp
    5c58:	2e01                	jal	5f68 <__subdf3+0x4f8>
    5c5a:	0009c503          	lbu	a0,0(s3)
    5c5e:	ba00                	fsd	fs0,48(a2)
    5c60:	0085                	addi	ra,ra,1
    5c62:	0000                	unimp
    5c64:	1700                	addi	s0,sp,928
    5c66:	0ce0                	addi	s0,sp,604
    5c68:	0000                	unimp
    5c6a:	770e                	flw	fa4,224(sp)
    5c6c:	0100000f          	fence	w,unknown
    5c70:	032e                	slli	t1,t1,0xb
    5c72:	002c                	addi	a1,sp,8
    5c74:	0000                	unimp
    5c76:	8606                	mv	a2,ra
    5c78:	0000                	unimp
    5c7a:	000cf817          	auipc	a6,0xcf
    5c7e:	0e00                	addi	s0,sp,784
    5c80:	0fc6                	slli	t6,t6,0x11
    5c82:	0000                	unimp
    5c84:	2e01                	jal	5f94 <__subdf3+0x524>
    5c86:	0009be03          	0x9be03
    5c8a:	2500                	fld	fs0,8(a0)
    5c8c:	0086                	slli	ra,ra,0x1
    5c8e:	0e00                	addi	s0,sp,784
    5c90:	0f8d                	addi	t6,t6,3
    5c92:	0000                	unimp
    5c94:	2e01                	jal	5fa4 <__subdf3+0x534>
    5c96:	0009be03          	0x9be03
    5c9a:	4500                	lw	s0,8(a0)
    5c9c:	0086                	slli	ra,ra,0x1
    5c9e:	0e00                	addi	s0,sp,784
    5ca0:	0f62                	slli	t5,t5,0x18
    5ca2:	0000                	unimp
    5ca4:	2e01                	jal	5fb4 <__subdf3+0x544>
    5ca6:	0009be03          	0x9be03
    5caa:	6500                	flw	fs0,8(a0)
    5cac:	0086                	slli	ra,ra,0x1
    5cae:	0e00                	addi	s0,sp,784
    5cb0:	0fa2                	slli	t6,t6,0x8
    5cb2:	0000                	unimp
    5cb4:	2e01                	jal	5fc4 <__subdf3+0x554>
    5cb6:	0009be03          	0x9be03
    5cba:	8500                	0x8500
    5cbc:	0086                	slli	ra,ra,0x1
    5cbe:	0e00                	addi	s0,sp,784
    5cc0:	0fb4                	addi	a3,sp,984
    5cc2:	0000                	unimp
    5cc4:	2e01                	jal	5fd4 <__subdf3+0x564>
    5cc6:	0009c503          	lbu	a0,0(s3)
    5cca:	9900                	0x9900
    5ccc:	0086                	slli	ra,ra,0x1
    5cce:	0000                	unimp
    5cd0:	0000                	unimp
    5cd2:	ec15                	bnez	s0,5d0e <__subdf3+0x29e>
    5cd4:	1000004f          	fnmadd.s	ft0,ft0,ft0,ft2,rne
    5cd8:	0000                	unimp
    5cda:	8900                	0x8900
    5cdc:	0008                	0x8
    5cde:	1000                	addi	s0,sp,32
    5ce0:	5f5f 0078 2f01      	0x2f0100785f5f
    5ce6:	0009c503          	lbu	a0,0(s3)
    5cea:	d000                	sw	s0,32(s0)
    5cec:	0086                	slli	ra,ra,0x1
    5cee:	0000                	unimp
    5cf0:	9b18                	0x9b18
    5cf2:	0008                	0x8
    5cf4:	1100                	addi	s0,sp,160
    5cf6:	5f5f 0078 2f01      	0x2f0100785f5f
    5cfc:	0009c503          	lbu	a0,0(s3)
    5d00:	0000                	unimp
    5d02:	ad18                	fsd	fa4,24(a0)
    5d04:	0008                	0x8
    5d06:	1100                	addi	s0,sp,160
    5d08:	5f5f 0078 2f01      	0x2f0100785f5f
    5d0e:	0009c503          	lbu	a0,0(s3)
    5d12:	0000                	unimp
    5d14:	3012                	fld	ft0,288(sp)
    5d16:	000d                	c.nop	3
    5d18:	ab00                	fsd	fs0,16(a4)
    5d1a:	0009                	c.nop	2
    5d1c:	1300                	addi	s0,sp,416
    5d1e:	0dec                	addi	a1,sp,732
    5d20:	0000                	unimp
    5d22:	2f01                	jal	6432 <__subdf3+0x9c2>
    5d24:	00002c03          	lw	s8,0(zero) # 0 <RAM_START_ADDRESS>
    5d28:	1800                	addi	s0,sp,48
    5d2a:	0936                	slli	s2,s2,0xd
    5d2c:	0000                	unimp
    5d2e:	000e2013          	slti	zero,t3,0
    5d32:	0100                	addi	s0,sp,128
    5d34:	09be032f          	vamoswapei8.v	zero,(t3),v27,v6,v0.t
    5d38:	0000                	unimp
    5d3a:	000da413          	slti	s0,s11,0
    5d3e:	0100                	addi	s0,sp,128
    5d40:	09be032f          	vamoswapei8.v	zero,(t3),v27,v6,v0.t
    5d44:	0000                	unimp
    5d46:	000e5513          	srli	a0,t3,0x0
    5d4a:	0100                	addi	s0,sp,128
    5d4c:	09be032f          	vamoswapei8.v	zero,(t3),v27,v6,v0.t
    5d50:	0000                	unimp
    5d52:	000c9213          	slli	tp,s9,0x0
    5d56:	0100                	addi	s0,sp,128
    5d58:	09c5032f          	vamoswapei8.v	zero,(a0),v28,v6,v0.t
    5d5c:	0000                	unimp
    5d5e:	000caa13          	slti	s4,s9,0
    5d62:	0100                	addi	s0,sp,128
    5d64:	09c5032f          	vamoswapei8.v	zero,(a0),v28,v6,v0.t
    5d68:	0000                	unimp
    5d6a:	1518                	addi	a4,sp,672
    5d6c:	0009                	c.nop	2
    5d6e:	1100                	addi	s0,sp,160
    5d70:	5f5f 0078 2f01      	0x2f0100785f5f
    5d76:	0009c503          	lbu	a0,0(s3)
    5d7a:	0000                	unimp
    5d7c:	2718                	fld	fa4,8(a4)
    5d7e:	0009                	c.nop	2
    5d80:	1100                	addi	s0,sp,160
    5d82:	5f5f 0078 2f01      	0x2f0100785f5f
    5d88:	0009c503          	lbu	a0,0(s3)
    5d8c:	0000                	unimp
    5d8e:	1119                	addi	sp,sp,-26
    5d90:	5f5f 0078 2f01      	0x2f0100785f5f
    5d96:	0009c503          	lbu	a0,0(s3)
    5d9a:	0000                	unimp
    5d9c:	1500                	addi	s0,sp,672
    5d9e:	5114                	lw	a3,32(a0)
    5da0:	0000                	unimp
    5da2:	0010                	0x10
    5da4:	0000                	unimp
    5da6:	0954                	addi	a3,sp,148
    5da8:	0000                	unimp
    5daa:	5f10                	lw	a2,56(a4)
    5dac:	785f 0100 032f      	0x32f0100785f
    5db2:	09c5                	addi	s3,s3,17
    5db4:	0000                	unimp
    5db6:	000086e3          	beqz	ra,65c2 <__subdf3+0xb52>
    5dba:	1800                	addi	s0,sp,48
    5dbc:	0966                	slli	s2,s2,0x19
    5dbe:	0000                	unimp
    5dc0:	5f11                	li	t5,-28
    5dc2:	785f 0100 032f      	0x32f0100785f
    5dc8:	09c5                	addi	s3,s3,17
    5dca:	0000                	unimp
    5dcc:	1800                	addi	s0,sp,48
    5dce:	0978                	addi	a4,sp,156
    5dd0:	0000                	unimp
    5dd2:	5f11                	li	t5,-28
    5dd4:	785f 0100 032f      	0x32f0100785f
    5dda:	09c5                	addi	s3,s3,17
    5ddc:	0000                	unimp
    5dde:	1800                	addi	s0,sp,48
    5de0:	098a                	slli	s3,s3,0x2
    5de2:	0000                	unimp
    5de4:	5f11                	li	t5,-28
    5de6:	785f 0100 032f      	0x32f0100785f
    5dec:	09c5                	addi	s3,s3,17
    5dee:	0000                	unimp
    5df0:	1800                	addi	s0,sp,48
    5df2:	099c                	addi	a5,sp,208
    5df4:	0000                	unimp
    5df6:	5f11                	li	t5,-28
    5df8:	785f 0100 032f      	0x32f0100785f
    5dfe:	09c5                	addi	s3,s3,17
    5e00:	0000                	unimp
    5e02:	1900                	addi	s0,sp,176
    5e04:	5f11                	li	t5,-28
    5e06:	785f 0100 032f      	0x32f0100785f
    5e0c:	09c5                	addi	s3,s3,17
    5e0e:	0000                	unimp
    5e10:	0000                	unimp
    5e12:	000d1817          	auipc	a6,0xd1
    5e16:	1300                	addi	s0,sp,416
    5e18:	00000a9b          	0xa9b
    5e1c:	2f01                	jal	652c <__subdf3+0xabc>
    5e1e:	0000c003          	lbu	zero,0(ra)
    5e22:	0000                	unimp
    5e24:	0200                	addi	s0,sp,256
    5e26:	0504                	addi	s1,sp,640
    5e28:	01c0                	addi	s0,sp,196
    5e2a:	0000                	unimp
    5e2c:	0402                	c.slli64	s0
    5e2e:	0008c207          	flq	ft4,0(a7)
    5e32:	1a00                	addi	s0,sp,304
    5e34:	09c5                	addi	s3,s3,17
    5e36:	0000                	unimp
    5e38:	09dc                	addi	a5,sp,212
    5e3a:	0000                	unimp
    5e3c:	0000481b          	0x481b
    5e40:	0300                	addi	s0,sp,384
    5e42:	1c00                	addi	s0,sp,560
    5e44:	0c76                	slli	s8,s8,0x1d
    5e46:	0000                	unimp
    5e48:	0c76                	slli	s8,s8,0x1d
    5e4a:	0000                	unimp
    5e4c:	e300                	fsw	fs0,0(a4)
    5e4e:	0001                	nop
    5e50:	0400                	addi	s0,sp,512
    5e52:	2b00                	fld	fs0,16(a4)
    5e54:	0019                	c.nop	6
    5e56:	0400                	addi	s0,sp,512
    5e58:	b501                	j	5c58 <__subdf3+0x1e8>
    5e5a:	000a                	c.slli	zero,0x2
    5e5c:	0c00                	addi	s0,sp,528
    5e5e:	000010cb          	fnmsub.s	ft1,ft0,ft0,ft0,rtz
    5e62:	0a1d                	addi	s4,s4,7
    5e64:	0000                	unimp
    5e66:	51b0                	lw	a2,96(a1)
    5e68:	0000                	unimp
    5e6a:	0080                	addi	s0,sp,64
    5e6c:	0000                	unimp
    5e6e:	aa91                	j	5fc2 <__subdf3+0x552>
    5e70:	0000                	unimp
    5e72:	0802                	c.slli64	a6
    5e74:	8c04                	0x8c04
    5e76:	0011                	c.nop	4
    5e78:	0300                	addi	s0,sp,384
    5e7a:	0504                	addi	s1,sp,640
    5e7c:	6e69                	lui	t3,0x1a
    5e7e:	0074                	addi	a3,sp,12
    5e80:	0102                	c.slli64	sp
    5e82:	6406                	flw	fs0,64(sp)
    5e84:	0002                	c.slli64	zero
    5e86:	0400                	addi	s0,sp,512
    5e88:	10fe                	slli	ra,ra,0x3f
    5e8a:	0000                	unimp
    5e8c:	4802                	lw	a6,0(sp)
    5e8e:	0d01                	addi	s10,s10,0
    5e90:	002c                	addi	a1,sp,8
    5e92:	0000                	unimp
    5e94:	0802                	c.slli64	a6
    5e96:	bb05                	j	5bc6 <__subdf3+0x156>
    5e98:	0001                	nop
    5e9a:	0200                	addi	s0,sp,256
    5e9c:	0801                	addi	a6,a6,0
    5e9e:	0262                	slli	tp,tp,0x18
    5ea0:	0000                	unimp
    5ea2:	fd04                	fsw	fs1,56(a0)
    5ea4:	0010                	0x10
    5ea6:	0200                	addi	s0,sp,256
    5ea8:	6216014b          	fnmsub.d	ft2,fa2,ft1,fa2,rne
    5eac:	0000                	unimp
    5eae:	0200                	addi	s0,sp,256
    5eb0:	0704                	addi	s1,sp,896
    5eb2:	000008c7          	fmsub.s	fa7,ft0,ft0,ft0,rne
    5eb6:	0802                	c.slli64	a6
    5eb8:	0008bd07          	fld	fs10,0(a7)
    5ebc:	0200                	addi	s0,sp,256
    5ebe:	0702                	c.slli64	a4
    5ec0:	02ba                	slli	t0,t0,0xe
    5ec2:	0000                	unimp
    5ec4:	ae05                	j	61f4 <__subdf3+0x784>
    5ec6:	000a                	c.slli	zero,0x2
    5ec8:	0300                	addi	s0,sp,384
    5eca:	0f48                	addi	a0,sp,916
    5ecc:	0025                	c.nop	9
    5ece:	0000                	unimp
    5ed0:	0806                	slli	a6,a6,0x1
    5ed2:	cd034f03          	lbu	t5,-816(t1)
    5ed6:	0000                	unimp
    5ed8:	0700                	addi	s0,sp,896
    5eda:	00000a17          	auipc	s4,0x0
    5ede:	620e5703          	lhu	a4,1568(t3) # 1a620 <RAM_SIZE+0xa620>
    5ee2:	0000                	unimp
    5ee4:	0400                	addi	s0,sp,512
    5ee6:	0020                	addi	s0,sp,8
    5ee8:	0700                	addi	s0,sp,896
    5eea:	00000b97          	auipc	s7,0x0
    5eee:	620e5803          	lhu	a6,1568(t3)
    5ef2:	0000                	unimp
    5ef4:	0400                	addi	s0,sp,512
    5ef6:	0c14                	addi	a3,sp,528
    5ef8:	0804                	addi	s1,sp,16
    5efa:	7865                	lui	a6,0xffff9
    5efc:	0070                	addi	a2,sp,12
    5efe:	620e5903          	lhu	s2,1568(t3)
    5f02:	0000                	unimp
    5f04:	0400                	addi	s0,sp,512
    5f06:	0704010b          	0x704010b
    5f0a:	08ed                	addi	a7,a7,27
    5f0c:	0000                	unimp
    5f0e:	620e5a03          	lhu	s4,1568(t3)
    5f12:	0000                	unimp
    5f14:	0400                	addi	s0,sp,512
    5f16:	0001                	nop
    5f18:	0004                	0x4
    5f1a:	3809                	jal	572c <modf+0x110>
    5f1c:	000c                	0xc
    5f1e:	0800                	addi	s0,sp,16
    5f20:	f3074c03          	lbu	s8,-208(a4) # fffe0f30 <RAM_SIZE+0xfffd0f30>
    5f24:	0000                	unimp
    5f26:	0a00                	addi	s0,sp,272
    5f28:	6c66                	flw	fs8,88(sp)
    5f2a:	0074                	addi	a3,sp,12
    5f2c:	770a4e03          	lbu	t3,1904(s4) # 664a <__subdf3+0xbda>
    5f30:	0000                	unimp
    5f32:	0b00                	addi	s0,sp,400
    5f34:	0c71                	addi	s8,s8,28
    5f36:	0000                	unimp
    5f38:	83055c03          	lhu	s8,-2000(a0)
    5f3c:	0000                	unimp
    5f3e:	0000                	unimp
    5f40:	600c                	flw	fa1,0(s0)
    5f42:	0008                	0x8
    5f44:	0100                	addi	s0,sp,128
    5f46:	003a0123          	sb	gp,2(s4)
    5f4a:	0000                	unimp
    5f4c:	51b0                	lw	a2,96(a1)
    5f4e:	0000                	unimp
    5f50:	0080                	addi	s0,sp,64
    5f52:	0000                	unimp
    5f54:	9c01                	0x9c01
    5f56:	01d8                	addi	a4,sp,196
    5f58:	0000                	unimp
    5f5a:	610d                	addi	sp,sp,160
    5f5c:	0100                	addi	s0,sp,128
    5f5e:	00771323          	sh	t2,6(a4)
    5f62:	0000                	unimp
    5f64:	86f6                	mv	a3,t4
    5f66:	0000                	unimp
    5f68:	780e                	flw	fa6,224(sp)
    5f6a:	0100000b          	0x100000b
    5f6e:	0325                	addi	t1,t1,9
    5f70:	002c                	addi	a1,sp,8
    5f72:	0000                	unimp
    5f74:	877e                	mv	a4,t6
    5f76:	0000                	unimp
    5f78:	000c880f          	0xc880f
    5f7c:	0100                	addi	s0,sp,128
    5f7e:	0325                	addi	t1,t1,9
    5f80:	002c                	addi	a1,sp,8
    5f82:	0000                	unimp
    5f84:	1000                	addi	s0,sp,32
    5f86:	5f41                	li	t5,-16
    5f88:	26010063          	beqz	sp,61e8 <__subdf3+0x778>
    5f8c:	0001d803          	lhu	a6,0(gp) # ffffc000 <RAM_SIZE+0xfffec000>
    5f90:	1100                	addi	s0,sp,160
    5f92:	5f41                	li	t5,-16
    5f94:	26010073          	0x26010073
    5f98:	0001d803          	lhu	a6,0(gp) # 7390 <__global_pointer$>
    5f9c:	0600                	addi	s0,sp,768
    5f9e:	ff08007b          	0xff08007b
    5fa2:	9f1a                	add	t5,t5,t1
    5fa4:	4112                	lw	sp,4(sp)
    5fa6:	655f 0100 0326      	0x3260100655f
    5fac:	01d8                	addi	a4,sp,196
    5fae:	0000                	unimp
    5fb0:	8792                	mv	a5,tp
    5fb2:	0000                	unimp
    5fb4:	a20e                	fsd	ft3,256(sp)
    5fb6:	0100000b          	0x100000b
    5fba:	0326                	slli	t1,t1,0x9
    5fbc:	01df 0000 87be      	0x87be000001df
    5fc2:	0000                	unimp
    5fc4:	6e0e                	flw	ft8,192(sp)
    5fc6:	0100000b          	0x100000b
    5fca:	0326                	slli	t1,t1,0x9
    5fcc:	01df 0000 87ea      	0x87ea000001df
    5fd2:	0000                	unimp
    5fd4:	7212                	flw	ft4,36(sp)
    5fd6:	0100                	addi	s0,sp,128
    5fd8:	00550b27          	0x550b27
    5fdc:	0000                	unimp
    5fde:	0000882b          	0x882b
    5fe2:	000d5013          	srli	zero,s10,0x0
    5fe6:	ab00                	fsd	fs0,16(a4)
    5fe8:	0001                	nop
    5fea:	1400                	addi	s0,sp,544
    5fec:	00000ba7          	vse8.v	v23,(zero),v0.t
    5ff0:	2a01                	jal	6100 <__subdf3+0x690>
    5ff2:	0000cd03          	lbu	s10,0(ra)
    5ff6:	0000                	unimp
    5ff8:	bd15                	j	5e2c <__subdf3+0x3bc>
    5ffa:	0001                	nop
    5ffc:	1400                	addi	s0,sp,544
    5ffe:	10b8                	addi	a4,sp,104
    6000:	0000                	unimp
    6002:	2b01                	jal	6512 <__subdf3+0xaa2>
    6004:	00002c03          	lw	s8,0(zero) # 0 <RAM_START_ADDRESS>
    6008:	0000                	unimp
    600a:	e816                	fsw	ft5,16(sp)
    600c:	0051                	c.nop	20
    600e:	4000                	lw	s0,0(s0)
    6010:	0000                	unimp
    6012:	0e00                	addi	s0,sp,784
    6014:	10b8                	addi	a4,sp,104
    6016:	0000                	unimp
    6018:	2b01                	jal	6528 <__subdf3+0xab8>
    601a:	00002c03          	lw	s8,0(zero) # 0 <RAM_START_ADDRESS>
    601e:	6300                	flw	fs0,0(a4)
    6020:	0088                	addi	a0,sp,64
    6022:	0000                	unimp
    6024:	0200                	addi	s0,sp,256
    6026:	0504                	addi	s1,sp,640
    6028:	01c0                	addi	s0,sp,196
    602a:	0000                	unimp
    602c:	0402                	c.slli64	s0
    602e:	0008c207          	flq	ft4,0(a7)
    6032:	0000                	unimp
    6034:	0022                	c.slli	zero,0x8
    6036:	0000                	unimp
    6038:	0002                	c.slli64	zero
    603a:	1a89                	addi	s5,s5,-30
    603c:	0000                	unimp
    603e:	0104                	addi	s1,sp,128
    6040:	0000aca3          	sw	zero,25(ra)
    6044:	5230                	lw	a2,96(a2)
    6046:	0000                	unimp
    6048:	5254                	lw	a3,36(a2)
    604a:	0000                	unimp
    604c:	1105                	addi	sp,sp,-31
    604e:	0000                	unimp
    6050:	0a1d                	addi	s4,s4,7
    6052:	0000                	unimp
    6054:	0030                	addi	a2,sp,8
    6056:	0000                	unimp
    6058:	8001                	c.srli64	s0
    605a:	0022                	c.slli	zero,0x8
    605c:	0000                	unimp
    605e:	0002                	c.slli64	zero
    6060:	1a9d                	addi	s5,s5,-25
    6062:	0000                	unimp
    6064:	0104                	addi	s1,sp,128
    6066:	ad39                	j	6684 <list_known_crc+0x8>
    6068:	0000                	unimp
    606a:	5254                	lw	a3,36(a2)
    606c:	0000                	unimp
    606e:	5308                	lw	a0,32(a4)
    6070:	0000                	unimp
    6072:	0000113b          	0x113b
    6076:	0a1d                	addi	s4,s4,7
    6078:	0000                	unimp
    607a:	0030                	addi	a2,sp,8
    607c:	0000                	unimp
    607e:	8001                	c.srli64	s0
    6080:	014e                	slli	sp,sp,0x13
    6082:	0000                	unimp
    6084:	0004                	0x4
    6086:	1ab1                	addi	s5,s5,-20
    6088:	0000                	unimp
    608a:	0104                	addi	s1,sp,128
    608c:	0ab5                	addi	s5,s5,13
    608e:	0000                	unimp
    6090:	b30c                	fsd	fa1,32(a4)
    6092:	0011                	c.nop	4
    6094:	1d00                	addi	s0,sp,688
    6096:	000a                	c.slli	zero,0x2
    6098:	0800                	addi	s0,sp,16
    609a:	4c000053          	0x4c000053
    609e:	0000                	unimp
    60a0:	a500                	fsd	fs0,8(a0)
    60a2:	00ae                	slli	ra,ra,0xb
    60a4:	0200                	addi	s0,sp,256
    60a6:	0504                	addi	s1,sp,640
    60a8:	6e69                	lui	t3,0x1a
    60aa:	0074                	addi	a3,sp,12
    60ac:	c7070403          	lb	s0,-912(a4)
    60b0:	0008                	0x8
    60b2:	0300                	addi	s0,sp,384
    60b4:	0508                	addi	a0,sp,640
    60b6:	000001bb          	0x1bb
    60ba:	87041003          	lh	zero,-1936(s0) # ffffa870 <RAM_SIZE+0xfffea870>
    60be:	0011                	c.nop	4
    60c0:	0300                	addi	s0,sp,384
    60c2:	0601                	addi	a2,a2,0
    60c4:	0264                	addi	s1,sp,268
    60c6:	0000                	unimp
    60c8:	62080103          	lb	sp,1568(a6) # ffff9620 <RAM_SIZE+0xfffe9620>
    60cc:	0002                	c.slli64	zero
    60ce:	0300                	addi	s0,sp,384
    60d0:	0502                	c.slli64	a0
    60d2:	00c9                	addi	ra,ra,18
    60d4:	0000                	unimp
    60d6:	ba070203          	lb	tp,-1120(a4)
    60da:	0002                	c.slli64	zero
    60dc:	0300                	addi	s0,sp,384
    60de:	0504                	addi	s1,sp,640
    60e0:	01c0                	addi	s0,sp,196
    60e2:	0000                	unimp
    60e4:	c2070403          	lb	s0,-992(a4)
    60e8:	0008                	0x8
    60ea:	0300                	addi	s0,sp,384
    60ec:	0708                	addi	a0,sp,896
    60ee:	08bd                	addi	a7,a7,15
    60f0:	0000                	unimp
    60f2:	6b080103          	lb	sp,1712(a6)
    60f6:	0002                	c.slli64	zero
    60f8:	0400                	addi	s0,sp,512
    60fa:	00001193          	slli	gp,zero,0x0
    60fe:	7b02                	flw	fs6,32(sp)
    6100:	4816                	lw	a6,68(sp)
    6102:	0000                	unimp
    6104:	0500                	addi	s0,sp,640
    6106:	0079                	c.nop	30
    6108:	0000                	unimp
    610a:	fe04                	fsw	fs1,56(a2)
    610c:	0010                	0x10
    610e:	0200                	addi	s0,sp,256
    6110:	0f80                	addi	s0,sp,976
    6112:	0025                	c.nop	9
    6114:	0000                	unimp
    6116:	fd04                	fsw	fs1,56(a0)
    6118:	0010                	0x10
    611a:	0200                	addi	s0,sp,256
    611c:	1681                	addi	a3,a3,-32
    611e:	002c                	addi	a1,sp,8
    6120:	0000                	unimp
    6122:	76040203          	lb	tp,1888(s0)
    6126:	0011                	c.nop	4
    6128:	0300                	addi	s0,sp,384
    612a:	0304                	addi	s1,sp,384
    612c:	116e                	slli	sp,sp,0x3b
    612e:	0000                	unimp
    6130:	ad040403          	lb	s0,-1328(s0)
    6134:	0011                	c.nop	4
    6136:	0300                	addi	s0,sp,384
    6138:	0308                	addi	a0,sp,384
    613a:	11a5                	addi	gp,gp,-23
    613c:	0000                	unimp
    613e:	8c040803          	lb	a6,-1856(s0)
    6142:	0011                	c.nop	4
    6144:	0300                	addi	s0,sp,384
    6146:	0310                	addi	a2,sp,384
    6148:	11e2                	slli	gp,gp,0x38
    614a:	0000                	unimp
    614c:	7f032003          	lw	zero,2032(t1)
    6150:	0011                	c.nop	4
    6152:	0600                	addi	s0,sp,768
    6154:	0085                	addi	ra,ra,1
    6156:	0000                	unimp
    6158:	000000e3          	beqz	zero,6958 <errpat+0x1d8>
    615c:	00002c07          	flw	fs8,0(zero) # 0 <RAM_START_ADDRESS>
    6160:	ff00                	fsw	fs0,56(a4)
    6162:	0500                	addi	s0,sp,640
    6164:	000000d3          	fadd.s	ft1,ft0,ft0,rne
    6168:	9b08                	0x9b08
    616a:	0011                	c.nop	4
    616c:	0200                	addi	s0,sp,256
    616e:	0202                	c.slli64	tp
    6170:	e316                	fsw	ft5,132(sp)
    6172:	0000                	unimp
    6174:	0900                	addi	s0,sp,144
    6176:	0c76                	slli	s8,s8,0x1d
    6178:	0000                	unimp
    617a:	c201                	beqz	a2,617a <__subdf3+0x70a>
    617c:	0102                	c.slli64	sp
    617e:	0025                	c.nop	9
    6180:	0000                	unimp
    6182:	5308                	lw	a0,32(a4)
    6184:	0000                	unimp
    6186:	004c                	addi	a1,sp,4
    6188:	0000                	unimp
    618a:	9c01                	0x9c01
    618c:	780a                	flw	fa6,160(sp)
    618e:	0100                	addi	s0,sp,128
    6190:	02c2                	slli	t0,t0,0x10
    6192:	9612                	add	a2,a2,tp
    6194:	0000                	unimp
    6196:	7700                	flw	fs0,40(a4)
    6198:	0088                	addi	a0,sp,64
    619a:	0b00                	addi	s0,sp,400
    619c:	6572                	flw	fa0,28(sp)
    619e:	0074                	addi	a3,sp,12
    61a0:	c401                	beqz	s0,61a8 <__subdf3+0x738>
    61a2:	0902                	c.slli64	s2
    61a4:	008a                	slli	ra,ra,0x2
    61a6:	0000                	unimp
    61a8:	680c                	flw	fa1,16(s0)
    61aa:	000d                	c.nop	3
    61ac:	0d00                	addi	s0,sp,656
    61ae:	11dd                	addi	gp,gp,-9
    61b0:	0000                	unimp
    61b2:	c601                	beqz	a2,61ba <__subdf3+0x74a>
    61b4:	0302                	c.slli64	t1
    61b6:	0096                	slli	ra,ra,0x5
    61b8:	0000                	unimp
    61ba:	000088a3          	sb	zero,17(ra)
    61be:	5f0e                	lw	t5,224(sp)
    61c0:	615f 0100 02c6      	0x2c60100615f
    61c6:	00009603          	lh	a2,0(ra)
    61ca:	cf00                	sw	s0,24(a4)
    61cc:	0088                	addi	a0,sp,64
    61ce:	0000                	unimp
    61d0:	0000                	unimp
    61d2:	00e1                	addi	ra,ra,24
    61d4:	0000                	unimp
    61d6:	0004                	0x4
    61d8:	00001b7b          	0x1b7b
    61dc:	0104                	addi	s1,sp,128
    61de:	0ab5                	addi	s5,s5,13
    61e0:	0000                	unimp
    61e2:	b30c                	fsd	fa1,32(a4)
    61e4:	0011                	c.nop	4
    61e6:	1d00                	addi	s0,sp,688
    61e8:	000a                	c.slli	zero,0x2
    61ea:	8800                	0x8800
    61ec:	020000af          	vamoaddei8.v	zero,(zero),v0,v1
    61f0:	0504                	addi	s1,sp,640
    61f2:	6e69                	lui	t3,0x1a
    61f4:	0074                	addi	a3,sp,12
    61f6:	c7070403          	lb	s0,-912(a4)
    61fa:	0008                	0x8
    61fc:	0300                	addi	s0,sp,384
    61fe:	0508                	addi	a0,sp,640
    6200:	000001bb          	0x1bb
    6204:	87041003          	lh	zero,-1936(s0)
    6208:	0011                	c.nop	4
    620a:	0300                	addi	s0,sp,384
    620c:	0601                	addi	a2,a2,0
    620e:	0264                	addi	s1,sp,268
    6210:	0000                	unimp
    6212:	62080103          	lb	sp,1568(a6)
    6216:	0002                	c.slli64	zero
    6218:	0300                	addi	s0,sp,384
    621a:	0502                	c.slli64	a0
    621c:	00c9                	addi	ra,ra,18
    621e:	0000                	unimp
    6220:	ba070203          	lb	tp,-1120(a4)
    6224:	0002                	c.slli64	zero
    6226:	0300                	addi	s0,sp,384
    6228:	0504                	addi	s1,sp,640
    622a:	01c0                	addi	s0,sp,196
    622c:	0000                	unimp
    622e:	c2070403          	lb	s0,-992(a4)
    6232:	0008                	0x8
    6234:	0300                	addi	s0,sp,384
    6236:	0708                	addi	a0,sp,896
    6238:	08bd                	addi	a7,a7,15
    623a:	0000                	unimp
    623c:	6b080103          	lb	sp,1712(a6)
    6240:	0002                	c.slli64	zero
    6242:	0400                	addi	s0,sp,512
    6244:	00001193          	slli	gp,zero,0x0
    6248:	7b01                	lui	s6,0xfffe0
    624a:	4016                	0x4016
    624c:	0000                	unimp
    624e:	0500                	addi	s0,sp,640
    6250:	0071                	c.nop	28
    6252:	0000                	unimp
    6254:	76040203          	lb	tp,1888(s0)
    6258:	0011                	c.nop	4
    625a:	0300                	addi	s0,sp,384
    625c:	0304                	addi	s1,sp,384
    625e:	116e                	slli	sp,sp,0x3b
    6260:	0000                	unimp
    6262:	ad040403          	lb	s0,-1328(s0)
    6266:	0011                	c.nop	4
    6268:	0300                	addi	s0,sp,384
    626a:	0308                	addi	a0,sp,384
    626c:	11a5                	addi	gp,gp,-23
    626e:	0000                	unimp
    6270:	8c040803          	lb	a6,-1856(s0)
    6274:	0011                	c.nop	4
    6276:	0300                	addi	s0,sp,384
    6278:	0310                	addi	a2,sp,384
    627a:	11e2                	slli	gp,gp,0x38
    627c:	0000                	unimp
    627e:	7f032003          	lw	zero,2032(t1)
    6282:	0011                	c.nop	4
    6284:	0600                	addi	s0,sp,768
    6286:	007d                	c.nop	31
    6288:	0000                	unimp
    628a:	000000c3          	fmadd.s	ft1,ft0,ft0,ft0,rne
    628e:	00002407          	flw	fs0,0(zero) # 0 <RAM_START_ADDRESS>
    6292:	ff00                	fsw	fs0,56(a4)
    6294:	0500                	addi	s0,sp,640
    6296:	000000b3          	add	ra,zero,zero
    629a:	9b08                	0x9b08
    629c:	0011                	c.nop	4
    629e:	0100                	addi	s0,sp,128
    62a0:	0202                	c.slli64	tp
    62a2:	c316                	sw	t0,132(sp)
    62a4:	0000                	unimp
    62a6:	0900                	addi	s0,sp,144
    62a8:	00c8                	addi	a0,sp,68
    62aa:	0000                	unimp
    62ac:	b202                	fsd	ft0,288(sp)
    62ae:	0f02                	c.slli64	t5
    62b0:	0305                	addi	t1,t1,1
    62b2:	6a7c                	flw	fa5,84(a2)
    62b4:	0000                	unimp
    62b6:	7d00                	flw	fs0,56(a0)
    62b8:	0005                	c.nop	1
    62ba:	0400                	addi	s0,sp,512
    62bc:	eb00                	fsw	fs0,16(a4)
    62be:	0400001b          	0x400001b
    62c2:	b501                	j	60c2 <__subdf3+0x652>
    62c4:	000a                	c.slli	zero,0x2
    62c6:	0c00                	addi	s0,sp,528
    62c8:	11f1                	addi	gp,gp,-4
    62ca:	0000                	unimp
    62cc:	0a1d                	addi	s4,s4,7
    62ce:	0000                	unimp
    62d0:	5a70                	lw	a2,116(a2)
    62d2:	0000                	unimp
    62d4:	07ec                	addi	a1,sp,972
    62d6:	0000                	unimp
    62d8:	afdf 0000 0802      	0x8020000afdf
    62de:	8c04                	0x8c04
    62e0:	0011                	c.nop	4
    62e2:	0300                	addi	s0,sp,384
    62e4:	0504                	addi	s1,sp,640
    62e6:	6e69                	lui	t3,0x1a
    62e8:	0074                	addi	a3,sp,12
    62ea:	0102                	c.slli64	sp
    62ec:	6406                	flw	fs0,64(sp)
    62ee:	0002                	c.slli64	zero
    62f0:	0200                	addi	s0,sp,256
    62f2:	0508                	addi	a0,sp,640
    62f4:	000001bb          	0x1bb
    62f8:	0102                	c.slli64	sp
    62fa:	6208                	flw	fa0,0(a2)
    62fc:	0002                	c.slli64	zero
    62fe:	0200                	addi	s0,sp,256
    6300:	0704                	addi	s1,sp,896
    6302:	000008c7          	fmsub.s	fa7,ft0,ft0,ft0,rne
    6306:	0802                	c.slli64	a6
    6308:	0008bd07          	fld	fs10,0(a7)
    630c:	0200                	addi	s0,sp,256
    630e:	0702                	c.slli64	a4
    6310:	02ba                	slli	t0,t0,0xe
    6312:	0000                	unimp
    6314:	ae04                	fsd	fs1,24(a2)
    6316:	000a                	c.slli	zero,0x2
    6318:	0200                	addi	s0,sp,256
    631a:	0f48                	addi	a0,sp,916
    631c:	0025                	c.nop	9
    631e:	0000                	unimp
    6320:	0805                	addi	a6,a6,1
    6322:	4f02                	lw	t5,0(sp)
    6324:	0000b303          	0xb303
    6328:	0600                	addi	s0,sp,768
    632a:	00000a17          	auipc	s4,0x0
    632e:	5702                	lw	a4,32(sp)
    6330:	480e                	lw	a6,192(sp)
    6332:	0000                	unimp
    6334:	0400                	addi	s0,sp,512
    6336:	0020                	addi	s0,sp,8
    6338:	0600                	addi	s0,sp,768
    633a:	00000b97          	auipc	s7,0x0
    633e:	5802                	lw	a6,32(sp)
    6340:	480e                	lw	a6,192(sp)
    6342:	0000                	unimp
    6344:	0400                	addi	s0,sp,512
    6346:	0c14                	addi	a3,sp,528
    6348:	0704                	addi	s1,sp,896
    634a:	7865                	lui	a6,0xffff9
    634c:	0070                	addi	a2,sp,12
    634e:	5902                	lw	s2,32(sp)
    6350:	480e                	lw	a6,192(sp)
    6352:	0000                	unimp
    6354:	0400                	addi	s0,sp,512
    6356:	0604010b          	0x604010b
    635a:	08ed                	addi	a7,a7,27
    635c:	0000                	unimp
    635e:	5a02                	lw	s4,32(sp)
    6360:	480e                	lw	a6,192(sp)
    6362:	0000                	unimp
    6364:	0400                	addi	s0,sp,512
    6366:	0001                	nop
    6368:	0004                	0x4
    636a:	3808                	fld	fa0,48(s0)
    636c:	000c                	0xc
    636e:	0800                	addi	s0,sp,16
    6370:	4c02                	lw	s8,0(sp)
    6372:	0000d907          	vle16.v	v18,(ra),v0.t
    6376:	0900                	addi	s0,sp,144
    6378:	6c66                	flw	fs8,88(sp)
    637a:	0074                	addi	a3,sp,12
    637c:	4e02                	lw	t3,0(sp)
    637e:	5d0a                	lw	s10,160(sp)
    6380:	0000                	unimp
    6382:	0a00                	addi	s0,sp,272
    6384:	0c71                	addi	s8,s8,28
    6386:	0000                	unimp
    6388:	5c02                	lw	s8,32(sp)
    638a:	6905                	lui	s2,0x1
    638c:	0000                	unimp
    638e:	0000                	unimp
    6390:	0012220b          	0x12220b
    6394:	0100                	addi	s0,sp,128
    6396:	005d0123          	sb	t0,2(s10) # aae <main+0xc6>
    639a:	0000                	unimp
    639c:	5a70                	lw	a2,116(a2)
    639e:	0000                	unimp
    63a0:	07ec                	addi	a1,sp,972
    63a2:	0000                	unimp
    63a4:	9c01                	0x9c01
    63a6:	0569                	addi	a0,a0,26
    63a8:	0000                	unimp
    63aa:	610c                	flw	fa1,0(a0)
    63ac:	0100                	addi	s0,sp,128
    63ae:	005d1223          	sh	t0,4(s10)
    63b2:	0000                	unimp
    63b4:	88e2                	mv	a7,s8
    63b6:	0000                	unimp
    63b8:	620c                	flw	fa1,0(a2)
    63ba:	0100                	addi	s0,sp,128
    63bc:	005d1c23          	sh	t0,24(s10)
    63c0:	0000                	unimp
    63c2:	890a                	mv	s2,sp
    63c4:	0000                	unimp
    63c6:	780d                	lui	a6,0xfffe3
    63c8:	0100000b          	0x100000b
    63cc:	0325                	addi	t1,t1,9
    63ce:	002c                	addi	a1,sp,8
    63d0:	0000                	unimp
    63d2:	8932                	mv	s2,a2
    63d4:	0000                	unimp
    63d6:	880e                	mv	a6,gp
    63d8:	000c                	0xc
    63da:	0100                	addi	s0,sp,128
    63dc:	0325                	addi	t1,t1,9
    63de:	002c                	addi	a1,sp,8
    63e0:	0000                	unimp
    63e2:	0f00                	addi	s0,sp,912
    63e4:	5f41                	li	t5,-16
    63e6:	26010063          	beqz	sp,6646 <__subdf3+0xbd6>
    63ea:	00056903          	0x56903
    63ee:	1000                	addi	s0,sp,32
    63f0:	5f41                	li	t5,-16
    63f2:	26010073          	0x26010073
    63f6:	00056903          	0x56903
    63fa:	8200                	0x8200
    63fc:	0089                	addi	ra,ra,2
    63fe:	1000                	addi	s0,sp,32
    6400:	5f41                	li	t5,-16
    6402:	0065                	c.nop	25
    6404:	2601                	jal	6704 <state_known_crc+0x70>
    6406:	00056903          	0x56903
    640a:	2400                	fld	fs0,8(s0)
    640c:	008a                	slli	ra,ra,0x2
    640e:	0d00                	addi	s0,sp,656
    6410:	0ba2                	slli	s7,s7,0x8
    6412:	0000                	unimp
    6414:	2601                	jal	6714 <state_known_crc+0x80>
    6416:	00057003          	0x57003
    641a:	1500                	addi	s0,sp,672
    641c:	0d00008b          	0xd00008b
    6420:	0b6e                	slli	s6,s6,0x1b
    6422:	0000                	unimp
    6424:	2601                	jal	6724 <state_known_crc+0x90>
    6426:	00057003          	0x57003
    642a:	7200                	flw	fs0,32(a2)
    642c:	008c                	addi	a1,sp,64
    642e:	0f00                	addi	s0,sp,912
    6430:	5f42                	lw	t5,48(sp)
    6432:	27010063          	beq	sp,a6,6692 <matrix_known_crc+0xa>
    6436:	00056903          	0x56903
    643a:	1000                	addi	s0,sp,32
    643c:	5f42                	lw	t5,48(sp)
    643e:	27010073          	0x27010073
    6442:	00056903          	0x56903
    6446:	d700                	sw	s0,40(a4)
    6448:	008d                	addi	ra,ra,3
    644a:	1000                	addi	s0,sp,32
    644c:	5f42                	lw	t5,48(sp)
    644e:	0065                	c.nop	25
    6450:	2701                	jal	6b50 <__clz_tab+0xd4>
    6452:	00056903          	0x56903
    6456:	5d00                	lw	s0,56(a0)
    6458:	008e                	slli	ra,ra,0x3
    645a:	0d00                	addi	s0,sp,656
    645c:	0bbc                	addi	a5,sp,472
    645e:	0000                	unimp
    6460:	2701                	jal	6b60 <__clz_tab+0xe4>
    6462:	00057003          	0x57003
    6466:	9c00                	0x9c00
    6468:	008e                	slli	ra,ra,0x3
    646a:	0d00                	addi	s0,sp,656
    646c:	0bc1                	addi	s7,s7,16
    646e:	0000                	unimp
    6470:	2701                	jal	6b70 <__clz_tab+0xf4>
    6472:	00057003          	0x57003
    6476:	ac00                	fsd	fs0,24(s0)
    6478:	0f00008f          	0xf00008f
    647c:	5f52                	lw	t5,52(sp)
    647e:	28010063          	beqz	sp,66fe <state_known_crc+0x6a>
    6482:	00056903          	0x56903
    6486:	1000                	addi	s0,sp,32
    6488:	5f52                	lw	t5,52(sp)
    648a:	28010073          	0x28010073
    648e:	00056903          	0x56903
    6492:	3500                	fld	fs0,40(a0)
    6494:	0090                	addi	a2,sp,64
    6496:	1000                	addi	s0,sp,32
    6498:	5f52                	lw	t5,52(sp)
    649a:	0065                	c.nop	25
    649c:	2801                	jal	64ac <__subdf3+0xa3c>
    649e:	00056903          	0x56903
    64a2:	e200                	fsw	fs0,0(a2)
    64a4:	0090                	addi	a2,sp,64
    64a6:	0d00                	addi	s0,sp,656
    64a8:	0b54                	addi	a3,sp,404
    64aa:	0000                	unimp
    64ac:	2801                	jal	64bc <__subdf3+0xa4c>
    64ae:	00057003          	0x57003
    64b2:	4700                	lw	s0,8(a4)
    64b4:	0092                	slli	ra,ra,0x4
    64b6:	0d00                	addi	s0,sp,656
    64b8:	0c8d                	addi	s9,s9,3
    64ba:	0000                	unimp
    64bc:	2801                	jal	64cc <__subdf3+0xa5c>
    64be:	00057003          	0x57003
    64c2:	7d00                	flw	fs0,56(a0)
    64c4:	0094                	addi	a3,sp,64
    64c6:	0f00                	addi	s0,sp,912
    64c8:	0072                	c.slli	zero,0x1c
    64ca:	2901                	jal	68da <errpat+0x15a>
    64cc:	5d0a                	lw	s10,160(sp)
    64ce:	0000                	unimp
    64d0:	1100                	addi	s0,sp,160
    64d2:	0d88                	addi	a0,sp,720
    64d4:	0000                	unimp
    64d6:	0230                	addi	a2,sp,264
    64d8:	0000                	unimp
    64da:	a712                	fsd	ft4,392(sp)
    64dc:	0100000b          	0x100000b
    64e0:	032c                	addi	a1,sp,392
    64e2:	000000b3          	add	ra,zero,zero
    64e6:	1100                	addi	s0,sp,160
    64e8:	0db0                	addi	a2,sp,728
    64ea:	0000                	unimp
    64ec:	0246                	slli	tp,tp,0x11
    64ee:	0000                	unimp
    64f0:	a712                	fsd	ft4,392(sp)
    64f2:	0100000b          	0x100000b
    64f6:	032d                	addi	t1,t1,11
    64f8:	000000b3          	add	ra,zero,zero
    64fc:	1100                	addi	s0,sp,160
    64fe:	0df8                	addi	a4,sp,732
    6500:	0000                	unimp
    6502:	032c                	addi	a1,sp,392
    6504:	0000                	unimp
    6506:	000c6213          	ori	tp,s8,0
    650a:	0100                	addi	s0,sp,128
    650c:	032e                	slli	t1,t1,0xb
    650e:	5b44                	lw	s1,52(a4)
    6510:	0000                	unimp
    6512:	000c6713          	ori	a4,s8,0
    6516:	0100                	addi	s0,sp,128
    6518:	032e                	slli	t1,t1,0xb
    651a:	5c64                	lw	s1,124(s0)
    651c:	0000                	unimp
    651e:	000c6c13          	ori	s8,s8,0
    6522:	0100                	addi	s0,sp,128
    6524:	032e                	slli	t1,t1,0xb
    6526:	5b8c                	lw	a1,48(a5)
    6528:	0000                	unimp
    652a:	000c7f13          	andi	t5,s8,0
    652e:	0100                	addi	s0,sp,128
    6530:	032e                	slli	t1,t1,0xb
    6532:	5d40                	lw	s0,60(a0)
    6534:	0000                	unimp
    6536:	210d                	jal	6958 <errpat+0x1d8>
    6538:	000c                	0xc
    653a:	0100                	addi	s0,sp,128
    653c:	032e                	slli	t1,t1,0xb
    653e:	002c                	addi	a1,sp,8
    6540:	0000                	unimp
    6542:	0000966b          	0x966b
    6546:	5811                	li	a6,-28
    6548:	000e                	c.slli	zero,0x3
    654a:	a900                	fsd	fs0,16(a0)
    654c:	0002                	c.slli64	zero
    654e:	1000                	addi	s0,sp,32
    6550:	5f5f 0078 2e01      	0x2e0100785f5f
    6556:	00057003          	0x57003
    655a:	6500                	flw	fs0,8(a0)
    655c:	00000097          	auipc	ra,0x0
    6560:	8811                	andi	s0,s0,4
    6562:	000e                	c.slli	zero,0x3
    6564:	c300                	sw	s0,0(a4)
    6566:	0002                	c.slli64	zero
    6568:	1000                	addi	s0,sp,32
    656a:	5f5f 0078 2e01      	0x2e0100785f5f
    6570:	00057003          	0x57003
    6574:	7800                	flw	fs0,48(s0)
    6576:	00000097          	auipc	ra,0x0
    657a:	7011                	c.lui	zero,0xfffe4
    657c:	000e                	c.slli	zero,0x3
    657e:	dd00                	sw	s0,56(a0)
    6580:	0002                	c.slli64	zero
    6582:	1000                	addi	s0,sp,32
    6584:	5f5f 0078 2e01      	0x2e0100785f5f
    658a:	00057003          	0x57003
    658e:	8b00                	0x8b00
    6590:	00000097          	auipc	ra,0x0
    6594:	9814                	0x9814
    6596:	005c                	addi	a5,sp,4
    6598:	1000                	addi	s0,sp,32
    659a:	0000                	unimp
    659c:	fb00                	fsw	fs0,48(a4)
    659e:	0002                	c.slli64	zero
    65a0:	1000                	addi	s0,sp,32
    65a2:	5f5f 0078 2e01      	0x2e0100785f5f
    65a8:	00057003          	0x57003
    65ac:	9e00                	0x9e00
    65ae:	00000097          	auipc	ra,0x0
    65b2:	a011                	j	65b6 <__subdf3+0xb46>
    65b4:	000e                	c.slli	zero,0x3
    65b6:	1500                	addi	s0,sp,672
    65b8:	10000003          	lb	zero,256(zero) # 100 <cmp_idx+0x3c>
    65bc:	5f5f 0078 2e01      	0x2e0100785f5f
    65c2:	00057003          	0x57003
    65c6:	b100                	fsd	fs0,32(a0)
    65c8:	00000097          	auipc	ra,0x0
    65cc:	b815                	j	5e00 <__subdf3+0x390>
    65ce:	000e                	c.slli	zero,0x3
    65d0:	1000                	addi	s0,sp,32
    65d2:	5f5f 0078 2e01      	0x2e0100785f5f
    65d8:	00057003          	0x57003
    65dc:	c400                	sw	s0,8(s0)
    65de:	00000097          	auipc	ra,0x0
    65e2:	1100                	addi	s0,sp,160
    65e4:	0ed0                	addi	a2,sp,852
    65e6:	0000                	unimp
    65e8:	048e                	slli	s1,s1,0x3
    65ea:	0000                	unimp
    65ec:	000b7313          	andi	t1,s6,0
    65f0:	0100                	addi	s0,sp,128
    65f2:	032e                	slli	t1,t1,0xb
    65f4:	5df4                	lw	a3,124(a1)
    65f6:	0000                	unimp
    65f8:	0009e113          	ori	sp,s3,0
    65fc:	0100                	addi	s0,sp,128
    65fe:	032e                	slli	t1,t1,0xb
    6600:	5f10                	lw	a2,56(a4)
    6602:	0000                	unimp
    6604:	000b7d13          	andi	s10,s6,0
    6608:	0100                	addi	s0,sp,128
    660a:	032e                	slli	t1,t1,0xb
    660c:	5e3c                	lw	a5,120(a2)
    660e:	0000                	unimp
    6610:	000b9d13          	slli	s10,s7,0x0
    6614:	0100                	addi	s0,sp,128
    6616:	032e                	slli	t1,t1,0xb
    6618:	6068                	flw	fa0,68(s0)
    661a:	0000                	unimp
    661c:	000c5913          	srli	s2,s8,0x0
    6620:	0100                	addi	s0,sp,128
    6622:	032e                	slli	t1,t1,0xb
    6624:	5d40                	lw	s0,60(a0)
    6626:	0000                	unimp
    6628:	210d                	jal	6a4a <errpat+0x2ca>
    662a:	000c                	0xc
    662c:	0100                	addi	s0,sp,128
    662e:	032e                	slli	t1,t1,0xb
    6630:	002c                	addi	a1,sp,8
    6632:	0000                	unimp
    6634:	000097f7          	0x97f7
    6638:	3811                	jal	5e4c <__subdf3+0x3dc>
    663a:	9b00000f          	0x9b00000f
    663e:	10000003          	lb	zero,256(zero) # 100 <cmp_idx+0x3c>
    6642:	5f5f 0078 2e01      	0x2e0100785f5f
    6648:	00057003          	0x57003
    664c:	ef00                	fsw	fs0,24(a4)
    664e:	0098                	addi	a4,sp,64
    6650:	0000                	unimp
    6652:	5011                	c.li	zero,-28
    6654:	b500000f          	0xb500000f
    6658:	10000003          	lb	zero,256(zero) # 100 <cmp_idx+0x3c>
    665c:	5f5f 0078 2e01      	0x2e0100785f5f
    6662:	00057003          	0x57003
    6666:	0200                	addi	s0,sp,256
    6668:	0099                	addi	ra,ra,6
    666a:	0000                	unimp
    666c:	cc14                	sw	a3,24(s0)
    666e:	005e                	c.slli	zero,0x17
    6670:	1000                	addi	s0,sp,32
    6672:	0000                	unimp
    6674:	d300                	sw	s0,32(a4)
    6676:	10000003          	lb	zero,256(zero) # 100 <cmp_idx+0x3c>
    667a:	5f5f 0078 2e01      	0x2e0100785f5f
    6680:	00057003          	0x57003
    6684:	1500                	addi	s0,sp,672
    6686:	0099                	addi	ra,ra,6
    6688:	0000                	unimp
    668a:	4414                	lw	a3,8(s0)
    668c:	005f 1000 0000      	0x1000005f
    6692:	f100                	fsw	fs0,32(a0)
    6694:	10000003          	lb	zero,256(zero) # 100 <cmp_idx+0x3c>
    6698:	5f5f 0078 2e01      	0x2e0100785f5f
    669e:	00057003          	0x57003
    66a2:	2800                	fld	fs0,16(s0)
    66a4:	0099                	addi	ra,ra,6
    66a6:	0000                	unimp
    66a8:	8811                	andi	s0,s0,4
    66aa:	0b00000f          	fence	irw,unknown
    66ae:	0004                	0x4
    66b0:	1000                	addi	s0,sp,32
    66b2:	5f5f 0078 2e01      	0x2e0100785f5f
    66b8:	00057003          	0x57003
    66bc:	3b00                	fld	fs0,48(a4)
    66be:	0099                	addi	ra,ra,6
    66c0:	0000                	unimp
    66c2:	f014                	fsw	fa3,32(s0)
    66c4:	005f 1000 0000      	0x1000005f
    66ca:	2900                	fld	fs0,16(a0)
    66cc:	0004                	0x4
    66ce:	1000                	addi	s0,sp,32
    66d0:	5f5f 0078 2e01      	0x2e0100785f5f
    66d6:	00057003          	0x57003
    66da:	5900                	lw	s0,48(a0)
    66dc:	0099                	addi	ra,ra,6
    66de:	0000                	unimp
    66e0:	3814                	fld	fa3,48(s0)
    66e2:	0060                	addi	s0,sp,12
    66e4:	1000                	addi	s0,sp,32
    66e6:	0000                	unimp
    66e8:	4700                	lw	s0,8(a4)
    66ea:	0004                	0x4
    66ec:	1000                	addi	s0,sp,32
    66ee:	5f5f 0078 2e01      	0x2e0100785f5f
    66f4:	00057003          	0x57003
    66f8:	6c00                	flw	fs0,24(s0)
    66fa:	0099                	addi	ra,ra,6
    66fc:	0000                	unimp
    66fe:	5414                	lw	a3,40(s0)
    6700:	0060                	addi	s0,sp,12
    6702:	1000                	addi	s0,sp,32
    6704:	0000                	unimp
    6706:	6500                	flw	fs0,8(a0)
    6708:	0004                	0x4
    670a:	1000                	addi	s0,sp,32
    670c:	5f5f 0078 2e01      	0x2e0100785f5f
    6712:	00057003          	0x57003
    6716:	9a00                	0x9a00
    6718:	0099                	addi	ra,ra,6
    671a:	0000                	unimp
    671c:	6815                	lui	a6,0x5
    671e:	0d00000f          	fence	iow,unknown
    6722:	0bc6                	slli	s7,s7,0x11
    6724:	0000                	unimp
    6726:	2e01                	jal	6a36 <errpat+0x2b6>
    6728:	00002c03          	lw	s8,0(zero) # 0 <RAM_START_ADDRESS>
    672c:	ad00                	fsd	fs0,24(a0)
    672e:	0099                	addi	ra,ra,6
    6730:	1600                	addi	s0,sp,800
    6732:	6074                	flw	fa3,68(s0)
    6734:	0000                	unimp
    6736:	00000577          	0x577
    673a:	f416                	fsw	ft5,40(sp)
    673c:	0060                	addi	s0,sp,12
    673e:	7700                	flw	fs0,40(a4)
    6740:	0005                	c.nop	1
    6742:	0000                	unimp
    6744:	1100                	addi	s0,sp,160
    6746:	0fa0                	addi	s0,sp,984
    6748:	0000                	unimp
    674a:	0556                	slli	a0,a0,0x15
    674c:	0000                	unimp
    674e:	dc12                	sw	tp,56(sp)
    6750:	0100000b          	0x100000b
    6754:	002c032f          	vamoaddei8.v	zero,(s8),v2,v6,v0.t
    6758:	0000                	unimp
    675a:	00051717          	auipc	a4,0x51
    675e:	1200                	addi	s0,sp,288
    6760:	0c44                	addi	s1,sp,532
    6762:	0000                	unimp
    6764:	2f01                	jal	6e74 <impure_data+0x2a4>
    6766:	00056903          	0x56903
    676a:	1200                	addi	s0,sp,288
    676c:	0b59                	addi	s6,s6,22
    676e:	0000                	unimp
    6770:	2f01                	jal	6e80 <impure_data+0x2b0>
    6772:	00056903          	0x56903
    6776:	1200                	addi	s0,sp,288
    6778:	0b82                	c.slli64	s7
    677a:	0000                	unimp
    677c:	2f01                	jal	6e8c <impure_data+0x2bc>
    677e:	00056903          	0x56903
    6782:	1200                	addi	s0,sp,288
    6784:	0bf5                	addi	s7,s7,29
    6786:	0000                	unimp
    6788:	2f01                	jal	6e98 <impure_data+0x2c8>
    678a:	00057003          	0x57003
    678e:	1200                	addi	s0,sp,288
    6790:	00000c0b          	0xc0b
    6794:	2f01                	jal	6ea4 <impure_data+0x2d4>
    6796:	00057003          	0x57003
    679a:	1700                	addi	s0,sp,928
    679c:	04f6                	slli	s1,s1,0x1d
    679e:	0000                	unimp
    67a0:	785f5f0f          	0x785f5f0f
    67a4:	0100                	addi	s0,sp,128
    67a6:	0570032f          	vamoaddei8.v	v6,(zero),v23,v6,v0.t
    67aa:	0000                	unimp
    67ac:	1700                	addi	s0,sp,928
    67ae:	0508                	addi	a0,sp,640
    67b0:	0000                	unimp
    67b2:	785f5f0f          	0x785f5f0f
    67b6:	0100                	addi	s0,sp,128
    67b8:	0570032f          	vamoaddei8.v	v6,(zero),v23,v6,v0.t
    67bc:	0000                	unimp
    67be:	1800                	addi	s0,sp,48
    67c0:	785f5f0f          	0x785f5f0f
    67c4:	0100                	addi	s0,sp,128
    67c6:	0570032f          	vamoaddei8.v	v6,(zero),v23,v6,v0.t
    67ca:	0000                	unimp
    67cc:	0000                	unimp
    67ce:	5414                	lw	a3,40(s0)
    67d0:	005d                	c.nop	23
    67d2:	1400                	addi	s0,sp,544
    67d4:	0000                	unimp
    67d6:	3500                	fld	fs0,40(a0)
    67d8:	0005                	c.nop	1
    67da:	1000                	addi	s0,sp,32
    67dc:	5f5f 0078 2f01      	0x2f0100785f5f
    67e2:	00057003          	0x57003
    67e6:	1c00                	addi	s0,sp,560
    67e8:	009a                	slli	ra,ra,0x6
    67ea:	0000                	unimp
    67ec:	00054717          	auipc	a4,0x54
    67f0:	0f00                	addi	s0,sp,912
    67f2:	5f5f 0078 2f01      	0x2f0100785f5f
    67f8:	00057003          	0x57003
    67fc:	0000                	unimp
    67fe:	0f18                	addi	a4,sp,912
    6800:	5f5f 0078 2f01      	0x2f0100785f5f
    6806:	00057003          	0x57003
    680a:	0000                	unimp
    680c:	1500                	addi	s0,sp,672
    680e:	0fc0                	addi	s0,sp,980
    6810:	0000                	unimp
    6812:	9b12                	add	s6,s6,tp
    6814:	000a                	c.slli	zero,0x2
    6816:	0100                	addi	s0,sp,128
    6818:	00b3032f          	vamoaddei8.v	zero,(t1),v11,v6,v0.t
    681c:	0000                	unimp
    681e:	0000                	unimp
    6820:	0402                	c.slli64	s0
    6822:	c005                	beqz	s0,6842 <errpat+0xc2>
    6824:	0001                	nop
    6826:	0200                	addi	s0,sp,256
    6828:	0704                	addi	s1,sp,896
    682a:	08c2                	slli	a7,a7,0x10
    682c:	0000                	unimp
    682e:	7619                	lui	a2,0xfffe6
    6830:	000c                	0xc
    6832:	7600                	flw	fs0,40(a2)
    6834:	000c                	0xc
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
lui     sp,%hi(__stack_top)                                             
       0:	1101                	addi	sp,sp,-32
       2:	1000                	addi	s0,sp,32
addi    sp,sp,%lo(__stack_top)
       4:	1106                	slli	sp,sp,0x21
       6:	1201                	addi	tp,tp,-32
jal   zero, _start
       8:	0301                	addi	t1,t1,0
       a:	1b0e                	slli	s6,s6,0x23
       c:	250e                	fld	fa0,192(sp)
       e:	130e                	slli	t1,t1,0x23
      10:	0005                	c.nop	1
      12:	0000                	unimp
      14:	1101                	addi	sp,sp,-32
      16:	2501                	jal	616 <core_bench_list+0xf2>
      18:	130e                	slli	t1,t1,0x23
      1a:	1b0e030b          	0x1b0e030b
      1e:	110e                	slli	sp,sp,0x23
      20:	1201                	addi	tp,tp,-32
      22:	1006                	c.slli	zero,0x21
      24:	02000017          	auipc	zero,0x2000
      28:	0024                	addi	s1,sp,8
      2a:	0b3e0b0b          	0xb3e0b0b
      2e:	00000803          	lb	a6,0(zero) # 0 <RAM_START_ADDRESS>
      32:	0b002403          	lw	s0,176(zero) # b0 <frame_dummy+0xc>
      36:	030b3e0b          	0x30b3e0b
      3a:	000e                	c.slli	zero,0x3
      3c:	0400                	addi	s0,sp,512
      3e:	0016                	c.slli	zero,0x5
      40:	0b3a0e03          	lb	t3,179(s4) # 63dd <__subdf3+0x96d>
      44:	0b390b3b          	0xb390b3b
      48:	1349                	addi	t1,t1,-14
      4a:	0000                	unimp
      4c:	1305                	addi	t1,t1,-31
      4e:	0301                	addi	t1,t1,0
      50:	0b0e                	slli	s6,s6,0x3
      52:	3b0b3a0b          	0x3b0b3a0b
      56:	010b390b          	0x10b390b
      5a:	06000013          	li	zero,96
      5e:	000d                	c.nop	3
      60:	0b3a0e03          	lb	t3,179(s4)
      64:	0b390b3b          	0xb390b3b
      68:	1349                	addi	t1,t1,-14
      6a:	0b38                	addi	a4,sp,408
      6c:	0000                	unimp
      6e:	03000d07          	vle8ff.v	v26,(zero)
      72:	3a08                	fld	fa0,48(a2)
      74:	390b3b0b          	0x390b3b0b
      78:	3813490b          	0x3813490b
      7c:	0800000b          	0x800000b
      80:	0b0b000f          	0xb0b000f
      84:	1349                	addi	t1,t1,-14
      86:	0000                	unimp
      88:	0109                	addi	sp,sp,2
      8a:	4901                	li	s2,0
      8c:	00130113          	addi	sp,t1,1
      90:	0a00                	addi	s0,sp,272
      92:	0021                	c.nop	8
      94:	1349                	addi	t1,t1,-14
      96:	00000b2f          	vamoaddei8.v	zero,(zero),v0,v22,v0.t
      9a:	0b000f0b          	0xb000f0b
      9e:	0c00000b          	0xc00000b
      a2:	0115                	addi	sp,sp,5
      a4:	13491927          	fsh	fs4,306(s2) # 1132 <main+0x74a>
      a8:	1301                	addi	t1,t1,-32
      aa:	0000                	unimp
      ac:	050d                	addi	a0,a0,3
      ae:	4900                	lw	s0,16(a0)
      b0:	0e000013          	li	zero,224
      b4:	012e                	slli	sp,sp,0xb
      b6:	0e03193f 053b0b3a 	0x53b0b3a0e03193f
      be:	0b39                	addi	s6,s6,14
      c0:	13491927          	fsh	fs4,306(s2)
    if (res == NULL)
      c4:	0111                	addi	sp,sp,4
      c6:	0612                	slli	a2,a2,0x4
    return a->idx - b->idx;
      c8:	1840                	addi	s0,sp,52
      ca:	01194297          	auipc	t0,0x1194
      ce:	0f000013          	li	zero,240
}
      d2:	0005                	c.nop	1
      d4:	0b3a0e03          	lb	t3,179(s4)
        a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16 >> 8));
      d8:	0b39053b          	0xb39053b
      dc:	1349                	addi	t1,t1,-14
      de:	1702                	slli	a4,a4,0x20
      e0:	0000                	unimp
      e2:	0510                	addi	a2,sp,640
      e4:	0300                	addi	s0,sp,384
      e6:	3a08                	fld	fa0,48(a2)
      e8:	39053b0b          	0x39053b0b
      ec:	0213490b          	0x213490b
      f0:	11000017          	auipc	zero,0x11000
        b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16 >> 8));
      f4:	0034                	addi	a3,sp,8
      f6:	0b3a0803          	lb	a6,179(s4)
    return a->idx - b->idx;
      fa:	0b39053b          	0xb39053b
        b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16 >> 8));
      fe:	1349                	addi	t1,t1,-14
     100:	1702                	slli	a4,a4,0x20
     102:	0000                	unimp
     104:	3412                	fld	fs0,288(sp)
     106:	0300                	addi	s0,sp,384
     108:	3a0e                	fld	fs4,224(sp)
     10a:	39053b0b          	0x39053b0b
     10e:	0213490b          	0x213490b
     112:	13000017          	auipc	zero,0x13000
    return a->idx - b->idx;
     116:	8289                	srli	a3,a3,0x2
}
     118:	0101                	addi	sp,sp,0
     11a:	0111                	addi	sp,sp,4
     11c:	0000                	unimp
     11e:	8a14                	0x8a14
{
     120:	0182                	c.slli64	gp
     122:	0200                	addi	s0,sp,256
     124:	9118                	0x9118
     126:	1842                	slli	a6,a6,0x30
    ee_s16 data = *pdata;
     128:	0000                	unimp
     12a:	2e15                	jal	45e <core_list_mergesort+0x86>
{
     12c:	3f01                	jal	3c <_start+0x2c>
     12e:	0319                	addi	t1,t1,6
     130:	3a0e                	fld	fs4,224(sp)
     132:	39053b0b          	0x39053b0b
          & 1;  /* bit 7 indicates if the function result has been cached */
     136:	4919270b          	0x4919270b
{
     13a:	010b2013          	slti	zero,s6,16
     13e:	16000013          	li	zero,352
    if (optype) /* if cached, use cache */
     142:	0005                	c.nop	1
     144:	0b3a0e03          	lb	t3,179(s4)
}
     148:	0b39053b          	0xb39053b
        return (data & 0x007f);
     14c:	1349                	addi	t1,t1,-14
     14e:	0000                	unimp
}
     150:	03003417          	auipc	s0,0x3003
     154:	3a0e                	fld	fs4,224(sp)
     156:	39053b0b          	0x39053b0b
     15a:	0013490b          	0x13490b
     15e:	1800                	addi	s0,sp,48
     160:	0034                	addi	a3,sp,8
     162:	0b3a0803          	lb	a6,179(s4)
     166:	0b39053b          	0xb39053b
        ee_s16 flag = data & 0x7; /* bits 0-2 is type of function to perform */
     16a:	1349                	addi	t1,t1,-14
               & 0xf);       /* bits 3-6 is specific data for the operation */
     16c:	0000                	unimp
     16e:	2e19                	jal	484 <core_list_mergesort+0xac>
        ee_s16 dtype
     170:	3f01                	jal	80 <__do_global_dtors_aux+0x24>
     172:	0319                	addi	t1,t1,6
        dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
     174:	3a0e                	fld	fs4,224(sp)
     176:	390b3b0b          	0x390b3b0b
        ee_s16 flag = data & 0x7; /* bits 0-2 is type of function to perform */
     17a:	4919270b          	0x4919270b
                retval = core_bench_state(res->size,
     17e:	12011113          	0x12011113
     182:	4006                	0x4006
        dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
     184:	9718                	0x9718
     186:	1942                	slli	s2,s2,0x30
        switch (flag)
     188:	1301                	addi	t1,t1,-32
     18a:	0000                	unimp
     18c:	051a                	slli	a0,a0,0x6
     18e:	0300                	addi	s0,sp,384
     190:	3a0e                	fld	fs4,224(sp)
     192:	390b3b0b          	0x390b3b0b
        res->crc = crcu16(retval, res->crc);
     196:	0213490b          	0x213490b
     19a:	1b000017          	auipc	zero,0x1b000
     19e:	0034                	addi	a3,sp,8
     1a0:	0b3a0e03          	lb	t3,179(s4)
     1a4:	0b390b3b          	0xb390b3b
     1a8:	1349                	addi	t1,t1,-14
     1aa:	0b1c                	addi	a5,sp,400
        *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
     1ac:	0000                	unimp
     1ae:	341c                	fld	fa5,40(s0)
        retval &= 0x007f;
     1b0:	0300                	addi	s0,sp,384
     1b2:	3a0e                	fld	fs4,224(sp)
        *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
     1b4:	390b3b0b          	0x390b3b0b
        res->crc = crcu16(retval, res->crc);
     1b8:	0213490b          	0x213490b
        *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
     1bc:	1d000017          	auipc	zero,0x1d000
     1c0:	1755010b          	0x1755010b
}
     1c4:	1301                	addi	t1,t1,-32
     1c6:	0000                	unimp
     1c8:	1d1e                	slli	s10,s10,0x27
     1ca:	3101                	jal	fffffdca <RAM_SIZE+0xfffefdca>
     1cc:	55015213          	fsri	tp,sp,a0,0x10
     1d0:	590b5817          	auipc	a6,0x590b5
     1d4:	5705                	li	a4,-31
     1d6:	1f00000b          	0x1f00000b
     1da:	0005                	c.nop	1
     1dc:	1331                	addi	t1,t1,-20
     1de:	1702                	slli	a4,a4,0x20
                retval = core_bench_state(res->size,
     1e0:	0000                	unimp
     1e2:	0b20                	addi	s0,sp,408
     1e4:	5501                	li	a0,-32
     1e6:	21000017          	auipc	zero,0x21000
     1ea:	0034                	addi	a3,sp,8
     1ec:	1331                	addi	t1,t1,-20
     1ee:	1702                	slli	a4,a4,0x20
     1f0:	0000                	unimp
     1f2:	1d22                	slli	s10,s10,0x28
     1f4:	3101                	jal	fffffdf4 <RAM_SIZE+0xfffefdf4>
     1f6:	55015213          	fsri	tp,sp,a0,0x10
     1fa:	590b5817          	auipc	a6,0x590b5
     1fe:	5705                	li	a4,-31
     200:	0013010b          	0x13010b
     204:	2300                	fld	fs0,0(a4)
     206:	011d                	addi	sp,sp,7
                if (res->crcstate == 0)
     208:	1331                	addi	t1,t1,-20
     20a:	0111                	addi	sp,sp,4
                retval = core_bench_state(res->size,
     20c:	0612                	slli	a2,a2,0x4
     20e:	0b58                	addi	a4,sp,404
     210:	0559                	addi	a0,a0,22
     212:	00000b57          	vadd.vv	v22,v0,v0,v0.t
                if (res->crcstate == 0)
     216:	8924                	0x8924
        res->crc = crcu16(retval, res->crc);
     218:	0182                	c.slli64	gp
     21a:	1100                	addi	s0,sp,160
                    res->crcstate = retval;
     21c:	3101                	jal	fffffe1c <RAM_SIZE+0xfffefe1c>
     21e:	25000013          	li	zero,592
     222:	8289                	srli	a3,a3,0x2
                retval = core_bench_matrix(&(res->mat), dtype, res->crc);
     224:	0101                	addi	sp,sp,0
     226:	0111                	addi	sp,sp,4
     228:	4295                	li	t0,5
     22a:	3119                	jal	fffffe30 <RAM_SIZE+0xfffefe30>
     22c:	26000013          	li	zero,608
                if (res->crcmatrix == 0)
     230:	0005                	c.nop	1
     232:	0b3a0803          	lb	a6,179(s4)
                retval = core_bench_matrix(&(res->mat), dtype, res->crc);
     236:	0b390b3b          	0xb390b3b
     23a:	1349                	addi	t1,t1,-14
                if (res->crcmatrix == 0)
     23c:	1702                	slli	a4,a4,0x20
     23e:	0000                	unimp
        res->crc = crcu16(retval, res->crc);
     240:	03003427          	fsd	fa6,40(zero) # 28 <_start+0x18>
                    res->crcmatrix = retval;
     244:	3a08                	fld	fa0,48(a2)
     246:	390b3b0b          	0x390b3b0b
     24a:	0213490b          	0x213490b
        res->crc = crcu16(retval, res->crc);
     24e:	28000017          	auipc	zero,0x28000
     252:	011d                	addi	sp,sp,7
{
     254:	1331                	addi	t1,t1,-20
     256:	0152                	slli	sp,sp,0x14
     258:	1755                	addi	a4,a4,-11
     25a:	0b58                	addi	a4,sp,404
     25c:	0b59                	addi	s6,s6,22
     25e:	13010b57          	vminu.vv	v22,v16,v2
    ee_s16 val1 = calc_func(&(a->data16), res);
     262:	0000                	unimp
{
     264:	0529                	addi	a0,a0,10
     266:	3100                	fld	fs0,32(a0)
     268:	2a000013          	li	zero,672
     26c:	011d                	addi	sp,sp,7
     26e:	1331                	addi	t1,t1,-20
    ee_s16 val1 = calc_func(&(a->data16), res);
     270:	0111                	addi	sp,sp,4
     272:	0612                	slli	a2,a2,0x4
     274:	0b58                	addi	a4,sp,404
     276:	0b59                	addi	s6,s6,22
    ee_s16 val2 = calc_func(&(b->data16), res);
     278:	13010b57          	vminu.vv	v22,v16,v2
     27c:	0000                	unimp
     27e:	0182892b          	0x182892b
    ee_s16 val1 = calc_func(&(a->data16), res);
     282:	1101                	addi	sp,sp,-32
    ee_s16 val2 = calc_func(&(b->data16), res);
     284:	3101                	jal	fffffe84 <RAM_SIZE+0xfffefe84>
     286:	00130113          	addi	sp,t1,1
}
     28a:	2c00                	fld	fs0,24(s0)
     28c:	8289                	srli	a3,a3,0x2
     28e:	0101                	addi	sp,sp,0
     290:	0111                	addi	sp,sp,4
     292:	1331                	addi	t1,t1,-20
     294:	0000                	unimp
     296:	2e2d                	jal	5d0 <core_bench_list+0xac>
     298:	3f01                	jal	1a8 <calc_func+0x88>
     29a:	0319                	addi	t1,t1,6
     29c:	3a0e                	fld	fs4,224(sp)
     29e:	390b3b0b          	0x390b3b0b
    to->data16 = from->data16;
     2a2:	2019270b          	0x2019270b
    to->idx    = from->idx;
     2a6:	0013010b          	0x13010b
    to->data16 = from->data16;
     2aa:	2e00                	fld	fs0,24(a2)
    to->idx    = from->idx;
     2ac:	0005                	c.nop	1
     2ae:	0b3a0803          	lb	a6,179(s4)
}
     2b2:	0b390b3b          	0xb390b3b
    if ((*memblock + 1) >= memblock_end)
     2b6:	1349                	addi	t1,t1,-14
     2b8:	0000                	unimp
     2ba:	0300052f          	vamoaddei8.v	zero,(zero),v16,v10
     2be:	3a0e                	fld	fs4,224(sp)
    if ((*datablock + 1) >= datablock_end)
     2c0:	390b3b0b          	0x390b3b0b
     2c4:	0013490b          	0x13490b
     2c8:	3000                	fld	fs0,32(s0)
     2ca:	0005                	c.nop	1
    (*memblock)++;
     2cc:	0b3a0803          	lb	a6,179(s4)
    newitem->next      = insert_point->next;
     2d0:	0b390b3b          	0xb390b3b
    to->data16 = from->data16;
     2d4:	1349                	addi	t1,t1,-14
     2d6:	1802                	slli	a6,a6,0x20
    to->idx    = from->idx;
     2d8:	0000                	unimp
     2da:	2e31                	jal	5f6 <core_bench_list+0xd2>
    newitem->next      = insert_point->next;
     2dc:	3101                	jal	fffffedc <RAM_SIZE+0xfffefedc>
     2de:	12011113          	0x12011113
    insert_point->next = newitem;
     2e2:	4006                	0x4006
    newitem->info = *datablock;
     2e4:	9718                	0x9718
     2e6:	1942                	slli	s2,s2,0x30
    (*datablock)++;
     2e8:	1301                	addi	t1,t1,-32
     2ea:	0000                	unimp
}
     2ec:	0532                	slli	a0,a0,0xc
     2ee:	3100                	fld	fs0,32(a0)
    (*datablock)++;
     2f0:	00180213          	addi	tp,a6,1 # 590b51fb <RAM_SIZE+0x590a51fb>
     2f4:	3300                	fld	fs0,32(a4)
     2f6:	0034                	addi	a3,sp,8
    copy_info(newitem->info, info);
     2f8:	1331                	addi	t1,t1,-20
     2fa:	1802                	slli	a6,a6,0x20
    to->data16 = from->data16;
     2fc:	0000                	unimp
     2fe:	2e34                	fld	fa3,88(a2)
    to->idx    = from->idx;
     300:	3f00                	fld	fs0,56(a4)
     302:	3c19                	jal	fffffd18 <RAM_SIZE+0xfffefd18>
}
     304:	6e19                	lui	t3,0x6
     306:	030e                	slli	t1,t1,0x3
        return NULL;
     308:	000e                	c.slli	zero,0x3
     30a:	3500                	fld	fs0,40(a0)
}
     30c:	002e                	c.slli	zero,0xb
     30e:	193c193f 0e030e6e 	0xe030e6e193c193f
{
     316:	0b3a                	slli	s6,s6,0xe
    list_head *ret = item->next;
     318:	0b390b3b          	0xb390b3b
    tmp        = item->info;
     31c:	0000                	unimp
     31e:	0100                	addi	s0,sp,128
    item->info = ret->info;
     320:	0111                	addi	sp,sp,4
     322:	0e25                	addi	t3,t3,9
    item->next = item->next->next;
     324:	0e030b13          	addi	s6,t1,224
    item->info = ret->info;
     328:	17550e1b          	0x17550e1b
    ret->info  = tmp;
     32c:	0111                	addi	sp,sp,4
     32e:	1710                	addi	a2,sp,928
    item->next = item->next->next;
     330:	0000                	unimp
     332:	2402                	fld	fs0,0(sp)
    ret->next  = NULL;
     334:	0b00                	addi	s0,sp,400
     336:	030b3e0b          	0x30b3e0b
}
     33a:	0008                	0x8
    item_removed->info  = item_modified->info;
     33c:	0300                	addi	s0,sp,384
     33e:	0024                	addi	s1,sp,8
    tmp                 = item_removed->info;
     340:	0b3e0b0b          	0xb3e0b0b
    item_removed->next  = item_modified->next;
     344:	00000e03          	lb	t3,0(zero) # 0 <RAM_START_ADDRESS>
    item_removed->info  = item_modified->info;
     348:	1604                	addi	s1,sp,800
     34a:	0300                	addi	s0,sp,384
    item_modified->info = tmp;
     34c:	3a0e                	fld	fs4,224(sp)
     34e:	390b3b0b          	0x390b3b0b
    item_removed->next  = item_modified->next;
     352:	0013490b          	0x13490b
    item_modified->next = item_removed;
     356:	0500                	addi	s0,sp,640
}
     358:	0034                	addi	a3,sp,8
     35a:	0b3a0e03          	lb	t3,179(s4)
    if (info->idx >= 0)
     35e:	0b390b3b          	0xb390b3b
     362:	1349                	addi	t1,t1,-14
        while (list && (list->info->idx != info->idx))
     364:	193c193f 13060000 	0x13060000193c193f
            list = list->next;
     36c:	0301                	addi	t1,t1,0
     36e:	0b0e                	slli	s6,s6,0x3
        while (list && (list->info->idx != info->idx))
     370:	3b0b3a0b          	0x3b0b3a0b
     374:	010b390b          	0x10b390b
     378:	07000013          	li	zero,112
     37c:	000d                	c.nop	3
     37e:	0b3a0e03          	lb	t3,179(s4)
     382:	0b390b3b          	0xb390b3b
        while (list && ((list->info->data16 & 0xff) != info->data16))
     386:	1349                	addi	t1,t1,-14
     388:	0b38                	addi	a4,sp,408
     38a:	0000                	unimp
     38c:	0d08                	addi	a0,sp,656
     38e:	0300                	addi	s0,sp,384
            list = list->next;
     390:	3a08                	fld	fa0,48(a2)
     392:	390b3b0b          	0x390b3b0b
        while (list && ((list->info->data16 & 0xff) != info->data16))
     396:	3813490b          	0x3813490b
     39a:	0900000b          	0x900000b
     39e:	0b0b000f          	0xb0b000f
     3a2:	1349                	addi	t1,t1,-14
     3a4:	0000                	unimp
     3a6:	010a                	slli	sp,sp,0x2
     3a8:	4901                	li	s2,0
     3aa:	00130113          	addi	sp,t1,1
}
     3ae:	0b00                	addi	s0,sp,400
     3b0:	0021                	c.nop	8
     3b2:	1349                	addi	t1,t1,-14
    while (list)
     3b4:	00000b2f          	vamoaddei8.v	zero,(zero),v0,v22,v0.t
    list_head *next = NULL, *tmp;
     3b8:	0f0c                	addi	a1,sp,912
     3ba:	0b00                	addi	s0,sp,400
     3bc:	0d00000b          	0xd00000b
     3c0:	0034                	addi	a3,sp,8
     3c2:	0b3a0e03          	lb	t3,179(s4)
        tmp        = list->next;
     3c6:	0b390b3b          	0xb390b3b
        list->next = next;
     3ca:	1349                	addi	t1,t1,-14
    while (list)
     3cc:	1802                	slli	a6,a6,0x20
     3ce:	0000                	unimp
     3d0:	260e                	fld	fa2,192(sp)
     3d2:	4900                	lw	s0,16(a0)
}
     3d4:	0f000013          	li	zero,240
{
     3d8:	0034                	addi	a3,sp,8
     3da:	0b3a0e03          	lb	t3,179(s4)
     3de:	0b390b3b          	0xb390b3b
     3e2:	1349                	addi	t1,t1,-14
     3e4:	1802193f 2e100000 	0x2e1000001802193f
     3ec:	3f01                	jal	2fc <core_list_insert_new+0x48>
     3ee:	0319                	addi	t1,t1,6
     3f0:	3a0e                	fld	fs4,224(sp)
     3f2:	390b3b0b          	0x390b3b0b
     3f6:	1119270b          	0x1119270b
     3fa:	1201                	addi	tp,tp,-32
     3fc:	4006                	0x4006
     3fe:	9718                	0x9718
     400:	1942                	slli	s2,s2,0x30
     402:	1301                	addi	t1,t1,-32
     404:	0000                	unimp
     406:	3411                	jal	fffffe0a <RAM_SIZE+0xfffefe0a>
     408:	0300                	addi	s0,sp,384
     40a:	3a08                	fld	fa0,48(a2)
     40c:	390b3b0b          	0x390b3b0b
     410:	0213490b          	0x213490b
     414:	12000017          	auipc	zero,0x12000
    insize = 1;
     418:	0034                	addi	a3,sp,8
     41a:	0b3a0e03          	lb	t3,179(s4)
        if (nmerges <= 1) /* allow for nmerges==0, the empty list case */
     41e:	0b390b3b          	0xb390b3b
        while (p)
     422:	1349                	addi	t1,t1,-14
        nmerges = 0; /* count number of merges we do in this pass */
     424:	1702                	slli	a4,a4,0x20
     426:	0000                	unimp
        tail = NULL;
     428:	55010b13          	addi	s6,sp,1360
        list = NULL;
     42c:	00130117          	auipc	sp,0x130
            nmerges++; /* there exists a merge to be done */
     430:	1400                	addi	s0,sp,544
     432:	0111010b          	0x111010b
     436:	0612                	slli	a2,a2,0x4
            psize = 0;
     438:	0000                	unimp
     43a:	2e15                	jal	76e <core_bench_list+0x24a>
                q = q->next;
     43c:	3f01                	jal	34c <core_list_undo_remove+0x10>
     43e:	0319                	addi	t1,t1,6
                psize++;
     440:	3a0e                	fld	fs4,224(sp)
     442:	390b3b0b          	0x390b3b0b
                if (!q)
     446:	3c13490b          	0x3c13490b
            for (i = 0; i < insize; i++)
     44a:	0119                	addi	sp,sp,6
                    list = e;
     44c:	16000013          	li	zero,352
     450:	0018                	0x18
     452:	0000                	unimp
     454:	01828917          	auipc	s2,0x1828
            while (psize > 0 || (qsize > 0 && q))
     458:	1100                	addi	s0,sp,160
     45a:	3101                	jal	5a <_start+0x4a>
                else if (qsize == 0 || !q)
     45c:	18000013          	li	zero,384
     460:	0111010b          	0x111010b
                else if (cmp(p->info, q->info, res) <= 0)
     464:	0612                	slli	a2,a2,0x4
     466:	1301                	addi	t1,t1,-32
     468:	0000                	unimp
     46a:	8919                	andi	a0,a0,6
     46c:	0182                	c.slli64	gp
     46e:	1101                	addi	sp,sp,-32
     470:	3101                	jal	70 <__do_global_dtors_aux+0x14>
     472:	00130113          	addi	sp,t1,1
     476:	1a00                	addi	s0,sp,304
                    qsize--;
     478:	828a                	mv	t0,sp
     47a:	0001                	nop
                    q = q->next;
     47c:	1802                	slli	a6,a6,0x20
     47e:	4291                	li	t0,4
                    qsize--;
     480:	0018                	0x18
     482:	1b00                	addi	s0,sp,432
                if (tail)
     484:	8289                	srli	a3,a3,0x2
     486:	0101                	addi	sp,sp,0
                    tail->next = e;
     488:	0111                	addi	sp,sp,4
     48a:	1331                	addi	t1,t1,-20
                    list = e;
     48c:	0000                	unimp
     48e:	211c                	fld	fa5,0(a0)
            while (psize > 0 || (qsize > 0 && q))
     490:	4900                	lw	s0,16(a0)
     492:	00052f13          	slti	t5,a0,0
     496:	1d00                	addi	s0,sp,688
     498:	012e                	slli	sp,sp,0xb
     49a:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
                    qsize--;
     4a2:	0b39                	addi	s6,s6,14
                    q = q->next;
     4a4:	13491927          	fsh	fs4,306(s2) # 1828586 <RAM_SIZE+0x1818586>
                if (tail)
     4a8:	0111                	addi	sp,sp,4
     4aa:	0612                	slli	a2,a2,0x4
                    list = e;
     4ac:	1840                	addi	s0,sp,52
     4ae:	01194297          	auipc	t0,0x1194
     4b2:	1e000013          	li	zero,480
     4b6:	0005                	c.nop	1
                    psize--;
     4b8:	0b3a0e03          	lb	t3,179(s4)
     4bc:	0b390b3b          	0xb390b3b
                    p = p->next;
     4c0:	1349                	addi	t1,t1,-14
     4c2:	1702                	slli	a4,a4,0x20
     4c4:	0000                	unimp
     4c6:	2e1f 3f00 3c19      	0x3c193f002e1f
        tail->next = NULL;
     4cc:	6e19                	lui	t3,0x6
     4ce:	030e                	slli	t1,t1,0x3
        if (nmerges <= 1) /* allow for nmerges==0, the empty list case */
     4d0:	3a0e                	fld	fs4,224(sp)
     4d2:	390b3b0b          	0x390b3b0b
        insize *= 2;
     4d6:	2000000b          	0x2000000b
        p    = list;
     4da:	002e                	c.slli	zero,0xb
     4dc:	193c193f 0e030e6e 	0xe030e6e193c193f
        tail->next = NULL;
     4e4:	0000                	unimp
     4e6:	0100                	addi	s0,sp,128
}
     4e8:	0111                	addi	sp,sp,4
     4ea:	0e25                	addi	t3,t3,9
     4ec:	0e030b13          	addi	s6,t1,224
     4f0:	01110e1b          	0x1110e1b
     4f4:	0612                	slli	a2,a2,0x4
     4f6:	1710                	addi	a2,sp,928
     4f8:	0000                	unimp
     4fa:	2402                	fld	fs0,0(sp)
     4fc:	0b00                	addi	s0,sp,400
     4fe:	030b3e0b          	0x30b3e0b
     502:	0008                	0x8
     504:	0300                	addi	s0,sp,384
     506:	0024                	addi	s1,sp,8
     508:	0b3e0b0b          	0xb3e0b0b
     50c:	00000e03          	lb	t3,0(zero) # 0 <RAM_START_ADDRESS>
     510:	1604                	addi	s1,sp,800
     512:	0300                	addi	s0,sp,384
     514:	3a0e                	fld	fs4,224(sp)
     516:	390b3b0b          	0x390b3b0b
     51a:	0013490b          	0x13490b
     51e:	0500                	addi	s0,sp,640
     520:	0e030113          	addi	sp,t1,224
{
     524:	0b3a0b0b          	0xb3a0b0b
    ee_s16     find_num = res->seed3;
     528:	0b390b3b          	0xb390b3b
{
     52c:	1301                	addi	t1,t1,-32
     52e:	0000                	unimp
     530:	0d06                	slli	s10,s10,0x1
     532:	0300                	addi	s0,sp,384
     534:	3a08                	fld	fa0,48(a2)
     536:	390b3b0b          	0x390b3b0b
     53a:	3813490b          	0x3813490b
     53e:	0700000b          	0x700000b
     542:	0b0b000f          	0xb0b000f
     546:	1349                	addi	t1,t1,-14
     548:	0000                	unimp
     54a:	0f08                	addi	a0,sp,912
    list_head *list     = res->list;
     54c:	0b00                	addi	s0,sp,400
     54e:	0900000b          	0x900000b
    for (i = 0; i < find_num; i++)
     552:	012e                	slli	sp,sp,0xb
    info.idx = finder_idx;
     554:	0e03193f 053b0b3a 	0x53b0b3a0e03193f
    ee_u16     found = 0, missed = 0;
     55c:	0b39                	addi	s6,s6,14
     55e:	01111927          	fsh	fa7,18(sp) # 13043e <RAM_SIZE+0x12043e>
     562:	0612                	slli	a2,a2,0x4
    ee_u16     retval = 0;
     564:	1840                	addi	s0,sp,52
     566:	01194297          	auipc	t0,0x1194
        info.data16 = (i & 0xff);
     56a:	0a000013          	li	zero,160
    if (info->idx >= 0)
     56e:	0005                	c.nop	1
        while (list && (list->info->idx != info->idx))
     570:	0b3a0803          	lb	a6,179(s4)
     574:	0b39053b          	0xb39053b
     578:	1349                	addi	t1,t1,-14
     57a:	1702                	slli	a4,a4,0x20
            list = list->next;
     57c:	0000                	unimp
     57e:	0300340b          	0x300340b
        while (list && (list->info->idx != info->idx))
     582:	3a08                	fld	fa0,48(a2)
     584:	39053b0b          	0x39053b0b
     588:	0213490b          	0x213490b
     58c:	0c000017          	auipc	zero,0xc000
    list_head *next = NULL, *tmp;
     590:	1755010b          	0x1755010b
     594:	1301                	addi	t1,t1,-32
     596:	0000                	unimp
     598:	890d                	andi	a0,a0,3
     59a:	0182                	c.slli64	gp
     59c:	1100                	addi	s0,sp,160
     59e:	3101                	jal	19e <calc_func+0x7e>
        tmp        = list->next;
     5a0:	0e000013          	li	zero,224
        list->next = next;
     5a4:	8289                	srli	a3,a3,0x2
     5a6:	0101                	addi	sp,sp,0
    while (list)
     5a8:	0111                	addi	sp,sp,4
     5aa:	1331                	addi	t1,t1,-20
        if (this_find == NULL)
     5ac:	0000                	unimp
     5ae:	01828a0f          	0x1828a0f
            if (this_find->info->data16 & 0x1) /* use found value */
     5b2:	0200                	addi	s0,sp,256
            found++;
     5b4:	9118                	0x9118
     5b6:	1842                	slli	a6,a6,0x30
     5b8:	0000                	unimp
     5ba:	8910                	0x8910
            if (this_find->info->data16 & 0x1) /* use found value */
     5bc:	0182                	c.slli64	gp
     5be:	1101                	addi	sp,sp,-32
            found++;
     5c0:	3101                	jal	1c0 <calc_func+0xa0>
     5c2:	00130113          	addi	sp,t1,1
            if (this_find->info->data16 & 0x1) /* use found value */
     5c6:	1100                	addi	s0,sp,160
     5c8:	012e                	slli	sp,sp,0xb
     5ca:	0e03193f 053b0b3a 	0x53b0b3a0e03193f
                retval += (this_find->info->data16 >> 9) & 1;
     5d2:	0b39                	addi	s6,s6,14
     5d4:	0b201927          	fsh	fs2,178(zero) # b2 <frame_dummy+0xe>
     5d8:	1301                	addi	t1,t1,-32
     5da:	0000                	unimp
     5dc:	0512                	slli	a0,a0,0x4
     5de:	0300                	addi	s0,sp,384
            if (this_find->next != NULL)
     5e0:	3a08                	fld	fa0,48(a2)
     5e2:	39053b0b          	0x39053b0b
     5e6:	0013490b          	0x13490b
                this_find->next = finder->next;
     5ea:	1300                	addi	s0,sp,416
     5ec:	0034                	addi	a3,sp,8
     5ee:	0b3a0803          	lb	a6,179(s4)
                finder->next    = list->next;
     5f2:	0b39053b          	0xb39053b
     5f6:	1349                	addi	t1,t1,-14
                list->next      = finder;
     5f8:	0000                	unimp
     5fa:	2e14                	fld	fa3,24(a2)
        if (info.idx >= 0)
     5fc:	3f01                	jal	50c <core_list_mergesort+0x134>
     5fe:	0319                	addi	t1,t1,6
            info.idx++;
     600:	3a0e                	fld	fs4,224(sp)
     602:	390b3b0b          	0x390b3b0b
     606:	4919270b          	0x4919270b
     60a:	010b2013          	slti	zero,s6,16
    for (i = 0; i < find_num; i++)
     60e:	15000013          	li	zero,336
     612:	0005                	c.nop	1
     614:	0b3a0803          	lb	a6,179(s4)
     618:	0b390b3b          	0xb390b3b
    retval += found * 4 - missed;
     61c:	1349                	addi	t1,t1,-14
     61e:	0000                	unimp
     620:	0516                	slli	a0,a0,0x5
     622:	0300                	addi	s0,sp,384
     624:	3a0e                	fld	fs4,224(sp)
     626:	390b3b0b          	0x390b3b0b
     62a:	0013490b          	0x13490b
     62e:	1700                	addi	s0,sp,928
    if (finder_idx > 0)
     630:	0034                	addi	a3,sp,8
     632:	0b3a0803          	lb	a6,179(s4)
        list = core_list_mergesort(list, cmp_complex, res);
     636:	0b390b3b          	0xb390b3b
     63a:	1349                	addi	t1,t1,-14
     63c:	0000                	unimp
     63e:	3418                	fld	fa4,40(s0)
     640:	0300                	addi	s0,sp,384
     642:	3a0e                	fld	fs4,224(sp)
    remover = core_list_remove(list->next);
     644:	390b3b0b          	0x390b3b0b
    list_head *ret = item->next;
     648:	0013490b          	0x13490b
     64c:	1900                	addi	s0,sp,176
     64e:	012e                	slli	sp,sp,0xb
    tmp        = item->info;
     650:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
    item->next = item->next->next;
     658:	0b39                	addi	s6,s6,14
     65a:	13491927          	fsh	fs4,306(s2)
    item->info = ret->info;
     65e:	0111                	addi	sp,sp,4
    ret->info  = tmp;
     660:	0612                	slli	a2,a2,0x4
     662:	1840                	addi	s0,sp,52
    item->next = item->next->next;
     664:	01194297          	auipc	t0,0x1194
    ret->next  = NULL;
     668:	1a000013          	li	zero,416
    if (info->idx >= 0)
     66c:	0005                	c.nop	1
     66e:	0b3a0e03          	lb	t3,179(s4)
        while (list && (list->info->idx != info->idx))
     672:	0b390b3b          	0xb390b3b
     676:	1349                	addi	t1,t1,-14
     678:	1702                	slli	a4,a4,0x20
     67a:	0000                	unimp
            list = list->next;
     67c:	0300051b          	0x300051b
        while (list && (list->info->idx != info->idx))
     680:	3a08                	fld	fa0,48(a2)
     682:	390b3b0b          	0x390b3b0b
        finder = list->next;
     686:	0213490b          	0x213490b
    while (finder)
     68a:	1c000017          	auipc	zero,0x1c000
        retval = crc16(list->info->data16, retval);
     68e:	0034                	addi	a3,sp,8
     690:	0b3a0803          	lb	a6,179(s4)
     694:	0b390b3b          	0xb390b3b
     698:	1349                	addi	t1,t1,-14
     69a:	1702                	slli	a4,a4,0x20
        finder = finder->next;
     69c:	0000                	unimp
     69e:	341d                	jal	c4 <cmp_idx>
        retval = crc16(list->info->data16, retval);
     6a0:	0300                	addi	s0,sp,384
     6a2:	3a0e                	fld	fs4,224(sp)
    while (finder)
     6a4:	390b3b0b          	0x390b3b0b
    remover = core_list_undo_remove(remover, list->next);
     6a8:	0213490b          	0x213490b
    tmp                 = item_removed->info;
     6ac:	1e000017          	auipc	zero,0x1e000
    item_removed->info  = item_modified->info;
     6b0:	011d                	addi	sp,sp,7
     6b2:	1331                	addi	t1,t1,-20
    item_removed->next  = item_modified->next;
     6b4:	0152                	slli	sp,sp,0x14
     6b6:	1755                	addi	a4,a4,-11
    item_removed->info  = item_modified->info;
     6b8:	0b58                	addi	a4,sp,404
     6ba:	0b59                	addi	s6,s6,22
    item_modified->info = tmp;
     6bc:	13010b57          	vminu.vv	v22,v16,v2
    item_removed->next  = item_modified->next;
     6c0:	0000                	unimp
     6c2:	051f 3100 0213      	0x2133100051f
    item_modified->next = item_removed;
     6c8:	20000017          	auipc	zero,0x20000
    list = core_list_mergesort(list, cmp_idx, NULL);
     6cc:	1755010b          	0x1755010b
     6d0:	0000                	unimp
     6d2:	3421                	jal	da <cmp_idx+0x16>
     6d4:	3100                	fld	fs0,32(a0)
     6d6:	00170213          	addi	tp,a4,1 # 5a7ed <RAM_SIZE+0x4a7ed>
    finder = list->next;
     6da:	2200                	fld	fs0,0(a2)
    list = core_list_mergesort(list, cmp_idx, NULL);
     6dc:	0005                	c.nop	1
     6de:	1331                	addi	t1,t1,-20
    while (finder)
     6e0:	0000                	unimp
     6e2:	01828923          	sb	s8,18(t0) # 1194676 <RAM_SIZE+0x1184676>
        retval = crc16(list->info->data16, retval);
     6e6:	1100                	addi	s0,sp,160
     6e8:	9501                	srai	a0,a0,0x20
     6ea:	1942                	slli	s2,s2,0x30
     6ec:	1331                	addi	t1,t1,-20
     6ee:	0000                	unimp
     6f0:	2e24                	fld	fs1,88(a2)
     6f2:	3101                	jal	2f2 <core_list_insert_new+0x3e>
        finder = finder->next;
     6f4:	12011113          	0x12011113
        retval = crc16(list->info->data16, retval);
     6f8:	4006                	0x4006
     6fa:	9718                	0x9718
    while (finder)
     6fc:	1942                	slli	s2,s2,0x30
     6fe:	1301                	addi	t1,t1,-32
}
     700:	0000                	unimp
     702:	0525                	addi	a0,a0,9
     704:	3100                	fld	fs0,32(a0)
     706:	00180213          	addi	tp,a6,1
     70a:	2600                	fld	fs0,8(a2)
     70c:	002e                	c.slli	zero,0xb
     70e:	193c193f 0e030e6e 	0xe030e6e193c193f
     716:	0000                	unimp
     718:	3f002e27          	fsw	fa6,1020(zero) # 3fc <core_list_mergesort+0x24>
     71c:	3c19                	jal	132 <calc_func+0x12>
     71e:	6e19                	lui	t3,0x6
     720:	030e                	slli	t1,t1,0x3
     722:	3a0e                	fld	fs4,224(sp)
     724:	000b3b0b          	0xb3b0b
        while (list && ((list->info->data16 & 0xff) != info->data16))
     728:	2800                	fld	fs0,16(s0)
     72a:	002e                	c.slli	zero,0xb
     72c:	193c193f 0e030e6e 	0xe030e6e193c193f
            list = list->next;
     734:	0b3a                	slli	s6,s6,0xe
     736:	0b390b3b          	0xb390b3b
        while (list && ((list->info->data16 & 0xff) != info->data16))
     73a:	0000                	unimp
        finder = list->next;
     73c:	0100                	addi	s0,sp,128
     73e:	0111                	addi	sp,sp,4
    while (finder)
     740:	0e25                	addi	t3,t3,9
     742:	0e030b13          	addi	s6,t1,224
     746:	01110e1b          	0x1110e1b
        while (list && ((list->info->data16 & 0xff) != info->data16))
     74a:	0612                	slli	a2,a2,0x4
     74c:	1710                	addi	a2,sp,928
     74e:	0000                	unimp
     750:	2402                	fld	fs0,0(sp)
     752:	0b00                	addi	s0,sp,400
            list = list->next;
     754:	030b3e0b          	0x30b3e0b
        while (list && ((list->info->data16 & 0xff) != info->data16))
     758:	000e                	c.slli	zero,0x3
     75a:	0300                	addi	s0,sp,384
     75c:	0024                	addi	s1,sp,8
     75e:	0b3e0b0b          	0xb3e0b0b
     762:	00000803          	lb	a6,0(zero) # 0 <RAM_START_ADDRESS>
     766:	1604                	addi	s1,sp,800
     768:	0300                	addi	s0,sp,384
     76a:	3a0e                	fld	fs4,224(sp)
            retval += (list->next->info->data16 >> 8) & 1;
     76c:	390b3b0b          	0x390b3b0b
            missed++;
     770:	0013490b          	0x13490b
     774:	0500                	addi	s0,sp,640
     776:	0035                	c.nop	13
            retval += (list->next->info->data16 >> 8) & 1;
     778:	1349                	addi	t1,t1,-14
     77a:	0000                	unimp
            missed++;
     77c:	2606                	fld	fa2,64(sp)
     77e:	4900                	lw	s0,16(a0)
            retval += (list->next->info->data16 >> 8) & 1;
     780:	07000013          	li	zero,112
     784:	0034                	addi	a3,sp,8
     786:	0b3a0e03          	lb	t3,179(s4)
     78a:	0b390b3b          	0xb390b3b
     78e:	1349                	addi	t1,t1,-14
     790:	193c193f 13080000 	0x13080000193c193f
    info.idx = finder_idx;
     798:	0301                	addi	t1,t1,0
     79a:	0b0e                	slli	s6,s6,0x3
    for (i = 0; i < find_num; i++)
     79c:	3b0b3a0b          	0x3b0b3a0b
     7a0:	010b390b          	0x10b390b
            retval += (list->next->info->data16 >> 8) & 1;
     7a4:	09000013          	li	zero,144
     7a8:	000d                	c.nop	3
     7aa:	0b3a0e03          	lb	t3,179(s4)
{
     7ae:	0b390b3b          	0xb390b3b
     7b2:	1349                	addi	t1,t1,-14
     7b4:	0b38                	addi	a4,sp,408
     7b6:	0000                	unimp
    ee_u32 size     = (blksize / per_item)
     7b8:	340a                	fld	fs0,160(sp)
     7ba:	0300                	addi	s0,sp,384
{
     7bc:	3a0e                	fld	fs4,224(sp)
     7be:	390b3b0b          	0x390b3b0b
     7c2:	3f13490b          	0x3f13490b
     7c6:	0219                	addi	tp,tp,6
     7c8:	0018                	0x18
     7ca:	0b00                	addi	s0,sp,400
     7cc:	0034                	addi	a3,sp,8
     7ce:	0b3a0e03          	lb	t3,179(s4)
    ee_u32 size     = (blksize / per_item)
     7d2:	0b390b3b          	0xb390b3b
     7d6:	1349                	addi	t1,t1,-14
    list_head *memblock_end  = memblock + size;
     7d8:	1802                	slli	a6,a6,0x20
     7da:	0000                	unimp
     7dc:	340c                	fld	fa1,40(s0)
     7de:	4700                	lw	s0,8(a4)
    list->info->data16 = (ee_s16)0x8080;
     7e0:	3b0b3a13          	sltiu	s4,s6,944
    list->next         = NULL;
     7e4:	020b390b          	0x20b390b
    list->info         = datablock;
     7e8:	0018                	0x18
     7ea:	0d00                	addi	s0,sp,656
    list->info->data16 = (ee_s16)0x8080;
     7ec:	012e                	slli	sp,sp,0xb
     7ee:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
     7f6:	0b39                	addi	s6,s6,14
    list->info->idx    = 0x0000;
     7f8:	01111927          	fsh	fa7,18(sp)
    if ((*memblock + 1) >= memblock_end)
     7fc:	0612                	slli	a2,a2,0x4
     7fe:	1840                	addi	s0,sp,52
    list_data *datablock_end = datablock + size;
     800:	01194297          	auipc	t0,0x1194
    memblock++;
     804:	0e000013          	li	zero,224
    datablock++;
     808:	0005                	c.nop	1
     80a:	0b3a0803          	lb	a6,179(s4)
    if ((*memblock + 1) >= memblock_end)
     80e:	0b390b3b          	0xb390b3b
    if ((*datablock + 1) >= datablock_end)
     812:	1349                	addi	t1,t1,-14
     814:	1802                	slli	a6,a6,0x20
     816:	0000                	unimp
    newitem->info = *datablock;
     818:	0b000f0f          	0xb000f0f
    newitem->next      = insert_point->next;
     81c:	0013490b          	0x13490b
    insert_point->next = newitem;
     820:	1000                	addi	s0,sp,32
     822:	0005                	c.nop	1
    to->idx    = from->idx;
     824:	0b3a0e03          	lb	t3,179(s4)
    to->data16 = from->data16;
     828:	0b390b3b          	0xb390b3b
     82c:	1349                	addi	t1,t1,-14
     82e:	1802                	slli	a6,a6,0x20
    to->idx    = from->idx;
     830:	0000                	unimp
     832:	2e11                	jal	b46 <main+0x15e>
    for (i = 0; i < size; i++)
     834:	3f01                	jal	744 <core_bench_list+0x220>
     836:	0319                	addi	t1,t1,6
            ee_u16 pat = (ee_u16)(i++ ^ seed); /* get a pseudo random number */
     838:	3a0e                	fld	fs4,224(sp)
     83a:	390b3b0b          	0x390b3b0b
    to->idx    = from->idx;
     83e:	4919270b          	0x4919270b
            ee_u16 pat = (ee_u16)(i++ ^ seed); /* get a pseudo random number */
     842:	12011113          	0x12011113
     846:	4006                	0x4006
    to->idx    = from->idx;
     848:	9718                	0x9718
     84a:	1942                	slli	s2,s2,0x30
    if ((*datablock + 1) >= datablock_end)
     84c:	1301                	addi	t1,t1,-32
     84e:	0000                	unimp
     850:	0512                	slli	a0,a0,0x4
     852:	0300                	addi	s0,sp,384
        ee_u16 datpat = ((ee_u16)(seed ^ i) & 0xf);
     854:	3a0e                	fld	fs4,224(sp)
     856:	390b3b0b          	0x390b3b0b
            = (datpat << 3) | (i & 0x7); /* alternate between algorithms */
     85a:	0213490b          	0x213490b
     85e:	13000017          	auipc	zero,0x13000
     862:	0034                	addi	a3,sp,8
        ee_u16 dat
     864:	0b3a0e03          	lb	t3,179(s4)
        info.data16 = (dat << 8) | dat;  /* fill the data with actual data and
     868:	0b390b3b          	0xb390b3b
    if ((*memblock + 1) >= memblock_end)
     86c:	1349                	addi	t1,t1,-14
     86e:	1702                	slli	a4,a4,0x20
    for (i = 0; i < size; i++)
     870:	0000                	unimp
     872:	8914                	0x8914
    if ((*datablock + 1) >= datablock_end)
     874:	0182                	c.slli64	gp
     876:	1100                	addi	s0,sp,160
        info.data16 = (dat << 8) | dat;  /* fill the data with actual data and
     878:	3101                	jal	478 <core_list_mergesort+0xa0>
     87a:	15000013          	li	zero,336
    if ((*memblock + 1) >= memblock_end)
     87e:	011d                	addi	sp,sp,7
    if ((*datablock + 1) >= datablock_end)
     880:	1331                	addi	t1,t1,-20
     882:	0111                	addi	sp,sp,4
    newitem->next      = insert_point->next;
     884:	0612                	slli	a2,a2,0x4
     886:	0b58                	addi	a4,sp,404
    insert_point->next = newitem;
     888:	0b59                	addi	s6,s6,22
     88a:	00000b57          	vadd.vv	v22,v0,v0,v0.t
    newitem->info = *datablock;
     88e:	3416                	fld	fs0,352(sp)
    to->data16 = from->data16;
     890:	3100                	fld	fs0,32(a0)
     892:	000d1c13          	slli	s8,s10,0x0
    to->idx    = from->idx;
     896:	1700                	addi	s0,sp,928
    return newitem;
     898:	012e                	slli	sp,sp,0xb
     89a:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
     8a2:	0b39                	addi	s6,s6,14
    for (i = 0; i < size; i++)
     8a4:	1349                	addi	t1,t1,-14
     8a6:	0b20                	addi	s0,sp,408
    while (finder->next != NULL)
     8a8:	1301                	addi	t1,t1,-32
     8aa:	0000                	unimp
     8ac:	3418                	fld	fa4,40(s0)
     8ae:	0300                	addi	s0,sp,384
        if (i < size / 5) /* first 20% of the list in order */
     8b0:	3a0e                	fld	fs4,224(sp)
     8b2:	390b3b0b          	0x390b3b0b
     8b6:	0013490b          	0x13490b
                                & (((i & 0x07) << 8)
     8ba:	1900                	addi	s0,sp,176
        if (i < size / 5) /* first 20% of the list in order */
     8bc:	012e                	slli	sp,sp,0xb
     8be:	1331                	addi	t1,t1,-20
     8c0:	0111                	addi	sp,sp,4
     8c2:	0612                	slli	a2,a2,0x4
                                & (((i & 0x07) << 8)
     8c4:	1840                	addi	s0,sp,52
     8c6:	01194297          	auipc	t0,0x1194
     8ca:	1a000013          	li	zero,416
    while (finder->next != NULL)
     8ce:	002e                	c.slli	zero,0xb
     8d0:	193c193f 0e030e6e 	0xe030e6e193c193f
     8d8:	0000                	unimp
     8da:	0100                	addi	s0,sp,128
     8dc:	0111                	addi	sp,sp,4
     8de:	0e25                	addi	t3,t3,9
     8e0:	0e030b13          	addi	s6,t1,224
     8e4:	01110e1b          	0x1110e1b
     8e8:	0612                	slli	a2,a2,0x4
     8ea:	1710                	addi	a2,sp,928
     8ec:	0000                	unimp
     8ee:	2402                	fld	fs0,0(sp)
            ee_u16 pat = (ee_u16)(i++ ^ seed); /* get a pseudo random number */
     8f0:	0b00                	addi	s0,sp,400
     8f2:	030b3e0b          	0x30b3e0b
                                & (((i & 0x07) << 8)
     8f6:	0008                	0x8
                                   | pat); /* make sure the mixed items end up
     8f8:	0300                	addi	s0,sp,384
     8fa:	0024                	addi	s1,sp,8
                                & (((i & 0x07) << 8)
     8fc:	0b3e0b0b          	0xb3e0b0b
            finder->info->idx = i++;
     900:	00000e03          	lb	t3,0(zero) # 0 <RAM_START_ADDRESS>
        if (i < size / 5) /* first 20% of the list in order */
     904:	1604                	addi	s1,sp,800
     906:	0300                	addi	s0,sp,384
            finder->info->idx = 0x3fff
     908:	3a0e                	fld	fs4,224(sp)
     90a:	390b3b0b          	0x390b3b0b
    while (finder->next != NULL)
     90e:	0013490b          	0x13490b
     912:	0500                	addi	s0,sp,640
     914:	0104                	addi	s1,sp,128
     916:	0b3e0e03          	lb	t3,179(t3) # 60b3 <__subdf3+0x643>
     91a:	13490b0b          	0x13490b0b
     91e:	0b3a                	slli	s6,s6,0xe
     920:	0b390b3b          	0xb390b3b
     924:	1301                	addi	t1,t1,-32
     926:	0000                	unimp
}
     928:	2806                	fld	fa6,64(sp)
     92a:	0300                	addi	s0,sp,384
     92c:	1c0e                	slli	s8,s8,0x23
     92e:	0700000b          	0x700000b
     932:	0101                	addi	sp,sp,0
     934:	1349                	addi	t1,t1,-14
     936:	1301                	addi	t1,t1,-32
    list = core_list_mergesort(list, cmp_idx, NULL);
     938:	0000                	unimp
     93a:	2108                	fld	fa0,0(a0)
}
     93c:	4900                	lw	s0,16(a0)
     93e:	000b2f13          	slti	t5,s6,0
    list = core_list_mergesort(list, cmp_idx, NULL);
     942:	0900                	addi	s0,sp,144
     944:	0b0b000f          	0xb0b000f
}
     948:	1349                	addi	t1,t1,-14
     94a:	0000                	unimp
    list = core_list_mergesort(list, cmp_idx, NULL);
     94c:	340a                	fld	fs0,160(sp)
     94e:	0300                	addi	s0,sp,384
    memblock++;
     950:	3a0e                	fld	fs4,224(sp)
     952:	390b3b0b          	0x390b3b0b
    datablock++;
     956:	0213490b          	0x213490b
     95a:	0018                	0x18
     95c:	0b00                	addi	s0,sp,400
     95e:	012e                	slli	sp,sp,0xb
{
     960:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
    ee_u32        iterations = res->iterations;
     968:	0b39                	addi	s6,s6,14
     96a:	13491927          	fsh	fs4,306(s2)
{
     96e:	0111                	addi	sp,sp,4
     970:	0612                	slli	a2,a2,0x4
     972:	1840                	addi	s0,sp,52
     974:	01194297          	auipc	t0,0x1194
    res->crc                 = 0;
     978:	0c000013          	li	zero,192
    res->crcmatrix           = 0;
     97c:	0005                	c.nop	1
     97e:	0b3a0e03          	lb	t3,179(s4)
    for (i = 0; i < iterations; i++)
     982:	0b390b3b          	0xb390b3b
     986:	1349                	addi	t1,t1,-14
     988:	1702                	slli	a4,a4,0x20
     98a:	0000                	unimp
        crc      = core_bench_list(res, 1);
     98c:	050d                	addi	a0,a0,3
     98e:	0300                	addi	s0,sp,384
     990:	3a0e                	fld	fs4,224(sp)
     992:	390b3b0b          	0x390b3b0b
     996:	0213490b          	0x213490b
        res->crc = crcu16(crc, res->crc);
     99a:	0018                	0x18
     99c:	0e00                	addi	s0,sp,784
     99e:	0034                	addi	a3,sp,8
        crc      = core_bench_list(res, -1);
     9a0:	0b3a0803          	lb	a6,179(s4)
        res->crc = crcu16(crc, res->crc);
     9a4:	0b390b3b          	0xb390b3b
        crc      = core_bench_list(res, -1);
     9a8:	1349                	addi	t1,t1,-14
     9aa:	1702                	slli	a4,a4,0x20
     9ac:	0000                	unimp
     9ae:	0300340f          	0x300340f
        res->crc = crcu16(crc, res->crc);
     9b2:	3a0e                	fld	fs4,224(sp)
     9b4:	390b3b0b          	0x390b3b0b
     9b8:	0213490b          	0x213490b
        if (i == 0)
     9bc:	10000017          	auipc	zero,0x10000
            res->crclist = res->crc;
     9c0:	011d                	addi	sp,sp,7
     9c2:	1331                	addi	t1,t1,-20
    for (i = 0; i < iterations; i++)
     9c4:	0152                	slli	sp,sp,0x14
     9c6:	1755                	addi	a4,a4,-11
     9c8:	0b58                	addi	a4,sp,404
     9ca:	0b59                	addi	s6,s6,22
}
     9cc:	13010b57          	vminu.vv	v22,v16,v2
     9d0:	0000                	unimp
     9d2:	0511                	addi	a0,a0,4
     9d4:	3100                	fld	fs0,32(a0)
     9d6:	00170213          	addi	tp,a4,1
     9da:	1200                	addi	s0,sp,288
     9dc:	1755010b          	0x1755010b
     9e0:	0000                	unimp
     9e2:	31003413          	sltiu	s0,zero,784
     9e6:	00170213          	addi	tp,a4,1
{
     9ea:	1400                	addi	s0,sp,544
     9ec:	011d                	addi	sp,sp,7
     9ee:	1331                	addi	t1,t1,-20
     9f0:	0152                	slli	sp,sp,0x14
     9f2:	1755                	addi	a4,a4,-11
     9f4:	0b58                	addi	a4,sp,404
     9f6:	0559                	addi	a0,a0,22
     9f8:	13010b57          	vminu.vv	v22,v16,v2
     9fc:	0000                	unimp
     9fe:	1d15                	addi	s10,s10,-27
     a00:	3101                	jal	600 <core_bench_list+0xdc>
     a02:	55015213          	fsri	tp,sp,a0,0x10
     a06:	590b5817          	auipc	a6,0x590b5
     a0a:	5705                	li	a4,-31
     a0c:	1600000b          	0x1600000b
     a10:	0005                	c.nop	1
     a12:	1331                	addi	t1,t1,-20
     a14:	0000                	unimp
     a16:	03012e17          	auipc	t3,0x3012
     a1a:	3a0e                	fld	fs4,224(sp)
    int   argc = 0;
     a1c:	390b3b0b          	0x390b3b0b
{
     a20:	4919270b          	0x4919270b
    int   argc = 0;
     a24:	010b2013          	slti	zero,s6,16
     a28:	18000013          	li	zero,384
     a2c:	0005                	c.nop	1
     a2e:	0b3a0803          	lb	a6,179(s4)
     a32:	0b390b3b          	0xb390b3b
     a36:	1349                	addi	t1,t1,-14
     a38:	0000                	unimp
     a3a:	3419                	jal	440 <core_list_mergesort+0x68>
     a3c:	0300                	addi	s0,sp,384
     a3e:	3a0e                	fld	fs4,224(sp)
     a40:	390b3b0b          	0x390b3b0b
     a44:	0013490b          	0x13490b
     a48:	1a00                	addi	s0,sp,304
     a4a:	012e                	slli	sp,sp,0xb
	for(int i = 0; i < 12; i++) { 
     a4c:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
    int   argc = 0;
     a54:	0b39                	addi	s6,s6,14
     a56:	01111927          	fsh	fa7,18(sp)
     a5a:	0612                	slli	a2,a2,0x4
	  uart_send_char(hello[i]);
     a5c:	1840                	addi	s0,sp,52
     a5e:	01194297          	auipc	t0,0x1194
     a62:	1b000013          	li	zero,432
     a66:	0005                	c.nop	1
	for(int i = 0; i < 12; i++) { 
     a68:	0b3a0803          	lb	a6,179(s4)
	ee_printf("Hello World\n");
     a6c:	0b390b3b          	0xb390b3b
     a70:	1349                	addi	t1,t1,-14
     a72:	1702                	slli	a4,a4,0x20
    portable_init(&(results[0].port), &argc, argv);
     a74:	0000                	unimp
     a76:	341c                	fld	fa5,40(s0)
     a78:	0300                	addi	s0,sp,384
     a7a:	3a08                	fld	fa0,48(a2)
     a7c:	390b3b0b          	0x390b3b0b
     a80:	0013490b          	0x13490b
     a84:	1d00                	addi	s0,sp,688
     a86:	8289                	srli	a3,a3,0x2
     a88:	0101                	addi	sp,sp,0
     a8a:	0111                	addi	sp,sp,4
     a8c:	4295                	li	t0,5
     a8e:	3119                	jal	694 <core_bench_list+0x170>
     a90:	00130113          	addi	sp,t1,1
     a94:	1e00                	addi	s0,sp,816
     a96:	828a                	mv	t0,sp
     a98:	0001                	nop
     a9a:	1802                	slli	a6,a6,0x20
     a9c:	4291                	li	t0,4
     a9e:	0018                	0x18
     aa0:	1f00                	addi	s0,sp,944
     aa2:	8289                	srli	a3,a3,0x2
     aa4:	0101                	addi	sp,sp,0
     aa6:	0111                	addi	sp,sp,4
    results[0].seed1      = get_seed(1);
     aa8:	4295                	li	t0,5
     aaa:	3119                	jal	6b0 <core_bench_list+0x18c>
     aac:	20000013          	li	zero,512
     ab0:	0034                	addi	a3,sp,8
     ab2:	0b3a0803          	lb	a6,179(s4)
     ab6:	0b390b3b          	0xb390b3b
     aba:	1349                	addi	t1,t1,-14
     abc:	1802                	slli	a6,a6,0x20
     abe:	0000                	unimp
     ac0:	0b21                	addi	s6,s6,8
     ac2:	5501                	li	a0,-32
     ac4:	00130117          	auipc	sp,0x130
    results[0].seed2      = get_seed(2);
     ac8:	2200                	fld	fs0,0(a2)
     aca:	8289                	srli	a3,a3,0x2
    results[0].seed1      = get_seed(1);
     acc:	0101                	addi	sp,sp,0
     ace:	0111                	addi	sp,sp,4
    results[0].seed2      = get_seed(2);
     ad0:	1331                	addi	t1,t1,-20
     ad2:	0000                	unimp
     ad4:	01828923          	sb	s8,18(t0) # 1194a70 <RAM_SIZE+0x1184a70>
     ad8:	1101                	addi	sp,sp,-32
     ada:	3101                	jal	6da <core_bench_list+0x1b6>
    results[0].seed3      = get_seed(3);
     adc:	00130113          	addi	sp,t1,1
    results[0].seed2      = get_seed(2);
     ae0:	2400                	fld	fs0,8(s0)
     ae2:	8289                	srli	a3,a3,0x2
    results[0].seed3      = get_seed(3);
     ae4:	0001                	nop
     ae6:	0111                	addi	sp,sp,4
     ae8:	1331                	addi	t1,t1,-20
     aea:	0000                	unimp
     aec:	2e25                	jal	e24 <main+0x43c>
     aee:	3f00                	fld	fs0,56(a4)
    results[0].iterations = get_seed_32(4);
     af0:	3c19                	jal	506 <core_list_mergesort+0x12e>
     af2:	6e19                	lui	t3,0x6
    results[0].seed3      = get_seed(3);
     af4:	030e                	slli	t1,t1,0x3
     af6:	3a0e                	fld	fs4,224(sp)
    results[0].iterations = get_seed_32(4);
     af8:	000b3b0b          	0xb3b0b
     afc:	2600                	fld	fs0,8(a2)
     afe:	002e                	c.slli	zero,0xb
    results[0].execs = get_seed_32(5);
     b00:	193c193f 0e030e6e 	0xe030e6e193c193f
     b08:	0b3a                	slli	s6,s6,0xe
     b0a:	0b390b3b          	0xb390b3b
    if (results[0].execs == 0)
     b0e:	0000                	unimp
    results[0].execs = get_seed_32(5);
     b10:	0100                	addi	s0,sp,128
     b12:	0111                	addi	sp,sp,4
    if ((results[0].seed1 == 0) && (results[0].seed2 == 0)
     b14:	0e25                	addi	t3,t3,9
     b16:	0e030b13          	addi	s6,t1,224
     b1a:	01110e1b          	0x1110e1b
     b1e:	0612                	slli	a2,a2,0x4
     b20:	1710                	addi	a2,sp,928
     b22:	0000                	unimp
     b24:	2402                	fld	fs0,0(sp)
     b26:	0b00                	addi	s0,sp,400
     b28:	030b3e0b          	0x30b3e0b
     b2c:	0008                	0x8
     b2e:	0300                	addi	s0,sp,384
     b30:	0024                	addi	s1,sp,8
     b32:	0b3e0b0b          	0xb3e0b0b
     b36:	00000e03          	lb	t3,0(zero) # 0 <RAM_START_ADDRESS>
        && (results[0].seed3 == 0))
     b3a:	1604                	addi	s1,sp,800
     b3c:	0300                	addi	s0,sp,384
     b3e:	3a0e                	fld	fs4,224(sp)
     b40:	390b3b0b          	0x390b3b0b
        if ((1 << (ee_u32)i) & results[0].execs)
     b44:	0013490b          	0x13490b
    results[i].memblock[0] = stack_memblock + i * TOTAL_DATA_SIZE;
     b48:	0500                	addi	s0,sp,640
     b4a:	0035                	c.nop	13
     b4c:	1349                	addi	t1,t1,-14
     b4e:	0000                	unimp
     b50:	3406                	fld	fs0,96(sp)
     b52:	0300                	addi	s0,sp,384
     b54:	3a0e                	fld	fs4,224(sp)
     b56:	390b3b0b          	0x390b3b0b
     b5a:	3f13490b          	0x3f13490b
     b5e:	3c19                	jal	574 <core_bench_list+0x50>
     b60:	0019                	c.nop	6
     b62:	0700                	addi	s0,sp,896
        if ((1 << (ee_u32)i) & results[0].execs)
     b64:	012e                	slli	sp,sp,0xb
     b66:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
            num_algorithms++;
     b6e:	0b39                	addi	s6,s6,14
    results[i].memblock[0] = stack_memblock + i * TOTAL_DATA_SIZE;
     b70:	13491927          	fsh	fs4,306(s2)
     b74:	0111                	addi	sp,sp,4
     b76:	0612                	slli	a2,a2,0x4
    results[i].err         = 0;
     b78:	1840                	addi	s0,sp,52
     b7a:	01194297          	auipc	t0,0x1194
        if ((1 << (ee_u32)i) & results[0].execs)
     b7e:	08000013          	li	zero,128
     b82:	0034                	addi	a3,sp,8
            num_algorithms++;
     b84:	0b3a0e03          	lb	t3,179(s4)
        if ((1 << (ee_u32)i) & results[0].execs)
     b88:	0b390b3b          	0xb390b3b
            num_algorithms++;
     b8c:	1349                	addi	t1,t1,-14
     b8e:	0b1c                	addi	a5,sp,400
     b90:	0000                	unimp
     b92:	2e09                	jal	ea4 <main+0x4bc>
     b94:	3f01                	jal	aa4 <main+0xbc>
     b96:	0319                	addi	t1,t1,6
        results[i].size = results[i].size / num_algorithms;
     b98:	3a0e                	fld	fs4,224(sp)
     b9a:	390b3b0b          	0x390b3b0b
     b9e:	4919270b          	0x4919270b
     ba2:	010b2013          	slti	zero,s6,16
     ba6:	0a000013          	li	zero,160
     baa:	0005                	c.nop	1
     bac:	0b3a0e03          	lb	t3,179(s4)
     bb0:	0b390b3b          	0xb390b3b
     bb4:	1349                	addi	t1,t1,-14
     bb6:	0000                	unimp
     bb8:	0300050b          	0x300050b
     bbc:	3a08                	fld	fa0,48(a2)
     bbe:	390b3b0b          	0x390b3b0b
    for (i = 0; i < NUM_ALGORITHMS; i++)
     bc2:	0013490b          	0x13490b
        results[i].size = results[i].size / num_algorithms;
     bc6:	0c00                	addi	s0,sp,528
    ee_u16       i, j = 0, num_algorithms = 0;
     bc8:	0005                	c.nop	1
     bca:	0b3a0e03          	lb	t3,179(s4)
        if ((1 << (ee_u32)i) & results[0].execs)
     bce:	0b390b3b          	0xb390b3b
    for (i = 0; i < NUM_ALGORITHMS; i++)
     bd2:	1349                	addi	t1,t1,-14
        if ((1 << (ee_u32)i) & results[0].execs)
     bd4:	1702                	slli	a4,a4,0x20
     bd6:	0000                	unimp
     bd8:	050d                	addi	a0,a0,3
     bda:	0300                	addi	s0,sp,384
    for (i = 0; i < NUM_ALGORITHMS; i++)
     bdc:	3a08                	fld	fa0,48(a2)
     bde:	390b3b0b          	0x390b3b0b
        if ((1 << (ee_u32)i) & results[0].execs)
     be2:	0213490b          	0x213490b
    for (i = 0; i < NUM_ALGORITHMS; i++)
     be6:	0e000017          	auipc	zero,0xe000
     bea:	011d                	addi	sp,sp,7
        if (results[i].execs & ID_LIST)
     bec:	1331                	addi	t1,t1,-20
     bee:	0152                	slli	sp,sp,0x14
        if (results[i].execs & ID_MATRIX)
     bf0:	1755                	addi	a4,a4,-11
     bf2:	0b58                	addi	a4,sp,404
        if (results[i].execs & ID_STATE)
     bf4:	0b59                	addi	s6,s6,22
     bf6:	13010b57          	vminu.vv	v22,v16,v2
     bfa:	0000                	unimp
            core_init_state(
     bfc:	3100050f          	0x3100050f
     c00:	00170213          	addi	tp,a4,1
     c04:	1000                	addi	s0,sp,32
     c06:	011d                	addi	sp,sp,7
                results[0].size, results[i].seed1, results[i].memblock[3]);
     c08:	1331                	addi	t1,t1,-20
     c0a:	0152                	slli	sp,sp,0x14
            core_init_state(
     c0c:	1755                	addi	a4,a4,-11
     c0e:	0b58                	addi	a4,sp,404
     c10:	0b59                	addi	s6,s6,22
     c12:	00000b57          	vadd.vv	v22,v0,v0,v0.t
     c16:	0b11                	addi	s6,s6,4
     c18:	5501                	li	a0,-32
     c1a:	12000017          	auipc	zero,0x12000
     c1e:	0034                	addi	a3,sp,8
     c20:	1331                	addi	t1,t1,-20
     c22:	1702                	slli	a4,a4,0x20
     c24:	0000                	unimp
     c26:	31011d13          	0x31011d13
    if (results[0].iterations == 0)
     c2a:	12011113          	0x12011113
     c2e:	5806                	lw	a6,96(sp)
        results[0].iterations = 1;
     c30:	570b590b          	0x570b590b
     c34:	1400000b          	0x1400000b
            iterate(&results[0]);
     c38:	0034                	addi	a3,sp,8
     c3a:	0b3a0803          	lb	a6,179(s4)
            results[0].iterations *= 10;
     c3e:	0b390b3b          	0xb390b3b
            iterate(&results[0]);
     c42:	1349                	addi	t1,t1,-14
     c44:	0000                	unimp
     c46:	3415                	jal	66a <core_bench_list+0x146>
     c48:	0300                	addi	s0,sp,384
     c4a:	3a0e                	fld	fs4,224(sp)
     c4c:	390b3b0b          	0x390b3b0b
     c50:	0013490b          	0x13490b
            results[0].iterations *= 10;
     c54:	1600                	addi	s0,sp,800
     c56:	0034                	addi	a3,sp,8
     c58:	0b3a0e03          	lb	t3,179(s4)
     c5c:	0b390b3b          	0xb390b3b
     c60:	1349                	addi	t1,t1,-14
     c62:	1702                	slli	a4,a4,0x20
     c64:	0000                	unimp
     c66:	31012e17          	auipc	t3,0x31012
            start_time();
     c6a:	12011113          	0x12011113
            iterate(&results[0]);
     c6e:	4006                	0x4006
     c70:	9718                	0x9718
     c72:	1942                	slli	s2,s2,0x30
            stop_time();
     c74:	1301                	addi	t1,t1,-32
     c76:	0000                	unimp
            secs_passed = time_in_secs(get_time());
     c78:	2e18                	fld	fa4,24(a2)
     c7a:	3101                	jal	87a <HEAP_SIZE+0x7a>
     c7c:	12011113          	0x12011113
        while (secs_passed < (secs_ret)1)
     c80:	4006                	0x4006
     c82:	9718                	0x9718
        results[0].iterations *= 1 + 10 / divisor;
     c84:	1942                	slli	s2,s2,0x30
     c86:	0000                	unimp
     c88:	0100                	addi	s0,sp,128
     c8a:	0111                	addi	sp,sp,4
     c8c:	0e25                	addi	t3,t3,9
     c8e:	0e030b13          	addi	s6,t1,224
     c92:	01110e1b          	0x1110e1b
     c96:	0612                	slli	a2,a2,0x4
     c98:	1710                	addi	a2,sp,928
     c9a:	0000                	unimp
     c9c:	2402                	fld	fs0,0(sp)
     c9e:	0b00                	addi	s0,sp,400
    start_time();
     ca0:	030b3e0b          	0x30b3e0b
    iterate(&results[0]);
     ca4:	000e                	c.slli	zero,0x3
     ca6:	0300                	addi	s0,sp,384
     ca8:	0024                	addi	s1,sp,8
     caa:	0b3e0b0b          	0xb3e0b0b
     cae:	00000803          	lb	a6,0(zero) # 0 <RAM_START_ADDRESS>
     cb2:	0f04                	addi	s1,sp,912
     cb4:	0b00                	addi	s0,sp,400
     cb6:	0013490b          	0x13490b
     cba:	0500                	addi	s0,sp,640
     cbc:	0101                	addi	sp,sp,0
     cbe:	1349                	addi	t1,t1,-14
     cc0:	1301                	addi	t1,t1,-32
     cc2:	0000                	unimp
    stop_time();
     cc4:	2106                	fld	ft2,64(sp)
     cc6:	4900                	lw	s0,16(a0)
    total_time = get_time();
     cc8:	000b2f13          	slti	t5,s6,0
    seedcrc = crc16(results[0].seed1, seedcrc);
     ccc:	0700                	addi	s0,sp,896
     cce:	0034                	addi	a3,sp,8
     cd0:	0b3a0e03          	lb	t3,179(s4)
     cd4:	0b390b3b          	0xb390b3b
     cd8:	1349                	addi	t1,t1,-14
     cda:	1802                	slli	a6,a6,0x20
    total_time = get_time();
     cdc:	0000                	unimp
     cde:	2e08                	fld	fa0,24(a2)
    seedcrc = crc16(results[0].seed1, seedcrc);
     ce0:	3f01                	jal	bf0 <main+0x208>
     ce2:	0319                	addi	t1,t1,6
     ce4:	3a0e                	fld	fs4,224(sp)
     ce6:	390b3b0b          	0x390b3b0b
     cea:	4919270b          	0x4919270b
     cee:	12011113          	0x12011113
    seedcrc = crc16(results[0].seed2, seedcrc);
     cf2:	4006                	0x4006
    seedcrc = crc16(results[0].seed1, seedcrc);
     cf4:	9718                	0x9718
     cf6:	1942                	slli	s2,s2,0x30
    seedcrc = crc16(results[0].seed2, seedcrc);
     cf8:	1301                	addi	t1,t1,-32
     cfa:	0000                	unimp
     cfc:	0509                	addi	a0,a0,2
     cfe:	0300                	addi	s0,sp,384
    seedcrc = crc16(results[0].seed3, seedcrc);
     d00:	3a08                	fld	fa0,48(a2)
     d02:	390b3b0b          	0x390b3b0b
    seedcrc = crc16(results[0].seed2, seedcrc);
     d06:	0213490b          	0x213490b
    seedcrc = crc16(results[0].seed3, seedcrc);
     d0a:	0a000017          	auipc	zero,0xa000
     d0e:	0005                	c.nop	1
     d10:	0b3a0e03          	lb	t3,179(s4)
    seedcrc = crc16(results[0].size, seedcrc);
     d14:	0b390b3b          	0xb390b3b
     d18:	1349                	addi	t1,t1,-14
     d1a:	1702                	slli	a4,a4,0x20
    switch (seedcrc)
     d1c:	0000                	unimp
     d1e:	0182890b          	0x182890b
     d22:	1101                	addi	sp,sp,-32
    seedcrc = crc16(results[0].size, seedcrc);
     d24:	9501                	srai	a0,a0,0x20
     d26:	1942                	slli	s2,s2,0x30
    switch (seedcrc)
     d28:	1331                	addi	t1,t1,-20
     d2a:	0000                	unimp
     d2c:	8a0c                	0x8a0c
     d2e:	0182                	c.slli64	gp
     d30:	0200                	addi	s0,sp,256
     d32:	9118                	0x9118
     d34:	1842                	slli	a6,a6,0x30
     d36:	0000                	unimp
     d38:	2e0d                	jal	106a <main+0x682>
     d3a:	0301                	addi	t1,t1,0
     d3c:	3a08                	fld	fa0,48(a2)
     d3e:	390b3b0b          	0x390b3b0b
     d42:	4919270b          	0x4919270b
     d46:	12011113          	0x12011113
            ee_printf("Profile generation run parameters for coremark.\n");
     d4a:	4006                	0x4006
     d4c:	9718                	0x9718
     d4e:	1942                	slli	s2,s2,0x30
     d50:	1301                	addi	t1,t1,-32
     d52:	0000                	unimp
            known_id = 2;
     d54:	340e                	fld	fs0,224(sp)
     d56:	0300                	addi	s0,sp,384
        for (i = 0; i < default_num_contexts; i++)
     d58:	3a08                	fld	fa0,48(a2)
     d5a:	390b3b0b          	0x390b3b0b
     d5e:	0213490b          	0x213490b
     d62:	0f000017          	auipc	zero,0xf000
     d66:	0034                	addi	a3,sp,8
            results[i].err = 0;
     d68:	0b3a0803          	lb	a6,179(s4)
     d6c:	0b390b3b          	0xb390b3b
     d70:	1349                	addi	t1,t1,-14
     d72:	1802                	slli	a6,a6,0x20
                && (results[i].crclist != list_known_crc[known_id]))
     d74:	0000                	unimp
     d76:	8910                	0x8910
            results[i].err = 0;
     d78:	0182                	c.slli64	gp
     d7a:	1100                	addi	s0,sp,160
     d7c:	3101                	jal	97c <iterate+0x1c>
     d7e:	11000013          	li	zero,272
                && (results[i].crclist != list_known_crc[known_id]))
     d82:	8289                	srli	a3,a3,0x2
            results[i].err = 0;
     d84:	0101                	addi	sp,sp,0
     d86:	0111                	addi	sp,sp,4
                && (results[i].crclist != list_known_crc[known_id]))
     d88:	1331                	addi	t1,t1,-20
     d8a:	1301                	addi	t1,t1,-32
            results[i].err = 0;
     d8c:	0000                	unimp
     d8e:	2e12                	fld	ft8,256(sp)
                && (results[i].crclist != list_known_crc[known_id]))
     d90:	3f00                	fld	fs0,56(a4)
     d92:	3c19                	jal	7a8 <core_bench_list+0x284>
                ee_printf("[%u]ERROR! list crc 0x%04x - should be 0x%04x\n",
     d94:	6e19                	lui	t3,0x6
     d96:	030e                	slli	t1,t1,0x3
                ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n",
     d98:	000e                	c.slli	zero,0x3
     d9a:	1300                	addi	s0,sp,416
                ee_printf("[%u]ERROR! state crc 0x%04x - should be 0x%04x\n",
     d9c:	002e                	c.slli	zero,0xb
     d9e:	193c193f 0e030e6e 	0xe030e6e193c193f
            total_errors += results[i].err;
     da6:	0b3a                	slli	s6,s6,0xe
     da8:	0b390b3b          	0xb390b3b
     dac:	0000                	unimp
     dae:	0100                	addi	s0,sp,128
     db0:	0111                	addi	sp,sp,4
     db2:	0e25                	addi	t3,t3,9
     db4:	0e030b13          	addi	s6,t1,224
        for (i = 0; i < default_num_contexts; i++)
     db8:	01110e1b          	0x1110e1b
     dbc:	0612                	slli	a2,a2,0x4
     dbe:	1710                	addi	a2,sp,928
            total_errors += results[i].err;
     dc0:	0000                	unimp
     dc2:	2402                	fld	fs0,0(sp)
        for (i = 0; i < default_num_contexts; i++)
     dc4:	0b00                	addi	s0,sp,400
     dc6:	030b3e0b          	0x30b3e0b
            total_errors += results[i].err;
     dca:	0008                	0x8
     dcc:	0300                	addi	s0,sp,384
     dce:	0016                	c.slli	zero,0x5
        for (i = 0; i < default_num_contexts; i++)
     dd0:	0b3a0e03          	lb	t3,179(s4)
            total_errors += results[i].err;
     dd4:	0b390b3b          	0xb390b3b
     dd8:	1349                	addi	t1,t1,-14
     dda:	0000                	unimp
        for (i = 0; i < default_num_contexts; i++)
     ddc:	2404                	fld	fs1,8(s0)
     dde:	0b00                	addi	s0,sp,400
            results[i].err = 0;
     de0:	030b3e0b          	0x30b3e0b
     de4:	000e                	c.slli	zero,0x3
     de6:	0500                	addi	s0,sp,640
     de8:	0b0b000f          	0xb0b000f
     dec:	00000e03          	lb	t3,0(zero) # 0 <RAM_START_ADDRESS>
     df0:	3406                	fld	fs0,96(sp)
     df2:	0300                	addi	s0,sp,384
     df4:	3a0e                	fld	fs4,224(sp)
     df6:	390b3b0b          	0x390b3b0b
     dfa:	0013490b          	0x13490b
            if ((results[i].execs & ID_LIST)
     dfe:	0700                	addi	s0,sp,896
            results[i].err = 0;
     e00:	0b0b000f          	0xb0b000f
            if ((results[i].execs & ID_LIST)
     e04:	1349                	addi	t1,t1,-14
     e06:	0000                	unimp
     e08:	2608                	fld	fa0,8(a2)
     e0a:	4900                	lw	s0,16(a0)
                && (results[i].crclist != list_known_crc[known_id]))
     e0c:	09000013          	li	zero,144
     e10:	012e                	slli	sp,sp,0xb
     e12:	0e03193f 053b0b3a 	0x53b0b3a0e03193f
                ee_printf("[%u]ERROR! list crc 0x%04x - should be 0x%04x\n",
     e1a:	0b39                	addi	s6,s6,14
     e1c:	13491927          	fsh	fs4,306(s2)
     e20:	0111                	addi	sp,sp,4
     e22:	0612                	slli	a2,a2,0x4
                results[i].err++;
     e24:	1840                	addi	s0,sp,52
     e26:	01194297          	auipc	t0,0x1194
     e2a:	0a000013          	li	zero,160
     e2e:	0005                	c.nop	1
            if ((results[i].execs & ID_MATRIX)
     e30:	0b3a0803          	lb	a6,179(s4)
     e34:	0b39053b          	0xb39053b
     e38:	1349                	addi	t1,t1,-14
     e3a:	1702                	slli	a4,a4,0x20
     e3c:	0000                	unimp
     e3e:	0000180b          	0x180b
     e42:	0c00                	addi	s0,sp,528
     e44:	0034                	addi	a3,sp,8
     e46:	0b3a0803          	lb	a6,179(s4)
     e4a:	0b39053b          	0xb39053b
     e4e:	1349                	addi	t1,t1,-14
     e50:	1802                	slli	a6,a6,0x20
     e52:	0000                	unimp
                && (results[i].crcmatrix != matrix_known_crc[known_id]))
     e54:	340d                	jal	876 <HEAP_SIZE+0x76>
     e56:	0300                	addi	s0,sp,384
     e58:	3a08                	fld	fa0,48(a2)
     e5a:	39053b0b          	0x39053b0b
     e5e:	0213490b          	0x213490b
                ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n",
     e62:	0e000017          	auipc	zero,0xe000
     e66:	0034                	addi	a3,sp,8
     e68:	0b3a0e03          	lb	t3,179(s4)
                results[i].err++;
     e6c:	0b39053b          	0xb39053b
            if ((results[i].execs & ID_STATE)
     e70:	1349                	addi	t1,t1,-14
     e72:	1802                	slli	a6,a6,0x20
                results[i].err++;
     e74:	0000                	unimp
     e76:	31011d0f          	0x31011d0f
     e7a:	55015213          	fsri	tp,sp,a0,0x10
                && (results[i].crcstate != state_known_crc[known_id]))
     e7e:	590b5817          	auipc	a6,0x590b5
            if ((results[i].execs & ID_STATE)
     e82:	5705                	li	a4,-31
                && (results[i].crcstate != state_known_crc[known_id]))
     e84:	0013010b          	0x13010b
            if ((results[i].execs & ID_STATE)
     e88:	1000                	addi	s0,sp,32
     e8a:	0005                	c.nop	1
                && (results[i].crcstate != state_known_crc[known_id]))
     e8c:	1331                	addi	t1,t1,-20
     e8e:	1702                	slli	a4,a4,0x20
     e90:	0000                	unimp
     e92:	0b11                	addi	s6,s6,4
     e94:	5501                	li	a0,-32
     e96:	12000017          	auipc	zero,0x12000
     e9a:	0034                	addi	a3,sp,8
     e9c:	1331                	addi	t1,t1,-20
     e9e:	1702                	slli	a4,a4,0x20
     ea0:	0000                	unimp
     ea2:	31003413          	sltiu	s0,zero,784
     ea6:	14000013          	li	zero,320
            total_errors += results[i].err;
     eaa:	000a                	c.slli	zero,0x2
     eac:	1331                	addi	t1,t1,-20
     eae:	0000                	unimp
            results[i].list = core_list_init(
     eb0:	0515                	addi	a0,a0,5
     eb2:	3100                	fld	fs0,32(a0)
     eb4:	16000013          	li	zero,352
     eb8:	0034                	addi	a3,sp,8
     eba:	1331                	addi	t1,t1,-20
     ebc:	1802                	slli	a6,a6,0x20
     ebe:	0000                	unimp
     ec0:	01828917          	auipc	s2,0x1828
     ec4:	1100                	addi	s0,sp,160
     ec6:	3101                	jal	ac6 <main+0xde>
     ec8:	18000013          	li	zero,384
     ecc:	8289                	srli	a3,a3,0x2
     ece:	0101                	addi	sp,sp,0
     ed0:	0111                	addi	sp,sp,4
     ed2:	1331                	addi	t1,t1,-20
     ed4:	1301                	addi	t1,t1,-32
     ed6:	0000                	unimp
     ed8:	8a19                	andi	a2,a2,6
     eda:	0182                	c.slli64	gp
        if (results[i].execs & ID_MATRIX)
     edc:	0200                	addi	s0,sp,256
     ede:	9118                	0x9118
            results[i].list = core_list_init(
     ee0:	1842                	slli	a6,a6,0x30
     ee2:	0000                	unimp
     ee4:	1d1a                	slli	s10,s10,0x26
     ee6:	3101                	jal	ae6 <main+0xfe>
        if (results[i].execs & ID_MATRIX)
     ee8:	12011113          	0x12011113
                                 | (((ee_s32)results[i].seed2) << 16),
     eec:	5806                	lw	a6,96(sp)
     eee:	5705590b          	0x5705590b
     ef2:	0013010b          	0x13010b
     ef6:	1b00                	addi	s0,sp,432
     ef8:	8289                	srli	a3,a3,0x2
     efa:	0101                	addi	sp,sp,0
            core_init_matrix(results[0].size,
     efc:	0111                	addi	sp,sp,4
     efe:	1331                	addi	t1,t1,-20
                                 | (((ee_s32)results[i].seed2) << 16),
     f00:	0000                	unimp
     f02:	1d1c                	addi	a5,sp,688
     f04:	3101                	jal	b04 <main+0x11c>
     f06:	55015213          	fsri	tp,sp,a0,0x10
                             (ee_s32)results[i].seed1
     f0a:	590b5817          	auipc	a6,0x590b5
                                 | (((ee_s32)results[i].seed2) << 16),
     f0e:	5705                	li	a4,-31
            core_init_matrix(results[0].size,
     f10:	1d00000b          	0x1d00000b
                             (ee_s32)results[i].seed1
     f14:	0101                	addi	sp,sp,0
     f16:	1349                	addi	t1,t1,-14
            core_init_matrix(results[0].size,
     f18:	1301                	addi	t1,t1,-32
     f1a:	0000                	unimp
                                 | (((ee_s32)results[i].seed2) << 16),
     f1c:	211e                	fld	ft2,448(sp)
     f1e:	4900                	lw	s0,16(a0)
            core_init_matrix(results[0].size,
     f20:	00052f13          	slti	t5,a0,0
     f24:	1f00                	addi	s0,sp,944
     f26:	012e                	slli	sp,sp,0xb
     f28:	0e03193f 053b0b3a 	0x53b0b3a0e03193f
        if (results[i].execs & ID_STATE)
     f30:	0b39                	addi	s6,s6,14
     f32:	0b201927          	fsh	fs2,178(zero) # b2 <frame_dummy+0xe>
                ee_printf("[%u]ERROR! state crc 0x%04x - should be 0x%04x\n",
     f36:	1301                	addi	t1,t1,-32
     f38:	0000                	unimp
     f3a:	0520                	addi	s0,sp,648
     f3c:	0300                	addi	s0,sp,384
     f3e:	3a08                	fld	fa0,48(a2)
                results[i].err++;
     f40:	39053b0b          	0x39053b0b
     f44:	0013490b          	0x13490b
     f48:	2100                	fld	fs0,0(a0)
     f4a:	0034                	addi	a3,sp,8
     f4c:	0b3a0e03          	lb	t3,179(s4)
     f50:	0b39053b          	0xb39053b
     f54:	1349                	addi	t1,t1,-14
     f56:	0000                	unimp
    switch (seedcrc)
     f58:	2e22                	fld	ft8,8(sp)
     f5a:	0301                	addi	t1,t1,0
     f5c:	3a0e                	fld	fs4,224(sp)
     f5e:	39053b0b          	0x39053b0b
     f62:	4919270b          	0x4919270b
     f66:	010b2013          	slti	zero,s6,16
     f6a:	23000013          	li	zero,560
     f6e:	0005                	c.nop	1
            ee_printf("2K performance run parameters for coremark.\n");
     f70:	0b3a0e03          	lb	t3,179(s4)
     f74:	0b39053b          	0xb39053b
     f78:	1349                	addi	t1,t1,-14
     f7a:	0000                	unimp
            known_id = 3;
     f7c:	3424                	fld	fs1,104(s0)
     f7e:	0300                	addi	s0,sp,384
     f80:	3a08                	fld	fa0,48(a2)
     f82:	39053b0b          	0x39053b0b
        for (i = 0; i < default_num_contexts; i++)
     f86:	0013490b          	0x13490b
    total_errors += check_data_types();
     f8a:	2500                	fld	fs0,8(a0)
    ee_printf("CoreMark Size    : %lu\n", (long unsigned)results[0].size);
     f8c:	000a                	c.slli	zero,0x2
     f8e:	0b3a0e03          	lb	t3,179(s4)
    total_errors += check_data_types();
     f92:	0b39053b          	0xb39053b
    ee_printf("CoreMark Size    : %lu\n", (long unsigned)results[0].size);
     f96:	0000                	unimp
     f98:	2e26                	fld	ft8,72(sp)
     f9a:	0301                	addi	t1,t1,0
     f9c:	3a0e                	fld	fs4,224(sp)
     f9e:	390b3b0b          	0x390b3b0b
    ee_printf("Total ticks      : %lu\n", (long unsigned)total_time);
     fa2:	4919270b          	0x4919270b
     fa6:	010b2013          	slti	zero,s6,16
     faa:	27000013          	li	zero,624
     fae:	0005                	c.nop	1
    ee_printf("Total time (secs): %d\n", time_in_secs(total_time));
     fb0:	0b3a0803          	lb	a6,179(s4)
     fb4:	0b390b3b          	0xb390b3b
     fb8:	1349                	addi	t1,t1,-14
     fba:	0000                	unimp
     fbc:	0528                	addi	a0,sp,648
     fbe:	0300                	addi	s0,sp,384
     fc0:	3a0e                	fld	fs4,224(sp)
     fc2:	390b3b0b          	0x390b3b0b
     fc6:	0013490b          	0x13490b
    total_errors += check_data_types();
     fca:	2900                	fld	fs0,16(a0)
    if (time_in_secs(total_time) > 0)
     fcc:	0034                	addi	a3,sp,8
     fce:	0b3a0803          	lb	a6,179(s4)
    total_errors += check_data_types();
     fd2:	0b390b3b          	0xb390b3b
    if (time_in_secs(total_time) > 0)
     fd6:	1349                	addi	t1,t1,-14
     fd8:	0000                	unimp
     fda:	212a                	fld	ft2,136(sp)
    if (time_in_secs(total_time) < 10)
     fdc:	4900                	lw	s0,16(a0)
     fde:	000b2f13          	slti	t5,s6,0
     fe2:	2b00                	fld	fs0,16(a4)
     fe4:	012e                	slli	sp,sp,0xb
     fe6:	0b3a0e03          	lb	t3,179(s4)
     fea:	0b390b3b          	0xb390b3b
    ee_printf("Iterations       : %lu\n",
     fee:	13491927          	fsh	fs4,306(s2) # 1828ff2 <RAM_SIZE+0x1818ff2>
     ff2:	0111                	addi	sp,sp,4
        total_errors++;
     ff4:	0612                	slli	a2,a2,0x4
     ff6:	1840                	addi	s0,sp,52
     ff8:	01194297          	auipc	t0,0x1194
    ee_printf("Iterations       : %lu\n",
     ffc:	2c000013          	li	zero,704
    1000:	0005                	c.nop	1
    1002:	0b3a0803          	lb	a6,179(s4)
    1006:	0b390b3b          	0xb390b3b
    100a:	1349                	addi	t1,t1,-14
    100c:	1702                	slli	a4,a4,0x20
    100e:	0000                	unimp
    ee_printf("Compiler version : %s\n", COMPILER_VERSION);
    1010:	052d                	addi	a0,a0,11
    1012:	0300                	addi	s0,sp,384
    1014:	3a0e                	fld	fs4,224(sp)
    1016:	390b3b0b          	0x390b3b0b
    101a:	0213490b          	0x213490b
    101e:	2e000017          	auipc	zero,0x2e000
    1022:	0034                	addi	a3,sp,8
    ee_printf("Compiler flags   : %s\n", COMPILER_FLAGS);
    1024:	0b3a0803          	lb	a6,179(s4)
    1028:	0b390b3b          	0xb390b3b
    102c:	1349                	addi	t1,t1,-14
    102e:	1702                	slli	a4,a4,0x20
    1030:	0000                	unimp
    1032:	0300342f          	0x300342f
    1036:	3a0e                	fld	fs4,224(sp)
    ee_printf("Memory location  : %s\n", MEM_LOCATION);
    1038:	390b3b0b          	0x390b3b0b
    103c:	0213490b          	0x213490b
    1040:	30000017          	auipc	zero,0x30000
    1044:	0034                	addi	a3,sp,8
    1046:	0b3a0803          	lb	a6,179(s4)
    104a:	0b390b3b          	0xb390b3b
    ee_printf("seedcrc          : 0x%04x\n", seedcrc);
    104e:	1349                	addi	t1,t1,-14
    1050:	1802                	slli	a6,a6,0x20
    1052:	0000                	unimp
    1054:	2e31                	jal	1370 <main+0x988>
    1056:	3101                	jal	c56 <main+0x26e>
    1058:	12011113          	0x12011113
    if (results[0].execs & ID_LIST)
    105c:	4006                	0x4006
    105e:	9718                	0x9718
    1060:	1942                	slli	s2,s2,0x30
    1062:	1301                	addi	t1,t1,-32
    1064:	0000                	unimp
    1066:	0532                	slli	a0,a0,0xc
        for (i = 0; i < default_num_contexts; i++)
    1068:	3100                	fld	fs0,32(a0)
    106a:	00180213          	addi	tp,a6,1 # 590b5f0b <RAM_SIZE+0x590a5f0b>
    106e:	3300                	fld	fs0,32(a4)
            ee_printf("[%d]crclist       : 0x%04x\n", i, results[i].crclist);
    1070:	0034                	addi	a3,sp,8
    1072:	1331                	addi	t1,t1,-20
    1074:	0d1c                	addi	a5,sp,656
    1076:	0000                	unimp
    1078:	2e34                	fld	fa3,88(a2)
    107a:	3f00                	fld	fs0,56(a4)
    107c:	3c19                	jal	a92 <main+0xaa>
    107e:	6e19                	lui	t3,0x6
    1080:	030e                	slli	t1,t1,0x3
    1082:	000e                	c.slli	zero,0x3
    1084:	3500                	fld	fs0,40(a0)
    1086:	002e                	c.slli	zero,0xb
        for (i = 0; i < default_num_contexts; i++)
    1088:	193c193f 0e030e6e 	0xe030e6e193c193f
            ee_printf("[%d]crclist       : 0x%04x\n", i, results[i].crclist);
    1090:	0b3a                	slli	s6,s6,0xe
    1092:	00000b3b          	0xb3b
    1096:	0100                	addi	s0,sp,128
    1098:	0111                	addi	sp,sp,4
    109a:	0e25                	addi	t3,t3,9
    109c:	0e030b13          	addi	s6,t1,224
    10a0:	01110e1b          	0x1110e1b
    10a4:	0612                	slli	a2,a2,0x4
    10a6:	1710                	addi	a2,sp,928
    10a8:	0000                	unimp
    10aa:	2402                	fld	fs0,0(sp)
    10ac:	0b00                	addi	s0,sp,400
    10ae:	030b3e0b          	0x30b3e0b
    10b2:	000e                	c.slli	zero,0x3
    10b4:	0300                	addi	s0,sp,384
    10b6:	0024                	addi	s1,sp,8
    10b8:	0b3e0b0b          	0xb3e0b0b
    10bc:	00000803          	lb	a6,0(zero) # 0 <RAM_START_ADDRESS>
        for (i = 0; i < default_num_contexts; i++)
    10c0:	1604                	addi	s1,sp,800
    10c2:	0300                	addi	s0,sp,384
    10c4:	3a0e                	fld	fs4,224(sp)
    10c6:	390b3b0b          	0x390b3b0b
    10ca:	0013490b          	0x13490b
    10ce:	0500                	addi	s0,sp,640
    10d0:	0b0b0113          	addi	sp,s6,176 # fffe00b0 <RAM_SIZE+0xfffd00b0>
    10d4:	0b3a                	slli	s6,s6,0xe
    10d6:	0b390b3b          	0xb390b3b
    if (results[0].execs & ID_MATRIX)
    10da:	1301                	addi	t1,t1,-32
    10dc:	0000                	unimp
    10de:	0d06                	slli	s10,s10,0x1
        for (i = 0; i < default_num_contexts; i++)
    10e0:	0300                	addi	s0,sp,384
    10e2:	3a0e                	fld	fs4,224(sp)
    10e4:	390b3b0b          	0x390b3b0b
            ee_printf("[%d]crcmatrix     : 0x%04x\n", i, results[i].crcmatrix);
    10e8:	0b13490b          	0xb13490b
    10ec:	0c0b0d0b          	0xc0b0d0b
    10f0:	000b380b          	0xb380b
    10f4:	0700                	addi	s0,sp,896
    10f6:	000d                	c.nop	3
    10f8:	0b3a0803          	lb	a6,179(s4)
    10fc:	0b390b3b          	0xb390b3b
        for (i = 0; i < default_num_contexts; i++)
    1100:	1349                	addi	t1,t1,-14
    1102:	0b0d0b0b          	0xb0d0b0b
    1106:	0b0c                	addi	a1,sp,400
            ee_printf("[%d]crcmatrix     : 0x%04x\n", i, results[i].crcmatrix);
    1108:	0b38                	addi	a4,sp,408
    110a:	0000                	unimp
    110c:	1708                	addi	a0,sp,928
    110e:	0301                	addi	t1,t1,0
    1110:	0b0e                	slli	s6,s6,0x3
    1112:	3b0b3a0b          	0x3b0b3a0b
    1116:	010b390b          	0x10b390b
    111a:	09000013          	li	zero,144
    111e:	000d                	c.nop	3
    1120:	0b3a0803          	lb	a6,179(s4)
    1124:	0b390b3b          	0xb390b3b
    1128:	1349                	addi	t1,t1,-14
    112a:	0000                	unimp
    112c:	0d0a                	slli	s10,s10,0x2
    112e:	0300                	addi	s0,sp,384
    1130:	3a0e                	fld	fs4,224(sp)
    1132:	390b3b0b          	0x390b3b0b
    1136:	0013490b          	0x13490b
        for (i = 0; i < default_num_contexts; i++)
    113a:	0b00                	addi	s0,sp,400
    113c:	012e                	slli	sp,sp,0xb
    113e:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
    1146:	0b39                	addi	s6,s6,14
    1148:	13491927          	fsh	fs4,306(s2)
    114c:	0111                	addi	sp,sp,4
    114e:	0612                	slli	a2,a2,0x4
    if (results[0].execs & ID_STATE)
    1150:	1840                	addi	s0,sp,52
    1152:	01194297          	auipc	t0,0x1194
    1156:	0c000013          	li	zero,192
        for (i = 0; i < default_num_contexts; i++)
    115a:	0005                	c.nop	1
    115c:	0b3a0803          	lb	a6,179(s4)
            ee_printf("[%d]crcstate      : 0x%04x\n", i, results[i].crcstate);
    1160:	0b390b3b          	0xb390b3b
    1164:	1349                	addi	t1,t1,-14
    1166:	1702                	slli	a4,a4,0x20
    1168:	0000                	unimp
    116a:	340d                	jal	b8c <main+0x1a4>
    116c:	0300                	addi	s0,sp,384
    116e:	3a0e                	fld	fs4,224(sp)
    1170:	390b3b0b          	0x390b3b0b
    1174:	0213490b          	0x213490b
        for (i = 0; i < default_num_contexts; i++)
    1178:	0e000017          	auipc	zero,0xe000
    117c:	0034                	addi	a3,sp,8
    117e:	0b3a0e03          	lb	t3,179(s4)
            ee_printf("[%d]crcstate      : 0x%04x\n", i, results[i].crcstate);
    1182:	0b390b3b          	0xb390b3b
    1186:	1349                	addi	t1,t1,-14
    1188:	0b1c                	addi	a5,sp,400
    118a:	0000                	unimp
    118c:	0300340f          	0x300340f
    1190:	3a08                	fld	fa0,48(a2)
    1192:	390b3b0b          	0x390b3b0b
    1196:	0013490b          	0x13490b
    119a:	1000                	addi	s0,sp,32
    119c:	0034                	addi	a3,sp,8
    119e:	0b3a0803          	lb	a6,179(s4)
    11a2:	0b390b3b          	0xb390b3b
    11a6:	1349                	addi	t1,t1,-14
    11a8:	1702                	slli	a4,a4,0x20
    11aa:	0000                	unimp
    11ac:	0b11                	addi	s6,s6,4
    11ae:	5501                	li	a0,-32
        for (i = 0; i < default_num_contexts; i++)
    11b0:	00130117          	auipc	sp,0x130
    11b4:	1200                	addi	s0,sp,288
    11b6:	0034                	addi	a3,sp,8
    11b8:	0b3a0e03          	lb	t3,179(s4)
    11bc:	0b390b3b          	0xb390b3b
    11c0:	1349                	addi	t1,t1,-14
    11c2:	0000                	unimp
        ee_printf("[%d]crcfinal      : 0x%04x\n", i, results[i].crc);
    11c4:	03000a13          	li	s4,48
    for (i = 0; i < default_num_contexts; i++)
    11c8:	3a0e                	fld	fs4,224(sp)
    11ca:	390b3b0b          	0x390b3b0b
        ee_printf("[%d]crcfinal      : 0x%04x\n", i, results[i].crc);
    11ce:	0001110b          	0x1110b
    11d2:	1400                	addi	s0,sp,544
    11d4:	0111010b          	0x111010b
    11d8:	0612                	slli	a2,a2,0x4
    11da:	1301                	addi	t1,t1,-32
    for (i = 0; i < default_num_contexts; i++)
    11dc:	0000                	unimp
    11de:	0b15                	addi	s6,s6,5
    11e0:	5501                	li	a0,-32
    11e2:	16000017          	auipc	zero,0x16000
        ee_printf("[%d]crcfinal      : 0x%04x\n", i, results[i].crc);
    11e6:	8289                	srli	a3,a3,0x2
    11e8:	0001                	nop
    11ea:	0111                	addi	sp,sp,4
    for (i = 0; i < default_num_contexts; i++)
    11ec:	1331                	addi	t1,t1,-20
    11ee:	0000                	unimp
        ee_printf("[%d]crcfinal      : 0x%04x\n", i, results[i].crc);
    11f0:	01010b17          	auipc	s6,0x1010
    11f4:	18000013          	li	zero,384
    11f8:	0000010b          	0x10b
    11fc:	2e19                	jal	1512 <core_init_matrix+0x162>
    11fe:	3f00                	fld	fs0,56(a4)
    1200:	3c19                	jal	c16 <main+0x22e>
    1202:	6e19                	lui	t3,0x6
    1204:	030e                	slli	t1,t1,0x3
    1206:	000e                	c.slli	zero,0x3
    1208:	0000                	unimp
    120a:	1101                	addi	sp,sp,-32
    120c:	2501                	jal	180c <matrix_mul_vect+0xc4>
    120e:	130e                	slli	t1,t1,0x23
    1210:	1b0e030b          	0x1b0e030b
    for (i = 0; i < default_num_contexts; i++)
    1214:	110e                	slli	sp,sp,0x23
    1216:	1201                	addi	tp,tp,-32
    1218:	1006                	c.slli	zero,0x21
    121a:	02000017          	auipc	zero,0x2000
    121e:	0024                	addi	s1,sp,8
    1220:	0b3e0b0b          	0xb3e0b0b
    1224:	00000e03          	lb	t3,0(zero) # 0 <RAM_START_ADDRESS>
    if (total_errors == 0)
    1228:	0b002403          	lw	s0,176(zero) # b0 <frame_dummy+0xc>
    if (total_errors > 0)
    122c:	030b3e0b          	0x30b3e0b
        ee_printf("Errors detected\n");
    1230:	0008                	0x8
    1232:	0400                	addi	s0,sp,512
    1234:	0016                	c.slli	zero,0x5
    1236:	0b3a0e03          	lb	t3,179(s4)
    123a:	0b39053b          	0xb39053b
    portable_fini(&(results[0].port));
    123e:	1349                	addi	t1,t1,-14
    1240:	0000                	unimp
    1242:	1605                	addi	a2,a2,-31
}
    1244:	0300                	addi	s0,sp,384
    1246:	3a0e                	fld	fs4,224(sp)
    1248:	390b3b0b          	0x390b3b0b
    124c:	0013490b          	0x13490b
    1250:	0600                	addi	s0,sp,768
    1252:	0b0b0113          	addi	sp,s6,176 # 10112a0 <RAM_SIZE+0x10012a0>
    1256:	0b3a                	slli	s6,s6,0xe
    1258:	0b390b3b          	0xb390b3b
    125c:	1301                	addi	t1,t1,-32
    125e:	0000                	unimp
    1260:	03000d07          	vle8ff.v	v26,(zero)
    1264:	3a0e                	fld	fs4,224(sp)
    1266:	390b3b0b          	0x390b3b0b
    126a:	0b13490b          	0xb13490b
    126e:	0c0b0d0b          	0xc0b0d0b
    1272:	000b380b          	0xb380b
    1276:	0800                	addi	s0,sp,16
    1278:	000d                	c.nop	3
    127a:	0b3a0803          	lb	a6,179(s4)
    127e:	0b390b3b          	0xb390b3b
                    = (char *)(results[ctx].memblock[0]) + results[0].size * j;
    1282:	1349                	addi	t1,t1,-14
    1284:	0b0d0b0b          	0xb0d0b0b
    1288:	0b0c                	addi	a1,sp,400
    128a:	0b38                	addi	a4,sp,408
            j++;
    128c:	0000                	unimp
    128e:	1709                	addi	a4,a4,-30
                    = (char *)(results[ctx].memblock[0]) + results[0].size * j;
    1290:	0301                	addi	t1,t1,0
    1292:	0b0e                	slli	s6,s6,0x3
            j++;
    1294:	3b0b3a0b          	0x3b0b3a0b
                    = (char *)(results[ctx].memblock[0]) + results[0].size * j;
    1298:	010b390b          	0x10b390b
            j++;
    129c:	0a000013          	li	zero,160
    12a0:	000d                	c.nop	3
    12a2:	0b3a0803          	lb	a6,179(s4)
    if ((results[0].seed1 == 1) && (results[0].seed2 == 0)
    12a6:	0b390b3b          	0xb390b3b
    12aa:	1349                	addi	t1,t1,-14
        && (results[0].seed3 == 0))
    12ac:	0000                	unimp
    12ae:	03000d0b          	0x3000d0b
    12b2:	3a0e                	fld	fs4,224(sp)
    12b4:	390b3b0b          	0x390b3b0b
        results[0].seed1 = 0x3415;
    12b8:	0013490b          	0x13490b
    12bc:	0c00                	addi	s0,sp,528
    12be:	012e                	slli	sp,sp,0xb
    12c0:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
        results[0].seed3 = 0x66;
    12c8:	0b39                	addi	s6,s6,14
    12ca:	13491927          	fsh	fs4,306(s2)
    12ce:	0111                	addi	sp,sp,4
    12d0:	0612                	slli	a2,a2,0x4
    12d2:	1840                	addi	s0,sp,52
        results[0].execs = ALL_ALGORITHMS_MASK;
    12d4:	01194297          	auipc	t0,0x1194
    12d8:	0d000013          	li	zero,208
    12dc:	0005                	c.nop	1
    12de:	0b3a0803          	lb	a6,179(s4)
        ee_printf(
    12e2:	0b390b3b          	0xb390b3b
    12e6:	1349                	addi	t1,t1,-14
    12e8:	1702                	slli	a4,a4,0x20
    12ea:	0000                	unimp
    12ec:	340e                	fld	fs0,224(sp)
    12ee:	0300                	addi	s0,sp,384
        results[0].seed3 = 0x66;
    12f0:	3a0e                	fld	fs4,224(sp)
    12f2:	390b3b0b          	0x390b3b0b
    12f6:	0213490b          	0x213490b
    12fa:	0f000017          	auipc	zero,0xf000
    if ((results[0].seed1 == 1) && (results[0].seed2 == 0)
    12fe:	0034                	addi	a3,sp,8
        ee_printf(
    1300:	0b3a0e03          	lb	t3,179(s4)
    1304:	0b390b3b          	0xb390b3b
    1308:	1349                	addi	t1,t1,-14
    130a:	0b1c                	addi	a5,sp,400
    if (total_errors < 0)
    130c:	0000                	unimp
    130e:	3410                	fld	fa2,40(s0)
        ee_printf(
    1310:	0300                	addi	s0,sp,384
    1312:	3a08                	fld	fa0,48(a2)
    1314:	390b3b0b          	0x390b3b0b
    1318:	0213490b          	0x213490b
        total_errors++;
    131c:	11000017          	auipc	zero,0x11000
    1320:	0034                	addi	a3,sp,8
    1322:	0b3a0803          	lb	a6,179(s4)
                  default_num_contexts * results[0].iterations
    1326:	0b390b3b          	0xb390b3b
    132a:	1349                	addi	t1,t1,-14
    132c:	0000                	unimp
    132e:	0b12                	slli	s6,s6,0x4
    1330:	5501                	li	a0,-32
    1332:	00130117          	auipc	sp,0x130
                      / time_in_secs(total_time));
    1336:	1300                	addi	s0,sp,416
    1338:	0034                	addi	a3,sp,8
    133a:	0b3a0e03          	lb	t3,179(s4)
    133e:	0b390b3b          	0xb390b3b
        ee_printf("Iterations/Sec   : %d\n",
    1342:	1349                	addi	t1,t1,-14
    1344:	0000                	unimp
    1346:	8914                	0x8914
    1348:	0182                	c.slli64	gp
    134a:	1100                	addi	s0,sp,160
    134c:	3101                	jal	f4c <main+0x564>
    134e:	15000013          	li	zero,336
    1352:	0111010b          	0x111010b
    1356:	0612                	slli	a2,a2,0x4
    1358:	1301                	addi	t1,t1,-32
    135a:	0000                	unimp
    if (results[0].execs & ID_STATE)
    135c:	3416                	fld	fs0,352(sp)
    135e:	0300                	addi	s0,sp,384
    1360:	3a0e                	fld	fs4,224(sp)
    1362:	390b3b0b          	0x390b3b0b
    1366:	0213490b          	0x213490b
            ee_printf("6k validation run parameters for coremark.\n");
    136a:	0018                	0x18
    136c:	1700                	addi	s0,sp,928
    136e:	1755010b          	0x1755010b
    1372:	0000                	unimp
            known_id = 1;
    1374:	0b18                	addi	a4,sp,400
    1376:	0101                	addi	sp,sp,0
    1378:	19000013          	li	zero,400
            ee_printf("6k performance run parameters for coremark.\n");
    137c:	0000010b          	0x10b
    1380:	2e1a                	fld	ft8,384(sp)
    1382:	3f00                	fld	fs0,56(a4)
    1384:	3c19                	jal	d9a <main+0x3b2>
    1386:	6e19                	lui	t3,0x6
            known_id = 0;
    1388:	030e                	slli	t1,t1,0x3
    138a:	000e                	c.slli	zero,0x3
    138c:	0000                	unimp
    138e:	1101                	addi	sp,sp,-32
            ee_printf("2K validation run parameters for coremark.\n");
    1390:	2501                	jal	1990 <matrix_mul_matrix_bitextract+0x48>
    1392:	130e                	slli	t1,t1,0x23
    1394:	1b0e030b          	0x1b0e030b
    1398:	110e                	slli	sp,sp,0x23
    139a:	1201                	addi	tp,tp,-32
            known_id = 4;
    139c:	1006                	c.slli	zero,0x21
    139e:	02000017          	auipc	zero,0x2000
    13a2:	0024                	addi	s1,sp,8
    switch (seedcrc)
    13a4:	0b3e0b0b          	0xb3e0b0b
    13a8:	00000e03          	lb	t3,0(zero) # 0 <RAM_START_ADDRESS>
    13ac:	03001603          	lh	a2,48(zero) # 30 <_start+0x20>
{
    13b0:	3a0e                	fld	fs4,224(sp)
    13b2:	390b3b0b          	0x390b3b0b
    13b6:	0013490b          	0x13490b
    13ba:	0400                	addi	s0,sp,512
    13bc:	0024                	addi	s1,sp,8
    13be:	0b3e0b0b          	0xb3e0b0b
    13c2:	00000803          	lb	a6,0(zero) # 0 <RAM_START_ADDRESS>
    13c6:	1305                	addi	t1,t1,-31
    13c8:	0b01                	addi	s6,s6,0
    13ca:	3b0b3a0b          	0x3b0b3a0b
    13ce:	010b390b          	0x10b390b
    13d2:	06000013          	li	zero,96
    13d6:	000d                	c.nop	3
    13d8:	0b3a0e03          	lb	t3,179(s4)
    13dc:	0b390b3b          	0xb390b3b
    13e0:	1349                	addi	t1,t1,-14
    13e2:	0b0d0b0b          	0xb0d0b0b
    13e6:	0b0c                	addi	a1,sp,400
    13e8:	0b38                	addi	a4,sp,408
    13ea:	0000                	unimp
    13ec:	03000d07          	vle8ff.v	v26,(zero)
        seed = 1;
    13f0:	3a08                	fld	fa0,48(a2)
    13f2:	390b3b0b          	0x390b3b0b
    if (seed == 0)
    13f6:	0b13490b          	0xb13490b
    13fa:	0c0b0d0b          	0xc0b0d0b
    A = (MATDAT *)align_mem(memblk);
    13fe:	000b380b          	0xb380b
    1402:	0800                	addi	s0,sp,16
    1404:	0e030117          	auipc	sp,0xe030
    1408:	0b3a0b0b          	0xb3a0b0b
    while (j < blksize)
    140c:	0b390b3b          	0xb390b3b
    1410:	1301                	addi	t1,t1,-32
    1412:	0000                	unimp
        i++;
    1414:	0d09                	addi	s10,s10,2
    1416:	0300                	addi	s0,sp,384
    1418:	3a08                	fld	fa0,48(a2)
    141a:	390b3b0b          	0x390b3b0b
        j = i * i * 2 * 4;
    141e:	0013490b          	0x13490b
    1422:	0a00                	addi	s0,sp,272
    1424:	000d                	c.nop	3
    1426:	0b3a0e03          	lb	t3,179(s4)
    142a:	0b390b3b          	0xb390b3b
    while (j < blksize)
    142e:	1349                	addi	t1,t1,-14
    B = A + N * N;
    1430:	0000                	unimp
    1432:	3f012e0b          	0x3f012e0b
    1436:	0319                	addi	t1,t1,6
    1438:	3a0e                	fld	fs4,224(sp)
    143a:	390b3b0b          	0x390b3b0b
    143e:	4919270b          	0x4919270b
    1442:	12011113          	0x12011113
    1446:	4006                	0x4006
    p->N = N;
    1448:	9718                	0x9718
    144a:	1942                	slli	s2,s2,0x30
    B = A + N * N;
    144c:	1301                	addi	t1,t1,-32
    144e:	0000                	unimp
    for (i = 0; i < N; i++)
    1450:	050c                	addi	a1,sp,640
    1452:	0300                	addi	s0,sp,384
    1454:	3a08                	fld	fa0,48(a2)
    1456:	390b3b0b          	0x390b3b0b
            seed         = ((order * seed) % 65536);
    145a:	0213490b          	0x213490b
    B = A + N * N;
    145e:	0d000017          	auipc	zero,0xd000
    1462:	0034                	addi	a3,sp,8
    1464:	0b3a0e03          	lb	t3,179(s4)
    1468:	0b390b3b          	0xb390b3b
            seed         = ((order * seed) % 65536);
    146c:	1349                	addi	t1,t1,-14
    146e:	0b1c                	addi	a5,sp,400
            order++;
    1470:	0000                	unimp
    1472:	340e                	fld	fs0,224(sp)
        for (j = 0; j < N; j++)
    1474:	0300                	addi	s0,sp,384
    1476:	3a08                	fld	fa0,48(a2)
    1478:	390b3b0b          	0x390b3b0b
        seed = 1;
    147c:	0013490b          	0x13490b
        for (j = 0; j < N; j++)
    1480:	0f00                	addi	s0,sp,912
    1482:	0034                	addi	a3,sp,8
            seed         = ((order * seed) % 65536);
    1484:	0b3a0803          	lb	a6,179(s4)
    1488:	0b390b3b          	0xb390b3b
    148c:	1349                	addi	t1,t1,-14
    148e:	1802                	slli	a6,a6,0x20
    1490:	0000                	unimp
    1492:	3410                	fld	fa2,40(s0)
    1494:	0300                	addi	s0,sp,384
    1496:	3a0e                	fld	fs4,224(sp)
    1498:	390b3b0b          	0x390b3b0b
    149c:	0213490b          	0x213490b
    14a0:	0018                	0x18
    14a2:	1100                	addi	s0,sp,160
    14a4:	0034                	addi	a3,sp,8
    14a6:	0b3a0e03          	lb	t3,179(s4)
    14aa:	0b390b3b          	0xb390b3b
            val          = (seed + order);
    14ae:	1349                	addi	t1,t1,-14
    14b0:	1702                	slli	a4,a4,0x20
    14b2:	0000                	unimp
    14b4:	0b12                	slli	s6,s6,0x4
    14b6:	5501                	li	a0,-32
            val          = (val + order);
    14b8:	00130117          	auipc	sp,0x130
            B[i * N + j] = val;
    14bc:	1300                	addi	s0,sp,416
    14be:	0034                	addi	a3,sp,8
            val          = matrix_clip(val, 1);
    14c0:	0b3a0e03          	lb	t3,179(s4)
            A[i * N + j] = val;
    14c4:	0b390b3b          	0xb390b3b
    14c8:	1349                	addi	t1,t1,-14
    14ca:	0000                	unimp
        for (j = 0; j < N; j++)
    14cc:	0b14                	addi	a3,sp,400
    14ce:	0101                	addi	sp,sp,0
            order++;
    14d0:	15000013          	li	zero,336
        for (j = 0; j < N; j++)
    14d4:	0000010b          	0x10b
    14d8:	0100                	addi	s0,sp,128
    14da:	0111                	addi	sp,sp,4
    14dc:	0e25                	addi	t3,t3,9
    14de:	0e030b13          	addi	s6,t1,224
            order++;
    14e2:	01110e1b          	0x1110e1b
    14e6:	0612                	slli	a2,a2,0x4
    14e8:	1710                	addi	a2,sp,928
    14ea:	0000                	unimp
    for (i = 0; i < N; i++)
    14ec:	2402                	fld	fs0,0(sp)
    14ee:	0b00                	addi	s0,sp,400
            order++;
    14f0:	030b3e0b          	0x30b3e0b
    for (i = 0; i < N; i++)
    14f4:	000e                	c.slli	zero,0x3
    14f6:	0300                	addi	s0,sp,384
    14f8:	0016                	c.slli	zero,0x5
    14fa:	0b3a0e03          	lb	t3,179(s4)
    p->C = (MATRES *)align_mem(B + N * N);
    14fe:	0b390b3b          	0xb390b3b
    p->A = A;
    1502:	1349                	addi	t1,t1,-14
    1504:	0000                	unimp
    1506:	2404                	fld	fs1,8(s0)
    p->C = (MATRES *)align_mem(B + N * N);
    1508:	0b00                	addi	s0,sp,400
    150a:	030b3e0b          	0x30b3e0b
    150e:	0008                	0x8
    1510:	0500                	addi	s0,sp,640
    1512:	0b0b0113          	addi	sp,s6,176
    1516:	0b3a                	slli	s6,s6,0xe
    1518:	0b390b3b          	0xb390b3b
    p->N = N;
    151c:	1301                	addi	t1,t1,-32
    151e:	0000                	unimp
}
    1520:	0d06                	slli	s10,s10,0x1
    1522:	0300                	addi	s0,sp,384
    1524:	3a0e                	fld	fs4,224(sp)
    1526:	390b3b0b          	0x390b3b0b
    152a:	0b13490b          	0xb13490b
    p->B = B;
    152e:	0c0b0d0b          	0xc0b0d0b
    p->A = A;
    1532:	000b380b          	0xb380b
    p->N = N;
    1536:	0700                	addi	s0,sp,896
}
    1538:	000d                	c.nop	3
    153a:	0b3a0803          	lb	a6,179(s4)
    153e:	0b390b3b          	0xb390b3b
    1542:	1349                	addi	t1,t1,-14
    1544:	0b0d0b0b          	0xb0d0b0b
    1548:	0b0c                	addi	a1,sp,400
    154a:	0b38                	addi	a4,sp,408
    154c:	0000                	unimp
    154e:	1708                	addi	a0,sp,928
    1550:	0301                	addi	t1,t1,0
    1552:	0b0e                	slli	s6,s6,0x3
    1554:	3b0b3a0b          	0x3b0b3a0b
    1558:	010b390b          	0x10b390b
    155c:	09000013          	li	zero,144
    1560:	000d                	c.nop	3
    1562:	0b3a0803          	lb	a6,179(s4)
    1566:	0b390b3b          	0xb390b3b
    156a:	1349                	addi	t1,t1,-14
    B = A + N * N;
    156c:	0000                	unimp
    156e:	0d0a                	slli	s10,s10,0x2
    1570:	0300                	addi	s0,sp,384
    1572:	3a0e                	fld	fs4,224(sp)
    1574:	390b3b0b          	0x390b3b0b
    1578:	0013490b          	0x13490b
    N = i - 1;
    157c:	0b00                	addi	s0,sp,400
    157e:	012e                	slli	sp,sp,0xb
    B = A + N * N;
    1580:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
{
    1588:	0b39                	addi	s6,s6,14
    158a:	13491927          	fsh	fs4,306(s2)
    for (i = 0; i < N; i++)
    158e:	0111                	addi	sp,sp,4
    1590:	0612                	slli	a2,a2,0x4
    1592:	1840                	addi	s0,sp,52
    1594:	01194297          	auipc	t0,0x1194
    1598:	0c000013          	li	zero,192
    159c:	0005                	c.nop	1
    159e:	0b3a0803          	lb	a6,179(s4)
    15a2:	0b390b3b          	0xb390b3b
    ee_s16 ret = 0;
    15a6:	1349                	addi	t1,t1,-14
    MATRES tmp = 0, prev = 0, cur = 0;
    15a8:	1702                	slli	a4,a4,0x20
    15aa:	0000                	unimp
    15ac:	340d                	jal	fce <main+0x5e6>
    15ae:	0300                	addi	s0,sp,384
    for (i = 0; i < N; i++)
    15b0:	3a0e                	fld	fs4,224(sp)
    15b2:	390b3b0b          	0x390b3b0b
        for (j = 0; j < N; j++)
    15b6:	1c13490b          	0x1c13490b
{
    15ba:	0e00000b          	0xe00000b
    15be:	0034                	addi	a3,sp,8
                ret += 10;
    15c0:	0b3a0803          	lb	a6,179(s4)
        for (j = 0; j < N; j++)
    15c4:	0b390b3b          	0xb390b3b
                ret += 10;
    15c8:	1349                	addi	t1,t1,-14
    15ca:	0000                	unimp
                tmp = 0;
    15cc:	0300340f          	0x300340f
        for (j = 0; j < N; j++)
    15d0:	3a08                	fld	fa0,48(a2)
    15d2:	390b3b0b          	0x390b3b0b
                ret += (cur > prev) ? 1 : 0;
    15d6:	0213490b          	0x213490b
            cur = C[i * N + j];
    15da:	10000017          	auipc	zero,0x10000
                ret += 10;
    15de:	0034                	addi	a3,sp,8
    15e0:	0b3a0803          	lb	a6,179(s4)
                ret += (cur > prev) ? 1 : 0;
    15e4:	0b390b3b          	0xb390b3b
            tmp += cur;
    15e8:	1349                	addi	t1,t1,-14
    15ea:	1802                	slli	a6,a6,0x20
                ret += 10;
    15ec:	0000                	unimp
    15ee:	3411                	jal	ff2 <main+0x60a>
                ret += (cur > prev) ? 1 : 0;
    15f0:	0300                	addi	s0,sp,384
    15f2:	3a0e                	fld	fs4,224(sp)
            if (tmp > clipval)
    15f4:	390b3b0b          	0x390b3b0b
                ret += (cur > prev) ? 1 : 0;
    15f8:	0213490b          	0x213490b
        for (j = 0; j < N; j++)
    15fc:	0018                	0x18
    15fe:	1200                	addi	s0,sp,288
                ret += (cur > prev) ? 1 : 0;
    1600:	0034                	addi	a3,sp,8
    1602:	0b3a0e03          	lb	t3,179(s4)
        for (j = 0; j < N; j++)
    1606:	0b390b3b          	0xb390b3b
    for (i = 0; i < N; i++)
    160a:	1349                	addi	t1,t1,-14
    160c:	1702                	slli	a4,a4,0x20
    160e:	0000                	unimp
    1610:	55010b13          	addi	s6,sp,1360 # 131a08 <RAM_SIZE+0x121a08>
}
    1614:	00130117          	auipc	sp,0x130
    ee_s16 ret = 0;
    1618:	1400                	addi	s0,sp,544
    161a:	0034                	addi	a3,sp,8
}
    161c:	0b3a0e03          	lb	t3,179(s4)
    for (i = 0; i < N; i++)
    1620:	0b390b3b          	0xb390b3b
{
    1624:	1349                	addi	t1,t1,-14
    1626:	0000                	unimp
    1628:	0b15                	addi	s6,s6,5
    162a:	0101                	addi	sp,sp,0
    162c:	16000013          	li	zero,352
    1630:	1755010b          	0x1755010b
    1634:	0000                	unimp
    1636:	0100                	addi	s0,sp,128
    1638:	0111                	addi	sp,sp,4
    163a:	0e25                	addi	t3,t3,9
    163c:	0e030b13          	addi	s6,t1,224
    1640:	01110e1b          	0x1110e1b
    1644:	0612                	slli	a2,a2,0x4
    1646:	1710                	addi	a2,sp,928
    1648:	0000                	unimp
    164a:	2402                	fld	fs0,0(sp)
    164c:	0b00                	addi	s0,sp,400
    164e:	030b3e0b          	0x30b3e0b
    1652:	000e                	c.slli	zero,0x3
    1654:	0300                	addi	s0,sp,384
    1656:	0016                	c.slli	zero,0x5
    1658:	0b3a0e03          	lb	t3,179(s4)
    165c:	0b390b3b          	0xb390b3b
    1660:	1349                	addi	t1,t1,-14
    1662:	0000                	unimp
    1664:	2404                	fld	fs1,8(s0)
    1666:	0b00                	addi	s0,sp,400
    1668:	030b3e0b          	0x30b3e0b
    166c:	0008                	0x8
    166e:	0500                	addi	s0,sp,640
    1670:	0b0b0113          	addi	sp,s6,176
            C[i * N + j] = (MATRES)A[i * N + j] * (MATRES)val;
    1674:	0b3a                	slli	s6,s6,0xe
    1676:	0b390b3b          	0xb390b3b
    for (i = 0; i < N; i++)
    167a:	1301                	addi	t1,t1,-32
    167c:	0000                	unimp
    167e:	0d06                	slli	s10,s10,0x1
        for (j = 0; j < N; j++)
    1680:	0300                	addi	s0,sp,384
    1682:	3a0e                	fld	fs4,224(sp)
    1684:	390b3b0b          	0x390b3b0b
    1688:	0b13490b          	0xb13490b
{
    168c:	0c0b0d0b          	0xc0b0d0b
            C[i * N + j] = (MATRES)A[i * N + j] * (MATRES)val;
    1690:	000b380b          	0xb380b
    1694:	0700                	addi	s0,sp,896
    1696:	000d                	c.nop	3
        for (j = 0; j < N; j++)
    1698:	0b3a0803          	lb	a6,179(s4)
            C[i * N + j] = (MATRES)A[i * N + j] * (MATRES)val;
    169c:	0b390b3b          	0xb390b3b
    16a0:	1349                	addi	t1,t1,-14
    16a2:	0b0d0b0b          	0xb0d0b0b
        for (j = 0; j < N; j++)
    16a6:	0b0c                	addi	a1,sp,400
    16a8:	0b38                	addi	a4,sp,408
    16aa:	0000                	unimp
    for (i = 0; i < N; i++)
    16ac:	1708                	addi	a0,sp,928
    16ae:	0301                	addi	t1,t1,0
    16b0:	0b0e                	slli	s6,s6,0x3
    16b2:	3b0b3a0b          	0x3b0b3a0b
    16b6:	010b390b          	0x10b390b
    16ba:	09000013          	li	zero,144
}
    16be:	000d                	c.nop	3
    16c0:	0b3a0803          	lb	a6,179(s4)
    16c4:	0b390b3b          	0xb390b3b
    16c8:	1349                	addi	t1,t1,-14
    16ca:	0000                	unimp
    16cc:	0d0a                	slli	s10,s10,0x2
    16ce:	0300                	addi	s0,sp,384
    16d0:	3a0e                	fld	fs4,224(sp)
    16d2:	390b3b0b          	0x390b3b0b
    16d6:	0013490b          	0x13490b
    16da:	0b00                	addi	s0,sp,400
    16dc:	012e                	slli	sp,sp,0xb
    16de:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
    16e6:	0b39                	addi	s6,s6,14
    16e8:	13491927          	fsh	fs4,306(s2)
    16ec:	0111                	addi	sp,sp,4
    16ee:	0612                	slli	a2,a2,0x4
    16f0:	1840                	addi	s0,sp,52
    16f2:	01194297          	auipc	t0,0x1194
    16f6:	0c000013          	li	zero,192
    for (i = 0; i < N; i++)
    16fa:	0005                	c.nop	1
    16fc:	0b3a0803          	lb	a6,179(s4)
    1700:	0b390b3b          	0xb390b3b
            A[i * N + j] += val;
    1704:	1349                	addi	t1,t1,-14
    1706:	1702                	slli	a4,a4,0x20
    1708:	0000                	unimp
    170a:	340d                	jal	112c <main+0x744>
    170c:	0300                	addi	s0,sp,384
    170e:	3a0e                	fld	fs4,224(sp)
    1710:	390b3b0b          	0x390b3b0b
    for (i = 0; i < N; i++)
    1714:	1c13490b          	0x1c13490b
    1718:	0e00000b          	0xe00000b
        for (j = 0; j < N; j++)
    171c:	0034                	addi	a3,sp,8
    171e:	0b3a0803          	lb	a6,179(s4)
{
    1722:	0b390b3b          	0xb390b3b
            A[i * N + j] += val;
    1726:	1349                	addi	t1,t1,-14
        for (j = 0; j < N; j++)
    1728:	0000                	unimp
    172a:	0300340f          	0x300340f
            A[i * N + j] += val;
    172e:	3a08                	fld	fa0,48(a2)
    1730:	390b3b0b          	0x390b3b0b
        for (j = 0; j < N; j++)
    1734:	0213490b          	0x213490b
    for (i = 0; i < N; i++)
    1738:	10000017          	auipc	zero,0x10000
    173c:	0034                	addi	a3,sp,8
    173e:	0b3a0803          	lb	a6,179(s4)
    1742:	0b390b3b          	0xb390b3b
}
    1746:	1349                	addi	t1,t1,-14
    for (i = 0; i < N; i++)
    1748:	1802                	slli	a6,a6,0x20
    174a:	0000                	unimp
{
    174c:	3411                	jal	1150 <main+0x768>
    174e:	0300                	addi	s0,sp,384
    1750:	3a0e                	fld	fs4,224(sp)
    1752:	390b3b0b          	0x390b3b0b
    1756:	0213490b          	0x213490b
    175a:	0018                	0x18
    175c:	1200                	addi	s0,sp,288
    175e:	0034                	addi	a3,sp,8
    1760:	0b3a0e03          	lb	t3,179(s4)
        C[i] = 0;
    1764:	0b390b3b          	0xb390b3b
{
    1768:	1349                	addi	t1,t1,-14
    176a:	1702                	slli	a4,a4,0x20
    176c:	0000                	unimp
    176e:	55010b13          	addi	s6,sp,1360 # 131b64 <RAM_SIZE+0x121b64>
    1772:	00130117          	auipc	sp,0x130
    1776:	1400                	addi	s0,sp,544
    1778:	0034                	addi	a3,sp,8
    177a:	0b3a0e03          	lb	t3,179(s4)
        C[i] = 0;
    177e:	0b390b3b          	0xb390b3b
    1782:	1349                	addi	t1,t1,-14
    1784:	0000                	unimp
    1786:	0b15                	addi	s6,s6,5
    1788:	0101                	addi	sp,sp,0
    178a:	16000013          	li	zero,352
{
    178e:	1755010b          	0x1755010b
    1792:	0000                	unimp
    1794:	0100                	addi	s0,sp,128
    1796:	0111                	addi	sp,sp,4
    1798:	0e25                	addi	t3,t3,9
    179a:	0e030b13          	addi	s6,t1,224
    179e:	01110e1b          	0x1110e1b
    17a2:	0612                	slli	a2,a2,0x4
        C[i] = 0;
    17a4:	1710                	addi	a2,sp,928
    17a6:	0000                	unimp
    17a8:	2402                	fld	fs0,0(sp)
    17aa:	0b00                	addi	s0,sp,400
    17ac:	030b3e0b          	0x30b3e0b
        for (j = 0; j < N; j++)
    17b0:	000e                	c.slli	zero,0x3
    17b2:	0300                	addi	s0,sp,384
    17b4:	0024                	addi	s1,sp,8
    17b6:	0b3e0b0b          	0xb3e0b0b
        C[i] = 0;
    17ba:	00000803          	lb	a6,0(zero) # 0 <RAM_START_ADDRESS>
    17be:	1604                	addi	s1,sp,800
            C[i] += (MATRES)A[i * N + j] * (MATRES)B[j];
    17c0:	0300                	addi	s0,sp,384
    17c2:	3a0e                	fld	fs4,224(sp)
    17c4:	39053b0b          	0x39053b0b
        for (j = 0; j < N; j++)
    17c8:	0013490b          	0x13490b
    17cc:	0500                	addi	s0,sp,640
    17ce:	0016                	c.slli	zero,0x5
            C[i] += (MATRES)A[i * N + j] * (MATRES)B[j];
    17d0:	0b3a0e03          	lb	t3,179(s4)
    17d4:	0b390b3b          	0xb390b3b
        for (j = 0; j < N; j++)
    17d8:	1349                	addi	t1,t1,-14
    17da:	0000                	unimp
    17dc:	1306                	slli	t1,t1,0x21
    17de:	0b01                	addi	s6,s6,0
    for (i = 0; i < N; i++)
    17e0:	3b0b3a0b          	0x3b0b3a0b
    17e4:	010b390b          	0x10b390b
    17e8:	07000013          	li	zero,112
}
    17ec:	000d                	c.nop	3
    17ee:	0b3a0e03          	lb	t3,179(s4)
    17f2:	0b390b3b          	0xb390b3b
    17f6:	1349                	addi	t1,t1,-14
    17f8:	0b0d0b0b          	0xb0d0b0b
    17fc:	0b0c                	addi	a1,sp,400
    17fe:	0b38                	addi	a4,sp,408
    1800:	0000                	unimp
    1802:	0d08                	addi	a0,sp,656
    1804:	0300                	addi	s0,sp,384
    1806:	3a08                	fld	fa0,48(a2)
    1808:	390b3b0b          	0x390b3b0b
    180c:	0b13490b          	0xb13490b
    1810:	0c0b0d0b          	0xc0b0d0b
    1814:	000b380b          	0xb380b
    1818:	0900                	addi	s0,sp,144
    181a:	0e030117          	auipc	sp,0xe030
    181e:	0b3a0b0b          	0xb3a0b0b
    1822:	0b390b3b          	0xb390b3b
{
    1826:	1301                	addi	t1,t1,-32
    1828:	0000                	unimp
    182a:	0d0a                	slli	s10,s10,0x2
    182c:	0300                	addi	s0,sp,384
    182e:	3a08                	fld	fa0,48(a2)
    1830:	390b3b0b          	0x390b3b0b
    1834:	0013490b          	0x13490b
    1838:	0b00                	addi	s0,sp,400
    183a:	000d                	c.nop	3
    183c:	0b3a0e03          	lb	t3,179(s4)
    1840:	0b390b3b          	0xb390b3b
    1844:	1349                	addi	t1,t1,-14
    1846:	0000                	unimp
    1848:	2e0c                	fld	fa1,24(a2)
    184a:	3f01                	jal	175a <matrix_mul_vect+0x12>
    184c:	0319                	addi	t1,t1,6
    184e:	3a0e                	fld	fs4,224(sp)
    1850:	390b3b0b          	0x390b3b0b
    1854:	4919270b          	0x4919270b
    1858:	12011113          	0x12011113
    185c:	4006                	0x4006
    185e:	9718                	0x9718
    1860:	1942                	slli	s2,s2,0x30
    1862:	1301                	addi	t1,t1,-32
    for (i = 0; i < N; i++)
    1864:	0000                	unimp
    1866:	050d                	addi	a0,a0,3
    1868:	0300                	addi	s0,sp,384
    186a:	3a08                	fld	fa0,48(a2)
            C[i * N + j] = 0;
    186c:	390b3b0b          	0x390b3b0b
    1870:	0213490b          	0x213490b
    1874:	0e000017          	auipc	zero,0xe000
    1878:	0034                	addi	a3,sp,8
    187a:	0b3a0e03          	lb	t3,179(s4)
    187e:	0b390b3b          	0xb390b3b
    1882:	1349                	addi	t1,t1,-14
    for (i = 0; i < N; i++)
    1884:	1702                	slli	a4,a4,0x20
    1886:	0000                	unimp
        for (j = 0; j < N; j++)
    1888:	0300340f          	0x300340f
            C[i * N + j] = 0;
    188c:	3a0e                	fld	fs4,224(sp)
    188e:	390b3b0b          	0x390b3b0b
    1892:	1c13490b          	0x1c13490b
    1896:	1000000b          	0x1000000b
    189a:	0034                	addi	a3,sp,8
    189c:	0b3a0803          	lb	a6,179(s4)
    18a0:	0b390b3b          	0xb390b3b
    18a4:	1349                	addi	t1,t1,-14
    18a6:	1702                	slli	a4,a4,0x20
        for (j = 0; j < N; j++)
    18a8:	0000                	unimp
    18aa:	3411                	jal	12ae <main+0x8c6>
            for (k = 0; k < N; k++)
    18ac:	0300                	addi	s0,sp,384
    18ae:	3a08                	fld	fa0,48(a2)
    18b0:	390b3b0b          	0x390b3b0b
    18b4:	0013490b          	0x13490b
                C[i * N + j] += (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
    18b8:	1200                	addi	s0,sp,288
    18ba:	1755010b          	0x1755010b
    18be:	1301                	addi	t1,t1,-32
            for (k = 0; k < N; k++)
    18c0:	0000                	unimp
    18c2:	03003413          	sltiu	s0,zero,48
    18c6:	3a0e                	fld	fs4,224(sp)
                C[i * N + j] += (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
    18c8:	390b3b0b          	0x390b3b0b
    18cc:	0013490b          	0x13490b
            for (k = 0; k < N; k++)
    18d0:	1400                	addi	s0,sp,544
    18d2:	8289                	srli	a3,a3,0x2
    18d4:	0001                	nop
    18d6:	0111                	addi	sp,sp,4
        for (j = 0; j < N; j++)
    18d8:	1331                	addi	t1,t1,-20
    18da:	0000                	unimp
    18dc:	0b15                	addi	s6,s6,5
    18de:	1101                	addi	sp,sp,-32
    18e0:	1201                	addi	tp,tp,-32
    18e2:	0106                	slli	sp,sp,0x1
    18e4:	16000013          	li	zero,352
    18e8:	0034                	addi	a3,sp,8
    18ea:	0b3a0e03          	lb	t3,179(s4)
    18ee:	0b390b3b          	0xb390b3b
    for (i = 0; i < N; i++)
    18f2:	1349                	addi	t1,t1,-14
    18f4:	1802                	slli	a6,a6,0x20
    18f6:	0000                	unimp
    18f8:	55010b17          	auipc	s6,0x55010
    18fc:	18000017          	auipc	zero,0x18000
    1900:	1301010b          	0x1301010b
    1904:	0000                	unimp
    1906:	0b19                	addi	s6,s6,6
    1908:	0001                	nop
    190a:	1a00                	addi	s0,sp,304
}
    190c:	0101                	addi	sp,sp,0
    190e:	1349                	addi	t1,t1,-14
    1910:	1301                	addi	t1,t1,-32
    1912:	0000                	unimp
    1914:	4900211b          	0x4900211b
    1918:	000b2f13          	slti	t5,s6,0
    191c:	1c00                	addi	s0,sp,560
    191e:	002e                	c.slli	zero,0xb
    1920:	193c193f 0e030e6e 	0xe030e6e193c193f
    1928:	0000                	unimp
    192a:	0100                	addi	s0,sp,128
    192c:	0111                	addi	sp,sp,4
    192e:	0e25                	addi	t3,t3,9
    1930:	0e030b13          	addi	s6,t1,224
    1934:	01110e1b          	0x1110e1b
    1938:	0612                	slli	a2,a2,0x4
    193a:	1710                	addi	a2,sp,928
    193c:	0000                	unimp
    193e:	2402                	fld	fs0,0(sp)
    1940:	0b00                	addi	s0,sp,400
    1942:	030b3e0b          	0x30b3e0b
    1946:	000e                	c.slli	zero,0x3
{
    1948:	0300                	addi	s0,sp,384
    194a:	0024                	addi	s1,sp,8
    194c:	0b3e0b0b          	0xb3e0b0b
    1950:	00000803          	lb	a6,0(zero) # 0 <RAM_START_ADDRESS>
    1954:	1604                	addi	s1,sp,800
    1956:	0300                	addi	s0,sp,384
    1958:	3a0e                	fld	fs4,224(sp)
    195a:	39053b0b          	0x39053b0b
    195e:	0013490b          	0x13490b
    1962:	0500                	addi	s0,sp,640
    1964:	0016                	c.slli	zero,0x5
    1966:	0b3a0e03          	lb	t3,179(s4)
    196a:	0b390b3b          	0xb390b3b
    196e:	1349                	addi	t1,t1,-14
    1970:	0000                	unimp
    1972:	1306                	slli	t1,t1,0x21
    1974:	0b01                	addi	s6,s6,0
    1976:	3b0b3a0b          	0x3b0b3a0b
    197a:	010b390b          	0x10b390b
    197e:	07000013          	li	zero,112
    1982:	000d                	c.nop	3
    1984:	0b3a0e03          	lb	t3,179(s4)
    for (i = 0; i < N; i++)
    1988:	0b390b3b          	0xb390b3b
    198c:	1349                	addi	t1,t1,-14
    198e:	0b0d0b0b          	0xb0d0b0b
            C[i * N + j] = 0;
    1992:	0b0c                	addi	a1,sp,400
    1994:	0b38                	addi	a4,sp,408
    1996:	0000                	unimp
    1998:	0d08                	addi	a0,sp,656
    199a:	0300                	addi	s0,sp,384
    199c:	3a08                	fld	fa0,48(a2)
    199e:	390b3b0b          	0x390b3b0b
    19a2:	0b13490b          	0xb13490b
    19a6:	0c0b0d0b          	0xc0b0d0b
    for (i = 0; i < N; i++)
    19aa:	000b380b          	0xb380b
        for (j = 0; j < N; j++)
    19ae:	0900                	addi	s0,sp,144
            C[i * N + j] = 0;
    19b0:	0e030117          	auipc	sp,0xe030
    19b4:	0b3a0b0b          	0xb3a0b0b
    19b8:	0b390b3b          	0xb390b3b
    19bc:	1301                	addi	t1,t1,-32
    19be:	0000                	unimp
    19c0:	0d0a                	slli	s10,s10,0x2
    19c2:	0300                	addi	s0,sp,384
    19c4:	3a08                	fld	fa0,48(a2)
    19c6:	390b3b0b          	0x390b3b0b
    19ca:	0013490b          	0x13490b
        for (j = 0; j < N; j++)
    19ce:	0b00                	addi	s0,sp,400
            for (k = 0; k < N; k++)
    19d0:	000d                	c.nop	3
    19d2:	0b3a0e03          	lb	t3,179(s4)
    19d6:	0b390b3b          	0xb390b3b
    19da:	1349                	addi	t1,t1,-14
                MATRES tmp = (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
    19dc:	0000                	unimp
    19de:	2e0c                	fld	fa1,24(a2)
    19e0:	3f01                	jal	18f0 <matrix_mul_matrix+0xcc>
    19e2:	0319                	addi	t1,t1,6
            for (k = 0; k < N; k++)
    19e4:	3a0e                	fld	fs4,224(sp)
    19e6:	390b3b0b          	0x390b3b0b
    19ea:	4919270b          	0x4919270b
                MATRES tmp = (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
    19ee:	12011113          	0x12011113
                C[i * N + j] += bit_extract(tmp, 2, 4) * bit_extract(tmp, 5, 7);
    19f2:	4006                	0x4006
    19f4:	9718                	0x9718
    19f6:	1942                	slli	s2,s2,0x30
    19f8:	1301                	addi	t1,t1,-32
    19fa:	0000                	unimp
    19fc:	050d                	addi	a0,a0,3
    19fe:	0300                	addi	s0,sp,384
    1a00:	3a08                	fld	fa0,48(a2)
    1a02:	390b3b0b          	0x390b3b0b
    1a06:	0213490b          	0x213490b
            for (k = 0; k < N; k++)
    1a0a:	0e000017          	auipc	zero,0xe000
    1a0e:	0034                	addi	a3,sp,8
        for (j = 0; j < N; j++)
    1a10:	0b3a0e03          	lb	t3,179(s4)
    1a14:	0b390b3b          	0xb390b3b
    1a18:	1349                	addi	t1,t1,-14
    1a1a:	1702                	slli	a4,a4,0x20
    1a1c:	0000                	unimp
    1a1e:	0300340f          	0x300340f
    1a22:	3a0e                	fld	fs4,224(sp)
    1a24:	390b3b0b          	0x390b3b0b
    for (i = 0; i < N; i++)
    1a28:	1c13490b          	0x1c13490b
    1a2c:	1000000b          	0x1000000b
    1a30:	0034                	addi	a3,sp,8
    1a32:	0b3a0803          	lb	a6,179(s4)
    1a36:	0b390b3b          	0xb390b3b
    1a3a:	1349                	addi	t1,t1,-14
    1a3c:	0000                	unimp
    1a3e:	3411                	jal	1442 <core_init_matrix+0x92>
    1a40:	0300                	addi	s0,sp,384
    1a42:	3a08                	fld	fa0,48(a2)
}
    1a44:	390b3b0b          	0x390b3b0b
    1a48:	0213490b          	0x213490b
    1a4c:	0018                	0x18
    1a4e:	1200                	addi	s0,sp,288
    1a50:	0034                	addi	a3,sp,8
    1a52:	0b3a0803          	lb	a6,179(s4)
    1a56:	0b390b3b          	0xb390b3b
    1a5a:	1349                	addi	t1,t1,-14
    1a5c:	1702                	slli	a4,a4,0x20
    1a5e:	0000                	unimp
    1a60:	55010b13          	addi	s6,sp,1360 # e031f00 <RAM_SIZE+0xe021f00>
    1a64:	00130117          	auipc	sp,0x130
    1a68:	1400                	addi	s0,sp,544
    1a6a:	0034                	addi	a3,sp,8
    1a6c:	0b3a0e03          	lb	t3,179(s4)
    1a70:	0b390b3b          	0xb390b3b
    1a74:	1349                	addi	t1,t1,-14
    1a76:	0000                	unimp
    1a78:	0b15                	addi	s6,s6,5
    1a7a:	0101                	addi	sp,sp,0
    1a7c:	16000013          	li	zero,352
{
    1a80:	0111010b          	0x111010b
    1a84:	0612                	slli	a2,a2,0x4
    1a86:	0000                	unimp
    1a88:	0100                	addi	s0,sp,128
    1a8a:	0011                	c.nop	4
    MATDAT clipval = matrix_big(val);
    1a8c:	0610                	addi	a2,sp,768
    1a8e:	0111                	addi	sp,sp,4
{
    1a90:	0112                	slli	sp,sp,0x4
    1a92:	0e1b0e03          	lb	t3,225(s6) # 550119d9 <RAM_SIZE+0x550019d9>
    1a96:	0e25                	addi	t3,t3,9
    1a98:	00000513          	li	a0,0
    1a9c:	0100                	addi	s0,sp,128
    1a9e:	0011                	c.nop	4
    1aa0:	0610                	addi	a2,sp,768
    1aa2:	0111                	addi	sp,sp,4
    1aa4:	0112                	slli	sp,sp,0x4
    1aa6:	0e1b0e03          	lb	t3,225(s6)
    1aaa:	0e25                	addi	t3,t3,9
    1aac:	00000513          	li	a0,0
    1ab0:	0100                	addi	s0,sp,128
    1ab2:	0111                	addi	sp,sp,4
    1ab4:	0e25                	addi	t3,t3,9
    1ab6:	0e030b13          	addi	s6,t1,224
    1aba:	01110e1b          	0x1110e1b
    1abe:	0612                	slli	a2,a2,0x4
    1ac0:	1710                	addi	a2,sp,928
    1ac2:	0000                	unimp
    1ac4:	2402                	fld	fs0,0(sp)
    1ac6:	0b00                	addi	s0,sp,400
    MATDAT clipval = matrix_big(val);
    1ac8:	030b3e0b          	0x30b3e0b
    for (i = 0; i < N; i++)
    1acc:	0008                	0x8
    1ace:	0300                	addi	s0,sp,384
    1ad0:	0024                	addi	s1,sp,8
    1ad2:	0b3e0b0b          	0xb3e0b0b
    1ad6:	00000e03          	lb	t3,0(zero) # 0 <RAM_START_ADDRESS>
    1ada:	1604                	addi	s1,sp,800
    1adc:	0300                	addi	s0,sp,384
    1ade:	3a0e                	fld	fs4,224(sp)
            A[i * N + j] += val;
    1ae0:	390b3b0b          	0x390b3b0b
    1ae4:	0013490b          	0x13490b
    1ae8:	0500                	addi	s0,sp,640
    1aea:	0026                	c.slli	zero,0x9
    1aec:	1349                	addi	t1,t1,-14
    1aee:	0000                	unimp
    1af0:	0106                	slli	sp,sp,0x1
    1af2:	4901                	li	s2,0
    1af4:	00130113          	addi	sp,t1,1
    for (i = 0; i < N; i++)
    1af8:	0700                	addi	s0,sp,896
    1afa:	0021                	c.nop	8
    1afc:	1349                	addi	t1,t1,-14
    1afe:	00000b2f          	vamoaddei8.v	zero,(zero),v0,v22,v0.t
        for (j = 0; j < N; j++)
    1b02:	3408                	fld	fa0,40(s0)
    1b04:	0300                	addi	s0,sp,384
    1b06:	3a0e                	fld	fs4,224(sp)
{
    1b08:	39053b0b          	0x39053b0b
            A[i * N + j] += val;
    1b0c:	3f13490b          	0x3f13490b
        for (j = 0; j < N; j++)
    1b10:	3c19                	jal	1526 <core_init_matrix+0x176>
    1b12:	0019                	c.nop	6
            A[i * N + j] += val;
    1b14:	0900                	addi	s0,sp,144
    1b16:	012e                	slli	sp,sp,0xb
    1b18:	0e03193f 053b0b3a 	0x53b0b3a0e03193f
    for (i = 0; i < N; i++)
    1b20:	0b39                	addi	s6,s6,14
    1b22:	13491927          	fsh	fs4,306(s2)
    1b26:	0111                	addi	sp,sp,4
    1b28:	0612                	slli	a2,a2,0x4
    1b2a:	1840                	addi	s0,sp,52
    1b2c:	00194297          	auipc	t0,0x194
    1b30:	0a00                	addi	s0,sp,272
    1b32:	0005                	c.nop	1
            C[i * N + j] = (MATRES)A[i * N + j] * (MATRES)val;
    1b34:	0b3a0803          	lb	a6,179(s4)
    1b38:	0b39053b          	0xb39053b
        for (j = 0; j < N; j++)
    1b3c:	1349                	addi	t1,t1,-14
    1b3e:	1702                	slli	a4,a4,0x20
    1b40:	0000                	unimp
    1b42:	0300340b          	0x300340b
    1b46:	3a08                	fld	fa0,48(a2)
    1b48:	39053b0b          	0x39053b0b
    1b4c:	0013490b          	0x13490b
            C[i * N + j] = (MATRES)A[i * N + j] * (MATRES)val;
    1b50:	0c00                	addi	s0,sp,528
    1b52:	1755010b          	0x1755010b
    1b56:	0000                	unimp
        for (j = 0; j < N; j++)
    1b58:	340d                	jal	157a <core_init_matrix+0x1ca>
    1b5a:	0300                	addi	s0,sp,384
            C[i * N + j] = (MATRES)A[i * N + j] * (MATRES)val;
    1b5c:	3a0e                	fld	fs4,224(sp)
    1b5e:	39053b0b          	0x39053b0b
    1b62:	0213490b          	0x213490b
        for (j = 0; j < N; j++)
    1b66:	0e000017          	auipc	zero,0xe000
    1b6a:	0034                	addi	a3,sp,8
    for (i = 0; i < N; i++)
    1b6c:	0b3a0803          	lb	a6,179(s4)
    1b70:	0b39053b          	0xb39053b
    1b74:	1349                	addi	t1,t1,-14
    1b76:	1702                	slli	a4,a4,0x20
    1b78:	0000                	unimp
    1b7a:	0100                	addi	s0,sp,128
    1b7c:	0111                	addi	sp,sp,4
    1b7e:	0e25                	addi	t3,t3,9
    1b80:	0e030b13          	addi	s6,t1,224
    1b84:	17100e1b          	0x17100e1b
    1b88:	0000                	unimp
    1b8a:	2402                	fld	fs0,0(sp)
    1b8c:	0b00                	addi	s0,sp,400
    1b8e:	030b3e0b          	0x30b3e0b
    1b92:	0008                	0x8
            if (tmp > clipval)
    1b94:	0300                	addi	s0,sp,384
    1b96:	0024                	addi	s1,sp,8
    1b98:	0b3e0b0b          	0xb3e0b0b
    1b9c:	00000e03          	lb	t3,0(zero) # 0 <RAM_START_ADDRESS>
    1ba0:	1604                	addi	s1,sp,800
    1ba2:	0300                	addi	s0,sp,384
    1ba4:	3a0e                	fld	fs4,224(sp)
    1ba6:	390b3b0b          	0x390b3b0b
    for (i = 0; i < N; i++)
    1baa:	0013490b          	0x13490b
        for (j = 0; j < N; j++)
    1bae:	0500                	addi	s0,sp,640
    1bb0:	0026                	c.slli	zero,0x9
    1bb2:	1349                	addi	t1,t1,-14
    1bb4:	0000                	unimp
    1bb6:	0106                	slli	sp,sp,0x1
                ret += 10;
    1bb8:	4901                	li	s2,0
    1bba:	00130113          	addi	sp,t1,1
        for (j = 0; j < N; j++)
    1bbe:	0700                	addi	s0,sp,896
                ret += 10;
    1bc0:	0021                	c.nop	8
    1bc2:	1349                	addi	t1,t1,-14
                tmp = 0;
    1bc4:	00000b2f          	vamoaddei8.v	zero,(zero),v0,v22,v0.t
        for (j = 0; j < N; j++)
    1bc8:	3408                	fld	fa0,40(s0)
    1bca:	0300                	addi	s0,sp,384
                ret += (cur > prev) ? 1 : 0;
    1bcc:	3a0e                	fld	fs4,224(sp)
    1bce:	39053b0b          	0x39053b0b
            cur = C[i * N + j];
    1bd2:	3f13490b          	0x3f13490b
                ret += 10;
    1bd6:	3c19                	jal	15ec <matrix_sum+0x64>
    1bd8:	0019                	c.nop	6
    1bda:	0900                	addi	s0,sp,144
                ret += (cur > prev) ? 1 : 0;
    1bdc:	0034                	addi	a3,sp,8
    1bde:	0b3a1347          	fmsub.d	ft6,fs4,fs3,ft1,rtz
            tmp += cur;
    1be2:	0b39053b          	0xb39053b
                ret += 10;
    1be6:	1802                	slli	a6,a6,0x20
                ret += (cur > prev) ? 1 : 0;
    1be8:	0000                	unimp
    1bea:	0100                	addi	s0,sp,128
            if (tmp > clipval)
    1bec:	0111                	addi	sp,sp,4
    1bee:	0e25                	addi	t3,t3,9
                ret += (cur > prev) ? 1 : 0;
    1bf0:	0e030b13          	addi	s6,t1,224
        for (j = 0; j < N; j++)
    1bf4:	01110e1b          	0x1110e1b
                ret += (cur > prev) ? 1 : 0;
    1bf8:	0612                	slli	a2,a2,0x4
    1bfa:	1710                	addi	a2,sp,928
        for (j = 0; j < N; j++)
    1bfc:	0000                	unimp
    1bfe:	2402                	fld	fs0,0(sp)
    for (i = 0; i < N; i++)
    1c00:	0b00                	addi	s0,sp,400
    1c02:	030b3e0b          	0x30b3e0b
    1c06:	000e                	c.slli	zero,0x3
    1c08:	0300                	addi	s0,sp,384
    1c0a:	0024                	addi	s1,sp,8
    1c0c:	0b3e0b0b          	0xb3e0b0b
    1c10:	00000803          	lb	a6,0(zero) # 0 <RAM_START_ADDRESS>
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1c14:	1604                	addi	s1,sp,800
    1c16:	0300                	addi	s0,sp,384
    1c18:	3a0e                	fld	fs4,224(sp)
    1c1a:	390b3b0b          	0x390b3b0b
    matrix_mul_vect(N, C, A, B);
    1c1e:	0013490b          	0x13490b
    1c22:	0500                	addi	s0,sp,640
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1c24:	0b0b0113          	addi	sp,s6,176
    matrix_mul_vect(N, C, A, B);
    1c28:	0b3a                	slli	s6,s6,0xe
    1c2a:	0b390b3b          	0xb390b3b
    1c2e:	1301                	addi	t1,t1,-32
    1c30:	0000                	unimp
    1c32:	0d06                	slli	s10,s10,0x1
    1c34:	0300                	addi	s0,sp,384
    1c36:	3a0e                	fld	fs4,224(sp)
    1c38:	390b3b0b          	0x390b3b0b
    1c3c:	0b13490b          	0xb13490b
    1c40:	0c0b0d0b          	0xc0b0d0b
        for (j = 0; j < N; j++)
    1c44:	000b380b          	0xb380b
    1c48:	0700                	addi	s0,sp,896
    1c4a:	000d                	c.nop	3
    1c4c:	0b3a0803          	lb	a6,179(s4)
                ret += 10;
    1c50:	0b390b3b          	0xb390b3b
        for (j = 0; j < N; j++)
    1c54:	1349                	addi	t1,t1,-14
    1c56:	0b0d0b0b          	0xb0d0b0b
                ret += 10;
    1c5a:	0b0c                	addi	a1,sp,400
                tmp = 0;
    1c5c:	0b38                	addi	a4,sp,408
    1c5e:	0000                	unimp
        for (j = 0; j < N; j++)
    1c60:	1708                	addi	a0,sp,928
    1c62:	0301                	addi	t1,t1,0
                ret += (cur > prev) ? 1 : 0;
    1c64:	0b0e                	slli	s6,s6,0x3
    1c66:	3b0b3a0b          	0x3b0b3a0b
            cur = C[i * N + j];
    1c6a:	010b390b          	0x10b390b
                ret += 10;
    1c6e:	09000013          	li	zero,144
    1c72:	000d                	c.nop	3
                ret += (cur > prev) ? 1 : 0;
    1c74:	0b3a0803          	lb	a6,179(s4)
            tmp += cur;
    1c78:	0b390b3b          	0xb390b3b
                ret += 10;
    1c7c:	1349                	addi	t1,t1,-14
    1c7e:	0000                	unimp
                ret += (cur > prev) ? 1 : 0;
    1c80:	0d0a                	slli	s10,s10,0x2
    1c82:	0300                	addi	s0,sp,384
            if (tmp > clipval)
    1c84:	3a0e                	fld	fs4,224(sp)
    1c86:	390b3b0b          	0x390b3b0b
                ret += (cur > prev) ? 1 : 0;
    1c8a:	0013490b          	0x13490b
        for (j = 0; j < N; j++)
    1c8e:	0b00                	addi	s0,sp,400
                ret += (cur > prev) ? 1 : 0;
    1c90:	012e                	slli	sp,sp,0xb
    1c92:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
    for (i = 0; i < N; i++)
    1c9a:	0b39                	addi	s6,s6,14
    1c9c:	13491927          	fsh	fs4,306(s2)
    1ca0:	0111                	addi	sp,sp,4
    1ca2:	0612                	slli	a2,a2,0x4
    1ca4:	1840                	addi	s0,sp,52
    1ca6:	01194297          	auipc	t0,0x1194
    1caa:	0c000013          	li	zero,192
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1cae:	0005                	c.nop	1
    1cb0:	0b3a0803          	lb	a6,179(s4)
    matrix_mul_matrix(N, C, A, B);
    1cb4:	0b390b3b          	0xb390b3b
    1cb8:	1349                	addi	t1,t1,-14
    1cba:	1702                	slli	a4,a4,0x20
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1cbc:	0000                	unimp
    1cbe:	340d                	jal	16e0 <matrix_mul_const+0xc0>
    matrix_mul_matrix(N, C, A, B);
    1cc0:	0300                	addi	s0,sp,384
    1cc2:	3a0e                	fld	fs4,224(sp)
    1cc4:	390b3b0b          	0x390b3b0b
    1cc8:	0213490b          	0x213490b
    1ccc:	0e000017          	auipc	zero,0xe000
    1cd0:	0034                	addi	a3,sp,8
    1cd2:	0b3a0e03          	lb	t3,179(s4)
    1cd6:	0b390b3b          	0xb390b3b
    1cda:	1349                	addi	t1,t1,-14
    1cdc:	0b1c                	addi	a5,sp,400
    1cde:	0000                	unimp
        for (j = 0; j < N; j++)
    1ce0:	0300340f          	0x300340f
    1ce4:	3a08                	fld	fa0,48(a2)
    1ce6:	390b3b0b          	0x390b3b0b
    1cea:	0013490b          	0x13490b
    1cee:	1000                	addi	s0,sp,32
                ret += 10;
    1cf0:	0034                	addi	a3,sp,8
    1cf2:	0b3a0803          	lb	a6,179(s4)
        for (j = 0; j < N; j++)
    1cf6:	0b390b3b          	0xb390b3b
                ret += 10;
    1cfa:	1349                	addi	t1,t1,-14
                tmp = 0;
    1cfc:	1702                	slli	a4,a4,0x20
    1cfe:	0000                	unimp
        for (j = 0; j < N; j++)
    1d00:	0b11                	addi	s6,s6,4
    1d02:	5501                	li	a0,-32
    1d04:	00130117          	auipc	sp,0x130
                ret += (cur > prev) ? 1 : 0;
    1d08:	1200                	addi	s0,sp,288
    1d0a:	0034                	addi	a3,sp,8
            cur = C[i * N + j];
    1d0c:	0b3a0e03          	lb	t3,179(s4)
                ret += 10;
    1d10:	0b390b3b          	0xb390b3b
    1d14:	1349                	addi	t1,t1,-14
    1d16:	0000                	unimp
                ret += (cur > prev) ? 1 : 0;
    1d18:	03000a13          	li	s4,48
            tmp += cur;
    1d1c:	3a0e                	fld	fs4,224(sp)
    1d1e:	390b3b0b          	0x390b3b0b
                ret += 10;
    1d22:	0001110b          	0x1110b
                ret += (cur > prev) ? 1 : 0;
    1d26:	1400                	addi	s0,sp,544
            if (tmp > clipval)
    1d28:	0111010b          	0x111010b
                ret += (cur > prev) ? 1 : 0;
    1d2c:	0612                	slli	a2,a2,0x4
    1d2e:	1301                	addi	t1,t1,-32
        for (j = 0; j < N; j++)
    1d30:	0000                	unimp
    1d32:	0b15                	addi	s6,s6,5
                ret += (cur > prev) ? 1 : 0;
    1d34:	5501                	li	a0,-32
    1d36:	16000017          	auipc	zero,0x16000
        for (j = 0; j < N; j++)
    1d3a:	8289                	srli	a3,a3,0x2
    1d3c:	0001                	nop
    1d3e:	0111                	addi	sp,sp,4
    for (i = 0; i < N; i++)
    1d40:	1331                	addi	t1,t1,-20
    1d42:	0000                	unimp
    1d44:	01010b17          	auipc	s6,0x1010
    1d48:	18000013          	li	zero,384
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1d4c:	0000010b          	0x10b
    1d50:	2e19                	jal	2066 <core_init_state+0x5a>
    1d52:	3f00                	fld	fs0,56(a4)
    matrix_mul_matrix_bitextract(N, C, A, B);
    1d54:	3c19                	jal	176a <matrix_mul_vect+0x22>
    1d56:	6e19                	lui	t3,0x6
    1d58:	030e                	slli	t1,t1,0x3
    1d5a:	000e                	c.slli	zero,0x3
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
lui     sp,%hi(__stack_top)                                             
   0:	001c                	0x1c
   2:	0000                	unimp
addi    sp,sp,%lo(__stack_top)
   4:	0002                	c.slli64	zero
   6:	0000                	unimp
jal   zero, _start
   8:	0000                	unimp
   a:	0004                	0x4
	...
  14:	000c                	0xc
	...
  1e:	0000                	unimp
  20:	001c                	0x1c
  22:	0000                	unimp
  24:	0002                	c.slli64	zero
  26:	0026                	c.slli	zero,0x9
  28:	0000                	unimp
  2a:	0004                	0x4
  2c:	0000                	unimp
  2e:	0000                	unimp
  30:	00c4                	addi	s1,sp,68
  32:	0000                	unimp
  34:	089c                	addi	a5,sp,80
	...
  3e:	0000                	unimp
  40:	0024                	addi	s1,sp,8
  42:	0000                	unimp
  44:	0002                	c.slli64	zero
  46:	0d32                	slli	s10,s10,0xc
  48:	0000                	unimp
  4a:	0004                	0x4
  4c:	0000                	unimp
  4e:	0000                	unimp
  50:	0960                	addi	s0,sp,156
  52:	0000                	unimp
  54:	0088                	addi	a0,sp,64
  56:	0000                	unimp
  58:	09e8                	addi	a0,sp,220
  5a:	0000                	unimp
  5c:	09c8                	addi	a0,sp,212
	...
  66:	0000                	unimp
  68:	001c                	0x1c
  6a:	0000                	unimp
  6c:	0002                	c.slli64	zero
  6e:	00001827          	fsh	ft0,16(zero) # 10 <_start>
  72:	0004                	0x4
  74:	0000                	unimp
  76:	0000                	unimp
  78:	13b0                	addi	a2,sp,488
  7a:	0000                	unimp
  7c:	0b84                	addi	s1,sp,464
	...
  86:	0000                	unimp
  88:	001c                	0x1c
  8a:	0000                	unimp
  8c:	0002                	c.slli64	zero
  8e:	00002377          	0x2377
  92:	0004                	0x4
  94:	0000                	unimp
  96:	0000                	unimp
  98:	1f34                	addi	a3,sp,952
  9a:	0000                	unimp
  9c:	00d8                	addi	a4,sp,68
	...
  a6:	0000                	unimp
  a8:	001c                	0x1c
  aa:	0000                	unimp
  ac:	0002                	c.slli64	zero
  ae:	267e                	fld	fa2,472(sp)
  b0:	0000                	unimp
  b2:	0004                	0x4
  b4:	0000                	unimp
  b6:	0000                	unimp
  b8:	200c                	fld	fa1,0(s0)
  ba:	0000                	unimp
  bc:	063c                	addi	a5,sp,776
	...
    if (res == NULL)
  c6:	0000                	unimp
    return a->idx - b->idx;
  c8:	001c                	0x1c
  ca:	0000                	unimp
  cc:	0002                	c.slli64	zero
  ce:	2b64                	fld	fs1,208(a4)
}
  d0:	0000                	unimp
  d2:	0004                	0x4
  d4:	0000                	unimp
  d6:	0000                	unimp
        a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16 >> 8));
  d8:	2648                	fld	fa0,136(a2)
  da:	0000                	unimp
  dc:	02b8                	addi	a4,sp,328
	...
  e6:	0000                	unimp
  e8:	001c                	0x1c
  ea:	0000                	unimp
  ec:	0002                	c.slli64	zero
  ee:	000030e7          	0x30e7
  f2:	0004                	0x4
        b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16 >> 8));
  f4:	0000                	unimp
  f6:	0000                	unimp
    return a->idx - b->idx;
  f8:	2900                	fld	fs0,16(a0)
  fa:	0000                	unimp
        b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16 >> 8));
  fc:	0404                	addi	s1,sp,512
	...
 106:	0000                	unimp
 108:	001c                	0x1c
 10a:	0000                	unimp
 10c:	0002                	c.slli64	zero
 10e:	000035e7          	0x35e7
 112:	0004                	0x4
    return a->idx - b->idx;
 114:	0000                	unimp
 116:	0000                	unimp
}
 118:	2d04                	fld	fs1,24(a0)
 11a:	0000                	unimp
 11c:	0c10                	addi	a2,sp,528
	...
{
 126:	0000                	unimp
    ee_s16 data = *pdata;
 128:	001c                	0x1c
 12a:	0000                	unimp
{
 12c:	0002                	c.slli64	zero
 12e:	3ef6                	fld	ft9,376(sp)
 130:	0000                	unimp
 132:	0004                	0x4
          & 1;  /* bit 7 indicates if the function result has been cached */
 134:	0000                	unimp
 136:	0000                	unimp
{
 138:	3914                	fld	fa3,48(a0)
 13a:	0000                	unimp
 13c:	07d8                	addi	a4,sp,964
	...
    if (optype) /* if cached, use cache */
 146:	0000                	unimp
}
 148:	001c                	0x1c
 14a:	0000                	unimp
        return (data & 0x007f);
 14c:	0002                	c.slli64	zero
 14e:	00004477          	0x4477
}
 152:	0004                	0x4
 154:	0000                	unimp
 156:	0000                	unimp
 158:	40ec                	lw	a1,68(s1)
 15a:	0000                	unimp
 15c:	07e4                	addi	s1,sp,972
	...
 166:	0000                	unimp
        ee_s16 flag = data & 0x7; /* bits 0-2 is type of function to perform */
 168:	001c                	0x1c
 16a:	0000                	unimp
               & 0xf);       /* bits 3-6 is specific data for the operation */
 16c:	0002                	c.slli64	zero
 16e:	4d6c                	lw	a1,92(a0)
        ee_s16 dtype
 170:	0000                	unimp
 172:	0004                	0x4
        dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
 174:	0000                	unimp
 176:	0000                	unimp
        ee_s16 flag = data & 0x7; /* bits 0-2 is type of function to perform */
 178:	48d0                	lw	a2,20(s1)
 17a:	0000                	unimp
                retval = core_bench_state(res->size,
 17c:	008c                	addi	a1,sp,64
	...
        dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
 186:	0000                	unimp
        switch (flag)
 188:	001c                	0x1c
 18a:	0000                	unimp
 18c:	0002                	c.slli64	zero
 18e:	4fc1                	li	t6,16
 190:	0000                	unimp
 192:	0004                	0x4
        res->crc = crcu16(retval, res->crc);
 194:	0000                	unimp
 196:	0000                	unimp
 198:	495c                	lw	a5,20(a0)
 19a:	0000                	unimp
 19c:	00e4                	addi	s1,sp,76
	...
 1a6:	0000                	unimp
 1a8:	001c                	0x1c
 1aa:	0000                	unimp
        *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
 1ac:	0002                	c.slli64	zero
 1ae:	5214                	lw	a3,32(a2)
        retval &= 0x007f;
 1b0:	0000                	unimp
 1b2:	0004                	0x4
        *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
 1b4:	0000                	unimp
 1b6:	0000                	unimp
        res->crc = crcu16(retval, res->crc);
 1b8:	4a40                	lw	s0,20(a2)
 1ba:	0000                	unimp
        *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
 1bc:	00e4                	addi	s1,sp,76
	...
}
 1c6:	0000                	unimp
 1c8:	001c                	0x1c
 1ca:	0000                	unimp
 1cc:	0002                	c.slli64	zero
 1ce:	00005467          	0x5467
 1d2:	0004                	0x4
 1d4:	0000                	unimp
 1d6:	0000                	unimp
 1d8:	4b24                	lw	s1,80(a4)
 1da:	0000                	unimp
 1dc:	068c                	addi	a1,sp,832
	...
                retval = core_bench_state(res->size,
 1e6:	0000                	unimp
 1e8:	001c                	0x1c
 1ea:	0000                	unimp
 1ec:	0002                	c.slli64	zero
 1ee:	5e4d                	li	t3,-13
 1f0:	0000                	unimp
 1f2:	0004                	0x4
 1f4:	0000                	unimp
 1f6:	0000                	unimp
 1f8:	51b0                	lw	a2,96(a1)
 1fa:	0000                	unimp
 1fc:	0080                	addi	s0,sp,64
	...
 206:	0000                	unimp
                if (res->crcstate == 0)
 208:	001c                	0x1c
 20a:	0000                	unimp
                retval = core_bench_state(res->size,
 20c:	0002                	c.slli64	zero
 20e:	6034                	flw	fa3,64(s0)
 210:	0000                	unimp
 212:	0004                	0x4
                if (res->crcstate == 0)
 214:	0000                	unimp
 216:	0000                	unimp
        res->crc = crcu16(retval, res->crc);
 218:	5230                	lw	a2,96(a2)
 21a:	0000                	unimp
                    res->crcstate = retval;
 21c:	0024                	addi	s1,sp,8
	...
                retval = core_bench_matrix(&(res->mat), dtype, res->crc);
 226:	0000                	unimp
 228:	001c                	0x1c
 22a:	0000                	unimp
 22c:	0002                	c.slli64	zero
 22e:	605a                	flw	ft0,148(sp)
                if (res->crcmatrix == 0)
 230:	0000                	unimp
 232:	0004                	0x4
                retval = core_bench_matrix(&(res->mat), dtype, res->crc);
 234:	0000                	unimp
 236:	0000                	unimp
 238:	5254                	lw	a3,36(a2)
 23a:	0000                	unimp
                if (res->crcmatrix == 0)
 23c:	00b4                	addi	a3,sp,72
	...
                    res->crcmatrix = retval;
 246:	0000                	unimp
 248:	001c                	0x1c
 24a:	0000                	unimp
        res->crc = crcu16(retval, res->crc);
 24c:	0002                	c.slli64	zero
 24e:	6080                	flw	fs0,0(s1)
 250:	0000                	unimp
 252:	0004                	0x4
{
 254:	0000                	unimp
 256:	0000                	unimp
 258:	5308                	lw	a0,32(a4)
 25a:	0000                	unimp
 25c:	004c                	addi	a1,sp,4
	...
 266:	0000                	unimp
 268:	0014                	0x14
 26a:	0000                	unimp
 26c:	0002                	c.slli64	zero
 26e:	61d2                	flw	ft3,20(sp)
    ee_s16 val1 = calc_func(&(a->data16), res);
 270:	0000                	unimp
 272:	0004                	0x4
	...
 280:	001c                	0x1c
 282:	0000                	unimp
    ee_s16 val2 = calc_func(&(b->data16), res);
 284:	0002                	c.slli64	zero
 286:	000062b7          	lui	t0,0x6
}
 28a:	0004                	0x4
 28c:	0000                	unimp
 28e:	0000                	unimp
 290:	5a70                	lw	a2,116(a2)
 292:	0000                	unimp
 294:	07ec                	addi	a1,sp,972
	...

Disassembly of section .debug_str:

00000000 <.debug_str>:
lui     sp,%hi(__stack_top)                                             
       0:	6168732f          	vamoandei64.v	zero,(a6),v22,v6,v0.t
addi    sp,sp,%lo(__stack_top)
       4:	6572                	flw	fa0,28(sp)
       6:	2f64                	fld	fs1,216(a4)
jal   zero, _start
       8:	65726f63          	bltu	tp,s7,666 <core_bench_list+0x142>
       c:	616d                	addi	sp,sp,240
       e:	6b72                	flw	fs6,28(sp)
      10:	746e652f          	0x746e652f
      14:	7972                	flw	fs2,60(sp)
      16:	532e                	lw	t1,232(sp)
      18:	2f00                	fld	fs0,24(a4)
      1a:	72616873          	csrrsi	a6,0x726,2
      1e:	6465                	lui	s0,0x19
      20:	726f632f          	0x726f632f
      24:	6d65                	lui	s10,0x19
      26:	7261                	lui	tp,0xffff8
      28:	75622f6b          	0x75622f6b
      2c:	6c69                	lui	s8,0x1a
      2e:	0064                	addi	s1,sp,12
      30:	20554e47          	fmsub.s	ft8,fa0,ft5,ft4,rmm
      34:	5341                	li	t1,-16
      36:	3220                	fld	fs0,96(a2)
      38:	332e                	fld	ft6,232(sp)
      3a:	0035                	c.nop	13
      3c:	7469                	lui	s0,0xffffa
      3e:	6d65                	lui	s10,0x19
      40:	6d5f 646f 6669      	0x6669646f6d5f
      46:	6569                	lui	a0,0x1a
      48:	0064                	addi	s1,sp,12
      4a:	696c                	flw	fa1,84(a0)
      4c:	685f7473          	csrrci	s0,0x685,30
      50:	6165                	addi	sp,sp,112
      52:	5f64                	lw	s1,124(a4)
      54:	696c0073          	0x696c0073
      58:	685f7473          	csrrci	s0,0x685,30
      5c:	6165                	addi	sp,sp,112
      5e:	0064                	addi	s1,sp,12
      60:	6168732f          	vamoandei64.v	zero,(a6),v22,v6,v0.t
      64:	6572                	flw	fa0,28(sp)
      66:	2f64                	fld	fs1,216(a4)
      68:	65726f63          	bltu	tp,s7,6c6 <core_bench_list+0x1a2>
      6c:	616d                	addi	sp,sp,240
      6e:	6b72                	flw	fs6,28(sp)
      70:	726f632f          	0x726f632f
      74:	5f65                	li	t5,-7
      76:	696c                	flw	fa1,84(a0)
      78:	6a5f7473          	csrrci	s0,0x6a5,30
      7c:	2e6e696f          	jal	s2,e6362 <RAM_SIZE+0xd6362>
      80:	4e470063          	beq	a4,tp,560 <core_bench_list+0x3c>
      84:	2055                	jal	128 <calc_func+0x8>
      86:	20313143          	fmadd.s	ft2,ft2,ft3,ft4,rup
      8a:	3031                	jal	fffff896 <RAM_SIZE+0xfffef896>
      8c:	322e                	fld	ft4,232(sp)
      8e:	302e                	fld	ft0,232(sp)
      90:	2d20                	fld	fs0,88(a0)
      92:	616d                	addi	sp,sp,240
      94:	6372                	flw	ft6,28(sp)
      96:	3d68                	fld	fa0,248(a0)
      98:	7672                	flw	fa2,60(sp)
      9a:	20693233          	0x20693233
      9e:	6d2d                	lui	s10,0xb
      a0:	6261                	lui	tp,0x18
      a2:	3d69                	jal	ffffff3c <RAM_SIZE+0xfffeff3c>
      a4:	6c69                	lui	s8,0x1a
      a6:	3370                	fld	fa2,224(a4)
      a8:	2032                	fld	ft0,264(sp)
      aa:	6d2d                	lui	s10,0xb
      ac:	7261                	lui	tp,0xffff8
      ae:	723d6863          	bltu	s10,gp,7de <core_list_init+0x32>
      b2:	3376                	fld	ft6,376(sp)
      b4:	6932                	flw	fs2,12(sp)
      b6:	2d20                	fld	fs0,88(a0)
      b8:	4f2d2067          	0x4f2d2067
      bc:	2032                	fld	ft0,264(sp)
      be:	732d                	lui	t1,0xfffeb
      c0:	6474                	flw	fa3,76(s0)
      c2:	673d                	lui	a4,0xf
    if (res == NULL)
      c4:	756e                	flw	fa0,248(sp)
      c6:	3131                	jal	fffffcd2 <RAM_SIZE+0xfffefcd2>
    return a->idx - b->idx;
      c8:	7300                	flw	fs0,32(a4)
      ca:	6f68                	flw	fa0,92(a4)
      cc:	7472                	flw	fs0,60(sp)
      ce:	6920                	flw	fs0,80(a0)
}
      d0:	746e                	flw	fs0,248(sp)
      d2:	6300                	flw	fs0,0(a4)
      d4:	5f65726f          	jal	tp,576ca <RAM_SIZE+0x476ca>
        a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16 >> 8));
      d8:	696c                	flw	fa1,84(a0)
      da:	695f7473          	csrrci	s0,0x695,30
      de:	736e                	flw	ft6,248(sp)
      e0:	7265                	lui	tp,0xffff9
      e2:	5f74                	lw	a3,124(a4)
      e4:	656e                	flw	fa0,216(sp)
      e6:	61640077          	0x61640077
      ea:	7074                	flw	fa3,100(s0)
      ec:	7461                	lui	s0,0xffff8
      ee:	6400                	flw	fs0,8(s0)
      f0:	7974                	flw	fa3,116(a0)
      f2:	6570                	flw	fa2,76(a0)
        b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16 >> 8));
      f4:	6500                	flw	fs0,8(a0)
      f6:	5f65                	li	t5,-7
    return a->idx - b->idx;
      f8:	3875                	jal	fffff9b4 <RAM_SIZE+0xfffef9b4>
      fa:	6300                	flw	fs0,0(a4)
        b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16 >> 8));
      fc:	6372                	flw	ft6,28(sp)
      fe:	3631                	jal	fffffc0a <RAM_SIZE+0xfffefc0a>
     100:	6300                	flw	fs0,0(a4)
     102:	5f65726f          	jal	tp,576f8 <RAM_SIZE+0x476f8>
     106:	6562                	flw	fa0,24(sp)
     108:	636e                	flw	ft6,216(sp)
     10a:	5f68                	lw	a0,124(a4)
     10c:	696c                	flw	fa1,84(a0)
     10e:	4d007473          	csrrci	s0,0x4d0,0
     112:	5441                	li	s0,-16
    return a->idx - b->idx;
     114:	4144                	lw	s1,4(a0)
     116:	0054                	addi	a3,sp,4
}
     118:	6565                	lui	a0,0x19
     11a:	735f 3233 6400      	0x64003233735f
{
     120:	7461                	lui	s0,0xffff8
     122:	6261                	lui	tp,0x18
     124:	6f6c                	flw	fa1,92(a4)
     126:	70006b63          	bltu	zero,zero,83c <HEAP_SIZE+0x3c>
    ee_s16 data = *pdata;
     12a:	7265                	lui	tp,0xffff9
{
     12c:	695f 6574 006d      	0x6d6574695f
     132:	6572                	flw	fa0,28(sp)
          & 1;  /* bit 7 indicates if the function result has been cached */
     134:	7674                	flw	fa3,108(a2)
     136:	6c61                	lui	s8,0x18
{
     138:	6300                	flw	fs0,0(a4)
     13a:	5f65726f          	jal	tp,57730 <RAM_SIZE+0x47730>
     13e:	696c                	flw	fa1,84(a0)
    if (optype) /* if cached, use cache */
     140:	6d5f7473          	csrrci	s0,0x6d5,30
     144:	7265                	lui	tp,0xffff9
     146:	6f736567          	0x6f736567
}
     14a:	7472                	flw	fs0,60(sp)
        return (data & 0x007f);
     14c:	5200                	lw	s0,32(a2)
     14e:	5345                	li	t1,-15
}
     150:	4c55                	li	s8,21
     152:	5354                	lw	a3,36(a4)
     154:	535f 6300 706f      	0x706f6300535f
     15a:	5f79                	li	t5,-2
     15c:	6e69                	lui	t3,0x1a
     15e:	6f66                	flw	ft10,88(sp)
     160:	6300                	flw	fs0,0(a4)
     162:	5f65726f          	jal	tp,57758 <RAM_SIZE+0x47758>
     166:	6572                	flw	fa0,28(sp)
        ee_s16 flag = data & 0x7; /* bits 0-2 is type of function to perform */
     168:	746c7573          	csrrci	a0,0x746,24
               & 0xf);       /* bits 3-6 is specific data for the operation */
     16c:	6e690073          	0x6e690073
        ee_s16 dtype
     170:	74726573          	csrrsi	a0,0x747,4
        dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
     174:	705f 696f 746e      	0x746e696f705f
        ee_s16 flag = data & 0x7; /* bits 0-2 is type of function to perform */
     17a:	7300                	flw	fs0,32(a4)
                retval = core_bench_state(res->size,
     17c:	6565                	lui	a0,0x19
     17e:	3164                	fld	fs1,224(a0)
     180:	7300                	flw	fs0,32(a4)
     182:	6565                	lui	a0,0x19
        dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
     184:	3264                	fld	fs1,224(a2)
     186:	7300                	flw	fs0,32(a4)
        switch (flag)
     188:	6565                	lui	a0,0x19
     18a:	3364                	fld	fs1,224(a4)
     18c:	6300                	flw	fs0,0(a4)
     18e:	6372                	flw	ft6,28(sp)
     190:	696c                	flw	fa1,84(a0)
     192:	6d007473          	csrrci	s0,0x6d0,0
        res->crc = crcu16(retval, res->crc);
     196:	7369                	lui	t1,0xffffa
     198:	00646573          	csrrsi	a0,0x6,8
     19c:	6176                	flw	ft2,92(sp)
     19e:	316c                	fld	fa1,224(a0)
     1a0:	6600                	flw	fs0,8(a2)
     1a2:	6e69                	lui	t3,0x1a
     1a4:	6564                	flw	fs1,76(a0)
     1a6:	0072                	c.slli	zero,0x1c
     1a8:	6e69                	lui	t3,0x1a
     1aa:	657a6973          	csrrsi	s2,0x657,20
        *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
     1ae:	7000                	flw	fs0,32(s0)
        retval &= 0x007f;
     1b0:	6174726f          	jal	tp,47fc6 <RAM_SIZE+0x37fc6>
        *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
     1b4:	6c62                	flw	fs8,24(sp)
     1b6:	5f65                	li	t5,-7
        res->crc = crcu16(retval, res->crc);
     1b8:	6469                	lui	s0,0x1a
     1ba:	6c00                	flw	fs0,24(s0)
        *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
     1bc:	20676e6f          	jal	t3,763c2 <RAM_SIZE+0x663c2>
     1c0:	6f6c                	flw	fa1,92(a4)
     1c2:	676e                	flw	fa4,216(sp)
}
     1c4:	6920                	flw	fs0,80(a0)
     1c6:	746e                	flw	fs0,248(sp)
     1c8:	6300                	flw	fs0,0(a4)
     1ca:	5f65726f          	jal	tp,577c0 <RAM_SIZE+0x477c0>
     1ce:	696c                	flw	fa1,84(a0)
     1d0:	755f7473          	csrrci	s0,0x755,30
     1d4:	646e                	flw	fs0,216(sp)
     1d6:	65725f6f          	jal	t5,2602c <RAM_SIZE+0x1602c>
     1da:	6f6d                	lui	t5,0x1b
     1dc:	6576                	flw	fa0,92(sp)
     1de:	6c00                	flw	fs0,24(s0)
                retval = core_bench_state(res->size,
     1e0:	7369                	lui	t1,0xffffa
     1e2:	5f74                	lw	a3,124(a4)
     1e4:	00706d63          	bltu	zero,t2,1fe <calc_func+0xde>
     1e8:	65726f63          	bltu	tp,s7,846 <HEAP_SIZE+0x46>
     1ec:	625f 6e65 6863      	0x68636e65625f
     1f2:	735f 6174 6574      	0x65746174735f
     1f8:	6300                	flw	fs0,0(a4)
     1fa:	6372                	flw	ft6,28(sp)
     1fc:	74617473          	csrrci	s0,0x746,2
     200:	0065                	c.nop	25
     202:	636c6163          	bltu	s8,s6,824 <HEAP_SIZE+0x24>
     206:	665f 6e75 0063      	0x636e75665f
     20c:	6d6e                	flw	fs10,216(sp)
     20e:	7265                	lui	tp,0xffff9
     210:	00736567          	0x736567
                if (res->crcstate == 0)
     214:	696c                	flw	fa1,84(a0)
     216:	645f7473          	csrrci	s0,0x645,30
        res->crc = crcu16(retval, res->crc);
     21a:	7461                	lui	s0,0xffff8
                    res->crcstate = retval;
     21c:	5f61                	li	t5,-8
     21e:	6d630073          	0x6d630073
     222:	5f70                	lw	a2,124(a4)
                retval = core_bench_matrix(&(res->mat), dtype, res->crc);
     224:	6469                	lui	s0,0x1a
     226:	0078                	addi	a4,sp,12
     228:	656d                	lui	a0,0x1b
     22a:	626d                	lui	tp,0x1b
     22c:	6f6c                	flw	fa1,92(a4)
     22e:	655f6b63          	bltu	t5,s5,884 <HEAP_SIZE+0x84>
                if (res->crcmatrix == 0)
     232:	646e                	flw	fs0,216(sp)
                retval = core_bench_matrix(&(res->mat), dtype, res->crc);
     234:	6500                	flw	fs0,8(a0)
     236:	5f65                	li	t5,-7
     238:	3175                	jal	fffffee4 <RAM_SIZE+0xfffefee4>
     23a:	0036                	c.slli	zero,0xd
                if (res->crcmatrix == 0)
     23c:	65726f63          	bltu	tp,s7,89a <HEAP_SIZE+0x9a>
        res->crc = crcu16(retval, res->crc);
     240:	6c5f 7369 5f74      	0x5f7473696c5f
                    res->crcmatrix = retval;
     246:	6e69                	lui	t3,0x1a
     248:	7469                	lui	s0,0xffffa
     24a:	6300                	flw	fs0,0(a4)
        res->crc = crcu16(retval, res->crc);
     24c:	5f65726f          	jal	tp,57842 <RAM_SIZE+0x47842>
     250:	6562                	flw	fa0,24(sp)
     252:	636e                	flw	ft6,216(sp)
{
     254:	5f68                	lw	a0,124(a4)
     256:	616d                	addi	sp,sp,240
     258:	7274                	flw	fa3,100(a2)
     25a:	7869                	lui	a6,0xffffa
     25c:	7400                	flw	fs0,40(s0)
     25e:	6961                	lui	s2,0x18
    ee_s16 val1 = calc_func(&(a->data16), res);
     260:	006c                	addi	a1,sp,12
     262:	6e75                	lui	t3,0x1d
{
     264:	6e676973          	csrrsi	s2,0x6e6,14
     268:	6465                	lui	s0,0x19
     26a:	6320                	flw	fs0,64(a4)
     26c:	6168                	flw	fa0,68(a0)
     26e:	0072                	c.slli	zero,0x1c
    ee_s16 val1 = calc_func(&(a->data16), res);
     270:	65726f63          	bltu	tp,s7,8ce <HEAP_SIZE+0xce>
     274:	6c5f 7369 5f74      	0x5f7473696c5f
    ee_s16 val2 = calc_func(&(b->data16), res);
     27a:	6966                	flw	fs2,88(sp)
     27c:	646e                	flw	fs0,216(sp)
     27e:	7200                	flw	fs0,32(a2)
    ee_s16 val1 = calc_func(&(a->data16), res);
     280:	6d65                	lui	s10,0x19
     282:	7265766f          	jal	a2,579a8 <RAM_SIZE+0x479a8>
    ee_s16 val2 = calc_func(&(b->data16), res);
     286:	6d00                	flw	fs0,24(a0)
}
     288:	7461                	lui	s0,0xffff8
     28a:	705f 7261 6d61      	0x6d617261705f
     290:	72630073          	0x72630073
     294:	36317563          	bgeu	sp,gp,5fe <core_bench_list+0xda>
     298:	6c00                	flw	fs0,24(s0)
     29a:	7369                	lui	t1,0xffffa
     29c:	5f74                	lw	a3,124(a4)
     29e:	6164                	flw	fs1,68(a0)
    to->data16 = from->data16;
     2a0:	6174                	flw	fa3,68(a0)
     2a2:	7600                	flw	fs0,40(a2)
    to->idx    = from->idx;
     2a4:	6c61                	lui	s8,0x18
     2a6:	0032                	c.slli	zero,0xc
    to->data16 = from->data16;
     2a8:	6874                	flw	fa3,84(s0)
     2aa:	7369                	lui	t1,0xffffa
    to->idx    = from->idx;
     2ac:	665f 6e69 0064      	0x646e69665f
}
     2b2:	6c62                	flw	fs8,24(sp)
    if ((*memblock + 1) >= memblock_end)
     2b4:	7a69736b          	0x7a69736b
     2b8:	0065                	c.nop	25
     2ba:	726f6873          	csrrsi	a6,0x726,30
     2be:	2074                	fld	fa3,192(s0)
    if ((*datablock + 1) >= datablock_end)
     2c0:	6e75                	lui	t3,0x1d
     2c2:	6e676973          	csrrsi	s2,0x6e6,14
     2c6:	6465                	lui	s0,0x19
     2c8:	6920                	flw	fs0,80(a0)
     2ca:	746e                	flw	fs0,248(sp)
    (*memblock)++;
     2cc:	7000                	flw	fs0,32(s0)
     2ce:	6164                	flw	fs1,68(a0)
    newitem->next      = insert_point->next;
     2d0:	6174                	flw	fa3,68(a0)
     2d2:	4d00                	lw	s0,24(a0)
    to->data16 = from->data16;
     2d4:	5441                	li	s0,-16
     2d6:	4552                	lw	a0,20(sp)
    to->idx    = from->idx;
     2d8:	73710053          	0x73710053
    newitem->next      = insert_point->next;
     2dc:	7a69                	lui	s4,0xffffa
     2de:	0065                	c.nop	25
    insert_point->next = newitem;
     2e0:	65726f63          	bltu	tp,s7,93e <HEAP_SIZE+0x13e>
    newitem->info = *datablock;
     2e4:	6c5f 7369 5f74      	0x5f7473696c5f
    (*datablock)++;
     2ea:	6572                	flw	fa0,28(sp)
}
     2ec:	6f6d                	lui	t5,0x1b
     2ee:	6576                	flw	fa0,92(sp)
    (*datablock)++;
     2f0:	7300                	flw	fs0,32(a4)
     2f2:	6565                	lui	a0,0x19
     2f4:	0064                	addi	s1,sp,12
     2f6:	7469                	lui	s0,0xffffa
    copy_info(newitem->info, info);
     2f8:	6d65                	lui	s10,0x19
     2fa:	725f 6d65 766f      	0x766f6d65725f
    to->idx    = from->idx;
     300:	6465                	lui	s0,0x19
     302:	6500                	flw	fs0,8(a0)
}
     304:	5f65                	li	t5,-7
     306:	00363173          	csrrc	sp,fcsr,a2
        return NULL;
     30a:	6164                	flw	fs1,68(a0)
}
     30c:	6174                	flw	fa3,68(a0)
     30e:	6c62                	flw	fs8,24(sp)
     310:	5f6b636f          	jal	t1,b6906 <RAM_SIZE+0xa6906>
{
     314:	6e65                	lui	t3,0x19
     316:	0064                	addi	s1,sp,12
    list_head *ret = item->next;
     318:	5f706d63          	bltu	zero,s7,912 <HEAP_SIZE+0x112>
    tmp        = item->info;
     31c:	706d6f63          	bltu	s10,t1,a3a <main+0x52>
    item->info = ret->info;
     320:	656c                	flw	fa1,76(a0)
     322:	0078                	addi	a4,sp,12
    item->next = item->next->next;
     324:	7974706f          	j	482ba <RAM_SIZE+0x382ba>
    item->info = ret->info;
     328:	6570                	flw	fa2,76(a0)
     32a:	6300                	flw	fs0,0(a4)
    ret->info  = tmp;
     32c:	6372                	flw	ft6,28(sp)
     32e:	616d                	addi	sp,sp,240
    item->next = item->next->next;
     330:	7274                	flw	fa3,100(a2)
     332:	7869                	lui	a6,0xffffa
    ret->next  = NULL;
     334:	6600                	flw	fs0,8(a2)
     336:	6e69                	lui	t3,0x1a
}
     338:	6564                	flw	fs1,76(a0)
     33a:	5f72                	lw	t5,60(sp)
    item_removed->info  = item_modified->info;
     33c:	6469                	lui	s0,0x1a
     33e:	0078                	addi	a4,sp,12
    tmp                 = item_removed->info;
     340:	6f70                	flw	fa2,92(a4)
     342:	7472                	flw	fs0,60(sp)
    item_removed->next  = item_modified->next;
     344:	6500                	flw	fs0,8(a0)
     346:	6578                	flw	fa4,76(a0)
    item_removed->info  = item_modified->info;
     348:	43007363          	bgeu	zero,a6,76e <core_bench_list+0x24a>
    item_modified->info = tmp;
     34c:	5f45524f          	fnmadd.q	ft4,fa0,fs4,fa1,unknown
    item_removed->next  = item_modified->next;
     350:	4f50                	lw	a2,28(a4)
     352:	5452                	lw	s0,52(sp)
    item_modified->next = item_removed;
     354:	4241                	li	tp,16
     356:	454c                	lw	a1,12(a0)
}
     358:	535f 6400 7461      	0x74616400535f
    if (info->idx >= 0)
     35e:	3161                	jal	ffffffe6 <RAM_SIZE+0xfffeffe6>
     360:	0036                	c.slli	zero,0xd
     362:	6f66                	flw	ft10,88(sp)
        while (list && (list->info->idx != info->idx))
     364:	6e75                	lui	t3,0x1d
     366:	0064                	addi	s1,sp,12
     368:	7469                	lui	s0,0xffffa
     36a:	7265                	lui	tp,0xffff9
            list = list->next;
     36c:	7461                	lui	s0,0xffff8
     36e:	6f69                	lui	t5,0x1a
        while (list && (list->info->idx != info->idx))
     370:	736e                	flw	ft6,248(sp)
     372:	4d00                	lw	s0,24(a0)
     374:	5441                	li	s0,-16
     376:	505f 5241 4d41      	0x4d415241505f
     37c:	00535f53          	fadd.s	ft10,ft6,ft5,unknown
     380:	65726f63          	bltu	tp,s7,9de <iterate+0x7e>
        while (list && ((list->info->data16 & 0xff) != info->data16))
     384:	6c5f 7369 5f74      	0x5f7473696c5f
     38a:	6572                	flw	fa0,28(sp)
     38c:	6576                	flw	fa0,92(sp)
     38e:	7372                	flw	ft6,60(sp)
            list = list->next;
     390:	0065                	c.nop	25
     392:	5f5f 6475 7669      	0x766964755f5f
        while (list && ((list->info->data16 & 0xff) != info->data16))
     398:	00336973          	csrrsi	s2,fcsr,6
     39c:	656e                	flw	fa0,216(sp)
     39e:	65746977          	0x65746977
     3a2:	006d                	c.nop	27
     3a4:	6966                	flw	fs2,88(sp)
     3a6:	646e                	flw	fs0,216(sp)
     3a8:	6e5f 6d75 7000      	0x70006d756e5f
}
     3ae:	657a6973          	csrrsi	s2,0x657,20
     3b2:	6500                	flw	fs0,8(a0)
    while (list)
     3b4:	5f65                	li	t5,-7
     3b6:	3375                	jal	162 <calc_func+0x42>
    list_head *next = NULL, *tmp;
     3b8:	0032                	c.slli	zero,0xc
     3ba:	65726f63          	bltu	tp,s7,a18 <main+0x30>
     3be:	705f 726f 6174      	0x6174726f705f
        tmp        = list->next;
     3c4:	6c62                	flw	fs8,24(sp)
     3c6:	0065                	c.nop	25
        list->next = next;
     3c8:	7266                	flw	ft4,120(sp)
     3ca:	6e006d6f          	jal	s10,6aaa <__clz_tab+0x2e>
    while (list)
     3ce:	7865                	lui	a6,0xffff9
     3d0:	0074                	addi	a3,sp,12
     3d2:	5f5f 756d 736c      	0x736c756d5f5f
{
     3d8:	3369                	jal	162 <calc_func+0x42>
     3da:	6500                	flw	fs0,8(a0)
     3dc:	5f65                	li	t5,-7
     3de:	7270                	flw	fa2,100(a2)
     3e0:	6e69                	lui	t3,0x1a
     3e2:	6674                	flw	fa3,76(a2)
     3e4:	7300                	flw	fs0,32(a4)
     3e6:	6174                	flw	fa3,68(a0)
     3e8:	6574                	flw	fa3,76(a0)
     3ea:	6b5f 6f6e 6e77      	0x6e776f6e6b5f
     3f0:	635f 6372 6900      	0x69006372635f
     3f6:	6574                	flw	fa3,76(a0)
     3f8:	6172                	flw	ft2,28(sp)
     3fa:	6574                	flw	fa3,76(a0)
     3fc:	7400                	flw	fs0,40(s0)
     3fe:	6c61746f          	jal	s0,17ac4 <RAM_SIZE+0x7ac4>
     402:	655f 7272 726f      	0x726f7272655f
     408:	616d0073          	0x616d0073
     40c:	6e69                	lui	t3,0x1a
     40e:	7400                	flw	fs0,40(s0)
     410:	6d69                	lui	s10,0x1a
     412:	5f65                	li	t5,-7
     414:	6e69                	lui	t3,0x1a
     416:	735f 6365 0073      	0x736365735f
        if (nmerges <= 1) /* allow for nmerges==0, the empty list case */
     41c:	63656863          	bltu	a0,s6,a4c <main+0x64>
        while (p)
     420:	61645f6b          	0x61645f6b
        nmerges = 0; /* count number of merges we do in this pass */
     424:	6174                	flw	fa3,68(a0)
     426:	745f 7079 7365      	0x73657079745f
        list = NULL;
     42c:	7000                	flw	fs0,32(s0)
     42e:	6174726f          	jal	tp,48244 <RAM_SIZE+0x38244>
            nmerges++; /* there exists a merge to be done */
     432:	6c62                	flw	fs8,24(sp)
     434:	5f65                	li	t5,-7
     436:	6e69                	lui	t3,0x1a
            psize = 0;
     438:	7469                	lui	s0,0xffffa
     43a:	6d00                	flw	fs0,24(a0)
                q = q->next;
     43c:	6d65                	lui	s10,0x19
     43e:	6e5f 6d61 0065      	0x656d616e5f
                if (!q)
     444:	65726f63          	bltu	tp,s7,aa2 <main+0xba>
            for (i = 0; i < insize; i++)
     448:	695f 696e 5f74      	0x5f74696e695f
                    list = e;
     44e:	616d                	addi	sp,sp,240
     450:	7274                	flw	fa3,100(a2)
     452:	7869                	lui	a6,0xffffa
     454:	6100                	flw	fs0,0(a0)
     456:	6772                	flw	fa4,28(sp)
            while (psize > 0 || (qsize > 0 && q))
     458:	74730063          	beq	t1,t2,b98 <main+0x1b0>
                else if (qsize == 0 || !q)
     45c:	745f706f          	j	f83a0 <RAM_SIZE+0xe83a0>
     460:	6d69                	lui	s10,0x1a
     462:	0065                	c.nop	25
                else if (cmp(p->info, q->info, res) <= 0)
     464:	73636573          	csrrsi	a0,0x736,6
     468:	705f 7361 6573      	0x65737361705f
     46e:	0064                	addi	s1,sp,12
     470:	6f70                	flw	fa2,92(a4)
     472:	7472                	flw	fs0,60(sp)
     474:	6261                	lui	tp,0x18
     476:	656c                	flw	fa1,76(a0)
                    qsize--;
     478:	665f 6e69 0069      	0x696e69665f
                    q = q->next;
     47e:	696c                	flw	fa1,84(a0)
                    qsize--;
     480:	6b5f7473          	csrrci	s0,0x6b5,30
                if (tail)
     484:	6f6e                	flw	ft10,216(sp)
     486:	635f6e77          	0x635f6e77
                    tail->next = e;
     48a:	6372                	flw	ft6,28(sp)
                    list = e;
     48c:	6400                	flw	fs0,8(s0)
     48e:	6665                	lui	a2,0x19
            while (psize > 0 || (qsize > 0 && q))
     490:	7561                	lui	a0,0xffff8
     492:	746c                	flw	fa1,108(s0)
     494:	6e5f 6d75 635f      	0x635f6d756e5f
     49a:	65746e6f          	jal	t3,472f0 <RAM_SIZE+0x372f0>
                    qsize--;
     49e:	7478                	flw	fa4,108(s0)
     4a0:	65730073          	0x65730073
                    q = q->next;
     4a4:	6465                	lui	s0,0x19
     4a6:	00637263          	bgeu	t1,t1,4aa <core_list_mergesort+0xd2>
                if (tail)
     4aa:	6168732f          	vamoandei64.v	zero,(a6),v22,v6,v0.t
                    list = e;
     4ae:	6572                	flw	fa0,28(sp)
     4b0:	2f64                	fld	fs1,216(a4)
     4b2:	65726f63          	bltu	tp,s7,b10 <main+0x128>
     4b6:	616d                	addi	sp,sp,240
                    psize--;
     4b8:	6b72                	flw	fs6,28(sp)
     4ba:	726f632f          	0x726f632f
     4be:	5f65                	li	t5,-7
                    p = p->next;
     4c0:	616d                	addi	sp,sp,240
     4c2:	6e69                	lui	t3,0x1a
     4c4:	632e                	flw	ft6,200(sp)
     4c6:	6800                	flw	fs0,16(s0)
        while (p)
     4c8:	6c65                	lui	s8,0x19
     4ca:	6f6c                	flw	fa1,92(a4)
        tail->next = NULL;
     4cc:	7300                	flw	fs0,32(a4)
     4ce:	6365                	lui	t1,0x19
        if (nmerges <= 1) /* allow for nmerges==0, the empty list case */
     4d0:	65725f73          	csrrwi	t5,0x657,4
        insize *= 2;
     4d4:	0074                	addi	a3,sp,12
     4d6:	5f746567          	0x5f746567
        p    = list;
     4da:	6974                	flw	fa3,84(a0)
     4dc:	656d                	lui	a0,0x1b
     4de:	6b00                	flw	fs0,16(a4)
        tail->next = NULL;
     4e0:	6f6e                	flw	ft10,216(sp)
     4e2:	695f6e77          	0x695f6e77
     4e6:	0064                	addi	s1,sp,12
}
     4e8:	7261                	lui	tp,0xffff8
     4ea:	6d007667          	0x6d007667
     4ee:	7461                	lui	s0,0xffff8
     4f0:	6972                	flw	fs2,28(sp)
     4f2:	5f78                	lw	a4,124(a4)
     4f4:	776f6e6b          	0x776f6e6b
     4f8:	5f6e                	lw	t5,248(sp)
     4fa:	00637263          	bgeu	t1,t1,4fe <core_list_mergesort+0x126>
     4fe:	72617473          	csrrci	s0,0x726,2
     502:	5f74                	lw	a3,124(a4)
     504:	6974                	flw	fa3,84(a0)
     506:	656d                	lui	a0,0x1b
     508:	7400                	flw	fs0,40(s0)
     50a:	6c61746f          	jal	s0,17bd0 <RAM_SIZE+0x7bd0>
     50e:	745f 6d69 0065      	0x656d69745f
     514:	63617473          	csrrci	s0,0x636,2
     518:	656d5f6b          	0x656d5f6b
     51c:	626d                	lui	tp,0x1b
     51e:	6f6c                	flw	fa1,92(a4)
     520:	67006b63          	bltu	zero,a6,b96 <main+0x1ae>
{
     524:	7465                	lui	s0,0xffff9
     526:	735f 6565 5f64      	0x5f646565735f
     52c:	63003233          	0x63003233
     530:	5f65726f          	jal	tp,57b26 <RAM_SIZE+0x47b26>
     534:	6e69                	lui	t3,0x1a
     536:	7469                	lui	s0,0xffffa
     538:	735f 6174 6574      	0x65746174735f
     53e:	7500                	flw	fs0,40(a0)
     540:	7261                	lui	tp,0xffff8
     542:	5f74                	lw	a3,124(a4)
     544:	646e6573          	csrrsi	a0,0x646,28
     548:	635f 6168 0072      	0x726168635f
    list_head *list     = res->list;
     54e:	756e                	flw	fa0,248(sp)
    for (i = 0; i < find_num; i++)
     550:	5f6d                	li	t5,-5
     552:	6c61                	lui	s8,0x18
    info.idx = finder_idx;
     554:	69726f67          	0x69726f67
    for (i = 0; i < find_num; i++)
     558:	6874                	flw	fa3,84(s0)
     55a:	736d                	lui	t1,0xffffb
    ee_u16     found = 0, missed = 0;
     55c:	7000                	flw	fs0,32(s0)
     55e:	6572                	flw	fa0,28(sp)
     560:	4f430073          	0x4f430073
    ee_u16     retval = 0;
     564:	4552                	lw	a0,20(sp)
     566:	545f 4349 534b      	0x534b4349545f
    if (info->idx >= 0)
     56c:	6400                	flw	fs0,8(s0)
     56e:	7669                	lui	a2,0xffffa
        while (list && (list->info->idx != info->idx))
     570:	7369                	lui	t1,0xffffa
     572:	6d00726f          	jal	tp,7c42 <__heap_end+0x3b2>
     576:	7461                	lui	s0,0xffff8
     578:	6972                	flw	fs2,28(sp)
     57a:	5f78                	lw	a4,124(a4)
            list = list->next;
     57c:	006d7573          	csrrci	a0,0x6,26
        while (list && (list->info->idx != info->idx))
     580:	656d                	lui	a0,0x1b
     582:	626d                	lui	tp,0x1b
     584:	6b6c                	flw	fa1,84(a4)
     586:	6d00                	flw	fs0,24(a0)
     588:	7461                	lui	s0,0xffff8
     58a:	6972                	flw	fs2,28(sp)
     58c:	5f78                	lw	a4,124(a4)
     58e:	756d                	lui	a0,0xffffb
    list_head *next = NULL, *tmp;
     590:	5f6c                	lw	a1,124(a4)
     592:	616d                	addi	sp,sp,240
     594:	7274                	flw	fa3,100(a2)
     596:	7869                	lui	a6,0xffffa
     598:	625f 7469 7865      	0x78657469625f
     59e:	7274                	flw	fa3,100(a2)
        tmp        = list->next;
     5a0:	6361                	lui	t1,0x18
     5a2:	0074                	addi	a3,sp,12
        list->next = next;
     5a4:	5f5f 7562 6c69      	0x6c6975625f5f
    while (list)
     5aa:	6974                	flw	fa3,84(a0)
        if (this_find == NULL)
     5ac:	5f6e                	lw	t5,248(sp)
     5ae:	656d                	lui	a0,0x1b
            if (this_find->info->data16 & 0x1) /* use found value */
     5b0:	736d                	lui	t1,0xffffb
     5b2:	7465                	lui	s0,0xffff9
            found++;
     5b4:	2f00                	fld	fs0,24(a4)
     5b6:	72616873          	csrrsi	a6,0x726,2
     5ba:	6465                	lui	s0,0x19
            if (this_find->info->data16 & 0x1) /* use found value */
     5bc:	726f632f          	0x726f632f
            found++;
     5c0:	6d65                	lui	s10,0x19
     5c2:	7261                	lui	tp,0xffff8
            if (this_find->info->data16 & 0x1) /* use found value */
     5c4:	6f632f6b          	0x6f632f6b
     5c8:	6572                	flw	fa0,28(sp)
     5ca:	6d5f 7461 6972      	0x697274616d5f
                retval += (this_find->info->data16 >> 9) & 1;
     5d0:	2e78                	fld	fa4,216(a2)
     5d2:	616d0063          	beq	s10,s6,bd2 <main+0x1ea>
     5d6:	7274                	flw	fa3,100(a2)
     5d8:	7869                	lui	a6,0xffffa
     5da:	745f 7365 0074      	0x747365745f
            if (this_find->next != NULL)
     5e0:	70696c63          	bltu	s2,t1,cf8 <main+0x310>
     5e4:	6176                	flw	ft2,92(sp)
     5e6:	006c                	addi	a1,sp,12
                this_find->next = finder->next;
     5e8:	616d                	addi	sp,sp,240
     5ea:	7274                	flw	fa3,100(a2)
     5ec:	7869                	lui	a6,0xffffa
     5ee:	6d5f 6c75 765f      	0x765f6c756d5f
                finder->next    = list->next;
     5f4:	6365                	lui	t1,0x19
     5f6:	0074                	addi	a3,sp,12
                list->next      = finder;
     5f8:	616d                	addi	sp,sp,240
     5fa:	7274                	flw	fa3,100(a2)
        if (info.idx >= 0)
     5fc:	7869                	lui	a6,0xffffa
     5fe:	615f 6464 635f      	0x635f6464615f
            info.idx++;
     604:	74736e6f          	jal	t3,3754a <RAM_SIZE+0x2754a>
     608:	6500                	flw	fs0,8(a0)
     60a:	5f65                	li	t5,-7
    for (i = 0; i < find_num; i++)
     60c:	7470                	flw	fa2,108(s0)
     60e:	5f72                	lw	t5,60(sp)
     610:	6e69                	lui	t3,0x1a
     612:	0074                	addi	a3,sp,12
     614:	616d                	addi	sp,sp,240
     616:	7274                	flw	fa3,100(a2)
     618:	7869                	lui	a6,0xffffa
     61a:	6d5f 6c75 635f      	0x635f6c756d5f
    retval += found * 4 - missed;
     620:	74736e6f          	jal	t3,37566 <RAM_SIZE+0x27566>
     624:	6d00                	flw	fs0,24(a0)
     626:	7461                	lui	s0,0xffff8
     628:	6972                	flw	fs2,28(sp)
     62a:	5f78                	lw	a4,124(a4)
     62c:	756d                	lui	a0,0xffffb
     62e:	5f6c                	lw	a1,124(a4)
    if (finder_idx > 0)
     630:	616d                	addi	sp,sp,240
     632:	7274                	flw	fa3,100(a2)
        list = core_list_mergesort(list, cmp_complex, res);
     634:	7869                	lui	a6,0xffffa
     636:	6f00                	flw	fs0,24(a4)
     638:	6472                	flw	fs0,28(sp)
     63a:	7265                	lui	tp,0xffff9
     63c:	7000                	flw	fs0,32(s0)
     63e:	6572                	flw	fa0,28(sp)
     640:	0076                	c.slli	zero,0x1d
     642:	6974                	flw	fa3,84(a0)
    remover = core_list_remove(list->next);
     644:	00736b63          	bltu	t1,t2,65a <core_bench_list+0x136>
    list_head *ret = item->next;
     648:	6c65                	lui	s8,0x19
     64a:	7061                	c.lui	zero,0xffff8
     64c:	00646573          	csrrsi	a0,0x6,8
    tmp        = item->info;
     650:	64656573          	csrrsi	a0,0x646,10
    item->info = ret->info;
     654:	6f765f33          	cmov	t5,s7,a2,a3
    item->next = item->next->next;
     658:	616c                	flw	fa1,68(a0)
     65a:	6974                	flw	fa3,84(a0)
    item->info = ret->info;
     65c:	656c                	flw	fa1,76(a0)
     65e:	6200                	flw	fs0,0(a2)
    ret->info  = tmp;
     660:	7261                	lui	tp,0xffff8
     662:	6265                	lui	tp,0x19
    item->next = item->next->next;
     664:	73656e6f          	jal	t3,56d9a <RAM_SIZE+0x46d9a>
    ret->next  = NULL;
     668:	635f 6f6c 6b63      	0x6b636f6c635f
    if (info->idx >= 0)
     66e:	2f00                	fld	fs0,24(a4)
        while (list && (list->info->idx != info->idx))
     670:	72616873          	csrrsi	a6,0x726,2
     674:	6465                	lui	s0,0x19
     676:	726f632f          	0x726f632f
     67a:	6d65                	lui	s10,0x19
            list = list->next;
     67c:	7261                	lui	tp,0xffff8
     67e:	6f632f6b          	0x6f632f6b
        while (list && (list->info->idx != info->idx))
     682:	6572                	flw	fa0,28(sp)
        finder = list->next;
     684:	705f 726f 6d74      	0x6d74726f705f
    while (finder)
     68a:	2e65                	jal	a42 <main+0x5a>
        retval = crc16(list->info->data16, retval);
     68c:	74730063          	beq	t1,t2,dcc <main+0x3e4>
     690:	7261                	lui	tp,0xffff8
     692:	5f74                	lw	a3,124(a4)
     694:	6974                	flw	fa3,84(a0)
     696:	656d                	lui	a0,0x1b
     698:	765f 6c61 7400      	0x74006c61765f
        finder = finder->next;
     69e:	6d69                	lui	s10,0x1a
        retval = crc16(list->info->data16, retval);
     6a0:	5f65                	li	t5,-7
     6a2:	7470                	flw	fa2,108(s0)
    while (finder)
     6a4:	0072                	c.slli	zero,0x1c
     6a6:	64656573          	csrrsi	a0,0x646,10
    remover = core_list_undo_remove(remover, list->next);
     6aa:	5f34                	lw	a3,120(a4)
    tmp                 = item_removed->info;
     6ac:	6f76                	flw	ft10,92(sp)
     6ae:	616c                	flw	fa1,68(a0)
    item_removed->info  = item_modified->info;
     6b0:	6974                	flw	fa3,84(a0)
     6b2:	656c                	flw	fa1,76(a0)
    item_removed->next  = item_modified->next;
     6b4:	7300                	flw	fs0,32(a4)
     6b6:	6f74                	flw	fa3,92(a4)
    item_removed->info  = item_modified->info;
     6b8:	5f70                	lw	a2,124(a4)
     6ba:	6974                	flw	fa3,84(a0)
    item_modified->info = tmp;
     6bc:	656d                	lui	a0,0x1b
     6be:	765f 6c61 7300      	0x73006c61765f
    list = core_list_mergesort(list, cmp_idx, NULL);
     6c4:	6565                	lui	a0,0x19
     6c6:	3264                	fld	fs1,224(a2)
    item_modified->next = item_removed;
     6c8:	765f 6c6f 7461      	0x74616c6f765f
    list = core_list_mergesort(list, cmp_idx, NULL);
     6ce:	6c69                	lui	s8,0x1a
     6d0:	0065                	c.nop	25
     6d2:	64656573          	csrrsi	a0,0x646,10
     6d6:	5f31                	li	t5,-20
    finder = list->next;
     6d8:	6f76                	flw	ft10,92(sp)
     6da:	616c                	flw	fa1,68(a0)
    list = core_list_mergesort(list, cmp_idx, NULL);
     6dc:	6974                	flw	fa3,84(a0)
     6de:	656c                	flw	fa1,76(a0)
    while (finder)
     6e0:	7300                	flw	fs0,32(a4)
     6e2:	6565                	lui	a0,0x19
        retval = crc16(list->info->data16, retval);
     6e4:	3564                	fld	fs1,232(a0)
     6e6:	765f 6c6f 7461      	0x74616c6f765f
     6ec:	6c69                	lui	s8,0x1a
     6ee:	0065                	c.nop	25
     6f0:	45524f43          	fmadd.h	ft10,ft4,fs5,fs0,rmm
        finder = finder->next;
     6f4:	535f 4154 4554      	0x45544154535f
        retval = crc16(list->info->data16, retval);
     6fa:	6300                	flw	fs0,0(a4)
    while (finder)
     6fc:	5f65726f          	jal	tp,57cf2 <RAM_SIZE+0x47cf2>
}
     700:	74617473          	csrrci	s0,0x746,2
     704:	5f65                	li	t5,-7
     706:	7274                	flw	fa3,100(a2)
     708:	6e61                	lui	t3,0x18
     70a:	69746973          	csrrsi	s2,0x697,8
     70e:	66006e6f          	jal	t3,6d6e <impure_data+0x19e>
     712:	6f6c                	flw	fa1,92(a4)
     714:	7461                	lui	s0,0xffff8
     716:	6170                	flw	fa2,68(a0)
     718:	0074                	addi	a3,sp,12
     71a:	75637263          	bgeu	t1,s6,e5e <main+0x476>
     71e:	69003233          	0x69003233
     722:	746e                	flw	fs0,248(sp)
     724:	6170                	flw	fa2,68(a0)
     726:	0074                	addi	a3,sp,12
        while (list && ((list->info->data16 & 0xff) != info->data16))
     728:	45524f43          	fmadd.h	ft10,ft4,fs5,fs0,rmm
     72c:	535f 4943 4e45      	0x4e454943535f
     732:	4954                	lw	a3,20(a0)
            list = list->next;
     734:	4946                	lw	s2,80(sp)
     736:	69660043          	fmadd.s	ft0,fa2,fs6,fa3,rne
        while (list && ((list->info->data16 & 0xff) != info->data16))
     73a:	616e                	flw	ft2,216(sp)
        finder = list->next;
     73c:	5f6c                	lw	a1,124(a4)
     73e:	6e756f63          	bltu	a0,t2,e3c <main+0x454>
    while (finder)
     742:	7374                	flw	fa3,100(a4)
     744:	7400                	flw	fs0,40(s0)
     746:	6172                	flw	ft2,28(sp)
        while (list && ((list->info->data16 & 0xff) != info->data16))
     748:	635f6b63          	bltu	t5,s5,d7e <main+0x396>
     74c:	746e756f          	jal	a0,e7e92 <RAM_SIZE+0xd7e92>
     750:	72740073          	0x72740073
            list = list->next;
     754:	6e61                	lui	t3,0x18
     756:	69746973          	csrrsi	s2,0x697,8
        while (list && ((list->info->data16 & 0xff) != info->data16))
     75a:	635f6e6f          	jal	t3,f758e <RAM_SIZE+0xe758e>
     75e:	746e756f          	jal	a0,e7ea4 <RAM_SIZE+0xd7ea4>
     762:	4300                	lw	s0,0(a4)
     764:	5f45524f          	fnmadd.q	ft4,fa0,fs4,fa1,unknown
     768:	5845                	li	a6,-15
     76a:	4f50                	lw	a2,28(a4)
            retval += (list->next->info->data16 >> 8) & 1;
     76c:	454e                	lw	a0,208(sp)
     76e:	544e                	lw	s0,240(sp)
            missed++;
     770:	6900                	flw	fs0,16(a0)
     772:	736e                	flw	ft6,248(sp)
     774:	7274                	flw	fa3,100(a2)
     776:	4300                	lw	s0,0(a4)
            retval += (list->next->info->data16 >> 8) & 1;
     778:	5f45524f          	fnmadd.q	ft4,fa0,fs4,fa1,unknown
            missed++;
     77c:	4e49                	li	t3,18
     77e:	0054                	addi	a3,sp,4
            retval += (list->next->info->data16 >> 8) & 1;
     780:	45524f43          	fmadd.h	ft10,ft4,fs5,fs0,rmm
     784:	535f 4154 5452      	0x54524154535f
     78a:	6600                	flw	fs0,8(a2)
     78c:	74617473          	csrrci	s0,0x746,2
     790:	0065                	c.nop	25
     792:	7265                	lui	tp,0xffff9
     794:	7072                	flw	ft0,60(sp)
     796:	7461                	lui	s0,0xffff8
    info.idx = finder_idx;
     798:	2f00                	fld	fs0,24(a4)
     79a:	72616873          	csrrsi	a6,0x726,2
    for (i = 0; i < find_num; i++)
     79e:	6465                	lui	s0,0x19
     7a0:	726f632f          	0x726f632f
            retval += (list->next->info->data16 >> 8) & 1;
     7a4:	6d65                	lui	s10,0x19
     7a6:	7261                	lui	tp,0xffff8
     7a8:	6f632f6b          	0x6f632f6b
{
     7ac:	6572                	flw	fa0,28(sp)
     7ae:	735f 6174 6574      	0x65746174735f
     7b4:	632e                	flw	ft6,200(sp)
     7b6:	4300                	lw	s0,0(a4)
    ee_u32 size     = (blksize / per_item)
     7b8:	5f45524f          	fnmadd.q	ft4,fa0,fs4,fa1,unknown
{
     7bc:	4e49                	li	t3,18
     7be:	4156                	lw	sp,84(sp)
     7c0:	494c                	lw	a1,20(a0)
     7c2:	0044                	addi	s1,sp,4
     7c4:	6565                	lui	a0,0x19
     7c6:	695f 6473 6769      	0x67696473695f
     7cc:	7469                	lui	s0,0xffffa
     7ce:	4300                	lw	s0,0(a4)
    ee_u32 size     = (blksize / per_item)
     7d0:	5f45524f          	fnmadd.q	ft4,fa0,fs4,fa1,unknown
     7d4:	4c46                	lw	s8,80(sp)
     7d6:	0054414f          	fnmadd.s	ft2,fs0,ft5,ft0,rmm
    list_head *memblock_end  = memblock + size;
     7da:	454e                	lw	a0,208(sp)
     7dc:	5458                	lw	a4,44(s0)
     7de:	535f 4d59 4f42      	0x4f424d59535f
    list->next         = NULL;
     7e4:	004c                	addi	a1,sp,4
     7e6:	554e                	lw	a0,240(sp)
    list->info         = datablock;
     7e8:	5f4d                	li	t5,-13
     7ea:	45524f43          	fmadd.h	ft10,ft4,fs5,fs0,rmm
    list->info->data16 = (ee_s16)0x8080;
     7ee:	535f 4154 4554      	0x45544154535f
     7f4:	4f430053          	0x4f430053
    list->info->idx    = 0x0000;
     7f8:	4552                	lw	a0,20(sp)
     7fa:	535f 0031 4f43      	0x4f430031535f
    list_data *datablock_end = datablock + size;
     800:	4552                	lw	a0,20(sp)
     802:	535f 0032 6373      	0x63730032535f
    datablock++;
     808:	7069                	c.lui	zero,0xffffa
     80a:	7461                	lui	s0,0xffff8
    if ((*memblock + 1) >= memblock_end)
     80c:	7400                	flw	fs0,40(s0)
     80e:	6c61746f          	jal	s0,17ed4 <RAM_SIZE+0x7ed4>
    if ((*datablock + 1) >= datablock_end)
     812:	7300                	flw	fs0,32(a4)
     814:	6574                	flw	fa3,76(a0)
     816:	0070                	addi	a2,sp,12
    newitem->info = *datablock;
     818:	72726163          	bltu	tp,t2,f3a <main+0x552>
    newitem->next      = insert_point->next;
     81c:	0079                	c.nop	30
     81e:	656e                	flw	fa0,216(sp)
    insert_point->next = newitem;
     820:	6c617677          	0x6c617677
    to->idx    = from->idx;
     824:	6300                	flw	fs0,0(a4)
     826:	6372                	flw	ft6,28(sp)
    to->data16 = from->data16;
     828:	3875                	jal	e4 <cmp_idx+0x20>
     82a:	2f00                	fld	fs0,24(a4)
     82c:	72616873          	csrrsi	a6,0x726,2
    to->idx    = from->idx;
     830:	6465                	lui	s0,0x19
     832:	726f632f          	0x726f632f
    for (i = 0; i < size; i++)
     836:	6d65                	lui	s10,0x19
            ee_u16 pat = (ee_u16)(i++ ^ seed); /* get a pseudo random number */
     838:	7261                	lui	tp,0xffff8
     83a:	6f632f6b          	0x6f632f6b
    to->idx    = from->idx;
     83e:	6572                	flw	fa0,28(sp)
            ee_u16 pat = (ee_u16)(i++ ^ seed); /* get a pseudo random number */
     840:	755f 6974 2e6c      	0x2e6c6974755f
     846:	65640063          	beq	s0,s6,e86 <main+0x49e>
    to->idx    = from->idx;
     84a:	00747063          	bgeu	s0,t2,84a <HEAP_SIZE+0x4a>
    if ((*datablock + 1) >= datablock_end)
     84e:	5f5f 6964 6476      	0x647669645f5f
        ee_u16 datpat = ((ee_u16)(seed ^ i) & 0xf);
     854:	3366                	fld	ft6,120(sp)
     856:	5f00                	lw	s0,56(a4)
            = (datpat << 3) | (i & 0x7); /* alternate between algorithms */
     858:	615f 6464 6664      	0x66646464615f
     85e:	5f5f0033          	0x5f5f0033
     862:	6966                	flw	fs2,88(sp)
        ee_u16 dat
     864:	6478                	flw	fa4,76(s0)
     866:	7366                	flw	ft6,120(sp)
        info.data16 = (dat << 8) | dat;  /* fill the data with actual data and
     868:	0069                	c.nop	26
     86a:	5f5f 7467 6664      	0x666474675f5f
    for (i = 0; i < size; i++)
     870:	0032                	c.slli	zero,0xc
     872:	5f5f 656e 6664      	0x6664656e5f5f
        info.data16 = (dat << 8) | dat;  /* fill the data with actual data and
     878:	0032                	c.slli	zero,0xc
     87a:	6366                	flw	ft6,88(sp)
    if ((*memblock + 1) >= memblock_end)
     87c:	7476                	flw	fs0,124(sp)
     87e:	7562                	flw	fa0,56(sp)
    if ((*datablock + 1) >= datablock_end)
     880:	0066                	c.slli	zero,0x19
     882:	6365                	lui	t1,0x19
    newitem->next      = insert_point->next;
     884:	7476                	flw	fs0,124(sp)
     886:	7562                	flw	fa0,56(sp)
    insert_point->next = newitem;
     888:	0066                	c.slli	zero,0x19
     88a:	6168732f          	vamoandei64.v	zero,(a6),v22,v6,v0.t
    newitem->info = *datablock;
     88e:	6572                	flw	fa0,28(sp)
    to->data16 = from->data16;
     890:	2f64                	fld	fs1,216(a4)
     892:	65726f63          	bltu	tp,s7,ef0 <main+0x508>
    to->idx    = from->idx;
     896:	616d                	addi	sp,sp,240
    return newitem;
     898:	6b72                	flw	fs6,28(sp)
     89a:	7476632f          	0x7476632f
     89e:	632e                	flw	ft6,200(sp)
     8a0:	6500                	flw	fs0,8(a0)
     8a2:	00747663          	bgeu	s0,t2,8ae <HEAP_SIZE+0xae>
    for (i = 0; i < size; i++)
     8a6:	5f5f 746c 6664      	0x6664746c5f5f
    while (finder->next != NULL)
     8ac:	0032                	c.slli	zero,0xc
     8ae:	42545643          	fmadd.d	fa2,fs0,ft5,fs0,unknown
        if (i < size / 5) /* first 20% of the list in order */
     8b2:	4655                	li	a2,21
     8b4:	6e00                	flw	fs0,24(a2)
     8b6:	6964                	flw	fs1,84(a0)
                                & (((i & 0x07) << 8)
     8b8:	73746967          	0x73746967
        if (i < size / 5) /* first 20% of the list in order */
     8bc:	6c00                	flw	fs0,24(s0)
     8be:	20676e6f          	jal	t3,76ac4 <RAM_SIZE+0x66ac4>
     8c2:	6f6c                	flw	fa1,92(a4)
                                & (((i & 0x07) << 8)
     8c4:	676e                	flw	fa4,216(sp)
     8c6:	7520                	flw	fs0,104(a0)
     8c8:	736e                	flw	ft6,248(sp)
     8ca:	6769                	lui	a4,0x1a
    while (finder->next != NULL)
     8cc:	656e                	flw	fa0,216(sp)
     8ce:	2064                	fld	fs1,192(s0)
     8d0:	6e69                	lui	t3,0x1a
     8d2:	0074                	addi	a3,sp,12
            finder->info->idx = i++;
     8d4:	6665                	lui	a2,0x19
     8d6:	616c                	flw	fa1,68(a0)
    while (finder->next != NULL)
     8d8:	6f6d0067          	jr	1782(s10) # 196f6 <RAM_SIZE+0x96f6>
     8dc:	6664                	flw	fs1,76(a2)
     8de:	5f00                	lw	s0,56(a4)
     8e0:	6d5f 6c75 6664      	0x66646c756d5f
     8e6:	63660033          	0x63660033
     8ea:	7476                	flw	fs0,124(sp)
     8ec:	7300                	flw	fs0,32(a4)
     8ee:	6769                	lui	a4,0x1a
            ee_u16 pat = (ee_u16)(i++ ^ seed); /* get a pseudo random number */
     8f0:	006e                	c.slli	zero,0x1b
     8f2:	6e727473          	csrrci	s0,0x6e7,4
                                & (((i & 0x07) << 8)
     8f6:	656c                	flw	fa1,76(a0)
                                   | pat); /* make sure the mixed items end up
     8f8:	006e                	c.slli	zero,0x1b
     8fa:	5f5f 7562 6c69      	0x6c6975625f5f
            finder->info->idx = i++;
     900:	6974                	flw	fa3,84(a0)
     902:	5f6e                	lw	t5,248(sp)
        if (i < size / 5) /* first 20% of the list in order */
     904:	656d                	lui	a0,0x1b
     906:	636d                	lui	t1,0x1b
            finder->info->idx = 0x3fff
     908:	7970                	flw	fa2,116(a0)
     90a:	5f00                	lw	s0,56(a4)
    while (finder->next != NULL)
     90c:	6d5f 646f 6973      	0x6973646f6d5f
     912:	69660033          	0x69660033
     916:	6c65                	lui	s8,0x19
     918:	5f64                	lw	s1,124(a4)
     91a:	74646977          	0x74646977
     91e:	0068                	addi	a0,sp,12
     920:	6572                	flw	fa0,28(sp)
     922:	6570                	flw	fa2,76(a0)
     924:	7461                	lui	s0,0xffff8
     926:	7500                	flw	fs0,40(a0)
}
     928:	7261                	lui	tp,0xffff8
     92a:	0074                	addi	a3,sp,12
     92c:	6165                	addi	sp,sp,112
     92e:	6464                	flw	fs1,76(s0)
     930:	0072                	c.slli	zero,0x1c
     932:	7075                	c.lui	zero,0xffffd
     934:	6570                	flw	fa2,76(a0)
     936:	5f72                	lw	t5,60(sp)
    list = core_list_mergesort(list, cmp_idx, NULL);
     938:	6964                	flw	fs1,84(a0)
     93a:	73746967          	0x73746967
}
     93e:	2f00                	fld	fs0,24(a4)
    list = core_list_mergesort(list, cmp_idx, NULL);
     940:	72616873          	csrrsi	a6,0x726,2
     944:	6465                	lui	s0,0x19
     946:	726f632f          	0x726f632f
}
     94a:	6d65                	lui	s10,0x19
    list = core_list_mergesort(list, cmp_idx, NULL);
     94c:	7261                	lui	tp,0xffff8
     94e:	65652f6b          	0x65652f6b
    memblock++;
     952:	705f 6972 746e      	0x746e6972705f
    datablock++;
     958:	2e66                	fld	ft8,88(sp)
     95a:	5f5f0063          	beq	t5,s5,f3a <main+0x552>
     95e:	6964                	flw	fs1,84(a0)
{
     960:	7376                	flw	ft6,124(sp)
     962:	3369                	jal	6ec <core_bench_list+0x1c8>
     964:	6600                	flw	fs0,8(a2)
     966:	616c                	flw	fa1,68(a0)
    ee_u32        iterations = res->iterations;
     968:	61007367          	0x61007367
{
     96c:	6772                	flw	fa4,28(sp)
     96e:	61690073          	0x61690073
     972:	6464                	flw	fs1,76(s0)
     974:	0072                	c.slli	zero,0x1c
     976:	5f5f 6d75 646f      	0x646f6d755f5f
    res->crcmatrix           = 0;
     97c:	00336973          	csrrsi	s2,fcsr,6
    for (i = 0; i < iterations; i++)
     980:	5f5f 7562 6c69      	0x6c6975625f5f
     986:	6974                	flw	fa3,84(a0)
     988:	5f6e                	lw	t5,248(sp)
     98a:	6176                	flw	ft2,92(sp)
        crc      = core_bench_list(res, 1);
     98c:	6c5f 7369 0074      	0x7473696c5f
     992:	6565                	lui	a0,0x19
     994:	735f 7a69 5f65      	0x5f657a69735f
        res->crc = crcu16(crc, res->crc);
     99a:	0074                	addi	a3,sp,12
     99c:	7571                	lui	a0,0xffffc
     99e:	6c61                	lui	s8,0x18
        crc      = core_bench_list(res, -1);
     9a0:	6669                	lui	a2,0x1a
     9a2:	6569                	lui	a0,0x1a
        res->crc = crcu16(crc, res->crc);
     9a4:	0072                	c.slli	zero,0x1c
     9a6:	70696b73          	csrrsi	s6,0x706,18
        crc      = core_bench_list(res, -1);
     9aa:	615f 6f74 0069      	0x696f74615f
        res->crc = crcu16(crc, res->crc);
     9b0:	5f5f 6e67 6375      	0x63756e675f5f
     9b6:	765f 5f61 696c      	0x696c5f61765f
        if (i == 0)
     9bc:	65007473          	csrrci	s0,0x650,0
            res->crclist = res->crc;
     9c0:	5f65                	li	t5,-7
     9c2:	7376                	flw	ft6,124(sp)
    for (i = 0; i < iterations; i++)
     9c4:	7270                	flw	fa2,100(a2)
     9c6:	6e69                	lui	t3,0x1a
     9c8:	6674                	flw	fa3,76(a2)
     9ca:	6e00                	flw	fs0,24(a2)
}
     9cc:	6d75                	lui	s10,0x1d
     9ce:	6562                	flw	fa0,24(sp)
     9d0:	0072                	c.slli	zero,0x1c
     9d2:	6162                	flw	ft2,24(sp)
     9d4:	70006573          	csrrsi	a0,0x700,0
     9d8:	6572                	flw	fa0,28(sp)
     9da:	69736963          	bltu	t1,s7,106c <main+0x684>
     9de:	73006e6f          	jal	t3,710e <__bss_end+0x7e>
     9e2:	6275                	lui	tp,0x1d
     9e4:	0032                	c.slli	zero,0xc
     9e6:	2e2e                	fld	ft8,200(sp)
{
     9e8:	2f2e2e2f          	0x2f2e2e2f
     9ec:	2e2e                	fld	ft8,200(sp)
     9ee:	2f2e2e2f          	0x2f2e2e2f
     9f2:	2e2e                	fld	ft8,200(sp)
     9f4:	7369722f          	0x7369722f
     9f8:	672d7663          	bgeu	s10,s2,1064 <main+0x67c>
     9fc:	6c2f6363          	bltu	t5,sp,10c2 <main+0x6da>
     a00:	6269                	lui	tp,0x1a
     a02:	2f636367          	0x2f636367
     a06:	74666f73          	csrrsi	t5,0x746,12
     a0a:	662d                	lui	a2,0xb
     a0c:	2f70                	fld	fa2,216(a4)
     a0e:	6461                	lui	s0,0x18
     a10:	6464                	flw	fs1,76(s0)
     a12:	3366                	fld	ft6,120(sp)
     a14:	632e                	flw	ft6,200(sp)
     a16:	6600                	flw	fs0,8(a2)
     a18:	6172                	flw	ft2,28(sp)
     a1a:	2f003063          	0x2f003063
    int   argc = 0;
     a1e:	7266                	flw	ft4,120(sp)
{
     a20:	6565                	lui	a0,0x19
     a22:	6f64                	flw	fs1,92(a4)
    int   argc = 0;
     a24:	2d6d                	jal	10de <main+0x6f6>
     a26:	6f74                	flw	fa3,92(a4)
     a28:	2f736c6f          	jal	s8,3751e <RAM_SIZE+0x2751e>
     a2c:	2f6a626f          	jal	tp,a6d22 <RAM_SIZE+0x96d22>
     a30:	3878                	fld	fa4,240(s0)
     a32:	5f36                	lw	t5,108(sp)
     a34:	3436                	fld	fs0,360(sp)
     a36:	6c2d                	lui	s8,0xb
     a38:	6e69                	lui	t3,0x1a
     a3a:	7875                	lui	a6,0xffffd
     a3c:	632d                	lui	t1,0xb
     a3e:	6e65                	lui	t3,0x19
     a40:	6f74                	flw	fa3,92(a4)
     a42:	622f3673          	csrrc	a2,0x622,t5
     a46:	6975                	lui	s2,0x1d
     a48:	646c                	flw	fa1,76(s0)
     a4a:	7369722f          	0x7369722f
	for(int i = 0; i < 12; i++) { 
     a4e:	34367663          	bgeu	a2,gp,d9a <main+0x3b2>
     a52:	752d                	lui	a0,0xfffeb
    int   argc = 0;
     a54:	6b6e                	flw	fs6,216(sp)
     a56:	6f6e                	flw	ft10,216(sp)
     a58:	652d6e77          	0x652d6e77
	  uart_send_char(hello[i]);
     a5c:	666c                	flw	fa1,76(a2)
     a5e:	672d                	lui	a4,0xb
     a60:	622f6363          	bltu	t5,sp,1086 <main+0x69e>
     a64:	6975                	lui	s2,0x1d
     a66:	646c                	flw	fa1,76(s0)
	for(int i = 0; i < 12; i++) { 
     a68:	672d                	lui	a4,0xb
     a6a:	732d6363          	bltu	s10,s2,1190 <main+0x7a8>
	ee_printf("Hello World\n");
     a6e:	6174                	flw	fa3,68(a0)
     a70:	2f326567          	0x2f326567
    portable_init(&(results[0].port), &argc, argv);
     a74:	6972                	flw	fs2,28(sp)
     a76:	36766373          	csrrsi	t1,0x367,12
     a7a:	2d34                	fld	fa3,88(a0)
     a7c:	6e75                	lui	t3,0x1d
     a7e:	776f6e6b          	0x776f6e6b
     a82:	2d6e                	fld	fs10,216(sp)
     a84:	6c65                	lui	s8,0x19
     a86:	2f66                	fld	ft10,88(sp)
     a88:	7672                	flw	fa2,60(sp)
     a8a:	2f693233          	0x2f693233
     a8e:	6c69                	lui	s8,0x1a
     a90:	3370                	fld	fa2,224(a4)
     a92:	2f32                	fld	ft10,264(sp)
     a94:	696c                	flw	fa1,84(a0)
     a96:	6762                	flw	fa4,24(sp)
     a98:	5f006363          	bltu	zero,a6,107e <main+0x696>
     a9c:	5046                	0x5046
     a9e:	505f 4341 5f4b      	0x5f4b4341505f
     aa4:	4152                	lw	sp,20(sp)
     aa6:	5f325f57          	0x5f325f57
    results[0].seed1      = get_seed(1);
     aaa:	6c66                	flw	fs8,88(sp)
     aac:	4644006f          	j	40f10 <RAM_SIZE+0x30f10>
     ab0:	7974                	flw	fa3,116(a0)
     ab2:	6570                	flw	fa2,76(a0)
     ab4:	4700                	lw	s0,8(a4)
     ab6:	554e                	lw	a0,240(sp)
     ab8:	4320                	lw	s0,64(a4)
     aba:	3731                	jal	9c6 <iterate+0x66>
     abc:	3120                	fld	fs0,96(a0)
     abe:	2e30                	fld	fa2,88(a2)
     ac0:	2e32                	fld	ft8,264(sp)
     ac2:	2030                	fld	fa2,64(s0)
     ac4:	6d2d                	lui	s10,0xb
     ac6:	646f6d63          	bltu	t5,t1,1120 <main+0x738>
    results[0].seed2      = get_seed(2);
     aca:	6c65                	lui	s8,0x19
    results[0].seed1      = get_seed(1);
     acc:	6d3d                	lui	s10,0xf
     ace:	6465                	lui	s0,0x19
    results[0].seed2      = get_seed(2);
     ad0:	6e61                	lui	t3,0x18
     ad2:	2079                	jal	b60 <main+0x178>
     ad4:	6d2d                	lui	s10,0xb
     ad6:	7261                	lui	tp,0xffff8
     ad8:	723d6863          	bltu	s10,gp,1208 <main+0x820>
    results[0].seed3      = get_seed(3);
     adc:	3376                	fld	ft6,376(sp)
     ade:	6932                	flw	fs2,12(sp)
    results[0].seed2      = get_seed(2);
     ae0:	2d20                	fld	fs0,88(a0)
     ae2:	616d                	addi	sp,sp,240
    results[0].seed3      = get_seed(3);
     ae4:	6962                	flw	fs2,24(sp)
     ae6:	693d                	lui	s2,0xf
     ae8:	706c                	flw	fa1,100(s0)
     aea:	2d203233          	0x2d203233
     aee:	636d                	lui	t1,0x1b
    results[0].iterations = get_seed_32(4);
     af0:	6f6d                	lui	t5,0x1b
     af2:	6564                	flw	fs1,76(a0)
    results[0].seed3      = get_seed(3);
     af4:	3d6c                	fld	fa1,248(a0)
     af6:	656d                	lui	a0,0x1b
    results[0].iterations = get_seed_32(4);
     af8:	6164                	flw	fs1,68(a0)
     afa:	796e                	flw	fs2,248(sp)
     afc:	2d20                	fld	fs0,88(a0)
     afe:	616d                	addi	sp,sp,240
    results[0].execs = get_seed_32(5);
     b00:	6372                	flw	ft6,28(sp)
     b02:	3d68                	fld	fa0,248(a0)
    results[0].iterations = get_seed_32(4);
     b04:	7672                	flw	fa2,60(sp)
     b06:	20693233          	0x20693233
    results[0].execs = get_seed_32(5);
     b0a:	672d                	lui	a4,0xb
    if (results[0].execs == 0)
     b0c:	2d20                	fld	fs0,88(a0)
     b0e:	2d20734f          	fnmadd.h	ft6,ft0,fs2,ft5
    results[0].execs = get_seed_32(5);
     b12:	2d20324f          	fnmadd.h	ft4,ft0,fs2,ft5,rup
    if ((results[0].seed1 == 0) && (results[0].seed2 == 0)
     b16:	2d20734f          	fnmadd.h	ft6,ft0,fs2,ft5
     b1a:	6266                	flw	ft4,88(sp)
     b1c:	6975                	lui	s2,0x1d
     b1e:	646c                	flw	fa1,76(s0)
     b20:	6e69                	lui	t3,0x1a
     b22:	696c2d67          	0x696c2d67
     b26:	6762                	flw	fa4,24(sp)
     b28:	2d206363          	bltu	zero,s2,dee <main+0x406>
     b2c:	6e66                	flw	ft8,88(sp)
     b2e:	74732d6f          	jal	s10,33a74 <RAM_SIZE+0x23a74>
     b32:	6361                	lui	t1,0x18
     b34:	72702d6b          	0x72702d6b
        && (results[0].seed3 == 0))
     b38:	6365746f          	jal	s0,5816e <RAM_SIZE+0x4816e>
     b3c:	6f74                	flw	fa3,92(a4)
     b3e:	2072                	fld	ft0,280(sp)
     b40:	662d                	lui	a2,0xb
     b42:	6976                	flw	fs2,92(sp)
        if ((1 << (ee_u32)i) & results[0].execs)
     b44:	69626973          	csrrsi	s2,0x696,4
    results[i].memblock[0] = stack_memblock + i * TOTAL_DATA_SIZE;
     b48:	696c                	flw	fa1,84(a0)
     b4a:	7974                	flw	fa3,116(a0)
     b4c:	683d                	lui	a6,0xf
     b4e:	6469                	lui	s0,0x1a
     b50:	6564                	flw	fs1,76(a0)
     b52:	006e                	c.slli	zero,0x1b
     b54:	5f52                	lw	t5,52(sp)
     b56:	3066                	fld	ft0,120(sp)
     b58:	5f00                	lw	s0,56(a4)
     b5a:	5046                	0x5046
     b5c:	505f 4341 5f4b      	0x5f4b4341505f
     b62:	494d4553          	0x494d4553
        if ((1 << (ee_u32)i) & results[0].execs)
     b66:	4152                	lw	sp,20(sp)
     b68:	5f545f57          	0x5f545f57
            num_algorithms++;
     b6c:	5f410073          	0x5f410073
    results[i].memblock[0] = stack_memblock + i * TOTAL_DATA_SIZE;
     b70:	3166                	fld	ft2,120(sp)
     b72:	7300                	flw	fs0,32(a4)
     b74:	6275                	lui	tp,0x1d
     b76:	0031                	c.nop	12
    results[i].err         = 0;
     b78:	665f 7865 7300      	0x73007865665f
        if ((1 << (ee_u32)i) & results[0].execs)
     b7e:	6275                	lui	tp,0x1d
     b80:	465f0033          	0x465f0033
            num_algorithms++;
     b84:	5f50                	lw	a2,60(a4)
     b86:	4150                	lw	a2,4(a0)
        if ((1 << (ee_u32)i) & results[0].execs)
     b88:	535f4b43          	fmadd.d	fs6,ft10,fs5,fa0,rmm
            num_algorithms++;
     b8c:	4d45                	li	s10,17
     b8e:	5249                	li	tp,-14
     b90:	5741                	li	a4,-16
     b92:	545f 655f 6600      	0x6600655f545f
        results[i].size = results[i].size / num_algorithms;
     b98:	6172                	flw	ft2,28(sp)
     b9a:	6e003163          	0x6e003163
     b9e:	006d726f          	jal	tp,d7ba4 <RAM_SIZE+0xc7ba4>
     ba2:	5f41                	li	t5,-16
     ba4:	3066                	fld	ft0,120(sp)
     ba6:	5f00                	lw	s0,56(a4)
     ba8:	5046                	0x5046
     baa:	555f 504e 4341      	0x4341504e555f
     bb0:	41525f4b          	fnmsub.s	ft10,ft4,fs5,fs0,unknown
     bb4:	5f325f57          	0x5f325f57
     bb8:	6c66                	flw	fs8,88(sp)
     bba:	5f42006f          	j	211ae <RAM_SIZE+0x111ae>
     bbe:	3066                	fld	ft0,120(sp)
    for (i = 0; i < NUM_ALGORITHMS; i++)
     bc0:	4200                	lw	s0,0(a2)
     bc2:	665f 0031 465f      	0x465f0031665f
    ee_u16       i, j = 0, num_algorithms = 0;
     bc8:	5f50                	lw	a2,60(a4)
     bca:	4441                	li	s0,16
        if ((1 << (ee_u32)i) & results[0].execs)
     bcc:	5f44                	lw	s1,60(a4)
     bce:	4e49                	li	t3,18
    for (i = 0; i < NUM_ALGORITHMS; i++)
     bd0:	4554                	lw	a3,12(a0)
     bd2:	4e52                	lw	t3,20(sp)
        if ((1 << (ee_u32)i) & results[0].execs)
     bd4:	4c41                	li	s8,16
     bd6:	645f 6669 0066      	0x666669645f
    for (i = 0; i < NUM_ALGORITHMS; i++)
     bdc:	465f 5f50 4150      	0x41505f50465f
        if ((1 << (ee_u32)i) & results[0].execs)
     be2:	535f4b43          	fmadd.d	fs6,ft10,fs5,fa0,rmm
    for (i = 0; i < NUM_ALGORITHMS; i++)
     be6:	4d45                	li	s10,17
     be8:	5249                	li	tp,-14
     bea:	5741                	li	a4,-16
        if (results[i].execs & ID_LIST)
     bec:	695f 5f73 6974      	0x69745f73695f
        if (results[i].execs & ID_MATRIX)
     bf2:	796e                	flw	fs2,248(sp)
        if (results[i].execs & ID_STATE)
     bf4:	5f00                	lw	s0,56(a4)
     bf6:	5046                	0x5046
     bf8:	505f 4341 5f4b      	0x5f4b4341505f
            core_init_state(
     bfe:	494d4553          	0x494d4553
     c02:	4152                	lw	sp,20(sp)
     c04:	5f545f57          	0x5f545f57
                results[0].size, results[i].seed1, results[i].memblock[3]);
     c08:	3066                	fld	ft0,120(sp)
     c0a:	5f00                	lw	s0,56(a4)
            core_init_state(
     c0c:	5046                	0x5046
     c0e:	505f 4341 5f4b      	0x5f4b4341505f
     c14:	494d4553          	0x494d4553
     c18:	4152                	lw	sp,20(sp)
     c1a:	5f545f57          	0x5f545f57
     c1e:	3166                	fld	ft2,120(sp)
     c20:	5f00                	lw	s0,56(a4)
     c22:	5046                	0x5046
     c24:	415f 4444 495f      	0x495f4444415f
    if (results[0].iterations == 0)
     c2a:	544e                	lw	s0,240(sp)
     c2c:	5245                	li	tp,-15
     c2e:	414e                	lw	sp,208(sp)
        results[0].iterations = 1;
     c30:	5f4c                	lw	a1,60(a4)
     c32:	6465                	lui	s0,0x19
     c34:	6669                	lui	a2,0x1a
     c36:	0066                	c.slli	zero,0x19
            iterate(&results[0]);
     c38:	465f 5f50 4e55      	0x4e555f50465f
            results[0].iterations *= 10;
     c3e:	4f49                	li	t5,18
            iterate(&results[0]);
     c40:	5f4e                	lw	t5,240(sp)
     c42:	0044                	addi	s1,sp,4
     c44:	465f 5f50 4150      	0x41505f50465f
     c4a:	535f4b43          	fmadd.d	fs6,ft10,fs5,fa0,rmm
     c4e:	4d45                	li	s10,17
     c50:	5249                	li	tp,-14
     c52:	5741                	li	a4,-16
            results[0].iterations *= 10;
     c54:	545f 635f 7300      	0x7300635f545f
     c5a:	6275                	lui	tp,0x1d
     c5c:	645f 6e6f 0065      	0x656e6f645f
     c62:	6461                	lui	s0,0x18
     c64:	3164                	fld	fs1,224(a0)
     c66:	6100                	flw	fs0,0(a0)
            start_time();
     c68:	6464                	flw	fs1,76(s0)
     c6a:	0032                	c.slli	zero,0xc
            iterate(&results[0]);
     c6c:	6461                	lui	s0,0x18
     c6e:	3364                	fld	fs1,224(a4)
     c70:	6200                	flw	fs0,0(a2)
     c72:	7469                	lui	s0,0xffffa
            stop_time();
     c74:	5f5f0073          	0x5f5f0073
            secs_passed = time_in_secs(get_time());
     c78:	737a6c63          	bltu	s4,s7,13b0 <core_init_matrix>
     c7c:	3269                	jal	606 <core_bench_list+0xe2>
     c7e:	6100                	flw	fs0,0(a0)
        while (secs_passed < (secs_ret)1)
     c80:	6464                	flw	fs1,76(s0)
     c82:	645f 6e6f 0065      	0x656e6f645f
        results[0].iterations *= 1 + 10 / divisor;
     c88:	665f 6d72 5200      	0x52006d72665f
     c8e:	665f 0031 465f      	0x465f0031665f
     c94:	5f50                	lw	a2,60(a4)
     c96:	4150                	lw	a2,4(a0)
     c98:	435f4b43          	fmadd.d	fs6,ft10,fs5,fs0,rmm
     c9c:	4e41                	li	t3,16
     c9e:	43494e4f          	fnmadd.d	ft8,fs2,fs4,fs0,rmm
    start_time();
     ca2:	4c41                	li	s8,16
    iterate(&results[0]);
     ca4:	545f 665f 0030      	0x30665f545f
     caa:	465f 5f50 4150      	0x41505f50465f
     cb0:	435f4b43          	fmadd.d	fs6,ft10,fs5,fs0,rmm
     cb4:	4e41                	li	t3,16
     cb6:	43494e4f          	fnmadd.d	ft8,fs2,fs4,fs0,rmm
     cba:	4c41                	li	s8,16
     cbc:	545f 665f 0031      	0x31665f545f
     cc2:	5f5f 3072 5f00      	0x5f0030725f5f
    total_time = get_time();
     cc8:	725f 0031 465f      	0x465f0031725f
    seedcrc = crc16(results[0].seed1, seedcrc);
     cce:	5f50                	lw	a2,60(a4)
     cd0:	4944                	lw	s1,20(a0)
     cd2:	5f56                	lw	t5,116(sp)
     cd4:	454d                	li	a0,19
     cd6:	5441                	li	s0,-16
     cd8:	325f 755f 6964      	0x6964755f325f
    total_time = get_time();
     cde:	5f76                	lw	t5,124(sp)
    seedcrc = crc16(results[0].seed1, seedcrc);
     ce0:	5f6d                	li	t5,-5
     ce2:	3066                	fld	ft0,120(sp)
     ce4:	5f00                	lw	s0,56(a4)
     ce6:	715f 0031 4855      	0x48550031715f
     cec:	70797457          	vsetvli	s0,s2,1799
    seedcrc = crc16(results[0].seed2, seedcrc);
     cf0:	0065                	c.nop	25
     cf2:	465f 5f50 4944      	0x49445f50465f
     cf8:	5f56                	lw	t5,116(sp)
     cfa:	454d                	li	a0,19
     cfc:	5441                	li	s0,-16
     cfe:	325f 755f 6964      	0x6964755f325f
     d04:	5f76                	lw	t5,124(sp)
     d06:	5f6d                	li	t5,-5
    seedcrc = crc16(results[0].seed3, seedcrc);
     d08:	3166                	fld	ft2,120(sp)
     d0a:	5f00                	lw	s0,56(a4)
     d0c:	6f5f 3170 5f00      	0x5f0031706f5f
     d12:	785f 0030 5f5f      	0x5f5f0030785f
    seedcrc = crc16(results[0].size, seedcrc);
     d18:	3278                	fld	fa4,224(a2)
     d1a:	5f00                	lw	s0,56(a4)
    switch (seedcrc)
     d1c:	5046                	0x5046
     d1e:	555f 504e 4341      	0x4341504e555f
    seedcrc = crc16(results[0].size, seedcrc);
     d24:	41435f4b          	fnmsub.s	ft10,ft6,fs4,fs0,unknown
    switch (seedcrc)
     d28:	4f4e                	lw	t5,208(sp)
     d2a:	494e                	lw	s2,208(sp)
     d2c:	5f4c4143          	fmadd.q	ft2,fs8,fs4,fa1,rmm
     d30:	66696873          	csrrsi	a6,0x666,18
     d34:	0074                	addi	a3,sp,12
     d36:	465f 5f50 4944      	0x49445f50465f
     d3c:	5f56                	lw	t5,116(sp)
     d3e:	454d                	li	a0,19
     d40:	5441                	li	s0,-16
     d42:	325f 755f 6964      	0x6964755f325f
            ee_printf("Profile generation run parameters for coremark.\n");
     d48:	5f76                	lw	t5,124(sp)
     d4a:	5f72                	lw	t5,60(sp)
     d4c:	3066                	fld	ft0,120(sp)
     d4e:	5f00                	lw	s0,56(a4)
     d50:	5046                	0x5046
     d52:	445f 5649 4d5f      	0x4d5f5649445f
        for (i = 0; i < default_num_contexts; i++)
     d58:	4145                	li	sp,17
     d5a:	5f54                	lw	a3,60(a4)
     d5c:	5f32                	lw	t5,44(sp)
     d5e:	6475                	lui	s0,0x1d
     d60:	7669                	lui	a2,0xffffa
     d62:	725f 665f 0031      	0x31665f725f
            results[i].err = 0;
     d68:	5f5f 6c75 5f00      	0x5f006c755f5f
     d6e:	755f 0068 465f      	0x465f0068755f
                && (results[i].crclist != list_known_crc[known_id]))
     d74:	5f50                	lw	a2,60(a4)
     d76:	4944                	lw	s1,20(a0)
            results[i].err = 0;
     d78:	5f56                	lw	t5,116(sp)
     d7a:	454d                	li	a0,19
     d7c:	5441                	li	s0,-16
     d7e:	325f 755f 6964      	0x6964755f325f
     d84:	5f76                	lw	t5,124(sp)
     d86:	5f6e                	lw	t5,248(sp)
                && (results[i].crclist != list_known_crc[known_id]))
     d88:	3066                	fld	ft0,120(sp)
     d8a:	5f00                	lw	s0,56(a4)
            results[i].err = 0;
     d8c:	5046                	0x5046
     d8e:	445f 5649 4d5f      	0x4d5f5649445f
                ee_printf("[%u]ERROR! list crc 0x%04x - should be 0x%04x\n",
     d94:	4145                	li	sp,17
     d96:	5f54                	lw	a3,60(a4)
                ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n",
     d98:	5f32                	lw	t5,44(sp)
     d9a:	6475                	lui	s0,0x1d
                ee_printf("[%u]ERROR! state crc 0x%04x - should be 0x%04x\n",
     d9c:	7669                	lui	a2,0xffffa
     d9e:	6e5f 665f 0031      	0x31665f6e5f
            total_errors += results[i].err;
     da4:	465f 5f50 4150      	0x41505f50465f
     daa:	435f4b43          	fmadd.d	fs6,ft10,fs5,fs0,rmm
     dae:	4e41                	li	t3,16
     db0:	43494e4f          	fnmadd.d	ft8,fs2,fs4,fs0,rmm
     db4:	4c41                	li	s8,16
     db6:	545f 735f 2e00      	0x2e00735f545f
        for (i = 0; i < default_num_contexts; i++)
     dbc:	2f2e                	fld	ft10,200(sp)
     dbe:	2e2e                	fld	ft8,200(sp)
            total_errors += results[i].err;
     dc0:	2f2e2e2f          	0x2f2e2e2f
        for (i = 0; i < default_num_contexts; i++)
     dc4:	2e2e                	fld	ft8,200(sp)
     dc6:	2f2e2e2f          	0x2f2e2e2f
            total_errors += results[i].err;
     dca:	6972                	flw	fs2,28(sp)
     dcc:	2d766373          	csrrsi	t1,0x2d7,12
        for (i = 0; i < default_num_contexts; i++)
     dd0:	2f636367          	0x2f636367
            total_errors += results[i].err;
     dd4:	696c                	flw	fa1,84(a0)
     dd6:	6762                	flw	fa4,24(sp)
     dd8:	732f6363          	bltu	t5,s2,14fe <core_init_matrix+0x14e>
        for (i = 0; i < default_num_contexts; i++)
     ddc:	2d74666f          	jal	a2,478b2 <RAM_SIZE+0x378b2>
            results[i].err = 0;
     de0:	7066                	flw	ft0,120(sp)
     de2:	7669642f          	0x7669642f
     de6:	6664                	flw	fs1,76(a2)
     de8:	00632e33          	slt	t3,t1,t1
     dec:	465f 5f50 4150      	0x41505f50465f
     df2:	435f4b43          	fmadd.d	fs6,ft10,fs5,fs0,rmm
     df6:	4e41                	li	t3,16
     df8:	43494e4f          	fnmadd.d	ft8,fs2,fs4,fs0,rmm
            if ((results[i].execs & ID_LIST)
     dfc:	4c41                	li	s8,16
     dfe:	695f 5f73 6974      	0x69745f73695f
     e04:	796e                	flw	fs2,248(sp)
     e06:	5f00                	lw	s0,56(a4)
     e08:	5046                	0x5046
     e0a:	445f 5649 4d5f      	0x4d5f5649445f
                && (results[i].crclist != list_known_crc[known_id]))
     e10:	4145                	li	sp,17
     e12:	5f54                	lw	a3,60(a4)
     e14:	5f32                	lw	t5,44(sp)
     e16:	6475                	lui	s0,0x1d
                ee_printf("[%u]ERROR! list crc 0x%04x - should be 0x%04x\n",
     e18:	7669                	lui	a2,0xffffa
     e1a:	6e5f 665f 0032      	0x32665f6e5f
     e20:	465f 5f50 4150      	0x41505f50465f
                results[i].err++;
     e26:	435f4b43          	fmadd.d	fs6,ft10,fs5,fs0,rmm
     e2a:	4e41                	li	t3,16
     e2c:	43494e4f          	fnmadd.d	ft8,fs2,fs4,fs0,rmm
            if ((results[i].execs & ID_MATRIX)
     e30:	4c41                	li	s8,16
     e32:	545f 635f 5f00      	0x5f00635f545f
     e38:	715f 0030 5f5f      	0x5f5f0030715f
     e3e:	3178                	fld	fa4,224(a0)
     e40:	5f00                	lw	s0,56(a4)
     e42:	785f 0033 5f5f      	0x5f5f0033785f
     e48:	6876                	flw	fa6,92(sp)
     e4a:	5f00                	lw	s0,56(a4)
     e4c:	765f 006c 5f5f      	0x5f5f006c765f
     e52:	3064                	fld	fs1,224(s0)
                && (results[i].crcmatrix != matrix_known_crc[known_id]))
     e54:	5f00                	lw	s0,56(a4)
     e56:	5046                	0x5046
     e58:	505f 4341 5f4b      	0x5f4b4341505f
     e5e:	4f4e4143          	fmadd.q	ft2,ft8,fs4,fs1,rmm
                ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n",
     e62:	494e                	lw	s2,208(sp)
     e64:	5f4c4143          	fmadd.q	ft2,fs8,fs4,fa1,rmm
     e68:	5f54                	lw	a3,60(a4)
     e6a:	0065                	c.nop	25
                results[i].err++;
     e6c:	5f5f 3164 5f00      	0x5f0031645f5f
            if ((results[i].execs & ID_STATE)
     e72:	6f5f 3070 5f00      	0x5f0030706f5f
                results[i].err++;
     e78:	655f 6471 3266      	0x32666471655f
                && (results[i].crcstate != state_known_crc[known_id]))
     e7e:	2e00                	fld	fs0,24(a2)
            if ((results[i].execs & ID_STATE)
     e80:	2f2e                	fld	ft10,200(sp)
     e82:	2e2e                	fld	ft8,200(sp)
                && (results[i].crcstate != state_known_crc[known_id]))
     e84:	2f2e2e2f          	0x2f2e2e2f
            if ((results[i].execs & ID_STATE)
     e88:	2e2e                	fld	ft8,200(sp)
     e8a:	2f2e2e2f          	0x2f2e2e2f
                && (results[i].crcstate != state_known_crc[known_id]))
     e8e:	6972                	flw	fs2,28(sp)
     e90:	2d766373          	csrrsi	t1,0x2d7,12
     e94:	2f636367          	0x2f636367
     e98:	696c                	flw	fa1,84(a0)
     e9a:	6762                	flw	fa4,24(sp)
     e9c:	732f6363          	bltu	t5,s2,15c2 <matrix_sum+0x3a>
     ea0:	2d74666f          	jal	a2,47976 <RAM_SIZE+0x37976>
     ea4:	7066                	flw	ft0,120(sp)
     ea6:	6471652f          	vamoandei32.v	v10,(sp),v7,v10,v0.t
            total_errors += results[i].err;
     eaa:	3266                	fld	ft4,120(sp)
     eac:	632e                	flw	ft6,200(sp)
     eae:	5f00                	lw	s0,56(a4)
            results[i].list = core_list_init(
     eb0:	675f 6363 435f      	0x435f6363675f
     eb6:	504d                	c.li	zero,-13
     eb8:	7974                	flw	fa3,116(a0)
     eba:	6570                	flw	fa2,76(a0)
     ebc:	5f00                	lw	s0,56(a4)
     ebe:	5046                	0x5046
     ec0:	495f 5353 4749      	0x47495353495f
     ec6:	414e                	lw	sp,208(sp)
     ec8:	5f4e                	lw	t5,240(sp)
     eca:	6572                	flw	fa0,28(sp)
     ecc:	0074                	addi	a3,sp,12
     ece:	5f5f 6567 6664      	0x666465675f5f
     ed4:	0032                	c.slli	zero,0xc
     ed6:	2e2e                	fld	ft8,200(sp)
     ed8:	2f2e2e2f          	0x2f2e2e2f
        if (results[i].execs & ID_MATRIX)
     edc:	2e2e                	fld	ft8,200(sp)
     ede:	2f2e2e2f          	0x2f2e2e2f
            results[i].list = core_list_init(
     ee2:	2e2e                	fld	ft8,200(sp)
     ee4:	7369722f          	0x7369722f
        if (results[i].execs & ID_MATRIX)
     ee8:	672d7663          	bgeu	s10,s2,1554 <core_init_matrix+0x1a4>
                                 | (((ee_s32)results[i].seed2) << 16),
     eec:	6c2f6363          	bltu	t5,sp,15b2 <matrix_sum+0x2a>
     ef0:	6269                	lui	tp,0x1a
     ef2:	2f636367          	0x2f636367
     ef6:	74666f73          	csrrsi	t5,0x746,12
     efa:	662d                	lui	a2,0xb
            core_init_matrix(results[0].size,
     efc:	2f70                	fld	fa2,216(a4)
     efe:	66646567          	0x66646567
                                 | (((ee_s32)results[i].seed2) << 16),
     f02:	2e32                	fld	ft8,264(sp)
     f04:	465f0063          	beq	t5,t0,1364 <main+0x97c>
                             (ee_s32)results[i].seed1
     f08:	5f50                	lw	a2,60(a4)
     f0a:	5f504d43          	fmadd.q	fs10,ft0,fs5,fa1,rmm
                                 | (((ee_s32)results[i].seed2) << 16),
     f0e:	7369                	lui	t1,0xffffa
            core_init_matrix(results[0].size,
     f10:	7a5f 7265 5f6f      	0x5f6f72657a5f
                             (ee_s32)results[i].seed1
     f16:	0078                	addi	a4,sp,12
            core_init_matrix(results[0].size,
     f18:	465f 5f50 4d43      	0x4d435f50465f
                                 | (((ee_s32)results[i].seed2) << 16),
     f1e:	5f50                	lw	a2,60(a4)
            core_init_matrix(results[0].size,
     f20:	7369                	lui	t1,0xffffa
     f22:	7a5f 7265 5f6f      	0x5f6f72657a5f
     f28:	0079                	c.nop	30
     f2a:	5f5f 656c 6664      	0x6664656c5f5f
        if (results[i].execs & ID_STATE)
     f30:	0032                	c.slli	zero,0xc
     f32:	2e2e                	fld	ft8,200(sp)
                ee_printf("[%u]ERROR! state crc 0x%04x - should be 0x%04x\n",
     f34:	2f2e2e2f          	0x2f2e2e2f
     f38:	2e2e                	fld	ft8,200(sp)
     f3a:	2f2e2e2f          	0x2f2e2e2f
     f3e:	2e2e                	fld	ft8,200(sp)
                results[i].err++;
     f40:	7369722f          	0x7369722f
     f44:	672d7663          	bgeu	s10,s2,15b0 <matrix_sum+0x28>
     f48:	6c2f6363          	bltu	t5,sp,160e <matrix_sum+0x86>
     f4c:	6269                	lui	tp,0x1a
     f4e:	2f636367          	0x2f636367
     f52:	74666f73          	csrrsi	t5,0x746,12
     f56:	662d                	lui	a2,0xb
    switch (seedcrc)
     f58:	2f70                	fld	fa2,216(a4)
     f5a:	656c                	flw	fa1,76(a0)
     f5c:	6664                	flw	fs1,76(a2)
     f5e:	2e32                	fld	ft8,264(sp)
     f60:	465f0063          	beq	t5,t0,13c0 <core_init_matrix+0x10>
     f64:	5f50                	lw	a2,60(a4)
     f66:	5246                	lw	tp,112(sp)
     f68:	4341                	li	t1,16
     f6a:	535f 5352 5f54      	0x5f545352535f
            ee_printf("2K performance run parameters for coremark.\n");
     f70:	5f34                	lw	a3,120(a4)
     f72:	70696b73          	csrrsi	s6,0x706,18
     f76:	5f00                	lw	s0,56(a4)
     f78:	5046                	0x5046
     f7a:	465f 4152 5f43      	0x5f434152465f
            known_id = 3;
     f80:	5f535253          	0x5f535253
        for (i = 0; i < default_num_contexts; i++)
     f84:	5f34                	lw	a3,120(a4)
     f86:	63697473          	csrrci	s0,0x636,18
    total_errors += check_data_types();
     f8a:	5f00796b          	0x5f00796b
    ee_printf("CoreMark Size    : %lu\n", (long unsigned)results[0].size);
     f8e:	5046                	0x5046
    total_errors += check_data_types();
     f90:	465f 4152 5f43      	0x5f434152465f
    ee_printf("CoreMark Size    : %lu\n", (long unsigned)results[0].size);
     f96:	54535253          	0x54535253
     f9a:	345f 645f 776f      	0x776f645f345f
    ee_printf("Total ticks      : %lu\n", (long unsigned)total_time);
     fa0:	006e                	c.slli	zero,0x1b
     fa2:	465f 5f50 5246      	0x52465f50465f
     fa8:	4341                	li	t1,16
     faa:	535f 5352 5f54      	0x5f545352535f
    ee_printf("Total time (secs): %d\n", time_in_secs(total_time));
     fb0:	5f34                	lw	a3,120(a4)
     fb2:	0069                	c.nop	26
     fb4:	465f 5f50 5246      	0x52465f50465f
     fba:	4341                	li	t1,16
     fbc:	535f 5352 5f54      	0x5f545352535f
     fc2:	5f34                	lw	a3,120(a4)
     fc4:	465f0073          	0x465f0073
    total_errors += check_data_types();
     fc8:	5f50                	lw	a2,60(a4)
     fca:	5246                	lw	tp,112(sp)
    if (time_in_secs(total_time) > 0)
     fcc:	4341                	li	t1,16
     fce:	535f 5352 5f54      	0x5f545352535f
     fd4:	5f34                	lw	a3,120(a4)
     fd6:	7075                	c.lui	zero,0xffffd
     fd8:	2e00                	fld	fs0,24(a2)
     fda:	2f2e                	fld	ft10,200(sp)
    if (time_in_secs(total_time) < 10)
     fdc:	2e2e                	fld	ft8,200(sp)
     fde:	2f2e2e2f          	0x2f2e2e2f
     fe2:	2e2e                	fld	ft8,200(sp)
     fe4:	2f2e2e2f          	0x2f2e2e2f
     fe8:	6972                	flw	fs2,28(sp)
     fea:	2d766373          	csrrsi	t1,0x2d7,12
    ee_printf("Iterations       : %lu\n",
     fee:	2f636367          	0x2f636367
     ff2:	696c                	flw	fa1,84(a0)
        total_errors++;
     ff4:	6762                	flw	fa4,24(sp)
     ff6:	732f6363          	bltu	t5,s2,171c <matrix_add_const+0x24>
     ffa:	2d74666f          	jal	a2,47ad0 <RAM_SIZE+0x37ad0>
    ee_printf("Iterations       : %lu\n",
     ffe:	7066                	flw	ft0,120(sp)
    1000:	6c756d2f          	0x6c756d2f
    1004:	6664                	flw	fs1,76(a2)
    1006:	00632e33          	slt	t3,t1,t1
    100a:	465f 5f50 554d      	0x554d5f50465f
    ee_printf("Compiler version : %s\n", COMPILER_VERSION);
    1010:	5f4c                	lw	a1,60(a4)
    1012:	454d                	li	a0,19
    1014:	5441                	li	s0,-16
    1016:	445f 5f57 5f32      	0x5f325f57445f
    101c:	65646977          	0x65646977
    1020:	635f 665f 0030      	0x30665f635f
    ee_printf("Compiler flags   : %s\n", COMPILER_FLAGS);
    1026:	465f 5f50 554d      	0x554d5f50465f
    102c:	5f4c                	lw	a1,60(a4)
    102e:	454d                	li	a0,19
    1030:	5441                	li	s0,-16
    1032:	445f 5f57 5f32      	0x5f325f57445f
    ee_printf("Memory location  : %s\n", MEM_LOCATION);
    1038:	65646977          	0x65646977
    103c:	635f 665f 0031      	0x31665f635f
    1042:	5f5f 5046 465f      	0x465f50465f5f
    1048:	4152                	lw	sp,20(sp)
    104a:	44415f43          	fmadd.h	ft10,ft2,ft4,fs0,unknown
    ee_printf("seedcrc          : 0x%04x\n", seedcrc);
    104e:	5f44                	lw	s1,60(a4)
    1050:	32635f33          	0x32635f33
    1054:	5f00                	lw	s0,56(a4)
    1056:	5046                	0x5046
    1058:	4d5f 4c55 4d5f      	0x4d5f4c554d5f
    if (results[0].execs & ID_LIST)
    105e:	4145                	li	sp,17
    1060:	5f54                	lw	a3,60(a4)
    1062:	5f32                	lw	t5,44(sp)
    1064:	65646977          	0x65646977
        for (i = 0; i < default_num_contexts; i++)
    1068:	7a5f 665f 5f00      	0x5f00665f7a5f
    106e:	465f 5f50 5246      	0x52465f50465f
            ee_printf("[%d]crclist       : 0x%04x\n", i, results[i].crclist);
    1074:	4341                	li	t1,16
    1076:	415f 4444 335f      	0x335f4444415f
    107c:	635f 0031 465f      	0x465f0031635f
    1082:	5f50                	lw	a2,60(a4)
    1084:	554d                	li	a0,-13
    1086:	5f4c                	lw	a1,60(a4)
        for (i = 0; i < default_num_contexts; i++)
    1088:	454d                	li	a0,19
    108a:	5441                	li	s0,-16
    108c:	445f 5f57 5f32      	0x5f325f57445f
            ee_printf("[%d]crclist       : 0x%04x\n", i, results[i].crclist);
    1092:	65646977          	0x65646977
    1096:	625f 665f 0030      	0x30665f625f
    109c:	465f 5f50 554d      	0x554d5f50465f
    10a2:	5f4c                	lw	a1,60(a4)
    10a4:	454d                	li	a0,19
    10a6:	5441                	li	s0,-16
    10a8:	445f 5f57 5f32      	0x5f325f57445f
    10ae:	65646977          	0x65646977
    10b2:	625f 665f 0031      	0x31665f625f
    10b8:	465f 5f50 4f54      	0x4f545f50465f
    10be:	495f 544e 695f      	0x695f544e495f
        for (i = 0; i < default_num_contexts; i++)
    10c4:	656e                	flw	fa0,216(sp)
    10c6:	6178                	flw	fa4,68(a0)
    10c8:	2e007463          	bgeu	zero,zero,13b0 <core_init_matrix>
    10cc:	2f2e                	fld	ft10,200(sp)
    10ce:	2e2e                	fld	ft8,200(sp)
    10d0:	2f2e2e2f          	0x2f2e2e2f
    10d4:	2e2e                	fld	ft8,200(sp)
    10d6:	2f2e2e2f          	0x2f2e2e2f
    if (results[0].execs & ID_MATRIX)
    10da:	6972                	flw	fs2,28(sp)
    10dc:	2d766373          	csrrsi	t1,0x2d7,12
        for (i = 0; i < default_num_contexts; i++)
    10e0:	2f636367          	0x2f636367
    10e4:	696c                	flw	fa1,84(a0)
    10e6:	6762                	flw	fa4,24(sp)
            ee_printf("[%d]crcmatrix     : 0x%04x\n", i, results[i].crcmatrix);
    10e8:	732f6363          	bltu	t5,s2,180e <matrix_mul_vect+0xc6>
    10ec:	2d74666f          	jal	a2,47bc2 <RAM_SIZE+0x37bc2>
    10f0:	7066                	flw	ft0,120(sp)
    10f2:	7869662f          	0x7869662f
    10f6:	6664                	flw	fs1,76(a2)
    10f8:	632e6973          	csrrsi	s2,0x632,28
    10fc:	5500                	lw	s0,40(a0)
    10fe:	79744953          	0x79744953
        for (i = 0; i < default_num_contexts; i++)
    1102:	6570                	flw	fa2,76(a0)
    1104:	2e00                	fld	fs0,24(a2)
    1106:	2f2e                	fld	ft10,200(sp)
            ee_printf("[%d]crcmatrix     : 0x%04x\n", i, results[i].crcmatrix);
    1108:	2e2e                	fld	ft8,200(sp)
    110a:	2f2e2e2f          	0x2f2e2e2f
    110e:	2e2e                	fld	ft8,200(sp)
    1110:	2f2e2e2f          	0x2f2e2e2f
    1114:	6972                	flw	fs2,28(sp)
    1116:	2d766373          	csrrsi	t1,0x2d7,12
    111a:	2f636367          	0x2f636367
    111e:	696c                	flw	fa1,84(a0)
    1120:	6762                	flw	fa4,24(sp)
    1122:	632f6363          	bltu	t5,s2,1748 <matrix_mul_vect>
    1126:	69666e6f          	jal	t3,677bc <RAM_SIZE+0x577bc>
    112a:	69722f67          	0x69722f67
    112e:	2f766373          	csrrsi	t1,0x2f7,12
    1132:	756d                	lui	a0,0xffffb
    1134:	646c                	flw	fa1,76(s0)
    1136:	3369                	jal	ec0 <main+0x4d8>
        for (i = 0; i < default_num_contexts; i++)
    1138:	532e                	lw	t1,232(sp)
    113a:	2e00                	fld	fs0,24(a2)
    113c:	2f2e                	fld	ft10,200(sp)
    113e:	2e2e                	fld	ft8,200(sp)
    1140:	2f2e2e2f          	0x2f2e2e2f
    1144:	2e2e                	fld	ft8,200(sp)
    1146:	2f2e2e2f          	0x2f2e2e2f
    114a:	6972                	flw	fs2,28(sp)
    114c:	2d766373          	csrrsi	t1,0x2d7,12
    if (results[0].execs & ID_STATE)
    1150:	2f636367          	0x2f636367
    1154:	696c                	flw	fa1,84(a0)
    1156:	6762                	flw	fa4,24(sp)
        for (i = 0; i < default_num_contexts; i++)
    1158:	632f6363          	bltu	t5,s2,177e <matrix_mul_vect+0x36>
    115c:	69666e6f          	jal	t3,677f2 <RAM_SIZE+0x577f2>
            ee_printf("[%d]crcstate      : 0x%04x\n", i, results[i].crcstate);
    1160:	69722f67          	0x69722f67
    1164:	2f766373          	csrrsi	t1,0x2f7,12
    1168:	6964                	flw	fs1,84(a0)
    116a:	2e76                	fld	ft8,344(sp)
    116c:	6f630053          	0x6f630053
    1170:	706d                	c.lui	zero,0xffffb
    1172:	656c                	flw	fa1,76(a0)
    1174:	2078                	fld	fa4,192(s0)
    1176:	465f 6f6c 7461      	0x74616f6c465f
        for (i = 0; i < default_num_contexts; i++)
    117c:	3631                	jal	c88 <main+0x2a0>
    117e:	6300                	flw	fs0,0(a4)
            ee_printf("[%d]crcstate      : 0x%04x\n", i, results[i].crcstate);
    1180:	6c706d6f          	jal	s10,8046 <__heap_end+0x7b6>
    1184:	7865                	lui	a6,0xffff9
    1186:	6c20                	flw	fs0,88(s0)
    1188:	20676e6f          	jal	t3,7738e <RAM_SIZE+0x6738e>
    118c:	6f64                	flw	fs1,92(a4)
    118e:	6275                	lui	tp,0x1d
    1190:	656c                	flw	fa1,76(a0)
    1192:	5500                	lw	s0,40(a0)
    1194:	4951                	li	s2,20
    1196:	7974                	flw	fa3,116(a0)
    1198:	6570                	flw	fa2,76(a0)
    119a:	5f00                	lw	s0,56(a4)
    119c:	635f 7a6c 745f      	0x745f7a6c635f
    11a2:	6261                	lui	tp,0x18
    11a4:	6300                	flw	fs0,0(a4)
    11a6:	6c706d6f          	jal	s10,806c <__heap_end+0x7dc>
    11aa:	7865                	lui	a6,0xffff9
    11ac:	6620                	flw	fs0,72(a2)
    11ae:	6f6c                	flw	fa1,92(a4)
        for (i = 0; i < default_num_contexts; i++)
    11b0:	7461                	lui	s0,0xffff8
    11b2:	2e00                	fld	fs0,24(a2)
    11b4:	2f2e                	fld	ft10,200(sp)
    11b6:	2e2e                	fld	ft8,200(sp)
    11b8:	2f2e2e2f          	0x2f2e2e2f
    11bc:	2e2e                	fld	ft8,200(sp)
    11be:	2f2e2e2f          	0x2f2e2e2f
    11c2:	6972                	flw	fs2,28(sp)
        ee_printf("[%d]crcfinal      : 0x%04x\n", i, results[i].crc);
    11c4:	2d766373          	csrrsi	t1,0x2d7,12
    for (i = 0; i < default_num_contexts; i++)
    11c8:	2f636367          	0x2f636367
        ee_printf("[%d]crcfinal      : 0x%04x\n", i, results[i].crc);
    11cc:	696c                	flw	fa1,84(a0)
    11ce:	6762                	flw	fa4,24(sp)
    11d0:	6c2f6363          	bltu	t5,sp,1896 <matrix_mul_matrix+0x72>
    11d4:	6269                	lui	tp,0x1a
    11d6:	32636367          	0x32636367
    11da:	632e                	flw	ft6,200(sp)
    for (i = 0; i < default_num_contexts; i++)
    11dc:	5f00                	lw	s0,56(a4)
    11de:	785f 0072 6f63      	0x6f630072785f
        ee_printf("[%d]crcfinal      : 0x%04x\n", i, results[i].crc);
    11e4:	706d                	c.lui	zero,0xffffb
    11e6:	656c                	flw	fa1,76(a0)
    11e8:	2078                	fld	fa4,192(s0)
    11ea:	6f64                	flw	fs1,92(a4)
    for (i = 0; i < default_num_contexts; i++)
    11ec:	6275                	lui	tp,0x1d
    11ee:	656c                	flw	fa1,76(a0)
        ee_printf("[%d]crcfinal      : 0x%04x\n", i, results[i].crc);
    11f0:	2e00                	fld	fs0,24(a2)
    11f2:	2f2e                	fld	ft10,200(sp)
    11f4:	2e2e                	fld	ft8,200(sp)
    11f6:	2f2e2e2f          	0x2f2e2e2f
    11fa:	2e2e                	fld	ft8,200(sp)
    11fc:	2f2e2e2f          	0x2f2e2e2f
    1200:	6972                	flw	fs2,28(sp)
    1202:	2d766373          	csrrsi	t1,0x2d7,12
    1206:	2f636367          	0x2f636367
    120a:	696c                	flw	fa1,84(a0)
    120c:	6762                	flw	fa4,24(sp)
    120e:	732f6363          	bltu	t5,s2,1934 <matrix_mul_matrix+0x110>
    1212:	2d74666f          	jal	a2,47ce8 <RAM_SIZE+0x37ce8>
    for (i = 0; i < default_num_contexts; i++)
    1216:	7066                	flw	ft0,120(sp)
    1218:	6275732f          	vamoandei64.v	zero,(a0),v7,v6
    121c:	6664                	flw	fs1,76(a2)
    121e:	00632e33          	slt	t3,t1,t1
    1222:	5f5f 7573 6462      	0x646275735f5f
    if (total_errors == 0)
    1228:	3366                	fld	ft6,120(sp)
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
lui     sp,%hi(__stack_top)                                             
       0:	0314                	addi	a3,sp,384
       2:	0000                	unimp
addi    sp,sp,%lo(__stack_top)
       4:	035c                	addi	a5,sp,388
       6:	0000                	unimp
jal   zero, _start
       8:	0001                	nop
       a:	5c5a                	lw	s8,180(sp)
       c:	6c000003          	lb	zero,1728(zero) # 6c0 <core_bench_list+0x19c>
      10:	02000003          	lb	zero,32(zero) # 20 <_start+0x10>
      14:	3000                	fld	fs0,32(s0)
      16:	6c9f 0003 ec00      	0xec0000036c9f
      1c:	01000003          	lb	zero,16(zero) # 10 <_start>
      20:	6600                	flw	fs0,8(a2)
      22:	03f4                	addi	a3,sp,460
      24:	0000                	unimp
      26:	0408                	addi	a0,sp,512
      28:	0000                	unimp
      2a:	0001                	nop
      2c:	1c66                	slli	s8,s8,0x39
      2e:	0004                	0x4
      30:	2400                	fld	fs0,8(s0)
      32:	0004                	0x4
      34:	0200                	addi	s0,sp,256
      36:	3000                	fld	fs0,32(s0)
      38:	009f 0000 0000      	0x9f
      3e:	0000                	unimp
      40:	1400                	addi	s0,sp,544
      42:	5c000003          	lb	zero,1472(zero) # 5c0 <core_bench_list+0x9c>
      46:	01000003          	lb	zero,16(zero) # 10 <_start>
      4a:	5b00                	lw	s0,48(a4)
      4c:	035c                	addi	a5,sp,388
      4e:	0000                	unimp
      50:	0444                	addi	s1,sp,516
      52:	0000                	unimp
      54:	0001                	nop
      56:	00044467          	0x44467
      5a:	6000                	flw	fs0,0(s0)
      5c:	0004                	0x4
      5e:	0400                	addi	s0,sp,512
      60:	f300                	fsw	fs0,32(a4)
      62:	5b01                	li	s6,-32
      64:	009f 0000 0000      	0x9f
      6a:	0000                	unimp
      6c:	1400                	addi	s0,sp,544
      6e:	5c000003          	lb	zero,1472(zero) # 5c0 <core_bench_list+0x9c>
      72:	01000003          	lb	zero,16(zero) # 10 <_start>
      76:	5c00                	lw	s0,56(s0)
      78:	035c                	addi	a5,sp,388
      7a:	0000                	unimp
      7c:	0450                	addi	a2,sp,516
      7e:	0000                	unimp
      80:	0001                	nop
      82:	506a                	0x506a
      84:	0004                	0x4
      86:	6000                	flw	fs0,0(s0)
      88:	0004                	0x4
      8a:	0400                	addi	s0,sp,512
      8c:	f300                	fsw	fs0,32(a4)
      8e:	5c01                	li	s8,-32
      90:	009f 0000 0000      	0x9f
      96:	0000                	unimp
      98:	5c00                	lw	s0,56(s0)
      9a:	94000003          	lb	zero,-1728(zero) # fffff940 <RAM_SIZE+0xfffef940>
      9e:	01000003          	lb	zero,16(zero) # 10 <_start>
      a2:	5900                	lw	s0,48(a0)
      a4:	0394                	addi	a3,sp,448
      a6:	0000                	unimp
      a8:	03f4                	addi	a3,sp,460
      aa:	0000                	unimp
      ac:	0001                	nop
      ae:	f464                	fsw	fs1,108(s0)
      b0:	00000003          	lb	zero,0(zero) # 0 <RAM_START_ADDRESS>
      b4:	0004                	0x4
      b6:	0200                	addi	s0,sp,256
      b8:	8400                	0x8400
      ba:	0000                	unimp
      bc:	0004                	0x4
      be:	0400                	addi	s0,sp,512
      c0:	0004                	0x4
      c2:	0100                	addi	s0,sp,128
    if (res == NULL)
      c4:	6400                	flw	fs0,8(s0)
      c6:	0404                	addi	s1,sp,512
    return a->idx - b->idx;
      c8:	0000                	unimp
      ca:	0408                	addi	a0,sp,512
      cc:	0000                	unimp
      ce:	0001                	nop
}
      d0:	1c59                	addi	s8,s8,-10
      d2:	0004                	0x4
      d4:	2400                	fld	fs0,8(s0)
      d6:	0004                	0x4
        a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16 >> 8));
      d8:	0100                	addi	s0,sp,128
      da:	5900                	lw	s0,48(a0)
	...
      e4:	0370                	addi	a2,sp,396
      e6:	0000                	unimp
      e8:	0378                	addi	a4,sp,396
      ea:	0000                	unimp
      ec:	0001                	nop
      ee:	7859                	lui	a6,0xffff6
      f0:	7c000003          	lb	zero,1984(zero) # 7c0 <core_list_init+0x14>
        b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16 >> 8));
      f4:	01000003          	lb	zero,16(zero) # 10 <_start>
    return a->idx - b->idx;
      f8:	5f00                	lw	s0,56(a4)
      fa:	0380                	addi	s0,sp,448
        b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16 >> 8));
      fc:	0000                	unimp
      fe:	0394                	addi	a3,sp,448
     100:	0000                	unimp
     102:	0001                	nop
     104:	945f 0003 b400      	0xb4000003945f
     10a:	01000003          	lb	zero,16(zero) # 10 <_start>
     10e:	5900                	lw	s0,48(a0)
     110:	03b4                	addi	a3,sp,456
     112:	0000                	unimp
    return a->idx - b->idx;
     114:	03bc                	addi	a5,sp,456
     116:	0000                	unimp
}
     118:	0002                	c.slli64	zero
     11a:	0079                	c.nop	30
     11c:	03bc                	addi	a5,sp,456
     11e:	0000                	unimp
{
     120:	03d8                	addi	a4,sp,452
     122:	0000                	unimp
     124:	0001                	nop
     126:	d859                	beqz	s0,bc <frame_dummy+0x18>
    ee_s16 data = *pdata;
     128:	e4000003          	lb	zero,-448(zero) # fffffe40 <RAM_SIZE+0xfffefe40>
{
     12c:	02000003          	lb	zero,32(zero) # 20 <_start+0x10>
     130:	7900                	flw	fs0,48(a0)
     132:	e400                	fsw	fs0,8(s0)
          & 1;  /* bit 7 indicates if the function result has been cached */
     134:	18000003          	lb	zero,384(zero) # 180 <calc_func+0x60>
{
     138:	0004                	0x4
     13a:	0100                	addi	s0,sp,128
     13c:	5900                	lw	s0,48(a0)
     13e:	0424                	addi	s1,sp,520
    if (optype) /* if cached, use cache */
     140:	0000                	unimp
     142:	0430                	addi	a2,sp,520
     144:	0000                	unimp
     146:	0001                	nop
}
     148:	0059                	c.nop	22
     14a:	0000                	unimp
        return (data & 0x007f);
     14c:	0000                	unimp
     14e:	0000                	unimp
}
     150:	b400                	fsd	fs0,40(s0)
     152:	bc000003          	lb	zero,-1088(zero) # fffffbc0 <RAM_SIZE+0xfffefbc0>
     156:	01000003          	lb	zero,16(zero) # 10 <_start>
     15a:	5900                	lw	s0,48(a0)
     15c:	03bc                	addi	a5,sp,456
     15e:	0000                	unimp
     160:	03d0                	addi	a2,sp,452
     162:	0000                	unimp
     164:	0001                	nop
     166:	d85f 0003 e400      	0xe4000003d85f
               & 0xf);       /* bits 3-6 is specific data for the operation */
     16c:	01000003          	lb	zero,16(zero) # 10 <_start>
        ee_s16 dtype
     170:	5900                	lw	s0,48(a0)
     172:	03e4                	addi	s1,sp,460
        dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
     174:	0000                	unimp
     176:	03f4                	addi	a3,sp,460
        ee_s16 flag = data & 0x7; /* bits 0-2 is type of function to perform */
     178:	0000                	unimp
     17a:	0001                	nop
                retval = core_bench_state(res->size,
     17c:	f45f 0003 0000      	0x3f45f
     182:	0004                	0x4
        dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
     184:	0100                	addi	s0,sp,128
     186:	6400                	flw	fs0,8(s0)
        switch (flag)
     188:	0400                	addi	s0,sp,512
     18a:	0000                	unimp
     18c:	0404                	addi	s1,sp,512
     18e:	0000                	unimp
     190:	0001                	nop
     192:	005f 0000 0000      	0x5f
        res->crc = crcu16(retval, res->crc);
     198:	0000                	unimp
     19a:	5c00                	lw	s0,56(s0)
     19c:	6c000003          	lb	zero,1728(zero) # 6c0 <core_bench_list+0x19c>
     1a0:	02000003          	lb	zero,32(zero) # 20 <_start+0x10>
     1a4:	3000                	fld	fs0,32(s0)
     1a6:	6c9f 0003 cc00      	0xcc0000036c9f
        *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
     1ac:	01000003          	lb	zero,16(zero) # 10 <_start>
        retval &= 0x007f;
     1b0:	6200                	flw	fs0,0(a2)
     1b2:	03cc                	addi	a1,sp,452
        *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
     1b4:	0000                	unimp
     1b6:	03d0                	addi	a2,sp,452
        res->crc = crcu16(retval, res->crc);
     1b8:	0000                	unimp
     1ba:	0001                	nop
        *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
     1bc:	d05f 0003 f000      	0xf0000003d05f
     1c2:	01000003          	lb	zero,16(zero) # 10 <_start>
}
     1c6:	6200                	flw	fs0,0(a2)
     1c8:	03f4                	addi	a3,sp,460
     1ca:	0000                	unimp
     1cc:	0408                	addi	a0,sp,512
     1ce:	0000                	unimp
     1d0:	0001                	nop
     1d2:	1c62                	slli	s8,s8,0x38
     1d4:	0004                	0x4
     1d6:	2400                	fld	fs0,8(s0)
     1d8:	0004                	0x4
     1da:	0200                	addi	s0,sp,256
     1dc:	3000                	fld	fs0,32(s0)
     1de:	009f 0000 0000      	0x9f
                retval = core_bench_state(res->size,
     1e4:	0000                	unimp
     1e6:	1400                	addi	s0,sp,544
     1e8:	5c000003          	lb	zero,1472(zero) # 5c0 <core_bench_list+0x9c>
     1ec:	02000003          	lb	zero,32(zero) # 20 <_start+0x10>
     1f0:	3100                	fld	fs0,32(a0)
     1f2:	5c9f 0003 4000      	0x400000035c9f
     1f8:	0004                	0x4
     1fa:	0100                	addi	s0,sp,128
     1fc:	6500                	flw	fs0,8(a0)
	...
     206:	035c                	addi	a5,sp,388
                if (res->crcstate == 0)
     208:	0000                	unimp
     20a:	036c                	addi	a1,sp,396
                retval = core_bench_state(res->size,
     20c:	0000                	unimp
     20e:	0002                	c.slli64	zero
     210:	9f30                	0x9f30
     212:	036c                	addi	a1,sp,396
                if (res->crcstate == 0)
     214:	0000                	unimp
     216:	0408                	addi	a0,sp,512
        res->crc = crcu16(retval, res->crc);
     218:	0000                	unimp
     21a:	0001                	nop
                    res->crcstate = retval;
     21c:	1c68                	addi	a0,sp,572
     21e:	0004                	0x4
     220:	2400                	fld	fs0,8(s0)
     222:	0004                	0x4
                retval = core_bench_matrix(&(res->mat), dtype, res->crc);
     224:	0200                	addi	s0,sp,256
     226:	3000                	fld	fs0,32(s0)
     228:	009f 0000 0000      	0x9f
     22e:	0000                	unimp
                if (res->crcmatrix == 0)
     230:	7000                	flw	fs0,32(s0)
     232:	78000003          	lb	zero,1920(zero) # 780 <core_bench_list+0x25c>
                retval = core_bench_matrix(&(res->mat), dtype, res->crc);
     236:	02000003          	lb	zero,32(zero) # 20 <_start+0x10>
     23a:	3000                	fld	fs0,32(s0)
                if (res->crcmatrix == 0)
     23c:	789f 0003 1c00      	0x1c000003789f
        res->crc = crcu16(retval, res->crc);
     242:	0004                	0x4
                    res->crcmatrix = retval;
     244:	0100                	addi	s0,sp,128
     246:	5800                	lw	s0,48(s0)
     248:	0424                	addi	s1,sp,520
     24a:	0000                	unimp
        res->crc = crcu16(retval, res->crc);
     24c:	042c                	addi	a1,sp,520
     24e:	0000                	unimp
     250:	0001                	nop
     252:	0058                	addi	a4,sp,4
{
     254:	0000                	unimp
     256:	0000                	unimp
     258:	0000                	unimp
     25a:	9400                	0x9400
     25c:	1c000003          	lb	zero,448(zero) # 1c0 <calc_func+0xa0>
    ee_s16 val1 = calc_func(&(a->data16), res);
     260:	0004                	0x4
     262:	0100                	addi	s0,sp,128
{
     264:	6300                	flw	fs0,0(a4)
     266:	0424                	addi	s1,sp,520
     268:	0000                	unimp
     26a:	0438                	addi	a4,sp,520
     26c:	0000                	unimp
     26e:	0001                	nop
    ee_s16 val1 = calc_func(&(a->data16), res);
     270:	00000063          	beqz	zero,270 <cmp_complex+0x1c>
     274:	0000                	unimp
     276:	0000                	unimp
    ee_s16 val2 = calc_func(&(b->data16), res);
     278:	7000                	flw	fs0,32(s0)
     27a:	78000003          	lb	zero,1920(zero) # 780 <core_bench_list+0x25c>
     27e:	02000003          	lb	zero,32(zero) # 20 <_start+0x10>
    ee_s16 val1 = calc_func(&(a->data16), res);
     282:	3000                	fld	fs0,32(s0)
    ee_s16 val2 = calc_func(&(b->data16), res);
     284:	789f 0003 8000      	0x80000003789f
}
     28a:	01000003          	lb	zero,16(zero) # 10 <_start>
     28e:	5800                	lw	s0,48(s0)
     290:	0380                	addi	s0,sp,448
     292:	0000                	unimp
     294:	0384                	addi	s1,sp,448
     296:	0000                	unimp
     298:	7f780003          	lb	zero,2039(a6) # ffff67f7 <RAM_SIZE+0xfffe67f7>
     29c:	849f 0003 8800      	0x88000003849f
    to->data16 = from->data16;
     2a2:	01000003          	lb	zero,16(zero) # 10 <_start>
    to->idx    = from->idx;
     2a6:	5800                	lw	s0,48(s0)
	...
}
     2b0:	06e8                	addi	a0,sp,844
     2b2:	0000                	unimp
    if ((*memblock + 1) >= memblock_end)
     2b4:	0000070f          	0x70f
     2b8:	0001                	nop
     2ba:	0f5a                	slli	t5,t5,0x16
     2bc:	9c000007          	vloxseg5ei128.v	v0,(zero),v0,v0.t
    if ((*datablock + 1) >= datablock_end)
     2c0:	0008                	0x8
     2c2:	0400                	addi	s0,sp,512
     2c4:	f300                	fsw	fs0,32(a4)
     2c6:	5a01                	li	s4,-32
     2c8:	009f 0000 0000      	0x9f
    (*memblock)++;
     2ce:	0000                	unimp
    newitem->next      = insert_point->next;
     2d0:	e800                	fsw	fs0,16(s0)
     2d2:	0006                	c.slli	zero,0x1
    to->data16 = from->data16;
     2d4:	f800                	fsw	fs0,48(s0)
     2d6:	0006                	c.slli	zero,0x1
    to->idx    = from->idx;
     2d8:	0100                	addi	s0,sp,128
     2da:	5b00                	lw	s0,48(a4)
    newitem->next      = insert_point->next;
     2dc:	06f8                	addi	a4,sp,844
     2de:	0000                	unimp
    insert_point->next = newitem;
     2e0:	0744                	addi	s1,sp,900
     2e2:	0000                	unimp
    newitem->info = *datablock;
     2e4:	0001                	nop
     2e6:	4462                	lw	s0,24(sp)
    (*datablock)++;
     2e8:	54000007          	vluxseg3ei128.v	v0,(zero),v0,v0.t
}
     2ec:	01000007          	vle8ff.v	v0,(zero),v0.t
    (*datablock)++;
     2f0:	5800                	lw	s0,48(s0)
     2f2:	0754                	addi	a3,sp,900
     2f4:	0000                	unimp
     2f6:	07ac                	addi	a1,sp,968
    copy_info(newitem->info, info);
     2f8:	0000                	unimp
     2fa:	0001                	nop
    to->data16 = from->data16;
     2fc:	ac5d                	j	5b2 <core_bench_list+0x8e>
     2fe:	e0000007          	vlseg8e8.v	v0,(zero),v0.t
    to->idx    = from->idx;
     302:	01000007          	vle8ff.v	v0,(zero),v0.t
}
     306:	5600                	lw	s0,40(a2)
        return NULL;
     308:	07e0                	addi	s0,sp,972
     30a:	0000                	unimp
}
     30c:	000007f3          	0x7f3
     310:	0001                	nop
     312:	8c5d                	or	s0,s0,a5
{
     314:	0008                	0x8
     316:	9000                	0x9000
    list_head *ret = item->next;
     318:	0008                	0x8
     31a:	0100                	addi	s0,sp,128
    tmp        = item->info;
     31c:	5800                	lw	s0,48(s0)
     31e:	0890                	addi	a2,sp,80
    item->info = ret->info;
     320:	0000                	unimp
     322:	089c                	addi	a5,sp,80
    item->next = item->next->next;
     324:	0000                	unimp
     326:	0002                	c.slli64	zero
    item->info = ret->info;
     328:	9f30                	0x9f30
	...
    item->next = item->next->next;
     332:	06e8                	addi	a0,sp,844
    ret->next  = NULL;
     334:	0000                	unimp
     336:	0000070f          	0x70f
}
     33a:	0001                	nop
    item_removed->info  = item_modified->info;
     33c:	0f5c                	addi	a5,sp,916
     33e:	9c000007          	vloxseg5ei128.v	v0,(zero),v0,v0.t
    tmp                 = item_removed->info;
     342:	0008                	0x8
    item_removed->next  = item_modified->next;
     344:	0400                	addi	s0,sp,512
     346:	f300                	fsw	fs0,32(a4)
    item_removed->info  = item_modified->info;
     348:	5c01                	li	s8,-32
     34a:	009f 0000 0000      	0x9f
    item_removed->next  = item_modified->next;
     350:	0000                	unimp
     352:	1400                	addi	s0,sp,544
    item_modified->next = item_removed;
     354:	f3000007          	vlseg8e128ff.v	v0,(zero)
}
     358:	01000007          	vle8ff.v	v0,(zero),v0.t
    if (info->idx >= 0)
     35c:	5a00                	lw	s0,48(a2)
     35e:	088c                	addi	a1,sp,80
     360:	0000                	unimp
     362:	089c                	addi	a5,sp,80
        while (list && (list->info->idx != info->idx))
     364:	0000                	unimp
     366:	0001                	nop
     368:	005a                	c.slli	zero,0x16
     36a:	0000                	unimp
            list = list->next;
     36c:	0000                	unimp
     36e:	0000                	unimp
        while (list && (list->info->idx != info->idx))
     370:	1c00                	addi	s0,sp,560
     372:	f3000007          	vlseg8e128ff.v	v0,(zero)
     376:	01000007          	vle8ff.v	v0,(zero),v0.t
     37a:	5c00                	lw	s0,56(s0)
     37c:	088c                	addi	a1,sp,80
     37e:	0000                	unimp
     380:	089c                	addi	a5,sp,80
     382:	0000                	unimp
        while (list && ((list->info->data16 & 0xff) != info->data16))
     384:	0001                	nop
     386:	005c                	addi	a5,sp,4
     388:	0000                	unimp
     38a:	0000                	unimp
     38c:	0000                	unimp
     38e:	4800                	lw	s0,16(s0)
            list = list->next;
     390:	60000007          	vlseg4e8.v	v0,(zero),v0.t
        while (list && ((list->info->data16 & 0xff) != info->data16))
     394:	01000007          	vle8ff.v	v0,(zero),v0.t
     398:	5e00                	lw	s0,56(a2)
     39a:	0760                	addi	s0,sp,908
     39c:	0000                	unimp
     39e:	07cc                	addi	a1,sp,964
     3a0:	0000                	unimp
     3a2:	0001                	nop
     3a4:	cc61                	beqz	s0,47c <core_list_mergesort+0xa4>
     3a6:	e0000007          	vlseg8e8.v	v0,(zero),v0.t
     3aa:	01000007          	vle8ff.v	v0,(zero),v0.t
}
     3ae:	6c00                	flw	fs0,24(s0)
     3b0:	07e0                	addi	s0,sp,972
     3b2:	0000                	unimp
    while (list)
     3b4:	000007f3          	0x7f3
    list_head *next = NULL, *tmp;
     3b8:	0001                	nop
     3ba:	8c61                	and	s0,s0,s0
     3bc:	0008                	0x8
     3be:	9c00                	0x9c00
     3c0:	0008                	0x8
     3c2:	0100                	addi	s0,sp,128
        tmp        = list->next;
     3c4:	5e00                	lw	s0,56(a2)
	...
    while (list)
     3ce:	0740                	addi	s0,sp,900
     3d0:	0000                	unimp
     3d2:	07f0                	addi	a2,sp,972
}
     3d4:	0000                	unimp
     3d6:	0001                	nop
{
     3d8:	0007f05b          	0x7f05b
     3dc:	f300                	fsw	fs0,32(a4)
     3de:	08000007          	vlse8.v	v0,(zero),zero,v0.t
     3e2:	7a00                	flw	fs0,48(a2)
     3e4:	3200                	fld	fs0,32(a2)
     3e6:	7c24                	flw	fs1,120(s0)
     3e8:	2200                	fld	fs0,0(a2)
     3ea:	8c9f 0008 9c00      	0x9c0000088c9f
     3f0:	0008                	0x8
     3f2:	0100                	addi	s0,sp,128
     3f4:	5b00                	lw	s0,48(a4)
	...
     3fe:	0770                	addi	a2,sp,908
     400:	0000                	unimp
     402:	0788                	addi	a0,sp,960
     404:	0000                	unimp
     406:	0002                	c.slli64	zero
     408:	9f30                	0x9f30
     40a:	0788                	addi	a0,sp,960
     40c:	0000                	unimp
     40e:	07b0                	addi	a2,sp,968
     410:	0000                	unimp
     412:	0001                	nop
     414:	b060                	fsd	fs0,224(s0)
     416:	e0000007          	vlseg8e8.v	v0,(zero),v0.t
    insize = 1;
     41a:	03000007          	vle8ff.v	v0,(zero)
        if (nmerges <= 1) /* allow for nmerges==0, the empty list case */
     41e:	8000                	0x8000
        while (p)
     420:	9f7f                	0x9f7f
     422:	07e0                	addi	s0,sp,972
        nmerges = 0; /* count number of merges we do in this pass */
     424:	0000                	unimp
     426:	07e4                	addi	s1,sp,972
        tail = NULL;
     428:	0000                	unimp
     42a:	0001                	nop
        list = NULL;
     42c:	e460                	fsw	fs0,76(s0)
     42e:	08000007          	vlse8.v	v0,(zero),zero,v0.t
            nmerges++; /* there exists a merge to be done */
     432:	0008                	0x8
     434:	0200                	addi	s0,sp,256
     436:	3100                	fld	fs0,32(a0)
            psize = 0;
     438:	089f 0008 2000      	0x20000008089f
                q = q->next;
     43e:	0008                	0x8
                psize++;
     440:	0300                	addi	s0,sp,384
     442:	7d00                	flw	fs0,56(a0)
                if (!q)
     444:	9f01                	0x9f01
     446:	0820                	addi	s0,sp,24
            for (i = 0; i < insize; i++)
     448:	0000                	unimp
     44a:	082c                	addi	a1,sp,24
                    list = e;
     44c:	0000                	unimp
     44e:	0001                	nop
     450:	2c5d                	jal	706 <core_bench_list+0x1e2>
     452:	0008                	0x8
     454:	5c00                	lw	s0,56(s0)
     456:	0008                	0x8
            while (psize > 0 || (qsize > 0 && q))
     458:	0300                	addi	s0,sp,384
     45a:	7d00                	flw	fs0,56(a0)
                else if (qsize == 0 || !q)
     45c:	9f01                	0x9f01
     45e:	085c                	addi	a5,sp,20
     460:	0000                	unimp
     462:	0864                	addi	s1,sp,28
                else if (cmp(p->info, q->info, res) <= 0)
     464:	0000                	unimp
     466:	0001                	nop
     468:	005d                	c.nop	23
     46a:	0000                	unimp
     46c:	0000                	unimp
     46e:	0000                	unimp
     470:	e400                	fsw	fs0,8(s0)
     472:	f3000007          	vlseg8e128ff.v	v0,(zero)
     476:	02000007          	vle8.v	v0,(zero)
                    qsize--;
     47a:	8200                	0x8200
                    q = q->next;
     47c:	1400                	addi	s0,sp,544
     47e:	0008                	0x8
                    qsize--;
     480:	2800                	fld	fs0,16(s0)
     482:	0008                	0x8
                if (tail)
     484:	0100                	addi	s0,sp,128
     486:	5900                	lw	s0,48(a0)
                    tail->next = e;
     488:	0828                	addi	a0,sp,24
     48a:	0000                	unimp
                    list = e;
     48c:	082c                	addi	a1,sp,24
     48e:	0000                	unimp
            while (psize > 0 || (qsize > 0 && q))
     490:	0001                	nop
     492:	4858                	lw	a4,20(s0)
     494:	0008                	0x8
     496:	6400                	flw	fs0,8(s0)
     498:	0008                	0x8
     49a:	0100                	addi	s0,sp,128
                    qsize--;
     49c:	5900                	lw	s0,48(a0)
	...
                    q = q->next;
     4a6:	0740                	addi	s0,sp,900
                if (tail)
     4a8:	0000                	unimp
     4aa:	087c                	addi	a5,sp,28
                    list = e;
     4ac:	0000                	unimp
     4ae:	0001                	nop
     4b0:	7c62                	flw	fs8,56(sp)
     4b2:	0008                	0x8
     4b4:	8b00                	0x8b00
     4b6:	0008                	0x8
                    psize--;
     4b8:	0100                	addi	s0,sp,128
     4ba:	5a00                	lw	s0,48(a2)
     4bc:	0000088b          	0x88b
                    p = p->next;
     4c0:	088c                	addi	a1,sp,80
     4c2:	0000                	unimp
     4c4:	0004                	0x4
     4c6:	9f5b01f3          	0x9f5b01f3
        while (p)
     4ca:	088c                	addi	a1,sp,80
        tail->next = NULL;
     4cc:	0000                	unimp
     4ce:	089c                	addi	a5,sp,80
        if (nmerges <= 1) /* allow for nmerges==0, the empty list case */
     4d0:	0000                	unimp
     4d2:	0001                	nop
        insize *= 2;
     4d4:	0062                	c.slli	zero,0x18
     4d6:	0000                	unimp
        p    = list;
     4d8:	0000                	unimp
     4da:	0000                	unimp
     4dc:	8800                	0x8800
     4de:	b0000007          	vlseg6e128.v	v0,(zero),v0.t
        tail->next = NULL;
     4e2:	08000007          	vlse8.v	v0,(zero),zero,v0.t
     4e6:	8000                	0x8000
}
     4e8:	8d00                	0x8d00
     4ea:	2700                	fld	fs0,8(a4)
     4ec:	009f1a3f 00000000 	0x9f1a3f
     4f4:	0000                	unimp
     4f6:	8800                	0x8800
     4f8:	b0000007          	vlseg6e128.v	v0,(zero),v0.t
     4fc:	10000007          	vle128.v	v0,(zero),v0.t
     500:	8000                	0x8000
     502:	8d00                	0x8d00
     504:	2700                	fld	fs0,8(a4)
     506:	78082433          	0x78082433
     50a:	801a                	c.mv	zero,t1
     50c:	3700                	fld	fs0,40(a4)
     50e:	211a                	fld	ft2,384(sp)
     510:	009f 0000 0000      	0x9f
     516:	0000                	unimp
     518:	8800                	0x8800
     51a:	e0000007          	vlseg8e8.v	v0,(zero),v0.t
     51e:	01000007          	vle8ff.v	v0,(zero),v0.t
     522:	5b00                	lw	s0,48(a4)
	...
{
     52c:	0788                	addi	a0,sp,960
     52e:	0000                	unimp
     530:	07e0                	addi	s0,sp,972
     532:	0000                	unimp
     534:	0001                	nop
     536:	005c                	addi	a5,sp,4
     538:	0000                	unimp
     53a:	0000                	unimp
     53c:	0000                	unimp
     53e:	8800                	0x8800
     540:	e0000007          	vlseg8e8.v	v0,(zero),v0.t
     544:	06000007          	vluxei8.v	v0,(zero),v0
     548:	f200                	fsw	fs0,32(a2)
     54a:	05a9                	addi	a1,a1,10
	...
    info.idx = finder_idx;
     554:	0000                	unimp
     556:	8800                	0x8800
    for (i = 0; i < find_num; i++)
     558:	e0000007          	vlseg8e8.v	v0,(zero),v0.t
    ee_u16     found = 0, missed = 0;
     55c:	06000007          	vluxei8.v	v0,(zero),v0
     560:	f200                	fsw	fs0,32(a2)
     562:	0000055b          	0x55b
	...
    if (info->idx >= 0)
     56e:	8800                	0x8800
        while (list && (list->info->idx != info->idx))
     570:	e0000007          	vlseg8e8.v	v0,(zero),v0.t
     574:	06000007          	vluxei8.v	v0,(zero),v0
     578:	f200                	fsw	fs0,32(a2)
     57a:	05fc                	addi	a5,sp,716
	...
     584:	0000                	unimp
     586:	8800                	0x8800
     588:	e0000007          	vlseg8e8.v	v0,(zero),v0.t
     58c:	01000007          	vle8ff.v	v0,(zero),v0.t
    list_head *next = NULL, *tmp;
     590:	6200                	flw	fs0,0(a2)
	...
     59a:	07a4                	addi	s1,sp,968
     59c:	0000                	unimp
     59e:	07e0                	addi	s0,sp,972
        tmp        = list->next;
     5a0:	0000                	unimp
     5a2:	0001                	nop
        list->next = next;
     5a4:	e05d                	bnez	s0,64a <core_bench_list+0x126>
     5a6:	e4000007          	vluxseg8ei8.v	v0,(zero),v0,v0.t
    while (list)
     5aa:	03000007          	vle8ff.v	v0,(zero)
        if (this_find == NULL)
     5ae:	7600                	flw	fs0,40(a2)
            if (this_find->info->data16 & 0x1) /* use found value */
     5b0:	9f78                	0x9f78
	...
            found++;
     5ba:	07cc                	addi	a1,sp,964
            if (this_find->info->data16 & 0x1) /* use found value */
     5bc:	0000                	unimp
     5be:	07d4                	addi	a3,sp,964
            found++;
     5c0:	0000                	unimp
     5c2:	0006                	c.slli	zero,0x1
            if (this_find->info->data16 & 0x1) /* use found value */
     5c4:	fcf2                	fsw	ft8,120(sp)
     5c6:	0005                	c.nop	1
	...
                retval += (this_find->info->data16 >> 9) & 1;
     5d0:	0000                	unimp
     5d2:	07cc                	addi	a1,sp,964
     5d4:	0000                	unimp
     5d6:	07d4                	addi	a3,sp,964
     5d8:	0000                	unimp
     5da:	0001                	nop
     5dc:	0061                	c.nop	24
     5de:	0000                	unimp
            if (this_find->next != NULL)
     5e0:	0000                	unimp
     5e2:	0000                	unimp
     5e4:	0800                	addi	s0,sp,16
     5e6:	0008                	0x8
                this_find->next = finder->next;
     5e8:	2000                	fld	fs0,0(s0)
     5ea:	0008                	0x8
     5ec:	0600                	addi	s0,sp,768
     5ee:	8300                	0x8300
                finder->next    = list->next;
     5f0:	7d00                	flw	fs0,56(a0)
     5f2:	2700                	fld	fs0,8(a4)
     5f4:	209f 0008 2800      	0x28000008209f
                list->next      = finder;
     5fa:	0008                	0x8
        if (info.idx >= 0)
     5fc:	0800                	addi	s0,sp,16
     5fe:	8300                	0x8300
            info.idx++;
     600:	7c00                	flw	fs0,56(s0)
     602:	9402                	jalr	s0
     604:	2702                	fld	fa4,0(sp)
     606:	2c9f 0008 5c00      	0x5c0000082c9f
    for (i = 0; i < find_num; i++)
     60c:	0008                	0x8
     60e:	0600                	addi	s0,sp,768
     610:	8300                	0x8300
     612:	7d00                	flw	fs0,56(a0)
     614:	2700                	fld	fs0,8(a4)
     616:	009f 0000 0000      	0x9f
    retval += found * 4 - missed;
     61c:	0000                	unimp
     61e:	4800                	lw	s0,16(s0)
     620:	70000007          	vlseg4e128.v	v0,(zero),v0.t
     624:	01000007          	vle8ff.v	v0,(zero),v0.t
     628:	5b00                	lw	s0,48(a4)
     62a:	088c                	addi	a1,sp,80
     62c:	0000                	unimp
     62e:	089c                	addi	a5,sp,80
    if (finder_idx > 0)
     630:	0000                	unimp
     632:	0001                	nop
        list = core_list_mergesort(list, cmp_complex, res);
     634:	0000005b          	0x5b
     638:	0000                	unimp
     63a:	0000                	unimp
     63c:	4800                	lw	s0,16(s0)
     63e:	70000007          	vlseg4e128.v	v0,(zero),v0.t
     642:	01000007          	vle8ff.v	v0,(zero),v0.t
    remover = core_list_remove(list->next);
     646:	5c00                	lw	s0,56(s0)
    list_head *ret = item->next;
     648:	088c                	addi	a1,sp,80
     64a:	0000                	unimp
     64c:	089c                	addi	a5,sp,80
     64e:	0000                	unimp
    tmp        = item->info;
     650:	0001                	nop
     652:	005c                	addi	a5,sp,4
    item->info = ret->info;
     654:	0000                	unimp
     656:	0000                	unimp
    item->next = item->next->next;
     658:	0000                	unimp
     65a:	4800                	lw	s0,16(s0)
    item->info = ret->info;
     65c:	70000007          	vlseg4e128.v	v0,(zero),v0.t
    ret->info  = tmp;
     660:	06000007          	vluxei8.v	v0,(zero),v0
    item->next = item->next->next;
     664:	f200                	fsw	fs0,32(a2)
     666:	05a9                	addi	a1,a1,10
    ret->next  = NULL;
     668:	0000                	unimp
     66a:	8c00                	0x8c00
    if (info->idx >= 0)
     66c:	0008                	0x8
     66e:	9c00                	0x9c00
        while (list && (list->info->idx != info->idx))
     670:	0008                	0x8
     672:	0600                	addi	s0,sp,768
     674:	f200                	fsw	fs0,32(a2)
     676:	05a9                	addi	a1,a1,10
	...
     680:	0000                	unimp
     682:	4800                	lw	s0,16(s0)
        finder = list->next;
     684:	70000007          	vlseg4e128.v	v0,(zero),v0.t
    while (finder)
     688:	06000007          	vluxei8.v	v0,(zero),v0
        retval = crc16(list->info->data16, retval);
     68c:	f200                	fsw	fs0,32(a2)
     68e:	0000055b          	0x55b
     692:	8c00                	0x8c00
     694:	0008                	0x8
     696:	9c00                	0x9c00
     698:	0008                	0x8
     69a:	0600                	addi	s0,sp,768
        finder = finder->next;
     69c:	f200                	fsw	fs0,32(a2)
     69e:	0000055b          	0x55b
	...
    remover = core_list_undo_remove(remover, list->next);
     6aa:	4800                	lw	s0,16(s0)
    tmp                 = item_removed->info;
     6ac:	70000007          	vlseg4e128.v	v0,(zero),v0.t
    item_removed->info  = item_modified->info;
     6b0:	06000007          	vluxei8.v	v0,(zero),v0
    item_removed->next  = item_modified->next;
     6b4:	f200                	fsw	fs0,32(a2)
     6b6:	05fc                	addi	a5,sp,716
    item_removed->info  = item_modified->info;
     6b8:	0000                	unimp
     6ba:	8c00                	0x8c00
    item_modified->info = tmp;
     6bc:	0008                	0x8
     6be:	9c00                	0x9c00
    item_removed->next  = item_modified->next;
     6c0:	0008                	0x8
     6c2:	0600                	addi	s0,sp,768
    list = core_list_mergesort(list, cmp_idx, NULL);
     6c4:	f200                	fsw	fs0,32(a2)
     6c6:	05fc                	addi	a5,sp,716
	...
     6d0:	0000                	unimp
     6d2:	4800                	lw	s0,16(s0)
     6d4:	70000007          	vlseg4e128.v	v0,(zero),v0.t
    finder = list->next;
     6d8:	01000007          	vle8ff.v	v0,(zero),v0.t
    list = core_list_mergesort(list, cmp_idx, NULL);
     6dc:	6200                	flw	fs0,0(a2)
     6de:	088c                	addi	a1,sp,80
    while (finder)
     6e0:	0000                	unimp
     6e2:	089c                	addi	a5,sp,80
        retval = crc16(list->info->data16, retval);
     6e4:	0000                	unimp
     6e6:	0001                	nop
     6e8:	0062                	c.slli	zero,0x18
     6ea:	0000                	unimp
     6ec:	0000                	unimp
     6ee:	0000                	unimp
     6f0:	5400                	lw	s0,40(s0)
     6f2:	70000007          	vlseg4e128.v	v0,(zero),v0.t
        finder = finder->next;
     6f6:	01000007          	vle8ff.v	v0,(zero),v0.t
        retval = crc16(list->info->data16, retval);
     6fa:	5800                	lw	s0,48(s0)
	...
}
     704:	0760                	addi	s0,sp,908
     706:	0000                	unimp
     708:	0770                	addi	a2,sp,908
     70a:	0000                	unimp
     70c:	0006                	c.slli	zero,0x1
     70e:	fcf2                	fsw	ft8,120(sp)
     710:	0005                	c.nop	1
	...
     71a:	0000                	unimp
     71c:	0760                	addi	s0,sp,908
     71e:	0000                	unimp
     720:	0768                	addi	a0,sp,908
     722:	0000                	unimp
     724:	0001                	nop
     726:	685e                	flw	fa6,212(sp)
        while (list && ((list->info->data16 & 0xff) != info->data16))
     728:	70000007          	vlseg4e128.v	v0,(zero),v0.t
     72c:	02000007          	vle8.v	v0,(zero)
     730:	8200                	0x8200
     732:	000c                	0xc
            list = list->next;
     734:	0000                	unimp
     736:	0000                	unimp
        while (list && ((list->info->data16 & 0xff) != info->data16))
     738:	0000                	unimp
     73a:	6000                	flw	fs0,0(s0)
        finder = list->next;
     73c:	0004                	0x4
     73e:	6800                	flw	fs0,16(s0)
    while (finder)
     740:	0004                	0x4
     742:	0100                	addi	s0,sp,128
     744:	5a00                	lw	s0,48(a2)
     746:	0468                	addi	a0,sp,524
        while (list && ((list->info->data16 & 0xff) != info->data16))
     748:	0000                	unimp
     74a:	0000057b          	0x57b
     74e:	0001                	nop
     750:	7b5c                	flw	fa5,52(a4)
     752:	0005                	c.nop	1
            list = list->next;
     754:	8400                	0x8400
     756:	0006                	c.slli	zero,0x1
        while (list && ((list->info->data16 & 0xff) != info->data16))
     758:	0400                	addi	s0,sp,512
     75a:	f300                	fsw	fs0,32(a4)
     75c:	5a01                	li	s4,-32
     75e:	849f 0006 e800      	0xe8000006849f
     764:	0006                	c.slli	zero,0x1
     766:	0100                	addi	s0,sp,128
     768:	5c00                	lw	s0,56(s0)
	...
            missed++;
     772:	0460                	addi	s0,sp,524
     774:	0000                	unimp
     776:	0570                	addi	a2,sp,652
            retval += (list->next->info->data16 >> 8) & 1;
     778:	0000                	unimp
     77a:	0001                	nop
            missed++;
     77c:	0005705b          	0x5705b
            retval += (list->next->info->data16 >> 8) & 1;
     780:	8400                	0x8400
     782:	0006                	c.slli	zero,0x1
     784:	0400                	addi	s0,sp,512
     786:	f300                	fsw	fs0,32(a4)
     788:	5b01                	li	s6,-32
     78a:	849f 0006 e800      	0xe8000006849f
     790:	0006                	c.slli	zero,0x1
     792:	0100                	addi	s0,sp,128
     794:	5b00                	lw	s0,48(a4)
	...
    for (i = 0; i < find_num; i++)
     79e:	0460                	addi	s0,sp,524
     7a0:	0000                	unimp
     7a2:	04a4                	addi	s1,sp,584
            retval += (list->next->info->data16 >> 8) & 1;
     7a4:	0000                	unimp
     7a6:	0002                	c.slli64	zero
     7a8:	9f30                	0x9f30
     7aa:	04a4                	addi	s1,sp,584
{
     7ac:	0000                	unimp
     7ae:	0518                	addi	a4,sp,640
     7b0:	0000                	unimp
     7b2:	0001                	nop
     7b4:	1c60                	addi	s0,sp,572
     7b6:	0005                	c.nop	1
    ee_u32 size     = (blksize / per_item)
     7b8:	6c00                	flw	fs0,24(s0)
     7ba:	0005                	c.nop	1
{
     7bc:	0100                	addi	s0,sp,128
     7be:	6000                	flw	fs0,0(s0)
     7c0:	05c8                	addi	a0,sp,708
     7c2:	0000                	unimp
     7c4:	05ec                	addi	a1,sp,716
     7c6:	0000                	unimp
     7c8:	0001                	nop
     7ca:	1c62                	slli	s8,s8,0x38
     7cc:	0006                	c.slli	zero,0x1
     7ce:	5c00                	lw	s0,56(s0)
    ee_u32 size     = (blksize / per_item)
     7d0:	0006                	c.slli	zero,0x1
     7d2:	0100                	addi	s0,sp,128
     7d4:	6200                	flw	fs0,0(a2)
     7d6:	0684                	addi	s1,sp,832
    list_head *memblock_end  = memblock + size;
     7d8:	0000                	unimp
     7da:	06c8                	addi	a0,sp,836
     7dc:	0000                	unimp
     7de:	0001                	nop
    list->info->data16 = (ee_s16)0x8080;
     7e0:	cc60                	sw	s0,92(s0)
     7e2:	0006                	c.slli	zero,0x1
    list->next         = NULL;
     7e4:	d000                	sw	s0,32(s0)
     7e6:	0006                	c.slli	zero,0x1
    list->info         = datablock;
     7e8:	0100                	addi	s0,sp,128
     7ea:	6000                	flw	fs0,0(s0)
    list->info->data16 = (ee_s16)0x8080;
     7ec:	06d0                	addi	a2,sp,836
     7ee:	0000                	unimp
    list_data *datablock_end = datablock + size;
     7f0:	06e0                	addi	s0,sp,844
     7f2:	0000                	unimp
    list->info->data16 = (ee_s16)0x8080;
     7f4:	0002                	c.slli64	zero
     7f6:	9f30                	0x9f30
    list->info->idx    = 0x0000;
     7f8:	06e0                	addi	s0,sp,844
     7fa:	0000                	unimp
    if ((*memblock + 1) >= memblock_end)
     7fc:	06e8                	addi	a0,sp,844
     7fe:	0000                	unimp
    list_data *datablock_end = datablock + size;
     800:	0001                	nop
     802:	0060                	addi	s0,sp,12
    memblock++;
     804:	0000                	unimp
     806:	0000                	unimp
    datablock++;
     808:	0000                	unimp
     80a:	6000                	flw	fs0,0(s0)
    if ((*memblock + 1) >= memblock_end)
     80c:	0004                	0x4
     80e:	a400                	fsd	fs0,8(s0)
    if ((*datablock + 1) >= datablock_end)
     810:	0004                	0x4
     812:	0200                	addi	s0,sp,256
     814:	3000                	fld	fs0,32(s0)
     816:	a49f 0004 f400      	0xf4000004a49f
    newitem->next      = insert_point->next;
     81c:	0004                	0x4
     81e:	0100                	addi	s0,sp,128
    insert_point->next = newitem;
     820:	5600                	lw	s0,40(a2)
     822:	0500                	addi	s0,sp,640
    to->idx    = from->idx;
     824:	0000                	unimp
     826:	056c                	addi	a1,sp,652
    to->data16 = from->data16;
     828:	0000                	unimp
     82a:	0001                	nop
     82c:	8456                	mv	s0,s5
     82e:	0006                	c.slli	zero,0x1
    to->idx    = from->idx;
     830:	d000                	sw	s0,32(s0)
     832:	0006                	c.slli	zero,0x1
    for (i = 0; i < size; i++)
     834:	0100                	addi	s0,sp,128
     836:	5600                	lw	s0,40(a2)
            ee_u16 pat = (ee_u16)(i++ ^ seed); /* get a pseudo random number */
     838:	06d0                	addi	a2,sp,836
     83a:	0000                	unimp
    to->idx    = from->idx;
     83c:	06e0                	addi	s0,sp,844
     83e:	0000                	unimp
            ee_u16 pat = (ee_u16)(i++ ^ seed); /* get a pseudo random number */
     840:	0002                	c.slli64	zero
     842:	9f30                	0x9f30
     844:	06e0                	addi	s0,sp,844
     846:	0000                	unimp
    to->idx    = from->idx;
     848:	06e8                	addi	a0,sp,844
     84a:	0000                	unimp
    if ((*datablock + 1) >= datablock_end)
     84c:	0001                	nop
     84e:	0056                	c.slli	zero,0x15
     850:	0000                	unimp
     852:	0000                	unimp
        ee_u16 datpat = ((ee_u16)(seed ^ i) & 0xf);
     854:	0000                	unimp
     856:	6000                	flw	fs0,0(s0)
            = (datpat << 3) | (i & 0x7); /* alternate between algorithms */
     858:	0004                	0x4
     85a:	a400                	fsd	fs0,8(s0)
     85c:	0004                	0x4
     85e:	0200                	addi	s0,sp,256
     860:	3000                	fld	fs0,32(s0)
     862:	b09f 0006 d000      	0xd0000006b09f
        info.data16 = (dat << 8) | dat;  /* fill the data with actual data and
     868:	0006                	c.slli	zero,0x1
     86a:	0100                	addi	s0,sp,128
    if ((*memblock + 1) >= memblock_end)
     86c:	5f00                	lw	s0,56(a4)
     86e:	06d0                	addi	a2,sp,836
    for (i = 0; i < size; i++)
     870:	0000                	unimp
     872:	06e0                	addi	s0,sp,844
    if ((*datablock + 1) >= datablock_end)
     874:	0000                	unimp
     876:	0002                	c.slli64	zero
        info.data16 = (dat << 8) | dat;  /* fill the data with actual data and
     878:	9f30                	0x9f30
	...
    if ((*datablock + 1) >= datablock_end)
     882:	048c                	addi	a1,sp,576
    newitem->next      = insert_point->next;
     884:	0000                	unimp
     886:	04d4                	addi	a3,sp,580
    insert_point->next = newitem;
     888:	0000                	unimp
     88a:	0001                	nop
    newitem->info = *datablock;
     88c:	e858                	fsw	fa4,20(s0)
     88e:	0004                	0x4
    to->data16 = from->data16;
     890:	3800                	fld	fs0,48(s0)
     892:	0005                	c.nop	1
    to->idx    = from->idx;
     894:	0100                	addi	s0,sp,128
     896:	5800                	lw	s0,48(s0)
    return newitem;
     898:	0554                	addi	a3,sp,644
     89a:	0000                	unimp
     89c:	0618                	addi	a4,sp,768
     89e:	0000                	unimp
     8a0:	0001                	nop
     8a2:	1c58                	addi	a4,sp,564
    for (i = 0; i < size; i++)
     8a4:	0006                	c.slli	zero,0x1
     8a6:	4800                	lw	s0,16(s0)
    while (finder->next != NULL)
     8a8:	0006                	c.slli	zero,0x1
     8aa:	0100                	addi	s0,sp,128
     8ac:	5900                	lw	s0,48(a0)
     8ae:	0664                	addi	s1,sp,780
        if (i < size / 5) /* first 20% of the list in order */
     8b0:	0000                	unimp
     8b2:	06a8                	addi	a0,sp,840
     8b4:	0000                	unimp
     8b6:	0001                	nop
                                & (((i & 0x07) << 8)
     8b8:	d058                	sw	a4,36(s0)
     8ba:	0006                	c.slli	zero,0x1
        if (i < size / 5) /* first 20% of the list in order */
     8bc:	e000                	fsw	fs0,0(s0)
     8be:	0006                	c.slli	zero,0x1
     8c0:	0100                	addi	s0,sp,128
     8c2:	5800                	lw	s0,48(s0)
	...
    while (finder->next != NULL)
     8cc:	048c                	addi	a1,sp,576
     8ce:	0000                	unimp
     8d0:	0574                	addi	a3,sp,652
     8d2:	0000                	unimp
            finder->info->idx = i++;
     8d4:	0001                	nop
     8d6:	745a                	flw	fs0,180(sp)
    while (finder->next != NULL)
     8d8:	0005                	c.nop	1
     8da:	7b00                	flw	fs0,48(a4)
     8dc:	0005                	c.nop	1
     8de:	0200                	addi	s0,sp,256
     8e0:	7c00                	flw	fs0,56(s0)
     8e2:	8404                	0x8404
     8e4:	0006                	c.slli	zero,0x1
     8e6:	e800                	fsw	fs0,16(s0)
     8e8:	0006                	c.slli	zero,0x1
     8ea:	0100                	addi	s0,sp,128
     8ec:	5a00                	lw	s0,48(a2)
	...
                                & (((i & 0x07) << 8)
     8f6:	04cc                	addi	a1,sp,580
                                   | pat); /* make sure the mixed items end up
     8f8:	0000                	unimp
     8fa:	0530                	addi	a2,sp,648
                                & (((i & 0x07) << 8)
     8fc:	0000                	unimp
     8fe:	0001                	nop
            finder->info->idx = i++;
     900:	005f 0000 0000      	0x5f
        if (i < size / 5) /* first 20% of the list in order */
     906:	0000                	unimp
            finder->info->idx = 0x3fff
     908:	2400                	fld	fs0,8(s0)
     90a:	0005                	c.nop	1
    while (finder->next != NULL)
     90c:	3800                	fld	fs0,48(s0)
     90e:	0005                	c.nop	1
     910:	0100                	addi	s0,sp,128
     912:	5d00                	lw	s0,56(a0)
     914:	05c0                	addi	s0,sp,708
     916:	0000                	unimp
     918:	05c4                	addi	s1,sp,708
     91a:	0000                	unimp
     91c:	0002                	c.slli64	zero
     91e:	9f30                	0x9f30
     920:	05c4                	addi	s1,sp,708
     922:	0000                	unimp
     924:	05dc                	addi	a5,sp,708
     926:	0000                	unimp
}
     928:	0001                	nop
     92a:	0005e063          	bltu	a1,zero,92a <HEAP_SIZE+0x12a>
     92e:	e800                	fsw	fs0,16(s0)
     930:	0005                	c.nop	1
     932:	0100                	addi	s0,sp,128
     934:	6300                	flw	fs0,0(a4)
     936:	061c                	addi	a5,sp,768
    list = core_list_mergesort(list, cmp_idx, NULL);
     938:	0000                	unimp
     93a:	0634                	addi	a3,sp,776
}
     93c:	0000                	unimp
     93e:	0001                	nop
    list = core_list_mergesort(list, cmp_idx, NULL);
     940:	3858                	fld	fa4,176(s0)
     942:	0006                	c.slli	zero,0x1
     944:	4400                	lw	s0,8(s0)
     946:	0006                	c.slli	zero,0x1
}
     948:	0100                	addi	s0,sp,128
     94a:	5800                	lw	s0,48(s0)
    list = core_list_mergesort(list, cmp_idx, NULL);
     94c:	0678                	addi	a4,sp,780
     94e:	0000                	unimp
    memblock++;
     950:	067c                	addi	a5,sp,780
     952:	0000                	unimp
    datablock++;
     954:	0002                	c.slli64	zero
     956:	9f30                	0x9f30
     958:	067c                	addi	a5,sp,780
     95a:	0000                	unimp
     95c:	0684                	addi	s1,sp,832
     95e:	0000                	unimp
{
     960:	0001                	nop
     962:	00000063          	beqz	zero,962 <iterate+0x2>
     966:	0000                	unimp
    ee_u32        iterations = res->iterations;
     968:	0000                	unimp
     96a:	a800                	fsd	fs0,16(s0)
{
     96c:	0005                	c.nop	1
     96e:	5400                	lw	s0,40(s0)
     970:	0006                	c.slli	zero,0x1
     972:	0100                	addi	s0,sp,128
     974:	6500                	flw	fs0,8(a0)
     976:	0664                	addi	s1,sp,780
    res->crc                 = 0;
     978:	0000                	unimp
     97a:	0684                	addi	s1,sp,832
    res->crcmatrix           = 0;
     97c:	0000                	unimp
     97e:	0001                	nop
    for (i = 0; i < iterations; i++)
     980:	0065                	c.nop	25
     982:	0000                	unimp
     984:	0000                	unimp
     986:	0000                	unimp
     988:	8c00                	0x8c00
     98a:	0004                	0x4
        crc      = core_bench_list(res, 1);
     98c:	a400                	fsd	fs0,8(s0)
     98e:	0004                	0x4
     990:	0500                	addi	s0,sp,640
     992:	9300                	0x9300
     994:	5b02                	lw	s6,32(sp)
     996:	04a40293          	addi	t0,s0,74 # ffff804a <RAM_SIZE+0xfffe804a>
        res->crc = crcu16(crc, res->crc);
     99a:	0000                	unimp
     99c:	04a8                	addi	a0,sp,584
     99e:	0000                	unimp
        crc      = core_bench_list(res, -1);
     9a0:	0005                	c.nop	1
     9a2:	93590293          	addi	t0,s2,-1739 # 1c935 <RAM_SIZE+0xc935>
        res->crc = crcu16(crc, res->crc);
     9a6:	a802                	fsd	ft0,16(sp)
        crc      = core_bench_list(res, -1);
     9a8:	0004                	0x4
     9aa:	4000                	lw	s0,0(s0)
     9ac:	0005                	c.nop	1
     9ae:	0600                	addi	s0,sp,768
        res->crc = crcu16(crc, res->crc);
     9b0:	6400                	flw	fs0,8(s0)
     9b2:	93590293          	addi	t0,s2,-1739
     9b6:	4002                	0x4002
     9b8:	0005                	c.nop	1
     9ba:	4800                	lw	s0,16(s0)
        if (i == 0)
     9bc:	0005                	c.nop	1
     9be:	0500                	addi	s0,sp,640
            res->crclist = res->crc;
     9c0:	6400                	flw	fs0,8(s0)
     9c2:	02930293          	addi	t0,t1,41 # ffffa029 <RAM_SIZE+0xfffea029>
    for (i = 0; i < iterations; i++)
     9c6:	0548                	addi	a0,sp,644
     9c8:	0000                	unimp
     9ca:	056c                	addi	a1,sp,652
}
     9cc:	0000                	unimp
     9ce:	0006                	c.slli	zero,0x1
     9d0:	9364                	0x9364
     9d2:	5902                	lw	s2,32(sp)
     9d4:	056c0293          	addi	t0,s8,86 # 19056 <RAM_SIZE+0x9056>
     9d8:	0000                	unimp
     9da:	061c                	addi	a5,sp,768
     9dc:	0000                	unimp
     9de:	0006                	c.slli	zero,0x1
     9e0:	9364                	0x9364
     9e2:	5902                	lw	s2,32(sp)
     9e4:	061c0293          	addi	t0,s8,97
{
     9e8:	0000                	unimp
     9ea:	0650                	addi	a2,sp,772
     9ec:	0000                	unimp
     9ee:	0005                	c.nop	1
     9f0:	9364                	0x9364
     9f2:	9302                	jalr	t1
     9f4:	6402                	flw	fs0,0(sp)
     9f6:	0006                	c.slli	zero,0x1
     9f8:	d000                	sw	s0,32(s0)
     9fa:	0006                	c.slli	zero,0x1
     9fc:	0600                	addi	s0,sp,768
     9fe:	6400                	flw	fs0,8(s0)
     a00:	93590293          	addi	t0,s2,-1739
     a04:	d002                	sw	zero,32(sp)
     a06:	0006                	c.slli	zero,0x1
     a08:	e000                	fsw	fs0,0(s0)
     a0a:	0006                	c.slli	zero,0x1
     a0c:	0500                	addi	s0,sp,640
     a0e:	9300                	0x9300
     a10:	5b02                	lw	s6,32(sp)
     a12:	06e00293          	li	t0,110
     a16:	0000                	unimp
     a18:	06e8                	addi	a0,sp,844
     a1a:	0000                	unimp
    int   argc = 0;
     a1c:	0006                	c.slli	zero,0x1
     a1e:	9364                	0x9364
{
     a20:	5902                	lw	s2,32(sp)
     a22:	00000293          	li	t0,0
    int   argc = 0;
     a26:	0000                	unimp
     a28:	0000                	unimp
     a2a:	0000                	unimp
     a2c:	048c                	addi	a1,sp,576
     a2e:	0000                	unimp
     a30:	04a4                	addi	s1,sp,584
     a32:	0000                	unimp
     a34:	0002                	c.slli64	zero
     a36:	9f30                	0x9f30
     a38:	04a4                	addi	s1,sp,584
     a3a:	0000                	unimp
     a3c:	0550                	addi	a2,sp,644
     a3e:	0000                	unimp
     a40:	0001                	nop
     a42:	5461                	li	s0,-8
     a44:	0005                	c.nop	1
     a46:	6c00                	flw	fs0,24(s0)
     a48:	0005                	c.nop	1
     a4a:	0100                	addi	s0,sp,128
	for(int i = 0; i < 12; i++) { 
     a4c:	6100                	flw	fs0,0(a0)
     a4e:	0684                	addi	s1,sp,832
     a50:	0000                	unimp
     a52:	06d0                	addi	a2,sp,836
    int   argc = 0;
     a54:	0000                	unimp
     a56:	0001                	nop
     a58:	d061                	beqz	s0,a18 <main+0x30>
     a5a:	0006                	c.slli	zero,0x1
	  uart_send_char(hello[i]);
     a5c:	e000                	fsw	fs0,0(s0)
     a5e:	0006                	c.slli	zero,0x1
     a60:	0200                	addi	s0,sp,256
     a62:	3000                	fld	fs0,32(s0)
     a64:	e09f 0006 e800      	0xe8000006e09f
	for(int i = 0; i < 12; i++) { 
     a6a:	0006                	c.slli	zero,0x1
	ee_printf("Hello World\n");
     a6c:	0100                	addi	s0,sp,128
     a6e:	6100                	flw	fs0,0(a0)
	...
    portable_init(&(results[0].port), &argc, argv);
     a78:	04a8                	addi	a0,sp,584
     a7a:	0000                	unimp
     a7c:	04cc                	addi	a1,sp,580
     a7e:	0000                	unimp
     a80:	0006                	c.slli	zero,0x1
     a82:	36f2                	fld	fa3,312(sp)
     a84:	0008                	0x8
     a86:	0000                	unimp
     a88:	0684                	addi	s1,sp,832
     a8a:	0000                	unimp
     a8c:	06a8                	addi	a0,sp,840
     a8e:	0000                	unimp
     a90:	0006                	c.slli	zero,0x1
     a92:	36f2                	fld	fa3,312(sp)
     a94:	0008                	0x8
	...
     a9e:	0000                	unimp
     aa0:	04a8                	addi	a0,sp,584
     aa2:	0000                	unimp
     aa4:	04b8                	addi	a4,sp,584
     aa6:	0000                	unimp
    results[0].seed1      = get_seed(1);
     aa8:	0001                	nop
     aaa:	b858                	fsd	fa4,176(s0)
     aac:	0004                	0x4
     aae:	cc00                	sw	s0,24(s0)
     ab0:	0004                	0x4
     ab2:	0100                	addi	s0,sp,128
     ab4:	5f00                	lw	s0,56(a4)
     ab6:	0684                	addi	s1,sp,832
     ab8:	0000                	unimp
     aba:	06a8                	addi	a0,sp,840
     abc:	0000                	unimp
     abe:	0001                	nop
     ac0:	0058                	addi	a4,sp,4
     ac2:	0000                	unimp
     ac4:	0000                	unimp
     ac6:	0000                	unimp
    results[0].seed2      = get_seed(2);
     ac8:	8400                	0x8400
     aca:	0006                	c.slli	zero,0x1
    results[0].seed1      = get_seed(1);
     acc:	9000                	0x9000
     ace:	0006                	c.slli	zero,0x1
    results[0].seed2      = get_seed(2);
     ad0:	0100                	addi	s0,sp,128
     ad2:	5800                	lw	s0,48(s0)
     ad4:	0690                	addi	a2,sp,832
     ad6:	0000                	unimp
     ad8:	06a8                	addi	a0,sp,840
     ada:	0000                	unimp
    results[0].seed3      = get_seed(3);
     adc:	0001                	nop
     ade:	005f 0000 0000      	0x5f
     ae4:	0000                	unimp
     ae6:	cc00                	sw	s0,24(s0)
     ae8:	0004                	0x4
     aea:	d400                	sw	s0,40(s0)
     aec:	0004                	0x4
     aee:	0100                	addi	s0,sp,128
    results[0].iterations = get_seed_32(4);
     af0:	5800                	lw	s0,48(s0)
     af2:	04d4                	addi	a3,sp,580
    results[0].seed3      = get_seed(3);
     af4:	0000                	unimp
     af6:	04dc                	addi	a5,sp,580
    results[0].iterations = get_seed_32(4);
     af8:	0000                	unimp
     afa:	0001                	nop
     afc:	dc5e                	sw	s7,56(sp)
     afe:	0004                	0x4
    results[0].execs = get_seed_32(5);
     b00:	e400                	fsw	fs0,8(s0)
     b02:	0004                	0x4
    results[0].iterations = get_seed_32(4);
     b04:	0100                	addi	s0,sp,128
     b06:	5800                	lw	s0,48(s0)
    results[0].execs = get_seed_32(5);
     b08:	04e4                	addi	s1,sp,588
     b0a:	0000                	unimp
    if (results[0].execs == 0)
     b0c:	04e8                	addi	a0,sp,588
     b0e:	0000                	unimp
    results[0].execs = get_seed_32(5);
     b10:	0001                	nop
     b12:	005e                	c.slli	zero,0x17
    if ((results[0].seed1 == 0) && (results[0].seed2 == 0)
     b14:	0000                	unimp
     b16:	0000                	unimp
     b18:	0000                	unimp
     b1a:	cc00                	sw	s0,24(s0)
     b1c:	0004                	0x4
     b1e:	d400                	sw	s0,40(s0)
     b20:	0004                	0x4
     b22:	0200                	addi	s0,sp,256
     b24:	3000                	fld	fs0,32(s0)
     b26:	d49f 0004 dc00      	0xdc000004d49f
     b2c:	0004                	0x4
     b2e:	0100                	addi	s0,sp,128
     b30:	5800                	lw	s0,48(s0)
     b32:	04dc                	addi	a5,sp,580
     b34:	0000                	unimp
     b36:	04e4                	addi	s1,sp,588
        && (results[0].seed3 == 0))
     b38:	0000                	unimp
     b3a:	0001                	nop
     b3c:	e45d                	bnez	s0,bea <main+0x202>
     b3e:	0004                	0x4
     b40:	e800                	fsw	fs0,16(s0)
     b42:	0004                	0x4
        if ((1 << (ee_u32)i) & results[0].execs)
     b44:	0100                	addi	s0,sp,128
     b46:	5800                	lw	s0,48(s0)
	...
    results[i].memblock[0] = stack_memblock + i * TOTAL_DATA_SIZE;
     b50:	04d4                	addi	a3,sp,580
     b52:	0000                	unimp
     b54:	04dc                	addi	a5,sp,580
     b56:	0000                	unimp
     b58:	0001                	nop
     b5a:	e05e                	fsw	fs7,0(sp)
     b5c:	0004                	0x4
     b5e:	e800                	fsw	fs0,16(s0)
     b60:	0004                	0x4
     b62:	0100                	addi	s0,sp,128
        if ((1 << (ee_u32)i) & results[0].execs)
     b64:	5e00                	lw	s0,56(a2)
	...
            num_algorithms++;
     b6e:	0584                	addi	s1,sp,704
    results[i].memblock[0] = stack_memblock + i * TOTAL_DATA_SIZE;
     b70:	0000                	unimp
     b72:	05a8                	addi	a0,sp,712
     b74:	0000                	unimp
     b76:	0001                	nop
    results[i].err         = 0;
     b78:	005f 0000 0000      	0x5f
        if ((1 << (ee_u32)i) & results[0].execs)
     b7e:	0000                	unimp
     b80:	9000                	0x9000
     b82:	0005                	c.nop	1
            num_algorithms++;
     b84:	a800                	fsd	fs0,16(s0)
     b86:	0005                	c.nop	1
        if ((1 << (ee_u32)i) & results[0].execs)
     b88:	0100                	addi	s0,sp,128
     b8a:	5e00                	lw	s0,56(a2)
	...
            num_algorithms++;
     b94:	058c                	addi	a1,sp,704
     b96:	0000                	unimp
        results[i].size = results[i].size / num_algorithms;
     b98:	05a8                	addi	a0,sp,712
     b9a:	0000                	unimp
     b9c:	0001                	nop
     b9e:	0065                	c.nop	25
     ba0:	0000                	unimp
     ba2:	0000                	unimp
     ba4:	0000                	unimp
     ba6:	a800                	fsd	fs0,16(s0)
     ba8:	0005                	c.nop	1
     baa:	c000                	sw	s0,0(s0)
     bac:	0005                	c.nop	1
     bae:	0600                	addi	s0,sp,768
     bb0:	f200                	fsw	fs0,32(a2)
     bb2:	0836                	slli	a6,a6,0xd
     bb4:	0000                	unimp
     bb6:	6400                	flw	fs0,8(s0)
     bb8:	0006                	c.slli	zero,0x1
     bba:	7800                	flw	fs0,48(s0)
     bbc:	0006                	c.slli	zero,0x1
     bbe:	0600                	addi	s0,sp,768
    for (i = 0; i < NUM_ALGORITHMS; i++)
     bc0:	f200                	fsw	fs0,32(a2)
     bc2:	0836                	slli	a6,a6,0xd
	...
        if ((1 << (ee_u32)i) & results[0].execs)
     bcc:	0000                	unimp
     bce:	a800                	fsd	fs0,16(s0)
    for (i = 0; i < NUM_ALGORITHMS; i++)
     bd0:	0005                	c.nop	1
     bd2:	ac00                	fsd	fs0,24(s0)
        if ((1 << (ee_u32)i) & results[0].execs)
     bd4:	0005                	c.nop	1
     bd6:	0100                	addi	s0,sp,128
     bd8:	5800                	lw	s0,48(s0)
     bda:	05ac                	addi	a1,sp,712
    for (i = 0; i < NUM_ALGORITHMS; i++)
     bdc:	0000                	unimp
     bde:	05c0                	addi	s0,sp,708
        if ((1 << (ee_u32)i) & results[0].execs)
     be0:	0000                	unimp
     be2:	0001                	nop
    for (i = 0; i < NUM_ALGORITHMS; i++)
     be4:	00066463          	bltu	a2,zero,bec <main+0x204>
     be8:	7800                	flw	fs0,48(s0)
     bea:	0006                	c.slli	zero,0x1
        if (results[i].execs & ID_LIST)
     bec:	0100                	addi	s0,sp,128
     bee:	5800                	lw	s0,48(s0)
	...
        if (results[i].execs & ID_STATE)
     bf8:	0664                	addi	s1,sp,780
     bfa:	0000                	unimp
            core_init_state(
     bfc:	0678                	addi	a4,sp,780
     bfe:	0000                	unimp
     c00:	0001                	nop
     c02:	00000063          	beqz	zero,c02 <main+0x21a>
     c06:	0000                	unimp
                results[0].size, results[i].seed1, results[i].memblock[3]);
     c08:	0000                	unimp
     c0a:	ec00                	fsw	fs0,24(s0)
            core_init_state(
     c0c:	0005                	c.nop	1
     c0e:	0000                	unimp
     c10:	0006                	c.slli	zero,0x1
     c12:	0200                	addi	s0,sp,256
     c14:	7800                	flw	fs0,48(s0)
	...
     c1e:	ec00                	fsw	fs0,24(s0)
     c20:	0005                	c.nop	1
     c22:	0800                	addi	s0,sp,16
     c24:	0006                	c.slli	zero,0x1
     c26:	0100                	addi	s0,sp,128
    if (results[0].iterations == 0)
     c28:	6500                	flw	fs0,8(a0)
	...
        results[0].iterations = 1;
     c32:	05ec                	addi	a1,sp,716
     c34:	0000                	unimp
     c36:	05f8                	addi	a4,sp,716
            iterate(&results[0]);
     c38:	0000                	unimp
     c3a:	0002                	c.slli64	zero
            results[0].iterations *= 10;
     c3c:	0485                	addi	s1,s1,1
	...
            iterate(&results[0]);
     c4a:	0008                	0x8
     c4c:	0000                	unimp
     c4e:	0001                	nop
     c50:	085a                	slli	a6,a6,0x16
     c52:	0000                	unimp
            results[0].iterations *= 10;
     c54:	1400                	addi	s0,sp,544
     c56:	0000                	unimp
     c58:	0400                	addi	s0,sp,512
     c5a:	f300                	fsw	fs0,32(a4)
     c5c:	5a01                	li	s4,-32
     c5e:	149f 0000 3800      	0x38000000149f
     c64:	0000                	unimp
     c66:	0100                	addi	s0,sp,128
            start_time();
     c68:	5a00                	lw	s0,48(a2)
     c6a:	0038                	addi	a4,sp,8
            iterate(&results[0]);
     c6c:	0000                	unimp
     c6e:	005c                	addi	a5,sp,4
     c70:	0000                	unimp
     c72:	0004                	0x4
            stop_time();
     c74:	9f5a01f3          	0x9f5a01f3
	...
        while (secs_passed < (secs_ret)1)
     c80:	0190                	addi	a2,sp,192
     c82:	0000                	unimp
        results[0].iterations *= 1 + 10 / divisor;
     c84:	000001af          	vamoaddei8.v	zero,(zero),v0,v3,v0.t
     c88:	0001                	nop
     c8a:	af5a                	fsd	fs6,408(sp)
     c8c:	0001                	nop
     c8e:	dc00                	sw	s0,56(s0)
     c90:	0001                	nop
     c92:	0400                	addi	s0,sp,512
     c94:	f300                	fsw	fs0,32(a4)
     c96:	5a01                	li	s4,-32
     c98:	009f 0000 0000      	0x9f
     c9e:	0000                	unimp
    start_time();
     ca0:	9000                	0x9000
     ca2:	0001                	nop
    iterate(&results[0]);
     ca4:	a000                	fsd	fs0,0(s0)
     ca6:	0001                	nop
     ca8:	0100                	addi	s0,sp,128
     caa:	5b00                	lw	s0,48(a4)
     cac:	01a0                	addi	s0,sp,200
     cae:	0000                	unimp
     cb0:	01d4                	addi	a3,sp,196
     cb2:	0000                	unimp
     cb4:	0001                	nop
     cb6:	d459                	beqz	s0,c44 <main+0x25c>
     cb8:	0001                	nop
     cba:	dc00                	sw	s0,56(s0)
     cbc:	0001                	nop
     cbe:	0400                	addi	s0,sp,512
     cc0:	f300                	fsw	fs0,32(a4)
     cc2:	5b01                	li	s6,-32
    stop_time();
     cc4:	009f 0000 0000      	0x9f
    total_time = get_time();
     cca:	0000                	unimp
    seedcrc = crc16(results[0].seed1, seedcrc);
     ccc:	9000                	0x9000
     cce:	0001                	nop
     cd0:	af00                	fsd	fs0,24(a4)
     cd2:	0001                	nop
     cd4:	0100                	addi	s0,sp,128
     cd6:	5c00                	lw	s0,56(s0)
     cd8:	000001af          	vamoaddei8.v	zero,(zero),v0,v3,v0.t
    total_time = get_time();
     cdc:	01c0                	addi	s0,sp,196
     cde:	0000                	unimp
    seedcrc = crc16(results[0].seed1, seedcrc);
     ce0:	0001                	nop
     ce2:	c058                	sw	a4,4(s0)
     ce4:	0001                	nop
     ce6:	c300                	sw	s0,0(a4)
     ce8:	0001                	nop
     cea:	0100                	addi	s0,sp,128
     cec:	5b00                	lw	s0,48(a4)
     cee:	000001c3          	fmadd.s	ft3,ft0,ft0,ft0,rne
    seedcrc = crc16(results[0].seed2, seedcrc);
     cf2:	01dc                	addi	a5,sp,196
    seedcrc = crc16(results[0].seed1, seedcrc);
     cf4:	0000                	unimp
     cf6:	0004                	0x4
    seedcrc = crc16(results[0].seed2, seedcrc);
     cf8:	9f5c01f3          	0x9f5c01f3
	...
     d04:	01c0                	addi	s0,sp,196
     d06:	0000                	unimp
    seedcrc = crc16(results[0].seed3, seedcrc);
     d08:	01d0                	addi	a2,sp,196
     d0a:	0000                	unimp
     d0c:	0001                	nop
     d0e:	0058                	addi	a4,sp,4
     d10:	0000                	unimp
     d12:	0000                	unimp
    seedcrc = crc16(results[0].size, seedcrc);
     d14:	0000                	unimp
     d16:	c400                	sw	s0,8(s0)
     d18:	0001                	nop
     d1a:	cc00                	sw	s0,24(s0)
    switch (seedcrc)
     d1c:	0001                	nop
     d1e:	0100                	addi	s0,sp,128
     d20:	5a00                	lw	s0,48(a2)
	...
     d2a:	005c                	addi	a5,sp,4
     d2c:	0000                	unimp
     d2e:	008c                	addi	a1,sp,64
     d30:	0000                	unimp
     d32:	0001                	nop
     d34:	8c5a                	mv	s8,s6
     d36:	0000                	unimp
     d38:	a400                	fsd	fs0,8(s0)
     d3a:	0000                	unimp
     d3c:	0400                	addi	s0,sp,512
     d3e:	f300                	fsw	fs0,32(a4)
     d40:	5a01                	li	s4,-32
     d42:	a49f 0000 d400      	0xd4000000a49f
            ee_printf("Profile generation run parameters for coremark.\n");
     d48:	0000                	unimp
     d4a:	0100                	addi	s0,sp,128
     d4c:	5a00                	lw	s0,48(a2)
     d4e:	00d4                	addi	a3,sp,68
     d50:	0000                	unimp
     d52:	0114                	addi	a3,sp,128
            known_id = 2;
     d54:	0000                	unimp
     d56:	0001                	nop
        for (i = 0; i < default_num_contexts; i++)
     d58:	00011463          	bnez	sp,d60 <main+0x378>
     d5c:	1c00                	addi	s0,sp,560
     d5e:	0001                	nop
     d60:	0400                	addi	s0,sp,512
     d62:	f300                	fsw	fs0,32(a4)
     d64:	5a01                	li	s4,-32
     d66:	1c9f 0001 3c00      	0x3c0000011c9f
            results[i].err = 0;
     d6c:	0001                	nop
     d6e:	0100                	addi	s0,sp,128
     d70:	5a00                	lw	s0,48(a2)
     d72:	013c                	addi	a5,sp,136
                && (results[i].crclist != list_known_crc[known_id]))
     d74:	0000                	unimp
     d76:	0160                	addi	s0,sp,140
            results[i].err = 0;
     d78:	0000                	unimp
     d7a:	0001                	nop
     d7c:	00016063          	bltu	sp,zero,d7c <main+0x394>
                && (results[i].crclist != list_known_crc[known_id]))
     d80:	6800                	flw	fs0,16(s0)
     d82:	0001                	nop
            results[i].err = 0;
     d84:	0100                	addi	s0,sp,128
     d86:	5a00                	lw	s0,48(a2)
                && (results[i].crclist != list_known_crc[known_id]))
     d88:	0168                	addi	a0,sp,140
     d8a:	0000                	unimp
            results[i].err = 0;
     d8c:	0190                	addi	a2,sp,192
     d8e:	0000                	unimp
                && (results[i].crclist != list_known_crc[known_id]))
     d90:	0001                	nop
     d92:	00000063          	beqz	zero,d92 <main+0x3aa>
                ee_printf("[%u]ERROR! list crc 0x%04x - should be 0x%04x\n",
     d96:	0000                	unimp
                ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n",
     d98:	0000                	unimp
     d9a:	5c00                	lw	s0,56(s0)
                ee_printf("[%u]ERROR! state crc 0x%04x - should be 0x%04x\n",
     d9c:	0000                	unimp
     d9e:	ac00                	fsd	fs0,24(s0)
     da0:	0000                	unimp
     da2:	0100                	addi	s0,sp,128
            total_errors += results[i].err;
     da4:	5b00                	lw	s0,48(a4)
     da6:	00ac                	addi	a1,sp,72
     da8:	0000                	unimp
     daa:	010c                	addi	a1,sp,128
     dac:	0000                	unimp
     dae:	0001                	nop
     db0:	0c59                	addi	s8,s8,22
     db2:	0001                	nop
     db4:	1c00                	addi	s0,sp,560
     db6:	0001                	nop
        for (i = 0; i < default_num_contexts; i++)
     db8:	0400                	addi	s0,sp,512
     dba:	f300                	fsw	fs0,32(a4)
     dbc:	5b01                	li	s6,-32
     dbe:	1c9f 0001 9000      	0x900000011c9f
     dc4:	0001                	nop
     dc6:	0100                	addi	s0,sp,128
            total_errors += results[i].err;
     dc8:	5900                	lw	s0,48(a0)
	...
        for (i = 0; i < default_num_contexts; i++)
     dd2:	0068                	addi	a0,sp,12
            total_errors += results[i].err;
     dd4:	0000                	unimp
     dd6:	0090                	addi	a2,sp,64
     dd8:	0000                	unimp
     dda:	0001                	nop
        for (i = 0; i < default_num_contexts; i++)
     ddc:	9058                	0x9058
     dde:	0000                	unimp
            results[i].err = 0;
     de0:	a400                	fsd	fs0,8(s0)
     de2:	0000                	unimp
     de4:	0300                	addi	s0,sp,384
     de6:	f300                	fsw	fs0,32(a4)
     de8:	5a01                	li	s4,-32
     dea:	00a4                	addi	s1,sp,72
     dec:	0000                	unimp
     dee:	00ec                	addi	a1,sp,76
     df0:	0000                	unimp
     df2:	0001                	nop
     df4:	1c58                	addi	a4,sp,564
     df6:	0001                	nop
     df8:	9000                	0x9000
     dfa:	0001                	nop
            if ((results[i].execs & ID_LIST)
     dfc:	0100                	addi	s0,sp,128
     dfe:	5800                	lw	s0,48(s0)
	...
     e08:	00dc                	addi	a5,sp,68
     e0a:	0000                	unimp
                && (results[i].crclist != list_known_crc[known_id]))
     e0c:	00f8                	addi	a4,sp,76
     e0e:	0000                	unimp
     e10:	0001                	nop
     e12:	f862                	fsw	fs8,48(sp)
     e14:	0000                	unimp
     e16:	1c00                	addi	s0,sp,560
                ee_printf("[%u]ERROR! list crc 0x%04x - should be 0x%04x\n",
     e18:	0001                	nop
     e1a:	0100                	addi	s0,sp,128
     e1c:	5a00                	lw	s0,48(a2)
     e1e:	0150                	addi	a2,sp,132
     e20:	0000                	unimp
     e22:	0160                	addi	s0,sp,140
                results[i].err++;
     e24:	0000                	unimp
     e26:	0001                	nop
     e28:	7862                	flw	fa6,56(sp)
     e2a:	0001                	nop
     e2c:	9000                	0x9000
     e2e:	0001                	nop
            if ((results[i].execs & ID_MATRIX)
     e30:	0100                	addi	s0,sp,128
     e32:	6200                	flw	fs0,0(a2)
	...
     e3c:	0068                	addi	a0,sp,12
     e3e:	0000                	unimp
     e40:	0090                	addi	a2,sp,64
     e42:	0000                	unimp
     e44:	00780007          	0x780007
     e48:	1a312637          	lui	a2,0x1a312
     e4c:	909f 0000 a400      	0xa4000000909f
     e52:	0000                	unimp
                && (results[i].crcmatrix != matrix_known_crc[known_id]))
     e54:	0a00                	addi	s0,sp,272
     e56:	f300                	fsw	fs0,32(a4)
     e58:	5a01                	li	s4,-32
     e5a:	0294                	addi	a3,sp,320
     e5c:	1a312637          	lui	a2,0x1a312
                ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n",
     e60:	a49f 0000 ec00      	0xec000000a49f
     e66:	0000                	unimp
     e68:	0700                	addi	s0,sp,896
     e6a:	7800                	flw	fs0,48(s0)
                results[i].err++;
     e6c:	3700                	fld	fs0,40(a4)
     e6e:	3126                	fld	ft2,104(sp)
            if ((results[i].execs & ID_STATE)
     e70:	9f1a                	add	t5,t5,t1
     e72:	011c                	addi	a5,sp,128
                results[i].err++;
     e74:	0000                	unimp
     e76:	0190                	addi	a2,sp,192
     e78:	0000                	unimp
     e7a:	00780007          	0x780007
                && (results[i].crcstate != state_known_crc[known_id]))
     e7e:	1a312637          	lui	a2,0x1a312
            if ((results[i].execs & ID_STATE)
     e82:	009f 0000 0000      	0x9f
     e88:	0000                	unimp
     e8a:	b800                	fsd	fs0,48(s0)
                && (results[i].crcstate != state_known_crc[known_id]))
     e8c:	0000                	unimp
     e8e:	dc00                	sw	s0,56(s0)
     e90:	0000                	unimp
     e92:	0100                	addi	s0,sp,128
     e94:	5d00                	lw	s0,56(a0)
     e96:	00dc                	addi	a5,sp,68
     e98:	0000                	unimp
     e9a:	00ec                	addi	a1,sp,76
     e9c:	0000                	unimp
     e9e:	0005                	c.nop	1
     ea0:	0078                	addi	a4,sp,12
     ea2:	1c9f1a37          	lui	s4,0x1c9f1
     ea6:	0001                	nop
            total_errors += results[i].err;
     ea8:	2000                	fld	fs0,0(s0)
     eaa:	0001                	nop
     eac:	0100                	addi	s0,sp,128
     eae:	5d00                	lw	s0,56(a0)
            results[i].list = core_list_init(
     eb0:	0120                	addi	s0,sp,136
     eb2:	0000                	unimp
     eb4:	0160                	addi	s0,sp,140
     eb6:	0000                	unimp
     eb8:	0005                	c.nop	1
     eba:	0078                	addi	a4,sp,12
     ebc:	609f1a37          	lui	s4,0x609f1
     ec0:	0001                	nop
     ec2:	6b00                	flw	fs0,16(a4)
     ec4:	0001                	nop
     ec6:	0100                	addi	s0,sp,128
     ec8:	5d00                	lw	s0,56(a0)
     eca:	0000016b          	0x16b
     ece:	0190                	addi	a2,sp,192
     ed0:	0000                	unimp
     ed2:	0005                	c.nop	1
     ed4:	0078                	addi	a4,sp,12
     ed6:	009f1a37          	lui	s4,0x9f1
     eda:	0000                	unimp
        if (results[i].execs & ID_MATRIX)
     edc:	0000                	unimp
     ede:	0000                	unimp
            results[i].list = core_list_init(
     ee0:	b800                	fsd	fs0,48(s0)
     ee2:	0000                	unimp
     ee4:	dc00                	sw	s0,56(s0)
     ee6:	0000                	unimp
        if (results[i].execs & ID_MATRIX)
     ee8:	0100                	addi	s0,sp,128
     eea:	5b00                	lw	s0,48(a4)
                                 | (((ee_s32)results[i].seed2) << 16),
     eec:	011c                	addi	a5,sp,128
     eee:	0000                	unimp
     ef0:	0138                	addi	a4,sp,136
     ef2:	0000                	unimp
     ef4:	0012                	c.slli	zero,0x4
     ef6:	4012007b          	0x4012007b
     efa:	0824                	addi	s1,sp,24
            core_init_matrix(results[0].size,
     efc:	1622                	slli	a2,a2,0x28
     efe:	4014                	lw	a3,0(s0)
                                 | (((ee_s32)results[i].seed2) << 16),
     f00:	2b24                	fld	fs1,80(a4)
     f02:	0128                	addi	a0,sp,136
     f04:	1600                	addi	s0,sp,800
     f06:	01389f13          	slli	t5,a7,0x13
                             (ee_s32)results[i].seed1
     f0a:	0000                	unimp
                                 | (((ee_s32)results[i].seed2) << 16),
     f0c:	0160                	addi	s0,sp,140
     f0e:	0000                	unimp
            core_init_matrix(results[0].size,
     f10:	001f 0078 2633      	0x26330078001f
                             (ee_s32)results[i].seed1
     f16:	00781a3f 1a3f2633 	0x1a3f263300781a3f
                                 | (((ee_s32)results[i].seed2) << 16),
     f1e:	2434                	fld	fa3,72(s0)
            core_init_matrix(results[0].size,
     f20:	1221                	addi	tp,tp,-24
     f22:	2440                	fld	fs0,136(s0)
     f24:	2208                	fld	fa0,0(a2)
     f26:	1416                	slli	s0,s0,0x25
     f28:	2440                	fld	fs0,136(s0)
     f2a:	0001282b          	0x1282b
        if (results[i].execs & ID_STATE)
     f2e:	1316                	slli	t1,t1,0x25
     f30:	609f 0001 6b00      	0x6b000001609f
                ee_printf("[%u]ERROR! state crc 0x%04x - should be 0x%04x\n",
     f36:	0001                	nop
     f38:	0100                	addi	s0,sp,128
     f3a:	5b00                	lw	s0,48(a4)
     f3c:	0000016b          	0x16b
                results[i].err++;
     f40:	0188                	addi	a0,sp,192
     f42:	0000                	unimp
     f44:	0010                	0x10
     f46:	0078                	addi	a4,sp,12
     f48:	1a3f2633          	0x1a3f2633
     f4c:	0078                	addi	a4,sp,12
     f4e:	1a3f2633          	0x1a3f2633
     f52:	2434                	fld	fa3,72(s0)
     f54:	9f21                	0x9f21
	...
    switch (seedcrc)
     f5e:	01f0                	addi	a2,sp,204
     f60:	0000                	unimp
     f62:	022c                	addi	a1,sp,264
     f64:	0000                	unimp
     f66:	0001                	nop
     f68:	2c5a                	fld	fs8,400(sp)
     f6a:	0002                	c.slli64	zero
     f6c:	4400                	lw	s0,8(s0)
     f6e:	0002                	c.slli64	zero
            ee_printf("2K performance run parameters for coremark.\n");
     f70:	0400                	addi	s0,sp,512
     f72:	f300                	fsw	fs0,32(a4)
     f74:	5a01                	li	s4,-32
     f76:	449f 0002 4c00      	0x4c000002449f
            known_id = 3;
     f7c:	0002                	c.slli64	zero
     f7e:	0100                	addi	s0,sp,128
     f80:	5a00                	lw	s0,48(a2)
     f82:	024c                	addi	a1,sp,260
        for (i = 0; i < default_num_contexts; i++)
     f84:	0000                	unimp
     f86:	0250                	addi	a2,sp,260
    total_errors += check_data_types();
     f88:	0000                	unimp
     f8a:	0004                	0x4
    ee_printf("CoreMark Size    : %lu\n", (long unsigned)results[0].size);
     f8c:	9f5a01f3          	0x9f5a01f3
	...
     f98:	01f0                	addi	a2,sp,204
     f9a:	0000                	unimp
     f9c:	0218                	addi	a4,sp,256
     f9e:	0000                	unimp
    ee_printf("Total ticks      : %lu\n", (long unsigned)total_time);
     fa0:	0001                	nop
     fa2:	185c                	addi	a5,sp,52
     fa4:	0002                	c.slli64	zero
     fa6:	4400                	lw	s0,8(s0)
     fa8:	0002                	c.slli64	zero
     faa:	0400                	addi	s0,sp,512
     fac:	f300                	fsw	fs0,32(a4)
     fae:	5c01                	li	s8,-32
    ee_printf("Total time (secs): %d\n", time_in_secs(total_time));
     fb0:	449f 0002 5000      	0x50000002449f
     fb6:	0002                	c.slli64	zero
     fb8:	0100                	addi	s0,sp,128
     fba:	5c00                	lw	s0,56(s0)
	...
     fc4:	01f0                	addi	a2,sp,204
     fc6:	0000                	unimp
    total_errors += check_data_types();
     fc8:	0200                	addi	s0,sp,256
     fca:	0000                	unimp
    if (time_in_secs(total_time) > 0)
     fcc:	0001                	nop
     fce:	005e                	c.slli	zero,0x17
    total_errors += check_data_types();
     fd0:	0002                	c.slli64	zero
     fd2:	5000                	lw	s0,32(s0)
    if (time_in_secs(total_time) > 0)
     fd4:	0002                	c.slli64	zero
     fd6:	0400                	addi	s0,sp,512
     fd8:	f300                	fsw	fs0,32(a4)
     fda:	5e01                	li	t3,-32
    if (time_in_secs(total_time) < 10)
     fdc:	009f 0000 0000      	0x9f
     fe2:	0000                	unimp
     fe4:	f000                	fsw	fs0,32(s0)
     fe6:	0001                	nop
     fe8:	1000                	addi	s0,sp,32
     fea:	0002                	c.slli64	zero
    ee_printf("Iterations       : %lu\n",
     fec:	0100                	addi	s0,sp,128
     fee:	5f00                	lw	s0,56(a4)
     ff0:	0210                	addi	a2,sp,256
     ff2:	0000                	unimp
        total_errors++;
     ff4:	0244                	addi	s1,sp,260
     ff6:	0000                	unimp
     ff8:	0004                	0x4
     ffa:	9f5f01f3          	0x9f5f01f3
    ee_printf("Iterations       : %lu\n",
     ffe:	0244                	addi	s1,sp,260
    1000:	0000                	unimp
    1002:	0250                	addi	a2,sp,260
    1004:	0000                	unimp
    1006:	0001                	nop
    1008:	005f 0000 0000      	0x5f
    100e:	0000                	unimp
    ee_printf("Compiler version : %s\n", COMPILER_VERSION);
    1010:	0800                	addi	s0,sp,16
    1012:	0002                	c.slli64	zero
    1014:	4400                	lw	s0,8(s0)
    1016:	0002                	c.slli64	zero
    1018:	0100                	addi	s0,sp,128
    101a:	6000                	flw	fs0,0(s0)
	...
    ee_printf("Compiler flags   : %s\n", COMPILER_FLAGS);
    1024:	0238                	addi	a4,sp,264
    1026:	0000                	unimp
    1028:	0240                	addi	s0,sp,260
    102a:	0000                	unimp
    102c:	0001                	nop
    102e:	0000005b          	0x5b
    1032:	0000                	unimp
    1034:	0000                	unimp
    1036:	3800                	fld	fs0,48(s0)
    ee_printf("Memory location  : %s\n", MEM_LOCATION);
    1038:	0002                	c.slli64	zero
    103a:	4000                	lw	s0,0(s0)
    103c:	0002                	c.slli64	zero
    103e:	0100                	addi	s0,sp,128
    1040:	5f00                	lw	s0,56(a4)
	...
    104a:	0250                	addi	a2,sp,260
    ee_printf("seedcrc          : 0x%04x\n", seedcrc);
    104c:	0000                	unimp
    104e:	0258                	addi	a4,sp,260
    1050:	0000                	unimp
    1052:	0001                	nop
    1054:	585a                	lw	a6,180(sp)
    1056:	0002                	c.slli64	zero
    1058:	7800                	flw	fs0,48(s0)
    105a:	0002                	c.slli64	zero
    if (results[0].execs & ID_LIST)
    105c:	0100                	addi	s0,sp,128
    105e:	5f00                	lw	s0,56(a4)
	...
        for (i = 0; i < default_num_contexts; i++)
    1068:	0298                	addi	a4,sp,320
    106a:	0000                	unimp
    106c:	02ac                	addi	a1,sp,328
    106e:	0000                	unimp
            ee_printf("[%d]crclist       : 0x%04x\n", i, results[i].crclist);
    1070:	0001                	nop
    1072:	ac5a                	fsd	fs6,24(sp)
    1074:	0002                	c.slli64	zero
    1076:	cc00                	sw	s0,24(s0)
    1078:	0002                	c.slli64	zero
    107a:	0100                	addi	s0,sp,128
    107c:	5a00                	lw	s0,48(a2)
    107e:	02cc                	addi	a1,sp,324
    1080:	0000                	unimp
    1082:	02e4                	addi	s1,sp,332
    1084:	0000                	unimp
    1086:	0004                	0x4
        for (i = 0; i < default_num_contexts; i++)
    1088:	9f5a01f3          	0x9f5a01f3
    108c:	02e4                	addi	s1,sp,332
    108e:	0000                	unimp
            ee_printf("[%d]crclist       : 0x%04x\n", i, results[i].crclist);
    1090:	02e8                	addi	a0,sp,332
    1092:	0000                	unimp
    1094:	0001                	nop
    1096:	ec5a                	fsw	fs6,24(sp)
    1098:	0002                	c.slli64	zero
    109a:	f000                	fsw	fs0,32(s0)
    109c:	0002                	c.slli64	zero
    109e:	0100                	addi	s0,sp,128
    10a0:	5a00                	lw	s0,48(a2)
	...
    10aa:	02c0                	addi	s0,sp,324
    10ac:	0000                	unimp
    10ae:	02e4                	addi	s1,sp,332
    10b0:	0000                	unimp
    10b2:	0001                	nop
    10b4:	005a                	c.slli	zero,0x16
    10b6:	0000                	unimp
    10b8:	0000                	unimp
    10ba:	0000                	unimp
    10bc:	f000                	fsw	fs0,32(s0)
    10be:	0002                	c.slli64	zero
        for (i = 0; i < default_num_contexts; i++)
    10c0:	fc00                	fsw	fs0,56(s0)
    10c2:	0002                	c.slli64	zero
    10c4:	0100                	addi	s0,sp,128
    10c6:	5a00                	lw	s0,48(a2)
    10c8:	02fc                	addi	a5,sp,332
    10ca:	0000                	unimp
    10cc:	0300                	addi	s0,sp,384
    10ce:	0000                	unimp
    10d0:	0001                	nop
    10d2:	005f 0003 0800      	0x8000003005f
    if (results[0].execs & ID_MATRIX)
    10d8:	01000003          	lb	zero,16(zero) # 10 <_start>
    10dc:	5a00                	lw	s0,48(a2)
    10de:	0308                	addi	a0,sp,384
        for (i = 0; i < default_num_contexts; i++)
    10e0:	0000                	unimp
    10e2:	0310                	addi	a2,sp,384
    10e4:	0000                	unimp
    10e6:	0001                	nop
            ee_printf("[%d]crcmatrix     : 0x%04x\n", i, results[i].crcmatrix);
    10e8:	005f 0000 0000      	0x5f
    10ee:	0000                	unimp
    10f0:	f000                	fsw	fs0,32(s0)
    10f2:	0002                	c.slli64	zero
    10f4:	fc00                	fsw	fs0,56(s0)
    10f6:	0002                	c.slli64	zero
    10f8:	0200                	addi	s0,sp,256
    10fa:	3000                	fld	fs0,32(s0)
    10fc:	fc9f 0002 0000      	0x2fc9f
        for (i = 0; i < default_num_contexts; i++)
    1102:	01000003          	lb	zero,16(zero) # 10 <_start>
    1106:	5a00                	lw	s0,48(a2)
            ee_printf("[%d]crcmatrix     : 0x%04x\n", i, results[i].crcmatrix);
    1108:	0300                	addi	s0,sp,384
    110a:	0000                	unimp
    110c:	0308                	addi	a0,sp,384
    110e:	0000                	unimp
    1110:	0001                	nop
    1112:	085e                	slli	a6,a6,0x17
    1114:	10000003          	lb	zero,256(zero) # 100 <cmp_idx+0x3c>
    1118:	01000003          	lb	zero,16(zero) # 10 <_start>
    111c:	5a00                	lw	s0,48(a2)
	...
    1126:	02fc                	addi	a5,sp,332
    1128:	0000                	unimp
    112a:	0300                	addi	s0,sp,384
    112c:	0000                	unimp
    112e:	0001                	nop
    1130:	045f 0003 1000      	0x10000003045f
    1136:	01000003          	lb	zero,16(zero) # 10 <_start>
        for (i = 0; i < default_num_contexts; i++)
    113a:	5f00                	lw	s0,56(a4)
	...
    1144:	0b44                	addi	s1,sp,404
    1146:	0000                	unimp
    1148:	0b7c                	addi	a5,sp,412
    114a:	0000                	unimp
    114c:	0002                	c.slli64	zero
    114e:	9f30                	0x9f30
    if (results[0].execs & ID_STATE)
    1150:	0b7c                	addi	a5,sp,412
    1152:	0000                	unimp
    1154:	0b88                	addi	a0,sp,464
    1156:	0000                	unimp
        for (i = 0; i < default_num_contexts; i++)
    1158:	0002                	c.slli64	zero
    115a:	9f31                	0x9f31
    115c:	0b88                	addi	a0,sp,464
    115e:	0000                	unimp
            ee_printf("[%d]crcstate      : 0x%04x\n", i, results[i].crcstate);
    1160:	0b98                	addi	a4,sp,464
    1162:	0000                	unimp
    1164:	0002                	c.slli64	zero
    1166:	9f32                	add	t5,t5,a2
    1168:	0b98                	addi	a4,sp,464
    116a:	0000                	unimp
    116c:	0bd4                	addi	a3,sp,468
    116e:	0000                	unimp
    1170:	0002                	c.slli64	zero
    1172:	9f30                	0x9f30
    1174:	0bd4                	addi	a3,sp,468
    1176:	0000                	unimp
        for (i = 0; i < default_num_contexts; i++)
    1178:	0be0                	addi	s0,sp,476
    117a:	0000                	unimp
    117c:	0001                	nop
    117e:	ec65                	bnez	s0,1276 <main+0x88e>
            ee_printf("[%d]crcstate      : 0x%04x\n", i, results[i].crcstate);
    1180:	2800000b          	0x2800000b
    1184:	000c                	0xc
    1186:	0200                	addi	s0,sp,256
    1188:	3000                	fld	fs0,32(s0)
    118a:	589f 000d a400      	0xa400000d589f
    1190:	000d                	c.nop	3
    1192:	0200                	addi	s0,sp,256
    1194:	3000                	fld	fs0,32(s0)
    1196:	a49f 000d bc00      	0xbc00000da49f
    119c:	000d                	c.nop	3
    119e:	0100                	addi	s0,sp,128
    11a0:	5900                	lw	s0,48(a0)
    11a2:	0ddc                	addi	a5,sp,724
    11a4:	0000                	unimp
    11a6:	0eb0                	addi	a2,sp,856
    11a8:	0000                	unimp
    11aa:	0001                	nop
    11ac:	b059                	j	a32 <main+0x4a>
    11ae:	000e                	c.slli	zero,0x3
        for (i = 0; i < default_num_contexts; i++)
    11b0:	3400                	fld	fs0,40(s0)
    11b2:	0200000f          	fence	r,unknown
    11b6:	3000                	fld	fs0,32(s0)
    11b8:	349f 000f 5800      	0x5800000f349f
    11be:	0100000f          	fence	w,unknown
    11c2:	5900                	lw	s0,48(a0)
        ee_printf("[%d]crcfinal      : 0x%04x\n", i, results[i].crc);
    11c4:	0f84                	addi	s1,sp,976
    11c6:	0000                	unimp
    for (i = 0; i < default_num_contexts; i++)
    11c8:	0f88                	addi	a0,sp,976
    11ca:	0000                	unimp
        ee_printf("[%d]crcfinal      : 0x%04x\n", i, results[i].crc);
    11cc:	0002                	c.slli64	zero
    11ce:	9f30                	0x9f30
    11d0:	1068                	addi	a0,sp,44
    11d2:	0000                	unimp
    11d4:	1098                	addi	a4,sp,96
    11d6:	0000                	unimp
    11d8:	0002                	c.slli64	zero
    11da:	9f30                	0x9f30
    for (i = 0; i < default_num_contexts; i++)
    11dc:	1098                	addi	a4,sp,96
    11de:	0000                	unimp
    11e0:	10c4                	addi	s1,sp,100
    11e2:	0000                	unimp
        ee_printf("[%d]crcfinal      : 0x%04x\n", i, results[i].crc);
    11e4:	0001                	nop
    11e6:	d058                	sw	a4,36(s0)
    11e8:	0010                	0x10
    11ea:	d800                	sw	s0,48(s0)
    for (i = 0; i < default_num_contexts; i++)
    11ec:	0010                	0x10
    11ee:	0100                	addi	s0,sp,128
        ee_printf("[%d]crcfinal      : 0x%04x\n", i, results[i].crc);
    11f0:	5800                	lw	s0,48(s0)
    11f2:	10e0                	addi	s0,sp,108
    11f4:	0000                	unimp
    11f6:	1110                	addi	a2,sp,160
    11f8:	0000                	unimp
    11fa:	0002                	c.slli64	zero
    11fc:	9f30                	0x9f30
    11fe:	1110                	addi	a2,sp,160
    1200:	0000                	unimp
    1202:	113c                	addi	a5,sp,168
    1204:	0000                	unimp
    1206:	0001                	nop
    1208:	4858                	lw	a4,20(s0)
    120a:	0011                	c.nop	4
    120c:	5000                	lw	s0,32(s0)
    120e:	0011                	c.nop	4
    1210:	0100                	addi	s0,sp,128
    1212:	5800                	lw	s0,48(s0)
    for (i = 0; i < default_num_contexts; i++)
    1214:	1158                	addi	a4,sp,164
    1216:	0000                	unimp
    1218:	1188                	addi	a0,sp,224
    121a:	0000                	unimp
    121c:	0002                	c.slli64	zero
    121e:	9f30                	0x9f30
    1220:	1188                	addi	a0,sp,224
    1222:	0000                	unimp
    1224:	11b4                	addi	a3,sp,232
    1226:	0000                	unimp
    if (total_errors == 0)
    1228:	0001                	nop
    122a:	c058                	sw	a4,4(s0)
    if (total_errors > 0)
    122c:	0011                	c.nop	4
    122e:	c400                	sw	s0,8(s0)
        ee_printf("Errors detected\n");
    1230:	0011                	c.nop	4
    1232:	0100                	addi	s0,sp,128
    1234:	5800                	lw	s0,48(s0)
    1236:	11c4                	addi	s1,sp,228
    1238:	0000                	unimp
    123a:	11f0                	addi	a2,sp,236
    portable_fini(&(results[0].port));
    123c:	0000                	unimp
    123e:	0002                	c.slli64	zero
    1240:	9f30                	0x9f30
    1242:	11f0                	addi	a2,sp,236
}
    1244:	0000                	unimp
    1246:	1218                	addi	a4,sp,288
    1248:	0000                	unimp
    124a:	0001                	nop
    124c:	2458                	fld	fa4,136(s0)
    124e:	0012                	c.slli	zero,0x4
    1250:	2800                	fld	fs0,16(s0)
    1252:	0012                	c.slli	zero,0x4
    1254:	0100                	addi	s0,sp,128
    1256:	5800                	lw	s0,48(s0)
    1258:	135c                	addi	a5,sp,420
    125a:	0000                	unimp
    125c:	1368                	addi	a0,sp,428
    125e:	0000                	unimp
    1260:	0002                	c.slli64	zero
    1262:	9f30                	0x9f30
	...
    126c:	0a74                	addi	a3,sp,284
    126e:	0000                	unimp
    1270:	0bd4                	addi	a3,sp,468
    1272:	0000                	unimp
    1274:	0002                	c.slli64	zero
    1276:	9f30                	0x9f30
    1278:	0bd4                	addi	a3,sp,468
    127a:	0000                	unimp
    127c:	0d58                	addi	a4,sp,660
    127e:	0000                	unimp
                    = (char *)(results[ctx].memblock[0]) + results[0].size * j;
    1280:	0001                	nop
    1282:	000eb067          	0xeb067
    1286:	3400                	fld	fs0,40(s0)
    1288:	0100000f          	fence	w,unknown
            j++;
    128c:	6700                	flw	fs0,8(a4)
    128e:	0f58                	addi	a4,sp,916
                    = (char *)(results[ctx].memblock[0]) + results[0].size * j;
    1290:	0000                	unimp
    1292:	0f84                	addi	s1,sp,976
            j++;
    1294:	0000                	unimp
    1296:	0001                	nop
                    = (char *)(results[ctx].memblock[0]) + results[0].size * j;
    1298:	00128067          	jr	1(t0) # 6001 <__subdf3+0x591>
            j++;
    129c:	9000                	0x9000
    129e:	0012                	c.slli	zero,0x4
    12a0:	0100                	addi	s0,sp,128
    12a2:	6700                	flw	fs0,8(a4)
    if ((results[0].seed1 == 1) && (results[0].seed2 == 0)
    12a4:	12a0                	addi	s0,sp,360
    12a6:	0000                	unimp
    12a8:	12a4                	addi	s1,sp,360
    12aa:	0000                	unimp
        && (results[0].seed3 == 0))
    12ac:	0001                	nop
    12ae:	0012a467          	0x12a467
    12b2:	e000                	fsw	fs0,0(s0)
    12b4:	0012                	c.slli	zero,0x4
    12b6:	0200                	addi	s0,sp,256
        results[0].seed1 = 0x3415;
    12b8:	3000                	fld	fs0,32(s0)
    12ba:	f09f 0012 0000      	0x12f09f
    12c0:	02000013          	li	zero,32
    12c4:	3000                	fld	fs0,32(s0)
    12c6:	689f 0013 ac00      	0xac000013689f
        results[0].seed3 = 0x66;
    12cc:	01000013          	li	zero,16
    12d0:	6700                	flw	fs0,8(a4)
	...
        results[0].execs = ALL_ALGORITHMS_MASK;
    12da:	0a74                	addi	a3,sp,284
    12dc:	0000                	unimp
    12de:	0b7c                	addi	a5,sp,412
        ee_printf(
    12e0:	0000                	unimp
    12e2:	0002                	c.slli64	zero
    12e4:	9f30                	0x9f30
    12e6:	0b7c                	addi	a5,sp,412
    12e8:	0000                	unimp
    12ea:	0b90                	addi	a2,sp,464
    12ec:	0000                	unimp
    12ee:	0001                	nop
        results[0].seed3 = 0x66;
    12f0:	000b905b          	0xb905b
    12f4:	9400                	0x9400
    12f6:	0300000b          	0x300000b
    12fa:	7b00                	flw	fs0,48(a4)
    if ((results[0].seed1 == 1) && (results[0].seed2 == 0)
    12fc:	9f7f                	0x9f7f
    12fe:	0b94                	addi	a3,sp,464
        ee_printf(
    1300:	0000                	unimp
    1302:	0b98                	addi	a4,sp,464
    1304:	0000                	unimp
    1306:	0006                	c.slli	zero,0x1
    1308:	0086                	slli	ra,ra,0x1
    130a:	007e                	c.slli	zero,0x1f
    if (total_errors < 0)
    130c:	9f22                	add	t5,t5,s0
    130e:	0b98                	addi	a4,sp,464
        ee_printf(
    1310:	0000                	unimp
    1312:	0b9f 0000 0001      	0x100000b9f
    1318:	0012a45b          	0x12a45b
        total_errors++;
    131c:	e000                	fsw	fs0,0(s0)
    131e:	0012                	c.slli	zero,0x4
    1320:	0200                	addi	s0,sp,256
    1322:	3000                	fld	fs0,32(s0)
                  default_num_contexts * results[0].iterations
    1324:	f09f 0012 0000      	0x12f09f
    132a:	02000013          	li	zero,32
    132e:	3000                	fld	fs0,32(s0)
    1330:	009f 0000 0000      	0x9f
                      / time_in_secs(total_time));
    1336:	0000                	unimp
    1338:	7400                	flw	fs0,40(s0)
    133a:	000a                	c.slli	zero,0x2
    133c:	4800                	lw	s0,16(s0)
    133e:	000d                	c.nop	3
        ee_printf("Iterations/Sec   : %d\n",
    1340:	0300                	addi	s0,sp,384
    1342:	0900                	addi	s0,sp,144
    1344:	9fff                	0x9fff
    1346:	0d48                	addi	a0,sp,660
    1348:	0000                	unimp
    134a:	0d58                	addi	a4,sp,660
    134c:	0000                	unimp
    134e:	0002                	c.slli64	zero
    1350:	9f32                	add	t5,t5,a2
    1352:	0eb0                	addi	a2,sp,856
    1354:	0000                	unimp
    1356:	0f34                	addi	a3,sp,920
    1358:	0000                	unimp
    135a:	ff090003          	lb	zero,-16(s2)
    if (results[0].execs & ID_STATE)
    135e:	589f 000f 7000      	0x7000000f589f
    1364:	0300000f          	fence	rw,unknown
            ee_printf("6k validation run parameters for coremark.\n");
    1368:	0900                	addi	s0,sp,144
    136a:	9fff                	0x9fff
    136c:	0f70                	addi	a2,sp,924
    136e:	0000                	unimp
    1370:	0f84                	addi	s1,sp,976
    1372:	0000                	unimp
            known_id = 1;
    1374:	0002                	c.slli64	zero
    1376:	12809f33          	0x12809f33
    137a:	0000                	unimp
            ee_printf("6k performance run parameters for coremark.\n");
    137c:	12e0                	addi	s0,sp,364
    137e:	0000                	unimp
    1380:	ff090003          	lb	zero,-16(s2)
    1384:	f09f 0012 0000      	0x12f09f
            known_id = 0;
    138a:	03000013          	li	zero,48
    138e:	0900                	addi	s0,sp,144
            ee_printf("2K validation run parameters for coremark.\n");
    1390:	9fff                	0x9fff
    1392:	1368                	addi	a0,sp,428
    1394:	0000                	unimp
    1396:	137c                	addi	a5,sp,428
    1398:	0000                	unimp
    139a:	0002                	c.slli64	zero
            known_id = 4;
    139c:	9f31                	0x9f31
    139e:	137c                	addi	a5,sp,428
    13a0:	0000                	unimp
    13a2:	1390                	addi	a2,sp,480
    switch (seedcrc)
    13a4:	0000                	unimp
    13a6:	0002                	c.slli64	zero
    13a8:	9f30                	0x9f30
    13aa:	1390                	addi	a2,sp,480
    13ac:	0000                	unimp
    13ae:	13a4                	addi	s1,sp,488
{
    13b0:	0000                	unimp
    13b2:	0002                	c.slli64	zero
    13b4:	9f34                	0x9f34
    13b6:	13a4                	addi	s1,sp,488
    13b8:	0000                	unimp
    13ba:	13b0                	addi	a2,sp,488
    13bc:	0000                	unimp
    13be:	ff090003          	lb	zero,-16(s2)
    13c2:	009f 0000 0000      	0x9f
    13c8:	0000                	unimp
    13ca:	7400                	flw	fs0,40(s0)
    13cc:	000a                	c.slli	zero,0x2
    13ce:	a400                	fsd	fs0,8(s0)
    13d0:	000d                	c.nop	3
    13d2:	0200                	addi	s0,sp,256
    13d4:	3000                	fld	fs0,32(s0)
    13d6:	a49f 000d d000      	0xd000000da49f
    13dc:	000d                	c.nop	3
    13de:	0100                	addi	s0,sp,128
    13e0:	6a00                	flw	fs0,16(a2)
    13e2:	0ddc                	addi	a5,sp,724
    13e4:	0000                	unimp
    13e6:	0eb0                	addi	a2,sp,856
    13e8:	0000                	unimp
    13ea:	0001                	nop
    13ec:	b06a                	fsd	fs10,32(sp)
    13ee:	000e                	c.slli	zero,0x3
        seed = 1;
    13f0:	3400                	fld	fs0,40(s0)
    13f2:	0200000f          	fence	r,unknown
    if (seed == 0)
    13f6:	3000                	fld	fs0,32(s0)
    13f8:	349f 000f 5800      	0x5800000f349f
    A = (MATDAT *)align_mem(memblk);
    13fe:	0100000f          	fence	w,unknown
    1402:	6a00                	flw	fs0,16(a2)
    1404:	0f58                	addi	a4,sp,916
    1406:	0000                	unimp
    1408:	0f88                	addi	a0,sp,976
    140a:	0000                	unimp
    while (j < blksize)
    140c:	0002                	c.slli64	zero
    140e:	9f30                	0x9f30
    1410:	0fd4                	addi	a3,sp,980
    1412:	0000                	unimp
        i++;
    1414:	0fec                	addi	a1,sp,988
    1416:	0000                	unimp
    1418:	0001                	nop
    141a:	fc58                	fsw	fa4,60(s0)
        j = i * i * 2 * 4;
    141c:	5400000f          	0x5400000f
    1420:	0012                	c.slli	zero,0x4
    1422:	0100                	addi	s0,sp,128
    1424:	5900                	lw	s0,48(a0)
    1426:	1280                	addi	s0,sp,352
    1428:	0000                	unimp
    142a:	12e0                	addi	s0,sp,364
    while (j < blksize)
    142c:	0000                	unimp
    142e:	0002                	c.slli64	zero
    B = A + N * N;
    1430:	9f30                	0x9f30
    1432:	12e0                	addi	s0,sp,364
    1434:	0000                	unimp
    1436:	12f0                	addi	a2,sp,364
    1438:	0000                	unimp
    143a:	0001                	nop
    143c:	f059                	bnez	s0,13c2 <core_init_matrix+0x12>
    143e:	0012                	c.slli	zero,0x4
    1440:	0000                	unimp
    1442:	02000013          	li	zero,32
    1446:	3000                	fld	fs0,32(s0)
    p->N = N;
    1448:	009f 0013 1000      	0x10000013009f
    B = A + N * N;
    144e:	01000013          	li	zero,16
    for (i = 0; i < N; i++)
    1452:	5900                	lw	s0,48(a0)
    1454:	1310                	addi	a2,sp,416
    1456:	0000                	unimp
            seed         = ((order * seed) % 65536);
    1458:	1320                	addi	s0,sp,424
    145a:	0000                	unimp
    B = A + N * N;
    145c:	0001                	nop
    145e:	2058                	fld	fa4,128(s0)
    1460:	24000013          	li	zero,576
    1464:	03000013          	li	zero,48
    1468:	7800                	flw	fs0,48(s0)
    146a:	9f7f                	0x9f7f
            seed         = ((order * seed) % 65536);
    146c:	1324                	addi	s1,sp,424
    146e:	0000                	unimp
            order++;
    1470:	135c                	addi	a5,sp,420
    1472:	0000                	unimp
        for (j = 0; j < N; j++)
    1474:	0001                	nop
    1476:	5c58                	lw	a4,60(s0)
    1478:	68000013          	li	zero,1664
        seed = 1;
    147c:	01000013          	li	zero,16
        for (j = 0; j < N; j++)
    1480:	5900                	lw	s0,48(a0)
    1482:	1368                	addi	a0,sp,428
            seed         = ((order * seed) % 65536);
    1484:	0000                	unimp
    1486:	13b0                	addi	a2,sp,488
    1488:	0000                	unimp
    148a:	0002                	c.slli64	zero
    148c:	9f30                	0x9f30
	...
    1496:	0a74                	addi	a3,sp,284
    1498:	0000                	unimp
    149a:	0cf8                	addi	a4,sp,604
    149c:	0000                	unimp
    149e:	0002                	c.slli64	zero
    14a0:	9f30                	0x9f30
    14a2:	0cf8                	addi	a4,sp,604
    14a4:	0000                	unimp
    14a6:	0cff                	0xcff
    14a8:	0000                	unimp
    14aa:	0001                	nop
            val          = (seed + order);
    14ac:	000d085b          	0xd085b
    14b0:	0f00                	addi	s0,sp,912
    14b2:	000d                	c.nop	3
    14b4:	0100                	addi	s0,sp,128
    14b6:	5b00                	lw	s0,48(a4)
            val          = (val + order);
    14b8:	0d14                	addi	a3,sp,656
    14ba:	0000                	unimp
            B[i * N + j] = val;
    14bc:	00000d1b          	0xd1b
            val          = matrix_clip(val, 1);
    14c0:	0001                	nop
    14c2:	000d285b          	0xd285b
            A[i * N + j] = val;
    14c6:	4c00                	lw	s0,24(s0)
    14c8:	000d                	c.nop	3
    14ca:	0100                	addi	s0,sp,128
        for (j = 0; j < N; j++)
    14cc:	5a00                	lw	s0,48(a2)
    14ce:	0eb0                	addi	a2,sp,856
            order++;
    14d0:	0000                	unimp
    14d2:	0f34                	addi	a3,sp,920
        for (j = 0; j < N; j++)
    14d4:	0000                	unimp
    14d6:	0002                	c.slli64	zero
    14d8:	9f30                	0x9f30
    14da:	0f58                	addi	a4,sp,916
    14dc:	0000                	unimp
    14de:	0f74                	addi	a3,sp,924
            order++;
    14e0:	0000                	unimp
    14e2:	0001                	nop
    14e4:	805a                	c.mv	zero,s6
    14e6:	0012                	c.slli	zero,0x4
    14e8:	e000                	fsw	fs0,0(s0)
    14ea:	0012                	c.slli	zero,0x4
    for (i = 0; i < N; i++)
    14ec:	0200                	addi	s0,sp,256
    14ee:	3000                	fld	fs0,32(s0)
            order++;
    14f0:	f09f 0012 0000      	0x12f09f
    for (i = 0; i < N; i++)
    14f6:	02000013          	li	zero,32
    14fa:	3000                	fld	fs0,32(s0)
    p->C = (MATRES *)align_mem(B + N * N);
    14fc:	689f 0013 6c00      	0x6c000013689f
    p->A = A;
    1502:	01000013          	li	zero,16
    1506:	5a00                	lw	s0,48(a2)
    p->C = (MATRES *)align_mem(B + N * N);
    1508:	137c                	addi	a5,sp,428
    150a:	0000                	unimp
    150c:	1380                	addi	s0,sp,480
    150e:	0000                	unimp
    1510:	0001                	nop
    1512:	905a                	c.add	zero,s6
    1514:	94000013          	li	zero,-1728
    1518:	01000013          	li	zero,16
    p->N = N;
    151c:	5a00                	lw	s0,48(a2)
    151e:	13a4                	addi	s1,sp,488
}
    1520:	0000                	unimp
    1522:	13b0                	addi	a2,sp,488
    1524:	0000                	unimp
    1526:	0001                	nop
    1528:	005a                	c.slli	zero,0x16
    152a:	0000                	unimp
    p->B = B;
    152c:	0000                	unimp
    152e:	0000                	unimp
    p->A = A;
    1530:	e800                	fsw	fs0,16(s0)
    1532:	000c                	0xc
    p->N = N;
    1534:	b000                	fsd	fs0,32(s0)
    1536:	000e                	c.slli	zero,0x3
}
    1538:	0100                	addi	s0,sp,128
    153a:	6300                	flw	fs0,0(a4)
    153c:	0f34                	addi	a3,sp,920
    153e:	0000                	unimp
    1540:	1090                	addi	a2,sp,96
    1542:	0000                	unimp
    1544:	0001                	nop
    1546:	00131063          	bne	t1,ra,1546 <core_init_matrix+0x196>
    154a:	5c00                	lw	s0,56(s0)
    154c:	01000013          	li	zero,16
    1550:	6300                	flw	fs0,0(a4)
    1552:	1368                	addi	a0,sp,428
    1554:	0000                	unimp
    1556:	13b0                	addi	a2,sp,488
    1558:	0000                	unimp
    155a:	0001                	nop
    155c:	00000063          	beqz	zero,155c <core_init_matrix+0x1ac>
    1560:	0000                	unimp
    1562:	0000                	unimp
    1564:	4c00                	lw	s0,24(s0)
    1566:	000a                	c.slli	zero,0x2
    1568:	5c00                	lw	s0,56(s0)
    156a:	000a                	c.slli	zero,0x2
    B = A + N * N;
    156c:	0200                	addi	s0,sp,256
    156e:	3000                	fld	fs0,32(s0)
    1570:	5c9f 000a 6400      	0x6400000a5c9f
    1576:	000a                	c.slli	zero,0x2
    1578:	0900                	addi	s0,sp,144
    157a:	7800                	flw	fs0,48(s0)
    N = i - 1;
    157c:	0300                	addi	s0,sp,384
    157e:	6260                	flw	fs0,68(a2)
    B = A + N * N;
    1580:	0000                	unimp
    1582:	9f1c                	0x9f1c
    1584:	0a64                	addi	s1,sp,284
    1586:	0000                	unimp
{
    1588:	0a68                	addi	a0,sp,284
    158a:	0000                	unimp
    for (i = 0; i < N; i++)
    158c:	000a                	c.slli	zero,0x2
    158e:	00626003          	0x626003
    1592:	2000                	fld	fs0,0(s0)
    1594:	0078                	addi	a4,sp,12
    1596:	9f22                	add	t5,t5,s0
    1598:	0a68                	addi	a0,sp,284
    159a:	0000                	unimp
    159c:	0a80                	addi	s0,sp,336
    159e:	0000                	unimp
    15a0:	0009                	c.nop	2
    15a2:	0078                	addi	a4,sp,12
    ee_s16 ret = 0;
    15a4:	00626003          	0x626003
    MATRES tmp = 0, prev = 0, cur = 0;
    15a8:	1c00                	addi	s0,sp,560
    15aa:	009f 0000 0000      	0x9f
    for (i = 0; i < N; i++)
    15b0:	0000                	unimp
    15b2:	8000                	0x8000
        for (j = 0; j < N; j++)
    15b4:	0012                	c.slli	zero,0x4
    15b6:	9c00                	0x9c00
{
    15b8:	0012                	c.slli	zero,0x4
    15ba:	0200                	addi	s0,sp,256
    15bc:	3000                	fld	fs0,32(s0)
    15be:	9c9f 0012 a400      	0xa40000129c9f
        for (j = 0; j < N; j++)
    15c4:	0012                	c.slli	zero,0x4
    15c6:	0200                	addi	s0,sp,256
                ret += 10;
    15c8:	3100                	fld	fs0,32(a0)
    15ca:	009f 0000 0000      	0x9f
        for (j = 0; j < N; j++)
    15d0:	0000                	unimp
    15d2:	3000                	fld	fs0,32(s0)
                ret += (cur > prev) ? 1 : 0;
    15d4:	000c                	0xc
    15d6:	8000                	0x8000
            cur = C[i * N + j];
    15d8:	000c                	0xc
    15da:	0200                	addi	s0,sp,256
                ret += 10;
    15dc:	3000                	fld	fs0,32(s0)
    15de:	809f 000c 8c00      	0x8c00000c809f
                ret += (cur > prev) ? 1 : 0;
    15e4:	000c                	0xc
    15e6:	0100                	addi	s0,sp,128
            tmp += cur;
    15e8:	5a00                	lw	s0,48(a2)
    15ea:	0c8c                	addi	a1,sp,592
                ret += 10;
    15ec:	0000                	unimp
    15ee:	00000c8f          	0xc8f
                ret += (cur > prev) ? 1 : 0;
    15f2:	0001                	nop
            if (tmp > clipval)
    15f4:	0000005b          	0x5b
                ret += (cur > prev) ? 1 : 0;
    15f8:	0000                	unimp
    15fa:	0000                	unimp
        for (j = 0; j < N; j++)
    15fc:	8400                	0x8400
    15fe:	000c                	0xc
                ret += (cur > prev) ? 1 : 0;
    1600:	8c00                	0x8c00
    1602:	000c                	0xc
        for (j = 0; j < N; j++)
    1604:	0100                	addi	s0,sp,128
    1606:	5a00                	lw	s0,48(a2)
    for (i = 0; i < N; i++)
    1608:	0c8c                	addi	a1,sp,592
    160a:	0000                	unimp
    160c:	00000c8f          	0xc8f
    1610:	0001                	nop
    1612:	0000005b          	0x5b
}
    1616:	0000                	unimp
    ee_s16 ret = 0;
    1618:	0000                	unimp
    161a:	6000                	flw	fs0,0(s0)
}
    161c:	0009                	c.nop	2
    161e:	8c00                	0x8c00
    for (i = 0; i < N; i++)
    1620:	0009                	c.nop	2
    1622:	0100                	addi	s0,sp,128
{
    1624:	5a00                	lw	s0,48(a2)
    1626:	098c                	addi	a1,sp,208
    1628:	0000                	unimp
    162a:	09cc                	addi	a1,sp,212
    162c:	0000                	unimp
    162e:	0001                	nop
    1630:	cc58                	sw	a4,28(s0)
    1632:	0009                	c.nop	2
    1634:	e800                	fsw	fs0,16(s0)
    1636:	0009                	c.nop	2
    1638:	0400                	addi	s0,sp,512
    163a:	f300                	fsw	fs0,32(a4)
    163c:	5a01                	li	s4,-32
    163e:	009f 0000 0000      	0x9f
    1644:	0000                	unimp
    1646:	8000                	0x8000
    1648:	0009                	c.nop	2
    164a:	8c00                	0x8c00
    164c:	0009                	c.nop	2
    164e:	0200                	addi	s0,sp,256
    1650:	3000                	fld	fs0,32(s0)
    1652:	8c9f 0009 c000      	0xc00000098c9f
    1658:	0009                	c.nop	2
    165a:	0100                	addi	s0,sp,128
    165c:	5900                	lw	s0,48(a0)
    165e:	09c0                	addi	s0,sp,212
    1660:	0000                	unimp
    1662:	09c4                	addi	s1,sp,212
    1664:	0000                	unimp
    1666:	0002                	c.slli64	zero
    1668:	9f30                	0x9f30
    166a:	09c8                	addi	a0,sp,212
    166c:	0000                	unimp
    166e:	09cc                	addi	a1,sp,212
    1670:	0000                	unimp
    1672:	0001                	nop
            C[i * N + j] = (MATRES)A[i * N + j] * (MATRES)val;
    1674:	0059                	c.nop	22
    1676:	0000                	unimp
    for (i = 0; i < N; i++)
    1678:	0000                	unimp
    167a:	0000                	unimp
    167c:	9800                	0x9800
    167e:	0009                	c.nop	2
        for (j = 0; j < N; j++)
    1680:	9f00                	0x9f00
    1682:	0009                	c.nop	2
    1684:	0100                	addi	s0,sp,128
    1686:	5a00                	lw	s0,48(a2)
    1688:	09b0                	addi	a2,sp,216
    168a:	0000                	unimp
{
    168c:	000009b7          	lui	s3,0x0
            C[i * N + j] = (MATRES)A[i * N + j] * (MATRES)val;
    1690:	0001                	nop
    1692:	005a                	c.slli	zero,0x16
    1694:	0000                	unimp
    1696:	0000                	unimp
        for (j = 0; j < N; j++)
    1698:	0000                	unimp
    169a:	6000                	flw	fs0,0(s0)
            C[i * N + j] = (MATRES)A[i * N + j] * (MATRES)val;
    169c:	0009                	c.nop	2
    169e:	8c00                	0x8c00
    16a0:	0009                	c.nop	2
    16a2:	0100                	addi	s0,sp,128
        for (j = 0; j < N; j++)
    16a4:	5a00                	lw	s0,48(a2)
    16a6:	098c                	addi	a1,sp,208
    16a8:	0000                	unimp
    16aa:	09cc                	addi	a1,sp,212
    for (i = 0; i < N; i++)
    16ac:	0000                	unimp
    16ae:	0001                	nop
    16b0:	cc58                	sw	a4,28(s0)
    16b2:	0009                	c.nop	2
    16b4:	e800                	fsw	fs0,16(s0)
    16b6:	0009                	c.nop	2
    16b8:	0400                	addi	s0,sp,512
    16ba:	f300                	fsw	fs0,32(a4)
}
    16bc:	5a01                	li	s4,-32
    16be:	009f 0000 0000      	0x9f
    16c4:	0000                	unimp
    16c6:	6c00                	flw	fs0,24(s0)
    16c8:	0009                	c.nop	2
    16ca:	dc00                	sw	s0,56(s0)
    16cc:	0009                	c.nop	2
    16ce:	0100                	addi	s0,sp,128
    16d0:	6200                	flw	fs0,0(a2)
	...
    16da:	0598                	addi	a4,sp,704
    16dc:	0000                	unimp
    16de:	05fc                	addi	a5,sp,716
    16e0:	0000                	unimp
    16e2:	0001                	nop
    16e4:	fc5a                	fsw	fs6,56(sp)
    16e6:	0005                	c.nop	1
    16e8:	9400                	0x9400
    16ea:	0006                	c.slli	zero,0x1
    16ec:	0100                	addi	s0,sp,128
    16ee:	6600                	flw	fs0,8(a2)
    16f0:	0694                	addi	a3,sp,832
    16f2:	0000                	unimp
    16f4:	06d0                	addi	a2,sp,836
    16f6:	0000                	unimp
    for (i = 0; i < N; i++)
    16f8:	0004                	0x4
    16fa:	9f5a01f3          	0x9f5a01f3
	...
            A[i * N + j] += val;
    1706:	0598                	addi	a4,sp,704
    1708:	0000                	unimp
    170a:	05fc                	addi	a5,sp,716
    170c:	0000                	unimp
    170e:	0001                	nop
    1710:	0005fc5b          	0x5fc5b
    for (i = 0; i < N; i++)
    1714:	cc00                	sw	s0,24(s0)
    1716:	0006                	c.slli	zero,0x1
    1718:	0300                	addi	s0,sp,384
    171a:	9100                	0x9100
        for (j = 0; j < N; j++)
    171c:	7fb8                	flw	fa4,120(a5)
    171e:	06cc                	addi	a1,sp,836
{
    1720:	0000                	unimp
    1722:	06d0                	addi	a2,sp,836
            A[i * N + j] += val;
    1724:	0000                	unimp
    1726:	b8720003          	lb	zero,-1145(tp) # 1cb87 <RAM_SIZE+0xcb87>
        for (j = 0; j < N; j++)
    172a:	007f                	0x7f
            A[i * N + j] += val;
    172c:	0000                	unimp
    172e:	0000                	unimp
    1730:	0000                	unimp
    1732:	9800                	0x9800
        for (j = 0; j < N; j++)
    1734:	0005                	c.nop	1
    1736:	fc00                	fsw	fs0,56(s0)
    for (i = 0; i < N; i++)
    1738:	0005                	c.nop	1
    173a:	0100                	addi	s0,sp,128
    173c:	5c00                	lw	s0,56(s0)
    173e:	05fc                	addi	a5,sp,716
    1740:	0000                	unimp
    1742:	06d0                	addi	a2,sp,836
}
    1744:	0000                	unimp
    1746:	0004                	0x4
    for (i = 0; i < N; i++)
    1748:	9f5c01f3          	0x9f5c01f3
	...
{
    1754:	0598                	addi	a4,sp,704
    1756:	0000                	unimp
    1758:	05fc                	addi	a5,sp,716
    175a:	0000                	unimp
    175c:	0001                	nop
    175e:	fc5d                	bnez	s0,171c <matrix_add_const+0x24>
    1760:	0005                	c.nop	1
    1762:	cc00                	sw	s0,24(s0)
        C[i] = 0;
    1764:	0006                	c.slli	zero,0x1
    1766:	0300                	addi	s0,sp,384
{
    1768:	9100                	0x9100
    176a:	7fbc                	flw	fa5,120(a5)
    176c:	06cc                	addi	a1,sp,836
    176e:	0000                	unimp
    1770:	06d0                	addi	a2,sp,836
    1772:	0000                	unimp
    1774:	bc720003          	lb	zero,-1081(tp) # fffffbc7 <RAM_SIZE+0xfffefbc7>
    1778:	007f                	0x7f
    177a:	0000                	unimp
        C[i] = 0;
    177c:	0000                	unimp
    177e:	0000                	unimp
    1780:	9800                	0x9800
    1782:	0005                	c.nop	1
    1784:	fc00                	fsw	fs0,56(s0)
    1786:	0005                	c.nop	1
    1788:	0200                	addi	s0,sp,256
    178a:	3000                	fld	fs0,32(s0)
{
    178c:	fc9f 0005 7c00      	0x7c000005fc9f
    1792:	0006                	c.slli	zero,0x1
    1794:	0100                	addi	s0,sp,128
    1796:	6800                	flw	fs0,16(s0)
    1798:	067c                	addi	a5,sp,780
    179a:	0000                	unimp
    179c:	0694                	addi	a3,sp,832
    179e:	0000                	unimp
    17a0:	0001                	nop
    17a2:	005f 0000 0000      	0x5f
        C[i] = 0;
    17a8:	0000                	unimp
    17aa:	fc00                	fsw	fs0,56(s0)
    17ac:	0005                	c.nop	1
    17ae:	2000                	fld	fs0,0(s0)
        for (j = 0; j < N; j++)
    17b0:	0006                	c.slli	zero,0x1
    17b2:	0200                	addi	s0,sp,256
    17b4:	3000                	fld	fs0,32(s0)
    17b6:	209f 0006 6400      	0x64000006209f
        C[i] = 0;
    17bc:	0006                	c.slli	zero,0x1
    17be:	0100                	addi	s0,sp,128
            C[i] += (MATRES)A[i * N + j] * (MATRES)B[j];
    17c0:	6400                	flw	fs0,8(s0)
    17c2:	0664                	addi	s1,sp,780
    17c4:	0000                	unimp
    17c6:	067c                	addi	a5,sp,780
        for (j = 0; j < N; j++)
    17c8:	0000                	unimp
    17ca:	0001                	nop
    17cc:	7c5f 0006 9400      	0x940000067c5f
            C[i] += (MATRES)A[i * N + j] * (MATRES)B[j];
    17d2:	0006                	c.slli	zero,0x1
    17d4:	0300                	addi	s0,sp,384
    17d6:	8400                	0x8400
        for (j = 0; j < N; j++)
    17d8:	9f01                	0x9f01
	...
    for (i = 0; i < N; i++)
    17e2:	0620                	addi	s0,sp,776
    17e4:	0000                	unimp
    17e6:	062c                	addi	a1,sp,776
    17e8:	0000                	unimp
    17ea:	0002                	c.slli64	zero
}
    17ec:	9f30                	0x9f30
	...
    17f6:	0640                	addi	s0,sp,772
    17f8:	0000                	unimp
    17fa:	0650                	addi	a2,sp,772
    17fc:	0000                	unimp
    17fe:	0001                	nop
    1800:	005a                	c.slli	zero,0x16
    1802:	0000                	unimp
    1804:	0000                	unimp
    1806:	0000                	unimp
    1808:	7400                	flw	fs0,40(s0)
    180a:	0004                	0x4
    180c:	d800                	sw	s0,48(s0)
    180e:	0004                	0x4
    1810:	0100                	addi	s0,sp,128
    1812:	5a00                	lw	s0,48(a2)
    1814:	04d8                	addi	a4,sp,580
    1816:	0000                	unimp
    1818:	055c                	addi	a5,sp,644
    181a:	0000                	unimp
    181c:	0001                	nop
    181e:	5c66                	lw	s8,120(sp)
    1820:	0005                	c.nop	1
    1822:	9800                	0x9800
{
    1824:	0005                	c.nop	1
    1826:	0400                	addi	s0,sp,512
    1828:	f300                	fsw	fs0,32(a4)
    182a:	5a01                	li	s4,-32
    182c:	009f 0000 0000      	0x9f
    1832:	0000                	unimp
    1834:	7400                	flw	fs0,40(s0)
    1836:	0004                	0x4
    1838:	d800                	sw	s0,48(s0)
    183a:	0004                	0x4
    183c:	0100                	addi	s0,sp,128
    183e:	5b00                	lw	s0,48(a4)
    1840:	04d8                	addi	a4,sp,580
    1842:	0000                	unimp
    1844:	0594                	addi	a3,sp,704
    1846:	0000                	unimp
    1848:	b8910003          	lb	zero,-1143(sp) # 13188d <RAM_SIZE+0x12188d>
    184c:	947f                	0x947f
    184e:	0005                	c.nop	1
    1850:	9800                	0x9800
    1852:	0005                	c.nop	1
    1854:	0300                	addi	s0,sp,384
    1856:	7200                	flw	fs0,32(a2)
    1858:	7fb8                	flw	fa4,120(a5)
	...
    1862:	0474                	addi	a3,sp,524
    for (i = 0; i < N; i++)
    1864:	0000                	unimp
    1866:	04d8                	addi	a4,sp,580
    1868:	0000                	unimp
    186a:	0001                	nop
            C[i * N + j] = 0;
    186c:	d85c                	sw	a5,52(s0)
    186e:	0004                	0x4
    1870:	9800                	0x9800
    1872:	0005                	c.nop	1
    1874:	0400                	addi	s0,sp,512
    1876:	f300                	fsw	fs0,32(a4)
    1878:	5c01                	li	s8,-32
    187a:	009f 0000 0000      	0x9f
    1880:	0000                	unimp
    1882:	7400                	flw	fs0,40(s0)
    for (i = 0; i < N; i++)
    1884:	0004                	0x4
    1886:	d800                	sw	s0,48(s0)
        for (j = 0; j < N; j++)
    1888:	0004                	0x4
    188a:	0100                	addi	s0,sp,128
            C[i * N + j] = 0;
    188c:	5d00                	lw	s0,56(a0)
    188e:	04d8                	addi	a4,sp,580
    1890:	0000                	unimp
    1892:	0594                	addi	a3,sp,704
    1894:	0000                	unimp
    1896:	bc910003          	lb	zero,-1079(sp)
    189a:	947f                	0x947f
    189c:	0005                	c.nop	1
    189e:	9800                	0x9800
    18a0:	0005                	c.nop	1
    18a2:	0300                	addi	s0,sp,384
    18a4:	7200                	flw	fs0,32(a2)
    18a6:	7fbc                	flw	fa5,120(a5)
	...
            for (k = 0; k < N; k++)
    18b0:	0474                	addi	a3,sp,524
    18b2:	0000                	unimp
    18b4:	04d8                	addi	a4,sp,580
    18b6:	0000                	unimp
                C[i * N + j] += (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
    18b8:	0002                	c.slli64	zero
    18ba:	9f30                	0x9f30
    18bc:	04d8                	addi	a4,sp,580
    18be:	0000                	unimp
            for (k = 0; k < N; k++)
    18c0:	0544                	addi	s1,sp,644
    18c2:	0000                	unimp
    18c4:	0001                	nop
    18c6:	4468                	lw	a0,76(s0)
                C[i * N + j] += (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
    18c8:	0005                	c.nop	1
    18ca:	5c00                	lw	s0,56(s0)
    18cc:	0005                	c.nop	1
    18ce:	0100                	addi	s0,sp,128
            for (k = 0; k < N; k++)
    18d0:	5f00                	lw	s0,56(a4)
	...
        for (j = 0; j < N; j++)
    18da:	04d8                	addi	a4,sp,580
    18dc:	0000                	unimp
    18de:	04fc                	addi	a5,sp,588
    18e0:	0000                	unimp
    18e2:	0002                	c.slli64	zero
    18e4:	9f30                	0x9f30
    18e6:	04fc                	addi	a5,sp,588
    18e8:	0000                	unimp
    18ea:	052c                	addi	a1,sp,648
    18ec:	0000                	unimp
    18ee:	0001                	nop
    for (i = 0; i < N; i++)
    18f0:	2c64                	fld	fs1,216(s0)
    18f2:	0005                	c.nop	1
    18f4:	4400                	lw	s0,8(s0)
    18f6:	0005                	c.nop	1
    18f8:	0100                	addi	s0,sp,128
    18fa:	5f00                	lw	s0,56(a4)
    18fc:	0544                	addi	s1,sp,644
    18fe:	0000                	unimp
    1900:	055c                	addi	a5,sp,644
    1902:	0000                	unimp
    1904:	01840003          	lb	zero,24(s0)
    1908:	009f 0000 0000      	0x9f
}
    190e:	0000                	unimp
    1910:	fc00                	fsw	fs0,56(s0)
    1912:	0004                	0x4
    1914:	0800                	addi	s0,sp,16
    1916:	0005                	c.nop	1
    1918:	0200                	addi	s0,sp,256
    191a:	3000                	fld	fs0,32(s0)
    191c:	009f 0000 0000      	0x9f
    1922:	0000                	unimp
    1924:	9800                	0x9800
    1926:	d8000003          	lb	zero,-640(zero) # fffffd80 <RAM_SIZE+0xfffefd80>
    192a:	01000003          	lb	zero,16(zero) # 10 <_start>
    192e:	5a00                	lw	s0,48(a2)
    1930:	03d8                	addi	a4,sp,452
    1932:	0000                	unimp
    1934:	0458                	addi	a4,sp,516
    1936:	0000                	unimp
    1938:	0001                	nop
    193a:	5865                	li	a6,-7
    193c:	0004                	0x4
    193e:	7000                	flw	fs0,32(s0)
    1940:	0004                	0x4
    1942:	0400                	addi	s0,sp,512
    1944:	f300                	fsw	fs0,32(a4)
    1946:	5a01                	li	s4,-32
{
    1948:	709f 0004 7400      	0x74000004709f
    194e:	0004                	0x4
    1950:	0100                	addi	s0,sp,128
    1952:	5a00                	lw	s0,48(a2)
	...
    195c:	0398                	addi	a4,sp,448
    195e:	0000                	unimp
    1960:	03d0                	addi	a2,sp,452
    1962:	0000                	unimp
    1964:	0001                	nop
    1966:	0003d05b          	0x3d05b
    196a:	0000                	unimp
    196c:	0004                	0x4
    196e:	0100                	addi	s0,sp,128
    1970:	6400                	flw	fs0,8(s0)
    1972:	0400                	addi	s0,sp,512
    1974:	0000                	unimp
    1976:	0470                	addi	a2,sp,524
    1978:	0000                	unimp
    197a:	0004                	0x4
    197c:	9f5b01f3          	0x9f5b01f3
    1980:	0470                	addi	a2,sp,524
    1982:	0000                	unimp
    1984:	0474                	addi	a3,sp,524
    1986:	0000                	unimp
    for (i = 0; i < N; i++)
    1988:	0001                	nop
    198a:	0000005b          	0x5b
    198e:	0000                	unimp
            C[i * N + j] = 0;
    1990:	0000                	unimp
    1992:	9800                	0x9800
    1994:	d4000003          	lb	zero,-704(zero) # fffffd40 <RAM_SIZE+0xfffefd40>
    1998:	01000003          	lb	zero,16(zero) # 10 <_start>
    199c:	5c00                	lw	s0,56(s0)
    199e:	03d4                	addi	a3,sp,452
    19a0:	0000                	unimp
    19a2:	0464                	addi	s1,sp,524
    19a4:	0000                	unimp
    19a6:	0001                	nop
    for (i = 0; i < N; i++)
    19a8:	6468                	flw	fa0,76(s0)
    19aa:	0004                	0x4
        for (j = 0; j < N; j++)
    19ac:	7000                	flw	fs0,32(s0)
    19ae:	0004                	0x4
            C[i * N + j] = 0;
    19b0:	0400                	addi	s0,sp,512
    19b2:	f300                	fsw	fs0,32(a4)
    19b4:	5c01                	li	s8,-32
    19b6:	709f 0004 7400      	0x74000004709f
    19bc:	0004                	0x4
    19be:	0100                	addi	s0,sp,128
    19c0:	5c00                	lw	s0,56(s0)
	...
    19ca:	0398                	addi	a4,sp,448
        for (j = 0; j < N; j++)
    19cc:	0000                	unimp
    19ce:	000003f7          	0x3f7
            for (k = 0; k < N; k++)
    19d2:	0001                	nop
    19d4:	f75d                	bnez	a4,1982 <matrix_mul_matrix_bitextract+0x3a>
    19d6:	5c000003          	lb	zero,1472(zero) # 5c0 <core_bench_list+0x9c>
    19da:	0004                	0x4
                MATRES tmp = (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
    19dc:	0100                	addi	s0,sp,128
    19de:	6600                	flw	fs0,8(a2)
    19e0:	045c                	addi	a5,sp,516
    19e2:	0000                	unimp
            for (k = 0; k < N; k++)
    19e4:	0470                	addi	a2,sp,524
    19e6:	0000                	unimp
    19e8:	0004                	0x4
    19ea:	9f5d01f3          	0x9f5d01f3
                MATRES tmp = (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
    19ee:	0470                	addi	a2,sp,524
                C[i * N + j] += bit_extract(tmp, 2, 4) * bit_extract(tmp, 5, 7);
    19f0:	0000                	unimp
    19f2:	0474                	addi	a3,sp,524
    19f4:	0000                	unimp
    19f6:	0001                	nop
    19f8:	005d                	c.nop	23
    19fa:	0000                	unimp
    19fc:	0000                	unimp
    19fe:	0000                	unimp
    1a00:	9800                	0x9800
    1a02:	00000003          	lb	zero,0(zero) # 0 <RAM_START_ADDRESS>
    1a06:	0004                	0x4
            for (k = 0; k < N; k++)
    1a08:	0200                	addi	s0,sp,256
    1a0a:	3000                	fld	fs0,32(s0)
    1a0c:	709f 0004 7400      	0x74000004709f
        for (j = 0; j < N; j++)
    1a12:	0004                	0x4
    1a14:	0200                	addi	s0,sp,256
    1a16:	3000                	fld	fs0,32(s0)
    1a18:	009f 0000 0000      	0x9f
    1a1e:	0000                	unimp
    1a20:	0000                	unimp
    1a22:	0004                	0x4
    1a24:	1000                	addi	s0,sp,32
    1a26:	0004                	0x4
    for (i = 0; i < N; i++)
    1a28:	0200                	addi	s0,sp,256
    1a2a:	3000                	fld	fs0,32(s0)
    1a2c:	009f 0000 0000      	0x9f
    1a32:	0000                	unimp
    1a34:	0000                	unimp
    1a36:	0000                	unimp
    1a38:	6400                	flw	fs0,8(s0)
    1a3a:	0000                	unimp
    1a3c:	0100                	addi	s0,sp,128
    1a3e:	5a00                	lw	s0,48(a2)
    1a40:	0064                	addi	s1,sp,12
    1a42:	0000                	unimp
}
    1a44:	00bc                	addi	a5,sp,72
    1a46:	0000                	unimp
    1a48:	0001                	nop
    1a4a:	bc62                	fsd	fs8,56(sp)
    1a4c:	0000                	unimp
    1a4e:	bc00                	fsd	fs0,56(s0)
    1a50:	0001                	nop
    1a52:	0400                	addi	s0,sp,512
    1a54:	f300                	fsw	fs0,32(a4)
    1a56:	5a01                	li	s4,-32
    1a58:	bc9f 0001 d800      	0xd8000001bc9f
    1a5e:	0001                	nop
    1a60:	0100                	addi	s0,sp,128
    1a62:	5a00                	lw	s0,48(a2)
	...
    1a70:	0050                	addi	a2,sp,4
    1a72:	0000                	unimp
    1a74:	0001                	nop
    1a76:	0000505b          	0x505b
    1a7a:	6400                	flw	fs0,8(s0)
    1a7c:	0000                	unimp
    1a7e:	0300                	addi	s0,sp,384
{
    1a80:	7b00                	flw	fs0,48(a4)
    1a82:	9f01                	0x9f01
    1a84:	0064                	addi	s1,sp,12
    1a86:	0000                	unimp
    1a88:	01d8                	addi	a4,sp,196
    1a8a:	0000                	unimp
    MATDAT clipval = matrix_big(val);
    1a8c:	0004                	0x4
    1a8e:	9f5b01f3          	0x9f5b01f3
	...
{
    1a9e:	004c                	addi	a1,sp,4
    1aa0:	0000                	unimp
    1aa2:	0001                	nop
    1aa4:	4c5c                	lw	a5,28(s0)
    1aa6:	0000                	unimp
    1aa8:	4c00                	lw	s0,24(s0)
    1aaa:	0001                	nop
    1aac:	0100                	addi	s0,sp,128
    1aae:	6b00                	flw	fs0,16(a4)
    1ab0:	01bc                	addi	a5,sp,200
    1ab2:	0000                	unimp
    1ab4:	01d8                	addi	a4,sp,196
    1ab6:	0000                	unimp
    1ab8:	0001                	nop
    1aba:	0000006b          	0x6b
	...
    1ac6:	6400                	flw	fs0,8(s0)
    MATDAT clipval = matrix_big(val);
    1ac8:	0000                	unimp
    1aca:	0100                	addi	s0,sp,128
    for (i = 0; i < N; i++)
    1acc:	5d00                	lw	s0,56(a0)
    1ace:	0064                	addi	s1,sp,12
    1ad0:	0000                	unimp
    1ad2:	01b8                	addi	a4,sp,200
    1ad4:	0000                	unimp
    1ad6:	bc910003          	lb	zero,-1079(sp)
    1ada:	b87f                	0xb87f
    1adc:	0001                	nop
    1ade:	bc00                	fsd	fs0,56(s0)
            A[i * N + j] += val;
    1ae0:	0001                	nop
    1ae2:	0300                	addi	s0,sp,384
    1ae4:	7200                	flw	fs0,32(a2)
    1ae6:	7fbc                	flw	fa5,120(a5)
    1ae8:	01bc                	addi	a5,sp,200
    1aea:	0000                	unimp
    1aec:	01d8                	addi	a4,sp,196
    1aee:	0000                	unimp
    1af0:	0001                	nop
    1af2:	005d                	c.nop	23
    1af4:	0000                	unimp
    1af6:	0000                	unimp
    for (i = 0; i < N; i++)
    1af8:	0000                	unimp
    1afa:	4000                	lw	s0,0(s0)
    1afc:	0000                	unimp
    1afe:	8000                	0x8000
        for (j = 0; j < N; j++)
    1b00:	0000                	unimp
    1b02:	0200                	addi	s0,sp,256
    1b04:	3000                	fld	fs0,32(s0)
    1b06:	809f 0000 a400      	0xa4000000809f
            A[i * N + j] += val;
    1b0c:	0000                	unimp
    1b0e:	0100                	addi	s0,sp,128
        for (j = 0; j < N; j++)
    1b10:	5800                	lw	s0,48(s0)
    1b12:	01bc                	addi	a5,sp,200
            A[i * N + j] += val;
    1b14:	0000                	unimp
    1b16:	01d8                	addi	a4,sp,196
    1b18:	0000                	unimp
    1b1a:	ff090003          	lb	zero,-16(s2)
        for (j = 0; j < N; j++)
    1b1e:	009f 0000 0000      	0x9f
    for (i = 0; i < N; i++)
    1b24:	0000                	unimp
    1b26:	8000                	0x8000
    1b28:	0000                	unimp
    1b2a:	a400                	fsd	fs0,8(s0)
    1b2c:	0000                	unimp
    1b2e:	0b00                	addi	s0,sp,400
    1b30:	f300                	fsw	fs0,32(a4)
    1b32:	5b01                	li	s6,-32
            C[i * N + j] = (MATRES)A[i * N + j] * (MATRES)val;
    1b34:	1c31                	addi	s8,s8,-20
    1b36:	fc09                	bnez	s0,1a50 <matrix_mul_matrix_bitextract+0x108>
    1b38:	231a                	fld	ft6,384(sp)
    1b3a:	9f04                	0x9f04
        for (j = 0; j < N; j++)
    1b3c:	01bc                	addi	a5,sp,200
    1b3e:	0000                	unimp
    1b40:	01d8                	addi	a4,sp,196
    1b42:	0000                	unimp
    1b44:	01f3000b          	0x1f3000b
    1b48:	091c315b          	0x91c315b
    1b4c:	1afc                	addi	a5,sp,380
    1b4e:	009f0423          	sb	s1,8(t5) # 1b008 <RAM_SIZE+0xb008>
            C[i * N + j] = (MATRES)A[i * N + j] * (MATRES)val;
    1b52:	0000                	unimp
    1b54:	0000                	unimp
    1b56:	0000                	unimp
        for (j = 0; j < N; j++)
    1b58:	a000                	fsd	fs0,0(s0)
    1b5a:	0000                	unimp
            C[i * N + j] = (MATRES)A[i * N + j] * (MATRES)val;
    1b5c:	4c00                	lw	s0,24(s0)
    1b5e:	0001                	nop
    1b60:	0100                	addi	s0,sp,128
    1b62:	6600                	flw	fs0,8(a2)
        for (j = 0; j < N; j++)
    1b64:	01cc                	addi	a1,sp,196
    1b66:	0000                	unimp
    1b68:	01d8                	addi	a4,sp,196
    1b6a:	0000                	unimp
    for (i = 0; i < N; i++)
    1b6c:	0001                	nop
    1b6e:	0066                	c.slli	zero,0x19
    1b70:	0000                	unimp
    1b72:	0000                	unimp
    1b74:	0000                	unimp
    1b76:	4000                	lw	s0,0(s0)
    1b78:	0000                	unimp
    1b7a:	c400                	sw	s0,8(s0)
    1b7c:	0000                	unimp
    1b7e:	0200                	addi	s0,sp,256
    1b80:	3100                	fld	fs0,32(a0)
    1b82:	c49f 0000 d400      	0xd4000000c49f
    1b88:	0000                	unimp
    1b8a:	0100                	addi	s0,sp,128
    1b8c:	6300                	flw	fs0,0(a4)
    1b8e:	00d4                	addi	a3,sp,68
    1b90:	0000                	unimp
    1b92:	0144                	addi	s1,sp,132
            if (tmp > clipval)
    1b94:	0000                	unimp
    1b96:	0001                	nop
    1b98:	446a                	lw	s0,152(sp)
    1b9a:	0001                	nop
    1b9c:	4c00                	lw	s0,24(s0)
    1b9e:	0001                	nop
    1ba0:	0100                	addi	s0,sp,128
    1ba2:	6300                	flw	fs0,0(a4)
    1ba4:	01bc                	addi	a5,sp,200
    1ba6:	0000                	unimp
    for (i = 0; i < N; i++)
    1ba8:	01d8                	addi	a4,sp,196
    1baa:	0000                	unimp
        for (j = 0; j < N; j++)
    1bac:	0002                	c.slli64	zero
    1bae:	9f31                	0x9f31
	...
                ret += 10;
    1bb8:	0108                	addi	a0,sp,128
    1bba:	0000                	unimp
        for (j = 0; j < N; j++)
    1bbc:	0110                	addi	a2,sp,128
    1bbe:	0000                	unimp
                ret += 10;
    1bc0:	0001                	nop
    1bc2:	105e                	c.slli	zero,0x37
                tmp = 0;
    1bc4:	0001                	nop
    1bc6:	1400                	addi	s0,sp,544
        for (j = 0; j < N; j++)
    1bc8:	0001                	nop
    1bca:	0600                	addi	s0,sp,768
                ret += (cur > prev) ? 1 : 0;
    1bcc:	7f00                	flw	fs0,56(a4)
    1bce:	0800                	addi	s0,sp,16
            cur = C[i * N + j];
    1bd0:	1aff                	0x1aff
    1bd2:	149f 0001 1800      	0x18000001149f
                ret += 10;
    1bd8:	0001                	nop
    1bda:	0d00                	addi	s0,sp,656
                ret += (cur > prev) ? 1 : 0;
    1bdc:	8a00                	0x8a00
    1bde:	4000                	lw	s0,0(s0)
            tmp += cur;
    1be0:	4024                	lw	s1,64(s0)
    1be2:	7e25                	lui	t3,0xfffe9
                ret += 10;
    1be4:	2200                	fld	fs0,0(a2)
    1be6:	ff08                	fsw	fa0,56(a4)
                ret += (cur > prev) ? 1 : 0;
    1be8:	9f1a                	add	t5,t5,t1
    1bea:	0118                	addi	a4,sp,128
            if (tmp > clipval)
    1bec:	0000                	unimp
    1bee:	0124                	addi	s1,sp,136
                ret += (cur > prev) ? 1 : 0;
    1bf0:	0000                	unimp
    1bf2:	0018                	0x18
        for (j = 0; j < N; j++)
    1bf4:	008a                	slli	ra,ra,0x2
    1bf6:	2440                	fld	fs0,136(s0)
                ret += (cur > prev) ? 1 : 0;
    1bf8:	2540                	fld	fs0,136(a0)
    1bfa:	4022008b          	0x4022008b
        for (j = 0; j < N; j++)
    1bfe:	4024                	lw	s1,64(s0)
    for (i = 0; i < N; i++)
    1c00:	8a25                	andi	a2,a2,9
    1c02:	4000                	lw	s0,0(s0)
    1c04:	4024                	lw	s1,64(s0)
    1c06:	2225                	jal	1d2e <matrix_test+0x2ae>
    1c08:	ff08                	fsw	fa0,56(a4)
    1c0a:	9f1a                	add	t5,t5,t1
    1c0c:	0124                	addi	s1,sp,136
    1c0e:	0000                	unimp
    1c10:	014c                	addi	a1,sp,132
    1c12:	0000                	unimp
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1c14:	0018                	0x18
    1c16:	7f8a                	flw	ft11,160(sp)
    1c18:	2440                	fld	fs0,136(s0)
    1c1a:	2540                	fld	fs0,136(a0)
    matrix_mul_vect(N, C, A, B);
    1c1c:	4022008b          	0x4022008b
    1c20:	4024                	lw	s1,64(s0)
    1c22:	8a25                	andi	a2,a2,9
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1c24:	407f                	0x407f
    1c26:	4024                	lw	s1,64(s0)
    matrix_mul_vect(N, C, A, B);
    1c28:	2225                	jal	1d50 <matrix_test+0x2d0>
    1c2a:	ff08                	fsw	fa0,56(a4)
    1c2c:	9f1a                	add	t5,t5,t1
	...
    1c36:	0040                	addi	s0,sp,4
    1c38:	0000                	unimp
    1c3a:	0064                	addi	s1,sp,12
    1c3c:	0000                	unimp
    1c3e:	0002                	c.slli64	zero
    1c40:	9f30                	0x9f30
    1c42:	0064                	addi	s1,sp,12
        for (j = 0; j < N; j++)
    1c44:	0000                	unimp
    1c46:	00a0                	addi	s0,sp,72
    1c48:	0000                	unimp
    1c4a:	0001                	nop
    1c4c:	a059                	j	1cd2 <matrix_test+0x252>
    1c4e:	0000                	unimp
                ret += 10;
    1c50:	c400                	sw	s0,8(s0)
    1c52:	0000                	unimp
        for (j = 0; j < N; j++)
    1c54:	0200                	addi	s0,sp,256
    1c56:	3000                	fld	fs0,32(s0)
                ret += 10;
    1c58:	c49f 0000 4000      	0x40000000c49f
                tmp = 0;
    1c5e:	0001                	nop
        for (j = 0; j < N; j++)
    1c60:	0100                	addi	s0,sp,128
    1c62:	6400                	flw	fs0,8(s0)
                ret += (cur > prev) ? 1 : 0;
    1c64:	0140                	addi	s0,sp,132
    1c66:	0000                	unimp
            cur = C[i * N + j];
    1c68:	0144                	addi	s1,sp,132
    1c6a:	0000                	unimp
                ret += 10;
    1c6c:	7f840003          	lb	zero,2040(s0)
    1c70:	449f 0001 4c00      	0x4c000001449f
                ret += (cur > prev) ? 1 : 0;
    1c76:	0001                	nop
            tmp += cur;
    1c78:	0100                	addi	s0,sp,128
    1c7a:	6400                	flw	fs0,8(s0)
                ret += 10;
    1c7c:	01bc                	addi	a5,sp,200
    1c7e:	0000                	unimp
                ret += (cur > prev) ? 1 : 0;
    1c80:	01d8                	addi	a4,sp,196
    1c82:	0000                	unimp
            if (tmp > clipval)
    1c84:	0002                	c.slli64	zero
    1c86:	9f30                	0x9f30
	...
                ret += (cur > prev) ? 1 : 0;
    1c90:	0040                	addi	s0,sp,4
    1c92:	0000                	unimp
        for (j = 0; j < N; j++)
    1c94:	006c                	addi	a1,sp,12
    1c96:	0000                	unimp
    for (i = 0; i < N; i++)
    1c98:	0002                	c.slli64	zero
    1c9a:	9f30                	0x9f30
    1c9c:	006c                	addi	a1,sp,12
    1c9e:	0000                	unimp
    1ca0:	00a4                	addi	s1,sp,72
    1ca2:	0000                	unimp
    1ca4:	0008                	0x8
    1ca6:	0079                	c.nop	30
    1ca8:	0079                	c.nop	30
    1caa:	331e                	fld	ft6,480(sp)
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1cac:	9f24                	0x9f24
    1cae:	00c4                	addi	s1,sp,68
    1cb0:	0000                	unimp
    1cb2:	00d4                	addi	a3,sp,68
    matrix_mul_matrix(N, C, A, B);
    1cb4:	0000                	unimp
    1cb6:	0002                	c.slli64	zero
    1cb8:	9f30                	0x9f30
    1cba:	00d4                	addi	a3,sp,68
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1cbc:	0000                	unimp
    1cbe:	0120                	addi	s0,sp,136
    matrix_mul_matrix(N, C, A, B);
    1cc0:	0000                	unimp
    1cc2:	0001                	nop
    1cc4:	00012067          	0x12067
    1cc8:	2400                	fld	fs0,8(s0)
    1cca:	0001                	nop
    1ccc:	0300                	addi	s0,sp,384
    1cce:	8700                	0x8700
    1cd0:	9f7f                	0x9f7f
    1cd2:	0124                	addi	s1,sp,136
    1cd4:	0000                	unimp
    1cd6:	014c                	addi	a1,sp,132
    1cd8:	0000                	unimp
    1cda:	0001                	nop
    1cdc:	0001bc67          	0x1bc67
        for (j = 0; j < N; j++)
    1ce0:	d800                	sw	s0,48(s0)
    1ce2:	0001                	nop
    1ce4:	0200                	addi	s0,sp,256
    1ce6:	3000                	fld	fs0,32(s0)
    1ce8:	009f 0000 0000      	0x9f
    1cee:	0000                	unimp
                ret += 10;
    1cf0:	d000                	sw	s0,32(s0)
    1cf2:	0006                	c.slli	zero,0x1
        for (j = 0; j < N; j++)
    1cf4:	8c00                	0x8c00
    1cf6:	01000007          	vle8ff.v	v0,(zero),v0.t
                ret += 10;
    1cfa:	5a00                	lw	s0,48(a2)
                tmp = 0;
    1cfc:	078c                	addi	a1,sp,960
    1cfe:	0000                	unimp
        for (j = 0; j < N; j++)
    1d00:	0ac8                	addi	a0,sp,340
    1d02:	0000                	unimp
    1d04:	0004                	0x4
    1d06:	9f5a01f3          	0x9f5a01f3
                ret += (cur > prev) ? 1 : 0;
    1d0a:	0ac8                	addi	a0,sp,340
            cur = C[i * N + j];
    1d0c:	0000                	unimp
    1d0e:	00000acf          	fnmadd.s	fs5,ft0,ft0,ft0,rne
                ret += 10;
    1d12:	0001                	nop
    1d14:	cf5a                	sw	s6,156(sp)
    1d16:	000a                	c.slli	zero,0x2
                ret += (cur > prev) ? 1 : 0;
    1d18:	4800                	lw	s0,16(s0)
    1d1a:	0400000b          	0x400000b
            tmp += cur;
    1d1e:	f300                	fsw	fs0,32(a4)
                ret += 10;
    1d20:	5a01                	li	s4,-32
    1d22:	009f 0000 0000      	0x9f
            if (tmp > clipval)
    1d28:	0000                	unimp
    1d2a:	d000                	sw	s0,32(s0)
                ret += (cur > prev) ? 1 : 0;
    1d2c:	0006                	c.slli	zero,0x1
    1d2e:	8c00                	0x8c00
        for (j = 0; j < N; j++)
    1d30:	01000007          	vle8ff.v	v0,(zero),v0.t
                ret += (cur > prev) ? 1 : 0;
    1d34:	5b00                	lw	s0,48(a4)
    1d36:	078c                	addi	a1,sp,960
        for (j = 0; j < N; j++)
    1d38:	0000                	unimp
    1d3a:	0a94                	addi	a3,sp,336
    1d3c:	0000                	unimp
    1d3e:	0001                	nop
    for (i = 0; i < N; i++)
    1d40:	9459                	srai	s0,s0,0x36
    1d42:	000a                	c.slli	zero,0x2
    1d44:	c800                	sw	s0,16(s0)
    1d46:	000a                	c.slli	zero,0x2
    1d48:	0400                	addi	s0,sp,512
    1d4a:	f300                	fsw	fs0,32(a4)
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1d4c:	5b01                	li	s6,-32
    1d4e:	c89f 000a 4800      	0x4800000ac89f
    matrix_mul_matrix_bitextract(N, C, A, B);
    1d54:	0100000b          	0x100000b
    1d58:	5900                	lw	s0,48(a0)
	...
    1d62:	06d0                	addi	a2,sp,836
    1d64:	0000                	unimp
    1d66:	0748                	addi	a0,sp,900
    1d68:	0000                	unimp
    1d6a:	0001                	nop
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1d6c:	485c                	lw	a5,20(s0)
    1d6e:	c4000007          	vluxseg7ei8.v	v0,(zero),v0,v0.t
    matrix_mul_matrix_bitextract(N, C, A, B);
    1d72:	000a                	c.slli	zero,0x2
    1d74:	0300                	addi	s0,sp,384
    1d76:	9100                	0x9100
    1d78:	7fb8                	flw	fa4,120(a5)
    1d7a:	0ac4                	addi	s1,sp,340
    1d7c:	0000                	unimp
    1d7e:	0ac8                	addi	a0,sp,340
    1d80:	0000                	unimp
    1d82:	b8720003          	lb	zero,-1145(tp) # fffffb87 <RAM_SIZE+0xfffefb87>
        for (j = 0; j < N; j++)
    1d86:	c87f                	0xc87f
    1d88:	000a                	c.slli	zero,0x2
    1d8a:	cf00                	sw	s0,24(a4)
    1d8c:	000a                	c.slli	zero,0x2
    1d8e:	0100                	addi	s0,sp,128
    1d90:	5c00                	lw	s0,56(s0)
    1d92:	00000acf          	fnmadd.s	fs5,ft0,ft0,ft0,rne
                ret += 10;
    1d96:	0b48                	addi	a0,sp,404
        for (j = 0; j < N; j++)
    1d98:	0000                	unimp
    1d9a:	b8910003          	lb	zero,-1143(sp)
                ret += 10;
    1d9e:	007f                	0x7f
                tmp = 0;
    1da0:	0000                	unimp
    1da2:	0000                	unimp
        for (j = 0; j < N; j++)
    1da4:	0000                	unimp
    1da6:	d000                	sw	s0,32(s0)
    1da8:	0006                	c.slli	zero,0x1
    1daa:	5000                	lw	s0,32(s0)
                ret += (cur > prev) ? 1 : 0;
    1dac:	01000007          	vle8ff.v	v0,(zero),v0.t
            cur = C[i * N + j];
    1db0:	5d00                	lw	s0,56(a0)
    1db2:	0750                	addi	a2,sp,900
                ret += 10;
    1db4:	0000                	unimp
    1db6:	0ac4                	addi	s1,sp,340
    1db8:	0000                	unimp
    1dba:	bc910003          	lb	zero,-1079(sp)
                ret += (cur > prev) ? 1 : 0;
    1dbe:	c47f                	0xc47f
            tmp += cur;
    1dc0:	000a                	c.slli	zero,0x2
    1dc2:	c800                	sw	s0,16(s0)
                ret += 10;
    1dc4:	000a                	c.slli	zero,0x2
    1dc6:	0300                	addi	s0,sp,384
                ret += (cur > prev) ? 1 : 0;
    1dc8:	7200                	flw	fs0,32(a2)
    1dca:	7fbc                	flw	fa5,120(a5)
            if (tmp > clipval)
    1dcc:	0ac8                	addi	a0,sp,340
    1dce:	0000                	unimp
                ret += (cur > prev) ? 1 : 0;
    1dd0:	00000acf          	fnmadd.s	fs5,ft0,ft0,ft0,rne
        for (j = 0; j < N; j++)
    1dd4:	0001                	nop
    1dd6:	cf5d                	beqz	a4,1e94 <matrix_test+0x414>
                ret += (cur > prev) ? 1 : 0;
    1dd8:	000a                	c.slli	zero,0x2
    1dda:	4800                	lw	s0,16(s0)
        for (j = 0; j < N; j++)
    1ddc:	0300000b          	0x300000b
    1de0:	9100                	0x9100
    1de2:	7fbc                	flw	fa5,120(a5)
	...
    for (i = 0; i < N; i++)
    1dec:	06d0                	addi	a2,sp,836
    1dee:	0000                	unimp
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1df0:	0750                	addi	a2,sp,900
    1df2:	0000                	unimp
    1df4:	0001                	nop
    1df6:	505e                	0x505e
    1df8:	c8000007          	vlsseg7e8.v	v0,(zero),zero,v0.t
    1dfc:	000a                	c.slli	zero,0x2
    1dfe:	0400                	addi	s0,sp,512
        for (j = 0; j < N; j++)
    1e00:	f300                	fsw	fs0,32(a4)
    1e02:	5e01                	li	t3,-32
    1e04:	c89f 000a cf00      	0xcf00000ac89f
    1e0a:	000a                	c.slli	zero,0x2
    1e0c:	0100                	addi	s0,sp,128
    1e0e:	5e00                	lw	s0,56(a2)
            A[i * N + j] += val;
    1e10:	00000acf          	fnmadd.s	fs5,ft0,ft0,ft0,rne
        for (j = 0; j < N; j++)
    1e14:	0b48                	addi	a0,sp,404
    1e16:	0000                	unimp
    1e18:	0004                	0x4
    1e1a:	9f5e01f3          	0x9f5e01f3
	...
    1e26:	0718                	addi	a4,sp,896
    for (i = 0; i < N; i++)
    1e28:	0000                	unimp
    1e2a:	0880                	addi	s0,sp,80
    1e2c:	0000                	unimp
    1e2e:	0002                	c.slli64	zero
    1e30:	9f30                	0x9f30
    1e32:	0880                	addi	s0,sp,80
}
    1e34:	0000                	unimp
    1e36:	0918                	addi	a4,sp,144
    1e38:	0000                	unimp
    1e3a:	0001                	nop
    return crc;
    1e3c:	1869                	addi	a6,a6,-6
    1e3e:	0009                	c.nop	2
}
    1e40:	b000                	fsd	fs0,32(s0)
    1e42:	0009                	c.nop	2
    1e44:	0100                	addi	s0,sp,128
    1e46:	6500                	flw	fs0,8(a0)
    1e48:	09c0                	addi	s0,sp,212
    1e4a:	0000                	unimp
    1e4c:	0a48                	addi	a0,sp,276
    1e4e:	0000                	unimp
    1e50:	0001                	nop
    1e52:	4862                	lw	a6,24(sp)
    1e54:	000a                	c.slli	zero,0x2
    1e56:	9000                	0x9000
    1e58:	000a                	c.slli	zero,0x2
    1e5a:	0100                	addi	s0,sp,128
    1e5c:	5a00                	lw	s0,48(a2)
    1e5e:	0ac8                	addi	a0,sp,340
    1e60:	0000                	unimp
    1e62:	0aec                	addi	a1,sp,348
    1e64:	0000                	unimp
    1e66:	0002                	c.slli64	zero
    1e68:	9f30                	0x9f30
    1e6a:	0aec                	addi	a1,sp,348
    return crc;
    1e6c:	0000                	unimp
    1e6e:	0b08                	addi	a0,sp,400
}
    1e70:	0000                	unimp
    1e72:	0001                	nop
    1e74:	1058                	addi	a4,sp,36
    1e76:	2400000b          	0x2400000b
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1e7a:	0100000b          	0x100000b
    1e7e:	5800                	lw	s0,48(s0)
    matrix_mul_vect(N, C, A, B);
    1e80:	0b34                	addi	a3,sp,408
    1e82:	0000                	unimp
    1e84:	0b44                	addi	s1,sp,404
    1e86:	0000                	unimp
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1e88:	0001                	nop
    1e8a:	4458                	lw	a4,12(s0)
    matrix_mul_vect(N, C, A, B);
    1e8c:	4800000b          	0x4800000b
    1e90:	0100000b          	0x100000b
    1e94:	5a00                	lw	s0,48(a2)
	...
    1e9e:	071c                	addi	a5,sp,896
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1ea0:	0000                	unimp
    1ea2:	0750                	addi	a2,sp,900
    1ea4:	0000                	unimp
    1ea6:	007e0007          	0x7e0007
    1eaa:	21f0000b          	0x21f0000b
    matrix_mul_matrix(N, C, A, B);
    1eae:	509f 0007 c000      	0xc0000007509f
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1eb4:	0009                	c.nop	2
    1eb6:	0700                	addi	s0,sp,896
    matrix_mul_matrix(N, C, A, B);
    1eb8:	8200                	0x8200
    1eba:	0b00                	addi	s0,sp,400
    1ebc:	f000                	fsw	fs0,32(s0)
    1ebe:	9f21                	0x9f21
    1ec0:	0ac8                	addi	a0,sp,340
    1ec2:	0000                	unimp
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1ec4:	00000acf          	fnmadd.s	fs5,ft0,ft0,ft0,rne
    1ec8:	007e0007          	0x7e0007
    1ecc:	21f0000b          	0x21f0000b
    1ed0:	009f 0000 0000      	0x9f
    matrix_mul_matrix_bitextract(N, C, A, B);
    1ed6:	0000                	unimp
    1ed8:	1c00                	addi	s0,sp,560
    1eda:	50000007          	vlseg3e128.v	v0,(zero),v0.t
    1ede:	01000007          	vle8ff.v	v0,(zero),v0.t
    1ee2:	5e00                	lw	s0,56(a2)
    1ee4:	0750                	addi	a2,sp,900
    1ee6:	0000                	unimp
    crc = crc16(matrix_sum(N, C, clipval), crc);
    1ee8:	078c                	addi	a1,sp,960
    1eea:	0000                	unimp
    1eec:	0001                	nop
    1eee:	0062                	c.slli	zero,0x18
    1ef0:	0000                	unimp
    1ef2:	0000                	unimp
    for (i = 0; i < N; i++)
    1ef4:	0000                	unimp
    1ef6:	1c00                	addi	s0,sp,560
{
    1ef8:	48000007          	vlsseg3e8.v	v0,(zero),zero,v0.t
    1efc:	01000007          	vle8ff.v	v0,(zero),v0.t
    crc = crc16(matrix_test(N, C, A, B, val), crc);
    1f00:	5c00                	lw	s0,56(s0)
    1f02:	0748                	addi	a0,sp,900
{
    1f04:	0000                	unimp
    1f06:	078c                	addi	a1,sp,960
    1f08:	0000                	unimp
    1f0a:	b8910003          	lb	zero,-1143(sp)
    crc = crc16(matrix_test(N, C, A, B, val), crc);
    1f0e:	007f                	0x7f
    1f10:	0000                	unimp
    1f12:	0000                	unimp
    1f14:	0000                	unimp
    1f16:	1c00                	addi	s0,sp,560
{
    1f18:	8c000007          	vloxseg5ei8.v	v0,(zero),v0,v0.t
    crc = crc16(matrix_test(N, C, A, B, val), crc);
    1f1c:	01000007          	vle8ff.v	v0,(zero),v0.t
    1f20:	5a00                	lw	s0,48(a2)
	...
}
    1f2a:	071c                	addi	a5,sp,896
    1f2c:	0000                	unimp
    1f2e:	0750                	addi	a2,sp,900
    crc = crc16(matrix_test(N, C, A, B, val), crc);
    1f30:	0000                	unimp
    1f32:	0002                	c.slli64	zero
	return *time_ptr;
    1f34:	9f30                	0x9f30
    1f36:	0750                	addi	a2,sp,900
    1f38:	0000                	unimp
    1f3a:	0774                	addi	a3,sp,908
    1f3c:	0000                	unimp
    1f3e:	0001                	nop
    1f40:	7466                	flw	fs0,120(sp)
    1f42:	8c000007          	vloxseg5ei8.v	v0,(zero),v0,v0.t
    1f46:	01000007          	vle8ff.v	v0,(zero),v0.t
    1f4a:	6300                	flw	fs0,0(a4)
	...
    1f54:	0750                	addi	a2,sp,900
    1f56:	0000                	unimp
    1f58:	075c                	addi	a5,sp,900
    1f5a:	0000                	unimp
}
    1f5c:	0002                	c.slli64	zero
    1f5e:	9f30                	0x9f30
	...
	return *time_ptr;
    1f68:	078c                	addi	a1,sp,960
    1f6a:	0000                	unimp
    1f6c:	07cc                	addi	a1,sp,964
    1f6e:	0000                	unimp
    1f70:	b4910003          	lb	zero,-1207(sp)
    1f74:	cc7f                	0xcc7f
    1f76:	fc000007          	vloxseg8ei128.v	v0,(zero),v0,v0.t
    1f7a:	01000007          	vle8ff.v	v0,(zero),v0.t
    1f7e:	5e00                	lw	s0,56(a2)
	...
    1f88:	078c                	addi	a1,sp,960
    1f8a:	0000                	unimp
    1f8c:	07a0                	addi	s0,sp,968
    1f8e:	0000                	unimp
    GETMYTIME(&start_time_val);
    1f90:	0002                	c.slli64	zero
    1f92:	9f30                	0x9f30
	...
	return *time_ptr;
    1f9c:	07fc                	addi	a5,sp,972
    1f9e:	0000                	unimp
    1fa0:	0814                	addi	a3,sp,16
    1fa2:	0000                	unimp
    1fa4:	0001                	nop
    1fa6:	0008145b          	0x8145b
    1faa:	1800                	addi	s0,sp,48
    1fac:	0008                	0x8
    1fae:	0200                	addi	s0,sp,256
    1fb0:	3000                	fld	fs0,32(s0)
    1fb2:	189f 0008 6400      	0x64000008189f
    1fb8:	0008                	0x8
    1fba:	0100                	addi	s0,sp,128
    1fbc:	5b00                	lw	s0,48(a4)
	...
    GETMYTIME(&stop_time_val);
    1fc6:	07fc                	addi	a5,sp,972
}
    1fc8:	0000                	unimp
    1fca:	0808                	addi	a0,sp,16
    CORE_TICKS elapsed
    1fcc:	0000                	unimp
    1fce:	0001                	nop
    1fd0:	185d                	addi	a6,a6,-9
    1fd2:	0008                	0x8
}
    1fd4:	2400                	fld	fs0,8(s0)
    1fd6:	0008                	0x8
    1fd8:	0100                	addi	s0,sp,128
    1fda:	5d00                	lw	s0,56(a0)
{
    1fdc:	0824                	addi	s1,sp,24
    1fde:	0000                	unimp
    secs_ret retval = ((secs_ret)ticks) / (secs_ret)EE_TICKS_PER_SEC;
    1fe0:	0830                	addi	a2,sp,24
    1fe2:	0000                	unimp
{
    1fe4:	0001                	nop
    1fe6:	4c5c                	lw	a5,28(s0)
    secs_ret retval = ((secs_ret)ticks) / (secs_ret)EE_TICKS_PER_SEC;
    1fe8:	0008                	0x8
    1fea:	6400                	flw	fs0,8(s0)
}
    1fec:	0008                	0x8
    1fee:	0100                	addi	s0,sp,128
    1ff0:	5d00                	lw	s0,56(a0)
	...
    p->portable_id = 1;
    1ffa:	0808                	addi	a0,sp,16
    1ffc:	0000                	unimp
    1ffe:	081c                	addi	a5,sp,16
}
    2000:	0000                	unimp
    2002:	0001                	nop
    p->portable_id = 0;
    2004:	245d                	jal	22aa <core_state_transition+0x156>
    2006:	0008                	0x8
}
    2008:	5400                	lw	s0,40(s0)
    200a:	0008                	0x8
    size--;
    200c:	0100                	addi	s0,sp,128
    200e:	5d00                	lw	s0,56(a0)
	...
    while ((total + next + 1) < size)
    2018:	07fc                	addi	a5,sp,972
    201a:	0000                	unimp
    201c:	0808                	addi	a0,sp,16
    201e:	0000                	unimp
    2020:	0001                	nop
    2022:	145a                	slli	s0,s0,0x36
    2024:	0008                	0x8
    2026:	2800                	fld	fs0,16(s0)
{
    2028:	0008                	0x8
    202a:	0100                	addi	s0,sp,128
    202c:	5a00                	lw	s0,48(a2)
    202e:	084c                	addi	a1,sp,20
                buf  = intpat[(seed >> 3) & 0x3];
    2030:	0000                	unimp
    2032:	0864                	addi	s1,sp,28
{
    2034:	0000                	unimp
    2036:	0001                	nop
        switch (seed & 0x7)
    2038:	005a                	c.slli	zero,0x16
    203a:	0000                	unimp
    203c:	0000                	unimp
    203e:	0000                	unimp
    ee_u32 total = 0, next = 0, i;
    2040:	fc00                	fsw	fs0,56(s0)
    2042:	54000007          	vluxseg3ei128.v	v0,(zero),v0,v0.t
        switch (seed & 0x7)
    2046:	0008                	0x8
    2048:	0100                	addi	s0,sp,128
    204a:	6c00                	flw	fs0,24(s0)
    204c:	0854                	addi	a3,sp,20
    204e:	0000                	unimp
            *(p + total + i) = ',';
    2050:	0864                	addi	s1,sp,28
    2052:	0000                	unimp
                buf  = intpat[(seed >> 3) & 0x3];
    2054:	0001                	nop
    2056:	005e                	c.slli	zero,0x17
        switch (seed & 0x7)
    2058:	0000                	unimp
    205a:	0000                	unimp
    205c:	0000                	unimp
    205e:	fc00                	fsw	fs0,56(s0)
    2060:	08000007          	vlse8.v	v0,(zero),zero,v0.t
    2064:	0008                	0x8
    2066:	0200                	addi	s0,sp,256
                buf  = floatpat[(seed >> 3) & 0x3];
    2068:	3000                	fld	fs0,32(s0)
    206a:	009f 0000 0000      	0x9f
    2070:	0000                	unimp
    2072:	8400                	0x8400
        switch (seed & 0x7)
    2074:	0008                	0x8
    2076:	fc00                	fsw	fs0,56(s0)
                buf  = floatpat[(seed >> 3) & 0x3];
    2078:	0008                	0x8
    207a:	0700                	addi	s0,sp,896
                break;
    207c:	8200                	0x8200
    207e:	0b00                	addi	s0,sp,400
                next = 8;
    2080:	f000                	fsw	fs0,32(s0)
    2082:	9f21                	0x9f21
	...
    while ((total + next + 1) < size)
    208c:	0884                	addi	s1,sp,80
    208e:	0000                	unimp
    2090:	08fc                	addi	a5,sp,92
    2092:	0000                	unimp
    2094:	0001                	nop
    2096:	0059                	c.nop	22
                *(p + total + i) = buf[i];
    2098:	0000                	unimp
    209a:	0000                	unimp
            for (i = 0; i < next; i++)
    209c:	0000                	unimp
    209e:	8400                	0x8400
    20a0:	0008                	0x8
    20a2:	fc00                	fsw	fs0,56(s0)
                *(p + total + i) = buf[i];
    20a4:	0008                	0x8
    20a6:	0100                	addi	s0,sp,128
            for (i = 0; i < next; i++)
    20a8:	6300                	flw	fs0,0(a4)
	...
            *(p + total + i) = ',';
    20b2:	0884                	addi	s1,sp,80
    20b4:	0000                	unimp
    20b6:	0894                	addi	a3,sp,80
    20b8:	0000                	unimp
    20ba:	0002                	c.slli64	zero
    20bc:	9f30                	0x9f30
    20be:	0894                	addi	a3,sp,80
                buf  = intpat[(seed >> 3) & 0x3];
    20c0:	0000                	unimp
    20c2:	08ac                	addi	a1,sp,88
    20c4:	0000                	unimp
    20c6:	0001                	nop
            *(p + total + i) = ',';
    20c8:	ac60                	fsd	fs0,216(s0)
    20ca:	0008                	0x8
                buf  = intpat[(seed >> 3) & 0x3];
    20cc:	b000                	fsd	fs0,32(s0)
    20ce:	0008                	0x8
        switch (seed & 0x7)
    20d0:	0200                	addi	s0,sp,256
    20d2:	3000                	fld	fs0,32(s0)
                buf  = errpat[(seed >> 3) & 0x3];
    20d4:	b09f 0008 fc00      	0xfc000008b09f
                break;
    20da:	0008                	0x8
                buf  = errpat[(seed >> 3) & 0x3];
    20dc:	0100                	addi	s0,sp,128
    20de:	6000                	flw	fs0,0(s0)
	...
                next = 8;
    20e8:	0884                	addi	s1,sp,80
    20ea:	0000                	unimp
    while ((total + next + 1) < size)
    20ec:	0894                	addi	a3,sp,80
    20ee:	0000                	unimp
    while (total < size)
    20f0:	0002                	c.slli64	zero
    20f2:	9f30                	0x9f30
}
    20f4:	0894                	addi	a3,sp,80
    20f6:	0000                	unimp
        *(p + total) = 0;
    20f8:	08a0                	addi	s0,sp,88
    20fa:	0000                	unimp
    20fc:	0001                	nop
    20fe:	b05d                	j	19a4 <matrix_mul_matrix_bitextract+0x5c>
    2100:	0008                	0x8
    2102:	bc00                	fsd	fs0,56(s0)
}
    2104:	0008                	0x8
    2106:	0100                	addi	s0,sp,128
        *(p + total) = 0;
    2108:	5d00                	lw	s0,56(a0)
    210a:	08bc                	addi	a5,sp,88
                buf  = intpat[(seed >> 3) & 0x3];
    210c:	0000                	unimp
    210e:	08c8                	addi	a0,sp,84
                break;
    2110:	0000                	unimp
    2112:	0001                	nop
                next = 4;
    2114:	e45c                	fsw	fa5,12(s0)
    2116:	0008                	0x8
                break;
    2118:	fc00                	fsw	fs0,56(s0)
    211a:	0008                	0x8
                buf  = scipat[(seed >> 3) & 0x3];
    211c:	0100                	addi	s0,sp,128
    211e:	5d00                	lw	s0,56(a0)
	...
                break;
    2128:	08a0                	addi	s0,sp,88
    212a:	0000                	unimp
                next = 8;
    212c:	08b4                	addi	a3,sp,88
    212e:	0000                	unimp
                break;
    2130:	0001                	nop
    2132:	bc5d                	j	1be8 <matrix_test+0x168>
}
    2134:	0008                	0x8
    2136:	ec00                	fsw	fs0,24(s0)
    2138:	0008                	0x8
    213a:	0100                	addi	s0,sp,128
    213c:	5d00                	lw	s0,56(a0)
	...
        *(p + total) = 0;
    2146:	0884                	addi	s1,sp,80
    2148:	0000                	unimp
    214a:	0894                	addi	a3,sp,80
    214c:	0000                	unimp
    214e:	0002                	c.slli64	zero
    2150:	9f30                	0x9f30
    2152:	0894                	addi	a3,sp,80
    ee_u8 *         str = *instr;
    2154:	0000                	unimp
    2156:	08a0                	addi	s0,sp,88
{
    2158:	0000                	unimp
    215a:	0001                	nop
    enum CORE_STATE state = CORE_START;
    215c:	ac5a                	fsd	fs6,24(sp)
    215e:	0008                	0x8
    for (; *str && state != CORE_INVALID; str++)
    2160:	c000                	sw	s0,0(s0)
    2162:	0008                	0x8
    2164:	0100                	addi	s0,sp,128
    2166:	5a00                	lw	s0,48(a2)
    2168:	08e4                	addi	s1,sp,92
    216a:	0000                	unimp
        if (NEXT_SYMBOL == ',') /* end of this input */
    216c:	08fc                	addi	a5,sp,92
    216e:	0000                	unimp
    for (; *str && state != CORE_INVALID; str++)
    2170:	0001                	nop
    2172:	005a                	c.slli	zero,0x16
        if (NEXT_SYMBOL == ',') /* end of this input */
    2174:	0000                	unimp
    2176:	0000                	unimp
                transition_count[CORE_START]++;
    2178:	0000                	unimp
    217a:	8400                	0x8400
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    217c:	0008                	0x8
    217e:	9400                	0x9400
    2180:	0008                	0x8
    2182:	0200                	addi	s0,sp,256
    2184:	3000                	fld	fs0,32(s0)
    2186:	949f 0008 ec00      	0xec000008949f
    218c:	0008                	0x8
    218e:	0100                	addi	s0,sp,128
                transition_count[CORE_START]++;
    2190:	6c00                	flw	fs0,24(s0)
    2192:	08ec                	addi	a1,sp,92
    for (; *str && state != CORE_INVALID; str++)
    2194:	0000                	unimp
    2196:	08fc                	addi	a5,sp,92
    2198:	0000                	unimp
    219a:	0001                	nop
            str++;
    219c:	005e                	c.slli	zero,0x17
    219e:	0000                	unimp
        if (NEXT_SYMBOL == ',') /* end of this input */
    21a0:	0000                	unimp
    21a2:	0000                	unimp
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    21a4:	9400                	0x9400
    21a6:	0008                	0x8
                if (NEXT_SYMBOL == '.')
    21a8:	a000                	fsd	fs0,0(s0)
    21aa:	0008                	0x8
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    21ac:	0200                	addi	s0,sp,256
    21ae:	3000                	fld	fs0,32(s0)
        if (NEXT_SYMBOL == ',') /* end of this input */
    21b0:	009f 0000 0000      	0x9f
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    21b6:	0000                	unimp
                if (NEXT_SYMBOL == '.')
    21b8:	1c00                	addi	s0,sp,560
    21ba:	0009                	c.nop	2
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    21bc:	9c00                	0x9c00
    21be:	0009                	c.nop	2
    for (; *str && state != CORE_INVALID; str++)
    21c0:	0700                	addi	s0,sp,896
    21c2:	8200                	0x8200
    21c4:	0b00                	addi	s0,sp,400
    21c6:	f000                	fsw	fs0,32(s0)
    21c8:	9f21                	0x9f21
	...
        if (NEXT_SYMBOL == ',') /* end of this input */
    21d2:	091c                	addi	a5,sp,144
    for (; *str && state != CORE_INVALID; str++)
    21d4:	0000                	unimp
    21d6:	099c                	addi	a5,sp,208
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    21d8:	0000                	unimp
    21da:	0001                	nop
    21dc:	0059                	c.nop	22
    21de:	0000                	unimp
                if (NEXT_SYMBOL == '.')
    21e0:	0000                	unimp
    21e2:	0000                	unimp
                    transition_count[CORE_INT]++;
    21e4:	1c00                	addi	s0,sp,560
    21e6:	0009                	c.nop	2
                    state = CORE_FLOAT;
    21e8:	9c00                	0x9c00
    21ea:	0009                	c.nop	2
                    transition_count[CORE_INT]++;
    21ec:	0100                	addi	s0,sp,128
    21ee:	6300                	flw	fs0,0(a4)
	...
    for (; *str && state != CORE_INVALID; str++)
    21f8:	091c                	addi	a5,sp,144
    21fa:	0000                	unimp
    21fc:	0930                	addi	a2,sp,152
    21fe:	0000                	unimp
        if (NEXT_SYMBOL == ',') /* end of this input */
    2200:	0002                	c.slli64	zero
    2202:	9f30                	0x9f30
            str++;
    2204:	0930                	addi	a2,sp,152
    2206:	0000                	unimp
        if (NEXT_SYMBOL == ',') /* end of this input */
    2208:	094c                	addi	a1,sp,148
    220a:	0000                	unimp
                if (NEXT_SYMBOL == 'E' || NEXT_SYMBOL == 'e')
    220c:	0001                	nop
    220e:	4c5c                	lw	a5,28(s0)
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    2210:	0009                	c.nop	2
    2212:	5000                	lw	s0,32(s0)
        if (NEXT_SYMBOL == ',') /* end of this input */
    2214:	0009                	c.nop	2
    2216:	0200                	addi	s0,sp,256
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    2218:	3000                	fld	fs0,32(s0)
    221a:	509f 0009 9c00      	0x9c000009509f
    2220:	0009                	c.nop	2
    2222:	0100                	addi	s0,sp,128
                if (NEXT_SYMBOL == 'E' || NEXT_SYMBOL == 'e')
    2224:	5c00                	lw	s0,56(s0)
	...
                    transition_count[CORE_FLOAT]++;
    222e:	091c                	addi	a5,sp,144
    2230:	0000                	unimp
    2232:	0930                	addi	a2,sp,152
                    state = CORE_INVALID;
    2234:	0000                	unimp
    2236:	0002                	c.slli64	zero
                    transition_count[CORE_FLOAT]++;
    2238:	9f30                	0x9f30
    223a:	0930                	addi	a2,sp,152
    223c:	0000                	unimp
    223e:	0940                	addi	s0,sp,148
    *instr = str;
    2240:	0000                	unimp
    2242:	0001                	nop
}
    2244:	505e                	0x505e
    2246:	0009                	c.nop	2
                else if (NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-')
    2248:	6000                	flw	fs0,0(s0)
    224a:	0009                	c.nop	2
    224c:	0100                	addi	s0,sp,128
    224e:	5e00                	lw	s0,56(a2)
    2250:	0960                	addi	s0,sp,156
    2252:	0000                	unimp
    2254:	096c                	addi	a1,sp,156
    2256:	0000                	unimp
                else if (NEXT_SYMBOL == '.')
    2258:	0001                	nop
    225a:	885d                	andi	s0,s0,23
    225c:	0009                	c.nop	2
    225e:	9c00                	0x9c00
                    transition_count[CORE_INVALID]++;
    2260:	0009                	c.nop	2
    2262:	0100                	addi	s0,sp,128
                transition_count[CORE_START]++;
    2264:	5e00                	lw	s0,56(a2)
	...
                    transition_count[CORE_INVALID]++;
    226e:	0940                	addi	s0,sp,148
    2270:	0000                	unimp
    2272:	0958                	addi	a4,sp,148
    *instr = str;
    2274:	0000                	unimp
    2276:	0001                	nop
}
    2278:	605e                	flw	ft0,212(sp)
    227a:	0009                	c.nop	2
                    transition_count[CORE_INT]++;
    227c:	9400                	0x9400
    227e:	0009                	c.nop	2
    2280:	0100                	addi	s0,sp,128
    2282:	5e00                	lw	s0,56(a2)
	...
    228c:	091c                	addi	a5,sp,144
    228e:	0000                	unimp
    *instr = str;
    2290:	0930                	addi	a2,sp,152
    2292:	0000                	unimp
}
    2294:	0002                	c.slli64	zero
    2296:	9f30                	0x9f30
                transition_count[CORE_START]++;
    2298:	0930                	addi	a2,sp,152
    229a:	0000                	unimp
    for (; *str && state != CORE_INVALID; str++)
    229c:	0940                	addi	s0,sp,148
    229e:	0000                	unimp
    22a0:	0001                	nop
    22a2:	4c5a                	lw	s8,148(sp)
            str++;
    22a4:	0009                	c.nop	2
    22a6:	6400                	flw	fs0,8(s0)
        if (NEXT_SYMBOL == ',') /* end of this input */
    22a8:	0009                	c.nop	2
    22aa:	0100                	addi	s0,sp,128
                    transition_count[CORE_S1]++;
    22ac:	5a00                	lw	s0,48(a2)
    22ae:	0988                	addi	a0,sp,208
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    22b0:	0000                	unimp
    22b2:	099c                	addi	a5,sp,208
    22b4:	0000                	unimp
    22b6:	0001                	nop
    22b8:	005a                	c.slli	zero,0x16
    22ba:	0000                	unimp
                    transition_count[CORE_S1]++;
    22bc:	0000                	unimp
    22be:	0000                	unimp
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    22c0:	1c00                	addi	s0,sp,560
    22c2:	0009                	c.nop	2
                else if (NEXT_SYMBOL == '.')
    22c4:	3000                	fld	fs0,32(s0)
    22c6:	0009                	c.nop	2
    22c8:	0200                	addi	s0,sp,256
    22ca:	3000                	fld	fs0,32(s0)
                    transition_count[CORE_S1]++;
    22cc:	309f 0009 9c00      	0x9c000009309f
                    state = CORE_INVALID;
    22d2:	0009                	c.nop	2
    *instr = str;
    22d4:	0100                	addi	s0,sp,128
    22d6:	6c00                	flw	fs0,24(s0)
	...
    for (; *str && state != CORE_INVALID; str++)
    22e0:	0930                	addi	a2,sp,152
    22e2:	0000                	unimp
    22e4:	0940                	addi	s0,sp,148
    22e6:	0000                	unimp
        if (NEXT_SYMBOL == ',') /* end of this input */
    22e8:	0002                	c.slli64	zero
    22ea:	9f30                	0x9f30
            str++;
    22ec:	0940                	addi	s0,sp,148
    22ee:	0000                	unimp
        if (NEXT_SYMBOL == ',') /* end of this input */
    22f0:	0948                	addi	a0,sp,148
    22f2:	0000                	unimp
    for (; *str && state != CORE_INVALID; str++)
    22f4:	0001                	nop
    22f6:	4861                	li	a6,24
    22f8:	0009                	c.nop	2
    22fa:	5000                	lw	s0,32(s0)
    22fc:	0009                	c.nop	2
    22fe:	0300                	addi	s0,sp,384
                    transition_count[CORE_FLOAT]++;
    2300:	8100                	0x8100
    2302:	9f7f                	0x9f7f
    2304:	0950                	addi	a2,sp,148
    2306:	0000                	unimp
    2308:	0984                	addi	s1,sp,208
    230a:	0000                	unimp
    for (; *str && state != CORE_INVALID; str++)
    230c:	0001                	nop
    230e:	8461                	srai	s0,s0,0x18
    2310:	0009                	c.nop	2
    2312:	8800                	0x8800
        if (NEXT_SYMBOL == ',') /* end of this input */
    2314:	0009                	c.nop	2
    2316:	0300                	addi	s0,sp,384
            str++;
    2318:	8100                	0x8100
    231a:	9f7f                	0x9f7f
        if (NEXT_SYMBOL == ',') /* end of this input */
    231c:	0988                	addi	a0,sp,208
    231e:	0000                	unimp
                    transition_count[CORE_S2]++;
    2320:	099c                	addi	a5,sp,208
    2322:	0000                	unimp
                if (NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-')
    2324:	0001                	nop
    2326:	0061                	c.nop	24
    2328:	0000                	unimp
    232a:	0000                	unimp
                    transition_count[CORE_S2]++;
    232c:	0000                	unimp
    232e:	c000                	sw	s0,0(s0)
    2330:	0009                	c.nop	2
    2332:	4000                	lw	s0,0(s0)
                if (NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-')
    2334:	000a                	c.slli	zero,0x2
    2336:	0100                	addi	s0,sp,128
                    state = CORE_INVALID;
    2338:	5900                	lw	s0,48(a0)
	...
}
    2342:	09c0                	addi	s0,sp,212
    for (; *str && state != CORE_INVALID; str++)
    2344:	0000                	unimp
    2346:	0a40                	addi	s0,sp,276
    2348:	0000                	unimp
    234a:	0001                	nop
            str++;
    234c:	00000063          	beqz	zero,234c <core_state_transition+0x1f8>
        if (NEXT_SYMBOL == ',') /* end of this input */
    2350:	0000                	unimp
    2352:	0000                	unimp
                    transition_count[CORE_EXPONENT]++;
    2354:	c000                	sw	s0,0(s0)
    2356:	0009                	c.nop	2
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    2358:	d400                	sw	s0,40(s0)
    235a:	0009                	c.nop	2
    235c:	0200                	addi	s0,sp,256
    235e:	3000                	fld	fs0,32(s0)
                    transition_count[CORE_EXPONENT]++;
    2360:	d49f 0009 f000      	0xf0000009d49f
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    2366:	0009                	c.nop	2
                    transition_count[CORE_EXPONENT]++;
    2368:	0100                	addi	s0,sp,128
    236a:	5c00                	lw	s0,56(s0)
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    236c:	09f0                	addi	a2,sp,220
    236e:	0000                	unimp
    for (; *str && state != CORE_INVALID; str++)
    2370:	09f4                	addi	a3,sp,220
    2372:	0000                	unimp
    2374:	0002                	c.slli64	zero
    2376:	9f30                	0x9f30
            str++;
    2378:	09f4                	addi	a3,sp,220
    237a:	0000                	unimp
        if (NEXT_SYMBOL == ',') /* end of this input */
    237c:	0a40                	addi	s0,sp,276
    237e:	0000                	unimp
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    2380:	0001                	nop
    2382:	005c                	addi	a5,sp,4
        if (NEXT_SYMBOL == ',') /* end of this input */
    2384:	0000                	unimp
    2386:	0000                	unimp
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    2388:	0000                	unimp
    238a:	c000                	sw	s0,0(s0)
    238c:	0009                	c.nop	2
    238e:	d400                	sw	s0,40(s0)
    2390:	0009                	c.nop	2
    2392:	0200                	addi	s0,sp,256
                    transition_count[CORE_INVALID]++;
    2394:	3000                	fld	fs0,32(s0)
    2396:	d49f 0009 e400      	0xe4000009d49f
                    state = CORE_INVALID;
    239c:	0009                	c.nop	2
    239e:	0100                	addi	s0,sp,128
                    transition_count[CORE_INVALID]++;
    23a0:	5e00                	lw	s0,56(a2)
    23a2:	09f4                	addi	a3,sp,220
    23a4:	0000                	unimp
    23a6:	0a04                	addi	s1,sp,272
    for (; *str && state != CORE_INVALID; str++)
    23a8:	0000                	unimp
    23aa:	0001                	nop
    23ac:	045e                	slli	s0,s0,0x17
    23ae:	000a                	c.slli	zero,0x2
    23b0:	1000                	addi	s0,sp,32
    23b2:	000a                	c.slli	zero,0x2
    23b4:	0100                	addi	s0,sp,128
    23b6:	5d00                	lw	s0,56(a0)
    23b8:	0a2c                	addi	a1,sp,280
    23ba:	0000                	unimp
        if (NEXT_SYMBOL == ',') /* end of this input */
    23bc:	0a40                	addi	s0,sp,276
    23be:	0000                	unimp
    for (; *str && state != CORE_INVALID; str++)
    23c0:	0001                	nop
    23c2:	005e                	c.slli	zero,0x17
    23c4:	0000                	unimp
    23c6:	0000                	unimp
    23c8:	0000                	unimp
    23ca:	e400                	fsw	fs0,8(s0)
    23cc:	0009                	c.nop	2
    23ce:	fc00                	fsw	fs0,56(s0)
    23d0:	0009                	c.nop	2
    23d2:	0100                	addi	s0,sp,128
    23d4:	5e00                	lw	s0,56(a2)
    23d6:	0a04                	addi	s1,sp,272
        if (NEXT_SYMBOL == ',') /* end of this input */
    23d8:	0000                	unimp
    23da:	0a38                	addi	a4,sp,280
    for (; *str && state != CORE_INVALID; str++)
    23dc:	0000                	unimp
    23de:	0001                	nop
    23e0:	005e                	c.slli	zero,0x17
    23e2:	0000                	unimp
                transition_count[CORE_START]++;
    23e4:	0000                	unimp
    23e6:	0000                	unimp
    for (; *str && state != CORE_INVALID; str++)
    23e8:	c000                	sw	s0,0(s0)
    23ea:	0009                	c.nop	2
    23ec:	d400                	sw	s0,40(s0)
    23ee:	0009                	c.nop	2
            str++;
    23f0:	0200                	addi	s0,sp,256
    23f2:	3000                	fld	fs0,32(s0)
        if (NEXT_SYMBOL == ',') /* end of this input */
    23f4:	d49f 0009 e400      	0xe4000009d49f
    for (; *str && state != CORE_INVALID; str++)
    23fa:	0009                	c.nop	2
    23fc:	0100                	addi	s0,sp,128
    23fe:	5a00                	lw	s0,48(a2)
                    transition_count[CORE_S1]++;
    2400:	09f0                	addi	a2,sp,220
    2402:	0000                	unimp
    for (; *str && state != CORE_INVALID; str++)
    2404:	0a08                	addi	a0,sp,272
    2406:	0000                	unimp
    2408:	0001                	nop
    240a:	2c5a                	fld	fs8,400(sp)
        if (NEXT_SYMBOL == ',') /* end of this input */
    240c:	000a                	c.slli	zero,0x2
    240e:	4000                	lw	s0,0(s0)
            str++;
    2410:	000a                	c.slli	zero,0x2
    2412:	0100                	addi	s0,sp,128
        if (NEXT_SYMBOL == ',') /* end of this input */
    2414:	5a00                	lw	s0,48(a2)
	...
    for (; *str && state != CORE_INVALID; str++)
    241e:	09c0                	addi	s0,sp,212
    2420:	0000                	unimp
    2422:	09d4                	addi	a3,sp,212
        if (NEXT_SYMBOL == ',') /* end of this input */
    2424:	0000                	unimp
    2426:	0002                	c.slli64	zero
            break;
    2428:	9f30                	0x9f30
    242a:	09d4                	addi	a3,sp,212
    for (; *str && state != CORE_INVALID; str++)
    242c:	0000                	unimp
    242e:	0a40                	addi	s0,sp,276
    2430:	0000                	unimp
    2432:	0001                	nop
    2434:	006c                	addi	a1,sp,12
    2436:	0000                	unimp
    2438:	0000                	unimp
    243a:	0000                	unimp
                    state = CORE_S2;
    243c:	d400                	sw	s0,40(s0)
    243e:	0009                	c.nop	2
    2440:	e400                	fsw	fs0,8(s0)
    2442:	0009                	c.nop	2
                    state = CORE_EXPONENT;
    2444:	0200                	addi	s0,sp,256
    2446:	3000                	fld	fs0,32(s0)
    2448:	e49f 0009 ec00      	0xec000009e49f
                    state = CORE_S1;
    244e:	0009                	c.nop	2
    2450:	0100                	addi	s0,sp,128
    2452:	6100                	flw	fs0,0(a0)
    for (; *str && state != CORE_INVALID; str++)
    2454:	09ec                	addi	a1,sp,220
    2456:	0000                	unimp
        if (NEXT_SYMBOL == ',') /* end of this input */
    2458:	09f4                	addi	a3,sp,220
    245a:	0000                	unimp
    245c:	7f810003          	lb	zero,2040(sp)
    for (; *str && state != CORE_INVALID; str++)
    2460:	f49f 0009 2800      	0x28000009f49f
        if (NEXT_SYMBOL == ',') /* end of this input */
    2466:	000a                	c.slli	zero,0x2
    2468:	0100                	addi	s0,sp,128
    246a:	6100                	flw	fs0,0(a0)
{
    246c:	0a28                	addi	a0,sp,280
    246e:	0000                	unimp
    2470:	0a2c                	addi	a1,sp,280
    2472:	0000                	unimp
    2474:	7f810003          	lb	zero,2040(sp)
    2478:	2c9f 000a 4000      	0x4000000a2c9f
    247e:	000a                	c.slli	zero,0x2
    2480:	0100                	addi	s0,sp,128
    2482:	6100                	flw	fs0,0(a0)
	...
    248c:	0a48                	addi	a0,sp,276
    248e:	0000                	unimp
    2490:	0a84                	addi	s1,sp,336
    2492:	0000                	unimp
    2494:	b8910003          	lb	zero,-1143(sp)
    while (*p != 0)
    2498:	447f                	0x447f
    249a:	4800000b          	0x4800000b
    ee_u8 *p = memblock;
    249e:	0300000b          	0x300000b
        final_counts[i] = track_counts[i] = 0;
    24a2:	9100                	0x9100
    24a4:	7fb8                	flw	fa4,120(a5)
	...
    24ae:	0a48                	addi	a0,sp,276
    24b0:	0000                	unimp
    24b2:	0a84                	addi	s1,sp,336
    24b4:	0000                	unimp
    24b6:	0001                	nop
    24b8:	000b4463          	bltz	s6,24c0 <core_bench_state+0x54>
    24bc:	4800                	lw	s0,16(s0)
    24be:	0200000b          	0x200000b
    24c2:	3000                	fld	fs0,32(s0)
    24c4:	009f 0000 0000      	0x9f
    24ca:	0000                	unimp
    24cc:	4800                	lw	s0,16(s0)
    24ce:	000a                	c.slli	zero,0x2
    24d0:	5000                	lw	s0,32(s0)
    24d2:	000a                	c.slli	zero,0x2
    24d4:	0200                	addi	s0,sp,256
    24d6:	3000                	fld	fs0,32(s0)
    24d8:	509f 000a 8400      	0x8400000a509f
    24de:	000a                	c.slli	zero,0x2
    24e0:	0100                	addi	s0,sp,128
    24e2:	5c00                	lw	s0,56(s0)
{
    24e4:	0b44                	addi	s1,sp,404
    24e6:	0000                	unimp
    24e8:	0b48                	addi	a0,sp,404
    24ea:	0000                	unimp
    24ec:	0002                	c.slli64	zero
    24ee:	9f30                	0x9f30
	...
    while (*p != 0)
    24f8:	0a50                	addi	a2,sp,276
    24fa:	0000                	unimp
    24fc:	0a60                	addi	s0,sp,284
    24fe:	0000                	unimp
        enum CORE_STATE fstate = core_state_transition(&p, track_counts);
    2500:	0002                	c.slli64	zero
    2502:	9f30                	0x9f30
    2504:	0a60                	addi	s0,sp,284
    2506:	0000                	unimp
    2508:	0a6c                	addi	a1,sp,284
    250a:	0000                	unimp
        final_counts[fstate]++;
    250c:	0001                	nop
    250e:	6c5d                	lui	s8,0x17
    2510:	000a                	c.slli	zero,0x2
    2512:	7400                	flw	fs0,40(s0)
    2514:	000a                	c.slli	zero,0x2
    2516:	0300                	addi	s0,sp,384
    while (*p != 0)
    2518:	7d00                	flw	fs0,56(a0)
    251a:	9f7f                	0x9f7f
        final_counts[fstate]++;
    251c:	0a74                	addi	a3,sp,284
    251e:	0000                	unimp
    while (*p != 0)
    2520:	0a84                	addi	s1,sp,336
    2522:	0000                	unimp
        final_counts[fstate]++;
    2524:	0001                	nop
    2526:	005d                	c.nop	23
    2528:	0000                	unimp
    252a:	0000                	unimp
    while (*p != 0)
    252c:	0000                	unimp
    252e:	4800                	lw	s0,16(s0)
    p = memblock;
    2530:	6800000b          	0x6800000b
    while (p < (memblock + blksize))
    2534:	0100000b          	0x100000b
    while (*p != 0)
    2538:	5a00                	lw	s0,48(a2)
    253a:	0b68                	addi	a0,sp,412
    while (p < (memblock + blksize))
    253c:	0000                	unimp
    253e:	0b84                	addi	s1,sp,464
        p += step;
    2540:	0000                	unimp
    2542:	0004                	0x4
        if (*p != ',')
    2544:	9f5a01f3          	0x9f5a01f3
	...
            *p ^= (ee_u8)seed1;
    2550:	0b48                	addi	a0,sp,404
    2552:	0000                	unimp
        if (*p != ',')
    2554:	0b64                	addi	s1,sp,412
    2556:	0000                	unimp
            *p ^= (ee_u8)seed1;
    2558:	0001                	nop
    255a:	000b645b          	0xb645b
        p += step;
    255e:	8400                	0x8400
    2560:	0400000b          	0x400000b
    2564:	f300                	fsw	fs0,32(a4)
    2566:	5b01                	li	s6,-32
    while (p < (memblock + blksize))
    2568:	009f 0000 0000      	0x9f
    while (*p != 0)
    256e:	0000                	unimp
    p = memblock;
    2570:	4800                	lw	s0,16(s0)
    2572:	6000000b          	0x6000000b
    while (*p != 0)
    2576:	0100000b          	0x100000b
    257a:	5c00                	lw	s0,56(s0)
        enum CORE_STATE fstate = core_state_transition(&p, track_counts);
    257c:	0b60                	addi	s0,sp,412
    257e:	0000                	unimp
    2580:	0b84                	addi	s1,sp,464
    2582:	0000                	unimp
    2584:	0004                	0x4
    2586:	9f5c01f3          	0x9f5c01f3
	...
        final_counts[fstate]++;
    2592:	0b48                	addi	a0,sp,404
    while (*p != 0)
    2594:	0000                	unimp
    2596:	0b68                	addi	a0,sp,412
        final_counts[fstate]++;
    2598:	0000                	unimp
    259a:	0002                	c.slli64	zero
    while (*p != 0)
    259c:	007a                	c.slli	zero,0x1e
    259e:	0b68                	addi	a0,sp,412
        final_counts[fstate]++;
    25a0:	0000                	unimp
    25a2:	00000b6f          	jal	s6,25a2 <core_bench_state+0x136>
    25a6:	01f30003          	lb	zero,31(t1)
    while (*p != 0)
    25aa:	005a                	c.slli	zero,0x16
    p = memblock;
    25ac:	0000                	unimp
    25ae:	0000                	unimp
    while (p < (memblock + blksize))
    25b0:	0000                	unimp
    25b2:	4800                	lw	s0,16(s0)
        if (*p != ',')
    25b4:	6800000b          	0x6800000b
    25b8:	0200000b          	0x200000b
            *p ^= (ee_u8)seed2;
    25bc:	7a00                	flw	fs0,48(a2)
    25be:	680c                	flw	fa1,16(s0)
        if (*p != ',')
    25c0:	6f00000b          	0x6f00000b
            *p ^= (ee_u8)seed2;
    25c4:	0500000b          	0x500000b
        p += step;
    25c8:	f300                	fsw	fs0,32(a4)
    25ca:	5a01                	li	s4,-32
    25cc:	00000c23          	sb	zero,24(zero) # 18 <_start+0x8>
    25d0:	0000                	unimp
    25d2:	0000                	unimp
    while (p < (memblock + blksize))
    25d4:	0000                	unimp
    25d6:	0b48                	addi	a0,sp,404
    25d8:	0000                	unimp
    25da:	0b68                	addi	a0,sp,412
    25dc:	0000                	unimp
    25de:	0002                	c.slli64	zero
        crc = crcu32(final_counts[i], crc);
    25e0:	047a                	slli	s0,s0,0x1e
    25e2:	0b68                	addi	a0,sp,412
    25e4:	0000                	unimp
    25e6:	00000b6f          	jal	s6,25e6 <core_bench_state+0x17a>
    for (i = 0; i < NUM_CORE_STATES; i++)
    25ea:	0005                	c.nop	1
        crc = crcu32(final_counts[i], crc);
    25ec:	235a01f3          	0x235a01f3
    25f0:	0004                	0x4
    25f2:	0000                	unimp
        crc = crcu32(track_counts[i], crc);
    25f4:	0000                	unimp
    25f6:	0000                	unimp
    for (i = 0; i < NUM_CORE_STATES; i++)
    25f8:	4800                	lw	s0,16(s0)
    25fa:	6800000b          	0x6800000b
        crc = crcu32(track_counts[i], crc);
    25fe:	0200000b          	0x200000b
    2602:	7a00                	flw	fs0,48(a2)
    for (i = 0; i < NUM_CORE_STATES; i++)
    2604:	6808                	flw	fa0,16(s0)
    2606:	6f00000b          	0x6f00000b
}
    260a:	0500000b          	0x500000b
    260e:	f300                	fsw	fs0,32(a4)
    2610:	5a01                	li	s4,-32
    2612:	00000823          	sb	zero,16(zero) # 10 <_start>
    2616:	0000                	unimp
    2618:	0000                	unimp
    261a:	0000                	unimp
    261c:	0b5c                	addi	a5,sp,404
    261e:	0000                	unimp
    2620:	00000b6f          	jal	s6,2620 <core_bench_state+0x1b4>
    2624:	0001                	nop
    2626:	005e                	c.slli	zero,0x17
    2628:	0000                	unimp
    262a:	0000                	unimp
    262c:	0000                	unimp
    262e:	d800                	sw	s0,48(s0)
    2630:	0001                	nop
    2632:	f800                	fsw	fs0,48(s0)
    while (p < (memblock + blksize))
    2634:	0001                	nop
    2636:	0100                	addi	s0,sp,128
    2638:	5a00                	lw	s0,48(a2)
    263a:	01f8                	addi	a4,sp,204
    263c:	0000                	unimp
    263e:	0268                	addi	a0,sp,268
    while (*p != 0)
    2640:	0000                	unimp
    2642:	0001                	nop
    2644:	686d                	lui	a6,0x1b
    2646:	0002                	c.slli64	zero
    switch (i)
    2648:	6c00                	flw	fs0,24(s0)
    264a:	0002                	c.slli64	zero
    264c:	0100                	addi	s0,sp,128
    264e:	5a00                	lw	s0,48(a2)
    2650:	026c                	addi	a1,sp,268
    2652:	0000                	unimp
    2654:	0270                	addi	a2,sp,268
    2656:	0000                	unimp
    2658:	0001                	nop
    265a:	006d                	c.nop	27
    265c:	0000                	unimp
    265e:	0000                	unimp
    2660:	0000                	unimp
    2662:	d800                	sw	s0,48(s0)
    2664:	0001                	nop
    2666:	0000                	unimp
            retval = seed5_volatile;
    2668:	0002                	c.slli64	zero
    266a:	0100                	addi	s0,sp,128
            break;
    266c:	5b00                	lw	s0,48(a4)
    266e:	0200                	addi	s0,sp,256
            retval = seed1_volatile;
    2670:	0000                	unimp
    2672:	0268                	addi	a0,sp,268
            break;
    2674:	0000                	unimp
    2676:	0004                	0x4
            retval = seed2_volatile;
    2678:	9f5b01f3          	0x9f5b01f3
            break;
    267c:	0268                	addi	a0,sp,268
    267e:	0000                	unimp
            retval = seed3_volatile;
    2680:	0270                	addi	a2,sp,268
    2682:	0000                	unimp
            break;
    2684:	0001                	nop
    2686:	0000005b          	0x5b
            retval = seed4_volatile;
    268a:	0000                	unimp
            break;
    268c:	0000                	unimp
    268e:	d800                	sw	s0,48(s0)
{
    2690:	0001                	nop
    2692:	0400                	addi	s0,sp,512
}
    2694:	0002                	c.slli64	zero
    2696:	0200                	addi	s0,sp,256
{
    2698:	3000                	fld	fs0,32(s0)
    269a:	049f 0002 1c00      	0x1c000002049f
            crc |= 0x8000;
    26a0:	0002                	c.slli64	zero
    26a2:	0100                	addi	s0,sp,128
{
    26a4:	5b00                	lw	s0,48(a4)
    26a6:	021c                	addi	a5,sp,256
            crc |= 0x8000;
    26a8:	0000                	unimp
    26aa:	0220                	addi	s0,sp,264
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    26ac:	0000                	unimp
    26ae:	0002                	c.slli64	zero
    for (i = 0; i < 8; i++)
    26b0:	9f30                	0x9f30
    26b2:	0220                	addi	s0,sp,264
    26b4:	0000                	unimp
    26b6:	0268                	addi	a0,sp,268
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    26b8:	0000                	unimp
    26ba:	0001                	nop
    for (i = 0; i < 8; i++)
    26bc:	0002685b          	0x2685b
            crc |= 0x8000;
    26c0:	7000                	flw	fs0,32(s0)
    26c2:	0002                	c.slli64	zero
        data >>= 1;
    26c4:	0200                	addi	s0,sp,256
    26c6:	3000                	fld	fs0,32(s0)
        if (x16 == 1)
    26c8:	009f 0000 0000      	0x9f
            crc |= 0x8000;
    26ce:	0000                	unimp
    26d0:	d800                	sw	s0,48(s0)
    26d2:	0001                	nop
    for (i = 0; i < 8; i++)
    26d4:	0400                	addi	s0,sp,512
    26d6:	0002                	c.slli64	zero
}
    26d8:	0200                	addi	s0,sp,256
    26da:	3000                	fld	fs0,32(s0)
{
    26dc:	049f 0002 1000      	0x10000002049f
            crc |= 0x8000;
    26e2:	0002                	c.slli64	zero
{
    26e4:	0100                	addi	s0,sp,128
    26e6:	5e00                	lw	s0,56(a2)
    crc = crcu8((ee_u8)(newval), crc);
    26e8:	0220                	addi	s0,sp,264
    26ea:	0000                	unimp
    26ec:	022c                	addi	a1,sp,264
    26ee:	0000                	unimp
            crc |= 0x8000;
    26f0:	0001                	nop
    26f2:	2c5e                	fld	fs8,464(sp)
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    26f4:	0002                	c.slli64	zero
    26f6:	3800                	fld	fs0,48(s0)
    for (i = 0; i < 8; i++)
    26f8:	0002                	c.slli64	zero
    26fa:	0100                	addi	s0,sp,128
        crc >>= 1;
    26fc:	5d00                	lw	s0,56(a0)
    26fe:	0254                	addi	a3,sp,260
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    2700:	0000                	unimp
    2702:	0268                	addi	a0,sp,268
    for (i = 0; i < 8; i++)
    2704:	0000                	unimp
    2706:	0001                	nop
            crc |= 0x8000;
    2708:	685e                	flw	fa6,212(sp)
    270a:	0002                	c.slli64	zero
        data >>= 1;
    270c:	7000                	flw	fs0,32(s0)
    270e:	0002                	c.slli64	zero
        if (x16 == 1)
    2710:	0200                	addi	s0,sp,256
    2712:	3000                	fld	fs0,32(s0)
            crc |= 0x8000;
    2714:	009f 0000 0000      	0x9f
    271a:	0000                	unimp
    for (i = 0; i < 8; i++)
    271c:	d800                	sw	s0,48(s0)
    271e:	0001                	nop
            crc |= 0x8000;
    2720:	0400                	addi	s0,sp,512
    2722:	0002                	c.slli64	zero
    crc = crcu8((ee_u8)((newval) >> 8), crc);
    2724:	0200                	addi	s0,sp,256
    2726:	3000                	fld	fs0,32(s0)
    2728:	109f 0002 2400      	0x24000002109f
            crc |= 0x8000;
    272e:	0002                	c.slli64	zero
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    2730:	0100                	addi	s0,sp,128
    2732:	5e00                	lw	s0,56(a2)
    for (i = 0; i < 8; i++)
    2734:	022c                	addi	a1,sp,264
    2736:	0000                	unimp
    2738:	0268                	addi	a0,sp,268
    273a:	0000                	unimp
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    273c:	0001                	nop
    273e:	685e                	flw	fa6,212(sp)
    for (i = 0; i < 8; i++)
    2740:	0002                	c.slli64	zero
    2742:	7000                	flw	fs0,32(s0)
            crc |= 0x8000;
    2744:	0002                	c.slli64	zero
    2746:	0200                	addi	s0,sp,256
        data >>= 1;
    2748:	3000                	fld	fs0,32(s0)
    274a:	009f 0000 0000      	0x9f
            crc |= 0x8000;
    2750:	0000                	unimp
    2752:	d800                	sw	s0,48(s0)
    2754:	0001                	nop
    2756:	0400                	addi	s0,sp,512
    for (i = 0; i < 8; i++)
    2758:	0002                	c.slli64	zero
    275a:	0200                	addi	s0,sp,256
}
    275c:	3000                	fld	fs0,32(s0)
    275e:	049f 0002 1000      	0x10000002049f
    return crcu16((ee_u16)newval, crc);
    2764:	0002                	c.slli64	zero
    2766:	0100                	addi	s0,sp,128
            crc |= 0x8000;
    2768:	5a00                	lw	s0,48(a2)
    276a:	021c                	addi	a5,sp,256
{
    276c:	0000                	unimp
    276e:	0230                	addi	a2,sp,264
    return crcu16((ee_u16)newval, crc);
    2770:	0000                	unimp
    2772:	0001                	nop
    crc = crcu8((ee_u8)(newval), crc);
    2774:	545a                	lw	s0,180(sp)
    2776:	0002                	c.slli64	zero
    2778:	6800                	flw	fs0,16(s0)
    277a:	0002                	c.slli64	zero
            crc |= 0x8000;
    277c:	0100                	addi	s0,sp,128
    277e:	5a00                	lw	s0,48(a2)
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    2780:	0268                	addi	a0,sp,268
    2782:	0000                	unimp
    for (i = 0; i < 8; i++)
    2784:	0270                	addi	a2,sp,268
    2786:	0000                	unimp
        crc >>= 1;
    2788:	0002                	c.slli64	zero
    278a:	9f30                	0x9f30
	...
            crc |= 0x8000;
    2794:	01d8                	addi	a4,sp,196
    2796:	0000                	unimp
        data >>= 1;
    2798:	0204                	addi	s1,sp,256
    279a:	0000                	unimp
        if (x16 == 1)
    279c:	0002                	c.slli64	zero
    279e:	9f30                	0x9f30
            crc |= 0x8000;
    27a0:	0204                	addi	s1,sp,256
    27a2:	0000                	unimp
    27a4:	0268                	addi	a0,sp,268
    27a6:	0000                	unimp
    for (i = 0; i < 8; i++)
    27a8:	0001                	nop
    27aa:	6856                	flw	fa6,84(sp)
            crc |= 0x8000;
    27ac:	0002                	c.slli64	zero
    27ae:	7000                	flw	fs0,32(s0)
    crc = crcu8((ee_u8)((newval) >> 8), crc);
    27b0:	0002                	c.slli64	zero
    27b2:	0200                	addi	s0,sp,256
    27b4:	3000                	fld	fs0,32(s0)
    27b6:	009f 0000 0000      	0x9f
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    27bc:	0000                	unimp
    27be:	0400                	addi	s0,sp,512
    for (i = 0; i < 8; i++)
    27c0:	0002                	c.slli64	zero
    27c2:	1000                	addi	s0,sp,32
    27c4:	0002                	c.slli64	zero
    27c6:	0200                	addi	s0,sp,256
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    27c8:	3000                	fld	fs0,32(s0)
    27ca:	009f 0000 0000      	0x9f
            crc |= 0x8000;
    27d0:	0000                	unimp
    27d2:	7000                	flw	fs0,32(s0)
        data >>= 1;
    27d4:	0002                	c.slli64	zero
    27d6:	d000                	sw	s0,32(s0)
        if (x16 == 1)
    27d8:	0002                	c.slli64	zero
    27da:	0100                	addi	s0,sp,128
            crc |= 0x8000;
    27dc:	5a00                	lw	s0,48(a2)
    27de:	02d0                	addi	a2,sp,324
    27e0:	0000                	unimp
    27e2:	032c                	addi	a1,sp,392
    for (i = 0; i < 8; i++)
    27e4:	0000                	unimp
    27e6:	0001                	nop
    crc = crc16((ee_s16)(newval >> 16), crc);
    27e8:	2c66                	fld	fs8,88(sp)
    27ea:	44000003          	lb	zero,1088(zero) # 440 <core_list_mergesort+0x68>
            crc |= 0x8000;
    27ee:	04000003          	lb	zero,64(zero) # 40 <_start+0x30>
    return crcu16((ee_u16)newval, crc);
    27f2:	f300                	fsw	fs0,32(a4)
    crc = crcu8((ee_u8)(newval), crc);
    27f4:	5a01                	li	s4,-32
    27f6:	449f 0003 4800      	0x48000003449f
            crc |= 0x8000;
    27fc:	01000003          	lb	zero,16(zero) # 10 <_start>
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    2800:	5a00                	lw	s0,48(a2)
	...
    for (i = 0; i < 8; i++)
    280a:	0270                	addi	a2,sp,268
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    280c:	0000                	unimp
    280e:	02d0                	addi	a2,sp,324
    for (i = 0; i < 8; i++)
    2810:	0000                	unimp
    2812:	0001                	nop
            crc |= 0x8000;
    2814:	0002d05b          	0x2d05b
        data >>= 1;
    2818:	3400                	fld	fs0,40(s0)
    281a:	01000003          	lb	zero,16(zero) # 10 <_start>
        if (x16 == 1)
    281e:	6800                	flw	fs0,16(s0)
            crc |= 0x8000;
    2820:	0334                	addi	a3,sp,392
    2822:	0000                	unimp
    2824:	0344                	addi	s1,sp,388
    2826:	0000                	unimp
    for (i = 0; i < 8; i++)
    2828:	0004                	0x4
    282a:	9f5b01f3          	0x9f5b01f3
            crc |= 0x8000;
    282e:	0344                	addi	s1,sp,388
    crc = crcu8((ee_u8)((newval) >> 8), crc);
    2830:	0000                	unimp
    2832:	0348                	addi	a0,sp,388
    2834:	0000                	unimp
    2836:	0001                	nop
            crc |= 0x8000;
    2838:	0000005b          	0x5b
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    283c:	0000                	unimp
    283e:	0000                	unimp
    for (i = 0; i < 8; i++)
    2840:	7000                	flw	fs0,32(s0)
    2842:	0002                	c.slli64	zero
    2844:	d000                	sw	s0,32(s0)
    2846:	0002                	c.slli64	zero
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    2848:	0100                	addi	s0,sp,128
    284a:	5c00                	lw	s0,56(s0)
    for (i = 0; i < 8; i++)
    284c:	02d0                	addi	a2,sp,324
    284e:	0000                	unimp
            crc |= 0x8000;
    2850:	0344                	addi	s1,sp,388
    2852:	0000                	unimp
        data >>= 1;
    2854:	0004                	0x4
    2856:	9f5c01f3          	0x9f5c01f3
        if (x16 == 1)
    285a:	0344                	addi	s1,sp,388
            crc |= 0x8000;
    285c:	0000                	unimp
    285e:	0348                	addi	a0,sp,388
    2860:	0000                	unimp
    2862:	0001                	nop
    for (i = 0; i < 8; i++)
    2864:	005c                	addi	a5,sp,4
    2866:	0000                	unimp
}
    2868:	0000                	unimp
    286a:	0000                	unimp
{
    286c:	7000                	flw	fs0,32(s0)
    286e:	0002                	c.slli64	zero
    return crcu16((ee_u16)newval, crc);
    2870:	d000                	sw	s0,32(s0)
    2872:	0002                	c.slli64	zero
            crc |= 0x8000;
    2874:	0100                	addi	s0,sp,128
    2876:	5d00                	lw	s0,56(a0)
{
    2878:	02d0                	addi	a2,sp,324
    287a:	0000                	unimp
    return crcu16((ee_u16)newval, crc);
    287c:	0344                	addi	s1,sp,388
    287e:	0000                	unimp
    crc = crcu8((ee_u8)(newval), crc);
    2880:	0004                	0x4
    2882:	9f5d01f3          	0x9f5d01f3
    2886:	0344                	addi	s1,sp,388
            crc |= 0x8000;
    2888:	0000                	unimp
    288a:	0348                	addi	a0,sp,388
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    288c:	0000                	unimp
    288e:	0001                	nop
    for (i = 0; i < 8; i++)
    2890:	005d                	c.nop	23
    2892:	0000                	unimp
        crc >>= 1;
    2894:	0000                	unimp
    2896:	0000                	unimp
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    2898:	7000                	flw	fs0,32(s0)
    289a:	0002                	c.slli64	zero
    for (i = 0; i < 8; i++)
    289c:	d000                	sw	s0,32(s0)
    289e:	0002                	c.slli64	zero
            crc |= 0x8000;
    28a0:	0200                	addi	s0,sp,256
    28a2:	3000                	fld	fs0,32(s0)
        data >>= 1;
    28a4:	d09f 0002 2000      	0x20000002d09f
        if (x16 == 1)
    28aa:	01000003          	lb	zero,16(zero) # 10 <_start>
            crc |= 0x8000;
    28ae:	6300                	flw	fs0,0(a4)
    28b0:	0344                	addi	s1,sp,388
    28b2:	0000                	unimp
    for (i = 0; i < 8; i++)
    28b4:	0348                	addi	a0,sp,388
    28b6:	0000                	unimp
            crc |= 0x8000;
    28b8:	0002                	c.slli64	zero
    28ba:	9f30                	0x9f30
	...
    28c4:	02d0                	addi	a2,sp,324
    28c6:	0000                	unimp
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    28c8:	02e0                	addi	s0,sp,332
    28ca:	0000                	unimp
    for (i = 0; i < 8; i++)
    28cc:	0002                	c.slli64	zero
    28ce:	9f30                	0x9f30
	...
    28d8:	0348                	addi	a0,sp,388
    28da:	0000                	unimp
            crc |= 0x8000;
    28dc:	0368                	addi	a0,sp,396
    28de:	0000                	unimp
        data >>= 1;
    28e0:	0001                	nop
    28e2:	0003685b          	0x3685b
        if (x16 == 1)
    28e6:	9800                	0x9800
            crc |= 0x8000;
    28e8:	04000003          	lb	zero,64(zero) # 40 <_start+0x30>
    28ec:	f300                	fsw	fs0,32(a4)
    28ee:	5b01                	li	s6,-32
    for (i = 0; i < 8; i++)
    28f0:	009f 0000 0000      	0x9f
}
    28f6:	0000                	unimp
}
    28f8:	4800                	lw	s0,16(s0)
    28fa:	58000003          	lb	zero,1408(zero) # 580 <core_bench_list+0x5c>
    28fe:	01000003          	lb	zero,16(zero) # 10 <_start>
{
    2902:	5c00                	lw	s0,56(s0)
    2904:	0358                	addi	a4,sp,388
    2906:	0000                	unimp
    2908:	0398                	addi	a4,sp,448
    290a:	0000                	unimp
    290c:	0004                	0x4
    290e:	9f5c01f3          	0x9f5c01f3
	...
    291a:	0348                	addi	a0,sp,388
    291c:	0000                	unimp
    291e:	036c                	addi	a1,sp,396
    2920:	0000                	unimp
    2922:	0002                	c.slli64	zero
    2924:	9f30                	0x9f30
    2926:	036c                	addi	a1,sp,396
    2928:	0000                	unimp
    292a:	0394                	addi	a3,sp,448
    292c:	0000                	unimp
    292e:	0001                	nop
    2930:	0000005b          	0x5b
    2934:	0000                	unimp
    2936:	0000                	unimp
    2938:	6c00                	flw	fs0,24(s0)
    293a:	74000003          	lb	zero,1856(zero) # 740 <core_bench_list+0x21c>
    293e:	02000003          	lb	zero,32(zero) # 20 <_start+0x10>
    2942:	3000                	fld	fs0,32(s0)
    2944:	009f 0000 0000      	0x9f
    294a:	0000                	unimp
    294c:	a800                	fsd	fs0,16(s0)
    294e:	0000                	unimp
    2950:	b700                	fsd	fs0,40(a4)
    2952:	0000                	unimp
    2954:	0100                	addi	s0,sp,128
    2956:	5a00                	lw	s0,48(a2)
    if (arg < 0)
    2958:	000000b7          	lui	ra,0x0
    295c:	00c4                	addi	s1,sp,68
    295e:	0000                	unimp
    2960:	0004                	0x4
    2962:	9f5a01f3          	0x9f5a01f3
	...
    296e:	00a8                	addi	a0,sp,72
    2970:	0000                	unimp
    2972:	000000b7          	lui	ra,0x0
    2976:	000d                	c.nop	3
    *sign = 0;
    2978:	007a                	c.slli	zero,0x1e
    297a:	e80a25f7          	0xe80a25f7
    arg = modf(arg, &fi);
    297e:	1b25f703          	0x1b25f703
    2982:	b79f00f7          	0xb79f00f7
    2986:	0000                	unimp
    2988:	c400                	sw	s0,8(s0)
    298a:	0000                	unimp
    if (fi != 0)
    298c:	0e00                	addi	s0,sp,784
    298e:	f300                	fsw	fs0,32(a4)
    2990:	5a01                	li	s4,-32
    2992:	e80a25f7          	0xe80a25f7
    arg = modf(arg, &fi);
    2996:	1b25f703          	0x1b25f703
    if (fi != 0)
    299a:	009f00f7          	0x9f00f7
    299e:	0000                	unimp
    arg = modf(arg, &fi);
    29a0:	0000                	unimp
    29a2:	0000                	unimp
    if (fi != 0)
    29a4:	9800                	0x9800
    29a6:	0000                	unimp
    29a8:	a400                	fsd	fs0,8(s0)
    29aa:	0000                	unimp
    29ac:	0e00                	addi	s0,sp,784
    29ae:	0300                	addi	s0,sp,384
    p1  = &buf[CVTBUFSIZE];
    29b0:	7000                	flw	fs0,32(s0)
    29b2:	0000                	unimp
    if (fi != 0)
    29b4:	0306                	slli	t1,t1,0x1
    29b6:	7004                	flw	fs1,32(s0)
            *--p1 = (int)((fj + .03) * 10) + '0';
    29b8:	0000                	unimp
    29ba:	1c06                	slli	s8,s8,0x21
    29bc:	a49f 0000 a800      	0xa8000000a49f
    29c2:	0000                	unimp
    29c4:	0100                	addi	s0,sp,128
    29c6:	5a00                	lw	s0,48(a2)
	...
    29d0:	0148                	addi	a0,sp,132
    29d2:	0000                	unimp
    29d4:	0154                	addi	a3,sp,132
    29d6:	0000                	unimp
    p1  = &buf[CVTBUFSIZE];
    29d8:	0001                	nop
    29da:	545a                	lw	s0,180(sp)
            fj    = modf(fi / 10, &fi);
    29dc:	0001                	nop
    29de:	6000                	flw	fs0,0(s0)
    29e0:	0004                	0x4
    29e2:	0100                	addi	s0,sp,128
    29e4:	6000                	flw	fs0,0(s0)
	...
    29ee:	0150                	addi	a2,sp,132
    29f0:	0000                	unimp
    29f2:	0188                	addi	a0,sp,192
    29f4:	0000                	unimp
    29f6:	0001                	nop
            *--p1 = (int)((fj + .03) * 10) + '0';
    29f8:	885f 0001 9400      	0x94000001885f
    29fe:	0001                	nop
            fj    = modf(fi / 10, &fi);
    2a00:	0300                	addi	s0,sp,384
    2a02:	7f00                	flw	fs0,56(a4)
    2a04:	9f01                	0x9f01
    2a06:	0194                	addi	a3,sp,192
            *--p1 = (int)((fj + .03) * 10) + '0';
    2a08:	0000                	unimp
    2a0a:	0198                	addi	a4,sp,192
    2a0c:	0000                	unimp
    2a0e:	0006                	c.slli	zero,0x1
    2a10:	0080                	addi	s0,sp,64
    2a12:	2306                	fld	ft6,64(sp)
    2a14:	9f01                	0x9f01
    2a16:	01bc                	addi	a5,sp,200
    2a18:	0000                	unimp
    2a1a:	01d0                	addi	a2,sp,196
        while (fi != 0)
    2a1c:	0000                	unimp
    2a1e:	0001                	nop
    2a20:	d05c                	sw	a5,36(s0)
    2a22:	0001                	nop
            *--p1 = (int)((fj + .03) * 10) + '0';
    2a24:	d800                	sw	s0,48(s0)
    2a26:	0001                	nop
    2a28:	0100                	addi	s0,sp,128
    2a2a:	5f00                	lw	s0,56(a4)
    2a2c:	023c                	addi	a5,sp,264
    2a2e:	0000                	unimp
    2a30:	0258                	addi	a4,sp,260
    2a32:	0000                	unimp
    2a34:	0001                	nop
    2a36:	585f 0002 6800      	0x68000002585f
        while (fi != 0)
    2a3c:	0002                	c.slli64	zero
    2a3e:	0200                	addi	s0,sp,256
    2a40:	8000                	0x8000
    2a42:	6800                	flw	fs0,16(s0)
    2a44:	0002                	c.slli64	zero
    2a46:	6c00                	flw	fs0,24(s0)
    2a48:	0002                	c.slli64	zero
    2a4a:	0600                	addi	s0,sp,768
    2a4c:	8000                	0x8000
    2a4e:	0600                	addi	s0,sp,768
    2a50:	6c9f0123          	sb	s1,1730(t5)
    2a54:	0002                	c.slli64	zero
    2a56:	7000                	flw	fs0,32(s0)
    2a58:	0002                	c.slli64	zero
    2a5a:	0100                	addi	s0,sp,128
        while (p1 < &buf[CVTBUFSIZE])
    2a5c:	5e00                	lw	s0,56(a2)
    2a5e:	028c                	addi	a1,sp,320
    2a60:	0000                	unimp
    2a62:	0290                	addi	a2,sp,320
    2a64:	0000                	unimp
    2a66:	0001                	nop
            *p++ = *p1++;
    2a68:	905f 0002 c400      	0xc4000002905f
    2a6e:	0002                	c.slli64	zero
    2a70:	0300                	addi	s0,sp,384
    2a72:	7f00                	flw	fs0,56(a4)
    2a74:	9f01                	0x9f01
    2a76:	02c4                	addi	s1,sp,324
        while (p1 < &buf[CVTBUFSIZE])
    2a78:	0000                	unimp
    2a7a:	02c8                	addi	a0,sp,324
            *p++ = *p1++;
    2a7c:	0000                	unimp
    2a7e:	037f0003          	lb	zero,55(t5)
    2a82:	c89f 0002 d000      	0xd0000002c89f
    p1 = &buf[ndigits];
    2a88:	0002                	c.slli64	zero
    2a8a:	0300                	addi	s0,sp,384
    if (eflag == 0)
    2a8c:	7f00                	flw	fs0,56(a4)
    2a8e:	9f02                	jalr	t5
    2a90:	02d0                	addi	a2,sp,324
    2a92:	0000                	unimp
        p1 += r2;
    2a94:	02d4                	addi	a3,sp,324
    2a96:	0000                	unimp
    *decpt = r2;
    2a98:	017f0003          	lb	zero,23(t5)
    if (p1 < &buf[0])
    2a9c:	d49f 0002 e400      	0xe4000002d49f
    while (p <= p1 && p < &buf[CVTBUFSIZE])
    2aa2:	0002                	c.slli64	zero
    2aa4:	0300                	addi	s0,sp,384
    2aa6:	7f00                	flw	fs0,56(a4)
    2aa8:	02e49f03          	lh	t5,46(s1) # c02e <__stack_top+0x1f9e>
        arg *= 10;
    2aac:	0000                	unimp
    2aae:	02e8                	addi	a0,sp,332
    2ab0:	0000                	unimp
    2ab2:	0006                	c.slli	zero,0x1
    2ab4:	0080                	addi	s0,sp,64
    2ab6:	2306                	fld	ft6,64(sp)
    while (p <= p1 && p < &buf[CVTBUFSIZE])
    2ab8:	037c9f03          	lh	t5,55(s9)
        arg *= 10;
    2abc:	0000                	unimp
    2abe:	0398                	addi	a4,sp,448
    2ac0:	0000                	unimp
    2ac2:	0001                	nop
    2ac4:	985f 0003 9c00      	0x9c000003985f
    2aca:	01000003          	lb	zero,16(zero) # 10 <_start>
    2ace:	5e00                	lw	s0,56(a2)
        arg  = modf(arg, &fj);
    2ad0:	039c                	addi	a5,sp,448
    2ad2:	0000                	unimp
    2ad4:	03a0                	addi	s0,sp,456
    2ad6:	0000                	unimp
    2ad8:	017e0003          	lb	zero,23(t3) # fffe9017 <RAM_SIZE+0xfffd9017>
    2adc:	a09f 0003 b000      	0xb0000003a09f
        *p++ = (int)fj + '0';
    2ae2:	01000003          	lb	zero,16(zero) # 10 <_start>
    2ae6:	5f00                	lw	s0,56(a4)
    2ae8:	03b0                	addi	a2,sp,456
    2aea:	0000                	unimp
    2aec:	03bc                	addi	a5,sp,456
    2aee:	0000                	unimp
    2af0:	0001                	nop
    2af2:	c45e                	sw	s7,8(sp)
    2af4:	d8000003          	lb	zero,-640(zero) # fffffd80 <RAM_SIZE+0xfffefd80>
    while (p <= p1 && p < &buf[CVTBUFSIZE])
    2af8:	01000003          	lb	zero,16(zero) # 10 <_start>
    if (p1 >= &buf[CVTBUFSIZE])
    2afc:	5e00                	lw	s0,56(a2)
    2afe:	03d8                	addi	a4,sp,452
    *p1 += 5;
    2b00:	0000                	unimp
    2b02:	03dc                	addi	a5,sp,452
    while (*p1 > '9')
    2b04:	0000                	unimp
    2b06:	0001                	nop
    *p1 += 5;
    2b08:	dc5f 0003 ec00      	0xec000003dc5f
    2b0e:	03000003          	lb	zero,48(zero) # 30 <_start+0x20>
    2b12:	7f00                	flw	fs0,56(a4)
    while (*p1 > '9')
    2b14:	9f01                	0x9f01
    2b16:	03f4                	addi	a3,sp,460
    2b18:	0000                	unimp
    2b1a:	03f8                	addi	a4,sp,460
        *p1 = '0';
    2b1c:	0000                	unimp
    2b1e:	017f0003          	lb	zero,23(t5)
            *p1 = '1';
    2b22:	f89f 0003 0400      	0x4000003f89f
        *p1 = '0';
    2b28:	0004                	0x4
    2b2a:	0300                	addi	s0,sp,384
        if (p1 > buf)
    2b2c:	7f00                	flw	fs0,56(a4)
    2b2e:	04049f03          	lh	t5,64(s1)
            ++*--p1;
    2b32:	0000                	unimp
    2b34:	040c                	addi	a1,sp,512
    2b36:	0000                	unimp
    2b38:	0006                	c.slli	zero,0x1
    2b3a:	0080                	addi	s0,sp,64
    2b3c:	2306                	fld	ft6,64(sp)
    2b3e:	04189f03          	lh	t5,65(a7)
    2b42:	0000                	unimp
    while (*p1 > '9')
    2b44:	041c                	addi	a5,sp,512
    2b46:	0000                	unimp
    *p = '\0';
    2b48:	0001                	nop
    2b4a:	405f 0004 4800      	0x48000004405f
}
    2b50:	0004                	0x4
    2b52:	0300                	addi	s0,sp,384
    2b54:	7f00                	flw	fs0,56(a4)
    2b56:	9f01                	0x9f01
    2b58:	0448                	addi	a0,sp,516
    2b5a:	0000                	unimp
    2b5c:	044c                	addi	a1,sp,516
    2b5e:	0000                	unimp
    2b60:	0001                	nop
    2b62:	4c5e                	lw	s8,212(sp)
    2b64:	0004                	0x4
    2b66:	5400                	lw	s0,40(s0)
    2b68:	0004                	0x4
    2b6a:	0100                	addi	s0,sp,128
    2b6c:	5f00                	lw	s0,56(a4)
    2b6e:	0454                	addi	a3,sp,516
    2b70:	0000                	unimp
    2b72:	0460                	addi	s0,sp,524
    2b74:	0000                	unimp
    2b76:	0001                	nop
    2b78:	005c                	addi	a5,sp,4
    2b7a:	0000                	unimp
    2b7c:	0000                	unimp
    2b7e:	0000                	unimp
    2b80:	6000                	flw	fs0,0(s0)
    2b82:	0001                	nop
    2b84:	8c00                	0x8c00
    2b86:	0001                	nop
    2b88:	0100                	addi	s0,sp,128
    2b8a:	5d00                	lw	s0,56(a0)
    2b8c:	0190                	addi	a2,sp,192
    2b8e:	0000                	unimp
    2b90:	01a8                	addi	a0,sp,200
    2b92:	0000                	unimp
    2b94:	0001                	nop
    2b96:	b85d                	j	244c <core_state_transition+0x2f8>
    if (arg < 0)
    2b98:	0001                	nop
    2b9a:	cc00                	sw	s0,24(s0)
    2b9c:	0001                	nop
    2b9e:	0100                	addi	s0,sp,128
    2ba0:	5d00                	lw	s0,56(a0)
    2ba2:	01f4                	addi	a3,sp,204
    2ba4:	0000                	unimp
    2ba6:	020c                	addi	a1,sp,256
    2ba8:	0000                	unimp
    2baa:	0001                	nop
    2bac:	3c5d                	jal	2662 <get_seed_32+0x1a>
    2bae:	0002                	c.slli64	zero
    2bb0:	7000                	flw	fs0,32(s0)
    2bb2:	0002                	c.slli64	zero
        *sign = 1;
    2bb4:	0100                	addi	s0,sp,128
    2bb6:	5d00                	lw	s0,56(a0)
    2bb8:	028c                	addi	a1,sp,320
    2bba:	0000                	unimp
        arg   = -arg;
    2bbc:	0298                	addi	a4,sp,320
    2bbe:	0000                	unimp
    2bc0:	0001                	nop
    2bc2:	985d                	andi	s0,s0,-9
    2bc4:	0002                	c.slli64	zero
    2bc6:	dc00                	sw	s0,56(s0)
            *p1 = '1';
    2bc8:	0002                	c.slli64	zero
    2bca:	0100                	addi	s0,sp,128
            (*decpt)++;
    2bcc:	6100                	flw	fs0,0(a0)
    2bce:	02dc                	addi	a5,sp,324
    2bd0:	0000                	unimp
    2bd2:	02ec                	addi	a1,sp,332
    2bd4:	0000                	unimp
    2bd6:	0001                	nop
            if (eflag == 0)
    2bd8:	085d                	addi	a6,a6,23
    2bda:	14000003          	lb	zero,320(zero) # 140 <calc_func+0x20>
    2bde:	01000003          	lb	zero,16(zero) # 10 <_start>
    while (*p1 > '9')
    2be2:	5f00                	lw	s0,56(a4)
    2be4:	0340                	addi	s0,sp,388
    2be6:	0000                	unimp
    2be8:	0348                	addi	a0,sp,388
    2bea:	0000                	unimp
                if (p > buf)
    2bec:	0001                	nop
    2bee:	6c5f 0003 7c00      	0x7c0000036c5f
    while (*p1 > '9')
    2bf4:	01000003          	lb	zero,16(zero) # 10 <_start>
                p++;
    2bf8:	5d00                	lw	s0,56(a0)
    2bfa:	03a4                	addi	s1,sp,456
    while (*p1 > '9')
    2bfc:	0000                	unimp
    2bfe:	03bc                	addi	a5,sp,456
    2c00:	0000                	unimp
    2c02:	0001                	nop
    else if (arg > 0)
    2c04:	c05d                	beqz	s0,2caa <cvt+0x3aa>
    2c06:	e0000003          	lb	zero,-512(zero) # fffffe00 <RAM_SIZE+0xfffefe00>
    2c0a:	01000003          	lb	zero,16(zero) # 10 <_start>
    2c0e:	5d00                	lw	s0,56(a0)
    2c10:	03e4                	addi	s1,sp,460
    2c12:	0000                	unimp
    2c14:	03f4                	addi	a3,sp,460
    2c16:	0000                	unimp
    2c18:	0001                	nop
    2c1a:	f45d                	bnez	s0,2bc8 <cvt+0x2c8>
        while ((fj = arg * 10) < 1)
    2c1c:	00000003          	lb	zero,0(zero) # 0 <RAM_START_ADDRESS>
    2c20:	0004                	0x4
    2c22:	0100                	addi	s0,sp,128
    2c24:	6100                	flw	fs0,0(a0)
    2c26:	0400                	addi	s0,sp,512
    2c28:	0000                	unimp
    2c2a:	0410                	addi	a2,sp,512
    2c2c:	0000                	unimp
    2c2e:	0001                	nop
    2c30:	185d                	addi	a6,a6,-9
    2c32:	0004                	0x4
    2c34:	2400                	fld	fs0,8(s0)
    2c36:	0004                	0x4
    2c38:	0100                	addi	s0,sp,128
    2c3a:	5d00                	lw	s0,56(a0)
    2c3c:	0448                	addi	a0,sp,516
    2c3e:	0000                	unimp
    2c40:	0460                	addi	s0,sp,524
    2c42:	0000                	unimp
    2c44:	0001                	nop
    2c46:	005d                	c.nop	23
    2c48:	0000                	unimp
    2c4a:	0000                	unimp
    2c4c:	0000                	unimp
    2c4e:	5000                	lw	s0,32(s0)
    2c50:	0001                	nop
    2c52:	8400                	0x8400
    2c54:	0001                	nop
    2c56:	0200                	addi	s0,sp,256
    2c58:	3000                	fld	fs0,32(s0)
    2c5a:	849f 0001 d800      	0xd8000001849f
    2c60:	0001                	nop
    2c62:	0200                	addi	s0,sp,256
    2c64:	3400                	fld	fs0,40(s0)
    2c66:	d89f 0001 2000      	0x20000001d89f
    2c6c:	0002                	c.slli64	zero
    2c6e:	0200                	addi	s0,sp,256
    2c70:	3500                	fld	fs0,40(a0)
    2c72:	209f 0002 3400      	0x34000002209f
    2c78:	0002                	c.slli64	zero
    2c7a:	0200                	addi	s0,sp,256
    2c7c:	3100                	fld	fs0,32(a0)
    2c7e:	3c9f 0002 5400      	0x540000023c9f
    2c84:	0002                	c.slli64	zero
    2c86:	0200                	addi	s0,sp,256
    2c88:	3000                	fld	fs0,32(s0)
    2c8a:	549f 0002 8c00      	0x8c000002549f
    2c90:	0002                	c.slli64	zero
    2c92:	0200                	addi	s0,sp,256
    2c94:	3100                	fld	fs0,32(a0)
    2c96:	8c9f 0002 c000      	0xc00000028c9f
    2c9c:	0002                	c.slli64	zero
    2c9e:	0200                	addi	s0,sp,256
            r2--;
    2ca0:	3200                	fld	fs0,32(a2)
    2ca2:	c09f 0002 d000      	0xd0000002c09f
        while ((fj = arg * 10) < 1)
    2ca8:	0002                	c.slli64	zero
    2caa:	0200                	addi	s0,sp,256
    2cac:	3100                	fld	fs0,32(a0)
    2cae:	d09f 0002 f400      	0xf4000002d09f
    2cb4:	0002                	c.slli64	zero
    2cb6:	0200                	addi	s0,sp,256
        buf[0] = '\0';
    2cb8:	3400                	fld	fs0,40(s0)
    2cba:	f49f 0002 2c00      	0x2c000002f49f
        buf[CVTBUFSIZE - 1] = '\0';
    2cc0:	02000003          	lb	zero,32(zero) # 20 <_start+0x10>
        return buf;
    2cc4:	3300                	fld	fs0,32(a4)
    2cc6:	2c9f 0003 3800      	0x380000032c9f
    r2    = 0;
    2ccc:	02000003          	lb	zero,32(zero) # 20 <_start+0x10>
    2cd0:	3100                	fld	fs0,32(a0)
    2cd2:	389f 0003 6400      	0x64000003389f
        while ((fj = arg * 10) < 1)
    2cd8:	02000003          	lb	zero,32(zero) # 20 <_start+0x10>
    return cvt(arg, ndigits, decpt, sign, CVTBUF, 1);
    2cdc:	3600                	fld	fs0,40(a2)
    2cde:	649f 0003 8800      	0x88000003649f
    2ce4:	02000003          	lb	zero,32(zero) # 20 <_start+0x10>
    return cvt(arg, ndigits, decpt, sign, buf, 1);
    2ce8:	3700                	fld	fs0,40(a4)
    2cea:	889f 0003 a000      	0xa0000003889f
    return cvt(arg, ndigits, decpt, sign, CVTBUF, 0);
    2cf0:	02000003          	lb	zero,32(zero) # 20 <_start+0x10>
    2cf4:	3100                	fld	fs0,32(a0)
    2cf6:	a09f 0003 bc00      	0xbc000003a09f
    return cvt(arg, ndigits, decpt, sign, buf, 0);
    2cfc:	02000003          	lb	zero,32(zero) # 20 <_start+0x10>
    2d00:	3700                	fld	fs0,40(a4)
    2d02:	bc9f 0003 1800      	0x18000003bc9f
{
    2d08:	0004                	0x4
    2d0a:	0200                	addi	s0,sp,256
    2d0c:	3500                	fld	fs0,40(a0)
    2d0e:	189f 0004 2000      	0x20000004189f
    2d14:	0004                	0x4
    2d16:	0200                	addi	s0,sp,256
    2d18:	3000                	fld	fs0,32(s0)
    2d1a:	209f 0004 2c00      	0x2c000004209f
    2d20:	0004                	0x4
    2d22:	0200                	addi	s0,sp,256
    2d24:	3700                	fld	fs0,40(a4)
    2d26:	2c9f 0004 3800      	0x380000042c9f
    2d2c:	0004                	0x4
    2d2e:	0200                	addi	s0,sp,256
    2d30:	3300                	fld	fs0,32(a4)
    2d32:	389f 0004 4000      	0x40000004389f
    2d38:	0004                	0x4
    2d3a:	0200                	addi	s0,sp,256
    if (type & UPPERCASE)
    2d3c:	3600                	fld	fs0,40(a2)
    2d3e:	409f 0004 4800      	0x48000004409f
{
    2d44:	0004                	0x4
    2d46:	0200                	addi	s0,sp,256
    2d48:	3200                	fld	fs0,32(a2)
    2d4a:	489f 0004 5400      	0x54000004489f
    2d50:	0004                	0x4
    2d52:	0200                	addi	s0,sp,256
    if (type & UPPERCASE)
    2d54:	3700                	fld	fs0,40(a4)
    2d56:	549f 0004 6000      	0x60000004549f
        dig = upper_digits;
    2d5c:	0004                	0x4
    2d5e:	0200                	addi	s0,sp,256
    if (type & LEFT)
    2d60:	3400                	fld	fs0,40(s0)
    2d62:	009f 0000 0000      	0x9f
        type &= ~ZEROPAD;
    2d68:	0000                	unimp
    2d6a:	6c00                	flw	fs0,24(s0)
    2d6c:	0001                	nop
    2d6e:	8400                	0x8400
    c    = (type & ZEROPAD) ? '0' : ' ';
    2d70:	0001                	nop
    2d72:	0100                	addi	s0,sp,128
    2d74:	5d00                	lw	s0,56(a0)
	...
    if (type & HEX_PREP)
    2d7e:	023c                	addi	a5,sp,264
    if (type & SIGN)
    2d80:	0000                	unimp
    2d82:	0268                	addi	a0,sp,268
        if (num < 0)
    2d84:	0000                	unimp
    2d86:	0002                	c.slli64	zero
        else if (type & PLUS)
    2d88:	9f30                	0x9f30
	...
        else if (type & SPACE)
    2d92:	01a8                	addi	a0,sp,200
    sign = 0;
    2d94:	0000                	unimp
    2d96:	01b0                	addi	a2,sp,200
        else if (type & SPACE)
    2d98:	0000                	unimp
    2d9a:	0001                	nop
            sign = ' ';
    2d9c:	cc5d                	beqz	s0,2e5a <number+0x156>
    2d9e:	0001                	nop
            size--;
    2da0:	dc00                	sw	s0,56(s0)
    2da2:	0001                	nop
            sign = ' ';
    2da4:	0100                	addi	s0,sp,128
    2da6:	5d00                	lw	s0,56(a0)
	...
        if (base == 16)
    2db0:	0270                	addi	a2,sp,268
    2db2:	0000                	unimp
            size--;
    2db4:	0284                	addi	s1,sp,320
    2db6:	0000                	unimp
    2db8:	0002                	c.slli64	zero
    2dba:	9f30                	0x9f30
	...
        tmp[i++] = '0';
    2dc4:	020c                	addi	a1,sp,256
    2dc6:	0000                	unimp
    2dc8:	0214                	addi	a3,sp,256
    2dca:	0000                	unimp
    2dcc:	0001                	nop
    2dce:	005d                	c.nop	23
    2dd0:	0000                	unimp
    2dd2:	0000                	unimp
    2dd4:	0000                	unimp
    2dd6:	2000                	fld	fs0,0(s0)
    2dd8:	0002                	c.slli64	zero
    2dda:	3400                	fld	fs0,40(s0)
    if (i > precision)
    2ddc:	0002                	c.slli64	zero
    2dde:	0200                	addi	s0,sp,256
    2de0:	3000                	fld	fs0,32(s0)
    2de2:	009f 0000 0000      	0x9f
    2de8:	0000                	unimp
    2dea:	a000                	fsd	fs0,0(s0)
    if (!(type & (ZEROPAD | LEFT)))
    2dec:	0002                	c.slli64	zero
    2dee:	b800                	fsd	fs0,48(s0)
    size -= precision;
    2df0:	0002                	c.slli64	zero
    2df2:	0100                	addi	s0,sp,128
        while (size-- > 0)
    2df4:	6100                	flw	fs0,0(a0)
	...
    2dfe:	02b8                	addi	a4,sp,328
            *str++ = ' ';
    2e00:	0000                	unimp
    2e02:	02d0                	addi	a2,sp,324
    2e04:	0000                	unimp
    2e06:	0002                	c.slli64	zero
    2e08:	9f30                	0x9f30
    2e0a:	02d0                	addi	a2,sp,324
    2e0c:	0000                	unimp
    2e0e:	02e8                	addi	a0,sp,332
    2e10:	0000                	unimp
    2e12:	0002                	c.slli64	zero
    2e14:	9f31                	0x9f31
    2e16:	03f4                	addi	a3,sp,460
        while (size-- > 0)
    2e18:	0000                	unimp
    2e1a:	040c                	addi	a1,sp,512
    if (sign)
    2e1c:	0000                	unimp
    2e1e:	0002                	c.slli64	zero
    2e20:	9f30                	0x9f30
	...
        *str++ = sign;
    2e2a:	0348                	addi	a0,sp,388
    if (type & HEX_PREP)
    2e2c:	0000                	unimp
    2e2e:	0350                	addi	a2,sp,388
        if (base == 8)
    2e30:	0000                	unimp
    2e32:	0001                	nop
    2e34:	505f 0003 5400      	0x54000003505f
        else if (base == 16)
    2e3a:	03000003          	lb	zero,48(zero) # 30 <_start+0x20>
    2e3e:	7f00                	flw	fs0,56(a4)
    if (!(type & LEFT))
    2e40:	9f30                	0x9f30
    2e42:	0354                	addi	a3,sp,388
        while (size-- > 0)
    2e44:	0000                	unimp
    2e46:	0360                	addi	s0,sp,396
            *str++ = c;
    2e48:	0000                	unimp
    2e4a:	0002                	c.slli64	zero
    2e4c:	017c                	addi	a5,sp,140
	...
    2e56:	032c                	addi	a1,sp,392
    2e58:	0000                	unimp
    2e5a:	0338                	addi	a4,sp,392
        while (size-- > 0)
    2e5c:	0000                	unimp
    2e5e:	0002                	c.slli64	zero
            *str++ = c;
    2e60:	9f30                	0x9f30
    2e62:	0364                	addi	s1,sp,396
    2e64:	0000                	unimp
    2e66:	03bc                	addi	a5,sp,456
        while (size-- > 0)
    2e68:	0000                	unimp
    2e6a:	0002                	c.slli64	zero
            *str++ = c;
    2e6c:	9f31                	0x9f31
    2e6e:	0420                	addi	s0,sp,520
    2e70:	0000                	unimp
    2e72:	042c                	addi	a1,sp,520
    while (size-- > 0)
    2e74:	0000                	unimp
    2e76:	0002                	c.slli64	zero
    while (i < precision--)
    2e78:	9f31                	0x9f31
    2e7a:	0448                	addi	a0,sp,516
        *str++ = '0';
    2e7c:	0000                	unimp
    2e7e:	0454                	addi	a3,sp,516
    2e80:	0000                	unimp
    2e82:	0002                	c.slli64	zero
    2e84:	9f31                	0x9f31
	...
    2e8e:	0388                	addi	a0,sp,448
    2e90:	0000                	unimp
    2e92:	039c                	addi	a5,sp,448
    while (i-- > 0)
    2e94:	0000                	unimp
    2e96:	0002                	c.slli64	zero
        while (size-- > 0)
    2e98:	9f30                	0x9f30
	...
        *str++ = tmp[i];
    2ea6:	0004                	0x4
    2ea8:	0000                	unimp
    2eaa:	0001                	nop
    while (i-- > 0)
    2eac:	045a                	slli	s0,s0,0x16
    2eae:	0000                	unimp
    2eb0:	e400                	fsw	fs0,8(s0)
    2eb2:	0000                	unimp
    2eb4:	0100                	addi	s0,sp,128
    2eb6:	6100                	flw	fs0,0(a0)
        *str++ = tmp[i];
    2eb8:	0100                	addi	s0,sp,128
    2eba:	0000                	unimp
    while (i-- > 0)
    2ebc:	0128                	addi	a0,sp,136
    2ebe:	0000                	unimp
    2ec0:	0001                	nop
    2ec2:	3461                	jal	294a <cvt+0x4a>
        *str++ = tmp[i];
    2ec4:	0001                	nop
    2ec6:	3800                	fld	fs0,48(s0)
    2ec8:	0001                	nop
    2eca:	0100                	addi	s0,sp,128
    while (size-- > 0)
    2ecc:	6100                	flw	fs0,0(a0)
	...
        *str++ = ' ';
    2eda:	0010                	0x10
    2edc:	0000                	unimp
    2ede:	0001                	nop
    2ee0:	0000385b          	0x385b
    2ee4:	8c00                	0x8c00
    2ee6:	0000                	unimp
    2ee8:	0100                	addi	s0,sp,128
    2eea:	5b00                	lw	s0,48(a4)
    2eec:	00c0                	addi	s0,sp,68
    2eee:	0000                	unimp
    2ef0:	00f4                	addi	a3,sp,76
    2ef2:	0000                	unimp
}
    2ef4:	0001                	nop
    2ef6:	0001005b          	0x1005b
    2efa:	4000                	lw	s0,0(s0)
    2efc:	0001                	nop
    2efe:	0100                	addi	s0,sp,128
    2f00:	5b00                	lw	s0,48(a4)
    2f02:	0140                	addi	s0,sp,132
    2f04:	0000                	unimp
    2f06:	0148                	addi	a0,sp,132
    2f08:	0000                	unimp
    2f0a:	0004                	0x4
    2f0c:	9f5b01f3          	0x9f5b01f3
	...
    2f1c:	0024                	addi	s1,sp,8
    2f1e:	0000                	unimp
    2f20:	0001                	nop
    2f22:	245c                	fld	fa5,136(s0)
    2f24:	0000                	unimp
    2f26:	ff00                	fsw	fs0,56(a4)
    2f28:	0000                	unimp
    2f2a:	0100                	addi	s0,sp,128
    2f2c:	6000                	flw	fs0,0(s0)
    2f2e:	00ff                	0xff
    2f30:	0000                	unimp
    2f32:	0100                	addi	s0,sp,128
    if (!(type & (ZEROPAD | LEFT)))
    2f34:	0000                	unimp
    2f36:	0004                	0x4
    2f38:	9f5c01f3          	0x9f5c01f3
    c    = (type & ZEROPAD) ? '0' : ' ';
    2f3c:	0100                	addi	s0,sp,128
    2f3e:	0000                	unimp
    2f40:	0134                	addi	a3,sp,136
    2f42:	0000                	unimp
    2f44:	0001                	nop
    2f46:	3460                	fld	fs0,232(s0)
    2f48:	0001                	nop
    2f4a:	3c00                	fld	fs0,56(s0)
    if (type & SIGN)
    2f4c:	0001                	nop
    2f4e:	0100                	addi	s0,sp,128
    if (type & HEX_PREP)
    2f50:	5c00                	lw	s0,56(s0)
    2f52:	013c                	addi	a5,sp,136
    if (type & SIGN)
    2f54:	0000                	unimp
    2f56:	00000147          	fmsub.s	ft2,ft0,ft0,ft0,rne
    2f5a:	0001                	nop
    char *dig = digits;
    2f5c:	4760                	lw	s0,76(a4)
    2f5e:	0001                	nop
    2f60:	4800                	lw	s0,16(s0)
    2f62:	0001                	nop
    2f64:	0400                	addi	s0,sp,512
    2f66:	f300                	fsw	fs0,32(a4)
    sign = 0;
    2f68:	5c01                	li	s8,-32
    2f6a:	009f 0000 0000      	0x9f
            sign = '-';
    2f70:	0000                	unimp
    2f72:	0000                	unimp
    2f74:	0000                	unimp
    2f76:	3800                	fld	fs0,48(s0)
            num  = -num;
    2f78:	0000                	unimp
    2f7a:	0200                	addi	s0,sp,256
            size--;
    2f7c:	3000                	fld	fs0,32(s0)
    2f7e:	389f 0000 8400      	0x84000000389f
    if (base < 2 || base > 36)
    2f84:	0000                	unimp
    2f86:	0100                	addi	s0,sp,128
    2f88:	5d00                	lw	s0,56(a0)
    2f8a:	00b4                	addi	a3,sp,72
            tmp[i++] = dig[((unsigned long)num) % (unsigned)base];
    2f8c:	0000                	unimp
    2f8e:	00c8                	addi	a0,sp,68
    2f90:	0000                	unimp
    2f92:	0001                	nop
    2f94:	0000c86f          	jal	a6,ef94 <__stack_top+0x4f04>
    2f98:	ff00                	fsw	fs0,56(a4)
    2f9a:	0000                	unimp
    2f9c:	0100                	addi	s0,sp,128
    2f9e:	5d00                	lw	s0,56(a0)
    2fa0:	0100                	addi	s0,sp,128
    2fa2:	0000                	unimp
    2fa4:	0134                	addi	a3,sp,136
    2fa6:	0000                	unimp
    2fa8:	0001                	nop
    2faa:	345d                	jal	2a50 <cvt+0x150>
            num      = ((unsigned long)num) / (unsigned)base;
    2fac:	0001                	nop
    2fae:	3800                	fld	fs0,48(s0)
    2fb0:	0001                	nop
    2fb2:	0200                	addi	s0,sp,256
            tmp[i++] = dig[((unsigned long)num) % (unsigned)base];
    2fb4:	3000                	fld	fs0,32(s0)
    2fb6:	389f 0001 4700      	0x47000001389f
            num      = ((unsigned long)num) / (unsigned)base;
    2fbc:	0001                	nop
    2fbe:	0100                	addi	s0,sp,128
    2fc0:	5d00                	lw	s0,56(a0)
    2fc2:	00000147          	fmsub.s	ft2,ft0,ft0,ft0,rne
        while (num != 0)
    2fc6:	0148                	addi	a0,sp,132
    2fc8:	0000                	unimp
    2fca:	0002                	c.slli64	zero
            sign = '+';
    2fcc:	9f30                	0x9f30
	...
    2fda:	0010                	0x10
            *str++ = '0';
    2fdc:	0000                	unimp
    2fde:	0002                	c.slli64	zero
    2fe0:	9f30                	0x9f30
    2fe2:	0070                	addi	a2,sp,12
            *str++ = digits[33];
    2fe4:	0000                	unimp
    2fe6:	0078                	addi	a4,sp,12
    2fe8:	0000                	unimp
    2fea:	0002                	c.slli64	zero
    2fec:	9f38                	0x9f38
    2fee:	0078                	addi	a4,sp,12
    2ff0:	0000                	unimp
    2ff2:	008c                	addi	a1,sp,64
            size -= 2;
    2ff4:	0000                	unimp
    2ff6:	0001                	nop
    2ff8:	dc58                	sw	a4,60(s0)
    2ffa:	0000                	unimp
            *str++ = '0';
    2ffc:	e000                	fsw	fs0,0(s0)
    2ffe:	0000                	unimp
    3000:	0200                	addi	s0,sp,256
    3002:	3800                	fld	fs0,48(s0)
    3004:	e09f 0000 ec00      	0xec000000e09f
    300a:	0000                	unimp
        while (size-- > 0)
    300c:	0100                	addi	s0,sp,128
    300e:	5800                	lw	s0,48(s0)
    3010:	0104                	addi	s1,sp,128
    3012:	0000                	unimp
    3014:	0110                	addi	a2,sp,128
    3016:	0000                	unimp
        while (size-- > 0)
    3018:	0002                	c.slli64	zero
    301a:	9f34                	0x9f34
    301c:	011c                	addi	a5,sp,128
    301e:	0000                	unimp
    3020:	0128                	addi	a0,sp,136
    3022:	0000                	unimp
    3024:	0002                	c.slli64	zero
    3026:	9f38                	0x9f38
	*uart = c;
    3028:	0128                	addi	a0,sp,136
    302a:	0000                	unimp
    302c:	012c                	addi	a1,sp,136
    302e:	0000                	unimp
}
    3030:	0001                	nop
    3032:	3458                	fld	fa4,168(s0)
{
    3034:	0001                	nop
    3036:	4800                	lw	s0,16(s0)
    3038:	0001                	nop
    303a:	0200                	addi	s0,sp,256
    303c:	3000                	fld	fs0,32(s0)
    303e:	009f 0000 0000      	0x9f
    3044:	0000                	unimp
    3046:	0000                	unimp
    3048:	0000                	unimp
    304a:	1000                	addi	s0,sp,32
    304c:	0000                	unimp
    304e:	0200                	addi	s0,sp,256
    3050:	3000                	fld	fs0,32(s0)
    3052:	709f 0000 8c00      	0x8c000000709f
    3058:	0000                	unimp
    305a:	0100                	addi	s0,sp,128
    305c:	5f00                	lw	s0,56(a4)
    305e:	00dc                	addi	a5,sp,68
    3060:	0000                	unimp
    3062:	00ff                	0xff
    3064:	0000                	unimp
    3066:	0001                	nop
    3068:	045f 0001 1000      	0x10000001045f
    306e:	0001                	nop
    3070:	0100                	addi	s0,sp,128
    3072:	5f00                	lw	s0,56(a4)
    3074:	011c                	addi	a5,sp,128
    3076:	0000                	unimp
    3078:	0134                	addi	a3,sp,136
    307a:	0000                	unimp
    307c:	0001                	nop
    307e:	345f 0001 4800      	0x48000001345f
    3084:	0001                	nop
    3086:	0200                	addi	s0,sp,256
    for (str = buf; *fmt; fmt++)
    3088:	3000                	fld	fs0,32(s0)
    308a:	009f 0000 0000      	0x9f
    va_start(args, fmt);
    3090:	0000                	unimp
    3092:	6000                	flw	fs0,0(s0)
    for (str = buf; *fmt; fmt++)
    3094:	0004                	0x4
    3096:	f400                	fsw	fs0,40(s0)
    3098:	0004                	0x4
    309a:	0100                	addi	s0,sp,128
    309c:	5a00                	lw	s0,48(a2)
    309e:	04f4                	addi	a3,sp,588
    30a0:	0000                	unimp
    30a2:	052c                	addi	a1,sp,648
                tmp[len++] = digits[n / 10];
    30a4:	0000                	unimp
    30a6:	0001                	nop
    30a8:	2c66                	fld	fs8,88(sp)
    30aa:	0005                	c.nop	1
    for (str = buf; *fmt; fmt++)
    30ac:	2800                	fld	fs0,16(s0)
    30ae:	0006                	c.slli	zero,0x1
    30b0:	0400                	addi	s0,sp,512
    30b2:	f300                	fsw	fs0,32(a4)
    30b4:	5a01                	li	s4,-32
    30b6:	289f 0006 3400      	0x34000006289f
        if (*fmt != '%')
    30bc:	0006                	c.slli	zero,0x1
    30be:	0100                	addi	s0,sp,128
    30c0:	5a00                	lw	s0,48(a2)
    30c2:	0634                	addi	a3,sp,776
            *str++ = *fmt;
    30c4:	0000                	unimp
    30c6:	063c                	addi	a5,sp,776
    for (str = buf; *fmt; fmt++)
    30c8:	0000                	unimp
    30ca:	0004                	0x4
            *str++ = *fmt;
    30cc:	9f5a01f3          	0x9f5a01f3
	...
    *str = '\0';
    30d8:	0460                	addi	s0,sp,524
    30da:	0000                	unimp
    while (*p)
    30dc:	0490                	addi	a2,sp,576
    30de:	0000                	unimp
    30e0:	0001                	nop
    30e2:	0004905b          	0x4905b
    30e6:	ac00                	fsd	fs0,24(s0)
	*uart = c;
    30e8:	0005                	c.nop	1
    30ea:	0100                	addi	s0,sp,128
    30ec:	5800                	lw	s0,48(s0)
    30ee:	05ac                	addi	a1,sp,712
    30f0:	0000                	unimp
    30f2:	0628                	addi	a0,sp,776
    while (*p)
    30f4:	0000                	unimp
    30f6:	0004                	0x4
    30f8:	9f5b01f3          	0x9f5b01f3
        p++;
    30fc:	0628                	addi	a0,sp,776
    30fe:	0000                	unimp
    while (*p)
    3100:	063c                	addi	a5,sp,776
    3102:	0000                	unimp
}
    3104:	0001                	nop
    3106:	0058                	addi	a4,sp,4
    3108:	0000                	unimp
    310a:	0000                	unimp
    310c:	0000                	unimp
    310e:	6000                	flw	fs0,0(s0)
    3110:	0004                	0x4
    3112:	f400                	fsw	fs0,40(s0)
    3114:	0004                	0x4
    3116:	0100                	addi	s0,sp,128
    3118:	5c00                	lw	s0,56(s0)
    311a:	04f4                	addi	a3,sp,588
    311c:	0000                	unimp
    311e:	0628                	addi	a0,sp,776
    3120:	0000                	unimp
    3122:	0004                	0x4
    3124:	9f5c01f3          	0x9f5c01f3
    3128:	0628                	addi	a0,sp,776
    312a:	0000                	unimp
    312c:	0634                	addi	a3,sp,776
    312e:	0000                	unimp
    3130:	0001                	nop
    3132:	345c                	fld	fa5,168(s0)
    3134:	0006                	c.slli	zero,0x1
    3136:	3c00                	fld	fs0,56(s0)
    3138:	0006                	c.slli	zero,0x1
    313a:	0400                	addi	s0,sp,512
    313c:	f300                	fsw	fs0,32(a4)
    313e:	5c01                	li	s8,-32
        flags = 0;
    3140:	009f 0000 0000      	0x9f
    3146:	0000                	unimp
        switch (*fmt)
    3148:	6000                	flw	fs0,0(s0)
    314a:	0004                	0x4
        fmt++; // This also skips first '%'
    314c:	f400                	fsw	fs0,40(s0)
    314e:	0004                	0x4
        switch (*fmt)
    3150:	0100                	addi	s0,sp,128
    3152:	5d00                	lw	s0,56(a0)
    3154:	04f4                	addi	a3,sp,588
    3156:	0000                	unimp
    3158:	0628                	addi	a0,sp,776
    315a:	0000                	unimp
    315c:	0004                	0x4
    315e:	9f5d01f3          	0x9f5d01f3
    3162:	0628                	addi	a0,sp,776
    3164:	0000                	unimp
    3166:	0634                	addi	a3,sp,776
    3168:	0000                	unimp
    316a:	0001                	nop
        if (is_digit(*fmt))
    316c:	345d                	jal	2c12 <cvt+0x312>
    316e:	0006                	c.slli	zero,0x1
    3170:	3c00                	fld	fs0,56(s0)
    3172:	0006                	c.slli	zero,0x1
    3174:	0400                	addi	s0,sp,512
    3176:	f300                	fsw	fs0,32(a4)
    3178:	5d01                	li	s10,-32
    317a:	009f 0000 0000      	0x9f
        field_width = -1;
    3180:	0000                	unimp
    3182:	6000                	flw	fs0,0(s0)
        else if (*fmt == '*')
    3184:	0004                	0x4
    3186:	f400                	fsw	fs0,40(s0)
        if (*fmt == '.')
    3188:	0004                	0x4
    318a:	0100                	addi	s0,sp,128
        precision = -1;
    318c:	5e00                	lw	s0,56(a2)
    318e:	04f4                	addi	a3,sp,588
        if (*fmt == '.')
    3190:	0000                	unimp
    3192:	0628                	addi	a0,sp,776
        if (*fmt == 'l' || *fmt == 'L')
    3194:	0000                	unimp
    3196:	0004                	0x4
    3198:	9f5e01f3          	0x9f5e01f3
    319c:	0628                	addi	a0,sp,776
    319e:	0000                	unimp
        switch (*fmt)
    31a0:	0634                	addi	a3,sp,776
    31a2:	0000                	unimp
    31a4:	0001                	nop
    31a6:	345e                	fld	fs0,496(sp)
    31a8:	0006                	c.slli	zero,0x1
    31aa:	3c00                	fld	fs0,56(s0)
    31ac:	0006                	c.slli	zero,0x1
    31ae:	0400                	addi	s0,sp,512
    31b0:	f300                	fsw	fs0,32(a4)
    31b2:	5e01                	li	t3,-32
    31b4:	009f 0000 0000      	0x9f
    31ba:	0000                	unimp
    31bc:	6000                	flw	fs0,0(s0)
    31be:	0004                	0x4
                flags |= ZEROPAD;
    31c0:	f400                	fsw	fs0,40(s0)
    31c2:	0004                	0x4
    for (str = buf; *fmt; fmt++)
    31c4:	0100                	addi	s0,sp,128
    31c6:	5f00                	lw	s0,56(a4)
    31c8:	04f4                	addi	a3,sp,588
    31ca:	0000                	unimp
                flags |= LEFT;
    31cc:	05d4                	addi	a3,sp,708
    31ce:	0000                	unimp
    for (str = buf; *fmt; fmt++)
    31d0:	0004                	0x4
    31d2:	9f5f01f3          	0x9f5f01f3
    31d6:	05d4                	addi	a3,sp,708
                flags |= PLUS;
    31d8:	0000                	unimp
    31da:	05e8                	addi	a0,sp,716
    for (str = buf; *fmt; fmt++)
    31dc:	0000                	unimp
    31de:	0001                	nop
    31e0:	e859                	bnez	s0,3276 <ee_printf+0x242>
    31e2:	0005                	c.nop	1
                flags |= HEX_PREP;
    31e4:	f300                	fsw	fs0,32(a4)
    31e6:	0005                	c.nop	1
    for (str = buf; *fmt; fmt++)
    31e8:	0100                	addi	s0,sp,128
    31ea:	5b00                	lw	s0,48(a4)
    31ec:	05f8                	addi	a4,sp,716
    31ee:	0000                	unimp
                flags |= SPACE;
    31f0:	0628                	addi	a0,sp,776
    31f2:	0000                	unimp
    for (str = buf; *fmt; fmt++)
    31f4:	0001                	nop
    31f6:	285a                	fld	fa6,400(sp)
    31f8:	0006                	c.slli	zero,0x1
    31fa:	3400                	fld	fs0,40(s0)
        if (*fmt == 'l' || *fmt == 'L')
    31fc:	0006                	c.slli	zero,0x1
    31fe:	0100                	addi	s0,sp,128
    3200:	5f00                	lw	s0,56(a4)
    3202:	0634                	addi	a3,sp,776
                if (*fmt != '%')
    3204:	0000                	unimp
    3206:	063c                	addi	a5,sp,776
            *str++ = *fmt;
    3208:	0000                	unimp
    320a:	0004                	0x4
                if (*fmt != '%')
    320c:	9f5f01f3          	0x9f5f01f3
	...
                if (*fmt)
    3218:	0494                	addi	a3,sp,576
    321a:	0000                	unimp
                    *str++ = '%';
    321c:	04d4                	addi	a3,sp,580
    321e:	0000                	unimp
    *str = '\0';
    3220:	0002                	c.slli64	zero
    3222:	9f30                	0x9f30
	...
    int     n = 0;
    322c:	0500                	addi	s0,sp,640
    322e:	0000                	unimp
    return n;
    3230:	0534                	addi	a3,sp,648
    3232:	0000                	unimp
        switch (*fmt)
    3234:	0001                	nop
    3236:	345a                	fld	fs0,432(sp)
    3238:	0006                	c.slli	zero,0x1
    323a:	3c00                	fld	fs0,56(s0)
            fmt++;
    323c:	0006                	c.slli	zero,0x1
    323e:	0100                	addi	s0,sp,128
        switch (*fmt)
    3240:	5a00                	lw	s0,48(a2)
	...
    324a:	057c                	addi	a5,sp,652
    324c:	0000                	unimp
    324e:	05a8                	addi	a0,sp,712
    3250:	0000                	unimp
    3252:	0001                	nop
    3254:	005a                	c.slli	zero,0x16
    3256:	0000                	unimp
    3258:	0000                	unimp
    325a:	0000                	unimp
    325c:	1800                	addi	s0,sp,48
    325e:	0001                	nop
    3260:	2800                	fld	fs0,16(s0)
    3262:	0001                	nop
            if (is_digit(*fmt))
    3264:	0100                	addi	s0,sp,128
    3266:	5a00                	lw	s0,48(a2)
    3268:	0128                	addi	a0,sp,136
    326a:	0000                	unimp
            ++fmt;
    326c:	01ac                	addi	a1,sp,200
    326e:	0000                	unimp
            if (is_digit(*fmt))
    3270:	0001                	nop
    3272:	ac5e                	fsd	fs7,24(sp)
    3274:	0001                	nop
    3276:	2400                	fld	fs0,8(s0)
    3278:	0002                	c.slli64	zero
    327a:	0400                	addi	s0,sp,512
            else if (*fmt == '*')
    327c:	f300                	fsw	fs0,32(a4)
    327e:	5a01                	li	s4,-32
    3280:	009f 0000 0000      	0x9f
            ++fmt;
    3286:	0000                	unimp
                precision = 0;
    3288:	1800                	addi	s0,sp,48
    328a:	0001                	nop
    328c:	3000                	fld	fs0,32(s0)
    328e:	0001                	nop
    int i = 0;
    3290:	0100                	addi	s0,sp,128
    3292:	5b00                	lw	s0,48(a4)
    while (is_digit(**s))
    3294:	0130                	addi	a2,sp,136
    3296:	0000                	unimp
        i = i * 10 + *((*s)++) - '0';
    3298:	01a0                	addi	s0,sp,200
    329a:	0000                	unimp
    329c:	0004                	0x4
    329e:	9f5b01f3          	0x9f5b01f3
    32a2:	01a0                	addi	s0,sp,200
    32a4:	0000                	unimp
    32a6:	01b8                	addi	a4,sp,200
    32a8:	0000                	unimp
    32aa:	0001                	nop
    while (is_digit(**s))
    32ac:	205a                	fld	ft0,400(sp)
    32ae:	0002                	c.slli64	zero
        i = i * 10 + *((*s)++) - '0';
    32b0:	2400                	fld	fs0,8(s0)
    32b2:	0002                	c.slli64	zero
    while (is_digit(**s))
    32b4:	0100                	addi	s0,sp,128
    32b6:	5a00                	lw	s0,48(a2)
	...
    32c0:	0128                	addi	a0,sp,136
    32c2:	0000                	unimp
            field_width = va_arg(args, int);
    32c4:	0138                	addi	a4,sp,136
    32c6:	0000                	unimp
        if (*fmt == '.')
    32c8:	0001                	nop
    32ca:	005a                	c.slli	zero,0x16
            fmt++;
    32cc:	0000                	unimp
    32ce:	0000                	unimp
            field_width = va_arg(args, int);
    32d0:	0000                	unimp
    32d2:	1c00                	addi	s0,sp,560
            if (field_width < 0)
    32d4:	0001                	nop
    32d6:	a000                	fsd	fs0,0(s0)
                field_width = -field_width;
    32d8:	0001                	nop
    32da:	0100                	addi	s0,sp,128
                flags |= LEFT;
    32dc:	5e00                	lw	s0,56(a2)
	...
                flags |= UPPERCASE;
    32e6:	012c                	addi	a1,sp,136
                if (qualifier == 'l')
    32e8:	0000                	unimp
    32ea:	0138                	addi	a4,sp,136
                s = va_arg(args, char *);
    32ec:	0000                	unimp
    32ee:	0001                	nop
                *str++ = (unsigned char)va_arg(args, int);
    32f0:	645a                	flw	fs0,148(sp)
    32f2:	0001                	nop
                if (qualifier == 'l')
    32f4:	7400                	flw	fs0,40(s0)
    32f6:	0001                	nop
        n = addr[i];
    32f8:	0100                	addi	s0,sp,128
    32fa:	5a00                	lw	s0,48(a2)
	...
            if (n >= 100)
    3304:	012c                	addi	a1,sp,136
    3306:	0000                	unimp
            tmp[len++] = digits[0];
    3308:	016c                	addi	a1,sp,140
    330a:	0000                	unimp
            tmp[len++] = '.';
    330c:	0001                	nop
    330e:	6c5c                	flw	fa5,28(s0)
            tmp[len++] = digits[0];
    3310:	0001                	nop
    3312:	a000                	fsd	fs0,0(s0)
        if (n == 0)
    3314:	0001                	nop
    3316:	0700                	addi	s0,sp,896
            tmp[len++] = digits[0];
    3318:	7e00                	flw	fs0,56(a2)
    331a:	4000                	lw	s0,0(s0)
    331c:	4024                	lw	s1,64(s0)
    331e:	9f25                	0x9f25
	...
    for (i = 0; i < 4; i++)
    3328:	0130                	addi	a2,sp,136
    332a:	0000                	unimp
            tmp[len++] = '.';
    332c:	0144                	addi	s1,sp,132
    332e:	0000                	unimp
        n = addr[i];
    3330:	0001                	nop
    3332:	485a                	lw	a6,148(sp)
            tmp[len++] = '.';
    3334:	0001                	nop
    3336:	5c00                	lw	s0,56(s0)
    3338:	0001                	nop
    333a:	0700                	addi	s0,sp,896
    333c:	7a00                	flw	fs0,48(a2)
    333e:	0a00                	addi	s0,sp,272
            tmp[len++] = digits[0];
    3340:	2001                	jal	3340 <ee_printf+0x30c>
    3342:	01609f27          	fsh	fs6,30(ra) # 1e <_start+0xe>
        if (n == 0)
    3346:	0000                	unimp
            if (n >= 100)
    3348:	0164                	addi	s1,sp,140
    334a:	0000                	unimp
                tmp[len++] = digits[n / 100];
    334c:	0001                	nop
    334e:	005a                	c.slli	zero,0x16
    3350:	0000                	unimp
    3352:	0000                	unimp
    3354:	0000                	unimp
    3356:	3000                	fld	fs0,32(s0)
    3358:	0001                	nop
    335a:	6400                	flw	fs0,8(s0)
    335c:	0001                	nop
    335e:	0100                	addi	s0,sp,128
    3360:	5b00                	lw	s0,48(a4)
	...
    336a:	0130                	addi	a2,sp,136
    336c:	0000                	unimp
    336e:	0138                	addi	a4,sp,136
    3370:	0000                	unimp
    3372:	0002                	c.slli64	zero
    3374:	9f30                	0x9f30
    3376:	0138                	addi	a4,sp,136
                n          = n % 100;
    3378:	0000                	unimp
    337a:	0140                	addi	s0,sp,132
    337c:	0000                	unimp
    337e:	0005                	c.nop	1
    3380:	7f38                	flw	fa4,120(a4)
    3382:	1c00                	addi	s0,sp,560
                tmp[len++] = digits[n / 10];
    3384:	009f 0000 0000      	0x9f
                n          = n % 100;
    338a:	0000                	unimp
                tmp[len++] = digits[n / 10];
    338c:	4800                	lw	s0,16(s0)
    338e:	0001                	nop
    3390:	6000                	flw	fs0,0(s0)
    3392:	0001                	nop
    3394:	0100                	addi	s0,sp,128
    3396:	5d00                	lw	s0,56(a0)
	...
    33a0:	0148                	addi	a0,sp,132
    33a2:	0000                	unimp
                n          = n % 10;
    33a4:	0160                	addi	s0,sp,140
    33a6:	0000                	unimp
                tmp[len++] = digits[n / 10];
    33a8:	0002                	c.slli64	zero
    33aa:	9f31                	0x9f31
	...
                n          = n % 10;
    33b4:	016c                	addi	a1,sp,140
    33b6:	0000                	unimp
                tmp[len++] = digits[n / 10];
    33b8:	0180                	addi	s0,sp,192
    33ba:	0000                	unimp
    33bc:	0001                	nop
    33be:	845a                	mv	s0,s6
    33c0:	0001                	nop
    33c2:	9800                	0x9800
    33c4:	0001                	nop
    33c6:	0700                	addi	s0,sp,896
            tmp[len++] = digits[n];
    33c8:	7a00                	flw	fs0,48(a2)
    33ca:	0a00                	addi	s0,sp,272
                n          = n % 10;
    33cc:	2001                	jal	33cc <ee_printf+0x398>
    33ce:	019c9f27          	fsh	fs9,30(s9)
                tmp[len++] = digits[n / 10];
    33d2:	0000                	unimp
    33d4:	01a0                	addi	s0,sp,200
    33d6:	0000                	unimp
    33d8:	0001                	nop
    33da:	005a                	c.slli	zero,0x16
            tmp[len++] = digits[n];
    33dc:	0000                	unimp
    33de:	0000                	unimp
    33e0:	0000                	unimp
    33e2:	6c00                	flw	fs0,24(s0)
    33e4:	0001                	nop
    33e6:	a000                	fsd	fs0,0(s0)
    33e8:	0001                	nop
    33ea:	0100                	addi	s0,sp,128
    33ec:	5c00                	lw	s0,56(s0)
	...
    for (i = 0; i < 4; i++)
    33f6:	016c                	addi	a1,sp,140
    if (!(type & LEFT))
    33f8:	0000                	unimp
    33fa:	0174                	addi	a3,sp,140
                    while (--field_width > 0)
    33fc:	0000                	unimp
    33fe:	0002                	c.slli64	zero
    if (!(type & LEFT))
    3400:	9f30                	0x9f30
    3402:	0174                	addi	a3,sp,140
        while (len < size--)
    3404:	0000                	unimp
    3406:	017c                	addi	a5,sp,140
            *str++ = ' ';
    3408:	0000                	unimp
    340a:	0005                	c.nop	1
    340c:	7f38                	flw	fa4,120(a4)
    340e:	1c00                	addi	s0,sp,560
    3410:	009f 0000 0000      	0x9f
    3416:	0000                	unimp
    3418:	8400                	0x8400
    341a:	0001                	nop
    341c:	9c00                	0x9c00
    341e:	0001                	nop
        while (len < size--)
    3420:	0100                	addi	s0,sp,128
    3422:	5d00                	lw	s0,56(a0)
	...
    342c:	0184                	addi	s1,sp,192
    342e:	0000                	unimp
    while (len < size--)
    3430:	019c                	addi	a5,sp,192
    3432:	0000                	unimp
        *str++ = tmp[i];
    3434:	0002                	c.slli64	zero
    3436:	9f31                	0x9f31
	...
    3440:	01a4                	addi	s1,sp,200
    3442:	0000                	unimp
    3444:	01b8                	addi	a4,sp,200
    3446:	0000                	unimp
    while (len < size--)
    3448:	0001                	nop
    344a:	005a                	c.slli	zero,0x16
        *str++ = tmp[i];
    344c:	0000                	unimp
    344e:	0000                	unimp
    while (len < size--)
    3450:	0000                	unimp
    3452:	a400                	fsd	fs0,8(s0)
        *str++ = ' ';
    3454:	0001                	nop
    3456:	b400                	fsd	fs0,40(s0)
    3458:	0001                	nop
    345a:	0100                	addi	s0,sp,128
    345c:	5c00                	lw	s0,56(s0)
    345e:	01b4                	addi	a3,sp,200
    3460:	0000                	unimp
    3462:	01ec                	addi	a1,sp,204
    3464:	0000                	unimp
    3466:	0001                	nop
    3468:	ec5e                	fsw	fs7,24(sp)
    346a:	0001                	nop
    346c:	2000                	fld	fs0,0(s0)
    346e:	0002                	c.slli64	zero
    for (str = buf; *fmt; fmt++)
    3470:	0600                	addi	s0,sp,768
    3472:	f300                	fsw	fs0,32(a4)
    3474:	5a01                	li	s4,-32
    3476:	2540                	fld	fs0,136(a0)
    3478:	009f 0000 0000      	0x9f
    347e:	0000                	unimp
        if (*fmt == 'l' || *fmt == 'L')
    3480:	ac00                	fsd	fs0,24(s0)
    3482:	0001                	nop
                if (!(flags & LEFT))
    3484:	b800                	fsd	fs0,48(s0)
    3486:	0001                	nop
                    while (--field_width > 0)
    3488:	0100                	addi	s0,sp,128
    348a:	5a00                	lw	s0,48(a2)
                if (!(flags & LEFT))
    348c:	01e4                	addi	s1,sp,204
    348e:	0000                	unimp
                *str++ = (unsigned char)va_arg(args, int);
    3490:	01f4                	addi	a3,sp,204
    3492:	0000                	unimp
    3494:	0001                	nop
    3496:	005a                	c.slli	zero,0x16
    3498:	0000                	unimp
    349a:	0000                	unimp
    349c:	0000                	unimp
    349e:	ac00                	fsd	fs0,24(s0)
    for (str = buf; *fmt; fmt++)
    34a0:	0001                	nop
    34a2:	b400                	fsd	fs0,40(s0)
                while (--field_width > 0)
    34a4:	0001                	nop
    34a6:	0100                	addi	s0,sp,128
                    *str++ = ' ';
    34a8:	5c00                	lw	s0,56(s0)
    34aa:	01b4                	addi	a3,sp,200
    34ac:	0000                	unimp
    34ae:	01ec                	addi	a1,sp,204
    34b0:	0000                	unimp
    34b2:	0001                	nop
    34b4:	ec5e                	fsw	fs7,24(sp)
    34b6:	0001                	nop
    for (str = buf; *fmt; fmt++)
    34b8:	2000                	fld	fs0,0(s0)
    34ba:	0002                	c.slli64	zero
                    *str++ = ' ';
    34bc:	0600                	addi	s0,sp,768
    34be:	f300                	fsw	fs0,32(a4)
    for (str = buf; *fmt; fmt++)
    34c0:	5a01                	li	s4,-32
    34c2:	2540                	fld	fs0,136(a0)
    34c4:	009f 0000 0000      	0x9f
        if (*fmt == 'l' || *fmt == 'L')
    34ca:	0000                	unimp
                s = va_arg(args, char *);
    34cc:	b400                	fsd	fs0,40(s0)
    34ce:	0001                	nop
    34d0:	c400                	sw	s0,8(s0)
    34d2:	0001                	nop
                if (!s)
    34d4:	0100                	addi	s0,sp,128
    34d6:	5a00                	lw	s0,48(a2)
    for (sc = s; *sc != '\0' && count--; ++sc)
    34d8:	01c8                	addi	a0,sp,196
    34da:	0000                	unimp
    34dc:	01dc                	addi	a5,sp,196
    34de:	0000                	unimp
    34e0:	007a0007          	0x7a0007
    34e4:	010a                	slli	sp,sp,0x2
    34e6:	2720                	fld	fs0,72(a4)
    34e8:	e09f 0001 e400      	0xe4000001e09f
    34ee:	0001                	nop
    34f0:	0100                	addi	s0,sp,128
    34f2:	5a00                	lw	s0,48(a2)
	...
    34fc:	01b4                	addi	a3,sp,200
    34fe:	0000                	unimp
                if (!(flags & LEFT))
    3500:	01e4                	addi	s1,sp,204
    3502:	0000                	unimp
    return sc - s;
    3504:	0001                	nop
    3506:	005c                	addi	a5,sp,4
                if (!(flags & LEFT))
    3508:	0000                	unimp
    350a:	0000                	unimp
                for (i = 0; i < len; ++i)
    350c:	0000                	unimp
    350e:	b400                	fsd	fs0,40(s0)
    3510:	0001                	nop
    3512:	b800                	fsd	fs0,48(s0)
    3514:	0001                	nop
    3516:	0200                	addi	s0,sp,256
                    *str++ = *s++;
    3518:	3000                	fld	fs0,32(s0)
    351a:	b89f 0001 c000      	0xc0000001b89f
    3520:	0001                	nop
    3522:	0500                	addi	s0,sp,640
    3524:	3800                	fld	fs0,48(s0)
    3526:	007f                	0x7f
                for (i = 0; i < len; ++i)
    3528:	9f1c                	0x9f1c
	...
    for (str = buf; *fmt; fmt++)
    3532:	01c8                	addi	a0,sp,196
                while (len < field_width--)
    3534:	0000                	unimp
    3536:	01e0                	addi	s0,sp,204
                    *str++ = ' ';
    3538:	0000                	unimp
    353a:	0001                	nop
    353c:	005d                	c.nop	23
    353e:	0000                	unimp
    3540:	0000                	unimp
    3542:	0000                	unimp
    3544:	c800                	sw	s0,16(s0)
    3546:	0001                	nop
    3548:	e000                	fsw	fs0,0(s0)
    354a:	0001                	nop
    354c:	0200                	addi	s0,sp,256
    354e:	3100                	fld	fs0,32(a0)
    for (str = buf; *fmt; fmt++)
    3550:	009f 0000 0000      	0x9f
    3556:	0000                	unimp
    3558:	ec00                	fsw	fs0,24(s0)
    355a:	0001                	nop
        if (*fmt == 'l' || *fmt == 'L')
    355c:	0000                	unimp
    355e:	0002                	c.slli64	zero
                if (field_width == -1)
    3560:	0100                	addi	s0,sp,128
    3562:	5a00                	lw	s0,48(a2)
    3564:	0204                	addi	s1,sp,256
    3566:	0000                	unimp
                str = number(str,
    3568:	0218                	addi	a4,sp,256
    356a:	0000                	unimp
    356c:	007a0007          	0x7a0007
    3570:	010a                	slli	sp,sp,0x2
    3572:	2720                	fld	fs0,72(a4)
    3574:	1c9f 0002 2000      	0x200000021c9f
    for (str = buf; *fmt; fmt++)
    357a:	0002                	c.slli64	zero
                             (unsigned long)va_arg(args, void *),
    357c:	0100                	addi	s0,sp,128
    357e:	5a00                	lw	s0,48(a2)
	...
    for (str = buf; *fmt; fmt++)
    3588:	01ec                	addi	a1,sp,204
    358a:	0000                	unimp
    358c:	0220                	addi	s0,sp,264
    358e:	0000                	unimp
            else if (n >= 10)
    3590:	0001                	nop
    3592:	005e                	c.slli	zero,0x17
    3594:	0000                	unimp
    3596:	0000                	unimp
                tmp[len++] = digits[n / 10];
    3598:	0000                	unimp
    359a:	ec00                	fsw	fs0,24(s0)
    359c:	0001                	nop
    359e:	f400                	fsw	fs0,40(s0)
    35a0:	0001                	nop
    35a2:	0200                	addi	s0,sp,256
    35a4:	3000                	fld	fs0,32(s0)
    35a6:	f49f 0001 fc00      	0xfc000001f49f
    35ac:	0001                	nop
    35ae:	0500                	addi	s0,sp,640
    35b0:	3800                	fld	fs0,48(s0)
    35b2:	007f                	0x7f
    35b4:	9f1c                	0x9f1c
	...
    35be:	0204                	addi	s1,sp,256
                n          = n % 10;
    35c0:	0000                	unimp
    35c2:	021c                	addi	a5,sp,256
                tmp[len++] = digits[n / 10];
    35c4:	0000                	unimp
    35c6:	0001                	nop
                n          = n % 10;
    35c8:	005d                	c.nop	23
    35ca:	0000                	unimp
    35cc:	0000                	unimp
    35ce:	0000                	unimp
            tmp[len++] = digits[n];
    35d0:	0400                	addi	s0,sp,512
    35d2:	0002                	c.slli64	zero
    35d4:	1c00                	addi	s0,sp,560
    35d6:	0002                	c.slli64	zero
                tmp[len++] = digits[n / 10];
    35d8:	0200                	addi	s0,sp,256
    35da:	3100                	fld	fs0,32(a0)
            tmp[len++] = digits[n];
    35dc:	009f 0000 0000      	0x9f
    35e2:	0000                	unimp
                n          = n % 10;
    35e4:	0000                	unimp
    35e6:	0000                	unimp
            tmp[len++] = digits[n];
    35e8:	1400                	addi	s0,sp,544
    35ea:	0000                	unimp
    35ec:	0100                	addi	s0,sp,128
    35ee:	5a00                	lw	s0,48(a2)
    35f0:	0014                	0x14
    35f2:	0000                	unimp
    35f4:	0050                	addi	a2,sp,4
    35f6:	0000                	unimp
    int i = 0;
    35f8:	0004                	0x4
    35fa:	9f5a01f3          	0x9f5a01f3
	...
        i = i * 10 + *((*s)++) - '0';
    3606:	0024                	addi	s1,sp,8
    3608:	0000                	unimp
    360a:	0028                	addi	a0,sp,8
    360c:	0000                	unimp
    360e:	0001                	nop
    3610:	2c5a                	fld	fs8,400(sp)
    3612:	0000                	unimp
    while (is_digit(**s))
    3614:	3000                	fld	fs0,32(s0)
    3616:	0000                	unimp
        i = i * 10 + *((*s)++) - '0';
    3618:	0100                	addi	s0,sp,128
    361a:	5a00                	lw	s0,48(a2)
    while (is_digit(**s))
    361c:	0034                	addi	a3,sp,8
    361e:	0000                	unimp
    3620:	0038                	addi	a4,sp,8
    3622:	0000                	unimp
    3624:	0001                	nop
    3626:	3c5a                	fld	fs8,432(sp)
            if (precision < 0)
    3628:	0000                	unimp
    362a:	4000                	lw	s0,0(s0)
    362c:	0000                	unimp
    362e:	0100                	addi	s0,sp,128
                ++fmt;
    3630:	5a00                	lw	s0,48(a2)
    3632:	0044                	addi	s1,sp,4
    3634:	0000                	unimp
    3636:	0048                	addi	a0,sp,4
        if (*fmt == 'l' || *fmt == 'L')
    3638:	0000                	unimp
    363a:	0001                	nop
    363c:	4c5a                	lw	s8,148(sp)
    363e:	0000                	unimp
    3640:	5000                	lw	s0,32(s0)
    3642:	0000                	unimp
    3644:	0200                	addi	s0,sp,256
    3646:	3000                	fld	fs0,32(s0)
                precision = va_arg(args, int);
    3648:	009f 0000 0000      	0x9f
            if (precision < 0)
    364e:	0000                	unimp
    3650:	5000                	lw	s0,32(s0)
    3652:	0000                	unimp
    if (type & UPPERCASE)
    3654:	5800                	lw	s0,48(s0)
    3656:	0000                	unimp
    char *dig = digits;
    3658:	0100                	addi	s0,sp,128
    365a:	5a00                	lw	s0,48(a2)
    if (type & UPPERCASE)
    365c:	0058                	addi	a4,sp,4
    365e:	0000                	unimp
        dig = upper_digits;
    3660:	0094                	addi	a3,sp,64
    3662:	0000                	unimp
    3664:	0001                	nop
    3666:	005d                	c.nop	23
        if (i != 0)
    3668:	0000                	unimp
    366a:	0000                	unimp
    366c:	0000                	unimp
    366e:	5000                	lw	s0,32(s0)
            tmp[len++] = ':';
    3670:	0000                	unimp
    3672:	5800                	lw	s0,48(s0)
    3674:	0000                	unimp
    3676:	0100                	addi	s0,sp,128
    3678:	5b00                	lw	s0,48(a4)
    367a:	0058                	addi	a4,sp,4
        tmp[len++] = dig[addr[i] >> 4];
    367c:	0000                	unimp
    367e:	0070                	addi	a2,sp,12
    for (i = 0; i < 6; i++)
    3680:	0000                	unimp
    3682:	0001                	nop
    3684:	745a                	flw	fs0,180(sp)
    3686:	0000                	unimp
        tmp[len++] = dig[addr[i] >> 4];
    3688:	8800                	0x8800
    368a:	0000                	unimp
        tmp[len++] = dig[addr[i] & 0x0F];
    368c:	0700                	addi	s0,sp,896
    368e:	7a00                	flw	fs0,48(a2)
        tmp[len++] = dig[addr[i] >> 4];
    3690:	0a00                	addi	s0,sp,272
    3692:	2001                	jal	3692 <ee_printf+0x65e>
        tmp[len++] = dig[addr[i] & 0x0F];
    3694:	008c9f27          	fsh	fs0,30(s9)
        tmp[len++] = dig[addr[i] >> 4];
    3698:	0000                	unimp
    369a:	0094                	addi	a3,sp,64
        tmp[len++] = dig[addr[i] & 0x0F];
    369c:	0000                	unimp
    369e:	0001                	nop
        tmp[len++] = dig[addr[i] >> 4];
    36a0:	005a                	c.slli	zero,0x16
    36a2:	0000                	unimp
        tmp[len++] = dig[addr[i] & 0x0F];
    36a4:	0000                	unimp
    36a6:	0000                	unimp
    for (i = 0; i < 6; i++)
    36a8:	5000                	lw	s0,32(s0)
    36aa:	0000                	unimp
    if (!(type & LEFT))
    36ac:	6400                	flw	fs0,8(s0)
    36ae:	0000                	unimp
                    while (--field_width > 0)
    36b0:	0200                	addi	s0,sp,256
    36b2:	3000                	fld	fs0,32(s0)
    if (!(type & LEFT))
    36b4:	649f 0000 6c00      	0x6c000000649f
        while (len < size--)
    36ba:	0000                	unimp
    36bc:	0500                	addi	s0,sp,640
    36be:	3800                	fld	fs0,48(s0)
            *str++ = ' ';
    36c0:	007f                	0x7f
    36c2:	9f1c                	0x9f1c
	...
    36cc:	0050                	addi	a2,sp,4
    36ce:	0000                	unimp
    36d0:	0064                	addi	s1,sp,12
    36d2:	0000                	unimp
        while (len < size--)
    36d4:	0002                	c.slli64	zero
    36d6:	9f30                	0x9f30
            *str++ = ' ';
    36d8:	0074                	addi	a3,sp,12
    36da:	0000                	unimp
    while (len < size--)
    36dc:	0094                	addi	a3,sp,64
    36de:	0000                	unimp
            *str++ = ' ';
    36e0:	0001                	nop
    36e2:	005e                	c.slli	zero,0x17
    while (len < size--)
    36e4:	0000                	unimp
    36e6:	0000                	unimp
        *str++ = tmp[i];
    36e8:	0000                	unimp
    36ea:	5000                	lw	s0,32(s0)
    36ec:	0000                	unimp
    36ee:	6400                	flw	fs0,8(s0)
    36f0:	0000                	unimp
    36f2:	0200                	addi	s0,sp,256
    36f4:	3000                	fld	fs0,32(s0)
    36f6:	749f 0000 9400      	0x94000000749f
    while (len < size--)
    36fc:	0000                	unimp
    36fe:	0200                	addi	s0,sp,256
        *str++ = tmp[i];
    3700:	3100                	fld	fs0,32(a0)
    3702:	009f 0000 0000      	0x9f
    while (len < size--)
    3708:	0000                	unimp
    370a:	9400                	0x9400
        *str++ = ' ';
    370c:	0000                	unimp
    370e:	a000                	fsd	fs0,0(s0)
    3710:	0000                	unimp
    3712:	0100                	addi	s0,sp,128
    3714:	5a00                	lw	s0,48(a2)
    3716:	00a0                	addi	s0,sp,72
    3718:	0000                	unimp
    371a:	0118                	addi	a4,sp,128
    371c:	0000                	unimp
    371e:	0004                	0x4
    3720:	9f5a01f3          	0x9f5a01f3
	...
    372c:	0094                	addi	a3,sp,64
    372e:	0000                	unimp
    for (str = buf; *fmt; fmt++)
    3730:	00ac                	addi	a1,sp,72
    3732:	0000                	unimp
    3734:	0001                	nop
    3736:	0000ac5b          	0xac5b
    373a:	d800                	sw	s0,48(s0)
    373c:	0000                	unimp
    373e:	0400                	addi	s0,sp,512
        *str++ = ' ';
    3740:	f300                	fsw	fs0,32(a4)
    3742:	5b01                	li	s6,-32
    3744:	d89f 0000 e800      	0xe8000000d89f
    374a:	0000                	unimp
                if (*fmt)
    374c:	0100                	addi	s0,sp,128
    374e:	5a00                	lw	s0,48(a2)
    3750:	0114                	addi	a3,sp,128
    3752:	0000                	unimp
    3754:	0118                	addi	a4,sp,128
    3756:	0000                	unimp
                    *str++ = *fmt;
    3758:	0001                	nop
    375a:	005a                	c.slli	zero,0x16
                if (*fmt)
    375c:	0000                	unimp
    375e:	0000                	unimp
                    *str++ = *fmt;
    3760:	0000                	unimp
    3762:	a400                	fsd	fs0,8(s0)
                    flags |= ZEROPAD;
    3764:	0000                	unimp
    3766:	b800                	fsd	fs0,48(s0)
                    field_width = 2 * sizeof(void *);
    3768:	0000                	unimp
    376a:	0100                	addi	s0,sp,128
    376c:	5a00                	lw	s0,48(a2)
    376e:	00bc                	addi	a5,sp,72
                    s = "<NULL>";
    3770:	0000                	unimp
    3772:	00d0                	addi	a2,sp,68
    3774:	0000                	unimp
    3776:	007a0007          	0x7a0007
    377a:	010a                	slli	sp,sp,0x2
                    while (--field_width > 0)
    377c:	2720                	fld	fs0,72(a4)
    377e:	d49f 0000 d800      	0xd8000000d49f
                        *str++ = ' ';
    3784:	0000                	unimp
    3786:	0100                	addi	s0,sp,128
    3788:	5a00                	lw	s0,48(a2)
	...
    3792:	00a4                	addi	s1,sp,72
    3794:	0000                	unimp
    3796:	00d8                	addi	a4,sp,68
    3798:	0000                	unimp
    379a:	0001                	nop
                    while (len < field_width--)
    379c:	005c                	addi	a5,sp,4
    379e:	0000                	unimp
    37a0:	0000                	unimp
    37a2:	0000                	unimp
                        *str++ = ' ';
    37a4:	a400                	fsd	fs0,8(s0)
    37a6:	0000                	unimp
    37a8:	ac00                	fsd	fs0,24(s0)
    37aa:	0000                	unimp
    37ac:	0200                	addi	s0,sp,256
    37ae:	3000                	fld	fs0,32(s0)
    37b0:	ac9f 0000 b400      	0xb4000000ac9f
    37b6:	0000                	unimp
    37b8:	0500                	addi	s0,sp,640
    37ba:	3800                	fld	fs0,48(s0)
    37bc:	007f                	0x7f
    37be:	9f1c                	0x9f1c
	...
    37c8:	00bc                	addi	a5,sp,72
    37ca:	0000                	unimp
    37cc:	00d4                	addi	a3,sp,68
    37ce:	0000                	unimp
                flags |= SIGN;
    37d0:	0001                	nop
    37d2:	005e                	c.slli	zero,0x17
        base = 10;
    37d4:	0000                	unimp
    37d6:	0000                	unimp
                *str++ = (unsigned char)va_arg(args, int);
    37d8:	0000                	unimp
    37da:	bc00                	fsd	fs0,56(s0)
        str = number(str, num, base, field_width, precision, flags);
    37dc:	0000                	unimp
    37de:	d400                	sw	s0,40(s0)
    37e0:	0000                	unimp
    37e2:	0200                	addi	s0,sp,256
    37e4:	3100                	fld	fs0,32(a0)
    37e6:	009f 0000 0000      	0x9f
    for (str = buf; *fmt; fmt++)
    37ec:	0000                	unimp
    37ee:	e000                	fsw	fs0,0(s0)
        str = number(str, num, base, field_width, precision, flags);
    37f0:	0000                	unimp
    37f2:	f400                	fsw	fs0,40(s0)
    for (str = buf; *fmt; fmt++)
    37f4:	0000                	unimp
    37f6:	0100                	addi	s0,sp,128
    37f8:	5a00                	lw	s0,48(a2)
    37fa:	00f8                	addi	a4,sp,76
    37fc:	0000                	unimp
    37fe:	010c                	addi	a1,sp,128
                flags |= UPPERCASE;
    3800:	0000                	unimp
    3802:	007a0007          	0x7a0007
                base = 16;
    3806:	010a                	slli	sp,sp,0x2
    3808:	2720                	fld	fs0,72(a4)
    380a:	109f 0001 1400      	0x14000001109f
                break;
    3810:	0001                	nop
    3812:	0100                	addi	s0,sp,128
                s = va_arg(args, char *);
    3814:	5a00                	lw	s0,48(a2)
	...
                *str++ = (unsigned char)va_arg(args, int);
    381e:	00e0                	addi	s0,sp,76
    3820:	0000                	unimp
    3822:	0114                	addi	a3,sp,128
    for (str = buf; *fmt; fmt++)
    3824:	0000                	unimp
    3826:	0001                	nop
    3828:	005d                	c.nop	23
    382a:	0000                	unimp
    382c:	0000                	unimp
    382e:	0000                	unimp
                flags |= SIGN;
    3830:	e000                	fsw	fs0,0(s0)
    3832:	0000                	unimp
                *str++ = (unsigned char)va_arg(args, int);
    3834:	e800                	fsw	fs0,16(s0)
    3836:	0000                	unimp
    3838:	0200                	addi	s0,sp,256
    383a:	3000                	fld	fs0,32(s0)
        base = 10;
    383c:	e89f 0000 f000      	0xf0000000e89f
    3842:	0000                	unimp
                base = 16;
    3844:	0500                	addi	s0,sp,640
    3846:	3800                	fld	fs0,48(s0)
    3848:	007f                	0x7f
    384a:	9f1c                	0x9f1c
	...
                *str++ = (unsigned char)va_arg(args, int);
    3854:	00f8                	addi	a4,sp,76
    3856:	0000                	unimp
    3858:	0110                	addi	a2,sp,128
    385a:	0000                	unimp
    385c:	0001                	nop
    385e:	005e                	c.slli	zero,0x17
    3860:	0000                	unimp
    3862:	0000                	unimp
    3864:	0000                	unimp
    3866:	f800                	fsw	fs0,48(s0)
    3868:	0000                	unimp
    386a:	1000                	addi	s0,sp,32
                base = 8;
    386c:	0001                	nop
    386e:	0200                	addi	s0,sp,256
    3870:	3100                	fld	fs0,32(a0)
    3872:	009f 0000 0000      	0x9f
                flags |= UPPERCASE;
    3878:	0000                	unimp
    387a:	2400                	fld	fs0,8(s0)
                *str++ = (unsigned char)va_arg(args, int);
    387c:	0002                	c.slli64	zero
    387e:	3400                	fld	fs0,40(s0)
    3880:	0002                	c.slli64	zero
    3882:	0100                	addi	s0,sp,128
    3884:	5a00                	lw	s0,48(a2)
    3886:	0234                	addi	a3,sp,264
    3888:	0000                	unimp
    388a:	02b0                	addi	a2,sp,328
    388c:	0000                	unimp
    388e:	0004                	0x4
                base = 16;
    3890:	9f5a01f3          	0x9f5a01f3
	...
                *str++ = (unsigned char)va_arg(args, int);
    389c:	0224                	addi	s1,sp,264
    389e:	0000                	unimp
    38a0:	0244                	addi	s1,sp,260
    38a2:	0000                	unimp
                base = 16;
    38a4:	0001                	nop
    38a6:	0002445b          	0x2445b
    38aa:	b000                	fsd	fs0,32(s0)
                if (!(flags & LEFT))
    38ac:	0002                	c.slli64	zero
    38ae:	0400                	addi	s0,sp,512
    38b0:	f300                	fsw	fs0,32(a4)
    38b2:	5b01                	li	s6,-32
    return sc - s;
    38b4:	009f 0000 0000      	0x9f
    38ba:	0000                	unimp
                *str++ = (unsigned char)va_arg(args, int);
    38bc:	3800                	fld	fs0,48(s0)
    38be:	0002                	c.slli64	zero
    38c0:	4400                	lw	s0,8(s0)
    38c2:	0002                	c.slli64	zero
    38c4:	0100                	addi	s0,sp,128
    38c6:	5a00                	lw	s0,48(a2)
    38c8:	0270                	addi	a2,sp,268
    38ca:	0000                	unimp
    for (str = buf; *fmt; fmt++)
    38cc:	0280                	addi	s0,sp,320
    38ce:	0000                	unimp
    38d0:	0001                	nop
    38d2:	005a                	c.slli	zero,0x16
    38d4:	0000                	unimp
    38d6:	0000                	unimp
    38d8:	0000                	unimp
    38da:	3800                	fld	fs0,48(s0)
    38dc:	0002                	c.slli64	zero
    38de:	8000                	0x8000
                    while (len < field_width--)
    38e0:	0002                	c.slli64	zero
    38e2:	0100                	addi	s0,sp,128
    38e4:	5c00                	lw	s0,56(s0)
	...
                    *str++ = *fmt;
    38ee:	023c                	addi	a5,sp,264
    38f0:	0000                	unimp
    38f2:	0250                	addi	a2,sp,260
        while (len < size--)
    38f4:	0000                	unimp
    38f6:	0001                	nop
        while (len < size--)
    38f8:	545a                	lw	s0,180(sp)
    38fa:	0002                	c.slli64	zero
        while (len < size--)
    38fc:	6800                	flw	fs0,16(s0)
    38fe:	0002                	c.slli64	zero
    3900:	0700                	addi	s0,sp,896
    3902:	7a00                	flw	fs0,48(a2)
    3904:	0a00                	addi	s0,sp,272
    3906:	2001                	jal	3906 <ee_printf+0x8d2>
    3908:	026c9f27          	fsh	ft6,62(s9)
    390c:	0000                	unimp
    390e:	0270                	addi	a2,sp,268
    3910:	0000                	unimp
    3912:	0001                	nop
    3914:	005a                	c.slli	zero,0x16
    3916:	0000                	unimp
    3918:	0000                	unimp
    391a:	0000                	unimp
    391c:	3c00                	fld	fs0,56(s0)
    391e:	0002                	c.slli64	zero
    3920:	7000                	flw	fs0,32(s0)
    3922:	0002                	c.slli64	zero
    3924:	0100                	addi	s0,sp,128
    3926:	5d00                	lw	s0,56(a0)
	...
    3930:	023c                	addi	a5,sp,264
    3932:	0000                	unimp
    3934:	0244                	addi	s1,sp,260
    3936:	0000                	unimp
    3938:	0002                	c.slli64	zero
    393a:	9f30                	0x9f30
    393c:	0244                	addi	s1,sp,260
    393e:	0000                	unimp
    3940:	024c                	addi	a1,sp,260
    3942:	0000                	unimp
    3944:	0005                	c.nop	1
    3946:	7f38                	flw	fa4,120(a4)
    3948:	1c00                	addi	s0,sp,560
    394a:	009f 0000 0000      	0x9f
    3950:	0000                	unimp
    3952:	5400                	lw	s0,40(s0)
    3954:	0002                	c.slli64	zero
    3956:	6c00                	flw	fs0,24(s0)
    3958:	0002                	c.slli64	zero
    395a:	0100                	addi	s0,sp,128
    395c:	5e00                	lw	s0,56(a2)
	...
    3966:	0254                	addi	a3,sp,260
    3968:	0000                	unimp
    396a:	026c                	addi	a1,sp,268
    396c:	0000                	unimp
    396e:	0002                	c.slli64	zero
    3970:	9f31                	0x9f31
	...
    397a:	0278                	addi	a4,sp,268
    397c:	0000                	unimp
    397e:	028c                	addi	a1,sp,320
    3980:	0000                	unimp
    3982:	0001                	nop
    3984:	905a                	c.add	zero,s6
    3986:	0002                	c.slli64	zero
    3988:	a400                	fsd	fs0,8(s0)
    398a:	0002                	c.slli64	zero
    398c:	0700                	addi	s0,sp,896
    398e:	7a00                	flw	fs0,48(a2)
    3990:	0a00                	addi	s0,sp,272
    3992:	2001                	jal	3992 <__adddf3+0x7e>
    3994:	02a89f27          	fsh	fa0,62(a7)
    3998:	0000                	unimp
    399a:	02ac                	addi	a1,sp,328
    399c:	0000                	unimp
    399e:	0001                	nop
    39a0:	005a                	c.slli	zero,0x16
    39a2:	0000                	unimp
    39a4:	0000                	unimp
    39a6:	0000                	unimp
    39a8:	7800                	flw	fs0,48(s0)
    39aa:	0002                	c.slli64	zero
    39ac:	ac00                	fsd	fs0,24(s0)
    39ae:	0002                	c.slli64	zero
    39b0:	0100                	addi	s0,sp,128
    39b2:	5d00                	lw	s0,56(a0)
	...
    39bc:	0278                	addi	a4,sp,268
    39be:	0000                	unimp
    39c0:	0280                	addi	s0,sp,320
    39c2:	0000                	unimp
    39c4:	0002                	c.slli64	zero
    39c6:	9f30                	0x9f30
    39c8:	0280                	addi	s0,sp,320
    39ca:	0000                	unimp
    39cc:	0288                	addi	a0,sp,320
    39ce:	0000                	unimp
    39d0:	0005                	c.nop	1
    39d2:	7f38                	flw	fa4,120(a4)
    39d4:	1c00                	addi	s0,sp,560
    39d6:	009f 0000 0000      	0x9f
    39dc:	0000                	unimp
    39de:	9000                	0x9000
    39e0:	0002                	c.slli64	zero
    39e2:	a800                	fsd	fs0,16(s0)
    39e4:	0002                	c.slli64	zero
    39e6:	0100                	addi	s0,sp,128
    39e8:	5e00                	lw	s0,56(a2)
	...
    39f2:	0290                	addi	a2,sp,320
    39f4:	0000                	unimp
    39f6:	02a8                	addi	a0,sp,328
    39f8:	0000                	unimp
    39fa:	0002                	c.slli64	zero
    39fc:	9f31                	0x9f31
	...
    3a06:	03fc                	addi	a5,sp,460
    3a08:	0000                	unimp
    3a0a:	00000403          	lb	s0,0(zero) # 0 <RAM_START_ADDRESS>
    3a0e:	0006                	c.slli	zero,0x1
    3a10:	935a                	add	t1,t1,s6
    3a12:	5b04                	lw	s1,48(a4)
    3a14:	04030493          	addi	s1,t1,64
    3a18:	0000                	unimp
    3a1a:	0404                	addi	s1,sp,512
    3a1c:	0000                	unimp
    3a1e:	0006                	c.slli	zero,0x1
    3a20:	0af503f3          	0xaf503f3
    3a24:	9f25                	0x9f25
	...
    3a2e:	03fc                	addi	a5,sp,460
    3a30:	0000                	unimp
    3a32:	00000403          	lb	s0,0(zero) # 0 <RAM_START_ADDRESS>
    3a36:	0001                	nop
    3a38:	035c                	addi	a5,sp,388
    3a3a:	0004                	0x4
    3a3c:	0400                	addi	s0,sp,512
    3a3e:	0004                	0x4
    3a40:	0400                	addi	s0,sp,512
    3a42:	f300                	fsw	fs0,32(a4)
    3a44:	5c01                	li	s8,-32
    3a46:	009f 0000 0000      	0x9f
    3a4c:	0000                	unimp
    3a4e:	fc00                	fsw	fs0,56(s0)
    3a50:	03000003          	lb	zero,48(zero) # 30 <_start+0x20>
    3a54:	0004                	0x4
    3a56:	0100                	addi	s0,sp,128
    3a58:	5d00                	lw	s0,56(a0)
    3a5a:	00000403          	lb	s0,0(zero) # 0 <RAM_START_ADDRESS>
    3a5e:	0404                	addi	s1,sp,512
    3a60:	0000                	unimp
    3a62:	0004                	0x4
    3a64:	9f5d01f3          	0x9f5d01f3
	...
    3a70:	03fc                	addi	a5,sp,460
    3a72:	0000                	unimp
    3a74:	00000403          	lb	s0,0(zero) # 0 <RAM_START_ADDRESS>
    3a78:	0001                	nop
    3a7a:	035e                	slli	t1,t1,0x17
    3a7c:	0004                	0x4
    3a7e:	0400                	addi	s0,sp,512
    3a80:	0004                	0x4
    3a82:	0400                	addi	s0,sp,512
    3a84:	f300                	fsw	fs0,32(a4)
    3a86:	5e01                	li	t3,-32
    3a88:	009f 0000 0000      	0x9f
    3a8e:	0000                	unimp
    3a90:	fc00                	fsw	fs0,56(s0)
    3a92:	03000003          	lb	zero,48(zero) # 30 <_start+0x20>
    3a96:	0004                	0x4
    3a98:	0100                	addi	s0,sp,128
    3a9a:	5f00                	lw	s0,56(a4)
    3a9c:	00000403          	lb	s0,0(zero) # 0 <RAM_START_ADDRESS>
    3aa0:	0404                	addi	s1,sp,512
    3aa2:	0000                	unimp
    3aa4:	0004                	0x4
    3aa6:	9f5f01f3          	0x9f5f01f3
	...
    3ab2:	03f0                	addi	a2,sp,460
    3ab4:	0000                	unimp
    3ab6:	000003fb          	0x3fb
    3aba:	0006                	c.slli	zero,0x1
    3abc:	935a                	add	t1,t1,s6
    3abe:	5b04                	lw	s1,48(a4)
    3ac0:	03fb0493          	addi	s1,s6,63 # 1011d83 <RAM_SIZE+0x1001d83>
    3ac4:	0000                	unimp
    3ac6:	03fc                	addi	a5,sp,460
    3ac8:	0000                	unimp
    3aca:	0006                	c.slli	zero,0x1
    3acc:	0af503f3          	0xaf503f3
    3ad0:	9f25                	0x9f25
	...
    3ada:	03f0                	addi	a2,sp,460
    3adc:	0000                	unimp
    3ade:	000003fb          	0x3fb
    3ae2:	0001                	nop
    3ae4:	fb5c                	fsw	fa5,52(a4)
    3ae6:	fc000003          	lb	zero,-64(zero) # ffffffc0 <RAM_SIZE+0xfffeffc0>
    3aea:	04000003          	lb	zero,64(zero) # 40 <_start+0x30>
    3aee:	f300                	fsw	fs0,32(a4)
    3af0:	5c01                	li	s8,-32
    3af2:	009f 0000 0000      	0x9f
    3af8:	0000                	unimp
    3afa:	f000                	fsw	fs0,32(s0)
    3afc:	fb000003          	lb	zero,-80(zero) # ffffffb0 <RAM_SIZE+0xfffeffb0>
    3b00:	01000003          	lb	zero,16(zero) # 10 <_start>
    3b04:	5d00                	lw	s0,56(a0)
    3b06:	000003fb          	0x3fb
    3b0a:	03fc                	addi	a5,sp,460
    3b0c:	0000                	unimp
    3b0e:	0004                	0x4
    3b10:	9f5d01f3          	0x9f5d01f3
	...
    3b1c:	03f0                	addi	a2,sp,460
    3b1e:	0000                	unimp
    3b20:	000003fb          	0x3fb
    3b24:	0001                	nop
    3b26:	fb5e                	fsw	fs7,180(sp)
    3b28:	fc000003          	lb	zero,-64(zero) # ffffffc0 <RAM_SIZE+0xfffeffc0>
    3b2c:	04000003          	lb	zero,64(zero) # 40 <_start+0x30>
    3b30:	f300                	fsw	fs0,32(a4)
    3b32:	5e01                	li	t3,-32
    3b34:	009f 0000 0000      	0x9f
    3b3a:	0000                	unimp
    3b3c:	e800                	fsw	fs0,16(s0)
    3b3e:	ef000003          	lb	zero,-272(zero) # fffffef0 <RAM_SIZE+0xfffefef0>
    3b42:	06000003          	lb	zero,96(zero) # 60 <__do_global_dtors_aux+0x4>
    3b46:	5a00                	lw	s0,48(a2)
    3b48:	935b0493          	addi	s1,s6,-1739
    3b4c:	ef04                	fsw	fs1,24(a4)
    3b4e:	f0000003          	lb	zero,-256(zero) # ffffff00 <RAM_SIZE+0xfffeff00>
    3b52:	06000003          	lb	zero,96(zero) # 60 <__do_global_dtors_aux+0x4>
    3b56:	f300                	fsw	fs0,32(a4)
    3b58:	250af503          	0x250af503
    3b5c:	009f 0000 0000      	0x9f
    3b62:	0000                	unimp
    3b64:	e800                	fsw	fs0,16(s0)
    3b66:	ef000003          	lb	zero,-272(zero) # fffffef0 <RAM_SIZE+0xfffefef0>
    3b6a:	01000003          	lb	zero,16(zero) # 10 <_start>
    3b6e:	5c00                	lw	s0,56(s0)
    3b70:	000003ef          	jal	t2,3b70 <__adddf3+0x25c>
    3b74:	03f0                	addi	a2,sp,460
    3b76:	0000                	unimp
    3b78:	0004                	0x4
    3b7a:	9f5c01f3          	0x9f5c01f3
	...
    3b86:	03e8                	addi	a0,sp,460
    3b88:	0000                	unimp
    3b8a:	000003ef          	jal	t2,3b8a <__adddf3+0x276>
    3b8e:	0001                	nop
    3b90:	ef5d                	bnez	a4,3c4e <__adddf3+0x33a>
    3b92:	f0000003          	lb	zero,-256(zero) # ffffff00 <RAM_SIZE+0xfffeff00>
    3b96:	04000003          	lb	zero,64(zero) # 40 <_start+0x30>
    3b9a:	f300                	fsw	fs0,32(a4)
    3b9c:	5d01                	li	s10,-32
    3b9e:	009f 0000 0000      	0x9f
    3ba4:	0000                	unimp
    3ba6:	e800                	fsw	fs0,16(s0)
    3ba8:	ef000003          	lb	zero,-272(zero) # fffffef0 <RAM_SIZE+0xfffefef0>
    3bac:	01000003          	lb	zero,16(zero) # 10 <_start>
    3bb0:	5e00                	lw	s0,56(a2)
    3bb2:	000003ef          	jal	t2,3bb2 <__adddf3+0x29e>
    3bb6:	03f0                	addi	a2,sp,460
    3bb8:	0000                	unimp
    3bba:	0004                	0x4
    3bbc:	9f5e01f3          	0x9f5e01f3
	...
    3bc8:	03e8                	addi	a0,sp,460
    3bca:	0000                	unimp
    3bcc:	000003ef          	jal	t2,3bcc <__adddf3+0x2b8>
    3bd0:	0001                	nop
    3bd2:	ef5f 0003 f000      	0xf0000003ef5f
    3bd8:	04000003          	lb	zero,64(zero) # 40 <_start+0x30>
    3bdc:	f300                	fsw	fs0,32(a4)
    3bde:	5f01                	li	t5,-32
    3be0:	009f 0000 0000      	0x9f
    3be6:	0000                	unimp
    3be8:	dc00                	sw	s0,56(s0)
    3bea:	e7000003          	lb	zero,-400(zero) # fffffe70 <RAM_SIZE+0xfffefe70>
    3bee:	06000003          	lb	zero,96(zero) # 60 <__do_global_dtors_aux+0x4>
    3bf2:	5a00                	lw	s0,48(a2)
    3bf4:	935b0493          	addi	s1,s6,-1739
    3bf8:	e704                	fsw	fs1,8(a4)
    3bfa:	e8000003          	lb	zero,-384(zero) # fffffe80 <RAM_SIZE+0xfffefe80>
    3bfe:	06000003          	lb	zero,96(zero) # 60 <__do_global_dtors_aux+0x4>
    3c02:	f300                	fsw	fs0,32(a4)
    3c04:	250af503          	0x250af503
    3c08:	009f 0000 0000      	0x9f
    3c0e:	0000                	unimp
    3c10:	dc00                	sw	s0,56(s0)
    3c12:	e7000003          	lb	zero,-400(zero) # fffffe70 <RAM_SIZE+0xfffefe70>
    3c16:	01000003          	lb	zero,16(zero) # 10 <_start>
    3c1a:	5c00                	lw	s0,56(s0)
    3c1c:	000003e7          	jalr	t2,zero # 0 <RAM_START_ADDRESS>
    3c20:	03e8                	addi	a0,sp,460
    3c22:	0000                	unimp
    3c24:	0004                	0x4
    3c26:	9f5c01f3          	0x9f5c01f3
	...
    3c32:	03dc                	addi	a5,sp,452
    3c34:	0000                	unimp
    3c36:	000003e7          	jalr	t2,zero # 0 <RAM_START_ADDRESS>
    3c3a:	0001                	nop
    3c3c:	e75d                	bnez	a4,3cea <__adddf3+0x3d6>
    3c3e:	e8000003          	lb	zero,-384(zero) # fffffe80 <RAM_SIZE+0xfffefe80>
    3c42:	04000003          	lb	zero,64(zero) # 40 <_start+0x30>
    3c46:	f300                	fsw	fs0,32(a4)
    3c48:	5d01                	li	s10,-32
    3c4a:	009f 0000 0000      	0x9f
    3c50:	0000                	unimp
    3c52:	dc00                	sw	s0,56(s0)
    3c54:	e7000003          	lb	zero,-400(zero) # fffffe70 <RAM_SIZE+0xfffefe70>
    3c58:	01000003          	lb	zero,16(zero) # 10 <_start>
    3c5c:	5e00                	lw	s0,56(a2)
    3c5e:	000003e7          	jalr	t2,zero # 0 <RAM_START_ADDRESS>
    3c62:	03e8                	addi	a0,sp,460
    3c64:	0000                	unimp
    3c66:	0004                	0x4
    3c68:	9f5e01f3          	0x9f5e01f3
	...
    3c78:	0060                	addi	s0,sp,12
    3c7a:	0000                	unimp
    3c7c:	0006                	c.slli	zero,0x1
    3c7e:	935a                	add	t1,t1,s6
    3c80:	5b04                	lw	s1,48(a4)
    3c82:	00600493          	li	s1,6
    3c86:	0000                	unimp
    3c88:	007c                	addi	a5,sp,12
    3c8a:	0000                	unimp
    3c8c:	0006                	c.slli	zero,0x1
    3c8e:	0af503f3          	0xaf503f3
    3c92:	9f25                	0x9f25
    3c94:	007c                	addi	a5,sp,12
    3c96:	0000                	unimp
    3c98:	00a4                	addi	s1,sp,72
    3c9a:	0000                	unimp
    3c9c:	0006                	c.slli	zero,0x1
    3c9e:	9362                	add	t1,t1,s8
    3ca0:	5804                	lw	s1,48(s0)
    3ca2:	00a80493          	addi	s1,a6,10 # 1b00a <RAM_SIZE+0xb00a>
    3ca6:	0000                	unimp
    3ca8:	01d0                	addi	a2,sp,196
    3caa:	0000                	unimp
    3cac:	0006                	c.slli	zero,0x1
    3cae:	9358                	0x9358
    3cb0:	5904                	lw	s1,48(a0)
    3cb2:	01d00493          	li	s1,29
    3cb6:	0000                	unimp
    3cb8:	000001d7          	vadd.vv	v3,v0,v0,v0.t
    3cbc:	0006                	c.slli	zero,0x1
    3cbe:	935a                	add	t1,t1,s6
    3cc0:	5b04                	lw	s1,48(a4)
    3cc2:	01e80493          	addi	s1,a6,30
    3cc6:	0000                	unimp
    3cc8:	01fc                	addi	a5,sp,204
    3cca:	0000                	unimp
    3ccc:	0006                	c.slli	zero,0x1
    3cce:	9358                	0x9358
    3cd0:	5904                	lw	s1,48(a0)
    3cd2:	028c0493          	addi	s1,s8,40 # 17028 <RAM_SIZE+0x7028>
    3cd6:	0000                	unimp
    3cd8:	029c                	addi	a5,sp,320
    3cda:	0000                	unimp
    3cdc:	0006                	c.slli	zero,0x1
    3cde:	935a                	add	t1,t1,s6
    3ce0:	5b04                	lw	s1,48(a4)
    3ce2:	029c0493          	addi	s1,s8,41
    3ce6:	0000                	unimp
    3ce8:	02c4                	addi	s1,sp,324
    3cea:	0000                	unimp
    3cec:	0006                	c.slli	zero,0x1
    3cee:	0af503f3          	0xaf503f3
    3cf2:	9f25                	0x9f25
    3cf4:	02c4                	addi	s1,sp,324
    3cf6:	0000                	unimp
    3cf8:	02c8                	addi	a0,sp,324
    3cfa:	0000                	unimp
    3cfc:	0006                	c.slli	zero,0x1
    3cfe:	9362                	add	t1,t1,s8
    3d00:	5804                	lw	s1,48(s0)
    3d02:	03040493          	addi	s1,s0,48
    3d06:	0000                	unimp
    3d08:	0370                	addi	a2,sp,396
    3d0a:	0000                	unimp
    3d0c:	0006                	c.slli	zero,0x1
    3d0e:	9358                	0x9358
    3d10:	5904                	lw	s1,48(a0)
    3d12:	03700493          	li	s1,55
    3d16:	0000                	unimp
    3d18:	0398                	addi	a4,sp,448
    3d1a:	0000                	unimp
    3d1c:	0006                	c.slli	zero,0x1
    3d1e:	936a                	add	t1,t1,s10
    3d20:	6b04                	flw	fs1,16(a4)
    3d22:	03980493          	addi	s1,a6,57
    3d26:	0000                	unimp
    3d28:	039c                	addi	a5,sp,448
    3d2a:	0000                	unimp
    3d2c:	0006                	c.slli	zero,0x1
    3d2e:	9358                	0x9358
    3d30:	6b04                	flw	fs1,16(a4)
    3d32:	039c0493          	addi	s1,s8,57
    3d36:	0000                	unimp
    3d38:	03a4                	addi	s1,sp,456
    3d3a:	0000                	unimp
    3d3c:	0006                	c.slli	zero,0x1
    3d3e:	9358                	0x9358
    3d40:	5904                	lw	s1,48(a0)
    3d42:	03b80493          	addi	s1,a6,59
    3d46:	0000                	unimp
    3d48:	03c0                	addi	s0,sp,452
    3d4a:	0000                	unimp
    3d4c:	0006                	c.slli	zero,0x1
    3d4e:	9358                	0x9358
    3d50:	5904                	lw	s1,48(a0)
    3d52:	03c80493          	addi	s1,a6,60
    3d56:	0000                	unimp
    3d58:	03d4                	addi	a3,sp,452
    3d5a:	0000                	unimp
    3d5c:	0006                	c.slli	zero,0x1
    3d5e:	9358                	0x9358
    3d60:	5904                	lw	s1,48(a0)
    3d62:	00000493          	li	s1,0
	...
    3d6e:	0000                	unimp
    3d70:	0058                	addi	a4,sp,4
    3d72:	0000                	unimp
    3d74:	0001                	nop
    3d76:	585c                	lw	a5,52(s0)
    3d78:	0000                	unimp
    3d7a:	7000                	flw	fs0,32(s0)
    3d7c:	0000                	unimp
    3d7e:	0300                	addi	s0,sp,384
    3d80:	9100                	0x9100
    3d82:	7fac                	flw	fa1,120(a5)
    3d84:	028c                	addi	a1,sp,320
    3d86:	0000                	unimp
    3d88:	02a4                	addi	s1,sp,328
    3d8a:	0000                	unimp
    3d8c:	0001                	nop
    3d8e:	a45c                	fsd	fa5,136(s0)
    3d90:	0002                	c.slli64	zero
    3d92:	ac00                	fsd	fs0,24(s0)
    3d94:	0002                	c.slli64	zero
    3d96:	0400                	addi	s0,sp,512
    3d98:	f300                	fsw	fs0,32(a4)
    3d9a:	5c01                	li	s8,-32
    3d9c:	ac9f 0002 af00      	0xaf000002ac9f
    3da2:	0002                	c.slli64	zero
    3da4:	0100                	addi	s0,sp,128
    3da6:	5f00                	lw	s0,56(a4)
    3da8:	000002af          	vamoaddei8.v	zero,(zero),v0,v5,v0.t
    3dac:	02b4                	addi	a3,sp,328
    3dae:	0000                	unimp
    3db0:	ac910003          	lb	zero,-1335(sp)
    3db4:	007f                	0x7f
	...
    3dbe:	0000                	unimp
    3dc0:	6c00                	flw	fs0,24(s0)
    3dc2:	0000                	unimp
    3dc4:	0100                	addi	s0,sp,128
    3dc6:	5d00                	lw	s0,56(a0)
    3dc8:	006c                	addi	a1,sp,12
    3dca:	0000                	unimp
    3dcc:	0274                	addi	a3,sp,268
    3dce:	0000                	unimp
    3dd0:	0001                	nop
    3dd2:	7469                	lui	s0,0xffffa
    3dd4:	0002                	c.slli64	zero
    3dd6:	8c00                	0x8c00
    3dd8:	0002                	c.slli64	zero
    3dda:	0400                	addi	s0,sp,512
    3ddc:	f300                	fsw	fs0,32(a4)
    3dde:	5d01                	li	s10,-32
    3de0:	8c9f 0002 a800      	0xa80000028c9f
    3de6:	0002                	c.slli64	zero
    3de8:	0100                	addi	s0,sp,128
    3dea:	5d00                	lw	s0,56(a0)
    3dec:	02a8                	addi	a0,sp,328
    3dee:	0000                	unimp
    3df0:	03dc                	addi	a5,sp,452
    3df2:	0000                	unimp
    3df4:	0001                	nop
    3df6:	0069                	c.nop	26
	...
    3e00:	0000                	unimp
    3e02:	7300                	flw	fs0,32(a4)
    3e04:	0000                	unimp
    3e06:	0100                	addi	s0,sp,128
    3e08:	5e00                	lw	s0,56(a2)
    3e0a:	00000073          	ecall
    3e0e:	0098                	addi	a4,sp,64
    3e10:	0000                	unimp
    3e12:	0001                	nop
    3e14:	9859                	andi	s0,s0,-10
    3e16:	0000                	unimp
    3e18:	8c00                	0x8c00
    3e1a:	0002                	c.slli64	zero
    3e1c:	0400                	addi	s0,sp,512
    3e1e:	f300                	fsw	fs0,32(a4)
    3e20:	5e01                	li	t3,-32
    3e22:	8c9f 0002 c800      	0xc80000028c9f
    3e28:	0002                	c.slli64	zero
    3e2a:	0100                	addi	s0,sp,128
    3e2c:	5900                	lw	s0,48(a0)
    3e2e:	02c8                	addi	a0,sp,324
    3e30:	0000                	unimp
    3e32:	03dc                	addi	a5,sp,452
    3e34:	0000                	unimp
    3e36:	0004                	0x4
    3e38:	9f5e01f3          	0x9f5e01f3
	...
    3e48:	005c                	addi	a5,sp,4
    3e4a:	0000                	unimp
    3e4c:	0001                	nop
    3e4e:	5c5f 0000 8400      	0x840000005c5f
    3e54:	0002                	c.slli64	zero
    3e56:	0100                	addi	s0,sp,128
    3e58:	6300                	flw	fs0,0(a4)
    3e5a:	0284                	addi	s1,sp,320
    3e5c:	0000                	unimp
    3e5e:	028c                	addi	a1,sp,320
    3e60:	0000                	unimp
    3e62:	0001                	nop
    3e64:	8c5a                	mv	s8,s6
    3e66:	0002                	c.slli64	zero
    3e68:	9800                	0x9800
    3e6a:	0002                	c.slli64	zero
    3e6c:	0100                	addi	s0,sp,128
    3e6e:	5f00                	lw	s0,56(a4)
    3e70:	0298                	addi	a4,sp,320
    3e72:	0000                	unimp
    3e74:	03dc                	addi	a5,sp,452
    3e76:	0000                	unimp
    3e78:	0001                	nop
    3e7a:	00000063          	beqz	zero,3e7a <__adddf3+0x566>
	...
    3e86:	7300                	flw	fs0,32(a4)
    3e88:	0000                	unimp
    3e8a:	0100                	addi	s0,sp,128
    3e8c:	6000                	flw	fs0,0(s0)
    3e8e:	00000073          	ecall
    3e92:	0288                	addi	a0,sp,320
    3e94:	0000                	unimp
    3e96:	a8910003          	lb	zero,-1399(sp)
    3e9a:	887f                	0x887f
    3e9c:	0002                	c.slli64	zero
    3e9e:	8c00                	0x8c00
    3ea0:	0002                	c.slli64	zero
    3ea2:	0300                	addi	s0,sp,384
    3ea4:	7200                	flw	fs0,32(a2)
    3ea6:	7fa8                	flw	fa0,120(a5)
    3ea8:	028c                	addi	a1,sp,320
    3eaa:	0000                	unimp
    3eac:	000002af          	vamoaddei8.v	zero,(zero),v0,v5,v0.t
    3eb0:	0001                	nop
    3eb2:	af60                	fsd	fs0,216(a4)
    3eb4:	0002                	c.slli64	zero
    3eb6:	dc00                	sw	s0,56(s0)
    3eb8:	03000003          	lb	zero,48(zero) # 30 <_start+0x20>
    3ebc:	9100                	0x9100
    3ebe:	7fa8                	flw	fa0,120(a5)
	...
    3ec8:	0058                	addi	a4,sp,4
    3eca:	0000                	unimp
    3ecc:	00dc                	addi	a5,sp,68
    3ece:	0000                	unimp
    3ed0:	0002                	c.slli64	zero
    3ed2:	9f30                	0x9f30
    3ed4:	00dc                	addi	a5,sp,68
    3ed6:	0000                	unimp
    3ed8:	012c                	addi	a1,sp,136
    3eda:	0000                	unimp
    3edc:	0008                	0x8
    3ede:	008a0083          	lb	ra,8(s4) # 9f1008 <RAM_SIZE+0x9e1008>
    3ee2:	231c                	fld	fa5,0(a4)
    3ee4:	9f50                	0x9f50
    3ee6:	012c                	addi	a1,sp,136
    3ee8:	0000                	unimp
    3eea:	0154                	addi	a3,sp,132
    3eec:	0000                	unimp
    3eee:	0008                	0x8
    3ef0:	008a0083          	lb	ra,8(s4)
    3ef4:	231c                	fld	fa5,0(a4)
    3ef6:	01549f4f          	fnmadd.s	ft10,fs1,fs5,ft0,rtz
    3efa:	0000                	unimp
    3efc:	025c                	addi	a5,sp,260
    3efe:	0000                	unimp
    3f00:	0001                	nop
    3f02:	ac62                	fsd	fs8,24(sp)
    3f04:	0002                	c.slli64	zero
    3f06:	c800                	sw	s0,16(s0)
    3f08:	0002                	c.slli64	zero
    3f0a:	0200                	addi	s0,sp,256
    3f0c:	3000                	fld	fs0,32(s0)
    3f0e:	c89f 0002 0400      	0x4000002c89f
    3f14:	01000003          	lb	zero,16(zero) # 10 <_start>
    3f18:	6200                	flw	fs0,0(a2)
    3f1a:	0304                	addi	s1,sp,384
    3f1c:	0000                	unimp
    3f1e:	0370                	addi	a2,sp,396
    3f20:	0000                	unimp
    3f22:	0002                	c.slli64	zero
    3f24:	9f30                	0x9f30
    3f26:	0370                	addi	a2,sp,396
    3f28:	0000                	unimp
    3f2a:	03c8                	addi	a0,sp,452
    3f2c:	0000                	unimp
    3f2e:	0001                	nop
    3f30:	c862                	sw	s8,16(sp)
    3f32:	d4000003          	lb	zero,-704(zero) # fffffd40 <RAM_SIZE+0xfffefd40>
    3f36:	02000003          	lb	zero,32(zero) # 20 <_start+0x10>
    3f3a:	3000                	fld	fs0,32(s0)
    3f3c:	009f 0000 0000      	0x9f
    3f42:	0000                	unimp
    3f44:	5800                	lw	s0,48(s0)
    3f46:	0000                	unimp
    3f48:	5c00                	lw	s0,56(s0)
    3f4a:	0000                	unimp
    3f4c:	0100                	addi	s0,sp,128
    3f4e:	5f00                	lw	s0,56(a4)
    3f50:	005c                	addi	a5,sp,4
    3f52:	0000                	unimp
    3f54:	0168                	addi	a0,sp,140
    3f56:	0000                	unimp
    3f58:	0001                	nop
    3f5a:	00016863          	bltu	sp,zero,3f6a <__adddf3+0x656>
    3f5e:	8400                	0x8400
    3f60:	0001                	nop
    3f62:	0100                	addi	s0,sp,128
    3f64:	5d00                	lw	s0,56(a0)
    3f66:	0184                	addi	s1,sp,192
    3f68:	0000                	unimp
    3f6a:	01ec                	addi	a1,sp,204
    3f6c:	0000                	unimp
    3f6e:	0001                	nop
    3f70:	ec66                	fsw	fs9,24(sp)
    3f72:	0001                	nop
    3f74:	f000                	fsw	fs0,32(s0)
    3f76:	0001                	nop
    3f78:	0300                	addi	s0,sp,384
    3f7a:	8600                	0x8600
    3f7c:	9f7f                	0x9f7f
    3f7e:	01f0                	addi	a2,sp,204
    3f80:	0000                	unimp
    3f82:	0200                	addi	s0,sp,256
    3f84:	0000                	unimp
    3f86:	0001                	nop
    3f88:	0066                	c.slli	zero,0x19
    3f8a:	0002                	c.slli64	zero
    3f8c:	4c00                	lw	s0,24(s0)
    3f8e:	0002                	c.slli64	zero
    3f90:	0100                	addi	s0,sp,128
    3f92:	6700                	flw	fs0,8(a4)
    3f94:	02ac                	addi	a1,sp,328
    3f96:	0000                	unimp
    3f98:	02c8                	addi	a0,sp,324
    3f9a:	0000                	unimp
    3f9c:	0001                	nop
    3f9e:	0002c863          	bltz	t0,3fae <__adddf3+0x69a>
    3fa2:	0400                	addi	s0,sp,512
    3fa4:	01000003          	lb	zero,16(zero) # 10 <_start>
    3fa8:	6700                	flw	fs0,8(a4)
    3faa:	0304                	addi	s1,sp,384
    3fac:	0000                	unimp
    3fae:	03b8                	addi	a4,sp,456
    3fb0:	0000                	unimp
    3fb2:	0001                	nop
    3fb4:	0003b863          	0x3b863
    3fb8:	c800                	sw	s0,16(s0)
    3fba:	01000003          	lb	zero,16(zero) # 10 <_start>
    3fbe:	6600                	flw	fs0,8(a2)
    3fc0:	03c8                	addi	a0,sp,452
    3fc2:	0000                	unimp
    3fc4:	03dc                	addi	a5,sp,452
    3fc6:	0000                	unimp
    3fc8:	0001                	nop
    3fca:	00000063          	beqz	zero,3fca <__adddf3+0x6b6>
    3fce:	0000                	unimp
    3fd0:	0000                	unimp
    3fd2:	b400                	fsd	fs0,40(s0)
    3fd4:	0000                	unimp
    3fd6:	dc00                	sw	s0,56(s0)
    3fd8:	0000                	unimp
    3fda:	0100                	addi	s0,sp,128
    3fdc:	6800                	flw	fs0,16(s0)
    3fde:	00dc                	addi	a5,sp,68
    3fe0:	0000                	unimp
    3fe2:	0184                	addi	s1,sp,192
    3fe4:	0000                	unimp
    3fe6:	0001                	nop
    3fe8:	8c6a                	mv	s8,s10
    3fea:	0001                	nop
    3fec:	2800                	fld	fs0,16(s0)
    3fee:	0002                	c.slli64	zero
    3ff0:	0100                	addi	s0,sp,128
    3ff2:	6700                	flw	fs0,8(a4)
    3ff4:	0228                	addi	a0,sp,264
    3ff6:	0000                	unimp
    3ff8:	0238                	addi	a4,sp,264
    3ffa:	0000                	unimp
    3ffc:	7f7f0003          	lb	zero,2039(t5)
    4000:	389f 0002 4800      	0x48000002389f
    4006:	0002                	c.slli64	zero
    4008:	0100                	addi	s0,sp,128
    400a:	5f00                	lw	s0,56(a4)
    400c:	02c8                	addi	a0,sp,324
    400e:	0000                	unimp
    4010:	02e4                	addi	s1,sp,332
    4012:	0000                	unimp
    4014:	7f7f0003          	lb	zero,2039(t5)
    4018:	e49f 0002 ec00      	0xec000002e49f
    401e:	0002                	c.slli64	zero
    4020:	0100                	addi	s0,sp,128
    4022:	5f00                	lw	s0,56(a4)
    4024:	02ec                	addi	a1,sp,332
    4026:	0000                	unimp
    4028:	02fc                	addi	a5,sp,332
    402a:	0000                	unimp
    402c:	7f7f0003          	lb	zero,2039(t5)
    4030:	fc9f 0002 0400      	0x4000002fc9f
    4036:	01000003          	lb	zero,16(zero) # 10 <_start>
    403a:	5f00                	lw	s0,56(a4)
    403c:	0304                	addi	s1,sp,384
    403e:	0000                	unimp
    4040:	03b8                	addi	a4,sp,456
    4042:	0000                	unimp
    4044:	0001                	nop
    4046:	b868                	fsd	fa0,240(s0)
    4048:	c8000003          	lb	zero,-896(zero) # fffffc80 <RAM_SIZE+0xfffefc80>
    404c:	01000003          	lb	zero,16(zero) # 10 <_start>
    4050:	6700                	flw	fs0,8(a4)
    4052:	03c8                	addi	a0,sp,452
    4054:	0000                	unimp
    4056:	03d4                	addi	a3,sp,452
    4058:	0000                	unimp
    405a:	0001                	nop
    405c:	0068                	addi	a0,sp,12
    405e:	0000                	unimp
    4060:	0000                	unimp
    4062:	0000                	unimp
    4064:	3000                	fld	fs0,32(s0)
    4066:	b8000003          	lb	zero,-1152(zero) # fffffb80 <RAM_SIZE+0xfffefb80>
    406a:	01000003          	lb	zero,16(zero) # 10 <_start>
    406e:	5a00                	lw	s0,48(a2)
    4070:	03b8                	addi	a4,sp,456
    4072:	0000                	unimp
    4074:	0b20                	addi	s0,sp,408
    4076:	0000                	unimp
    4078:	0004                	0x4
    407a:	9f5a01f3          	0x9f5a01f3
    407e:	0b20                	addi	s0,sp,408
    4080:	0000                	unimp
    4082:	0b2c                	addi	a1,sp,408
    4084:	0000                	unimp
    4086:	0001                	nop
    4088:	2c5a                	fld	fs8,400(sp)
    408a:	1000000b          	0x1000000b
    408e:	000c                	0xc
    4090:	0400                	addi	s0,sp,512
    4092:	f300                	fsw	fs0,32(a4)
    4094:	5a01                	li	s4,-32
    4096:	009f 0000 0000      	0x9f
    409c:	0000                	unimp
    409e:	d800                	sw	s0,48(s0)
    40a0:	10000003          	lb	zero,256(zero) # 100 <cmp_idx+0x3c>
    40a4:	0004                	0x4
    40a6:	0100                	addi	s0,sp,128
    40a8:	6200                	flw	fs0,0(a2)
    40aa:	0520                	addi	s0,sp,648
    40ac:	0000                	unimp
    40ae:	0530                	addi	a2,sp,648
    40b0:	0000                	unimp
    40b2:	0001                	nop
    40b4:	0062                	c.slli	zero,0x18
    40b6:	0000                	unimp
    40b8:	0000                	unimp
    40ba:	0000                	unimp
    40bc:	3000                	fld	fs0,32(s0)
    40be:	ec000003          	lb	zero,-320(zero) # fffffec0 <RAM_SIZE+0xfffefec0>
    40c2:	02000003          	lb	zero,32(zero) # 20 <_start+0x10>
    40c6:	3000                	fld	fs0,32(s0)
    40c8:	ec9f 0003 f800      	0xf8000003ec9f
    40ce:	09000003          	lb	zero,144(zero) # 90 <__do_global_dtors_aux+0x34>
    40d2:	8200                	0x8200
    40d4:	9100                	0x9100
    40d6:	1c00                	addi	s0,sp,560
    40d8:	9f08e023          	0x9f08e023
    40dc:	03f8                	addi	a4,sp,460
    40de:	0000                	unimp
    40e0:	0400                	addi	s0,sp,512
    40e2:	0000                	unimp
    40e4:	0001                	nop
    40e6:	3c5a                	fld	fs8,432(sp)
    40e8:	0004                	0x4
    40ea:	1000                	addi	s0,sp,32
    40ec:	000c                	0xc
    40ee:	0200                	addi	s0,sp,256
    40f0:	3000                	fld	fs0,32(s0)
    40f2:	009f 0000 0000      	0x9f
    40f8:	0000                	unimp
    40fa:	9000                	0x9000
    40fc:	d4000003          	lb	zero,-704(zero) # fffffd40 <RAM_SIZE+0xfffefd40>
    4100:	01000003          	lb	zero,16(zero) # 10 <_start>
    4104:	6600                	flw	fs0,8(a2)
    4106:	043c                	addi	a5,sp,520
    4108:	0000                	unimp
    410a:	051c                	addi	a5,sp,640
    410c:	0000                	unimp
    410e:	0001                	nop
    4110:	3066                	fld	ft0,120(sp)
    4112:	0005                	c.nop	1
    4114:	cc00                	sw	s0,24(s0)
    4116:	0005                	c.nop	1
    4118:	0100                	addi	s0,sp,128
    411a:	6600                	flw	fs0,8(a2)
    411c:	05cc                	addi	a1,sp,708
    411e:	0000                	unimp
    4120:	05d0                	addi	a2,sp,708
    4122:	0000                	unimp
    4124:	04860003          	lb	zero,72(a2) # 1a312048 <RAM_SIZE+0x1a302048>
    4128:	d09f 0005 f000      	0xf0000005d09f
    412e:	0005                	c.nop	1
    4130:	0100                	addi	s0,sp,128
    4132:	6600                	flw	fs0,8(a2)
    4134:	05f0                	addi	a2,sp,716
    4136:	0000                	unimp
    4138:	05f4                	addi	a3,sp,716
    413a:	0000                	unimp
    413c:	7c860003          	lb	zero,1992(a2)
    4140:	f49f 0005 6c00      	0x6c000005f49f
    4146:	03000007          	vle8ff.v	v0,(zero)
    414a:	8600                	0x8600
    414c:	9f04                	0x9f04
    414e:	0774                	addi	a3,sp,908
    4150:	0000                	unimp
    4152:	088c                	addi	a1,sp,80
    4154:	0000                	unimp
    4156:	0001                	nop
    4158:	8c66                	mv	s8,s9
    415a:	0008                	0x8
    415c:	f400                	fsw	fs0,40(s0)
    415e:	0008                	0x8
    4160:	0300                	addi	s0,sp,384
    4162:	8600                	0x8600
    4164:	9f04                	0x9f04
    4166:	08f4                	addi	a3,sp,92
    4168:	0000                	unimp
    416a:	0934                	addi	a3,sp,152
    416c:	0000                	unimp
    416e:	0001                	nop
    4170:	3466                	fld	fs0,120(sp)
    4172:	0009                	c.nop	2
    4174:	4800                	lw	s0,16(s0)
    4176:	0009                	c.nop	2
    4178:	0300                	addi	s0,sp,384
    417a:	8600                	0x8600
    417c:	9f04                	0x9f04
    417e:	0948                	addi	a0,sp,148
    4180:	0000                	unimp
    4182:	0950                	addi	a2,sp,148
    4184:	0000                	unimp
    4186:	0001                	nop
    4188:	5066                	0x5066
    418a:	0009                	c.nop	2
    418c:	3400                	fld	fs0,40(s0)
    418e:	000a                	c.slli	zero,0x2
    4190:	0300                	addi	s0,sp,384
    4192:	8600                	0x8600
    4194:	9f04                	0x9f04
    4196:	0a34                	addi	a3,sp,280
    4198:	0000                	unimp
    419a:	0a3c                	addi	a5,sp,280
    419c:	0000                	unimp
    419e:	0001                	nop
    41a0:	3c66                	fld	fs8,120(sp)
    41a2:	000a                	c.slli	zero,0x2
    41a4:	4800                	lw	s0,16(s0)
    41a6:	000a                	c.slli	zero,0x2
    41a8:	0300                	addi	s0,sp,384
    41aa:	8600                	0x8600
    41ac:	9f04                	0x9f04
    41ae:	0a48                	addi	a0,sp,276
    41b0:	0000                	unimp
    41b2:	0ad8                	addi	a4,sp,340
    41b4:	0000                	unimp
    41b6:	0001                	nop
    41b8:	d866                	sw	s9,48(sp)
    41ba:	000a                	c.slli	zero,0x2
    41bc:	e000                	fsw	fs0,0(s0)
    41be:	000a                	c.slli	zero,0x2
    41c0:	0300                	addi	s0,sp,384
    41c2:	8600                	0x8600
    41c4:	9f04                	0x9f04
    41c6:	0ae0                	addi	s0,sp,348
    41c8:	0000                	unimp
    41ca:	0ae4                	addi	s1,sp,348
    41cc:	0000                	unimp
    41ce:	0001                	nop
    41d0:	e45a                	fsw	fs6,8(sp)
    41d2:	000a                	c.slli	zero,0x2
    41d4:	1c00                	addi	s0,sp,560
    41d6:	0100000b          	0x100000b
    41da:	6600                	flw	fs0,8(a2)
    41dc:	0b1c                	addi	a5,sp,400
    41de:	0000                	unimp
    41e0:	0b20                	addi	s0,sp,408
    41e2:	0000                	unimp
    41e4:	7c860003          	lb	zero,1992(a2)
    41e8:	209f 000b 7c00      	0x7c00000b209f
    41ee:	0100000b          	0x100000b
    41f2:	6600                	flw	fs0,8(a2)
    41f4:	0b7c                	addi	a5,sp,412
    41f6:	0000                	unimp
    41f8:	0b84                	addi	s1,sp,464
    41fa:	0000                	unimp
    41fc:	7c860003          	lb	zero,1992(a2)
    4200:	849f 000b f000      	0xf000000b849f
    4206:	0100000b          	0x100000b
    420a:	6600                	flw	fs0,8(a2)
    420c:	0bf0                	addi	a2,sp,476
    420e:	0000                	unimp
    4210:	0c10                	addi	a2,sp,528
    4212:	0000                	unimp
    4214:	04860003          	lb	zero,72(a2)
    4218:	009f 0000 0000      	0x9f
    421e:	0000                	unimp
    4220:	9000                	0x9000
    4222:	b8000003          	lb	zero,-1152(zero) # fffffb80 <RAM_SIZE+0xfffefb80>
    4226:	01000003          	lb	zero,16(zero) # 10 <_start>
    422a:	5a00                	lw	s0,48(a2)
    422c:	03b8                	addi	a4,sp,456
    422e:	0000                	unimp
    4230:	03d0                	addi	a2,sp,452
    4232:	0000                	unimp
    4234:	0001                	nop
    4236:	3c58                	fld	fa4,184(s0)
    4238:	0004                	0x4
    423a:	4c00                	lw	s0,24(s0)
    423c:	0004                	0x4
    423e:	0100                	addi	s0,sp,128
    4240:	5800                	lw	s0,48(s0)
    4242:	044c                	addi	a1,sp,516
    4244:	0000                	unimp
    4246:	0500                	addi	s0,sp,640
    4248:	0000                	unimp
    424a:	0001                	nop
    424c:	0059                	c.nop	22
    424e:	0005                	c.nop	1
    4250:	1c00                	addi	s0,sp,560
    4252:	0005                	c.nop	1
    4254:	0100                	addi	s0,sp,128
    4256:	6800                	flw	fs0,16(s0)
    4258:	0530                	addi	a2,sp,648
    425a:	0000                	unimp
    425c:	053c                	addi	a5,sp,648
    425e:	0000                	unimp
    4260:	0001                	nop
    4262:	3c59                	jal	3cf8 <__adddf3+0x3e4>
    4264:	0005                	c.nop	1
    4266:	6000                	flw	fs0,0(s0)
    4268:	0005                	c.nop	1
    426a:	0100                	addi	s0,sp,128
    426c:	6800                	flw	fs0,16(s0)
    426e:	0560                	addi	s0,sp,652
    4270:	0000                	unimp
    4272:	056c                	addi	a1,sp,652
    4274:	0000                	unimp
    4276:	0001                	nop
    4278:	6c59                	lui	s8,0x16
    427a:	0005                	c.nop	1
    427c:	8c00                	0x8c00
    427e:	0005                	c.nop	1
    4280:	0100                	addi	s0,sp,128
    4282:	5a00                	lw	s0,48(a2)
    4284:	058c                	addi	a1,sp,704
    4286:	0000                	unimp
    4288:	05e0                	addi	s0,sp,716
    428a:	0000                	unimp
    428c:	0001                	nop
    428e:	e059                	bnez	s0,4314 <__divdf3+0x228>
    4290:	0005                	c.nop	1
    4292:	7400                	flw	fs0,40(s0)
    4294:	01000007          	vle8ff.v	v0,(zero),v0.t
    4298:	6800                	flw	fs0,16(s0)
    429a:	077c                	addi	a5,sp,908
    429c:	0000                	unimp
    429e:	0780                	addi	s0,sp,960
    42a0:	0000                	unimp
    42a2:	0001                	nop
    42a4:	8059                	srli	s0,s0,0x16
    42a6:	b8000007          	vlsseg6e128.v	v0,(zero),zero,v0.t
    42aa:	01000007          	vle8ff.v	v0,(zero),v0.t
    42ae:	6800                	flw	fs0,16(s0)
    42b0:	07c4                	addi	s1,sp,964
    42b2:	0000                	unimp
    42b4:	07c8                	addi	a0,sp,964
    42b6:	0000                	unimp
    42b8:	0001                	nop
    42ba:	c859                	beqz	s0,4350 <__divdf3+0x264>
    42bc:	50000007          	vlseg3e128.v	v0,(zero),v0.t
    42c0:	0008                	0x8
    42c2:	0100                	addi	s0,sp,128
    42c4:	6800                	flw	fs0,16(s0)
    42c6:	0858                	addi	a4,sp,20
    42c8:	0000                	unimp
    42ca:	085c                	addi	a5,sp,20
    42cc:	0000                	unimp
    42ce:	0001                	nop
    42d0:	5c59                	li	s8,-10
    42d2:	0008                	0x8
    42d4:	8400                	0x8400
    42d6:	0008                	0x8
    42d8:	0100                	addi	s0,sp,128
    42da:	6800                	flw	fs0,16(s0)
    42dc:	088c                	addi	a1,sp,80
    42de:	0000                	unimp
    42e0:	08f4                	addi	a3,sp,92
    42e2:	0000                	unimp
    42e4:	0001                	nop
    42e6:	f468                	fsw	fa0,108(s0)
    42e8:	0008                	0x8
    42ea:	5000                	lw	s0,32(s0)
    42ec:	0009                	c.nop	2
    42ee:	0100                	addi	s0,sp,128
    42f0:	5a00                	lw	s0,48(a2)
    42f2:	0950                	addi	a2,sp,148
    42f4:	0000                	unimp
    42f6:	09c0                	addi	s0,sp,212
    42f8:	0000                	unimp
    42fa:	0001                	nop
    42fc:	c068                	sw	a0,68(s0)
    42fe:	0009                	c.nop	2
    4300:	3400                	fld	fs0,40(s0)
    4302:	000a                	c.slli	zero,0x2
    4304:	0300                	addi	s0,sp,384
    4306:	7900                	flw	fs0,48(a0)
    4308:	9f01                	0x9f01
    430a:	0a3c                	addi	a5,sp,280
    430c:	0000                	unimp
    430e:	0af4                	addi	a3,sp,348
    4310:	0000                	unimp
    4312:	0001                	nop
    4314:	fc68                	fsw	fa0,124(s0)
    4316:	000a                	c.slli	zero,0x2
    4318:	1000                	addi	s0,sp,32
    431a:	0100000b          	0x100000b
    431e:	6800                	flw	fs0,16(s0)
    4320:	0b10                	addi	a2,sp,400
    4322:	0000                	unimp
    4324:	0b20                	addi	s0,sp,408
    4326:	0000                	unimp
    4328:	0001                	nop
    432a:	2059                	jal	43b0 <__divdf3+0x2c4>
    432c:	2c00000b          	0x2c00000b
    4330:	0100000b          	0x100000b
    4334:	5a00                	lw	s0,48(a2)
    4336:	0b2c                	addi	a1,sp,408
    4338:	0000                	unimp
    433a:	0b40                	addi	s0,sp,404
    433c:	0000                	unimp
    433e:	0001                	nop
    4340:	4059                	c.li	zero,22
    4342:	5000000b          	0x5000000b
    4346:	0100000b          	0x100000b
    434a:	6800                	flw	fs0,16(s0)
    434c:	0b50                	addi	a2,sp,404
    434e:	0000                	unimp
    4350:	0ba8                	addi	a0,sp,472
    4352:	0000                	unimp
    4354:	0001                	nop
    4356:	a859                	j	43ec <__divdf3+0x300>
    4358:	d400000b          	0xd400000b
    435c:	0100000b          	0x100000b
    4360:	6800                	flw	fs0,16(s0)
    4362:	0bdc                	addi	a5,sp,468
    4364:	0000                	unimp
    4366:	0c10                	addi	a2,sp,528
    4368:	0000                	unimp
    436a:	0001                	nop
    436c:	0068                	addi	a0,sp,12
    436e:	0000                	unimp
    4370:	0000                	unimp
    4372:	0000                	unimp
    4374:	9000                	0x9000
    4376:	98000003          	lb	zero,-1664(zero) # fffff980 <RAM_SIZE+0xfffef980>
    437a:	04000003          	lb	zero,64(zero) # 40 <_start+0x30>
    437e:	9100                	0x9100
    4380:	77a0                	flw	fs0,104(a5)
    4382:	989f 0003 d800      	0xd8000003989f
    4388:	01000003          	lb	zero,16(zero) # 10 <_start>
    438c:	6200                	flw	fs0,0(a2)
    438e:	043c                	addi	a5,sp,520
    4390:	0000                	unimp
    4392:	0520                	addi	s0,sp,648
    4394:	0000                	unimp
    4396:	0001                	nop
    4398:	3062                	fld	ft0,56(sp)
    439a:	0005                	c.nop	1
    439c:	2000                	fld	fs0,0(s0)
    439e:	0100000b          	0x100000b
    43a2:	6200                	flw	fs0,0(a2)
    43a4:	0b20                	addi	s0,sp,408
    43a6:	0000                	unimp
    43a8:	0b24                	addi	s1,sp,408
    43aa:	0000                	unimp
    43ac:	0004                	0x4
    43ae:	a091                	j	43f2 <__divdf3+0x306>
    43b0:	0b249f77          	0xb249f77
    43b4:	0000                	unimp
    43b6:	0c10                	addi	a2,sp,528
    43b8:	0000                	unimp
    43ba:	0001                	nop
    43bc:	0062                	c.slli	zero,0x18
    43be:	0000                	unimp
    43c0:	0000                	unimp
    43c2:	0000                	unimp
    43c4:	0400                	addi	s0,sp,512
    43c6:	0008                	0x8
    43c8:	0800                	addi	s0,sp,16
    43ca:	0008                	0x8
    43cc:	0100                	addi	s0,sp,128
    43ce:	5900                	lw	s0,48(a0)
    43d0:	0ba8                	addi	a0,sp,472
    43d2:	0000                	unimp
    43d4:	0bb8                	addi	a4,sp,472
    43d6:	0000                	unimp
    43d8:	0002                	c.slli64	zero
    43da:	9f30                	0x9f30
	...
    43e4:	0808                	addi	a0,sp,16
    43e6:	0000                	unimp
    43e8:	082c                	addi	a1,sp,24
    43ea:	0000                	unimp
    43ec:	0002                	c.slli64	zero
    43ee:	9f30                	0x9f30
	...
    43f8:	049c                	addi	a5,sp,576
    43fa:	0000                	unimp
    43fc:	04bc                	addi	a5,sp,584
    43fe:	0000                	unimp
    4400:	0002                	c.slli64	zero
    4402:	9f3a                	add	t5,t5,a4
    4404:	04f8                	addi	a4,sp,588
    4406:	0000                	unimp
    4408:	0520                	addi	s0,sp,648
    440a:	0000                	unimp
    440c:	0002                	c.slli64	zero
    440e:	9f3a                	add	t5,t5,a4
    4410:	053c                	addi	a5,sp,648
    4412:	0000                	unimp
    4414:	0560                	addi	s0,sp,652
    4416:	0000                	unimp
    4418:	0002                	c.slli64	zero
    441a:	9f3a                	add	t5,t5,a4
    441c:	05e0                	addi	s0,sp,716
    441e:	0000                	unimp
    4420:	08f4                	addi	a3,sp,92
    4422:	0000                	unimp
    4424:	0002                	c.slli64	zero
    4426:	9f3a                	add	t5,t5,a4
    4428:	0950                	addi	a2,sp,148
    442a:	0000                	unimp
    442c:	0ad4                	addi	a3,sp,340
    442e:	0000                	unimp
    4430:	0002                	c.slli64	zero
    4432:	9f3a                	add	t5,t5,a4
    4434:	0ad4                	addi	a3,sp,340
    4436:	0000                	unimp
    4438:	0ad8                	addi	a4,sp,340
    443a:	0000                	unimp
    443c:	0001                	nop
    443e:	fc5c                	fsw	fa5,60(s0)
    4440:	000a                	c.slli	zero,0x2
    4442:	0800                	addi	s0,sp,16
    4444:	0200000b          	0x200000b
    4448:	3a00                	fld	fs0,48(a2)
    444a:	089f 000b 1000      	0x1000000b089f
    4450:	0200000b          	0x200000b
    4454:	3800                	fld	fs0,48(s0)
    4456:	109f 000b 2000      	0x2000000b109f
    445c:	0200000b          	0x200000b
    4460:	3a00                	fld	fs0,48(a2)
    4462:	2c9f 000b 6000      	0x6000000b2c9f
    4468:	0200000b          	0x200000b
    446c:	3a00                	fld	fs0,48(a2)
    446e:	609f 000b 7000      	0x7000000b609f
    4474:	0200000b          	0x200000b
    4478:	3800                	fld	fs0,48(s0)
    447a:	709f 000b 8400      	0x8400000b709f
    4480:	0200000b          	0x200000b
    4484:	3a00                	fld	fs0,48(a2)
    4486:	849f 000b 9400      	0x9400000b849f
    448c:	0200000b          	0x200000b
    4490:	4000                	lw	s0,0(s0)
    4492:	949f 000b 9800      	0x9800000b949f
    4498:	0200000b          	0x200000b
    449c:	3a00                	fld	fs0,48(a2)
    449e:	989f 000b a800      	0xa800000b989f
    44a4:	0200000b          	0x200000b
    44a8:	4000                	lw	s0,0(s0)
    44aa:	a89f 000b 1000      	0x1000000ba89f
    44b0:	000c                	0xc
    44b2:	0200                	addi	s0,sp,256
    44b4:	3a00                	fld	fs0,48(a2)
    44b6:	009f 0000 0000      	0x9f
    44bc:	0000                	unimp
    44be:	9000                	0x9000
    44c0:	98000003          	lb	zero,-1664(zero) # fffff980 <RAM_SIZE+0xfffef980>
    44c4:	04000003          	lb	zero,64(zero) # 40 <_start+0x30>
    44c8:	9100                	0x9100
    44ca:	77a0                	flw	fs0,104(a5)
    44cc:	989f 0003 b800      	0xb8000003989f
    44d2:	01000003          	lb	zero,16(zero) # 10 <_start>
    44d6:	6200                	flw	fs0,0(a2)
    44d8:	03b8                	addi	a4,sp,456
    44da:	0000                	unimp
    44dc:	03c0                	addi	s0,sp,452
    44de:	0000                	unimp
    44e0:	0001                	nop
    44e2:	c065                	beqz	s0,45c2 <__divdf3+0x4d6>
    44e4:	cc000003          	lb	zero,-832(zero) # fffffcc0 <RAM_SIZE+0xfffefcc0>
    44e8:	03000003          	lb	zero,48(zero) # 30 <_start+0x20>
    44ec:	8500                	0x8500
    44ee:	9f01                	0x9f01
    44f0:	03cc                	addi	a1,sp,452
    44f2:	0000                	unimp
    44f4:	03d4                	addi	a3,sp,452
    44f6:	0000                	unimp
    44f8:	0001                	nop
    44fa:	3c65                	jal	3fb2 <__adddf3+0x69e>
    44fc:	0004                	0x4
    44fe:	0c00                	addi	s0,sp,528
    4500:	0005                	c.nop	1
    4502:	0100                	addi	s0,sp,128
    4504:	6500                	flw	fs0,8(a0)
    4506:	050c                	addi	a1,sp,640
    4508:	0000                	unimp
    450a:	051c                	addi	a5,sp,640
    450c:	0000                	unimp
    450e:	0001                	nop
    4510:	305e                	fld	ft0,496(sp)
    4512:	0005                	c.nop	1
    4514:	2400                	fld	fs0,8(s0)
    4516:	01000007          	vle8ff.v	v0,(zero),v0.t
    451a:	6500                	flw	fs0,8(a0)
    451c:	0774                	addi	a3,sp,908
    451e:	0000                	unimp
    4520:	0798                	addi	a4,sp,960
    4522:	0000                	unimp
    4524:	0001                	nop
    4526:	9865                	andi	s0,s0,-7
    4528:	b3000007          	vlseg6e128ff.v	v0,(zero)
    452c:	01000007          	vle8ff.v	v0,(zero),v0.t
    4530:	5e00                	lw	s0,56(a2)
    4532:	000007b3          	add	a5,zero,zero
    4536:	07b4                	addi	a3,sp,968
    4538:	0000                	unimp
    453a:	01850003          	lb	zero,24(a0) # ffffb018 <RAM_SIZE+0xfffeb018>
    453e:	bc9f 0007 1400      	0x14000007bc9f
    4544:	0008                	0x8
    4546:	0100                	addi	s0,sp,128
    4548:	6500                	flw	fs0,8(a0)
    454a:	0814                	addi	a3,sp,16
    454c:	0000                	unimp
    454e:	082c                	addi	a1,sp,24
    4550:	0000                	unimp
    4552:	0001                	nop
    4554:	2c5f 0008 4800      	0x480000082c5f
    455a:	0008                	0x8
    455c:	0100                	addi	s0,sp,128
    455e:	6500                	flw	fs0,8(a0)
    4560:	0850                	addi	a2,sp,20
    4562:	0000                	unimp
    4564:	0880                	addi	s0,sp,80
    4566:	0000                	unimp
    4568:	0001                	nop
    456a:	8065                	srli	s0,s0,0x19
    456c:	0008                	0x8
    456e:	8c00                	0x8c00
    4570:	0008                	0x8
    4572:	0100                	addi	s0,sp,128
    4574:	5a00                	lw	s0,48(a2)
    4576:	088c                	addi	a1,sp,80
    4578:	0000                	unimp
    457a:	09e0                	addi	s0,sp,220
    457c:	0000                	unimp
    457e:	0001                	nop
    4580:	2c65                	jal	4838 <__divdf3+0x74c>
    4582:	000a                	c.slli	zero,0x2
    4584:	3c00                	fld	fs0,56(s0)
    4586:	000a                	c.slli	zero,0x2
    4588:	0100                	addi	s0,sp,128
    458a:	6500                	flw	fs0,8(a0)
    458c:	0a48                	addi	a0,sp,276
    458e:	0000                	unimp
    4590:	0a5c                	addi	a5,sp,276
    4592:	0000                	unimp
    4594:	0001                	nop
    4596:	5c65                	li	s8,-7
    4598:	000a                	c.slli	zero,0x2
    459a:	6000                	flw	fs0,0(s0)
    459c:	000a                	c.slli	zero,0x2
    459e:	0300                	addi	s0,sp,384
    45a0:	7e00                	flw	fs0,56(a2)
    45a2:	9f01                	0x9f01
    45a4:	0a60                	addi	s0,sp,284
    45a6:	0000                	unimp
    45a8:	0a8c                	addi	a1,sp,336
    45aa:	0000                	unimp
    45ac:	0001                	nop
    45ae:	8c65                	and	s0,s0,s1
    45b0:	000a                	c.slli	zero,0x2
    45b2:	8f00                	0x8f00
    45b4:	000a                	c.slli	zero,0x2
    45b6:	0100                	addi	s0,sp,128
    45b8:	5a00                	lw	s0,48(a2)
    45ba:	0a98                	addi	a4,sp,336
    45bc:	0000                	unimp
    45be:	0ab8                	addi	a4,sp,344
    45c0:	0000                	unimp
    45c2:	0001                	nop
    45c4:	cc65                	beqz	s0,46bc <__divdf3+0x5d0>
    45c6:	000a                	c.slli	zero,0x2
    45c8:	f000                	fsw	fs0,32(s0)
    45ca:	000a                	c.slli	zero,0x2
    45cc:	0100                	addi	s0,sp,128
    45ce:	6500                	flw	fs0,8(a0)
    45d0:	0af0                	addi	a2,sp,348
    45d2:	0000                	unimp
    45d4:	0afc                	addi	a5,sp,348
    45d6:	0000                	unimp
    45d8:	0001                	nop
    45da:	fc5a                	fsw	fs6,56(sp)
    45dc:	000a                	c.slli	zero,0x2
    45de:	2000                	fld	fs0,0(s0)
    45e0:	0100000b          	0x100000b
    45e4:	6500                	flw	fs0,8(a0)
    45e6:	0b20                	addi	s0,sp,408
    45e8:	0000                	unimp
    45ea:	0b24                	addi	s1,sp,408
    45ec:	0000                	unimp
    45ee:	0004                	0x4
    45f0:	a091                	j	4634 <__divdf3+0x548>
    45f2:	0b249f77          	0xb249f77
    45f6:	0000                	unimp
    45f8:	0b2c                	addi	a1,sp,408
    45fa:	0000                	unimp
    45fc:	0001                	nop
    45fe:	2c62                	fld	fs8,24(sp)
    4600:	c400000b          	0xc400000b
    4604:	0100000b          	0x100000b
    4608:	6500                	flw	fs0,8(a0)
    460a:	0bc4                	addi	s1,sp,468
    460c:	0000                	unimp
    460e:	0bdc                	addi	a5,sp,468
    4610:	0000                	unimp
    4612:	0001                	nop
    4614:	dc5e                	sw	s7,56(sp)
    4616:	e400000b          	0xe400000b
    461a:	0100000b          	0x100000b
    461e:	6500                	flw	fs0,8(a0)
    4620:	0be4                	addi	s1,sp,476
    4622:	0000                	unimp
    4624:	0be8                	addi	a0,sp,476
    4626:	0000                	unimp
    4628:	0001                	nop
    462a:	e85e                	fsw	fs7,16(sp)
    462c:	f000000b          	0xf000000b
    4630:	0300000b          	0x300000b
    4634:	7e00                	flw	fs0,56(a2)
    4636:	9f01                	0x9f01
    4638:	0bf0                	addi	a2,sp,476
    463a:	0000                	unimp
    463c:	0c10                	addi	a2,sp,528
    463e:	0000                	unimp
    4640:	0001                	nop
    4642:	0065                	c.nop	25
    4644:	0000                	unimp
    4646:	0000                	unimp
    4648:	0000                	unimp
    464a:	d400                	sw	s0,40(s0)
    464c:	2c000007          	vloxseg2ei8.v	v0,(zero),v0,v0.t
    4650:	0008                	0x8
    4652:	0100                	addi	s0,sp,128
    4654:	5800                	lw	s0,48(s0)
    4656:	0a98                	addi	a4,sp,336
    4658:	0000                	unimp
    465a:	0acc                	addi	a1,sp,340
    465c:	0000                	unimp
    465e:	0001                	nop
    4660:	a858                	fsd	fa4,144(s0)
    4662:	b800000b          	0xb800000b
    4666:	0100000b          	0x100000b
    466a:	5800                	lw	s0,48(s0)
    466c:	0bdc                	addi	a5,sp,468
    466e:	0000                	unimp
    4670:	0be4                	addi	s1,sp,476
    4672:	0000                	unimp
    4674:	0001                	nop
    4676:	0058                	addi	a4,sp,4
    4678:	0000                	unimp
    467a:	0000                	unimp
    467c:	0000                	unimp
    467e:	4400                	lw	s0,8(s0)
    4680:	0004                	0x4
    4682:	0400                	addi	s0,sp,512
    4684:	0005                	c.nop	1
    4686:	0100                	addi	s0,sp,128
    4688:	5f00                	lw	s0,56(a4)
    468a:	0530                	addi	a2,sp,648
    468c:	0000                	unimp
    468e:	065f 0000 0001      	0x10000065f
    4694:	5f5f 0006 d800      	0xd80000065f5f
    469a:	0006                	c.slli	zero,0x1
    469c:	0300                	addi	s0,sp,384
    469e:	9100                	0x9100
    46a0:	76f4                	flw	fa3,108(a3)
    46a2:	06d8                	addi	a4,sp,836
    46a4:	0000                	unimp
    46a6:	06f8                	addi	a4,sp,844
    46a8:	0000                	unimp
    46aa:	0001                	nop
    46ac:	7c5f 0007 8400      	0x840000077c5f
    46b2:	01000007          	vle8ff.v	v0,(zero),v0.t
    46b6:	5f00                	lw	s0,56(a4)
    46b8:	07c4                	addi	s1,sp,964
    46ba:	0000                	unimp
    46bc:	0800                	addi	s0,sp,16
    46be:	0000                	unimp
    46c0:	0001                	nop
    46c2:	585f 0008 7300      	0x73000008585f
    46c8:	0008                	0x8
    46ca:	0100                	addi	s0,sp,128
    46cc:	5f00                	lw	s0,56(a4)
    46ce:	088c                	addi	a1,sp,80
    46d0:	0000                	unimp
    46d2:	000008ab          	0x8ab
    46d6:	0001                	nop
    46d8:	ab5f 0008 f400      	0xf4000008ab5f
    46de:	0008                	0x8
    46e0:	0200                	addi	s0,sp,256
    46e2:	7200                	flw	fs0,32(a2)
    46e4:	f400                	fsw	fs0,40(s0)
    46e6:	0008                	0x8
    46e8:	ac00                	fsd	fs0,24(s0)
    46ea:	0009                	c.nop	2
    46ec:	0100                	addi	s0,sp,128
    46ee:	5f00                	lw	s0,56(a4)
    46f0:	0a60                	addi	s0,sp,284
    46f2:	0000                	unimp
    46f4:	0a78                	addi	a4,sp,284
    46f6:	0000                	unimp
    46f8:	0001                	nop
    46fa:	cc5f 000a e700      	0xe700000acc5f
    4700:	000a                	c.slli	zero,0x2
    4702:	0100                	addi	s0,sp,128
    4704:	5f00                	lw	s0,56(a4)
    4706:	0afc                	addi	a5,sp,348
    4708:	0000                	unimp
    470a:	0b20                	addi	s0,sp,408
    470c:	0000                	unimp
    470e:	0001                	nop
    4710:	2c5f 000b b800      	0xb800000b2c5f
    4716:	0100000b          	0x100000b
    471a:	5f00                	lw	s0,56(a4)
	...
    4724:	0468                	addi	a0,sp,524
    4726:	0000                	unimp
    4728:	0484                	addi	s1,sp,576
    472a:	0000                	unimp
    472c:	ff090003          	lb	zero,-16(s2)
    4730:	849f 0004 bc00      	0xbc000004849f
    4736:	0004                	0x4
    4738:	0100                	addi	s0,sp,128
    473a:	5d00                	lw	s0,56(a0)
    473c:	04f8                	addi	a4,sp,588
    473e:	0000                	unimp
    4740:	0520                	addi	s0,sp,648
    4742:	0000                	unimp
    4744:	0001                	nop
    4746:	305d                	jal	3fec <__adddf3+0x6d8>
    4748:	0005                	c.nop	1
    474a:	8c00                	0x8c00
    474c:	0005                	c.nop	1
    474e:	0100                	addi	s0,sp,128
    4750:	5d00                	lw	s0,56(a0)
    4752:	058c                	addi	a1,sp,704
    4754:	0000                	unimp
    4756:	05cc                	addi	a1,sp,708
    4758:	0000                	unimp
    475a:	ff090003          	lb	zero,-16(s2)
    475e:	d89f 0005 5f00      	0x5f000005d89f
    4764:	0006                	c.slli	zero,0x1
    4766:	0100                	addi	s0,sp,128
    4768:	5d00                	lw	s0,56(a0)
    476a:	065f 0000 06d8      	0x6d80000065f
    4770:	0000                	unimp
    4772:	f8910003          	lb	zero,-119(sp)
    4776:	d876                	sw	t4,48(sp)
    4778:	0006                	c.slli	zero,0x1
    477a:	1b00                	addi	s0,sp,432
    477c:	01000007          	vle8ff.v	v0,(zero),v0.t
    4780:	5d00                	lw	s0,56(a0)
    4782:	0000071b          	0x71b
    4786:	0730                	addi	a2,sp,904
    4788:	0000                	unimp
    478a:	0002                	c.slli64	zero
    478c:	0072                	c.slli	zero,0x1c
    478e:	077c                	addi	a5,sp,908
    4790:	0000                	unimp
    4792:	078c                	addi	a1,sp,960
    4794:	0000                	unimp
    4796:	0001                	nop
    4798:	c45d                	beqz	s0,4846 <__divdf3+0x75a>
    479a:	2c000007          	vloxseg2ei8.v	v0,(zero),v0,v0.t
    479e:	0008                	0x8
    47a0:	0100                	addi	s0,sp,128
    47a2:	5d00                	lw	s0,56(a0)
    47a4:	082c                	addi	a1,sp,24
    47a6:	0000                	unimp
    47a8:	00000847          	fmsub.s	fa6,ft0,ft0,ft0,rne
    47ac:	7f7d0003          	lb	zero,2039(s10) # b7f7 <__stack_top+0x1767>
    47b0:	589f 0008 7300      	0x73000008589f
    47b6:	0008                	0x8
    47b8:	0100                	addi	s0,sp,128
    47ba:	5d00                	lw	s0,56(a0)
    47bc:	088c                	addi	a1,sp,80
    47be:	0000                	unimp
    47c0:	000008ab          	0x8ab
    47c4:	0001                	nop
    47c6:	ab5d                	j	4d7c <__muldf3+0x258>
    47c8:	0008                	0x8
    47ca:	f400                	fsw	fs0,40(s0)
    47cc:	0008                	0x8
    47ce:	0300                	addi	s0,sp,384
    47d0:	9100                	0x9100
    47d2:	76f4                	flw	fa3,108(a3)
    47d4:	08f4                	addi	a3,sp,92
    47d6:	0000                	unimp
    47d8:	09c4                	addi	s1,sp,212
    47da:	0000                	unimp
    47dc:	0001                	nop
    47de:	c45d                	beqz	s0,488c <__divdf3+0x7a0>
    47e0:	0009                	c.nop	2
    47e2:	e400                	fsw	fs0,8(s0)
    47e4:	0009                	c.nop	2
    47e6:	0300                	addi	s0,sp,384
    47e8:	8800                	0x8800
    47ea:	9f11                	0x9f11
    47ec:	0a48                	addi	a0,sp,276
    47ee:	0000                	unimp
    47f0:	0a50                	addi	a2,sp,276
    47f2:	0000                	unimp
    47f4:	0001                	nop
    47f6:	605d                	c.lui	zero,0x17
    47f8:	000a                	c.slli	zero,0x2
    47fa:	6c00                	flw	fs0,24(s0)
    47fc:	000a                	c.slli	zero,0x2
    47fe:	0200                	addi	s0,sp,256
    4800:	3800                	fld	fs0,48(s0)
    4802:	6c9f 000a 7800      	0x7800000a6c9f
    4808:	000a                	c.slli	zero,0x2
    480a:	0100                	addi	s0,sp,128
    480c:	5d00                	lw	s0,56(a0)
    480e:	0a98                	addi	a4,sp,336
    4810:	0000                	unimp
    4812:	0a9c                	addi	a5,sp,336
    4814:	0000                	unimp
    4816:	0001                	nop
    4818:	9c5d                	0x9c5d
    481a:	000a                	c.slli	zero,0x2
    481c:	b800                	fsd	fs0,48(s0)
    481e:	000a                	c.slli	zero,0x2
    4820:	0100                	addi	s0,sp,128
    4822:	6a00                	flw	fs0,16(a2)
    4824:	0acc                	addi	a1,sp,340
    4826:	0000                	unimp
    4828:	00000ae7          	jalr	s5,zero # 0 <RAM_START_ADDRESS>
    482c:	0001                	nop
    482e:	fc5d                	bnez	s0,47ec <__divdf3+0x700>
    4830:	000a                	c.slli	zero,0x2
    4832:	2000                	fld	fs0,0(s0)
    4834:	0100000b          	0x100000b
    4838:	5d00                	lw	s0,56(a0)
    483a:	0b2c                	addi	a1,sp,408
    483c:	0000                	unimp
    483e:	0bb8                	addi	a4,sp,472
    4840:	0000                	unimp
    4842:	0001                	nop
    4844:	dc5d                	beqz	s0,4802 <__divdf3+0x716>
    4846:	e400000b          	0xe400000b
    484a:	0100000b          	0x100000b
    484e:	6a00                	flw	fs0,16(a2)
    4850:	0be4                	addi	s1,sp,476
    4852:	0000                	unimp
    4854:	0bf8                	addi	a4,sp,476
    4856:	0000                	unimp
    4858:	0001                	nop
    485a:	f85d                	bnez	s0,4810 <__divdf3+0x724>
    485c:	fc00000b          	0xfc00000b
    4860:	0300000b          	0x300000b
    4864:	7900                	flw	fs0,48(a0)
    4866:	9f01                	0x9f01
    4868:	0bfc                	addi	a5,sp,476
    486a:	0000                	unimp
    486c:	0c00                	addi	s0,sp,528
    486e:	0000                	unimp
    4870:	017d0003          	lb	zero,23(s10)
    4874:	009f 000c 0800      	0x800000c009f
    487a:	000c                	0xc
    487c:	0100                	addi	s0,sp,128
    487e:	5d00                	lw	s0,56(a0)
    4880:	0c08                	addi	a0,sp,528
    4882:	0000                	unimp
    4884:	0c0c                	addi	a1,sp,528
    4886:	0000                	unimp
    4888:	01780003          	lb	zero,23(a6)
    488c:	0c9f 000c 1000      	0x1000000c0c9f
    4892:	000c                	0xc
    4894:	0300                	addi	s0,sp,384
    4896:	7d00                	flw	fs0,56(a0)
    4898:	9f01                	0x9f01
	...
    48a2:	0484                	addi	s1,sp,576
    48a4:	0000                	unimp
    48a6:	0490                	addi	a2,sp,576
    48a8:	0000                	unimp
    48aa:	ff090003          	lb	zero,-16(s2)
    48ae:	609f 0005 8c00      	0x8c000005609f
    48b4:	0005                	c.nop	1
    48b6:	0300                	addi	s0,sp,384
    48b8:	0900                	addi	s0,sp,144
    48ba:	9fff                	0x9fff
    48bc:	08f4                	addi	a3,sp,92
    48be:	0000                	unimp
    48c0:	0924                	addi	s1,sp,152
    48c2:	0000                	unimp
    48c4:	ff090003          	lb	zero,-16(s2)
    48c8:	2c9f 0009 4800      	0x480000092c9f
    48ce:	0009                	c.nop	2
    48d0:	0300                	addi	s0,sp,384
    48d2:	0900                	addi	s0,sp,144
    48d4:	9fff                	0x9fff
	...
    48de:	0490                	addi	a2,sp,576
    48e0:	0000                	unimp
    48e2:	04bc                	addi	a5,sp,584
    48e4:	0000                	unimp
    48e6:	ff090003          	lb	zero,-16(s2)
    48ea:	f89f 0004 0000      	0x4f89f
    48f0:	0005                	c.nop	1
    48f2:	0300                	addi	s0,sp,384
    48f4:	0900                	addi	s0,sp,144
    48f6:	9fff                	0x9fff
    48f8:	0530                	addi	a2,sp,648
    48fa:	0000                	unimp
    48fc:	0560                	addi	s0,sp,652
    48fe:	0000                	unimp
    4900:	0006                	c.slli	zero,0x1
    4902:	ff08007b          	0xff08007b
    4906:	9f1a                	add	t5,t5,t1
    4908:	05e0                	addi	s0,sp,716
    490a:	0000                	unimp
    490c:	05f4                	addi	a3,sp,716
    490e:	0000                	unimp
    4910:	0006                	c.slli	zero,0x1
    4912:	ff08007b          	0xff08007b
    4916:	9f1a                	add	t5,t5,t1
    4918:	077c                	addi	a5,sp,908
    491a:	0000                	unimp
    491c:	0780                	addi	s0,sp,960
    491e:	0000                	unimp
    4920:	ff090003          	lb	zero,-16(s2)
    4924:	c49f 0007 c800      	0xc8000007c49f
    492a:	03000007          	vle8ff.v	v0,(zero)
    492e:	0900                	addi	s0,sp,144
    4930:	9fff                	0x9fff
    4932:	0858                	addi	a4,sp,20
    4934:	0000                	unimp
    4936:	085c                	addi	a5,sp,20
    4938:	0000                	unimp
    493a:	ff090003          	lb	zero,-16(s2)
    493e:	509f 0009 7400      	0x74000009509f
    4944:	0009                	c.nop	2
    4946:	0600                	addi	s0,sp,768
    4948:	7b00                	flw	fs0,48(a4)
    494a:	0800                	addi	s0,sp,16
    494c:	1aff                	0x1aff
    494e:	cc9f 000a d800      	0xd800000acc9f
    4954:	000a                	c.slli	zero,0x2
    4956:	0600                	addi	s0,sp,768
    4958:	7b00                	flw	fs0,48(a4)
    495a:	0800                	addi	s0,sp,16
    495c:	1aff                	0x1aff
    495e:	fc9f 000a 1000      	0x1000000afc9f
    4964:	0600000b          	0x600000b
    4968:	7b00                	flw	fs0,48(a4)
    496a:	0800                	addi	s0,sp,16
    496c:	1aff                	0x1aff
    496e:	109f 000b 2000      	0x2000000b109f
    4974:	0300000b          	0x300000b
    4978:	0900                	addi	s0,sp,144
    497a:	9fff                	0x9fff
    497c:	0b2c                	addi	a1,sp,408
    497e:	0000                	unimp
    4980:	0b40                	addi	s0,sp,404
    4982:	0000                	unimp
    4984:	ff090003          	lb	zero,-16(s2)
    4988:	409f 000b 5000      	0x5000000b409f
    498e:	0600000b          	0x600000b
    4992:	7b00                	flw	fs0,48(a4)
    4994:	0800                	addi	s0,sp,16
    4996:	1aff                	0x1aff
    4998:	509f 000b a800      	0xa800000b509f
    499e:	0300000b          	0x300000b
    49a2:	0900                	addi	s0,sp,144
    49a4:	9fff                	0x9fff
	...
    49ae:	05f4                	addi	a3,sp,716
    49b0:	0000                	unimp
    49b2:	065f 0000 0001      	0x10000065f
    49b8:	5f5f 0006 d800      	0xd80000065f5f
    49be:	0006                	c.slli	zero,0x1
    49c0:	0300                	addi	s0,sp,384
    49c2:	9100                	0x9100
    49c4:	76f4                	flw	fa3,108(a3)
    49c6:	06d8                	addi	a4,sp,836
    49c8:	0000                	unimp
    49ca:	06f8                	addi	a4,sp,844
    49cc:	0000                	unimp
    49ce:	0001                	nop
    49d0:	8c5f 0008 ab00      	0xab0000088c5f
    49d6:	0008                	0x8
    49d8:	0100                	addi	s0,sp,128
    49da:	5f00                	lw	s0,56(a4)
    49dc:	000008ab          	0x8ab
    49e0:	08f4                	addi	a3,sp,92
    49e2:	0000                	unimp
    49e4:	0002                	c.slli64	zero
    49e6:	0072                	c.slli	zero,0x1c
	...
    49f0:	05f4                	addi	a3,sp,716
    49f2:	0000                	unimp
    49f4:	065f 0000 0001      	0x10000065f
    49fa:	5f5d                	li	t5,-9
    49fc:	0006                	c.slli	zero,0x1
    49fe:	d800                	sw	s0,48(s0)
    4a00:	0006                	c.slli	zero,0x1
    4a02:	0300                	addi	s0,sp,384
    4a04:	9100                	0x9100
    4a06:	76f8                	flw	fa4,108(a3)
    4a08:	06d8                	addi	a4,sp,836
    4a0a:	0000                	unimp
    4a0c:	0700                	addi	s0,sp,896
    4a0e:	0000                	unimp
    4a10:	0001                	nop
    4a12:	005d                	c.nop	23
    4a14:	1c000007          	0x1c000007
    4a18:	01000007          	vle8ff.v	v0,(zero),v0.t
    4a1c:	5900                	lw	s0,48(a0)
    4a1e:	0730                	addi	a2,sp,904
    4a20:	0000                	unimp
    4a22:	0740                	addi	s0,sp,900
    4a24:	0000                	unimp
    4a26:	0002                	c.slli64	zero
    4a28:	0072                	c.slli	zero,0x1c
    4a2a:	074c                	addi	a1,sp,900
    4a2c:	0000                	unimp
    4a2e:	00000767          	jalr	a4,zero # 0 <RAM_START_ADDRESS>
    4a32:	7f7d0003          	lb	zero,2039(s10)
    4a36:	679f 0007 6800      	0x68000007679f
    4a3c:	06000007          	vluxei8.v	v0,(zero),v0
    4a40:	7200                	flw	fs0,32(a2)
    4a42:	0600                	addi	s0,sp,768
    4a44:	1c31                	addi	s8,s8,-20
    4a46:	8c9f 0008 ab00      	0xab0000088c9f
    4a4c:	0008                	0x8
    4a4e:	0100                	addi	s0,sp,128
    4a50:	5d00                	lw	s0,56(a0)
    4a52:	000008ab          	0x8ab
    4a56:	08f4                	addi	a3,sp,92
    4a58:	0000                	unimp
    4a5a:	f4910003          	lb	zero,-183(sp)
    4a5e:	3c76                	fld	fs8,376(sp)
    4a60:	000a                	c.slli	zero,0x2
    4a62:	4800                	lw	s0,16(s0)
    4a64:	000a                	c.slli	zero,0x2
    4a66:	0300                	addi	s0,sp,384
    4a68:	7d00                	flw	fs0,56(a0)
    4a6a:	9f7f                	0x9f7f
    4a6c:	0bf0                	addi	a2,sp,476
    4a6e:	0000                	unimp
    4a70:	0bfc                	addi	a5,sp,476
    4a72:	0000                	unimp
    4a74:	0001                	nop
    4a76:	fc59                	bnez	s0,4a14 <__gedf2+0xb8>
    4a78:	0000000b          	0xb
    4a7c:	000c                	0xc
    4a7e:	0100                	addi	s0,sp,128
    4a80:	5d00                	lw	s0,56(a0)
	...
    4a8a:	05f4                	addi	a3,sp,716
    4a8c:	0000                	unimp
    4a8e:	071c                	addi	a5,sp,896
    4a90:	0000                	unimp
    4a92:	0001                	nop
    4a94:	3065                	jal	433c <__divdf3+0x250>
    4a96:	44000007          	vluxseg3ei8.v	v0,(zero),v0,v0.t
    4a9a:	01000007          	vle8ff.v	v0,(zero),v0.t
    4a9e:	6500                	flw	fs0,8(a0)
    4aa0:	074c                	addi	a1,sp,900
    4aa2:	0000                	unimp
    4aa4:	0768                	addi	a0,sp,908
    4aa6:	0000                	unimp
    4aa8:	0001                	nop
    4aaa:	8c65                	and	s0,s0,s1
    4aac:	0008                	0x8
    4aae:	f400                	fsw	fs0,40(s0)
    4ab0:	0008                	0x8
    4ab2:	0100                	addi	s0,sp,128
    4ab4:	6500                	flw	fs0,8(a0)
    4ab6:	0a3c                	addi	a5,sp,280
    4ab8:	0000                	unimp
    4aba:	0a48                	addi	a0,sp,276
    4abc:	0000                	unimp
    4abe:	0001                	nop
    4ac0:	f065                	bnez	s0,4aa0 <__ledf2+0x60>
    4ac2:	0000000b          	0xb
    4ac6:	000c                	0xc
    4ac8:	0100                	addi	s0,sp,128
    4aca:	6500                	flw	fs0,8(a0)
	...
    4ad4:	05f4                	addi	a3,sp,716
    4ad6:	0000                	unimp
    4ad8:	0614                	addi	a3,sp,768
    4ada:	0000                	unimp
    4adc:	0002                	c.slli64	zero
    4ade:	9f30                	0x9f30
    4ae0:	0620                	addi	s0,sp,776
    4ae2:	0000                	unimp
    4ae4:	0624                	addi	s1,sp,776
    4ae6:	0000                	unimp
    4ae8:	0008                	0x8
    4aea:	0078                	addi	a4,sp,12
    4aec:	007c                	addi	a5,sp,12
    4aee:	231c                	fld	fa5,0(a4)
    4af0:	9f05                	0x9f05
    4af2:	0624                	addi	s1,sp,776
    4af4:	0000                	unimp
    4af6:	0628                	addi	a0,sp,776
    4af8:	0000                	unimp
    4afa:	0008                	0x8
    4afc:	0078                	addi	a4,sp,12
    4afe:	007c                	addi	a5,sp,12
    4b00:	231c                	fld	fa5,0(a4)
    4b02:	9f04                	0x9f04
    4b04:	06ec                	addi	a1,sp,844
    4b06:	0000                	unimp
    4b08:	06f0                	addi	a2,sp,844
    4b0a:	0000                	unimp
    4b0c:	0008                	0x8
    4b0e:	0078                	addi	a4,sp,12
    4b10:	007c                	addi	a5,sp,12
    4b12:	231c                	fld	fa5,0(a4)
    4b14:	9f05                	0x9f05
    4b16:	06f0                	addi	a2,sp,844
    4b18:	0000                	unimp
    4b1a:	06f4                	addi	a3,sp,844
    4b1c:	0000                	unimp
    4b1e:	0008                	0x8
    4b20:	0078                	addi	a4,sp,12
    4b22:	007c                	addi	a5,sp,12
    4b24:	231c                	fld	fa5,0(a4)
    4b26:	9f04                	0x9f04
    4b28:	0730                	addi	a2,sp,904
    4b2a:	0000                	unimp
    4b2c:	0744                	addi	s1,sp,900
    4b2e:	0000                	unimp
    4b30:	0002                	c.slli64	zero
    4b32:	9f30                	0x9f30
	...
    4b3c:	060c                	addi	a1,sp,768
    4b3e:	0000                	unimp
    4b40:	0628                	addi	a0,sp,776
    4b42:	0000                	unimp
    4b44:	0001                	nop
    4b46:	3c6a                	fld	fs8,184(sp)
    4b48:	0006                	c.slli	zero,0x1
    4b4a:	8800                	0x8800
    4b4c:	0006                	c.slli	zero,0x1
    4b4e:	0100                	addi	s0,sp,128
    4b50:	6a00                	flw	fs0,16(a2)
    4b52:	0688                	addi	a0,sp,832
    4b54:	0000                	unimp
    4b56:	0000068b          	0x68b
    4b5a:	0001                	nop
    4b5c:	8b5a                	mv	s6,s6
    4b5e:	0006                	c.slli	zero,0x1
    4b60:	cc00                	sw	s0,24(s0)
    4b62:	0006                	c.slli	zero,0x1
    4b64:	0100                	addi	s0,sp,128
    4b66:	6a00                	flw	fs0,16(a2)
    4b68:	06cc                	addi	a1,sp,836
    4b6a:	0000                	unimp
    4b6c:	06d8                	addi	a4,sp,836
    4b6e:	0000                	unimp
    4b70:	0001                	nop
    4b72:	d85a                	sw	s6,48(sp)
    4b74:	0006                	c.slli	zero,0x1
    4b76:	dc00                	sw	s0,56(s0)
    4b78:	0006                	c.slli	zero,0x1
    4b7a:	0100                	addi	s0,sp,128
    4b7c:	6a00                	flw	fs0,16(a2)
    4b7e:	088c                	addi	a1,sp,80
    4b80:	0000                	unimp
    4b82:	08e4                	addi	s1,sp,92
    4b84:	0000                	unimp
    4b86:	0001                	nop
    4b88:	e46a                	fsw	fs10,8(sp)
    4b8a:	0008                	0x8
    4b8c:	f400                	fsw	fs0,40(s0)
    4b8e:	0008                	0x8
    4b90:	0100                	addi	s0,sp,128
    4b92:	5a00                	lw	s0,48(a2)
	...
    4b9c:	05f4                	addi	a3,sp,716
    4b9e:	0000                	unimp
    4ba0:	060c                	addi	a1,sp,768
    4ba2:	0000                	unimp
    4ba4:	0002                	c.slli64	zero
    4ba6:	9f30                	0x9f30
    4ba8:	060c                	addi	a1,sp,768
    4baa:	0000                	unimp
    4bac:	0614                	addi	a3,sp,768
    4bae:	0000                	unimp
    4bb0:	0001                	nop
    4bb2:	1459                	addi	s0,s0,-10
    4bb4:	0006                	c.slli	zero,0x1
    4bb6:	1c00                	addi	s0,sp,560
    4bb8:	0006                	c.slli	zero,0x1
    4bba:	0300                	addi	s0,sp,384
    4bbc:	7900                	flw	fs0,48(a0)
    4bbe:	9f01                	0x9f01
    4bc0:	0620                	addi	s0,sp,776
    4bc2:	0000                	unimp
    4bc4:	0638                	addi	a4,sp,776
    4bc6:	0000                	unimp
    4bc8:	0001                	nop
    4bca:	0006386b          	0x6386b
    4bce:	4800                	lw	s0,16(s0)
    4bd0:	0006                	c.slli	zero,0x1
    4bd2:	0100                	addi	s0,sp,128
    4bd4:	5900                	lw	s0,48(a0)
    4bd6:	0648                	addi	a0,sp,772
    4bd8:	0000                	unimp
    4bda:	06b0                	addi	a2,sp,840
    4bdc:	0000                	unimp
    4bde:	01790003          	lb	zero,23(s2)
    4be2:	b09f 0006 b300      	0xb3000006b09f
    4be8:	0006                	c.slli	zero,0x1
    4bea:	0100                	addi	s0,sp,128
    4bec:	5e00                	lw	s0,56(a2)
    4bee:	000006b3          	add	a3,zero,zero
    4bf2:	06d8                	addi	a4,sp,836
    4bf4:	0000                	unimp
    4bf6:	0002                	c.slli64	zero
    4bf8:	0072                	c.slli	zero,0x1c
    4bfa:	06d8                	addi	a4,sp,836
    4bfc:	0000                	unimp
    4bfe:	06e8                	addi	a0,sp,844
    4c00:	0000                	unimp
    4c02:	01790003          	lb	zero,23(s2)
    4c06:	ec9f 0006 6c00      	0x6c000006ec9f
    4c0c:	01000007          	vle8ff.v	v0,(zero),v0.t
    4c10:	6b00                	flw	fs0,16(a4)
    4c12:	088c                	addi	a1,sp,80
    4c14:	0000                	unimp
    4c16:	0894                	addi	a3,sp,80
    4c18:	0000                	unimp
    4c1a:	0001                	nop
    4c1c:	9459                	srai	s0,s0,0x36
    4c1e:	0008                	0x8
    4c20:	d800                	sw	s0,48(s0)
    4c22:	0008                	0x8
    4c24:	0300                	addi	s0,sp,384
    4c26:	7900                	flw	fs0,48(a0)
    4c28:	9f01                	0x9f01
    4c2a:	08d8                	addi	a4,sp,84
    4c2c:	0000                	unimp
    4c2e:	08f4                	addi	a3,sp,92
    4c30:	0000                	unimp
    4c32:	7f7e0003          	lb	zero,2039(t3)
    4c36:	3c9f 000a 4800      	0x4800000a3c9f
    4c3c:	000a                	c.slli	zero,0x2
    4c3e:	0100                	addi	s0,sp,128
    4c40:	6b00                	flw	fs0,16(a4)
    4c42:	0bf0                	addi	a2,sp,476
    4c44:	0000                	unimp
    4c46:	0c00                	addi	s0,sp,528
    4c48:	0000                	unimp
    4c4a:	0001                	nop
    4c4c:	0000006b          	0x6b
    4c50:	0000                	unimp
    4c52:	0000                	unimp
    4c54:	9400                	0x9400
    4c56:	0005                	c.nop	1
    4c58:	9c00                	0x9c00
    4c5a:	0005                	c.nop	1
    4c5c:	0100                	addi	s0,sp,128
    4c5e:	5d00                	lw	s0,56(a0)
    4c60:	05b0                	addi	a2,sp,712
    4c62:	0000                	unimp
    4c64:	05c0                	addi	s0,sp,708
    4c66:	0000                	unimp
    4c68:	0001                	nop
    4c6a:	005d                	c.nop	23
    4c6c:	0000                	unimp
    4c6e:	0000                	unimp
    4c70:	0000                	unimp
    4c72:	dc00                	sw	s0,56(s0)
    4c74:	e8000007          	vlsseg8e8.v	v0,(zero),zero,v0.t
    4c78:	03000007          	vle8ff.v	v0,(zero)
    4c7c:	7e00                	flw	fs0,56(a2)
    4c7e:	9f7f                	0x9f7f
	...
    4c88:	07d4                	addi	a3,sp,964
    4c8a:	0000                	unimp
    4c8c:	0804                	addi	s1,sp,16
    4c8e:	0000                	unimp
    4c90:	0001                	nop
    4c92:	0058                	addi	a4,sp,4
    4c94:	0000                	unimp
    4c96:	0000                	unimp
    4c98:	0000                	unimp
    4c9a:	d400                	sw	s0,40(s0)
    4c9c:	e8000007          	vlsseg8e8.v	v0,(zero),zero,v0.t
    4ca0:	01000007          	vle8ff.v	v0,(zero),v0.t
    4ca4:	5800                	lw	s0,48(s0)
    4ca6:	07e8                	addi	a0,sp,972
    4ca8:	0000                	unimp
    4caa:	0804                	addi	s1,sp,16
    4cac:	0000                	unimp
    4cae:	0001                	nop
    4cb0:	005c                	addi	a5,sp,4
    4cb2:	0000                	unimp
    4cb4:	0000                	unimp
    4cb6:	0000                	unimp
    4cb8:	1000                	addi	s0,sp,32
    4cba:	0009                	c.nop	2
    4cbc:	1800                	addi	s0,sp,48
    4cbe:	0009                	c.nop	2
    4cc0:	0300                	addi	s0,sp,384
    4cc2:	7e00                	flw	fs0,56(a2)
    4cc4:	9f50                	0x9f50
    4cc6:	0918                	addi	a4,sp,144
    4cc8:	0000                	unimp
    4cca:	0924                	addi	s1,sp,152
    4ccc:	0000                	unimp
    4cce:	0001                	nop
    4cd0:	005e                	c.slli	zero,0x17
    4cd2:	0000                	unimp
    4cd4:	0000                	unimp
    4cd6:	0000                	unimp
    4cd8:	5000                	lw	s0,32(s0)
    4cda:	0009                	c.nop	2
    4cdc:	ac00                	fsd	fs0,24(s0)
    4cde:	0009                	c.nop	2
    4ce0:	0100                	addi	s0,sp,128
    4ce2:	5f00                	lw	s0,56(a4)
	...
    4cec:	0950                	addi	a2,sp,148
    4cee:	0000                	unimp
    4cf0:	09b4                	addi	a3,sp,216
    4cf2:	0000                	unimp
    4cf4:	0001                	nop
    4cf6:	b45d                	j	479c <__divdf3+0x6b0>
    4cf8:	0009                	c.nop	2
    4cfa:	d800                	sw	s0,48(s0)
    4cfc:	0009                	c.nop	2
    4cfe:	0100                	addi	s0,sp,128
    4d00:	5800                	lw	s0,48(s0)
    4d02:	09f4                	addi	a3,sp,220
    4d04:	0000                	unimp
    4d06:	000009f7          	0x9f7
    4d0a:	0001                	nop
    4d0c:	f75d                	bnez	a4,4cba <__muldf3+0x196>
    4d0e:	0009                	c.nop	2
    4d10:	0400                	addi	s0,sp,512
    4d12:	000a                	c.slli	zero,0x2
    4d14:	0200                	addi	s0,sp,256
    4d16:	7200                	flw	fs0,32(a2)
    4d18:	0400                	addi	s0,sp,512
    4d1a:	000a                	c.slli	zero,0x2
    4d1c:	2700                	fld	fs0,8(a4)
    4d1e:	000a                	c.slli	zero,0x2
    4d20:	0300                	addi	s0,sp,384
    4d22:	7d00                	flw	fs0,56(a0)
    4d24:	9f7f                	0x9f7f
    4d26:	00000a27          	vse8.v	v20,(zero),v0.t
    4d2a:	0a28                	addi	a0,sp,280
    4d2c:	0000                	unimp
    4d2e:	0006                	c.slli	zero,0x1
    4d30:	0072                	c.slli	zero,0x1c
    4d32:	3106                	fld	ft2,96(sp)
    4d34:	9f1c                	0x9f1c
    4d36:	0c00                	addi	s0,sp,528
    4d38:	0000                	unimp
    4d3a:	0c0c                	addi	a1,sp,528
    4d3c:	0000                	unimp
    4d3e:	0001                	nop
    4d40:	0c58                	addi	a4,sp,532
    4d42:	000c                	0xc
    4d44:	1000                	addi	s0,sp,32
    4d46:	000c                	0xc
    4d48:	0100                	addi	s0,sp,128
    4d4a:	5d00                	lw	s0,56(a0)
	...
    4d54:	0950                	addi	a2,sp,148
    4d56:	0000                	unimp
    4d58:	09d8                	addi	a4,sp,212
    4d5a:	0000                	unimp
    4d5c:	0001                	nop
    4d5e:	f465                	bnez	s0,4d46 <__muldf3+0x222>
    4d60:	0009                	c.nop	2
    4d62:	f700                	fsw	fs0,40(a4)
    4d64:	0009                	c.nop	2
    4d66:	0100                	addi	s0,sp,128
    4d68:	5a00                	lw	s0,48(a2)
    4d6a:	000009f7          	0x9f7
    4d6e:	09f8                	addi	a4,sp,220
    4d70:	0000                	unimp
    4d72:	0001                	nop
    4d74:	0465                	addi	s0,s0,25
    4d76:	000a                	c.slli	zero,0x2
    4d78:	2800                	fld	fs0,16(s0)
    4d7a:	000a                	c.slli	zero,0x2
    4d7c:	0100                	addi	s0,sp,128
    4d7e:	6500                	flw	fs0,8(a0)
    4d80:	0c00                	addi	s0,sp,528
    4d82:	0000                	unimp
    4d84:	0c10                	addi	a2,sp,528
    4d86:	0000                	unimp
    4d88:	0001                	nop
    4d8a:	0065                	c.nop	25
    4d8c:	0000                	unimp
    4d8e:	0000                	unimp
    4d90:	0000                	unimp
    4d92:	5000                	lw	s0,32(s0)
    4d94:	0009                	c.nop	2
    4d96:	6400                	flw	fs0,8(s0)
    4d98:	0009                	c.nop	2
    4d9a:	0600                	addi	s0,sp,768
    4d9c:	0300                	addi	s0,sp,384
    4d9e:	67a8                	flw	fa0,72(a5)
    4da0:	0000                	unimp
    4da2:	649f 0009 c800      	0xc8000009649f
    4da8:	0009                	c.nop	2
    4daa:	0100                	addi	s0,sp,128
    4dac:	5a00                	lw	s0,48(a2)
    4dae:	0c00                	addi	s0,sp,528
    4db0:	0000                	unimp
    4db2:	0c10                	addi	a2,sp,528
    4db4:	0000                	unimp
    4db6:	0001                	nop
    4db8:	005a                	c.slli	zero,0x16
    4dba:	0000                	unimp
    4dbc:	0000                	unimp
    4dbe:	0000                	unimp
    4dc0:	6400                	flw	fs0,8(s0)
    4dc2:	0009                	c.nop	2
    4dc4:	7400                	flw	fs0,40(s0)
    4dc6:	0009                	c.nop	2
    4dc8:	0200                	addi	s0,sp,256
    4dca:	3000                	fld	fs0,32(s0)
    4dcc:	f49f 0009 f800      	0xf8000009f49f
    4dd2:	0009                	c.nop	2
    4dd4:	0200                	addi	s0,sp,256
    4dd6:	3000                	fld	fs0,32(s0)
    4dd8:	009f 0000 0000      	0x9f
    4dde:	0000                	unimp
    4de0:	6400                	flw	fs0,8(s0)
    4de2:	0009                	c.nop	2
    4de4:	7400                	flw	fs0,40(s0)
    4de6:	0009                	c.nop	2
    4de8:	0200                	addi	s0,sp,256
    4dea:	3000                	fld	fs0,32(s0)
    4dec:	749f 0009 7c00      	0x7c000009749f
    4df2:	0009                	c.nop	2
    4df4:	0900                	addi	s0,sp,144
    4df6:	7c00                	flw	fs0,56(s0)
    4df8:	9100                	0x9100
    4dfa:	1c00                	addi	s0,sp,560
    4dfc:	9f08f823          	0x9f08f823
    4e00:	097c                	addi	a5,sp,156
    4e02:	0000                	unimp
    4e04:	0980                	addi	s0,sp,208
    4e06:	0000                	unimp
    4e08:	0009                	c.nop	2
    4e0a:	007c                	addi	a5,sp,12
    4e0c:	0091                	addi	ra,ra,4
    4e0e:	231c                	fld	fa5,0(a4)
    4e10:	08f9                	addi	a7,a7,30
    4e12:	809f 0009 a000      	0xa0000009809f
    4e18:	0009                	c.nop	2
    4e1a:	0900                	addi	s0,sp,144
    4e1c:	7c00                	flw	fs0,56(s0)
    4e1e:	9100                	0x9100
    4e20:	1c00                	addi	s0,sp,560
    4e22:	9f08f623          	0x9f08f623
	...
    4e2e:	03ec                	addi	a1,sp,460
    4e30:	0000                	unimp
    4e32:	03f0                	addi	a2,sp,460
    4e34:	0000                	unimp
    4e36:	0001                	nop
    4e38:	005f 0000 0000      	0x5f
    4e3e:	0000                	unimp
    4e40:	ec00                	fsw	fs0,24(s0)
    4e42:	00000003          	lb	zero,0(zero) # 0 <RAM_START_ADDRESS>
    4e46:	0004                	0x4
    4e48:	0600                	addi	s0,sp,768
    4e4a:	9e00                	0x9e00
    4e4c:	ee04                	fsw	fs1,24(a2)
    4e4e:	adbe                	fsd	fa5,216(sp)
    4e50:	00de                	slli	ra,ra,0x17
	...
    4e5a:	0000                	unimp
    4e5c:	d800                	sw	s0,48(s0)
    4e5e:	0000                	unimp
    4e60:	0100                	addi	s0,sp,128
    4e62:	5a00                	lw	s0,48(a2)
    4e64:	00d8                	addi	a4,sp,68
    4e66:	0000                	unimp
    4e68:	010c                	addi	a1,sp,128
    4e6a:	0000                	unimp
    4e6c:	0001                	nop
    4e6e:	00010c6b          	0x10c6b
    4e72:	0f00                	addi	s0,sp,912
    4e74:	0001                	nop
    4e76:	0100                	addi	s0,sp,128
    4e78:	5a00                	lw	s0,48(a2)
    4e7a:	0000010f          	0x10f
    4e7e:	0110                	addi	a2,sp,128
    4e80:	0000                	unimp
    4e82:	0004                	0x4
    4e84:	9f5a01f3          	0x9f5a01f3
    4e88:	0118                	addi	a4,sp,128
    4e8a:	0000                	unimp
    4e8c:	0120                	addi	s0,sp,136
    4e8e:	0000                	unimp
    4e90:	0001                	nop
    4e92:	0001206b          	0x1206b
    4e96:	2800                	fld	fs0,16(s0)
    4e98:	0001                	nop
    4e9a:	0300                	addi	s0,sp,384
    4e9c:	8b00                	0x8b00
    4e9e:	9f01                	0x9f01
    4ea0:	0128                	addi	a0,sp,136
    4ea2:	0000                	unimp
    4ea4:	016c                	addi	a1,sp,140
    4ea6:	0000                	unimp
    4ea8:	0001                	nop
    4eaa:	0001746b          	0x1746b
    4eae:	8c00                	0x8c00
    4eb0:	0001                	nop
    4eb2:	0100                	addi	s0,sp,128
    4eb4:	6b00                	flw	fs0,16(a4)
    4eb6:	0190                	addi	a2,sp,192
    4eb8:	0000                	unimp
    4eba:	01a0                	addi	s0,sp,200
    4ebc:	0000                	unimp
    4ebe:	0001                	nop
    4ec0:	0001a06b          	0x1a06b
    4ec4:	c400                	sw	s0,8(s0)
    4ec6:	0001                	nop
    4ec8:	0100                	addi	s0,sp,128
    4eca:	5e00                	lw	s0,56(a2)
    4ecc:	01c8                	addi	a0,sp,196
    4ece:	0000                	unimp
    4ed0:	000001eb          	0x1eb
    4ed4:	0001                	nop
    4ed6:	eb5e                	fsw	fs7,148(sp)
    4ed8:	0001                	nop
    4eda:	ec00                	fsw	fs0,24(s0)
    4edc:	0001                	nop
    4ede:	0800                	addi	s0,sp,16
    4ee0:	8b00                	0x8b00
    4ee2:	8700                	0x8700
    4ee4:	2200                	fld	fs0,0(a2)
    4ee6:	309f0123          	sb	s1,770(t5)
    4eea:	0002                	c.slli64	zero
    4eec:	8800                	0x8800
    4eee:	0002                	c.slli64	zero
    4ef0:	0100                	addi	s0,sp,128
    4ef2:	5a00                	lw	s0,48(a2)
    4ef4:	0288                	addi	a0,sp,320
    4ef6:	0000                	unimp
    4ef8:	02c8                	addi	a0,sp,324
    4efa:	0000                	unimp
    4efc:	0001                	nop
    4efe:	0002c86b          	0x2c86b
    4f02:	d800                	sw	s0,48(s0)
    4f04:	0002                	c.slli64	zero
    4f06:	0100                	addi	s0,sp,128
    4f08:	5a00                	lw	s0,48(a2)
    4f0a:	02d8                	addi	a4,sp,324
    4f0c:	0000                	unimp
    4f0e:	02e0                	addi	s0,sp,332
    4f10:	0000                	unimp
    4f12:	018b0003          	lb	zero,24(s6)
    4f16:	e09f 0002 ec00      	0xec000002e09f
    4f1c:	0002                	c.slli64	zero
    4f1e:	0300                	addi	s0,sp,384
    4f20:	8b00                	0x8b00
    4f22:	9f02                	jalr	t5
    4f24:	02ec                	addi	a1,sp,332
    4f26:	0000                	unimp
    4f28:	02f0                	addi	a2,sp,332
    4f2a:	0000                	unimp
    4f2c:	0001                	nop
    4f2e:	0002f06b          	0x2f06b
    4f32:	f800                	fsw	fs0,48(s0)
    4f34:	0002                	c.slli64	zero
    4f36:	0100                	addi	s0,sp,128
    4f38:	5a00                	lw	s0,48(a2)
    4f3a:	02f8                	addi	a4,sp,332
    4f3c:	0000                	unimp
    4f3e:	0304                	addi	s1,sp,384
    4f40:	0000                	unimp
    4f42:	018b0003          	lb	zero,24(s6)
    4f46:	049f 0003 2400      	0x24000003049f
    4f4c:	01000003          	lb	zero,16(zero) # 10 <_start>
    4f50:	6b00                	flw	fs0,16(a4)
	...
    4f5e:	00a8                	addi	a0,sp,72
    4f60:	0000                	unimp
    4f62:	0001                	nop
    4f64:	0000a85b          	0xa85b
    4f68:	f400                	fsw	fs0,40(s0)
    4f6a:	0000                	unimp
    4f6c:	0100                	addi	s0,sp,128
    4f6e:	5900                	lw	s0,48(a0)
    4f70:	0230                	addi	a2,sp,264
    4f72:	0000                	unimp
    4f74:	02d8                	addi	a4,sp,324
    4f76:	0000                	unimp
    4f78:	0001                	nop
    4f7a:	f059                	bnez	s0,4f00 <__muldf3+0x3dc>
    4f7c:	0002                	c.slli64	zero
    4f7e:	f800                	fsw	fs0,48(s0)
    4f80:	0002                	c.slli64	zero
    4f82:	0100                	addi	s0,sp,128
    4f84:	5900                	lw	s0,48(a0)
	...
    4f92:	00d8                	addi	a4,sp,68
    4f94:	0000                	unimp
    4f96:	0001                	nop
    4f98:	d85c                	sw	a5,52(s0)
    4f9a:	0000                	unimp
    4f9c:	1800                	addi	s0,sp,48
    4f9e:	0002                	c.slli64	zero
    4fa0:	0100                	addi	s0,sp,128
    4fa2:	6800                	flw	fs0,16(s0)
    4fa4:	0218                	addi	a4,sp,256
    4fa6:	0000                	unimp
    4fa8:	0230                	addi	a2,sp,264
    4faa:	0000                	unimp
    4fac:	0004                	0x4
    4fae:	9f5c01f3          	0x9f5c01f3
    4fb2:	0230                	addi	a2,sp,264
    4fb4:	0000                	unimp
    4fb6:	0288                	addi	a0,sp,320
    4fb8:	0000                	unimp
    4fba:	0001                	nop
    4fbc:	885c                	0x885c
    4fbe:	0002                	c.slli64	zero
    4fc0:	c800                	sw	s0,16(s0)
    4fc2:	0002                	c.slli64	zero
    4fc4:	0100                	addi	s0,sp,128
    4fc6:	6800                	flw	fs0,16(s0)
    4fc8:	02c8                	addi	a0,sp,324
    4fca:	0000                	unimp
    4fcc:	02d8                	addi	a4,sp,324
    4fce:	0000                	unimp
    4fd0:	0001                	nop
    4fd2:	d85c                	sw	a5,52(s0)
    4fd4:	0002                	c.slli64	zero
    4fd6:	f000                	fsw	fs0,32(s0)
    4fd8:	0002                	c.slli64	zero
    4fda:	0100                	addi	s0,sp,128
    4fdc:	6800                	flw	fs0,16(s0)
    4fde:	02f0                	addi	a2,sp,332
    4fe0:	0000                	unimp
    4fe2:	02f8                	addi	a4,sp,332
    4fe4:	0000                	unimp
    4fe6:	0001                	nop
    4fe8:	f85c                	fsw	fa5,52(s0)
    4fea:	0002                	c.slli64	zero
    4fec:	2400                	fld	fs0,8(s0)
    4fee:	01000003          	lb	zero,16(zero) # 10 <_start>
    4ff2:	6800                	flw	fs0,16(s0)
	...
    5000:	006c                	addi	a1,sp,12
    5002:	0000                	unimp
    5004:	0001                	nop
    5006:	6c5d                	lui	s8,0x17
    5008:	0000                	unimp
    500a:	d800                	sw	s0,48(s0)
    500c:	0000                	unimp
    500e:	0100                	addi	s0,sp,128
    5010:	6200                	flw	fs0,0(a2)
    5012:	00f0                	addi	a2,sp,76
    5014:	0000                	unimp
    5016:	00f8                	addi	a4,sp,76
    5018:	0000                	unimp
    501a:	0001                	nop
    501c:	f862                	fsw	fs8,48(sp)
    501e:	0000                	unimp
    5020:	1000                	addi	s0,sp,32
    5022:	0001                	nop
    5024:	0100                	addi	s0,sp,128
    5026:	5900                	lw	s0,48(a0)
    5028:	0118                	addi	a4,sp,128
    502a:	0000                	unimp
    502c:	0140                	addi	s0,sp,132
    502e:	0000                	unimp
    5030:	0001                	nop
    5032:	4062                	0x4062
    5034:	0001                	nop
    5036:	4800                	lw	s0,16(s0)
    5038:	0001                	nop
    503a:	0300                	addi	s0,sp,384
    503c:	8200                	0x8200
    503e:	9f7f                	0x9f7f
    5040:	0174                	addi	a3,sp,140
    5042:	0000                	unimp
    5044:	018c                	addi	a1,sp,192
    5046:	0000                	unimp
    5048:	0001                	nop
    504a:	c862                	sw	s8,16(sp)
    504c:	0001                	nop
    504e:	ec00                	fsw	fs0,24(s0)
    5050:	0001                	nop
    5052:	0300                	addi	s0,sp,384
    5054:	8200                	0x8200
    5056:	9f7f                	0x9f7f
    5058:	0230                	addi	a2,sp,264
    505a:	0000                	unimp
    505c:	0234                	addi	a3,sp,264
    505e:	0000                	unimp
    5060:	0001                	nop
    5062:	345d                	jal	4b08 <__ledf2+0xc8>
    5064:	0002                	c.slli64	zero
    5066:	5800                	lw	s0,48(s0)
    5068:	0002                	c.slli64	zero
    506a:	0100                	addi	s0,sp,128
    506c:	6200                	flw	fs0,0(a2)
    506e:	0258                	addi	a4,sp,260
    5070:	0000                	unimp
    5072:	0264                	addi	s1,sp,268
    5074:	0000                	unimp
    5076:	0001                	nop
    5078:	645d                	lui	s0,0x17
    507a:	0002                	c.slli64	zero
    507c:	8000                	0x8000
    507e:	0002                	c.slli64	zero
    5080:	0100                	addi	s0,sp,128
    5082:	6200                	flw	fs0,0(a2)
    5084:	02c8                	addi	a0,sp,324
    5086:	0000                	unimp
    5088:	0308                	addi	a0,sp,384
    508a:	0000                	unimp
    508c:	0001                	nop
    508e:	0862                	slli	a6,a6,0x18
    5090:	0c000003          	lb	zero,192(zero) # c0 <frame_dummy+0x1c>
    5094:	03000003          	lb	zero,48(zero) # 30 <_start+0x20>
    5098:	8200                	0x8200
    509a:	9f7f                	0x9f7f
    509c:	0314                	addi	a3,sp,384
    509e:	0000                	unimp
    50a0:	0320                	addi	s0,sp,392
    50a2:	0000                	unimp
    50a4:	0001                	nop
    50a6:	2059                	jal	512c <__muldf3+0x608>
    50a8:	24000003          	lb	zero,576(zero) # 240 <calc_func+0x120>
    50ac:	01000003          	lb	zero,16(zero) # 10 <_start>
    50b0:	6200                	flw	fs0,0(a2)
	...
    50be:	006c                	addi	a1,sp,12
    50c0:	0000                	unimp
    50c2:	0001                	nop
    50c4:	6c5e                	flw	fs8,212(sp)
    50c6:	0000                	unimp
    50c8:	e800                	fsw	fs0,16(s0)
    50ca:	0000                	unimp
    50cc:	0200                	addi	s0,sp,256
    50ce:	7200                	flw	fs0,32(a2)
    50d0:	e800                	fsw	fs0,16(s0)
    50d2:	0000                	unimp
    50d4:	7400                	flw	fs0,40(s0)
    50d6:	0001                	nop
    50d8:	0100                	addi	s0,sp,128
    50da:	6300                	flw	fs0,0(a4)
    50dc:	0174                	addi	a3,sp,140
    50de:	0000                	unimp
    50e0:	017c                	addi	a5,sp,140
    50e2:	0000                	unimp
    50e4:	7f830003          	lb	zero,2040(t1)
    50e8:	309f 0002 4000      	0x40000002309f
    50ee:	0002                	c.slli64	zero
    50f0:	0100                	addi	s0,sp,128
    50f2:	5e00                	lw	s0,56(a2)
    50f4:	0240                	addi	s0,sp,260
    50f6:	0000                	unimp
    50f8:	0258                	addi	a4,sp,260
    50fa:	0000                	unimp
    50fc:	0002                	c.slli64	zero
    50fe:	0072                	c.slli	zero,0x1c
    5100:	0258                	addi	a4,sp,260
    5102:	0000                	unimp
    5104:	0264                	addi	s1,sp,268
    5106:	0000                	unimp
    5108:	0001                	nop
    510a:	645e                	flw	fs0,212(sp)
    510c:	0002                	c.slli64	zero
    510e:	d800                	sw	s0,48(s0)
    5110:	0002                	c.slli64	zero
    5112:	0200                	addi	s0,sp,256
    5114:	7200                	flw	fs0,32(a2)
    5116:	d800                	sw	s0,48(s0)
    5118:	0002                	c.slli64	zero
    511a:	f000                	fsw	fs0,32(s0)
    511c:	0002                	c.slli64	zero
    511e:	0100                	addi	s0,sp,128
    5120:	6300                	flw	fs0,0(a4)
    5122:	02f0                	addi	a2,sp,332
    5124:	0000                	unimp
    5126:	02f8                	addi	a4,sp,332
    5128:	0000                	unimp
    512a:	0002                	c.slli64	zero
    512c:	0072                	c.slli	zero,0x1c
    512e:	02f8                	addi	a4,sp,332
    5130:	0000                	unimp
    5132:	0324                	addi	s1,sp,392
    5134:	0000                	unimp
    5136:	0001                	nop
    5138:	00000063          	beqz	zero,5138 <__muldf3+0x614>
	...
    5144:	6800                	flw	fs0,16(s0)
    5146:	0000                	unimp
    5148:	0100                	addi	s0,sp,128
    514a:	5f00                	lw	s0,56(a4)
    514c:	0068                	addi	a0,sp,12
    514e:	0000                	unimp
    5150:	0090                	addi	a2,sp,64
    5152:	0000                	unimp
    5154:	0001                	nop
    5156:	305f 0002 7000      	0x70000002305f
    515c:	0002                	c.slli64	zero
    515e:	0100                	addi	s0,sp,128
    5160:	5f00                	lw	s0,56(a4)
    5162:	02c8                	addi	a0,sp,324
    5164:	0000                	unimp
    5166:	02cc                	addi	a1,sp,324
    5168:	0000                	unimp
    516a:	0001                	nop
    516c:	005f 0000 0000      	0x5f
    5172:	0000                	unimp
    5174:	7400                	flw	fs0,40(s0)
    5176:	0000                	unimp
    5178:	2c00                	fld	fs0,24(s0)
    517a:	0002                	c.slli64	zero
    517c:	0300                	addi	s0,sp,384
    517e:	9100                	0x9100
    5180:	7eec                	flw	fa1,124(a3)
    5182:	022c                	addi	a1,sp,264
    5184:	0000                	unimp
    5186:	0230                	addi	a2,sp,264
    5188:	0000                	unimp
    518a:	ec720003          	lb	zero,-313(tp) # fffffec7 <RAM_SIZE+0xfffefec7>
    518e:	487e                	lw	a6,220(sp)
    5190:	0002                	c.slli64	zero
    5192:	5800                	lw	s0,48(s0)
    5194:	0002                	c.slli64	zero
    5196:	0300                	addi	s0,sp,384
    5198:	9100                	0x9100
    519a:	7eec                	flw	fa1,124(a3)
    519c:	0264                	addi	s1,sp,268
    519e:	0000                	unimp
    51a0:	0324                	addi	s1,sp,392
    51a2:	0000                	unimp
    51a4:	ec910003          	lb	zero,-311(sp)
    51a8:	007e                	c.slli	zero,0x1f
    51aa:	0000                	unimp
    51ac:	0000                	unimp
    51ae:	0000                	unimp
    51b0:	7400                	flw	fs0,40(s0)
    51b2:	0000                	unimp
    51b4:	9800                	0x9800
    51b6:	0000                	unimp
    51b8:	0200                	addi	s0,sp,256
    51ba:	3000                	fld	fs0,32(s0)
    51bc:	989f 0000 a400      	0xa4000000989f
    51c2:	0000                	unimp
    51c4:	0300                	addi	s0,sp,384
    51c6:	0800                	addi	s0,sp,16
    51c8:	9f20                	0x9f20
    51ca:	00a4                	addi	s1,sp,72
    51cc:	0000                	unimp
    51ce:	00a8                	addi	a0,sp,72
    51d0:	0000                	unimp
    51d2:	e8910003          	lb	zero,-375(sp)
    51d6:	487e                	lw	a6,220(sp)
    51d8:	0002                	c.slli64	zero
    51da:	5800                	lw	s0,48(s0)
    51dc:	0002                	c.slli64	zero
    51de:	0200                	addi	s0,sp,256
    51e0:	3000                	fld	fs0,32(s0)
    51e2:	649f 0002 6c00      	0x6c000002649f
    51e8:	0002                	c.slli64	zero
    51ea:	0200                	addi	s0,sp,256
    51ec:	3000                	fld	fs0,32(s0)
    51ee:	6c9f 0002 8000      	0x800000026c9f
    51f4:	0002                	c.slli64	zero
    51f6:	0300                	addi	s0,sp,384
    51f8:	0800                	addi	s0,sp,16
    51fa:	9f2d                	0x9f2d
    51fc:	02c8                	addi	a0,sp,324
    51fe:	0000                	unimp
    5200:	02d8                	addi	a4,sp,324
    5202:	0000                	unimp
    5204:	2b080003          	lb	zero,688(a6)
    5208:	009f 0000 0000      	0x9f
    520e:	0000                	unimp
    5210:	0000                	unimp
    5212:	0000                	unimp
    5214:	5c00                	lw	s0,56(s0)
    5216:	0000                	unimp
    5218:	0600                	addi	s0,sp,768
    521a:	0300                	addi	s0,sp,384
    521c:	67a8                	flw	fa0,72(a5)
    521e:	0000                	unimp
    5220:	5c9f 0000 e000      	0xe00000005c9f
    5226:	0000                	unimp
    5228:	0100                	addi	s0,sp,128
    522a:	6300                	flw	fs0,0(a4)
    522c:	0230                	addi	a2,sp,264
    522e:	0000                	unimp
    5230:	0258                	addi	a4,sp,260
    5232:	0000                	unimp
    5234:	0001                	nop
    5236:	00025863          	bgez	tp,5246 <__mulsi3+0x16>
    523a:	6400                	flw	fs0,8(s0)
    523c:	0002                	c.slli64	zero
    523e:	0600                	addi	s0,sp,768
    5240:	0300                	addi	s0,sp,384
    5242:	67a8                	flw	fa0,72(a5)
    5244:	0000                	unimp
    5246:	649f 0002 d800      	0xd8000002649f
    524c:	0002                	c.slli64	zero
    524e:	0100                	addi	s0,sp,128
    5250:	6300                	flw	fs0,0(a4)
    5252:	02f0                	addi	a2,sp,332
    5254:	0000                	unimp
    5256:	02f8                	addi	a4,sp,332
    5258:	0000                	unimp
    525a:	0001                	nop
    525c:	00000063          	beqz	zero,525c <__udivsi3>
    5260:	0000                	unimp
    5262:	0000                	unimp
    5264:	bc00                	fsd	fs0,56(s0)
    5266:	0000                	unimp
    5268:	c000                	sw	s0,0(s0)
    526a:	0000                	unimp
    526c:	0200                	addi	s0,sp,256
    526e:	3000                	fld	fs0,32(s0)
    5270:	c09f 0000 d800      	0xd8000000c09f
    5276:	0000                	unimp
    5278:	0200                	addi	s0,sp,256
    527a:	3100                	fld	fs0,32(a0)
    527c:	a09f 0001 a800      	0xa8000001a09f
    5282:	0001                	nop
    5284:	0900                	addi	s0,sp,144
    5286:	8b00                	0x8b00
    5288:	8700                	0x8700
    528a:	2200                	fld	fs0,0(a2)
    528c:	007e                	c.slli	zero,0x1f
    528e:	9f1c                	0x9f1c
    5290:	01a8                	addi	a0,sp,200
    5292:	0000                	unimp
    5294:	01b8                	addi	a4,sp,200
    5296:	0000                	unimp
    5298:	008b000b          	0x8b000b
    529c:	007e                	c.slli	zero,0x1f
    529e:	871c                	0x871c
    52a0:	2200                	fld	fs0,0(a2)
    52a2:	b89f0123          	sb	s1,-1150(t5)
    52a6:	0001                	nop
    52a8:	c400                	sw	s0,8(s0)
    52aa:	0001                	nop
    52ac:	0900                	addi	s0,sp,144
    52ae:	8b00                	0x8b00
    52b0:	8700                	0x8700
    52b2:	2200                	fld	fs0,0(a2)
    52b4:	007e                	c.slli	zero,0x1f
    52b6:	9f1c                	0x9f1c
    52b8:	02a0                	addi	s0,sp,328
    52ba:	0000                	unimp
    52bc:	02a4                	addi	s1,sp,328
    52be:	0000                	unimp
    52c0:	01860003          	lb	zero,24(a2)
    52c4:	a49f 0002 c800      	0xc8000002a49f
    52ca:	0002                	c.slli64	zero
    52cc:	0100                	addi	s0,sp,128
    52ce:	6600                	flw	fs0,8(a2)
	...
    52dc:	007c                	addi	a5,sp,12
    52de:	0000                	unimp
    52e0:	0006                	c.slli	zero,0x1
    52e2:	935a                	add	t1,t1,s6
    52e4:	5b04                	lw	s1,48(a4)
    52e6:	007c0493          	addi	s1,s8,7 # 17007 <RAM_SIZE+0x7007>
    52ea:	0000                	unimp
    52ec:	00ac                	addi	a1,sp,72
    52ee:	0000                	unimp
    52f0:	0006                	c.slli	zero,0x1
    52f2:	0af503f3          	0xaf503f3
    52f6:	9f25                	0x9f25
    52f8:	00ac                	addi	a1,sp,72
    52fa:	0000                	unimp
    52fc:	00c0                	addi	s0,sp,68
    52fe:	0000                	unimp
    5300:	0006                	c.slli	zero,0x1
    5302:	935a                	add	t1,t1,s6
    5304:	5b04                	lw	s1,48(a4)
    5306:	00c00493          	li	s1,12
    530a:	0000                	unimp
    530c:	0188                	addi	a0,sp,192
    530e:	0000                	unimp
    5310:	0006                	c.slli	zero,0x1
    5312:	0af503f3          	0xaf503f3
    5316:	9f25                	0x9f25
    5318:	0188                	addi	a0,sp,192
    531a:	0000                	unimp
    531c:	0190                	addi	a2,sp,192
    531e:	0000                	unimp
    5320:	0006                	c.slli	zero,0x1
    5322:	935a                	add	t1,t1,s6
    5324:	5b04                	lw	s1,48(a4)
    5326:	01900493          	li	s1,25
    532a:	0000                	unimp
    532c:	026c                	addi	a1,sp,268
    532e:	0000                	unimp
    5330:	0006                	c.slli	zero,0x1
    5332:	0af503f3          	0xaf503f3
    5336:	9f25                	0x9f25
    5338:	026c                	addi	a1,sp,268
    533a:	0000                	unimp
    533c:	0274                	addi	a3,sp,268
    533e:	0000                	unimp
    5340:	0006                	c.slli	zero,0x1
    5342:	935a                	add	t1,t1,s6
    5344:	5b04                	lw	s1,48(a4)
    5346:	02740493          	addi	s1,s0,39 # 17027 <RAM_SIZE+0x7027>
    534a:	0000                	unimp
    534c:	0334                	addi	a3,sp,392
    534e:	0000                	unimp
    5350:	0006                	c.slli	zero,0x1
    5352:	0af503f3          	0xaf503f3
    5356:	9f25                	0x9f25
    5358:	0334                	addi	a3,sp,392
    535a:	0000                	unimp
    535c:	0348                	addi	a0,sp,388
    535e:	0000                	unimp
    5360:	0006                	c.slli	zero,0x1
    5362:	935a                	add	t1,t1,s6
    5364:	5b04                	lw	s1,48(a4)
    5366:	03480493          	addi	s1,a6,52
    536a:	0000                	unimp
    536c:	03d4                	addi	a3,sp,452
    536e:	0000                	unimp
    5370:	0006                	c.slli	zero,0x1
    5372:	0af503f3          	0xaf503f3
    5376:	9f25                	0x9f25
    5378:	03d4                	addi	a3,sp,452
    537a:	0000                	unimp
    537c:	03e8                	addi	a0,sp,460
    537e:	0000                	unimp
    5380:	0006                	c.slli	zero,0x1
    5382:	935a                	add	t1,t1,s6
    5384:	5b04                	lw	s1,48(a4)
    5386:	03e80493          	addi	s1,a6,62
    538a:	0000                	unimp
    538c:	042c                	addi	a1,sp,520
    538e:	0000                	unimp
    5390:	0006                	c.slli	zero,0x1
    5392:	0af503f3          	0xaf503f3
    5396:	9f25                	0x9f25
    5398:	042c                	addi	a1,sp,520
    539a:	0000                	unimp
    539c:	0434                	addi	a3,sp,520
    539e:	0000                	unimp
    53a0:	0006                	c.slli	zero,0x1
    53a2:	935a                	add	t1,t1,s6
    53a4:	5b04                	lw	s1,48(a4)
    53a6:	04340493          	addi	s1,s0,67
    53aa:	0000                	unimp
    53ac:	051c                	addi	a5,sp,640
    53ae:	0000                	unimp
    53b0:	0006                	c.slli	zero,0x1
    53b2:	0af503f3          	0xaf503f3
    53b6:	9f25                	0x9f25
    53b8:	051c                	addi	a5,sp,640
    53ba:	0000                	unimp
    53bc:	0520                	addi	s0,sp,648
    53be:	0000                	unimp
    53c0:	0006                	c.slli	zero,0x1
    53c2:	935a                	add	t1,t1,s6
    53c4:	5b04                	lw	s1,48(a4)
    53c6:	05200493          	li	s1,82
    53ca:	0000                	unimp
    53cc:	078c                	addi	a1,sp,960
    53ce:	0000                	unimp
    53d0:	0006                	c.slli	zero,0x1
    53d2:	0af503f3          	0xaf503f3
    53d6:	9f25                	0x9f25
    53d8:	078c                	addi	a1,sp,960
    53da:	0000                	unimp
    53dc:	0794                	addi	a3,sp,960
    53de:	0000                	unimp
    53e0:	0006                	c.slli	zero,0x1
    53e2:	935a                	add	t1,t1,s6
    53e4:	5b04                	lw	s1,48(a4)
    53e6:	07940493          	addi	s1,s0,121
    53ea:	0000                	unimp
    53ec:	07d8                	addi	a4,sp,964
    53ee:	0000                	unimp
    53f0:	0006                	c.slli	zero,0x1
    53f2:	0af503f3          	0xaf503f3
    53f6:	9f25                	0x9f25
	...
    5404:	0060                	addi	s0,sp,12
    5406:	0000                	unimp
    5408:	0006                	c.slli	zero,0x1
    540a:	935c                	0x935c
    540c:	5d04                	lw	s1,56(a0)
    540e:	00600493          	li	s1,6
    5412:	0000                	unimp
    5414:	07d8                	addi	a4,sp,964
    5416:	0000                	unimp
    5418:	0006                	c.slli	zero,0x1
    541a:	0cf503f3          	0xcf503f3
    541e:	9f25                	0x9f25
	...
    542c:	00a4                	addi	s1,sp,72
    542e:	0000                	unimp
    5430:	0002                	c.slli64	zero
    5432:	9f30                	0x9f30
    5434:	00ac                	addi	a1,sp,72
    5436:	0000                	unimp
    5438:	01c0                	addi	s0,sp,196
    543a:	0000                	unimp
    543c:	0002                	c.slli64	zero
    543e:	9f30                	0x9f30
    5440:	01cc                	addi	a1,sp,196
    5442:	0000                	unimp
    5444:	02bc                	addi	a5,sp,328
    5446:	0000                	unimp
    5448:	0002                	c.slli64	zero
    544a:	9f30                	0x9f30
    544c:	0304                	addi	s1,sp,384
    544e:	0000                	unimp
    5450:	0594                	addi	a3,sp,704
    5452:	0000                	unimp
    5454:	0002                	c.slli64	zero
    5456:	9f30                	0x9f30
    5458:	05b4                	addi	a3,sp,712
    545a:	0000                	unimp
    545c:	06f8                	addi	a4,sp,844
    545e:	0000                	unimp
    5460:	0002                	c.slli64	zero
    5462:	9f30                	0x9f30
    5464:	078c                	addi	a1,sp,960
    5466:	0000                	unimp
    5468:	07bc                	addi	a5,sp,968
    546a:	0000                	unimp
    546c:	0002                	c.slli64	zero
    546e:	9f30                	0x9f30
	...
    5478:	003c                	addi	a5,sp,8
    547a:	0000                	unimp
    547c:	00a4                	addi	s1,sp,72
    547e:	0000                	unimp
    5480:	0001                	nop
    5482:	ac59                	j	5718 <modf+0xfc>
    5484:	0000                	unimp
    5486:	bc00                	fsd	fs0,56(s0)
    5488:	0002                	c.slli64	zero
    548a:	0100                	addi	s0,sp,128
    548c:	5900                	lw	s0,48(a0)
    548e:	02e4                	addi	s1,sp,332
    5490:	0000                	unimp
    5492:	02f4                	addi	a3,sp,332
    5494:	0000                	unimp
    5496:	0001                	nop
    5498:	0459                	addi	s0,s0,22
    549a:	60000003          	lb	zero,1536(zero) # 600 <core_bench_list+0xdc>
    549e:	01000003          	lb	zero,16(zero) # 10 <_start>
    54a2:	5900                	lw	s0,48(a0)
    54a4:	0368                	addi	a0,sp,396
    54a6:	0000                	unimp
    54a8:	03b8                	addi	a4,sp,456
    54aa:	0000                	unimp
    54ac:	0001                	nop
    54ae:	d459                	beqz	s0,543c <memcpy+0x24>
    54b0:	5c000003          	lb	zero,1472(zero) # 5c0 <core_bench_list+0x9c>
    54b4:	0004                	0x4
    54b6:	0100                	addi	s0,sp,128
    54b8:	5900                	lw	s0,48(a0)
    54ba:	0460                	addi	s0,sp,524
    54bc:	0000                	unimp
    54be:	04d8                	addi	a4,sp,580
    54c0:	0000                	unimp
    54c2:	0001                	nop
    54c4:	dc59                	beqz	s0,5462 <memcpy+0x4a>
    54c6:	0004                	0x4
    54c8:	4800                	lw	s0,16(s0)
    54ca:	0005                	c.nop	1
    54cc:	0100                	addi	s0,sp,128
    54ce:	5900                	lw	s0,48(a0)
    54d0:	054c                	addi	a1,sp,644
    54d2:	0000                	unimp
    54d4:	05a8                	addi	a0,sp,712
    54d6:	0000                	unimp
    54d8:	0001                	nop
    54da:	ac59                	j	5770 <modf+0x154>
    54dc:	0005                	c.nop	1
    54de:	e400                	fsw	fs0,8(s0)
    54e0:	0005                	c.nop	1
    54e2:	0100                	addi	s0,sp,128
    54e4:	5900                	lw	s0,48(a0)
    54e6:	0654                	addi	a3,sp,772
    54e8:	0000                	unimp
    54ea:	0668                	addi	a0,sp,780
    54ec:	0000                	unimp
    54ee:	0001                	nop
    54f0:	d059                	beqz	s0,5476 <memcpy+0x5e>
    54f2:	0006                	c.slli	zero,0x1
    54f4:	f800                	fsw	fs0,48(s0)
    54f6:	0006                	c.slli	zero,0x1
    54f8:	0100                	addi	s0,sp,128
    54fa:	5900                	lw	s0,48(a0)
    54fc:	078c                	addi	a1,sp,960
    54fe:	0000                	unimp
    5500:	07b0                	addi	a2,sp,968
    5502:	0000                	unimp
    5504:	0001                	nop
    5506:	b459                	j	4f8c <__muldf3+0x468>
    5508:	c4000007          	vluxseg7ei8.v	v0,(zero),v0,v0.t
    550c:	01000007          	vle8ff.v	v0,(zero),v0.t
    5510:	5900                	lw	s0,48(a0)
	...
    551a:	0028                	addi	a0,sp,8
    551c:	0000                	unimp
    551e:	0098                	addi	a4,sp,64
    5520:	0000                	unimp
    5522:	0001                	nop
    5524:	9c58                	0x9c58
    5526:	0000                	unimp
    5528:	a800                	fsd	fs0,16(s0)
    552a:	0000                	unimp
    552c:	0100                	addi	s0,sp,128
    552e:	5800                	lw	s0,48(s0)
    5530:	00ac                	addi	a1,sp,72
    5532:	0000                	unimp
    5534:	0108                	addi	a0,sp,128
    5536:	0000                	unimp
    5538:	0001                	nop
    553a:	4858                	lw	a4,20(s0)
    553c:	0001                	nop
    553e:	2800                	fld	fs0,16(s0)
    5540:	0002                	c.slli64	zero
    5542:	0100                	addi	s0,sp,128
    5544:	5800                	lw	s0,48(s0)
    5546:	022c                	addi	a1,sp,264
    5548:	0000                	unimp
    554a:	02bc                	addi	a5,sp,328
    554c:	0000                	unimp
    554e:	0001                	nop
    5550:	e458                	fsw	fa4,12(s0)
    5552:	0002                	c.slli64	zero
    5554:	0000                	unimp
    5556:	01000003          	lb	zero,16(zero) # 10 <_start>
    555a:	5800                	lw	s0,48(s0)
    555c:	0304                	addi	s1,sp,384
    555e:	0000                	unimp
    5560:	0330                	addi	a2,sp,392
    5562:	0000                	unimp
    5564:	0001                	nop
    5566:	3058                	fld	fa4,160(s0)
    5568:	34000003          	lb	zero,832(zero) # 340 <core_list_undo_remove+0x4>
    556c:	03000003          	lb	zero,48(zero) # 30 <_start+0x20>
    5570:	7d00                	flw	fs0,56(a0)
    5572:	9f7f                	0x9f7f
    5574:	0334                	addi	a3,sp,392
    5576:	0000                	unimp
    5578:	0364                	addi	s1,sp,396
    557a:	0000                	unimp
    557c:	0001                	nop
    557e:	6858                	flw	fa4,20(s0)
    5580:	b8000003          	lb	zero,-1152(zero) # fffffb80 <RAM_SIZE+0xfffefb80>
    5584:	01000003          	lb	zero,16(zero) # 10 <_start>
    5588:	5800                	lw	s0,48(s0)
    558a:	03d4                	addi	a3,sp,452
    558c:	0000                	unimp
    558e:	0474                	addi	a3,sp,524
    5590:	0000                	unimp
    5592:	0001                	nop
    5594:	7858                	flw	fa4,52(s0)
    5596:	0004                	0x4
    5598:	d400                	sw	s0,40(s0)
    559a:	0004                	0x4
    559c:	0100                	addi	s0,sp,128
    559e:	5800                	lw	s0,48(s0)
    55a0:	04dc                	addi	a5,sp,580
    55a2:	0000                	unimp
    55a4:	0544                	addi	s1,sp,644
    55a6:	0000                	unimp
    55a8:	0001                	nop
    55aa:	4c58                	lw	a4,28(s0)
    55ac:	0005                	c.nop	1
    55ae:	e400                	fsw	fs0,8(s0)
    55b0:	0005                	c.nop	1
    55b2:	0100                	addi	s0,sp,128
    55b4:	5800                	lw	s0,48(s0)
    55b6:	0654                	addi	a3,sp,772
    55b8:	0000                	unimp
    55ba:	0664                	addi	s1,sp,780
    55bc:	0000                	unimp
    55be:	0001                	nop
    55c0:	d058                	sw	a4,36(s0)
    55c2:	0006                	c.slli	zero,0x1
    55c4:	dc00                	sw	s0,56(s0)
    55c6:	0006                	c.slli	zero,0x1
    55c8:	0100                	addi	s0,sp,128
    55ca:	5800                	lw	s0,48(s0)
    55cc:	06e0                	addi	s0,sp,844
    55ce:	0000                	unimp
    55d0:	06f0                	addi	a2,sp,844
    55d2:	0000                	unimp
    55d4:	0001                	nop
    55d6:	8c58                	0x8c58
    55d8:	90000007          	vlseg5e128.v	v0,(zero),v0.t
    55dc:	01000007          	vle8ff.v	v0,(zero),v0.t
    55e0:	5800                	lw	s0,48(s0)
    55e2:	0794                	addi	a3,sp,960
    55e4:	0000                	unimp
    55e6:	07a0                	addi	s0,sp,968
    55e8:	0000                	unimp
    55ea:	0001                	nop
    55ec:	a458                	fsd	fa4,136(s0)
    55ee:	ac000007          	vloxseg6ei8.v	v0,(zero),v0,v0.t
    55f2:	01000007          	vle8ff.v	v0,(zero),v0.t
    55f6:	5800                	lw	s0,48(s0)
    55f8:	07b4                	addi	a3,sp,968
    55fa:	0000                	unimp
    55fc:	07cc                	addi	a1,sp,964
    55fe:	0000                	unimp
    5600:	0001                	nop
    5602:	0058                	addi	a4,sp,4
	...
    560c:	0000                	unimp
    560e:	5c00                	lw	s0,56(s0)
    5610:	0000                	unimp
    5612:	0100                	addi	s0,sp,128
    5614:	5a00                	lw	s0,48(a2)
    5616:	005c                	addi	a5,sp,4
    5618:	0000                	unimp
    561a:	0094                	addi	a3,sp,64
    561c:	0000                	unimp
    561e:	0001                	nop
    5620:	00009c5b          	0x9c5b
    5624:	a400                	fsd	fs0,8(s0)
    5626:	0000                	unimp
    5628:	0100                	addi	s0,sp,128
    562a:	5b00                	lw	s0,48(a4)
    562c:	00ac                	addi	a1,sp,72
    562e:	0000                	unimp
    5630:	0108                	addi	a0,sp,128
    5632:	0000                	unimp
    5634:	0001                	nop
    5636:	0001485b          	0x1485b
    563a:	a800                	fsd	fs0,16(s0)
    563c:	0001                	nop
    563e:	0100                	addi	s0,sp,128
    5640:	5b00                	lw	s0,48(a4)
    5642:	01b8                	addi	a4,sp,200
    5644:	0000                	unimp
    5646:	01c8                	addi	a0,sp,196
    5648:	0000                	unimp
    564a:	0001                	nop
    564c:	0001cc5b          	0x1cc5b
    5650:	0400                	addi	s0,sp,512
    5652:	0002                	c.slli64	zero
    5654:	0100                	addi	s0,sp,128
    5656:	5b00                	lw	s0,48(a4)
    5658:	0210                	addi	a2,sp,256
    565a:	0000                	unimp
    565c:	022c                	addi	a1,sp,264
    565e:	0000                	unimp
    5660:	0001                	nop
    5662:	2c5a                	fld	fs8,400(sp)
    5664:	0002                	c.slli64	zero
    5666:	5800                	lw	s0,48(s0)
    5668:	0002                	c.slli64	zero
    566a:	0100                	addi	s0,sp,128
    566c:	5b00                	lw	s0,48(a4)
    566e:	0260                	addi	s0,sp,268
    5670:	0000                	unimp
    5672:	02a8                	addi	a0,sp,328
    5674:	0000                	unimp
    5676:	0001                	nop
    5678:	0002e45b          	0x2e45b
    567c:	fc00                	fsw	fs0,56(s0)
    567e:	0002                	c.slli64	zero
    5680:	0100                	addi	s0,sp,128
    5682:	5b00                	lw	s0,48(a4)
    5684:	0304                	addi	s1,sp,384
    5686:	0000                	unimp
    5688:	0328                	addi	a0,sp,392
    568a:	0000                	unimp
    568c:	0001                	nop
    568e:	0003345b          	0x3345b
    5692:	6000                	flw	fs0,0(s0)
    5694:	01000003          	lb	zero,16(zero) # 10 <_start>
    5698:	5b00                	lw	s0,48(a4)
    569a:	0368                	addi	a0,sp,396
    569c:	0000                	unimp
    569e:	03b8                	addi	a4,sp,456
    56a0:	0000                	unimp
    56a2:	0001                	nop
    56a4:	0003d45b          	0x3d45b
    56a8:	4c00                	lw	s0,24(s0)
    56aa:	0004                	0x4
    56ac:	0100                	addi	s0,sp,128
    56ae:	5b00                	lw	s0,48(a4)
    56b0:	0460                	addi	s0,sp,524
    56b2:	0000                	unimp
    56b4:	0470                	addi	a2,sp,524
    56b6:	0000                	unimp
    56b8:	0001                	nop
    56ba:	0004785b          	0x4785b
    56be:	b000                	fsd	fs0,32(s0)
    56c0:	0004                	0x4
    56c2:	0100                	addi	s0,sp,128
    56c4:	5b00                	lw	s0,48(a4)
    56c6:	04bc                	addi	a5,sp,584
    56c8:	0000                	unimp
    56ca:	04dc                	addi	a5,sp,580
    56cc:	0000                	unimp
    56ce:	0001                	nop
    56d0:	dc5a                	sw	s6,56(sp)
    56d2:	0004                	0x4
    56d4:	0800                	addi	s0,sp,16
    56d6:	0005                	c.nop	1
    56d8:	0100                	addi	s0,sp,128
    56da:	5b00                	lw	s0,48(a4)
    56dc:	0510                	addi	a2,sp,640
    56de:	0000                	unimp
    56e0:	0544                	addi	s1,sp,644
    56e2:	0000                	unimp
    56e4:	0001                	nop
    56e6:	00054c5b          	0x54c5b
    56ea:	7000                	flw	fs0,32(s0)
    56ec:	0005                	c.nop	1
    56ee:	0100                	addi	s0,sp,128
    56f0:	5b00                	lw	s0,48(a4)
    56f2:	0580                	addi	s0,sp,704
    56f4:	0000                	unimp
    56f6:	0584                	addi	s1,sp,704
    56f8:	0000                	unimp
    56fa:	0001                	nop
    56fc:	0005945b          	0x5945b
    5700:	a400                	fsd	fs0,8(s0)
    5702:	0005                	c.nop	1
    5704:	0100                	addi	s0,sp,128
    5706:	5b00                	lw	s0,48(a4)
    5708:	05ac                	addi	a1,sp,712
    570a:	0000                	unimp
    570c:	05e4                	addi	s1,sp,716
    570e:	0000                	unimp
    5710:	0001                	nop
    5712:	0006545b          	0x6545b
    5716:	5800                	lw	s0,48(s0)
    5718:	0006                	c.slli	zero,0x1
    571a:	0100                	addi	s0,sp,128
    571c:	5b00                	lw	s0,48(a4)
    571e:	06d0                	addi	a2,sp,836
    5720:	0000                	unimp
    5722:	06d8                	addi	a4,sp,836
    5724:	0000                	unimp
    5726:	0001                	nop
    5728:	0006e05b          	0x6e05b
    572c:	e800                	fsw	fs0,16(s0)
    572e:	0006                	c.slli	zero,0x1
    5730:	0100                	addi	s0,sp,128
    5732:	5b00                	lw	s0,48(a4)
    5734:	06ec                	addi	a1,sp,844
    5736:	0000                	unimp
    5738:	06f0                	addi	a2,sp,844
    573a:	0000                	unimp
    573c:	0001                	nop
    573e:	00078c5b          	0x78c5b
    5742:	9c00                	0x9c00
    5744:	01000007          	vle8ff.v	v0,(zero),v0.t
    5748:	5b00                	lw	s0,48(a4)
    574a:	07a4                	addi	s1,sp,968
    574c:	0000                	unimp
    574e:	07ac                	addi	a1,sp,968
    5750:	0000                	unimp
    5752:	0001                	nop
    5754:	0007bc5b          	0x7bc5b
    5758:	c000                	sw	s0,0(s0)
    575a:	01000007          	vle8ff.v	v0,(zero),v0.t
    575e:	5b00                	lw	s0,48(a4)
	...
    5768:	0010                	0x10
    576a:	0000                	unimp
    576c:	0024                	addi	s1,sp,8
    576e:	0000                	unimp
    5770:	0001                	nop
    5772:	245f 0000 3c00      	0x3c000000245f
    5778:	0000                	unimp
    577a:	0900                	addi	s0,sp,144
    577c:	7b00                	flw	fs0,48(a4)
    577e:	0c00                	addi	s0,sp,528
    5780:	ffff                	0xffff
    5782:	9f1a000f          	0x9f1a000f
    5786:	003c                	addi	a5,sp,8
    5788:	0000                	unimp
    578a:	008c                	addi	a1,sp,64
    578c:	0000                	unimp
    578e:	0001                	nop
    5790:	9c5f 0000 a400      	0xa40000009c5f
    5796:	0000                	unimp
    5798:	0100                	addi	s0,sp,128
    579a:	5f00                	lw	s0,56(a4)
    579c:	00ac                	addi	a1,sp,72
    579e:	0000                	unimp
    57a0:	0104                	addi	s1,sp,128
    57a2:	0000                	unimp
    57a4:	0001                	nop
    57a6:	485f 0001 ac00      	0xac000001485f
    57ac:	0001                	nop
    57ae:	0100                	addi	s0,sp,128
    57b0:	5f00                	lw	s0,56(a4)
    57b2:	01b8                	addi	a4,sp,200
    57b4:	0000                	unimp
    57b6:	01c4                	addi	s1,sp,196
    57b8:	0000                	unimp
    57ba:	0001                	nop
    57bc:	cc5f 0001 1c00      	0x1c000001cc5f
    57c2:	0002                	c.slli64	zero
    57c4:	0100                	addi	s0,sp,128
    57c6:	5f00                	lw	s0,56(a4)
    57c8:	022c                	addi	a1,sp,264
    57ca:	0000                	unimp
    57cc:	0258                	addi	a4,sp,260
    57ce:	0000                	unimp
    57d0:	0001                	nop
    57d2:	605f 0002 9400      	0x94000002605f
    57d8:	0002                	c.slli64	zero
    57da:	0100                	addi	s0,sp,128
    57dc:	5f00                	lw	s0,56(a4)
    57de:	02e4                	addi	s1,sp,332
    57e0:	0000                	unimp
    57e2:	02f8                	addi	a4,sp,332
    57e4:	0000                	unimp
    57e6:	0001                	nop
    57e8:	045f 0003 1800      	0x18000003045f
    57ee:	01000003          	lb	zero,16(zero) # 10 <_start>
    57f2:	5f00                	lw	s0,56(a4)
    57f4:	0334                	addi	a3,sp,392
    57f6:	0000                	unimp
    57f8:	0358                	addi	a4,sp,388
    57fa:	0000                	unimp
    57fc:	0001                	nop
    57fe:	685f 0003 b400      	0xb4000003685f
    5804:	01000003          	lb	zero,16(zero) # 10 <_start>
    5808:	5f00                	lw	s0,56(a4)
    580a:	03d4                	addi	a3,sp,452
    580c:	0000                	unimp
    580e:	0450                	addi	a2,sp,516
    5810:	0000                	unimp
    5812:	0001                	nop
    5814:	605f 0004 6c00      	0x6c000004605f
    581a:	0004                	0x4
    581c:	0100                	addi	s0,sp,128
    581e:	5f00                	lw	s0,56(a4)
    5820:	0478                	addi	a4,sp,524
    5822:	0000                	unimp
    5824:	04c8                	addi	a0,sp,580
    5826:	0000                	unimp
    5828:	0001                	nop
    582a:	dc5f 0004 0800      	0x8000004dc5f
    5830:	0005                	c.nop	1
    5832:	0100                	addi	s0,sp,128
    5834:	5f00                	lw	s0,56(a4)
    5836:	0510                	addi	a2,sp,640
    5838:	0000                	unimp
    583a:	0540                	addi	s0,sp,644
    583c:	0000                	unimp
    583e:	0001                	nop
    5840:	4c5f 0005 7400      	0x740000054c5f
    5846:	0005                	c.nop	1
    5848:	0100                	addi	s0,sp,128
    584a:	5f00                	lw	s0,56(a4)
    584c:	0580                	addi	s0,sp,704
    584e:	0000                	unimp
    5850:	058c                	addi	a1,sp,704
    5852:	0000                	unimp
    5854:	0001                	nop
    5856:	945f 0005 a000      	0xa0000005945f
    585c:	0005                	c.nop	1
    585e:	0100                	addi	s0,sp,128
    5860:	5f00                	lw	s0,56(a4)
    5862:	05ac                	addi	a1,sp,712
    5864:	0000                	unimp
    5866:	05d8                	addi	a4,sp,708
    5868:	0000                	unimp
    586a:	0001                	nop
    586c:	545f 0006 6000      	0x60000006545f
    5872:	0006                	c.slli	zero,0x1
    5874:	0100                	addi	s0,sp,128
    5876:	5f00                	lw	s0,56(a4)
    5878:	06d0                	addi	a2,sp,836
    587a:	0000                	unimp
    587c:	06d4                	addi	a3,sp,836
    587e:	0000                	unimp
    5880:	0001                	nop
    5882:	e05f 0006 e400      	0xe4000006e05f
    5888:	0006                	c.slli	zero,0x1
    588a:	0100                	addi	s0,sp,128
    588c:	5f00                	lw	s0,56(a4)
    588e:	06ec                	addi	a1,sp,844
    5890:	0000                	unimp
    5892:	06f0                	addi	a2,sp,844
    5894:	0000                	unimp
    5896:	0001                	nop
    5898:	8c5f 0007 9800      	0x980000078c5f
    589e:	01000007          	vle8ff.v	v0,(zero),v0.t
    58a2:	5f00                	lw	s0,56(a4)
    58a4:	07a4                	addi	s1,sp,968
    58a6:	0000                	unimp
    58a8:	07a8                	addi	a0,sp,968
    58aa:	0000                	unimp
    58ac:	0001                	nop
    58ae:	b45f 0007 b800      	0xb8000007b45f
    58b4:	01000007          	vle8ff.v	v0,(zero),v0.t
    58b8:	5f00                	lw	s0,56(a4)
    58ba:	07bc                	addi	a5,sp,968
    58bc:	0000                	unimp
    58be:	07c8                	addi	a0,sp,964
    58c0:	0000                	unimp
    58c2:	0001                	nop
    58c4:	005f 0000 0000      	0x5f
    58ca:	0000                	unimp
    58cc:	5c00                	lw	s0,56(s0)
    58ce:	0000                	unimp
    58d0:	7400                	flw	fs0,40(s0)
    58d2:	0000                	unimp
    58d4:	0100                	addi	s0,sp,128
    58d6:	5d00                	lw	s0,56(a0)
    58d8:	00ac                	addi	a1,sp,72
    58da:	0000                	unimp
    58dc:	00b0                	addi	a2,sp,72
    58de:	0000                	unimp
    58e0:	0001                	nop
    58e2:	885d                	andi	s0,s0,23
    58e4:	0001                	nop
    58e6:	9800                	0x9800
    58e8:	0001                	nop
    58ea:	0100                	addi	s0,sp,128
    58ec:	5d00                	lw	s0,56(a0)
    58ee:	01cc                	addi	a1,sp,196
    58f0:	0000                	unimp
    58f2:	01d0                	addi	a2,sp,196
    58f4:	0000                	unimp
    58f6:	0001                	nop
    58f8:	6c5d                	lui	s8,0x17
    58fa:	0002                	c.slli64	zero
    58fc:	7000                	flw	fs0,32(s0)
    58fe:	0002                	c.slli64	zero
    5900:	0100                	addi	s0,sp,128
    5902:	5d00                	lw	s0,56(a0)
    5904:	0334                	addi	a3,sp,392
    5906:	0000                	unimp
    5908:	0340                	addi	s0,sp,388
    590a:	0000                	unimp
    590c:	0001                	nop
    590e:	d45d                	beqz	s0,58bc <atexit>
    5910:	d8000003          	lb	zero,-640(zero) # fffffd80 <RAM_SIZE+0xfffefd80>
    5914:	01000003          	lb	zero,16(zero) # 10 <_start>
    5918:	5d00                	lw	s0,56(a0)
    591a:	042c                	addi	a1,sp,520
    591c:	0000                	unimp
    591e:	05e4                	addi	s1,sp,716
    5920:	0000                	unimp
    5922:	0001                	nop
    5924:	545d                	li	s0,-9
    5926:	0006                	c.slli	zero,0x1
    5928:	6800                	flw	fs0,16(s0)
    592a:	0006                	c.slli	zero,0x1
    592c:	0100                	addi	s0,sp,128
    592e:	5d00                	lw	s0,56(a0)
    5930:	0794                	addi	a3,sp,960
    5932:	0000                	unimp
    5934:	07cc                	addi	a1,sp,964
    5936:	0000                	unimp
    5938:	0001                	nop
    593a:	005d                	c.nop	23
    593c:	0000                	unimp
    593e:	0000                	unimp
    5940:	0000                	unimp
    5942:	5c00                	lw	s0,56(s0)
    5944:	0000                	unimp
    5946:	bc00                	fsd	fs0,56(s0)
    5948:	0002                	c.slli64	zero
    594a:	0100                	addi	s0,sp,128
    594c:	5600                	lw	s0,40(a2)
    594e:	02e4                	addi	s1,sp,332
    5950:	0000                	unimp
    5952:	000005ef          	jal	a1,5952 <__fpclassifyd+0x26>
    5956:	0001                	nop
    5958:	5456                	lw	s0,116(sp)
    595a:	0006                	c.slli	zero,0x1
    595c:	6f00                	flw	fs0,24(a4)
    595e:	0006                	c.slli	zero,0x1
    5960:	0100                	addi	s0,sp,128
    5962:	5600                	lw	s0,40(a2)
    5964:	06d0                	addi	a2,sp,836
    5966:	0000                	unimp
    5968:	06f8                	addi	a4,sp,844
    596a:	0000                	unimp
    596c:	0001                	nop
    596e:	8c56                	mv	s8,s5
    5970:	cc000007          	vloxseg7ei8.v	v0,(zero),v0,v0.t
    5974:	01000007          	vle8ff.v	v0,(zero),v0.t
    5978:	5600                	lw	s0,40(a2)
	...
    5982:	005c                	addi	a5,sp,4
    5984:	0000                	unimp
    5986:	0084                	addi	s1,sp,64
    5988:	0000                	unimp
    598a:	0001                	nop
    598c:	9c5c                	0x9c5c
    598e:	0000                	unimp
    5990:	a400                	fsd	fs0,8(s0)
    5992:	0000                	unimp
    5994:	0100                	addi	s0,sp,128
    5996:	5c00                	lw	s0,56(s0)
    5998:	00ac                	addi	a1,sp,72
    599a:	0000                	unimp
    599c:	00e4                	addi	s1,sp,76
    599e:	0000                	unimp
    59a0:	0001                	nop
    59a2:	f05c                	fsw	fa5,36(s0)
    59a4:	0000                	unimp
    59a6:	f800                	fsw	fs0,48(s0)
    59a8:	0000                	unimp
    59aa:	0100                	addi	s0,sp,128
    59ac:	5c00                	lw	s0,56(s0)
    59ae:	0148                	addi	a0,sp,132
    59b0:	0000                	unimp
    59b2:	016c                	addi	a1,sp,140
    59b4:	0000                	unimp
    59b6:	0001                	nop
    59b8:	7c5c                	flw	fa5,60(s0)
    59ba:	0001                	nop
    59bc:	8000                	0x8000
    59be:	0001                	nop
    59c0:	0100                	addi	s0,sp,128
    59c2:	5c00                	lw	s0,56(s0)
    59c4:	0188                	addi	a0,sp,192
    59c6:	0000                	unimp
    59c8:	01b0                	addi	a2,sp,200
    59ca:	0000                	unimp
    59cc:	0001                	nop
    59ce:	b85c                	fsd	fa5,176(s0)
    59d0:	0001                	nop
    59d2:	2000                	fld	fs0,0(s0)
    59d4:	0002                	c.slli64	zero
    59d6:	0100                	addi	s0,sp,128
    59d8:	5c00                	lw	s0,56(s0)
    59da:	022c                	addi	a1,sp,264
    59dc:	0000                	unimp
    59de:	0290                	addi	a2,sp,320
    59e0:	0000                	unimp
    59e2:	0001                	nop
    59e4:	e45c                	fsw	fa5,12(s0)
    59e6:	0002                	c.slli64	zero
    59e8:	ec00                	fsw	fs0,24(s0)
    59ea:	0002                	c.slli64	zero
    59ec:	0100                	addi	s0,sp,128
    59ee:	5c00                	lw	s0,56(s0)
    59f0:	0304                	addi	s1,sp,384
    59f2:	0000                	unimp
    59f4:	0310                	addi	a2,sp,384
    59f6:	0000                	unimp
    59f8:	0001                	nop
    59fa:	345c                	fld	fa5,168(s0)
    59fc:	50000003          	lb	zero,1280(zero) # 500 <core_list_mergesort+0x128>
    5a00:	01000003          	lb	zero,16(zero) # 10 <_start>
    5a04:	5c00                	lw	s0,56(s0)
    5a06:	0368                	addi	a0,sp,396
    5a08:	0000                	unimp
    5a0a:	0394                	addi	a3,sp,448
    5a0c:	0000                	unimp
    5a0e:	0001                	nop
    5a10:	a05c                	fsd	fa5,128(s0)
    5a12:	a8000003          	lb	zero,-1408(zero) # fffffa80 <RAM_SIZE+0xfffefa80>
    5a16:	01000003          	lb	zero,16(zero) # 10 <_start>
    5a1a:	5c00                	lw	s0,56(s0)
    5a1c:	03d4                	addi	a3,sp,452
    5a1e:	0000                	unimp
    5a20:	0410                	addi	a2,sp,512
    5a22:	0000                	unimp
    5a24:	0001                	nop
    5a26:	205c                	fld	fa5,128(s0)
    5a28:	0004                	0x4
    5a2a:	2400                	fld	fs0,8(s0)
    5a2c:	0004                	0x4
    5a2e:	0100                	addi	s0,sp,128
    5a30:	5c00                	lw	s0,56(s0)
    5a32:	042c                	addi	a1,sp,520
    5a34:	0000                	unimp
    5a36:	0454                	addi	a3,sp,516
    5a38:	0000                	unimp
    5a3a:	0001                	nop
    5a3c:	605c                	flw	fa5,4(s0)
    5a3e:	0004                	0x4
    5a40:	cc00                	sw	s0,24(s0)
    5a42:	0004                	0x4
    5a44:	0100                	addi	s0,sp,128
    5a46:	5c00                	lw	s0,56(s0)
    5a48:	04dc                	addi	a5,sp,580
    5a4a:	0000                	unimp
    5a4c:	0544                	addi	s1,sp,644
    5a4e:	0000                	unimp
    5a50:	0001                	nop
    5a52:	4c5c                	lw	a5,28(s0)
    5a54:	0005                	c.nop	1
    5a56:	7800                	flw	fs0,48(s0)
    5a58:	0005                	c.nop	1
    5a5a:	0100                	addi	s0,sp,128
    5a5c:	5c00                	lw	s0,56(s0)
    5a5e:	0580                	addi	s0,sp,704
    5a60:	0000                	unimp
    5a62:	05dc                	addi	a5,sp,708
    5a64:	0000                	unimp
    5a66:	0001                	nop
    5a68:	545c                	lw	a5,44(s0)
    5a6a:	0006                	c.slli	zero,0x1
    5a6c:	6800                	flw	fs0,16(s0)
    5a6e:	0006                	c.slli	zero,0x1
    5a70:	0100                	addi	s0,sp,128
    5a72:	5c00                	lw	s0,56(s0)
    5a74:	06d0                	addi	a2,sp,836
    5a76:	0000                	unimp
    5a78:	06f0                	addi	a2,sp,844
    5a7a:	0000                	unimp
    5a7c:	0001                	nop
    5a7e:	8c5c                	0x8c5c
    5a80:	cc000007          	vloxseg7ei8.v	v0,(zero),v0,v0.t
    5a84:	01000007          	vle8ff.v	v0,(zero),v0.t
    5a88:	5c00                	lw	s0,56(s0)
	...
    5a92:	005c                	addi	a5,sp,4
    5a94:	0000                	unimp
    5a96:	0100                	addi	s0,sp,128
    5a98:	0000                	unimp
    5a9a:	0001                	nop
    5a9c:	485e                	lw	a6,212(sp)
    5a9e:	0001                	nop
    5aa0:	7400                	flw	fs0,40(s0)
    5aa2:	0001                	nop
    5aa4:	0100                	addi	s0,sp,128
    5aa6:	5e00                	lw	s0,56(a2)
    5aa8:	017c                	addi	a5,sp,140
    5aaa:	0000                	unimp
    5aac:	02a0                	addi	s0,sp,328
    5aae:	0000                	unimp
    5ab0:	0001                	nop
    5ab2:	e45e                	fsw	fs7,8(sp)
    5ab4:	0002                	c.slli64	zero
    5ab6:	b000                	fsd	fs0,32(s0)
    5ab8:	01000003          	lb	zero,16(zero) # 10 <_start>
    5abc:	5e00                	lw	s0,56(a2)
    5abe:	03d4                	addi	a3,sp,452
    5ac0:	0000                	unimp
    5ac2:	0418                	addi	a4,sp,512
    5ac4:	0000                	unimp
    5ac6:	0001                	nop
    5ac8:	205e                	fld	ft0,464(sp)
    5aca:	0004                	0x4
    5acc:	e400                	fsw	fs0,8(s0)
    5ace:	0005                	c.nop	1
    5ad0:	0100                	addi	s0,sp,128
    5ad2:	5e00                	lw	s0,56(a2)
    5ad4:	0654                	addi	a3,sp,772
    5ad6:	0000                	unimp
    5ad8:	0668                	addi	a0,sp,780
    5ada:	0000                	unimp
    5adc:	0001                	nop
    5ade:	d05e                	sw	s7,32(sp)
    5ae0:	0006                	c.slli	zero,0x1
    5ae2:	f000                	fsw	fs0,32(s0)
    5ae4:	0006                	c.slli	zero,0x1
    5ae6:	0100                	addi	s0,sp,128
    5ae8:	5e00                	lw	s0,56(a2)
    5aea:	078c                	addi	a1,sp,960
    5aec:	0000                	unimp
    5aee:	07cc                	addi	a1,sp,964
    5af0:	0000                	unimp
    5af2:	0001                	nop
    5af4:	005e                	c.slli	zero,0x17
    5af6:	0000                	unimp
    5af8:	0000                	unimp
    5afa:	0000                	unimp
    5afc:	6800                	flw	fs0,16(s0)
    5afe:	0000                	unimp
    5b00:	a400                	fsd	fs0,8(s0)
    5b02:	0000                	unimp
    5b04:	0100                	addi	s0,sp,128
    5b06:	5900                	lw	s0,48(a0)
    5b08:	00ac                	addi	a1,sp,72
    5b0a:	0000                	unimp
    5b0c:	02f0                	addi	a2,sp,332
    5b0e:	0000                	unimp
    5b10:	0001                	nop
    5b12:	0459                	addi	s0,s0,22
    5b14:	34000003          	lb	zero,832(zero) # 340 <core_list_undo_remove+0x4>
    5b18:	01000003          	lb	zero,16(zero) # 10 <_start>
    5b1c:	5900                	lw	s0,48(a0)
    5b1e:	0338                	addi	a4,sp,392
    5b20:	0000                	unimp
    5b22:	042c                	addi	a1,sp,520
    5b24:	0000                	unimp
    5b26:	0001                	nop
    5b28:	3459                	jal	55ae <memset+0x6e>
    5b2a:	0004                	0x4
    5b2c:	1c00                	addi	s0,sp,560
    5b2e:	0005                	c.nop	1
    5b30:	0100                	addi	s0,sp,128
    5b32:	5d00                	lw	s0,56(a0)
    5b34:	0560                	addi	s0,sp,652
    5b36:	0000                	unimp
    5b38:	057c                	addi	a5,sp,652
    5b3a:	0000                	unimp
    5b3c:	0001                	nop
    5b3e:	7c59                	lui	s8,0xffff6
    5b40:	0005                	c.nop	1
    5b42:	8000                	0x8000
    5b44:	0005                	c.nop	1
    5b46:	0100                	addi	s0,sp,128
    5b48:	5d00                	lw	s0,56(a0)
    5b4a:	0580                	addi	s0,sp,704
    5b4c:	0000                	unimp
    5b4e:	0594                	addi	a3,sp,704
    5b50:	0000                	unimp
    5b52:	0001                	nop
    5b54:	c459                	beqz	s0,5be2 <__subdf3+0x172>
    5b56:	0005                	c.nop	1
    5b58:	e000                	fsw	fs0,0(s0)
    5b5a:	0005                	c.nop	1
    5b5c:	0100                	addi	s0,sp,128
    5b5e:	5900                	lw	s0,48(a0)
    5b60:	05e0                	addi	s0,sp,716
    5b62:	0000                	unimp
    5b64:	05e4                	addi	s1,sp,716
    5b66:	0000                	unimp
    5b68:	0001                	nop
    5b6a:	e45d                	bnez	s0,5c18 <__subdf3+0x1a8>
    5b6c:	0005                	c.nop	1
    5b6e:	f800                	fsw	fs0,48(s0)
    5b70:	0006                	c.slli	zero,0x1
    5b72:	0100                	addi	s0,sp,128
    5b74:	5900                	lw	s0,48(a0)
    5b76:	074c                	addi	a1,sp,900
    5b78:	0000                	unimp
    5b7a:	076c                	addi	a1,sp,908
    5b7c:	0000                	unimp
    5b7e:	0001                	nop
    5b80:	8c59                	or	s0,s0,a4
    5b82:	94000007          	vluxseg5ei128.v	v0,(zero),v0,v0.t
    5b86:	01000007          	vle8ff.v	v0,(zero),v0.t
    5b8a:	5900                	lw	s0,48(a0)
    5b8c:	0794                	addi	a3,sp,960
    5b8e:	0000                	unimp
    5b90:	07a4                	addi	s1,sp,968
    5b92:	0000                	unimp
    5b94:	0001                	nop
    5b96:	b45d                	j	563c <modf+0x20>
    5b98:	bc000007          	vloxseg6ei128.v	v0,(zero),v0,v0.t
    5b9c:	01000007          	vle8ff.v	v0,(zero),v0.t
    5ba0:	5900                	lw	s0,48(a0)
	...
    5baa:	006c                	addi	a1,sp,12
    5bac:	0000                	unimp
    5bae:	0094                	addi	a3,sp,64
    5bb0:	0000                	unimp
    5bb2:	0001                	nop
    5bb4:	9c58                	0x9c58
    5bb6:	0000                	unimp
    5bb8:	a400                	fsd	fs0,8(s0)
    5bba:	0000                	unimp
    5bbc:	0100                	addi	s0,sp,128
    5bbe:	5800                	lw	s0,48(s0)
    5bc0:	00ac                	addi	a1,sp,72
    5bc2:	0000                	unimp
    5bc4:	0188                	addi	a0,sp,192
    5bc6:	0000                	unimp
    5bc8:	0001                	nop
    5bca:	9058                	0x9058
    5bcc:	0001                	nop
    5bce:	c000                	sw	s0,0(s0)
    5bd0:	0001                	nop
    5bd2:	0100                	addi	s0,sp,128
    5bd4:	5600                	lw	s0,40(a2)
    5bd6:	01cc                	addi	a1,sp,196
    5bd8:	0000                	unimp
    5bda:	026c                	addi	a1,sp,268
    5bdc:	0000                	unimp
    5bde:	0001                	nop
    5be0:	8056                	c.mv	zero,s5
    5be2:	0002                	c.slli64	zero
    5be4:	b800                	fsd	fs0,48(s0)
    5be6:	0002                	c.slli64	zero
    5be8:	0200                	addi	s0,sp,256
    5bea:	3000                	fld	fs0,32(s0)
    5bec:	b89f 0002 bc00      	0xbc000002b89f
    5bf2:	0002                	c.slli64	zero
    5bf4:	0200                	addi	s0,sp,256
    5bf6:	3100                	fld	fs0,32(a0)
    5bf8:	bc9f 0002 e400      	0xe4000002bc9f
    5bfe:	0002                	c.slli64	zero
    5c00:	0100                	addi	s0,sp,128
    5c02:	5800                	lw	s0,48(s0)
    5c04:	02e4                	addi	s1,sp,332
    5c06:	0000                	unimp
    5c08:	0304                	addi	s1,sp,384
    5c0a:	0000                	unimp
    5c0c:	0004                	0x4
    5c0e:	ff0a                	fsw	ft2,188(sp)
    5c10:	03049f07          	flh	ft10,48(s1)
    5c14:	0000                	unimp
    5c16:	0334                	addi	a3,sp,392
    5c18:	0000                	unimp
    5c1a:	0001                	nop
    5c1c:	385d                	jal	54d2 <memcpy+0xba>
    5c1e:	60000003          	lb	zero,1536(zero) # 600 <core_bench_list+0xdc>
    5c22:	01000003          	lb	zero,16(zero) # 10 <_start>
    5c26:	5800                	lw	s0,48(s0)
    5c28:	0368                	addi	a0,sp,396
    5c2a:	0000                	unimp
    5c2c:	042c                	addi	a1,sp,520
    5c2e:	0000                	unimp
    5c30:	0001                	nop
    5c32:	3458                	fld	fa4,168(s0)
    5c34:	0004                	0x4
    5c36:	1c00                	addi	s0,sp,560
    5c38:	0005                	c.nop	1
    5c3a:	0100                	addi	s0,sp,128
    5c3c:	5600                	lw	s0,40(a2)
    5c3e:	0534                	addi	a3,sp,648
    5c40:	0000                	unimp
    5c42:	0544                	addi	s1,sp,644
    5c44:	0000                	unimp
    5c46:	0002                	c.slli64	zero
    5c48:	9f30                	0x9f30
    5c4a:	054c                	addi	a1,sp,644
    5c4c:	0000                	unimp
    5c4e:	0594                	addi	a3,sp,704
    5c50:	0000                	unimp
    5c52:	0002                	c.slli64	zero
    5c54:	9f30                	0x9f30
    5c56:	0594                	addi	a3,sp,704
    5c58:	0000                	unimp
    5c5a:	05b4                	addi	a3,sp,712
    5c5c:	0000                	unimp
    5c5e:	0004                	0x4
    5c60:	ff0a                	fsw	ft2,188(sp)
    5c62:	05b49f07          	flh	ft10,91(s1)
    5c66:	0000                	unimp
    5c68:	0650                	addi	a2,sp,772
    5c6a:	0000                	unimp
    5c6c:	0001                	nop
    5c6e:	5458                	lw	a4,44(s0)
    5c70:	0006                	c.slli	zero,0x1
    5c72:	6400                	flw	fs0,8(s0)
    5c74:	0006                	c.slli	zero,0x1
    5c76:	0100                	addi	s0,sp,128
    5c78:	5800                	lw	s0,48(s0)
    5c7a:	0668                	addi	a0,sp,780
    5c7c:	0000                	unimp
    5c7e:	06d0                	addi	a2,sp,836
    5c80:	0000                	unimp
    5c82:	0001                	nop
    5c84:	d058                	sw	a4,36(s0)
    5c86:	0006                	c.slli	zero,0x1
    5c88:	e000                	fsw	fs0,0(s0)
    5c8a:	0006                	c.slli	zero,0x1
    5c8c:	0100                	addi	s0,sp,128
    5c8e:	5600                	lw	s0,40(a2)
    5c90:	06e0                	addi	s0,sp,844
    5c92:	0000                	unimp
    5c94:	06ec                	addi	a1,sp,844
    5c96:	0000                	unimp
    5c98:	0002                	c.slli64	zero
    5c9a:	9f30                	0x9f30
    5c9c:	06ec                	addi	a1,sp,844
    5c9e:	0000                	unimp
    5ca0:	06f0                	addi	a2,sp,844
    5ca2:	0000                	unimp
    5ca4:	0001                	nop
    5ca6:	085d                	addi	a6,a6,23
    5ca8:	34000007          	vluxseg2ei128.v	v0,(zero),v0,v0.t
    5cac:	01000007          	vle8ff.v	v0,(zero),v0.t
    5cb0:	5800                	lw	s0,48(s0)
    5cb2:	0734                	addi	a3,sp,904
    5cb4:	0000                	unimp
    5cb6:	074c                	addi	a1,sp,900
    5cb8:	0000                	unimp
    5cba:	0004                	0x4
    5cbc:	ff0a                	fsw	ft2,188(sp)
    5cbe:	078c9f07          	flh	ft10,120(s9)
    5cc2:	0000                	unimp
    5cc4:	0790                	addi	a2,sp,960
    5cc6:	0000                	unimp
    5cc8:	0001                	nop
    5cca:	9458                	0x9458
    5ccc:	a4000007          	vluxseg6ei8.v	v0,(zero),v0,v0.t
    5cd0:	01000007          	vle8ff.v	v0,(zero),v0.t
    5cd4:	5600                	lw	s0,40(a2)
    5cd6:	07a4                	addi	s1,sp,968
    5cd8:	0000                	unimp
    5cda:	07ac                	addi	a1,sp,968
    5cdc:	0000                	unimp
    5cde:	0002                	c.slli64	zero
    5ce0:	9f30                	0x9f30
    5ce2:	07b4                	addi	a3,sp,968
    5ce4:	0000                	unimp
    5ce6:	07bc                	addi	a5,sp,968
    5ce8:	0000                	unimp
    5cea:	0002                	c.slli64	zero
    5cec:	9f30                	0x9f30
    5cee:	07bc                	addi	a5,sp,968
    5cf0:	0000                	unimp
    5cf2:	07cc                	addi	a1,sp,964
    5cf4:	0000                	unimp
    5cf6:	0004                	0x4
    5cf8:	ff0a                	fsw	ft2,188(sp)
    5cfa:	07cc9f07          	flh	ft10,124(s9)
    5cfe:	0000                	unimp
    5d00:	07d8                	addi	a4,sp,964
    5d02:	0000                	unimp
    5d04:	0001                	nop
    5d06:	0058                	addi	a4,sp,4
    5d08:	0000                	unimp
    5d0a:	0000                	unimp
    5d0c:	0000                	unimp
    5d0e:	9000                	0x9000
    5d10:	0000                	unimp
    5d12:	9400                	0x9400
    5d14:	0000                	unimp
    5d16:	0100                	addi	s0,sp,128
    5d18:	5c00                	lw	s0,56(s0)
    5d1a:	0094                	addi	a3,sp,64
    5d1c:	0000                	unimp
    5d1e:	009c                	addi	a5,sp,64
    5d20:	0000                	unimp
    5d22:	0001                	nop
    5d24:	0001045b          	0x1045b
    5d28:	0800                	addi	s0,sp,16
    5d2a:	0001                	nop
    5d2c:	0100                	addi	s0,sp,128
    5d2e:	5c00                	lw	s0,56(s0)
    5d30:	0108                	addi	a0,sp,128
    5d32:	0000                	unimp
    5d34:	0118                	addi	a4,sp,128
    5d36:	0000                	unimp
    5d38:	0001                	nop
    5d3a:	0001185b          	0x1185b
    5d3e:	2c00                	fld	fs0,24(s0)
    5d40:	0001                	nop
    5d42:	1500                	addi	s0,sp,672
    5d44:	7b00                	flw	fs0,48(a4)
    5d46:	3100                	fld	fs0,32(a0)
    5d48:	7b1a                	flw	fs6,164(sp)
    5d4a:	3100                	fld	fs0,32(a0)
    5d4c:	2125                	jal	6174 <__subdf3+0x704>
    5d4e:	007f                	0x7f
    5d50:	ff11                	bnez	a4,5c6c <__subdf3+0x1fc>
    5d52:	ffff                	0xffff
    5d54:	244f1a7b          	0x244f1a7b
    5d58:	9f21                	0x9f21
    5d5a:	0224                	addi	s1,sp,264
    5d5c:	0000                	unimp
    5d5e:	022c                	addi	a1,sp,264
    5d60:	0000                	unimp
    5d62:	0001                	nop
    5d64:	00029c5b          	0x29c5b
    5d68:	bc00                	fsd	fs0,56(s0)
    5d6a:	0002                	c.slli64	zero
    5d6c:	0100                	addi	s0,sp,128
    5d6e:	5c00                	lw	s0,56(s0)
    5d70:	02bc                	addi	a5,sp,328
    5d72:	0000                	unimp
    5d74:	02dc                	addi	a5,sp,324
    5d76:	0000                	unimp
    5d78:	0001                	nop
    5d7a:	0002dc5b          	0x2dc5b
    5d7e:	e400                	fsw	fs0,8(s0)
    5d80:	0002                	c.slli64	zero
    5d82:	0100                	addi	s0,sp,128
    5d84:	5e00                	lw	s0,56(a2)
    5d86:	0304                	addi	s1,sp,384
    5d88:	0000                	unimp
    5d8a:	0310                	addi	a2,sp,384
    5d8c:	0000                	unimp
    5d8e:	0024                	addi	s1,sp,8
    5d90:	4b40007b          	0x4b40007b
    5d94:	2224                	fld	fs1,64(a2)
    5d96:	007c007b          	0x7c007b
    5d9a:	4022                	0x4022
    5d9c:	2b22244b          	fnmsub.d	fs0,ft4,fs2,ft5,rdn
    5da0:	ff08                	fsw	fa0,56(a4)
    5da2:	7e1a                	flw	ft8,164(sp)
    5da4:	2200                	fld	fs0,0(a2)
    5da6:	007f                	0x7f
    5da8:	4f22                	lw	t5,8(sp)
    5daa:	7b24                	flw	fs1,112(a4)
    5dac:	7c00                	flw	fs0,56(s0)
    5dae:	2200                	fld	fs0,0(a2)
    5db0:	2531                	jal	63bc <__subdf3+0x94c>
    5db2:	9f21                	0x9f21
    5db4:	0310                	addi	a2,sp,384
    5db6:	0000                	unimp
    5db8:	0318                	addi	a4,sp,384
    5dba:	0000                	unimp
    5dbc:	001e                	c.slli	zero,0x7
    5dbe:	4b40007b          	0x4b40007b
    5dc2:	2224                	fld	fs1,64(a2)
    5dc4:	007c                	addi	a5,sp,12
    5dc6:	4b40                	lw	s0,20(a4)
    5dc8:	2224                	fld	fs1,64(a2)
    5dca:	1aff082b          	0x1aff082b
    5dce:	007e                	c.slli	zero,0x1f
    5dd0:	7f22                	flw	ft10,40(sp)
    5dd2:	2200                	fld	fs0,0(a2)
    5dd4:	007c244f          	fnmadd.s	fs0,fs8,ft7,ft0,rdn
    5dd8:	2531                	jal	63e4 <__subdf3+0x974>
    5dda:	9f21                	0x9f21
    5ddc:	0318                	addi	a4,sp,384
    5dde:	0000                	unimp
    5de0:	031c                	addi	a5,sp,384
    5de2:	0000                	unimp
    5de4:	007b001b          	0x7b001b
    5de8:	4b40                	lw	s0,20(a4)
    5dea:	2224                	fld	fs1,64(a2)
    5dec:	007c                	addi	a5,sp,12
    5dee:	4b40                	lw	s0,20(a4)
    5df0:	2224                	fld	fs1,64(a2)
    5df2:	1aff082b          	0x1aff082b
    5df6:	007f                	0x7f
    5df8:	4f22                	lw	t5,8(sp)
    5dfa:	7c24                	flw	fs1,120(s0)
    5dfc:	3100                	fld	fs0,32(a0)
    5dfe:	2125                	jal	6226 <__subdf3+0x7b6>
    5e00:	5c9f 0003 6000      	0x600000035c9f
    5e06:	01000003          	lb	zero,16(zero) # 10 <_start>
    5e0a:	5c00                	lw	s0,56(s0)
    5e0c:	0360                	addi	s0,sp,396
    5e0e:	0000                	unimp
    5e10:	0368                	addi	a0,sp,396
    5e12:	0000                	unimp
    5e14:	0001                	nop
    5e16:	0003b45b          	0x3b45b
    5e1a:	b800                	fsd	fs0,48(s0)
    5e1c:	01000003          	lb	zero,16(zero) # 10 <_start>
    5e20:	5c00                	lw	s0,56(s0)
    5e22:	03b8                	addi	a4,sp,456
    5e24:	0000                	unimp
    5e26:	03d4                	addi	a3,sp,452
    5e28:	0000                	unimp
    5e2a:	0001                	nop
    5e2c:	0004585b          	0x4585b
    5e30:	6000                	flw	fs0,0(s0)
    5e32:	0004                	0x4
    5e34:	0100                	addi	s0,sp,128
    5e36:	5b00                	lw	s0,48(a4)
    5e38:	04d0                	addi	a2,sp,580
    5e3a:	0000                	unimp
    5e3c:	04dc                	addi	a5,sp,580
    5e3e:	0000                	unimp
    5e40:	0001                	nop
    5e42:	0005385b          	0x5385b
    5e46:	4400                	lw	s0,8(s0)
    5e48:	0005                	c.nop	1
    5e4a:	0100                	addi	s0,sp,128
    5e4c:	5c00                	lw	s0,56(s0)
    5e4e:	0560                	addi	s0,sp,652
    5e50:	0000                	unimp
    5e52:	057c                	addi	a5,sp,652
    5e54:	0000                	unimp
    5e56:	0001                	nop
    5e58:	7c60                	flw	fs0,124(s0)
    5e5a:	0005                	c.nop	1
    5e5c:	8000                	0x8000
    5e5e:	0005                	c.nop	1
    5e60:	0100                	addi	s0,sp,128
    5e62:	5b00                	lw	s0,48(a4)
    5e64:	0580                	addi	s0,sp,704
    5e66:	0000                	unimp
    5e68:	0594                	addi	a3,sp,704
    5e6a:	0000                	unimp
    5e6c:	0001                	nop
    5e6e:	c460                	sw	s0,76(s0)
    5e70:	0005                	c.nop	1
    5e72:	d400                	sw	s0,40(s0)
    5e74:	0005                	c.nop	1
    5e76:	0100                	addi	s0,sp,128
    5e78:	6300                	flw	fs0,0(a4)
    5e7a:	05d4                	addi	a3,sp,708
    5e7c:	0000                	unimp
    5e7e:	05dc                	addi	a5,sp,708
    5e80:	0000                	unimp
    5e82:	0006                	c.slli	zero,0x1
    5e84:	007c007b          	0x7c007b
    5e88:	9f1c                	0x9f1c
    5e8a:	05e0                	addi	s0,sp,716
    5e8c:	0000                	unimp
    5e8e:	0614                	addi	a3,sp,768
    5e90:	0000                	unimp
    5e92:	0001                	nop
    5e94:	00061463          	bnez	a2,5e9c <__subdf3+0x42c>
    5e98:	3c00                	fld	fs0,56(s0)
    5e9a:	0006                	c.slli	zero,0x1
    5e9c:	0100                	addi	s0,sp,128
    5e9e:	5b00                	lw	s0,48(a4)
    5ea0:	0648                	addi	a0,sp,772
    5ea2:	0000                	unimp
    5ea4:	0654                	addi	a3,sp,772
    5ea6:	0000                	unimp
    5ea8:	0001                	nop
    5eaa:	0006545b          	0x6545b
    5eae:	8000                	0x8000
    5eb0:	0006                	c.slli	zero,0x1
    5eb2:	0100                	addi	s0,sp,128
    5eb4:	6300                	flw	fs0,0(a4)
    5eb6:	0680                	addi	s0,sp,832
    5eb8:	0000                	unimp
    5eba:	0688                	addi	a0,sp,832
    5ebc:	0000                	unimp
    5ebe:	0002                	c.slli64	zero
    5ec0:	9f30                	0x9f30
    5ec2:	0688                	addi	a0,sp,832
    5ec4:	0000                	unimp
    5ec6:	06d0                	addi	a2,sp,836
    5ec8:	0000                	unimp
    5eca:	0001                	nop
    5ecc:	0006ec5b          	0x6ec5b
    5ed0:	f000                	fsw	fs0,32(s0)
    5ed2:	0006                	c.slli	zero,0x1
    5ed4:	2400                	fld	fs0,8(s0)
    5ed6:	7b00                	flw	fs0,48(a4)
    5ed8:	4000                	lw	s0,0(s0)
    5eda:	7b22244b          	fnmsub.d	fs0,ft4,fs2,fa5,rdn
    5ede:	7c00                	flw	fs0,56(s0)
    5ee0:	2200                	fld	fs0,0(a2)
    5ee2:	4b40                	lw	s0,20(a4)
    5ee4:	2224                	fld	fs1,64(a2)
    5ee6:	1aff082b          	0x1aff082b
    5eea:	007e                	c.slli	zero,0x1f
    5eec:	7f22                	flw	ft10,40(sp)
    5eee:	2200                	fld	fs0,0(a2)
    5ef0:	007b244f          	fnmadd.s	fs0,fs6,ft7,ft0,rdn
    5ef4:	007c                	addi	a5,sp,12
    5ef6:	3122                	fld	ft2,40(sp)
    5ef8:	2125                	jal	6320 <__subdf3+0x8b0>
    5efa:	f89f 0006 2800      	0x28000006f89f
    5f00:	01000007          	vle8ff.v	v0,(zero),v0.t
    5f04:	5b00                	lw	s0,48(a4)
    5f06:	0728                	addi	a0,sp,904
    5f08:	0000                	unimp
    5f0a:	0738                	addi	a4,sp,904
    5f0c:	0000                	unimp
    5f0e:	0001                	nop
    5f10:	4c5a                	lw	s8,148(sp)
    5f12:	8c000007          	vloxseg5ei8.v	v0,(zero),v0,v0.t
    5f16:	01000007          	vle8ff.v	v0,(zero),v0.t
    5f1a:	5a00                	lw	s0,48(a2)
    5f1c:	07a4                	addi	s1,sp,968
    5f1e:	0000                	unimp
    5f20:	07ac                	addi	a1,sp,968
    5f22:	0000                	unimp
    5f24:	0001                	nop
    5f26:	b45c                	fsd	fa5,168(s0)
    5f28:	bc000007          	vloxseg6ei128.v	v0,(zero),v0,v0.t
    5f2c:	01000007          	vle8ff.v	v0,(zero),v0.t
    5f30:	6000                	flw	fs0,0(s0)
    5f32:	07cc                	addi	a1,sp,964
    5f34:	0000                	unimp
    5f36:	07d4                	addi	a3,sp,964
    5f38:	0000                	unimp
    5f3a:	0001                	nop
    5f3c:	0000005b          	0x5b
    5f40:	0000                	unimp
    5f42:	0000                	unimp
    5f44:	9000                	0x9000
    5f46:	0000                	unimp
    5f48:	9c00                	0x9c00
    5f4a:	0000                	unimp
    5f4c:	0100                	addi	s0,sp,128
    5f4e:	5f00                	lw	s0,56(a4)
    5f50:	0104                	addi	s1,sp,128
    5f52:	0000                	unimp
    5f54:	0114                	addi	a3,sp,128
    5f56:	0000                	unimp
    5f58:	0001                	nop
    5f5a:	145f 0001 1800      	0x18000001145f
    5f60:	0001                	nop
    5f62:	0900                	addi	s0,sp,144
    5f64:	7f00                	flw	fs0,56(a4)
    5f66:	1100                	addi	s0,sp,160
    5f68:	ffff                	0xffff
    5f6a:	7bff                	0x7bff
    5f6c:	9f1a                	add	t5,t5,t1
    5f6e:	0118                	addi	a4,sp,128
    5f70:	0000                	unimp
    5f72:	012c                	addi	a1,sp,136
    5f74:	0000                	unimp
    5f76:	007f000b          	0x7f000b
    5f7a:	ff11                	bnez	a4,5e96 <__subdf3+0x426>
    5f7c:	ffff                	0xffff
    5f7e:	25311a7b          	0x25311a7b
    5f82:	249f 0002 2c00      	0x2c000002249f
    5f88:	0002                	c.slli64	zero
    5f8a:	0100                	addi	s0,sp,128
    5f8c:	5f00                	lw	s0,56(a4)
    5f8e:	029c                	addi	a5,sp,320
    5f90:	0000                	unimp
    5f92:	02e4                	addi	s1,sp,332
    5f94:	0000                	unimp
    5f96:	0001                	nop
    5f98:	045f 0003 1000      	0x10000003045f
    5f9e:	1c000003          	lb	zero,448(zero) # 1c0 <calc_func+0xa0>
    5fa2:	7b00                	flw	fs0,48(a4)
    5fa4:	4000                	lw	s0,0(s0)
    5fa6:	7b22244b          	fnmsub.d	fs0,ft4,fs2,fa5,rdn
    5faa:	7c00                	flw	fs0,56(s0)
    5fac:	2200                	fld	fs0,0(a2)
    5fae:	4b40                	lw	s0,20(a4)
    5fb0:	2224                	fld	fs1,64(a2)
    5fb2:	1aff082b          	0x1aff082b
    5fb6:	007e                	c.slli	zero,0x1f
    5fb8:	7f22                	flw	ft10,40(sp)
    5fba:	2200                	fld	fs0,0(a2)
    5fbc:	2531                	jal	65c8 <__subdf3+0xb58>
    5fbe:	109f 0003 1800      	0x18000003109f
    5fc4:	19000003          	lb	zero,400(zero) # 190 <calc_func+0x70>
    5fc8:	7b00                	flw	fs0,48(a4)
    5fca:	4000                	lw	s0,0(s0)
    5fcc:	7c22244b          	fnmsub.h	fs0,ft4,ft2,fa5,rdn
    5fd0:	4000                	lw	s0,0(s0)
    5fd2:	2b22244b          	fnmsub.d	fs0,ft4,fs2,ft5,rdn
    5fd6:	ff08                	fsw	fa0,56(a4)
    5fd8:	7e1a                	flw	ft8,164(sp)
    5fda:	2200                	fld	fs0,0(a2)
    5fdc:	007f                	0x7f
    5fde:	3122                	fld	ft2,40(sp)
    5fe0:	9f25                	0x9f25
    5fe2:	0318                	addi	a4,sp,384
    5fe4:	0000                	unimp
    5fe6:	031c                	addi	a5,sp,384
    5fe8:	0000                	unimp
    5fea:	0016                	c.slli	zero,0x5
    5fec:	4b40007b          	0x4b40007b
    5ff0:	2224                	fld	fs1,64(a2)
    5ff2:	007c                	addi	a5,sp,12
    5ff4:	4b40                	lw	s0,20(a4)
    5ff6:	2224                	fld	fs1,64(a2)
    5ff8:	1aff082b          	0x1aff082b
    5ffc:	007f                	0x7f
    5ffe:	3122                	fld	ft2,40(sp)
    6000:	9f25                	0x9f25
    6002:	035c                	addi	a5,sp,388
    6004:	0000                	unimp
    6006:	0368                	addi	a0,sp,396
    6008:	0000                	unimp
    600a:	0001                	nop
    600c:	b45f 0003 cc00      	0xcc000003b45f
    6012:	01000003          	lb	zero,16(zero) # 10 <_start>
    6016:	5f00                	lw	s0,56(a4)
    6018:	03cc                	addi	a1,sp,452
    601a:	0000                	unimp
    601c:	03d4                	addi	a3,sp,452
    601e:	0000                	unimp
    6020:	0001                	nop
    6022:	5862                	lw	a6,56(sp)
    6024:	0004                	0x4
    6026:	6000                	flw	fs0,0(s0)
    6028:	0004                	0x4
    602a:	0100                	addi	s0,sp,128
    602c:	5f00                	lw	s0,56(a4)
    602e:	04d0                	addi	a2,sp,580
    6030:	0000                	unimp
    6032:	04dc                	addi	a5,sp,580
    6034:	0000                	unimp
    6036:	0001                	nop
    6038:	385f 0005 4400      	0x44000005385f
    603e:	0005                	c.nop	1
    6040:	0100                	addi	s0,sp,128
    6042:	5e00                	lw	s0,56(a2)
    6044:	0560                	addi	s0,sp,652
    6046:	0000                	unimp
    6048:	057c                	addi	a5,sp,652
    604a:	0000                	unimp
    604c:	0001                	nop
    604e:	7c5a                	flw	fs8,180(sp)
    6050:	0005                	c.nop	1
    6052:	8000                	0x8000
    6054:	0005                	c.nop	1
    6056:	0100                	addi	s0,sp,128
    6058:	5f00                	lw	s0,56(a4)
    605a:	0580                	addi	s0,sp,704
    605c:	0000                	unimp
    605e:	0594                	addi	a3,sp,704
    6060:	0000                	unimp
    6062:	0001                	nop
    6064:	c45a                	sw	s6,8(sp)
    6066:	0005                	c.nop	1
    6068:	0800                	addi	s0,sp,16
    606a:	0006                	c.slli	zero,0x1
    606c:	0100                	addi	s0,sp,128
    606e:	6200                	flw	fs0,0(a2)
    6070:	0610                	addi	a2,sp,768
    6072:	0000                	unimp
    6074:	064c                	addi	a1,sp,772
    6076:	0000                	unimp
    6078:	0001                	nop
    607a:	545f 0006 8000      	0x80000006545f
    6080:	0006                	c.slli	zero,0x1
    6082:	0100                	addi	s0,sp,128
    6084:	6200                	flw	fs0,0(a2)
    6086:	0680                	addi	s0,sp,832
    6088:	0000                	unimp
    608a:	06b4                	addi	a3,sp,840
    608c:	0000                	unimp
    608e:	0001                	nop
    6090:	b45f 0006 bc00      	0xbc000006b45f
    6096:	0006                	c.slli	zero,0x1
    6098:	0200                	addi	s0,sp,256
    609a:	3000                	fld	fs0,32(s0)
    609c:	bc9f 0006 d000      	0xd0000006bc9f
    60a2:	0006                	c.slli	zero,0x1
    60a4:	0100                	addi	s0,sp,128
    60a6:	5f00                	lw	s0,56(a4)
    60a8:	06ec                	addi	a1,sp,844
    60aa:	0000                	unimp
    60ac:	06f0                	addi	a2,sp,844
    60ae:	0000                	unimp
    60b0:	001c                	0x1c
    60b2:	4b40007b          	0x4b40007b
    60b6:	2224                	fld	fs1,64(a2)
    60b8:	007c007b          	0x7c007b
    60bc:	4022                	0x4022
    60be:	2b22244b          	fnmsub.d	fs0,ft4,fs2,ft5,rdn
    60c2:	ff08                	fsw	fa0,56(a4)
    60c4:	7e1a                	flw	ft8,164(sp)
    60c6:	2200                	fld	fs0,0(a2)
    60c8:	007f                	0x7f
    60ca:	3122                	fld	ft2,40(sp)
    60cc:	9f25                	0x9f25
    60ce:	06f8                	addi	a4,sp,844
    60d0:	0000                	unimp
    60d2:	0704                	addi	s1,sp,896
    60d4:	0000                	unimp
    60d6:	0001                	nop
    60d8:	045f 0007 1c00      	0x1c000007045f
    60de:	09000007          	vlse8.v	v0,(zero),a6,v0.t
    60e2:	7f00                	flw	fs0,56(a4)
    60e4:	1100                	addi	s0,sp,160
    60e6:	ffff                	0xffff
    60e8:	7bff                	0x7bff
    60ea:	9f1a                	add	t5,t5,t1
    60ec:	071c                	addi	a5,sp,896
    60ee:	0000                	unimp
    60f0:	073c                	addi	a5,sp,904
    60f2:	0000                	unimp
    60f4:	0001                	nop
    60f6:	4c5f 0007 5800      	0x580000074c5f
    60fc:	01000007          	vle8ff.v	v0,(zero),v0.t
    6100:	5f00                	lw	s0,56(a4)
    6102:	07a4                	addi	s1,sp,968
    6104:	0000                	unimp
    6106:	07ac                	addi	a1,sp,968
    6108:	0000                	unimp
    610a:	0001                	nop
    610c:	b45e                	fsd	fs7,40(sp)
    610e:	bc000007          	vloxseg6ei128.v	v0,(zero),v0,v0.t
    6112:	01000007          	vle8ff.v	v0,(zero),v0.t
    6116:	5a00                	lw	s0,48(a2)
    6118:	07cc                	addi	a1,sp,964
    611a:	0000                	unimp
    611c:	07d0                	addi	a2,sp,964
    611e:	0000                	unimp
    6120:	0009                	c.nop	2
    6122:	007f                	0x7f
    6124:	ff11                	bnez	a4,6040 <__subdf3+0x5d0>
    6126:	ffff                	0xffff
    6128:	009f1a7b          	0x9f1a7b
    612c:	0000                	unimp
    612e:	0000                	unimp
    6130:	0000                	unimp
    6132:	6800                	flw	fs0,16(s0)
    6134:	0000                	unimp
    6136:	7c00                	flw	fs0,56(s0)
    6138:	0000                	unimp
    613a:	0100                	addi	s0,sp,128
    613c:	6000                	flw	fs0,0(s0)
    613e:	007c                	addi	a5,sp,12
    6140:	0000                	unimp
    6142:	0088                	addi	a0,sp,64
    6144:	0000                	unimp
    6146:	0001                	nop
    6148:	885a                	mv	a6,s6
    614a:	0000                	unimp
    614c:	9400                	0x9400
    614e:	0000                	unimp
    6150:	0300                	addi	s0,sp,384
    6152:	8000                	0x8000
    6154:	9f7f                	0x9f7f
    6156:	009c                	addi	a5,sp,64
    6158:	0000                	unimp
    615a:	00a4                	addi	s1,sp,72
    615c:	0000                	unimp
    615e:	0001                	nop
    6160:	ac5a                	fsd	fs6,24(sp)
    6162:	0000                	unimp
    6164:	c000                	sw	s0,0(s0)
    6166:	0000                	unimp
    6168:	0100                	addi	s0,sp,128
    616a:	6000                	flw	fs0,0(s0)
    616c:	00c0                	addi	s0,sp,68
    616e:	0000                	unimp
    6170:	00f4                	addi	a3,sp,76
    6172:	0000                	unimp
    6174:	0001                	nop
    6176:	485a                	lw	a6,148(sp)
    6178:	0001                	nop
    617a:	6400                	flw	fs0,8(s0)
    617c:	0001                	nop
    617e:	0100                	addi	s0,sp,128
    6180:	5a00                	lw	s0,48(a2)
    6182:	017c                	addi	a5,sp,140
    6184:	0000                	unimp
    6186:	0188                	addi	a0,sp,192
    6188:	0000                	unimp
    618a:	0001                	nop
    618c:	885a                	mv	a6,s6
    618e:	0001                	nop
    6190:	9000                	0x9000
    6192:	0001                	nop
    6194:	0100                	addi	s0,sp,128
    6196:	6000                	flw	fs0,0(s0)
    6198:	0190                	addi	a2,sp,192
    619a:	0000                	unimp
    619c:	01a0                	addi	s0,sp,200
    619e:	0000                	unimp
    61a0:	0001                	nop
    61a2:	a05a                	fsd	fs6,0(sp)
    61a4:	0001                	nop
    61a6:	c000                	sw	s0,0(s0)
    61a8:	0001                	nop
    61aa:	0100                	addi	s0,sp,128
    61ac:	5d00                	lw	s0,56(a0)
    61ae:	01cc                	addi	a1,sp,196
    61b0:	0000                	unimp
    61b2:	01e0                	addi	s0,sp,204
    61b4:	0000                	unimp
    61b6:	0001                	nop
    61b8:	e05a                	fsw	fs6,0(sp)
    61ba:	0001                	nop
    61bc:	6c00                	flw	fs0,24(s0)
    61be:	0002                	c.slli64	zero
    61c0:	0100                	addi	s0,sp,128
    61c2:	5d00                	lw	s0,56(a0)
    61c4:	026c                	addi	a1,sp,268
    61c6:	0000                	unimp
    61c8:	02bc                	addi	a5,sp,328
    61ca:	0000                	unimp
    61cc:	0001                	nop
    61ce:	e460                	fsw	fs0,76(s0)
    61d0:	0002                	c.slli64	zero
    61d2:	f000                	fsw	fs0,32(s0)
    61d4:	0002                	c.slli64	zero
    61d6:	0100                	addi	s0,sp,128
    61d8:	6000                	flw	fs0,0(s0)
    61da:	0304                	addi	s1,sp,384
    61dc:	0000                	unimp
    61de:	0334                	addi	a3,sp,392
    61e0:	0000                	unimp
    61e2:	0001                	nop
    61e4:	d060                	sw	s0,100(s0)
    61e6:	0006                	c.slli	zero,0x1
    61e8:	e000                	fsw	fs0,0(s0)
    61ea:	0006                	c.slli	zero,0x1
    61ec:	0100                	addi	s0,sp,128
    61ee:	5a00                	lw	s0,48(a2)
    61f0:	06e0                	addi	s0,sp,844
    61f2:	0000                	unimp
    61f4:	06f0                	addi	a2,sp,844
    61f6:	0000                	unimp
    61f8:	0001                	nop
    61fa:	0060                	addi	s0,sp,12
    61fc:	0000                	unimp
    61fe:	0000                	unimp
    6200:	0000                	unimp
    6202:	8400                	0x8400
    6204:	0000                	unimp
    6206:	9400                	0x9400
    6208:	0000                	unimp
    620a:	0100                	addi	s0,sp,128
    620c:	5c00                	lw	s0,56(s0)
	...
    6216:	00f8                	addi	a4,sp,76
    6218:	0000                	unimp
    621a:	0108                	addi	a0,sp,128
    621c:	0000                	unimp
    621e:	0001                	nop
    6220:	005c                	addi	a5,sp,4
    6222:	0000                	unimp
    6224:	0000                	unimp
    6226:	0000                	unimp
    6228:	a800                	fsd	fs0,16(s0)
    622a:	0001                	nop
    622c:	b800                	fsd	fs0,48(s0)
    622e:	0001                	nop
    6230:	0100                	addi	s0,sp,128
    6232:	5b00                	lw	s0,48(a4)
	...
    623c:	0218                	addi	a4,sp,256
    623e:	0000                	unimp
    6240:	022c                	addi	a1,sp,264
    6242:	0000                	unimp
    6244:	0001                	nop
    6246:	0000005b          	0x5b
    624a:	0000                	unimp
    624c:	0000                	unimp
    624e:	9000                	0x9000
    6250:	0002                	c.slli64	zero
    6252:	bc00                	fsd	fs0,56(s0)
    6254:	0002                	c.slli64	zero
    6256:	0100                	addi	s0,sp,128
    6258:	5c00                	lw	s0,56(s0)
	...
    6262:	0304                	addi	s1,sp,384
    6264:	0000                	unimp
    6266:	0310                	addi	a2,sp,384
    6268:	0000                	unimp
    626a:	0006                	c.slli	zero,0x1
    626c:	007c007b          	0x7c007b
    6270:	9f22                	add	t5,t5,s0
    6272:	0310                	addi	a2,sp,384
    6274:	0000                	unimp
    6276:	0324                	addi	s1,sp,392
    6278:	0000                	unimp
    627a:	0001                	nop
    627c:	ec5c                	fsw	fa5,28(s0)
    627e:	0006                	c.slli	zero,0x1
    6280:	f000                	fsw	fs0,32(s0)
    6282:	0006                	c.slli	zero,0x1
    6284:	0600                	addi	s0,sp,768
    6286:	7b00                	flw	fs0,48(a4)
    6288:	7c00                	flw	fs0,56(s0)
    628a:	2200                	fld	fs0,0(a2)
    628c:	009f 0000 0000      	0x9f
    6292:	0000                	unimp
    6294:	3400                	fld	fs0,40(s0)
    6296:	48000003          	lb	zero,1152(zero) # 480 <core_list_mergesort+0xa8>
    629a:	01000003          	lb	zero,16(zero) # 10 <_start>
    629e:	6000                	flw	fs0,0(s0)
    62a0:	0348                	addi	a0,sp,388
    62a2:	0000                	unimp
    62a4:	0354                	addi	a3,sp,388
    62a6:	0000                	unimp
    62a8:	0001                	nop
    62aa:	545a                	lw	s0,180(sp)
    62ac:	60000003          	lb	zero,1536(zero) # 600 <core_bench_list+0xdc>
    62b0:	03000003          	lb	zero,48(zero) # 30 <_start+0x20>
    62b4:	8000                	0x8000
    62b6:	9f7f                	0x9f7f
    62b8:	0368                	addi	a0,sp,396
    62ba:	0000                	unimp
    62bc:	03a4                	addi	s1,sp,456
    62be:	0000                	unimp
    62c0:	0001                	nop
    62c2:	d45a                	sw	s6,40(sp)
    62c4:	ec000003          	lb	zero,-320(zero) # fffffec0 <RAM_SIZE+0xfffefec0>
    62c8:	01000003          	lb	zero,16(zero) # 10 <_start>
    62cc:	6000                	flw	fs0,0(s0)
    62ce:	03ec                	addi	a1,sp,460
    62d0:	0000                	unimp
    62d2:	0408                	addi	a0,sp,512
    62d4:	0000                	unimp
    62d6:	0001                	nop
    62d8:	205a                	fld	ft0,400(sp)
    62da:	0004                	0x4
    62dc:	2c00                	fld	fs0,24(s0)
    62de:	0004                	0x4
    62e0:	0100                	addi	s0,sp,128
    62e2:	5a00                	lw	s0,48(a2)
    62e4:	042c                	addi	a1,sp,520
    62e6:	0000                	unimp
    62e8:	0434                	addi	a3,sp,520
    62ea:	0000                	unimp
    62ec:	0001                	nop
    62ee:	3460                	fld	fs0,232(s0)
    62f0:	0004                	0x4
    62f2:	4400                	lw	s0,8(s0)
    62f4:	0004                	0x4
    62f6:	0100                	addi	s0,sp,128
    62f8:	5a00                	lw	s0,48(a2)
    62fa:	0444                	addi	s1,sp,516
    62fc:	0000                	unimp
    62fe:	0468                	addi	a0,sp,524
    6300:	0000                	unimp
    6302:	0001                	nop
    6304:	7860                	flw	fs0,116(s0)
    6306:	0004                	0x4
    6308:	8c00                	0x8c00
    630a:	0004                	0x4
    630c:	0100                	addi	s0,sp,128
    630e:	5a00                	lw	s0,48(a2)
    6310:	048c                	addi	a1,sp,576
    6312:	0000                	unimp
    6314:	052c                	addi	a1,sp,648
    6316:	0000                	unimp
    6318:	0001                	nop
    631a:	2c60                	fld	fs0,216(s0)
    631c:	0005                	c.nop	1
    631e:	4400                	lw	s0,8(s0)
    6320:	0005                	c.nop	1
    6322:	0600                	addi	s0,sp,768
    6324:	7800                	flw	fs0,48(s0)
    6326:	7600                	flw	fs0,40(a2)
    6328:	1c00                	addi	s0,sp,560
    632a:	4c9f 0005 b400      	0xb40000054c9f
    6330:	0005                	c.nop	1
    6332:	0600                	addi	s0,sp,768
    6334:	7800                	flw	fs0,48(s0)
    6336:	7600                	flw	fs0,40(a2)
    6338:	1c00                	addi	s0,sp,560
    633a:	b49f 0005 e400      	0xe4000005b49f
    6340:	0005                	c.nop	1
    6342:	0100                	addi	s0,sp,128
    6344:	6000                	flw	fs0,0(s0)
    6346:	0654                	addi	a3,sp,772
    6348:	0000                	unimp
    634a:	0668                	addi	a0,sp,780
    634c:	0000                	unimp
    634e:	0001                	nop
    6350:	9460                	0x9460
    6352:	a4000007          	vluxseg6ei8.v	v0,(zero),v0,v0.t
    6356:	01000007          	vle8ff.v	v0,(zero),v0.t
    635a:	5a00                	lw	s0,48(a2)
    635c:	07a4                	addi	s1,sp,968
    635e:	0000                	unimp
    6360:	07ac                	addi	a1,sp,968
    6362:	0000                	unimp
    6364:	0006                	c.slli	zero,0x1
    6366:	0078                	addi	a4,sp,12
    6368:	0076                	c.slli	zero,0x1d
    636a:	9f1c                	0x9f1c
    636c:	07b4                	addi	a3,sp,968
    636e:	0000                	unimp
    6370:	07cc                	addi	a1,sp,964
    6372:	0000                	unimp
    6374:	0006                	c.slli	zero,0x1
    6376:	0078                	addi	a4,sp,12
    6378:	0076                	c.slli	zero,0x1d
    637a:	9f1c                	0x9f1c
	...
    6384:	0350                	addi	a2,sp,388
    6386:	0000                	unimp
    6388:	0360                	addi	s0,sp,396
    638a:	0000                	unimp
    638c:	0001                	nop
    638e:	005c                	addi	a5,sp,4
    6390:	0000                	unimp
    6392:	0000                	unimp
    6394:	0000                	unimp
    6396:	a800                	fsd	fs0,16(s0)
    6398:	b8000003          	lb	zero,-1152(zero) # fffffb80 <RAM_SIZE+0xfffefb80>
    639c:	01000003          	lb	zero,16(zero) # 10 <_start>
    63a0:	5c00                	lw	s0,56(s0)
	...
    63aa:	044c                	addi	a1,sp,516
    63ac:	0000                	unimp
    63ae:	0460                	addi	s0,sp,524
    63b0:	0000                	unimp
    63b2:	0001                	nop
    63b4:	0000005b          	0x5b
    63b8:	0000                	unimp
    63ba:	0000                	unimp
    63bc:	c400                	sw	s0,8(s0)
    63be:	0004                	0x4
    63c0:	dc00                	sw	s0,56(s0)
    63c2:	0004                	0x4
    63c4:	0100                	addi	s0,sp,128
    63c6:	5b00                	lw	s0,48(a4)
	...
    63d0:	0554                	addi	a3,sp,644
    63d2:	0000                	unimp
    63d4:	0594                	addi	a3,sp,704
    63d6:	0000                	unimp
    63d8:	0001                	nop
    63da:	b460                	fsd	fs0,232(s0)
    63dc:	bc000007          	vloxseg6ei128.v	v0,(zero),v0,v0.t
    63e0:	01000007          	vle8ff.v	v0,(zero),v0.t
    63e4:	6000                	flw	fs0,0(s0)
	...
    63ee:	0570                	addi	a2,sp,652
    63f0:	0000                	unimp
    63f2:	0580                	addi	s0,sp,704
    63f4:	0000                	unimp
    63f6:	0001                	nop
    63f8:	0000005b          	0x5b
    63fc:	0000                	unimp
    63fe:	0000                	unimp
    6400:	b800                	fsd	fs0,48(s0)
    6402:	0005                	c.nop	1
    6404:	d400                	sw	s0,40(s0)
    6406:	0005                	c.nop	1
    6408:	0100                	addi	s0,sp,128
    640a:	6300                	flw	fs0,0(a4)
    640c:	05d4                	addi	a3,sp,708
    640e:	0000                	unimp
    6410:	05dc                	addi	a5,sp,708
    6412:	0000                	unimp
    6414:	0006                	c.slli	zero,0x1
    6416:	007c007b          	0x7c007b
    641a:	9f1c                	0x9f1c
    641c:	0654                	addi	a3,sp,772
    641e:	0000                	unimp
    6420:	0668                	addi	a0,sp,780
    6422:	0000                	unimp
    6424:	0001                	nop
    6426:	00000063          	beqz	zero,6426 <__subdf3+0x9b6>
    642a:	0000                	unimp
    642c:	0000                	unimp
    642e:	d400                	sw	s0,40(s0)
    6430:	0005                	c.nop	1
    6432:	e400                	fsw	fs0,8(s0)
    6434:	0005                	c.nop	1
    6436:	0100                	addi	s0,sp,128
    6438:	6300                	flw	fs0,0(a4)
	...
    6442:	05f0                	addi	a2,sp,716
    6444:	0000                	unimp
    6446:	05f4                	addi	a3,sp,716
    6448:	0000                	unimp
    644a:	0001                	nop
    644c:	f45a                	fsw	fs6,40(sp)
    644e:	0005                	c.nop	1
    6450:	1c00                	addi	s0,sp,560
    6452:	0006                	c.slli	zero,0x1
    6454:	0100                	addi	s0,sp,128
    6456:	5e00                	lw	s0,56(a2)
    6458:	061c                	addi	a5,sp,768
    645a:	0000                	unimp
    645c:	0620                	addi	s0,sp,776
    645e:	0000                	unimp
    6460:	787a0003          	lb	zero,1927(s4)
    6464:	209f 0006 5400      	0x54000006209f
    646a:	0006                	c.slli	zero,0x1
    646c:	0100                	addi	s0,sp,128
    646e:	5d00                	lw	s0,56(a0)
    6470:	0670                	addi	a2,sp,780
    6472:	0000                	unimp
    6474:	0678                	addi	a4,sp,780
    6476:	0000                	unimp
    6478:	0001                	nop
    647a:	785a                	flw	fa6,180(sp)
    647c:	0006                	c.slli	zero,0x1
    647e:	8800                	0x8800
    6480:	0006                	c.slli	zero,0x1
    6482:	0100                	addi	s0,sp,128
    6484:	5e00                	lw	s0,56(a2)
    6486:	0688                	addi	a0,sp,832
    6488:	0000                	unimp
    648a:	06bc                	addi	a5,sp,840
    648c:	0000                	unimp
    648e:	0001                	nop
    6490:	bc5d                	j	5f46 <__subdf3+0x4d6>
    6492:	0006                	c.slli	zero,0x1
    6494:	c400                	sw	s0,8(s0)
    6496:	0006                	c.slli	zero,0x1
    6498:	0100                	addi	s0,sp,128
    649a:	5e00                	lw	s0,56(a2)
    649c:	06c4                	addi	s1,sp,836
    649e:	0000                	unimp
    64a0:	06d0                	addi	a2,sp,836
    64a2:	0000                	unimp
    64a4:	787a0003          	lb	zero,1927(s4)
    64a8:	009f 0000 0000      	0x9f
    64ae:	0000                	unimp
    64b0:	d400                	sw	s0,40(s0)
    64b2:	0002                	c.slli64	zero
    64b4:	e400                	fsw	fs0,8(s0)
    64b6:	0002                	c.slli64	zero
    64b8:	0100                	addi	s0,sp,128
    64ba:	5e00                	lw	s0,56(a2)
	...
    64c8:	0080                	addi	s0,sp,64
    64ca:	0000                	unimp
    64cc:	0006                	c.slli	zero,0x1
    64ce:	935a                	add	t1,t1,s6
    64d0:	5b04                	lw	s1,48(a4)
    64d2:	00800493          	li	s1,8
    64d6:	0000                	unimp
    64d8:	00fc                	addi	a5,sp,76
    64da:	0000                	unimp
    64dc:	0006                	c.slli	zero,0x1
    64de:	0af503f3          	0xaf503f3
    64e2:	9f25                	0x9f25
    64e4:	00fc                	addi	a5,sp,76
    64e6:	0000                	unimp
    64e8:	010c                	addi	a1,sp,128
    64ea:	0000                	unimp
    64ec:	0006                	c.slli	zero,0x1
    64ee:	935a                	add	t1,t1,s6
    64f0:	5b04                	lw	s1,48(a4)
    64f2:	010c0493          	addi	s1,s8,16 # ffff6010 <RAM_SIZE+0xfffe6010>
    64f6:	0000                	unimp
    64f8:	0144                	addi	s1,sp,132
    64fa:	0000                	unimp
    64fc:	0006                	c.slli	zero,0x1
    64fe:	0af503f3          	0xaf503f3
    6502:	9f25                	0x9f25
    6504:	0144                	addi	s1,sp,132
    6506:	0000                	unimp
    6508:	00000147          	fmsub.s	ft2,ft0,ft0,ft0,rne
    650c:	0006                	c.slli	zero,0x1
    650e:	935a                	add	t1,t1,s6
    6510:	5b04                	lw	s1,48(a4)
    6512:	01470493          	addi	s1,a4,20 # b014 <__stack_top+0xf84>
    6516:	0000                	unimp
    6518:	0160                	addi	s0,sp,140
    651a:	0000                	unimp
    651c:	0006                	c.slli	zero,0x1
    651e:	0af503f3          	0xaf503f3
    6522:	9f25                	0x9f25
    6524:	0160                	addi	s0,sp,140
    6526:	0000                	unimp
    6528:	019c                	addi	a5,sp,192
    652a:	0000                	unimp
    652c:	0006                	c.slli	zero,0x1
    652e:	935a                	add	t1,t1,s6
    6530:	5b04                	lw	s1,48(a4)
    6532:	019c0493          	addi	s1,s8,25
    6536:	0000                	unimp
    6538:	07e4                	addi	s1,sp,972
    653a:	0000                	unimp
    653c:	0006                	c.slli	zero,0x1
    653e:	0af503f3          	0xaf503f3
    6542:	9f25                	0x9f25
	...
    6550:	0080                	addi	s0,sp,64
    6552:	0000                	unimp
    6554:	0006                	c.slli	zero,0x1
    6556:	935c                	0x935c
    6558:	5d04                	lw	s1,56(a0)
    655a:	00800493          	li	s1,8
    655e:	0000                	unimp
    6560:	00fc                	addi	a5,sp,76
    6562:	0000                	unimp
    6564:	0006                	c.slli	zero,0x1
    6566:	0cf503f3          	0xcf503f3
    656a:	9f25                	0x9f25
    656c:	00fc                	addi	a5,sp,76
    656e:	0000                	unimp
    6570:	0000010f          	0x10f
    6574:	0006                	c.slli	zero,0x1
    6576:	935c                	0x935c
    6578:	5d04                	lw	s1,56(a0)
    657a:	010f0493          	addi	s1,t5,16
    657e:	0000                	unimp
    6580:	0144                	addi	s1,sp,132
    6582:	0000                	unimp
    6584:	0006                	c.slli	zero,0x1
    6586:	0cf503f3          	0xcf503f3
    658a:	9f25                	0x9f25
    658c:	0144                	addi	s1,sp,132
    658e:	0000                	unimp
    6590:	00000147          	fmsub.s	ft2,ft0,ft0,ft0,rne
    6594:	0006                	c.slli	zero,0x1
    6596:	935c                	0x935c
    6598:	5d04                	lw	s1,56(a0)
    659a:	01470493          	addi	s1,a4,20
    659e:	0000                	unimp
    65a0:	0160                	addi	s0,sp,140
    65a2:	0000                	unimp
    65a4:	0006                	c.slli	zero,0x1
    65a6:	0cf503f3          	0xcf503f3
    65aa:	9f25                	0x9f25
    65ac:	0160                	addi	s0,sp,140
    65ae:	0000                	unimp
    65b0:	019c                	addi	a5,sp,192
    65b2:	0000                	unimp
    65b4:	0006                	c.slli	zero,0x1
    65b6:	935c                	0x935c
    65b8:	5d04                	lw	s1,56(a0)
    65ba:	019c0493          	addi	s1,s8,25
    65be:	0000                	unimp
    65c0:	07e4                	addi	s1,sp,972
    65c2:	0000                	unimp
    65c4:	0006                	c.slli	zero,0x1
    65c6:	0cf503f3          	0xcf503f3
    65ca:	9f25                	0x9f25
	...
    65d8:	0084                	addi	s1,sp,64
    65da:	0000                	unimp
    65dc:	0002                	c.slli64	zero
    65de:	9f30                	0x9f30
    65e0:	00fc                	addi	a5,sp,76
    65e2:	0000                	unimp
    65e4:	019c                	addi	a5,sp,192
    65e6:	0000                	unimp
    65e8:	0002                	c.slli64	zero
    65ea:	9f30                	0x9f30
	...
    65f4:	0080                	addi	s0,sp,64
    65f6:	0000                	unimp
    65f8:	0084                	addi	s1,sp,64
    65fa:	0000                	unimp
    65fc:	0002                	c.slli64	zero
    65fe:	9f30                	0x9f30
    6600:	0084                	addi	s1,sp,64
    6602:	0000                	unimp
    6604:	00fc                	addi	a5,sp,76
    6606:	0000                	unimp
    6608:	0001                	nop
    660a:	9c68                	0x9c68
    660c:	0001                	nop
    660e:	7400                	flw	fs0,40(s0)
    6610:	0002                	c.slli64	zero
    6612:	0100                	addi	s0,sp,128
    6614:	6800                	flw	fs0,16(s0)
    6616:	0694                	addi	a3,sp,832
    6618:	0000                	unimp
    661a:	06c8                	addi	a0,sp,836
    661c:	0000                	unimp
    661e:	0001                	nop
    6620:	d868                	sw	a0,116(s0)
    6622:	0006                	c.slli	zero,0x1
    6624:	f400                	fsw	fs0,40(s0)
    6626:	0006                	c.slli	zero,0x1
    6628:	0100                	addi	s0,sp,128
    662a:	6800                	flw	fs0,16(s0)
    662c:	07a8                	addi	a0,sp,968
    662e:	0000                	unimp
    6630:	07bc                	addi	a5,sp,968
    6632:	0000                	unimp
    6634:	0001                	nop
    6636:	0068                	addi	a0,sp,12
    6638:	0000                	unimp
    663a:	0000                	unimp
    663c:	0000                	unimp
    663e:	5800                	lw	s0,48(s0)
    6640:	0000                	unimp
    6642:	6400                	flw	fs0,8(s0)
    6644:	0002                	c.slli64	zero
    6646:	0600                	addi	s0,sp,768
    6648:	8500                	0x8500
    664a:	0800                	addi	s0,sp,16
    664c:	1aff                	0x1aff
    664e:	949f 0006 c800      	0xc8000006949f
    6654:	0006                	c.slli	zero,0x1
    6656:	0600                	addi	s0,sp,768
    6658:	8500                	0x8500
    665a:	0800                	addi	s0,sp,16
    665c:	1aff                	0x1aff
    665e:	d89f 0006 f400      	0xf4000006d89f
    6664:	0006                	c.slli	zero,0x1
    6666:	0600                	addi	s0,sp,768
    6668:	8500                	0x8500
    666a:	0800                	addi	s0,sp,16
    666c:	1aff                	0x1aff
    666e:	a89f 0007 bc00      	0xbc000007a89f
    6674:	06000007          	vluxei8.v	v0,(zero),v0
    6678:	8500                	0x8500
    667a:	0800                	addi	s0,sp,16
    667c:	1aff                	0x1aff
    667e:	009f 0000 0000      	0x9f
    6684:	0000                	unimp
    6686:	5400                	lw	s0,40(s0)
    6688:	0000                	unimp
    668a:	8000                	0x8000
    668c:	0000                	unimp
    668e:	0700                	addi	s0,sp,896
    6690:	8200                	0x8200
    6692:	0a00                	addi	s0,sp,272
    6694:	ffff                	0xffff
    6696:	9f1a                	add	t5,t5,t1
    6698:	0080                	addi	s0,sp,64
    669a:	0000                	unimp
    669c:	00dc                	addi	a5,sp,68
    669e:	0000                	unimp
    66a0:	0001                	nop
    66a2:	fc62                	fsw	fs8,56(sp)
    66a4:	0000                	unimp
    66a6:	3c00                	fld	fs0,56(s0)
    66a8:	0001                	nop
    66aa:	0700                	addi	s0,sp,896
    66ac:	8200                	0x8200
    66ae:	0a00                	addi	s0,sp,272
    66b0:	ffff                	0xffff
    66b2:	9f1a                	add	t5,t5,t1
    66b4:	0144                	addi	s1,sp,132
    66b6:	0000                	unimp
    66b8:	0174                	addi	a3,sp,140
    66ba:	0000                	unimp
    66bc:	00820007          	0x820007
    66c0:	ff0a                	fsw	ft2,188(sp)
    66c2:	1aff                	0x1aff
    66c4:	749f 0001 7c00      	0x7c000001749f
    66ca:	0001                	nop
    66cc:	0900                	addi	s0,sp,144
    66ce:	7b00                	flw	fs0,48(a4)
    66d0:	4400                	lw	s0,8(s0)
    66d2:	0a25                	addi	s4,s4,9
    66d4:	07ff                	0x7ff
    66d6:	9f1a                	add	t5,t5,t1
    66d8:	017c                	addi	a5,sp,140
    66da:	0000                	unimp
    66dc:	0184                	addi	s1,sp,192
    66de:	0000                	unimp
    66e0:	00820007          	0x820007
    66e4:	ff0a                	fsw	ft2,188(sp)
    66e6:	1aff                	0x1aff
    66e8:	849f 0001 8c00      	0x8c000001849f
    66ee:	0001                	nop
    66f0:	0900                	addi	s0,sp,144
    66f2:	7b00                	flw	fs0,48(a4)
    66f4:	4400                	lw	s0,8(s0)
    66f6:	0a25                	addi	s4,s4,9
    66f8:	07ff                	0x7ff
    66fa:	9f1a                	add	t5,t5,t1
    66fc:	018c                	addi	a1,sp,192
    66fe:	0000                	unimp
    6700:	0194                	addi	a3,sp,192
    6702:	0000                	unimp
    6704:	00820007          	0x820007
    6708:	ff0a                	fsw	ft2,188(sp)
    670a:	1aff                	0x1aff
    670c:	949f 0001 9c00      	0x9c000001949f
    6712:	0001                	nop
    6714:	0900                	addi	s0,sp,144
    6716:	7b00                	flw	fs0,48(a4)
    6718:	4400                	lw	s0,8(s0)
    671a:	0a25                	addi	s4,s4,9
    671c:	07ff                	0x7ff
    671e:	9f1a                	add	t5,t5,t1
    6720:	019c                	addi	a5,sp,192
    6722:	0000                	unimp
    6724:	023c                	addi	a5,sp,264
    6726:	0000                	unimp
    6728:	0001                	nop
    672a:	0062                	c.slli	zero,0x18
	...
    6734:	0000                	unimp
    6736:	7c00                	flw	fs0,56(s0)
    6738:	0000                	unimp
    673a:	0100                	addi	s0,sp,128
    673c:	5a00                	lw	s0,48(a2)
    673e:	007c                	addi	a5,sp,12
    6740:	0000                	unimp
    6742:	00fc                	addi	a5,sp,76
    6744:	0000                	unimp
    6746:	0001                	nop
    6748:	fc58                	fsw	fa4,60(s0)
    674a:	0000                	unimp
    674c:	0c00                	addi	s0,sp,528
    674e:	0001                	nop
    6750:	0100                	addi	s0,sp,128
    6752:	5a00                	lw	s0,48(a2)
    6754:	010c                	addi	a1,sp,128
    6756:	0000                	unimp
    6758:	0138                	addi	a4,sp,136
    675a:	0000                	unimp
    675c:	0001                	nop
    675e:	00013863          	0x13863
    6762:	4400                	lw	s0,8(s0)
    6764:	0001                	nop
    6766:	0100                	addi	s0,sp,128
    6768:	5800                	lw	s0,48(s0)
    676a:	0144                	addi	s1,sp,132
    676c:	0000                	unimp
    676e:	00000147          	fmsub.s	ft2,ft0,ft0,ft0,rne
    6772:	0001                	nop
    6774:	475a                	lw	a4,148(sp)
    6776:	0001                	nop
    6778:	5800                	lw	s0,48(s0)
    677a:	0001                	nop
    677c:	0100                	addi	s0,sp,128
    677e:	6300                	flw	fs0,0(a4)
    6780:	0158                	addi	a4,sp,132
    6782:	0000                	unimp
    6784:	0160                	addi	s0,sp,140
    6786:	0000                	unimp
    6788:	0002                	c.slli64	zero
    678a:	9f30                	0x9f30
    678c:	0160                	addi	s0,sp,140
    678e:	0000                	unimp
    6790:	019c                	addi	a5,sp,192
    6792:	0000                	unimp
    6794:	0001                	nop
    6796:	9c5a                	add	s8,s8,s6
    6798:	0001                	nop
    679a:	5c00                	lw	s0,56(s0)
    679c:	0002                	c.slli64	zero
    679e:	0100                	addi	s0,sp,128
    67a0:	5800                	lw	s0,48(s0)
    67a2:	0694                	addi	a3,sp,832
    67a4:	0000                	unimp
    67a6:	06c8                	addi	a0,sp,836
    67a8:	0000                	unimp
    67aa:	0001                	nop
    67ac:	d858                	sw	a4,52(s0)
    67ae:	0006                	c.slli	zero,0x1
    67b0:	f400                	fsw	fs0,40(s0)
    67b2:	0006                	c.slli	zero,0x1
    67b4:	0100                	addi	s0,sp,128
    67b6:	5800                	lw	s0,48(s0)
    67b8:	07a8                	addi	a0,sp,968
    67ba:	0000                	unimp
    67bc:	07bc                	addi	a5,sp,968
    67be:	0000                	unimp
    67c0:	0001                	nop
    67c2:	0058                	addi	a4,sp,4
    67c4:	0000                	unimp
    67c6:	0000                	unimp
    67c8:	0000                	unimp
    67ca:	5400                	lw	s0,40(s0)
    67cc:	0000                	unimp
    67ce:	6400                	flw	fs0,8(s0)
    67d0:	0000                	unimp
    67d2:	0100                	addi	s0,sp,128
    67d4:	5900                	lw	s0,48(a0)
    67d6:	0064                	addi	s1,sp,12
    67d8:	0000                	unimp
    67da:	006c                	addi	a1,sp,12
    67dc:	0000                	unimp
    67de:	00790007          	0x790007
    67e2:	4040                	lw	s0,4(s0)
    67e4:	2124                	fld	fs1,64(a0)
    67e6:	6c9f 0000 7800      	0x780000006c9f
    67ec:	0000                	unimp
    67ee:	0b00                	addi	s0,sp,400
    67f0:	7b00                	flw	fs0,48(a4)
    67f2:	3c00                	fld	fs0,56(s0)
    67f4:	3c24                	fld	fs1,120(s0)
    67f6:	4025                	c.li	zero,9
    67f8:	2440                	fld	fs0,136(s0)
    67fa:	9f21                	0x9f21
    67fc:	0078                	addi	a4,sp,12
    67fe:	0000                	unimp
    6800:	00fc                	addi	a5,sp,76
    6802:	0000                	unimp
    6804:	0001                	nop
    6806:	fc69                	bnez	s0,67e0 <errpat+0x60>
    6808:	0000                	unimp
    680a:	2c00                	fld	fs0,24(s0)
    680c:	0001                	nop
    680e:	0100                	addi	s0,sp,128
    6810:	5900                	lw	s0,48(a0)
    6812:	0134                	addi	a3,sp,136
    6814:	0000                	unimp
    6816:	0144                	addi	s1,sp,132
    6818:	0000                	unimp
    681a:	0001                	nop
    681c:	4469                	li	s0,26
    681e:	0001                	nop
    6820:	5400                	lw	s0,40(s0)
    6822:	0001                	nop
    6824:	0100                	addi	s0,sp,128
    6826:	5900                	lw	s0,48(a0)
    6828:	0158                	addi	a4,sp,132
    682a:	0000                	unimp
    682c:	0160                	addi	s0,sp,140
    682e:	0000                	unimp
    6830:	0001                	nop
    6832:	6069                	c.lui	zero,0x1a
    6834:	0001                	nop
    6836:	9c00                	0x9c00
    6838:	0001                	nop
    683a:	0100                	addi	s0,sp,128
    683c:	5900                	lw	s0,48(a0)
    683e:	019c                	addi	a5,sp,192
    6840:	0000                	unimp
    6842:	0258                	addi	a4,sp,260
    6844:	0000                	unimp
    6846:	0001                	nop
    6848:	9469                	srai	s0,s0,0x3a
    684a:	0006                	c.slli	zero,0x1
    684c:	c800                	sw	s0,16(s0)
    684e:	0006                	c.slli	zero,0x1
    6850:	0100                	addi	s0,sp,128
    6852:	6900                	flw	fs0,16(a0)
    6854:	06d8                	addi	a4,sp,836
    6856:	0000                	unimp
    6858:	06f4                	addi	a3,sp,844
    685a:	0000                	unimp
    685c:	0001                	nop
    685e:	a869                	j	68f8 <errpat+0x178>
    6860:	bc000007          	vloxseg6ei128.v	v0,(zero),v0,v0.t
    6864:	01000007          	vle8ff.v	v0,(zero),v0.t
    6868:	6900                	flw	fs0,16(a0)
	...
    6872:	00c0                	addi	s0,sp,68
    6874:	0000                	unimp
    6876:	00c4                	addi	s1,sp,68
    6878:	0000                	unimp
    687a:	0002                	c.slli64	zero
    687c:	9f30                	0x9f30
    687e:	00c4                	addi	s1,sp,68
    6880:	0000                	unimp
    6882:	00fc                	addi	a5,sp,76
    6884:	0000                	unimp
    6886:	0001                	nop
    6888:	3c5f 0002 5000      	0x500000023c5f
    688e:	0002                	c.slli64	zero
    6890:	0100                	addi	s0,sp,128
    6892:	5f00                	lw	s0,56(a4)
    6894:	0694                	addi	a3,sp,832
    6896:	0000                	unimp
    6898:	06b0                	addi	a2,sp,840
    689a:	0000                	unimp
    689c:	0001                	nop
    689e:	d85f 0006 f000      	0xf0000006d85f
    68a4:	0006                	c.slli	zero,0x1
    68a6:	0100                	addi	s0,sp,128
    68a8:	5f00                	lw	s0,56(a4)
	...
    68b2:	0098                	addi	a4,sp,64
    68b4:	0000                	unimp
    68b6:	00fc                	addi	a5,sp,76
    68b8:	0000                	unimp
    68ba:	0006                	c.slli	zero,0x1
    68bc:	0086                	slli	ra,ra,0x1
    68be:	ff08                	fsw	fa0,56(a4)
    68c0:	9f1a                	add	t5,t5,t1
    68c2:	019c                	addi	a5,sp,192
    68c4:	0000                	unimp
    68c6:	027c                	addi	a5,sp,268
    68c8:	0000                	unimp
    68ca:	0006                	c.slli	zero,0x1
    68cc:	0086                	slli	ra,ra,0x1
    68ce:	ff08                	fsw	fa0,56(a4)
    68d0:	9f1a                	add	t5,t5,t1
    68d2:	0694                	addi	a3,sp,832
    68d4:	0000                	unimp
    68d6:	06c8                	addi	a0,sp,836
    68d8:	0000                	unimp
    68da:	0006                	c.slli	zero,0x1
    68dc:	0086                	slli	ra,ra,0x1
    68de:	ff08                	fsw	fa0,56(a4)
    68e0:	9f1a                	add	t5,t5,t1
    68e2:	06d8                	addi	a4,sp,836
    68e4:	0000                	unimp
    68e6:	06f4                	addi	a3,sp,844
    68e8:	0000                	unimp
    68ea:	0006                	c.slli	zero,0x1
    68ec:	0086                	slli	ra,ra,0x1
    68ee:	ff08                	fsw	fa0,56(a4)
    68f0:	9f1a                	add	t5,t5,t1
    68f2:	07a8                	addi	a0,sp,968
    68f4:	0000                	unimp
    68f6:	07bc                	addi	a5,sp,968
    68f8:	0000                	unimp
    68fa:	0006                	c.slli	zero,0x1
    68fc:	0086                	slli	ra,ra,0x1
    68fe:	ff08                	fsw	fa0,56(a4)
    6900:	9f1a                	add	t5,t5,t1
	...
    690a:	0094                	addi	a3,sp,64
    690c:	0000                	unimp
    690e:	00c0                	addi	s0,sp,68
    6910:	0000                	unimp
    6912:	007a0007          	0x7a0007
    6916:	ff0a                	fsw	ft2,188(sp)
    6918:	1aff                	0x1aff
    691a:	c09f 0000 fc00      	0xfc000000c09f
    6920:	0000                	unimp
    6922:	0100                	addi	s0,sp,128
    6924:	5a00                	lw	s0,48(a2)
    6926:	019c                	addi	a5,sp,192
    6928:	0000                	unimp
    692a:	01ac                	addi	a1,sp,200
    692c:	0000                	unimp
    692e:	007a0007          	0x7a0007
    6932:	ff0a                	fsw	ft2,188(sp)
    6934:	1aff                	0x1aff
    6936:	e49f 0001 e800      	0xe8000001e49f
    693c:	0001                	nop
    693e:	0700                	addi	s0,sp,896
    6940:	7a00                	flw	fs0,48(a2)
    6942:	0a00                	addi	s0,sp,272
    6944:	ffff                	0xffff
    6946:	9f1a                	add	t5,t5,t1
    6948:	0204                	addi	s1,sp,256
    694a:	0000                	unimp
    694c:	0214                	addi	a3,sp,256
    694e:	0000                	unimp
    6950:	007a0007          	0x7a0007
    6954:	ff0a                	fsw	ft2,188(sp)
    6956:	1aff                	0x1aff
    6958:	1c9f 0002 2400      	0x240000021c9f
    695e:	0002                	c.slli64	zero
    6960:	0700                	addi	s0,sp,896
    6962:	7a00                	flw	fs0,48(a2)
    6964:	0a00                	addi	s0,sp,272
    6966:	ffff                	0xffff
    6968:	9f1a                	add	t5,t5,t1
    696a:	022c                	addi	a1,sp,264
    696c:	0000                	unimp
    696e:	0234                	addi	a3,sp,264
    6970:	0000                	unimp
    6972:	007a0007          	0x7a0007
    6976:	ff0a                	fsw	ft2,188(sp)
    6978:	1aff                	0x1aff
    697a:	3c9f 0002 7800      	0x780000023c9f
    6980:	0002                	c.slli64	zero
    6982:	0100                	addi	s0,sp,128
    6984:	5a00                	lw	s0,48(a2)
    6986:	0694                	addi	a3,sp,832
    6988:	0000                	unimp
    698a:	06c8                	addi	a0,sp,836
    698c:	0000                	unimp
    698e:	0001                	nop
    6990:	d85a                	sw	s6,48(sp)
    6992:	0006                	c.slli	zero,0x1
    6994:	f400                	fsw	fs0,40(s0)
    6996:	0006                	c.slli	zero,0x1
    6998:	0100                	addi	s0,sp,128
    699a:	5a00                	lw	s0,48(a2)
    699c:	07a8                	addi	a0,sp,968
    699e:	0000                	unimp
    69a0:	07bc                	addi	a5,sp,968
    69a2:	0000                	unimp
    69a4:	0001                	nop
    69a6:	005a                	c.slli	zero,0x16
    69a8:	0000                	unimp
    69aa:	0000                	unimp
    69ac:	0000                	unimp
    69ae:	8400                	0x8400
    69b0:	0000                	unimp
    69b2:	bc00                	fsd	fs0,56(s0)
    69b4:	0000                	unimp
    69b6:	0100                	addi	s0,sp,128
    69b8:	6700                	flw	fs0,8(a4)
    69ba:	00bc                	addi	a5,sp,72
    69bc:	0000                	unimp
    69be:	00fc                	addi	a5,sp,76
    69c0:	0000                	unimp
    69c2:	0001                	nop
    69c4:	9c5d                	0x9c5d
    69c6:	0001                	nop
    69c8:	d800                	sw	s0,48(s0)
    69ca:	0001                	nop
    69cc:	0100                	addi	s0,sp,128
    69ce:	6700                	flw	fs0,8(a4)
    69d0:	01d8                	addi	a4,sp,196
    69d2:	0000                	unimp
    69d4:	01e4                	addi	s1,sp,204
    69d6:	0000                	unimp
    69d8:	0001                	nop
    69da:	e45d                	bnez	s0,6a88 <__clz_tab+0xc>
    69dc:	0001                	nop
    69de:	fc00                	fsw	fs0,56(s0)
    69e0:	0001                	nop
    69e2:	0100                	addi	s0,sp,128
    69e4:	6700                	flw	fs0,8(a4)
    69e6:	01fc                	addi	a5,sp,204
    69e8:	0000                	unimp
    69ea:	0204                	addi	s1,sp,256
    69ec:	0000                	unimp
    69ee:	0002                	c.slli64	zero
    69f0:	9f30                	0x9f30
    69f2:	0204                	addi	s1,sp,256
    69f4:	0000                	unimp
    69f6:	023c                	addi	a5,sp,264
    69f8:	0000                	unimp
    69fa:	0001                	nop
    69fc:	00023c67          	0x23c67
    6a00:	7c00                	flw	fs0,56(s0)
    6a02:	0002                	c.slli64	zero
    6a04:	0100                	addi	s0,sp,128
    6a06:	5d00                	lw	s0,56(a0)
    6a08:	027c                	addi	a5,sp,268
    6a0a:	0000                	unimp
    6a0c:	05b4                	addi	a3,sp,712
    6a0e:	0000                	unimp
    6a10:	0001                	nop
    6a12:	9466                	add	s0,s0,s9
    6a14:	0006                	c.slli	zero,0x1
    6a16:	ac00                	fsd	fs0,24(s0)
    6a18:	0006                	c.slli	zero,0x1
    6a1a:	0100                	addi	s0,sp,128
    6a1c:	5d00                	lw	s0,56(a0)
    6a1e:	06d8                	addi	a4,sp,836
    6a20:	0000                	unimp
    6a22:	06e8                	addi	a0,sp,844
    6a24:	0000                	unimp
    6a26:	0001                	nop
    6a28:	d85d                	beqz	s0,69de <errpat+0x25e>
    6a2a:	e4000007          	vluxseg8ei8.v	v0,(zero),v0,v0.t
    6a2e:	01000007          	vle8ff.v	v0,(zero),v0.t
    6a32:	6600                	flw	fs0,8(a2)
	...
    6a3c:	0094                	addi	a3,sp,64
    6a3e:	0000                	unimp
    6a40:	00a4                	addi	s1,sp,72
    6a42:	0000                	unimp
    6a44:	0001                	nop
    6a46:	0000a463          	0xa463
    6a4a:	b400                	fsd	fs0,40(s0)
    6a4c:	0000                	unimp
    6a4e:	0700                	addi	s0,sp,896
    6a50:	8300                	0x8300
    6a52:	4000                	lw	s0,0(s0)
    6a54:	2440                	fld	fs0,136(s0)
    6a56:	9f21                	0x9f21
    6a58:	00b8                	addi	a4,sp,72
    6a5a:	0000                	unimp
    6a5c:	00fc                	addi	a5,sp,76
    6a5e:	0000                	unimp
    6a60:	0001                	nop
    6a62:	00019c63          	bnez	gp,6a7a <errpat+0x2fa>
    6a66:	2000                	fld	fs0,0(s0)
    6a68:	0002                	c.slli64	zero
    6a6a:	0100                	addi	s0,sp,128
    6a6c:	6300                	flw	fs0,0(a4)
    6a6e:	0220                	addi	s0,sp,264
    6a70:	0000                	unimp
    6a72:	022c                	addi	a1,sp,264
    6a74:	0000                	unimp
    6a76:	0005                	c.nop	1
    6a78:	253c007b          	0x253c007b
    6a7c:	2c9f 0002 3000      	0x300000022c9f
    6a82:	0002                	c.slli64	zero
    6a84:	0100                	addi	s0,sp,128
    6a86:	6300                	flw	fs0,0(a4)
    6a88:	0230                	addi	a2,sp,264
    6a8a:	0000                	unimp
    6a8c:	023c                	addi	a5,sp,264
    6a8e:	0000                	unimp
    6a90:	0005                	c.nop	1
    6a92:	253c007b          	0x253c007b
    6a96:	3c9f 0002 6800      	0x680000023c9f
    6a9c:	0002                	c.slli64	zero
    6a9e:	0100                	addi	s0,sp,128
    6aa0:	6300                	flw	fs0,0(a4)
    6aa2:	0268                	addi	a0,sp,268
    6aa4:	0000                	unimp
    6aa6:	05b8                	addi	a4,sp,712
    6aa8:	0000                	unimp
    6aaa:	0001                	nop
    6aac:	9465                	srai	s0,s0,0x39
    6aae:	0006                	c.slli	zero,0x1
    6ab0:	a800                	fsd	fs0,16(s0)
    6ab2:	0006                	c.slli	zero,0x1
    6ab4:	0100                	addi	s0,sp,128
    6ab6:	6300                	flw	fs0,0(a4)
    6ab8:	06d8                	addi	a4,sp,836
    6aba:	0000                	unimp
    6abc:	06e4                	addi	s1,sp,844
    6abe:	0000                	unimp
    6ac0:	0001                	nop
    6ac2:	0007d863          	bgez	a5,6ad2 <__clz_tab+0x56>
    6ac6:	e400                	fsw	fs0,8(s0)
    6ac8:	01000007          	vle8ff.v	v0,(zero),v0.t
    6acc:	6500                	flw	fs0,8(a0)
	...
    6ad6:	023c                	addi	a5,sp,264
    6ad8:	0000                	unimp
    6ada:	05d0                	addi	a2,sp,708
    6adc:	0000                	unimp
    6ade:	0002                	c.slli64	zero
    6ae0:	9f30                	0x9f30
    6ae2:	0694                	addi	a3,sp,832
    6ae4:	0000                	unimp
    6ae6:	06a0                	addi	s0,sp,840
    6ae8:	0000                	unimp
    6aea:	0002                	c.slli64	zero
    6aec:	9f30                	0x9f30
    6aee:	06a4                	addi	s1,sp,840
    6af0:	0000                	unimp
    6af2:	06b0                	addi	a2,sp,840
    6af4:	0000                	unimp
    6af6:	0001                	nop
    6af8:	b068                	fsd	fa0,224(s0)
    6afa:	0006                	c.slli	zero,0x1
    6afc:	c800                	sw	s0,16(s0)
    6afe:	0006                	c.slli	zero,0x1
    6b00:	0100                	addi	s0,sp,128
    6b02:	5f00                	lw	s0,56(a4)
    6b04:	06dc                	addi	a5,sp,836
    6b06:	0000                	unimp
    6b08:	06e0                	addi	s0,sp,844
    6b0a:	0000                	unimp
    6b0c:	0001                	nop
    6b0e:	d85f 0007 e400      	0xe4000007d85f
    6b14:	02000007          	vle8.v	v0,(zero)
    6b18:	3000                	fld	fs0,32(s0)
    6b1a:	009f 0000 0000      	0x9f
    6b20:	0000                	unimp
    6b22:	d800                	sw	s0,48(s0)
    6b24:	0000                	unimp
    6b26:	fc00                	fsw	fs0,56(s0)
    6b28:	0000                	unimp
    6b2a:	0100                	addi	s0,sp,128
    6b2c:	5900                	lw	s0,48(a0)
    6b2e:	023c                	addi	a5,sp,264
    6b30:	0000                	unimp
    6b32:	0654                	addi	a3,sp,772
    6b34:	0000                	unimp
    6b36:	0001                	nop
    6b38:	9459                	srai	s0,s0,0x36
    6b3a:	0006                	c.slli	zero,0x1
    6b3c:	a400                	fsd	fs0,8(s0)
    6b3e:	0006                	c.slli	zero,0x1
    6b40:	0100                	addi	s0,sp,128
    6b42:	5900                	lw	s0,48(a0)
    6b44:	06a4                	addi	s1,sp,840
    6b46:	0000                	unimp
    6b48:	06b0                	addi	a2,sp,840
    6b4a:	0000                	unimp
    6b4c:	0006                	c.slli	zero,0x1
    6b4e:	0085                	addi	ra,ra,1
    6b50:	ff08                	fsw	fa0,56(a4)
    6b52:	9f1a                	add	t5,t5,t1
    6b54:	06b0                	addi	a2,sp,840
    6b56:	0000                	unimp
    6b58:	06dc                	addi	a5,sp,836
    6b5a:	0000                	unimp
    6b5c:	0001                	nop
    6b5e:	dc59                	beqz	s0,6afc <__clz_tab+0x80>
    6b60:	0006                	c.slli	zero,0x1
    6b62:	e000                	fsw	fs0,0(s0)
    6b64:	0006                	c.slli	zero,0x1
    6b66:	0600                	addi	s0,sp,768
    6b68:	8600                	0x8600
    6b6a:	0800                	addi	s0,sp,16
    6b6c:	1aff                	0x1aff
    6b6e:	e09f 0006 ec00      	0xec000006e09f
    6b74:	0006                	c.slli	zero,0x1
    6b76:	0100                	addi	s0,sp,128
    6b78:	5900                	lw	s0,48(a0)
    6b7a:	06ec                	addi	a1,sp,844
    6b7c:	0000                	unimp
    6b7e:	06f4                	addi	a3,sp,844
    6b80:	0000                	unimp
    6b82:	0006                	c.slli	zero,0x1
    6b84:	0085                	addi	ra,ra,1
    6b86:	0086                	slli	ra,ra,0x1
    6b88:	06f49f27          	fsh	fa5,126(s1)
    6b8c:	0000                	unimp
    6b8e:	07b8                	addi	a4,sp,968
    6b90:	0000                	unimp
    6b92:	0001                	nop
    6b94:	bc59                	j	662a <__subdf3+0xbba>
    6b96:	e4000007          	vluxseg8ei8.v	v0,(zero),v0,v0.t
    6b9a:	01000007          	vle8ff.v	v0,(zero),v0.t
    6b9e:	5900                	lw	s0,48(a0)
	...
    6ba8:	00dc                	addi	a5,sp,68
    6baa:	0000                	unimp
    6bac:	00fc                	addi	a5,sp,76
    6bae:	0000                	unimp
    6bb0:	0001                	nop
    6bb2:	3c62                	fld	fs8,56(sp)
    6bb4:	0002                	c.slli64	zero
    6bb6:	d400                	sw	s0,40(s0)
    6bb8:	0005                	c.nop	1
    6bba:	0100                	addi	s0,sp,128
    6bbc:	6200                	flw	fs0,0(a2)
    6bbe:	05d4                	addi	a3,sp,708
    6bc0:	0000                	unimp
    6bc2:	060c                	addi	a1,sp,768
    6bc4:	0000                	unimp
    6bc6:	0001                	nop
    6bc8:	0c5f 0006 1800      	0x180000060c5f
    6bce:	0006                	c.slli	zero,0x1
    6bd0:	0400                	addi	s0,sp,512
    6bd2:	8200                	0x8200
    6bd4:	07ff                	0x7ff
    6bd6:	189f 0006 3400      	0x34000006189f
    6bdc:	0006                	c.slli	zero,0x1
    6bde:	0100                	addi	s0,sp,128
    6be0:	5f00                	lw	s0,56(a4)
    6be2:	0694                	addi	a3,sp,832
    6be4:	0000                	unimp
    6be6:	06c8                	addi	a0,sp,836
    6be8:	0000                	unimp
    6bea:	0001                	nop
    6bec:	d862                	sw	s8,48(sp)
    6bee:	0006                	c.slli	zero,0x1
    6bf0:	f400                	fsw	fs0,40(s0)
    6bf2:	0006                	c.slli	zero,0x1
    6bf4:	0100                	addi	s0,sp,128
    6bf6:	6200                	flw	fs0,0(a2)
    6bf8:	06f4                	addi	a3,sp,844
    6bfa:	0000                	unimp
    6bfc:	06fc                	addi	a5,sp,844
    6bfe:	0000                	unimp
    6c00:	0001                	nop
    6c02:	fc5f 0006 2c00      	0x2c000006fc5f
    6c08:	01000007          	vle8ff.v	v0,(zero),v0.t
    6c0c:	5b00                	lw	s0,48(a4)
    6c0e:	075c                	addi	a5,sp,900
    6c10:	0000                	unimp
    6c12:	076c                	addi	a1,sp,908
    6c14:	0000                	unimp
    6c16:	0002                	c.slli64	zero
    6c18:	9f30                	0x9f30
    6c1a:	0774                	addi	a3,sp,908
    6c1c:	0000                	unimp
    6c1e:	07a4                	addi	s1,sp,968
    6c20:	0000                	unimp
    6c22:	0001                	nop
    6c24:	0007a45b          	0x7a45b
    6c28:	a800                	fsd	fs0,16(s0)
    6c2a:	07000007          	vluxei8.v	v0,(zero),v16
    6c2e:	0b00                	addi	s0,sp,400
    6c30:	fc02                	fsw	ft0,56(sp)
    6c32:	0082                	c.slli64	ra
    6c34:	9f1c                	0x9f1c
    6c36:	07a8                	addi	a0,sp,968
    6c38:	0000                	unimp
    6c3a:	07bc                	addi	a5,sp,968
    6c3c:	0000                	unimp
    6c3e:	0001                	nop
    6c40:	d862                	sw	s8,48(sp)
    6c42:	e4000007          	vluxseg8ei8.v	v0,(zero),v0,v0.t
    6c46:	01000007          	vle8ff.v	v0,(zero),v0.t
    6c4a:	6200                	flw	fs0,0(a2)
	...
    6c54:	0508                	addi	a0,sp,640
    6c56:	0000                	unimp
    6c58:	059c                	addi	a5,sp,704
    6c5a:	0000                	unimp
    6c5c:	0001                	nop
    6c5e:	9c60                	0x9c60
    6c60:	0005                	c.nop	1
    6c62:	f400                	fsw	fs0,40(s0)
    6c64:	0005                	c.nop	1
    6c66:	0100                	addi	s0,sp,128
    6c68:	5d00                	lw	s0,56(a0)
    6c6a:	05f4                	addi	a3,sp,716
    6c6c:	0000                	unimp
    6c6e:	05f8                	addi	a4,sp,716
    6c70:	0000                	unimp
    6c72:	7c7c0003          	lb	zero,1991(s8)
    6c76:	f89f 0005 fc00      	0xfc000005f89f
    6c7c:	0005                	c.nop	1
    6c7e:	0100                	addi	s0,sp,128
    6c80:	5c00                	lw	s0,56(s0)
    6c82:	05fc                	addi	a5,sp,716
    6c84:	0000                	unimp
    6c86:	0618                	addi	a4,sp,768
    6c88:	0000                	unimp
    6c8a:	0001                	nop
    6c8c:	185d                	addi	a6,a6,-9
    6c8e:	0006                	c.slli	zero,0x1
    6c90:	2400                	fld	fs0,8(s0)
    6c92:	0006                	c.slli	zero,0x1
    6c94:	0a00                	addi	s0,sp,272
    6c96:	7d00                	flw	fs0,56(a0)
    6c98:	3300                	fld	fs0,32(a4)
    6c9a:	8325                	srli	a4,a4,0x9
    6c9c:	4d00                	lw	s0,24(a0)
    6c9e:	2124                	fld	fs1,64(a0)
    6ca0:	249f 0006 2800      	0x28000006249f
    6ca6:	0006                	c.slli	zero,0x1
    6ca8:	0800                	addi	s0,sp,16
    6caa:	8300                	0x8300
    6cac:	4d00                	lw	s0,24(a0)
    6cae:	7d24                	flw	fs1,120(a0)
    6cb0:	2100                	fld	fs0,0(a0)
    6cb2:	289f 0006 2c00      	0x2c000006289f
    6cb8:	0006                	c.slli	zero,0x1
    6cba:	0600                	addi	s0,sp,768
    6cbc:	7d00                	flw	fs0,56(a0)
    6cbe:	7e00                	flw	fs0,56(a2)
    6cc0:	2100                	fld	fs0,0(a0)
    6cc2:	2c9f 0006 3000      	0x300000062c9f
    6cc8:	0006                	c.slli	zero,0x1
    6cca:	0800                	addi	s0,sp,16
    6ccc:	8300                	0x8300
    6cce:	4d00                	lw	s0,24(a0)
    6cd0:	7d24                	flw	fs1,120(a0)
    6cd2:	2100                	fld	fs0,0(a0)
    6cd4:	309f 0006 9400      	0x94000006309f
    6cda:	0006                	c.slli	zero,0x1
    6cdc:	0100                	addi	s0,sp,128
    6cde:	5e00                	lw	s0,56(a2)
    6ce0:	06a4                	addi	s1,sp,840
    6ce2:	0000                	unimp
    6ce4:	06b0                	addi	a2,sp,840
    6ce6:	0000                	unimp
    6ce8:	0001                	nop
    6cea:	b058                	fsd	fa4,160(s0)
    6cec:	0006                	c.slli	zero,0x1
    6cee:	c800                	sw	s0,16(s0)
    6cf0:	0006                	c.slli	zero,0x1
    6cf2:	0100                	addi	s0,sp,128
    6cf4:	5d00                	lw	s0,56(a0)
    6cf6:	06dc                	addi	a5,sp,836
    6cf8:	0000                	unimp
    6cfa:	06e0                	addi	s0,sp,844
    6cfc:	0000                	unimp
    6cfe:	0001                	nop
    6d00:	f45d                	bnez	s0,6cae <impure_data+0xde>
    6d02:	0006                	c.slli	zero,0x1
    6d04:	2800                	fld	fs0,16(s0)
    6d06:	01000007          	vle8ff.v	v0,(zero),v0.t
    6d0a:	5d00                	lw	s0,56(a0)
    6d0c:	0728                	addi	a0,sp,904
    6d0e:	0000                	unimp
    6d10:	0748                	addi	a0,sp,900
    6d12:	0000                	unimp
    6d14:	0001                	nop
    6d16:	485f 0007 4c00      	0x4c000007485f
    6d1c:	03000007          	vle8ff.v	v0,(zero)
    6d20:	7e00                	flw	fs0,56(a2)
    6d22:	9f7c                	0x9f7c
    6d24:	074c                	addi	a1,sp,900
    6d26:	0000                	unimp
    6d28:	0750                	addi	a2,sp,900
    6d2a:	0000                	unimp
    6d2c:	0001                	nop
    6d2e:	505e                	0x505e
    6d30:	64000007          	vluxseg4ei8.v	v0,(zero),v0,v0.t
    6d34:	01000007          	vle8ff.v	v0,(zero),v0.t
    6d38:	5f00                	lw	s0,56(a4)
    6d3a:	0768                	addi	a0,sp,908
    6d3c:	0000                	unimp
    6d3e:	076c                	addi	a1,sp,908
    6d40:	0000                	unimp
    6d42:	0001                	nop
    6d44:	745e                	flw	fs0,244(sp)
    6d46:	a0000007          	vlseg6e8.v	v0,(zero),v0.t
    6d4a:	01000007          	vle8ff.v	v0,(zero),v0.t
    6d4e:	5d00                	lw	s0,56(a0)
    6d50:	07a0                	addi	s0,sp,968
    6d52:	0000                	unimp
    6d54:	07a8                	addi	a0,sp,968
    6d56:	0000                	unimp
    6d58:	0001                	nop
    6d5a:	c85f 0007 d400      	0xd4000007c85f
    6d60:	01000007          	vle8ff.v	v0,(zero),v0.t
    6d64:	5f00                	lw	s0,56(a4)
    6d66:	07d8                	addi	a4,sp,964
    6d68:	0000                	unimp
    6d6a:	07dc                	addi	a5,sp,964
    6d6c:	0000                	unimp
    6d6e:	0001                	nop
    6d70:	dc5d                	beqz	s0,6d2e <impure_data+0x15e>
    6d72:	e4000007          	vluxseg8ei8.v	v0,(zero),v0,v0.t
    6d76:	01000007          	vle8ff.v	v0,(zero),v0.t
    6d7a:	6000                	flw	fs0,0(s0)
	...
    6d84:	0340                	addi	s0,sp,388
    6d86:	0000                	unimp
    6d88:	03ec                	addi	a1,sp,460
    6d8a:	0000                	unimp
    6d8c:	0001                	nop
    6d8e:	ec60                	fsw	fs0,92(s0)
    6d90:	18000003          	lb	zero,384(zero) # 180 <calc_func+0x60>
    6d94:	0006                	c.slli	zero,0x1
    6d96:	0100                	addi	s0,sp,128
    6d98:	6300                	flw	fs0,0(a4)
    6d9a:	0618                	addi	a4,sp,768
    6d9c:	0000                	unimp
    6d9e:	0630                	addi	a2,sp,776
    6da0:	0000                	unimp
    6da2:	0005                	c.nop	1
    6da4:	25330083          	lb	ra,595(t1)
    6da8:	309f 0006 3c00      	0x3c000006309f
    6dae:	0006                	c.slli	zero,0x1
    6db0:	0100                	addi	s0,sp,128
    6db2:	5b00                	lw	s0,48(a4)
    6db4:	06a4                	addi	s1,sp,840
    6db6:	0000                	unimp
    6db8:	06b0                	addi	a2,sp,840
    6dba:	0000                	unimp
    6dbc:	0001                	nop
    6dbe:	b069                	j	6648 <__subdf3+0xbd8>
    6dc0:	0006                	c.slli	zero,0x1
    6dc2:	c800                	sw	s0,16(s0)
    6dc4:	0006                	c.slli	zero,0x1
    6dc6:	0100                	addi	s0,sp,128
    6dc8:	6300                	flw	fs0,0(a4)
    6dca:	06dc                	addi	a5,sp,836
    6dcc:	0000                	unimp
    6dce:	06e0                	addi	s0,sp,844
    6dd0:	0000                	unimp
    6dd2:	0001                	nop
    6dd4:	0006f463          	bgeu	a3,zero,6ddc <impure_data+0x20c>
    6dd8:	2c00                	fld	fs0,24(s0)
    6dda:	01000007          	vle8ff.v	v0,(zero),v0.t
    6dde:	6300                	flw	fs0,0(a4)
    6de0:	072c                	addi	a1,sp,904
    6de2:	0000                	unimp
    6de4:	076c                	addi	a1,sp,908
    6de6:	0000                	unimp
    6de8:	0001                	nop
    6dea:	0007745b          	0x7745b
    6dee:	a000                	fsd	fs0,0(s0)
    6df0:	01000007          	vle8ff.v	v0,(zero),v0.t
    6df4:	6300                	flw	fs0,0(a4)
    6df6:	07a0                	addi	s0,sp,968
    6df8:	0000                	unimp
    6dfa:	07a8                	addi	a0,sp,968
    6dfc:	0000                	unimp
    6dfe:	0002                	c.slli64	zero
    6e00:	9f30                	0x9f30
    6e02:	07c8                	addi	a0,sp,964
    6e04:	0000                	unimp
    6e06:	07cc                	addi	a1,sp,964
    6e08:	0000                	unimp
    6e0a:	0001                	nop
    6e0c:	0007d85b          	0x7d85b
    6e10:	e400                	fsw	fs0,8(s0)
    6e12:	01000007          	vle8ff.v	v0,(zero),v0.t
    6e16:	6300                	flw	fs0,0(a4)
	...
    6e20:	0110                	addi	a2,sp,128
    6e22:	0000                	unimp
    6e24:	0114                	addi	a3,sp,128
    6e26:	0000                	unimp
    6e28:	0001                	nop
    6e2a:	145a                	slli	s0,s0,0x36
    6e2c:	0001                	nop
    6e2e:	4400                	lw	s0,8(s0)
    6e30:	0001                	nop
    6e32:	0100                	addi	s0,sp,128
    6e34:	5f00                	lw	s0,56(a4)
    6e36:	0148                	addi	a0,sp,132
    6e38:	0000                	unimp
    6e3a:	0150                	addi	a2,sp,132
    6e3c:	0000                	unimp
    6e3e:	0001                	nop
    6e40:	505a                	0x505a
    6e42:	0001                	nop
    6e44:	6000                	flw	fs0,0(s0)
    6e46:	0001                	nop
    6e48:	0100                	addi	s0,sp,128
    6e4a:	5f00                	lw	s0,56(a4)
	...
    6e54:	01b0                	addi	a2,sp,200
    6e56:	0000                	unimp
    6e58:	01b4                	addi	a3,sp,200
    6e5a:	0000                	unimp
    6e5c:	0001                	nop
    6e5e:	b45a                	fsd	fs6,40(sp)
    6e60:	0001                	nop
    6e62:	e400                	fsw	fs0,8(s0)
    6e64:	0001                	nop
    6e66:	0100                	addi	s0,sp,128
    6e68:	5f00                	lw	s0,56(a4)
    6e6a:	01ec                	addi	a1,sp,204
    6e6c:	0000                	unimp
    6e6e:	01f4                	addi	a3,sp,204
    6e70:	0000                	unimp
    6e72:	0001                	nop
    6e74:	f45a                	fsw	fs6,40(sp)
    6e76:	0001                	nop
    6e78:	0400                	addi	s0,sp,512
    6e7a:	0002                	c.slli64	zero
    6e7c:	0100                	addi	s0,sp,128
    6e7e:	5f00                	lw	s0,56(a4)
	...
    6e88:	0248                	addi	a0,sp,260
    6e8a:	0000                	unimp
    6e8c:	0258                	addi	a4,sp,260
    6e8e:	0000                	unimp
    6e90:	0005                	c.nop	1
    6e92:	0089                	addi	ra,ra,2
    6e94:	2531                	jal	74a0 <__global_pointer$+0x110>
    6e96:	589f 0002 f400      	0xf4000002589f
    6e9c:	0002                	c.slli64	zero
    6e9e:	0100                	addi	s0,sp,128
    6ea0:	6900                	flw	fs0,16(a0)
    6ea2:	0698                	addi	a4,sp,832
    6ea4:	0000                	unimp
    6ea6:	06a0                	addi	s0,sp,840
    6ea8:	0000                	unimp
    6eaa:	0001                	nop
    6eac:	0069                	c.nop	26
    6eae:	0000                	unimp
    6eb0:	0000                	unimp
    6eb2:	0000                	unimp
    6eb4:	5000                	lw	s0,32(s0)
    6eb6:	0002                	c.slli64	zero
    6eb8:	5c00                	lw	s0,56(s0)
    6eba:	0002                	c.slli64	zero
    6ebc:	0600                	addi	s0,sp,768
    6ebe:	7e00                	flw	fs0,56(a2)
    6ec0:	7f00                	flw	fs0,56(a4)
    6ec2:	2100                	fld	fs0,0(a0)
    6ec4:	5c9f 0002 0400      	0x40000025c9f
    6eca:	01000003          	lb	zero,16(zero) # 10 <_start>
    6ece:	5800                	lw	s0,48(s0)
    6ed0:	0698                	addi	a4,sp,832
    6ed2:	0000                	unimp
    6ed4:	06a0                	addi	s0,sp,840
    6ed6:	0000                	unimp
    6ed8:	0001                	nop
    6eda:	0058                	addi	a4,sp,4
    6edc:	0000                	unimp
    6ede:	0000                	unimp
    6ee0:	0000                	unimp
    6ee2:	5400                	lw	s0,40(s0)
    6ee4:	0002                	c.slli64	zero
    6ee6:	dc00                	sw	s0,56(s0)
    6ee8:	01000003          	lb	zero,16(zero) # 10 <_start>
    6eec:	6b00                	flw	fs0,16(a4)
    6eee:	0698                	addi	a4,sp,832
    6ef0:	0000                	unimp
    6ef2:	06a0                	addi	s0,sp,840
    6ef4:	0000                	unimp
    6ef6:	0002                	c.slli64	zero
    6ef8:	9f30                	0x9f30
	...
    6f02:	0340                	addi	s0,sp,388
    6f04:	0000                	unimp
    6f06:	03e8                	addi	a0,sp,460
    6f08:	0000                	unimp
    6f0a:	0001                	nop
    6f0c:	ec58                	fsw	fa4,28(s0)
    6f0e:	20000003          	lb	zero,512(zero) # 200 <calc_func+0xe0>
    6f12:	0004                	0x4
    6f14:	0100                	addi	s0,sp,128
    6f16:	5800                	lw	s0,48(s0)
    6f18:	0428                	addi	a0,sp,520
    6f1a:	0000                	unimp
    6f1c:	0494                	addi	a3,sp,576
    6f1e:	0000                	unimp
    6f20:	0001                	nop
    6f22:	0858                	addi	a4,sp,20
    6f24:	0005                	c.nop	1
    6f26:	9800                	0x9800
    6f28:	0005                	c.nop	1
    6f2a:	0100                	addi	s0,sp,128
    6f2c:	5f00                	lw	s0,56(a4)
    6f2e:	059c                	addi	a5,sp,704
    6f30:	0000                	unimp
    6f32:	05c8                	addi	a0,sp,708
    6f34:	0000                	unimp
    6f36:	0001                	nop
    6f38:	c85f 0005 cc00      	0xcc000005c85f
    6f3e:	0005                	c.nop	1
    6f40:	0100                	addi	s0,sp,128
    6f42:	5c00                	lw	s0,56(s0)
    6f44:	07d8                	addi	a4,sp,964
    6f46:	0000                	unimp
    6f48:	07dc                	addi	a5,sp,964
    6f4a:	0000                	unimp
    6f4c:	0001                	nop
    6f4e:	005f 0000 0000      	0x5f
    6f54:	0000                	unimp
    6f56:	c800                	sw	s0,16(s0)
    6f58:	dc000003          	lb	zero,-576(zero) # fffffdc0 <RAM_SIZE+0xfffefdc0>
    6f5c:	01000003          	lb	zero,16(zero) # 10 <_start>
    6f60:	6b00                	flw	fs0,16(a4)
    6f62:	03ec                	addi	a1,sp,460
    6f64:	0000                	unimp
    6f66:	0408                	addi	a0,sp,512
    6f68:	0000                	unimp
    6f6a:	0001                	nop
    6f6c:	0004186b          	0x4186b
    6f70:	2800                	fld	fs0,16(s0)
    6f72:	0004                	0x4
    6f74:	0100                	addi	s0,sp,128
    6f76:	6b00                	flw	fs0,16(a4)
    6f78:	0428                	addi	a0,sp,520
    6f7a:	0000                	unimp
    6f7c:	04c8                	addi	a0,sp,580
    6f7e:	0000                	unimp
    6f80:	0001                	nop
    6f82:	8464                	0x8464
    6f84:	0005                	c.nop	1
    6f86:	9c00                	0x9c00
    6f88:	0005                	c.nop	1
    6f8a:	0200                	addi	s0,sp,256
    6f8c:	3000                	fld	fs0,32(s0)
    6f8e:	9c9f 0005 b400      	0xb40000059c9f
    6f94:	0005                	c.nop	1
    6f96:	0100                	addi	s0,sp,128
    6f98:	6600                	flw	fs0,8(a2)
    6f9a:	05c0                	addi	s0,sp,708
    6f9c:	0000                	unimp
    6f9e:	05c4                	addi	s1,sp,708
    6fa0:	0000                	unimp
    6fa2:	0001                	nop
    6fa4:	c45e                	sw	s7,8(sp)
    6fa6:	0005                	c.nop	1
    6fa8:	cc00                	sw	s0,24(s0)
    6faa:	0005                	c.nop	1
    6fac:	0100                	addi	s0,sp,128
    6fae:	6600                	flw	fs0,8(a2)
    6fb0:	07d8                	addi	a4,sp,964
    6fb2:	0000                	unimp
    6fb4:	07dc                	addi	a5,sp,964
    6fb6:	0000                	unimp
    6fb8:	0001                	nop
    6fba:	0066                	c.slli	zero,0x19
    6fbc:	0000                	unimp
    6fbe:	0000                	unimp
    6fc0:	0000                	unimp
    6fc2:	c400                	sw	s0,8(s0)
    6fc4:	2c000003          	lb	zero,704(zero) # 2c0 <core_list_insert_new+0xc>
    6fc8:	0004                	0x4
    6fca:	0100                	addi	s0,sp,128
    6fcc:	5d00                	lw	s0,56(a0)
    6fce:	042c                	addi	a1,sp,520
    6fd0:	0000                	unimp
    6fd2:	0000043b          	0x43b
    6fd6:	0008                	0x8
    6fd8:	007e                	c.slli	zero,0x1f
    6fda:	2540                	fld	fs0,136(a0)
    6fdc:	007c                	addi	a5,sp,12
    6fde:	9f22                	add	t5,t5,s0
    6fe0:	0580                	addi	s0,sp,704
    6fe2:	0000                	unimp
    6fe4:	05d0                	addi	a2,sp,708
    6fe6:	0000                	unimp
    6fe8:	0001                	nop
    6fea:	d85c                	sw	a5,52(s0)
    6fec:	e4000007          	vluxseg8ei8.v	v0,(zero),v0,v0.t
    6ff0:	01000007          	vle8ff.v	v0,(zero),v0.t
    6ff4:	5c00                	lw	s0,56(s0)
	...
    6ffe:	03c8                	addi	a0,sp,452
    7000:	0000                	unimp
    7002:	041c                	addi	a5,sp,512
    7004:	0000                	unimp
    7006:	0001                	nop
    7008:	8464                	0x8464
    700a:	0005                	c.nop	1
    700c:	d000                	sw	s0,32(s0)
    700e:	0005                	c.nop	1
    7010:	0100                	addi	s0,sp,128
    7012:	5a00                	lw	s0,48(a2)
    7014:	07d8                	addi	a4,sp,964
    7016:	0000                	unimp
    7018:	07e4                	addi	s1,sp,972
    701a:	0000                	unimp
    701c:	0001                	nop
    701e:	005a                	c.slli	zero,0x16
    7020:	0000                	unimp
    7022:	0000                	unimp
    7024:	0000                	unimp
    7026:	7c00                	flw	fs0,56(s0)
    7028:	0002                	c.slli64	zero
    702a:	8300                	0x8300
    702c:	0002                	c.slli64	zero
    702e:	0100                	addi	s0,sp,128
    7030:	5b00                	lw	s0,48(a4)
    7032:	00000283          	lb	t0,0(zero) # 0 <RAM_START_ADDRESS>
    7036:	05d0                	addi	a2,sp,708
    7038:	0000                	unimp
    703a:	0001                	nop
    703c:	0007d867          	0x7d867
    7040:	e400                	fsw	fs0,8(s0)
    7042:	01000007          	vle8ff.v	v0,(zero),v0.t
    7046:	6700                	flw	fs0,8(a4)
	...
    7050:	0280                	addi	s0,sp,320
    7052:	0000                	unimp
    7054:	04b4                	addi	a3,sp,584
    7056:	0000                	unimp
    7058:	0001                	nop
    705a:	b468                	fsd	fa0,232(s0)
    705c:	0004                	0x4
    705e:	b800                	fsd	fs0,48(s0)
    7060:	0005                	c.nop	1
    7062:	0700                	addi	s0,sp,896
    7064:	8500                	0x8500
    7066:	4000                	lw	s0,0(s0)
    7068:	4024                	lw	s1,64(s0)
    706a:	9f25                	0x9f25
    706c:	07d8                	addi	a4,sp,964
    706e:	0000                	unimp
    7070:	07e4                	addi	s1,sp,972
    7072:	0000                	unimp
    7074:	00850007          	0x850007
    7078:	2440                	fld	fs0,136(s0)
    707a:	2540                	fld	fs0,136(a0)
    707c:	009f 0000 0000      	0x9f
    7082:	0000                	unimp
    7084:	8c00                	0x8c00
    7086:	0002                	c.slli64	zero
    7088:	9000                	0x9000
    708a:	0002                	c.slli64	zero
    708c:	0100                	addi	s0,sp,128
    708e:	5a00                	lw	s0,48(a2)
    7090:	0290                	addi	a2,sp,320
    7092:	0000                	unimp
    7094:	00000293          	li	t0,0
    7098:	0001                	nop
    709a:	0002935b          	0x2935b
    709e:	c000                	sw	s0,0(s0)
    70a0:	0002                	c.slli64	zero
    70a2:	0100                	addi	s0,sp,128
    70a4:	6a00                	flw	fs0,16(a2)
    70a6:	02c0                	addi	s0,sp,324
    70a8:	0000                	unimp
    70aa:	03b8                	addi	a4,sp,456
    70ac:	0000                	unimp
    70ae:	0001                	nop
    70b0:	0064                	addi	s1,sp,12
    70b2:	0000                	unimp
    70b4:	0000                	unimp
    70b6:	0000                	unimp
    70b8:	e800                	fsw	fs0,16(s0)
    70ba:	0002                	c.slli64	zero
    70bc:	ec00                	fsw	fs0,24(s0)
    70be:	0002                	c.slli64	zero
    70c0:	0100                	addi	s0,sp,128
    70c2:	5a00                	lw	s0,48(a2)
    70c4:	02ec                	addi	a1,sp,332
    70c6:	0000                	unimp
    70c8:	000002ef          	jal	t0,70c8 <__bss_end+0x38>
    70cc:	0001                	nop
    70ce:	0002ef5b          	0x2ef5b
    70d2:	2000                	fld	fs0,0(s0)
    70d4:	01000003          	lb	zero,16(zero) # 10 <_start>
    70d8:	6a00                	flw	fs0,16(a2)
    70da:	0320                	addi	s0,sp,392
    70dc:	0000                	unimp
    70de:	0364                	addi	s1,sp,396
    70e0:	0000                	unimp
    70e2:	0001                	nop
    70e4:	005f 0000 0000      	0x5f
    70ea:	0000                	unimp
    70ec:	8000                	0x8000
    70ee:	0002                	c.slli64	zero
    70f0:	8300                	0x8300
    70f2:	0002                	c.slli64	zero
    70f4:	0600                	addi	s0,sp,768
    70f6:	8900                	0x8900
    70f8:	7b00                	flw	fs0,48(a4)
    70fa:	1d00                	addi	s0,sp,688
    70fc:	839f 0002 b000      	0xb0000002839f
    7102:	0002                	c.slli64	zero
    7104:	0600                	addi	s0,sp,768
    7106:	8900                	0x8900
    7108:	8700                	0x8700
    710a:	1d00                	addi	s0,sp,688
    710c:	b09f 0002 bc00      	0xbc000002b09f
    7112:	0002                	c.slli64	zero
    7114:	0100                	addi	s0,sp,128
    7116:	5e00                	lw	s0,56(a2)
    7118:	02bc                	addi	a5,sp,328
    711a:	0000                	unimp
    711c:	02c0                	addi	s0,sp,324
    711e:	0000                	unimp
    7120:	0008                	0x8
    7122:	0078                	addi	a4,sp,12
    7124:	2540                	fld	fs0,136(a0)
    7126:	007a                	c.slli	zero,0x1e
    7128:	9f21                	0x9f21
    712a:	02c0                	addi	s0,sp,324
    712c:	0000                	unimp
    712e:	02d4                	addi	a3,sp,324
    7130:	0000                	unimp
    7132:	0001                	nop
    7134:	d45e                	sw	s7,40(sp)
    7136:	0002                	c.slli64	zero
    7138:	d000                	sw	s0,32(s0)
    713a:	01000003          	lb	zero,16(zero) # 10 <_start>
    713e:	6300                	flw	fs0,0(a4)
	...
    7148:	02d4                	addi	a3,sp,324
    714a:	0000                	unimp
    714c:	0310                	addi	a2,sp,384
    714e:	0000                	unimp
    7150:	0006                	c.slli	zero,0x1
    7152:	00870083          	lb	ra,8(a4)
    7156:	9f1d                	0x9f1d
    7158:	0310                	addi	a2,sp,384
    715a:	0000                	unimp
    715c:	031c                	addi	a5,sp,384
    715e:	0000                	unimp
    7160:	0001                	nop
    7162:	2058                	fld	fa4,128(s0)
    7164:	e8000003          	lb	zero,-384(zero) # fffffe80 <RAM_SIZE+0xfffefe80>
    7168:	01000003          	lb	zero,16(zero) # 10 <_start>
    716c:	5800                	lw	s0,48(s0)
	...
    7176:	0298                	addi	a4,sp,320
    7178:	0000                	unimp
    717a:	02a0                	addi	s0,sp,328
    717c:	0000                	unimp
    717e:	0001                	nop
    7180:	a05a                	fsd	fs6,0(sp)
    7182:	0002                	c.slli64	zero
    7184:	d400                	sw	s0,40(s0)
    7186:	0002                	c.slli64	zero
    7188:	0100                	addi	s0,sp,128
    718a:	6300                	flw	fs0,0(a4)
    718c:	02f4                	addi	a3,sp,332
    718e:	0000                	unimp
    7190:	02fc                	addi	a5,sp,332
    7192:	0000                	unimp
    7194:	0001                	nop
    7196:	fc5a                	fsw	fs6,56(sp)
    7198:	0002                	c.slli64	zero
    719a:	4400                	lw	s0,8(s0)
    719c:	01000003          	lb	zero,16(zero) # 10 <_start>
    71a0:	6900                	flw	fs0,16(a0)
	...
    71aa:	0364                	addi	s1,sp,396
    71ac:	0000                	unimp
    71ae:	036c                	addi	a1,sp,396
    71b0:	0000                	unimp
    71b2:	0001                	nop
    71b4:	6c5a                	flw	fs8,148(sp)
    71b6:	c0000003          	lb	zero,-1024(zero) # fffffc00 <RAM_SIZE+0xfffefc00>
    71ba:	01000003          	lb	zero,16(zero) # 10 <_start>
    71be:	5f00                	lw	s0,56(a4)
	...
    71c8:	0374                	addi	a3,sp,396
    71ca:	0000                	unimp
    71cc:	037c                	addi	a5,sp,396
    71ce:	0000                	unimp
    71d0:	0001                	nop
    71d2:	7c5a                	flw	fs8,180(sp)
    71d4:	98000003          	lb	zero,-1664(zero) # fffff980 <RAM_SIZE+0xfffef980>
    71d8:	01000003          	lb	zero,16(zero) # 10 <_start>
    71dc:	6100                	flw	fs0,0(a0)
    71de:	03a0                	addi	s0,sp,456
    71e0:	0000                	unimp
    71e2:	0000043b          	0x43b
    71e6:	0001                	nop
    71e8:	005e                	c.slli	zero,0x17
    71ea:	0000                	unimp
    71ec:	0000                	unimp
    71ee:	0000                	unimp
    71f0:	8400                	0x8400
    71f2:	3b000003          	lb	zero,944(zero) # 3b0 <core_list_find+0x54>
    71f6:	0004                	0x4
    71f8:	0100                	addi	s0,sp,128
    71fa:	5600                	lw	s0,40(a2)
	...
    7204:	03a0                	addi	s0,sp,456
    7206:	0000                	unimp
    7208:	03a8                	addi	a0,sp,456
    720a:	0000                	unimp
    720c:	0001                	nop
    720e:	a85a                	fsd	fs6,16(sp)
    7210:	3b000003          	lb	zero,944(zero) # 3b0 <core_list_find+0x54>
    7214:	0004                	0x4
    7216:	0100                	addi	s0,sp,128
    7218:	5c00                	lw	s0,56(s0)
	...
    7222:	0340                	addi	s0,sp,388
    7224:	0000                	unimp
    7226:	0000043b          	0x43b
    722a:	0001                	nop
    722c:	0060                	addi	s0,sp,12
    722e:	0000                	unimp
    7230:	0000                	unimp
    7232:	0000                	unimp
    7234:	5000                	lw	s0,32(s0)
    7236:	b4000003          	lb	zero,-1216(zero) # fffffb40 <RAM_SIZE+0xfffefb40>
    723a:	0005                	c.nop	1
    723c:	0100                	addi	s0,sp,128
    723e:	6600                	flw	fs0,8(a2)
    7240:	07d8                	addi	a4,sp,964
    7242:	0000                	unimp
    7244:	07e4                	addi	s1,sp,972
    7246:	0000                	unimp
    7248:	0001                	nop
    724a:	0066                	c.slli	zero,0x19
    724c:	0000                	unimp
    724e:	0000                	unimp
    7250:	0000                	unimp
    7252:	5000                	lw	s0,32(s0)
    7254:	94000003          	lb	zero,-1728(zero) # fffff940 <RAM_SIZE+0xfffef940>
    7258:	01000003          	lb	zero,16(zero) # 10 <_start>
    725c:	5e00                	lw	s0,56(a2)
    725e:	0394                	addi	a3,sp,448
    7260:	0000                	unimp
    7262:	0000043b          	0x43b
    7266:	0005                	c.nop	1
    7268:	0080                	addi	s0,sp,64
    726a:	2540                	fld	fs0,136(a0)
    726c:	009f 0000 0000      	0x9f
    7272:	0000                	unimp
    7274:	5400                	lw	s0,40(s0)
    7276:	d0000003          	lb	zero,-768(zero) # fffffd00 <RAM_SIZE+0xfffefd00>
    727a:	0005                	c.nop	1
    727c:	0100                	addi	s0,sp,128
    727e:	6a00                	flw	fs0,16(a2)
    7280:	07d8                	addi	a4,sp,964
    7282:	0000                	unimp
    7284:	07e4                	addi	s1,sp,972
    7286:	0000                	unimp
    7288:	0001                	nop
    728a:	006a                	c.slli	zero,0x1a
    728c:	0000                	unimp
    728e:	0000                	unimp
    7290:	0000                	unimp
    7292:	ec00                	fsw	fs0,24(s0)
    7294:	08000003          	lb	zero,128(zero) # 80 <__do_global_dtors_aux+0x24>
    7298:	0004                	0x4
    729a:	0100                	addi	s0,sp,128
    729c:	6b00                	flw	fs0,16(a4)
	...
    72a6:	0414                	addi	a3,sp,512
    72a8:	0000                	unimp
    72aa:	0418                	addi	a4,sp,512
    72ac:	0000                	unimp
    72ae:	0001                	nop
    72b0:	0000006b          	0x6b
    72b4:	0000                	unimp
    72b6:	0000                	unimp
    72b8:	1c00                	addi	s0,sp,560
    72ba:	0004                	0x4
    72bc:	c800                	sw	s0,16(s0)
    72be:	0004                	0x4
    72c0:	0100                	addi	s0,sp,128
    72c2:	6400                	flw	fs0,8(s0)
	...
    72cc:	0430                	addi	a2,sp,520
    72ce:	0000                	unimp
    72d0:	05d0                	addi	a2,sp,708
    72d2:	0000                	unimp
    72d4:	0001                	nop
    72d6:	0007d867          	0x7d867
    72da:	e400                	fsw	fs0,8(s0)
    72dc:	01000007          	vle8ff.v	v0,(zero),v0.t
    72e0:	6700                	flw	fs0,8(a4)
	...
    72ea:	0430                	addi	a2,sp,520
    72ec:	0000                	unimp
    72ee:	04b4                	addi	a3,sp,584
    72f0:	0000                	unimp
    72f2:	0001                	nop
    72f4:	b468                	fsd	fa0,232(s0)
    72f6:	0004                	0x4
    72f8:	b800                	fsd	fs0,48(s0)
    72fa:	0005                	c.nop	1
    72fc:	0700                	addi	s0,sp,896
    72fe:	8500                	0x8500
    7300:	4000                	lw	s0,0(s0)
    7302:	4024                	lw	s1,64(s0)
    7304:	9f25                	0x9f25
    7306:	07d8                	addi	a4,sp,964
    7308:	0000                	unimp
    730a:	07e4                	addi	s1,sp,972
    730c:	0000                	unimp
    730e:	00850007          	0x850007
    7312:	2440                	fld	fs0,136(s0)
    7314:	2540                	fld	fs0,136(a0)
    7316:	009f 0000 0000      	0x9f
    731c:	0000                	unimp
    731e:	3c00                	fld	fs0,56(s0)
    7320:	0004                	0x4
    7322:	4800                	lw	s0,16(s0)
    7324:	0004                	0x4
    7326:	0100                	addi	s0,sp,128
    7328:	5a00                	lw	s0,48(a2)
    732a:	0448                	addi	a0,sp,516
    732c:	0000                	unimp
    732e:	0000044b          	fnmsub.s	fs0,ft0,ft0,ft0,rne
    7332:	0001                	nop
    7334:	00044b5b          	0x44b5b
    7338:	8000                	0x8000
    733a:	0004                	0x4
    733c:	0300                	addi	s0,sp,384
    733e:	9100                	0x9100
    7340:	7fbc                	flw	fa5,120(a5)
    7342:	0480                	addi	s0,sp,576
    7344:	0000                	unimp
    7346:	05d0                	addi	a2,sp,708
    7348:	0000                	unimp
    734a:	0001                	nop
    734c:	0007d86b          	0x7d86b
    7350:	e400                	fsw	fs0,8(s0)
    7352:	01000007          	vle8ff.v	v0,(zero),v0.t
    7356:	6b00                	flw	fs0,16(a4)
	...
    7360:	04a0                	addi	s0,sp,584
    7362:	0000                	unimp
    7364:	04ac                	addi	a1,sp,584
    7366:	0000                	unimp
    7368:	0001                	nop
    736a:	ac5a                	fsd	fs6,24(sp)
    736c:	0004                	0x4
    736e:	af00                	fsd	fs0,24(a4)
    7370:	0004                	0x4
    7372:	0100                	addi	s0,sp,128
    7374:	5b00                	lw	s0,48(a4)
    7376:	000004af          	vamoaddei8.v	zero,(zero),v0,v9,v0.t
    737a:	04e4                	addi	s1,sp,588
    737c:	0000                	unimp
    737e:	b8910003          	lb	zero,-1143(sp)
    7382:	e47f                	0xe47f
    7384:	0004                	0x4
    7386:	1800                	addi	s0,sp,48
    7388:	0005                	c.nop	1
    738a:	0100                	addi	s0,sp,128
    738c:	5d00                	lw	s0,56(a0)
	...
    7396:	0430                	addi	a2,sp,520
    7398:	0000                	unimp
    739a:	0470                	addi	a2,sp,524
    739c:	0000                	unimp
    739e:	0006                	c.slli	zero,0x1
    73a0:	0078                	addi	a4,sp,12
    73a2:	9f1d0087          	vloxseg5ei128.v	v1,(s10),v17
    73a6:	0470                	addi	a2,sp,524
    73a8:	0000                	unimp
    73aa:	047c                	addi	a5,sp,524
    73ac:	0000                	unimp
    73ae:	0001                	nop
    73b0:	7c5f 0004 8000      	0x800000047c5f
    73b6:	0004                	0x4
    73b8:	0800                	addi	s0,sp,16
    73ba:	8400                	0x8400
    73bc:	4000                	lw	s0,0(s0)
    73be:	7a25                	lui	s4,0xfffe9
    73c0:	2100                	fld	fs0,0(a0)
    73c2:	809f 0004 9400      	0x94000004809f
    73c8:	0004                	0x4
    73ca:	0100                	addi	s0,sp,128
    73cc:	5f00                	lw	s0,56(a4)
    73ce:	0494                	addi	a3,sp,576
    73d0:	0000                	unimp
    73d2:	05d0                	addi	a2,sp,708
    73d4:	0000                	unimp
    73d6:	0001                	nop
    73d8:	d858                	sw	a4,52(s0)
    73da:	e4000007          	vluxseg8ei8.v	v0,(zero),v0,v0.t
    73de:	01000007          	vle8ff.v	v0,(zero),v0.t
    73e2:	5800                	lw	s0,48(s0)
	...
    73ec:	0494                	addi	a3,sp,576
    73ee:	0000                	unimp
    73f0:	04d4                	addi	a3,sp,580
    73f2:	0000                	unimp
    73f4:	0006                	c.slli	zero,0x1
    73f6:	0078                	addi	a4,sp,12
    73f8:	9f1d0087          	vloxseg5ei128.v	v1,(s10),v17
    73fc:	04d4                	addi	a3,sp,580
    73fe:	0000                	unimp
    7400:	04e0                	addi	s0,sp,588
    7402:	0000                	unimp
    7404:	0001                	nop
    7406:	e05f 0004 e400      	0xe4000004e05f
    740c:	0004                	0x4
    740e:	0800                	addi	s0,sp,16
    7410:	7a00                	flw	fs0,48(a2)
    7412:	4000                	lw	s0,0(s0)
    7414:	8424                	0x8424
    7416:	2100                	fld	fs0,0(a0)
    7418:	e49f 0004 9800      	0x98000004e49f
    741e:	0005                	c.nop	1
    7420:	0100                	addi	s0,sp,128
    7422:	5f00                	lw	s0,56(a4)
	...
    742c:	0450                	addi	a2,sp,516
    742e:	0000                	unimp
    7430:	0458                	addi	a4,sp,516
    7432:	0000                	unimp
    7434:	0001                	nop
    7436:	585a                	lw	a6,180(sp)
    7438:	0004                	0x4
    743a:	a800                	fsd	fs0,16(s0)
    743c:	0004                	0x4
    743e:	0300                	addi	s0,sp,384
    7440:	9100                	0x9100
    7442:	7fb8                	flw	fa4,120(a5)
    7444:	04b4                	addi	a3,sp,584
    7446:	0000                	unimp
    7448:	04bc                	addi	a5,sp,584
    744a:	0000                	unimp
    744c:	0001                	nop
    744e:	bc5a                	fsd	fs6,56(sp)
    7450:	0004                	0x4
    7452:	d000                	sw	s0,32(s0)
    7454:	0005                	c.nop	1
    7456:	0100                	addi	s0,sp,128
    7458:	6800                	flw	fs0,16(s0)
    745a:	07d8                	addi	a4,sp,964
    745c:	0000                	unimp
    745e:	07e4                	addi	s1,sp,972
    7460:	0000                	unimp
    7462:	0001                	nop
    7464:	0068                	addi	a0,sp,12
    7466:	0000                	unimp
    7468:	0000                	unimp
    746a:	0000                	unimp
    746c:	1c00                	addi	s0,sp,560
    746e:	0005                	c.nop	1
    7470:	d000                	sw	s0,32(s0)
    7472:	0005                	c.nop	1
    7474:	0100                	addi	s0,sp,128
    7476:	5600                	lw	s0,40(a2)
    7478:	07d8                	addi	a4,sp,964
    747a:	0000                	unimp
    747c:	07e4                	addi	s1,sp,972
    747e:	0000                	unimp
    7480:	0001                	nop
    7482:	0056                	c.slli	zero,0x15
    7484:	0000                	unimp
    7486:	0000                	unimp
    7488:	0000                	unimp
    748a:	2c00                	fld	fs0,24(s0)
    748c:	0005                	c.nop	1
    748e:	3400                	fld	fs0,40(s0)
    7490:	0005                	c.nop	1
    7492:	0100                	addi	s0,sp,128
    7494:	5a00                	lw	s0,48(a2)
    7496:	0534                	addi	a3,sp,648
    7498:	0000                	unimp
    749a:	0550                	addi	a2,sp,644
    749c:	0000                	unimp
    749e:	0001                	nop
    74a0:	5861                	li	a6,-8
    74a2:	0005                	c.nop	1
    74a4:	7400                	flw	fs0,40(s0)
    74a6:	0005                	c.nop	1
    74a8:	0100                	addi	s0,sp,128
    74aa:	5e00                	lw	s0,56(a2)
    74ac:	0574                	addi	a3,sp,652
    74ae:	0000                	unimp
    74b0:	05d0                	addi	a2,sp,708
    74b2:	0000                	unimp
    74b4:	0008                	0x8
    74b6:	0076                	c.slli	zero,0x1d
    74b8:	2540                	fld	fs0,136(a0)
    74ba:	0081                	addi	ra,ra,0
    74bc:	9f22                	add	t5,t5,s0
    74be:	07d8                	addi	a4,sp,964
    74c0:	0000                	unimp
    74c2:	07e4                	addi	s1,sp,972
    74c4:	0000                	unimp
    74c6:	0008                	0x8
    74c8:	0076                	c.slli	zero,0x1d
    74ca:	2540                	fld	fs0,136(a0)
    74cc:	0081                	addi	ra,ra,0
    74ce:	9f22                	add	t5,t5,s0
	...
    74d8:	053c                	addi	a5,sp,648
    74da:	0000                	unimp
    74dc:	0544                	addi	s1,sp,644
    74de:	0000                	unimp
    74e0:	0001                	nop
    74e2:	445a                	lw	s0,148(sp)
    74e4:	0005                	c.nop	1
    74e6:	d000                	sw	s0,32(s0)
    74e8:	0005                	c.nop	1
    74ea:	0100                	addi	s0,sp,128
    74ec:	6c00                	flw	fs0,24(s0)
    74ee:	07d8                	addi	a4,sp,964
    74f0:	0000                	unimp
    74f2:	07e4                	addi	s1,sp,972
    74f4:	0000                	unimp
    74f6:	0001                	nop
    74f8:	006c                	addi	a1,sp,12
    74fa:	0000                	unimp
    74fc:	0000                	unimp
    74fe:	0000                	unimp
    7500:	5800                	lw	s0,48(s0)
    7502:	0005                	c.nop	1
    7504:	6400                	flw	fs0,8(s0)
    7506:	0005                	c.nop	1
    7508:	0100                	addi	s0,sp,128
    750a:	5a00                	lw	s0,48(a2)
    750c:	0564                	addi	s1,sp,652
    750e:	0000                	unimp
    7510:	0590                	addi	a2,sp,704
    7512:	0000                	unimp
    7514:	0001                	nop
    7516:	005d                	c.nop	23
    7518:	0000                	unimp
    751a:	0000                	unimp
    751c:	0000                	unimp
    751e:	0800                	addi	s0,sp,16
    7520:	0005                	c.nop	1
    7522:	cc00                	sw	s0,24(s0)
    7524:	0005                	c.nop	1
    7526:	0100                	addi	s0,sp,128
    7528:	6000                	flw	fs0,0(s0)
    752a:	07d8                	addi	a4,sp,964
    752c:	0000                	unimp
    752e:	07dc                	addi	a5,sp,964
    7530:	0000                	unimp
    7532:	0001                	nop
    7534:	0060                	addi	s0,sp,12
    7536:	0000                	unimp
    7538:	0000                	unimp
    753a:	0000                	unimp
    753c:	0c00                	addi	s0,sp,528
    753e:	0005                	c.nop	1
    7540:	b400                	fsd	fs0,40(s0)
    7542:	0005                	c.nop	1
    7544:	0100                	addi	s0,sp,128
    7546:	6600                	flw	fs0,8(a2)
    7548:	07d8                	addi	a4,sp,964
    754a:	0000                	unimp
    754c:	07e4                	addi	s1,sp,972
    754e:	0000                	unimp
    7550:	0001                	nop
    7552:	0066                	c.slli	zero,0x19
    7554:	0000                	unimp
    7556:	0000                	unimp
    7558:	0000                	unimp
    755a:	0c00                	addi	s0,sp,528
    755c:	0005                	c.nop	1
    755e:	4c00                	lw	s0,24(s0)
    7560:	0005                	c.nop	1
    7562:	0100                	addi	s0,sp,128
    7564:	5e00                	lw	s0,56(a2)
    7566:	054c                	addi	a1,sp,644
    7568:	0000                	unimp
    756a:	05cc                	addi	a1,sp,708
    756c:	0000                	unimp
    756e:	0005                	c.nop	1
    7570:	0080                	addi	s0,sp,64
    7572:	2540                	fld	fs0,136(a0)
    7574:	d89f 0007 dc00      	0xdc000007d89f
    757a:	05000007          	vluxei8.v	v0,(zero),v16,v0.t
    757e:	8000                	0x8000
    7580:	4000                	lw	s0,0(s0)
    7582:	9f25                	0x9f25
	...
    758c:	050c                	addi	a1,sp,640
    758e:	0000                	unimp
    7590:	05d0                	addi	a2,sp,708
    7592:	0000                	unimp
    7594:	0001                	nop
    7596:	d86a                	sw	s10,48(sp)
    7598:	e4000007          	vluxseg8ei8.v	v0,(zero),v0,v0.t
    759c:	01000007          	vle8ff.v	v0,(zero),v0.t
    75a0:	6a00                	flw	fs0,16(a2)
	...
    75aa:	059c                	addi	a5,sp,704
    75ac:	0000                	unimp
    75ae:	05b4                	addi	a3,sp,712
    75b0:	0000                	unimp
    75b2:	0001                	nop
    75b4:	d866                	sw	s9,48(sp)
    75b6:	dc000007          	vloxseg7ei128.v	v0,(zero),v0,v0.t
    75ba:	01000007          	vle8ff.v	v0,(zero),v0.t
    75be:	6600                	flw	fs0,8(a2)
	...
    75c8:	05bc                	addi	a5,sp,712
    75ca:	0000                	unimp
    75cc:	05c4                	addi	s1,sp,708
    75ce:	0000                	unimp
    75d0:	0001                	nop
    75d2:	005e                	c.slli	zero,0x17
    75d4:	0000                	unimp
    75d6:	0000                	unimp
    75d8:	0000                	unimp
    75da:	f000                	fsw	fs0,32(s0)
    75dc:	0005                	c.nop	1
    75de:	fc00                	fsw	fs0,56(s0)
    75e0:	0005                	c.nop	1
    75e2:	0100                	addi	s0,sp,128
    75e4:	5c00                	lw	s0,56(s0)
	...
    75ee:	0744                	addi	s1,sp,900
    75f0:	0000                	unimp
    75f2:	0750                	addi	a2,sp,900
    75f4:	0000                	unimp
    75f6:	0001                	nop
    75f8:	005e                	c.slli	zero,0x17
	...
    7602:	0000                	unimp
    7604:	2000                	fld	fs0,0(s0)
    7606:	0000                	unimp
    7608:	0600                	addi	s0,sp,768
    760a:	5a00                	lw	s0,48(a2)
    760c:	935b0493          	addi	s1,s6,-1739
    7610:	2004                	fld	fs1,0(s0)
    7612:	0000                	unimp
    7614:	8c00                	0x8c00
    7616:	0000                	unimp
    7618:	0600                	addi	s0,sp,768
    761a:	f300                	fsw	fs0,32(a4)
    761c:	250af503          	0x250af503
    7620:	009f 0000 0000      	0x9f
    7626:	0000                	unimp
    7628:	0000                	unimp
    762a:	0000                	unimp
    762c:	4c00                	lw	s0,24(s0)
    762e:	0000                	unimp
    7630:	0600                	addi	s0,sp,768
    7632:	5c00                	lw	s0,56(s0)
    7634:	935d0493          	addi	s1,s10,-1739
    7638:	4c04                	lw	s1,24(s0)
    763a:	0000                	unimp
    763c:	5000                	lw	s0,32(s0)
    763e:	0000                	unimp
    7640:	0600                	addi	s0,sp,768
    7642:	f300                	fsw	fs0,32(a4)
    7644:	250cf503          	0x250cf503
    7648:	509f 0000 5800      	0x58000000509f
    764e:	0000                	unimp
    7650:	0600                	addi	s0,sp,768
    7652:	5c00                	lw	s0,56(s0)
    7654:	935d0493          	addi	s1,s10,-1739
    7658:	5804                	lw	s1,48(s0)
    765a:	0000                	unimp
    765c:	8c00                	0x8c00
    765e:	0000                	unimp
    7660:	0600                	addi	s0,sp,768
    7662:	f300                	fsw	fs0,32(a4)
    7664:	250cf503          	0x250cf503
    7668:	009f 0000 0000      	0x9f
    766e:	0000                	unimp
    7670:	3000                	fld	fs0,32(s0)
    7672:	0000                	unimp
    7674:	4c00                	lw	s0,24(s0)
    7676:	0000                	unimp
    7678:	0100                	addi	s0,sp,128
    767a:	5c00                	lw	s0,56(s0)
    767c:	004c                	addi	a1,sp,4
    767e:	0000                	unimp
    7680:	0050                	addi	a2,sp,4
    7682:	0000                	unimp
    7684:	0001                	nop
    7686:	506e                	0x506e
    7688:	0000                	unimp
    768a:	5800                	lw	s0,48(s0)
    768c:	0000                	unimp
    768e:	0100                	addi	s0,sp,128
    7690:	5c00                	lw	s0,56(s0)
    7692:	0058                	addi	a4,sp,4
    7694:	0000                	unimp
    7696:	008c                	addi	a1,sp,64
    7698:	0000                	unimp
    769a:	0001                	nop
    769c:	006e                	c.slli	zero,0x1b
	...
    76a6:	0000                	unimp
    76a8:	2000                	fld	fs0,0(s0)
    76aa:	0000                	unimp
    76ac:	0600                	addi	s0,sp,768
    76ae:	5a00                	lw	s0,48(a2)
    76b0:	935b0493          	addi	s1,s6,-1739
    76b4:	2004                	fld	fs1,0(s0)
    76b6:	0000                	unimp
    76b8:	e400                	fsw	fs0,8(s0)
    76ba:	0000                	unimp
    76bc:	0600                	addi	s0,sp,768
    76be:	f300                	fsw	fs0,32(a4)
    76c0:	250af503          	0x250af503
    76c4:	009f 0000 0000      	0x9f
    76ca:	0000                	unimp
    76cc:	0000                	unimp
    76ce:	0000                	unimp
    76d0:	6c00                	flw	fs0,24(s0)
    76d2:	0000                	unimp
    76d4:	0600                	addi	s0,sp,768
    76d6:	5c00                	lw	s0,56(s0)
    76d8:	935d0493          	addi	s1,s10,-1739
    76dc:	6c04                	flw	fs1,24(s0)
    76de:	0000                	unimp
    76e0:	d400                	sw	s0,40(s0)
    76e2:	0000                	unimp
    76e4:	0600                	addi	s0,sp,768
    76e6:	f300                	fsw	fs0,32(a4)
    76e8:	250cf503          	0x250cf503
    76ec:	d49f 0000 e400      	0xe4000000d49f
    76f2:	0000                	unimp
    76f4:	0600                	addi	s0,sp,768
    76f6:	5c00                	lw	s0,56(s0)
    76f8:	935d0493          	addi	s1,s10,-1739
    76fc:	0004                	0x4
    76fe:	0000                	unimp
    7700:	0000                	unimp
    7702:	0000                	unimp
    7704:	2000                	fld	fs0,0(s0)
    7706:	0000                	unimp
    7708:	4800                	lw	s0,16(s0)
    770a:	0000                	unimp
    770c:	0100                	addi	s0,sp,128
    770e:	5a00                	lw	s0,48(a2)
    7710:	004c                	addi	a1,sp,4
    7712:	0000                	unimp
    7714:	0084                	addi	s1,sp,64
    7716:	0000                	unimp
    7718:	0001                	nop
    771a:	885a                	mv	a6,s6
    771c:	0000                	unimp
    771e:	8c00                	0x8c00
    7720:	0000                	unimp
    7722:	0100                	addi	s0,sp,128
    7724:	5a00                	lw	s0,48(a2)
    7726:	0098                	addi	a4,sp,64
    7728:	0000                	unimp
    772a:	00a0                	addi	s0,sp,72
    772c:	0000                	unimp
    772e:	0001                	nop
    7730:	a45a                	fsd	fs6,8(sp)
    7732:	0000                	unimp
    7734:	b800                	fsd	fs0,48(s0)
    7736:	0000                	unimp
    7738:	0100                	addi	s0,sp,128
    773a:	5a00                	lw	s0,48(a2)
    773c:	00bc                	addi	a5,sp,72
    773e:	0000                	unimp
    7740:	00c0                	addi	s0,sp,68
    7742:	0000                	unimp
    7744:	0001                	nop
    7746:	c45a                	sw	s6,8(sp)
    7748:	0000                	unimp
    774a:	e400                	fsw	fs0,8(s0)
    774c:	0000                	unimp
    774e:	0100                	addi	s0,sp,128
    7750:	5a00                	lw	s0,48(a2)
	...
    775a:	0030                	addi	a2,sp,8
    775c:	0000                	unimp
    775e:	006c                	addi	a1,sp,12
    7760:	0000                	unimp
    7762:	0001                	nop
    7764:	6c5c                	flw	fa5,28(s0)
    7766:	0000                	unimp
    7768:	d400                	sw	s0,40(s0)
    776a:	0000                	unimp
    776c:	0100                	addi	s0,sp,128
    776e:	6c00                	flw	fs0,24(s0)
    7770:	00d4                	addi	a3,sp,68
    7772:	0000                	unimp
    7774:	00e4                	addi	s1,sp,76
    7776:	0000                	unimp
    7778:	0001                	nop
    777a:	005c                	addi	a5,sp,4
    777c:	0000                	unimp
    777e:	0000                	unimp
    7780:	0000                	unimp
    7782:	6400                	flw	fs0,8(s0)
    7784:	0000                	unimp
    7786:	6800                	flw	fs0,16(s0)
    7788:	0000                	unimp
    778a:	0100                	addi	s0,sp,128
    778c:	5f00                	lw	s0,56(a4)
    778e:	00d8                	addi	a4,sp,68
    7790:	0000                	unimp
    7792:	00e4                	addi	s1,sp,76
    7794:	0000                	unimp
    7796:	0002                	c.slli64	zero
    7798:	9f30                	0x9f30
	...
    77a2:	0070                	addi	a2,sp,12
    77a4:	0000                	unimp
    77a6:	007c                	addi	a5,sp,12
    77a8:	0000                	unimp
    77aa:	0002                	c.slli64	zero
    77ac:	9f30                	0x9f30
    77ae:	0088                	addi	a0,sp,64
    77b0:	0000                	unimp
    77b2:	00b4                	addi	a3,sp,72
    77b4:	0000                	unimp
    77b6:	0002                	c.slli64	zero
    77b8:	9f30                	0x9f30
    77ba:	00c4                	addi	s1,sp,68
    77bc:	0000                	unimp
    77be:	00cc                	addi	a1,sp,68
    77c0:	0000                	unimp
    77c2:	0002                	c.slli64	zero
    77c4:	9f31                	0x9f31
    77c6:	00cc                	addi	a1,sp,68
    77c8:	0000                	unimp
    77ca:	00d4                	addi	a3,sp,68
    77cc:	0000                	unimp
    77ce:	0002                	c.slli64	zero
    77d0:	9f30                	0x9f30
	...
    77de:	0020                	addi	s0,sp,8
    77e0:	0000                	unimp
    77e2:	0006                	c.slli	zero,0x1
    77e4:	935a                	add	t1,t1,s6
    77e6:	5b04                	lw	s1,48(a4)
    77e8:	00200493          	li	s1,2
    77ec:	0000                	unimp
    77ee:	00e4                	addi	s1,sp,76
    77f0:	0000                	unimp
    77f2:	0006                	c.slli	zero,0x1
    77f4:	0af503f3          	0xaf503f3
    77f8:	9f25                	0x9f25
	...
    7806:	006c                	addi	a1,sp,12
    7808:	0000                	unimp
    780a:	0006                	c.slli	zero,0x1
    780c:	935c                	0x935c
    780e:	5d04                	lw	s1,56(a0)
    7810:	006c0493          	addi	s1,s8,6
    7814:	0000                	unimp
    7816:	00d4                	addi	a3,sp,68
    7818:	0000                	unimp
    781a:	0006                	c.slli	zero,0x1
    781c:	0cf503f3          	0xcf503f3
    7820:	9f25                	0x9f25
    7822:	00d4                	addi	a3,sp,68
    7824:	0000                	unimp
    7826:	00e4                	addi	s1,sp,76
    7828:	0000                	unimp
    782a:	0006                	c.slli	zero,0x1
    782c:	935c                	0x935c
    782e:	5d04                	lw	s1,56(a0)
    7830:	00000493          	li	s1,0
    7834:	0000                	unimp
    7836:	0000                	unimp
    7838:	0000                	unimp
    783a:	0020                	addi	s0,sp,8
    783c:	0000                	unimp
    783e:	0048                	addi	a0,sp,4
    7840:	0000                	unimp
    7842:	0001                	nop
    7844:	4c5a                	lw	s8,148(sp)
    7846:	0000                	unimp
    7848:	8400                	0x8400
    784a:	0000                	unimp
    784c:	0100                	addi	s0,sp,128
    784e:	5a00                	lw	s0,48(a2)
    7850:	0088                	addi	a0,sp,64
    7852:	0000                	unimp
    7854:	008c                	addi	a1,sp,64
    7856:	0000                	unimp
    7858:	0001                	nop
    785a:	985a                	add	a6,a6,s6
    785c:	0000                	unimp
    785e:	a000                	fsd	fs0,0(s0)
    7860:	0000                	unimp
    7862:	0100                	addi	s0,sp,128
    7864:	5a00                	lw	s0,48(a2)
    7866:	00a4                	addi	s1,sp,72
    7868:	0000                	unimp
    786a:	00b8                	addi	a4,sp,72
    786c:	0000                	unimp
    786e:	0001                	nop
    7870:	bc5a                	fsd	fs6,56(sp)
    7872:	0000                	unimp
    7874:	c000                	sw	s0,0(s0)
    7876:	0000                	unimp
    7878:	0100                	addi	s0,sp,128
    787a:	5a00                	lw	s0,48(a2)
    787c:	00c4                	addi	s1,sp,68
    787e:	0000                	unimp
    7880:	00e4                	addi	s1,sp,76
    7882:	0000                	unimp
    7884:	0001                	nop
    7886:	005a                	c.slli	zero,0x16
    7888:	0000                	unimp
    788a:	0000                	unimp
    788c:	0000                	unimp
    788e:	3000                	fld	fs0,32(s0)
    7890:	0000                	unimp
    7892:	6c00                	flw	fs0,24(s0)
    7894:	0000                	unimp
    7896:	0100                	addi	s0,sp,128
    7898:	5c00                	lw	s0,56(s0)
    789a:	006c                	addi	a1,sp,12
    789c:	0000                	unimp
    789e:	00d4                	addi	a3,sp,68
    78a0:	0000                	unimp
    78a2:	0001                	nop
    78a4:	d46c                	sw	a1,108(s0)
    78a6:	0000                	unimp
    78a8:	e400                	fsw	fs0,8(s0)
    78aa:	0000                	unimp
    78ac:	0100                	addi	s0,sp,128
    78ae:	5c00                	lw	s0,56(s0)
	...
    78b8:	0064                	addi	s1,sp,12
    78ba:	0000                	unimp
    78bc:	0068                	addi	a0,sp,12
    78be:	0000                	unimp
    78c0:	0001                	nop
    78c2:	d85f 0000 e400      	0xe4000000d85f
    78c8:	0000                	unimp
    78ca:	0200                	addi	s0,sp,256
    78cc:	3000                	fld	fs0,32(s0)
    78ce:	009f 0000 0000      	0x9f
    78d4:	0000                	unimp
    78d6:	7000                	flw	fs0,32(s0)
    78d8:	0000                	unimp
    78da:	7c00                	flw	fs0,56(s0)
    78dc:	0000                	unimp
    78de:	0200                	addi	s0,sp,256
    78e0:	3000                	fld	fs0,32(s0)
    78e2:	889f 0000 b400      	0xb4000000889f
    78e8:	0000                	unimp
    78ea:	0200                	addi	s0,sp,256
    78ec:	3000                	fld	fs0,32(s0)
    78ee:	c49f 0000 cc00      	0xcc000000c49f
    78f4:	0000                	unimp
    78f6:	0200                	addi	s0,sp,256
    78f8:	3100                	fld	fs0,32(a0)
    78fa:	cc9f 0000 d400      	0xd4000000cc9f
    7900:	0000                	unimp
    7902:	0200                	addi	s0,sp,256
    7904:	3000                	fld	fs0,32(s0)
    7906:	009f 0000 0000      	0x9f
    790c:	0000                	unimp
    790e:	0000                	unimp
    7910:	0000                	unimp
    7912:	7000                	flw	fs0,32(s0)
    7914:	0000                	unimp
    7916:	0600                	addi	s0,sp,768
    7918:	5a00                	lw	s0,48(a2)
    791a:	935b0493          	addi	s1,s6,-1739
    791e:	7004                	flw	fs1,32(s0)
    7920:	0000                	unimp
    7922:	f000                	fsw	fs0,32(s0)
    7924:	0000                	unimp
    7926:	0600                	addi	s0,sp,768
    7928:	f300                	fsw	fs0,32(a4)
    792a:	250af503          	0x250af503
    792e:	f09f 0000 0000      	0xf09f
    7934:	0001                	nop
    7936:	0600                	addi	s0,sp,768
    7938:	5a00                	lw	s0,48(a2)
    793a:	935b0493          	addi	s1,s6,-1739
    793e:	0004                	0x4
    7940:	0001                	nop
    7942:	3800                	fld	fs0,48(s0)
    7944:	0001                	nop
    7946:	0600                	addi	s0,sp,768
    7948:	f300                	fsw	fs0,32(a4)
    794a:	250af503          	0x250af503
    794e:	389f 0001 3b00      	0x3b000001389f
    7954:	0001                	nop
    7956:	0600                	addi	s0,sp,768
    7958:	5a00                	lw	s0,48(a2)
    795a:	935b0493          	addi	s1,s6,-1739
    795e:	3b04                	fld	fs1,48(a4)
    7960:	0001                	nop
    7962:	5400                	lw	s0,40(s0)
    7964:	0001                	nop
    7966:	0600                	addi	s0,sp,768
    7968:	f300                	fsw	fs0,32(a4)
    796a:	250af503          	0x250af503
    796e:	549f 0001 8c00      	0x8c000001549f
    7974:	0001                	nop
    7976:	0600                	addi	s0,sp,768
    7978:	5a00                	lw	s0,48(a2)
    797a:	935b0493          	addi	s1,s6,-1739
    797e:	8c04                	0x8c04
    7980:	0001                	nop
    7982:	8c00                	0x8c00
    7984:	0006                	c.slli	zero,0x1
    7986:	0600                	addi	s0,sp,768
    7988:	f300                	fsw	fs0,32(a4)
    798a:	250af503          	0x250af503
    798e:	009f 0000 0000      	0x9f
    7994:	0000                	unimp
    7996:	0000                	unimp
    7998:	0000                	unimp
    799a:	7000                	flw	fs0,32(s0)
    799c:	0000                	unimp
    799e:	0600                	addi	s0,sp,768
    79a0:	5c00                	lw	s0,56(s0)
    79a2:	935d0493          	addi	s1,s10,-1739
    79a6:	7004                	flw	fs1,32(s0)
    79a8:	0000                	unimp
    79aa:	f000                	fsw	fs0,32(s0)
    79ac:	0000                	unimp
    79ae:	0600                	addi	s0,sp,768
    79b0:	f300                	fsw	fs0,32(a4)
    79b2:	250cf503          	0x250cf503
    79b6:	f09f 0000 0300      	0x3000000f09f
    79bc:	0001                	nop
    79be:	0600                	addi	s0,sp,768
    79c0:	5c00                	lw	s0,56(s0)
    79c2:	935d0493          	addi	s1,s10,-1739
    79c6:	0304                	addi	s1,sp,384
    79c8:	0001                	nop
    79ca:	3800                	fld	fs0,48(s0)
    79cc:	0001                	nop
    79ce:	0600                	addi	s0,sp,768
    79d0:	f300                	fsw	fs0,32(a4)
    79d2:	250cf503          	0x250cf503
    79d6:	389f 0001 3b00      	0x3b000001389f
    79dc:	0001                	nop
    79de:	0600                	addi	s0,sp,768
    79e0:	5c00                	lw	s0,56(s0)
    79e2:	935d0493          	addi	s1,s10,-1739
    79e6:	3b04                	fld	fs1,48(a4)
    79e8:	0001                	nop
    79ea:	5400                	lw	s0,40(s0)
    79ec:	0001                	nop
    79ee:	0600                	addi	s0,sp,768
    79f0:	f300                	fsw	fs0,32(a4)
    79f2:	250cf503          	0x250cf503
    79f6:	549f 0001 8c00      	0x8c000001549f
    79fc:	0001                	nop
    79fe:	0600                	addi	s0,sp,768
    7a00:	5c00                	lw	s0,56(s0)
    7a02:	935d0493          	addi	s1,s10,-1739
    7a06:	8c04                	0x8c04
    7a08:	0001                	nop
    7a0a:	8c00                	0x8c00
    7a0c:	0006                	c.slli	zero,0x1
    7a0e:	0600                	addi	s0,sp,768
    7a10:	f300                	fsw	fs0,32(a4)
    7a12:	250cf503          	0x250cf503
    7a16:	009f 0000 0000      	0x9f
    7a1c:	0000                	unimp
    7a1e:	0000                	unimp
    7a20:	0000                	unimp
    7a22:	7400                	flw	fs0,40(s0)
    7a24:	0000                	unimp
    7a26:	0200                	addi	s0,sp,256
    7a28:	3000                	fld	fs0,32(s0)
    7a2a:	f09f 0000 8c00      	0x8c000000f09f
    7a30:	0001                	nop
    7a32:	0200                	addi	s0,sp,256
    7a34:	3000                	fld	fs0,32(s0)
    7a36:	009f 0000 0000      	0x9f
    7a3c:	0000                	unimp
    7a3e:	7000                	flw	fs0,32(s0)
    7a40:	0000                	unimp
    7a42:	7400                	flw	fs0,40(s0)
    7a44:	0000                	unimp
    7a46:	0200                	addi	s0,sp,256
    7a48:	3000                	fld	fs0,32(s0)
    7a4a:	749f 0000 f000      	0xf0000000749f
    7a50:	0000                	unimp
    7a52:	0100                	addi	s0,sp,128
    7a54:	6600                	flw	fs0,8(a2)
    7a56:	018c                	addi	a1,sp,192
    7a58:	0000                	unimp
    7a5a:	032c                	addi	a1,sp,392
    7a5c:	0000                	unimp
    7a5e:	0001                	nop
    7a60:	6066                	flw	ft0,88(sp)
    7a62:	0005                	c.nop	1
    7a64:	8800                	0x8800
    7a66:	0005                	c.nop	1
    7a68:	0100                	addi	s0,sp,128
    7a6a:	6600                	flw	fs0,8(a2)
    7a6c:	0594                	addi	a3,sp,704
    7a6e:	0000                	unimp
    7a70:	059c                	addi	a5,sp,704
    7a72:	0000                	unimp
    7a74:	0001                	nop
    7a76:	5866                	lw	a6,120(sp)
    7a78:	0006                	c.slli	zero,0x1
    7a7a:	6c00                	flw	fs0,24(s0)
    7a7c:	0006                	c.slli	zero,0x1
    7a7e:	0100                	addi	s0,sp,128
    7a80:	6600                	flw	fs0,8(a2)
	...
    7a8a:	0048                	addi	a0,sp,4
    7a8c:	0000                	unimp
    7a8e:	023c                	addi	a5,sp,264
    7a90:	0000                	unimp
    7a92:	0006                	c.slli	zero,0x1
    7a94:	0084                	addi	s1,sp,64
    7a96:	ff08                	fsw	fa0,56(a4)
    7a98:	9f1a                	add	t5,t5,t1
    7a9a:	0560                	addi	s0,sp,652
    7a9c:	0000                	unimp
    7a9e:	0588                	addi	a0,sp,704
    7aa0:	0000                	unimp
    7aa2:	0006                	c.slli	zero,0x1
    7aa4:	0084                	addi	s1,sp,64
    7aa6:	ff08                	fsw	fa0,56(a4)
    7aa8:	9f1a                	add	t5,t5,t1
    7aaa:	0594                	addi	a3,sp,704
    7aac:	0000                	unimp
    7aae:	059c                	addi	a5,sp,704
    7ab0:	0000                	unimp
    7ab2:	0006                	c.slli	zero,0x1
    7ab4:	0084                	addi	s1,sp,64
    7ab6:	ff08                	fsw	fa0,56(a4)
    7ab8:	9f1a                	add	t5,t5,t1
    7aba:	0658                	addi	a4,sp,772
    7abc:	0000                	unimp
    7abe:	066c                	addi	a1,sp,780
    7ac0:	0000                	unimp
    7ac2:	0006                	c.slli	zero,0x1
    7ac4:	0084                	addi	s1,sp,64
    7ac6:	ff08                	fsw	fa0,56(a4)
    7ac8:	9f1a                	add	t5,t5,t1
	...
    7ad2:	0044                	addi	s1,sp,4
    7ad4:	0000                	unimp
    7ad6:	0070                	addi	a2,sp,12
    7ad8:	0000                	unimp
    7ada:	00830007          	0x830007
    7ade:	ff0a                	fsw	ft2,188(sp)
    7ae0:	1aff                	0x1aff
    7ae2:	709f 0000 c000      	0xc0000000709f
    7ae8:	0000                	unimp
    7aea:	0100                	addi	s0,sp,128
    7aec:	6300                	flw	fs0,0(a4)
    7aee:	00f0                	addi	a2,sp,76
    7af0:	0000                	unimp
    7af2:	0130                	addi	a2,sp,136
    7af4:	0000                	unimp
    7af6:	00830007          	0x830007
    7afa:	ff0a                	fsw	ft2,188(sp)
    7afc:	1aff                	0x1aff
    7afe:	389f 0001 6400      	0x64000001389f
    7b04:	0001                	nop
    7b06:	0700                	addi	s0,sp,896
    7b08:	8300                	0x8300
    7b0a:	0a00                	addi	s0,sp,272
    7b0c:	ffff                	0xffff
    7b0e:	9f1a                	add	t5,t5,t1
    7b10:	0164                	addi	s1,sp,140
    7b12:	0000                	unimp
    7b14:	016c                	addi	a1,sp,140
    7b16:	0000                	unimp
    7b18:	0009                	c.nop	2
    7b1a:	2544007b          	0x2544007b
    7b1e:	ff0a                	fsw	ft2,188(sp)
    7b20:	6c9f1a07          	flh	fs4,1737(t5)
    7b24:	0001                	nop
    7b26:	7400                	flw	fs0,40(s0)
    7b28:	0001                	nop
    7b2a:	0700                	addi	s0,sp,896
    7b2c:	8300                	0x8300
    7b2e:	0a00                	addi	s0,sp,272
    7b30:	ffff                	0xffff
    7b32:	9f1a                	add	t5,t5,t1
    7b34:	0174                	addi	a3,sp,140
    7b36:	0000                	unimp
    7b38:	017c                	addi	a5,sp,140
    7b3a:	0000                	unimp
    7b3c:	0009                	c.nop	2
    7b3e:	2544007b          	0x2544007b
    7b42:	ff0a                	fsw	ft2,188(sp)
    7b44:	7c9f1a07          	flh	fs4,1993(t5)
    7b48:	0001                	nop
    7b4a:	8400                	0x8400
    7b4c:	0001                	nop
    7b4e:	0700                	addi	s0,sp,896
    7b50:	8300                	0x8300
    7b52:	0a00                	addi	s0,sp,272
    7b54:	ffff                	0xffff
    7b56:	9f1a                	add	t5,t5,t1
    7b58:	0184                	addi	s1,sp,192
    7b5a:	0000                	unimp
    7b5c:	018c                	addi	a1,sp,192
    7b5e:	0000                	unimp
    7b60:	0009                	c.nop	2
    7b62:	2544007b          	0x2544007b
    7b66:	ff0a                	fsw	ft2,188(sp)
    7b68:	8c9f1a07          	flh	fs4,-1847(t5)
    7b6c:	0001                	nop
    7b6e:	2c00                	fld	fs0,24(s0)
    7b70:	0002                	c.slli64	zero
    7b72:	0100                	addi	s0,sp,128
    7b74:	6300                	flw	fs0,0(a4)
	...
    7b82:	006c                	addi	a1,sp,12
    7b84:	0000                	unimp
    7b86:	0001                	nop
    7b88:	6c5a                	flw	fs8,148(sp)
    7b8a:	0000                	unimp
    7b8c:	f000                	fsw	fs0,32(s0)
    7b8e:	0000                	unimp
    7b90:	0100                	addi	s0,sp,128
    7b92:	6200                	flw	fs0,0(a2)
    7b94:	00f0                	addi	a2,sp,76
    7b96:	0000                	unimp
    7b98:	012c                	addi	a1,sp,136
    7b9a:	0000                	unimp
    7b9c:	0001                	nop
    7b9e:	2c58                	fld	fa4,152(s0)
    7ba0:	0001                	nop
    7ba2:	3800                	fld	fs0,48(s0)
    7ba4:	0001                	nop
    7ba6:	0100                	addi	s0,sp,128
    7ba8:	6200                	flw	fs0,0(a2)
    7baa:	0138                	addi	a4,sp,136
    7bac:	0000                	unimp
    7bae:	014c                	addi	a1,sp,132
    7bb0:	0000                	unimp
    7bb2:	0001                	nop
    7bb4:	4c58                	lw	a4,28(s0)
    7bb6:	0001                	nop
    7bb8:	5400                	lw	s0,40(s0)
    7bba:	0001                	nop
    7bbc:	0200                	addi	s0,sp,256
    7bbe:	3000                	fld	fs0,32(s0)
    7bc0:	549f 0001 8c00      	0x8c000001549f
    7bc6:	0001                	nop
    7bc8:	0100                	addi	s0,sp,128
    7bca:	5800                	lw	s0,48(s0)
    7bcc:	018c                	addi	a1,sp,192
    7bce:	0000                	unimp
    7bd0:	0240                	addi	s0,sp,260
    7bd2:	0000                	unimp
    7bd4:	0001                	nop
    7bd6:	6062                	flw	ft0,24(sp)
    7bd8:	0005                	c.nop	1
    7bda:	8800                	0x8800
    7bdc:	0005                	c.nop	1
    7bde:	0100                	addi	s0,sp,128
    7be0:	6200                	flw	fs0,0(a2)
    7be2:	0594                	addi	a3,sp,704
    7be4:	0000                	unimp
    7be6:	059c                	addi	a5,sp,704
    7be8:	0000                	unimp
    7bea:	0001                	nop
    7bec:	5862                	lw	a6,56(sp)
    7bee:	0006                	c.slli	zero,0x1
    7bf0:	6c00                	flw	fs0,24(s0)
    7bf2:	0006                	c.slli	zero,0x1
    7bf4:	0100                	addi	s0,sp,128
    7bf6:	6200                	flw	fs0,0(a2)
	...
    7c00:	0044                	addi	s1,sp,4
    7c02:	0000                	unimp
    7c04:	0054                	addi	a3,sp,4
    7c06:	0000                	unimp
    7c08:	0001                	nop
    7c0a:	5459                	li	s0,-10
    7c0c:	0000                	unimp
    7c0e:	5c00                	lw	s0,56(s0)
    7c10:	0000                	unimp
    7c12:	0700                	addi	s0,sp,896
    7c14:	7900                	flw	fs0,48(a0)
    7c16:	4000                	lw	s0,0(s0)
    7c18:	2440                	fld	fs0,136(s0)
    7c1a:	9f21                	0x9f21
    7c1c:	005c                	addi	a5,sp,4
    7c1e:	0000                	unimp
    7c20:	0068                	addi	a0,sp,12
    7c22:	0000                	unimp
    7c24:	007b000b          	0x7b000b
    7c28:	243c                	fld	fa5,72(s0)
    7c2a:	253c                	fld	fa5,72(a0)
    7c2c:	4040                	lw	s0,4(s0)
    7c2e:	2124                	fld	fs1,64(a0)
    7c30:	689f 0000 2000      	0x20000000689f
    7c36:	0001                	nop
    7c38:	0100                	addi	s0,sp,128
    7c3a:	5900                	lw	s0,48(a0)
    7c3c:	0128                	addi	a0,sp,136
    7c3e:	0000                	unimp
    7c40:	0148                	addi	a0,sp,132
    7c42:	0000                	unimp
    7c44:	0001                	nop
    7c46:	4c59                	li	s8,22
    7c48:	0001                	nop
    7c4a:	7000                	flw	fs0,32(s0)
    7c4c:	0001                	nop
    7c4e:	0100                	addi	s0,sp,128
    7c50:	5900                	lw	s0,48(a0)
    7c52:	0170                	addi	a2,sp,140
    7c54:	0000                	unimp
    7c56:	017c                	addi	a5,sp,140
    7c58:	0000                	unimp
    7c5a:	007b0007          	0x7b0007
    7c5e:	243c                	fld	fa5,72(s0)
    7c60:	253c                	fld	fa5,72(a0)
    7c62:	7c9f 0001 8000      	0x800000017c9f
    7c68:	0001                	nop
    7c6a:	0100                	addi	s0,sp,128
    7c6c:	5900                	lw	s0,48(a0)
    7c6e:	0180                	addi	s0,sp,192
    7c70:	0000                	unimp
    7c72:	018c                	addi	a1,sp,192
    7c74:	0000                	unimp
    7c76:	007b0007          	0x7b0007
    7c7a:	243c                	fld	fa5,72(s0)
    7c7c:	253c                	fld	fa5,72(a0)
    7c7e:	8c9f 0001 3000      	0x300000018c9f
    7c84:	01000003          	lb	zero,16(zero) # 10 <_start>
    7c88:	5900                	lw	s0,48(a0)
    7c8a:	0560                	addi	s0,sp,652
    7c8c:	0000                	unimp
    7c8e:	0588                	addi	a0,sp,704
    7c90:	0000                	unimp
    7c92:	0001                	nop
    7c94:	9459                	srai	s0,s0,0x36
    7c96:	0005                	c.nop	1
    7c98:	9c00                	0x9c00
    7c9a:	0005                	c.nop	1
    7c9c:	0100                	addi	s0,sp,128
    7c9e:	5900                	lw	s0,48(a0)
    7ca0:	0658                	addi	a4,sp,772
    7ca2:	0000                	unimp
    7ca4:	066c                	addi	a1,sp,780
    7ca6:	0000                	unimp
    7ca8:	0001                	nop
    7caa:	0059                	c.nop	22
    7cac:	0000                	unimp
    7cae:	0000                	unimp
    7cb0:	0000                	unimp
    7cb2:	b000                	fsd	fs0,32(s0)
    7cb4:	0000                	unimp
    7cb6:	b400                	fsd	fs0,40(s0)
    7cb8:	0000                	unimp
    7cba:	0200                	addi	s0,sp,256
    7cbc:	3000                	fld	fs0,32(s0)
    7cbe:	b49f 0000 f000      	0xf0000000b49f
    7cc4:	0000                	unimp
    7cc6:	0100                	addi	s0,sp,128
    7cc8:	5e00                	lw	s0,56(a2)
    7cca:	022c                	addi	a1,sp,264
    7ccc:	0000                	unimp
    7cce:	0284                	addi	s1,sp,320
    7cd0:	0000                	unimp
    7cd2:	0001                	nop
    7cd4:	605e                	flw	ft0,212(sp)
    7cd6:	0005                	c.nop	1
    7cd8:	7000                	flw	fs0,32(s0)
    7cda:	0005                	c.nop	1
    7cdc:	0100                	addi	s0,sp,128
    7cde:	5e00                	lw	s0,56(a2)
    7ce0:	0594                	addi	a3,sp,704
    7ce2:	0000                	unimp
    7ce4:	059c                	addi	a5,sp,704
    7ce6:	0000                	unimp
    7ce8:	0001                	nop
    7cea:	005e                	c.slli	zero,0x17
    7cec:	0000                	unimp
    7cee:	0000                	unimp
    7cf0:	0000                	unimp
    7cf2:	8800                	0x8800
    7cf4:	0000                	unimp
    7cf6:	f000                	fsw	fs0,32(s0)
    7cf8:	0000                	unimp
    7cfa:	0600                	addi	s0,sp,768
    7cfc:	8500                	0x8500
    7cfe:	0800                	addi	s0,sp,16
    7d00:	1aff                	0x1aff
    7d02:	8c9f 0001 3000      	0x300000018c9f
    7d08:	0002                	c.slli64	zero
    7d0a:	0600                	addi	s0,sp,768
    7d0c:	8500                	0x8500
    7d0e:	0800                	addi	s0,sp,16
    7d10:	1aff                	0x1aff
    7d12:	609f 0005 8800      	0x88000005609f
    7d18:	0005                	c.nop	1
    7d1a:	0600                	addi	s0,sp,768
    7d1c:	8500                	0x8500
    7d1e:	0800                	addi	s0,sp,16
    7d20:	1aff                	0x1aff
    7d22:	949f 0005 9c00      	0x9c000005949f
    7d28:	0005                	c.nop	1
    7d2a:	0600                	addi	s0,sp,768
    7d2c:	8500                	0x8500
    7d2e:	0800                	addi	s0,sp,16
    7d30:	1aff                	0x1aff
    7d32:	589f 0006 6c00      	0x6c000006589f
    7d38:	0006                	c.slli	zero,0x1
    7d3a:	0600                	addi	s0,sp,768
    7d3c:	8500                	0x8500
    7d3e:	0800                	addi	s0,sp,16
    7d40:	1aff                	0x1aff
    7d42:	009f 0000 0000      	0x9f
    7d48:	0000                	unimp
    7d4a:	8400                	0x8400
    7d4c:	0000                	unimp
    7d4e:	ac00                	fsd	fs0,24(s0)
    7d50:	0000                	unimp
    7d52:	0700                	addi	s0,sp,896
    7d54:	7a00                	flw	fs0,48(a2)
    7d56:	0a00                	addi	s0,sp,272
    7d58:	ffff                	0xffff
    7d5a:	9f1a                	add	t5,t5,t1
    7d5c:	00ac                	addi	a1,sp,72
    7d5e:	0000                	unimp
    7d60:	00b0                	addi	a2,sp,72
    7d62:	0000                	unimp
    7d64:	0008                	0x8
    7d66:	ff7a                	fsw	ft10,188(sp)
    7d68:	ffff0a07          	vloxseg8ei128.v	v20,(t5),v31
    7d6c:	9f1a                	add	t5,t5,t1
    7d6e:	00b0                	addi	a2,sp,72
    7d70:	0000                	unimp
    7d72:	00f0                	addi	a2,sp,76
    7d74:	0000                	unimp
    7d76:	0001                	nop
    7d78:	8c5a                	mv	s8,s6
    7d7a:	0001                	nop
    7d7c:	9c00                	0x9c00
    7d7e:	0001                	nop
    7d80:	0700                	addi	s0,sp,896
    7d82:	7a00                	flw	fs0,48(a2)
    7d84:	0a00                	addi	s0,sp,272
    7d86:	ffff                	0xffff
    7d88:	9f1a                	add	t5,t5,t1
    7d8a:	01d4                	addi	a3,sp,196
    7d8c:	0000                	unimp
    7d8e:	01d8                	addi	a4,sp,196
    7d90:	0000                	unimp
    7d92:	007a0007          	0x7a0007
    7d96:	ff0a                	fsw	ft2,188(sp)
    7d98:	1aff                	0x1aff
    7d9a:	f49f 0001 0400      	0x4000001f49f
    7da0:	0002                	c.slli64	zero
    7da2:	0700                	addi	s0,sp,896
    7da4:	7a00                	flw	fs0,48(a2)
    7da6:	0a00                	addi	s0,sp,272
    7da8:	ffff                	0xffff
    7daa:	9f1a                	add	t5,t5,t1
    7dac:	020c                	addi	a1,sp,256
    7dae:	0000                	unimp
    7db0:	0214                	addi	a3,sp,256
    7db2:	0000                	unimp
    7db4:	007a0007          	0x7a0007
    7db8:	ff0a                	fsw	ft2,188(sp)
    7dba:	1aff                	0x1aff
    7dbc:	1c9f 0002 2400      	0x240000021c9f
    7dc2:	0002                	c.slli64	zero
    7dc4:	0700                	addi	s0,sp,896
    7dc6:	7a00                	flw	fs0,48(a2)
    7dc8:	0a00                	addi	s0,sp,272
    7dca:	ffff                	0xffff
    7dcc:	9f1a                	add	t5,t5,t1
    7dce:	022c                	addi	a1,sp,264
    7dd0:	0000                	unimp
    7dd2:	0248                	addi	a0,sp,260
    7dd4:	0000                	unimp
    7dd6:	0001                	nop
    7dd8:	605a                	flw	ft0,148(sp)
    7dda:	0005                	c.nop	1
    7ddc:	8800                	0x8800
    7dde:	0005                	c.nop	1
    7de0:	0100                	addi	s0,sp,128
    7de2:	5a00                	lw	s0,48(a2)
    7de4:	0594                	addi	a3,sp,704
    7de6:	0000                	unimp
    7de8:	059c                	addi	a5,sp,704
    7dea:	0000                	unimp
    7dec:	0001                	nop
    7dee:	585a                	lw	a6,180(sp)
    7df0:	0006                	c.slli	zero,0x1
    7df2:	6c00                	flw	fs0,24(s0)
    7df4:	0006                	c.slli	zero,0x1
    7df6:	0100                	addi	s0,sp,128
    7df8:	5a00                	lw	s0,48(a2)
	...
    7e02:	0074                	addi	a3,sp,12
    7e04:	0000                	unimp
    7e06:	00b0                	addi	a2,sp,72
    7e08:	0000                	unimp
    7e0a:	0001                	nop
    7e0c:	0000b067          	0xb067
    7e10:	f000                	fsw	fs0,32(s0)
    7e12:	0000                	unimp
    7e14:	0100                	addi	s0,sp,128
    7e16:	5f00                	lw	s0,56(a4)
    7e18:	018c                	addi	a1,sp,192
    7e1a:	0000                	unimp
    7e1c:	01c8                	addi	a0,sp,196
    7e1e:	0000                	unimp
    7e20:	0001                	nop
    7e22:	0001c867          	0x1c867
    7e26:	d400                	sw	s0,40(s0)
    7e28:	0001                	nop
    7e2a:	0100                	addi	s0,sp,128
    7e2c:	5f00                	lw	s0,56(a4)
    7e2e:	01d4                	addi	a3,sp,196
    7e30:	0000                	unimp
    7e32:	01ec                	addi	a1,sp,204
    7e34:	0000                	unimp
    7e36:	0001                	nop
    7e38:	0001ec67          	0x1ec67
    7e3c:	f400                	fsw	fs0,40(s0)
    7e3e:	0001                	nop
    7e40:	0200                	addi	s0,sp,256
    7e42:	3000                	fld	fs0,32(s0)
    7e44:	f49f 0001 2c00      	0x2c000001f49f
    7e4a:	0002                	c.slli64	zero
    7e4c:	0100                	addi	s0,sp,128
    7e4e:	6700                	flw	fs0,8(a4)
    7e50:	022c                	addi	a1,sp,264
    7e52:	0000                	unimp
    7e54:	02d4                	addi	a3,sp,324
    7e56:	0000                	unimp
    7e58:	0001                	nop
    7e5a:	605f 0005 6c00      	0x6c000005605f
    7e60:	0005                	c.nop	1
    7e62:	0100                	addi	s0,sp,128
    7e64:	5f00                	lw	s0,56(a4)
    7e66:	0594                	addi	a3,sp,704
    7e68:	0000                	unimp
    7e6a:	059c                	addi	a5,sp,704
    7e6c:	0000                	unimp
    7e6e:	0001                	nop
    7e70:	005f 0000 0000      	0x5f
    7e76:	0000                	unimp
    7e78:	8400                	0x8400
    7e7a:	0000                	unimp
    7e7c:	9400                	0x9400
    7e7e:	0000                	unimp
    7e80:	0100                	addi	s0,sp,128
    7e82:	5800                	lw	s0,48(s0)
    7e84:	0094                	addi	a3,sp,64
    7e86:	0000                	unimp
    7e88:	009c                	addi	a5,sp,64
    7e8a:	0000                	unimp
    7e8c:	00780007          	0x780007
    7e90:	4040                	lw	s0,4(s0)
    7e92:	2124                	fld	fs1,64(a0)
    7e94:	a89f 0000 f000      	0xf0000000a89f
    7e9a:	0000                	unimp
    7e9c:	0100                	addi	s0,sp,128
    7e9e:	5800                	lw	s0,48(s0)
    7ea0:	018c                	addi	a1,sp,192
    7ea2:	0000                	unimp
    7ea4:	01bc                	addi	a5,sp,200
    7ea6:	0000                	unimp
    7ea8:	0001                	nop
    7eaa:	c458                	sw	a4,12(s0)
    7eac:	0001                	nop
    7eae:	e800                	fsw	fs0,16(s0)
    7eb0:	0001                	nop
    7eb2:	0100                	addi	s0,sp,128
    7eb4:	5800                	lw	s0,48(s0)
    7eb6:	01ec                	addi	a1,sp,204
    7eb8:	0000                	unimp
    7eba:	0210                	addi	a2,sp,256
    7ebc:	0000                	unimp
    7ebe:	0001                	nop
    7ec0:	1c58                	addi	a4,sp,564
    7ec2:	0002                	c.slli64	zero
    7ec4:	2000                	fld	fs0,0(s0)
    7ec6:	0002                	c.slli64	zero
    7ec8:	0100                	addi	s0,sp,128
    7eca:	5800                	lw	s0,48(s0)
    7ecc:	022c                	addi	a1,sp,264
    7ece:	0000                	unimp
    7ed0:	02b0                	addi	a2,sp,328
    7ed2:	0000                	unimp
    7ed4:	0001                	nop
    7ed6:	6058                	flw	fa4,4(s0)
    7ed8:	0005                	c.nop	1
    7eda:	6800                	flw	fs0,16(s0)
    7edc:	0005                	c.nop	1
    7ede:	0100                	addi	s0,sp,128
    7ee0:	5800                	lw	s0,48(s0)
    7ee2:	0594                	addi	a3,sp,704
    7ee4:	0000                	unimp
    7ee6:	059c                	addi	a5,sp,704
    7ee8:	0000                	unimp
    7eea:	0001                	nop
    7eec:	0058                	addi	a4,sp,4
    7eee:	0000                	unimp
    7ef0:	0000                	unimp
    7ef2:	0000                	unimp
    7ef4:	2c00                	fld	fs0,24(s0)
    7ef6:	0002                	c.slli64	zero
    7ef8:	ac00                	fsd	fs0,24(s0)
    7efa:	0004                	0x4
    7efc:	0200                	addi	s0,sp,256
    7efe:	3000                	fld	fs0,32(s0)
    7f00:	709f 0005 8800      	0x88000005709f
    7f06:	0005                	c.nop	1
    7f08:	0100                	addi	s0,sp,128
    7f0a:	5e00                	lw	s0,56(a2)
    7f0c:	059c                	addi	a5,sp,704
    7f0e:	0000                	unimp
    7f10:	05a4                	addi	s1,sp,712
    7f12:	0000                	unimp
    7f14:	0002                	c.slli64	zero
    7f16:	9f30                	0x9f30
	...
    7f20:	00cc                	addi	a1,sp,68
    7f22:	0000                	unimp
    7f24:	00f0                	addi	a2,sp,76
    7f26:	0000                	unimp
    7f28:	0001                	nop
    7f2a:	2c60                	fld	fs0,216(s0)
    7f2c:	0002                	c.slli64	zero
    7f2e:	2800                	fld	fs0,16(s0)
    7f30:	0005                	c.nop	1
    7f32:	0100                	addi	s0,sp,128
    7f34:	6000                	flw	fs0,0(s0)
    7f36:	0560                	addi	s0,sp,652
    7f38:	0000                	unimp
    7f3a:	0564                	addi	s1,sp,652
    7f3c:	0000                	unimp
    7f3e:	0001                	nop
    7f40:	6460                	flw	fs0,76(s0)
    7f42:	0005                	c.nop	1
    7f44:	7000                	flw	fs0,32(s0)
    7f46:	0005                	c.nop	1
    7f48:	0600                	addi	s0,sp,768
    7f4a:	8400                	0x8400
    7f4c:	0800                	addi	s0,sp,16
    7f4e:	1aff                	0x1aff
    7f50:	709f 0005 9800      	0x98000005709f
    7f56:	0005                	c.nop	1
    7f58:	0100                	addi	s0,sp,128
    7f5a:	6000                	flw	fs0,0(s0)
    7f5c:	0598                	addi	a4,sp,704
    7f5e:	0000                	unimp
    7f60:	059c                	addi	a5,sp,704
    7f62:	0000                	unimp
    7f64:	0006                	c.slli	zero,0x1
    7f66:	0085                	addi	ra,ra,1
    7f68:	ff08                	fsw	fa0,56(a4)
    7f6a:	9f1a                	add	t5,t5,t1
    7f6c:	059c                	addi	a5,sp,704
    7f6e:	0000                	unimp
    7f70:	0668                	addi	a0,sp,780
    7f72:	0000                	unimp
    7f74:	0001                	nop
    7f76:	6c60                	flw	fs0,92(s0)
    7f78:	0006                	c.slli	zero,0x1
    7f7a:	8c00                	0x8c00
    7f7c:	0006                	c.slli	zero,0x1
    7f7e:	0100                	addi	s0,sp,128
    7f80:	6000                	flw	fs0,0(s0)
	...
    7f8a:	00d0                	addi	a2,sp,68
    7f8c:	0000                	unimp
    7f8e:	00f0                	addi	a2,sp,76
    7f90:	0000                	unimp
    7f92:	0001                	nop
    7f94:	2c61                	jal	822c <__heap_end+0x99c>
    7f96:	0002                	c.slli64	zero
    7f98:	b000                	fsd	fs0,32(s0)
    7f9a:	0004                	0x4
    7f9c:	0100                	addi	s0,sp,128
    7f9e:	6100                	flw	fs0,0(a0)
    7fa0:	04b0                	addi	a2,sp,584
    7fa2:	0000                	unimp
    7fa4:	0518                	addi	a4,sp,640
    7fa6:	0000                	unimp
    7fa8:	0001                	nop
    7faa:	605d                	c.lui	zero,0x17
    7fac:	0005                	c.nop	1
    7fae:	8800                	0x8800
    7fb0:	0005                	c.nop	1
    7fb2:	0100                	addi	s0,sp,128
    7fb4:	6100                	flw	fs0,0(a0)
    7fb6:	0594                	addi	a3,sp,704
    7fb8:	0000                	unimp
    7fba:	05a0                	addi	s0,sp,712
    7fbc:	0000                	unimp
    7fbe:	0001                	nop
    7fc0:	a061                	j	8048 <__heap_end+0x7b8>
    7fc2:	0005                	c.nop	1
    7fc4:	a400                	fsd	fs0,8(s0)
    7fc6:	0005                	c.nop	1
    7fc8:	0300                	addi	s0,sp,384
    7fca:	8300                	0x8300
    7fcc:	9f01                	0x9f01
    7fce:	05a4                	addi	s1,sp,712
    7fd0:	0000                	unimp
    7fd2:	05ac                	addi	a1,sp,712
    7fd4:	0000                	unimp
    7fd6:	0001                	nop
    7fd8:	ac5d                	j	828e <__heap_end+0x9fe>
    7fda:	0005                	c.nop	1
    7fdc:	0c00                	addi	s0,sp,528
    7fde:	0006                	c.slli	zero,0x1
    7fe0:	0100                	addi	s0,sp,128
    7fe2:	5c00                	lw	s0,56(s0)
    7fe4:	060c                	addi	a1,sp,768
    7fe6:	0000                	unimp
    7fe8:	061c                	addi	a5,sp,768
    7fea:	0000                	unimp
    7fec:	0002                	c.slli64	zero
    7fee:	9f30                	0x9f30
    7ff0:	0624                	addi	s1,sp,776
    7ff2:	0000                	unimp
    7ff4:	0658                	addi	a4,sp,772
    7ff6:	0000                	unimp
    7ff8:	0001                	nop
    7ffa:	585c                	lw	a5,52(s0)
    7ffc:	0006                	c.slli	zero,0x1
    7ffe:	6c00                	flw	fs0,24(s0)
    8000:	0006                	c.slli	zero,0x1
    8002:	0100                	addi	s0,sp,128
    8004:	6100                	flw	fs0,0(a0)
    8006:	067c                	addi	a5,sp,780
    8008:	0000                	unimp
    800a:	068c                	addi	a1,sp,832
    800c:	0000                	unimp
    800e:	0001                	nop
    8010:	005c                	addi	a5,sp,4
    8012:	0000                	unimp
    8014:	0000                	unimp
    8016:	0000                	unimp
    8018:	8800                	0x8800
    801a:	0004                	0x4
    801c:	9c00                	0x9c00
    801e:	0004                	0x4
    8020:	0100                	addi	s0,sp,128
    8022:	5f00                	lw	s0,56(a4)
    8024:	04a8                	addi	a0,sp,584
    8026:	0000                	unimp
    8028:	04d0                	addi	a2,sp,580
    802a:	0000                	unimp
    802c:	0001                	nop
    802e:	d05f 0004 d400      	0xd4000004d05f
    8034:	0004                	0x4
    8036:	0300                	addi	s0,sp,384
    8038:	7e00                	flw	fs0,56(a2)
    803a:	9f7c                	0x9f7c
    803c:	04d4                	addi	a3,sp,580
    803e:	0000                	unimp
    8040:	04d8                	addi	a4,sp,580
    8042:	0000                	unimp
    8044:	0001                	nop
    8046:	d85e                	sw	s7,48(sp)
    8048:	0004                	0x4
    804a:	f400                	fsw	fs0,40(s0)
    804c:	0004                	0x4
    804e:	0100                	addi	s0,sp,128
    8050:	5f00                	lw	s0,56(a4)
    8052:	04f4                	addi	a3,sp,588
    8054:	0000                	unimp
    8056:	0500                	addi	s0,sp,640
    8058:	0000                	unimp
    805a:	000a                	c.slli	zero,0x2
    805c:	007f                	0x7f
    805e:	00782533          	slt	a0,a6,t2
    8062:	244d                	jal	8304 <__heap_end+0xa74>
    8064:	9f21                	0x9f21
    8066:	0500                	addi	s0,sp,640
    8068:	0000                	unimp
    806a:	0504                	addi	s1,sp,640
    806c:	0000                	unimp
    806e:	0008                	0x8
    8070:	0078                	addi	a4,sp,12
    8072:	244d                	jal	8314 <__heap_end+0xa84>
    8074:	007e                	c.slli	zero,0x1f
    8076:	9f21                	0x9f21
    8078:	0504                	addi	s1,sp,640
    807a:	0000                	unimp
    807c:	0508                	addi	a0,sp,640
    807e:	0000                	unimp
    8080:	0006                	c.slli	zero,0x1
    8082:	007e                	c.slli	zero,0x1f
    8084:	007f                	0x7f
    8086:	9f21                	0x9f21
    8088:	0508                	addi	a0,sp,640
    808a:	0000                	unimp
    808c:	050c                	addi	a1,sp,640
    808e:	0000                	unimp
    8090:	0008                	0x8
    8092:	0078                	addi	a4,sp,12
    8094:	244d                	jal	8336 <__heap_end+0xaa6>
    8096:	007e                	c.slli	zero,0x1f
    8098:	9f21                	0x9f21
    809a:	050c                	addi	a1,sp,640
    809c:	0000                	unimp
    809e:	0560                	addi	s0,sp,652
    80a0:	0000                	unimp
    80a2:	0001                	nop
    80a4:	705f 0005 9000      	0x90000005705f
    80aa:	0005                	c.nop	1
    80ac:	0100                	addi	s0,sp,128
    80ae:	5f00                	lw	s0,56(a4)
    80b0:	059c                	addi	a5,sp,704
    80b2:	0000                	unimp
    80b4:	05cc                	addi	a1,sp,708
    80b6:	0000                	unimp
    80b8:	0001                	nop
    80ba:	d85f 0005 f800      	0xf8000005d85f
    80c0:	0005                	c.nop	1
    80c2:	0100                	addi	s0,sp,128
    80c4:	5f00                	lw	s0,56(a4)
    80c6:	05f8                	addi	a4,sp,716
    80c8:	0000                	unimp
    80ca:	05fc                	addi	a5,sp,716
    80cc:	0000                	unimp
    80ce:	7c7e0003          	lb	zero,1991(t3)
    80d2:	fc9f 0005 0000      	0x5fc9f
    80d8:	0006                	c.slli	zero,0x1
    80da:	0100                	addi	s0,sp,128
    80dc:	5e00                	lw	s0,56(a2)
    80de:	0600                	addi	s0,sp,768
    80e0:	0000                	unimp
    80e2:	0614                	addi	a3,sp,768
    80e4:	0000                	unimp
    80e6:	0001                	nop
    80e8:	185f 0006 1c00      	0x1c000006185f
    80ee:	0006                	c.slli	zero,0x1
    80f0:	0100                	addi	s0,sp,128
    80f2:	5f00                	lw	s0,56(a4)
    80f4:	0624                	addi	s1,sp,776
    80f6:	0000                	unimp
    80f8:	0648                	addi	a0,sp,772
    80fa:	0000                	unimp
    80fc:	0001                	nop
    80fe:	505f 0006 5800      	0x58000006505f
    8104:	0006                	c.slli	zero,0x1
    8106:	0100                	addi	s0,sp,128
    8108:	5f00                	lw	s0,56(a4)
    810a:	067c                	addi	a5,sp,780
    810c:	0000                	unimp
    810e:	0684                	addi	s1,sp,832
    8110:	0000                	unimp
    8112:	0001                	nop
    8114:	005f 0000 0000      	0x5f
    811a:	0000                	unimp
    811c:	8800                	0x8800
    811e:	0004                	0x4
    8120:	f400                	fsw	fs0,40(s0)
    8122:	0004                	0x4
    8124:	0100                	addi	s0,sp,128
    8126:	5800                	lw	s0,48(s0)
    8128:	04f4                	addi	a3,sp,588
    812a:	0000                	unimp
    812c:	050c                	addi	a1,sp,640
    812e:	0000                	unimp
    8130:	0005                	c.nop	1
    8132:	0078                	addi	a4,sp,12
    8134:	0c9f2533          	0xc9f2533
    8138:	0005                	c.nop	1
    813a:	1400                	addi	s0,sp,544
    813c:	0005                	c.nop	1
    813e:	0100                	addi	s0,sp,128
    8140:	5800                	lw	s0,48(s0)
    8142:	0570                	addi	a2,sp,652
    8144:	0000                	unimp
    8146:	058c                	addi	a1,sp,704
    8148:	0000                	unimp
    814a:	0001                	nop
    814c:	9c58                	0x9c58
    814e:	0005                	c.nop	1
    8150:	1c00                	addi	s0,sp,560
    8152:	0006                	c.slli	zero,0x1
    8154:	0100                	addi	s0,sp,128
    8156:	5800                	lw	s0,48(s0)
    8158:	0624                	addi	s1,sp,776
    815a:	0000                	unimp
    815c:	0650                	addi	a2,sp,772
    815e:	0000                	unimp
    8160:	0001                	nop
    8162:	5058                	lw	a4,36(s0)
    8164:	0006                	c.slli	zero,0x1
    8166:	5800                	lw	s0,48(s0)
    8168:	0006                	c.slli	zero,0x1
    816a:	0200                	addi	s0,sp,256
    816c:	3000                	fld	fs0,32(s0)
    816e:	7c9f 0006 8000      	0x800000067c9f
    8174:	0006                	c.slli	zero,0x1
    8176:	0100                	addi	s0,sp,128
    8178:	5800                	lw	s0,48(s0)
	...
    8182:	0104                	addi	s1,sp,128
    8184:	0000                	unimp
    8186:	0108                	addi	a0,sp,128
    8188:	0000                	unimp
    818a:	0001                	nop
    818c:	085a                	slli	a6,a6,0x16
    818e:	0001                	nop
    8190:	3800                	fld	fs0,48(s0)
    8192:	0001                	nop
    8194:	0100                	addi	s0,sp,128
    8196:	5e00                	lw	s0,56(a2)
    8198:	013c                	addi	a5,sp,136
    819a:	0000                	unimp
    819c:	0144                	addi	s1,sp,132
    819e:	0000                	unimp
    81a0:	0001                	nop
    81a2:	445a                	lw	s0,148(sp)
    81a4:	0001                	nop
    81a6:	5400                	lw	s0,40(s0)
    81a8:	0001                	nop
    81aa:	0100                	addi	s0,sp,128
    81ac:	5e00                	lw	s0,56(a2)
	...
    81b6:	01a0                	addi	s0,sp,200
    81b8:	0000                	unimp
    81ba:	01a4                	addi	s1,sp,200
    81bc:	0000                	unimp
    81be:	0001                	nop
    81c0:	a45a                	fsd	fs6,8(sp)
    81c2:	0001                	nop
    81c4:	d400                	sw	s0,40(s0)
    81c6:	0001                	nop
    81c8:	0100                	addi	s0,sp,128
    81ca:	5d00                	lw	s0,56(a0)
    81cc:	01dc                	addi	a5,sp,196
    81ce:	0000                	unimp
    81d0:	01e4                	addi	s1,sp,204
    81d2:	0000                	unimp
    81d4:	0001                	nop
    81d6:	e45a                	fsw	fs6,8(sp)
    81d8:	0001                	nop
    81da:	f400                	fsw	fs0,40(s0)
    81dc:	0001                	nop
    81de:	0100                	addi	s0,sp,128
    81e0:	5d00                	lw	s0,56(a0)
	...
    81ea:	02b4                	addi	a3,sp,328
    81ec:	0000                	unimp
    81ee:	0338                	addi	a4,sp,392
    81f0:	0000                	unimp
    81f2:	000d                	c.nop	3
    81f4:	936c                	0x936c
    81f6:	8504                	0x8504
    81f8:	8e00                	0x8e00
    81fa:	2200                	fld	fs0,0(a2)
    81fc:	939f 9304 3808      	0x38089304939f
    8202:	ac000003          	lb	zero,-1344(zero) # fffffac0 <RAM_SIZE+0xfffefac0>
    8206:	0004                	0x4
    8208:	0500                	addi	s0,sp,640
    820a:	6c00                	flw	fs0,24(s0)
    820c:	0c930493          	addi	s1,t1,201
    8210:	059c                	addi	a5,sp,704
    8212:	0000                	unimp
    8214:	05a4                	addi	s1,sp,712
    8216:	0000                	unimp
    8218:	0005                	c.nop	1
    821a:	936c                	0x936c
    821c:	9304                	0x9304
    821e:	000c                	0xc
    8220:	0000                	unimp
    8222:	0000                	unimp
    8224:	0000                	unimp
    8226:	3800                	fld	fs0,48(s0)
    8228:	20000003          	lb	zero,512(zero) # 200 <calc_func+0xe0>
    822c:	0004                	0x4
    822e:	0100                	addi	s0,sp,128
    8230:	6d00                	flw	fs0,24(a0)
	...
    823a:	0334                	addi	a3,sp,392
    823c:	0000                	unimp
    823e:	04ac                	addi	a1,sp,584
    8240:	0000                	unimp
    8242:	0001                	nop
    8244:	00059c6f          	jal	s8,61244 <RAM_SIZE+0x51244>
    8248:	a400                	fsd	fs0,8(s0)
    824a:	0005                	c.nop	1
    824c:	0100                	addi	s0,sp,128
    824e:	6f00                	flw	fs0,24(a4)
	...
    8258:	03ac                	addi	a1,sp,456
    825a:	0000                	unimp
    825c:	0430                	addi	a2,sp,520
    825e:	0000                	unimp
    8260:	0001                	nop
    8262:	0056                	c.slli	zero,0x15
    8264:	0000                	unimp
    8266:	0000                	unimp
    8268:	0000                	unimp
    826a:	a800                	fsd	fs0,16(s0)
    826c:	ac000003          	lb	zero,-1344(zero) # fffffac0 <RAM_SIZE+0xfffefac0>
    8270:	0004                	0x4
    8272:	0100                	addi	s0,sp,128
    8274:	5500                	lw	s0,40(a0)
    8276:	059c                	addi	a5,sp,704
    8278:	0000                	unimp
    827a:	05a4                	addi	s1,sp,712
    827c:	0000                	unimp
    827e:	0001                	nop
    8280:	0055                	c.nop	21
    8282:	0000                	unimp
    8284:	0000                	unimp
    8286:	0000                	unimp
    8288:	5400                	lw	s0,40(s0)
    828a:	0002                	c.slli64	zero
    828c:	a000                	fsd	fs0,0(s0)
    828e:	0002                	c.slli64	zero
    8290:	0100                	addi	s0,sp,128
    8292:	5700                	lw	s0,40(a4)
	...
    829c:	0264                	addi	s1,sp,268
    829e:	0000                	unimp
    82a0:	0288                	addi	a0,sp,320
    82a2:	0000                	unimp
    82a4:	0001                	nop
    82a6:	9056                	c.add	zero,s5
    82a8:	0002                	c.slli64	zero
    82aa:	0000                	unimp
    82ac:	01000003          	lb	zero,16(zero) # 10 <_start>
    82b0:	5e00                	lw	s0,56(a2)
	...
    82ba:	0274                	addi	a3,sp,268
    82bc:	0000                	unimp
    82be:	027c                	addi	a5,sp,268
    82c0:	0000                	unimp
    82c2:	0001                	nop
    82c4:	7c5a                	flw	fs8,180(sp)
    82c6:	0002                	c.slli64	zero
    82c8:	9c00                	0x9c00
    82ca:	0002                	c.slli64	zero
    82cc:	0100                	addi	s0,sp,128
    82ce:	6c00                	flw	fs0,24(s0)
	...
    82d8:	0290                	addi	a2,sp,320
    82da:	0000                	unimp
    82dc:	0298                	addi	a4,sp,320
    82de:	0000                	unimp
    82e0:	0001                	nop
    82e2:	985a                	add	a6,a6,s6
    82e4:	0002                	c.slli64	zero
    82e6:	1800                	addi	s0,sp,48
    82e8:	0004                	0x4
    82ea:	0100                	addi	s0,sp,128
    82ec:	6e00                	flw	fs0,24(a2)
	...
    82f6:	022c                	addi	a1,sp,264
    82f8:	0000                	unimp
    82fa:	0240                	addi	s0,sp,260
    82fc:	0000                	unimp
    82fe:	0001                	nop
    8300:	0062                	c.slli	zero,0x18
    8302:	0000                	unimp
    8304:	0000                	unimp
    8306:	0000                	unimp
    8308:	3800                	fld	fs0,48(s0)
    830a:	0002                	c.slli64	zero
    830c:	d400                	sw	s0,40(s0)
    830e:	0002                	c.slli64	zero
    8310:	0100                	addi	s0,sp,128
    8312:	5f00                	lw	s0,56(a4)
	...
    831c:	0238                	addi	a4,sp,264
    831e:	0000                	unimp
    8320:	0318                	addi	a4,sp,384
    8322:	0000                	unimp
    8324:	0001                	nop
    8326:	0000006f          	j	8326 <__heap_end+0xa96>
    832a:	0000                	unimp
    832c:	0000                	unimp
    832e:	4400                	lw	s0,8(s0)
    8330:	0002                	c.slli64	zero
    8332:	a000                	fsd	fs0,0(s0)
    8334:	01000003          	lb	zero,16(zero) # 10 <_start>
    8338:	5500                	lw	s0,40(a0)
	...
    8342:	02c4                	addi	s1,sp,324
    8344:	0000                	unimp
    8346:	02cc                	addi	a1,sp,324
    8348:	0000                	unimp
    834a:	0001                	nop
    834c:	cc5a                	sw	s6,24(sp)
    834e:	0002                	c.slli64	zero
    8350:	2400                	fld	fs0,8(s0)
    8352:	01000003          	lb	zero,16(zero) # 10 <_start>
    8356:	6d00                	flw	fs0,24(a0)
	...
    8360:	02d4                	addi	a3,sp,324
    8362:	0000                	unimp
    8364:	02dc                	addi	a5,sp,324
    8366:	0000                	unimp
    8368:	0001                	nop
    836a:	dc5a                	sw	s6,56(sp)
    836c:	0002                	c.slli64	zero
    836e:	f800                	fsw	fs0,48(s0)
    8370:	0002                	c.slli64	zero
    8372:	0100                	addi	s0,sp,128
    8374:	5f00                	lw	s0,56(a4)
    8376:	0300                	addi	s0,sp,384
    8378:	0000                	unimp
    837a:	031c                	addi	a5,sp,384
    837c:	0000                	unimp
    837e:	0001                	nop
    8380:	005d                	c.nop	23
    8382:	0000                	unimp
    8384:	0000                	unimp
    8386:	0000                	unimp
    8388:	e400                	fsw	fs0,8(s0)
    838a:	0002                	c.slli64	zero
    838c:	5800                	lw	s0,48(s0)
    838e:	01000003          	lb	zero,16(zero) # 10 <_start>
    8392:	5600                	lw	s0,40(a2)
	...
    839c:	0300                	addi	s0,sp,384
    839e:	0000                	unimp
    83a0:	030c                	addi	a1,sp,384
    83a2:	0000                	unimp
    83a4:	0001                	nop
    83a6:	0c5a                	slli	s8,s8,0x16
    83a8:	48000003          	lb	zero,1152(zero) # 480 <core_list_mergesort+0xa8>
    83ac:	01000003          	lb	zero,16(zero) # 10 <_start>
    83b0:	5e00                	lw	s0,56(a2)
	...
    83ba:	02b4                	addi	a3,sp,328
    83bc:	0000                	unimp
    83be:	0318                	addi	a4,sp,384
    83c0:	0000                	unimp
    83c2:	0001                	nop
    83c4:	0000006f          	j	83c4 <__heap_end+0xb34>
    83c8:	0000                	unimp
    83ca:	0000                	unimp
    83cc:	b400                	fsd	fs0,40(s0)
    83ce:	0002                	c.slli64	zero
    83d0:	f800                	fsw	fs0,48(s0)
    83d2:	01000003          	lb	zero,16(zero) # 10 <_start>
    83d6:	5700                	lw	s0,40(a4)
	...
    83e0:	0348                	addi	a0,sp,388
    83e2:	0000                	unimp
    83e4:	0350                	addi	a2,sp,388
    83e6:	0000                	unimp
    83e8:	0001                	nop
    83ea:	505a                	0x505a
    83ec:	9c000003          	lb	zero,-1600(zero) # fffff9c0 <RAM_SIZE+0xfffef9c0>
    83f0:	01000003          	lb	zero,16(zero) # 10 <_start>
    83f4:	5e00                	lw	s0,56(a2)
	...
    83fe:	0358                	addi	a4,sp,388
    8400:	0000                	unimp
    8402:	037c                	addi	a5,sp,396
    8404:	0000                	unimp
    8406:	0001                	nop
    8408:	8456                	mv	s0,s5
    840a:	cc000003          	lb	zero,-832(zero) # fffffcc0 <RAM_SIZE+0xfffefcc0>
    840e:	01000003          	lb	zero,16(zero) # 10 <_start>
    8412:	5f00                	lw	s0,56(a4)
	...
    841c:	0368                	addi	a0,sp,396
    841e:	0000                	unimp
    8420:	0370                	addi	a2,sp,396
    8422:	0000                	unimp
    8424:	0001                	nop
    8426:	705a                	flw	ft0,180(sp)
    8428:	90000003          	lb	zero,-1792(zero) # fffff900 <RAM_SIZE+0xfffef900>
    842c:	01000003          	lb	zero,16(zero) # 10 <_start>
    8430:	6400                	flw	fs0,8(s0)
	...
    843a:	0384                	addi	s1,sp,448
    843c:	0000                	unimp
    843e:	038c                	addi	a1,sp,448
    8440:	0000                	unimp
    8442:	0001                	nop
    8444:	8c5a                	mv	s8,s6
    8446:	b8000003          	lb	zero,-1152(zero) # fffffb80 <RAM_SIZE+0xfffefb80>
    844a:	01000003          	lb	zero,16(zero) # 10 <_start>
    844e:	5c00                	lw	s0,56(s0)
	...
    8458:	0338                	addi	a4,sp,392
    845a:	0000                	unimp
    845c:	04ac                	addi	a1,sp,584
    845e:	0000                	unimp
    8460:	0001                	nop
    8462:	9c66                	add	s8,s8,s9
    8464:	0005                	c.nop	1
    8466:	a400                	fsd	fs0,8(s0)
    8468:	0005                	c.nop	1
    846a:	0100                	addi	s0,sp,128
    846c:	6600                	flw	fs0,8(a2)
	...
    8476:	0338                	addi	a4,sp,392
    8478:	0000                	unimp
    847a:	03a0                	addi	s0,sp,456
    847c:	0000                	unimp
    847e:	0001                	nop
    8480:	0055                	c.nop	21
    8482:	0000                	unimp
    8484:	0000                	unimp
    8486:	0000                	unimp
    8488:	bc00                	fsd	fs0,56(s0)
    848a:	c4000003          	lb	zero,-960(zero) # fffffc40 <RAM_SIZE+0xfffefc40>
    848e:	01000003          	lb	zero,16(zero) # 10 <_start>
    8492:	5a00                	lw	s0,48(a2)
    8494:	03c4                	addi	s1,sp,452
    8496:	0000                	unimp
    8498:	04ac                	addi	a1,sp,584
    849a:	0000                	unimp
    849c:	0001                	nop
    849e:	9c62                	add	s8,s8,s8
    84a0:	0005                	c.nop	1
    84a2:	a400                	fsd	fs0,8(s0)
    84a4:	0005                	c.nop	1
    84a6:	0100                	addi	s0,sp,128
    84a8:	6200                	flw	fs0,0(a2)
	...
    84b2:	03cc                	addi	a1,sp,452
    84b4:	0000                	unimp
    84b6:	03d4                	addi	a3,sp,452
    84b8:	0000                	unimp
    84ba:	0001                	nop
    84bc:	d45a                	sw	s6,40(sp)
    84be:	f0000003          	lb	zero,-256(zero) # ffffff00 <RAM_SIZE+0xfffeff00>
    84c2:	01000003          	lb	zero,16(zero) # 10 <_start>
    84c6:	5f00                	lw	s0,56(a4)
    84c8:	03f8                	addi	a4,sp,460
    84ca:	0000                	unimp
    84cc:	0464                	addi	s1,sp,524
    84ce:	0000                	unimp
    84d0:	0001                	nop
    84d2:	005f 0000 0000      	0x5f
    84d8:	0000                	unimp
    84da:	dc00                	sw	s0,56(s0)
    84dc:	ac000003          	lb	zero,-1344(zero) # fffffac0 <RAM_SIZE+0xfffefac0>
    84e0:	0004                	0x4
    84e2:	0100                	addi	s0,sp,128
    84e4:	5900                	lw	s0,48(a0)
    84e6:	059c                	addi	a5,sp,704
    84e8:	0000                	unimp
    84ea:	05a4                	addi	s1,sp,712
    84ec:	0000                	unimp
    84ee:	0001                	nop
    84f0:	0059                	c.nop	22
    84f2:	0000                	unimp
    84f4:	0000                	unimp
    84f6:	0000                	unimp
    84f8:	f800                	fsw	fs0,48(s0)
    84fa:	ac000003          	lb	zero,-1344(zero) # fffffac0 <RAM_SIZE+0xfffefac0>
    84fe:	0004                	0x4
    8500:	0100                	addi	s0,sp,128
    8502:	5700                	lw	s0,40(a4)
    8504:	059c                	addi	a5,sp,704
    8506:	0000                	unimp
    8508:	05a4                	addi	s1,sp,712
    850a:	0000                	unimp
    850c:	0001                	nop
    850e:	00000057          	vadd.vv	v0,v0,v0,v0.t
    8512:	0000                	unimp
    8514:	0000                	unimp
    8516:	ac00                	fsd	fs0,24(s0)
    8518:	ac000003          	lb	zero,-1344(zero) # fffffac0 <RAM_SIZE+0xfffefac0>
    851c:	0004                	0x4
    851e:	0100                	addi	s0,sp,128
    8520:	6600                	flw	fs0,8(a2)
    8522:	059c                	addi	a5,sp,704
    8524:	0000                	unimp
    8526:	05a4                	addi	s1,sp,712
    8528:	0000                	unimp
    852a:	0001                	nop
    852c:	0066                	c.slli	zero,0x19
    852e:	0000                	unimp
    8530:	0000                	unimp
    8532:	0000                	unimp
    8534:	ac00                	fsd	fs0,24(s0)
    8536:	f8000003          	lb	zero,-128(zero) # ffffff80 <RAM_SIZE+0xfffeff80>
    853a:	01000003          	lb	zero,16(zero) # 10 <_start>
    853e:	5700                	lw	s0,40(a4)
	...
    8548:	0420                	addi	s0,sp,520
    854a:	0000                	unimp
    854c:	043c                	addi	a5,sp,520
    854e:	0000                	unimp
    8550:	0001                	nop
    8552:	006d                	c.nop	27
    8554:	0000                	unimp
    8556:	0000                	unimp
    8558:	0000                	unimp
    855a:	2400                	fld	fs0,8(s0)
    855c:	0004                	0x4
    855e:	2800                	fld	fs0,16(s0)
    8560:	0004                	0x4
    8562:	1100                	addi	s0,sp,160
    8564:	7e00                	flw	fs0,56(a2)
    8566:	4000                	lw	s0,0(s0)
    8568:	8f22244b          	fnmsub.q	fs0,ft4,fs2,fa7,rdn
    856c:	4000                	lw	s0,0(s0)
    856e:	2d22244b          	fnmsub.h	fs0,ft4,fs2,ft5,rdn
    8572:	ff08                	fsw	fa0,56(a4)
    8574:	9f1a                	add	t5,t5,t1
    8576:	0428                	addi	a0,sp,520
    8578:	0000                	unimp
    857a:	043c                	addi	a5,sp,520
    857c:	0000                	unimp
    857e:	001f 007e 4b40      	0x4b40007e001f
    8584:	2224                	fld	fs1,64(a2)
    8586:	4b40008f          	0x4b40008f
    858a:	2224                	fld	fs1,64(a2)
    858c:	782d                	lui	a6,0xfffeb
    858e:	4000                	lw	s0,0(s0)
    8590:	8d22244b          	fnmsub.h	fs0,ft4,fs2,fa7,rdn
    8594:	4000                	lw	s0,0(s0)
    8596:	2d22244b          	fnmsub.h	fs0,ft4,fs2,ft5,rdn
    859a:	0821                	addi	a6,a6,8
    859c:	1aff                	0x1aff
    859e:	009f 0000 0000      	0x9f
    85a4:	0000                	unimp
    85a6:	3000                	fld	fs0,32(s0)
    85a8:	0004                	0x4
    85aa:	5000                	lw	s0,32(s0)
    85ac:	0004                	0x4
    85ae:	0100                	addi	s0,sp,128
    85b0:	5600                	lw	s0,40(a2)
	...
    85ba:	0434                	addi	a3,sp,520
    85bc:	0000                	unimp
    85be:	0438                	addi	a4,sp,520
    85c0:	0000                	unimp
    85c2:	0011                	c.nop	4
    85c4:	007c                	addi	a5,sp,12
    85c6:	4b40                	lw	s0,20(a4)
    85c8:	2224                	fld	fs1,64(a2)
    85ca:	0075                	c.nop	29
    85cc:	4b40                	lw	s0,20(a4)
    85ce:	2224                	fld	fs1,64(a2)
    85d0:	082d                	addi	a6,a6,11
    85d2:	1aff                	0x1aff
    85d4:	389f 0004 4c00      	0x4c000004389f
    85da:	0004                	0x4
    85dc:	1f00                	addi	s0,sp,944
    85de:	7c00                	flw	fs0,56(s0)
    85e0:	4000                	lw	s0,0(s0)
    85e2:	7522244b          	fnmsub.h	fs0,ft4,fs2,fa4,rdn
    85e6:	4000                	lw	s0,0(s0)
    85e8:	2d22244b          	fnmsub.h	fs0,ft4,fs2,ft5,rdn
    85ec:	4b40007b          	0x4b40007b
    85f0:	2224                	fld	fs1,64(a2)
    85f2:	0076                	c.slli	zero,0x1d
    85f4:	4b40                	lw	s0,20(a4)
    85f6:	2224                	fld	fs1,64(a2)
    85f8:	212d                	jal	8a22 <__heap_end+0x1192>
    85fa:	ff08                	fsw	fa0,56(a4)
    85fc:	9f1a                	add	t5,t5,t1
	...
    8606:	046c                	addi	a1,sp,524
    8608:	0000                	unimp
    860a:	047c                	addi	a5,sp,524
    860c:	0000                	unimp
    860e:	000d                	c.nop	3
    8610:	008e                	slli	ra,ra,0x3
    8612:	2439                	jal	8820 <__heap_end+0xf90>
    8614:	008c                	addi	a1,sp,64
    8616:	3021                	jal	7e1e <__heap_end+0x58e>
    8618:	082e                	slli	a6,a6,0xb
    861a:	1aff                	0x1aff
    861c:	009f 0000 0000      	0x9f
    8622:	0000                	unimp
    8624:	3800                	fld	fs0,48(s0)
    8626:	0004                	0x4
    8628:	ac00                	fsd	fs0,24(s0)
    862a:	0004                	0x4
    862c:	0200                	addi	s0,sp,256
    862e:	3900                	fld	fs0,48(a0)
    8630:	9c9f 0005 a400      	0xa40000059c9f
    8636:	0005                	c.nop	1
    8638:	0200                	addi	s0,sp,256
    863a:	3900                	fld	fs0,48(a0)
    863c:	009f 0000 0000      	0x9f
    8642:	0000                	unimp
    8644:	3800                	fld	fs0,48(s0)
    8646:	0004                	0x4
    8648:	ac00                	fsd	fs0,24(s0)
    864a:	0004                	0x4
    864c:	0200                	addi	s0,sp,256
    864e:	4700                	lw	s0,8(a4)
    8650:	9c9f 0005 a400      	0xa40000059c9f
    8656:	0005                	c.nop	1
    8658:	0200                	addi	s0,sp,256
    865a:	4700                	lw	s0,8(a4)
    865c:	009f 0000 0000      	0x9f
    8662:	0000                	unimp
    8664:	3800                	fld	fs0,48(s0)
    8666:	0004                	0x4
    8668:	ac00                	fsd	fs0,24(s0)
    866a:	0004                	0x4
    866c:	0200                	addi	s0,sp,256
    866e:	3100                	fld	fs0,32(a0)
    8670:	9c9f 0005 a400      	0xa40000059c9f
    8676:	0005                	c.nop	1
    8678:	0200                	addi	s0,sp,256
    867a:	3100                	fld	fs0,32(a0)
    867c:	009f 0000 0000      	0x9f
    8682:	0000                	unimp
    8684:	3800                	fld	fs0,48(s0)
    8686:	0004                	0x4
    8688:	6c00                	flw	fs0,24(s0)
    868a:	0004                	0x4
    868c:	0200                	addi	s0,sp,256
    868e:	3100                	fld	fs0,32(a0)
    8690:	009f 0000 0000      	0x9f
    8696:	0000                	unimp
    8698:	3800                	fld	fs0,48(s0)
    869a:	0004                	0x4
    869c:	7400                	flw	fs0,40(s0)
    869e:	0004                	0x4
    86a0:	0800                	addi	s0,sp,16
    86a2:	8e00                	0x8e00
    86a4:	3900                	fld	fs0,48(a0)
    86a6:	8c24                	0x8c24
    86a8:	2100                	fld	fs0,0(a0)
    86aa:	749f 0004 7800      	0x78000004749f
    86b0:	0004                	0x4
    86b2:	0100                	addi	s0,sp,128
    86b4:	5f00                	lw	s0,56(a4)
    86b6:	0478                	addi	a4,sp,524
    86b8:	0000                	unimp
    86ba:	047c                	addi	a5,sp,524
    86bc:	0000                	unimp
    86be:	0008                	0x8
    86c0:	008e                	slli	ra,ra,0x3
    86c2:	2439                	jal	88d0 <__heap_end+0x1040>
    86c4:	008c                	addi	a1,sp,64
    86c6:	9f21                	0x9f21
	...
    86d0:	04cc                	addi	a1,sp,580
    86d2:	0000                	unimp
    86d4:	04d8                	addi	a4,sp,580
    86d6:	0000                	unimp
    86d8:	0001                	nop
    86da:	005e                	c.slli	zero,0x17
    86dc:	0000                	unimp
    86de:	0000                	unimp
    86e0:	0000                	unimp
    86e2:	f400                	fsw	fs0,40(s0)
    86e4:	0005                	c.nop	1
    86e6:	0000                	unimp
    86e8:	0006                	c.slli	zero,0x1
    86ea:	0100                	addi	s0,sp,128
    86ec:	5e00                	lw	s0,56(a2)
	...
    86fa:	002c                	addi	a1,sp,8
    86fc:	0000                	unimp
    86fe:	0006                	c.slli	zero,0x1
    8700:	935a                	add	t1,t1,s6
    8702:	5b04                	lw	s1,48(a4)
    8704:	002c0493          	addi	s1,s8,2
    8708:	0000                	unimp
    870a:	0038                	addi	a4,sp,8
    870c:	0000                	unimp
    870e:	0006                	c.slli	zero,0x1
    8710:	0af503f3          	0xaf503f3
    8714:	9f25                	0x9f25
    8716:	0038                	addi	a4,sp,8
    8718:	0000                	unimp
    871a:	0058                	addi	a4,sp,4
    871c:	0000                	unimp
    871e:	0006                	c.slli	zero,0x1
    8720:	935a                	add	t1,t1,s6
    8722:	5b04                	lw	s1,48(a4)
    8724:	00580493          	addi	s1,a6,5 # fffeb005 <RAM_SIZE+0xfffdb005>
    8728:	0000                	unimp
    872a:	0068                	addi	a0,sp,12
    872c:	0000                	unimp
    872e:	0006                	c.slli	zero,0x1
    8730:	0af503f3          	0xaf503f3
    8734:	9f25                	0x9f25
    8736:	0068                	addi	a0,sp,12
    8738:	0000                	unimp
    873a:	006c                	addi	a1,sp,12
    873c:	0000                	unimp
    873e:	0006                	c.slli	zero,0x1
    8740:	935a                	add	t1,t1,s6
    8742:	5b04                	lw	s1,48(a4)
    8744:	006c0493          	addi	s1,s8,6
    8748:	0000                	unimp
    874a:	0078                	addi	a4,sp,12
    874c:	0000                	unimp
    874e:	0006                	c.slli	zero,0x1
    8750:	0af503f3          	0xaf503f3
    8754:	9f25                	0x9f25
    8756:	0078                	addi	a4,sp,12
    8758:	0000                	unimp
    875a:	007c                	addi	a5,sp,12
    875c:	0000                	unimp
    875e:	0006                	c.slli	zero,0x1
    8760:	935a                	add	t1,t1,s6
    8762:	5b04                	lw	s1,48(a4)
    8764:	007c0493          	addi	s1,s8,7
    8768:	0000                	unimp
    876a:	0080                	addi	s0,sp,64
    876c:	0000                	unimp
    876e:	0006                	c.slli	zero,0x1
    8770:	0af503f3          	0xaf503f3
    8774:	9f25                	0x9f25
	...
    8782:	007c                	addi	a5,sp,12
    8784:	0000                	unimp
    8786:	0002                	c.slli64	zero
    8788:	9f30                	0x9f30
	...
    8792:	0018                	0x18
    8794:	0000                	unimp
    8796:	0050                	addi	a2,sp,4
    8798:	0000                	unimp
    879a:	0001                	nop
    879c:	505e                	0x505e
    879e:	0000                	unimp
    87a0:	5c00                	lw	s0,56(s0)
    87a2:	0000                	unimp
    87a4:	0400                	addi	s0,sp,512
    87a6:	7e00                	flw	fs0,56(a2)
    87a8:	689f0893          	addi	a7,t5,1673
    87ac:	0000                	unimp
    87ae:	7c00                	flw	fs0,56(s0)
    87b0:	0000                	unimp
    87b2:	0100                	addi	s0,sp,128
    87b4:	5e00                	lw	s0,56(a2)
	...
    87be:	005c                	addi	a5,sp,4
    87c0:	0000                	unimp
    87c2:	0064                	addi	s1,sp,12
    87c4:	0000                	unimp
    87c6:	0001                	nop
    87c8:	645a                	flw	fs0,148(sp)
    87ca:	0000                	unimp
    87cc:	6800                	flw	fs0,16(s0)
    87ce:	0000                	unimp
    87d0:	0400                	addi	s0,sp,512
    87d2:	7a00                	flw	fs0,48(a2)
    87d4:	1f00                	addi	s0,sp,944
    87d6:	749f 0000 7800      	0x78000000749f
    87dc:	0000                	unimp
    87de:	0100                	addi	s0,sp,128
    87e0:	5a00                	lw	s0,48(a2)
	...
    87ea:	0018                	0x18
    87ec:	0000                	unimp
    87ee:	0054                	addi	a3,sp,4
    87f0:	0000                	unimp
    87f2:	0001                	nop
    87f4:	5c5f 0000 6800      	0x680000005c5f
    87fa:	0000                	unimp
    87fc:	0200                	addi	s0,sp,256
    87fe:	3000                	fld	fs0,32(s0)
    8800:	689f 0000 7400      	0x74000000689f
    8806:	0000                	unimp
    8808:	0100                	addi	s0,sp,128
    880a:	5f00                	lw	s0,56(a4)
    880c:	0074                	addi	a3,sp,12
    880e:	0000                	unimp
    8810:	0078                	addi	a4,sp,12
    8812:	0000                	unimp
    8814:	0002                	c.slli64	zero
    8816:	9f30                	0x9f30
    8818:	0078                	addi	a4,sp,12
    881a:	0000                	unimp
    881c:	007c                	addi	a5,sp,12
    881e:	0000                	unimp
    8820:	0001                	nop
    8822:	005f 0000 0000      	0x5f
    8828:	0000                	unimp
    882a:	2800                	fld	fs0,16(s0)
    882c:	0000                	unimp
    882e:	3400                	fld	fs0,40(s0)
    8830:	0000                	unimp
    8832:	0500                	addi	s0,sp,640
    8834:	4000                	lw	s0,0(s0)
    8836:	9f1f244b          	fnmsub.q	fs0,ft10,fa7,fs3,rdn
    883a:	0034                	addi	a3,sp,8
    883c:	0000                	unimp
    883e:	0038                	addi	a4,sp,8
    8840:	0000                	unimp
    8842:	0001                	nop
    8844:	5c5a                	lw	s8,180(sp)
    8846:	0000                	unimp
    8848:	6800                	flw	fs0,16(s0)
    884a:	0000                	unimp
    884c:	0100                	addi	s0,sp,128
    884e:	5a00                	lw	s0,48(a2)
    8850:	007c                	addi	a5,sp,12
    8852:	0000                	unimp
    8854:	0080                	addi	s0,sp,64
    8856:	0000                	unimp
    8858:	0001                	nop
    885a:	005a                	c.slli	zero,0x16
    885c:	0000                	unimp
    885e:	0000                	unimp
    8860:	0000                	unimp
    8862:	3800                	fld	fs0,48(s0)
    8864:	0000                	unimp
    8866:	4c00                	lw	s0,24(s0)
    8868:	0000                	unimp
    886a:	0200                	addi	s0,sp,256
    886c:	3000                	fld	fs0,32(s0)
    886e:	009f 0000 0000      	0x9f
    8874:	0000                	unimp
    8876:	0000                	unimp
    8878:	0000                	unimp
    887a:	2000                	fld	fs0,0(s0)
    887c:	0000                	unimp
    887e:	0100                	addi	s0,sp,128
    8880:	5a00                	lw	s0,48(a2)
    8882:	0020                	addi	s0,sp,8
    8884:	0000                	unimp
    8886:	0038                	addi	a4,sp,8
    8888:	0000                	unimp
    888a:	0004                	0x4
    888c:	9f5a01f3          	0x9f5a01f3
    8890:	0038                	addi	a4,sp,8
    8892:	0000                	unimp
    8894:	004c                	addi	a1,sp,4
    8896:	0000                	unimp
    8898:	0001                	nop
    889a:	005a                	c.slli	zero,0x16
	...
    88a4:	0000                	unimp
    88a6:	2000                	fld	fs0,0(s0)
    88a8:	0000                	unimp
    88aa:	0100                	addi	s0,sp,128
    88ac:	5a00                	lw	s0,48(a2)
    88ae:	0020                	addi	s0,sp,8
    88b0:	0000                	unimp
    88b2:	0038                	addi	a4,sp,8
    88b4:	0000                	unimp
    88b6:	0004                	0x4
    88b8:	9f5a01f3          	0x9f5a01f3
    88bc:	0038                	addi	a4,sp,8
    88be:	0000                	unimp
    88c0:	004c                	addi	a1,sp,4
    88c2:	0000                	unimp
    88c4:	0001                	nop
    88c6:	005a                	c.slli	zero,0x16
    88c8:	0000                	unimp
    88ca:	0000                	unimp
    88cc:	0000                	unimp
    88ce:	1400                	addi	s0,sp,544
    88d0:	0000                	unimp
    88d2:	2800                	fld	fs0,16(s0)
    88d4:	0000                	unimp
    88d6:	0100                	addi	s0,sp,128
    88d8:	5f00                	lw	s0,56(a4)
	...
    88e6:	0058                	addi	a4,sp,4
    88e8:	0000                	unimp
    88ea:	0006                	c.slli	zero,0x1
    88ec:	935a                	add	t1,t1,s6
    88ee:	5b04                	lw	s1,48(a4)
    88f0:	00580493          	addi	s1,a6,5
    88f4:	0000                	unimp
    88f6:	07ec                	addi	a1,sp,972
    88f8:	0000                	unimp
    88fa:	0006                	c.slli	zero,0x1
    88fc:	0af503f3          	0xaf503f3
    8900:	9f25                	0x9f25
	...
    890e:	0064                	addi	s1,sp,12
    8910:	0000                	unimp
    8912:	0006                	c.slli	zero,0x1
    8914:	935c                	0x935c
    8916:	5d04                	lw	s1,56(a0)
    8918:	00640493          	addi	s1,s0,6
    891c:	0000                	unimp
    891e:	07ec                	addi	a1,sp,972
    8920:	0000                	unimp
    8922:	0006                	c.slli	zero,0x1
    8924:	0cf503f3          	0xcf503f3
    8928:	9f25                	0x9f25
	...
    8936:	00b8                	addi	a4,sp,72
    8938:	0000                	unimp
    893a:	0002                	c.slli64	zero
    893c:	9f30                	0x9f30
    893e:	00c0                	addi	s0,sp,68
    8940:	0000                	unimp
    8942:	01d4                	addi	a3,sp,196
    8944:	0000                	unimp
    8946:	0002                	c.slli64	zero
    8948:	9f30                	0x9f30
    894a:	01e0                	addi	s0,sp,204
    894c:	0000                	unimp
    894e:	02d0                	addi	a2,sp,324
    8950:	0000                	unimp
    8952:	0002                	c.slli64	zero
    8954:	9f30                	0x9f30
    8956:	0318                	addi	a4,sp,384
    8958:	0000                	unimp
    895a:	05a8                	addi	a0,sp,712
    895c:	0000                	unimp
    895e:	0002                	c.slli64	zero
    8960:	9f30                	0x9f30
    8962:	05c8                	addi	a0,sp,708
    8964:	0000                	unimp
    8966:	070c                	addi	a1,sp,896
    8968:	0000                	unimp
    896a:	0002                	c.slli64	zero
    896c:	9f30                	0x9f30
    896e:	07a0                	addi	s0,sp,968
    8970:	0000                	unimp
    8972:	07d0                	addi	a2,sp,964
    8974:	0000                	unimp
    8976:	0002                	c.slli64	zero
    8978:	9f30                	0x9f30
	...
    8982:	0038                	addi	a4,sp,8
    8984:	0000                	unimp
    8986:	00b8                	addi	a4,sp,72
    8988:	0000                	unimp
    898a:	0001                	nop
    898c:	c059                	beqz	s0,8a12 <__heap_end+0x1182>
    898e:	0000                	unimp
    8990:	d000                	sw	s0,32(s0)
    8992:	0002                	c.slli64	zero
    8994:	0100                	addi	s0,sp,128
    8996:	5900                	lw	s0,48(a0)
    8998:	02f8                	addi	a4,sp,332
    899a:	0000                	unimp
    899c:	0308                	addi	a0,sp,384
    899e:	0000                	unimp
    89a0:	0001                	nop
    89a2:	1859                	addi	a6,a6,-10
    89a4:	74000003          	lb	zero,1856(zero) # 740 <core_bench_list+0x21c>
    89a8:	01000003          	lb	zero,16(zero) # 10 <_start>
    89ac:	5900                	lw	s0,48(a0)
    89ae:	037c                	addi	a5,sp,396
    89b0:	0000                	unimp
    89b2:	03cc                	addi	a1,sp,452
    89b4:	0000                	unimp
    89b6:	0001                	nop
    89b8:	e859                	bnez	s0,8a4e <__heap_end+0x11be>
    89ba:	70000003          	lb	zero,1792(zero) # 700 <core_bench_list+0x1dc>
    89be:	0004                	0x4
    89c0:	0100                	addi	s0,sp,128
    89c2:	5900                	lw	s0,48(a0)
    89c4:	0474                	addi	a3,sp,524
    89c6:	0000                	unimp
    89c8:	04ec                	addi	a1,sp,588
    89ca:	0000                	unimp
    89cc:	0001                	nop
    89ce:	f059                	bnez	s0,8954 <__heap_end+0x10c4>
    89d0:	0004                	0x4
    89d2:	5c00                	lw	s0,56(s0)
    89d4:	0005                	c.nop	1
    89d6:	0100                	addi	s0,sp,128
    89d8:	5900                	lw	s0,48(a0)
    89da:	0560                	addi	s0,sp,652
    89dc:	0000                	unimp
    89de:	05bc                	addi	a5,sp,712
    89e0:	0000                	unimp
    89e2:	0001                	nop
    89e4:	c059                	beqz	s0,8a6a <__heap_end+0x11da>
    89e6:	0005                	c.nop	1
    89e8:	f800                	fsw	fs0,48(s0)
    89ea:	0005                	c.nop	1
    89ec:	0100                	addi	s0,sp,128
    89ee:	5900                	lw	s0,48(a0)
    89f0:	0668                	addi	a0,sp,780
    89f2:	0000                	unimp
    89f4:	067c                	addi	a5,sp,780
    89f6:	0000                	unimp
    89f8:	0001                	nop
    89fa:	e459                	bnez	s0,8a88 <__heap_end+0x11f8>
    89fc:	0006                	c.slli	zero,0x1
    89fe:	0c00                	addi	s0,sp,528
    8a00:	01000007          	vle8ff.v	v0,(zero),v0.t
    8a04:	5900                	lw	s0,48(a0)
    8a06:	07a0                	addi	s0,sp,968
    8a08:	0000                	unimp
    8a0a:	07c4                	addi	s1,sp,964
    8a0c:	0000                	unimp
    8a0e:	0001                	nop
    8a10:	c859                	beqz	s0,8aa6 <__heap_end+0x1216>
    8a12:	d8000007          	vlsseg7e128.v	v0,(zero),zero,v0.t
    8a16:	01000007          	vle8ff.v	v0,(zero),v0.t
    8a1a:	5900                	lw	s0,48(a0)
	...
    8a24:	0028                	addi	a0,sp,8
    8a26:	0000                	unimp
    8a28:	00ac                	addi	a1,sp,72
    8a2a:	0000                	unimp
    8a2c:	0001                	nop
    8a2e:	b058                	fsd	fa4,160(s0)
    8a30:	0000                	unimp
    8a32:	bc00                	fsd	fs0,56(s0)
    8a34:	0000                	unimp
    8a36:	0100                	addi	s0,sp,128
    8a38:	5800                	lw	s0,48(s0)
    8a3a:	00c0                	addi	s0,sp,68
    8a3c:	0000                	unimp
    8a3e:	011c                	addi	a5,sp,128
    8a40:	0000                	unimp
    8a42:	0001                	nop
    8a44:	5c58                	lw	a4,60(s0)
    8a46:	0001                	nop
    8a48:	3c00                	fld	fs0,56(s0)
    8a4a:	0002                	c.slli64	zero
    8a4c:	0100                	addi	s0,sp,128
    8a4e:	5800                	lw	s0,48(s0)
    8a50:	0240                	addi	s0,sp,260
    8a52:	0000                	unimp
    8a54:	02d0                	addi	a2,sp,324
    8a56:	0000                	unimp
    8a58:	0001                	nop
    8a5a:	f858                	fsw	fa4,52(s0)
    8a5c:	0002                	c.slli64	zero
    8a5e:	1400                	addi	s0,sp,544
    8a60:	01000003          	lb	zero,16(zero) # 10 <_start>
    8a64:	5800                	lw	s0,48(s0)
    8a66:	0318                	addi	a4,sp,384
    8a68:	0000                	unimp
    8a6a:	0344                	addi	s1,sp,388
    8a6c:	0000                	unimp
    8a6e:	0001                	nop
    8a70:	4458                	lw	a4,12(s0)
    8a72:	48000003          	lb	zero,1152(zero) # 480 <core_list_mergesort+0xa8>
    8a76:	03000003          	lb	zero,48(zero) # 30 <_start+0x20>
    8a7a:	7d00                	flw	fs0,56(a0)
    8a7c:	9f7f                	0x9f7f
    8a7e:	0348                	addi	a0,sp,388
    8a80:	0000                	unimp
    8a82:	0378                	addi	a4,sp,396
    8a84:	0000                	unimp
    8a86:	0001                	nop
    8a88:	7c58                	flw	fa4,60(s0)
    8a8a:	cc000003          	lb	zero,-832(zero) # fffffcc0 <RAM_SIZE+0xfffefcc0>
    8a8e:	01000003          	lb	zero,16(zero) # 10 <_start>
    8a92:	5800                	lw	s0,48(s0)
    8a94:	03e8                	addi	a0,sp,460
    8a96:	0000                	unimp
    8a98:	0488                	addi	a0,sp,576
    8a9a:	0000                	unimp
    8a9c:	0001                	nop
    8a9e:	8c58                	0x8c58
    8aa0:	0004                	0x4
    8aa2:	e800                	fsw	fs0,16(s0)
    8aa4:	0004                	0x4
    8aa6:	0100                	addi	s0,sp,128
    8aa8:	5800                	lw	s0,48(s0)
    8aaa:	04f0                	addi	a2,sp,588
    8aac:	0000                	unimp
    8aae:	0558                	addi	a4,sp,644
    8ab0:	0000                	unimp
    8ab2:	0001                	nop
    8ab4:	6058                	flw	fa4,4(s0)
    8ab6:	0005                	c.nop	1
    8ab8:	f800                	fsw	fs0,48(s0)
    8aba:	0005                	c.nop	1
    8abc:	0100                	addi	s0,sp,128
    8abe:	5800                	lw	s0,48(s0)
    8ac0:	0668                	addi	a0,sp,780
    8ac2:	0000                	unimp
    8ac4:	0678                	addi	a4,sp,780
    8ac6:	0000                	unimp
    8ac8:	0001                	nop
    8aca:	e458                	fsw	fa4,12(s0)
    8acc:	0006                	c.slli	zero,0x1
    8ace:	f000                	fsw	fs0,32(s0)
    8ad0:	0006                	c.slli	zero,0x1
    8ad2:	0100                	addi	s0,sp,128
    8ad4:	5800                	lw	s0,48(s0)
    8ad6:	06f4                	addi	a3,sp,844
    8ad8:	0000                	unimp
    8ada:	0704                	addi	s1,sp,896
    8adc:	0000                	unimp
    8ade:	0001                	nop
    8ae0:	a058                	fsd	fa4,128(s0)
    8ae2:	a4000007          	vluxseg6ei8.v	v0,(zero),v0,v0.t
    8ae6:	01000007          	vle8ff.v	v0,(zero),v0.t
    8aea:	5800                	lw	s0,48(s0)
    8aec:	07a8                	addi	a0,sp,968
    8aee:	0000                	unimp
    8af0:	07b4                	addi	a3,sp,968
    8af2:	0000                	unimp
    8af4:	0001                	nop
    8af6:	b858                	fsd	fa4,176(s0)
    8af8:	c0000007          	vlseg7e8.v	v0,(zero),v0.t
    8afc:	01000007          	vle8ff.v	v0,(zero),v0.t
    8b00:	5800                	lw	s0,48(s0)
    8b02:	07c8                	addi	a0,sp,964
    8b04:	0000                	unimp
    8b06:	07e0                	addi	s0,sp,972
    8b08:	0000                	unimp
    8b0a:	0001                	nop
    8b0c:	0058                	addi	a4,sp,4
	...
    8b16:	0000                	unimp
    8b18:	4000                	lw	s0,0(s0)
    8b1a:	0000                	unimp
    8b1c:	0100                	addi	s0,sp,128
    8b1e:	5a00                	lw	s0,48(a2)
    8b20:	0040                	addi	s0,sp,4
    8b22:	0000                	unimp
    8b24:	00a8                	addi	a0,sp,72
    8b26:	0000                	unimp
    8b28:	0001                	nop
    8b2a:	0000b05b          	0xb05b
    8b2e:	b800                	fsd	fs0,48(s0)
    8b30:	0000                	unimp
    8b32:	0100                	addi	s0,sp,128
    8b34:	5b00                	lw	s0,48(a4)
    8b36:	00c0                	addi	s0,sp,68
    8b38:	0000                	unimp
    8b3a:	011c                	addi	a5,sp,128
    8b3c:	0000                	unimp
    8b3e:	0001                	nop
    8b40:	00015c5b          	0x15c5b
    8b44:	bc00                	fsd	fs0,56(s0)
    8b46:	0001                	nop
    8b48:	0100                	addi	s0,sp,128
    8b4a:	5b00                	lw	s0,48(a4)
    8b4c:	01cc                	addi	a1,sp,196
    8b4e:	0000                	unimp
    8b50:	01dc                	addi	a5,sp,196
    8b52:	0000                	unimp
    8b54:	0001                	nop
    8b56:	0001e05b          	0x1e05b
    8b5a:	1800                	addi	s0,sp,48
    8b5c:	0002                	c.slli64	zero
    8b5e:	0100                	addi	s0,sp,128
    8b60:	5b00                	lw	s0,48(a4)
    8b62:	0224                	addi	s1,sp,264
    8b64:	0000                	unimp
    8b66:	0240                	addi	s0,sp,260
    8b68:	0000                	unimp
    8b6a:	0001                	nop
    8b6c:	405a                	0x405a
    8b6e:	0002                	c.slli64	zero
    8b70:	6c00                	flw	fs0,24(s0)
    8b72:	0002                	c.slli64	zero
    8b74:	0100                	addi	s0,sp,128
    8b76:	5b00                	lw	s0,48(a4)
    8b78:	0274                	addi	a3,sp,268
    8b7a:	0000                	unimp
    8b7c:	02bc                	addi	a5,sp,328
    8b7e:	0000                	unimp
    8b80:	0001                	nop
    8b82:	0002f85b          	0x2f85b
    8b86:	1000                	addi	s0,sp,32
    8b88:	01000003          	lb	zero,16(zero) # 10 <_start>
    8b8c:	5b00                	lw	s0,48(a4)
    8b8e:	0318                	addi	a4,sp,384
    8b90:	0000                	unimp
    8b92:	033c                	addi	a5,sp,392
    8b94:	0000                	unimp
    8b96:	0001                	nop
    8b98:	0003485b          	0x3485b
    8b9c:	7400                	flw	fs0,40(s0)
    8b9e:	01000003          	lb	zero,16(zero) # 10 <_start>
    8ba2:	5b00                	lw	s0,48(a4)
    8ba4:	037c                	addi	a5,sp,396
    8ba6:	0000                	unimp
    8ba8:	03cc                	addi	a1,sp,452
    8baa:	0000                	unimp
    8bac:	0001                	nop
    8bae:	0003e85b          	0x3e85b
    8bb2:	6000                	flw	fs0,0(s0)
    8bb4:	0004                	0x4
    8bb6:	0100                	addi	s0,sp,128
    8bb8:	5b00                	lw	s0,48(a4)
    8bba:	0474                	addi	a3,sp,524
    8bbc:	0000                	unimp
    8bbe:	0484                	addi	s1,sp,576
    8bc0:	0000                	unimp
    8bc2:	0001                	nop
    8bc4:	00048c5b          	0x48c5b
    8bc8:	c400                	sw	s0,8(s0)
    8bca:	0004                	0x4
    8bcc:	0100                	addi	s0,sp,128
    8bce:	5b00                	lw	s0,48(a4)
    8bd0:	04d0                	addi	a2,sp,580
    8bd2:	0000                	unimp
    8bd4:	04f0                	addi	a2,sp,588
    8bd6:	0000                	unimp
    8bd8:	0001                	nop
    8bda:	f05a                	fsw	fs6,32(sp)
    8bdc:	0004                	0x4
    8bde:	1c00                	addi	s0,sp,560
    8be0:	0005                	c.nop	1
    8be2:	0100                	addi	s0,sp,128
    8be4:	5b00                	lw	s0,48(a4)
    8be6:	0524                	addi	s1,sp,648
    8be8:	0000                	unimp
    8bea:	0558                	addi	a4,sp,644
    8bec:	0000                	unimp
    8bee:	0001                	nop
    8bf0:	0005605b          	0x5605b
    8bf4:	8400                	0x8400
    8bf6:	0005                	c.nop	1
    8bf8:	0100                	addi	s0,sp,128
    8bfa:	5b00                	lw	s0,48(a4)
    8bfc:	0594                	addi	a3,sp,704
    8bfe:	0000                	unimp
    8c00:	0598                	addi	a4,sp,704
    8c02:	0000                	unimp
    8c04:	0001                	nop
    8c06:	0005a85b          	0x5a85b
    8c0a:	b800                	fsd	fs0,48(s0)
    8c0c:	0005                	c.nop	1
    8c0e:	0100                	addi	s0,sp,128
    8c10:	5b00                	lw	s0,48(a4)
    8c12:	05c0                	addi	s0,sp,708
    8c14:	0000                	unimp
    8c16:	05f8                	addi	a4,sp,716
    8c18:	0000                	unimp
    8c1a:	0001                	nop
    8c1c:	0006685b          	0x6685b
    8c20:	6c00                	flw	fs0,24(s0)
    8c22:	0006                	c.slli	zero,0x1
    8c24:	0100                	addi	s0,sp,128
    8c26:	5b00                	lw	s0,48(a4)
    8c28:	06e4                	addi	s1,sp,844
    8c2a:	0000                	unimp
    8c2c:	06ec                	addi	a1,sp,844
    8c2e:	0000                	unimp
    8c30:	0001                	nop
    8c32:	0006f45b          	0x6f45b
    8c36:	fc00                	fsw	fs0,56(s0)
    8c38:	0006                	c.slli	zero,0x1
    8c3a:	0100                	addi	s0,sp,128
    8c3c:	5b00                	lw	s0,48(a4)
    8c3e:	0700                	addi	s0,sp,896
    8c40:	0000                	unimp
    8c42:	0704                	addi	s1,sp,896
    8c44:	0000                	unimp
    8c46:	0001                	nop
    8c48:	0007a05b          	0x7a05b
    8c4c:	b000                	fsd	fs0,32(s0)
    8c4e:	01000007          	vle8ff.v	v0,(zero),v0.t
    8c52:	5b00                	lw	s0,48(a4)
    8c54:	07b8                	addi	a4,sp,968
    8c56:	0000                	unimp
    8c58:	07c0                	addi	s0,sp,964
    8c5a:	0000                	unimp
    8c5c:	0001                	nop
    8c5e:	0007d05b          	0x7d05b
    8c62:	d400                	sw	s0,40(s0)
    8c64:	01000007          	vle8ff.v	v0,(zero),v0.t
    8c68:	5b00                	lw	s0,48(a4)
	...
    8c72:	0010                	0x10
    8c74:	0000                	unimp
    8c76:	0024                	addi	s1,sp,8
    8c78:	0000                	unimp
    8c7a:	0001                	nop
    8c7c:	245f 0000 3800      	0x38000000245f
    8c82:	0000                	unimp
    8c84:	0900                	addi	s0,sp,144
    8c86:	7b00                	flw	fs0,48(a4)
    8c88:	0c00                	addi	s0,sp,528
    8c8a:	ffff                	0xffff
    8c8c:	9f1a000f          	0x9f1a000f
    8c90:	0038                	addi	a4,sp,8
    8c92:	0000                	unimp
    8c94:	00a0                	addi	s0,sp,72
    8c96:	0000                	unimp
    8c98:	0001                	nop
    8c9a:	b05f 0000 b800      	0xb8000000b05f
    8ca0:	0000                	unimp
    8ca2:	0100                	addi	s0,sp,128
    8ca4:	5f00                	lw	s0,56(a4)
    8ca6:	00c0                	addi	s0,sp,68
    8ca8:	0000                	unimp
    8caa:	0118                	addi	a4,sp,128
    8cac:	0000                	unimp
    8cae:	0001                	nop
    8cb0:	5c5f 0001 c000      	0xc00000015c5f
    8cb6:	0001                	nop
    8cb8:	0100                	addi	s0,sp,128
    8cba:	5f00                	lw	s0,56(a4)
    8cbc:	01cc                	addi	a1,sp,196
    8cbe:	0000                	unimp
    8cc0:	01d8                	addi	a4,sp,196
    8cc2:	0000                	unimp
    8cc4:	0001                	nop
    8cc6:	e05f 0001 3000      	0x30000001e05f
    8ccc:	0002                	c.slli64	zero
    8cce:	0100                	addi	s0,sp,128
    8cd0:	5f00                	lw	s0,56(a4)
    8cd2:	0240                	addi	s0,sp,260
    8cd4:	0000                	unimp
    8cd6:	026c                	addi	a1,sp,268
    8cd8:	0000                	unimp
    8cda:	0001                	nop
    8cdc:	745f 0002 a800      	0xa8000002745f
    8ce2:	0002                	c.slli64	zero
    8ce4:	0100                	addi	s0,sp,128
    8ce6:	5f00                	lw	s0,56(a4)
    8ce8:	02f8                	addi	a4,sp,332
    8cea:	0000                	unimp
    8cec:	030c                	addi	a1,sp,384
    8cee:	0000                	unimp
    8cf0:	0001                	nop
    8cf2:	185f 0003 2c00      	0x2c000003185f
    8cf8:	01000003          	lb	zero,16(zero) # 10 <_start>
    8cfc:	5f00                	lw	s0,56(a4)
    8cfe:	0348                	addi	a0,sp,388
    8d00:	0000                	unimp
    8d02:	036c                	addi	a1,sp,396
    8d04:	0000                	unimp
    8d06:	0001                	nop
    8d08:	7c5f 0003 c800      	0xc80000037c5f
    8d0e:	01000003          	lb	zero,16(zero) # 10 <_start>
    8d12:	5f00                	lw	s0,56(a4)
    8d14:	03e8                	addi	a0,sp,460
    8d16:	0000                	unimp
    8d18:	0464                	addi	s1,sp,524
    8d1a:	0000                	unimp
    8d1c:	0001                	nop
    8d1e:	745f 0004 8000      	0x80000004745f
    8d24:	0004                	0x4
    8d26:	0100                	addi	s0,sp,128
    8d28:	5f00                	lw	s0,56(a4)
    8d2a:	048c                	addi	a1,sp,576
    8d2c:	0000                	unimp
    8d2e:	04dc                	addi	a5,sp,580
    8d30:	0000                	unimp
    8d32:	0001                	nop
    8d34:	f05f 0004 1c00      	0x1c000004f05f
    8d3a:	0005                	c.nop	1
    8d3c:	0100                	addi	s0,sp,128
    8d3e:	5f00                	lw	s0,56(a4)
    8d40:	0524                	addi	s1,sp,648
    8d42:	0000                	unimp
    8d44:	0554                	addi	a3,sp,644
    8d46:	0000                	unimp
    8d48:	0001                	nop
    8d4a:	605f 0005 8800      	0x88000005605f
    8d50:	0005                	c.nop	1
    8d52:	0100                	addi	s0,sp,128
    8d54:	5f00                	lw	s0,56(a4)
    8d56:	0594                	addi	a3,sp,704
    8d58:	0000                	unimp
    8d5a:	05a0                	addi	s0,sp,712
    8d5c:	0000                	unimp
    8d5e:	0001                	nop
    8d60:	a85f 0005 b400      	0xb4000005a85f
    8d66:	0005                	c.nop	1
    8d68:	0100                	addi	s0,sp,128
    8d6a:	5f00                	lw	s0,56(a4)
    8d6c:	05c0                	addi	s0,sp,708
    8d6e:	0000                	unimp
    8d70:	05ec                	addi	a1,sp,716
    8d72:	0000                	unimp
    8d74:	0001                	nop
    8d76:	685f 0006 7400      	0x74000006685f
    8d7c:	0006                	c.slli	zero,0x1
    8d7e:	0100                	addi	s0,sp,128
    8d80:	5f00                	lw	s0,56(a4)
    8d82:	06e4                	addi	s1,sp,844
    8d84:	0000                	unimp
    8d86:	06e8                	addi	a0,sp,844
    8d88:	0000                	unimp
    8d8a:	0001                	nop
    8d8c:	f45f 0006 f800      	0xf8000006f45f
    8d92:	0006                	c.slli	zero,0x1
    8d94:	0100                	addi	s0,sp,128
    8d96:	5f00                	lw	s0,56(a4)
    8d98:	0700                	addi	s0,sp,896
    8d9a:	0000                	unimp
    8d9c:	0704                	addi	s1,sp,896
    8d9e:	0000                	unimp
    8da0:	0001                	nop
    8da2:	a05f 0007 ac00      	0xac000007a05f
    8da8:	01000007          	vle8ff.v	v0,(zero),v0.t
    8dac:	5f00                	lw	s0,56(a4)
    8dae:	07b8                	addi	a4,sp,968
    8db0:	0000                	unimp
    8db2:	07bc                	addi	a5,sp,968
    8db4:	0000                	unimp
    8db6:	0001                	nop
    8db8:	c85f 0007 cc00      	0xcc000007c85f
    8dbe:	01000007          	vle8ff.v	v0,(zero),v0.t
    8dc2:	5f00                	lw	s0,56(a4)
    8dc4:	07d0                	addi	a2,sp,964
    8dc6:	0000                	unimp
    8dc8:	07dc                	addi	a5,sp,964
    8dca:	0000                	unimp
    8dcc:	0001                	nop
    8dce:	005f 0000 0000      	0x5f
    8dd4:	0000                	unimp
    8dd6:	5c00                	lw	s0,56(s0)
    8dd8:	0000                	unimp
    8dda:	7400                	flw	fs0,40(s0)
    8ddc:	0000                	unimp
    8dde:	0600                	addi	s0,sp,768
    8de0:	7d00                	flw	fs0,56(a0)
    8de2:	0800                	addi	s0,sp,16
    8de4:	1aff                	0x1aff
    8de6:	749f 0000 8800      	0x88000000749f
    8dec:	0000                	unimp
    8dee:	0100                	addi	s0,sp,128
    8df0:	5d00                	lw	s0,56(a0)
    8df2:	00c0                	addi	s0,sp,68
    8df4:	0000                	unimp
    8df6:	00c4                	addi	s1,sp,68
    8df8:	0000                	unimp
    8dfa:	0001                	nop
    8dfc:	9c5d                	0x9c5d
    8dfe:	0001                	nop
    8e00:	ac00                	fsd	fs0,24(s0)
    8e02:	0001                	nop
    8e04:	0100                	addi	s0,sp,128
    8e06:	5d00                	lw	s0,56(a0)
    8e08:	01e0                	addi	s0,sp,204
    8e0a:	0000                	unimp
    8e0c:	01e4                	addi	s1,sp,204
    8e0e:	0000                	unimp
    8e10:	0001                	nop
    8e12:	805d                	srli	s0,s0,0x17
    8e14:	0002                	c.slli64	zero
    8e16:	8400                	0x8400
    8e18:	0002                	c.slli64	zero
    8e1a:	0100                	addi	s0,sp,128
    8e1c:	5d00                	lw	s0,56(a0)
    8e1e:	0348                	addi	a0,sp,388
    8e20:	0000                	unimp
    8e22:	0354                	addi	a3,sp,388
    8e24:	0000                	unimp
    8e26:	0001                	nop
    8e28:	e85d                	bnez	s0,8ede <__heap_end+0x164e>
    8e2a:	ec000003          	lb	zero,-320(zero) # fffffec0 <RAM_SIZE+0xfffefec0>
    8e2e:	01000003          	lb	zero,16(zero) # 10 <_start>
    8e32:	5d00                	lw	s0,56(a0)
    8e34:	0440                	addi	s0,sp,516
    8e36:	0000                	unimp
    8e38:	05f8                	addi	a4,sp,716
    8e3a:	0000                	unimp
    8e3c:	0001                	nop
    8e3e:	685d                	lui	a6,0x17
    8e40:	0006                	c.slli	zero,0x1
    8e42:	7c00                	flw	fs0,56(s0)
    8e44:	0006                	c.slli	zero,0x1
    8e46:	0100                	addi	s0,sp,128
    8e48:	5d00                	lw	s0,56(a0)
    8e4a:	07a8                	addi	a0,sp,968
    8e4c:	0000                	unimp
    8e4e:	07e0                	addi	s0,sp,972
    8e50:	0000                	unimp
    8e52:	0001                	nop
    8e54:	005d                	c.nop	23
    8e56:	0000                	unimp
    8e58:	0000                	unimp
    8e5a:	0000                	unimp
    8e5c:	5400                	lw	s0,40(s0)
    8e5e:	0000                	unimp
    8e60:	d000                	sw	s0,32(s0)
    8e62:	0002                	c.slli64	zero
    8e64:	0100                	addi	s0,sp,128
    8e66:	5600                	lw	s0,40(a2)
    8e68:	02f8                	addi	a4,sp,332
    8e6a:	0000                	unimp
    8e6c:	00000603          	lb	a2,0(zero) # 0 <RAM_START_ADDRESS>
    8e70:	0001                	nop
    8e72:	6856                	flw	fa6,84(sp)
    8e74:	0006                	c.slli	zero,0x1
    8e76:	8300                	0x8300
    8e78:	0006                	c.slli	zero,0x1
    8e7a:	0100                	addi	s0,sp,128
    8e7c:	5600                	lw	s0,40(a2)
    8e7e:	06e4                	addi	s1,sp,844
    8e80:	0000                	unimp
    8e82:	070c                	addi	a1,sp,896
    8e84:	0000                	unimp
    8e86:	0001                	nop
    8e88:	a056                	fsd	fs5,0(sp)
    8e8a:	e0000007          	vlseg8e8.v	v0,(zero),v0.t
    8e8e:	01000007          	vle8ff.v	v0,(zero),v0.t
    8e92:	5600                	lw	s0,40(a2)
	...
    8e9c:	0040                	addi	s0,sp,4
    8e9e:	0000                	unimp
    8ea0:	0098                	addi	a4,sp,64
    8ea2:	0000                	unimp
    8ea4:	0001                	nop
    8ea6:	b05c                	fsd	fa5,160(s0)
    8ea8:	0000                	unimp
    8eaa:	b800                	fsd	fs0,48(s0)
    8eac:	0000                	unimp
    8eae:	0100                	addi	s0,sp,128
    8eb0:	5c00                	lw	s0,56(s0)
    8eb2:	00c0                	addi	s0,sp,68
    8eb4:	0000                	unimp
    8eb6:	00f8                	addi	a4,sp,76
    8eb8:	0000                	unimp
    8eba:	0001                	nop
    8ebc:	045c                	addi	a5,sp,516
    8ebe:	0001                	nop
    8ec0:	0c00                	addi	s0,sp,528
    8ec2:	0001                	nop
    8ec4:	0100                	addi	s0,sp,128
    8ec6:	5c00                	lw	s0,56(s0)
    8ec8:	015c                	addi	a5,sp,132
    8eca:	0000                	unimp
    8ecc:	0180                	addi	s0,sp,192
    8ece:	0000                	unimp
    8ed0:	0001                	nop
    8ed2:	905c                	0x905c
    8ed4:	0001                	nop
    8ed6:	9400                	0x9400
    8ed8:	0001                	nop
    8eda:	0100                	addi	s0,sp,128
    8edc:	5c00                	lw	s0,56(s0)
    8ede:	019c                	addi	a5,sp,192
    8ee0:	0000                	unimp
    8ee2:	01c4                	addi	s1,sp,196
    8ee4:	0000                	unimp
    8ee6:	0001                	nop
    8ee8:	cc5c                	sw	a5,28(s0)
    8eea:	0001                	nop
    8eec:	3400                	fld	fs0,40(s0)
    8eee:	0002                	c.slli64	zero
    8ef0:	0100                	addi	s0,sp,128
    8ef2:	5c00                	lw	s0,56(s0)
    8ef4:	0240                	addi	s0,sp,260
    8ef6:	0000                	unimp
    8ef8:	02a4                	addi	s1,sp,328
    8efa:	0000                	unimp
    8efc:	0001                	nop
    8efe:	f85c                	fsw	fa5,52(s0)
    8f00:	0002                	c.slli64	zero
    8f02:	0000                	unimp
    8f04:	01000003          	lb	zero,16(zero) # 10 <_start>
    8f08:	5c00                	lw	s0,56(s0)
    8f0a:	0318                	addi	a4,sp,384
    8f0c:	0000                	unimp
    8f0e:	0324                	addi	s1,sp,392
    8f10:	0000                	unimp
    8f12:	0001                	nop
    8f14:	485c                	lw	a5,20(s0)
    8f16:	64000003          	lb	zero,1600(zero) # 640 <core_bench_list+0x11c>
    8f1a:	01000003          	lb	zero,16(zero) # 10 <_start>
    8f1e:	5c00                	lw	s0,56(s0)
    8f20:	037c                	addi	a5,sp,396
    8f22:	0000                	unimp
    8f24:	03a8                	addi	a0,sp,456
    8f26:	0000                	unimp
    8f28:	0001                	nop
    8f2a:	b45c                	fsd	fa5,168(s0)
    8f2c:	bc000003          	lb	zero,-1088(zero) # fffffbc0 <RAM_SIZE+0xfffefbc0>
    8f30:	01000003          	lb	zero,16(zero) # 10 <_start>
    8f34:	5c00                	lw	s0,56(s0)
    8f36:	03e8                	addi	a0,sp,460
    8f38:	0000                	unimp
    8f3a:	0424                	addi	s1,sp,520
    8f3c:	0000                	unimp
    8f3e:	0001                	nop
    8f40:	345c                	fld	fa5,168(s0)
    8f42:	0004                	0x4
    8f44:	3800                	fld	fs0,48(s0)
    8f46:	0004                	0x4
    8f48:	0100                	addi	s0,sp,128
    8f4a:	5c00                	lw	s0,56(s0)
    8f4c:	0440                	addi	s0,sp,516
    8f4e:	0000                	unimp
    8f50:	0468                	addi	a0,sp,524
    8f52:	0000                	unimp
    8f54:	0001                	nop
    8f56:	745c                	flw	fa5,44(s0)
    8f58:	0004                	0x4
    8f5a:	e000                	fsw	fs0,0(s0)
    8f5c:	0004                	0x4
    8f5e:	0100                	addi	s0,sp,128
    8f60:	5c00                	lw	s0,56(s0)
    8f62:	04f0                	addi	a2,sp,588
    8f64:	0000                	unimp
    8f66:	0558                	addi	a4,sp,644
    8f68:	0000                	unimp
    8f6a:	0001                	nop
    8f6c:	605c                	flw	fa5,4(s0)
    8f6e:	0005                	c.nop	1
    8f70:	8c00                	0x8c00
    8f72:	0005                	c.nop	1
    8f74:	0100                	addi	s0,sp,128
    8f76:	5c00                	lw	s0,56(s0)
    8f78:	0594                	addi	a3,sp,704
    8f7a:	0000                	unimp
    8f7c:	05f0                	addi	a2,sp,716
    8f7e:	0000                	unimp
    8f80:	0001                	nop
    8f82:	685c                	flw	fa5,20(s0)
    8f84:	0006                	c.slli	zero,0x1
    8f86:	7c00                	flw	fs0,56(s0)
    8f88:	0006                	c.slli	zero,0x1
    8f8a:	0100                	addi	s0,sp,128
    8f8c:	5c00                	lw	s0,56(s0)
    8f8e:	06e4                	addi	s1,sp,844
    8f90:	0000                	unimp
    8f92:	0704                	addi	s1,sp,896
    8f94:	0000                	unimp
    8f96:	0001                	nop
    8f98:	a05c                	fsd	fa5,128(s0)
    8f9a:	e0000007          	vlseg8e8.v	v0,(zero),v0.t
    8f9e:	01000007          	vle8ff.v	v0,(zero),v0.t
    8fa2:	5c00                	lw	s0,56(s0)
	...
    8fac:	0040                	addi	s0,sp,4
    8fae:	0000                	unimp
    8fb0:	0044                	addi	s1,sp,4
    8fb2:	0000                	unimp
    8fb4:	0001                	nop
    8fb6:	4460                	lw	s0,76(s0)
    8fb8:	0000                	unimp
    8fba:	5c00                	lw	s0,56(s0)
    8fbc:	0000                	unimp
    8fbe:	0900                	addi	s0,sp,144
    8fc0:	7d00                	flw	fs0,56(a0)
    8fc2:	0c00                	addi	s0,sp,528
    8fc4:	ffff                	0xffff
    8fc6:	9f1a000f          	0x9f1a000f
    8fca:	0060                	addi	s0,sp,12
    8fcc:	0000                	unimp
    8fce:	0114                	addi	a3,sp,128
    8fd0:	0000                	unimp
    8fd2:	0001                	nop
    8fd4:	5c5e                	lw	s8,244(sp)
    8fd6:	0001                	nop
    8fd8:	8800                	0x8800
    8fda:	0001                	nop
    8fdc:	0100                	addi	s0,sp,128
    8fde:	5e00                	lw	s0,56(a2)
    8fe0:	0190                	addi	a2,sp,192
    8fe2:	0000                	unimp
    8fe4:	02b4                	addi	a3,sp,328
    8fe6:	0000                	unimp
    8fe8:	0001                	nop
    8fea:	f85e                	fsw	fs7,48(sp)
    8fec:	0002                	c.slli64	zero
    8fee:	c400                	sw	s0,8(s0)
    8ff0:	01000003          	lb	zero,16(zero) # 10 <_start>
    8ff4:	5e00                	lw	s0,56(a2)
    8ff6:	03e8                	addi	a0,sp,460
    8ff8:	0000                	unimp
    8ffa:	042c                	addi	a1,sp,520
    8ffc:	0000                	unimp
    8ffe:	0001                	nop
    9000:	345e                	fld	fs0,496(sp)
    9002:	0004                	0x4
    9004:	f800                	fsw	fs0,48(s0)
    9006:	0005                	c.nop	1
    9008:	0100                	addi	s0,sp,128
    900a:	5e00                	lw	s0,56(a2)
    900c:	0668                	addi	a0,sp,780
    900e:	0000                	unimp
    9010:	067c                	addi	a5,sp,780
    9012:	0000                	unimp
    9014:	0001                	nop
    9016:	e45e                	fsw	fs7,8(sp)
    9018:	0006                	c.slli	zero,0x1
    901a:	0400                	addi	s0,sp,512
    901c:	01000007          	vle8ff.v	v0,(zero),v0.t
    9020:	5e00                	lw	s0,56(a2)
    9022:	07a0                	addi	s0,sp,968
    9024:	0000                	unimp
    9026:	07e0                	addi	s0,sp,972
    9028:	0000                	unimp
    902a:	0001                	nop
    902c:	005e                	c.slli	zero,0x17
    902e:	0000                	unimp
    9030:	0000                	unimp
    9032:	0000                	unimp
    9034:	7c00                	flw	fs0,56(s0)
    9036:	0000                	unimp
    9038:	b800                	fsd	fs0,48(s0)
    903a:	0000                	unimp
    903c:	0100                	addi	s0,sp,128
    903e:	5900                	lw	s0,48(a0)
    9040:	00c0                	addi	s0,sp,68
    9042:	0000                	unimp
    9044:	0304                	addi	s1,sp,384
    9046:	0000                	unimp
    9048:	0001                	nop
    904a:	1859                	addi	a6,a6,-10
    904c:	48000003          	lb	zero,1152(zero) # 480 <core_list_mergesort+0xa8>
    9050:	01000003          	lb	zero,16(zero) # 10 <_start>
    9054:	5900                	lw	s0,48(a0)
    9056:	034c                	addi	a1,sp,388
    9058:	0000                	unimp
    905a:	0440                	addi	s0,sp,516
    905c:	0000                	unimp
    905e:	0001                	nop
    9060:	4859                	li	a6,22
    9062:	0004                	0x4
    9064:	3000                	fld	fs0,32(s0)
    9066:	0005                	c.nop	1
    9068:	0100                	addi	s0,sp,128
    906a:	5d00                	lw	s0,56(a0)
    906c:	0574                	addi	a3,sp,652
    906e:	0000                	unimp
    9070:	0590                	addi	a2,sp,704
    9072:	0000                	unimp
    9074:	0001                	nop
    9076:	9059                	srli	s0,s0,0x36
    9078:	0005                	c.nop	1
    907a:	9400                	0x9400
    907c:	0005                	c.nop	1
    907e:	0100                	addi	s0,sp,128
    9080:	5d00                	lw	s0,56(a0)
    9082:	0594                	addi	a3,sp,704
    9084:	0000                	unimp
    9086:	05a8                	addi	a0,sp,712
    9088:	0000                	unimp
    908a:	0001                	nop
    908c:	d859                	beqz	s0,9022 <__heap_end+0x1792>
    908e:	0005                	c.nop	1
    9090:	f400                	fsw	fs0,40(s0)
    9092:	0005                	c.nop	1
    9094:	0100                	addi	s0,sp,128
    9096:	5900                	lw	s0,48(a0)
    9098:	05f4                	addi	a3,sp,716
    909a:	0000                	unimp
    909c:	05f8                	addi	a4,sp,716
    909e:	0000                	unimp
    90a0:	0001                	nop
    90a2:	f85d                	bnez	s0,9058 <__heap_end+0x17c8>
    90a4:	0005                	c.nop	1
    90a6:	0c00                	addi	s0,sp,528
    90a8:	01000007          	vle8ff.v	v0,(zero),v0.t
    90ac:	5900                	lw	s0,48(a0)
    90ae:	0760                	addi	s0,sp,908
    90b0:	0000                	unimp
    90b2:	0780                	addi	s0,sp,960
    90b4:	0000                	unimp
    90b6:	0001                	nop
    90b8:	a059                	j	913e <__heap_end+0x18ae>
    90ba:	a8000007          	vlsseg6e8.v	v0,(zero),zero,v0.t
    90be:	01000007          	vle8ff.v	v0,(zero),v0.t
    90c2:	5900                	lw	s0,48(a0)
    90c4:	07a8                	addi	a0,sp,968
    90c6:	0000                	unimp
    90c8:	07b8                	addi	a4,sp,968
    90ca:	0000                	unimp
    90cc:	0001                	nop
    90ce:	c85d                	beqz	s0,9184 <__heap_end+0x18f4>
    90d0:	d0000007          	vlseg7e128.v	v0,(zero),v0.t
    90d4:	01000007          	vle8ff.v	v0,(zero),v0.t
    90d8:	5900                	lw	s0,48(a0)
	...
    90e2:	0080                	addi	s0,sp,64
    90e4:	0000                	unimp
    90e6:	00a8                	addi	a0,sp,72
    90e8:	0000                	unimp
    90ea:	0001                	nop
    90ec:	b058                	fsd	fa4,160(s0)
    90ee:	0000                	unimp
    90f0:	b800                	fsd	fs0,48(s0)
    90f2:	0000                	unimp
    90f4:	0100                	addi	s0,sp,128
    90f6:	5800                	lw	s0,48(s0)
    90f8:	00c0                	addi	s0,sp,68
    90fa:	0000                	unimp
    90fc:	019c                	addi	a5,sp,192
    90fe:	0000                	unimp
    9100:	0001                	nop
    9102:	a458                	fsd	fa4,136(s0)
    9104:	0001                	nop
    9106:	d400                	sw	s0,40(s0)
    9108:	0001                	nop
    910a:	0100                	addi	s0,sp,128
    910c:	5600                	lw	s0,40(a2)
    910e:	01e0                	addi	s0,sp,204
    9110:	0000                	unimp
    9112:	0280                	addi	s0,sp,320
    9114:	0000                	unimp
    9116:	0001                	nop
    9118:	9456                	add	s0,s0,s5
    911a:	0002                	c.slli64	zero
    911c:	cc00                	sw	s0,24(s0)
    911e:	0002                	c.slli64	zero
    9120:	0200                	addi	s0,sp,256
    9122:	3000                	fld	fs0,32(s0)
    9124:	cc9f 0002 d000      	0xd0000002cc9f
    912a:	0002                	c.slli64	zero
    912c:	0200                	addi	s0,sp,256
    912e:	3100                	fld	fs0,32(a0)
    9130:	d09f 0002 f800      	0xf8000002d09f
    9136:	0002                	c.slli64	zero
    9138:	0100                	addi	s0,sp,128
    913a:	5800                	lw	s0,48(s0)
    913c:	02f8                	addi	a4,sp,332
    913e:	0000                	unimp
    9140:	0318                	addi	a4,sp,384
    9142:	0000                	unimp
    9144:	0004                	0x4
    9146:	ff0a                	fsw	ft2,188(sp)
    9148:	03189f07          	flh	ft10,49(a7)
    914c:	0000                	unimp
    914e:	0348                	addi	a0,sp,388
    9150:	0000                	unimp
    9152:	0001                	nop
    9154:	4c5d                	li	s8,23
    9156:	74000003          	lb	zero,1856(zero) # 740 <core_bench_list+0x21c>
    915a:	01000003          	lb	zero,16(zero) # 10 <_start>
    915e:	5800                	lw	s0,48(s0)
    9160:	037c                	addi	a5,sp,396
    9162:	0000                	unimp
    9164:	0440                	addi	s0,sp,516
    9166:	0000                	unimp
    9168:	0001                	nop
    916a:	4858                	lw	a4,20(s0)
    916c:	0004                	0x4
    916e:	3000                	fld	fs0,32(s0)
    9170:	0005                	c.nop	1
    9172:	0100                	addi	s0,sp,128
    9174:	5600                	lw	s0,40(a2)
    9176:	0548                	addi	a0,sp,644
    9178:	0000                	unimp
    917a:	0558                	addi	a4,sp,644
    917c:	0000                	unimp
    917e:	0002                	c.slli64	zero
    9180:	9f30                	0x9f30
    9182:	0560                	addi	s0,sp,652
    9184:	0000                	unimp
    9186:	05a8                	addi	a0,sp,712
    9188:	0000                	unimp
    918a:	0002                	c.slli64	zero
    918c:	9f30                	0x9f30
    918e:	05a8                	addi	a0,sp,712
    9190:	0000                	unimp
    9192:	05c8                	addi	a0,sp,708
    9194:	0000                	unimp
    9196:	0004                	0x4
    9198:	ff0a                	fsw	ft2,188(sp)
    919a:	05c89f07          	flh	ft10,92(a7)
    919e:	0000                	unimp
    91a0:	0664                	addi	s1,sp,780
    91a2:	0000                	unimp
    91a4:	0001                	nop
    91a6:	6858                	flw	fa4,20(s0)
    91a8:	0006                	c.slli	zero,0x1
    91aa:	7800                	flw	fs0,48(s0)
    91ac:	0006                	c.slli	zero,0x1
    91ae:	0100                	addi	s0,sp,128
    91b0:	5800                	lw	s0,48(s0)
    91b2:	067c                	addi	a5,sp,780
    91b4:	0000                	unimp
    91b6:	06e4                	addi	s1,sp,844
    91b8:	0000                	unimp
    91ba:	0001                	nop
    91bc:	e458                	fsw	fa4,12(s0)
    91be:	0006                	c.slli	zero,0x1
    91c0:	f400                	fsw	fs0,40(s0)
    91c2:	0006                	c.slli	zero,0x1
    91c4:	0100                	addi	s0,sp,128
    91c6:	5600                	lw	s0,40(a2)
    91c8:	06f4                	addi	a3,sp,844
    91ca:	0000                	unimp
    91cc:	0700                	addi	s0,sp,896
    91ce:	0000                	unimp
    91d0:	0002                	c.slli64	zero
    91d2:	9f30                	0x9f30
    91d4:	0700                	addi	s0,sp,896
    91d6:	0000                	unimp
    91d8:	0704                	addi	s1,sp,896
    91da:	0000                	unimp
    91dc:	0001                	nop
    91de:	1c5d                	addi	s8,s8,-9
    91e0:	48000007          	vlsseg3e8.v	v0,(zero),zero,v0.t
    91e4:	01000007          	vle8ff.v	v0,(zero),v0.t
    91e8:	5800                	lw	s0,48(s0)
    91ea:	0748                	addi	a0,sp,900
    91ec:	0000                	unimp
    91ee:	0760                	addi	s0,sp,908
    91f0:	0000                	unimp
    91f2:	0004                	0x4
    91f4:	ff0a                	fsw	ft2,188(sp)
    91f6:	07a09f07          	flh	ft10,122(ra)
    91fa:	0000                	unimp
    91fc:	07a4                	addi	s1,sp,968
    91fe:	0000                	unimp
    9200:	0001                	nop
    9202:	a858                	fsd	fa4,144(s0)
    9204:	b8000007          	vlsseg6e128.v	v0,(zero),zero,v0.t
    9208:	01000007          	vle8ff.v	v0,(zero),v0.t
    920c:	5600                	lw	s0,40(a2)
    920e:	07b8                	addi	a4,sp,968
    9210:	0000                	unimp
    9212:	07c0                	addi	s0,sp,964
    9214:	0000                	unimp
    9216:	0002                	c.slli64	zero
    9218:	9f30                	0x9f30
    921a:	07c8                	addi	a0,sp,964
    921c:	0000                	unimp
    921e:	07d0                	addi	a2,sp,964
    9220:	0000                	unimp
    9222:	0002                	c.slli64	zero
    9224:	9f30                	0x9f30
    9226:	07d0                	addi	a2,sp,964
    9228:	0000                	unimp
    922a:	07e0                	addi	s0,sp,972
    922c:	0000                	unimp
    922e:	0004                	0x4
    9230:	ff0a                	fsw	ft2,188(sp)
    9232:	07e09f07          	flh	ft10,126(ra)
    9236:	0000                	unimp
    9238:	07ec                	addi	a1,sp,972
    923a:	0000                	unimp
    923c:	0001                	nop
    923e:	0058                	addi	a4,sp,4
    9240:	0000                	unimp
    9242:	0000                	unimp
    9244:	0000                	unimp
    9246:	a400                	fsd	fs0,8(s0)
    9248:	0000                	unimp
    924a:	a800                	fsd	fs0,16(s0)
    924c:	0000                	unimp
    924e:	0100                	addi	s0,sp,128
    9250:	5c00                	lw	s0,56(s0)
    9252:	00a8                	addi	a0,sp,72
    9254:	0000                	unimp
    9256:	00b0                	addi	a2,sp,72
    9258:	0000                	unimp
    925a:	0001                	nop
    925c:	0001185b          	0x1185b
    9260:	1c00                	addi	s0,sp,560
    9262:	0001                	nop
    9264:	0100                	addi	s0,sp,128
    9266:	5c00                	lw	s0,56(s0)
    9268:	011c                	addi	a5,sp,128
    926a:	0000                	unimp
    926c:	012c                	addi	a1,sp,136
    926e:	0000                	unimp
    9270:	0001                	nop
    9272:	00012c5b          	0x12c5b
    9276:	4000                	lw	s0,0(s0)
    9278:	0001                	nop
    927a:	1500                	addi	s0,sp,672
    927c:	7b00                	flw	fs0,48(a4)
    927e:	3100                	fld	fs0,32(a0)
    9280:	7b1a                	flw	fs6,164(sp)
    9282:	3100                	fld	fs0,32(a0)
    9284:	2125                	jal	96ac <__heap_end+0x1e1c>
    9286:	007f                	0x7f
    9288:	ff11                	bnez	a4,91a4 <__heap_end+0x1914>
    928a:	ffff                	0xffff
    928c:	244f1a7b          	0x244f1a7b
    9290:	9f21                	0x9f21
    9292:	0238                	addi	a4,sp,264
    9294:	0000                	unimp
    9296:	0240                	addi	s0,sp,260
    9298:	0000                	unimp
    929a:	0001                	nop
    929c:	0002b05b          	0x2b05b
    92a0:	d000                	sw	s0,32(s0)
    92a2:	0002                	c.slli64	zero
    92a4:	0100                	addi	s0,sp,128
    92a6:	5c00                	lw	s0,56(s0)
    92a8:	02d0                	addi	a2,sp,324
    92aa:	0000                	unimp
    92ac:	02f0                	addi	a2,sp,332
    92ae:	0000                	unimp
    92b0:	0001                	nop
    92b2:	0002f05b          	0x2f05b
    92b6:	f800                	fsw	fs0,48(s0)
    92b8:	0002                	c.slli64	zero
    92ba:	0100                	addi	s0,sp,128
    92bc:	5e00                	lw	s0,56(a2)
    92be:	0318                	addi	a4,sp,384
    92c0:	0000                	unimp
    92c2:	0324                	addi	s1,sp,392
    92c4:	0000                	unimp
    92c6:	0024                	addi	s1,sp,8
    92c8:	4b40007b          	0x4b40007b
    92cc:	2224                	fld	fs1,64(a2)
    92ce:	007c007b          	0x7c007b
    92d2:	4022                	0x4022
    92d4:	2b22244b          	fnmsub.d	fs0,ft4,fs2,ft5,rdn
    92d8:	ff08                	fsw	fa0,56(a4)
    92da:	7e1a                	flw	ft8,164(sp)
    92dc:	2200                	fld	fs0,0(a2)
    92de:	007f                	0x7f
    92e0:	4f22                	lw	t5,8(sp)
    92e2:	7b24                	flw	fs1,112(a4)
    92e4:	7c00                	flw	fs0,56(s0)
    92e6:	2200                	fld	fs0,0(a2)
    92e8:	2531                	jal	98f4 <__heap_end+0x2064>
    92ea:	9f21                	0x9f21
    92ec:	0324                	addi	s1,sp,392
    92ee:	0000                	unimp
    92f0:	032c                	addi	a1,sp,392
    92f2:	0000                	unimp
    92f4:	001e                	c.slli	zero,0x7
    92f6:	4b40007b          	0x4b40007b
    92fa:	2224                	fld	fs1,64(a2)
    92fc:	007c                	addi	a5,sp,12
    92fe:	4b40                	lw	s0,20(a4)
    9300:	2224                	fld	fs1,64(a2)
    9302:	1aff082b          	0x1aff082b
    9306:	007e                	c.slli	zero,0x1f
    9308:	7f22                	flw	ft10,40(sp)
    930a:	2200                	fld	fs0,0(a2)
    930c:	007c244f          	fnmadd.s	fs0,fs8,ft7,ft0,rdn
    9310:	2531                	jal	991c <__heap_end+0x208c>
    9312:	9f21                	0x9f21
    9314:	032c                	addi	a1,sp,392
    9316:	0000                	unimp
    9318:	0330                	addi	a2,sp,392
    931a:	0000                	unimp
    931c:	007b001b          	0x7b001b
    9320:	4b40                	lw	s0,20(a4)
    9322:	2224                	fld	fs1,64(a2)
    9324:	007c                	addi	a5,sp,12
    9326:	4b40                	lw	s0,20(a4)
    9328:	2224                	fld	fs1,64(a2)
    932a:	1aff082b          	0x1aff082b
    932e:	007f                	0x7f
    9330:	4f22                	lw	t5,8(sp)
    9332:	7c24                	flw	fs1,120(s0)
    9334:	3100                	fld	fs0,32(a0)
    9336:	2125                	jal	975e <__heap_end+0x1ece>
    9338:	709f 0003 7400      	0x74000003709f
    933e:	01000003          	lb	zero,16(zero) # 10 <_start>
    9342:	5c00                	lw	s0,56(s0)
    9344:	0374                	addi	a3,sp,396
    9346:	0000                	unimp
    9348:	037c                	addi	a5,sp,396
    934a:	0000                	unimp
    934c:	0001                	nop
    934e:	0003c85b          	0x3c85b
    9352:	cc00                	sw	s0,24(s0)
    9354:	01000003          	lb	zero,16(zero) # 10 <_start>
    9358:	5c00                	lw	s0,56(s0)
    935a:	03cc                	addi	a1,sp,452
    935c:	0000                	unimp
    935e:	03e8                	addi	a0,sp,460
    9360:	0000                	unimp
    9362:	0001                	nop
    9364:	00046c5b          	0x46c5b
    9368:	7400                	flw	fs0,40(s0)
    936a:	0004                	0x4
    936c:	0100                	addi	s0,sp,128
    936e:	5b00                	lw	s0,48(a4)
    9370:	04e4                	addi	s1,sp,588
    9372:	0000                	unimp
    9374:	04f0                	addi	a2,sp,588
    9376:	0000                	unimp
    9378:	0001                	nop
    937a:	00054c5b          	0x54c5b
    937e:	5800                	lw	s0,48(s0)
    9380:	0005                	c.nop	1
    9382:	0100                	addi	s0,sp,128
    9384:	5c00                	lw	s0,56(s0)
    9386:	0574                	addi	a3,sp,652
    9388:	0000                	unimp
    938a:	0590                	addi	a2,sp,704
    938c:	0000                	unimp
    938e:	0001                	nop
    9390:	9060                	0x9060
    9392:	0005                	c.nop	1
    9394:	9400                	0x9400
    9396:	0005                	c.nop	1
    9398:	0100                	addi	s0,sp,128
    939a:	5b00                	lw	s0,48(a4)
    939c:	0594                	addi	a3,sp,704
    939e:	0000                	unimp
    93a0:	05a8                	addi	a0,sp,712
    93a2:	0000                	unimp
    93a4:	0001                	nop
    93a6:	d860                	sw	s0,116(s0)
    93a8:	0005                	c.nop	1
    93aa:	e800                	fsw	fs0,16(s0)
    93ac:	0005                	c.nop	1
    93ae:	0100                	addi	s0,sp,128
    93b0:	6300                	flw	fs0,0(a4)
    93b2:	05e8                	addi	a0,sp,716
    93b4:	0000                	unimp
    93b6:	05f0                	addi	a2,sp,716
    93b8:	0000                	unimp
    93ba:	0006                	c.slli	zero,0x1
    93bc:	007c007b          	0x7c007b
    93c0:	9f1c                	0x9f1c
    93c2:	05f4                	addi	a3,sp,716
    93c4:	0000                	unimp
    93c6:	0628                	addi	a0,sp,776
    93c8:	0000                	unimp
    93ca:	0001                	nop
    93cc:	00062863          	0x62863
    93d0:	5000                	lw	s0,32(s0)
    93d2:	0006                	c.slli	zero,0x1
    93d4:	0100                	addi	s0,sp,128
    93d6:	5b00                	lw	s0,48(a4)
    93d8:	065c                	addi	a5,sp,772
    93da:	0000                	unimp
    93dc:	0668                	addi	a0,sp,780
    93de:	0000                	unimp
    93e0:	0001                	nop
    93e2:	0006685b          	0x6685b
    93e6:	9400                	0x9400
    93e8:	0006                	c.slli	zero,0x1
    93ea:	0100                	addi	s0,sp,128
    93ec:	6300                	flw	fs0,0(a4)
    93ee:	0694                	addi	a3,sp,832
    93f0:	0000                	unimp
    93f2:	069c                	addi	a5,sp,832
    93f4:	0000                	unimp
    93f6:	0002                	c.slli64	zero
    93f8:	9f30                	0x9f30
    93fa:	069c                	addi	a5,sp,832
    93fc:	0000                	unimp
    93fe:	06e4                	addi	s1,sp,844
    9400:	0000                	unimp
    9402:	0001                	nop
    9404:	0007005b          	0x7005b
    9408:	0400                	addi	s0,sp,512
    940a:	24000007          	vluxseg2ei8.v	v0,(zero),v0,v0.t
    940e:	7b00                	flw	fs0,48(a4)
    9410:	4000                	lw	s0,0(s0)
    9412:	7b22244b          	fnmsub.d	fs0,ft4,fs2,fa5,rdn
    9416:	7c00                	flw	fs0,56(s0)
    9418:	2200                	fld	fs0,0(a2)
    941a:	4b40                	lw	s0,20(a4)
    941c:	2224                	fld	fs1,64(a2)
    941e:	1aff082b          	0x1aff082b
    9422:	007e                	c.slli	zero,0x1f
    9424:	7f22                	flw	ft10,40(sp)
    9426:	2200                	fld	fs0,0(a2)
    9428:	007b244f          	fnmadd.s	fs0,fs6,ft7,ft0,rdn
    942c:	007c                	addi	a5,sp,12
    942e:	3122                	fld	ft2,40(sp)
    9430:	2125                	jal	9858 <__heap_end+0x1fc8>
    9432:	0c9f 0007 3c00      	0x3c0000070c9f
    9438:	01000007          	vle8ff.v	v0,(zero),v0.t
    943c:	5b00                	lw	s0,48(a4)
    943e:	073c                	addi	a5,sp,904
    9440:	0000                	unimp
    9442:	074c                	addi	a1,sp,900
    9444:	0000                	unimp
    9446:	0001                	nop
    9448:	605a                	flw	ft0,148(sp)
    944a:	a0000007          	vlseg6e8.v	v0,(zero),v0.t
    944e:	01000007          	vle8ff.v	v0,(zero),v0.t
    9452:	5a00                	lw	s0,48(a2)
    9454:	07b8                	addi	a4,sp,968
    9456:	0000                	unimp
    9458:	07c0                	addi	s0,sp,964
    945a:	0000                	unimp
    945c:	0001                	nop
    945e:	c85c                	sw	a5,20(s0)
    9460:	d0000007          	vlseg7e128.v	v0,(zero),v0.t
    9464:	01000007          	vle8ff.v	v0,(zero),v0.t
    9468:	6000                	flw	fs0,0(s0)
    946a:	07e0                	addi	s0,sp,972
    946c:	0000                	unimp
    946e:	07e8                	addi	a0,sp,972
    9470:	0000                	unimp
    9472:	0001                	nop
    9474:	0000005b          	0x5b
    9478:	0000                	unimp
    947a:	0000                	unimp
    947c:	a400                	fsd	fs0,8(s0)
    947e:	0000                	unimp
    9480:	b000                	fsd	fs0,32(s0)
    9482:	0000                	unimp
    9484:	0100                	addi	s0,sp,128
    9486:	5f00                	lw	s0,56(a4)
    9488:	0118                	addi	a4,sp,128
    948a:	0000                	unimp
    948c:	0128                	addi	a0,sp,136
    948e:	0000                	unimp
    9490:	0001                	nop
    9492:	285f 0001 2c00      	0x2c000001285f
    9498:	0001                	nop
    949a:	0900                	addi	s0,sp,144
    949c:	7f00                	flw	fs0,56(a4)
    949e:	1100                	addi	s0,sp,160
    94a0:	ffff                	0xffff
    94a2:	7bff                	0x7bff
    94a4:	9f1a                	add	t5,t5,t1
    94a6:	012c                	addi	a1,sp,136
    94a8:	0000                	unimp
    94aa:	0140                	addi	s0,sp,132
    94ac:	0000                	unimp
    94ae:	007f000b          	0x7f000b
    94b2:	ff11                	bnez	a4,93ce <__heap_end+0x1b3e>
    94b4:	ffff                	0xffff
    94b6:	25311a7b          	0x25311a7b
    94ba:	389f 0002 4000      	0x40000002389f
    94c0:	0002                	c.slli64	zero
    94c2:	0100                	addi	s0,sp,128
    94c4:	5f00                	lw	s0,56(a4)
    94c6:	02b0                	addi	a2,sp,328
    94c8:	0000                	unimp
    94ca:	02f8                	addi	a4,sp,332
    94cc:	0000                	unimp
    94ce:	0001                	nop
    94d0:	185f 0003 2400      	0x24000003185f
    94d6:	1c000003          	lb	zero,448(zero) # 1c0 <calc_func+0xa0>
    94da:	7b00                	flw	fs0,48(a4)
    94dc:	4000                	lw	s0,0(s0)
    94de:	7b22244b          	fnmsub.d	fs0,ft4,fs2,fa5,rdn
    94e2:	7c00                	flw	fs0,56(s0)
    94e4:	2200                	fld	fs0,0(a2)
    94e6:	4b40                	lw	s0,20(a4)
    94e8:	2224                	fld	fs1,64(a2)
    94ea:	1aff082b          	0x1aff082b
    94ee:	007e                	c.slli	zero,0x1f
    94f0:	7f22                	flw	ft10,40(sp)
    94f2:	2200                	fld	fs0,0(a2)
    94f4:	2531                	jal	9b00 <__heap_end+0x2270>
    94f6:	249f 0003 2c00      	0x2c000003249f
    94fc:	19000003          	lb	zero,400(zero) # 190 <calc_func+0x70>
    9500:	7b00                	flw	fs0,48(a4)
    9502:	4000                	lw	s0,0(s0)
    9504:	7c22244b          	fnmsub.h	fs0,ft4,ft2,fa5,rdn
    9508:	4000                	lw	s0,0(s0)
    950a:	2b22244b          	fnmsub.d	fs0,ft4,fs2,ft5,rdn
    950e:	ff08                	fsw	fa0,56(a4)
    9510:	7e1a                	flw	ft8,164(sp)
    9512:	2200                	fld	fs0,0(a2)
    9514:	007f                	0x7f
    9516:	3122                	fld	ft2,40(sp)
    9518:	9f25                	0x9f25
    951a:	032c                	addi	a1,sp,392
    951c:	0000                	unimp
    951e:	0330                	addi	a2,sp,392
    9520:	0000                	unimp
    9522:	0016                	c.slli	zero,0x5
    9524:	4b40007b          	0x4b40007b
    9528:	2224                	fld	fs1,64(a2)
    952a:	007c                	addi	a5,sp,12
    952c:	4b40                	lw	s0,20(a4)
    952e:	2224                	fld	fs1,64(a2)
    9530:	1aff082b          	0x1aff082b
    9534:	007f                	0x7f
    9536:	3122                	fld	ft2,40(sp)
    9538:	9f25                	0x9f25
    953a:	0370                	addi	a2,sp,396
    953c:	0000                	unimp
    953e:	037c                	addi	a5,sp,396
    9540:	0000                	unimp
    9542:	0001                	nop
    9544:	c85f 0003 e000      	0xe0000003c85f
    954a:	01000003          	lb	zero,16(zero) # 10 <_start>
    954e:	5f00                	lw	s0,56(a4)
    9550:	03e0                	addi	s0,sp,460
    9552:	0000                	unimp
    9554:	03e8                	addi	a0,sp,460
    9556:	0000                	unimp
    9558:	0001                	nop
    955a:	6c62                	flw	fs8,24(sp)
    955c:	0004                	0x4
    955e:	7400                	flw	fs0,40(s0)
    9560:	0004                	0x4
    9562:	0100                	addi	s0,sp,128
    9564:	5f00                	lw	s0,56(a4)
    9566:	04e4                	addi	s1,sp,588
    9568:	0000                	unimp
    956a:	04f0                	addi	a2,sp,588
    956c:	0000                	unimp
    956e:	0001                	nop
    9570:	4c5f 0005 5800      	0x580000054c5f
    9576:	0005                	c.nop	1
    9578:	0100                	addi	s0,sp,128
    957a:	5e00                	lw	s0,56(a2)
    957c:	0574                	addi	a3,sp,652
    957e:	0000                	unimp
    9580:	0590                	addi	a2,sp,704
    9582:	0000                	unimp
    9584:	0001                	nop
    9586:	905a                	c.add	zero,s6
    9588:	0005                	c.nop	1
    958a:	9400                	0x9400
    958c:	0005                	c.nop	1
    958e:	0100                	addi	s0,sp,128
    9590:	5f00                	lw	s0,56(a4)
    9592:	0594                	addi	a3,sp,704
    9594:	0000                	unimp
    9596:	05a8                	addi	a0,sp,712
    9598:	0000                	unimp
    959a:	0001                	nop
    959c:	d85a                	sw	s6,48(sp)
    959e:	0005                	c.nop	1
    95a0:	1c00                	addi	s0,sp,560
    95a2:	0006                	c.slli	zero,0x1
    95a4:	0100                	addi	s0,sp,128
    95a6:	6200                	flw	fs0,0(a2)
    95a8:	0624                	addi	s1,sp,776
    95aa:	0000                	unimp
    95ac:	0660                	addi	s0,sp,780
    95ae:	0000                	unimp
    95b0:	0001                	nop
    95b2:	685f 0006 9400      	0x94000006685f
    95b8:	0006                	c.slli	zero,0x1
    95ba:	0100                	addi	s0,sp,128
    95bc:	6200                	flw	fs0,0(a2)
    95be:	0694                	addi	a3,sp,832
    95c0:	0000                	unimp
    95c2:	06c8                	addi	a0,sp,836
    95c4:	0000                	unimp
    95c6:	0001                	nop
    95c8:	c85f 0006 d000      	0xd0000006c85f
    95ce:	0006                	c.slli	zero,0x1
    95d0:	0200                	addi	s0,sp,256
    95d2:	3000                	fld	fs0,32(s0)
    95d4:	d09f 0006 e400      	0xe4000006d09f
    95da:	0006                	c.slli	zero,0x1
    95dc:	0100                	addi	s0,sp,128
    95de:	5f00                	lw	s0,56(a4)
    95e0:	0700                	addi	s0,sp,896
    95e2:	0000                	unimp
    95e4:	0704                	addi	s1,sp,896
    95e6:	0000                	unimp
    95e8:	001c                	0x1c
    95ea:	4b40007b          	0x4b40007b
    95ee:	2224                	fld	fs1,64(a2)
    95f0:	007c007b          	0x7c007b
    95f4:	4022                	0x4022
    95f6:	2b22244b          	fnmsub.d	fs0,ft4,fs2,ft5,rdn
    95fa:	ff08                	fsw	fa0,56(a4)
    95fc:	7e1a                	flw	ft8,164(sp)
    95fe:	2200                	fld	fs0,0(a2)
    9600:	007f                	0x7f
    9602:	3122                	fld	ft2,40(sp)
    9604:	9f25                	0x9f25
    9606:	070c                	addi	a1,sp,896
    9608:	0000                	unimp
    960a:	0718                	addi	a4,sp,896
    960c:	0000                	unimp
    960e:	0001                	nop
    9610:	185f 0007 3000      	0x30000007185f
    9616:	09000007          	vlse8.v	v0,(zero),a6,v0.t
    961a:	7f00                	flw	fs0,56(a4)
    961c:	1100                	addi	s0,sp,160
    961e:	ffff                	0xffff
    9620:	7bff                	0x7bff
    9622:	9f1a                	add	t5,t5,t1
    9624:	0730                	addi	a2,sp,904
    9626:	0000                	unimp
    9628:	0750                	addi	a2,sp,900
    962a:	0000                	unimp
    962c:	0001                	nop
    962e:	605f 0007 6c00      	0x6c000007605f
    9634:	01000007          	vle8ff.v	v0,(zero),v0.t
    9638:	5f00                	lw	s0,56(a4)
    963a:	07b8                	addi	a4,sp,968
    963c:	0000                	unimp
    963e:	07c0                	addi	s0,sp,964
    9640:	0000                	unimp
    9642:	0001                	nop
    9644:	c85e                	sw	s7,16(sp)
    9646:	d0000007          	vlseg7e128.v	v0,(zero),v0.t
    964a:	01000007          	vle8ff.v	v0,(zero),v0.t
    964e:	5a00                	lw	s0,48(a2)
    9650:	07e0                	addi	s0,sp,972
    9652:	0000                	unimp
    9654:	07e4                	addi	s1,sp,972
    9656:	0000                	unimp
    9658:	0009                	c.nop	2
    965a:	007f                	0x7f
    965c:	ff11                	bnez	a4,9578 <__heap_end+0x1ce8>
    965e:	ffff                	0xffff
    9660:	009f1a7b          	0x9f1a7b
    9664:	0000                	unimp
    9666:	0000                	unimp
    9668:	0000                	unimp
    966a:	7c00                	flw	fs0,56(s0)
    966c:	0000                	unimp
    966e:	9000                	0x9000
    9670:	0000                	unimp
    9672:	0100                	addi	s0,sp,128
    9674:	6000                	flw	fs0,0(s0)
    9676:	0090                	addi	a2,sp,64
    9678:	0000                	unimp
    967a:	009c                	addi	a5,sp,64
    967c:	0000                	unimp
    967e:	0001                	nop
    9680:	9c5a                	add	s8,s8,s6
    9682:	0000                	unimp
    9684:	a800                	fsd	fs0,16(s0)
    9686:	0000                	unimp
    9688:	0300                	addi	s0,sp,384
    968a:	8000                	0x8000
    968c:	9f7f                	0x9f7f
    968e:	00b0                	addi	a2,sp,72
    9690:	0000                	unimp
    9692:	00b8                	addi	a4,sp,72
    9694:	0000                	unimp
    9696:	0001                	nop
    9698:	c05a                	sw	s6,0(sp)
    969a:	0000                	unimp
    969c:	d400                	sw	s0,40(s0)
    969e:	0000                	unimp
    96a0:	0100                	addi	s0,sp,128
    96a2:	6000                	flw	fs0,0(s0)
    96a4:	00d4                	addi	a3,sp,68
    96a6:	0000                	unimp
    96a8:	0108                	addi	a0,sp,128
    96aa:	0000                	unimp
    96ac:	0001                	nop
    96ae:	5c5a                	lw	s8,180(sp)
    96b0:	0001                	nop
    96b2:	7800                	flw	fs0,48(s0)
    96b4:	0001                	nop
    96b6:	0100                	addi	s0,sp,128
    96b8:	5a00                	lw	s0,48(a2)
    96ba:	0190                	addi	a2,sp,192
    96bc:	0000                	unimp
    96be:	019c                	addi	a5,sp,192
    96c0:	0000                	unimp
    96c2:	0001                	nop
    96c4:	9c5a                	add	s8,s8,s6
    96c6:	0001                	nop
    96c8:	a400                	fsd	fs0,8(s0)
    96ca:	0001                	nop
    96cc:	0600                	addi	s0,sp,768
    96ce:	7800                	flw	fs0,48(s0)
    96d0:	7600                	flw	fs0,40(a2)
    96d2:	1c00                	addi	s0,sp,560
    96d4:	a49f 0001 b400      	0xb4000001a49f
    96da:	0001                	nop
    96dc:	0100                	addi	s0,sp,128
    96de:	5a00                	lw	s0,48(a2)
    96e0:	01b4                	addi	a3,sp,200
    96e2:	0000                	unimp
    96e4:	01d4                	addi	a3,sp,196
    96e6:	0000                	unimp
    96e8:	0001                	nop
    96ea:	e05d                	bnez	s0,9790 <__heap_end+0x1f00>
    96ec:	0001                	nop
    96ee:	f400                	fsw	fs0,40(s0)
    96f0:	0001                	nop
    96f2:	0100                	addi	s0,sp,128
    96f4:	5a00                	lw	s0,48(a2)
    96f6:	01f4                	addi	a3,sp,204
    96f8:	0000                	unimp
    96fa:	0280                	addi	s0,sp,320
    96fc:	0000                	unimp
    96fe:	0001                	nop
    9700:	805d                	srli	s0,s0,0x17
    9702:	0002                	c.slli64	zero
    9704:	d000                	sw	s0,32(s0)
    9706:	0002                	c.slli64	zero
    9708:	0600                	addi	s0,sp,768
    970a:	7800                	flw	fs0,48(s0)
    970c:	7600                	flw	fs0,40(a2)
    970e:	1c00                	addi	s0,sp,560
    9710:	f89f 0002 0400      	0x4000002f89f
    9716:	06000003          	lb	zero,96(zero) # 60 <__do_global_dtors_aux+0x4>
    971a:	7800                	flw	fs0,48(s0)
    971c:	7600                	flw	fs0,40(a2)
    971e:	1c00                	addi	s0,sp,560
    9720:	189f 0003 4400      	0x44000003189f
    9726:	06000003          	lb	zero,96(zero) # 60 <__do_global_dtors_aux+0x4>
    972a:	7800                	flw	fs0,48(s0)
    972c:	7600                	flw	fs0,40(a2)
    972e:	1c00                	addi	s0,sp,560
    9730:	449f 0003 4800      	0x48000003449f
    9736:	07000003          	lb	zero,112(zero) # 70 <__do_global_dtors_aux+0x14>
    973a:	7600                	flw	fs0,40(a2)
    973c:	2000                	fld	fs0,0(s0)
    973e:	007d                	c.nop	31
    9740:	9f22                	add	t5,t5,s0
    9742:	06e4                	addi	s1,sp,844
    9744:	0000                	unimp
    9746:	06f4                	addi	a3,sp,844
    9748:	0000                	unimp
    974a:	0001                	nop
    974c:	f45a                	fsw	fs6,40(sp)
    974e:	0006                	c.slli	zero,0x1
    9750:	0400                	addi	s0,sp,512
    9752:	06000007          	vluxei8.v	v0,(zero),v0
    9756:	7800                	flw	fs0,48(s0)
    9758:	7600                	flw	fs0,40(a2)
    975a:	1c00                	addi	s0,sp,560
    975c:	009f 0000 0000      	0x9f
    9762:	0000                	unimp
    9764:	9800                	0x9800
    9766:	0000                	unimp
    9768:	a800                	fsd	fs0,16(s0)
    976a:	0000                	unimp
    976c:	0100                	addi	s0,sp,128
    976e:	5c00                	lw	s0,56(s0)
	...
    9778:	010c                	addi	a1,sp,128
    977a:	0000                	unimp
    977c:	011c                	addi	a5,sp,128
    977e:	0000                	unimp
    9780:	0001                	nop
    9782:	005c                	addi	a5,sp,4
    9784:	0000                	unimp
    9786:	0000                	unimp
    9788:	0000                	unimp
    978a:	bc00                	fsd	fs0,56(s0)
    978c:	0001                	nop
    978e:	cc00                	sw	s0,24(s0)
    9790:	0001                	nop
    9792:	0100                	addi	s0,sp,128
    9794:	5b00                	lw	s0,48(a4)
	...
    979e:	022c                	addi	a1,sp,264
    97a0:	0000                	unimp
    97a2:	0240                	addi	s0,sp,260
    97a4:	0000                	unimp
    97a6:	0001                	nop
    97a8:	0000005b          	0x5b
    97ac:	0000                	unimp
    97ae:	0000                	unimp
    97b0:	a400                	fsd	fs0,8(s0)
    97b2:	0002                	c.slli64	zero
    97b4:	d000                	sw	s0,32(s0)
    97b6:	0002                	c.slli64	zero
    97b8:	0100                	addi	s0,sp,128
    97ba:	5c00                	lw	s0,56(s0)
	...
    97c4:	0318                	addi	a4,sp,384
    97c6:	0000                	unimp
    97c8:	0324                	addi	s1,sp,392
    97ca:	0000                	unimp
    97cc:	0006                	c.slli	zero,0x1
    97ce:	007c007b          	0x7c007b
    97d2:	9f22                	add	t5,t5,s0
    97d4:	0324                	addi	s1,sp,392
    97d6:	0000                	unimp
    97d8:	0338                	addi	a4,sp,392
    97da:	0000                	unimp
    97dc:	0001                	nop
    97de:	005c                	addi	a5,sp,4
    97e0:	04000007          	vluxei8.v	v0,(zero),v0,v0.t
    97e4:	06000007          	vluxei8.v	v0,(zero),v0
    97e8:	7b00                	flw	fs0,48(a4)
    97ea:	7c00                	flw	fs0,56(s0)
    97ec:	2200                	fld	fs0,0(a2)
    97ee:	009f 0000 0000      	0x9f
    97f4:	0000                	unimp
    97f6:	4800                	lw	s0,16(s0)
    97f8:	5c000003          	lb	zero,1472(zero) # 5c0 <core_bench_list+0x9c>
    97fc:	06000003          	lb	zero,96(zero) # 60 <__do_global_dtors_aux+0x4>
    9800:	7800                	flw	fs0,48(s0)
    9802:	7600                	flw	fs0,40(a2)
    9804:	1c00                	addi	s0,sp,560
    9806:	5c9f 0003 6800      	0x680000035c9f
    980c:	01000003          	lb	zero,16(zero) # 10 <_start>
    9810:	5a00                	lw	s0,48(a2)
    9812:	0368                	addi	a0,sp,396
    9814:	0000                	unimp
    9816:	0374                	addi	a3,sp,396
    9818:	0000                	unimp
    981a:	7f800003          	lb	zero,2040(zero) # 7f8 <core_list_init+0x4c>
    981e:	7c9f 0003 b800      	0xb80000037c9f
    9824:	01000003          	lb	zero,16(zero) # 10 <_start>
    9828:	5a00                	lw	s0,48(a2)
    982a:	03e8                	addi	a0,sp,460
    982c:	0000                	unimp
    982e:	0400                	addi	s0,sp,512
    9830:	0000                	unimp
    9832:	0006                	c.slli	zero,0x1
    9834:	0078                	addi	a4,sp,12
    9836:	0076                	c.slli	zero,0x1d
    9838:	9f1c                	0x9f1c
    983a:	0400                	addi	s0,sp,512
    983c:	0000                	unimp
    983e:	041c                	addi	a5,sp,512
    9840:	0000                	unimp
    9842:	0001                	nop
    9844:	345a                	fld	fs0,432(sp)
    9846:	0004                	0x4
    9848:	4000                	lw	s0,0(s0)
    984a:	0004                	0x4
    984c:	0100                	addi	s0,sp,128
    984e:	5a00                	lw	s0,48(a2)
    9850:	0440                	addi	s0,sp,516
    9852:	0000                	unimp
    9854:	0448                	addi	a0,sp,516
    9856:	0000                	unimp
    9858:	0006                	c.slli	zero,0x1
    985a:	0078                	addi	a4,sp,12
    985c:	0076                	c.slli	zero,0x1d
    985e:	9f1c                	0x9f1c
    9860:	0448                	addi	a0,sp,516
    9862:	0000                	unimp
    9864:	0458                	addi	a4,sp,516
    9866:	0000                	unimp
    9868:	0001                	nop
    986a:	585a                	lw	a6,180(sp)
    986c:	0004                	0x4
    986e:	7c00                	flw	fs0,56(s0)
    9870:	0004                	0x4
    9872:	0100                	addi	s0,sp,128
    9874:	6000                	flw	fs0,0(s0)
    9876:	048c                	addi	a1,sp,576
    9878:	0000                	unimp
    987a:	04a0                	addi	s0,sp,584
    987c:	0000                	unimp
    987e:	0001                	nop
    9880:	a05a                	fsd	fs6,0(sp)
    9882:	0004                	0x4
    9884:	3000                	fld	fs0,32(s0)
    9886:	0005                	c.nop	1
    9888:	0100                	addi	s0,sp,128
    988a:	6000                	flw	fs0,0(s0)
    988c:	0530                	addi	a2,sp,648
    988e:	0000                	unimp
    9890:	0558                	addi	a4,sp,644
    9892:	0000                	unimp
    9894:	0006                	c.slli	zero,0x1
    9896:	0078                	addi	a4,sp,12
    9898:	0076                	c.slli	zero,0x1d
    989a:	9f1c                	0x9f1c
    989c:	0560                	addi	s0,sp,652
    989e:	0000                	unimp
    98a0:	05f8                	addi	a4,sp,716
    98a2:	0000                	unimp
    98a4:	0006                	c.slli	zero,0x1
    98a6:	0078                	addi	a4,sp,12
    98a8:	0076                	c.slli	zero,0x1d
    98aa:	9f1c                	0x9f1c
    98ac:	0668                	addi	a0,sp,780
    98ae:	0000                	unimp
    98b0:	0678                	addi	a4,sp,780
    98b2:	0000                	unimp
    98b4:	0006                	c.slli	zero,0x1
    98b6:	0078                	addi	a4,sp,12
    98b8:	0076                	c.slli	zero,0x1d
    98ba:	9f1c                	0x9f1c
    98bc:	07a8                	addi	a0,sp,968
    98be:	0000                	unimp
    98c0:	07b8                	addi	a4,sp,968
    98c2:	0000                	unimp
    98c4:	0001                	nop
    98c6:	b85a                	fsd	fs6,48(sp)
    98c8:	c0000007          	vlseg7e8.v	v0,(zero),v0.t
    98cc:	06000007          	vluxei8.v	v0,(zero),v0
    98d0:	7800                	flw	fs0,48(s0)
    98d2:	7600                	flw	fs0,40(a2)
    98d4:	1c00                	addi	s0,sp,560
    98d6:	c89f 0007 e000      	0xe0000007c89f
    98dc:	06000007          	vluxei8.v	v0,(zero),v0
    98e0:	7800                	flw	fs0,48(s0)
    98e2:	7600                	flw	fs0,40(a2)
    98e4:	1c00                	addi	s0,sp,560
    98e6:	009f 0000 0000      	0x9f
    98ec:	0000                	unimp
    98ee:	6400                	flw	fs0,8(s0)
    98f0:	74000003          	lb	zero,1856(zero) # 740 <core_bench_list+0x21c>
    98f4:	01000003          	lb	zero,16(zero) # 10 <_start>
    98f8:	5c00                	lw	s0,56(s0)
	...
    9902:	03bc                	addi	a5,sp,456
    9904:	0000                	unimp
    9906:	03cc                	addi	a1,sp,452
    9908:	0000                	unimp
    990a:	0001                	nop
    990c:	005c                	addi	a5,sp,4
    990e:	0000                	unimp
    9910:	0000                	unimp
    9912:	0000                	unimp
    9914:	6000                	flw	fs0,0(s0)
    9916:	0004                	0x4
    9918:	7400                	flw	fs0,40(s0)
    991a:	0004                	0x4
    991c:	0100                	addi	s0,sp,128
    991e:	5b00                	lw	s0,48(a4)
	...
    9928:	04d8                	addi	a4,sp,580
    992a:	0000                	unimp
    992c:	04f0                	addi	a2,sp,588
    992e:	0000                	unimp
    9930:	0001                	nop
    9932:	0000005b          	0x5b
    9936:	0000                	unimp
    9938:	0000                	unimp
    993a:	6800                	flw	fs0,16(s0)
    993c:	0005                	c.nop	1
    993e:	a800                	fsd	fs0,16(s0)
    9940:	0005                	c.nop	1
    9942:	0100                	addi	s0,sp,128
    9944:	6000                	flw	fs0,0(s0)
    9946:	07c8                	addi	a0,sp,964
    9948:	0000                	unimp
    994a:	07d0                	addi	a2,sp,964
    994c:	0000                	unimp
    994e:	0001                	nop
    9950:	0060                	addi	s0,sp,12
    9952:	0000                	unimp
    9954:	0000                	unimp
    9956:	0000                	unimp
    9958:	8400                	0x8400
    995a:	0005                	c.nop	1
    995c:	9400                	0x9400
    995e:	0005                	c.nop	1
    9960:	0100                	addi	s0,sp,128
    9962:	5b00                	lw	s0,48(a4)
	...
    996c:	05cc                	addi	a1,sp,708
    996e:	0000                	unimp
    9970:	05e8                	addi	a0,sp,716
    9972:	0000                	unimp
    9974:	0001                	nop
    9976:	0005e863          	bltu	a1,zero,9986 <__heap_end+0x20f6>
    997a:	f000                	fsw	fs0,32(s0)
    997c:	0005                	c.nop	1
    997e:	0600                	addi	s0,sp,768
    9980:	7b00                	flw	fs0,48(a4)
    9982:	7c00                	flw	fs0,56(s0)
    9984:	1c00                	addi	s0,sp,560
    9986:	689f 0006 7c00      	0x7c000006689f
    998c:	0006                	c.slli	zero,0x1
    998e:	0100                	addi	s0,sp,128
    9990:	6300                	flw	fs0,0(a4)
	...
    999a:	05e8                	addi	a0,sp,716
    999c:	0000                	unimp
    999e:	05f8                	addi	a4,sp,716
    99a0:	0000                	unimp
    99a2:	0001                	nop
    99a4:	00000063          	beqz	zero,99a4 <__heap_end+0x2114>
    99a8:	0000                	unimp
    99aa:	0000                	unimp
    99ac:	0400                	addi	s0,sp,512
    99ae:	0006                	c.slli	zero,0x1
    99b0:	0800                	addi	s0,sp,16
    99b2:	0006                	c.slli	zero,0x1
    99b4:	0100                	addi	s0,sp,128
    99b6:	5a00                	lw	s0,48(a2)
    99b8:	0608                	addi	a0,sp,768
    99ba:	0000                	unimp
    99bc:	0630                	addi	a2,sp,776
    99be:	0000                	unimp
    99c0:	0001                	nop
    99c2:	305e                	fld	ft0,496(sp)
    99c4:	0006                	c.slli	zero,0x1
    99c6:	3400                	fld	fs0,40(s0)
    99c8:	0006                	c.slli	zero,0x1
    99ca:	0300                	addi	s0,sp,384
    99cc:	7a00                	flw	fs0,48(a2)
    99ce:	9f78                	0x9f78
    99d0:	0634                	addi	a3,sp,776
    99d2:	0000                	unimp
    99d4:	0668                	addi	a0,sp,780
    99d6:	0000                	unimp
    99d8:	0001                	nop
    99da:	845d                	srai	s0,s0,0x17
    99dc:	0006                	c.slli	zero,0x1
    99de:	8c00                	0x8c00
    99e0:	0006                	c.slli	zero,0x1
    99e2:	0100                	addi	s0,sp,128
    99e4:	5a00                	lw	s0,48(a2)
    99e6:	068c                	addi	a1,sp,832
    99e8:	0000                	unimp
    99ea:	069c                	addi	a5,sp,832
    99ec:	0000                	unimp
    99ee:	0001                	nop
    99f0:	9c5e                	add	s8,s8,s7
    99f2:	0006                	c.slli	zero,0x1
    99f4:	d000                	sw	s0,32(s0)
    99f6:	0006                	c.slli	zero,0x1
    99f8:	0100                	addi	s0,sp,128
    99fa:	5d00                	lw	s0,56(a0)
    99fc:	06d0                	addi	a2,sp,836
    99fe:	0000                	unimp
    9a00:	06d8                	addi	a4,sp,836
    9a02:	0000                	unimp
    9a04:	0001                	nop
    9a06:	d85e                	sw	s7,48(sp)
    9a08:	0006                	c.slli	zero,0x1
    9a0a:	e400                	fsw	fs0,8(s0)
    9a0c:	0006                	c.slli	zero,0x1
    9a0e:	0300                	addi	s0,sp,384
    9a10:	7a00                	flw	fs0,48(a2)
    9a12:	9f78                	0x9f78
	...
    9a1c:	02e8                	addi	a0,sp,332
    9a1e:	0000                	unimp
    9a20:	02f8                	addi	a4,sp,332
    9a22:	0000                	unimp
    9a24:	0001                	nop
    9a26:	005e                	c.slli	zero,0x17
    9a28:	0000                	unimp
    9a2a:	0000                	unimp
    9a2c:	0000                	unimp
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
lui     sp,%hi(__stack_top)                                             
   0:	00a4                	addi	s1,sp,72
   2:	0000                	unimp
addi    sp,sp,%lo(__stack_top)
   4:	0100                	addi	s0,sp,128
   6:	0000                	unimp
jal   zero, _start
   8:	011c                	addi	a5,sp,128
   a:	0000                	unimp
   c:	0190                	addi	a2,sp,192
	...
  16:	0000                	unimp
  18:	0210                	addi	a2,sp,256
  1a:	0000                	unimp
  1c:	0218                	addi	a4,sp,256
  1e:	0000                	unimp
  20:	0238                	addi	a4,sp,264
  22:	0000                	unimp
  24:	0240                	addi	s0,sp,260
	...
  2e:	0000                	unimp
  30:	04a8                	addi	a0,sp,584
  32:	0000                	unimp
  34:	04cc                	addi	a1,sp,580
  36:	0000                	unimp
  38:	0684                	addi	s1,sp,832
  3a:	0000                	unimp
  3c:	06a8                	addi	a0,sp,840
	...
  46:	0000                	unimp
  48:	0584                	addi	s1,sp,704
  4a:	0000                	unimp
  4c:	0584                	addi	s1,sp,704
  4e:	0000                	unimp
  50:	0588                	addi	a0,sp,704
  52:	0000                	unimp
  54:	05a8                	addi	a0,sp,712
	...
  5e:	0000                	unimp
  60:	0584                	addi	s1,sp,704
  62:	0000                	unimp
  64:	0588                	addi	a0,sp,704
  66:	0000                	unimp
  68:	05a8                	addi	a0,sp,712
  6a:	0000                	unimp
  6c:	05c0                	addi	s0,sp,708
  6e:	0000                	unimp
  70:	0664                	addi	s1,sp,780
  72:	0000                	unimp
  74:	0678                	addi	a4,sp,780
	...
  7e:	0000                	unimp
  80:	05e8                	addi	a0,sp,716
  82:	0000                	unimp
  84:	05ec                	addi	a1,sp,716
  86:	0000                	unimp
  88:	05ec                	addi	a1,sp,716
  8a:	0000                	unimp
  8c:	05f4                	addi	a3,sp,716
  8e:	0000                	unimp
  90:	05f4                	addi	a3,sp,716
  92:	0000                	unimp
  94:	0600                	addi	s0,sp,768
  96:	0000                	unimp
  98:	0604                	addi	s1,sp,768
  9a:	0000                	unimp
  9c:	0608                	addi	a0,sp,768
	...
  a6:	0000                	unimp
  a8:	0738                	addi	a4,sp,904
  aa:	0000                	unimp
  ac:	073c                	addi	a5,sp,904
  ae:	0000                	unimp
  b0:	0748                	addi	a0,sp,900
  b2:	0000                	unimp
  b4:	0770                	addi	a2,sp,908
  b6:	0000                	unimp
  b8:	0894                	addi	a3,sp,80
  ba:	0000                	unimp
  bc:	089c                	addi	a5,sp,80
	...
    if (res == NULL)
  c6:	0000                	unimp
    return a->idx - b->idx;
  c8:	0774                	addi	a3,sp,908
  ca:	0000                	unimp
  cc:	0778                	addi	a4,sp,908
  ce:	0000                	unimp
}
  d0:	077c                	addi	a5,sp,908
  d2:	0000                	unimp
  d4:	0784                	addi	s1,sp,960
  d6:	0000                	unimp
        a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16 >> 8));
  d8:	07f4                	addi	a3,sp,972
  da:	0000                	unimp
  dc:	07f8                	addi	a4,sp,972
  de:	0000                	unimp
  e0:	0800                	addi	s0,sp,16
  e2:	0000                	unimp
  e4:	0808                	addi	a0,sp,16
  e6:	0000                	unimp
  e8:	082c                	addi	a1,sp,24
  ea:	0000                	unimp
  ec:	083c                	addi	a5,sp,24
  ee:	0000                	unimp
  f0:	0844                	addi	s1,sp,20
  f2:	0000                	unimp
        b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16 >> 8));
  f4:	0848                	addi	a0,sp,20
	...
  fe:	0000                	unimp
 100:	0778                	addi	a4,sp,908
 102:	0000                	unimp
 104:	077c                	addi	a5,sp,908
 106:	0000                	unimp
 108:	0784                	addi	s1,sp,960
 10a:	0000                	unimp
 10c:	07ac                	addi	a1,sp,968
 10e:	0000                	unimp
 110:	07b0                	addi	a2,sp,968
 112:	0000                	unimp
    return a->idx - b->idx;
 114:	07e0                	addi	s0,sp,972
	...
}
 11e:	0000                	unimp
{
 120:	0778                	addi	a4,sp,908
 122:	0000                	unimp
 124:	077c                	addi	a5,sp,908
 126:	0000                	unimp
    ee_s16 data = *pdata;
 128:	0784                	addi	s1,sp,960
 12a:	0000                	unimp
{
 12c:	0788                	addi	a0,sp,960
 12e:	0000                	unimp
 130:	0788                	addi	a0,sp,960
 132:	0000                	unimp
          & 1;  /* bit 7 indicates if the function result has been cached */
 134:	0790                	addi	a2,sp,960
 136:	0000                	unimp
{
 138:	07a4                	addi	s1,sp,968
 13a:	0000                	unimp
 13c:	07a4                	addi	s1,sp,968
 13e:	0000                	unimp
    if (optype) /* if cached, use cache */
 140:	07a8                	addi	a0,sp,968
 142:	0000                	unimp
 144:	07ac                	addi	a1,sp,968
 146:	0000                	unimp
}
 148:	07b0                	addi	a2,sp,968
 14a:	0000                	unimp
        return (data & 0x007f);
 14c:	07b4                	addi	a3,sp,968
 14e:	0000                	unimp
}
 150:	07b8                	addi	a4,sp,968
 152:	0000                	unimp
 154:	07e0                	addi	s0,sp,972
	...
 15e:	0000                	unimp
 160:	0778                	addi	a4,sp,908
 162:	0000                	unimp
 164:	077c                	addi	a5,sp,908
 166:	0000                	unimp
        ee_s16 flag = data & 0x7; /* bits 0-2 is type of function to perform */
 168:	0784                	addi	s1,sp,960
 16a:	0000                	unimp
               & 0xf);       /* bits 3-6 is specific data for the operation */
 16c:	0788                	addi	a0,sp,960
 16e:	0000                	unimp
        ee_s16 dtype
 170:	07cc                	addi	a1,sp,964
 172:	0000                	unimp
        dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
 174:	07d4                	addi	a3,sp,964
	...
                retval = core_bench_state(res->size,
 17e:	0000                	unimp
 180:	0a4c                	addi	a1,sp,276
 182:	0000                	unimp
        dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
 184:	0a54                	addi	a3,sp,276
 186:	0000                	unimp
        switch (flag)
 188:	0a5c                	addi	a5,sp,276
 18a:	0000                	unimp
 18c:	0a6c                	addi	a1,sp,284
	...
        res->crc = crcu16(retval, res->crc);
 196:	0000                	unimp
 198:	0bcc                	addi	a1,sp,468
 19a:	0000                	unimp
 19c:	0bd0                	addi	a2,sp,468
 19e:	0000                	unimp
 1a0:	0bd4                	addi	a3,sp,468
 1a2:	0000                	unimp
 1a4:	0bdc                	addi	a5,sp,468
 1a6:	0000                	unimp
 1a8:	0be0                	addi	s0,sp,476
 1aa:	0000                	unimp
        *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
 1ac:	0be4                	addi	s1,sp,476
 1ae:	0000                	unimp
        retval &= 0x007f;
 1b0:	1280                	addi	s0,sp,352
 1b2:	0000                	unimp
        *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
 1b4:	12a4                	addi	s1,sp,360
	...
 1be:	0000                	unimp
 1c0:	0960                	addi	s0,sp,156
 1c2:	0000                	unimp
}
 1c4:	09e8                	addi	a0,sp,220
 1c6:	0000                	unimp
 1c8:	09e8                	addi	a0,sp,220
 1ca:	0000                	unimp
 1cc:	13b0                	addi	a2,sp,488
	...
 1d6:	0000                	unimp
 1d8:	062c                	addi	a1,sp,776
 1da:	0000                	unimp
 1dc:	0634                	addi	a3,sp,776
 1de:	0000                	unimp
                retval = core_bench_state(res->size,
 1e0:	063c                	addi	a5,sp,776
 1e2:	0000                	unimp
 1e4:	0658                	addi	a4,sp,772
	...
 1ee:	0000                	unimp
 1f0:	071c                	addi	a5,sp,896
 1f2:	0000                	unimp
 1f4:	0758                	addi	a4,sp,900
 1f6:	0000                	unimp
 1f8:	075c                	addi	a5,sp,900
 1fa:	0000                	unimp
 1fc:	0784                	addi	s1,sp,960
 1fe:	0000                	unimp
 200:	079c                	addi	a5,sp,960
 202:	0000                	unimp
 204:	07a0                	addi	s0,sp,968
	...
 20e:	0000                	unimp
 210:	0784                	addi	s1,sp,960
 212:	0000                	unimp
                if (res->crcstate == 0)
 214:	079c                	addi	a5,sp,960
 216:	0000                	unimp
        res->crc = crcu16(retval, res->crc);
 218:	07a0                	addi	s0,sp,968
 21a:	0000                	unimp
                    res->crcstate = retval;
 21c:	07e4                	addi	s1,sp,972
 21e:	0000                	unimp
 220:	0800                	addi	s0,sp,16
 222:	0000                	unimp
                retval = core_bench_matrix(&(res->mat), dtype, res->crc);
 224:	0808                	addi	a0,sp,16
 226:	0000                	unimp
 228:	0ac8                	addi	a0,sp,340
 22a:	0000                	unimp
 22c:	0ac8                	addi	a0,sp,340
	...
 236:	0000                	unimp
 238:	07e4                	addi	s1,sp,972
 23a:	0000                	unimp
                if (res->crcmatrix == 0)
 23c:	0800                	addi	s0,sp,16
 23e:	0000                	unimp
        res->crc = crcu16(retval, res->crc);
 240:	0808                	addi	a0,sp,16
 242:	0000                	unimp
                    res->crcmatrix = retval;
 244:	0864                	addi	s1,sp,28
 246:	0000                	unimp
 248:	0898                	addi	a4,sp,80
 24a:	0000                	unimp
        res->crc = crcu16(retval, res->crc);
 24c:	08a0                	addi	s0,sp,88
 24e:	0000                	unimp
 250:	0ac8                	addi	a0,sp,340
 252:	0000                	unimp
{
 254:	0ac8                	addi	a0,sp,340
	...
 25e:	0000                	unimp
    ee_s16 val1 = calc_func(&(a->data16), res);
 260:	0884                	addi	s1,sp,80
 262:	0000                	unimp
{
 264:	0884                	addi	s1,sp,80
 266:	0000                	unimp
 268:	0894                	addi	a3,sp,80
 26a:	0000                	unimp
 26c:	0898                	addi	a4,sp,80
 26e:	0000                	unimp
    ee_s16 val1 = calc_func(&(a->data16), res);
 270:	08a0                	addi	s0,sp,88
 272:	0000                	unimp
 274:	08fc                	addi	a5,sp,92
 276:	0000                	unimp
    ee_s16 val2 = calc_func(&(b->data16), res);
 278:	0af0                	addi	a2,sp,348
 27a:	0000                	unimp
 27c:	0af0                	addi	a2,sp,348
	...
 286:	0000                	unimp
}
 288:	091c                	addi	a5,sp,144
 28a:	0000                	unimp
 28c:	091c                	addi	a5,sp,144
 28e:	0000                	unimp
 290:	0930                	addi	a2,sp,152
 292:	0000                	unimp
 294:	099c                	addi	a5,sp,208
 296:	0000                	unimp
 298:	0b14                	addi	a3,sp,400
 29a:	0000                	unimp
 29c:	0b14                	addi	a3,sp,400
	...
    to->idx    = from->idx;
 2a6:	0000                	unimp
    to->data16 = from->data16;
 2a8:	09c0                	addi	s0,sp,212
 2aa:	0000                	unimp
    to->idx    = from->idx;
 2ac:	09c0                	addi	s0,sp,212
 2ae:	0000                	unimp
}
 2b0:	09d4                	addi	a3,sp,212
 2b2:	0000                	unimp
    if ((*memblock + 1) >= memblock_end)
 2b4:	0a40                	addi	s0,sp,276
 2b6:	0000                	unimp
 2b8:	0b38                	addi	a4,sp,408
 2ba:	0000                	unimp
 2bc:	0b38                	addi	a4,sp,408
	...
    if ((*datablock + 1) >= datablock_end)
 2c6:	0000                	unimp
 2c8:	0a48                	addi	a0,sp,276
 2ca:	0000                	unimp
    (*memblock)++;
 2cc:	0a48                	addi	a0,sp,276
 2ce:	0000                	unimp
    newitem->next      = insert_point->next;
 2d0:	0a50                	addi	a2,sp,276
 2d2:	0000                	unimp
    to->data16 = from->data16;
 2d4:	0a84                	addi	s1,sp,336
 2d6:	0000                	unimp
    to->idx    = from->idx;
 2d8:	0b44                	addi	s1,sp,404
 2da:	0000                	unimp
    newitem->next      = insert_point->next;
 2dc:	0b48                	addi	a0,sp,404
	...
    newitem->info = *datablock;
 2e6:	0000                	unimp
    (*datablock)++;
 2e8:	016c                	addi	a1,sp,140
 2ea:	0000                	unimp
}
 2ec:	016c                	addi	a1,sp,140
 2ee:	0000                	unimp
    (*datablock)++;
 2f0:	0170                	addi	a2,sp,140
 2f2:	0000                	unimp
 2f4:	017c                	addi	a5,sp,140
 2f6:	0000                	unimp
    copy_info(newitem->info, info);
 2f8:	0180                	addi	s0,sp,192
 2fa:	0000                	unimp
    to->data16 = from->data16;
 2fc:	0184                	addi	s1,sp,192
 2fe:	0000                	unimp
    to->idx    = from->idx;
 300:	023c                	addi	a5,sp,264
 302:	0000                	unimp
}
 304:	023c                	addi	a5,sp,264
	...
 30e:	0000                	unimp
 310:	0198                	addi	a4,sp,192
 312:	0000                	unimp
{
 314:	019c                	addi	a5,sp,192
 316:	0000                	unimp
    list_head *ret = item->next;
 318:	01a0                	addi	s0,sp,200
 31a:	0000                	unimp
    tmp        = item->info;
 31c:	01a4                	addi	s1,sp,200
 31e:	0000                	unimp
    item->info = ret->info;
 320:	01a8                	addi	a0,sp,200
 322:	0000                	unimp
    item->next = item->next->next;
 324:	01ac                	addi	a1,sp,200
 326:	0000                	unimp
    item->info = ret->info;
 328:	01b0                	addi	a2,sp,200
 32a:	0000                	unimp
    ret->info  = tmp;
 32c:	01b4                	addi	a3,sp,200
 32e:	0000                	unimp
    item->next = item->next->next;
 330:	01cc                	addi	a1,sp,196
 332:	0000                	unimp
    ret->next  = NULL;
 334:	01d4                	addi	a3,sp,196
 336:	0000                	unimp
}
 338:	0270                	addi	a2,sp,268
 33a:	0000                	unimp
    item_removed->info  = item_modified->info;
 33c:	0270                	addi	a2,sp,268
	...
    item_removed->next  = item_modified->next;
 346:	0000                	unimp
    item_removed->info  = item_modified->info;
 348:	0204                	addi	s1,sp,256
 34a:	0000                	unimp
    item_modified->info = tmp;
 34c:	0208                	addi	a0,sp,256
 34e:	0000                	unimp
    item_removed->next  = item_modified->next;
 350:	020c                	addi	a1,sp,256
 352:	0000                	unimp
    item_modified->next = item_removed;
 354:	0210                	addi	a2,sp,256
 356:	0000                	unimp
}
 358:	0214                	addi	a3,sp,256
 35a:	0000                	unimp
    if (info->idx >= 0)
 35c:	0218                	addi	a4,sp,256
 35e:	0000                	unimp
 360:	021c                	addi	a5,sp,256
 362:	0000                	unimp
        while (list && (list->info->idx != info->idx))
 364:	0220                	addi	s0,sp,264
	...
            list = list->next;
 36e:	0000                	unimp
        while (list && (list->info->idx != info->idx))
 370:	02a0                	addi	s0,sp,328
 372:	0000                	unimp
 374:	02a0                	addi	s0,sp,328
 376:	0000                	unimp
 378:	02a4                	addi	s1,sp,328
 37a:	0000                	unimp
 37c:	02b0                	addi	a2,sp,328
 37e:	0000                	unimp
 380:	02b4                	addi	a3,sp,328
 382:	0000                	unimp
        while (list && ((list->info->data16 & 0xff) != info->data16))
 384:	02b8                	addi	a4,sp,328
 386:	0000                	unimp
 388:	02d0                	addi	a2,sp,324
 38a:	0000                	unimp
 38c:	02d0                	addi	a2,sp,324
	...
 396:	0000                	unimp
 398:	032c                	addi	a1,sp,392
 39a:	0000                	unimp
 39c:	032c                	addi	a1,sp,392
 39e:	0000                	unimp
 3a0:	0348                	addi	a0,sp,388
 3a2:	0000                	unimp
 3a4:	0348                	addi	a0,sp,388
 3a6:	0000                	unimp
 3a8:	034c                	addi	a1,sp,388
 3aa:	0000                	unimp
}
 3ac:	0354                	addi	a3,sp,388
 3ae:	0000                	unimp
 3b0:	0358                	addi	a4,sp,388
 3b2:	0000                	unimp
    while (list)
 3b4:	035c                	addi	a5,sp,388
 3b6:	0000                	unimp
    list_head *next = NULL, *tmp;
 3b8:	0360                	addi	s0,sp,396
 3ba:	0000                	unimp
 3bc:	0364                	addi	s1,sp,396
	...
        tmp        = list->next;
 3c6:	0000                	unimp
        list->next = next;
 3c8:	0374                	addi	a3,sp,396
 3ca:	0000                	unimp
    while (list)
 3cc:	0378                	addi	a4,sp,396
 3ce:	0000                	unimp
 3d0:	037c                	addi	a5,sp,396
 3d2:	0000                	unimp
}
 3d4:	037c                	addi	a5,sp,396
 3d6:	0000                	unimp
{
 3d8:	037c                	addi	a5,sp,396
 3da:	0000                	unimp
 3dc:	0388                	addi	a0,sp,448
	...
 3e6:	0000                	unimp
 3e8:	04f4                	addi	a3,sp,588
 3ea:	0000                	unimp
 3ec:	050c                	addi	a1,sp,640
 3ee:	0000                	unimp
 3f0:	0510                	addi	a2,sp,640
 3f2:	0000                	unimp
 3f4:	0514                	addi	a3,sp,640
 3f6:	0000                	unimp
 3f8:	0518                	addi	a4,sp,640
 3fa:	0000                	unimp
 3fc:	0520                	addi	s0,sp,648
	...
 406:	0000                	unimp
 408:	0570                	addi	a2,sp,652
 40a:	0000                	unimp
 40c:	0588                	addi	a0,sp,704
 40e:	0000                	unimp
 410:	058c                	addi	a1,sp,704
 412:	0000                	unimp
 414:	0590                	addi	a2,sp,704
 416:	0000                	unimp
    insize = 1;
 418:	0594                	addi	a3,sp,704
 41a:	0000                	unimp
        if (nmerges <= 1) /* allow for nmerges==0, the empty list case */
 41c:	059c                	addi	a5,sp,704
	...
        nmerges = 0; /* count number of merges we do in this pass */
 426:	0000                	unimp
        tail = NULL;
 428:	0098                	addi	a4,sp,64
 42a:	0000                	unimp
        list = NULL;
 42c:	009c                	addi	a5,sp,64
 42e:	0000                	unimp
            nmerges++; /* there exists a merge to be done */
 430:	00a4                	addi	s1,sp,72
 432:	0000                	unimp
 434:	00a4                	addi	s1,sp,72
 436:	0000                	unimp
            psize = 0;
 438:	00a8                	addi	a0,sp,72
 43a:	0000                	unimp
                q = q->next;
 43c:	00d8                	addi	a4,sp,68
	...
                if (!q)
 446:	0000                	unimp
            for (i = 0; i < insize; i++)
 448:	00d8                	addi	a4,sp,68
 44a:	0000                	unimp
                    list = e;
 44c:	00dc                	addi	a5,sp,68
 44e:	0000                	unimp
 450:	00e0                	addi	s0,sp,76
 452:	0000                	unimp
 454:	00e0                	addi	s0,sp,76
 456:	0000                	unimp
            while (psize > 0 || (qsize > 0 && q))
 458:	00e4                	addi	s1,sp,76
 45a:	0000                	unimp
                else if (qsize == 0 || !q)
 45c:	0114                	addi	a3,sp,128
	...
                else if (cmp(p->info, q->info, res) <= 0)
 466:	0000                	unimp
 468:	011c                	addi	a5,sp,128
 46a:	0000                	unimp
 46c:	0124                	addi	s1,sp,136
 46e:	0000                	unimp
 470:	0128                	addi	a0,sp,136
 472:	0000                	unimp
 474:	01a0                	addi	s0,sp,200
	...
                    q = q->next;
 47e:	0000                	unimp
                    qsize--;
 480:	0120                	addi	s0,sp,136
 482:	0000                	unimp
                if (tail)
 484:	0124                	addi	s1,sp,136
 486:	0000                	unimp
                    tail->next = e;
 488:	012c                	addi	a1,sp,136
 48a:	0000                	unimp
                    list = e;
 48c:	01a0                	addi	s0,sp,200
	...
            while (psize > 0 || (qsize > 0 && q))
 496:	0000                	unimp
 498:	0120                	addi	s0,sp,136
 49a:	0000                	unimp
                    qsize--;
 49c:	0124                	addi	s1,sp,136
 49e:	0000                	unimp
 4a0:	0130                	addi	a2,sp,136
 4a2:	0000                	unimp
                    q = q->next;
 4a4:	0130                	addi	a2,sp,136
 4a6:	0000                	unimp
                if (tail)
 4a8:	0134                	addi	a3,sp,136
 4aa:	0000                	unimp
                    list = e;
 4ac:	0164                	addi	s1,sp,140
	...
 4b6:	0000                	unimp
                    psize--;
 4b8:	0164                	addi	s1,sp,140
 4ba:	0000                	unimp
 4bc:	0168                	addi	a0,sp,140
 4be:	0000                	unimp
                    p = p->next;
 4c0:	016c                	addi	a1,sp,140
 4c2:	0000                	unimp
 4c4:	016c                	addi	a1,sp,140
 4c6:	0000                	unimp
        while (p)
 4c8:	0170                	addi	a2,sp,140
 4ca:	0000                	unimp
        tail->next = NULL;
 4cc:	01a0                	addi	s0,sp,200
	...
        insize *= 2;
 4d6:	0000                	unimp
        p    = list;
 4d8:	01a4                	addi	s1,sp,200
 4da:	0000                	unimp
 4dc:	01a8                	addi	a0,sp,200
 4de:	0000                	unimp
        tail->next = NULL;
 4e0:	01ac                	addi	a1,sp,200
 4e2:	0000                	unimp
 4e4:	0220                	addi	s0,sp,264
	...
}
 4ee:	0000                	unimp
 4f0:	01a4                	addi	s1,sp,200
 4f2:	0000                	unimp
 4f4:	01a8                	addi	a0,sp,200
 4f6:	0000                	unimp
 4f8:	01b4                	addi	a3,sp,200
 4fa:	0000                	unimp
 4fc:	01e4                	addi	s1,sp,204
	...
 506:	0000                	unimp
 508:	01e4                	addi	s1,sp,204
 50a:	0000                	unimp
 50c:	01e8                	addi	a0,sp,204
 50e:	0000                	unimp
 510:	01ec                	addi	a1,sp,204
 512:	0000                	unimp
 514:	01ec                	addi	a1,sp,204
 516:	0000                	unimp
 518:	01f0                	addi	a2,sp,204
 51a:	0000                	unimp
 51c:	0220                	addi	s0,sp,264
	...
{
 526:	0000                	unimp
    ee_s16     find_num = res->seed3;
 528:	022c                	addi	a1,sp,264
 52a:	0000                	unimp
{
 52c:	0230                	addi	a2,sp,264
 52e:	0000                	unimp
 530:	0238                	addi	a4,sp,264
 532:	0000                	unimp
 534:	02ac                	addi	a1,sp,328
	...
 53e:	0000                	unimp
 540:	022c                	addi	a1,sp,264
 542:	0000                	unimp
 544:	0230                	addi	a2,sp,264
 546:	0000                	unimp
 548:	023c                	addi	a5,sp,264
 54a:	0000                	unimp
    list_head *list     = res->list;
 54c:	023c                	addi	a5,sp,264
 54e:	0000                	unimp
    for (i = 0; i < find_num; i++)
 550:	0240                	addi	s0,sp,260
 552:	0000                	unimp
    info.idx = finder_idx;
 554:	0270                	addi	a2,sp,268
	...
    ee_u16     found = 0, missed = 0;
 55e:	0000                	unimp
 560:	0270                	addi	a2,sp,268
 562:	0000                	unimp
    ee_u16     retval = 0;
 564:	0274                	addi	a3,sp,268
 566:	0000                	unimp
        info.data16 = (i & 0xff);
 568:	0278                	addi	a4,sp,268
 56a:	0000                	unimp
    if (info->idx >= 0)
 56c:	0278                	addi	a4,sp,268
 56e:	0000                	unimp
        while (list && (list->info->idx != info->idx))
 570:	027c                	addi	a5,sp,268
 572:	0000                	unimp
 574:	02ac                	addi	a1,sp,328
	...
            list = list->next;
 57e:	0000                	unimp
        while (list && (list->info->idx != info->idx))
 580:	0384                	addi	s1,sp,448
 582:	0000                	unimp
 584:	0388                	addi	a0,sp,448
 586:	0000                	unimp
 588:	0390                	addi	a2,sp,448
 58a:	0000                	unimp
 58c:	03d8                	addi	a4,sp,452
 58e:	0000                	unimp
    list_head *next = NULL, *tmp;
 590:	043c                	addi	a5,sp,520
 592:	0000                	unimp
 594:	0520                	addi	s0,sp,648
 596:	0000                	unimp
 598:	0530                	addi	a2,sp,648
 59a:	0000                	unimp
 59c:	0c10                	addi	a2,sp,528
	...
        list->next = next;
 5a6:	0000                	unimp
    while (list)
 5a8:	03a0                	addi	s0,sp,456
 5aa:	0000                	unimp
        if (this_find == NULL)
 5ac:	03a8                	addi	a0,sp,456
 5ae:	0000                	unimp
            if (this_find->info->data16 & 0x1) /* use found value */
 5b0:	03b4                	addi	a3,sp,456
 5b2:	0000                	unimp
            found++;
 5b4:	03b8                	addi	a4,sp,456
 5b6:	0000                	unimp
 5b8:	05f4                	addi	a3,sp,716
 5ba:	0000                	unimp
            if (this_find->info->data16 & 0x1) /* use found value */
 5bc:	06f8                	addi	a4,sp,844
 5be:	0000                	unimp
            found++;
 5c0:	06fc                	addi	a5,sp,844
 5c2:	0000                	unimp
            if (this_find->info->data16 & 0x1) /* use found value */
 5c4:	076c                	addi	a1,sp,908
 5c6:	0000                	unimp
 5c8:	088c                	addi	a1,sp,80
 5ca:	0000                	unimp
                retval += (this_find->info->data16 >> 9) & 1;
 5cc:	08f4                	addi	a3,sp,92
 5ce:	0000                	unimp
 5d0:	0a3c                	addi	a5,sp,280
 5d2:	0000                	unimp
 5d4:	0a48                	addi	a0,sp,276
 5d6:	0000                	unimp
 5d8:	0bf4                	addi	a3,sp,476
 5da:	0000                	unimp
 5dc:	0bf8                	addi	a4,sp,476
	...
            if (this_find->next != NULL)
 5e6:	0000                	unimp
                this_find->next = finder->next;
 5e8:	07d4                	addi	a3,sp,964
 5ea:	0000                	unimp
 5ec:	07fc                	addi	a5,sp,972
 5ee:	0000                	unimp
                finder->next    = list->next;
 5f0:	0800                	addi	s0,sp,16
 5f2:	0000                	unimp
 5f4:	0804                	addi	s1,sp,16
 5f6:	0000                	unimp
                list->next      = finder;
 5f8:	0ba8                	addi	a0,sp,472
 5fa:	0000                	unimp
        if (info.idx >= 0)
 5fc:	0ba8                	addi	a0,sp,472
 5fe:	0000                	unimp
            info.idx++;
 600:	0bb0                	addi	a2,sp,472
 602:	0000                	unimp
 604:	0bb8                	addi	a4,sp,472
	...
    for (i = 0; i < find_num; i++)
 60e:	0000                	unimp
 610:	0950                	addi	a2,sp,148
 612:	0000                	unimp
 614:	09ac                	addi	a1,sp,216
 616:	0000                	unimp
 618:	09b0                	addi	a2,sp,216
 61a:	0000                	unimp
    retval += found * 4 - missed;
 61c:	0a2c                	addi	a1,sp,280
 61e:	0000                	unimp
 620:	0bf0                	addi	a2,sp,476
 622:	0000                	unimp
 624:	0bf4                	addi	a3,sp,476
 626:	0000                	unimp
 628:	0bf8                	addi	a4,sp,476
 62a:	0000                	unimp
 62c:	0c10                	addi	a2,sp,528
	...
        list = core_list_mergesort(list, cmp_complex, res);
 636:	0000                	unimp
 638:	03e4                	addi	s1,sp,460
 63a:	0000                	unimp
 63c:	03ec                	addi	a1,sp,460
 63e:	0000                	unimp
 640:	03ec                	addi	a1,sp,460
 642:	0000                	unimp
    remover = core_list_remove(list->next);
 644:	03f0                	addi	a2,sp,460
	...
    tmp        = item->info;
 652:	0000                	unimp
    item->info = ret->info;
 654:	0008                	0x8
 656:	0000                	unimp
    item->next = item->next->next;
 658:	000c                	0xc
 65a:	0000                	unimp
    item->info = ret->info;
 65c:	0014                	0x14
 65e:	0000                	unimp
    ret->info  = tmp;
 660:	0024                	addi	s1,sp,8
 662:	0000                	unimp
    item->next = item->next->next;
 664:	0028                	addi	a0,sp,8
 666:	0000                	unimp
    ret->next  = NULL;
 668:	0038                	addi	a4,sp,8
 66a:	0000                	unimp
    if (info->idx >= 0)
 66c:	003c                	addi	a5,sp,8
	...
        while (list && (list->info->idx != info->idx))
 676:	0000                	unimp
 678:	0014                	0x14
 67a:	0000                	unimp
            list = list->next;
 67c:	001c                	0x1c
 67e:	0000                	unimp
        while (list && (list->info->idx != info->idx))
 680:	0040                	addi	s0,sp,4
 682:	0000                	unimp
        finder = list->next;
 684:	0044                	addi	s1,sp,4
 686:	0000                	unimp
    while (finder)
 688:	0050                	addi	a2,sp,4
 68a:	0000                	unimp
        retval = crc16(list->info->data16, retval);
 68c:	0054                	addi	a3,sp,4
 68e:	0000                	unimp
 690:	005c                	addi	a5,sp,4
 692:	0000                	unimp
 694:	005c                	addi	a5,sp,4
 696:	0000                	unimp
 698:	0094                	addi	a3,sp,64
 69a:	0000                	unimp
        finder = finder->next;
 69c:	0098                	addi	a4,sp,64
 69e:	0000                	unimp
        retval = crc16(list->info->data16, retval);
 6a0:	0224                	addi	s1,sp,264
 6a2:	0000                	unimp
    while (finder)
 6a4:	0228                	addi	a0,sp,264
 6a6:	0000                	unimp
    remover = core_list_undo_remove(remover, list->next);
 6a8:	0360                	addi	s0,sp,396
 6aa:	0000                	unimp
    tmp                 = item_removed->info;
 6ac:	0364                	addi	s1,sp,396
 6ae:	0000                	unimp
    item_removed->info  = item_modified->info;
 6b0:	04d0                	addi	a2,sp,580
 6b2:	0000                	unimp
    item_removed->next  = item_modified->next;
 6b4:	04d4                	addi	a3,sp,580
	...
    item_modified->info = tmp;
 6be:	0000                	unimp
    item_removed->next  = item_modified->next;
 6c0:	0068                	addi	a0,sp,12
 6c2:	0000                	unimp
    list = core_list_mergesort(list, cmp_idx, NULL);
 6c4:	0094                	addi	a3,sp,64
 6c6:	0000                	unimp
    item_modified->next = item_removed;
 6c8:	0098                	addi	a4,sp,64
 6ca:	0000                	unimp
    list = core_list_mergesort(list, cmp_idx, NULL);
 6cc:	00a4                	addi	s1,sp,72
 6ce:	0000                	unimp
 6d0:	00ac                	addi	a1,sp,72
 6d2:	0000                	unimp
 6d4:	01c0                	addi	s0,sp,196
 6d6:	0000                	unimp
    finder = list->next;
 6d8:	01cc                	addi	a1,sp,196
 6da:	0000                	unimp
    list = core_list_mergesort(list, cmp_idx, NULL);
 6dc:	0224                	addi	s1,sp,264
 6de:	0000                	unimp
    while (finder)
 6e0:	0228                	addi	a0,sp,264
 6e2:	0000                	unimp
        retval = crc16(list->info->data16, retval);
 6e4:	02bc                	addi	a5,sp,328
 6e6:	0000                	unimp
 6e8:	02e4                	addi	s1,sp,332
 6ea:	0000                	unimp
 6ec:	02fc                	addi	a5,sp,332
 6ee:	0000                	unimp
 6f0:	0304                	addi	s1,sp,384
 6f2:	0000                	unimp
        finder = finder->next;
 6f4:	0334                	addi	a3,sp,392
 6f6:	0000                	unimp
        retval = crc16(list->info->data16, retval);
 6f8:	0528                	addi	a0,sp,648
 6fa:	0000                	unimp
    while (finder)
 6fc:	0530                	addi	a2,sp,648
 6fe:	0000                	unimp
}
 700:	06d8                	addi	a4,sp,836
 702:	0000                	unimp
 704:	06e0                	addi	s0,sp,844
 706:	0000                	unimp
 708:	06ec                	addi	a1,sp,844
 70a:	0000                	unimp
 70c:	06f8                	addi	a4,sp,844
	...
 716:	0000                	unimp
 718:	0080                	addi	s0,sp,64
 71a:	0000                	unimp
 71c:	0090                	addi	a2,sp,64
 71e:	0000                	unimp
 720:	0090                	addi	a2,sp,64
 722:	0000                	unimp
 724:	0094                	addi	a3,sp,64
	...
        while (list && ((list->info->data16 & 0xff) != info->data16))
 72e:	0000                	unimp
 730:	0094                	addi	a3,sp,64
 732:	0000                	unimp
            list = list->next;
 734:	0094                	addi	a3,sp,64
 736:	0000                	unimp
        while (list && ((list->info->data16 & 0xff) != info->data16))
 738:	01a4                	addi	s1,sp,200
 73a:	0000                	unimp
        finder = list->next;
 73c:	01b8                	addi	a4,sp,200
	...
    while (finder)
 746:	0000                	unimp
        while (list && ((list->info->data16 & 0xff) != info->data16))
 748:	00f4                	addi	a3,sp,76
 74a:	0000                	unimp
 74c:	0104                	addi	s1,sp,128
 74e:	0000                	unimp
 750:	0104                	addi	s1,sp,128
 752:	0000                	unimp
            list = list->next;
 754:	0108                	addi	a0,sp,128
	...
        while (list && ((list->info->data16 & 0xff) != info->data16))
 75e:	0000                	unimp
 760:	028c                	addi	a1,sp,320
 762:	0000                	unimp
 764:	029c                	addi	a5,sp,320
 766:	0000                	unimp
 768:	02a4                	addi	s1,sp,328
 76a:	0000                	unimp
            retval += (list->next->info->data16 >> 8) & 1;
 76c:	02a8                	addi	a0,sp,328
	...
            missed++;
 776:	0000                	unimp
            retval += (list->next->info->data16 >> 8) & 1;
 778:	0304                	addi	s1,sp,384
 77a:	0000                	unimp
            missed++;
 77c:	0304                	addi	s1,sp,384
 77e:	0000                	unimp
            retval += (list->next->info->data16 >> 8) & 1;
 780:	030c                	addi	a1,sp,384
 782:	0000                	unimp
 784:	031c                	addi	a5,sp,384
	...
 78e:	0000                	unimp
 790:	00a4                	addi	s1,sp,72
 792:	0000                	unimp
 794:	00ac                	addi	a1,sp,72
 796:	0000                	unimp
    info.idx = finder_idx;
 798:	02bc                	addi	a5,sp,328
 79a:	0000                	unimp
    for (i = 0; i < find_num; i++)
 79c:	02bc                	addi	a5,sp,328
 79e:	0000                	unimp
 7a0:	02fc                	addi	a5,sp,332
 7a2:	0000                	unimp
            retval += (list->next->info->data16 >> 8) & 1;
 7a4:	0304                	addi	s1,sp,384
 7a6:	0000                	unimp
 7a8:	0334                	addi	a3,sp,392
 7aa:	0000                	unimp
{
 7ac:	0360                	addi	s0,sp,396
 7ae:	0000                	unimp
 7b0:	0364                	addi	s1,sp,396
 7b2:	0000                	unimp
 7b4:	0468                	addi	a0,sp,524
 7b6:	0000                	unimp
    ee_u32 size     = (blksize / per_item)
 7b8:	0470                	addi	a2,sp,524
 7ba:	0000                	unimp
{
 7bc:	04d0                	addi	a2,sp,580
 7be:	0000                	unimp
 7c0:	04d4                	addi	a3,sp,580
 7c2:	0000                	unimp
 7c4:	0528                	addi	a0,sp,648
 7c6:	0000                	unimp
 7c8:	0530                	addi	a2,sp,648
 7ca:	0000                	unimp
 7cc:	053c                	addi	a5,sp,648
 7ce:	0000                	unimp
    ee_u32 size     = (blksize / per_item)
 7d0:	0544                	addi	s1,sp,644
 7d2:	0000                	unimp
 7d4:	059c                	addi	a5,sp,704
 7d6:	0000                	unimp
    list_head *memblock_end  = memblock + size;
 7d8:	05a4                	addi	s1,sp,712
 7da:	0000                	unimp
 7dc:	06d0                	addi	a2,sp,836
 7de:	0000                	unimp
    list->info->data16 = (ee_s16)0x8080;
 7e0:	078c                	addi	a1,sp,960
 7e2:	0000                	unimp
    list->next         = NULL;
 7e4:	0794                	addi	a3,sp,960
 7e6:	0000                	unimp
    list->info         = datablock;
 7e8:	079c                	addi	a5,sp,960
 7ea:	0000                	unimp
    list->info->data16 = (ee_s16)0x8080;
 7ec:	07cc                	addi	a1,sp,964
	...
 7f6:	0000                	unimp
    list->info->idx    = 0x0000;
 7f8:	034c                	addi	a1,sp,388
 7fa:	0000                	unimp
    if ((*memblock + 1) >= memblock_end)
 7fc:	035c                	addi	a5,sp,388
 7fe:	0000                	unimp
    list_data *datablock_end = datablock + size;
 800:	035c                	addi	a5,sp,388
 802:	0000                	unimp
    memblock++;
 804:	0360                	addi	s0,sp,396
	...
    if ((*memblock + 1) >= memblock_end)
 80e:	0000                	unimp
    if ((*datablock + 1) >= datablock_end)
 810:	03a4                	addi	s1,sp,456
 812:	0000                	unimp
 814:	03b4                	addi	a3,sp,456
 816:	0000                	unimp
    newitem->info = *datablock;
 818:	03b4                	addi	a3,sp,456
 81a:	0000                	unimp
    newitem->next      = insert_point->next;
 81c:	03b8                	addi	a4,sp,456
	...
    to->idx    = from->idx;
 826:	0000                	unimp
    to->data16 = from->data16;
 828:	03c4                	addi	s1,sp,452
 82a:	0000                	unimp
 82c:	03d4                	addi	a3,sp,452
 82e:	0000                	unimp
    to->idx    = from->idx;
 830:	05e4                	addi	s1,sp,716
 832:	0000                	unimp
    for (i = 0; i < size; i++)
 834:	0654                	addi	a3,sp,772
 836:	0000                	unimp
            ee_u16 pat = (ee_u16)(i++ ^ seed); /* get a pseudo random number */
 838:	0668                	addi	a0,sp,780
 83a:	0000                	unimp
    to->idx    = from->idx;
 83c:	06d0                	addi	a2,sp,836
	...
            ee_u16 pat = (ee_u16)(i++ ^ seed); /* get a pseudo random number */
 846:	0000                	unimp
    to->idx    = from->idx;
 848:	0550                	addi	a2,sp,644
 84a:	0000                	unimp
    if ((*datablock + 1) >= datablock_end)
 84c:	0560                	addi	s0,sp,652
 84e:	0000                	unimp
 850:	058c                	addi	a1,sp,704
 852:	0000                	unimp
        ee_u16 datpat = ((ee_u16)(seed ^ i) & 0xf);
 854:	0594                	addi	a3,sp,704
	...
            = (datpat << 3) | (i & 0x7); /* alternate between algorithms */
 85e:	0000                	unimp
 860:	02bc                	addi	a5,sp,328
 862:	0000                	unimp
        ee_u16 dat
 864:	02e4                	addi	s1,sp,332
 866:	0000                	unimp
        info.data16 = (dat << 8) | dat;  /* fill the data with actual data and
 868:	06f8                	addi	a4,sp,844
 86a:	0000                	unimp
    if ((*memblock + 1) >= memblock_end)
 86c:	074c                	addi	a1,sp,900
 86e:	0000                	unimp
    for (i = 0; i < size; i++)
 870:	07cc                	addi	a1,sp,964
 872:	0000                	unimp
    if ((*datablock + 1) >= datablock_end)
 874:	07d8                	addi	a4,sp,964
	...
    if ((*memblock + 1) >= memblock_end)
 87e:	0000                	unimp
    if ((*datablock + 1) >= datablock_end)
 880:	074c                	addi	a1,sp,900
 882:	0000                	unimp
    newitem->next      = insert_point->next;
 884:	0758                	addi	a4,sp,900
 886:	0000                	unimp
    insert_point->next = newitem;
 888:	0760                	addi	s0,sp,908
 88a:	0000                	unimp
    newitem->info = *datablock;
 88c:	0774                	addi	a3,sp,908
	...
    return newitem;
 89e:	0000                	unimp
 8a0:	0008                	0x8
 8a2:	0000                	unimp
    for (i = 0; i < size; i++)
 8a4:	000c                	0xc
 8a6:	0000                	unimp
    while (finder->next != NULL)
 8a8:	0020                	addi	s0,sp,8
 8aa:	0000                	unimp
 8ac:	0024                	addi	s1,sp,8
 8ae:	0000                	unimp
        if (i < size / 5) /* first 20% of the list in order */
 8b0:	0040                	addi	s0,sp,4
 8b2:	0000                	unimp
 8b4:	0044                	addi	s1,sp,4
 8b6:	0000                	unimp
                                & (((i & 0x07) << 8)
 8b8:	0050                	addi	a2,sp,4
 8ba:	0000                	unimp
        if (i < size / 5) /* first 20% of the list in order */
 8bc:	0058                	addi	a4,sp,4
 8be:	0000                	unimp
 8c0:	016c                	addi	a1,sp,140
 8c2:	0000                	unimp
                                & (((i & 0x07) << 8)
 8c4:	0170                	addi	a2,sp,140
 8c6:	0000                	unimp
 8c8:	06a0                	addi	s0,sp,840
 8ca:	0000                	unimp
    while (finder->next != NULL)
 8cc:	06a4                	addi	s1,sp,840
	...
            finder->info->idx = i++;
 8d6:	0000                	unimp
    while (finder->next != NULL)
 8d8:	0080                	addi	s0,sp,64
 8da:	0000                	unimp
 8dc:	0084                	addi	s1,sp,64
 8de:	0000                	unimp
 8e0:	0104                	addi	s1,sp,128
 8e2:	0000                	unimp
 8e4:	0160                	addi	s0,sp,140
	...
 8ee:	0000                	unimp
            ee_u16 pat = (ee_u16)(i++ ^ seed); /* get a pseudo random number */
 8f0:	0084                	addi	s1,sp,64
 8f2:	0000                	unimp
                                & (((i & 0x07) << 8)
 8f4:	0098                	addi	a4,sp,64
 8f6:	0000                	unimp
                                   | pat); /* make sure the mixed items end up
 8f8:	06d8                	addi	a4,sp,836
 8fa:	0000                	unimp
                                & (((i & 0x07) << 8)
 8fc:	06dc                	addi	a5,sp,836
	...
        if (i < size / 5) /* first 20% of the list in order */
 906:	0000                	unimp
            finder->info->idx = 0x3fff
 908:	00c0                	addi	s0,sp,68
 90a:	0000                	unimp
    while (finder->next != NULL)
 90c:	00c4                	addi	s1,sp,68
 90e:	0000                	unimp
 910:	01a4                	addi	s1,sp,200
 912:	0000                	unimp
 914:	0204                	addi	s1,sp,256
	...
 91e:	0000                	unimp
 920:	023c                	addi	a5,sp,264
 922:	0000                	unimp
 924:	05d0                	addi	a2,sp,708
 926:	0000                	unimp
}
 928:	0694                	addi	a3,sp,832
 92a:	0000                	unimp
 92c:	06a0                	addi	s0,sp,840
 92e:	0000                	unimp
 930:	07d8                	addi	a4,sp,964
 932:	0000                	unimp
 934:	07e4                	addi	s1,sp,972
	...
 93e:	0000                	unimp
    list = core_list_mergesort(list, cmp_idx, NULL);
 940:	0268                	addi	a0,sp,268
 942:	0000                	unimp
 944:	0278                	addi	a4,sp,268
 946:	0000                	unimp
}
 948:	027c                	addi	a5,sp,268
 94a:	0000                	unimp
    list = core_list_mergesort(list, cmp_idx, NULL);
 94c:	0340                	addi	s0,sp,388
 94e:	0000                	unimp
    memblock++;
 950:	03cc                	addi	a1,sp,452
 952:	0000                	unimp
    datablock++;
 954:	03d0                	addi	a2,sp,452
	...
 95e:	0000                	unimp
{
 960:	0384                	addi	s1,sp,448
 962:	0000                	unimp
 964:	0390                	addi	a2,sp,448
 966:	0000                	unimp
    ee_u32        iterations = res->iterations;
 968:	039c                	addi	a5,sp,448
 96a:	0000                	unimp
{
 96c:	03a0                	addi	s0,sp,456
	...
 976:	0000                	unimp
    res->crc                 = 0;
 978:	03d8                	addi	a4,sp,452
 97a:	0000                	unimp
    res->crcmatrix           = 0;
 97c:	03e8                	addi	a0,sp,460
 97e:	0000                	unimp
    for (i = 0; i < iterations; i++)
 980:	03ec                	addi	a1,sp,460
 982:	0000                	unimp
 984:	03ec                	addi	a1,sp,460
	...
        crc      = core_bench_list(res, 1);
 98e:	0000                	unimp
 990:	0404                	addi	s1,sp,512
 992:	0000                	unimp
 994:	0410                	addi	a2,sp,512
 996:	0000                	unimp
        res->crc = crcu16(crc, res->crc);
 998:	0414                	addi	a3,sp,512
 99a:	0000                	unimp
 99c:	0418                	addi	a4,sp,512
	...
 9a6:	0000                	unimp
        crc      = core_bench_list(res, -1);
 9a8:	0430                	addi	a2,sp,520
 9aa:	0000                	unimp
 9ac:	0508                	addi	a0,sp,640
 9ae:	0000                	unimp
        res->crc = crcu16(crc, res->crc);
 9b0:	058c                	addi	a1,sp,704
 9b2:	0000                	unimp
 9b4:	0590                	addi	a2,sp,704
	...
        if (i == 0)
 9be:	0000                	unimp
            res->crclist = res->crc;
 9c0:	053c                	addi	a5,sp,648
 9c2:	0000                	unimp
    for (i = 0; i < iterations; i++)
 9c4:	0548                	addi	a0,sp,644
 9c6:	0000                	unimp
 9c8:	0554                	addi	a3,sp,644
 9ca:	0000                	unimp
}
 9cc:	0558                	addi	a4,sp,644
	...
 9d6:	0000                	unimp
 9d8:	0594                	addi	a3,sp,704
 9da:	0000                	unimp
 9dc:	0598                	addi	a4,sp,704
 9de:	0000                	unimp
 9e0:	059c                	addi	a5,sp,704
 9e2:	0000                	unimp
 9e4:	059c                	addi	a5,sp,704
	...
{
 9ee:	0000                	unimp
 9f0:	05ac                	addi	a1,sp,712
 9f2:	0000                	unimp
 9f4:	05b8                	addi	a4,sp,712
 9f6:	0000                	unimp
 9f8:	05bc                	addi	a5,sp,712
 9fa:	0000                	unimp
 9fc:	05c4                	addi	s1,sp,708
 9fe:	0000                	unimp
 a00:	07dc                	addi	a5,sp,964
 a02:	0000                	unimp
 a04:	07e4                	addi	s1,sp,972
	...
 a0e:	0000                	unimp
 a10:	0630                	addi	a2,sp,776
 a12:	0000                	unimp
 a14:	063c                	addi	a5,sp,776
 a16:	0000                	unimp
 a18:	0644                	addi	s1,sp,772
 a1a:	0000                	unimp
    int   argc = 0;
 a1c:	0658                	addi	a4,sp,772
	...
 a26:	0000                	unimp
 a28:	06f4                	addi	a3,sp,844
 a2a:	0000                	unimp
 a2c:	07a8                	addi	a0,sp,968
 a2e:	0000                	unimp
 a30:	07bc                	addi	a5,sp,968
 a32:	0000                	unimp
 a34:	07d8                	addi	a4,sp,964
	...
 a42:	0000                	unimp
 a44:	000c                	0xc
 a46:	0000                	unimp
 a48:	0018                	0x18
 a4a:	0000                	unimp
	for(int i = 0; i < 12; i++) { 
 a4c:	001c                	0x1c
 a4e:	0000                	unimp
 a50:	0020                	addi	s0,sp,8
 a52:	0000                	unimp
    int   argc = 0;
 a54:	0028                	addi	a0,sp,8
 a56:	0000                	unimp
 a58:	002c                	addi	a1,sp,8
 a5a:	0000                	unimp
	  uart_send_char(hello[i]);
 a5c:	0030                	addi	a2,sp,8
	...
 a66:	0000                	unimp
	for(int i = 0; i < 12; i++) { 
 a68:	000c                	0xc
 a6a:	0000                	unimp
	ee_printf("Hello World\n");
 a6c:	0010                	0x10
 a6e:	0000                	unimp
 a70:	0028                	addi	a0,sp,8
 a72:	0000                	unimp
    portable_init(&(results[0].port), &argc, argv);
 a74:	002c                	addi	a1,sp,8
 a76:	0000                	unimp
 a78:	0030                	addi	a2,sp,8
 a7a:	0000                	unimp
 a7c:	0038                	addi	a4,sp,8
	...
 a8a:	0000                	unimp
 a8c:	0010                	0x10
 a8e:	0000                	unimp
 a90:	0018                	0x18
 a92:	0000                	unimp
 a94:	0020                	addi	s0,sp,8
	...
 a9e:	0000                	unimp
 aa0:	0020                	addi	s0,sp,8
 aa2:	0000                	unimp
 aa4:	0020                	addi	s0,sp,8
 aa6:	0000                	unimp
    results[0].seed1      = get_seed(1);
 aa8:	0024                	addi	s1,sp,8
 aaa:	0000                	unimp
 aac:	0038                	addi	a4,sp,8
	...
 ab6:	0000                	unimp
 ab8:	0058                	addi	a4,sp,4
 aba:	0000                	unimp
 abc:	00a0                	addi	s0,sp,72
 abe:	0000                	unimp
 ac0:	00a4                	addi	s1,sp,72
 ac2:	0000                	unimp
 ac4:	00d4                	addi	a3,sp,68
 ac6:	0000                	unimp
    results[0].seed2      = get_seed(2);
 ac8:	00d8                	addi	a4,sp,68
 aca:	0000                	unimp
    results[0].seed1      = get_seed(1);
 acc:	00e4                	addi	s1,sp,76
	...
    results[0].seed2      = get_seed(2);
 ada:	0000                	unimp
    results[0].seed3      = get_seed(3);
 adc:	0010                	0x10
 ade:	0000                	unimp
    results[0].seed2      = get_seed(2);
 ae0:	0018                	0x18
 ae2:	0000                	unimp
    results[0].seed3      = get_seed(3);
 ae4:	0020                	addi	s0,sp,8
	...
 aee:	0000                	unimp
    results[0].iterations = get_seed_32(4);
 af0:	0020                	addi	s0,sp,8
 af2:	0000                	unimp
    results[0].seed3      = get_seed(3);
 af4:	0020                	addi	s0,sp,8
 af6:	0000                	unimp
    results[0].iterations = get_seed_32(4);
 af8:	0024                	addi	s1,sp,8
 afa:	0000                	unimp
 afc:	0038                	addi	a4,sp,8
	...
 b06:	0000                	unimp
    results[0].execs = get_seed_32(5);
 b08:	0058                	addi	a4,sp,4
 b0a:	0000                	unimp
    if (results[0].execs == 0)
 b0c:	00a0                	addi	s0,sp,72
 b0e:	0000                	unimp
    results[0].execs = get_seed_32(5);
 b10:	00a4                	addi	s1,sp,72
 b12:	0000                	unimp
    if ((results[0].seed1 == 0) && (results[0].seed2 == 0)
 b14:	00d4                	addi	a3,sp,68
 b16:	0000                	unimp
 b18:	00d8                	addi	a4,sp,68
 b1a:	0000                	unimp
 b1c:	00e4                	addi	s1,sp,76
	...
 b2e:	0000                	unimp
 b30:	0008                	0x8
 b32:	0000                	unimp
 b34:	000c                	0xc
 b36:	0000                	unimp
        && (results[0].seed3 == 0))
 b38:	0020                	addi	s0,sp,8
 b3a:	0000                	unimp
 b3c:	0024                	addi	s1,sp,8
 b3e:	0000                	unimp
 b40:	0030                	addi	a2,sp,8
 b42:	0000                	unimp
        if ((1 << (ee_u32)i) & results[0].execs)
 b44:	0034                	addi	a3,sp,8
 b46:	0000                	unimp
    results[i].memblock[0] = stack_memblock + i * TOTAL_DATA_SIZE;
 b48:	0040                	addi	s0,sp,4
 b4a:	0000                	unimp
 b4c:	0048                	addi	a0,sp,4
 b4e:	0000                	unimp
 b50:	0560                	addi	s0,sp,652
 b52:	0000                	unimp
 b54:	0564                	addi	s1,sp,652
	...
 b5e:	0000                	unimp
 b60:	0070                	addi	a2,sp,12
 b62:	0000                	unimp
        if ((1 << (ee_u32)i) & results[0].execs)
 b64:	0074                	addi	a3,sp,12
 b66:	0000                	unimp
 b68:	00f8                	addi	a4,sp,76
 b6a:	0000                	unimp
            num_algorithms++;
 b6c:	0154                	addi	a3,sp,132
	...
    results[i].memblock[0] = stack_memblock + i * TOTAL_DATA_SIZE;
 b76:	0000                	unimp
    results[i].err         = 0;
 b78:	0074                	addi	a3,sp,12
 b7a:	0000                	unimp
        if ((1 << (ee_u32)i) & results[0].execs)
 b7c:	0088                	addi	a0,sp,64
 b7e:	0000                	unimp
 b80:	0594                	addi	a3,sp,704
 b82:	0000                	unimp
            num_algorithms++;
 b84:	0598                	addi	a4,sp,704
	...
 b8e:	0000                	unimp
 b90:	00b0                	addi	a2,sp,72
 b92:	0000                	unimp
 b94:	00b4                	addi	a3,sp,72
 b96:	0000                	unimp
        results[i].size = results[i].size / num_algorithms;
 b98:	0194                	addi	a3,sp,192
 b9a:	0000                	unimp
 b9c:	01f4                	addi	a3,sp,204
	...
 ba6:	0000                	unimp
 ba8:	022c                	addi	a1,sp,264
 baa:	0000                	unimp
 bac:	0438                	addi	a4,sp,520
 bae:	0000                	unimp
 bb0:	0438                	addi	a4,sp,520
 bb2:	0000                	unimp
 bb4:	0460                	addi	s0,sp,524
	...
 bbe:	0000                	unimp
    for (i = 0; i < NUM_ALGORITHMS; i++)
 bc0:	022c                	addi	a1,sp,264
 bc2:	0000                	unimp
        results[i].size = results[i].size / num_algorithms;
 bc4:	02a8                	addi	a0,sp,328
 bc6:	0000                	unimp
    ee_u16       i, j = 0, num_algorithms = 0;
 bc8:	02b0                	addi	a2,sp,328
 bca:	0000                	unimp
        if ((1 << (ee_u32)i) & results[0].execs)
 bcc:	02b4                	addi	a3,sp,328
	...
 bd6:	0000                	unimp
 bd8:	0274                	addi	a3,sp,268
 bda:	0000                	unimp
    for (i = 0; i < NUM_ALGORITHMS; i++)
 bdc:	0280                	addi	s0,sp,320
 bde:	0000                	unimp
        if ((1 << (ee_u32)i) & results[0].execs)
 be0:	028c                	addi	a1,sp,320
 be2:	0000                	unimp
    for (i = 0; i < NUM_ALGORITHMS; i++)
 be4:	0290                	addi	a2,sp,320
	...
        if (results[i].execs & ID_LIST)
 bee:	0000                	unimp
        if (results[i].execs & ID_MATRIX)
 bf0:	02a8                	addi	a0,sp,328
 bf2:	0000                	unimp
        if (results[i].execs & ID_STATE)
 bf4:	02b0                	addi	a2,sp,328
 bf6:	0000                	unimp
 bf8:	02b4                	addi	a3,sp,328
 bfa:	0000                	unimp
            core_init_state(
 bfc:	0328                	addi	a0,sp,392
 bfe:	0000                	unimp
 c00:	0330                	addi	a2,sp,392
 c02:	0000                	unimp
 c04:	0338                	addi	a4,sp,392
	...
 c0e:	0000                	unimp
 c10:	02e4                	addi	s1,sp,332
 c12:	0000                	unimp
 c14:	02f0                	addi	a2,sp,332
 c16:	0000                	unimp
 c18:	02fc                	addi	a5,sp,332
 c1a:	0000                	unimp
 c1c:	0300                	addi	s0,sp,384
	...
 c26:	0000                	unimp
    if (results[0].iterations == 0)
 c28:	0328                	addi	a0,sp,392
 c2a:	0000                	unimp
 c2c:	0330                	addi	a2,sp,392
 c2e:	0000                	unimp
        results[0].iterations = 1;
 c30:	0338                	addi	a4,sp,392
 c32:	0000                	unimp
 c34:	03ac                	addi	a1,sp,456
	...
            results[0].iterations *= 10;
 c3e:	0000                	unimp
            iterate(&results[0]);
 c40:	0368                	addi	a0,sp,396
 c42:	0000                	unimp
 c44:	0374                	addi	a3,sp,396
 c46:	0000                	unimp
 c48:	0380                	addi	s0,sp,448
 c4a:	0000                	unimp
 c4c:	0384                	addi	s1,sp,448
	...
            results[0].iterations *= 10;
 c56:	0000                	unimp
 c58:	03ac                	addi	a1,sp,456
 c5a:	0000                	unimp
 c5c:	0400                	addi	s0,sp,512
 c5e:	0000                	unimp
 c60:	0400                	addi	s0,sp,512
 c62:	0000                	unimp
 c64:	0414                	addi	a3,sp,512
 c66:	0000                	unimp
            start_time();
 c68:	0418                	addi	a4,sp,512
 c6a:	0000                	unimp
            iterate(&results[0]);
 c6c:	041c                	addi	a5,sp,512
 c6e:	0000                	unimp
 c70:	0440                	addi	s0,sp,516
 c72:	0000                	unimp
            stop_time();
 c74:	0444                	addi	s1,sp,516
	...
            secs_passed = time_in_secs(get_time());
 c7e:	0000                	unimp
        while (secs_passed < (secs_ret)1)
 c80:	03dc                	addi	a5,sp,452
 c82:	0000                	unimp
        results[0].iterations *= 1 + 10 / divisor;
 c84:	03e8                	addi	a0,sp,460
 c86:	0000                	unimp
 c88:	03f4                	addi	a3,sp,460
 c8a:	0000                	unimp
 c8c:	03f8                	addi	a4,sp,460
	...
 c96:	0000                	unimp
 c98:	0400                	addi	s0,sp,512
 c9a:	0000                	unimp
 c9c:	0400                	addi	s0,sp,512
 c9e:	0000                	unimp
    start_time();
 ca0:	0414                	addi	a3,sp,512
 ca2:	0000                	unimp
    iterate(&results[0]);
 ca4:	0418                	addi	a4,sp,512
 ca6:	0000                	unimp
 ca8:	041c                	addi	a5,sp,512
 caa:	0000                	unimp
 cac:	0428                	addi	a0,sp,520
 cae:	0000                	unimp
 cb0:	0438                	addi	a4,sp,520
 cb2:	0000                	unimp
 cb4:	0440                	addi	s0,sp,516
 cb6:	0000                	unimp
 cb8:	0444                	addi	s1,sp,516
 cba:	0000                	unimp
 cbc:	0448                	addi	a0,sp,516
	...
    stop_time();
 cc6:	0000                	unimp
    total_time = get_time();
 cc8:	0428                	addi	a0,sp,520
 cca:	0000                	unimp
    seedcrc = crc16(results[0].seed1, seedcrc);
 ccc:	0438                	addi	a4,sp,520
 cce:	0000                	unimp
 cd0:	0448                	addi	a0,sp,516
 cd2:	0000                	unimp
 cd4:	0460                	addi	s0,sp,524
	...
    total_time = get_time();
 cde:	0000                	unimp
    seedcrc = crc16(results[0].seed1, seedcrc);
 ce0:	0438                	addi	a4,sp,520
 ce2:	0000                	unimp
 ce4:	0438                	addi	a4,sp,520
 ce6:	0000                	unimp
 ce8:	0460                	addi	s0,sp,524
 cea:	0000                	unimp
 cec:	0488                	addi	a0,sp,576
	...
 cf6:	0000                	unimp
    seedcrc = crc16(results[0].seed2, seedcrc);
 cf8:	0438                	addi	a4,sp,520
 cfa:	0000                	unimp
 cfc:	0438                	addi	a4,sp,520
 cfe:	0000                	unimp
    seedcrc = crc16(results[0].seed3, seedcrc);
 d00:	0460                	addi	s0,sp,524
 d02:	0000                	unimp
    seedcrc = crc16(results[0].seed2, seedcrc);
 d04:	046c                	addi	a1,sp,524
 d06:	0000                	unimp
    seedcrc = crc16(results[0].seed3, seedcrc);
 d08:	046c                	addi	a1,sp,524
 d0a:	0000                	unimp
 d0c:	0480                	addi	s0,sp,576
	...
    seedcrc = crc16(results[0].size, seedcrc);
 d16:	0000                	unimp
 d18:	050c                	addi	a1,sp,640
 d1a:	0000                	unimp
    switch (seedcrc)
 d1c:	0528                	addi	a0,sp,648
 d1e:	0000                	unimp
 d20:	052c                	addi	a1,sp,648
 d22:	0000                	unimp
    seedcrc = crc16(results[0].size, seedcrc);
 d24:	0530                	addi	a2,sp,648
	...
    switch (seedcrc)
 d2e:	0000                	unimp
 d30:	0588                	addi	a0,sp,704
 d32:	0000                	unimp
 d34:	0594                	addi	a3,sp,704
 d36:	0000                	unimp
 d38:	05a4                	addi	s1,sp,712
 d3a:	0000                	unimp
 d3c:	0658                	addi	a4,sp,772
 d3e:	0000                	unimp
 d40:	067c                	addi	a5,sp,780
 d42:	0000                	unimp
 d44:	068c                	addi	a1,sp,832
	...
            ee_printf("Profile generation run parameters for coremark.\n");
 d52:	0000                	unimp
            known_id = 2;
 d54:	0010                	0x10
 d56:	0000                	unimp
        for (i = 0; i < default_num_contexts; i++)
 d58:	0014                	0x14
 d5a:	0000                	unimp
 d5c:	001c                	0x1c
	...
            results[i].err = 0;
 d6a:	0000                	unimp
 d6c:	0014                	0x14
 d6e:	0000                	unimp
 d70:	0014                	0x14
 d72:	0000                	unimp
                && (results[i].crclist != list_known_crc[known_id]))
 d74:	0030                	addi	a2,sp,8
 d76:	0000                	unimp
            results[i].err = 0;
 d78:	0038                	addi	a4,sp,8
 d7a:	0000                	unimp
 d7c:	004c                	addi	a1,sp,4
	...
                && (results[i].crclist != list_known_crc[known_id]))
 d8a:	0000                	unimp
            results[i].err = 0;
 d8c:	0008                	0x8
 d8e:	0000                	unimp
                && (results[i].crclist != list_known_crc[known_id]))
 d90:	000c                	0xc
 d92:	0000                	unimp
                ee_printf("[%u]ERROR! list crc 0x%04x - should be 0x%04x\n",
 d94:	0014                	0x14
 d96:	0000                	unimp
                ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n",
 d98:	0024                	addi	s1,sp,8
 d9a:	0000                	unimp
                ee_printf("[%u]ERROR! state crc 0x%04x - should be 0x%04x\n",
 d9c:	0028                	addi	a0,sp,8
 d9e:	0000                	unimp
 da0:	0034                	addi	a3,sp,8
 da2:	0000                	unimp
            total_errors += results[i].err;
 da4:	0038                	addi	a4,sp,8
	...
 dae:	0000                	unimp
 db0:	0014                	0x14
 db2:	0000                	unimp
 db4:	001c                	0x1c
 db6:	0000                	unimp
        for (i = 0; i < default_num_contexts; i++)
 db8:	0040                	addi	s0,sp,4
 dba:	0000                	unimp
 dbc:	0040                	addi	s0,sp,4
 dbe:	0000                	unimp
            total_errors += results[i].err;
 dc0:	0050                	addi	a2,sp,4
 dc2:	0000                	unimp
        for (i = 0; i < default_num_contexts; i++)
 dc4:	0054                	addi	a3,sp,4
 dc6:	0000                	unimp
            total_errors += results[i].err;
 dc8:	0058                	addi	a4,sp,4
 dca:	0000                	unimp
 dcc:	005c                	addi	a5,sp,4
 dce:	0000                	unimp
        for (i = 0; i < default_num_contexts; i++)
 dd0:	00a8                	addi	a0,sp,72
 dd2:	0000                	unimp
            total_errors += results[i].err;
 dd4:	00ac                	addi	a1,sp,72
 dd6:	0000                	unimp
 dd8:	0238                	addi	a4,sp,264
 dda:	0000                	unimp
        for (i = 0; i < default_num_contexts; i++)
 ddc:	023c                	addi	a5,sp,264
 dde:	0000                	unimp
            results[i].err = 0;
 de0:	0374                	addi	a3,sp,396
 de2:	0000                	unimp
 de4:	0378                	addi	a4,sp,396
 de6:	0000                	unimp
 de8:	04e4                	addi	s1,sp,588
 dea:	0000                	unimp
 dec:	04e8                	addi	a0,sp,588
	...
 df6:	0000                	unimp
 df8:	0074                	addi	a3,sp,12
 dfa:	0000                	unimp
            if ((results[i].execs & ID_LIST)
 dfc:	0078                	addi	a4,sp,12
 dfe:	0000                	unimp
            results[i].err = 0;
 e00:	007c                	addi	a5,sp,12
 e02:	0000                	unimp
            if ((results[i].execs & ID_LIST)
 e04:	00a8                	addi	a0,sp,72
 e06:	0000                	unimp
 e08:	00ac                	addi	a1,sp,72
 e0a:	0000                	unimp
                && (results[i].crclist != list_known_crc[known_id]))
 e0c:	00b8                	addi	a4,sp,72
 e0e:	0000                	unimp
 e10:	00c0                	addi	s0,sp,68
 e12:	0000                	unimp
 e14:	01d4                	addi	a3,sp,196
 e16:	0000                	unimp
                ee_printf("[%u]ERROR! list crc 0x%04x - should be 0x%04x\n",
 e18:	01e0                	addi	s0,sp,204
 e1a:	0000                	unimp
 e1c:	0238                	addi	a4,sp,264
 e1e:	0000                	unimp
 e20:	023c                	addi	a5,sp,264
 e22:	0000                	unimp
                results[i].err++;
 e24:	02d0                	addi	a2,sp,324
 e26:	0000                	unimp
 e28:	02f8                	addi	a4,sp,332
 e2a:	0000                	unimp
 e2c:	0310                	addi	a2,sp,384
 e2e:	0000                	unimp
            if ((results[i].execs & ID_MATRIX)
 e30:	0318                	addi	a4,sp,384
 e32:	0000                	unimp
 e34:	0348                	addi	a0,sp,388
 e36:	0000                	unimp
 e38:	053c                	addi	a5,sp,648
 e3a:	0000                	unimp
 e3c:	0540                	addi	s0,sp,644
 e3e:	0000                	unimp
 e40:	06ec                	addi	a1,sp,844
 e42:	0000                	unimp
 e44:	06f4                	addi	a3,sp,844
 e46:	0000                	unimp
 e48:	0700                	addi	s0,sp,896
 e4a:	0000                	unimp
 e4c:	070c                	addi	a1,sp,896
	...
                && (results[i].crcmatrix != matrix_known_crc[known_id]))
 e56:	0000                	unimp
 e58:	0094                	addi	a3,sp,64
 e5a:	0000                	unimp
 e5c:	00a4                	addi	s1,sp,72
 e5e:	0000                	unimp
                ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n",
 e60:	00a4                	addi	s1,sp,72
 e62:	0000                	unimp
 e64:	00a8                	addi	a0,sp,72
	...
                results[i].err++;
 e6e:	0000                	unimp
            if ((results[i].execs & ID_STATE)
 e70:	00a8                	addi	a0,sp,72
 e72:	0000                	unimp
                results[i].err++;
 e74:	00a8                	addi	a0,sp,72
 e76:	0000                	unimp
 e78:	01b8                	addi	a4,sp,200
 e7a:	0000                	unimp
                && (results[i].crcstate != state_known_crc[known_id]))
 e7c:	01cc                	addi	a1,sp,196
	...
 e86:	0000                	unimp
            if ((results[i].execs & ID_STATE)
 e88:	0108                	addi	a0,sp,128
 e8a:	0000                	unimp
                && (results[i].crcstate != state_known_crc[known_id]))
 e8c:	0118                	addi	a4,sp,128
 e8e:	0000                	unimp
 e90:	0118                	addi	a4,sp,128
 e92:	0000                	unimp
 e94:	011c                	addi	a5,sp,128
	...
 e9e:	0000                	unimp
 ea0:	02a0                	addi	s0,sp,328
 ea2:	0000                	unimp
 ea4:	02b0                	addi	a2,sp,328
 ea6:	0000                	unimp
            total_errors += results[i].err;
 ea8:	02b8                	addi	a4,sp,328
 eaa:	0000                	unimp
 eac:	02bc                	addi	a5,sp,328
	...
            results[i].list = core_list_init(
 eb6:	0000                	unimp
 eb8:	0318                	addi	a4,sp,384
 eba:	0000                	unimp
 ebc:	0318                	addi	a4,sp,384
 ebe:	0000                	unimp
 ec0:	0320                	addi	s0,sp,392
 ec2:	0000                	unimp
 ec4:	0330                	addi	a2,sp,392
	...
 ece:	0000                	unimp
 ed0:	00b8                	addi	a4,sp,72
 ed2:	0000                	unimp
 ed4:	00c0                	addi	s0,sp,68
 ed6:	0000                	unimp
 ed8:	02d0                	addi	a2,sp,324
 eda:	0000                	unimp
        if (results[i].execs & ID_MATRIX)
 edc:	02d0                	addi	a2,sp,324
 ede:	0000                	unimp
            results[i].list = core_list_init(
 ee0:	0310                	addi	a2,sp,384
 ee2:	0000                	unimp
 ee4:	0318                	addi	a4,sp,384
 ee6:	0000                	unimp
        if (results[i].execs & ID_MATRIX)
 ee8:	0348                	addi	a0,sp,388
 eea:	0000                	unimp
                                 | (((ee_s32)results[i].seed2) << 16),
 eec:	0374                	addi	a3,sp,396
 eee:	0000                	unimp
 ef0:	0378                	addi	a4,sp,396
 ef2:	0000                	unimp
 ef4:	047c                	addi	a5,sp,524
 ef6:	0000                	unimp
 ef8:	0484                	addi	s1,sp,576
 efa:	0000                	unimp
            core_init_matrix(results[0].size,
 efc:	04e4                	addi	s1,sp,588
 efe:	0000                	unimp
                                 | (((ee_s32)results[i].seed2) << 16),
 f00:	04e8                	addi	a0,sp,588
 f02:	0000                	unimp
 f04:	053c                	addi	a5,sp,648
 f06:	0000                	unimp
                             (ee_s32)results[i].seed1
 f08:	0544                	addi	s1,sp,644
 f0a:	0000                	unimp
                                 | (((ee_s32)results[i].seed2) << 16),
 f0c:	0550                	addi	a2,sp,644
 f0e:	0000                	unimp
            core_init_matrix(results[0].size,
 f10:	0558                	addi	a4,sp,644
 f12:	0000                	unimp
                             (ee_s32)results[i].seed1
 f14:	05b0                	addi	a2,sp,712
 f16:	0000                	unimp
            core_init_matrix(results[0].size,
 f18:	05b8                	addi	a4,sp,712
 f1a:	0000                	unimp
                                 | (((ee_s32)results[i].seed2) << 16),
 f1c:	06e4                	addi	s1,sp,844
 f1e:	0000                	unimp
            core_init_matrix(results[0].size,
 f20:	07a0                	addi	s0,sp,968
 f22:	0000                	unimp
 f24:	07a8                	addi	a0,sp,968
 f26:	0000                	unimp
 f28:	07b0                	addi	a2,sp,968
 f2a:	0000                	unimp
        if (results[i].execs & ID_STATE)
 f2c:	07e0                	addi	s0,sp,972
	...
                ee_printf("[%u]ERROR! state crc 0x%04x - should be 0x%04x\n",
 f36:	0000                	unimp
 f38:	0360                	addi	s0,sp,396
 f3a:	0000                	unimp
 f3c:	0370                	addi	a2,sp,396
 f3e:	0000                	unimp
                results[i].err++;
 f40:	0370                	addi	a2,sp,396
 f42:	0000                	unimp
 f44:	0374                	addi	a3,sp,396
	...
 f4e:	0000                	unimp
 f50:	03b8                	addi	a4,sp,456
 f52:	0000                	unimp
 f54:	03c8                	addi	a0,sp,452
 f56:	0000                	unimp
    switch (seedcrc)
 f58:	03c8                	addi	a0,sp,452
 f5a:	0000                	unimp
 f5c:	03cc                	addi	a1,sp,452
	...
 f66:	0000                	unimp
 f68:	03d8                	addi	a4,sp,452
 f6a:	0000                	unimp
 f6c:	03e8                	addi	a0,sp,460
 f6e:	0000                	unimp
            ee_printf("2K performance run parameters for coremark.\n");
 f70:	05f8                	addi	a4,sp,716
 f72:	0000                	unimp
 f74:	0668                	addi	a0,sp,780
 f76:	0000                	unimp
 f78:	067c                	addi	a5,sp,780
 f7a:	0000                	unimp
            known_id = 3;
 f7c:	06e4                	addi	s1,sp,844
	...
        for (i = 0; i < default_num_contexts; i++)
 f86:	0000                	unimp
    total_errors += check_data_types();
 f88:	0564                	addi	s1,sp,652
 f8a:	0000                	unimp
    ee_printf("CoreMark Size    : %lu\n", (long unsigned)results[0].size);
 f8c:	0574                	addi	a3,sp,652
 f8e:	0000                	unimp
    total_errors += check_data_types();
 f90:	05a0                	addi	s0,sp,712
 f92:	0000                	unimp
    ee_printf("CoreMark Size    : %lu\n", (long unsigned)results[0].size);
 f94:	05a8                	addi	a0,sp,712
	...
 f9e:	0000                	unimp
    ee_printf("Total ticks      : %lu\n", (long unsigned)total_time);
 fa0:	02d0                	addi	a2,sp,324
 fa2:	0000                	unimp
 fa4:	02f8                	addi	a4,sp,332
 fa6:	0000                	unimp
 fa8:	070c                	addi	a1,sp,896
 faa:	0000                	unimp
 fac:	0760                	addi	s0,sp,908
 fae:	0000                	unimp
    ee_printf("Total time (secs): %d\n", time_in_secs(total_time));
 fb0:	07e0                	addi	s0,sp,972
 fb2:	0000                	unimp
 fb4:	07ec                	addi	a1,sp,972
	...
 fbe:	0000                	unimp
 fc0:	0760                	addi	s0,sp,908
 fc2:	0000                	unimp
 fc4:	076c                	addi	a1,sp,908
 fc6:	0000                	unimp
    total_errors += check_data_types();
 fc8:	0774                	addi	a3,sp,908
 fca:	0000                	unimp
    if (time_in_secs(total_time) > 0)
 fcc:	0788                	addi	a0,sp,960
	...

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
lui     sp,%hi(__stack_top)                                             
   0:	000c                	0xc
   2:	0000                	unimp
addi    sp,sp,%lo(__stack_top)
   4:	ffff                	0xffff
   6:	ffff                	0xffff
jal   zero, _start
   8:	7c010003          	lb	zero,1984(sp)
   c:	0d01                	addi	s10,s10,0
   e:	0002                	c.slli64	zero
  10:	000c                	0xc
  12:	0000                	unimp
  14:	0000                	unimp
  16:	0000                	unimp
  18:	00c4                	addi	s1,sp,68
  1a:	0000                	unimp
  1c:	005c                	addi	a5,sp,4
  1e:	0000                	unimp
  20:	003c                	addi	a5,sp,8
  22:	0000                	unimp
  24:	0000                	unimp
  26:	0000                	unimp
  28:	0120                	addi	s0,sp,136
  2a:	0000                	unimp
  2c:	0134                	addi	a3,sp,136
  2e:	0000                	unimp
  30:	0e44                	addi	s1,sp,788
  32:	4420                	lw	s0,72(s0)
  34:	0288                	addi	a0,sp,320
  36:	8158                	0x8158
  38:	8901                	andi	a0,a0,0
  3a:	93049203          	lh	tp,-1744(s1)
  3e:	4c05                	li	s8,1
  40:	c10a                	sw	sp,128(sp)
  42:	c848                	sw	a0,20(s0)
  44:	c944                	sw	s1,20(a0)
  46:	d244                	sw	s1,36(a2)
  48:	d344                	sw	s1,36(a4)
  4a:	0e44                	addi	s1,sp,788
  4c:	4400                	lw	s0,8(s0)
  4e:	0a60020b          	0xa60020b
  52:	44c1                	li	s1,16
  54:	44c8                	lw	a0,12(s1)
  56:	44c9                	li	s1,18
  58:	44d2                	lw	s1,20(sp)
  5a:	000e44d3          	fadd.s	fs1,ft8,ft0,rmm
  5e:	0b44                	addi	s1,sp,404
  60:	0020                	addi	s0,sp,8
  62:	0000                	unimp
  64:	0000                	unimp
  66:	0000                	unimp
  68:	0254                	addi	a3,sp,260
  6a:	0000                	unimp
  6c:	004c                	addi	a1,sp,4
  6e:	0000                	unimp
  70:	0e44                	addi	s1,sp,788
  72:	4410                	lw	a2,8(s0)
  74:	0389                	addi	t2,t2,2
  76:	8150                	0x8150
  78:	8801                	andi	s0,s0,0
  7a:	6002                	flw	ft0,0(sp)
  7c:	48c1                	li	a7,16
  7e:	44c8                	lw	a0,12(s1)
  80:	44c9                	li	s1,18
  82:	000e                	c.slli	zero,0x3
  84:	000c                	0xc
  86:	0000                	unimp
  88:	0000                	unimp
  8a:	0000                	unimp
  8c:	02a0                	addi	s0,sp,328
  8e:	0000                	unimp
  90:	0014                	0x14
  92:	0000                	unimp
  94:	000c                	0xc
  96:	0000                	unimp
  98:	0000                	unimp
  9a:	0000                	unimp
  9c:	02b4                	addi	a3,sp,328
  9e:	0000                	unimp
  a0:	0060                	addi	s0,sp,12
  a2:	0000                	unimp
  a4:	000c                	0xc
  a6:	0000                	unimp
  a8:	0000                	unimp
  aa:	0000                	unimp
  ac:	0314                	addi	a3,sp,384
  ae:	0000                	unimp
  b0:	0028                	addi	a0,sp,8
  b2:	0000                	unimp
  b4:	000c                	0xc
  b6:	0000                	unimp
  b8:	0000                	unimp
  ba:	0000                	unimp
  bc:	033c                	addi	a5,sp,392
  be:	0000                	unimp
  c0:	0020                	addi	s0,sp,8
  c2:	0000                	unimp
    if (res == NULL)
  c4:	000c                	0xc
  c6:	0000                	unimp
    return a->idx - b->idx;
  c8:	0000                	unimp
  ca:	0000                	unimp
  cc:	035c                	addi	a5,sp,388
  ce:	0000                	unimp
}
  d0:	0058                	addi	a4,sp,4
  d2:	0000                	unimp
  d4:	000c                	0xc
  d6:	0000                	unimp
        a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16 >> 8));
  d8:	0000                	unimp
  da:	0000                	unimp
  dc:	03b4                	addi	a3,sp,456
  de:	0000                	unimp
  e0:	0024                	addi	s1,sp,8
  e2:	0000                	unimp
  e4:	0044                	addi	s1,sp,4
  e6:	0000                	unimp
  e8:	0000                	unimp
  ea:	0000                	unimp
  ec:	03d8                	addi	a4,sp,452
  ee:	0000                	unimp
  f0:	014c                	addi	a1,sp,132
  f2:	0000                	unimp
        b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16 >> 8));
  f4:	0e44                	addi	s1,sp,788
  f6:	7030                	flw	fa2,96(s0)
    return a->idx - b->idx;
  f8:	0389                	addi	t2,t2,2
  fa:	0795                	addi	a5,a5,5
        b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16 >> 8));
  fc:	0b990997          	auipc	s3,0xb990
 100:	0c9a                	slli	s9,s9,0x6
 102:	0181                	addi	gp,gp,0
 104:	0288                	addi	a0,sp,320
 106:	0492                	slli	s1,s1,0x4
 108:	06940593          	addi	a1,s0,105
 10c:	0896                	slli	a7,a7,0x5
 10e:	0a98                	addi	a4,sp,336
 110:	e002                	fsw	ft0,0(sp)
 112:	44c1                	li	s1,16
    return a->idx - b->idx;
 114:	44c8                	lw	a0,12(s1)
 116:	44c9                	li	s1,18
}
 118:	44d2                	lw	s1,20(sp)
 11a:	44d444d3          	0x44d444d3
 11e:	44d5                	li	s1,21
{
 120:	44d844d7          	vmadc.vxm	v9,v13,a6,v0
 124:	44d9                	li	s1,22
 126:	48da                	lw	a7,148(sp)
    ee_s16 data = *pdata;
 128:	44d6                	lw	s1,84(sp)
 12a:	000e                	c.slli	zero,0x3
{
 12c:	0034                	addi	a3,sp,8
 12e:	0000                	unimp
 130:	0000                	unimp
 132:	0000                	unimp
          & 1;  /* bit 7 indicates if the function result has been cached */
 134:	0524                	addi	s1,sp,648
 136:	0000                	unimp
{
 138:	0288                	addi	a0,sp,320
 13a:	0000                	unimp
 13c:	0e4c                	addi	a1,sp,788
 13e:	5c20                	lw	s0,120(s0)
    if (optype) /* if cached, use cache */
 140:	0288                	addi	a0,sp,320
 142:	0181                	addi	gp,gp,0
 144:	0389                	addi	t2,t2,2
 146:	0492                	slli	s1,s1,0x4
}
 148:	06940593          	addi	a1,s0,105
        return (data & 0x007f);
 14c:	0795                	addi	a5,a5,5
 14e:	0a01b803          	0xa01b803
}
 152:	44c1                	li	s1,16
 154:	44c8                	lw	a0,12(s1)
 156:	44c9                	li	s1,18
 158:	44d444d3          	0x44d444d3
 15c:	48d5                	li	a7,21
 15e:	44d2                	lw	s1,20(sp)
 160:	000e                	c.slli	zero,0x3
 162:	0b44                	addi	s1,sp,404
 164:	0030                	addi	a2,sp,8
 166:	0000                	unimp
        ee_s16 flag = data & 0x7; /* bits 0-2 is type of function to perform */
 168:	0000                	unimp
 16a:	0000                	unimp
               & 0xf);       /* bits 3-6 is specific data for the operation */
 16c:	07ac                	addi	a1,sp,968
 16e:	0000                	unimp
        ee_s16 dtype
 170:	01b4                	addi	a3,sp,200
 172:	0000                	unimp
        dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
 174:	0e44                	addi	s1,sp,788
 176:	4420                	lw	s0,72(s0)
        ee_s16 flag = data & 0x7; /* bits 0-2 is type of function to perform */
 178:	0492                	slli	s1,s1,0x4
 17a:	8854                	0x8854
                retval = core_bench_state(res->size,
 17c:	9302                	jalr	t1
 17e:	8105                	srli	a0,a0,0x1
 180:	4801                	li	a6,0
 182:	0389                	addi	t2,t2,2
        dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
 184:	0a015c03          	lhu	s8,160(sp)
        switch (flag)
 188:	44c8                	lw	a0,12(s1)
 18a:	44c1                	li	s1,16
 18c:	44c9                	li	s1,18
 18e:	4cd248d3          	0x4cd248d3
 192:	000e                	c.slli	zero,0x3
        res->crc = crcu16(retval, res->crc);
 194:	0b44                	addi	s1,sp,404
 196:	0000                	unimp
 198:	000c                	0xc
 19a:	0000                	unimp
 19c:	ffff                	0xffff
 19e:	ffff                	0xffff
 1a0:	7c010003          	lb	zero,1984(sp)
 1a4:	0d01                	addi	s10,s10,0
 1a6:	0002                	c.slli64	zero
 1a8:	0028                	addi	a0,sp,8
 1aa:	0000                	unimp
        *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
 1ac:	0198                	addi	a4,sp,192
 1ae:	0000                	unimp
        retval &= 0x007f;
 1b0:	0960                	addi	s0,sp,156
 1b2:	0000                	unimp
        *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
 1b4:	0088                	addi	a0,sp,64
 1b6:	0000                	unimp
        res->crc = crcu16(retval, res->crc);
 1b8:	0e44                	addi	s1,sp,788
 1ba:	4410                	lw	a2,8(s0)
        *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
 1bc:	0492                	slli	s1,s1,0x4
 1be:	8150                	0x8150
 1c0:	8801                	andi	s0,s0,0
 1c2:	8902                	jr	s2
}
 1c4:	c1580203          	lb	tp,-1003(a6) # 16c15 <RAM_SIZE+0x6c15>
 1c8:	c844                	sw	s1,20(s0)
 1ca:	c944                	sw	s1,20(a0)
 1cc:	d244                	sw	s1,36(a2)
 1ce:	0e48                	addi	a0,sp,788
 1d0:	0000                	unimp
 1d2:	0000                	unimp
 1d4:	0050                	addi	a2,sp,4
 1d6:	0000                	unimp
 1d8:	0198                	addi	a4,sp,192
 1da:	0000                	unimp
 1dc:	09e8                	addi	a0,sp,220
 1de:	0000                	unimp
                retval = core_bench_state(res->size,
 1e0:	09c8                	addi	a0,sp,212
 1e2:	0000                	unimp
 1e4:	0e44                	addi	s1,sp,788
 1e6:	0ff0                	addi	a2,sp,988
 1e8:	0e78                	addi	a4,sp,796
 1ea:	10e0                	addi	s0,sp,108
 1ec:	0288                	addi	a0,sp,320
 1ee:	0389                	addi	t2,t2,2
 1f0:	0492                	slli	s1,s1,0x4
 1f2:	0181                	addi	gp,gp,0
 1f4:	06940593          	addi	a1,s0,105
 1f8:	0795                	addi	a5,a5,5
 1fa:	0896                	slli	a7,a7,0x5
 1fc:	0a980997          	auipc	s3,0xa980
 200:	0b99                	addi	s7,s7,6
 202:	0c9a                	slli	s9,s9,0x6
 204:	0a082403          	lw	s0,160(a6)
                if (res->crcstate == 0)
 208:	f00e                	fsw	ft3,32(sp)
 20a:	44c1440f          	0x44c1440f
                retval = core_bench_state(res->size,
 20e:	44c8                	lw	a0,12(s1)
 210:	44c9                	li	s1,18
 212:	44d2                	lw	s1,20(sp)
                if (res->crcstate == 0)
 214:	44d444d3          	0x44d444d3
        res->crc = crcu16(retval, res->crc);
 218:	44d5                	li	s1,21
 21a:	44d6                	lw	s1,84(sp)
                    res->crcstate = retval;
 21c:	44d844d7          	vmadc.vxm	v9,v13,a6,v0
 220:	44d9                	li	s1,22
 222:	44da                	lw	s1,148(sp)
                retval = core_bench_matrix(&(res->mat), dtype, res->crc);
 224:	000e                	c.slli	zero,0x3
 226:	0b44                	addi	s1,sp,404
 228:	000c                	0xc
 22a:	0000                	unimp
 22c:	ffff                	0xffff
 22e:	ffff                	0xffff
                if (res->crcmatrix == 0)
 230:	7c010003          	lb	zero,1984(sp)
                retval = core_bench_matrix(&(res->mat), dtype, res->crc);
 234:	0d01                	addi	s10,s10,0
 236:	0002                	c.slli64	zero
 238:	004c                	addi	a1,sp,4
 23a:	0000                	unimp
                if (res->crcmatrix == 0)
 23c:	0228                	addi	a0,sp,264
 23e:	0000                	unimp
        res->crc = crcu16(retval, res->crc);
 240:	13b0                	addi	a2,sp,488
 242:	0000                	unimp
                    res->crcmatrix = retval;
 244:	01d8                	addi	a4,sp,196
 246:	0000                	unimp
 248:	0e44                	addi	s1,sp,788
 24a:	7450                	flw	fa2,44(s0)
        res->crc = crcu16(retval, res->crc);
 24c:	0492                	slli	s1,s1,0x4
 24e:	01810d9b          	0x1810d9b
 252:	0288                	addi	a0,sp,320
{
 254:	0389                	addi	t2,t2,2
 256:	06940593          	addi	a1,s0,105
 25a:	0795                	addi	a5,a5,5
 25c:	0896                	slli	a7,a7,0x5
 25e:	0a980997          	auipc	s3,0xa980
    ee_s16 val1 = calc_func(&(a->data16), res);
 262:	0b99                	addi	s7,s7,6
{
 264:	0c9a                	slli	s9,s9,0x6
 266:	0a013c03          	0xa013c03
 26a:	48c1                	li	a7,16
 26c:	50c8                	lw	a0,36(s1)
 26e:	44c9                	li	s1,18
    ee_s16 val1 = calc_func(&(a->data16), res);
 270:	44d2                	lw	s1,20(sp)
 272:	44d444d3          	0x44d444d3
 276:	44d5                	li	s1,21
    ee_s16 val2 = calc_func(&(b->data16), res);
 278:	44d6                	lw	s1,84(sp)
 27a:	44d844d7          	vmadc.vxm	v9,v13,a6,v0
 27e:	44d9                	li	s1,22
    ee_s16 val1 = calc_func(&(a->data16), res);
 280:	44da                	lw	s1,148(sp)
 282:	000e44db          	0xe44db
    ee_s16 val2 = calc_func(&(b->data16), res);
 286:	0b44                	addi	s1,sp,404
}
 288:	000c                	0xc
 28a:	0000                	unimp
 28c:	0228                	addi	a0,sp,264
 28e:	0000                	unimp
 290:	1588                	addi	a0,sp,736
 292:	0000                	unimp
 294:	0098                	addi	a4,sp,64
 296:	0000                	unimp
 298:	0048                	addi	a0,sp,4
 29a:	0000                	unimp
 29c:	0228                	addi	a0,sp,264
 29e:	0000                	unimp
    to->data16 = from->data16;
 2a0:	1620                	addi	s0,sp,808
 2a2:	0000                	unimp
    to->idx    = from->idx;
 2a4:	00d8                	addi	a4,sp,68
 2a6:	0000                	unimp
    to->data16 = from->data16;
 2a8:	0e48                	addi	a0,sp,788
 2aa:	4830                	lw	a2,80(s0)
    to->idx    = from->idx;
 2ac:	0492                	slli	s1,s1,0x4
 2ae:	93600997          	auipc	s3,0x93600
}
 2b2:	9405                	srai	s0,s0,0x21
    if ((*memblock + 1) >= memblock_end)
 2b4:	9606                	add	a2,a2,ra
 2b6:	9808                	0x9808
 2b8:	990a                	add	s2,s2,sp
 2ba:	540c9a0b          	0x540c9a0b
 2be:	0181                	addi	gp,gp,0
    if ((*datablock + 1) >= datablock_end)
 2c0:	0288                	addi	a0,sp,320
 2c2:	0389                	addi	t2,t2,2
 2c4:	0795                	addi	a5,a5,5
 2c6:	5c02                	lw	s8,32(sp)
 2c8:	44c1                	li	s1,16
 2ca:	44c8                	lw	a0,12(s1)
    (*memblock)++;
 2cc:	44c9                	li	s1,18
 2ce:	44d2                	lw	s1,20(sp)
    newitem->next      = insert_point->next;
 2d0:	44d444d3          	0x44d444d3
    to->data16 = from->data16;
 2d4:	44d5                	li	s1,21
 2d6:	44d6                	lw	s1,84(sp)
    to->idx    = from->idx;
 2d8:	44d844d7          	vmadc.vxm	v9,v13,a6,v0
    newitem->next      = insert_point->next;
 2dc:	44d9                	li	s1,22
 2de:	44da                	lw	s1,148(sp)
    insert_point->next = newitem;
 2e0:	000e                	c.slli	zero,0x3
 2e2:	0000                	unimp
    newitem->info = *datablock;
 2e4:	000c                	0xc
 2e6:	0000                	unimp
    (*datablock)++;
 2e8:	0228                	addi	a0,sp,264
 2ea:	0000                	unimp
}
 2ec:	16f8                	addi	a4,sp,876
 2ee:	0000                	unimp
    (*datablock)++;
 2f0:	0050                	addi	a2,sp,4
 2f2:	0000                	unimp
 2f4:	0044                	addi	s1,sp,4
 2f6:	0000                	unimp
    copy_info(newitem->info, info);
 2f8:	0228                	addi	a0,sp,264
 2fa:	0000                	unimp
    to->data16 = from->data16;
 2fc:	1748                	addi	a0,sp,932
 2fe:	0000                	unimp
    to->idx    = from->idx;
 300:	00dc                	addi	a5,sp,68
 302:	0000                	unimp
}
 304:	0e48                	addi	a0,sp,788
 306:	4830                	lw	a2,80(s0)
        return NULL;
 308:	0694                	addi	a3,sp,832
 30a:	0795                	addi	a5,a5,5
}
 30c:	974c                	0x974c
 30e:	5009                	c.li	zero,-30
 310:	08960593          	addi	a1,a2,137
{
 314:	0a98                	addi	a4,sp,336
 316:	996c                	0x996c
    list_head *ret = item->next;
 318:	8801810b          	0x8801810b
    tmp        = item->info;
 31c:	8902                	jr	s2
 31e:	02049203          	lh	tp,32(s1)
    item->info = ret->info;
 322:	c150                	sw	a2,4(a0)
    item->next = item->next->next;
 324:	c844                	sw	s1,20(s0)
 326:	c944                	sw	s1,20(a0)
    item->info = ret->info;
 328:	d244                	sw	s1,36(a2)
 32a:	d344                	sw	s1,36(a4)
    ret->info  = tmp;
 32c:	d444                	sw	s1,44(s0)
 32e:	d544                	sw	s1,44(a0)
    item->next = item->next->next;
 330:	d644                	sw	s1,44(a2)
 332:	d744                	sw	s1,44(a4)
    ret->next  = NULL;
 334:	d844                	sw	s1,52(s0)
 336:	d944                	sw	s1,52(a0)
}
 338:	0e44                	addi	s1,sp,788
 33a:	0000                	unimp
    item_removed->info  = item_modified->info;
 33c:	0048                	addi	a0,sp,4
 33e:	0000                	unimp
    tmp                 = item_removed->info;
 340:	0228                	addi	a0,sp,264
 342:	0000                	unimp
    item_removed->next  = item_modified->next;
 344:	1824                	addi	s1,sp,56
 346:	0000                	unimp
    item_removed->info  = item_modified->info;
 348:	0124                	addi	s1,sp,136
 34a:	0000                	unimp
    item_modified->info = tmp;
 34c:	0e44                	addi	s1,sp,788
 34e:	7450                	flw	fa2,44(s0)
    item_removed->next  = item_modified->next;
 350:	0181                	addi	gp,gp,0
 352:	0288                	addi	a0,sp,320
    item_modified->next = item_removed;
 354:	0389                	addi	t2,t2,2
 356:	0492                	slli	s1,s1,0x4
}
 358:	06940593          	addi	a1,s0,105
    if (info->idx >= 0)
 35c:	0795                	addi	a5,a5,5
 35e:	0896                	slli	a7,a7,0x5
 360:	0a980997          	auipc	s3,0xa980
        while (list && (list->info->idx != info->idx))
 364:	0b99                	addi	s7,s7,6
 366:	0c9a                	slli	s9,s9,0x6
 368:	b4020d9b          	0xb4020d9b
            list = list->next;
 36c:	44c1                	li	s1,16
 36e:	44c8                	lw	a0,12(s1)
        while (list && (list->info->idx != info->idx))
 370:	44c9                	li	s1,18
 372:	44d2                	lw	s1,20(sp)
 374:	44d444d3          	0x44d444d3
 378:	44d5                	li	s1,21
 37a:	44d6                	lw	s1,84(sp)
 37c:	44d844d7          	vmadc.vxm	v9,v13,a6,v0
 380:	44d9                	li	s1,22
 382:	44da                	lw	s1,148(sp)
        while (list && ((list->info->data16 & 0xff) != info->data16))
 384:	000e44db          	0xe44db
 388:	0048                	addi	a0,sp,4
 38a:	0000                	unimp
 38c:	0228                	addi	a0,sp,264
 38e:	0000                	unimp
            list = list->next;
 390:	1948                	addi	a0,sp,180
 392:	0000                	unimp
        while (list && ((list->info->data16 & 0xff) != info->data16))
 394:	0138                	addi	a4,sp,136
 396:	0000                	unimp
 398:	0e44                	addi	s1,sp,788
 39a:	7450                	flw	fa2,44(s0)
 39c:	0181                	addi	gp,gp,0
 39e:	0288                	addi	a0,sp,320
 3a0:	0389                	addi	t2,t2,2
 3a2:	0492                	slli	s1,s1,0x4
 3a4:	06940593          	addi	a1,s0,105
 3a8:	0795                	addi	a5,a5,5
 3aa:	0896                	slli	a7,a7,0x5
}
 3ac:	0a980997          	auipc	s3,0xa980
 3b0:	0b99                	addi	s7,s7,6
 3b2:	0c9a                	slli	s9,s9,0x6
    while (list)
 3b4:	c8020d9b          	0xc8020d9b
    list_head *next = NULL, *tmp;
 3b8:	44c1                	li	s1,16
 3ba:	44c8                	lw	a0,12(s1)
 3bc:	44c9                	li	s1,18
 3be:	44d2                	lw	s1,20(sp)
 3c0:	44d444d3          	0x44d444d3
        tmp        = list->next;
 3c4:	44d5                	li	s1,21
 3c6:	44d6                	lw	s1,84(sp)
        list->next = next;
 3c8:	44d844d7          	vmadc.vxm	v9,v13,a6,v0
    while (list)
 3cc:	44d9                	li	s1,22
 3ce:	44da                	lw	s1,148(sp)
 3d0:	000e44db          	0xe44db
}
 3d4:	004c                	addi	a1,sp,4
 3d6:	0000                	unimp
{
 3d8:	0228                	addi	a0,sp,264
 3da:	0000                	unimp
 3dc:	1a80                	addi	s0,sp,368
 3de:	0000                	unimp
 3e0:	0478                	addi	a4,sp,524
 3e2:	0000                	unimp
 3e4:	0e44                	addi	s1,sp,788
 3e6:	7850                	flw	fa2,52(s0)
 3e8:	0389                	addi	t2,t2,2
 3ea:	0694                	addi	a3,sp,832
 3ec:	0181                	addi	gp,gp,0
 3ee:	0288                	addi	a0,sp,320
 3f0:	0492                	slli	s1,s1,0x4
 3f2:	07950593          	addi	a1,a0,121
 3f6:	0896                	slli	a7,a7,0x5
 3f8:	0a980997          	auipc	s3,0xa980
 3fc:	0b99                	addi	s7,s7,6
 3fe:	0c9a                	slli	s9,s9,0x6
 400:	7c030d9b          	0x7c030d9b
 404:	44c10a03          	lb	s4,1100(sp)
 408:	48c8                	lw	a0,20(s1)
 40a:	44c9                	li	s1,18
 40c:	44d2                	lw	s1,20(sp)
 40e:	44d444d3          	0x44d444d3
 412:	44d5                	li	s1,21
 414:	44d6                	lw	s1,84(sp)
 416:	44d844d7          	vmadc.vxm	v9,v13,a6,v0
    insize = 1;
 41a:	44d9                	li	s1,22
        if (nmerges <= 1) /* allow for nmerges==0, the empty list case */
 41c:	44da                	lw	s1,148(sp)
 41e:	000e48db          	0xe48db
        while (p)
 422:	0b44                	addi	s1,sp,404
        nmerges = 0; /* count number of merges we do in this pass */
 424:	001c                	0x1c
 426:	0000                	unimp
        tail = NULL;
 428:	0228                	addi	a0,sp,264
 42a:	0000                	unimp
        list = NULL;
 42c:	1ef8                	addi	a4,sp,892
 42e:	0000                	unimp
            nmerges++; /* there exists a merge to be done */
 430:	003c                	addi	a5,sp,8
 432:	0000                	unimp
 434:	0e44                	addi	s1,sp,788
 436:	4810                	lw	a2,16(s0)
            psize = 0;
 438:	0288                	addi	a0,sp,320
 43a:	8158                	0x8158
                q = q->next;
 43c:	4c01                	li	s8,0
 43e:	44c8                	lw	a0,12(s1)
                psize++;
 440:	44c1                	li	s1,16
 442:	000e                	c.slli	zero,0x3
                if (!q)
 444:	000c                	0xc
 446:	0000                	unimp
            for (i = 0; i < insize; i++)
 448:	ffff                	0xffff
 44a:	ffff                	0xffff
                    list = e;
 44c:	7c010003          	lb	zero,1984(sp)
 450:	0d01                	addi	s10,s10,0
 452:	0002                	c.slli64	zero
 454:	000c                	0xc
 456:	0000                	unimp
            while (psize > 0 || (qsize > 0 && q))
 458:	0444                	addi	s1,sp,516
 45a:	0000                	unimp
                else if (qsize == 0 || !q)
 45c:	1f34                	addi	a3,sp,952
 45e:	0000                	unimp
 460:	0030                	addi	a2,sp,8
 462:	0000                	unimp
                else if (cmp(p->info, q->info, res) <= 0)
 464:	000c                	0xc
 466:	0000                	unimp
 468:	0444                	addi	s1,sp,516
 46a:	0000                	unimp
 46c:	1f64                	addi	s1,sp,956
 46e:	0000                	unimp
 470:	0034                	addi	a3,sp,8
 472:	0000                	unimp
 474:	000c                	0xc
 476:	0000                	unimp
                    qsize--;
 478:	0444                	addi	s1,sp,516
 47a:	0000                	unimp
                    q = q->next;
 47c:	1f98                	addi	a4,sp,1008
 47e:	0000                	unimp
                    qsize--;
 480:	0034                	addi	a3,sp,8
 482:	0000                	unimp
                if (tail)
 484:	000c                	0xc
 486:	0000                	unimp
                    tail->next = e;
 488:	0444                	addi	s1,sp,516
 48a:	0000                	unimp
                    list = e;
 48c:	1fcc                	addi	a1,sp,1012
 48e:	0000                	unimp
            while (psize > 0 || (qsize > 0 && q))
 490:	0010                	0x10
 492:	0000                	unimp
 494:	0018                	0x18
 496:	0000                	unimp
 498:	0444                	addi	s1,sp,516
 49a:	0000                	unimp
                    qsize--;
 49c:	1fdc                	addi	a5,sp,1012
 49e:	0000                	unimp
 4a0:	001c                	0x1c
 4a2:	0000                	unimp
                    q = q->next;
 4a4:	0e44                	addi	s1,sp,788
 4a6:	4810                	lw	a2,16(s0)
                if (tail)
 4a8:	0181                	addi	gp,gp,0
 4aa:	c148                	sw	a0,4(a0)
                    list = e;
 4ac:	0e44                	addi	s1,sp,788
 4ae:	0000                	unimp
 4b0:	000c                	0xc
 4b2:	0000                	unimp
 4b4:	0444                	addi	s1,sp,516
 4b6:	0000                	unimp
                    psize--;
 4b8:	1ff8                	addi	a4,sp,1020
 4ba:	0000                	unimp
 4bc:	000c                	0xc
 4be:	0000                	unimp
                    p = p->next;
 4c0:	000c                	0xc
 4c2:	0000                	unimp
 4c4:	0444                	addi	s1,sp,516
 4c6:	0000                	unimp
        while (p)
 4c8:	2004                	fld	fs1,0(s0)
 4ca:	0000                	unimp
        tail->next = NULL;
 4cc:	0008                	0x8
 4ce:	0000                	unimp
        if (nmerges <= 1) /* allow for nmerges==0, the empty list case */
 4d0:	000c                	0xc
 4d2:	0000                	unimp
        insize *= 2;
 4d4:	ffff                	0xffff
 4d6:	ffff                	0xffff
        p    = list;
 4d8:	7c010003          	lb	zero,1984(sp)
 4dc:	0d01                	addi	s10,s10,0
 4de:	0002                	c.slli64	zero
        tail->next = NULL;
 4e0:	0020                	addi	s0,sp,8
 4e2:	0000                	unimp
 4e4:	04d0                	addi	a2,sp,580
 4e6:	0000                	unimp
}
 4e8:	200c                	fld	fa1,0(s0)
 4ea:	0000                	unimp
 4ec:	0148                	addi	a0,sp,132
 4ee:	0000                	unimp
 4f0:	0e60                	addi	s0,sp,796
 4f2:	4c10                	lw	a2,24(s0)
 4f4:	0188                	addi	a0,sp,192
 4f6:	c002                	sw	zero,0(sp)
 4f8:	c80a                	sw	sp,16(sp)
 4fa:	0e50                	addi	a2,sp,788
 4fc:	4400                	lw	s0,8(s0)
 4fe:	44c86c0b          	0x44c86c0b
 502:	000e                	c.slli	zero,0x3
 504:	000c                	0xc
 506:	0000                	unimp
 508:	04d0                	addi	a2,sp,580
 50a:	0000                	unimp
 50c:	2154                	fld	fa3,128(a0)
 50e:	0000                	unimp
 510:	0318                	addi	a4,sp,384
 512:	0000                	unimp
 514:	0040                	addi	s0,sp,4
 516:	0000                	unimp
 518:	04d0                	addi	a2,sp,580
 51a:	0000                	unimp
 51c:	246c                	fld	fa1,200(s0)
 51e:	0000                	unimp
 520:	01dc                	addi	a5,sp,196
 522:	0000                	unimp
{
 524:	0e44                	addi	s1,sp,788
 526:	0180                	addi	s0,sp,192
    ee_s16     find_num = res->seed3;
 528:	8864                	0x8864
 52a:	8902                	jr	s2
{
 52c:	93049203          	lh	tp,-1744(s1)
 530:	9405                	srai	s0,s0,0x21
 532:	9506                	add	a0,a0,ra
 534:	81089607          	flh	fa2,-2032(a7)
 538:	9701                	srai	a4,a4,0x20
 53a:	0309                	addi	t1,t1,2
 53c:	0178                	addi	a4,sp,140
 53e:	c10a                	sw	sp,128(sp)
 540:	c844                	sw	s1,20(s0)
 542:	c944                	sw	s1,20(a0)
 544:	d244                	sw	s1,36(a2)
 546:	d344                	sw	s1,36(a4)
 548:	d444                	sw	s1,44(s0)
 54a:	d544                	sw	s1,44(a0)
    list_head *list     = res->list;
 54c:	d644                	sw	s1,44(a2)
 54e:	d744                	sw	s1,44(a4)
    for (i = 0; i < find_num; i++)
 550:	0e44                	addi	s1,sp,788
 552:	4400                	lw	s0,8(s0)
    info.idx = finder_idx;
 554:	0000000b          	0xb
    for (i = 0; i < find_num; i++)
 558:	000c                	0xc
 55a:	0000                	unimp
    ee_u16     found = 0, missed = 0;
 55c:	ffff                	0xffff
 55e:	ffff                	0xffff
 560:	7c010003          	lb	zero,1984(sp)
    ee_u16     retval = 0;
 564:	0d01                	addi	s10,s10,0
 566:	0002                	c.slli64	zero
        info.data16 = (i & 0xff);
 568:	000c                	0xc
 56a:	0000                	unimp
    if (info->idx >= 0)
 56c:	0558                	addi	a4,sp,644
 56e:	0000                	unimp
        while (list && (list->info->idx != info->idx))
 570:	2648                	fld	fa0,136(a2)
 572:	0000                	unimp
 574:	0050                	addi	a2,sp,4
 576:	0000                	unimp
 578:	000c                	0xc
 57a:	0000                	unimp
            list = list->next;
 57c:	0558                	addi	a4,sp,644
 57e:	0000                	unimp
        while (list && (list->info->idx != info->idx))
 580:	2698                	fld	fa4,8(a3)
 582:	0000                	unimp
 584:	0044                	addi	s1,sp,4
 586:	0000                	unimp
 588:	000c                	0xc
 58a:	0000                	unimp
 58c:	0558                	addi	a4,sp,644
 58e:	0000                	unimp
    list_head *next = NULL, *tmp;
 590:	26dc                	fld	fa5,136(a3)
 592:	0000                	unimp
 594:	0084                	addi	s1,sp,64
 596:	0000                	unimp
 598:	000c                	0xc
 59a:	0000                	unimp
 59c:	0558                	addi	a4,sp,644
 59e:	0000                	unimp
        tmp        = list->next;
 5a0:	2760                	fld	fs0,200(a4)
 5a2:	0000                	unimp
        list->next = next;
 5a4:	010c                	addi	a1,sp,128
 5a6:	0000                	unimp
    while (list)
 5a8:	000c                	0xc
 5aa:	0000                	unimp
        if (this_find == NULL)
 5ac:	0558                	addi	a4,sp,644
 5ae:	0000                	unimp
            if (this_find->info->data16 & 0x1) /* use found value */
 5b0:	286c                	fld	fa1,208(s0)
 5b2:	0000                	unimp
            found++;
 5b4:	008c                	addi	a1,sp,64
 5b6:	0000                	unimp
 5b8:	000c                	0xc
 5ba:	0000                	unimp
            if (this_find->info->data16 & 0x1) /* use found value */
 5bc:	0558                	addi	a4,sp,644
 5be:	0000                	unimp
            found++;
 5c0:	28f8                	fld	fa4,208(s1)
 5c2:	0000                	unimp
            if (this_find->info->data16 & 0x1) /* use found value */
 5c4:	0008                	0x8
 5c6:	0000                	unimp
 5c8:	000c                	0xc
 5ca:	0000                	unimp
                retval += (this_find->info->data16 >> 9) & 1;
 5cc:	ffff                	0xffff
 5ce:	ffff                	0xffff
 5d0:	7c010003          	lb	zero,1984(sp)
 5d4:	0d01                	addi	s10,s10,0
 5d6:	0002                	c.slli64	zero
 5d8:	004c                	addi	a1,sp,4
 5da:	0000                	unimp
 5dc:	05c8                	addi	a0,sp,708
 5de:	0000                	unimp
            if (this_find->next != NULL)
 5e0:	2900                	fld	fs0,16(a0)
 5e2:	0000                	unimp
 5e4:	03dc                	addi	a5,sp,452
 5e6:	0000                	unimp
                this_find->next = finder->next;
 5e8:	0e44                	addi	s1,sp,788
 5ea:	7460                	flw	fs0,108(s0)
 5ec:	0288                	addi	a0,sp,320
 5ee:	0389                	addi	t2,t2,2
                finder->next    = list->next;
 5f0:	0492                	slli	s1,s1,0x4
 5f2:	0b990593          	addi	a1,s2,185
 5f6:	0181                	addi	gp,gp,0
                list->next      = finder;
 5f8:	0694                	addi	a3,sp,832
 5fa:	0795                	addi	a5,a5,5
        if (info.idx >= 0)
 5fc:	0896                	slli	a7,a7,0x5
 5fe:	0a980997          	auipc	s3,0xa980
            info.idx++;
 602:	0c9a                	slli	s9,s9,0x6
 604:	18030d9b          	0x18030d9b
 608:	0a02                	c.slli64	s4
 60a:	44c1                	li	s1,16
    for (i = 0; i < find_num; i++)
 60c:	44c8                	lw	a0,12(s1)
 60e:	44c9                	li	s1,18
 610:	44d2                	lw	s1,20(sp)
 612:	44d4                	lw	a3,12(s1)
 614:	44d5                	li	s1,21
 616:	44d6                	lw	s1,84(sp)
 618:	44d844d7          	vmadc.vxm	v9,v13,a6,v0
    retval += found * 4 - missed;
 61c:	44d9                	li	s1,22
 61e:	44da                	lw	s1,148(sp)
 620:	44d348db          	0x44d348db
 624:	000e                	c.slli	zero,0x3
 626:	0b44                	addi	s1,sp,404
 628:	000c                	0xc
 62a:	0000                	unimp
 62c:	05c8                	addi	a0,sp,708
 62e:	0000                	unimp
    if (finder_idx > 0)
 630:	2cdc                	fld	fa5,152(s1)
 632:	0000                	unimp
        list = core_list_mergesort(list, cmp_complex, res);
 634:	000c                	0xc
 636:	0000                	unimp
 638:	000c                	0xc
 63a:	0000                	unimp
 63c:	05c8                	addi	a0,sp,708
 63e:	0000                	unimp
 640:	2ce8                	fld	fa0,216(s1)
 642:	0000                	unimp
    remover = core_list_remove(list->next);
 644:	0008                	0x8
 646:	0000                	unimp
    list_head *ret = item->next;
 648:	000c                	0xc
 64a:	0000                	unimp
 64c:	05c8                	addi	a0,sp,708
 64e:	0000                	unimp
    tmp        = item->info;
 650:	2cf0                	fld	fa2,216(s1)
 652:	0000                	unimp
    item->info = ret->info;
 654:	000c                	0xc
 656:	0000                	unimp
    item->next = item->next->next;
 658:	000c                	0xc
 65a:	0000                	unimp
    item->info = ret->info;
 65c:	05c8                	addi	a0,sp,708
 65e:	0000                	unimp
    ret->info  = tmp;
 660:	2cfc                	fld	fa5,216(s1)
 662:	0000                	unimp
    item->next = item->next->next;
 664:	0008                	0x8
 666:	0000                	unimp
    ret->next  = NULL;
 668:	000c                	0xc
 66a:	0000                	unimp
    if (info->idx >= 0)
 66c:	ffff                	0xffff
 66e:	ffff                	0xffff
        while (list && (list->info->idx != info->idx))
 670:	7c010003          	lb	zero,1984(sp)
 674:	0d01                	addi	s10,s10,0
 676:	0002                	c.slli64	zero
 678:	0050                	addi	a2,sp,4
 67a:	0000                	unimp
            list = list->next;
 67c:	0668                	addi	a0,sp,780
 67e:	0000                	unimp
        while (list && (list->info->idx != info->idx))
 680:	2d04                	fld	fs1,24(a0)
 682:	0000                	unimp
        finder = list->next;
 684:	0324                	addi	s1,sp,392
 686:	0000                	unimp
    while (finder)
 688:	0e44                	addi	s1,sp,788
 68a:	01a0                	addi	s0,sp,200
        retval = crc16(list->info->data16, retval);
 68c:	8974                	0x8974
 68e:	98049203          	lh	tp,-1664(s1)
 692:	9b0a                	add	s6,s6,sp
 694:	810d                	srli	a0,a0,0x3
 696:	8801                	andi	s0,s0,0
 698:	9302                	jalr	t1
 69a:	9405                	srai	s0,s0,0x21
        finder = finder->next;
 69c:	9506                	add	a0,a0,ra
 69e:	97089607          	flh	fa2,-1680(a7)
        retval = crc16(list->info->data16, retval);
 6a2:	9909                	andi	a0,a0,-30
    while (finder)
 6a4:	030c9a0b          	0x30c9a0b
    remover = core_list_undo_remove(remover, list->next);
 6a8:	01bc                	addi	a5,sp,200
 6aa:	c10a                	sw	sp,128(sp)
    tmp                 = item_removed->info;
 6ac:	c844                	sw	s1,20(s0)
 6ae:	c944                	sw	s1,20(a0)
    item_removed->info  = item_modified->info;
 6b0:	d244                	sw	s1,36(a2)
 6b2:	d344                	sw	s1,36(a4)
    item_removed->next  = item_modified->next;
 6b4:	d444                	sw	s1,44(s0)
 6b6:	d544                	sw	s1,44(a0)
    item_removed->info  = item_modified->info;
 6b8:	d644                	sw	s1,44(a2)
 6ba:	d744                	sw	s1,44(a4)
    item_modified->info = tmp;
 6bc:	d844                	sw	s1,52(s0)
 6be:	d944                	sw	s1,52(a0)
    item_removed->next  = item_modified->next;
 6c0:	da44                	sw	s1,52(a2)
 6c2:	db44                	sw	s1,52(a4)
    list = core_list_mergesort(list, cmp_idx, NULL);
 6c4:	0e48                	addi	a0,sp,788
 6c6:	4400                	lw	s0,8(s0)
    item_modified->next = item_removed;
 6c8:	0000000b          	0xb
    list = core_list_mergesort(list, cmp_idx, NULL);
 6cc:	000c                	0xc
 6ce:	0000                	unimp
 6d0:	0668                	addi	a0,sp,780
 6d2:	0000                	unimp
 6d4:	3028                	fld	fa0,96(s0)
 6d6:	0000                	unimp
    finder = list->next;
 6d8:	000c                	0xc
 6da:	0000                	unimp
    list = core_list_mergesort(list, cmp_idx, NULL);
 6dc:	004c                	addi	a1,sp,4
 6de:	0000                	unimp
    while (finder)
 6e0:	0668                	addi	a0,sp,780
 6e2:	0000                	unimp
        retval = crc16(list->info->data16, retval);
 6e4:	3034                	fld	fa3,96(s0)
 6e6:	0000                	unimp
 6e8:	08e0                	addi	s0,sp,92
 6ea:	0000                	unimp
 6ec:	0e44                	addi	s1,sp,788
 6ee:	0990                	addi	a2,sp,208
 6f0:	9674                	0x9674
 6f2:	8110                	0x8110
        finder = finder->next;
 6f4:	8809                	andi	s0,s0,2
 6f6:	890a                	mv	s2,sp
        retval = crc16(list->info->data16, retval);
 6f8:	930c920b          	0x930c920b
    while (finder)
 6fc:	940d                	srai	s0,s0,0x23
 6fe:	950e                	add	a0,a0,gp
}
 700:	9811970f          	0x9811970f
 704:	9912                	add	s2,s2,tp
 706:	9b149a13          	0x9b149a13
 70a:	0215                	addi	tp,tp,5
 70c:	0a9c                	addi	a5,sp,336
 70e:	44c1                	li	s1,16
 710:	44c8                	lw	a0,12(s1)
 712:	44c9                	li	s1,18
 714:	44d2                	lw	s1,20(sp)
 716:	44d444d3          	0x44d444d3
 71a:	44d5                	li	s1,21
 71c:	44d6                	lw	s1,84(sp)
 71e:	44d844d7          	vmadc.vxm	v9,v13,a6,v0
 722:	44d9                	li	s1,22
 724:	44da                	lw	s1,148(sp)
 726:	000e44db          	0xe44db
        while (list && ((list->info->data16 & 0xff) != info->data16))
 72a:	0b44                	addi	s1,sp,404
 72c:	000c                	0xc
 72e:	0000                	unimp
 730:	ffff                	0xffff
 732:	ffff                	0xffff
            list = list->next;
 734:	7c010003          	lb	zero,1984(sp)
        while (list && ((list->info->data16 & 0xff) != info->data16))
 738:	0d01                	addi	s10,s10,0
 73a:	0002                	c.slli64	zero
        finder = list->next;
 73c:	0030                	addi	a2,sp,8
 73e:	0000                	unimp
    while (finder)
 740:	072c                	addi	a1,sp,904
 742:	0000                	unimp
 744:	3914                	fld	fa3,48(a0)
 746:	0000                	unimp
        while (list && ((list->info->data16 & 0xff) != info->data16))
 748:	07d8                	addi	a4,sp,964
 74a:	0000                	unimp
 74c:	0e4c                	addi	a1,sp,788
 74e:	5820                	lw	s0,112(s0)
 750:	0288                	addi	a0,sp,320
 752:	8954                	0x8954
            list = list->next;
 754:	01815803          	lhu	a6,24(sp)
        while (list && ((list->info->data16 & 0xff) != info->data16))
 758:	0492                	slli	s1,s1,0x4
 75a:	0c030593          	addi	a1,t1,192
 75e:	44c10a07          	vluxseg3ei8.v	v20,(sp),v12,v0.t
 762:	58c8                	lw	a0,52(s1)
 764:	44d2                	lw	s1,20(sp)
 766:	44c9                	li	s1,18
 768:	000e48d3          	fadd.s	fa7,ft8,ft0,rmm
            retval += (list->next->info->data16 >> 8) & 1;
 76c:	0b44                	addi	s1,sp,404
 76e:	0000                	unimp
            missed++;
 770:	000c                	0xc
 772:	0000                	unimp
 774:	ffff                	0xffff
 776:	ffff                	0xffff
            retval += (list->next->info->data16 >> 8) & 1;
 778:	7c010003          	lb	zero,1984(sp)
            missed++;
 77c:	0d01                	addi	s10,s10,0
 77e:	0002                	c.slli64	zero
            retval += (list->next->info->data16 >> 8) & 1;
 780:	0050                	addi	a2,sp,4
 782:	0000                	unimp
 784:	0770                	addi	a2,sp,908
 786:	0000                	unimp
 788:	40ec                	lw	a1,68(s1)
 78a:	0000                	unimp
 78c:	07e4                	addi	s1,sp,972
 78e:	0000                	unimp
 790:	0e44                	addi	s1,sp,788
 792:	4450                	lw	a2,12(s0)
 794:	0492                	slli	s1,s1,0x4
 796:	8958                	0x8958
    info.idx = finder_idx;
 798:	95059303          	lh	t1,-1712(a1)
    for (i = 0; i < find_num; i++)
 79c:	97089607          	flh	fa2,-1680(a7)
 7a0:	6009                	c.lui	zero,0x2
 7a2:	0181                	addi	gp,gp,0
            retval += (list->next->info->data16 >> 8) & 1;
 7a4:	0288                	addi	a0,sp,320
 7a6:	0694                	addi	a3,sp,832
 7a8:	0a98                	addi	a4,sp,336
 7aa:	0b99                	addi	s7,s7,6
{
 7ac:	0c9a                	slli	s9,s9,0x6
 7ae:	00030d9b          	0x30d9b
 7b2:	0a06                	slli	s4,s4,0x1
 7b4:	44c1                	li	s1,16
 7b6:	58c8                	lw	a0,52(s1)
    ee_u32 size     = (blksize / per_item)
 7b8:	44d2                	lw	s1,20(sp)
 7ba:	44c9                	li	s1,18
{
 7bc:	44d444d3          	0x44d444d3
 7c0:	44d5                	li	s1,21
 7c2:	44d6                	lw	s1,84(sp)
 7c4:	44d844d7          	vmadc.vxm	v9,v13,a6,v0
 7c8:	44d9                	li	s1,22
 7ca:	44da                	lw	s1,148(sp)
 7cc:	000e4cdb          	0xe4cdb
    ee_u32 size     = (blksize / per_item)
 7d0:	0b44                	addi	s1,sp,404
 7d2:	0000                	unimp
 7d4:	000c                	0xc
 7d6:	0000                	unimp
    list_head *memblock_end  = memblock + size;
 7d8:	ffff                	0xffff
 7da:	ffff                	0xffff
 7dc:	7c010003          	lb	zero,1984(sp)
    list->info->data16 = (ee_s16)0x8080;
 7e0:	0d01                	addi	s10,s10,0
 7e2:	0002                	c.slli64	zero
    list->next         = NULL;
 7e4:	000c                	0xc
 7e6:	0000                	unimp
    list->info         = datablock;
 7e8:	07d4                	addi	a3,sp,964
 7ea:	0000                	unimp
    list->info->data16 = (ee_s16)0x8080;
 7ec:	48d0                	lw	a2,20(s1)
 7ee:	0000                	unimp
    list_data *datablock_end = datablock + size;
 7f0:	008c                	addi	a1,sp,64
 7f2:	0000                	unimp
    list->info->data16 = (ee_s16)0x8080;
 7f4:	000c                	0xc
 7f6:	0000                	unimp
    list->info->idx    = 0x0000;
 7f8:	ffff                	0xffff
 7fa:	ffff                	0xffff
    if ((*memblock + 1) >= memblock_end)
 7fc:	7c010003          	lb	zero,1984(sp)
    list_data *datablock_end = datablock + size;
 800:	0d01                	addi	s10,s10,0
 802:	0002                	c.slli64	zero
    memblock++;
 804:	000c                	0xc
 806:	0000                	unimp
    datablock++;
 808:	07f4                	addi	a3,sp,972
 80a:	0000                	unimp
    if ((*memblock + 1) >= memblock_end)
 80c:	495c                	lw	a5,20(a0)
 80e:	0000                	unimp
    if ((*datablock + 1) >= datablock_end)
 810:	00e4                	addi	s1,sp,76
 812:	0000                	unimp
 814:	000c                	0xc
 816:	0000                	unimp
    newitem->info = *datablock;
 818:	ffff                	0xffff
 81a:	ffff                	0xffff
    newitem->next      = insert_point->next;
 81c:	7c010003          	lb	zero,1984(sp)
    insert_point->next = newitem;
 820:	0d01                	addi	s10,s10,0
 822:	0002                	c.slli64	zero
    to->idx    = from->idx;
 824:	000c                	0xc
 826:	0000                	unimp
    to->data16 = from->data16;
 828:	0814                	addi	a3,sp,16
 82a:	0000                	unimp
 82c:	4a40                	lw	s0,20(a2)
 82e:	0000                	unimp
    to->idx    = from->idx;
 830:	00e4                	addi	s1,sp,76
 832:	0000                	unimp
    for (i = 0; i < size; i++)
 834:	000c                	0xc
 836:	0000                	unimp
            ee_u16 pat = (ee_u16)(i++ ^ seed); /* get a pseudo random number */
 838:	ffff                	0xffff
 83a:	ffff                	0xffff
    to->idx    = from->idx;
 83c:	7c010003          	lb	zero,1984(sp)
            ee_u16 pat = (ee_u16)(i++ ^ seed); /* get a pseudo random number */
 840:	0d01                	addi	s10,s10,0
 842:	0002                	c.slli64	zero
 844:	0040                	addi	s0,sp,4
 846:	0000                	unimp
    to->idx    = from->idx;
 848:	0834                	addi	a3,sp,24
 84a:	0000                	unimp
    if ((*datablock + 1) >= datablock_end)
 84c:	4b24                	lw	s1,80(a4)
 84e:	0000                	unimp
 850:	068c                	addi	a1,sp,832
 852:	0000                	unimp
        ee_u16 datpat = ((ee_u16)(seed ^ i) & 0xf);
 854:	0e44                	addi	s1,sp,788
 856:	4430                	lw	a2,72(s0)
            = (datpat << 3) | (i & 0x7); /* alternate between algorithms */
 858:	88580593          	addi	a1,a6,-1915
 85c:	8902                	jr	s2
 85e:	95069403          	lh	s0,-1712(a3) # ffff2950 <RAM_SIZE+0xfffe2950>
 862:	50099707          	flh	fa4,1280(s3) # a980afe <RAM_SIZE+0xa970afe>
        ee_u16 dat
 866:	0181                	addi	gp,gp,0
        info.data16 = (dat << 8) | dat;  /* fill the data with actual data and
 868:	0492                	slli	s1,s1,0x4
 86a:	0896                	slli	a7,a7,0x5
    if ((*memblock + 1) >= memblock_end)
 86c:	0a04fc03          	0xa04fc03
    for (i = 0; i < size; i++)
 870:	48c1                	li	a7,16
 872:	44c8                	lw	a0,12(s1)
    if ((*datablock + 1) >= datablock_end)
 874:	44c9                	li	s1,18
 876:	44d2                	lw	s1,20(sp)
        info.data16 = (dat << 8) | dat;  /* fill the data with actual data and
 878:	44d444d3          	0x44d444d3
    if ((*memblock + 1) >= memblock_end)
 87c:	44d5                	li	s1,21
 87e:	44d6                	lw	s1,84(sp)
    if ((*datablock + 1) >= datablock_end)
 880:	000e4cd7          	vadd.vx	v25,v0,t3,v0.t
    newitem->next      = insert_point->next;
 884:	0b44                	addi	s1,sp,404
 886:	0000                	unimp
    insert_point->next = newitem;
 888:	000c                	0xc
 88a:	0000                	unimp
    newitem->info = *datablock;
 88c:	ffff                	0xffff
 88e:	ffff                	0xffff
    to->data16 = from->data16;
 890:	7c010003          	lb	zero,1984(sp)
    to->idx    = from->idx;
 894:	0d01                	addi	s10,s10,0
 896:	0002                	c.slli64	zero
    return newitem;
 898:	000c                	0xc
 89a:	0000                	unimp
 89c:	0888                	addi	a0,sp,80
 89e:	0000                	unimp
 8a0:	51b0                	lw	a2,96(a1)
 8a2:	0000                	unimp
    for (i = 0; i < size; i++)
 8a4:	0080                	addi	s0,sp,64
 8a6:	0000                	unimp
    while (finder->next != NULL)
 8a8:	000c                	0xc
 8aa:	0000                	unimp
 8ac:	ffff                	0xffff
 8ae:	ffff                	0xffff
        if (i < size / 5) /* first 20% of the list in order */
 8b0:	7c010003          	lb	zero,1984(sp)
 8b4:	0d01                	addi	s10,s10,0
 8b6:	0002                	c.slli64	zero
                                & (((i & 0x07) << 8)
 8b8:	000c                	0xc
 8ba:	0000                	unimp
        if (i < size / 5) /* first 20% of the list in order */
 8bc:	08a8                	addi	a0,sp,88
 8be:	0000                	unimp
 8c0:	5308                	lw	a0,32(a4)
 8c2:	0000                	unimp
                                & (((i & 0x07) << 8)
 8c4:	004c                	addi	a1,sp,4
 8c6:	0000                	unimp
 8c8:	000c                	0xc
 8ca:	0000                	unimp
    while (finder->next != NULL)
 8cc:	ffff                	0xffff
 8ce:	ffff                	0xffff
 8d0:	7c010003          	lb	zero,1984(sp)
            finder->info->idx = i++;
 8d4:	0d01                	addi	s10,s10,0
 8d6:	0002                	c.slli64	zero
    while (finder->next != NULL)
 8d8:	0030                	addi	a2,sp,8
 8da:	0000                	unimp
 8dc:	08c8                	addi	a0,sp,84
 8de:	0000                	unimp
 8e0:	5a70                	lw	a2,116(a2)
 8e2:	0000                	unimp
 8e4:	07ec                	addi	a1,sp,972
 8e6:	0000                	unimp
 8e8:	0e4c                	addi	a1,sp,788
 8ea:	5820                	lw	s0,112(s0)
 8ec:	0288                	addi	a0,sp,320
 8ee:	8950                	0x8950
            ee_u16 pat = (ee_u16)(i++ ^ seed); /* get a pseudo random number */
 8f0:	01815c03          	lhu	s8,24(sp)
                                & (((i & 0x07) << 8)
 8f4:	0492                	slli	s1,s1,0x4
 8f6:	20030593          	addi	a1,t1,512
                                   | pat); /* make sure the mixed items end up
 8fa:	44c10a07          	vluxseg3ei8.v	v20,(sp),v12,v0.t
                                & (((i & 0x07) << 8)
 8fe:	58c8                	lw	a0,52(s1)
            finder->info->idx = i++;
 900:	44d2                	lw	s1,20(sp)
 902:	44c9                	li	s1,18
        if (i < size / 5) /* first 20% of the list in order */
 904:	000e48d3          	fadd.s	fa7,ft8,ft0,rmm
            finder->info->idx = 0x3fff
 908:	0b44                	addi	s1,sp,404
	...
