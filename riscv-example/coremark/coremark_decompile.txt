
/shared/riscv-example/coremark/build/riscv-coremark-sim:     file format elf32-littleriscv


Disassembly of section .text:

00000000 <_entry>:

.section      .text.entry
.globl _entry

_entry:
lui     sp,%hi(__stack_top)                                             
       0:	0000b137          	lui	sp,0xb
addi    sp,sp,%lo(__stack_top)
       4:	51010113          	addi	sp,sp,1296 # b510 <__stack_top>
jal   zero, _start
       8:	0080006f          	j	10 <_start>
       c:	0000                	unimp
	...

00000010 <_start>:
      10:	00008197          	auipc	gp,0x8
      14:	7b018193          	addi	gp,gp,1968 # 87c0 <__global_pointer$>
      18:	cc018513          	addi	a0,gp,-832 # 8480 <seed1_volatile>
      1c:	d5018613          	addi	a2,gp,-688 # 8510 <__bss_end>
      20:	40a60633          	sub	a2,a2,a0
      24:	00000593          	li	a1,0
      28:	21d060ef          	jal	ra,6a44 <memset>
      2c:	00007517          	auipc	a0,0x7
      30:	d9850513          	addi	a0,a0,-616 # 6dc4 <atexit>
      34:	00050863          	beqz	a0,44 <_start+0x34>
      38:	00007517          	auipc	a0,0x7
      3c:	da050513          	addi	a0,a0,-608 # 6dd8 <__libc_fini_array>
      40:	585060ef          	jal	ra,6dc4 <atexit>
      44:	16d060ef          	jal	ra,69b0 <__libc_init_array>
      48:	00012503          	lw	a0,0(sp)
      4c:	00410593          	addi	a1,sp,4
      50:	00000613          	li	a2,0
      54:	7bd000ef          	jal	ra,1010 <main>
      58:	1250606f          	j	697c <exit>

0000005c <__do_global_dtors_aux>:
      5c:	ff010113          	addi	sp,sp,-16
      60:	00812423          	sw	s0,8(sp)
      64:	cd018413          	addi	s0,gp,-816 # 8490 <completed.1>
      68:	00044783          	lbu	a5,0(s0)
      6c:	00112623          	sw	ra,12(sp)
      70:	02079263          	bnez	a5,94 <__do_global_dtors_aux+0x38>
      74:	00000793          	li	a5,0
      78:	00078a63          	beqz	a5,8c <__do_global_dtors_aux+0x30>
      7c:	00008517          	auipc	a0,0x8
      80:	f3050513          	addi	a0,a0,-208 # 7fac <__EH_FRAME_BEGIN__>
      84:	00000097          	auipc	ra,0x0
      88:	000000e7          	jalr	zero # 0 <_entry>
      8c:	00100793          	li	a5,1
      90:	00f40023          	sb	a5,0(s0)
      94:	00c12083          	lw	ra,12(sp)
      98:	00812403          	lw	s0,8(sp)
      9c:	01010113          	addi	sp,sp,16
      a0:	00008067          	ret

000000a4 <frame_dummy>:
      a4:	00000793          	li	a5,0
      a8:	00078c63          	beqz	a5,c0 <frame_dummy+0x1c>
      ac:	cd418593          	addi	a1,gp,-812 # 8494 <object.0>
      b0:	00008517          	auipc	a0,0x8
      b4:	efc50513          	addi	a0,a0,-260 # 7fac <__EH_FRAME_BEGIN__>
      b8:	00000317          	auipc	t1,0x0
      bc:	00000067          	jr	zero # 0 <_entry>
      c0:	00008067          	ret

000000c4 <calc_func>:
                               list_cmp      cmp,
                               core_results *res);

ee_s16
calc_func(ee_s16 *pdata, core_results *res)
{
      c4:	fd010113          	addi	sp,sp,-48
      c8:	02112623          	sw	ra,44(sp)
      cc:	02812423          	sw	s0,40(sp)
      d0:	03010413          	addi	s0,sp,48
      d4:	fca42e23          	sw	a0,-36(s0)
      d8:	fcb42c23          	sw	a1,-40(s0)
    ee_s16 data = *pdata;
      dc:	fdc42783          	lw	a5,-36(s0)
      e0:	0007d783          	lhu	a5,0(a5)
      e4:	fef41523          	sh	a5,-22(s0)
    ee_s16 retval;
    ee_u8  optype
        = (data >> 7)
          & 1;  /* bit 7 indicates if the function result has been cached */
      e8:	fea41783          	lh	a5,-22(s0)
      ec:	4077d793          	srai	a5,a5,0x7
      f0:	01079793          	slli	a5,a5,0x10
      f4:	4107d793          	srai	a5,a5,0x10
      f8:	0ff7f793          	zext.b	a5,a5
    ee_u8  optype
      fc:	0017f793          	andi	a5,a5,1
     100:	fef404a3          	sb	a5,-23(s0)
    if (optype) /* if cached, use cache */
     104:	fe944783          	lbu	a5,-23(s0)
     108:	00078c63          	beqz	a5,120 <calc_func+0x5c>
        return (data & 0x007f);
     10c:	fea45783          	lhu	a5,-22(s0)
     110:	07f7f793          	andi	a5,a5,127
     114:	01079793          	slli	a5,a5,0x10
     118:	4107d793          	srai	a5,a5,0x10
     11c:	18c0006f          	j	2a8 <calc_func+0x1e4>
    else
    {                             /* otherwise calculate and cache the result */
        ee_s16 flag = data & 0x7; /* bits 0-2 is type of function to perform */
     120:	fea45783          	lhu	a5,-22(s0)
     124:	0077f793          	andi	a5,a5,7
     128:	fef41323          	sh	a5,-26(s0)
        ee_s16 dtype
            = ((data >> 3)
               & 0xf);       /* bits 3-6 is specific data for the operation */
     12c:	fea41783          	lh	a5,-22(s0)
     130:	4037d793          	srai	a5,a5,0x3
     134:	01079793          	slli	a5,a5,0x10
     138:	4107d793          	srai	a5,a5,0x10
        ee_s16 dtype
     13c:	00f7f793          	andi	a5,a5,15
     140:	fef41623          	sh	a5,-20(s0)
        dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
     144:	fec41783          	lh	a5,-20(s0)
     148:	00479793          	slli	a5,a5,0x4
     14c:	01079713          	slli	a4,a5,0x10
     150:	41075713          	srai	a4,a4,0x10
     154:	fec45783          	lhu	a5,-20(s0)
     158:	00f767b3          	or	a5,a4,a5
     15c:	fef41623          	sh	a5,-20(s0)
        switch (flag)
     160:	fe641783          	lh	a5,-26(s0)
     164:	00078863          	beqz	a5,174 <calc_func+0xb0>
     168:	00100713          	li	a4,1
     16c:	06e78863          	beq	a5,a4,1dc <calc_func+0x118>
     170:	0b40006f          	j	224 <calc_func+0x160>
        {
            case 0:
                if (dtype < 0x22) /* set min period for bit corruption */
     174:	fec41703          	lh	a4,-20(s0)
     178:	02100793          	li	a5,33
     17c:	00e7c663          	blt	a5,a4,188 <calc_func+0xc4>
                    dtype = 0x22;
     180:	02200793          	li	a5,34
     184:	fef41623          	sh	a5,-20(s0)
                retval = core_bench_state(res->size,
     188:	fd842783          	lw	a5,-40(s0)
     18c:	0187a503          	lw	a0,24(a5)
                                          res->memblock[3],
     190:	fd842783          	lw	a5,-40(s0)
     194:	0147a583          	lw	a1,20(a5)
                retval = core_bench_state(res->size,
     198:	fd842783          	lw	a5,-40(s0)
     19c:	00079603          	lh	a2,0(a5)
     1a0:	fd842783          	lw	a5,-40(s0)
     1a4:	00279683          	lh	a3,2(a5)
     1a8:	fd842783          	lw	a5,-40(s0)
     1ac:	0387d783          	lhu	a5,56(a5)
     1b0:	fec41703          	lh	a4,-20(s0)
     1b4:	33d020ef          	jal	ra,2cf0 <core_bench_state>
     1b8:	00050793          	mv	a5,a0
     1bc:	fef41723          	sh	a5,-18(s0)
                                          res->seed1,
                                          res->seed2,
                                          dtype,
                                          res->crc);
                if (res->crcstate == 0)
     1c0:	fd842783          	lw	a5,-40(s0)
     1c4:	03e7d783          	lhu	a5,62(a5)
     1c8:	06079463          	bnez	a5,230 <calc_func+0x16c>
                    res->crcstate = retval;
     1cc:	fee45703          	lhu	a4,-18(s0)
     1d0:	fd842783          	lw	a5,-40(s0)
     1d4:	02e79f23          	sh	a4,62(a5)
                break;
     1d8:	0580006f          	j	230 <calc_func+0x16c>
            case 1:
                retval = core_bench_matrix(&(res->mat), dtype, res->crc);
     1dc:	fd842783          	lw	a5,-40(s0)
     1e0:	02878713          	addi	a4,a5,40
     1e4:	fd842783          	lw	a5,-40(s0)
     1e8:	0387d683          	lhu	a3,56(a5)
     1ec:	fec41783          	lh	a5,-20(s0)
     1f0:	00068613          	mv	a2,a3
     1f4:	00078593          	mv	a1,a5
     1f8:	00070513          	mv	a0,a4
     1fc:	531010ef          	jal	ra,1f2c <core_bench_matrix>
     200:	00050793          	mv	a5,a0
     204:	fef41723          	sh	a5,-18(s0)
                if (res->crcmatrix == 0)
     208:	fd842783          	lw	a5,-40(s0)
     20c:	03c7d783          	lhu	a5,60(a5)
     210:	02079463          	bnez	a5,238 <calc_func+0x174>
                    res->crcmatrix = retval;
     214:	fee45703          	lhu	a4,-18(s0)
     218:	fd842783          	lw	a5,-40(s0)
     21c:	02e79e23          	sh	a4,60(a5)
                break;
     220:	0180006f          	j	238 <calc_func+0x174>
            default:
                retval = data;
     224:	fea45783          	lhu	a5,-22(s0)
     228:	fef41723          	sh	a5,-18(s0)
                break;
     22c:	0100006f          	j	23c <calc_func+0x178>
                break;
     230:	00000013          	nop
     234:	0080006f          	j	23c <calc_func+0x178>
                break;
     238:	00000013          	nop
        }
        res->crc = crcu16(retval, res->crc);
     23c:	fee45703          	lhu	a4,-18(s0)
     240:	fd842783          	lw	a5,-40(s0)
     244:	0387d783          	lhu	a5,56(a5)
     248:	00078593          	mv	a1,a5
     24c:	00070513          	mv	a0,a4
     250:	544030ef          	jal	ra,3794 <crcu16>
     254:	00050793          	mv	a5,a0
     258:	00078713          	mv	a4,a5
     25c:	fd842783          	lw	a5,-40(s0)
     260:	02e79c23          	sh	a4,56(a5)
        retval &= 0x007f;
     264:	fee45783          	lhu	a5,-18(s0)
     268:	07f7f793          	andi	a5,a5,127
     26c:	fef41723          	sh	a5,-18(s0)
        *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
     270:	fea45783          	lhu	a5,-22(s0)
     274:	f007f793          	andi	a5,a5,-256
     278:	01079793          	slli	a5,a5,0x10
     27c:	4107d793          	srai	a5,a5,0x10
     280:	0807e793          	ori	a5,a5,128
     284:	01079713          	slli	a4,a5,0x10
     288:	41075713          	srai	a4,a4,0x10
     28c:	fee45783          	lhu	a5,-18(s0)
     290:	00f767b3          	or	a5,a4,a5
     294:	01079713          	slli	a4,a5,0x10
     298:	41075713          	srai	a4,a4,0x10
     29c:	fdc42783          	lw	a5,-36(s0)
     2a0:	00e79023          	sh	a4,0(a5)
        return retval;
     2a4:	fee41783          	lh	a5,-18(s0)
    }
}
     2a8:	00078513          	mv	a0,a5
     2ac:	02c12083          	lw	ra,44(sp)
     2b0:	02812403          	lw	s0,40(sp)
     2b4:	03010113          	addi	sp,sp,48
     2b8:	00008067          	ret

000002bc <cmp_complex>:

        Can be used by mergesort.
*/
ee_s32
cmp_complex(list_data *a, list_data *b, core_results *res)
{
     2bc:	fd010113          	addi	sp,sp,-48
     2c0:	02112623          	sw	ra,44(sp)
     2c4:	02812423          	sw	s0,40(sp)
     2c8:	03010413          	addi	s0,sp,48
     2cc:	fca42e23          	sw	a0,-36(s0)
     2d0:	fcb42c23          	sw	a1,-40(s0)
     2d4:	fcc42a23          	sw	a2,-44(s0)
    ee_s16 val1 = calc_func(&(a->data16), res);
     2d8:	fdc42783          	lw	a5,-36(s0)
     2dc:	fd442583          	lw	a1,-44(s0)
     2e0:	00078513          	mv	a0,a5
     2e4:	de1ff0ef          	jal	ra,c4 <calc_func>
     2e8:	00050793          	mv	a5,a0
     2ec:	fef41723          	sh	a5,-18(s0)
    ee_s16 val2 = calc_func(&(b->data16), res);
     2f0:	fd842783          	lw	a5,-40(s0)
     2f4:	fd442583          	lw	a1,-44(s0)
     2f8:	00078513          	mv	a0,a5
     2fc:	dc9ff0ef          	jal	ra,c4 <calc_func>
     300:	00050793          	mv	a5,a0
     304:	fef41623          	sh	a5,-20(s0)
    return val1 - val2;
     308:	fee41703          	lh	a4,-18(s0)
     30c:	fec41783          	lh	a5,-20(s0)
     310:	40f707b3          	sub	a5,a4,a5
}
     314:	00078513          	mv	a0,a5
     318:	02c12083          	lw	ra,44(sp)
     31c:	02812403          	lw	s0,40(sp)
     320:	03010113          	addi	sp,sp,48
     324:	00008067          	ret

00000328 <cmp_idx>:

        Can be used by mergesort.
*/
ee_s32
cmp_idx(list_data *a, list_data *b, core_results *res)
{
     328:	fe010113          	addi	sp,sp,-32
     32c:	00812e23          	sw	s0,28(sp)
     330:	02010413          	addi	s0,sp,32
     334:	fea42623          	sw	a0,-20(s0)
     338:	feb42423          	sw	a1,-24(s0)
     33c:	fec42223          	sw	a2,-28(s0)
    if (res == NULL)
     340:	fe442783          	lw	a5,-28(s0)
     344:	08079e63          	bnez	a5,3e0 <cmp_idx+0xb8>
    {
        a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16 >> 8));
     348:	fec42783          	lw	a5,-20(s0)
     34c:	00079783          	lh	a5,0(a5)
     350:	f007f793          	andi	a5,a5,-256
     354:	01079713          	slli	a4,a5,0x10
     358:	41075713          	srai	a4,a4,0x10
     35c:	fec42783          	lw	a5,-20(s0)
     360:	00079783          	lh	a5,0(a5)
     364:	01079793          	slli	a5,a5,0x10
     368:	0107d793          	srli	a5,a5,0x10
     36c:	0087d793          	srli	a5,a5,0x8
     370:	01079793          	slli	a5,a5,0x10
     374:	0107d793          	srli	a5,a5,0x10
     378:	01079793          	slli	a5,a5,0x10
     37c:	4107d793          	srai	a5,a5,0x10
     380:	00f767b3          	or	a5,a4,a5
     384:	01079713          	slli	a4,a5,0x10
     388:	41075713          	srai	a4,a4,0x10
     38c:	fec42783          	lw	a5,-20(s0)
     390:	00e79023          	sh	a4,0(a5)
        b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16 >> 8));
     394:	fe842783          	lw	a5,-24(s0)
     398:	00079783          	lh	a5,0(a5)
     39c:	f007f793          	andi	a5,a5,-256
     3a0:	01079713          	slli	a4,a5,0x10
     3a4:	41075713          	srai	a4,a4,0x10
     3a8:	fe842783          	lw	a5,-24(s0)
     3ac:	00079783          	lh	a5,0(a5)
     3b0:	01079793          	slli	a5,a5,0x10
     3b4:	0107d793          	srli	a5,a5,0x10
     3b8:	0087d793          	srli	a5,a5,0x8
     3bc:	01079793          	slli	a5,a5,0x10
     3c0:	0107d793          	srli	a5,a5,0x10
     3c4:	01079793          	slli	a5,a5,0x10
     3c8:	4107d793          	srai	a5,a5,0x10
     3cc:	00f767b3          	or	a5,a4,a5
     3d0:	01079713          	slli	a4,a5,0x10
     3d4:	41075713          	srai	a4,a4,0x10
     3d8:	fe842783          	lw	a5,-24(s0)
     3dc:	00e79023          	sh	a4,0(a5)
    }
    return a->idx - b->idx;
     3e0:	fec42783          	lw	a5,-20(s0)
     3e4:	00279783          	lh	a5,2(a5)
     3e8:	00078713          	mv	a4,a5
     3ec:	fe842783          	lw	a5,-24(s0)
     3f0:	00279783          	lh	a5,2(a5)
     3f4:	40f707b3          	sub	a5,a4,a5
}
     3f8:	00078513          	mv	a0,a5
     3fc:	01c12403          	lw	s0,28(sp)
     400:	02010113          	addi	sp,sp,32
     404:	00008067          	ret

00000408 <copy_info>:

void
copy_info(list_data *to, list_data *from)
{
     408:	fe010113          	addi	sp,sp,-32
     40c:	00812e23          	sw	s0,28(sp)
     410:	02010413          	addi	s0,sp,32
     414:	fea42623          	sw	a0,-20(s0)
     418:	feb42423          	sw	a1,-24(s0)
    to->data16 = from->data16;
     41c:	fe842783          	lw	a5,-24(s0)
     420:	00079703          	lh	a4,0(a5)
     424:	fec42783          	lw	a5,-20(s0)
     428:	00e79023          	sh	a4,0(a5)
    to->idx    = from->idx;
     42c:	fe842783          	lw	a5,-24(s0)
     430:	00279703          	lh	a4,2(a5)
     434:	fec42783          	lw	a5,-20(s0)
     438:	00e79123          	sh	a4,2(a5)
}
     43c:	00000013          	nop
     440:	01c12403          	lw	s0,28(sp)
     444:	02010113          	addi	sp,sp,32
     448:	00008067          	ret

0000044c <core_bench_list>:
        - Single remove/reinsert
        * At the end of this function, the list is back to original state
*/
ee_u16
core_bench_list(core_results *res, ee_s16 finder_idx)
{
     44c:	fc010113          	addi	sp,sp,-64
     450:	02112e23          	sw	ra,60(sp)
     454:	02812c23          	sw	s0,56(sp)
     458:	04010413          	addi	s0,sp,64
     45c:	fca42623          	sw	a0,-52(s0)
     460:	00058793          	mv	a5,a1
     464:	fcf41523          	sh	a5,-54(s0)
    ee_u16     retval = 0;
     468:	fe041723          	sh	zero,-18(s0)
    ee_u16     found = 0, missed = 0;
     46c:	fe041623          	sh	zero,-20(s0)
     470:	fe041523          	sh	zero,-22(s0)
    list_head *list     = res->list;
     474:	fcc42783          	lw	a5,-52(s0)
     478:	0247a783          	lw	a5,36(a5)
     47c:	fef42223          	sw	a5,-28(s0)
    ee_s16     find_num = res->seed3;
     480:	fcc42783          	lw	a5,-52(s0)
     484:	0047d783          	lhu	a5,4(a5)
     488:	fcf41e23          	sh	a5,-36(s0)
    list_head *this_find;
    list_head *finder, *remover;
    list_data  info;
    ee_s16     i;

    info.idx = finder_idx;
     48c:	fca45783          	lhu	a5,-54(s0)
     490:	fcf41923          	sh	a5,-46(s0)
    /* find <find_num> values in the list, and change the list each time
     * (reverse and cache if value found) */
    for (i = 0; i < find_num; i++)
     494:	fc041f23          	sh	zero,-34(s0)
     498:	1780006f          	j	610 <core_bench_list+0x1c4>
    {
        info.data16 = (i & 0xff);
     49c:	fde45783          	lhu	a5,-34(s0)
     4a0:	0ff7f793          	zext.b	a5,a5
     4a4:	01079793          	slli	a5,a5,0x10
     4a8:	4107d793          	srai	a5,a5,0x10
     4ac:	fcf41823          	sh	a5,-48(s0)
        this_find   = core_list_find(list, &info);
     4b0:	fd040793          	addi	a5,s0,-48
     4b4:	00078593          	mv	a1,a5
     4b8:	fe442503          	lw	a0,-28(s0)
     4bc:	73c000ef          	jal	ra,bf8 <core_list_find>
     4c0:	fca42a23          	sw	a0,-44(s0)
        list        = core_list_reverse(list);
     4c4:	fe442503          	lw	a0,-28(s0)
     4c8:	7d4000ef          	jal	ra,c9c <core_list_reverse>
     4cc:	fea42223          	sw	a0,-28(s0)
        if (this_find == NULL)
     4d0:	fd442783          	lw	a5,-44(s0)
     4d4:	04079863          	bnez	a5,524 <core_bench_list+0xd8>
        {
            missed++;
     4d8:	fea45783          	lhu	a5,-22(s0)
     4dc:	00178793          	addi	a5,a5,1
     4e0:	fef41523          	sh	a5,-22(s0)
            retval += (list->next->info->data16 >> 8) & 1;
     4e4:	fe442783          	lw	a5,-28(s0)
     4e8:	0007a783          	lw	a5,0(a5)
     4ec:	0047a783          	lw	a5,4(a5)
     4f0:	00079783          	lh	a5,0(a5)
     4f4:	4087d793          	srai	a5,a5,0x8
     4f8:	01079793          	slli	a5,a5,0x10
     4fc:	4107d793          	srai	a5,a5,0x10
     500:	01079793          	slli	a5,a5,0x10
     504:	0107d793          	srli	a5,a5,0x10
     508:	0017f793          	andi	a5,a5,1
     50c:	01079713          	slli	a4,a5,0x10
     510:	01075713          	srli	a4,a4,0x10
     514:	fee45783          	lhu	a5,-18(s0)
     518:	00f707b3          	add	a5,a4,a5
     51c:	fef41723          	sh	a5,-18(s0)
     520:	0a80006f          	j	5c8 <core_bench_list+0x17c>
        }
        else
        {
            found++;
     524:	fec45783          	lhu	a5,-20(s0)
     528:	00178793          	addi	a5,a5,1
     52c:	fef41623          	sh	a5,-20(s0)
            if (this_find->info->data16 & 0x1) /* use found value */
     530:	fd442783          	lw	a5,-44(s0)
     534:	0047a783          	lw	a5,4(a5)
     538:	00079783          	lh	a5,0(a5)
     53c:	01079793          	slli	a5,a5,0x10
     540:	0107d793          	srli	a5,a5,0x10
     544:	0017f793          	andi	a5,a5,1
     548:	02078e63          	beqz	a5,584 <core_bench_list+0x138>
                retval += (this_find->info->data16 >> 9) & 1;
     54c:	fd442783          	lw	a5,-44(s0)
     550:	0047a783          	lw	a5,4(a5)
     554:	00079783          	lh	a5,0(a5)
     558:	4097d793          	srai	a5,a5,0x9
     55c:	01079793          	slli	a5,a5,0x10
     560:	4107d793          	srai	a5,a5,0x10
     564:	01079793          	slli	a5,a5,0x10
     568:	0107d793          	srli	a5,a5,0x10
     56c:	0017f793          	andi	a5,a5,1
     570:	01079713          	slli	a4,a5,0x10
     574:	01075713          	srli	a4,a4,0x10
     578:	fee45783          	lhu	a5,-18(s0)
     57c:	00f707b3          	add	a5,a4,a5
     580:	fef41723          	sh	a5,-18(s0)
            /* and cache next item at the head of the list (if any) */
            if (this_find->next != NULL)
     584:	fd442783          	lw	a5,-44(s0)
     588:	0007a783          	lw	a5,0(a5)
     58c:	02078e63          	beqz	a5,5c8 <core_bench_list+0x17c>
            {
                finder          = this_find->next;
     590:	fd442783          	lw	a5,-44(s0)
     594:	0007a783          	lw	a5,0(a5)
     598:	fef42023          	sw	a5,-32(s0)
                this_find->next = finder->next;
     59c:	fe042783          	lw	a5,-32(s0)
     5a0:	0007a703          	lw	a4,0(a5)
     5a4:	fd442783          	lw	a5,-44(s0)
     5a8:	00e7a023          	sw	a4,0(a5)
                finder->next    = list->next;
     5ac:	fe442783          	lw	a5,-28(s0)
     5b0:	0007a703          	lw	a4,0(a5)
     5b4:	fe042783          	lw	a5,-32(s0)
     5b8:	00e7a023          	sw	a4,0(a5)
                list->next      = finder;
     5bc:	fe442783          	lw	a5,-28(s0)
     5c0:	fe042703          	lw	a4,-32(s0)
     5c4:	00e7a023          	sw	a4,0(a5)
            }
        }
        if (info.idx >= 0)
     5c8:	fd241783          	lh	a5,-46(s0)
     5cc:	0207c463          	bltz	a5,5f4 <core_bench_list+0x1a8>
            info.idx++;
     5d0:	fd241783          	lh	a5,-46(s0)
     5d4:	01079793          	slli	a5,a5,0x10
     5d8:	0107d793          	srli	a5,a5,0x10
     5dc:	00178793          	addi	a5,a5,1
     5e0:	01079793          	slli	a5,a5,0x10
     5e4:	0107d793          	srli	a5,a5,0x10
     5e8:	01079793          	slli	a5,a5,0x10
     5ec:	4107d793          	srai	a5,a5,0x10
     5f0:	fcf41923          	sh	a5,-46(s0)
    for (i = 0; i < find_num; i++)
     5f4:	fde41783          	lh	a5,-34(s0)
     5f8:	01079793          	slli	a5,a5,0x10
     5fc:	0107d793          	srli	a5,a5,0x10
     600:	00178793          	addi	a5,a5,1
     604:	01079793          	slli	a5,a5,0x10
     608:	0107d793          	srli	a5,a5,0x10
     60c:	fcf41f23          	sh	a5,-34(s0)
     610:	fde41703          	lh	a4,-34(s0)
     614:	fdc41783          	lh	a5,-36(s0)
     618:	e8f742e3          	blt	a4,a5,49c <core_bench_list+0x50>
#if CORE_DEBUG
        ee_printf("List find %d: [%d,%d,%d]\n", i, retval, missed, found);
#endif
    }
    retval += found * 4 - missed;
     61c:	fec45783          	lhu	a5,-20(s0)
     620:	00279793          	slli	a5,a5,0x2
     624:	01079713          	slli	a4,a5,0x10
     628:	01075713          	srli	a4,a4,0x10
     62c:	fea45783          	lhu	a5,-22(s0)
     630:	40f707b3          	sub	a5,a4,a5
     634:	01079713          	slli	a4,a5,0x10
     638:	01075713          	srli	a4,a4,0x10
     63c:	fee45783          	lhu	a5,-18(s0)
     640:	00f707b3          	add	a5,a4,a5
     644:	fef41723          	sh	a5,-18(s0)
    /* sort the list by data content and remove one item*/
    if (finder_idx > 0)
     648:	fca41783          	lh	a5,-54(s0)
     64c:	00f05c63          	blez	a5,664 <core_bench_list+0x218>
        list = core_list_mergesort(list, cmp_complex, res);
     650:	fcc42603          	lw	a2,-52(s0)
     654:	2bc00593          	li	a1,700
     658:	fe442503          	lw	a0,-28(s0)
     65c:	69c000ef          	jal	ra,cf8 <core_list_mergesort>
     660:	fea42223          	sw	a0,-28(s0)
    remover = core_list_remove(list->next);
     664:	fe442783          	lw	a5,-28(s0)
     668:	0007a783          	lw	a5,0(a5)
     66c:	00078513          	mv	a0,a5
     670:	4a8000ef          	jal	ra,b18 <core_list_remove>
     674:	fca42c23          	sw	a0,-40(s0)
    /* CRC data content of list from location of index N forward, and then undo
     * remove */
    finder = core_list_find(list, &info);
     678:	fd040793          	addi	a5,s0,-48
     67c:	00078593          	mv	a1,a5
     680:	fe442503          	lw	a0,-28(s0)
     684:	574000ef          	jal	ra,bf8 <core_list_find>
     688:	fea42023          	sw	a0,-32(s0)
    if (!finder)
     68c:	fe042783          	lw	a5,-32(s0)
     690:	04079263          	bnez	a5,6d4 <core_bench_list+0x288>
        finder = list->next;
     694:	fe442783          	lw	a5,-28(s0)
     698:	0007a783          	lw	a5,0(a5)
     69c:	fef42023          	sw	a5,-32(s0)
    while (finder)
     6a0:	0340006f          	j	6d4 <core_bench_list+0x288>
    {
        retval = crc16(list->info->data16, retval);
     6a4:	fe442783          	lw	a5,-28(s0)
     6a8:	0047a783          	lw	a5,4(a5)
     6ac:	00079783          	lh	a5,0(a5)
     6b0:	fee45703          	lhu	a4,-18(s0)
     6b4:	00070593          	mv	a1,a4
     6b8:	00078513          	mv	a0,a5
     6bc:	1e0030ef          	jal	ra,389c <crc16>
     6c0:	00050793          	mv	a5,a0
     6c4:	fef41723          	sh	a5,-18(s0)
        finder = finder->next;
     6c8:	fe042783          	lw	a5,-32(s0)
     6cc:	0007a783          	lw	a5,0(a5)
     6d0:	fef42023          	sw	a5,-32(s0)
    while (finder)
     6d4:	fe042783          	lw	a5,-32(s0)
     6d8:	fc0796e3          	bnez	a5,6a4 <core_bench_list+0x258>
    }
#if CORE_DEBUG
    ee_printf("List sort 1: %04x\n", retval);
#endif
    remover = core_list_undo_remove(remover, list->next);
     6dc:	fe442783          	lw	a5,-28(s0)
     6e0:	0007a783          	lw	a5,0(a5)
     6e4:	00078593          	mv	a1,a5
     6e8:	fd842503          	lw	a0,-40(s0)
     6ec:	4a0000ef          	jal	ra,b8c <core_list_undo_remove>
     6f0:	fca42c23          	sw	a0,-40(s0)
    /* sort the list by index, in effect returning the list to original state */
    list = core_list_mergesort(list, cmp_idx, NULL);
     6f4:	00000613          	li	a2,0
     6f8:	32800593          	li	a1,808
     6fc:	fe442503          	lw	a0,-28(s0)
     700:	5f8000ef          	jal	ra,cf8 <core_list_mergesort>
     704:	fea42223          	sw	a0,-28(s0)
    /* CRC data content of list */
    finder = list->next;
     708:	fe442783          	lw	a5,-28(s0)
     70c:	0007a783          	lw	a5,0(a5)
     710:	fef42023          	sw	a5,-32(s0)
    while (finder)
     714:	0340006f          	j	748 <core_bench_list+0x2fc>
    {
        retval = crc16(list->info->data16, retval);
     718:	fe442783          	lw	a5,-28(s0)
     71c:	0047a783          	lw	a5,4(a5)
     720:	00079783          	lh	a5,0(a5)
     724:	fee45703          	lhu	a4,-18(s0)
     728:	00070593          	mv	a1,a4
     72c:	00078513          	mv	a0,a5
     730:	16c030ef          	jal	ra,389c <crc16>
     734:	00050793          	mv	a5,a0
     738:	fef41723          	sh	a5,-18(s0)
        finder = finder->next;
     73c:	fe042783          	lw	a5,-32(s0)
     740:	0007a783          	lw	a5,0(a5)
     744:	fef42023          	sw	a5,-32(s0)
    while (finder)
     748:	fe042783          	lw	a5,-32(s0)
     74c:	fc0796e3          	bnez	a5,718 <core_bench_list+0x2cc>
    }
#if CORE_DEBUG
    ee_printf("List sort 2: %04x\n", retval);
#endif
    return retval;
     750:	fee45783          	lhu	a5,-18(s0)
}
     754:	00078513          	mv	a0,a5
     758:	03c12083          	lw	ra,60(sp)
     75c:	03812403          	lw	s0,56(sp)
     760:	04010113          	addi	sp,sp,64
     764:	00008067          	ret

00000768 <core_list_init>:
        Pointer to the head of the list.

*/
list_head *
core_list_init(ee_u32 blksize, list_head *memblock, ee_s16 seed)
{
     768:	fb010113          	addi	sp,sp,-80
     76c:	04112623          	sw	ra,76(sp)
     770:	04812423          	sw	s0,72(sp)
     774:	05010413          	addi	s0,sp,80
     778:	faa42e23          	sw	a0,-68(s0)
     77c:	fab42c23          	sw	a1,-72(s0)
     780:	00060793          	mv	a5,a2
     784:	faf41b23          	sh	a5,-74(s0)
    /* calculated pointers for the list */
    ee_u32 per_item = 16 + sizeof(struct list_data_s);
     788:	01400793          	li	a5,20
     78c:	fef42223          	sw	a5,-28(s0)
    ee_u32 size     = (blksize / per_item)
     790:	fe442583          	lw	a1,-28(s0)
     794:	fbc42503          	lw	a0,-68(s0)
     798:	0ec060ef          	jal	ra,6884 <__udivsi3>
     79c:	00050793          	mv	a5,a0
     7a0:	ffe78793          	addi	a5,a5,-2
     7a4:	fef42023          	sw	a5,-32(s0)
                  - 2; /* to accommodate systems with 64b pointers, and make sure
                          same code is executed, set max list elements */
    list_head *memblock_end  = memblock + size;
     7a8:	fb842703          	lw	a4,-72(s0)
     7ac:	fe042783          	lw	a5,-32(s0)
     7b0:	00379793          	slli	a5,a5,0x3
     7b4:	00f707b3          	add	a5,a4,a5
     7b8:	fcf42e23          	sw	a5,-36(s0)
    list_data *datablock     = (list_data *)(memblock_end);
     7bc:	fdc42783          	lw	a5,-36(s0)
     7c0:	fcf42423          	sw	a5,-56(s0)
    list_data *datablock_end = datablock + size;
     7c4:	fc842703          	lw	a4,-56(s0)
     7c8:	fe042783          	lw	a5,-32(s0)
     7cc:	00279793          	slli	a5,a5,0x2
     7d0:	00f707b3          	add	a5,a4,a5
     7d4:	fcf42c23          	sw	a5,-40(s0)
    /* some useful variables */
    ee_u32     i;
    list_head *finder, *list = memblock;
     7d8:	fb842783          	lw	a5,-72(s0)
     7dc:	fcf42a23          	sw	a5,-44(s0)
    list_data  info;

    /* create a fake items for the list head and tail */
    list->next         = NULL;
     7e0:	fd442783          	lw	a5,-44(s0)
     7e4:	0007a023          	sw	zero,0(a5)
    list->info         = datablock;
     7e8:	fc842703          	lw	a4,-56(s0)
     7ec:	fd442783          	lw	a5,-44(s0)
     7f0:	00e7a223          	sw	a4,4(a5)
    list->info->idx    = 0x0000;
     7f4:	fd442783          	lw	a5,-44(s0)
     7f8:	0047a783          	lw	a5,4(a5)
     7fc:	00079123          	sh	zero,2(a5)
    list->info->data16 = (ee_s16)0x8080;
     800:	fd442783          	lw	a5,-44(s0)
     804:	0047a783          	lw	a5,4(a5)
     808:	ffff8737          	lui	a4,0xffff8
     80c:	08070713          	addi	a4,a4,128 # ffff8080 <RAM_SIZE+0xfffe8080>
     810:	00e79023          	sh	a4,0(a5)
    memblock++;
     814:	fb842783          	lw	a5,-72(s0)
     818:	00878793          	addi	a5,a5,8
     81c:	faf42c23          	sw	a5,-72(s0)
    datablock++;
     820:	fc842783          	lw	a5,-56(s0)
     824:	00478793          	addi	a5,a5,4
     828:	fcf42423          	sw	a5,-56(s0)
    info.idx    = 0x7fff;
     82c:	ffff87b7          	lui	a5,0xffff8
     830:	fff7c793          	not	a5,a5
     834:	fcf41323          	sh	a5,-58(s0)
    info.data16 = (ee_s16)0xffff;
     838:	fff00793          	li	a5,-1
     83c:	fcf41223          	sh	a5,-60(s0)
    core_list_insert_new(
     840:	fc840693          	addi	a3,s0,-56
     844:	fb840613          	addi	a2,s0,-72
     848:	fc440593          	addi	a1,s0,-60
     84c:	fd842783          	lw	a5,-40(s0)
     850:	fdc42703          	lw	a4,-36(s0)
     854:	fd442503          	lw	a0,-44(s0)
     858:	1d4000ef          	jal	ra,a2c <core_list_insert_new>
        list, &info, &memblock, &datablock, memblock_end, datablock_end);

    /* then insert size items */
    for (i = 0; i < size; i++)
     85c:	fe042623          	sw	zero,-20(s0)
     860:	0a40006f          	j	904 <HEAP_SIZE+0x104>
    {
        ee_u16 datpat = ((ee_u16)(seed ^ i) & 0xf);
     864:	fec42783          	lw	a5,-20(s0)
     868:	01079713          	slli	a4,a5,0x10
     86c:	01075713          	srli	a4,a4,0x10
     870:	fb645783          	lhu	a5,-74(s0)
     874:	00f747b3          	xor	a5,a4,a5
     878:	01079793          	slli	a5,a5,0x10
     87c:	0107d793          	srli	a5,a5,0x10
     880:	00f7f793          	andi	a5,a5,15
     884:	fcf41823          	sh	a5,-48(s0)
        ee_u16 dat
            = (datpat << 3) | (i & 0x7); /* alternate between algorithms */
     888:	fd045783          	lhu	a5,-48(s0)
     88c:	00379793          	slli	a5,a5,0x3
     890:	01079713          	slli	a4,a5,0x10
     894:	01075713          	srli	a4,a4,0x10
     898:	fec42783          	lw	a5,-20(s0)
     89c:	01079793          	slli	a5,a5,0x10
     8a0:	0107d793          	srli	a5,a5,0x10
     8a4:	0077f793          	andi	a5,a5,7
     8a8:	01079793          	slli	a5,a5,0x10
     8ac:	0107d793          	srli	a5,a5,0x10
        ee_u16 dat
     8b0:	00f767b3          	or	a5,a4,a5
     8b4:	fcf41723          	sh	a5,-50(s0)
        info.data16 = (dat << 8) | dat;  /* fill the data with actual data and
     8b8:	fce45783          	lhu	a5,-50(s0)
     8bc:	00879793          	slli	a5,a5,0x8
     8c0:	01079713          	slli	a4,a5,0x10
     8c4:	41075713          	srai	a4,a4,0x10
     8c8:	fce41783          	lh	a5,-50(s0)
     8cc:	00f767b3          	or	a5,a4,a5
     8d0:	01079793          	slli	a5,a5,0x10
     8d4:	4107d793          	srai	a5,a5,0x10
     8d8:	fcf41223          	sh	a5,-60(s0)
                                            upper bits with rebuild value */
        core_list_insert_new(
     8dc:	fc840693          	addi	a3,s0,-56
     8e0:	fb840613          	addi	a2,s0,-72
     8e4:	fc440593          	addi	a1,s0,-60
     8e8:	fd842783          	lw	a5,-40(s0)
     8ec:	fdc42703          	lw	a4,-36(s0)
     8f0:	fd442503          	lw	a0,-44(s0)
     8f4:	138000ef          	jal	ra,a2c <core_list_insert_new>
    for (i = 0; i < size; i++)
     8f8:	fec42783          	lw	a5,-20(s0)
     8fc:	00178793          	addi	a5,a5,1 # ffff8001 <RAM_SIZE+0xfffe8001>
     900:	fef42623          	sw	a5,-20(s0)
     904:	fec42703          	lw	a4,-20(s0)
     908:	fe042783          	lw	a5,-32(s0)
     90c:	f4f76ce3          	bltu	a4,a5,864 <HEAP_SIZE+0x64>
            list, &info, &memblock, &datablock, memblock_end, datablock_end);
    }
    /* and now index the list so we know initial seed order of the list */
    finder = list->next;
     910:	fd442783          	lw	a5,-44(s0)
     914:	0007a783          	lw	a5,0(a5)
     918:	fef42423          	sw	a5,-24(s0)
    i      = 1;
     91c:	00100793          	li	a5,1
     920:	fef42623          	sw	a5,-20(s0)
    while (finder->next != NULL)
     924:	0d00006f          	j	9f4 <HEAP_SIZE+0x1f4>
    {
        if (i < size / 5) /* first 20% of the list in order */
     928:	fe042783          	lw	a5,-32(s0)
     92c:	00500593          	li	a1,5
     930:	00078513          	mv	a0,a5
     934:	751050ef          	jal	ra,6884 <__udivsi3>
     938:	00050793          	mv	a5,a0
     93c:	00078713          	mv	a4,a5
     940:	fec42783          	lw	a5,-20(s0)
     944:	02e7f463          	bgeu	a5,a4,96c <HEAP_SIZE+0x16c>
            finder->info->idx = i++;
     948:	fec42783          	lw	a5,-20(s0)
     94c:	00178713          	addi	a4,a5,1
     950:	fee42623          	sw	a4,-20(s0)
     954:	fe842703          	lw	a4,-24(s0)
     958:	00472703          	lw	a4,4(a4)
     95c:	01079793          	slli	a5,a5,0x10
     960:	4107d793          	srai	a5,a5,0x10
     964:	00f71123          	sh	a5,2(a4)
     968:	0800006f          	j	9e8 <HEAP_SIZE+0x1e8>
        else
        {
            ee_u16 pat = (ee_u16)(i++ ^ seed); /* get a pseudo random number */
     96c:	fec42783          	lw	a5,-20(s0)
     970:	00178713          	addi	a4,a5,1
     974:	fee42623          	sw	a4,-20(s0)
     978:	01079713          	slli	a4,a5,0x10
     97c:	01075713          	srli	a4,a4,0x10
     980:	fb645783          	lhu	a5,-74(s0)
     984:	00f747b3          	xor	a5,a4,a5
     988:	fcf41923          	sh	a5,-46(s0)
            finder->info->idx = 0x3fff
                                & (((i & 0x07) << 8)
     98c:	fec42783          	lw	a5,-20(s0)
     990:	01079793          	slli	a5,a5,0x10
     994:	0107d793          	srli	a5,a5,0x10
     998:	00879793          	slli	a5,a5,0x8
     99c:	01079793          	slli	a5,a5,0x10
     9a0:	0107d793          	srli	a5,a5,0x10
     9a4:	7007f793          	andi	a5,a5,1792
     9a8:	01079713          	slli	a4,a5,0x10
     9ac:	01075713          	srli	a4,a4,0x10
                                   | pat); /* make sure the mixed items end up
     9b0:	fd245783          	lhu	a5,-46(s0)
     9b4:	00f767b3          	or	a5,a4,a5
     9b8:	01079793          	slli	a5,a5,0x10
     9bc:	0107d793          	srli	a5,a5,0x10
                                & (((i & 0x07) << 8)
     9c0:	01079693          	slli	a3,a5,0x10
     9c4:	4106d693          	srai	a3,a3,0x10
            finder->info->idx = 0x3fff
     9c8:	fe842783          	lw	a5,-24(s0)
     9cc:	0047a783          	lw	a5,4(a5)
                                & (((i & 0x07) << 8)
     9d0:	00004737          	lui	a4,0x4
     9d4:	fff70713          	addi	a4,a4,-1 # 3fff <skip_atoi+0x5b>
     9d8:	00e6f733          	and	a4,a3,a4
     9dc:	01071713          	slli	a4,a4,0x10
     9e0:	41075713          	srai	a4,a4,0x10
            finder->info->idx = 0x3fff
     9e4:	00e79123          	sh	a4,2(a5)
                                              after the ones in sequence */
        }
        finder = finder->next;
     9e8:	fe842783          	lw	a5,-24(s0)
     9ec:	0007a783          	lw	a5,0(a5)
     9f0:	fef42423          	sw	a5,-24(s0)
    while (finder->next != NULL)
     9f4:	fe842783          	lw	a5,-24(s0)
     9f8:	0007a783          	lw	a5,0(a5)
     9fc:	f20796e3          	bnez	a5,928 <HEAP_SIZE+0x128>
    }
    list = core_list_mergesort(list, cmp_idx, NULL);
     a00:	00000613          	li	a2,0
     a04:	32800593          	li	a1,808
     a08:	fd442503          	lw	a0,-44(s0)
     a0c:	2ec000ef          	jal	ra,cf8 <core_list_mergesort>
     a10:	fca42a23          	sw	a0,-44(s0)
            "[%04x,%04x]", finder->info->idx, (ee_u16)finder->info->data16);
        finder = finder->next;
    }
    ee_printf("\n");
#endif
    return list;
     a14:	fd442783          	lw	a5,-44(s0)
}
     a18:	00078513          	mv	a0,a5
     a1c:	04c12083          	lw	ra,76(sp)
     a20:	04812403          	lw	s0,72(sp)
     a24:	05010113          	addi	sp,sp,80
     a28:	00008067          	ret

00000a2c <core_list_insert_new>:
                     list_data * info,
                     list_head **memblock,
                     list_data **datablock,
                     list_head * memblock_end,
                     list_data * datablock_end)
{
     a2c:	fc010113          	addi	sp,sp,-64
     a30:	02112e23          	sw	ra,60(sp)
     a34:	02812c23          	sw	s0,56(sp)
     a38:	04010413          	addi	s0,sp,64
     a3c:	fca42e23          	sw	a0,-36(s0)
     a40:	fcb42c23          	sw	a1,-40(s0)
     a44:	fcc42a23          	sw	a2,-44(s0)
     a48:	fcd42823          	sw	a3,-48(s0)
     a4c:	fce42623          	sw	a4,-52(s0)
     a50:	fcf42423          	sw	a5,-56(s0)
    list_head *newitem;

    if ((*memblock + 1) >= memblock_end)
     a54:	fd442783          	lw	a5,-44(s0)
     a58:	0007a783          	lw	a5,0(a5)
     a5c:	00878793          	addi	a5,a5,8
     a60:	fcc42703          	lw	a4,-52(s0)
     a64:	00e7e663          	bltu	a5,a4,a70 <core_list_insert_new+0x44>
        return NULL;
     a68:	00000793          	li	a5,0
     a6c:	0980006f          	j	b04 <core_list_insert_new+0xd8>
    if ((*datablock + 1) >= datablock_end)
     a70:	fd042783          	lw	a5,-48(s0)
     a74:	0007a783          	lw	a5,0(a5)
     a78:	00478793          	addi	a5,a5,4
     a7c:	fc842703          	lw	a4,-56(s0)
     a80:	00e7e663          	bltu	a5,a4,a8c <core_list_insert_new+0x60>
        return NULL;
     a84:	00000793          	li	a5,0
     a88:	07c0006f          	j	b04 <core_list_insert_new+0xd8>

    newitem = *memblock;
     a8c:	fd442783          	lw	a5,-44(s0)
     a90:	0007a783          	lw	a5,0(a5)
     a94:	fef42623          	sw	a5,-20(s0)
    (*memblock)++;
     a98:	fd442783          	lw	a5,-44(s0)
     a9c:	0007a783          	lw	a5,0(a5)
     aa0:	00878713          	addi	a4,a5,8
     aa4:	fd442783          	lw	a5,-44(s0)
     aa8:	00e7a023          	sw	a4,0(a5)
    newitem->next      = insert_point->next;
     aac:	fdc42783          	lw	a5,-36(s0)
     ab0:	0007a703          	lw	a4,0(a5)
     ab4:	fec42783          	lw	a5,-20(s0)
     ab8:	00e7a023          	sw	a4,0(a5)
    insert_point->next = newitem;
     abc:	fdc42783          	lw	a5,-36(s0)
     ac0:	fec42703          	lw	a4,-20(s0)
     ac4:	00e7a023          	sw	a4,0(a5)

    newitem->info = *datablock;
     ac8:	fd042783          	lw	a5,-48(s0)
     acc:	0007a703          	lw	a4,0(a5)
     ad0:	fec42783          	lw	a5,-20(s0)
     ad4:	00e7a223          	sw	a4,4(a5)
    (*datablock)++;
     ad8:	fd042783          	lw	a5,-48(s0)
     adc:	0007a783          	lw	a5,0(a5)
     ae0:	00478713          	addi	a4,a5,4
     ae4:	fd042783          	lw	a5,-48(s0)
     ae8:	00e7a023          	sw	a4,0(a5)
    copy_info(newitem->info, info);
     aec:	fec42783          	lw	a5,-20(s0)
     af0:	0047a783          	lw	a5,4(a5)
     af4:	fd842583          	lw	a1,-40(s0)
     af8:	00078513          	mv	a0,a5
     afc:	90dff0ef          	jal	ra,408 <copy_info>

    return newitem;
     b00:	fec42783          	lw	a5,-20(s0)
}
     b04:	00078513          	mv	a0,a5
     b08:	03c12083          	lw	ra,60(sp)
     b0c:	03812403          	lw	s0,56(sp)
     b10:	04010113          	addi	sp,sp,64
     b14:	00008067          	ret

00000b18 <core_list_remove>:
        Returns:
        Removed item.
*/
list_head *
core_list_remove(list_head *item)
{
     b18:	fd010113          	addi	sp,sp,-48
     b1c:	02812623          	sw	s0,44(sp)
     b20:	03010413          	addi	s0,sp,48
     b24:	fca42e23          	sw	a0,-36(s0)
    list_data *tmp;
    list_head *ret = item->next;
     b28:	fdc42783          	lw	a5,-36(s0)
     b2c:	0007a783          	lw	a5,0(a5)
     b30:	fef42623          	sw	a5,-20(s0)
    /* swap data pointers */
    tmp        = item->info;
     b34:	fdc42783          	lw	a5,-36(s0)
     b38:	0047a783          	lw	a5,4(a5)
     b3c:	fef42423          	sw	a5,-24(s0)
    item->info = ret->info;
     b40:	fec42783          	lw	a5,-20(s0)
     b44:	0047a703          	lw	a4,4(a5)
     b48:	fdc42783          	lw	a5,-36(s0)
     b4c:	00e7a223          	sw	a4,4(a5)
    ret->info  = tmp;
     b50:	fec42783          	lw	a5,-20(s0)
     b54:	fe842703          	lw	a4,-24(s0)
     b58:	00e7a223          	sw	a4,4(a5)
    /* and eliminate item */
    item->next = item->next->next;
     b5c:	fdc42783          	lw	a5,-36(s0)
     b60:	0007a783          	lw	a5,0(a5)
     b64:	0007a703          	lw	a4,0(a5)
     b68:	fdc42783          	lw	a5,-36(s0)
     b6c:	00e7a023          	sw	a4,0(a5)
    ret->next  = NULL;
     b70:	fec42783          	lw	a5,-20(s0)
     b74:	0007a023          	sw	zero,0(a5)
    return ret;
     b78:	fec42783          	lw	a5,-20(s0)
}
     b7c:	00078513          	mv	a0,a5
     b80:	02c12403          	lw	s0,44(sp)
     b84:	03010113          	addi	sp,sp,48
     b88:	00008067          	ret

00000b8c <core_list_undo_remove>:
        The item that was linked back to the list.

*/
list_head *
core_list_undo_remove(list_head *item_removed, list_head *item_modified)
{
     b8c:	fd010113          	addi	sp,sp,-48
     b90:	02812623          	sw	s0,44(sp)
     b94:	03010413          	addi	s0,sp,48
     b98:	fca42e23          	sw	a0,-36(s0)
     b9c:	fcb42c23          	sw	a1,-40(s0)
    list_data *tmp;
    /* swap data pointers */
    tmp                 = item_removed->info;
     ba0:	fdc42783          	lw	a5,-36(s0)
     ba4:	0047a783          	lw	a5,4(a5)
     ba8:	fef42623          	sw	a5,-20(s0)
    item_removed->info  = item_modified->info;
     bac:	fd842783          	lw	a5,-40(s0)
     bb0:	0047a703          	lw	a4,4(a5)
     bb4:	fdc42783          	lw	a5,-36(s0)
     bb8:	00e7a223          	sw	a4,4(a5)
    item_modified->info = tmp;
     bbc:	fd842783          	lw	a5,-40(s0)
     bc0:	fec42703          	lw	a4,-20(s0)
     bc4:	00e7a223          	sw	a4,4(a5)
    /* and insert item */
    item_removed->next  = item_modified->next;
     bc8:	fd842783          	lw	a5,-40(s0)
     bcc:	0007a703          	lw	a4,0(a5)
     bd0:	fdc42783          	lw	a5,-36(s0)
     bd4:	00e7a023          	sw	a4,0(a5)
    item_modified->next = item_removed;
     bd8:	fd842783          	lw	a5,-40(s0)
     bdc:	fdc42703          	lw	a4,-36(s0)
     be0:	00e7a023          	sw	a4,0(a5)
    return item_removed;
     be4:	fdc42783          	lw	a5,-36(s0)
}
     be8:	00078513          	mv	a0,a5
     bec:	02c12403          	lw	s0,44(sp)
     bf0:	03010113          	addi	sp,sp,48
     bf4:	00008067          	ret

00000bf8 <core_list_find>:
        Returns:
        Found item, or NULL if not found.
*/
list_head *
core_list_find(list_head *list, list_data *info)
{
     bf8:	fe010113          	addi	sp,sp,-32
     bfc:	00812e23          	sw	s0,28(sp)
     c00:	02010413          	addi	s0,sp,32
     c04:	fea42623          	sw	a0,-20(s0)
     c08:	feb42423          	sw	a1,-24(s0)
    if (info->idx >= 0)
     c0c:	fe842783          	lw	a5,-24(s0)
     c10:	00279783          	lh	a5,2(a5)
     c14:	0407c463          	bltz	a5,c5c <core_list_find+0x64>
    {
        while (list && (list->info->idx != info->idx))
     c18:	0100006f          	j	c28 <core_list_find+0x30>
            list = list->next;
     c1c:	fec42783          	lw	a5,-20(s0)
     c20:	0007a783          	lw	a5,0(a5)
     c24:	fef42623          	sw	a5,-20(s0)
        while (list && (list->info->idx != info->idx))
     c28:	fec42783          	lw	a5,-20(s0)
     c2c:	00078e63          	beqz	a5,c48 <core_list_find+0x50>
     c30:	fec42783          	lw	a5,-20(s0)
     c34:	0047a783          	lw	a5,4(a5)
     c38:	00279703          	lh	a4,2(a5)
     c3c:	fe842783          	lw	a5,-24(s0)
     c40:	00279783          	lh	a5,2(a5)
     c44:	fcf71ce3          	bne	a4,a5,c1c <core_list_find+0x24>
        return list;
     c48:	fec42783          	lw	a5,-20(s0)
     c4c:	0400006f          	j	c8c <core_list_find+0x94>
    }
    else
    {
        while (list && ((list->info->data16 & 0xff) != info->data16))
            list = list->next;
     c50:	fec42783          	lw	a5,-20(s0)
     c54:	0007a783          	lw	a5,0(a5)
     c58:	fef42623          	sw	a5,-20(s0)
        while (list && ((list->info->data16 & 0xff) != info->data16))
     c5c:	fec42783          	lw	a5,-20(s0)
     c60:	02078463          	beqz	a5,c88 <core_list_find+0x90>
     c64:	fec42783          	lw	a5,-20(s0)
     c68:	0047a783          	lw	a5,4(a5)
     c6c:	00079783          	lh	a5,0(a5)
     c70:	01079793          	slli	a5,a5,0x10
     c74:	0107d793          	srli	a5,a5,0x10
     c78:	0ff7f793          	zext.b	a5,a5
     c7c:	fe842703          	lw	a4,-24(s0)
     c80:	00071703          	lh	a4,0(a4)
     c84:	fce796e3          	bne	a5,a4,c50 <core_list_find+0x58>
        return list;
     c88:	fec42783          	lw	a5,-20(s0)
    }
}
     c8c:	00078513          	mv	a0,a5
     c90:	01c12403          	lw	s0,28(sp)
     c94:	02010113          	addi	sp,sp,32
     c98:	00008067          	ret

00000c9c <core_list_reverse>:
        Found item, or NULL if not found.
*/

list_head *
core_list_reverse(list_head *list)
{
     c9c:	fd010113          	addi	sp,sp,-48
     ca0:	02812623          	sw	s0,44(sp)
     ca4:	03010413          	addi	s0,sp,48
     ca8:	fca42e23          	sw	a0,-36(s0)
    list_head *next = NULL, *tmp;
     cac:	fe042623          	sw	zero,-20(s0)
    while (list)
     cb0:	02c0006f          	j	cdc <core_list_reverse+0x40>
    {
        tmp        = list->next;
     cb4:	fdc42783          	lw	a5,-36(s0)
     cb8:	0007a783          	lw	a5,0(a5)
     cbc:	fef42423          	sw	a5,-24(s0)
        list->next = next;
     cc0:	fdc42783          	lw	a5,-36(s0)
     cc4:	fec42703          	lw	a4,-20(s0)
     cc8:	00e7a023          	sw	a4,0(a5)
        next       = list;
     ccc:	fdc42783          	lw	a5,-36(s0)
     cd0:	fef42623          	sw	a5,-20(s0)
        list       = tmp;
     cd4:	fe842783          	lw	a5,-24(s0)
     cd8:	fcf42e23          	sw	a5,-36(s0)
    while (list)
     cdc:	fdc42783          	lw	a5,-36(s0)
     ce0:	fc079ae3          	bnez	a5,cb4 <core_list_reverse+0x18>
    }
    return next;
     ce4:	fec42783          	lw	a5,-20(s0)
}
     ce8:	00078513          	mv	a0,a5
     cec:	02c12403          	lw	s0,44(sp)
     cf0:	03010113          	addi	sp,sp,48
     cf4:	00008067          	ret

00000cf8 <core_list_mergesort>:
        but the algorithm could theoretically modify where the list starts.

 */
list_head *
core_list_mergesort(list_head *list, list_cmp cmp, core_results *res)
{
     cf8:	fb010113          	addi	sp,sp,-80
     cfc:	04112623          	sw	ra,76(sp)
     d00:	04812423          	sw	s0,72(sp)
     d04:	05010413          	addi	s0,sp,80
     d08:	faa42e23          	sw	a0,-68(s0)
     d0c:	fab42c23          	sw	a1,-72(s0)
     d10:	fac42a23          	sw	a2,-76(s0)
    list_head *p, *q, *e, *tail;
    ee_s32     insize, nmerges, psize, qsize, i;

    insize = 1;
     d14:	00100793          	li	a5,1
     d18:	fcf42e23          	sw	a5,-36(s0)

    while (1)
    {
        p    = list;
     d1c:	fbc42783          	lw	a5,-68(s0)
     d20:	fef42623          	sw	a5,-20(s0)
        list = NULL;
     d24:	fa042e23          	sw	zero,-68(s0)
        tail = NULL;
     d28:	fe042023          	sw	zero,-32(s0)

        nmerges = 0; /* count number of merges we do in this pass */
     d2c:	fc042c23          	sw	zero,-40(s0)

        while (p)
     d30:	1880006f          	j	eb8 <core_list_mergesort+0x1c0>
        {
            nmerges++; /* there exists a merge to be done */
     d34:	fd842783          	lw	a5,-40(s0)
     d38:	00178793          	addi	a5,a5,1
     d3c:	fcf42c23          	sw	a5,-40(s0)
            /* step `insize' places along from p */
            q     = p;
     d40:	fec42783          	lw	a5,-20(s0)
     d44:	fef42423          	sw	a5,-24(s0)
            psize = 0;
     d48:	fc042a23          	sw	zero,-44(s0)
            for (i = 0; i < insize; i++)
     d4c:	fc042623          	sw	zero,-52(s0)
     d50:	0300006f          	j	d80 <core_list_mergesort+0x88>
            {
                psize++;
     d54:	fd442783          	lw	a5,-44(s0)
     d58:	00178793          	addi	a5,a5,1
     d5c:	fcf42a23          	sw	a5,-44(s0)
                q = q->next;
     d60:	fe842783          	lw	a5,-24(s0)
     d64:	0007a783          	lw	a5,0(a5)
     d68:	fef42423          	sw	a5,-24(s0)
                if (!q)
     d6c:	fe842783          	lw	a5,-24(s0)
     d70:	02078063          	beqz	a5,d90 <core_list_mergesort+0x98>
            for (i = 0; i < insize; i++)
     d74:	fcc42783          	lw	a5,-52(s0)
     d78:	00178793          	addi	a5,a5,1
     d7c:	fcf42623          	sw	a5,-52(s0)
     d80:	fcc42703          	lw	a4,-52(s0)
     d84:	fdc42783          	lw	a5,-36(s0)
     d88:	fcf746e3          	blt	a4,a5,d54 <core_list_mergesort+0x5c>
     d8c:	0080006f          	j	d94 <core_list_mergesort+0x9c>
                    break;
     d90:	00000013          	nop
            }

            /* if q hasn't fallen off end, we have two lists to merge */
            qsize = insize;
     d94:	fdc42783          	lw	a5,-36(s0)
     d98:	fcf42823          	sw	a5,-48(s0)

            /* now we have two lists; merge them */
            while (psize > 0 || (qsize > 0 && q))
     d9c:	0fc0006f          	j	e98 <core_list_mergesort+0x1a0>
            {

                /* decide whether next element of merge comes from p or q */
                if (psize == 0)
     da0:	fd442783          	lw	a5,-44(s0)
     da4:	02079463          	bnez	a5,dcc <core_list_mergesort+0xd4>
                {
                    /* p is empty; e must come from q. */
                    e = q;
     da8:	fe842783          	lw	a5,-24(s0)
     dac:	fef42223          	sw	a5,-28(s0)
                    q = q->next;
     db0:	fe842783          	lw	a5,-24(s0)
     db4:	0007a783          	lw	a5,0(a5)
     db8:	fef42423          	sw	a5,-24(s0)
                    qsize--;
     dbc:	fd042783          	lw	a5,-48(s0)
     dc0:	fff78793          	addi	a5,a5,-1
     dc4:	fcf42823          	sw	a5,-48(s0)
     dc8:	0a80006f          	j	e70 <core_list_mergesort+0x178>
                }
                else if (qsize == 0 || !q)
     dcc:	fd042783          	lw	a5,-48(s0)
     dd0:	00078663          	beqz	a5,ddc <core_list_mergesort+0xe4>
     dd4:	fe842783          	lw	a5,-24(s0)
     dd8:	02079463          	bnez	a5,e00 <core_list_mergesort+0x108>
                {
                    /* q is empty; e must come from p. */
                    e = p;
     ddc:	fec42783          	lw	a5,-20(s0)
     de0:	fef42223          	sw	a5,-28(s0)
                    p = p->next;
     de4:	fec42783          	lw	a5,-20(s0)
     de8:	0007a783          	lw	a5,0(a5)
     dec:	fef42623          	sw	a5,-20(s0)
                    psize--;
     df0:	fd442783          	lw	a5,-44(s0)
     df4:	fff78793          	addi	a5,a5,-1
     df8:	fcf42a23          	sw	a5,-44(s0)
     dfc:	0740006f          	j	e70 <core_list_mergesort+0x178>
                }
                else if (cmp(p->info, q->info, res) <= 0)
     e00:	fec42783          	lw	a5,-20(s0)
     e04:	0047a703          	lw	a4,4(a5)
     e08:	fe842783          	lw	a5,-24(s0)
     e0c:	0047a783          	lw	a5,4(a5)
     e10:	fb842683          	lw	a3,-72(s0)
     e14:	fb442603          	lw	a2,-76(s0)
     e18:	00078593          	mv	a1,a5
     e1c:	00070513          	mv	a0,a4
     e20:	000680e7          	jalr	a3
     e24:	00050793          	mv	a5,a0
     e28:	02f04463          	bgtz	a5,e50 <core_list_mergesort+0x158>
                {
                    /* First element of p is lower (or same); e must come from
                     * p. */
                    e = p;
     e2c:	fec42783          	lw	a5,-20(s0)
     e30:	fef42223          	sw	a5,-28(s0)
                    p = p->next;
     e34:	fec42783          	lw	a5,-20(s0)
     e38:	0007a783          	lw	a5,0(a5)
     e3c:	fef42623          	sw	a5,-20(s0)
                    psize--;
     e40:	fd442783          	lw	a5,-44(s0)
     e44:	fff78793          	addi	a5,a5,-1
     e48:	fcf42a23          	sw	a5,-44(s0)
     e4c:	0240006f          	j	e70 <core_list_mergesort+0x178>
                }
                else
                {
                    /* First element of q is lower; e must come from q. */
                    e = q;
     e50:	fe842783          	lw	a5,-24(s0)
     e54:	fef42223          	sw	a5,-28(s0)
                    q = q->next;
     e58:	fe842783          	lw	a5,-24(s0)
     e5c:	0007a783          	lw	a5,0(a5)
     e60:	fef42423          	sw	a5,-24(s0)
                    qsize--;
     e64:	fd042783          	lw	a5,-48(s0)
     e68:	fff78793          	addi	a5,a5,-1
     e6c:	fcf42823          	sw	a5,-48(s0)
                }

                /* add the next element to the merged list */
                if (tail)
     e70:	fe042783          	lw	a5,-32(s0)
     e74:	00078a63          	beqz	a5,e88 <core_list_mergesort+0x190>
                {
                    tail->next = e;
     e78:	fe042783          	lw	a5,-32(s0)
     e7c:	fe442703          	lw	a4,-28(s0)
     e80:	00e7a023          	sw	a4,0(a5)
     e84:	00c0006f          	j	e90 <core_list_mergesort+0x198>
                }
                else
                {
                    list = e;
     e88:	fe442783          	lw	a5,-28(s0)
     e8c:	faf42e23          	sw	a5,-68(s0)
                }
                tail = e;
     e90:	fe442783          	lw	a5,-28(s0)
     e94:	fef42023          	sw	a5,-32(s0)
            while (psize > 0 || (qsize > 0 && q))
     e98:	fd442783          	lw	a5,-44(s0)
     e9c:	f0f042e3          	bgtz	a5,da0 <core_list_mergesort+0xa8>
     ea0:	fd042783          	lw	a5,-48(s0)
     ea4:	00f05663          	blez	a5,eb0 <core_list_mergesort+0x1b8>
     ea8:	fe842783          	lw	a5,-24(s0)
     eac:	ee079ae3          	bnez	a5,da0 <core_list_mergesort+0xa8>
            }

            /* now p has stepped `insize' places along, and q has too */
            p = q;
     eb0:	fe842783          	lw	a5,-24(s0)
     eb4:	fef42623          	sw	a5,-20(s0)
        while (p)
     eb8:	fec42783          	lw	a5,-20(s0)
     ebc:	e6079ce3          	bnez	a5,d34 <core_list_mergesort+0x3c>
        }

        tail->next = NULL;
     ec0:	fe042783          	lw	a5,-32(s0)
     ec4:	0007a023          	sw	zero,0(a5)

        /* If we have done only one merge, we're finished. */
        if (nmerges <= 1) /* allow for nmerges==0, the empty list case */
     ec8:	fd842703          	lw	a4,-40(s0)
     ecc:	00100793          	li	a5,1
     ed0:	00e7c663          	blt	a5,a4,edc <core_list_mergesort+0x1e4>
            return list;
     ed4:	fbc42783          	lw	a5,-68(s0)
     ed8:	0140006f          	j	eec <core_list_mergesort+0x1f4>

        /* Otherwise repeat, merging lists twice the size */
        insize *= 2;
     edc:	fdc42783          	lw	a5,-36(s0)
     ee0:	00179793          	slli	a5,a5,0x1
     ee4:	fcf42e23          	sw	a5,-36(s0)
        p    = list;
     ee8:	e35ff06f          	j	d1c <core_list_mergesort+0x24>
    }
#if COMPILER_REQUIRES_SORT_RETURN
    return list;
#endif
}
     eec:	00078513          	mv	a0,a5
     ef0:	04c12083          	lw	ra,76(sp)
     ef4:	04812403          	lw	s0,72(sp)
     ef8:	05010113          	addi	sp,sp,80
     efc:	00008067          	ret

00000f00 <iterate>:
                                    (ee_u16)0xe5a4,
                                    (ee_u16)0x8e3a,
                                    (ee_u16)0x8d84 };
void *
iterate(void *pres)
{
     f00:	fd010113          	addi	sp,sp,-48
     f04:	02112623          	sw	ra,44(sp)
     f08:	02812423          	sw	s0,40(sp)
     f0c:	03010413          	addi	s0,sp,48
     f10:	fca42e23          	sw	a0,-36(s0)
    ee_u32        i;
    ee_u16        crc;
    core_results *res        = (core_results *)pres;
     f14:	fdc42783          	lw	a5,-36(s0)
     f18:	fef42423          	sw	a5,-24(s0)
    ee_u32        iterations = res->iterations;
     f1c:	fe842783          	lw	a5,-24(s0)
     f20:	01c7a783          	lw	a5,28(a5)
     f24:	fef42223          	sw	a5,-28(s0)
    res->crc                 = 0;
     f28:	fe842783          	lw	a5,-24(s0)
     f2c:	02079c23          	sh	zero,56(a5)
    res->crclist             = 0;
     f30:	fe842783          	lw	a5,-24(s0)
     f34:	02079d23          	sh	zero,58(a5)
    res->crcmatrix           = 0;
     f38:	fe842783          	lw	a5,-24(s0)
     f3c:	02079e23          	sh	zero,60(a5)
    res->crcstate            = 0;
     f40:	fe842783          	lw	a5,-24(s0)
     f44:	02079f23          	sh	zero,62(a5)

    for (i = 0; i < iterations; i++)
     f48:	fe042623          	sw	zero,-20(s0)
     f4c:	0a00006f          	j	fec <iterate+0xec>
    {
        crc      = core_bench_list(res, 1);
     f50:	00100593          	li	a1,1
     f54:	fe842503          	lw	a0,-24(s0)
     f58:	cf4ff0ef          	jal	ra,44c <core_bench_list>
     f5c:	00050793          	mv	a5,a0
     f60:	fef41123          	sh	a5,-30(s0)
        res->crc = crcu16(crc, res->crc);
     f64:	fe842783          	lw	a5,-24(s0)
     f68:	0387d703          	lhu	a4,56(a5)
     f6c:	fe245783          	lhu	a5,-30(s0)
     f70:	00070593          	mv	a1,a4
     f74:	00078513          	mv	a0,a5
     f78:	01d020ef          	jal	ra,3794 <crcu16>
     f7c:	00050793          	mv	a5,a0
     f80:	00078713          	mv	a4,a5
     f84:	fe842783          	lw	a5,-24(s0)
     f88:	02e79c23          	sh	a4,56(a5)
        crc      = core_bench_list(res, -1);
     f8c:	fff00593          	li	a1,-1
     f90:	fe842503          	lw	a0,-24(s0)
     f94:	cb8ff0ef          	jal	ra,44c <core_bench_list>
     f98:	00050793          	mv	a5,a0
     f9c:	fef41123          	sh	a5,-30(s0)
        res->crc = crcu16(crc, res->crc);
     fa0:	fe842783          	lw	a5,-24(s0)
     fa4:	0387d703          	lhu	a4,56(a5)
     fa8:	fe245783          	lhu	a5,-30(s0)
     fac:	00070593          	mv	a1,a4
     fb0:	00078513          	mv	a0,a5
     fb4:	7e0020ef          	jal	ra,3794 <crcu16>
     fb8:	00050793          	mv	a5,a0
     fbc:	00078713          	mv	a4,a5
     fc0:	fe842783          	lw	a5,-24(s0)
     fc4:	02e79c23          	sh	a4,56(a5)
        if (i == 0)
     fc8:	fec42783          	lw	a5,-20(s0)
     fcc:	00079a63          	bnez	a5,fe0 <iterate+0xe0>
            res->crclist = res->crc;
     fd0:	fe842783          	lw	a5,-24(s0)
     fd4:	0387d703          	lhu	a4,56(a5)
     fd8:	fe842783          	lw	a5,-24(s0)
     fdc:	02e79d23          	sh	a4,58(a5)
    for (i = 0; i < iterations; i++)
     fe0:	fec42783          	lw	a5,-20(s0)
     fe4:	00178793          	addi	a5,a5,1
     fe8:	fef42623          	sw	a5,-20(s0)
     fec:	fec42703          	lw	a4,-20(s0)
     ff0:	fe442783          	lw	a5,-28(s0)
     ff4:	f4f76ee3          	bltu	a4,a5,f50 <iterate+0x50>
    }
    return NULL;
     ff8:	00000793          	li	a5,0
}
     ffc:	00078513          	mv	a0,a5
    1000:	02c12083          	lw	ra,44(sp)
    1004:	02812403          	lw	s0,40(sp)
    1008:	03010113          	addi	sp,sp,48
    100c:	00008067          	ret

00001010 <main>:
*/

#if MAIN_HAS_NOARGC
MAIN_RETURN_TYPE
main(void)
{
    1010:	81010113          	addi	sp,sp,-2032
    1014:	7e112623          	sw	ra,2028(sp)
    1018:	7e812423          	sw	s0,2024(sp)
    101c:	7e912223          	sw	s1,2020(sp)
    1020:	7f010413          	addi	s0,sp,2032
    1024:	fa010113          	addi	sp,sp,-96
    int   argc = 0;
    1028:	fc042623          	sw	zero,-52(s0)
#else
MAIN_RETURN_TYPE
main(int argc, char *argv[])
{
#endif
    ee_u16       i, j = 0, num_algorithms = 0;
    102c:	fe041623          	sh	zero,-20(s0)
    1030:	fe041523          	sh	zero,-22(s0)
    ee_s16       known_id = -1, total_errors = 0;
    1034:	fff00793          	li	a5,-1
    1038:	fef41423          	sh	a5,-24(s0)
    103c:	fe041323          	sh	zero,-26(s0)
    ee_u16       seedcrc = 0;
    1040:	fc041b23          	sh	zero,-42(s0)
    core_results results[MULTITHREAD];
#if (MEM_METHOD == MEM_STACK)
    ee_u8 stack_memblock[TOTAL_DATA_SIZE * MULTITHREAD];
#endif
    /* first call any initializations needed */
    portable_init(&(results[0].port), &argc, argv);
    1044:	fc840693          	addi	a3,s0,-56
    1048:	fcc40713          	addi	a4,s0,-52
    104c:	f8440793          	addi	a5,s0,-124
    1050:	04278793          	addi	a5,a5,66
    1054:	00068613          	mv	a2,a3
    1058:	00070593          	mv	a1,a4
    105c:	00078513          	mv	a0,a5
    1060:	435010ef          	jal	ra,2c94 <portable_init>
    if (sizeof(struct list_head_s) > 128)
    {
        ee_printf("list_head structure too big for comparable data!\n");
        return MAIN_RETURN_VAL;
    }
    results[0].seed1      = get_seed(1);
    1064:	00100513          	li	a0,1
    1068:	598020ef          	jal	ra,3600 <get_seed_32>
    106c:	00050793          	mv	a5,a0
    1070:	01079793          	slli	a5,a5,0x10
    1074:	4107d793          	srai	a5,a5,0x10
    1078:	f8f41223          	sh	a5,-124(s0)
    results[0].seed2      = get_seed(2);
    107c:	00200513          	li	a0,2
    1080:	580020ef          	jal	ra,3600 <get_seed_32>
    1084:	00050793          	mv	a5,a0
    1088:	01079793          	slli	a5,a5,0x10
    108c:	4107d793          	srai	a5,a5,0x10
    1090:	f8f41323          	sh	a5,-122(s0)
    results[0].seed3      = get_seed(3);
    1094:	00300513          	li	a0,3
    1098:	568020ef          	jal	ra,3600 <get_seed_32>
    109c:	00050793          	mv	a5,a0
    10a0:	01079793          	slli	a5,a5,0x10
    10a4:	4107d793          	srai	a5,a5,0x10
    10a8:	f8f41423          	sh	a5,-120(s0)
    results[0].iterations = get_seed_32(4);
    10ac:	00400513          	li	a0,4
    10b0:	550020ef          	jal	ra,3600 <get_seed_32>
    10b4:	00050793          	mv	a5,a0
    10b8:	faf42023          	sw	a5,-96(s0)
#if CORE_DEBUG
    results[0].iterations = 1;
#endif
    results[0].execs = get_seed_32(5);
    10bc:	00500513          	li	a0,5
    10c0:	540020ef          	jal	ra,3600 <get_seed_32>
    10c4:	00050793          	mv	a5,a0
    10c8:	faf42223          	sw	a5,-92(s0)
    if (results[0].execs == 0)
    10cc:	fa442783          	lw	a5,-92(s0)
    10d0:	00079663          	bnez	a5,10dc <main+0xcc>
    { /* if not supplied, execute all algorithms */
        results[0].execs = ALL_ALGORITHMS_MASK;
    10d4:	00700793          	li	a5,7
    10d8:	faf42223          	sw	a5,-92(s0)
    }
    /* put in some default values based on one seed only for easy testing */
    if ((results[0].seed1 == 0) && (results[0].seed2 == 0)
    10dc:	f8441783          	lh	a5,-124(s0)
    10e0:	02079263          	bnez	a5,1104 <main+0xf4>
    10e4:	f8641783          	lh	a5,-122(s0)
    10e8:	00079e63          	bnez	a5,1104 <main+0xf4>
        && (results[0].seed3 == 0))
    10ec:	f8841783          	lh	a5,-120(s0)
    10f0:	00079a63          	bnez	a5,1104 <main+0xf4>
    { /* performance run */
        results[0].seed1 = 0;
    10f4:	f8041223          	sh	zero,-124(s0)
        results[0].seed2 = 0;
    10f8:	f8041323          	sh	zero,-122(s0)
        results[0].seed3 = 0x66;
    10fc:	06600793          	li	a5,102
    1100:	f8f41423          	sh	a5,-120(s0)
    }
    if ((results[0].seed1 == 1) && (results[0].seed2 == 0)
    1104:	f8441703          	lh	a4,-124(s0)
    1108:	00100793          	li	a5,1
    110c:	02f71a63          	bne	a4,a5,1140 <main+0x130>
    1110:	f8641783          	lh	a5,-122(s0)
    1114:	02079663          	bnez	a5,1140 <main+0x130>
        && (results[0].seed3 == 0))
    1118:	f8841783          	lh	a5,-120(s0)
    111c:	02079263          	bnez	a5,1140 <main+0x130>
    { /* validation run */
        results[0].seed1 = 0x3415;
    1120:	000037b7          	lui	a5,0x3
    1124:	41578793          	addi	a5,a5,1045 # 3415 <core_state_transition+0x1b1>
    1128:	f8f41223          	sh	a5,-124(s0)
        results[0].seed2 = 0x3415;
    112c:	000037b7          	lui	a5,0x3
    1130:	41578793          	addi	a5,a5,1045 # 3415 <core_state_transition+0x1b1>
    1134:	f8f41323          	sh	a5,-122(s0)
        results[0].seed3 = 0x66;
    1138:	06600793          	li	a5,102
    113c:	f8f41423          	sh	a5,-120(s0)
        results[i].seed3       = results[0].seed3;
        results[i].err         = 0;
        results[i].execs       = results[0].execs;
    }
#elif (MEM_METHOD == MEM_STACK)
for (i = 0; i < MULTITHREAD; i++)
    1140:	fe041723          	sh	zero,-18(s0)
    1144:	1380006f          	j	127c <main+0x26c>
{
    results[i].memblock[0] = stack_memblock + i * TOTAL_DATA_SIZE;
    1148:	fee45703          	lhu	a4,-18(s0)
    114c:	00070793          	mv	a5,a4
    1150:	00579793          	slli	a5,a5,0x5
    1154:	40e787b3          	sub	a5,a5,a4
    1158:	00279793          	slli	a5,a5,0x2
    115c:	00e787b3          	add	a5,a5,a4
    1160:	00479793          	slli	a5,a5,0x4
    1164:	00078693          	mv	a3,a5
    1168:	fee45703          	lhu	a4,-18(s0)
    116c:	fffff7b7          	lui	a5,0xfffff
    1170:	7c478793          	addi	a5,a5,1988 # fffff7c4 <RAM_SIZE+0xfffef7c4>
    1174:	ff040613          	addi	a2,s0,-16
    1178:	00f607b3          	add	a5,a2,a5
    117c:	00d786b3          	add	a3,a5,a3
    1180:	00070793          	mv	a5,a4
    1184:	00479793          	slli	a5,a5,0x4
    1188:	00e787b3          	add	a5,a5,a4
    118c:	00279793          	slli	a5,a5,0x2
    1190:	ff040713          	addi	a4,s0,-16
    1194:	00f707b3          	add	a5,a4,a5
    1198:	f8d7ae23          	sw	a3,-100(a5)
    results[i].size        = TOTAL_DATA_SIZE;
    119c:	fee45703          	lhu	a4,-18(s0)
    11a0:	00070793          	mv	a5,a4
    11a4:	00479793          	slli	a5,a5,0x4
    11a8:	00e787b3          	add	a5,a5,a4
    11ac:	00279793          	slli	a5,a5,0x2
    11b0:	ff040713          	addi	a4,s0,-16
    11b4:	00f707b3          	add	a5,a4,a5
    11b8:	7d000713          	li	a4,2000
    11bc:	fae7a623          	sw	a4,-84(a5)
    results[i].seed1       = results[0].seed1;
    11c0:	fee45703          	lhu	a4,-18(s0)
    11c4:	f8441683          	lh	a3,-124(s0)
    11c8:	00070793          	mv	a5,a4
    11cc:	00479793          	slli	a5,a5,0x4
    11d0:	00e787b3          	add	a5,a5,a4
    11d4:	00279793          	slli	a5,a5,0x2
    11d8:	ff040713          	addi	a4,s0,-16
    11dc:	00f707b3          	add	a5,a4,a5
    11e0:	f8d79a23          	sh	a3,-108(a5)
    results[i].seed2       = results[0].seed2;
    11e4:	fee45703          	lhu	a4,-18(s0)
    11e8:	f8641683          	lh	a3,-122(s0)
    11ec:	00070793          	mv	a5,a4
    11f0:	00479793          	slli	a5,a5,0x4
    11f4:	00e787b3          	add	a5,a5,a4
    11f8:	00279793          	slli	a5,a5,0x2
    11fc:	ff040713          	addi	a4,s0,-16
    1200:	00f707b3          	add	a5,a4,a5
    1204:	f8d79b23          	sh	a3,-106(a5)
    results[i].seed3       = results[0].seed3;
    1208:	fee45703          	lhu	a4,-18(s0)
    120c:	f8841683          	lh	a3,-120(s0)
    1210:	00070793          	mv	a5,a4
    1214:	00479793          	slli	a5,a5,0x4
    1218:	00e787b3          	add	a5,a5,a4
    121c:	00279793          	slli	a5,a5,0x2
    1220:	ff040713          	addi	a4,s0,-16
    1224:	00f707b3          	add	a5,a4,a5
    1228:	f8d79c23          	sh	a3,-104(a5)
    results[i].err         = 0;
    122c:	fee45703          	lhu	a4,-18(s0)
    1230:	00070793          	mv	a5,a4
    1234:	00479793          	slli	a5,a5,0x4
    1238:	00e787b3          	add	a5,a5,a4
    123c:	00279793          	slli	a5,a5,0x2
    1240:	ff040713          	addi	a4,s0,-16
    1244:	00f707b3          	add	a5,a4,a5
    1248:	fc079a23          	sh	zero,-44(a5)
    results[i].execs       = results[0].execs;
    124c:	fee45703          	lhu	a4,-18(s0)
    1250:	fa442683          	lw	a3,-92(s0)
    1254:	00070793          	mv	a5,a4
    1258:	00479793          	slli	a5,a5,0x4
    125c:	00e787b3          	add	a5,a5,a4
    1260:	00279793          	slli	a5,a5,0x2
    1264:	ff040713          	addi	a4,s0,-16
    1268:	00f707b3          	add	a5,a4,a5
    126c:	fad7aa23          	sw	a3,-76(a5)
for (i = 0; i < MULTITHREAD; i++)
    1270:	fee45783          	lhu	a5,-18(s0)
    1274:	00178793          	addi	a5,a5,1
    1278:	fef41723          	sh	a5,-18(s0)
    127c:	fee45783          	lhu	a5,-18(s0)
    1280:	ec0784e3          	beqz	a5,1148 <main+0x138>
#else
#error "Please define a way to initialize a memory block."
#endif
    /* Data init */
    /* Find out how space much we have based on number of algorithms */
    for (i = 0; i < NUM_ALGORITHMS; i++)
    1284:	fe041723          	sh	zero,-18(s0)
    1288:	0380006f          	j	12c0 <main+0x2b0>
    {
        if ((1 << (ee_u32)i) & results[0].execs)
    128c:	fee45783          	lhu	a5,-18(s0)
    1290:	00100713          	li	a4,1
    1294:	00f717b3          	sll	a5,a4,a5
    1298:	00078713          	mv	a4,a5
    129c:	fa442783          	lw	a5,-92(s0)
    12a0:	00f777b3          	and	a5,a4,a5
    12a4:	00078863          	beqz	a5,12b4 <main+0x2a4>
            num_algorithms++;
    12a8:	fea45783          	lhu	a5,-22(s0)
    12ac:	00178793          	addi	a5,a5,1
    12b0:	fef41523          	sh	a5,-22(s0)
    for (i = 0; i < NUM_ALGORITHMS; i++)
    12b4:	fee45783          	lhu	a5,-18(s0)
    12b8:	00178793          	addi	a5,a5,1
    12bc:	fef41723          	sh	a5,-18(s0)
    12c0:	fee45703          	lhu	a4,-18(s0)
    12c4:	00200793          	li	a5,2
    12c8:	fce7f2e3          	bgeu	a5,a4,128c <main+0x27c>
    }
    for (i = 0; i < MULTITHREAD; i++)
    12cc:	fe041723          	sh	zero,-18(s0)
    12d0:	0680006f          	j	1338 <main+0x328>
        results[i].size = results[i].size / num_algorithms;
    12d4:	fee45703          	lhu	a4,-18(s0)
    12d8:	00070793          	mv	a5,a4
    12dc:	00479793          	slli	a5,a5,0x4
    12e0:	00e787b3          	add	a5,a5,a4
    12e4:	00279793          	slli	a5,a5,0x2
    12e8:	ff040713          	addi	a4,s0,-16
    12ec:	00f707b3          	add	a5,a4,a5
    12f0:	fac7a783          	lw	a5,-84(a5)
    12f4:	fea45703          	lhu	a4,-22(s0)
    12f8:	fee45483          	lhu	s1,-18(s0)
    12fc:	00070593          	mv	a1,a4
    1300:	00078513          	mv	a0,a5
    1304:	580050ef          	jal	ra,6884 <__udivsi3>
    1308:	00050793          	mv	a5,a0
    130c:	00078713          	mv	a4,a5
    1310:	00048793          	mv	a5,s1
    1314:	00479793          	slli	a5,a5,0x4
    1318:	009787b3          	add	a5,a5,s1
    131c:	00279793          	slli	a5,a5,0x2
    1320:	ff040693          	addi	a3,s0,-16
    1324:	00f687b3          	add	a5,a3,a5
    1328:	fae7a623          	sw	a4,-84(a5)
    for (i = 0; i < MULTITHREAD; i++)
    132c:	fee45783          	lhu	a5,-18(s0)
    1330:	00178793          	addi	a5,a5,1
    1334:	fef41723          	sh	a5,-18(s0)
    1338:	fee45783          	lhu	a5,-18(s0)
    133c:	f8078ce3          	beqz	a5,12d4 <main+0x2c4>
    /* Assign pointers */
    for (i = 0; i < NUM_ALGORITHMS; i++)
    1340:	fe041723          	sh	zero,-18(s0)
    1344:	0c00006f          	j	1404 <main+0x3f4>
    {
        ee_u32 ctx;
        if ((1 << (ee_u32)i) & results[0].execs)
    1348:	fee45783          	lhu	a5,-18(s0)
    134c:	00100713          	li	a4,1
    1350:	00f717b3          	sll	a5,a4,a5
    1354:	00078713          	mv	a4,a5
    1358:	fa442783          	lw	a5,-92(s0)
    135c:	00f777b3          	and	a5,a4,a5
    1360:	08078c63          	beqz	a5,13f8 <main+0x3e8>
        {
            for (ctx = 0; ctx < MULTITHREAD; ctx++)
    1364:	fe042023          	sw	zero,-32(s0)
    1368:	07c0006f          	j	13e4 <main+0x3d4>
                results[ctx].memblock[i + 1]
                    = (char *)(results[ctx].memblock[0]) + results[0].size * j;
    136c:	fe042703          	lw	a4,-32(s0)
    1370:	00070793          	mv	a5,a4
    1374:	00479793          	slli	a5,a5,0x4
    1378:	00e787b3          	add	a5,a5,a4
    137c:	00279793          	slli	a5,a5,0x2
    1380:	ff040713          	addi	a4,s0,-16
    1384:	00f707b3          	add	a5,a4,a5
    1388:	f9c7a483          	lw	s1,-100(a5)
    138c:	f9c42783          	lw	a5,-100(s0)
    1390:	fec45703          	lhu	a4,-20(s0)
    1394:	00070593          	mv	a1,a4
    1398:	00078513          	mv	a0,a5
    139c:	4bc050ef          	jal	ra,6858 <__mulsi3>
    13a0:	00050793          	mv	a5,a0
    13a4:	00078713          	mv	a4,a5
                results[ctx].memblock[i + 1]
    13a8:	fee45783          	lhu	a5,-18(s0)
    13ac:	00178613          	addi	a2,a5,1
                    = (char *)(results[ctx].memblock[0]) + results[0].size * j;
    13b0:	00e486b3          	add	a3,s1,a4
    13b4:	fe042703          	lw	a4,-32(s0)
    13b8:	00070793          	mv	a5,a4
    13bc:	00479793          	slli	a5,a5,0x4
    13c0:	00e787b3          	add	a5,a5,a4
    13c4:	00c787b3          	add	a5,a5,a2
    13c8:	00279793          	slli	a5,a5,0x2
    13cc:	ff040713          	addi	a4,s0,-16
    13d0:	00f707b3          	add	a5,a4,a5
    13d4:	f8d7ae23          	sw	a3,-100(a5)
            for (ctx = 0; ctx < MULTITHREAD; ctx++)
    13d8:	fe042783          	lw	a5,-32(s0)
    13dc:	00178793          	addi	a5,a5,1
    13e0:	fef42023          	sw	a5,-32(s0)
    13e4:	fe042783          	lw	a5,-32(s0)
    13e8:	f80782e3          	beqz	a5,136c <main+0x35c>
            j++;
    13ec:	fec45783          	lhu	a5,-20(s0)
    13f0:	00178793          	addi	a5,a5,1
    13f4:	fef41623          	sh	a5,-20(s0)
    for (i = 0; i < NUM_ALGORITHMS; i++)
    13f8:	fee45783          	lhu	a5,-18(s0)
    13fc:	00178793          	addi	a5,a5,1
    1400:	fef41723          	sh	a5,-18(s0)
    1404:	fee45703          	lhu	a4,-18(s0)
    1408:	00200793          	li	a5,2
    140c:	f2e7fee3          	bgeu	a5,a4,1348 <main+0x338>
        }
    }
    /* call inits */
    for (i = 0; i < MULTITHREAD; i++)
    1410:	fe041723          	sh	zero,-18(s0)
    1414:	1e80006f          	j	15fc <main+0x5ec>
    {
        if (results[i].execs & ID_LIST)
    1418:	fee45703          	lhu	a4,-18(s0)
    141c:	00070793          	mv	a5,a4
    1420:	00479793          	slli	a5,a5,0x4
    1424:	00e787b3          	add	a5,a5,a4
    1428:	00279793          	slli	a5,a5,0x2
    142c:	ff040713          	addi	a4,s0,-16
    1430:	00f707b3          	add	a5,a4,a5
    1434:	fb47a783          	lw	a5,-76(a5)
    1438:	0017f793          	andi	a5,a5,1
    143c:	06078c63          	beqz	a5,14b4 <main+0x4a4>
        {
            results[i].list = core_list_init(
    1440:	f9c42683          	lw	a3,-100(s0)
    1444:	fee45703          	lhu	a4,-18(s0)
                results[0].size, results[i].memblock[1], results[i].seed1);
    1448:	00070793          	mv	a5,a4
    144c:	00479793          	slli	a5,a5,0x4
    1450:	00e787b3          	add	a5,a5,a4
    1454:	00279793          	slli	a5,a5,0x2
    1458:	ff040713          	addi	a4,s0,-16
    145c:	00f707b3          	add	a5,a4,a5
    1460:	fa07a583          	lw	a1,-96(a5)
            results[i].list = core_list_init(
    1464:	fee45703          	lhu	a4,-18(s0)
    1468:	00070793          	mv	a5,a4
    146c:	00479793          	slli	a5,a5,0x4
    1470:	00e787b3          	add	a5,a5,a4
    1474:	00279793          	slli	a5,a5,0x2
    1478:	ff040713          	addi	a4,s0,-16
    147c:	00f707b3          	add	a5,a4,a5
    1480:	f9479783          	lh	a5,-108(a5)
    1484:	fee45483          	lhu	s1,-18(s0)
    1488:	00078613          	mv	a2,a5
    148c:	00068513          	mv	a0,a3
    1490:	ad8ff0ef          	jal	ra,768 <core_list_init>
    1494:	00050713          	mv	a4,a0
    1498:	00048793          	mv	a5,s1
    149c:	00479793          	slli	a5,a5,0x4
    14a0:	009787b3          	add	a5,a5,s1
    14a4:	00279793          	slli	a5,a5,0x2
    14a8:	ff040693          	addi	a3,s0,-16
    14ac:	00f687b3          	add	a5,a3,a5
    14b0:	fae7ac23          	sw	a4,-72(a5)
        }
        if (results[i].execs & ID_MATRIX)
    14b4:	fee45703          	lhu	a4,-18(s0)
    14b8:	00070793          	mv	a5,a4
    14bc:	00479793          	slli	a5,a5,0x4
    14c0:	00e787b3          	add	a5,a5,a4
    14c4:	00279793          	slli	a5,a5,0x2
    14c8:	ff040713          	addi	a4,s0,-16
    14cc:	00f707b3          	add	a5,a4,a5
    14d0:	fb47a783          	lw	a5,-76(a5)
    14d4:	0027f793          	andi	a5,a5,2
    14d8:	0a078063          	beqz	a5,1578 <main+0x568>
        {
            core_init_matrix(results[0].size,
    14dc:	f9c42503          	lw	a0,-100(s0)
    14e0:	fee45703          	lhu	a4,-18(s0)
    14e4:	00070793          	mv	a5,a4
    14e8:	00479793          	slli	a5,a5,0x4
    14ec:	00e787b3          	add	a5,a5,a4
    14f0:	00279793          	slli	a5,a5,0x2
    14f4:	ff040713          	addi	a4,s0,-16
    14f8:	00f707b3          	add	a5,a4,a5
    14fc:	fa47a583          	lw	a1,-92(a5)
                             results[i].memblock[2],
                             (ee_s32)results[i].seed1
    1500:	fee45703          	lhu	a4,-18(s0)
    1504:	00070793          	mv	a5,a4
    1508:	00479793          	slli	a5,a5,0x4
    150c:	00e787b3          	add	a5,a5,a4
    1510:	00279793          	slli	a5,a5,0x2
    1514:	ff040713          	addi	a4,s0,-16
    1518:	00f707b3          	add	a5,a4,a5
    151c:	f9479783          	lh	a5,-108(a5)
    1520:	00078693          	mv	a3,a5
                                 | (((ee_s32)results[i].seed2) << 16),
    1524:	fee45703          	lhu	a4,-18(s0)
    1528:	00070793          	mv	a5,a4
    152c:	00479793          	slli	a5,a5,0x4
    1530:	00e787b3          	add	a5,a5,a4
    1534:	00279793          	slli	a5,a5,0x2
    1538:	ff040713          	addi	a4,s0,-16
    153c:	00f707b3          	add	a5,a4,a5
    1540:	f9679783          	lh	a5,-106(a5)
    1544:	01079793          	slli	a5,a5,0x10
            core_init_matrix(results[0].size,
    1548:	00f6e633          	or	a2,a3,a5
                             &(results[i].mat));
    154c:	fee45703          	lhu	a4,-18(s0)
            core_init_matrix(results[0].size,
    1550:	f8440693          	addi	a3,s0,-124
    1554:	00070793          	mv	a5,a4
    1558:	00479793          	slli	a5,a5,0x4
    155c:	00e787b3          	add	a5,a5,a4
    1560:	00279793          	slli	a5,a5,0x2
    1564:	02078793          	addi	a5,a5,32
    1568:	00f687b3          	add	a5,a3,a5
    156c:	00878793          	addi	a5,a5,8
    1570:	00078693          	mv	a3,a5
    1574:	421000ef          	jal	ra,2194 <core_init_matrix>
        }
        if (results[i].execs & ID_STATE)
    1578:	fee45703          	lhu	a4,-18(s0)
    157c:	00070793          	mv	a5,a4
    1580:	00479793          	slli	a5,a5,0x4
    1584:	00e787b3          	add	a5,a5,a4
    1588:	00279793          	slli	a5,a5,0x2
    158c:	ff040713          	addi	a4,s0,-16
    1590:	00f707b3          	add	a5,a4,a5
    1594:	fb47a783          	lw	a5,-76(a5)
    1598:	0047f793          	andi	a5,a5,4
    159c:	04078a63          	beqz	a5,15f0 <main+0x5e0>
        {
            core_init_state(
    15a0:	f9c42683          	lw	a3,-100(s0)
    15a4:	fee45703          	lhu	a4,-18(s0)
    15a8:	00070793          	mv	a5,a4
    15ac:	00479793          	slli	a5,a5,0x4
    15b0:	00e787b3          	add	a5,a5,a4
    15b4:	00279793          	slli	a5,a5,0x2
    15b8:	ff040713          	addi	a4,s0,-16
    15bc:	00f707b3          	add	a5,a4,a5
    15c0:	f9479583          	lh	a1,-108(a5)
    15c4:	fee45703          	lhu	a4,-18(s0)
                results[0].size, results[i].seed1, results[i].memblock[3]);
    15c8:	00070793          	mv	a5,a4
    15cc:	00479793          	slli	a5,a5,0x4
    15d0:	00e787b3          	add	a5,a5,a4
    15d4:	00279793          	slli	a5,a5,0x2
    15d8:	ff040713          	addi	a4,s0,-16
    15dc:	00f707b3          	add	a5,a4,a5
    15e0:	fa87a783          	lw	a5,-88(a5)
            core_init_state(
    15e4:	00078613          	mv	a2,a5
    15e8:	00068513          	mv	a0,a3
    15ec:	1b1010ef          	jal	ra,2f9c <core_init_state>
    for (i = 0; i < MULTITHREAD; i++)
    15f0:	fee45783          	lhu	a5,-18(s0)
    15f4:	00178793          	addi	a5,a5,1
    15f8:	fef41723          	sh	a5,-18(s0)
    15fc:	fee45783          	lhu	a5,-18(s0)
    1600:	e0078ce3          	beqz	a5,1418 <main+0x408>
        }
    }

    /* automatically determine number of iterations if not set */
    if (results[0].iterations == 0)
    1604:	fa042783          	lw	a5,-96(s0)
    1608:	0a079063          	bnez	a5,16a8 <main+0x698>
    {
        secs_ret secs_passed = 0;
    160c:	fc042e23          	sw	zero,-36(s0)
        ee_u32   divisor;
        results[0].iterations = 1;
    1610:	00100793          	li	a5,1
    1614:	faf42023          	sw	a5,-96(s0)
        while (secs_passed < (secs_ret)1)
    1618:	0440006f          	j	165c <main+0x64c>
        {
            results[0].iterations *= 10;
    161c:	fa042703          	lw	a4,-96(s0)
    1620:	00070793          	mv	a5,a4
    1624:	00279793          	slli	a5,a5,0x2
    1628:	00e787b3          	add	a5,a5,a4
    162c:	00179793          	slli	a5,a5,0x1
    1630:	faf42023          	sw	a5,-96(s0)
            start_time();
    1634:	58c010ef          	jal	ra,2bc0 <start_time>
            iterate(&results[0]);
    1638:	f8440793          	addi	a5,s0,-124
    163c:	00078513          	mv	a0,a5
    1640:	8c1ff0ef          	jal	ra,f00 <iterate>
            stop_time();
    1644:	5ac010ef          	jal	ra,2bf0 <stop_time>
            secs_passed = time_in_secs(get_time());
    1648:	5d8010ef          	jal	ra,2c20 <get_time>
    164c:	00050793          	mv	a5,a0
    1650:	00078513          	mv	a0,a5
    1654:	5fc010ef          	jal	ra,2c50 <time_in_secs>
    1658:	fca42e23          	sw	a0,-36(s0)
        while (secs_passed < (secs_ret)1)
    165c:	fdc42783          	lw	a5,-36(s0)
    1660:	fa078ee3          	beqz	a5,161c <main+0x60c>
        }
        /* now we know it executes for at least 1 sec, set actual run time at
         * about 10 secs */
        divisor = (ee_u32)secs_passed;
    1664:	fdc42783          	lw	a5,-36(s0)
    1668:	fcf42c23          	sw	a5,-40(s0)
        if (divisor == 0) /* some machines cast float to int as 0 since this
    166c:	fd842783          	lw	a5,-40(s0)
    1670:	00079663          	bnez	a5,167c <main+0x66c>
                             conversion is not defined by ANSI, but we know at
                             least one second passed */
            divisor = 1;
    1674:	00100793          	li	a5,1
    1678:	fcf42c23          	sw	a5,-40(s0)
        results[0].iterations *= 1 + 10 / divisor;
    167c:	fa042483          	lw	s1,-96(s0)
    1680:	fd842583          	lw	a1,-40(s0)
    1684:	00a00513          	li	a0,10
    1688:	1fc050ef          	jal	ra,6884 <__udivsi3>
    168c:	00050793          	mv	a5,a0
    1690:	00178793          	addi	a5,a5,1
    1694:	00078593          	mv	a1,a5
    1698:	00048513          	mv	a0,s1
    169c:	1bc050ef          	jal	ra,6858 <__mulsi3>
    16a0:	00050793          	mv	a5,a0
    16a4:	faf42023          	sw	a5,-96(s0)
    }
    /* perform actual benchmark */
    start_time();
    16a8:	518010ef          	jal	ra,2bc0 <start_time>
    for (i = 0; i < default_num_contexts; i++)
    {
        core_stop_parallel(&results[i]);
    }
#else
    iterate(&results[0]);
    16ac:	f8440793          	addi	a5,s0,-124
    16b0:	00078513          	mv	a0,a5
    16b4:	84dff0ef          	jal	ra,f00 <iterate>
#endif
    stop_time();
    16b8:	538010ef          	jal	ra,2bf0 <stop_time>
    total_time = get_time();
    16bc:	564010ef          	jal	ra,2c20 <get_time>
    16c0:	fca42823          	sw	a0,-48(s0)
    /* get a function of the input to report */
    seedcrc = crc16(results[0].seed1, seedcrc);
    16c4:	f8441783          	lh	a5,-124(s0)
    16c8:	fd645703          	lhu	a4,-42(s0)
    16cc:	00070593          	mv	a1,a4
    16d0:	00078513          	mv	a0,a5
    16d4:	1c8020ef          	jal	ra,389c <crc16>
    16d8:	00050793          	mv	a5,a0
    16dc:	fcf41b23          	sh	a5,-42(s0)
    seedcrc = crc16(results[0].seed2, seedcrc);
    16e0:	f8641783          	lh	a5,-122(s0)
    16e4:	fd645703          	lhu	a4,-42(s0)
    16e8:	00070593          	mv	a1,a4
    16ec:	00078513          	mv	a0,a5
    16f0:	1ac020ef          	jal	ra,389c <crc16>
    16f4:	00050793          	mv	a5,a0
    16f8:	fcf41b23          	sh	a5,-42(s0)
    seedcrc = crc16(results[0].seed3, seedcrc);
    16fc:	f8841783          	lh	a5,-120(s0)
    1700:	fd645703          	lhu	a4,-42(s0)
    1704:	00070593          	mv	a1,a4
    1708:	00078513          	mv	a0,a5
    170c:	190020ef          	jal	ra,389c <crc16>
    1710:	00050793          	mv	a5,a0
    1714:	fcf41b23          	sh	a5,-42(s0)
    seedcrc = crc16(results[0].size, seedcrc);
    1718:	f9c42783          	lw	a5,-100(s0)
    171c:	01079793          	slli	a5,a5,0x10
    1720:	4107d793          	srai	a5,a5,0x10
    1724:	fd645703          	lhu	a4,-42(s0)
    1728:	00070593          	mv	a1,a4
    172c:	00078513          	mv	a0,a5
    1730:	16c020ef          	jal	ra,389c <crc16>
    1734:	00050793          	mv	a5,a0
    1738:	fcf41b23          	sh	a5,-42(s0)

    switch (seedcrc)
    173c:	fd645783          	lhu	a5,-42(s0)
    1740:	0000f737          	lui	a4,0xf
    1744:	9f570713          	addi	a4,a4,-1547 # e9f5 <__stack_top+0x34e5>
    1748:	0ae78063          	beq	a5,a4,17e8 <main+0x7d8>
    174c:	0000f737          	lui	a4,0xf
    1750:	9f570713          	addi	a4,a4,-1547 # e9f5 <__stack_top+0x34e5>
    1754:	0cf74263          	blt	a4,a5,1818 <main+0x808>
    1758:	00009737          	lui	a4,0x9
    175c:	a0270713          	addi	a4,a4,-1534 # 8a02 <__global_pointer$+0x242>
    1760:	04e78263          	beq	a5,a4,17a4 <main+0x794>
    1764:	00009737          	lui	a4,0x9
    1768:	a0270713          	addi	a4,a4,-1534 # 8a02 <__global_pointer$+0x242>
    176c:	0af74663          	blt	a4,a5,1818 <main+0x808>
    1770:	00008737          	lui	a4,0x8
    1774:	b0570713          	addi	a4,a4,-1275 # 7b05 <__subdf3+0xb89>
    1778:	04e78063          	beq	a5,a4,17b8 <main+0x7a8>
    177c:	00008737          	lui	a4,0x8
    1780:	b0570713          	addi	a4,a4,-1275 # 7b05 <__subdf3+0xb89>
    1784:	08f74a63          	blt	a4,a5,1818 <main+0x808>
    1788:	00002737          	lui	a4,0x2
    178c:	8f270713          	addi	a4,a4,-1806 # 18f2 <main+0x8e2>
    1790:	06e78863          	beq	a5,a4,1800 <main+0x7f0>
    1794:	00005737          	lui	a4,0x5
    1798:	eaf70713          	addi	a4,a4,-337 # 4eaf <ee_printf+0x2b>
    179c:	02e78a63          	beq	a5,a4,17d0 <main+0x7c0>
    17a0:	0780006f          	j	1818 <main+0x808>
    {                /* test known output for common seeds */
        case 0x8a02: /* seed1=0, seed2=0, seed3=0x66, size 2000 per algorithm */
            known_id = 0;
    17a4:	fe041423          	sh	zero,-24(s0)
            ee_printf("6k performance run parameters for coremark.\n");
    17a8:	000077b7          	lui	a5,0x7
    17ac:	78878513          	addi	a0,a5,1928 # 7788 <__subdf3+0x80c>
    17b0:	6d4030ef          	jal	ra,4e84 <ee_printf>
            break;
    17b4:	0700006f          	j	1824 <main+0x814>
        case 0x7b05: /*  seed1=0x3415, seed2=0x3415, seed3=0x66, size 2000 per
                        algorithm */
            known_id = 1;
    17b8:	00100793          	li	a5,1
    17bc:	fef41423          	sh	a5,-24(s0)
            ee_printf("6k validation run parameters for coremark.\n");
    17c0:	000077b7          	lui	a5,0x7
    17c4:	7b878513          	addi	a0,a5,1976 # 77b8 <__subdf3+0x83c>
    17c8:	6bc030ef          	jal	ra,4e84 <ee_printf>
            break;
    17cc:	0580006f          	j	1824 <main+0x814>
        case 0x4eaf: /* seed1=0x8, seed2=0x8, seed3=0x8, size 400 per algorithm
                      */
            known_id = 2;
    17d0:	00200793          	li	a5,2
    17d4:	fef41423          	sh	a5,-24(s0)
            ee_printf("Profile generation run parameters for coremark.\n");
    17d8:	000077b7          	lui	a5,0x7
    17dc:	7e478513          	addi	a0,a5,2020 # 77e4 <__subdf3+0x868>
    17e0:	6a4030ef          	jal	ra,4e84 <ee_printf>
            break;
    17e4:	0400006f          	j	1824 <main+0x814>
        case 0xe9f5: /* seed1=0, seed2=0, seed3=0x66, size 666 per algorithm */
            known_id = 3;
    17e8:	00300793          	li	a5,3
    17ec:	fef41423          	sh	a5,-24(s0)
            ee_printf("2K performance run parameters for coremark.\n");
    17f0:	000087b7          	lui	a5,0x8
    17f4:	81878513          	addi	a0,a5,-2024 # 7818 <__subdf3+0x89c>
    17f8:	68c030ef          	jal	ra,4e84 <ee_printf>
            break;
    17fc:	0280006f          	j	1824 <main+0x814>
        case 0x18f2: /*  seed1=0x3415, seed2=0x3415, seed3=0x66, size 666 per
                        algorithm */
            known_id = 4;
    1800:	00400793          	li	a5,4
    1804:	fef41423          	sh	a5,-24(s0)
            ee_printf("2K validation run parameters for coremark.\n");
    1808:	000087b7          	lui	a5,0x8
    180c:	84878513          	addi	a0,a5,-1976 # 7848 <__subdf3+0x8cc>
    1810:	674030ef          	jal	ra,4e84 <ee_printf>
            break;
    1814:	0100006f          	j	1824 <main+0x814>
        default:
            total_errors = -1;
    1818:	fff00793          	li	a5,-1
    181c:	fef41323          	sh	a5,-26(s0)
            break;
    1820:	00000013          	nop
    }
    if (known_id >= 0)
    1824:	fe841783          	lh	a5,-24(s0)
    1828:	3807c863          	bltz	a5,1bb8 <main+0xba8>
    {
        for (i = 0; i < default_num_contexts; i++)
    182c:	fe041723          	sh	zero,-18(s0)
    1830:	3780006f          	j	1ba8 <main+0xb98>
        {
            results[i].err = 0;
    1834:	fee45703          	lhu	a4,-18(s0)
    1838:	00070793          	mv	a5,a4
    183c:	00479793          	slli	a5,a5,0x4
    1840:	00e787b3          	add	a5,a5,a4
    1844:	00279793          	slli	a5,a5,0x2
    1848:	ff040713          	addi	a4,s0,-16
    184c:	00f707b3          	add	a5,a4,a5
    1850:	fc079a23          	sh	zero,-44(a5)
            if ((results[i].execs & ID_LIST)
    1854:	fee45703          	lhu	a4,-18(s0)
    1858:	00070793          	mv	a5,a4
    185c:	00479793          	slli	a5,a5,0x4
    1860:	00e787b3          	add	a5,a5,a4
    1864:	00279793          	slli	a5,a5,0x2
    1868:	ff040713          	addi	a4,s0,-16
    186c:	00f707b3          	add	a5,a4,a5
    1870:	fb47a783          	lw	a5,-76(a5)
    1874:	0017f793          	andi	a5,a5,1
    1878:	0e078063          	beqz	a5,1958 <main+0x948>
                && (results[i].crclist != list_known_crc[known_id]))
    187c:	fee45703          	lhu	a4,-18(s0)
    1880:	00070793          	mv	a5,a4
    1884:	00479793          	slli	a5,a5,0x4
    1888:	00e787b3          	add	a5,a5,a4
    188c:	00279793          	slli	a5,a5,0x2
    1890:	ff040713          	addi	a4,s0,-16
    1894:	00f707b3          	add	a5,a4,a5
    1898:	fce7d703          	lhu	a4,-50(a5)
    189c:	fe841783          	lh	a5,-24(s0)
    18a0:	82018693          	addi	a3,gp,-2016 # 7fe0 <list_known_crc>
    18a4:	00179793          	slli	a5,a5,0x1
    18a8:	00f687b3          	add	a5,a3,a5
    18ac:	0007d783          	lhu	a5,0(a5)
    18b0:	0af70463          	beq	a4,a5,1958 <main+0x948>
            {
                ee_printf("[%u]ERROR! list crc 0x%04x - should be 0x%04x\n",
    18b4:	fee45583          	lhu	a1,-18(s0)
                          i,
                          results[i].crclist,
    18b8:	fee45703          	lhu	a4,-18(s0)
    18bc:	00070793          	mv	a5,a4
    18c0:	00479793          	slli	a5,a5,0x4
    18c4:	00e787b3          	add	a5,a5,a4
    18c8:	00279793          	slli	a5,a5,0x2
    18cc:	ff040713          	addi	a4,s0,-16
    18d0:	00f707b3          	add	a5,a4,a5
    18d4:	fce7d783          	lhu	a5,-50(a5)
                ee_printf("[%u]ERROR! list crc 0x%04x - should be 0x%04x\n",
    18d8:	00078613          	mv	a2,a5
                          list_known_crc[known_id]);
    18dc:	fe841783          	lh	a5,-24(s0)
    18e0:	82018713          	addi	a4,gp,-2016 # 7fe0 <list_known_crc>
    18e4:	00179793          	slli	a5,a5,0x1
    18e8:	00f707b3          	add	a5,a4,a5
    18ec:	0007d783          	lhu	a5,0(a5)
                ee_printf("[%u]ERROR! list crc 0x%04x - should be 0x%04x\n",
    18f0:	00078693          	mv	a3,a5
    18f4:	000087b7          	lui	a5,0x8
    18f8:	87478513          	addi	a0,a5,-1932 # 7874 <__subdf3+0x8f8>
    18fc:	588030ef          	jal	ra,4e84 <ee_printf>
                results[i].err++;
    1900:	fee45703          	lhu	a4,-18(s0)
    1904:	00070793          	mv	a5,a4
    1908:	00479793          	slli	a5,a5,0x4
    190c:	00e787b3          	add	a5,a5,a4
    1910:	00279793          	slli	a5,a5,0x2
    1914:	ff040693          	addi	a3,s0,-16
    1918:	00f687b3          	add	a5,a3,a5
    191c:	fd479783          	lh	a5,-44(a5)
    1920:	01079793          	slli	a5,a5,0x10
    1924:	0107d793          	srli	a5,a5,0x10
    1928:	00178793          	addi	a5,a5,1
    192c:	01079793          	slli	a5,a5,0x10
    1930:	0107d793          	srli	a5,a5,0x10
    1934:	01079693          	slli	a3,a5,0x10
    1938:	4106d693          	srai	a3,a3,0x10
    193c:	00070793          	mv	a5,a4
    1940:	00479793          	slli	a5,a5,0x4
    1944:	00e787b3          	add	a5,a5,a4
    1948:	00279793          	slli	a5,a5,0x2
    194c:	ff040713          	addi	a4,s0,-16
    1950:	00f707b3          	add	a5,a4,a5
    1954:	fcd79a23          	sh	a3,-44(a5)
            }
            if ((results[i].execs & ID_MATRIX)
    1958:	fee45703          	lhu	a4,-18(s0)
    195c:	00070793          	mv	a5,a4
    1960:	00479793          	slli	a5,a5,0x4
    1964:	00e787b3          	add	a5,a5,a4
    1968:	00279793          	slli	a5,a5,0x2
    196c:	ff040713          	addi	a4,s0,-16
    1970:	00f707b3          	add	a5,a4,a5
    1974:	fb47a783          	lw	a5,-76(a5)
    1978:	0027f793          	andi	a5,a5,2
    197c:	0e078063          	beqz	a5,1a5c <main+0xa4c>
                && (results[i].crcmatrix != matrix_known_crc[known_id]))
    1980:	fee45703          	lhu	a4,-18(s0)
    1984:	00070793          	mv	a5,a4
    1988:	00479793          	slli	a5,a5,0x4
    198c:	00e787b3          	add	a5,a5,a4
    1990:	00279793          	slli	a5,a5,0x2
    1994:	ff040713          	addi	a4,s0,-16
    1998:	00f707b3          	add	a5,a4,a5
    199c:	fd07d703          	lhu	a4,-48(a5)
    19a0:	fe841783          	lh	a5,-24(s0)
    19a4:	82c18693          	addi	a3,gp,-2004 # 7fec <matrix_known_crc>
    19a8:	00179793          	slli	a5,a5,0x1
    19ac:	00f687b3          	add	a5,a3,a5
    19b0:	0007d783          	lhu	a5,0(a5)
    19b4:	0af70463          	beq	a4,a5,1a5c <main+0xa4c>
            {
                ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n",
    19b8:	fee45583          	lhu	a1,-18(s0)
                          i,
                          results[i].crcmatrix,
    19bc:	fee45703          	lhu	a4,-18(s0)
    19c0:	00070793          	mv	a5,a4
    19c4:	00479793          	slli	a5,a5,0x4
    19c8:	00e787b3          	add	a5,a5,a4
    19cc:	00279793          	slli	a5,a5,0x2
    19d0:	ff040713          	addi	a4,s0,-16
    19d4:	00f707b3          	add	a5,a4,a5
    19d8:	fd07d783          	lhu	a5,-48(a5)
                ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n",
    19dc:	00078613          	mv	a2,a5
                          matrix_known_crc[known_id]);
    19e0:	fe841783          	lh	a5,-24(s0)
    19e4:	82c18713          	addi	a4,gp,-2004 # 7fec <matrix_known_crc>
    19e8:	00179793          	slli	a5,a5,0x1
    19ec:	00f707b3          	add	a5,a4,a5
    19f0:	0007d783          	lhu	a5,0(a5)
                ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n",
    19f4:	00078693          	mv	a3,a5
    19f8:	000087b7          	lui	a5,0x8
    19fc:	8a478513          	addi	a0,a5,-1884 # 78a4 <__subdf3+0x928>
    1a00:	484030ef          	jal	ra,4e84 <ee_printf>
                results[i].err++;
    1a04:	fee45703          	lhu	a4,-18(s0)
    1a08:	00070793          	mv	a5,a4
    1a0c:	00479793          	slli	a5,a5,0x4
    1a10:	00e787b3          	add	a5,a5,a4
    1a14:	00279793          	slli	a5,a5,0x2
    1a18:	ff040693          	addi	a3,s0,-16
    1a1c:	00f687b3          	add	a5,a3,a5
    1a20:	fd479783          	lh	a5,-44(a5)
    1a24:	01079793          	slli	a5,a5,0x10
    1a28:	0107d793          	srli	a5,a5,0x10
    1a2c:	00178793          	addi	a5,a5,1
    1a30:	01079793          	slli	a5,a5,0x10
    1a34:	0107d793          	srli	a5,a5,0x10
    1a38:	01079693          	slli	a3,a5,0x10
    1a3c:	4106d693          	srai	a3,a3,0x10
    1a40:	00070793          	mv	a5,a4
    1a44:	00479793          	slli	a5,a5,0x4
    1a48:	00e787b3          	add	a5,a5,a4
    1a4c:	00279793          	slli	a5,a5,0x2
    1a50:	ff040713          	addi	a4,s0,-16
    1a54:	00f707b3          	add	a5,a4,a5
    1a58:	fcd79a23          	sh	a3,-44(a5)
            }
            if ((results[i].execs & ID_STATE)
    1a5c:	fee45703          	lhu	a4,-18(s0)
    1a60:	00070793          	mv	a5,a4
    1a64:	00479793          	slli	a5,a5,0x4
    1a68:	00e787b3          	add	a5,a5,a4
    1a6c:	00279793          	slli	a5,a5,0x2
    1a70:	ff040713          	addi	a4,s0,-16
    1a74:	00f707b3          	add	a5,a4,a5
    1a78:	fb47a783          	lw	a5,-76(a5)
    1a7c:	0047f793          	andi	a5,a5,4
    1a80:	0e078063          	beqz	a5,1b60 <main+0xb50>
                && (results[i].crcstate != state_known_crc[known_id]))
    1a84:	fee45703          	lhu	a4,-18(s0)
    1a88:	00070793          	mv	a5,a4
    1a8c:	00479793          	slli	a5,a5,0x4
    1a90:	00e787b3          	add	a5,a5,a4
    1a94:	00279793          	slli	a5,a5,0x2
    1a98:	ff040713          	addi	a4,s0,-16
    1a9c:	00f707b3          	add	a5,a4,a5
    1aa0:	fd27d703          	lhu	a4,-46(a5)
    1aa4:	fe841783          	lh	a5,-24(s0)
    1aa8:	83818693          	addi	a3,gp,-1992 # 7ff8 <state_known_crc>
    1aac:	00179793          	slli	a5,a5,0x1
    1ab0:	00f687b3          	add	a5,a3,a5
    1ab4:	0007d783          	lhu	a5,0(a5)
    1ab8:	0af70463          	beq	a4,a5,1b60 <main+0xb50>
            {
                ee_printf("[%u]ERROR! state crc 0x%04x - should be 0x%04x\n",
    1abc:	fee45583          	lhu	a1,-18(s0)
                          i,
                          results[i].crcstate,
    1ac0:	fee45703          	lhu	a4,-18(s0)
    1ac4:	00070793          	mv	a5,a4
    1ac8:	00479793          	slli	a5,a5,0x4
    1acc:	00e787b3          	add	a5,a5,a4
    1ad0:	00279793          	slli	a5,a5,0x2
    1ad4:	ff040713          	addi	a4,s0,-16
    1ad8:	00f707b3          	add	a5,a4,a5
    1adc:	fd27d783          	lhu	a5,-46(a5)
                ee_printf("[%u]ERROR! state crc 0x%04x - should be 0x%04x\n",
    1ae0:	00078613          	mv	a2,a5
                          state_known_crc[known_id]);
    1ae4:	fe841783          	lh	a5,-24(s0)
    1ae8:	83818713          	addi	a4,gp,-1992 # 7ff8 <state_known_crc>
    1aec:	00179793          	slli	a5,a5,0x1
    1af0:	00f707b3          	add	a5,a4,a5
    1af4:	0007d783          	lhu	a5,0(a5)
                ee_printf("[%u]ERROR! state crc 0x%04x - should be 0x%04x\n",
    1af8:	00078693          	mv	a3,a5
    1afc:	000087b7          	lui	a5,0x8
    1b00:	8d878513          	addi	a0,a5,-1832 # 78d8 <__subdf3+0x95c>
    1b04:	380030ef          	jal	ra,4e84 <ee_printf>
                results[i].err++;
    1b08:	fee45703          	lhu	a4,-18(s0)
    1b0c:	00070793          	mv	a5,a4
    1b10:	00479793          	slli	a5,a5,0x4
    1b14:	00e787b3          	add	a5,a5,a4
    1b18:	00279793          	slli	a5,a5,0x2
    1b1c:	ff040693          	addi	a3,s0,-16
    1b20:	00f687b3          	add	a5,a3,a5
    1b24:	fd479783          	lh	a5,-44(a5)
    1b28:	01079793          	slli	a5,a5,0x10
    1b2c:	0107d793          	srli	a5,a5,0x10
    1b30:	00178793          	addi	a5,a5,1
    1b34:	01079793          	slli	a5,a5,0x10
    1b38:	0107d793          	srli	a5,a5,0x10
    1b3c:	01079693          	slli	a3,a5,0x10
    1b40:	4106d693          	srai	a3,a3,0x10
    1b44:	00070793          	mv	a5,a4
    1b48:	00479793          	slli	a5,a5,0x4
    1b4c:	00e787b3          	add	a5,a5,a4
    1b50:	00279793          	slli	a5,a5,0x2
    1b54:	ff040713          	addi	a4,s0,-16
    1b58:	00f707b3          	add	a5,a4,a5
    1b5c:	fcd79a23          	sh	a3,-44(a5)
            }
            total_errors += results[i].err;
    1b60:	fee45703          	lhu	a4,-18(s0)
    1b64:	00070793          	mv	a5,a4
    1b68:	00479793          	slli	a5,a5,0x4
    1b6c:	00e787b3          	add	a5,a5,a4
    1b70:	00279793          	slli	a5,a5,0x2
    1b74:	ff040713          	addi	a4,s0,-16
    1b78:	00f707b3          	add	a5,a4,a5
    1b7c:	fd479783          	lh	a5,-44(a5)
    1b80:	01079713          	slli	a4,a5,0x10
    1b84:	01075713          	srli	a4,a4,0x10
    1b88:	fe645783          	lhu	a5,-26(s0)
    1b8c:	00f707b3          	add	a5,a4,a5
    1b90:	01079793          	slli	a5,a5,0x10
    1b94:	0107d793          	srli	a5,a5,0x10
    1b98:	fef41323          	sh	a5,-26(s0)
        for (i = 0; i < default_num_contexts; i++)
    1b9c:	fee45783          	lhu	a5,-18(s0)
    1ba0:	00178793          	addi	a5,a5,1
    1ba4:	fef41723          	sh	a5,-18(s0)
    1ba8:	fee45703          	lhu	a4,-18(s0)
    1bac:	000087b7          	lui	a5,0x8
    1bb0:	fcc7a783          	lw	a5,-52(a5) # 7fcc <default_num_contexts>
    1bb4:	c8f760e3          	bltu	a4,a5,1834 <main+0x824>
        }
    }
    total_errors += check_data_types();
    1bb8:	535010ef          	jal	ra,38ec <check_data_types>
    1bbc:	00050793          	mv	a5,a0
    1bc0:	01079713          	slli	a4,a5,0x10
    1bc4:	01075713          	srli	a4,a4,0x10
    1bc8:	fe645783          	lhu	a5,-26(s0)
    1bcc:	00f707b3          	add	a5,a4,a5
    1bd0:	01079793          	slli	a5,a5,0x10
    1bd4:	0107d793          	srli	a5,a5,0x10
    1bd8:	fef41323          	sh	a5,-26(s0)
    /* and report results */
    ee_printf("CoreMark Size    : %lu\n", (long unsigned)results[0].size);
    1bdc:	f9c42783          	lw	a5,-100(s0)
    1be0:	00078593          	mv	a1,a5
    1be4:	000087b7          	lui	a5,0x8
    1be8:	90878513          	addi	a0,a5,-1784 # 7908 <__subdf3+0x98c>
    1bec:	298030ef          	jal	ra,4e84 <ee_printf>
    ee_printf("Total ticks      : %lu\n", (long unsigned)total_time);
    1bf0:	fd042583          	lw	a1,-48(s0)
    1bf4:	000087b7          	lui	a5,0x8
    1bf8:	92078513          	addi	a0,a5,-1760 # 7920 <__subdf3+0x9a4>
    1bfc:	288030ef          	jal	ra,4e84 <ee_printf>
    if (time_in_secs(total_time) > 0)
        ee_printf("Iterations/Sec   : %f\n",
                  default_num_contexts * results[0].iterations
                      / time_in_secs(total_time));
#else
    ee_printf("Total time (secs): %d\n", time_in_secs(total_time));
    1c00:	fd042503          	lw	a0,-48(s0)
    1c04:	04c010ef          	jal	ra,2c50 <time_in_secs>
    1c08:	00050793          	mv	a5,a0
    1c0c:	00078593          	mv	a1,a5
    1c10:	000087b7          	lui	a5,0x8
    1c14:	93878513          	addi	a0,a5,-1736 # 7938 <__subdf3+0x9bc>
    1c18:	26c030ef          	jal	ra,4e84 <ee_printf>
    if (time_in_secs(total_time) > 0)
    1c1c:	fd042503          	lw	a0,-48(s0)
    1c20:	030010ef          	jal	ra,2c50 <time_in_secs>
    1c24:	00050793          	mv	a5,a0
    1c28:	04078863          	beqz	a5,1c78 <main+0xc68>
        ee_printf("Iterations/Sec   : %d\n",
                  default_num_contexts * results[0].iterations
    1c2c:	fa042703          	lw	a4,-96(s0)
    1c30:	000087b7          	lui	a5,0x8
    1c34:	fcc7a783          	lw	a5,-52(a5) # 7fcc <default_num_contexts>
    1c38:	00078593          	mv	a1,a5
    1c3c:	00070513          	mv	a0,a4
    1c40:	419040ef          	jal	ra,6858 <__mulsi3>
    1c44:	00050793          	mv	a5,a0
    1c48:	00078493          	mv	s1,a5
                      / time_in_secs(total_time));
    1c4c:	fd042503          	lw	a0,-48(s0)
    1c50:	000010ef          	jal	ra,2c50 <time_in_secs>
    1c54:	00050793          	mv	a5,a0
        ee_printf("Iterations/Sec   : %d\n",
    1c58:	00078593          	mv	a1,a5
    1c5c:	00048513          	mv	a0,s1
    1c60:	425040ef          	jal	ra,6884 <__udivsi3>
    1c64:	00050793          	mv	a5,a0
    1c68:	00078593          	mv	a1,a5
    1c6c:	000087b7          	lui	a5,0x8
    1c70:	95078513          	addi	a0,a5,-1712 # 7950 <__subdf3+0x9d4>
    1c74:	210030ef          	jal	ra,4e84 <ee_printf>
#endif
    if (time_in_secs(total_time) < 10)
    1c78:	fd042503          	lw	a0,-48(s0)
    1c7c:	7d5000ef          	jal	ra,2c50 <time_in_secs>
    1c80:	00050713          	mv	a4,a0
    1c84:	00900793          	li	a5,9
    1c88:	02e7e663          	bltu	a5,a4,1cb4 <main+0xca4>
    {
        ee_printf(
    1c8c:	000087b7          	lui	a5,0x8
    1c90:	96878513          	addi	a0,a5,-1688 # 7968 <__subdf3+0x9ec>
    1c94:	1f0030ef          	jal	ra,4e84 <ee_printf>
            "ERROR! Must execute for at least 10 secs for a valid result!\n");
        total_errors++;
    1c98:	fe641783          	lh	a5,-26(s0)
    1c9c:	01079793          	slli	a5,a5,0x10
    1ca0:	0107d793          	srli	a5,a5,0x10
    1ca4:	00178793          	addi	a5,a5,1
    1ca8:	01079793          	slli	a5,a5,0x10
    1cac:	0107d793          	srli	a5,a5,0x10
    1cb0:	fef41323          	sh	a5,-26(s0)
    }

    ee_printf("Iterations       : %lu\n",
              (long unsigned)default_num_contexts * results[0].iterations);
    1cb4:	fa042703          	lw	a4,-96(s0)
    1cb8:	000087b7          	lui	a5,0x8
    1cbc:	fcc7a783          	lw	a5,-52(a5) # 7fcc <default_num_contexts>
    ee_printf("Iterations       : %lu\n",
    1cc0:	00078593          	mv	a1,a5
    1cc4:	00070513          	mv	a0,a4
    1cc8:	391040ef          	jal	ra,6858 <__mulsi3>
    1ccc:	00050793          	mv	a5,a0
    1cd0:	00078593          	mv	a1,a5
    1cd4:	000087b7          	lui	a5,0x8
    1cd8:	9a878513          	addi	a0,a5,-1624 # 79a8 <__subdf3+0xa2c>
    1cdc:	1a8030ef          	jal	ra,4e84 <ee_printf>
    ee_printf("Compiler version : %s\n", COMPILER_VERSION);
    1ce0:	000087b7          	lui	a5,0x8
    1ce4:	9c078593          	addi	a1,a5,-1600 # 79c0 <__subdf3+0xa44>
    1ce8:	000087b7          	lui	a5,0x8
    1cec:	9cc78513          	addi	a0,a5,-1588 # 79cc <__subdf3+0xa50>
    1cf0:	194030ef          	jal	ra,4e84 <ee_printf>
    ee_printf("Compiler flags   : %s\n", COMPILER_FLAGS);
    1cf4:	000087b7          	lui	a5,0x8
    1cf8:	9e478593          	addi	a1,a5,-1564 # 79e4 <__subdf3+0xa68>
    1cfc:	000087b7          	lui	a5,0x8
    1d00:	9f478513          	addi	a0,a5,-1548 # 79f4 <__subdf3+0xa78>
    1d04:	180030ef          	jal	ra,4e84 <ee_printf>
#if (MULTITHREAD > 1)
    ee_printf("Parallel %s : %d\n", PARALLEL_METHOD, default_num_contexts);
#endif
    ee_printf("Memory location  : %s\n", MEM_LOCATION);
    1d08:	000087b7          	lui	a5,0x8
    1d0c:	a0c78593          	addi	a1,a5,-1524 # 7a0c <__subdf3+0xa90>
    1d10:	000087b7          	lui	a5,0x8
    1d14:	a1478513          	addi	a0,a5,-1516 # 7a14 <__subdf3+0xa98>
    1d18:	16c030ef          	jal	ra,4e84 <ee_printf>
    /* output for verification */
    ee_printf("seedcrc          : 0x%04x\n", seedcrc);
    1d1c:	fd645783          	lhu	a5,-42(s0)
    1d20:	00078593          	mv	a1,a5
    1d24:	000087b7          	lui	a5,0x8
    1d28:	a2c78513          	addi	a0,a5,-1492 # 7a2c <__subdf3+0xab0>
    1d2c:	158030ef          	jal	ra,4e84 <ee_printf>
    if (results[0].execs & ID_LIST)
    1d30:	fa442783          	lw	a5,-92(s0)
    1d34:	0017f793          	andi	a5,a5,1
    1d38:	06078063          	beqz	a5,1d98 <main+0xd88>
        for (i = 0; i < default_num_contexts; i++)
    1d3c:	fe041723          	sh	zero,-18(s0)
    1d40:	0480006f          	j	1d88 <main+0xd78>
            ee_printf("[%d]crclist       : 0x%04x\n", i, results[i].crclist);
    1d44:	fee45683          	lhu	a3,-18(s0)
    1d48:	fee45703          	lhu	a4,-18(s0)
    1d4c:	00070793          	mv	a5,a4
    1d50:	00479793          	slli	a5,a5,0x4
    1d54:	00e787b3          	add	a5,a5,a4
    1d58:	00279793          	slli	a5,a5,0x2
    1d5c:	ff040713          	addi	a4,s0,-16
    1d60:	00f707b3          	add	a5,a4,a5
    1d64:	fce7d783          	lhu	a5,-50(a5)
    1d68:	00078613          	mv	a2,a5
    1d6c:	00068593          	mv	a1,a3
    1d70:	000087b7          	lui	a5,0x8
    1d74:	a4878513          	addi	a0,a5,-1464 # 7a48 <__subdf3+0xacc>
    1d78:	10c030ef          	jal	ra,4e84 <ee_printf>
        for (i = 0; i < default_num_contexts; i++)
    1d7c:	fee45783          	lhu	a5,-18(s0)
    1d80:	00178793          	addi	a5,a5,1
    1d84:	fef41723          	sh	a5,-18(s0)
    1d88:	fee45703          	lhu	a4,-18(s0)
    1d8c:	000087b7          	lui	a5,0x8
    1d90:	fcc7a783          	lw	a5,-52(a5) # 7fcc <default_num_contexts>
    1d94:	faf768e3          	bltu	a4,a5,1d44 <main+0xd34>
    if (results[0].execs & ID_MATRIX)
    1d98:	fa442783          	lw	a5,-92(s0)
    1d9c:	0027f793          	andi	a5,a5,2
    1da0:	06078063          	beqz	a5,1e00 <main+0xdf0>
        for (i = 0; i < default_num_contexts; i++)
    1da4:	fe041723          	sh	zero,-18(s0)
    1da8:	0480006f          	j	1df0 <main+0xde0>
            ee_printf("[%d]crcmatrix     : 0x%04x\n", i, results[i].crcmatrix);
    1dac:	fee45683          	lhu	a3,-18(s0)
    1db0:	fee45703          	lhu	a4,-18(s0)
    1db4:	00070793          	mv	a5,a4
    1db8:	00479793          	slli	a5,a5,0x4
    1dbc:	00e787b3          	add	a5,a5,a4
    1dc0:	00279793          	slli	a5,a5,0x2
    1dc4:	ff040713          	addi	a4,s0,-16
    1dc8:	00f707b3          	add	a5,a4,a5
    1dcc:	fd07d783          	lhu	a5,-48(a5)
    1dd0:	00078613          	mv	a2,a5
    1dd4:	00068593          	mv	a1,a3
    1dd8:	000087b7          	lui	a5,0x8
    1ddc:	a6478513          	addi	a0,a5,-1436 # 7a64 <__subdf3+0xae8>
    1de0:	0a4030ef          	jal	ra,4e84 <ee_printf>
        for (i = 0; i < default_num_contexts; i++)
    1de4:	fee45783          	lhu	a5,-18(s0)
    1de8:	00178793          	addi	a5,a5,1
    1dec:	fef41723          	sh	a5,-18(s0)
    1df0:	fee45703          	lhu	a4,-18(s0)
    1df4:	000087b7          	lui	a5,0x8
    1df8:	fcc7a783          	lw	a5,-52(a5) # 7fcc <default_num_contexts>
    1dfc:	faf768e3          	bltu	a4,a5,1dac <main+0xd9c>
    if (results[0].execs & ID_STATE)
    1e00:	fa442783          	lw	a5,-92(s0)
    1e04:	0047f793          	andi	a5,a5,4
    1e08:	06078063          	beqz	a5,1e68 <main+0xe58>
        for (i = 0; i < default_num_contexts; i++)
    1e0c:	fe041723          	sh	zero,-18(s0)
    1e10:	0480006f          	j	1e58 <main+0xe48>
            ee_printf("[%d]crcstate      : 0x%04x\n", i, results[i].crcstate);
    1e14:	fee45683          	lhu	a3,-18(s0)
    1e18:	fee45703          	lhu	a4,-18(s0)
    1e1c:	00070793          	mv	a5,a4
    1e20:	00479793          	slli	a5,a5,0x4
    1e24:	00e787b3          	add	a5,a5,a4
    1e28:	00279793          	slli	a5,a5,0x2
    1e2c:	ff040713          	addi	a4,s0,-16
    1e30:	00f707b3          	add	a5,a4,a5
    1e34:	fd27d783          	lhu	a5,-46(a5)
    1e38:	00078613          	mv	a2,a5
    1e3c:	00068593          	mv	a1,a3
    1e40:	000087b7          	lui	a5,0x8
    1e44:	a8078513          	addi	a0,a5,-1408 # 7a80 <__subdf3+0xb04>
    1e48:	03c030ef          	jal	ra,4e84 <ee_printf>
        for (i = 0; i < default_num_contexts; i++)
    1e4c:	fee45783          	lhu	a5,-18(s0)
    1e50:	00178793          	addi	a5,a5,1
    1e54:	fef41723          	sh	a5,-18(s0)
    1e58:	fee45703          	lhu	a4,-18(s0)
    1e5c:	000087b7          	lui	a5,0x8
    1e60:	fcc7a783          	lw	a5,-52(a5) # 7fcc <default_num_contexts>
    1e64:	faf768e3          	bltu	a4,a5,1e14 <main+0xe04>
    for (i = 0; i < default_num_contexts; i++)
    1e68:	fe041723          	sh	zero,-18(s0)
    1e6c:	0480006f          	j	1eb4 <main+0xea4>
        ee_printf("[%d]crcfinal      : 0x%04x\n", i, results[i].crc);
    1e70:	fee45683          	lhu	a3,-18(s0)
    1e74:	fee45703          	lhu	a4,-18(s0)
    1e78:	00070793          	mv	a5,a4
    1e7c:	00479793          	slli	a5,a5,0x4
    1e80:	00e787b3          	add	a5,a5,a4
    1e84:	00279793          	slli	a5,a5,0x2
    1e88:	ff040713          	addi	a4,s0,-16
    1e8c:	00f707b3          	add	a5,a4,a5
    1e90:	fcc7d783          	lhu	a5,-52(a5)
    1e94:	00078613          	mv	a2,a5
    1e98:	00068593          	mv	a1,a3
    1e9c:	000087b7          	lui	a5,0x8
    1ea0:	a9c78513          	addi	a0,a5,-1380 # 7a9c <__subdf3+0xb20>
    1ea4:	7e1020ef          	jal	ra,4e84 <ee_printf>
    for (i = 0; i < default_num_contexts; i++)
    1ea8:	fee45783          	lhu	a5,-18(s0)
    1eac:	00178793          	addi	a5,a5,1
    1eb0:	fef41723          	sh	a5,-18(s0)
    1eb4:	fee45703          	lhu	a4,-18(s0)
    1eb8:	000087b7          	lui	a5,0x8
    1ebc:	fcc7a783          	lw	a5,-52(a5) # 7fcc <default_num_contexts>
    1ec0:	faf768e3          	bltu	a4,a5,1e70 <main+0xe60>
    if (total_errors == 0)
    1ec4:	fe641783          	lh	a5,-26(s0)
    1ec8:	00079863          	bnez	a5,1ed8 <main+0xec8>
    {
        ee_printf(
    1ecc:	000087b7          	lui	a5,0x8
    1ed0:	ab878513          	addi	a0,a5,-1352 # 7ab8 <__subdf3+0xb3c>
    1ed4:	7b1020ef          	jal	ra,4e84 <ee_printf>
#endif
            ee_printf("\n");
        }
#endif
    }
    if (total_errors > 0)
    1ed8:	fe641783          	lh	a5,-26(s0)
    1edc:	00f05863          	blez	a5,1eec <main+0xedc>
        ee_printf("Errors detected\n");
    1ee0:	000087b7          	lui	a5,0x8
    1ee4:	b0478513          	addi	a0,a5,-1276 # 7b04 <__subdf3+0xb88>
    1ee8:	79d020ef          	jal	ra,4e84 <ee_printf>
    if (total_errors < 0)
    1eec:	fe641783          	lh	a5,-26(s0)
    1ef0:	0007d863          	bgez	a5,1f00 <main+0xef0>
        ee_printf(
    1ef4:	000087b7          	lui	a5,0x8
    1ef8:	b1878513          	addi	a0,a5,-1256 # 7b18 <__subdf3+0xb9c>
    1efc:	789020ef          	jal	ra,4e84 <ee_printf>
#if (MEM_METHOD == MEM_MALLOC)
    for (i = 0; i < MULTITHREAD; i++)
        portable_free(results[i].memblock[0]);
#endif
    /* And last call any target specific code for finalizing */
    portable_fini(&(results[0].port));
    1f00:	f8440793          	addi	a5,s0,-124
    1f04:	04278793          	addi	a5,a5,66
    1f08:	00078513          	mv	a0,a5
    1f0c:	5bd000ef          	jal	ra,2cc8 <portable_fini>

    return MAIN_RETURN_VAL;
    1f10:	00000013          	nop
}
    1f14:	06010113          	addi	sp,sp,96
    1f18:	7ec12083          	lw	ra,2028(sp)
    1f1c:	7e812403          	lw	s0,2024(sp)
    1f20:	7e412483          	lw	s1,2020(sp)
    1f24:	7f010113          	addi	sp,sp,2032
    1f28:	00008067          	ret

00001f2c <core_bench_matrix>:
        Iterate <matrix_test> N times,
        changing the matrix values slightly by a constant amount each time.
*/
ee_u16
core_bench_matrix(mat_params *p, ee_s16 seed, ee_u16 crc)
{
    1f2c:	fc010113          	addi	sp,sp,-64
    1f30:	02112e23          	sw	ra,60(sp)
    1f34:	02812c23          	sw	s0,56(sp)
    1f38:	04010413          	addi	s0,sp,64
    1f3c:	fca42623          	sw	a0,-52(s0)
    1f40:	00058793          	mv	a5,a1
    1f44:	00060713          	mv	a4,a2
    1f48:	fcf41523          	sh	a5,-54(s0)
    1f4c:	00070793          	mv	a5,a4
    1f50:	fcf41423          	sh	a5,-56(s0)
    ee_u32  N   = p->N;
    1f54:	fcc42783          	lw	a5,-52(s0)
    1f58:	0007a783          	lw	a5,0(a5)
    1f5c:	fef42623          	sw	a5,-20(s0)
    MATRES *C   = p->C;
    1f60:	fcc42783          	lw	a5,-52(s0)
    1f64:	00c7a783          	lw	a5,12(a5)
    1f68:	fef42423          	sw	a5,-24(s0)
    MATDAT *A   = p->A;
    1f6c:	fcc42783          	lw	a5,-52(s0)
    1f70:	0047a783          	lw	a5,4(a5)
    1f74:	fef42223          	sw	a5,-28(s0)
    MATDAT *B   = p->B;
    1f78:	fcc42783          	lw	a5,-52(s0)
    1f7c:	0087a783          	lw	a5,8(a5)
    1f80:	fef42023          	sw	a5,-32(s0)
    MATDAT  val = (MATDAT)seed;
    1f84:	fca45783          	lhu	a5,-54(s0)
    1f88:	fcf41f23          	sh	a5,-34(s0)

    crc = crc16(matrix_test(N, C, A, B, val), crc);
    1f8c:	fde41783          	lh	a5,-34(s0)
    1f90:	00078713          	mv	a4,a5
    1f94:	fe042683          	lw	a3,-32(s0)
    1f98:	fe442603          	lw	a2,-28(s0)
    1f9c:	fe842583          	lw	a1,-24(s0)
    1fa0:	fec42503          	lw	a0,-20(s0)
    1fa4:	03c000ef          	jal	ra,1fe0 <matrix_test>
    1fa8:	00050793          	mv	a5,a0
    1fac:	00078713          	mv	a4,a5
    1fb0:	fc845783          	lhu	a5,-56(s0)
    1fb4:	00078593          	mv	a1,a5
    1fb8:	00070513          	mv	a0,a4
    1fbc:	0e1010ef          	jal	ra,389c <crc16>
    1fc0:	00050793          	mv	a5,a0
    1fc4:	fcf41423          	sh	a5,-56(s0)

    return crc;
    1fc8:	fc845783          	lhu	a5,-56(s0)
}
    1fcc:	00078513          	mv	a0,a5
    1fd0:	03c12083          	lw	ra,60(sp)
    1fd4:	03812403          	lw	s0,56(sp)
    1fd8:	04010113          	addi	sp,sp,64
    1fdc:	00008067          	ret

00001fe0 <matrix_test>:

        After the last step, matrix A is back to original contents.
*/
ee_s16
matrix_test(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B, MATDAT val)
{
    1fe0:	fc010113          	addi	sp,sp,-64
    1fe4:	02112e23          	sw	ra,60(sp)
    1fe8:	02812c23          	sw	s0,56(sp)
    1fec:	04010413          	addi	s0,sp,64
    1ff0:	fca42e23          	sw	a0,-36(s0)
    1ff4:	fcb42c23          	sw	a1,-40(s0)
    1ff8:	fcc42a23          	sw	a2,-44(s0)
    1ffc:	fcd42823          	sw	a3,-48(s0)
    2000:	00070793          	mv	a5,a4
    2004:	fcf41723          	sh	a5,-50(s0)
    ee_u16 crc     = 0;
    2008:	fe041723          	sh	zero,-18(s0)
    MATDAT clipval = matrix_big(val);
    200c:	fce45703          	lhu	a4,-50(s0)
    2010:	fffff7b7          	lui	a5,0xfffff
    2014:	00f767b3          	or	a5,a4,a5
    2018:	fef41623          	sh	a5,-20(s0)

    matrix_add_const(N, A, val); /* make sure data changes  */
    201c:	fce41783          	lh	a5,-50(s0)
    2020:	00078613          	mv	a2,a5
    2024:	fd442583          	lw	a1,-44(s0)
    2028:	fdc42503          	lw	a0,-36(s0)
    202c:	5ec000ef          	jal	ra,2618 <matrix_add_const>
#if CORE_DEBUG
    printmat(A, N, "matrix_add_const");
#endif
    matrix_mul_const(N, C, A, val);
    2030:	fce41783          	lh	a5,-50(s0)
    2034:	00078693          	mv	a3,a5
    2038:	fd442603          	lw	a2,-44(s0)
    203c:	fd842583          	lw	a1,-40(s0)
    2040:	fdc42503          	lw	a0,-36(s0)
    2044:	4d0000ef          	jal	ra,2514 <matrix_mul_const>
    crc = crc16(matrix_sum(N, C, clipval), crc);
    2048:	fec41783          	lh	a5,-20(s0)
    204c:	00078613          	mv	a2,a5
    2050:	fd842583          	lw	a1,-40(s0)
    2054:	fdc42503          	lw	a0,-36(s0)
    2058:	398000ef          	jal	ra,23f0 <matrix_sum>
    205c:	00050793          	mv	a5,a0
    2060:	00078713          	mv	a4,a5
    2064:	fee45783          	lhu	a5,-18(s0)
    2068:	00078593          	mv	a1,a5
    206c:	00070513          	mv	a0,a4
    2070:	02d010ef          	jal	ra,389c <crc16>
    2074:	00050793          	mv	a5,a0
    2078:	fef41723          	sh	a5,-18(s0)
#if CORE_DEBUG
    printmatC(C, N, "matrix_mul_const");
#endif
    matrix_mul_vect(N, C, A, B);
    207c:	fd042683          	lw	a3,-48(s0)
    2080:	fd442603          	lw	a2,-44(s0)
    2084:	fd842583          	lw	a1,-40(s0)
    2088:	fdc42503          	lw	a0,-36(s0)
    208c:	684000ef          	jal	ra,2710 <matrix_mul_vect>
    crc = crc16(matrix_sum(N, C, clipval), crc);
    2090:	fec41783          	lh	a5,-20(s0)
    2094:	00078613          	mv	a2,a5
    2098:	fd842583          	lw	a1,-40(s0)
    209c:	fdc42503          	lw	a0,-36(s0)
    20a0:	350000ef          	jal	ra,23f0 <matrix_sum>
    20a4:	00050793          	mv	a5,a0
    20a8:	00078713          	mv	a4,a5
    20ac:	fee45783          	lhu	a5,-18(s0)
    20b0:	00078593          	mv	a1,a5
    20b4:	00070513          	mv	a0,a4
    20b8:	7e4010ef          	jal	ra,389c <crc16>
    20bc:	00050793          	mv	a5,a0
    20c0:	fef41723          	sh	a5,-18(s0)
#if CORE_DEBUG
    printmatC(C, N, "matrix_mul_vect");
#endif
    matrix_mul_matrix(N, C, A, B);
    20c4:	fd042683          	lw	a3,-48(s0)
    20c8:	fd442603          	lw	a2,-44(s0)
    20cc:	fd842583          	lw	a1,-40(s0)
    20d0:	fdc42503          	lw	a0,-36(s0)
    20d4:	754000ef          	jal	ra,2828 <matrix_mul_matrix>
    crc = crc16(matrix_sum(N, C, clipval), crc);
    20d8:	fec41783          	lh	a5,-20(s0)
    20dc:	00078613          	mv	a2,a5
    20e0:	fd842583          	lw	a1,-40(s0)
    20e4:	fdc42503          	lw	a0,-36(s0)
    20e8:	308000ef          	jal	ra,23f0 <matrix_sum>
    20ec:	00050793          	mv	a5,a0
    20f0:	00078713          	mv	a4,a5
    20f4:	fee45783          	lhu	a5,-18(s0)
    20f8:	00078593          	mv	a1,a5
    20fc:	00070513          	mv	a0,a4
    2100:	79c010ef          	jal	ra,389c <crc16>
    2104:	00050793          	mv	a5,a0
    2108:	fef41723          	sh	a5,-18(s0)
#if CORE_DEBUG
    printmatC(C, N, "matrix_mul_matrix");
#endif
    matrix_mul_matrix_bitextract(N, C, A, B);
    210c:	fd042683          	lw	a3,-48(s0)
    2110:	fd442603          	lw	a2,-44(s0)
    2114:	fd842583          	lw	a1,-40(s0)
    2118:	fdc42503          	lw	a0,-36(s0)
    211c:	0ad000ef          	jal	ra,29c8 <matrix_mul_matrix_bitextract>
    crc = crc16(matrix_sum(N, C, clipval), crc);
    2120:	fec41783          	lh	a5,-20(s0)
    2124:	00078613          	mv	a2,a5
    2128:	fd842583          	lw	a1,-40(s0)
    212c:	fdc42503          	lw	a0,-36(s0)
    2130:	2c0000ef          	jal	ra,23f0 <matrix_sum>
    2134:	00050793          	mv	a5,a0
    2138:	00078713          	mv	a4,a5
    213c:	fee45783          	lhu	a5,-18(s0)
    2140:	00078593          	mv	a1,a5
    2144:	00070513          	mv	a0,a4
    2148:	754010ef          	jal	ra,389c <crc16>
    214c:	00050793          	mv	a5,a0
    2150:	fef41723          	sh	a5,-18(s0)
#if CORE_DEBUG
    printmatC(C, N, "matrix_mul_matrix_bitextract");
#endif

    matrix_add_const(N, A, -val); /* return matrix to initial value */
    2154:	fce45783          	lhu	a5,-50(s0)
    2158:	40f007b3          	neg	a5,a5
    215c:	01079793          	slli	a5,a5,0x10
    2160:	0107d793          	srli	a5,a5,0x10
    2164:	01079793          	slli	a5,a5,0x10
    2168:	4107d793          	srai	a5,a5,0x10
    216c:	00078613          	mv	a2,a5
    2170:	fd442583          	lw	a1,-44(s0)
    2174:	fdc42503          	lw	a0,-36(s0)
    2178:	4a0000ef          	jal	ra,2618 <matrix_add_const>
    return crc;
    217c:	fee41783          	lh	a5,-18(s0)
}
    2180:	00078513          	mv	a0,a5
    2184:	03c12083          	lw	ra,60(sp)
    2188:	03812403          	lw	s0,56(sp)
    218c:	04010113          	addi	sp,sp,64
    2190:	00008067          	ret

00002194 <core_init_matrix>:
        The seed parameter MUST be supplied from a source that cannot be
   determined at compile time
*/
ee_u32
core_init_matrix(ee_u32 blksize, void *memblk, ee_s32 seed, mat_params *p)
{
    2194:	fc010113          	addi	sp,sp,-64
    2198:	02112e23          	sw	ra,60(sp)
    219c:	02812c23          	sw	s0,56(sp)
    21a0:	04010413          	addi	s0,sp,64
    21a4:	fca42623          	sw	a0,-52(s0)
    21a8:	fcb42423          	sw	a1,-56(s0)
    21ac:	fcc42223          	sw	a2,-60(s0)
    21b0:	fcd42023          	sw	a3,-64(s0)
    ee_u32  N = 0;
    21b4:	fe042023          	sw	zero,-32(s0)
    MATDAT *A;
    MATDAT *B;
    ee_s32  order = 1;
    21b8:	00100793          	li	a5,1
    21bc:	fef42623          	sw	a5,-20(s0)
    MATDAT  val;
    ee_u32  i = 0, j = 0;
    21c0:	fe042423          	sw	zero,-24(s0)
    21c4:	fe042223          	sw	zero,-28(s0)
    if (seed == 0)
    21c8:	fc442783          	lw	a5,-60(s0)
    21cc:	02079a63          	bnez	a5,2200 <core_init_matrix+0x6c>
        seed = 1;
    21d0:	00100793          	li	a5,1
    21d4:	fcf42223          	sw	a5,-60(s0)
    while (j < blksize)
    21d8:	0280006f          	j	2200 <core_init_matrix+0x6c>
    {
        i++;
    21dc:	fe842783          	lw	a5,-24(s0)
    21e0:	00178793          	addi	a5,a5,1 # fffff001 <RAM_SIZE+0xfffef001>
    21e4:	fef42423          	sw	a5,-24(s0)
        j = i * i * 2 * 4;
    21e8:	fe842583          	lw	a1,-24(s0)
    21ec:	fe842503          	lw	a0,-24(s0)
    21f0:	668040ef          	jal	ra,6858 <__mulsi3>
    21f4:	00050793          	mv	a5,a0
    21f8:	00379793          	slli	a5,a5,0x3
    21fc:	fef42223          	sw	a5,-28(s0)
    while (j < blksize)
    2200:	fe442703          	lw	a4,-28(s0)
    2204:	fcc42783          	lw	a5,-52(s0)
    2208:	fcf76ae3          	bltu	a4,a5,21dc <core_init_matrix+0x48>
    }
    N = i - 1;
    220c:	fe842783          	lw	a5,-24(s0)
    2210:	fff78793          	addi	a5,a5,-1
    2214:	fef42023          	sw	a5,-32(s0)
    A = (MATDAT *)align_mem(memblk);
    2218:	fc842783          	lw	a5,-56(s0)
    221c:	fff78793          	addi	a5,a5,-1
    2220:	ffc7f793          	andi	a5,a5,-4
    2224:	00478793          	addi	a5,a5,4
    2228:	fcf42e23          	sw	a5,-36(s0)
    B = A + N * N;
    222c:	fe042583          	lw	a1,-32(s0)
    2230:	fe042503          	lw	a0,-32(s0)
    2234:	624040ef          	jal	ra,6858 <__mulsi3>
    2238:	00050793          	mv	a5,a0
    223c:	00179793          	slli	a5,a5,0x1
    2240:	fdc42703          	lw	a4,-36(s0)
    2244:	00f707b3          	add	a5,a4,a5
    2248:	fcf42c23          	sw	a5,-40(s0)

    for (i = 0; i < N; i++)
    224c:	fe042423          	sw	zero,-24(s0)
    2250:	1240006f          	j	2374 <core_init_matrix+0x1e0>
    {
        for (j = 0; j < N; j++)
    2254:	fe042223          	sw	zero,-28(s0)
    2258:	1040006f          	j	235c <core_init_matrix+0x1c8>
        {
            seed         = ((order * seed) % 65536);
    225c:	fc442583          	lw	a1,-60(s0)
    2260:	fec42503          	lw	a0,-20(s0)
    2264:	5f4040ef          	jal	ra,6858 <__mulsi3>
    2268:	00050793          	mv	a5,a0
    226c:	00078713          	mv	a4,a5
    2270:	41f75793          	srai	a5,a4,0x1f
    2274:	0107d793          	srli	a5,a5,0x10
    2278:	00f706b3          	add	a3,a4,a5
    227c:	00010737          	lui	a4,0x10
    2280:	fff70713          	addi	a4,a4,-1 # ffff <__stack_top+0x4aef>
    2284:	00e6f733          	and	a4,a3,a4
    2288:	40f707b3          	sub	a5,a4,a5
    228c:	fcf42223          	sw	a5,-60(s0)
            val          = (seed + order);
    2290:	fc442783          	lw	a5,-60(s0)
    2294:	01079713          	slli	a4,a5,0x10
    2298:	01075713          	srli	a4,a4,0x10
    229c:	fec42783          	lw	a5,-20(s0)
    22a0:	01079793          	slli	a5,a5,0x10
    22a4:	0107d793          	srli	a5,a5,0x10
    22a8:	00f707b3          	add	a5,a4,a5
    22ac:	01079793          	slli	a5,a5,0x10
    22b0:	0107d793          	srli	a5,a5,0x10
    22b4:	fcf41b23          	sh	a5,-42(s0)
            val          = matrix_clip(val, 0);
            B[i * N + j] = val;
    22b8:	fe042583          	lw	a1,-32(s0)
    22bc:	fe842503          	lw	a0,-24(s0)
    22c0:	598040ef          	jal	ra,6858 <__mulsi3>
    22c4:	00050793          	mv	a5,a0
    22c8:	00078713          	mv	a4,a5
    22cc:	fe442783          	lw	a5,-28(s0)
    22d0:	00f707b3          	add	a5,a4,a5
    22d4:	00179793          	slli	a5,a5,0x1
    22d8:	fd842703          	lw	a4,-40(s0)
    22dc:	00f707b3          	add	a5,a4,a5
    22e0:	fd645703          	lhu	a4,-42(s0)
    22e4:	00e79023          	sh	a4,0(a5)
            val          = (val + order);
    22e8:	fec42783          	lw	a5,-20(s0)
    22ec:	01079713          	slli	a4,a5,0x10
    22f0:	01075713          	srli	a4,a4,0x10
    22f4:	fd645783          	lhu	a5,-42(s0)
    22f8:	00f707b3          	add	a5,a4,a5
    22fc:	01079793          	slli	a5,a5,0x10
    2300:	0107d793          	srli	a5,a5,0x10
    2304:	fcf41b23          	sh	a5,-42(s0)
            val          = matrix_clip(val, 1);
    2308:	fd645783          	lhu	a5,-42(s0)
    230c:	0ff7f793          	zext.b	a5,a5
    2310:	fcf41b23          	sh	a5,-42(s0)
            A[i * N + j] = val;
    2314:	fe042583          	lw	a1,-32(s0)
    2318:	fe842503          	lw	a0,-24(s0)
    231c:	53c040ef          	jal	ra,6858 <__mulsi3>
    2320:	00050793          	mv	a5,a0
    2324:	00078713          	mv	a4,a5
    2328:	fe442783          	lw	a5,-28(s0)
    232c:	00f707b3          	add	a5,a4,a5
    2330:	00179793          	slli	a5,a5,0x1
    2334:	fdc42703          	lw	a4,-36(s0)
    2338:	00f707b3          	add	a5,a4,a5
    233c:	fd645703          	lhu	a4,-42(s0)
    2340:	00e79023          	sh	a4,0(a5)
            order++;
    2344:	fec42783          	lw	a5,-20(s0)
    2348:	00178793          	addi	a5,a5,1
    234c:	fef42623          	sw	a5,-20(s0)
        for (j = 0; j < N; j++)
    2350:	fe442783          	lw	a5,-28(s0)
    2354:	00178793          	addi	a5,a5,1
    2358:	fef42223          	sw	a5,-28(s0)
    235c:	fe442703          	lw	a4,-28(s0)
    2360:	fe042783          	lw	a5,-32(s0)
    2364:	eef76ce3          	bltu	a4,a5,225c <core_init_matrix+0xc8>
    for (i = 0; i < N; i++)
    2368:	fe842783          	lw	a5,-24(s0)
    236c:	00178793          	addi	a5,a5,1
    2370:	fef42423          	sw	a5,-24(s0)
    2374:	fe842703          	lw	a4,-24(s0)
    2378:	fe042783          	lw	a5,-32(s0)
    237c:	ecf76ce3          	bltu	a4,a5,2254 <core_init_matrix+0xc0>
        }
    }

    p->A = A;
    2380:	fc042783          	lw	a5,-64(s0)
    2384:	fdc42703          	lw	a4,-36(s0)
    2388:	00e7a223          	sw	a4,4(a5)
    p->B = B;
    238c:	fc042783          	lw	a5,-64(s0)
    2390:	fd842703          	lw	a4,-40(s0)
    2394:	00e7a423          	sw	a4,8(a5)
    p->C = (MATRES *)align_mem(B + N * N);
    2398:	fe042583          	lw	a1,-32(s0)
    239c:	fe042503          	lw	a0,-32(s0)
    23a0:	4b8040ef          	jal	ra,6858 <__mulsi3>
    23a4:	00050793          	mv	a5,a0
    23a8:	00179793          	slli	a5,a5,0x1
    23ac:	fd842703          	lw	a4,-40(s0)
    23b0:	00f707b3          	add	a5,a4,a5
    23b4:	fff78793          	addi	a5,a5,-1
    23b8:	ffc7f793          	andi	a5,a5,-4
    23bc:	00478793          	addi	a5,a5,4
    23c0:	00078713          	mv	a4,a5
    23c4:	fc042783          	lw	a5,-64(s0)
    23c8:	00e7a623          	sw	a4,12(a5)
    p->N = N;
    23cc:	fe042703          	lw	a4,-32(s0)
    23d0:	fc042783          	lw	a5,-64(s0)
    23d4:	00e7a023          	sw	a4,0(a5)
#if CORE_DEBUG
    printmat(A, N, "A");
    printmat(B, N, "B");
#endif
    return N;
    23d8:	fe042783          	lw	a5,-32(s0)
}
    23dc:	00078513          	mv	a0,a5
    23e0:	03c12083          	lw	ra,60(sp)
    23e4:	03812403          	lw	s0,56(sp)
    23e8:	04010113          	addi	sp,sp,64
    23ec:	00008067          	ret

000023f0 <matrix_sum>:

        Otherwise, reset the accumulator and add 10 to the result.
*/
ee_s16
matrix_sum(ee_u32 N, MATRES *C, MATDAT clipval)
{
    23f0:	fc010113          	addi	sp,sp,-64
    23f4:	02112e23          	sw	ra,60(sp)
    23f8:	02812c23          	sw	s0,56(sp)
    23fc:	04010413          	addi	s0,sp,64
    2400:	fca42623          	sw	a0,-52(s0)
    2404:	fcb42423          	sw	a1,-56(s0)
    2408:	00060793          	mv	a5,a2
    240c:	fcf41323          	sh	a5,-58(s0)
    MATRES tmp = 0, prev = 0, cur = 0;
    2410:	fe042623          	sw	zero,-20(s0)
    2414:	fe042423          	sw	zero,-24(s0)
    2418:	fc042c23          	sw	zero,-40(s0)
    ee_s16 ret = 0;
    241c:	fe041323          	sh	zero,-26(s0)
    ee_u32 i, j;
    for (i = 0; i < N; i++)
    2420:	fe042023          	sw	zero,-32(s0)
    2424:	0cc0006f          	j	24f0 <matrix_sum+0x100>
    {
        for (j = 0; j < N; j++)
    2428:	fc042e23          	sw	zero,-36(s0)
    242c:	0ac0006f          	j	24d8 <matrix_sum+0xe8>
        {
            cur = C[i * N + j];
    2430:	fcc42583          	lw	a1,-52(s0)
    2434:	fe042503          	lw	a0,-32(s0)
    2438:	420040ef          	jal	ra,6858 <__mulsi3>
    243c:	00050793          	mv	a5,a0
    2440:	00078713          	mv	a4,a5
    2444:	fdc42783          	lw	a5,-36(s0)
    2448:	00f707b3          	add	a5,a4,a5
    244c:	00279793          	slli	a5,a5,0x2
    2450:	fc842703          	lw	a4,-56(s0)
    2454:	00f707b3          	add	a5,a4,a5
    2458:	0007a783          	lw	a5,0(a5)
    245c:	fcf42c23          	sw	a5,-40(s0)
            tmp += cur;
    2460:	fec42703          	lw	a4,-20(s0)
    2464:	fd842783          	lw	a5,-40(s0)
    2468:	00f707b3          	add	a5,a4,a5
    246c:	fef42623          	sw	a5,-20(s0)
            if (tmp > clipval)
    2470:	fc641783          	lh	a5,-58(s0)
    2474:	fec42703          	lw	a4,-20(s0)
    2478:	02e7d063          	bge	a5,a4,2498 <matrix_sum+0xa8>
            {
                ret += 10;
    247c:	fe645783          	lhu	a5,-26(s0)
    2480:	00a78793          	addi	a5,a5,10
    2484:	01079793          	slli	a5,a5,0x10
    2488:	0107d793          	srli	a5,a5,0x10
    248c:	fef41323          	sh	a5,-26(s0)
                tmp = 0;
    2490:	fe042623          	sw	zero,-20(s0)
    2494:	0300006f          	j	24c4 <matrix_sum+0xd4>
            }
            else
            {
                ret += (cur > prev) ? 1 : 0;
    2498:	fd842703          	lw	a4,-40(s0)
    249c:	fe842783          	lw	a5,-24(s0)
    24a0:	00e7a7b3          	slt	a5,a5,a4
    24a4:	0ff7f793          	zext.b	a5,a5
    24a8:	01079713          	slli	a4,a5,0x10
    24ac:	01075713          	srli	a4,a4,0x10
    24b0:	fe645783          	lhu	a5,-26(s0)
    24b4:	00f707b3          	add	a5,a4,a5
    24b8:	01079793          	slli	a5,a5,0x10
    24bc:	0107d793          	srli	a5,a5,0x10
    24c0:	fef41323          	sh	a5,-26(s0)
            }
            prev = cur;
    24c4:	fd842783          	lw	a5,-40(s0)
    24c8:	fef42423          	sw	a5,-24(s0)
        for (j = 0; j < N; j++)
    24cc:	fdc42783          	lw	a5,-36(s0)
    24d0:	00178793          	addi	a5,a5,1
    24d4:	fcf42e23          	sw	a5,-36(s0)
    24d8:	fdc42703          	lw	a4,-36(s0)
    24dc:	fcc42783          	lw	a5,-52(s0)
    24e0:	f4f768e3          	bltu	a4,a5,2430 <matrix_sum+0x40>
    for (i = 0; i < N; i++)
    24e4:	fe042783          	lw	a5,-32(s0)
    24e8:	00178793          	addi	a5,a5,1
    24ec:	fef42023          	sw	a5,-32(s0)
    24f0:	fe042703          	lw	a4,-32(s0)
    24f4:	fcc42783          	lw	a5,-52(s0)
    24f8:	f2f768e3          	bltu	a4,a5,2428 <matrix_sum+0x38>
        }
    }
    return ret;
    24fc:	fe641783          	lh	a5,-26(s0)
}
    2500:	00078513          	mv	a0,a5
    2504:	03c12083          	lw	ra,60(sp)
    2508:	03812403          	lw	s0,56(sp)
    250c:	04010113          	addi	sp,sp,64
    2510:	00008067          	ret

00002514 <matrix_mul_const>:
        Multiply a matrix by a constant.
        This could be used as a scaler for instance.
*/
void
matrix_mul_const(ee_u32 N, MATRES *C, MATDAT *A, MATDAT val)
{
    2514:	fc010113          	addi	sp,sp,-64
    2518:	02112e23          	sw	ra,60(sp)
    251c:	02812c23          	sw	s0,56(sp)
    2520:	02912a23          	sw	s1,52(sp)
    2524:	03212823          	sw	s2,48(sp)
    2528:	03312623          	sw	s3,44(sp)
    252c:	04010413          	addi	s0,sp,64
    2530:	fca42623          	sw	a0,-52(s0)
    2534:	fcb42423          	sw	a1,-56(s0)
    2538:	fcc42223          	sw	a2,-60(s0)
    253c:	00068793          	mv	a5,a3
    2540:	fcf41123          	sh	a5,-62(s0)
    ee_u32 i, j;
    for (i = 0; i < N; i++)
    2544:	fc042e23          	sw	zero,-36(s0)
    2548:	0a00006f          	j	25e8 <matrix_mul_const+0xd4>
    {
        for (j = 0; j < N; j++)
    254c:	fc042c23          	sw	zero,-40(s0)
    2550:	0800006f          	j	25d0 <matrix_mul_const+0xbc>
        {
            C[i * N + j] = (MATRES)A[i * N + j] * (MATRES)val;
    2554:	fcc42583          	lw	a1,-52(s0)
    2558:	fdc42503          	lw	a0,-36(s0)
    255c:	2fc040ef          	jal	ra,6858 <__mulsi3>
    2560:	00050793          	mv	a5,a0
    2564:	00078713          	mv	a4,a5
    2568:	fd842783          	lw	a5,-40(s0)
    256c:	00f707b3          	add	a5,a4,a5
    2570:	00179793          	slli	a5,a5,0x1
    2574:	fc442703          	lw	a4,-60(s0)
    2578:	00f707b3          	add	a5,a4,a5
    257c:	00079783          	lh	a5,0(a5)
    2580:	00078993          	mv	s3,a5
    2584:	fc241903          	lh	s2,-62(s0)
    2588:	fcc42583          	lw	a1,-52(s0)
    258c:	fdc42503          	lw	a0,-36(s0)
    2590:	2c8040ef          	jal	ra,6858 <__mulsi3>
    2594:	00050793          	mv	a5,a0
    2598:	00078713          	mv	a4,a5
    259c:	fd842783          	lw	a5,-40(s0)
    25a0:	00f707b3          	add	a5,a4,a5
    25a4:	00279793          	slli	a5,a5,0x2
    25a8:	fc842703          	lw	a4,-56(s0)
    25ac:	00f704b3          	add	s1,a4,a5
    25b0:	00090593          	mv	a1,s2
    25b4:	00098513          	mv	a0,s3
    25b8:	2a0040ef          	jal	ra,6858 <__mulsi3>
    25bc:	00050793          	mv	a5,a0
    25c0:	00f4a023          	sw	a5,0(s1)
        for (j = 0; j < N; j++)
    25c4:	fd842783          	lw	a5,-40(s0)
    25c8:	00178793          	addi	a5,a5,1
    25cc:	fcf42c23          	sw	a5,-40(s0)
    25d0:	fd842703          	lw	a4,-40(s0)
    25d4:	fcc42783          	lw	a5,-52(s0)
    25d8:	f6f76ee3          	bltu	a4,a5,2554 <matrix_mul_const+0x40>
    for (i = 0; i < N; i++)
    25dc:	fdc42783          	lw	a5,-36(s0)
    25e0:	00178793          	addi	a5,a5,1
    25e4:	fcf42e23          	sw	a5,-36(s0)
    25e8:	fdc42703          	lw	a4,-36(s0)
    25ec:	fcc42783          	lw	a5,-52(s0)
    25f0:	f4f76ee3          	bltu	a4,a5,254c <matrix_mul_const+0x38>
        }
    }
}
    25f4:	00000013          	nop
    25f8:	00000013          	nop
    25fc:	03c12083          	lw	ra,60(sp)
    2600:	03812403          	lw	s0,56(sp)
    2604:	03412483          	lw	s1,52(sp)
    2608:	03012903          	lw	s2,48(sp)
    260c:	02c12983          	lw	s3,44(sp)
    2610:	04010113          	addi	sp,sp,64
    2614:	00008067          	ret

00002618 <matrix_add_const>:
/* Function: matrix_add_const
        Add a constant value to all elements of a matrix.
*/
void
matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val)
{
    2618:	fd010113          	addi	sp,sp,-48
    261c:	02112623          	sw	ra,44(sp)
    2620:	02812423          	sw	s0,40(sp)
    2624:	02912223          	sw	s1,36(sp)
    2628:	03010413          	addi	s0,sp,48
    262c:	fca42e23          	sw	a0,-36(s0)
    2630:	fcb42c23          	sw	a1,-40(s0)
    2634:	00060793          	mv	a5,a2
    2638:	fcf41b23          	sh	a5,-42(s0)
    ee_u32 i, j;
    for (i = 0; i < N; i++)
    263c:	fe042623          	sw	zero,-20(s0)
    2640:	0a80006f          	j	26e8 <matrix_add_const+0xd0>
    {
        for (j = 0; j < N; j++)
    2644:	fe042423          	sw	zero,-24(s0)
    2648:	0880006f          	j	26d0 <matrix_add_const+0xb8>
        {
            A[i * N + j] += val;
    264c:	fdc42583          	lw	a1,-36(s0)
    2650:	fec42503          	lw	a0,-20(s0)
    2654:	204040ef          	jal	ra,6858 <__mulsi3>
    2658:	00050793          	mv	a5,a0
    265c:	00078713          	mv	a4,a5
    2660:	fe842783          	lw	a5,-24(s0)
    2664:	00f707b3          	add	a5,a4,a5
    2668:	00179793          	slli	a5,a5,0x1
    266c:	fd842703          	lw	a4,-40(s0)
    2670:	00f707b3          	add	a5,a4,a5
    2674:	00079783          	lh	a5,0(a5)
    2678:	01079713          	slli	a4,a5,0x10
    267c:	01075713          	srli	a4,a4,0x10
    2680:	fd645783          	lhu	a5,-42(s0)
    2684:	00f707b3          	add	a5,a4,a5
    2688:	01079493          	slli	s1,a5,0x10
    268c:	0104d493          	srli	s1,s1,0x10
    2690:	fdc42583          	lw	a1,-36(s0)
    2694:	fec42503          	lw	a0,-20(s0)
    2698:	1c0040ef          	jal	ra,6858 <__mulsi3>
    269c:	00050793          	mv	a5,a0
    26a0:	00078713          	mv	a4,a5
    26a4:	fe842783          	lw	a5,-24(s0)
    26a8:	00f707b3          	add	a5,a4,a5
    26ac:	00179793          	slli	a5,a5,0x1
    26b0:	fd842703          	lw	a4,-40(s0)
    26b4:	00f707b3          	add	a5,a4,a5
    26b8:	01049713          	slli	a4,s1,0x10
    26bc:	41075713          	srai	a4,a4,0x10
    26c0:	00e79023          	sh	a4,0(a5)
        for (j = 0; j < N; j++)
    26c4:	fe842783          	lw	a5,-24(s0)
    26c8:	00178793          	addi	a5,a5,1
    26cc:	fef42423          	sw	a5,-24(s0)
    26d0:	fe842703          	lw	a4,-24(s0)
    26d4:	fdc42783          	lw	a5,-36(s0)
    26d8:	f6f76ae3          	bltu	a4,a5,264c <matrix_add_const+0x34>
    for (i = 0; i < N; i++)
    26dc:	fec42783          	lw	a5,-20(s0)
    26e0:	00178793          	addi	a5,a5,1
    26e4:	fef42623          	sw	a5,-20(s0)
    26e8:	fec42703          	lw	a4,-20(s0)
    26ec:	fdc42783          	lw	a5,-36(s0)
    26f0:	f4f76ae3          	bltu	a4,a5,2644 <matrix_add_const+0x2c>
        }
    }
}
    26f4:	00000013          	nop
    26f8:	00000013          	nop
    26fc:	02c12083          	lw	ra,44(sp)
    2700:	02812403          	lw	s0,40(sp)
    2704:	02412483          	lw	s1,36(sp)
    2708:	03010113          	addi	sp,sp,48
    270c:	00008067          	ret

00002710 <matrix_mul_vect>:
        This is common in many simple filters (e.g. fir where a vector of
   coefficients is applied to the matrix.)
*/
void
matrix_mul_vect(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B)
{
    2710:	fd010113          	addi	sp,sp,-48
    2714:	02112623          	sw	ra,44(sp)
    2718:	02812423          	sw	s0,40(sp)
    271c:	02912223          	sw	s1,36(sp)
    2720:	03010413          	addi	s0,sp,48
    2724:	fca42e23          	sw	a0,-36(s0)
    2728:	fcb42c23          	sw	a1,-40(s0)
    272c:	fcc42a23          	sw	a2,-44(s0)
    2730:	fcd42823          	sw	a3,-48(s0)
    ee_u32 i, j;
    for (i = 0; i < N; i++)
    2734:	fe042623          	sw	zero,-20(s0)
    2738:	0c80006f          	j	2800 <STACK_SIZE>
    {
        C[i] = 0;
    273c:	fec42783          	lw	a5,-20(s0)
    2740:	00279793          	slli	a5,a5,0x2
    2744:	fd842703          	lw	a4,-40(s0)
    2748:	00f707b3          	add	a5,a4,a5
    274c:	0007a023          	sw	zero,0(a5)
        for (j = 0; j < N; j++)
    2750:	fe042423          	sw	zero,-24(s0)
    2754:	0940006f          	j	27e8 <matrix_mul_vect+0xd8>
        {
            C[i] += (MATRES)A[i * N + j] * (MATRES)B[j];
    2758:	fec42783          	lw	a5,-20(s0)
    275c:	00279793          	slli	a5,a5,0x2
    2760:	fd842703          	lw	a4,-40(s0)
    2764:	00f707b3          	add	a5,a4,a5
    2768:	0007a483          	lw	s1,0(a5)
    276c:	fdc42583          	lw	a1,-36(s0)
    2770:	fec42503          	lw	a0,-20(s0)
    2774:	0e4040ef          	jal	ra,6858 <__mulsi3>
    2778:	00050793          	mv	a5,a0
    277c:	00078713          	mv	a4,a5
    2780:	fe842783          	lw	a5,-24(s0)
    2784:	00f707b3          	add	a5,a4,a5
    2788:	00179793          	slli	a5,a5,0x1
    278c:	fd442703          	lw	a4,-44(s0)
    2790:	00f707b3          	add	a5,a4,a5
    2794:	00079783          	lh	a5,0(a5)
    2798:	00078693          	mv	a3,a5
    279c:	fe842783          	lw	a5,-24(s0)
    27a0:	00179793          	slli	a5,a5,0x1
    27a4:	fd042703          	lw	a4,-48(s0)
    27a8:	00f707b3          	add	a5,a4,a5
    27ac:	00079783          	lh	a5,0(a5)
    27b0:	00078593          	mv	a1,a5
    27b4:	00068513          	mv	a0,a3
    27b8:	0a0040ef          	jal	ra,6858 <__mulsi3>
    27bc:	00050793          	mv	a5,a0
    27c0:	00078693          	mv	a3,a5
    27c4:	fec42783          	lw	a5,-20(s0)
    27c8:	00279793          	slli	a5,a5,0x2
    27cc:	fd842703          	lw	a4,-40(s0)
    27d0:	00f707b3          	add	a5,a4,a5
    27d4:	00d48733          	add	a4,s1,a3
    27d8:	00e7a023          	sw	a4,0(a5)
        for (j = 0; j < N; j++)
    27dc:	fe842783          	lw	a5,-24(s0)
    27e0:	00178793          	addi	a5,a5,1
    27e4:	fef42423          	sw	a5,-24(s0)
    27e8:	fe842703          	lw	a4,-24(s0)
    27ec:	fdc42783          	lw	a5,-36(s0)
    27f0:	f6f764e3          	bltu	a4,a5,2758 <matrix_mul_vect+0x48>
    for (i = 0; i < N; i++)
    27f4:	fec42783          	lw	a5,-20(s0)
    27f8:	00178793          	addi	a5,a5,1
    27fc:	fef42623          	sw	a5,-20(s0)
    2800:	fec42703          	lw	a4,-20(s0)
    2804:	fdc42783          	lw	a5,-36(s0)
    2808:	f2f76ae3          	bltu	a4,a5,273c <matrix_mul_vect+0x2c>
        }
    }
}
    280c:	00000013          	nop
    2810:	00000013          	nop
    2814:	02c12083          	lw	ra,44(sp)
    2818:	02812403          	lw	s0,40(sp)
    281c:	02412483          	lw	s1,36(sp)
    2820:	03010113          	addi	sp,sp,48
    2824:	00008067          	ret

00002828 <matrix_mul_matrix>:
        Basic code is used in many algorithms, mostly with minor changes such as
   scaling.
*/
void
matrix_mul_matrix(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B)
{
    2828:	fd010113          	addi	sp,sp,-48
    282c:	02112623          	sw	ra,44(sp)
    2830:	02812423          	sw	s0,40(sp)
    2834:	02912223          	sw	s1,36(sp)
    2838:	03212023          	sw	s2,32(sp)
    283c:	03010413          	addi	s0,sp,48
    2840:	fca42e23          	sw	a0,-36(s0)
    2844:	fcb42c23          	sw	a1,-40(s0)
    2848:	fcc42a23          	sw	a2,-44(s0)
    284c:	fcd42823          	sw	a3,-48(s0)
    ee_u32 i, j, k;
    for (i = 0; i < N; i++)
    2850:	fe042623          	sw	zero,-20(s0)
    2854:	1480006f          	j	299c <matrix_mul_matrix+0x174>
    {
        for (j = 0; j < N; j++)
    2858:	fe042423          	sw	zero,-24(s0)
    285c:	1280006f          	j	2984 <matrix_mul_matrix+0x15c>
        {
            C[i * N + j] = 0;
    2860:	fdc42583          	lw	a1,-36(s0)
    2864:	fec42503          	lw	a0,-20(s0)
    2868:	7f1030ef          	jal	ra,6858 <__mulsi3>
    286c:	00050793          	mv	a5,a0
    2870:	00078713          	mv	a4,a5
    2874:	fe842783          	lw	a5,-24(s0)
    2878:	00f707b3          	add	a5,a4,a5
    287c:	00279793          	slli	a5,a5,0x2
    2880:	fd842703          	lw	a4,-40(s0)
    2884:	00f707b3          	add	a5,a4,a5
    2888:	0007a023          	sw	zero,0(a5)
            for (k = 0; k < N; k++)
    288c:	fe042223          	sw	zero,-28(s0)
    2890:	0dc0006f          	j	296c <matrix_mul_matrix+0x144>
            {
                C[i * N + j] += (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
    2894:	fdc42583          	lw	a1,-36(s0)
    2898:	fec42503          	lw	a0,-20(s0)
    289c:	7bd030ef          	jal	ra,6858 <__mulsi3>
    28a0:	00050793          	mv	a5,a0
    28a4:	00078713          	mv	a4,a5
    28a8:	fe842783          	lw	a5,-24(s0)
    28ac:	00f707b3          	add	a5,a4,a5
    28b0:	00279793          	slli	a5,a5,0x2
    28b4:	fd842703          	lw	a4,-40(s0)
    28b8:	00f707b3          	add	a5,a4,a5
    28bc:	0007a483          	lw	s1,0(a5)
    28c0:	fdc42583          	lw	a1,-36(s0)
    28c4:	fec42503          	lw	a0,-20(s0)
    28c8:	791030ef          	jal	ra,6858 <__mulsi3>
    28cc:	00050793          	mv	a5,a0
    28d0:	00078713          	mv	a4,a5
    28d4:	fe442783          	lw	a5,-28(s0)
    28d8:	00f707b3          	add	a5,a4,a5
    28dc:	00179793          	slli	a5,a5,0x1
    28e0:	fd442703          	lw	a4,-44(s0)
    28e4:	00f707b3          	add	a5,a4,a5
    28e8:	00079783          	lh	a5,0(a5)
    28ec:	00078913          	mv	s2,a5
    28f0:	fdc42583          	lw	a1,-36(s0)
    28f4:	fe442503          	lw	a0,-28(s0)
    28f8:	761030ef          	jal	ra,6858 <__mulsi3>
    28fc:	00050793          	mv	a5,a0
    2900:	00078713          	mv	a4,a5
    2904:	fe842783          	lw	a5,-24(s0)
    2908:	00f707b3          	add	a5,a4,a5
    290c:	00179793          	slli	a5,a5,0x1
    2910:	fd042703          	lw	a4,-48(s0)
    2914:	00f707b3          	add	a5,a4,a5
    2918:	00079783          	lh	a5,0(a5)
    291c:	00078593          	mv	a1,a5
    2920:	00090513          	mv	a0,s2
    2924:	735030ef          	jal	ra,6858 <__mulsi3>
    2928:	00050793          	mv	a5,a0
    292c:	00078913          	mv	s2,a5
    2930:	fdc42583          	lw	a1,-36(s0)
    2934:	fec42503          	lw	a0,-20(s0)
    2938:	721030ef          	jal	ra,6858 <__mulsi3>
    293c:	00050793          	mv	a5,a0
    2940:	00078713          	mv	a4,a5
    2944:	fe842783          	lw	a5,-24(s0)
    2948:	00f707b3          	add	a5,a4,a5
    294c:	00279793          	slli	a5,a5,0x2
    2950:	fd842703          	lw	a4,-40(s0)
    2954:	00f707b3          	add	a5,a4,a5
    2958:	01248733          	add	a4,s1,s2
    295c:	00e7a023          	sw	a4,0(a5)
            for (k = 0; k < N; k++)
    2960:	fe442783          	lw	a5,-28(s0)
    2964:	00178793          	addi	a5,a5,1
    2968:	fef42223          	sw	a5,-28(s0)
    296c:	fe442703          	lw	a4,-28(s0)
    2970:	fdc42783          	lw	a5,-36(s0)
    2974:	f2f760e3          	bltu	a4,a5,2894 <matrix_mul_matrix+0x6c>
        for (j = 0; j < N; j++)
    2978:	fe842783          	lw	a5,-24(s0)
    297c:	00178793          	addi	a5,a5,1
    2980:	fef42423          	sw	a5,-24(s0)
    2984:	fe842703          	lw	a4,-24(s0)
    2988:	fdc42783          	lw	a5,-36(s0)
    298c:	ecf76ae3          	bltu	a4,a5,2860 <matrix_mul_matrix+0x38>
    for (i = 0; i < N; i++)
    2990:	fec42783          	lw	a5,-20(s0)
    2994:	00178793          	addi	a5,a5,1
    2998:	fef42623          	sw	a5,-20(s0)
    299c:	fec42703          	lw	a4,-20(s0)
    29a0:	fdc42783          	lw	a5,-36(s0)
    29a4:	eaf76ae3          	bltu	a4,a5,2858 <matrix_mul_matrix+0x30>
            }
        }
    }
}
    29a8:	00000013          	nop
    29ac:	00000013          	nop
    29b0:	02c12083          	lw	ra,44(sp)
    29b4:	02812403          	lw	s0,40(sp)
    29b8:	02412483          	lw	s1,36(sp)
    29bc:	02012903          	lw	s2,32(sp)
    29c0:	03010113          	addi	sp,sp,48
    29c4:	00008067          	ret

000029c8 <matrix_mul_matrix_bitextract>:
        Basic code is used in many algorithms, mostly with minor changes such as
   scaling.
*/
void
matrix_mul_matrix_bitextract(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B)
{
    29c8:	fd010113          	addi	sp,sp,-48
    29cc:	02112623          	sw	ra,44(sp)
    29d0:	02812423          	sw	s0,40(sp)
    29d4:	02912223          	sw	s1,36(sp)
    29d8:	03010413          	addi	s0,sp,48
    29dc:	fca42e23          	sw	a0,-36(s0)
    29e0:	fcb42c23          	sw	a1,-40(s0)
    29e4:	fcc42a23          	sw	a2,-44(s0)
    29e8:	fcd42823          	sw	a3,-48(s0)
    ee_u32 i, j, k;
    for (i = 0; i < N; i++)
    29ec:	fe042623          	sw	zero,-20(s0)
    29f0:	1780006f          	j	2b68 <matrix_mul_matrix_bitextract+0x1a0>
    {
        for (j = 0; j < N; j++)
    29f4:	fe042423          	sw	zero,-24(s0)
    29f8:	1580006f          	j	2b50 <matrix_mul_matrix_bitextract+0x188>
        {
            C[i * N + j] = 0;
    29fc:	fdc42583          	lw	a1,-36(s0)
    2a00:	fec42503          	lw	a0,-20(s0)
    2a04:	655030ef          	jal	ra,6858 <__mulsi3>
    2a08:	00050793          	mv	a5,a0
    2a0c:	00078713          	mv	a4,a5
    2a10:	fe842783          	lw	a5,-24(s0)
    2a14:	00f707b3          	add	a5,a4,a5
    2a18:	00279793          	slli	a5,a5,0x2
    2a1c:	fd842703          	lw	a4,-40(s0)
    2a20:	00f707b3          	add	a5,a4,a5
    2a24:	0007a023          	sw	zero,0(a5)
            for (k = 0; k < N; k++)
    2a28:	fe042223          	sw	zero,-28(s0)
    2a2c:	10c0006f          	j	2b38 <matrix_mul_matrix_bitextract+0x170>
            {
                MATRES tmp = (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
    2a30:	fdc42583          	lw	a1,-36(s0)
    2a34:	fec42503          	lw	a0,-20(s0)
    2a38:	621030ef          	jal	ra,6858 <__mulsi3>
    2a3c:	00050793          	mv	a5,a0
    2a40:	00078713          	mv	a4,a5
    2a44:	fe442783          	lw	a5,-28(s0)
    2a48:	00f707b3          	add	a5,a4,a5
    2a4c:	00179793          	slli	a5,a5,0x1
    2a50:	fd442703          	lw	a4,-44(s0)
    2a54:	00f707b3          	add	a5,a4,a5
    2a58:	00079783          	lh	a5,0(a5)
    2a5c:	00078493          	mv	s1,a5
    2a60:	fdc42583          	lw	a1,-36(s0)
    2a64:	fe442503          	lw	a0,-28(s0)
    2a68:	5f1030ef          	jal	ra,6858 <__mulsi3>
    2a6c:	00050793          	mv	a5,a0
    2a70:	00078713          	mv	a4,a5
    2a74:	fe842783          	lw	a5,-24(s0)
    2a78:	00f707b3          	add	a5,a4,a5
    2a7c:	00179793          	slli	a5,a5,0x1
    2a80:	fd042703          	lw	a4,-48(s0)
    2a84:	00f707b3          	add	a5,a4,a5
    2a88:	00079783          	lh	a5,0(a5)
    2a8c:	00078593          	mv	a1,a5
    2a90:	00048513          	mv	a0,s1
    2a94:	5c5030ef          	jal	ra,6858 <__mulsi3>
    2a98:	00050793          	mv	a5,a0
    2a9c:	fef42023          	sw	a5,-32(s0)
                C[i * N + j] += bit_extract(tmp, 2, 4) * bit_extract(tmp, 5, 7);
    2aa0:	fdc42583          	lw	a1,-36(s0)
    2aa4:	fec42503          	lw	a0,-20(s0)
    2aa8:	5b1030ef          	jal	ra,6858 <__mulsi3>
    2aac:	00050793          	mv	a5,a0
    2ab0:	00078713          	mv	a4,a5
    2ab4:	fe842783          	lw	a5,-24(s0)
    2ab8:	00f707b3          	add	a5,a4,a5
    2abc:	00279793          	slli	a5,a5,0x2
    2ac0:	fd842703          	lw	a4,-40(s0)
    2ac4:	00f707b3          	add	a5,a4,a5
    2ac8:	0007a783          	lw	a5,0(a5)
    2acc:	00078493          	mv	s1,a5
    2ad0:	fe042783          	lw	a5,-32(s0)
    2ad4:	4027d793          	srai	a5,a5,0x2
    2ad8:	00f7f713          	andi	a4,a5,15
    2adc:	fe042783          	lw	a5,-32(s0)
    2ae0:	4057d793          	srai	a5,a5,0x5
    2ae4:	07f7f793          	andi	a5,a5,127
    2ae8:	00078593          	mv	a1,a5
    2aec:	00070513          	mv	a0,a4
    2af0:	569030ef          	jal	ra,6858 <__mulsi3>
    2af4:	00050793          	mv	a5,a0
    2af8:	00f484b3          	add	s1,s1,a5
    2afc:	fdc42583          	lw	a1,-36(s0)
    2b00:	fec42503          	lw	a0,-20(s0)
    2b04:	555030ef          	jal	ra,6858 <__mulsi3>
    2b08:	00050793          	mv	a5,a0
    2b0c:	00078713          	mv	a4,a5
    2b10:	fe842783          	lw	a5,-24(s0)
    2b14:	00f707b3          	add	a5,a4,a5
    2b18:	00279793          	slli	a5,a5,0x2
    2b1c:	fd842703          	lw	a4,-40(s0)
    2b20:	00f707b3          	add	a5,a4,a5
    2b24:	00048713          	mv	a4,s1
    2b28:	00e7a023          	sw	a4,0(a5)
            for (k = 0; k < N; k++)
    2b2c:	fe442783          	lw	a5,-28(s0)
    2b30:	00178793          	addi	a5,a5,1
    2b34:	fef42223          	sw	a5,-28(s0)
    2b38:	fe442703          	lw	a4,-28(s0)
    2b3c:	fdc42783          	lw	a5,-36(s0)
    2b40:	eef768e3          	bltu	a4,a5,2a30 <matrix_mul_matrix_bitextract+0x68>
        for (j = 0; j < N; j++)
    2b44:	fe842783          	lw	a5,-24(s0)
    2b48:	00178793          	addi	a5,a5,1
    2b4c:	fef42423          	sw	a5,-24(s0)
    2b50:	fe842703          	lw	a4,-24(s0)
    2b54:	fdc42783          	lw	a5,-36(s0)
    2b58:	eaf762e3          	bltu	a4,a5,29fc <matrix_mul_matrix_bitextract+0x34>
    for (i = 0; i < N; i++)
    2b5c:	fec42783          	lw	a5,-20(s0)
    2b60:	00178793          	addi	a5,a5,1
    2b64:	fef42623          	sw	a5,-20(s0)
    2b68:	fec42703          	lw	a4,-20(s0)
    2b6c:	fdc42783          	lw	a5,-36(s0)
    2b70:	e8f762e3          	bltu	a4,a5,29f4 <matrix_mul_matrix_bitextract+0x2c>
            }
        }
    }
}
    2b74:	00000013          	nop
    2b78:	00000013          	nop
    2b7c:	02c12083          	lw	ra,44(sp)
    2b80:	02812403          	lw	s0,40(sp)
    2b84:	02412483          	lw	s1,36(sp)
    2b88:	03010113          	addi	sp,sp,48
    2b8c:	00008067          	ret

00002b90 <barebones_clock>:
   time.h and windows.h definitions included.
*/
#define CLOCKS_PER_SEC 1000
CORETIMETYPE
barebones_clock()
{
    2b90:	fe010113          	addi	sp,sp,-32
    2b94:	00812e23          	sw	s0,28(sp)
    2b98:	02010413          	addi	s0,sp,32
	const CORETIMETYPE * const time_ptr = (CORETIMETYPE*)0xDEADBEE0;
    2b9c:	deadc7b7          	lui	a5,0xdeadc
    2ba0:	ee078793          	addi	a5,a5,-288 # deadbee0 <RAM_SIZE+0xdeacbee0>
    2ba4:	fef42623          	sw	a5,-20(s0)
	return *time_ptr;
    2ba8:	fec42783          	lw	a5,-20(s0)
    2bac:	0007a783          	lw	a5,0(a5)
}
    2bb0:	00078513          	mv	a0,a5
    2bb4:	01c12403          	lw	s0,28(sp)
    2bb8:	02010113          	addi	sp,sp,32
    2bbc:	00008067          	ret

00002bc0 <start_time>:
   example code) or zeroing some system parameters - e.g. setting the cpu clocks
   cycles to 0.
*/
void
start_time(void)
{
    2bc0:	ff010113          	addi	sp,sp,-16
    2bc4:	00112623          	sw	ra,12(sp)
    2bc8:	00812423          	sw	s0,8(sp)
    2bcc:	01010413          	addi	s0,sp,16
    GETMYTIME(&start_time_val);
    2bd0:	fc1ff0ef          	jal	ra,2b90 <barebones_clock>
    2bd4:	00050713          	mv	a4,a0
    2bd8:	cee1a623          	sw	a4,-788(gp) # 84ac <start_time_val>
}
    2bdc:	00000013          	nop
    2be0:	00c12083          	lw	ra,12(sp)
    2be4:	00812403          	lw	s0,8(sp)
    2be8:	01010113          	addi	sp,sp,16
    2bec:	00008067          	ret

00002bf0 <stop_time>:
   example code) or other system parameters - e.g. reading the current value of
   cpu cycles counter.
*/
void
stop_time(void)
{
    2bf0:	ff010113          	addi	sp,sp,-16
    2bf4:	00112623          	sw	ra,12(sp)
    2bf8:	00812423          	sw	s0,8(sp)
    2bfc:	01010413          	addi	s0,sp,16
    GETMYTIME(&stop_time_val);
    2c00:	f91ff0ef          	jal	ra,2b90 <barebones_clock>
    2c04:	00050713          	mv	a4,a0
    2c08:	cee1a823          	sw	a4,-784(gp) # 84b0 <stop_time_val>
}
    2c0c:	00000013          	nop
    2c10:	00c12083          	lw	ra,12(sp)
    2c14:	00812403          	lw	s0,8(sp)
    2c18:	01010113          	addi	sp,sp,16
    2c1c:	00008067          	ret

00002c20 <get_time>:
   sample implementation returns millisecs by default, and the resolution is
   controlled by <TIMER_RES_DIVIDER>
*/
CORE_TICKS
get_time(void)
{
    2c20:	fe010113          	addi	sp,sp,-32
    2c24:	00812e23          	sw	s0,28(sp)
    2c28:	02010413          	addi	s0,sp,32
    CORE_TICKS elapsed
        = (CORE_TICKS)(MYTIMEDIFF(stop_time_val, start_time_val));
    2c2c:	cf01a703          	lw	a4,-784(gp) # 84b0 <stop_time_val>
    2c30:	cec1a783          	lw	a5,-788(gp) # 84ac <start_time_val>
    CORE_TICKS elapsed
    2c34:	40f707b3          	sub	a5,a4,a5
    2c38:	fef42623          	sw	a5,-20(s0)
    return elapsed;
    2c3c:	fec42783          	lw	a5,-20(s0)
}
    2c40:	00078513          	mv	a0,a5
    2c44:	01c12403          	lw	s0,28(sp)
    2c48:	02010113          	addi	sp,sp,32
    2c4c:	00008067          	ret

00002c50 <time_in_secs>:
   floating point. Default implementation implemented by the EE_TICKS_PER_SEC
   macro above.
*/
secs_ret
time_in_secs(CORE_TICKS ticks)
{
    2c50:	fd010113          	addi	sp,sp,-48
    2c54:	02112623          	sw	ra,44(sp)
    2c58:	02812423          	sw	s0,40(sp)
    2c5c:	03010413          	addi	s0,sp,48
    2c60:	fca42e23          	sw	a0,-36(s0)
    secs_ret retval = ((secs_ret)ticks) / (secs_ret)EE_TICKS_PER_SEC;
    2c64:	fdc42783          	lw	a5,-36(s0)
    2c68:	3e800593          	li	a1,1000
    2c6c:	00078513          	mv	a0,a5
    2c70:	415030ef          	jal	ra,6884 <__udivsi3>
    2c74:	00050793          	mv	a5,a0
    2c78:	fef42623          	sw	a5,-20(s0)
    return retval;
    2c7c:	fec42783          	lw	a5,-20(s0)
}
    2c80:	00078513          	mv	a0,a5
    2c84:	02c12083          	lw	ra,44(sp)
    2c88:	02812403          	lw	s0,40(sp)
    2c8c:	03010113          	addi	sp,sp,48
    2c90:	00008067          	ret

00002c94 <portable_init>:
        Target specific initialization code
        Test for some common mistakes.
*/
void
portable_init(core_portable *p, int *argc, char *argv[])
{
    2c94:	fe010113          	addi	sp,sp,-32
    2c98:	00812e23          	sw	s0,28(sp)
    2c9c:	02010413          	addi	s0,sp,32
    2ca0:	fea42623          	sw	a0,-20(s0)
    2ca4:	feb42423          	sw	a1,-24(s0)
    2ca8:	fec42223          	sw	a2,-28(s0)
    }
    if (sizeof(ee_u32) != 4)
    {
        ee_printf("ERROR! Please define ee_u32 to a 32b unsigned type!\n");
    }
    p->portable_id = 1;
    2cac:	fec42783          	lw	a5,-20(s0)
    2cb0:	00100713          	li	a4,1
    2cb4:	00e78023          	sb	a4,0(a5)
}
    2cb8:	00000013          	nop
    2cbc:	01c12403          	lw	s0,28(sp)
    2cc0:	02010113          	addi	sp,sp,32
    2cc4:	00008067          	ret

00002cc8 <portable_fini>:
/* Function : portable_fini
        Target specific final code
*/
void
portable_fini(core_portable *p)
{
    2cc8:	fe010113          	addi	sp,sp,-32
    2ccc:	00812e23          	sw	s0,28(sp)
    2cd0:	02010413          	addi	s0,sp,32
    2cd4:	fea42623          	sw	a0,-20(s0)
    p->portable_id = 0;
    2cd8:	fec42783          	lw	a5,-20(s0)
    2cdc:	00078023          	sb	zero,0(a5)
}
    2ce0:	00000013          	nop
    2ce4:	01c12403          	lw	s0,28(sp)
    2ce8:	02010113          	addi	sp,sp,32
    2cec:	00008067          	ret

00002cf0 <core_bench_state>:
                 ee_u8 *memblock,
                 ee_s16 seed1,
                 ee_s16 seed2,
                 ee_s16 step,
                 ee_u16 crc)
{
    2cf0:	f9010113          	addi	sp,sp,-112
    2cf4:	06112623          	sw	ra,108(sp)
    2cf8:	06812423          	sw	s0,104(sp)
    2cfc:	07010413          	addi	s0,sp,112
    2d00:	f8a42e23          	sw	a0,-100(s0)
    2d04:	f8b42c23          	sw	a1,-104(s0)
    2d08:	00060593          	mv	a1,a2
    2d0c:	00068613          	mv	a2,a3
    2d10:	00070693          	mv	a3,a4
    2d14:	00078713          	mv	a4,a5
    2d18:	00058793          	mv	a5,a1
    2d1c:	f8f41b23          	sh	a5,-106(s0)
    2d20:	00060793          	mv	a5,a2
    2d24:	f8f41a23          	sh	a5,-108(s0)
    2d28:	00068793          	mv	a5,a3
    2d2c:	f8f41923          	sh	a5,-110(s0)
    2d30:	00070793          	mv	a5,a4
    2d34:	f8f41823          	sh	a5,-112(s0)
    ee_u32 final_counts[NUM_CORE_STATES];
    ee_u32 track_counts[NUM_CORE_STATES];
    ee_u8 *p = memblock;
    2d38:	f9842783          	lw	a5,-104(s0)
    2d3c:	faf42023          	sw	a5,-96(s0)
    ee_u32 i;

#if CORE_DEBUG
    ee_printf("State Bench: %d,%d,%d,%04x\n", seed1, seed2, step, crc);
#endif
    for (i = 0; i < NUM_CORE_STATES; i++)
    2d40:	fe042623          	sw	zero,-20(s0)
    2d44:	04c0006f          	j	2d90 <core_bench_state+0xa0>
    {
        final_counts[i] = track_counts[i] = 0;
    2d48:	fec42783          	lw	a5,-20(s0)
    2d4c:	00279793          	slli	a5,a5,0x2
    2d50:	ff040713          	addi	a4,s0,-16
    2d54:	00f707b3          	add	a5,a4,a5
    2d58:	fa07aa23          	sw	zero,-76(a5)
    2d5c:	fec42783          	lw	a5,-20(s0)
    2d60:	00279793          	slli	a5,a5,0x2
    2d64:	ff040713          	addi	a4,s0,-16
    2d68:	00f707b3          	add	a5,a4,a5
    2d6c:	fb47a703          	lw	a4,-76(a5)
    2d70:	fec42783          	lw	a5,-20(s0)
    2d74:	00279793          	slli	a5,a5,0x2
    2d78:	ff040693          	addi	a3,s0,-16
    2d7c:	00f687b3          	add	a5,a3,a5
    2d80:	fce7aa23          	sw	a4,-44(a5)
    for (i = 0; i < NUM_CORE_STATES; i++)
    2d84:	fec42783          	lw	a5,-20(s0)
    2d88:	00178793          	addi	a5,a5,1
    2d8c:	fef42623          	sw	a5,-20(s0)
    2d90:	fec42703          	lw	a4,-20(s0)
    2d94:	00700793          	li	a5,7
    2d98:	fae7f8e3          	bgeu	a5,a4,2d48 <core_bench_state+0x58>
    }
    /* run the state machine over the input */
    while (*p != 0)
    2d9c:	0480006f          	j	2de4 <core_bench_state+0xf4>
    {
        enum CORE_STATE fstate = core_state_transition(&p, track_counts);
    2da0:	fa440713          	addi	a4,s0,-92
    2da4:	fa040793          	addi	a5,s0,-96
    2da8:	00070593          	mv	a1,a4
    2dac:	00078513          	mv	a0,a5
    2db0:	4b4000ef          	jal	ra,3264 <core_state_transition>
    2db4:	fea42223          	sw	a0,-28(s0)
        final_counts[fstate]++;
    2db8:	fe442783          	lw	a5,-28(s0)
    2dbc:	00279793          	slli	a5,a5,0x2
    2dc0:	ff040713          	addi	a4,s0,-16
    2dc4:	00f707b3          	add	a5,a4,a5
    2dc8:	fd47a783          	lw	a5,-44(a5)
    2dcc:	00178713          	addi	a4,a5,1
    2dd0:	fe442783          	lw	a5,-28(s0)
    2dd4:	00279793          	slli	a5,a5,0x2
    2dd8:	ff040693          	addi	a3,s0,-16
    2ddc:	00f687b3          	add	a5,a3,a5
    2de0:	fce7aa23          	sw	a4,-44(a5)
    while (*p != 0)
    2de4:	fa042783          	lw	a5,-96(s0)
    2de8:	0007c783          	lbu	a5,0(a5)
    2dec:	fa079ae3          	bnez	a5,2da0 <core_bench_state+0xb0>
    }
    ee_printf("\n");
#else
    }
#endif
    p = memblock;
    2df0:	f9842783          	lw	a5,-104(s0)
    2df4:	faf42023          	sw	a5,-96(s0)
    while (p < (memblock + blksize))
    2df8:	0440006f          	j	2e3c <core_bench_state+0x14c>
    { /* insert some corruption */
        if (*p != ',')
    2dfc:	fa042783          	lw	a5,-96(s0)
    2e00:	0007c703          	lbu	a4,0(a5)
    2e04:	02c00793          	li	a5,44
    2e08:	02f70263          	beq	a4,a5,2e2c <core_bench_state+0x13c>
            *p ^= (ee_u8)seed1;
    2e0c:	fa042783          	lw	a5,-96(s0)
    2e10:	0007c683          	lbu	a3,0(a5)
    2e14:	f9645783          	lhu	a5,-106(s0)
    2e18:	0ff7f713          	zext.b	a4,a5
    2e1c:	fa042783          	lw	a5,-96(s0)
    2e20:	00e6c733          	xor	a4,a3,a4
    2e24:	0ff77713          	zext.b	a4,a4
    2e28:	00e78023          	sb	a4,0(a5)
        p += step;
    2e2c:	fa042703          	lw	a4,-96(s0)
    2e30:	f9241783          	lh	a5,-110(s0)
    2e34:	00f707b3          	add	a5,a4,a5
    2e38:	faf42023          	sw	a5,-96(s0)
    while (p < (memblock + blksize))
    2e3c:	f9842703          	lw	a4,-104(s0)
    2e40:	f9c42783          	lw	a5,-100(s0)
    2e44:	00f70733          	add	a4,a4,a5
    2e48:	fa042783          	lw	a5,-96(s0)
    2e4c:	fae7e8e3          	bltu	a5,a4,2dfc <core_bench_state+0x10c>
    }
    p = memblock;
    2e50:	f9842783          	lw	a5,-104(s0)
    2e54:	faf42023          	sw	a5,-96(s0)
    /* run the state machine over the input again */
    while (*p != 0)
    2e58:	0480006f          	j	2ea0 <core_bench_state+0x1b0>
    {
        enum CORE_STATE fstate = core_state_transition(&p, track_counts);
    2e5c:	fa440713          	addi	a4,s0,-92
    2e60:	fa040793          	addi	a5,s0,-96
    2e64:	00070593          	mv	a1,a4
    2e68:	00078513          	mv	a0,a5
    2e6c:	3f8000ef          	jal	ra,3264 <core_state_transition>
    2e70:	fea42423          	sw	a0,-24(s0)
        final_counts[fstate]++;
    2e74:	fe842783          	lw	a5,-24(s0)
    2e78:	00279793          	slli	a5,a5,0x2
    2e7c:	ff040713          	addi	a4,s0,-16
    2e80:	00f707b3          	add	a5,a4,a5
    2e84:	fd47a783          	lw	a5,-44(a5)
    2e88:	00178713          	addi	a4,a5,1
    2e8c:	fe842783          	lw	a5,-24(s0)
    2e90:	00279793          	slli	a5,a5,0x2
    2e94:	ff040693          	addi	a3,s0,-16
    2e98:	00f687b3          	add	a5,a3,a5
    2e9c:	fce7aa23          	sw	a4,-44(a5)
    while (*p != 0)
    2ea0:	fa042783          	lw	a5,-96(s0)
    2ea4:	0007c783          	lbu	a5,0(a5)
    2ea8:	fa079ae3          	bnez	a5,2e5c <core_bench_state+0x16c>
    }
    ee_printf("\n");
#else
    }
#endif
    p = memblock;
    2eac:	f9842783          	lw	a5,-104(s0)
    2eb0:	faf42023          	sw	a5,-96(s0)
    while (p < (memblock + blksize))
    2eb4:	0440006f          	j	2ef8 <core_bench_state+0x208>
    { /* undo corruption is seed1 and seed2 are equal */
        if (*p != ',')
    2eb8:	fa042783          	lw	a5,-96(s0)
    2ebc:	0007c703          	lbu	a4,0(a5)
    2ec0:	02c00793          	li	a5,44
    2ec4:	02f70263          	beq	a4,a5,2ee8 <core_bench_state+0x1f8>
            *p ^= (ee_u8)seed2;
    2ec8:	fa042783          	lw	a5,-96(s0)
    2ecc:	0007c683          	lbu	a3,0(a5)
    2ed0:	f9445783          	lhu	a5,-108(s0)
    2ed4:	0ff7f713          	zext.b	a4,a5
    2ed8:	fa042783          	lw	a5,-96(s0)
    2edc:	00e6c733          	xor	a4,a3,a4
    2ee0:	0ff77713          	zext.b	a4,a4
    2ee4:	00e78023          	sb	a4,0(a5)
        p += step;
    2ee8:	fa042703          	lw	a4,-96(s0)
    2eec:	f9241783          	lh	a5,-110(s0)
    2ef0:	00f707b3          	add	a5,a4,a5
    2ef4:	faf42023          	sw	a5,-96(s0)
    while (p < (memblock + blksize))
    2ef8:	f9842703          	lw	a4,-104(s0)
    2efc:	f9c42783          	lw	a5,-100(s0)
    2f00:	00f70733          	add	a4,a4,a5
    2f04:	fa042783          	lw	a5,-96(s0)
    2f08:	fae7e8e3          	bltu	a5,a4,2eb8 <core_bench_state+0x1c8>
    }
    /* end timing */
    for (i = 0; i < NUM_CORE_STATES; i++)
    2f0c:	fe042623          	sw	zero,-20(s0)
    2f10:	0680006f          	j	2f78 <core_bench_state+0x288>
    {
        crc = crcu32(final_counts[i], crc);
    2f14:	fec42783          	lw	a5,-20(s0)
    2f18:	00279793          	slli	a5,a5,0x2
    2f1c:	ff040713          	addi	a4,s0,-16
    2f20:	00f707b3          	add	a5,a4,a5
    2f24:	fd47a783          	lw	a5,-44(a5)
    2f28:	f9045703          	lhu	a4,-112(s0)
    2f2c:	00070593          	mv	a1,a4
    2f30:	00078513          	mv	a0,a5
    2f34:	0e9000ef          	jal	ra,381c <crcu32>
    2f38:	00050793          	mv	a5,a0
    2f3c:	f8f41823          	sh	a5,-112(s0)
        crc = crcu32(track_counts[i], crc);
    2f40:	fec42783          	lw	a5,-20(s0)
    2f44:	00279793          	slli	a5,a5,0x2
    2f48:	ff040713          	addi	a4,s0,-16
    2f4c:	00f707b3          	add	a5,a4,a5
    2f50:	fb47a783          	lw	a5,-76(a5)
    2f54:	f9045703          	lhu	a4,-112(s0)
    2f58:	00070593          	mv	a1,a4
    2f5c:	00078513          	mv	a0,a5
    2f60:	0bd000ef          	jal	ra,381c <crcu32>
    2f64:	00050793          	mv	a5,a0
    2f68:	f8f41823          	sh	a5,-112(s0)
    for (i = 0; i < NUM_CORE_STATES; i++)
    2f6c:	fec42783          	lw	a5,-20(s0)
    2f70:	00178793          	addi	a5,a5,1
    2f74:	fef42623          	sw	a5,-20(s0)
    2f78:	fec42703          	lw	a4,-20(s0)
    2f7c:	00700793          	li	a5,7
    2f80:	f8e7fae3          	bgeu	a5,a4,2f14 <core_bench_state+0x224>
    }
    return crc;
    2f84:	f9045783          	lhu	a5,-112(s0)
}
    2f88:	00078513          	mv	a0,a5
    2f8c:	06c12083          	lw	ra,108(sp)
    2f90:	06812403          	lw	s0,104(sp)
    2f94:	07010113          	addi	sp,sp,112
    2f98:	00008067          	ret

00002f9c <core_init_state>:
        The seed parameter MUST be supplied from a source that cannot be
   determined at compile time
*/
void
core_init_state(ee_u32 size, ee_s16 seed, ee_u8 *p)
{
    2f9c:	fd010113          	addi	sp,sp,-48
    2fa0:	02812623          	sw	s0,44(sp)
    2fa4:	03010413          	addi	s0,sp,48
    2fa8:	fca42e23          	sw	a0,-36(s0)
    2fac:	00058793          	mv	a5,a1
    2fb0:	fcc42a23          	sw	a2,-44(s0)
    2fb4:	fcf41d23          	sh	a5,-38(s0)
    ee_u32 total = 0, next = 0, i;
    2fb8:	fe042623          	sw	zero,-20(s0)
    2fbc:	fe042423          	sw	zero,-24(s0)
    ee_u8 *buf = 0;
    2fc0:	fe042023          	sw	zero,-32(s0)
#if CORE_DEBUG
    ee_u8 *start = p;
    ee_printf("State: %d,%d\n", size, seed);
#endif
    size--;
    2fc4:	fdc42783          	lw	a5,-36(s0)
    2fc8:	fff78793          	addi	a5,a5,-1
    2fcc:	fcf42e23          	sw	a5,-36(s0)
    next = 0;
    2fd0:	fe042423          	sw	zero,-24(s0)
    while ((total + next + 1) < size)
    2fd4:	1dc0006f          	j	31b0 <core_init_state+0x214>
    {
        if (next > 0)
    2fd8:	fe842783          	lw	a5,-24(s0)
    2fdc:	06078e63          	beqz	a5,3058 <core_init_state+0xbc>
        {
            for (i = 0; i < next; i++)
    2fe0:	fe042223          	sw	zero,-28(s0)
    2fe4:	0380006f          	j	301c <core_init_state+0x80>
                *(p + total + i) = buf[i];
    2fe8:	fe042703          	lw	a4,-32(s0)
    2fec:	fe442783          	lw	a5,-28(s0)
    2ff0:	00f70733          	add	a4,a4,a5
    2ff4:	fec42683          	lw	a3,-20(s0)
    2ff8:	fe442783          	lw	a5,-28(s0)
    2ffc:	00f687b3          	add	a5,a3,a5
    3000:	fd442683          	lw	a3,-44(s0)
    3004:	00f687b3          	add	a5,a3,a5
    3008:	00074703          	lbu	a4,0(a4)
    300c:	00e78023          	sb	a4,0(a5)
            for (i = 0; i < next; i++)
    3010:	fe442783          	lw	a5,-28(s0)
    3014:	00178793          	addi	a5,a5,1
    3018:	fef42223          	sw	a5,-28(s0)
    301c:	fe442703          	lw	a4,-28(s0)
    3020:	fe842783          	lw	a5,-24(s0)
    3024:	fcf762e3          	bltu	a4,a5,2fe8 <core_init_state+0x4c>
            *(p + total + i) = ',';
    3028:	fec42703          	lw	a4,-20(s0)
    302c:	fe442783          	lw	a5,-28(s0)
    3030:	00f707b3          	add	a5,a4,a5
    3034:	fd442703          	lw	a4,-44(s0)
    3038:	00f707b3          	add	a5,a4,a5
    303c:	02c00713          	li	a4,44
    3040:	00e78023          	sb	a4,0(a5)
            total += next + 1;
    3044:	fe842703          	lw	a4,-24(s0)
    3048:	fec42783          	lw	a5,-20(s0)
    304c:	00f707b3          	add	a5,a4,a5
    3050:	00178793          	addi	a5,a5,1
    3054:	fef42623          	sw	a5,-20(s0)
        }
        seed++;
    3058:	fda41783          	lh	a5,-38(s0)
    305c:	01079793          	slli	a5,a5,0x10
    3060:	0107d793          	srli	a5,a5,0x10
    3064:	00178793          	addi	a5,a5,1
    3068:	01079793          	slli	a5,a5,0x10
    306c:	0107d793          	srli	a5,a5,0x10
    3070:	fcf41d23          	sh	a5,-38(s0)
        switch (seed & 0x7)
    3074:	fda45783          	lhu	a5,-38(s0)
    3078:	0077f793          	andi	a5,a5,7
    307c:	00700713          	li	a4,7
    3080:	0ee78863          	beq	a5,a4,3170 <core_init_state+0x1d4>
    3084:	00700713          	li	a4,7
    3088:	12f74263          	blt	a4,a5,31ac <core_init_state+0x210>
    308c:	00600713          	li	a4,6
    3090:	10f74e63          	blt	a4,a5,31ac <core_init_state+0x210>
    3094:	00500713          	li	a4,5
    3098:	08e7de63          	bge	a5,a4,3134 <core_init_state+0x198>
    309c:	00200713          	li	a4,2
    30a0:	00f74663          	blt	a4,a5,30ac <core_init_state+0x110>
    30a4:	0007dc63          	bgez	a5,30bc <core_init_state+0x120>
    30a8:	1040006f          	j	31ac <core_init_state+0x210>
    30ac:	ffd78713          	addi	a4,a5,-3
    30b0:	00100793          	li	a5,1
    30b4:	0ee7ec63          	bltu	a5,a4,31ac <core_init_state+0x210>
    30b8:	0400006f          	j	30f8 <core_init_state+0x15c>
        {
            case 0: /* int */
            case 1: /* int */
            case 2: /* int */
                buf  = intpat[(seed >> 3) & 0x3];
    30bc:	fda41783          	lh	a5,-38(s0)
    30c0:	4037d793          	srai	a5,a5,0x3
    30c4:	01079793          	slli	a5,a5,0x10
    30c8:	4107d793          	srai	a5,a5,0x10
    30cc:	01079793          	slli	a5,a5,0x10
    30d0:	0107d793          	srli	a5,a5,0x10
    30d4:	0037f793          	andi	a5,a5,3
    30d8:	85018713          	addi	a4,gp,-1968 # 8010 <intpat>
    30dc:	00279793          	slli	a5,a5,0x2
    30e0:	00f707b3          	add	a5,a4,a5
    30e4:	0007a783          	lw	a5,0(a5)
    30e8:	fef42023          	sw	a5,-32(s0)
                next = 4;
    30ec:	00400793          	li	a5,4
    30f0:	fef42423          	sw	a5,-24(s0)
                break;
    30f4:	0bc0006f          	j	31b0 <core_init_state+0x214>
            case 3: /* float */
            case 4: /* float */
                buf  = floatpat[(seed >> 3) & 0x3];
    30f8:	fda41783          	lh	a5,-38(s0)
    30fc:	4037d793          	srai	a5,a5,0x3
    3100:	01079793          	slli	a5,a5,0x10
    3104:	4107d793          	srai	a5,a5,0x10
    3108:	01079793          	slli	a5,a5,0x10
    310c:	0107d793          	srli	a5,a5,0x10
    3110:	0037f793          	andi	a5,a5,3
    3114:	86018713          	addi	a4,gp,-1952 # 8020 <floatpat>
    3118:	00279793          	slli	a5,a5,0x2
    311c:	00f707b3          	add	a5,a4,a5
    3120:	0007a783          	lw	a5,0(a5)
    3124:	fef42023          	sw	a5,-32(s0)
                next = 8;
    3128:	00800793          	li	a5,8
    312c:	fef42423          	sw	a5,-24(s0)
                break;
    3130:	0800006f          	j	31b0 <core_init_state+0x214>
            case 5: /* scientific */
            case 6: /* scientific */
                buf  = scipat[(seed >> 3) & 0x3];
    3134:	fda41783          	lh	a5,-38(s0)
    3138:	4037d793          	srai	a5,a5,0x3
    313c:	01079793          	slli	a5,a5,0x10
    3140:	4107d793          	srai	a5,a5,0x10
    3144:	01079793          	slli	a5,a5,0x10
    3148:	0107d793          	srli	a5,a5,0x10
    314c:	0037f793          	andi	a5,a5,3
    3150:	87018713          	addi	a4,gp,-1936 # 8030 <scipat>
    3154:	00279793          	slli	a5,a5,0x2
    3158:	00f707b3          	add	a5,a4,a5
    315c:	0007a783          	lw	a5,0(a5)
    3160:	fef42023          	sw	a5,-32(s0)
                next = 8;
    3164:	00800793          	li	a5,8
    3168:	fef42423          	sw	a5,-24(s0)
                break;
    316c:	0440006f          	j	31b0 <core_init_state+0x214>
            case 7: /* invalid */
                buf  = errpat[(seed >> 3) & 0x3];
    3170:	fda41783          	lh	a5,-38(s0)
    3174:	4037d793          	srai	a5,a5,0x3
    3178:	01079793          	slli	a5,a5,0x10
    317c:	4107d793          	srai	a5,a5,0x10
    3180:	01079793          	slli	a5,a5,0x10
    3184:	0107d793          	srli	a5,a5,0x10
    3188:	0037f793          	andi	a5,a5,3
    318c:	88018713          	addi	a4,gp,-1920 # 8040 <errpat>
    3190:	00279793          	slli	a5,a5,0x2
    3194:	00f707b3          	add	a5,a4,a5
    3198:	0007a783          	lw	a5,0(a5)
    319c:	fef42023          	sw	a5,-32(s0)
                next = 8;
    31a0:	00800793          	li	a5,8
    31a4:	fef42423          	sw	a5,-24(s0)
                break;
    31a8:	0080006f          	j	31b0 <core_init_state+0x214>
            default: /* Never happen, just to make some compilers happy */
                break;
    31ac:	00000013          	nop
    while ((total + next + 1) < size)
    31b0:	fec42703          	lw	a4,-20(s0)
    31b4:	fe842783          	lw	a5,-24(s0)
    31b8:	00f707b3          	add	a5,a4,a5
    31bc:	00178793          	addi	a5,a5,1
    31c0:	fdc42703          	lw	a4,-36(s0)
    31c4:	e0e7eae3          	bltu	a5,a4,2fd8 <core_init_state+0x3c>
        }
    }
    size++;
    31c8:	fdc42783          	lw	a5,-36(s0)
    31cc:	00178793          	addi	a5,a5,1
    31d0:	fcf42e23          	sw	a5,-36(s0)
    while (total < size)
    31d4:	0200006f          	j	31f4 <core_init_state+0x258>
    { /* fill the rest with 0 */
        *(p + total) = 0;
    31d8:	fd442703          	lw	a4,-44(s0)
    31dc:	fec42783          	lw	a5,-20(s0)
    31e0:	00f707b3          	add	a5,a4,a5
    31e4:	00078023          	sb	zero,0(a5)
        total++;
    31e8:	fec42783          	lw	a5,-20(s0)
    31ec:	00178793          	addi	a5,a5,1
    31f0:	fef42623          	sw	a5,-20(s0)
    while (total < size)
    31f4:	fec42703          	lw	a4,-20(s0)
    31f8:	fdc42783          	lw	a5,-36(s0)
    31fc:	fcf76ee3          	bltu	a4,a5,31d8 <core_init_state+0x23c>
    }
#if CORE_DEBUG
    ee_printf("State Input: %s\n", start);
#endif
}
    3200:	00000013          	nop
    3204:	00000013          	nop
    3208:	02c12403          	lw	s0,44(sp)
    320c:	03010113          	addi	sp,sp,48
    3210:	00008067          	ret

00003214 <ee_isdigit>:

static ee_u8
ee_isdigit(ee_u8 c)
{
    3214:	fd010113          	addi	sp,sp,-48
    3218:	02812623          	sw	s0,44(sp)
    321c:	03010413          	addi	s0,sp,48
    3220:	00050793          	mv	a5,a0
    3224:	fcf40fa3          	sb	a5,-33(s0)
    ee_u8 retval;
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    3228:	fdf44783          	lbu	a5,-33(s0)
    322c:	0307b793          	sltiu	a5,a5,48
    3230:	0017c793          	xori	a5,a5,1
    3234:	0ff7f713          	zext.b	a4,a5
    3238:	fdf44783          	lbu	a5,-33(s0)
    323c:	03a7b793          	sltiu	a5,a5,58
    3240:	0ff7f793          	zext.b	a5,a5
    3244:	00f777b3          	and	a5,a4,a5
    3248:	0ff7f793          	zext.b	a5,a5
    324c:	fef407a3          	sb	a5,-17(s0)
    return retval;
    3250:	fef44783          	lbu	a5,-17(s0)
}
    3254:	00078513          	mv	a0,a5
    3258:	02c12403          	lw	s0,44(sp)
    325c:	03010113          	addi	sp,sp,48
    3260:	00008067          	ret

00003264 <core_state_transition>:
   end state is returned (either specific format determined or invalid).
*/

enum CORE_STATE
core_state_transition(ee_u8 **instr, ee_u32 *transition_count)
{
    3264:	fd010113          	addi	sp,sp,-48
    3268:	02112623          	sw	ra,44(sp)
    326c:	02812423          	sw	s0,40(sp)
    3270:	03010413          	addi	s0,sp,48
    3274:	fca42e23          	sw	a0,-36(s0)
    3278:	fcb42c23          	sw	a1,-40(s0)
    ee_u8 *         str = *instr;
    327c:	fdc42783          	lw	a5,-36(s0)
    3280:	0007a783          	lw	a5,0(a5)
    3284:	fef42623          	sw	a5,-20(s0)
    ee_u8           NEXT_SYMBOL;
    enum CORE_STATE state = CORE_START;
    3288:	fe042423          	sw	zero,-24(s0)
    for (; *str && state != CORE_INVALID; str++)
    328c:	3380006f          	j	35c4 <core_state_transition+0x360>
    {
        NEXT_SYMBOL = *str;
    3290:	fec42783          	lw	a5,-20(s0)
    3294:	0007c783          	lbu	a5,0(a5)
    3298:	fef403a3          	sb	a5,-25(s0)
        if (NEXT_SYMBOL == ',') /* end of this input */
    329c:	fe744703          	lbu	a4,-25(s0)
    32a0:	02c00793          	li	a5,44
    32a4:	00f71a63          	bne	a4,a5,32b8 <core_state_transition+0x54>
        {
            str++;
    32a8:	fec42783          	lw	a5,-20(s0)
    32ac:	00178793          	addi	a5,a5,1
    32b0:	fef42623          	sw	a5,-20(s0)
            break;
    32b4:	3280006f          	j	35dc <core_state_transition+0x378>
    32b8:	fe842703          	lw	a4,-24(s0)
    32bc:	00700793          	li	a5,7
    32c0:	2ce7ee63          	bltu	a5,a4,359c <core_state_transition+0x338>
    32c4:	fe842783          	lw	a5,-24(s0)
    32c8:	00279713          	slli	a4,a5,0x2
    32cc:	000087b7          	lui	a5,0x8
    32d0:	c2c78793          	addi	a5,a5,-980 # 7c2c <__subdf3+0xcb0>
    32d4:	00f707b3          	add	a5,a4,a5
    32d8:	0007a783          	lw	a5,0(a5)
    32dc:	00078067          	jr	a5
        }
        switch (state)
        {
            case CORE_START:
                if (ee_isdigit(NEXT_SYMBOL))
    32e0:	fe744783          	lbu	a5,-25(s0)
    32e4:	00078513          	mv	a0,a5
    32e8:	f2dff0ef          	jal	ra,3214 <ee_isdigit>
    32ec:	00050793          	mv	a5,a0
    32f0:	00078863          	beqz	a5,3300 <core_state_transition+0x9c>
                {
                    state = CORE_INT;
    32f4:	00400793          	li	a5,4
    32f8:	fef42423          	sw	a5,-24(s0)
    32fc:	05c0006f          	j	3358 <core_state_transition+0xf4>
                }
                else if (NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-')
    3300:	fe744703          	lbu	a4,-25(s0)
    3304:	02b00793          	li	a5,43
    3308:	00f70863          	beq	a4,a5,3318 <core_state_transition+0xb4>
    330c:	fe744703          	lbu	a4,-25(s0)
    3310:	02d00793          	li	a5,45
    3314:	00f71863          	bne	a4,a5,3324 <core_state_transition+0xc0>
                {
                    state = CORE_S1;
    3318:	00200793          	li	a5,2
    331c:	fef42423          	sw	a5,-24(s0)
    3320:	0380006f          	j	3358 <core_state_transition+0xf4>
                }
                else if (NEXT_SYMBOL == '.')
    3324:	fe744703          	lbu	a4,-25(s0)
    3328:	02e00793          	li	a5,46
    332c:	00f71863          	bne	a4,a5,333c <core_state_transition+0xd8>
                {
                    state = CORE_FLOAT;
    3330:	00500793          	li	a5,5
    3334:	fef42423          	sw	a5,-24(s0)
    3338:	0200006f          	j	3358 <core_state_transition+0xf4>
                }
                else
                {
                    state = CORE_INVALID;
    333c:	00100793          	li	a5,1
    3340:	fef42423          	sw	a5,-24(s0)
                    transition_count[CORE_INVALID]++;
    3344:	fd842783          	lw	a5,-40(s0)
    3348:	00478793          	addi	a5,a5,4
    334c:	0007a703          	lw	a4,0(a5)
    3350:	00170713          	addi	a4,a4,1
    3354:	00e7a023          	sw	a4,0(a5)
                }
                transition_count[CORE_START]++;
    3358:	fd842783          	lw	a5,-40(s0)
    335c:	0007a783          	lw	a5,0(a5)
    3360:	00178713          	addi	a4,a5,1
    3364:	fd842783          	lw	a5,-40(s0)
    3368:	00e7a023          	sw	a4,0(a5)
                break;
    336c:	24c0006f          	j	35b8 <core_state_transition+0x354>
            case CORE_S1:
                if (ee_isdigit(NEXT_SYMBOL))
    3370:	fe744783          	lbu	a5,-25(s0)
    3374:	00078513          	mv	a0,a5
    3378:	e9dff0ef          	jal	ra,3214 <ee_isdigit>
    337c:	00050793          	mv	a5,a0
    3380:	02078263          	beqz	a5,33a4 <core_state_transition+0x140>
                {
                    state = CORE_INT;
    3384:	00400793          	li	a5,4
    3388:	fef42423          	sw	a5,-24(s0)
                    transition_count[CORE_S1]++;
    338c:	fd842783          	lw	a5,-40(s0)
    3390:	00878793          	addi	a5,a5,8
    3394:	0007a703          	lw	a4,0(a5)
    3398:	00170713          	addi	a4,a4,1
    339c:	00e7a023          	sw	a4,0(a5)
                else
                {
                    state = CORE_INVALID;
                    transition_count[CORE_S1]++;
                }
                break;
    33a0:	2180006f          	j	35b8 <core_state_transition+0x354>
                else if (NEXT_SYMBOL == '.')
    33a4:	fe744703          	lbu	a4,-25(s0)
    33a8:	02e00793          	li	a5,46
    33ac:	02f71263          	bne	a4,a5,33d0 <core_state_transition+0x16c>
                    state = CORE_FLOAT;
    33b0:	00500793          	li	a5,5
    33b4:	fef42423          	sw	a5,-24(s0)
                    transition_count[CORE_S1]++;
    33b8:	fd842783          	lw	a5,-40(s0)
    33bc:	00878793          	addi	a5,a5,8
    33c0:	0007a703          	lw	a4,0(a5)
    33c4:	00170713          	addi	a4,a4,1
    33c8:	00e7a023          	sw	a4,0(a5)
                break;
    33cc:	1ec0006f          	j	35b8 <core_state_transition+0x354>
                    state = CORE_INVALID;
    33d0:	00100793          	li	a5,1
    33d4:	fef42423          	sw	a5,-24(s0)
                    transition_count[CORE_S1]++;
    33d8:	fd842783          	lw	a5,-40(s0)
    33dc:	00878793          	addi	a5,a5,8
    33e0:	0007a703          	lw	a4,0(a5)
    33e4:	00170713          	addi	a4,a4,1
    33e8:	00e7a023          	sw	a4,0(a5)
                break;
    33ec:	1cc0006f          	j	35b8 <core_state_transition+0x354>
            case CORE_INT:
                if (NEXT_SYMBOL == '.')
    33f0:	fe744703          	lbu	a4,-25(s0)
    33f4:	02e00793          	li	a5,46
    33f8:	02f71263          	bne	a4,a5,341c <core_state_transition+0x1b8>
                {
                    state = CORE_FLOAT;
    33fc:	00500793          	li	a5,5
    3400:	fef42423          	sw	a5,-24(s0)
                    transition_count[CORE_INT]++;
    3404:	fd842783          	lw	a5,-40(s0)
    3408:	01078793          	addi	a5,a5,16
    340c:	0007a703          	lw	a4,0(a5)
    3410:	00170713          	addi	a4,a4,1
    3414:	00e7a023          	sw	a4,0(a5)
                else if (!ee_isdigit(NEXT_SYMBOL))
                {
                    state = CORE_INVALID;
                    transition_count[CORE_INT]++;
                }
                break;
    3418:	18c0006f          	j	35a4 <core_state_transition+0x340>
                else if (!ee_isdigit(NEXT_SYMBOL))
    341c:	fe744783          	lbu	a5,-25(s0)
    3420:	00078513          	mv	a0,a5
    3424:	df1ff0ef          	jal	ra,3214 <ee_isdigit>
    3428:	00050793          	mv	a5,a0
    342c:	16079c63          	bnez	a5,35a4 <core_state_transition+0x340>
                    state = CORE_INVALID;
    3430:	00100793          	li	a5,1
    3434:	fef42423          	sw	a5,-24(s0)
                    transition_count[CORE_INT]++;
    3438:	fd842783          	lw	a5,-40(s0)
    343c:	01078793          	addi	a5,a5,16
    3440:	0007a703          	lw	a4,0(a5)
    3444:	00170713          	addi	a4,a4,1
    3448:	00e7a023          	sw	a4,0(a5)
                break;
    344c:	1580006f          	j	35a4 <core_state_transition+0x340>
            case CORE_FLOAT:
                if (NEXT_SYMBOL == 'E' || NEXT_SYMBOL == 'e')
    3450:	fe744703          	lbu	a4,-25(s0)
    3454:	04500793          	li	a5,69
    3458:	00f70863          	beq	a4,a5,3468 <core_state_transition+0x204>
    345c:	fe744703          	lbu	a4,-25(s0)
    3460:	06500793          	li	a5,101
    3464:	02f71263          	bne	a4,a5,3488 <core_state_transition+0x224>
                {
                    state = CORE_S2;
    3468:	00300793          	li	a5,3
    346c:	fef42423          	sw	a5,-24(s0)
                    transition_count[CORE_FLOAT]++;
    3470:	fd842783          	lw	a5,-40(s0)
    3474:	01478793          	addi	a5,a5,20
    3478:	0007a703          	lw	a4,0(a5)
    347c:	00170713          	addi	a4,a4,1
    3480:	00e7a023          	sw	a4,0(a5)
                else if (!ee_isdigit(NEXT_SYMBOL))
                {
                    state = CORE_INVALID;
                    transition_count[CORE_FLOAT]++;
                }
                break;
    3484:	1280006f          	j	35ac <core_state_transition+0x348>
                else if (!ee_isdigit(NEXT_SYMBOL))
    3488:	fe744783          	lbu	a5,-25(s0)
    348c:	00078513          	mv	a0,a5
    3490:	d85ff0ef          	jal	ra,3214 <ee_isdigit>
    3494:	00050793          	mv	a5,a0
    3498:	10079a63          	bnez	a5,35ac <core_state_transition+0x348>
                    state = CORE_INVALID;
    349c:	00100793          	li	a5,1
    34a0:	fef42423          	sw	a5,-24(s0)
                    transition_count[CORE_FLOAT]++;
    34a4:	fd842783          	lw	a5,-40(s0)
    34a8:	01478793          	addi	a5,a5,20
    34ac:	0007a703          	lw	a4,0(a5)
    34b0:	00170713          	addi	a4,a4,1
    34b4:	00e7a023          	sw	a4,0(a5)
                break;
    34b8:	0f40006f          	j	35ac <core_state_transition+0x348>
            case CORE_S2:
                if (NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-')
    34bc:	fe744703          	lbu	a4,-25(s0)
    34c0:	02b00793          	li	a5,43
    34c4:	00f70863          	beq	a4,a5,34d4 <core_state_transition+0x270>
    34c8:	fe744703          	lbu	a4,-25(s0)
    34cc:	02d00793          	li	a5,45
    34d0:	02f71263          	bne	a4,a5,34f4 <core_state_transition+0x290>
                {
                    state = CORE_EXPONENT;
    34d4:	00600793          	li	a5,6
    34d8:	fef42423          	sw	a5,-24(s0)
                    transition_count[CORE_S2]++;
    34dc:	fd842783          	lw	a5,-40(s0)
    34e0:	00c78793          	addi	a5,a5,12
    34e4:	0007a703          	lw	a4,0(a5)
    34e8:	00170713          	addi	a4,a4,1
    34ec:	00e7a023          	sw	a4,0(a5)
                else
                {
                    state = CORE_INVALID;
                    transition_count[CORE_S2]++;
                }
                break;
    34f0:	0c80006f          	j	35b8 <core_state_transition+0x354>
                    state = CORE_INVALID;
    34f4:	00100793          	li	a5,1
    34f8:	fef42423          	sw	a5,-24(s0)
                    transition_count[CORE_S2]++;
    34fc:	fd842783          	lw	a5,-40(s0)
    3500:	00c78793          	addi	a5,a5,12
    3504:	0007a703          	lw	a4,0(a5)
    3508:	00170713          	addi	a4,a4,1
    350c:	00e7a023          	sw	a4,0(a5)
                break;
    3510:	0a80006f          	j	35b8 <core_state_transition+0x354>
            case CORE_EXPONENT:
                if (ee_isdigit(NEXT_SYMBOL))
    3514:	fe744783          	lbu	a5,-25(s0)
    3518:	00078513          	mv	a0,a5
    351c:	cf9ff0ef          	jal	ra,3214 <ee_isdigit>
    3520:	00050793          	mv	a5,a0
    3524:	02078263          	beqz	a5,3548 <core_state_transition+0x2e4>
                {
                    state = CORE_SCIENTIFIC;
    3528:	00700793          	li	a5,7
    352c:	fef42423          	sw	a5,-24(s0)
                    transition_count[CORE_EXPONENT]++;
    3530:	fd842783          	lw	a5,-40(s0)
    3534:	01878793          	addi	a5,a5,24
    3538:	0007a703          	lw	a4,0(a5)
    353c:	00170713          	addi	a4,a4,1
    3540:	00e7a023          	sw	a4,0(a5)
                else
                {
                    state = CORE_INVALID;
                    transition_count[CORE_EXPONENT]++;
                }
                break;
    3544:	0740006f          	j	35b8 <core_state_transition+0x354>
                    state = CORE_INVALID;
    3548:	00100793          	li	a5,1
    354c:	fef42423          	sw	a5,-24(s0)
                    transition_count[CORE_EXPONENT]++;
    3550:	fd842783          	lw	a5,-40(s0)
    3554:	01878793          	addi	a5,a5,24
    3558:	0007a703          	lw	a4,0(a5)
    355c:	00170713          	addi	a4,a4,1
    3560:	00e7a023          	sw	a4,0(a5)
                break;
    3564:	0540006f          	j	35b8 <core_state_transition+0x354>
            case CORE_SCIENTIFIC:
                if (!ee_isdigit(NEXT_SYMBOL))
    3568:	fe744783          	lbu	a5,-25(s0)
    356c:	00078513          	mv	a0,a5
    3570:	ca5ff0ef          	jal	ra,3214 <ee_isdigit>
    3574:	00050793          	mv	a5,a0
    3578:	02079e63          	bnez	a5,35b4 <core_state_transition+0x350>
                {
                    state = CORE_INVALID;
    357c:	00100793          	li	a5,1
    3580:	fef42423          	sw	a5,-24(s0)
                    transition_count[CORE_INVALID]++;
    3584:	fd842783          	lw	a5,-40(s0)
    3588:	00478793          	addi	a5,a5,4
    358c:	0007a703          	lw	a4,0(a5)
    3590:	00170713          	addi	a4,a4,1
    3594:	00e7a023          	sw	a4,0(a5)
                }
                break;
    3598:	01c0006f          	j	35b4 <core_state_transition+0x350>
            default:
                break;
    359c:	00000013          	nop
    35a0:	0180006f          	j	35b8 <core_state_transition+0x354>
                break;
    35a4:	00000013          	nop
    35a8:	0100006f          	j	35b8 <core_state_transition+0x354>
                break;
    35ac:	00000013          	nop
    35b0:	0080006f          	j	35b8 <core_state_transition+0x354>
                break;
    35b4:	00000013          	nop
    for (; *str && state != CORE_INVALID; str++)
    35b8:	fec42783          	lw	a5,-20(s0)
    35bc:	00178793          	addi	a5,a5,1
    35c0:	fef42623          	sw	a5,-20(s0)
    35c4:	fec42783          	lw	a5,-20(s0)
    35c8:	0007c783          	lbu	a5,0(a5)
    35cc:	00078863          	beqz	a5,35dc <core_state_transition+0x378>
    35d0:	fe842703          	lw	a4,-24(s0)
    35d4:	00100793          	li	a5,1
    35d8:	caf71ce3          	bne	a4,a5,3290 <core_state_transition+0x2c>
        }
    }
    *instr = str;
    35dc:	fdc42783          	lw	a5,-36(s0)
    35e0:	fec42703          	lw	a4,-20(s0)
    35e4:	00e7a023          	sw	a4,0(a5)
    return state;
    35e8:	fe842783          	lw	a5,-24(s0)
}
    35ec:	00078513          	mv	a0,a5
    35f0:	02c12083          	lw	ra,44(sp)
    35f4:	02812403          	lw	s0,40(sp)
    35f8:	03010113          	addi	sp,sp,48
    35fc:	00008067          	ret

00003600 <get_seed_32>:
extern volatile ee_s32 seed3_volatile;
extern volatile ee_s32 seed4_volatile;
extern volatile ee_s32 seed5_volatile;
ee_s32
get_seed_32(int i)
{
    3600:	fd010113          	addi	sp,sp,-48
    3604:	02812623          	sw	s0,44(sp)
    3608:	03010413          	addi	s0,sp,48
    360c:	fca42e23          	sw	a0,-36(s0)
    3610:	fdc42703          	lw	a4,-36(s0)
    3614:	00500793          	li	a5,5
    3618:	06e7e063          	bltu	a5,a4,3678 <get_seed_32+0x78>
    361c:	fdc42783          	lw	a5,-36(s0)
    3620:	00279713          	slli	a4,a5,0x2
    3624:	000087b7          	lui	a5,0x8
    3628:	c4c78793          	addi	a5,a5,-948 # 7c4c <__subdf3+0xcd0>
    362c:	00f707b3          	add	a5,a4,a5
    3630:	0007a783          	lw	a5,0(a5)
    3634:	00078067          	jr	a5
    ee_s32 retval;
    switch (i)
    {
        case 1:
            retval = seed1_volatile;
    3638:	cc01a783          	lw	a5,-832(gp) # 8480 <seed1_volatile>
    363c:	fef42623          	sw	a5,-20(s0)
            break;
    3640:	0400006f          	j	3680 <get_seed_32+0x80>
        case 2:
            retval = seed2_volatile;
    3644:	cc41a783          	lw	a5,-828(gp) # 8484 <seed2_volatile>
    3648:	fef42623          	sw	a5,-20(s0)
            break;
    364c:	0340006f          	j	3680 <get_seed_32+0x80>
        case 3:
            retval = seed3_volatile;
    3650:	000087b7          	lui	a5,0x8
    3654:	fc87a783          	lw	a5,-56(a5) # 7fc8 <seed3_volatile>
    3658:	fef42623          	sw	a5,-20(s0)
            break;
    365c:	0240006f          	j	3680 <get_seed_32+0x80>
        case 4:
            retval = seed4_volatile;
    3660:	cc81a783          	lw	a5,-824(gp) # 8488 <seed4_volatile>
    3664:	fef42623          	sw	a5,-20(s0)
            break;
    3668:	0180006f          	j	3680 <get_seed_32+0x80>
        case 5:
            retval = seed5_volatile;
    366c:	ccc1a783          	lw	a5,-820(gp) # 848c <seed5_volatile>
    3670:	fef42623          	sw	a5,-20(s0)
            break;
    3674:	00c0006f          	j	3680 <get_seed_32+0x80>
        default:
            retval = 0;
    3678:	fe042623          	sw	zero,-20(s0)
            break;
    367c:	00000013          	nop
    }
    return retval;
    3680:	fec42783          	lw	a5,-20(s0)
}
    3684:	00078513          	mv	a0,a5
    3688:	02c12403          	lw	s0,44(sp)
    368c:	03010113          	addi	sp,sp,48
    3690:	00008067          	ret

00003694 <crcu8>:
        Service functions to calculate 16b CRC code.

*/
ee_u16
crcu8(ee_u8 data, ee_u16 crc)
{
    3694:	fd010113          	addi	sp,sp,-48
    3698:	02812623          	sw	s0,44(sp)
    369c:	03010413          	addi	s0,sp,48
    36a0:	00050793          	mv	a5,a0
    36a4:	00058713          	mv	a4,a1
    36a8:	fcf40fa3          	sb	a5,-33(s0)
    36ac:	00070793          	mv	a5,a4
    36b0:	fcf41e23          	sh	a5,-36(s0)
    ee_u8 i = 0, x16 = 0, carry = 0;
    36b4:	fe0407a3          	sb	zero,-17(s0)
    36b8:	fe0406a3          	sb	zero,-19(s0)
    36bc:	fe040723          	sb	zero,-18(s0)

    for (i = 0; i < 8; i++)
    36c0:	fe0407a3          	sb	zero,-17(s0)
    36c4:	0b00006f          	j	3774 <crcu8+0xe0>
    {
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    36c8:	fdc45783          	lhu	a5,-36(s0)
    36cc:	01879713          	slli	a4,a5,0x18
    36d0:	41875713          	srai	a4,a4,0x18
    36d4:	fdf40783          	lb	a5,-33(s0)
    36d8:	00f747b3          	xor	a5,a4,a5
    36dc:	01879793          	slli	a5,a5,0x18
    36e0:	4187d793          	srai	a5,a5,0x18
    36e4:	0ff7f793          	zext.b	a5,a5
    36e8:	0017f793          	andi	a5,a5,1
    36ec:	fef406a3          	sb	a5,-19(s0)
        data >>= 1;
    36f0:	fdf44783          	lbu	a5,-33(s0)
    36f4:	0017d793          	srli	a5,a5,0x1
    36f8:	fcf40fa3          	sb	a5,-33(s0)

        if (x16 == 1)
    36fc:	fed44703          	lbu	a4,-19(s0)
    3700:	00100793          	li	a5,1
    3704:	02f71263          	bne	a4,a5,3728 <crcu8+0x94>
        {
            crc ^= 0x4002;
    3708:	fdc45703          	lhu	a4,-36(s0)
    370c:	000047b7          	lui	a5,0x4
    3710:	00278793          	addi	a5,a5,2 # 4002 <skip_atoi+0x5e>
    3714:	00f747b3          	xor	a5,a4,a5
    3718:	fcf41e23          	sh	a5,-36(s0)
            carry = 1;
    371c:	00100793          	li	a5,1
    3720:	fef40723          	sb	a5,-18(s0)
    3724:	0080006f          	j	372c <crcu8+0x98>
        }
        else
            carry = 0;
    3728:	fe040723          	sb	zero,-18(s0)
        crc >>= 1;
    372c:	fdc45783          	lhu	a5,-36(s0)
    3730:	0017d793          	srli	a5,a5,0x1
    3734:	fcf41e23          	sh	a5,-36(s0)
        if (carry)
    3738:	fee44783          	lbu	a5,-18(s0)
    373c:	00078c63          	beqz	a5,3754 <crcu8+0xc0>
            crc |= 0x8000;
    3740:	fdc45703          	lhu	a4,-36(s0)
    3744:	ffff87b7          	lui	a5,0xffff8
    3748:	00f767b3          	or	a5,a4,a5
    374c:	fcf41e23          	sh	a5,-36(s0)
    3750:	0180006f          	j	3768 <crcu8+0xd4>
        else
            crc &= 0x7fff;
    3754:	fdc45703          	lhu	a4,-36(s0)
    3758:	000087b7          	lui	a5,0x8
    375c:	fff78793          	addi	a5,a5,-1 # 7fff <state_known_crc+0x7>
    3760:	00f777b3          	and	a5,a4,a5
    3764:	fcf41e23          	sh	a5,-36(s0)
    for (i = 0; i < 8; i++)
    3768:	fef44783          	lbu	a5,-17(s0)
    376c:	00178793          	addi	a5,a5,1
    3770:	fef407a3          	sb	a5,-17(s0)
    3774:	fef44703          	lbu	a4,-17(s0)
    3778:	00700793          	li	a5,7
    377c:	f4e7f6e3          	bgeu	a5,a4,36c8 <crcu8+0x34>
    }
    return crc;
    3780:	fdc45783          	lhu	a5,-36(s0)
}
    3784:	00078513          	mv	a0,a5
    3788:	02c12403          	lw	s0,44(sp)
    378c:	03010113          	addi	sp,sp,48
    3790:	00008067          	ret

00003794 <crcu16>:
ee_u16
crcu16(ee_u16 newval, ee_u16 crc)
{
    3794:	fe010113          	addi	sp,sp,-32
    3798:	00112e23          	sw	ra,28(sp)
    379c:	00812c23          	sw	s0,24(sp)
    37a0:	02010413          	addi	s0,sp,32
    37a4:	00050793          	mv	a5,a0
    37a8:	00058713          	mv	a4,a1
    37ac:	fef41723          	sh	a5,-18(s0)
    37b0:	00070793          	mv	a5,a4
    37b4:	fef41623          	sh	a5,-20(s0)
    crc = crcu8((ee_u8)(newval), crc);
    37b8:	fee45783          	lhu	a5,-18(s0)
    37bc:	0ff7f793          	zext.b	a5,a5
    37c0:	fec45703          	lhu	a4,-20(s0)
    37c4:	00070593          	mv	a1,a4
    37c8:	00078513          	mv	a0,a5
    37cc:	ec9ff0ef          	jal	ra,3694 <crcu8>
    37d0:	00050793          	mv	a5,a0
    37d4:	fef41623          	sh	a5,-20(s0)
    crc = crcu8((ee_u8)((newval) >> 8), crc);
    37d8:	fee45783          	lhu	a5,-18(s0)
    37dc:	0087d793          	srli	a5,a5,0x8
    37e0:	01079793          	slli	a5,a5,0x10
    37e4:	0107d793          	srli	a5,a5,0x10
    37e8:	0ff7f793          	zext.b	a5,a5
    37ec:	fec45703          	lhu	a4,-20(s0)
    37f0:	00070593          	mv	a1,a4
    37f4:	00078513          	mv	a0,a5
    37f8:	e9dff0ef          	jal	ra,3694 <crcu8>
    37fc:	00050793          	mv	a5,a0
    3800:	fef41623          	sh	a5,-20(s0)
    return crc;
    3804:	fec45783          	lhu	a5,-20(s0)
}
    3808:	00078513          	mv	a0,a5
    380c:	01c12083          	lw	ra,28(sp)
    3810:	01812403          	lw	s0,24(sp)
    3814:	02010113          	addi	sp,sp,32
    3818:	00008067          	ret

0000381c <crcu32>:
ee_u16
crcu32(ee_u32 newval, ee_u16 crc)
{
    381c:	fe010113          	addi	sp,sp,-32
    3820:	00112e23          	sw	ra,28(sp)
    3824:	00812c23          	sw	s0,24(sp)
    3828:	02010413          	addi	s0,sp,32
    382c:	fea42623          	sw	a0,-20(s0)
    3830:	00058793          	mv	a5,a1
    3834:	fef41523          	sh	a5,-22(s0)
    crc = crc16((ee_s16)newval, crc);
    3838:	fec42783          	lw	a5,-20(s0)
    383c:	01079793          	slli	a5,a5,0x10
    3840:	4107d793          	srai	a5,a5,0x10
    3844:	fea45703          	lhu	a4,-22(s0)
    3848:	00070593          	mv	a1,a4
    384c:	00078513          	mv	a0,a5
    3850:	04c000ef          	jal	ra,389c <crc16>
    3854:	00050793          	mv	a5,a0
    3858:	fef41523          	sh	a5,-22(s0)
    crc = crc16((ee_s16)(newval >> 16), crc);
    385c:	fec42783          	lw	a5,-20(s0)
    3860:	0107d793          	srli	a5,a5,0x10
    3864:	01079793          	slli	a5,a5,0x10
    3868:	4107d793          	srai	a5,a5,0x10
    386c:	fea45703          	lhu	a4,-22(s0)
    3870:	00070593          	mv	a1,a4
    3874:	00078513          	mv	a0,a5
    3878:	024000ef          	jal	ra,389c <crc16>
    387c:	00050793          	mv	a5,a0
    3880:	fef41523          	sh	a5,-22(s0)
    return crc;
    3884:	fea45783          	lhu	a5,-22(s0)
}
    3888:	00078513          	mv	a0,a5
    388c:	01c12083          	lw	ra,28(sp)
    3890:	01812403          	lw	s0,24(sp)
    3894:	02010113          	addi	sp,sp,32
    3898:	00008067          	ret

0000389c <crc16>:
ee_u16
crc16(ee_s16 newval, ee_u16 crc)
{
    389c:	fe010113          	addi	sp,sp,-32
    38a0:	00112e23          	sw	ra,28(sp)
    38a4:	00812c23          	sw	s0,24(sp)
    38a8:	02010413          	addi	s0,sp,32
    38ac:	00050793          	mv	a5,a0
    38b0:	00058713          	mv	a4,a1
    38b4:	fef41723          	sh	a5,-18(s0)
    38b8:	00070793          	mv	a5,a4
    38bc:	fef41623          	sh	a5,-20(s0)
    return crcu16((ee_u16)newval, crc);
    38c0:	fee45783          	lhu	a5,-18(s0)
    38c4:	fec45703          	lhu	a4,-20(s0)
    38c8:	00070593          	mv	a1,a4
    38cc:	00078513          	mv	a0,a5
    38d0:	ec5ff0ef          	jal	ra,3794 <crcu16>
    38d4:	00050793          	mv	a5,a0
}
    38d8:	00078513          	mv	a0,a5
    38dc:	01c12083          	lw	ra,28(sp)
    38e0:	01812403          	lw	s0,24(sp)
    38e4:	02010113          	addi	sp,sp,32
    38e8:	00008067          	ret

000038ec <check_data_types>:

ee_u8
check_data_types()
{
    38ec:	fe010113          	addi	sp,sp,-32
    38f0:	00112e23          	sw	ra,28(sp)
    38f4:	00812c23          	sw	s0,24(sp)
    38f8:	02010413          	addi	s0,sp,32
    ee_u8 retval = 0;
    38fc:	fe0407a3          	sb	zero,-17(s0)
    {
        ee_printf(
            "ERROR: ee_ptr_int is not a datatype that holds an int pointer!\n");
        retval++;
    }
    if (retval > 0)
    3900:	fef44783          	lbu	a5,-17(s0)
    3904:	00078863          	beqz	a5,3914 <check_data_types+0x28>
    {
        ee_printf("ERROR: Please modify the datatypes in core_portme.h!\n");
    3908:	000087b7          	lui	a5,0x8
    390c:	c6478513          	addi	a0,a5,-924 # 7c64 <__subdf3+0xce8>
    3910:	574010ef          	jal	ra,4e84 <ee_printf>
    }
    return retval;
    3914:	fef44783          	lbu	a5,-17(s0)
}
    3918:	00078513          	mv	a0,a5
    391c:	01c12083          	lw	ra,28(sp)
    3920:	01812403          	lw	s0,24(sp)
    3924:	02010113          	addi	sp,sp,32
    3928:	00008067          	ret

0000392c <cvt>:
#define CVTBUFSIZE 80
static char CVTBUF[CVTBUFSIZE];

static char *
cvt(double arg, int ndigits, int *decpt, int *sign, char *buf, int eflag)
{
    392c:	fb010113          	addi	sp,sp,-80
    3930:	04112623          	sw	ra,76(sp)
    3934:	04812423          	sw	s0,72(sp)
    3938:	05010413          	addi	s0,sp,80
    393c:	fca42423          	sw	a0,-56(s0)
    3940:	fcb42623          	sw	a1,-52(s0)
    3944:	fcc42223          	sw	a2,-60(s0)
    3948:	fcd42023          	sw	a3,-64(s0)
    394c:	fae42e23          	sw	a4,-68(s0)
    3950:	faf42c23          	sw	a5,-72(s0)
    3954:	fb042a23          	sw	a6,-76(s0)
    int    r2;
    double fi, fj;
    char * p, *p1;

    if (ndigits < 0)
    3958:	fc442783          	lw	a5,-60(s0)
    395c:	0007d463          	bgez	a5,3964 <cvt+0x38>
        ndigits = 0;
    3960:	fc042223          	sw	zero,-60(s0)
    if (ndigits >= CVTBUFSIZE - 1)
    3964:	fc442703          	lw	a4,-60(s0)
    3968:	04e00793          	li	a5,78
    396c:	00e7d663          	bge	a5,a4,3978 <cvt+0x4c>
        ndigits = CVTBUFSIZE - 2;
    3970:	04e00793          	li	a5,78
    3974:	fcf42223          	sw	a5,-60(s0)
    r2    = 0;
    3978:	fe042623          	sw	zero,-20(s0)
    *sign = 0;
    397c:	fbc42783          	lw	a5,-68(s0)
    3980:	0007a023          	sw	zero,0(a5)
    p     = &buf[0];
    3984:	fb842783          	lw	a5,-72(s0)
    3988:	fef42423          	sw	a5,-24(s0)
    if (arg < 0)
    398c:	00000613          	li	a2,0
    3990:	00000693          	li	a3,0
    3994:	fc842503          	lw	a0,-56(s0)
    3998:	fcc42583          	lw	a1,-52(s0)
    399c:	6cc020ef          	jal	ra,6068 <__ledf2>
    39a0:	00050793          	mv	a5,a0
    39a4:	0207d463          	bgez	a5,39cc <cvt+0xa0>
    {
        *sign = 1;
    39a8:	fbc42783          	lw	a5,-68(s0)
    39ac:	00100713          	li	a4,1
    39b0:	00e7a023          	sw	a4,0(a5)
        arg   = -arg;
    39b4:	fc842783          	lw	a5,-56(s0)
    39b8:	fcf42423          	sw	a5,-56(s0)
    39bc:	fcc42703          	lw	a4,-52(s0)
    39c0:	800007b7          	lui	a5,0x80000
    39c4:	00f747b3          	xor	a5,a4,a5
    39c8:	fcf42623          	sw	a5,-52(s0)
    }
    arg = modf(arg, &fi);
    39cc:	fd840793          	addi	a5,s0,-40
    39d0:	00078613          	mv	a2,a5
    39d4:	fc842503          	lw	a0,-56(s0)
    39d8:	fcc42583          	lw	a1,-52(s0)
    39dc:	144030ef          	jal	ra,6b20 <modf>
    39e0:	fca42423          	sw	a0,-56(s0)
    39e4:	fcb42623          	sw	a1,-52(s0)
    p1  = &buf[CVTBUFSIZE];
    39e8:	fb842783          	lw	a5,-72(s0)
    39ec:	05078793          	addi	a5,a5,80 # 80000050 <RAM_SIZE+0x7fff0050>
    39f0:	fef42223          	sw	a5,-28(s0)

    if (fi != 0)
    39f4:	fd842703          	lw	a4,-40(s0)
    39f8:	fdc42783          	lw	a5,-36(s0)
    39fc:	00000613          	li	a2,0
    3a00:	00000693          	li	a3,0
    3a04:	00070513          	mv	a0,a4
    3a08:	00078593          	mv	a1,a5
    3a0c:	4ec020ef          	jal	ra,5ef8 <__eqdf2>
    3a10:	00050793          	mv	a5,a0
    3a14:	14078063          	beqz	a5,3b54 <cvt+0x228>
    {
        p1 = &buf[CVTBUFSIZE];
    3a18:	fb842783          	lw	a5,-72(s0)
    3a1c:	05078793          	addi	a5,a5,80
    3a20:	fef42223          	sw	a5,-28(s0)
        while (fi != 0)
    3a24:	0d40006f          	j	3af8 <cvt+0x1cc>
        {
            fj    = modf(fi / 10, &fi);
    3a28:	fd842703          	lw	a4,-40(s0)
    3a2c:	fdc42783          	lw	a5,-36(s0)
    3a30:	000086b7          	lui	a3,0x8
    3a34:	ca06a603          	lw	a2,-864(a3) # 7ca0 <__subdf3+0xd24>
    3a38:	ca46a683          	lw	a3,-860(a3)
    3a3c:	00070513          	mv	a0,a4
    3a40:	00078593          	mv	a1,a5
    3a44:	4d1010ef          	jal	ra,5714 <__divdf3>
    3a48:	00050713          	mv	a4,a0
    3a4c:	00058793          	mv	a5,a1
    3a50:	fd840693          	addi	a3,s0,-40
    3a54:	00068613          	mv	a2,a3
    3a58:	00070513          	mv	a0,a4
    3a5c:	00078593          	mv	a1,a5
    3a60:	0c0030ef          	jal	ra,6b20 <modf>
    3a64:	00050713          	mv	a4,a0
    3a68:	00058793          	mv	a5,a1
    3a6c:	fce42823          	sw	a4,-48(s0)
    3a70:	fcf42a23          	sw	a5,-44(s0)
            *--p1 = (int)((fj + .03) * 10) + '0';
    3a74:	fd042703          	lw	a4,-48(s0)
    3a78:	fd442783          	lw	a5,-44(s0)
    3a7c:	000086b7          	lui	a3,0x8
    3a80:	ca86a603          	lw	a2,-856(a3) # 7ca8 <__subdf3+0xd2c>
    3a84:	cac6a683          	lw	a3,-852(a3)
    3a88:	00070513          	mv	a0,a4
    3a8c:	00078593          	mv	a1,a5
    3a90:	4ac010ef          	jal	ra,4f3c <__adddf3>
    3a94:	00050713          	mv	a4,a0
    3a98:	00058793          	mv	a5,a1
    3a9c:	00070513          	mv	a0,a4
    3aa0:	00078593          	mv	a1,a5
    3aa4:	000087b7          	lui	a5,0x8
    3aa8:	ca07a603          	lw	a2,-864(a5) # 7ca0 <__subdf3+0xd24>
    3aac:	ca47a683          	lw	a3,-860(a5)
    3ab0:	69c020ef          	jal	ra,614c <__muldf3>
    3ab4:	00050713          	mv	a4,a0
    3ab8:	00058793          	mv	a5,a1
    3abc:	00070513          	mv	a0,a4
    3ac0:	00078593          	mv	a1,a5
    3ac4:	515020ef          	jal	ra,67d8 <__fixdfsi>
    3ac8:	00050793          	mv	a5,a0
    3acc:	0ff7f793          	zext.b	a5,a5
    3ad0:	fe442703          	lw	a4,-28(s0)
    3ad4:	fff70713          	addi	a4,a4,-1
    3ad8:	fee42223          	sw	a4,-28(s0)
    3adc:	03078793          	addi	a5,a5,48
    3ae0:	0ff7f713          	zext.b	a4,a5
    3ae4:	fe442783          	lw	a5,-28(s0)
    3ae8:	00e78023          	sb	a4,0(a5)
            r2++;
    3aec:	fec42783          	lw	a5,-20(s0)
    3af0:	00178793          	addi	a5,a5,1
    3af4:	fef42623          	sw	a5,-20(s0)
        while (fi != 0)
    3af8:	fd842703          	lw	a4,-40(s0)
    3afc:	fdc42783          	lw	a5,-36(s0)
    3b00:	00000613          	li	a2,0
    3b04:	00000693          	li	a3,0
    3b08:	00070513          	mv	a0,a4
    3b0c:	00078593          	mv	a1,a5
    3b10:	3e8020ef          	jal	ra,5ef8 <__eqdf2>
    3b14:	00050793          	mv	a5,a0
    3b18:	f00798e3          	bnez	a5,3a28 <cvt+0xfc>
        }
        while (p1 < &buf[CVTBUFSIZE])
    3b1c:	0240006f          	j	3b40 <cvt+0x214>
            *p++ = *p1++;
    3b20:	fe442703          	lw	a4,-28(s0)
    3b24:	00170793          	addi	a5,a4,1
    3b28:	fef42223          	sw	a5,-28(s0)
    3b2c:	fe842783          	lw	a5,-24(s0)
    3b30:	00178693          	addi	a3,a5,1
    3b34:	fed42423          	sw	a3,-24(s0)
    3b38:	00074703          	lbu	a4,0(a4)
    3b3c:	00e78023          	sb	a4,0(a5)
        while (p1 < &buf[CVTBUFSIZE])
    3b40:	fb842783          	lw	a5,-72(s0)
    3b44:	05078793          	addi	a5,a5,80
    3b48:	fe442703          	lw	a4,-28(s0)
    3b4c:	fcf76ae3          	bltu	a4,a5,3b20 <cvt+0x1f4>
    3b50:	0900006f          	j	3be0 <cvt+0x2b4>
    }
    else if (arg > 0)
    3b54:	00000613          	li	a2,0
    3b58:	00000693          	li	a3,0
    3b5c:	fc842503          	lw	a0,-56(s0)
    3b60:	fcc42583          	lw	a1,-52(s0)
    3b64:	420020ef          	jal	ra,5f84 <__gedf2>
    3b68:	00050793          	mv	a5,a0
    3b6c:	06f05a63          	blez	a5,3be0 <cvt+0x2b4>
    {
        while ((fj = arg * 10) < 1)
    3b70:	0200006f          	j	3b90 <cvt+0x264>
        {
            arg = fj;
    3b74:	fd042703          	lw	a4,-48(s0)
    3b78:	fd442783          	lw	a5,-44(s0)
    3b7c:	fce42423          	sw	a4,-56(s0)
    3b80:	fcf42623          	sw	a5,-52(s0)
            r2--;
    3b84:	fec42783          	lw	a5,-20(s0)
    3b88:	fff78793          	addi	a5,a5,-1
    3b8c:	fef42623          	sw	a5,-20(s0)
        while ((fj = arg * 10) < 1)
    3b90:	000087b7          	lui	a5,0x8
    3b94:	ca07a603          	lw	a2,-864(a5) # 7ca0 <__subdf3+0xd24>
    3b98:	ca47a683          	lw	a3,-860(a5)
    3b9c:	fc842503          	lw	a0,-56(s0)
    3ba0:	fcc42583          	lw	a1,-52(s0)
    3ba4:	5a8020ef          	jal	ra,614c <__muldf3>
    3ba8:	00050713          	mv	a4,a0
    3bac:	00058793          	mv	a5,a1
    3bb0:	fce42823          	sw	a4,-48(s0)
    3bb4:	fcf42a23          	sw	a5,-44(s0)
    3bb8:	fd042703          	lw	a4,-48(s0)
    3bbc:	fd442783          	lw	a5,-44(s0)
    3bc0:	000086b7          	lui	a3,0x8
    3bc4:	cb06a603          	lw	a2,-848(a3) # 7cb0 <__subdf3+0xd34>
    3bc8:	cb46a683          	lw	a3,-844(a3)
    3bcc:	00070513          	mv	a0,a4
    3bd0:	00078593          	mv	a1,a5
    3bd4:	494020ef          	jal	ra,6068 <__ledf2>
    3bd8:	00050793          	mv	a5,a0
    3bdc:	f807cce3          	bltz	a5,3b74 <cvt+0x248>
        }
    }
    p1 = &buf[ndigits];
    3be0:	fc442783          	lw	a5,-60(s0)
    3be4:	fb842703          	lw	a4,-72(s0)
    3be8:	00f707b3          	add	a5,a4,a5
    3bec:	fef42223          	sw	a5,-28(s0)
    if (eflag == 0)
    3bf0:	fb442783          	lw	a5,-76(s0)
    3bf4:	00079a63          	bnez	a5,3c08 <cvt+0x2dc>
        p1 += r2;
    3bf8:	fec42783          	lw	a5,-20(s0)
    3bfc:	fe442703          	lw	a4,-28(s0)
    3c00:	00f707b3          	add	a5,a4,a5
    3c04:	fef42223          	sw	a5,-28(s0)
    *decpt = r2;
    3c08:	fc042783          	lw	a5,-64(s0)
    3c0c:	fec42703          	lw	a4,-20(s0)
    3c10:	00e7a023          	sw	a4,0(a5)
    if (p1 < &buf[0])
    3c14:	fe442703          	lw	a4,-28(s0)
    3c18:	fb842783          	lw	a5,-72(s0)
    3c1c:	08f77663          	bgeu	a4,a5,3ca8 <cvt+0x37c>
    {
        buf[0] = '\0';
    3c20:	fb842783          	lw	a5,-72(s0)
    3c24:	00078023          	sb	zero,0(a5)
        return buf;
    3c28:	fb842783          	lw	a5,-72(s0)
    3c2c:	1880006f          	j	3db4 <cvt+0x488>
    }
    while (p <= p1 && p < &buf[CVTBUFSIZE])
    {
        arg *= 10;
    3c30:	000087b7          	lui	a5,0x8
    3c34:	ca07a603          	lw	a2,-864(a5) # 7ca0 <__subdf3+0xd24>
    3c38:	ca47a683          	lw	a3,-860(a5)
    3c3c:	fc842503          	lw	a0,-56(s0)
    3c40:	fcc42583          	lw	a1,-52(s0)
    3c44:	508020ef          	jal	ra,614c <__muldf3>
    3c48:	00050713          	mv	a4,a0
    3c4c:	00058793          	mv	a5,a1
    3c50:	fce42423          	sw	a4,-56(s0)
    3c54:	fcf42623          	sw	a5,-52(s0)
        arg  = modf(arg, &fj);
    3c58:	fd040793          	addi	a5,s0,-48
    3c5c:	00078613          	mv	a2,a5
    3c60:	fc842503          	lw	a0,-56(s0)
    3c64:	fcc42583          	lw	a1,-52(s0)
    3c68:	6b9020ef          	jal	ra,6b20 <modf>
    3c6c:	fca42423          	sw	a0,-56(s0)
    3c70:	fcb42623          	sw	a1,-52(s0)
        *p++ = (int)fj + '0';
    3c74:	fd042703          	lw	a4,-48(s0)
    3c78:	fd442783          	lw	a5,-44(s0)
    3c7c:	00070513          	mv	a0,a4
    3c80:	00078593          	mv	a1,a5
    3c84:	355020ef          	jal	ra,67d8 <__fixdfsi>
    3c88:	00050793          	mv	a5,a0
    3c8c:	0ff7f713          	zext.b	a4,a5
    3c90:	fe842783          	lw	a5,-24(s0)
    3c94:	00178693          	addi	a3,a5,1
    3c98:	fed42423          	sw	a3,-24(s0)
    3c9c:	03070713          	addi	a4,a4,48
    3ca0:	0ff77713          	zext.b	a4,a4
    3ca4:	00e78023          	sb	a4,0(a5)
    while (p <= p1 && p < &buf[CVTBUFSIZE])
    3ca8:	fe842703          	lw	a4,-24(s0)
    3cac:	fe442783          	lw	a5,-28(s0)
    3cb0:	00e7ea63          	bltu	a5,a4,3cc4 <cvt+0x398>
    3cb4:	fb842783          	lw	a5,-72(s0)
    3cb8:	05078793          	addi	a5,a5,80
    3cbc:	fe842703          	lw	a4,-24(s0)
    3cc0:	f6f768e3          	bltu	a4,a5,3c30 <cvt+0x304>
    }
    if (p1 >= &buf[CVTBUFSIZE])
    3cc4:	fb842783          	lw	a5,-72(s0)
    3cc8:	05078793          	addi	a5,a5,80
    3ccc:	fe442703          	lw	a4,-28(s0)
    3cd0:	00f76c63          	bltu	a4,a5,3ce8 <cvt+0x3bc>
    {
        buf[CVTBUFSIZE - 1] = '\0';
    3cd4:	fb842783          	lw	a5,-72(s0)
    3cd8:	04f78793          	addi	a5,a5,79
    3cdc:	00078023          	sb	zero,0(a5)
        return buf;
    3ce0:	fb842783          	lw	a5,-72(s0)
    3ce4:	0d00006f          	j	3db4 <cvt+0x488>
    }
    p = p1;
    3ce8:	fe442783          	lw	a5,-28(s0)
    3cec:	fef42423          	sw	a5,-24(s0)
    *p1 += 5;
    3cf0:	fe442783          	lw	a5,-28(s0)
    3cf4:	0007c783          	lbu	a5,0(a5)
    3cf8:	00578793          	addi	a5,a5,5
    3cfc:	0ff7f713          	zext.b	a4,a5
    3d00:	fe442783          	lw	a5,-28(s0)
    3d04:	00e78023          	sb	a4,0(a5)
    while (*p1 > '9')
    3d08:	0900006f          	j	3d98 <cvt+0x46c>
    {
        *p1 = '0';
    3d0c:	fe442783          	lw	a5,-28(s0)
    3d10:	03000713          	li	a4,48
    3d14:	00e78023          	sb	a4,0(a5)
        if (p1 > buf)
    3d18:	fe442703          	lw	a4,-28(s0)
    3d1c:	fb842783          	lw	a5,-72(s0)
    3d20:	02e7f663          	bgeu	a5,a4,3d4c <cvt+0x420>
            ++*--p1;
    3d24:	fe442783          	lw	a5,-28(s0)
    3d28:	fff78793          	addi	a5,a5,-1
    3d2c:	fef42223          	sw	a5,-28(s0)
    3d30:	fe442783          	lw	a5,-28(s0)
    3d34:	0007c783          	lbu	a5,0(a5)
    3d38:	00178793          	addi	a5,a5,1
    3d3c:	0ff7f713          	zext.b	a4,a5
    3d40:	fe442783          	lw	a5,-28(s0)
    3d44:	00e78023          	sb	a4,0(a5)
    3d48:	0500006f          	j	3d98 <cvt+0x46c>
        else
        {
            *p1 = '1';
    3d4c:	fe442783          	lw	a5,-28(s0)
    3d50:	03100713          	li	a4,49
    3d54:	00e78023          	sb	a4,0(a5)
            (*decpt)++;
    3d58:	fc042783          	lw	a5,-64(s0)
    3d5c:	0007a783          	lw	a5,0(a5)
    3d60:	00178713          	addi	a4,a5,1
    3d64:	fc042783          	lw	a5,-64(s0)
    3d68:	00e7a023          	sw	a4,0(a5)
            if (eflag == 0)
    3d6c:	fb442783          	lw	a5,-76(s0)
    3d70:	02079463          	bnez	a5,3d98 <cvt+0x46c>
            {
                if (p > buf)
    3d74:	fe842703          	lw	a4,-24(s0)
    3d78:	fb842783          	lw	a5,-72(s0)
    3d7c:	00e7f863          	bgeu	a5,a4,3d8c <cvt+0x460>
                    *p = '0';
    3d80:	fe842783          	lw	a5,-24(s0)
    3d84:	03000713          	li	a4,48
    3d88:	00e78023          	sb	a4,0(a5)
                p++;
    3d8c:	fe842783          	lw	a5,-24(s0)
    3d90:	00178793          	addi	a5,a5,1
    3d94:	fef42423          	sw	a5,-24(s0)
    while (*p1 > '9')
    3d98:	fe442783          	lw	a5,-28(s0)
    3d9c:	0007c703          	lbu	a4,0(a5)
    3da0:	03900793          	li	a5,57
    3da4:	f6e7e4e3          	bltu	a5,a4,3d0c <cvt+0x3e0>
            }
        }
    }
    *p = '\0';
    3da8:	fe842783          	lw	a5,-24(s0)
    3dac:	00078023          	sb	zero,0(a5)
    return buf;
    3db0:	fb842783          	lw	a5,-72(s0)
}
    3db4:	00078513          	mv	a0,a5
    3db8:	04c12083          	lw	ra,76(sp)
    3dbc:	04812403          	lw	s0,72(sp)
    3dc0:	05010113          	addi	sp,sp,80
    3dc4:	00008067          	ret

00003dc8 <ecvt>:

char *
ecvt(double arg, int ndigits, int *decpt, int *sign)
{
    3dc8:	fd010113          	addi	sp,sp,-48
    3dcc:	02112623          	sw	ra,44(sp)
    3dd0:	02812423          	sw	s0,40(sp)
    3dd4:	03010413          	addi	s0,sp,48
    3dd8:	fea42423          	sw	a0,-24(s0)
    3ddc:	feb42623          	sw	a1,-20(s0)
    3de0:	fec42223          	sw	a2,-28(s0)
    3de4:	fed42023          	sw	a3,-32(s0)
    3de8:	fce42e23          	sw	a4,-36(s0)
    return cvt(arg, ndigits, decpt, sign, CVTBUF, 1);
    3dec:	00100813          	li	a6,1
    3df0:	cf418793          	addi	a5,gp,-780 # 84b4 <CVTBUF>
    3df4:	fdc42703          	lw	a4,-36(s0)
    3df8:	fe042683          	lw	a3,-32(s0)
    3dfc:	fe442603          	lw	a2,-28(s0)
    3e00:	fe842503          	lw	a0,-24(s0)
    3e04:	fec42583          	lw	a1,-20(s0)
    3e08:	b25ff0ef          	jal	ra,392c <cvt>
    3e0c:	00050793          	mv	a5,a0
}
    3e10:	00078513          	mv	a0,a5
    3e14:	02c12083          	lw	ra,44(sp)
    3e18:	02812403          	lw	s0,40(sp)
    3e1c:	03010113          	addi	sp,sp,48
    3e20:	00008067          	ret

00003e24 <ecvtbuf>:

char *
ecvtbuf(double arg, int ndigits, int *decpt, int *sign, char *buf)
{
    3e24:	fd010113          	addi	sp,sp,-48
    3e28:	02112623          	sw	ra,44(sp)
    3e2c:	02812423          	sw	s0,40(sp)
    3e30:	03010413          	addi	s0,sp,48
    3e34:	fea42423          	sw	a0,-24(s0)
    3e38:	feb42623          	sw	a1,-20(s0)
    3e3c:	fec42223          	sw	a2,-28(s0)
    3e40:	fed42023          	sw	a3,-32(s0)
    3e44:	fce42e23          	sw	a4,-36(s0)
    3e48:	fcf42c23          	sw	a5,-40(s0)
    return cvt(arg, ndigits, decpt, sign, buf, 1);
    3e4c:	00100813          	li	a6,1
    3e50:	fd842783          	lw	a5,-40(s0)
    3e54:	fdc42703          	lw	a4,-36(s0)
    3e58:	fe042683          	lw	a3,-32(s0)
    3e5c:	fe442603          	lw	a2,-28(s0)
    3e60:	fe842503          	lw	a0,-24(s0)
    3e64:	fec42583          	lw	a1,-20(s0)
    3e68:	ac5ff0ef          	jal	ra,392c <cvt>
    3e6c:	00050793          	mv	a5,a0
}
    3e70:	00078513          	mv	a0,a5
    3e74:	02c12083          	lw	ra,44(sp)
    3e78:	02812403          	lw	s0,40(sp)
    3e7c:	03010113          	addi	sp,sp,48
    3e80:	00008067          	ret

00003e84 <fcvt>:

char *
fcvt(double arg, int ndigits, int *decpt, int *sign)
{
    3e84:	fd010113          	addi	sp,sp,-48
    3e88:	02112623          	sw	ra,44(sp)
    3e8c:	02812423          	sw	s0,40(sp)
    3e90:	03010413          	addi	s0,sp,48
    3e94:	fea42423          	sw	a0,-24(s0)
    3e98:	feb42623          	sw	a1,-20(s0)
    3e9c:	fec42223          	sw	a2,-28(s0)
    3ea0:	fed42023          	sw	a3,-32(s0)
    3ea4:	fce42e23          	sw	a4,-36(s0)
    return cvt(arg, ndigits, decpt, sign, CVTBUF, 0);
    3ea8:	00000813          	li	a6,0
    3eac:	cf418793          	addi	a5,gp,-780 # 84b4 <CVTBUF>
    3eb0:	fdc42703          	lw	a4,-36(s0)
    3eb4:	fe042683          	lw	a3,-32(s0)
    3eb8:	fe442603          	lw	a2,-28(s0)
    3ebc:	fe842503          	lw	a0,-24(s0)
    3ec0:	fec42583          	lw	a1,-20(s0)
    3ec4:	a69ff0ef          	jal	ra,392c <cvt>
    3ec8:	00050793          	mv	a5,a0
}
    3ecc:	00078513          	mv	a0,a5
    3ed0:	02c12083          	lw	ra,44(sp)
    3ed4:	02812403          	lw	s0,40(sp)
    3ed8:	03010113          	addi	sp,sp,48
    3edc:	00008067          	ret

00003ee0 <fcvtbuf>:

char *
fcvtbuf(double arg, int ndigits, int *decpt, int *sign, char *buf)
{
    3ee0:	fd010113          	addi	sp,sp,-48
    3ee4:	02112623          	sw	ra,44(sp)
    3ee8:	02812423          	sw	s0,40(sp)
    3eec:	03010413          	addi	s0,sp,48
    3ef0:	fea42423          	sw	a0,-24(s0)
    3ef4:	feb42623          	sw	a1,-20(s0)
    3ef8:	fec42223          	sw	a2,-28(s0)
    3efc:	fed42023          	sw	a3,-32(s0)
    3f00:	fce42e23          	sw	a4,-36(s0)
    3f04:	fcf42c23          	sw	a5,-40(s0)
    return cvt(arg, ndigits, decpt, sign, buf, 0);
    3f08:	00000813          	li	a6,0
    3f0c:	fd842783          	lw	a5,-40(s0)
    3f10:	fdc42703          	lw	a4,-36(s0)
    3f14:	fe042683          	lw	a3,-32(s0)
    3f18:	fe442603          	lw	a2,-28(s0)
    3f1c:	fe842503          	lw	a0,-24(s0)
    3f20:	fec42583          	lw	a1,-20(s0)
    3f24:	a09ff0ef          	jal	ra,392c <cvt>
    3f28:	00050793          	mv	a5,a0
}
    3f2c:	00078513          	mv	a0,a5
    3f30:	02c12083          	lw	ra,44(sp)
    3f34:	02812403          	lw	s0,40(sp)
    3f38:	03010113          	addi	sp,sp,48
    3f3c:	00008067          	ret

00003f40 <strnlen>:
static char *    upper_digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
static ee_size_t strnlen(const char *s, ee_size_t count);

static ee_size_t
strnlen(const char *s, ee_size_t count)
{
    3f40:	fd010113          	addi	sp,sp,-48
    3f44:	02812623          	sw	s0,44(sp)
    3f48:	03010413          	addi	s0,sp,48
    3f4c:	fca42e23          	sw	a0,-36(s0)
    3f50:	fcb42c23          	sw	a1,-40(s0)
    const char *sc;
    for (sc = s; *sc != '\0' && count--; ++sc)
    3f54:	fdc42783          	lw	a5,-36(s0)
    3f58:	fef42623          	sw	a5,-20(s0)
    3f5c:	0100006f          	j	3f6c <strnlen+0x2c>
    3f60:	fec42783          	lw	a5,-20(s0)
    3f64:	00178793          	addi	a5,a5,1
    3f68:	fef42623          	sw	a5,-20(s0)
    3f6c:	fec42783          	lw	a5,-20(s0)
    3f70:	0007c783          	lbu	a5,0(a5)
    3f74:	00078a63          	beqz	a5,3f88 <strnlen+0x48>
    3f78:	fd842783          	lw	a5,-40(s0)
    3f7c:	fff78713          	addi	a4,a5,-1
    3f80:	fce42c23          	sw	a4,-40(s0)
    3f84:	fc079ee3          	bnez	a5,3f60 <strnlen+0x20>
        ;
    return sc - s;
    3f88:	fec42703          	lw	a4,-20(s0)
    3f8c:	fdc42783          	lw	a5,-36(s0)
    3f90:	40f707b3          	sub	a5,a4,a5
}
    3f94:	00078513          	mv	a0,a5
    3f98:	02c12403          	lw	s0,44(sp)
    3f9c:	03010113          	addi	sp,sp,48
    3fa0:	00008067          	ret

00003fa4 <skip_atoi>:

static int
skip_atoi(const char **s)
{
    3fa4:	fd010113          	addi	sp,sp,-48
    3fa8:	02812623          	sw	s0,44(sp)
    3fac:	03010413          	addi	s0,sp,48
    3fb0:	fca42e23          	sw	a0,-36(s0)
    int i = 0;
    3fb4:	fe042623          	sw	zero,-20(s0)
    while (is_digit(**s))
    3fb8:	0400006f          	j	3ff8 <skip_atoi+0x54>
        i = i * 10 + *((*s)++) - '0';
    3fbc:	fec42703          	lw	a4,-20(s0)
    3fc0:	00070793          	mv	a5,a4
    3fc4:	00279793          	slli	a5,a5,0x2
    3fc8:	00e787b3          	add	a5,a5,a4
    3fcc:	00179793          	slli	a5,a5,0x1
    3fd0:	00078613          	mv	a2,a5
    3fd4:	fdc42783          	lw	a5,-36(s0)
    3fd8:	0007a783          	lw	a5,0(a5)
    3fdc:	00178693          	addi	a3,a5,1
    3fe0:	fdc42703          	lw	a4,-36(s0)
    3fe4:	00d72023          	sw	a3,0(a4)
    3fe8:	0007c783          	lbu	a5,0(a5)
    3fec:	00f607b3          	add	a5,a2,a5
    3ff0:	fd078793          	addi	a5,a5,-48
    3ff4:	fef42623          	sw	a5,-20(s0)
    while (is_digit(**s))
    3ff8:	fdc42783          	lw	a5,-36(s0)
    3ffc:	0007a783          	lw	a5,0(a5)
    4000:	0007c703          	lbu	a4,0(a5)
    4004:	02f00793          	li	a5,47
    4008:	00e7fc63          	bgeu	a5,a4,4020 <skip_atoi+0x7c>
    400c:	fdc42783          	lw	a5,-36(s0)
    4010:	0007a783          	lw	a5,0(a5)
    4014:	0007c703          	lbu	a4,0(a5)
    4018:	03900793          	li	a5,57
    401c:	fae7f0e3          	bgeu	a5,a4,3fbc <skip_atoi+0x18>
    return i;
    4020:	fec42783          	lw	a5,-20(s0)
}
    4024:	00078513          	mv	a0,a5
    4028:	02c12403          	lw	s0,44(sp)
    402c:	03010113          	addi	sp,sp,48
    4030:	00008067          	ret

00004034 <number>:

static char *
number(char *str, long num, int base, int size, int precision, int type)
{
    4034:	f8010113          	addi	sp,sp,-128
    4038:	06112e23          	sw	ra,124(sp)
    403c:	06812c23          	sw	s0,120(sp)
    4040:	08010413          	addi	s0,sp,128
    4044:	f8a42e23          	sw	a0,-100(s0)
    4048:	f8b42c23          	sw	a1,-104(s0)
    404c:	f8c42a23          	sw	a2,-108(s0)
    4050:	f8d42823          	sw	a3,-112(s0)
    4054:	f8e42623          	sw	a4,-116(s0)
    4058:	f8f42423          	sw	a5,-120(s0)
    char  c, sign, tmp[66];
    char *dig = digits;
    405c:	000087b7          	lui	a5,0x8
    4060:	fd07a783          	lw	a5,-48(a5) # 7fd0 <digits>
    4064:	fef42423          	sw	a5,-24(s0)
    int   i;

    if (type & UPPERCASE)
    4068:	f8842783          	lw	a5,-120(s0)
    406c:	0407f793          	andi	a5,a5,64
    4070:	00078663          	beqz	a5,407c <number+0x48>
        dig = upper_digits;
    4074:	8141a783          	lw	a5,-2028(gp) # 7fd4 <upper_digits>
    4078:	fef42423          	sw	a5,-24(s0)
    if (type & LEFT)
    407c:	f8842783          	lw	a5,-120(s0)
    4080:	0107f793          	andi	a5,a5,16
    4084:	00078863          	beqz	a5,4094 <number+0x60>
        type &= ~ZEROPAD;
    4088:	f8842783          	lw	a5,-120(s0)
    408c:	ffe7f793          	andi	a5,a5,-2
    4090:	f8f42423          	sw	a5,-120(s0)
    if (base < 2 || base > 36)
    4094:	f9442703          	lw	a4,-108(s0)
    4098:	00100793          	li	a5,1
    409c:	00e7d863          	bge	a5,a4,40ac <number+0x78>
    40a0:	f9442703          	lw	a4,-108(s0)
    40a4:	02400793          	li	a5,36
    40a8:	00e7d663          	bge	a5,a4,40b4 <number+0x80>
        return 0;
    40ac:	00000793          	li	a5,0
    40b0:	3100006f          	j	43c0 <number+0x38c>

    c    = (type & ZEROPAD) ? '0' : ' ';
    40b4:	f8842783          	lw	a5,-120(s0)
    40b8:	0017f793          	andi	a5,a5,1
    40bc:	00078663          	beqz	a5,40c8 <number+0x94>
    40c0:	03000793          	li	a5,48
    40c4:	0080006f          	j	40cc <number+0x98>
    40c8:	02000793          	li	a5,32
    40cc:	fef401a3          	sb	a5,-29(s0)
    sign = 0;
    40d0:	fe0407a3          	sb	zero,-17(s0)
    if (type & SIGN)
    40d4:	f8842783          	lw	a5,-120(s0)
    40d8:	0027f793          	andi	a5,a5,2
    40dc:	06078a63          	beqz	a5,4150 <number+0x11c>
    {
        if (num < 0)
    40e0:	f9842783          	lw	a5,-104(s0)
    40e4:	0207d463          	bgez	a5,410c <number+0xd8>
        {
            sign = '-';
    40e8:	02d00793          	li	a5,45
    40ec:	fef407a3          	sb	a5,-17(s0)
            num  = -num;
    40f0:	f9842783          	lw	a5,-104(s0)
    40f4:	40f007b3          	neg	a5,a5
    40f8:	f8f42c23          	sw	a5,-104(s0)
            size--;
    40fc:	f9042783          	lw	a5,-112(s0)
    4100:	fff78793          	addi	a5,a5,-1
    4104:	f8f42823          	sw	a5,-112(s0)
    4108:	0480006f          	j	4150 <number+0x11c>
        }
        else if (type & PLUS)
    410c:	f8842783          	lw	a5,-120(s0)
    4110:	0047f793          	andi	a5,a5,4
    4114:	00078e63          	beqz	a5,4130 <number+0xfc>
        {
            sign = '+';
    4118:	02b00793          	li	a5,43
    411c:	fef407a3          	sb	a5,-17(s0)
            size--;
    4120:	f9042783          	lw	a5,-112(s0)
    4124:	fff78793          	addi	a5,a5,-1
    4128:	f8f42823          	sw	a5,-112(s0)
    412c:	0240006f          	j	4150 <number+0x11c>
        }
        else if (type & SPACE)
    4130:	f8842783          	lw	a5,-120(s0)
    4134:	0087f793          	andi	a5,a5,8
    4138:	00078c63          	beqz	a5,4150 <number+0x11c>
        {
            sign = ' ';
    413c:	02000793          	li	a5,32
    4140:	fef407a3          	sb	a5,-17(s0)
            size--;
    4144:	f9042783          	lw	a5,-112(s0)
    4148:	fff78793          	addi	a5,a5,-1
    414c:	f8f42823          	sw	a5,-112(s0)
        }
    }

    if (type & HEX_PREP)
    4150:	f8842783          	lw	a5,-120(s0)
    4154:	0207f793          	andi	a5,a5,32
    4158:	02078c63          	beqz	a5,4190 <number+0x15c>
    {
        if (base == 16)
    415c:	f9442703          	lw	a4,-108(s0)
    4160:	01000793          	li	a5,16
    4164:	00f71a63          	bne	a4,a5,4178 <number+0x144>
            size -= 2;
    4168:	f9042783          	lw	a5,-112(s0)
    416c:	ffe78793          	addi	a5,a5,-2
    4170:	f8f42823          	sw	a5,-112(s0)
    4174:	01c0006f          	j	4190 <number+0x15c>
        else if (base == 8)
    4178:	f9442703          	lw	a4,-108(s0)
    417c:	00800793          	li	a5,8
    4180:	00f71863          	bne	a4,a5,4190 <number+0x15c>
            size--;
    4184:	f9042783          	lw	a5,-112(s0)
    4188:	fff78793          	addi	a5,a5,-1
    418c:	f8f42823          	sw	a5,-112(s0)
    }

    i = 0;
    4190:	fe042223          	sw	zero,-28(s0)

    if (num == 0)
    4194:	f9842783          	lw	a5,-104(s0)
    4198:	08079063          	bnez	a5,4218 <number+0x1e4>
        tmp[i++] = '0';
    419c:	fe442783          	lw	a5,-28(s0)
    41a0:	00178713          	addi	a4,a5,1
    41a4:	fee42223          	sw	a4,-28(s0)
    41a8:	ff040713          	addi	a4,s0,-16
    41ac:	00f707b3          	add	a5,a4,a5
    41b0:	03000713          	li	a4,48
    41b4:	fae78823          	sb	a4,-80(a5)
    41b8:	0680006f          	j	4220 <number+0x1ec>
    else
    {
        while (num != 0)
        {
            tmp[i++] = dig[((unsigned long)num) % (unsigned)base];
    41bc:	f9842783          	lw	a5,-104(s0)
    41c0:	f9442703          	lw	a4,-108(s0)
    41c4:	00070593          	mv	a1,a4
    41c8:	00078513          	mv	a0,a5
    41cc:	700020ef          	jal	ra,68cc <__umodsi3>
    41d0:	00050793          	mv	a5,a0
    41d4:	00078713          	mv	a4,a5
    41d8:	fe842783          	lw	a5,-24(s0)
    41dc:	00e78733          	add	a4,a5,a4
    41e0:	fe442783          	lw	a5,-28(s0)
    41e4:	00178693          	addi	a3,a5,1
    41e8:	fed42223          	sw	a3,-28(s0)
    41ec:	00074703          	lbu	a4,0(a4)
    41f0:	ff040693          	addi	a3,s0,-16
    41f4:	00f687b3          	add	a5,a3,a5
    41f8:	fae78823          	sb	a4,-80(a5)
            num      = ((unsigned long)num) / (unsigned)base;
    41fc:	f9842783          	lw	a5,-104(s0)
    4200:	f9442703          	lw	a4,-108(s0)
    4204:	00070593          	mv	a1,a4
    4208:	00078513          	mv	a0,a5
    420c:	678020ef          	jal	ra,6884 <__udivsi3>
    4210:	00050793          	mv	a5,a0
    4214:	f8f42c23          	sw	a5,-104(s0)
        while (num != 0)
    4218:	f9842783          	lw	a5,-104(s0)
    421c:	fa0790e3          	bnez	a5,41bc <number+0x188>
        }
    }

    if (i > precision)
    4220:	fe442703          	lw	a4,-28(s0)
    4224:	f8c42783          	lw	a5,-116(s0)
    4228:	00e7d663          	bge	a5,a4,4234 <number+0x200>
        precision = i;
    422c:	fe442783          	lw	a5,-28(s0)
    4230:	f8f42623          	sw	a5,-116(s0)
    size -= precision;
    4234:	f9042703          	lw	a4,-112(s0)
    4238:	f8c42783          	lw	a5,-116(s0)
    423c:	40f707b3          	sub	a5,a4,a5
    4240:	f8f42823          	sw	a5,-112(s0)
    if (!(type & (ZEROPAD | LEFT)))
    4244:	f8842783          	lw	a5,-120(s0)
    4248:	0117f793          	andi	a5,a5,17
    424c:	02079663          	bnez	a5,4278 <number+0x244>
        while (size-- > 0)
    4250:	0180006f          	j	4268 <number+0x234>
            *str++ = ' ';
    4254:	f9c42783          	lw	a5,-100(s0)
    4258:	00178713          	addi	a4,a5,1
    425c:	f8e42e23          	sw	a4,-100(s0)
    4260:	02000713          	li	a4,32
    4264:	00e78023          	sb	a4,0(a5)
        while (size-- > 0)
    4268:	f9042783          	lw	a5,-112(s0)
    426c:	fff78713          	addi	a4,a5,-1
    4270:	f8e42823          	sw	a4,-112(s0)
    4274:	fef040e3          	bgtz	a5,4254 <number+0x220>
    if (sign)
    4278:	fef44783          	lbu	a5,-17(s0)
    427c:	00078c63          	beqz	a5,4294 <number+0x260>
        *str++ = sign;
    4280:	f9c42783          	lw	a5,-100(s0)
    4284:	00178713          	addi	a4,a5,1
    4288:	f8e42e23          	sw	a4,-100(s0)
    428c:	fef44703          	lbu	a4,-17(s0)
    4290:	00e78023          	sb	a4,0(a5)

    if (type & HEX_PREP)
    4294:	f8842783          	lw	a5,-120(s0)
    4298:	0207f793          	andi	a5,a5,32
    429c:	06078263          	beqz	a5,4300 <number+0x2cc>
    {
        if (base == 8)
    42a0:	f9442703          	lw	a4,-108(s0)
    42a4:	00800793          	li	a5,8
    42a8:	00f71e63          	bne	a4,a5,42c4 <number+0x290>
            *str++ = '0';
    42ac:	f9c42783          	lw	a5,-100(s0)
    42b0:	00178713          	addi	a4,a5,1
    42b4:	f8e42e23          	sw	a4,-100(s0)
    42b8:	03000713          	li	a4,48
    42bc:	00e78023          	sb	a4,0(a5)
    42c0:	0400006f          	j	4300 <number+0x2cc>
        else if (base == 16)
    42c4:	f9442703          	lw	a4,-108(s0)
    42c8:	01000793          	li	a5,16
    42cc:	02f71a63          	bne	a4,a5,4300 <number+0x2cc>
        {
            *str++ = '0';
    42d0:	f9c42783          	lw	a5,-100(s0)
    42d4:	00178713          	addi	a4,a5,1
    42d8:	f8e42e23          	sw	a4,-100(s0)
    42dc:	03000713          	li	a4,48
    42e0:	00e78023          	sb	a4,0(a5)
            *str++ = digits[33];
    42e4:	000087b7          	lui	a5,0x8
    42e8:	fd07a703          	lw	a4,-48(a5) # 7fd0 <digits>
    42ec:	f9c42783          	lw	a5,-100(s0)
    42f0:	00178693          	addi	a3,a5,1
    42f4:	f8d42e23          	sw	a3,-100(s0)
    42f8:	02174703          	lbu	a4,33(a4)
    42fc:	00e78023          	sb	a4,0(a5)
        }
    }

    if (!(type & LEFT))
    4300:	f8842783          	lw	a5,-120(s0)
    4304:	0107f793          	andi	a5,a5,16
    4308:	04079263          	bnez	a5,434c <number+0x318>
        while (size-- > 0)
    430c:	0180006f          	j	4324 <number+0x2f0>
            *str++ = c;
    4310:	f9c42783          	lw	a5,-100(s0)
    4314:	00178713          	addi	a4,a5,1
    4318:	f8e42e23          	sw	a4,-100(s0)
    431c:	fe344703          	lbu	a4,-29(s0)
    4320:	00e78023          	sb	a4,0(a5)
        while (size-- > 0)
    4324:	f9042783          	lw	a5,-112(s0)
    4328:	fff78713          	addi	a4,a5,-1
    432c:	f8e42823          	sw	a4,-112(s0)
    4330:	fef040e3          	bgtz	a5,4310 <number+0x2dc>
    while (i < precision--)
    4334:	0180006f          	j	434c <number+0x318>
        *str++ = '0';
    4338:	f9c42783          	lw	a5,-100(s0)
    433c:	00178713          	addi	a4,a5,1
    4340:	f8e42e23          	sw	a4,-100(s0)
    4344:	03000713          	li	a4,48
    4348:	00e78023          	sb	a4,0(a5)
    while (i < precision--)
    434c:	f8c42783          	lw	a5,-116(s0)
    4350:	fff78713          	addi	a4,a5,-1
    4354:	f8e42623          	sw	a4,-116(s0)
    4358:	fe442703          	lw	a4,-28(s0)
    435c:	fcf74ee3          	blt	a4,a5,4338 <number+0x304>
    while (i-- > 0)
    4360:	0240006f          	j	4384 <number+0x350>
        *str++ = tmp[i];
    4364:	f9c42783          	lw	a5,-100(s0)
    4368:	00178713          	addi	a4,a5,1
    436c:	f8e42e23          	sw	a4,-100(s0)
    4370:	fe442703          	lw	a4,-28(s0)
    4374:	ff040693          	addi	a3,s0,-16
    4378:	00e68733          	add	a4,a3,a4
    437c:	fb074703          	lbu	a4,-80(a4)
    4380:	00e78023          	sb	a4,0(a5)
    while (i-- > 0)
    4384:	fe442783          	lw	a5,-28(s0)
    4388:	fff78713          	addi	a4,a5,-1
    438c:	fee42223          	sw	a4,-28(s0)
    4390:	fcf04ae3          	bgtz	a5,4364 <number+0x330>
    while (size-- > 0)
    4394:	0180006f          	j	43ac <number+0x378>
        *str++ = ' ';
    4398:	f9c42783          	lw	a5,-100(s0)
    439c:	00178713          	addi	a4,a5,1
    43a0:	f8e42e23          	sw	a4,-100(s0)
    43a4:	02000713          	li	a4,32
    43a8:	00e78023          	sb	a4,0(a5)
    while (size-- > 0)
    43ac:	f9042783          	lw	a5,-112(s0)
    43b0:	fff78713          	addi	a4,a5,-1
    43b4:	f8e42823          	sw	a4,-112(s0)
    43b8:	fef040e3          	bgtz	a5,4398 <number+0x364>

    return str;
    43bc:	f9c42783          	lw	a5,-100(s0)
}
    43c0:	00078513          	mv	a0,a5
    43c4:	07c12083          	lw	ra,124(sp)
    43c8:	07812403          	lw	s0,120(sp)
    43cc:	08010113          	addi	sp,sp,128
    43d0:	00008067          	ret

000043d4 <eaddr>:

static char *
eaddr(char *str, unsigned char *addr, int size, int precision, int type)
{
    43d4:	fa010113          	addi	sp,sp,-96
    43d8:	04812e23          	sw	s0,92(sp)
    43dc:	06010413          	addi	s0,sp,96
    43e0:	faa42e23          	sw	a0,-68(s0)
    43e4:	fab42c23          	sw	a1,-72(s0)
    43e8:	fac42a23          	sw	a2,-76(s0)
    43ec:	fad42823          	sw	a3,-80(s0)
    43f0:	fae42623          	sw	a4,-84(s0)
    char  tmp[24];
    char *dig = digits;
    43f4:	000087b7          	lui	a5,0x8
    43f8:	fd07a783          	lw	a5,-48(a5) # 7fd0 <digits>
    43fc:	fef42623          	sw	a5,-20(s0)
    int   i, len;

    if (type & UPPERCASE)
    4400:	fac42783          	lw	a5,-84(s0)
    4404:	0407f793          	andi	a5,a5,64
    4408:	00078663          	beqz	a5,4414 <eaddr+0x40>
        dig = upper_digits;
    440c:	8141a783          	lw	a5,-2028(gp) # 7fd4 <upper_digits>
    4410:	fef42623          	sw	a5,-20(s0)
    len = 0;
    4414:	fe042223          	sw	zero,-28(s0)
    for (i = 0; i < 6; i++)
    4418:	fe042423          	sw	zero,-24(s0)
    441c:	0ac0006f          	j	44c8 <eaddr+0xf4>
    {
        if (i != 0)
    4420:	fe842783          	lw	a5,-24(s0)
    4424:	02078063          	beqz	a5,4444 <eaddr+0x70>
            tmp[len++] = ':';
    4428:	fe442783          	lw	a5,-28(s0)
    442c:	00178713          	addi	a4,a5,1
    4430:	fee42223          	sw	a4,-28(s0)
    4434:	ff040713          	addi	a4,s0,-16
    4438:	00f707b3          	add	a5,a4,a5
    443c:	03a00713          	li	a4,58
    4440:	fce78e23          	sb	a4,-36(a5)
        tmp[len++] = dig[addr[i] >> 4];
    4444:	fe842783          	lw	a5,-24(s0)
    4448:	fb842703          	lw	a4,-72(s0)
    444c:	00f707b3          	add	a5,a4,a5
    4450:	0007c783          	lbu	a5,0(a5)
    4454:	0047d793          	srli	a5,a5,0x4
    4458:	0ff7f793          	zext.b	a5,a5
    445c:	00078713          	mv	a4,a5
    4460:	fec42783          	lw	a5,-20(s0)
    4464:	00e78733          	add	a4,a5,a4
    4468:	fe442783          	lw	a5,-28(s0)
    446c:	00178693          	addi	a3,a5,1
    4470:	fed42223          	sw	a3,-28(s0)
    4474:	00074703          	lbu	a4,0(a4)
    4478:	ff040693          	addi	a3,s0,-16
    447c:	00f687b3          	add	a5,a3,a5
    4480:	fce78e23          	sb	a4,-36(a5)
        tmp[len++] = dig[addr[i] & 0x0F];
    4484:	fe842783          	lw	a5,-24(s0)
    4488:	fb842703          	lw	a4,-72(s0)
    448c:	00f707b3          	add	a5,a4,a5
    4490:	0007c783          	lbu	a5,0(a5)
    4494:	00f7f793          	andi	a5,a5,15
    4498:	fec42703          	lw	a4,-20(s0)
    449c:	00f70733          	add	a4,a4,a5
    44a0:	fe442783          	lw	a5,-28(s0)
    44a4:	00178693          	addi	a3,a5,1
    44a8:	fed42223          	sw	a3,-28(s0)
    44ac:	00074703          	lbu	a4,0(a4)
    44b0:	ff040693          	addi	a3,s0,-16
    44b4:	00f687b3          	add	a5,a3,a5
    44b8:	fce78e23          	sb	a4,-36(a5)
    for (i = 0; i < 6; i++)
    44bc:	fe842783          	lw	a5,-24(s0)
    44c0:	00178793          	addi	a5,a5,1
    44c4:	fef42423          	sw	a5,-24(s0)
    44c8:	fe842703          	lw	a4,-24(s0)
    44cc:	00500793          	li	a5,5
    44d0:	f4e7d8e3          	bge	a5,a4,4420 <eaddr+0x4c>
    }

    if (!(type & LEFT))
    44d4:	fac42783          	lw	a5,-84(s0)
    44d8:	0107f793          	andi	a5,a5,16
    44dc:	02079863          	bnez	a5,450c <eaddr+0x138>
        while (len < size--)
    44e0:	0180006f          	j	44f8 <eaddr+0x124>
            *str++ = ' ';
    44e4:	fbc42783          	lw	a5,-68(s0)
    44e8:	00178713          	addi	a4,a5,1
    44ec:	fae42e23          	sw	a4,-68(s0)
    44f0:	02000713          	li	a4,32
    44f4:	00e78023          	sb	a4,0(a5)
        while (len < size--)
    44f8:	fb442783          	lw	a5,-76(s0)
    44fc:	fff78713          	addi	a4,a5,-1
    4500:	fae42a23          	sw	a4,-76(s0)
    4504:	fe442703          	lw	a4,-28(s0)
    4508:	fcf74ee3          	blt	a4,a5,44e4 <eaddr+0x110>
    for (i = 0; i < len; ++i)
    450c:	fe042423          	sw	zero,-24(s0)
    4510:	0300006f          	j	4540 <eaddr+0x16c>
        *str++ = tmp[i];
    4514:	fbc42783          	lw	a5,-68(s0)
    4518:	00178713          	addi	a4,a5,1
    451c:	fae42e23          	sw	a4,-68(s0)
    4520:	fe842703          	lw	a4,-24(s0)
    4524:	ff040693          	addi	a3,s0,-16
    4528:	00e68733          	add	a4,a3,a4
    452c:	fdc74703          	lbu	a4,-36(a4)
    4530:	00e78023          	sb	a4,0(a5)
    for (i = 0; i < len; ++i)
    4534:	fe842783          	lw	a5,-24(s0)
    4538:	00178793          	addi	a5,a5,1
    453c:	fef42423          	sw	a5,-24(s0)
    4540:	fe842703          	lw	a4,-24(s0)
    4544:	fe442783          	lw	a5,-28(s0)
    4548:	fcf746e3          	blt	a4,a5,4514 <eaddr+0x140>
    while (len < size--)
    454c:	0180006f          	j	4564 <eaddr+0x190>
        *str++ = ' ';
    4550:	fbc42783          	lw	a5,-68(s0)
    4554:	00178713          	addi	a4,a5,1
    4558:	fae42e23          	sw	a4,-68(s0)
    455c:	02000713          	li	a4,32
    4560:	00e78023          	sb	a4,0(a5)
    while (len < size--)
    4564:	fb442783          	lw	a5,-76(s0)
    4568:	fff78713          	addi	a4,a5,-1
    456c:	fae42a23          	sw	a4,-76(s0)
    4570:	fe442703          	lw	a4,-28(s0)
    4574:	fcf74ee3          	blt	a4,a5,4550 <eaddr+0x17c>

    return str;
    4578:	fbc42783          	lw	a5,-68(s0)
}
    457c:	00078513          	mv	a0,a5
    4580:	05c12403          	lw	s0,92(sp)
    4584:	06010113          	addi	sp,sp,96
    4588:	00008067          	ret

0000458c <iaddr>:

static char *
iaddr(char *str, unsigned char *addr, int size, int precision, int type)
{
    458c:	fa010113          	addi	sp,sp,-96
    4590:	04112e23          	sw	ra,92(sp)
    4594:	04812c23          	sw	s0,88(sp)
    4598:	04912a23          	sw	s1,84(sp)
    459c:	06010413          	addi	s0,sp,96
    45a0:	faa42e23          	sw	a0,-68(s0)
    45a4:	fab42c23          	sw	a1,-72(s0)
    45a8:	fac42a23          	sw	a2,-76(s0)
    45ac:	fad42823          	sw	a3,-80(s0)
    45b0:	fae42623          	sw	a4,-84(s0)
    char tmp[24];
    int  i, n, len;

    len = 0;
    45b4:	fe042223          	sw	zero,-28(s0)
    for (i = 0; i < 4; i++)
    45b8:	fe042623          	sw	zero,-20(s0)
    45bc:	1bc0006f          	j	4778 <iaddr+0x1ec>
    {
        if (i != 0)
    45c0:	fec42783          	lw	a5,-20(s0)
    45c4:	02078063          	beqz	a5,45e4 <iaddr+0x58>
            tmp[len++] = '.';
    45c8:	fe442783          	lw	a5,-28(s0)
    45cc:	00178713          	addi	a4,a5,1
    45d0:	fee42223          	sw	a4,-28(s0)
    45d4:	ff040713          	addi	a4,s0,-16
    45d8:	00f707b3          	add	a5,a4,a5
    45dc:	02e00713          	li	a4,46
    45e0:	fce78e23          	sb	a4,-36(a5)
        n = addr[i];
    45e4:	fec42783          	lw	a5,-20(s0)
    45e8:	fb842703          	lw	a4,-72(s0)
    45ec:	00f707b3          	add	a5,a4,a5
    45f0:	0007c783          	lbu	a5,0(a5)
    45f4:	fef42423          	sw	a5,-24(s0)

        if (n == 0)
    45f8:	fe842783          	lw	a5,-24(s0)
    45fc:	02079663          	bnez	a5,4628 <iaddr+0x9c>
            tmp[len++] = digits[0];
    4600:	000087b7          	lui	a5,0x8
    4604:	fd07a703          	lw	a4,-48(a5) # 7fd0 <digits>
    4608:	fe442783          	lw	a5,-28(s0)
    460c:	00178693          	addi	a3,a5,1
    4610:	fed42223          	sw	a3,-28(s0)
    4614:	00074703          	lbu	a4,0(a4)
    4618:	ff040693          	addi	a3,s0,-16
    461c:	00f687b3          	add	a5,a3,a5
    4620:	fce78e23          	sb	a4,-36(a5)
    4624:	1480006f          	j	476c <iaddr+0x1e0>
        else
        {
            if (n >= 100)
    4628:	fe842703          	lw	a4,-24(s0)
    462c:	06300793          	li	a5,99
    4630:	0ae7d863          	bge	a5,a4,46e0 <iaddr+0x154>
            {
                tmp[len++] = digits[n / 100];
    4634:	000087b7          	lui	a5,0x8
    4638:	fd07a483          	lw	s1,-48(a5) # 7fd0 <digits>
    463c:	fe842783          	lw	a5,-24(s0)
    4640:	06400593          	li	a1,100
    4644:	00078513          	mv	a0,a5
    4648:	234020ef          	jal	ra,687c <__divsi3>
    464c:	00050793          	mv	a5,a0
    4650:	00f48733          	add	a4,s1,a5
    4654:	fe442783          	lw	a5,-28(s0)
    4658:	00178693          	addi	a3,a5,1
    465c:	fed42223          	sw	a3,-28(s0)
    4660:	00074703          	lbu	a4,0(a4)
    4664:	ff040693          	addi	a3,s0,-16
    4668:	00f687b3          	add	a5,a3,a5
    466c:	fce78e23          	sb	a4,-36(a5)
                n          = n % 100;
    4670:	fe842783          	lw	a5,-24(s0)
    4674:	06400593          	li	a1,100
    4678:	00078513          	mv	a0,a5
    467c:	284020ef          	jal	ra,6900 <__modsi3>
    4680:	00050793          	mv	a5,a0
    4684:	fef42423          	sw	a5,-24(s0)
                tmp[len++] = digits[n / 10];
    4688:	000087b7          	lui	a5,0x8
    468c:	fd07a483          	lw	s1,-48(a5) # 7fd0 <digits>
    4690:	fe842783          	lw	a5,-24(s0)
    4694:	00a00593          	li	a1,10
    4698:	00078513          	mv	a0,a5
    469c:	1e0020ef          	jal	ra,687c <__divsi3>
    46a0:	00050793          	mv	a5,a0
    46a4:	00f48733          	add	a4,s1,a5
    46a8:	fe442783          	lw	a5,-28(s0)
    46ac:	00178693          	addi	a3,a5,1
    46b0:	fed42223          	sw	a3,-28(s0)
    46b4:	00074703          	lbu	a4,0(a4)
    46b8:	ff040693          	addi	a3,s0,-16
    46bc:	00f687b3          	add	a5,a3,a5
    46c0:	fce78e23          	sb	a4,-36(a5)
                n          = n % 10;
    46c4:	fe842783          	lw	a5,-24(s0)
    46c8:	00a00593          	li	a1,10
    46cc:	00078513          	mv	a0,a5
    46d0:	230020ef          	jal	ra,6900 <__modsi3>
    46d4:	00050793          	mv	a5,a0
    46d8:	fef42423          	sw	a5,-24(s0)
    46dc:	0640006f          	j	4740 <iaddr+0x1b4>
            }
            else if (n >= 10)
    46e0:	fe842703          	lw	a4,-24(s0)
    46e4:	00900793          	li	a5,9
    46e8:	04e7dc63          	bge	a5,a4,4740 <iaddr+0x1b4>
            {
                tmp[len++] = digits[n / 10];
    46ec:	000087b7          	lui	a5,0x8
    46f0:	fd07a483          	lw	s1,-48(a5) # 7fd0 <digits>
    46f4:	fe842783          	lw	a5,-24(s0)
    46f8:	00a00593          	li	a1,10
    46fc:	00078513          	mv	a0,a5
    4700:	17c020ef          	jal	ra,687c <__divsi3>
    4704:	00050793          	mv	a5,a0
    4708:	00f48733          	add	a4,s1,a5
    470c:	fe442783          	lw	a5,-28(s0)
    4710:	00178693          	addi	a3,a5,1
    4714:	fed42223          	sw	a3,-28(s0)
    4718:	00074703          	lbu	a4,0(a4)
    471c:	ff040693          	addi	a3,s0,-16
    4720:	00f687b3          	add	a5,a3,a5
    4724:	fce78e23          	sb	a4,-36(a5)
                n          = n % 10;
    4728:	fe842783          	lw	a5,-24(s0)
    472c:	00a00593          	li	a1,10
    4730:	00078513          	mv	a0,a5
    4734:	1cc020ef          	jal	ra,6900 <__modsi3>
    4738:	00050793          	mv	a5,a0
    473c:	fef42423          	sw	a5,-24(s0)
            }

            tmp[len++] = digits[n];
    4740:	000087b7          	lui	a5,0x8
    4744:	fd07a703          	lw	a4,-48(a5) # 7fd0 <digits>
    4748:	fe842783          	lw	a5,-24(s0)
    474c:	00f70733          	add	a4,a4,a5
    4750:	fe442783          	lw	a5,-28(s0)
    4754:	00178693          	addi	a3,a5,1
    4758:	fed42223          	sw	a3,-28(s0)
    475c:	00074703          	lbu	a4,0(a4)
    4760:	ff040693          	addi	a3,s0,-16
    4764:	00f687b3          	add	a5,a3,a5
    4768:	fce78e23          	sb	a4,-36(a5)
    for (i = 0; i < 4; i++)
    476c:	fec42783          	lw	a5,-20(s0)
    4770:	00178793          	addi	a5,a5,1
    4774:	fef42623          	sw	a5,-20(s0)
    4778:	fec42703          	lw	a4,-20(s0)
    477c:	00300793          	li	a5,3
    4780:	e4e7d0e3          	bge	a5,a4,45c0 <iaddr+0x34>
        }
    }

    if (!(type & LEFT))
    4784:	fac42783          	lw	a5,-84(s0)
    4788:	0107f793          	andi	a5,a5,16
    478c:	02079863          	bnez	a5,47bc <iaddr+0x230>
        while (len < size--)
    4790:	0180006f          	j	47a8 <iaddr+0x21c>
            *str++ = ' ';
    4794:	fbc42783          	lw	a5,-68(s0)
    4798:	00178713          	addi	a4,a5,1
    479c:	fae42e23          	sw	a4,-68(s0)
    47a0:	02000713          	li	a4,32
    47a4:	00e78023          	sb	a4,0(a5)
        while (len < size--)
    47a8:	fb442783          	lw	a5,-76(s0)
    47ac:	fff78713          	addi	a4,a5,-1
    47b0:	fae42a23          	sw	a4,-76(s0)
    47b4:	fe442703          	lw	a4,-28(s0)
    47b8:	fcf74ee3          	blt	a4,a5,4794 <iaddr+0x208>
    for (i = 0; i < len; ++i)
    47bc:	fe042623          	sw	zero,-20(s0)
    47c0:	0300006f          	j	47f0 <iaddr+0x264>
        *str++ = tmp[i];
    47c4:	fbc42783          	lw	a5,-68(s0)
    47c8:	00178713          	addi	a4,a5,1
    47cc:	fae42e23          	sw	a4,-68(s0)
    47d0:	fec42703          	lw	a4,-20(s0)
    47d4:	ff040693          	addi	a3,s0,-16
    47d8:	00e68733          	add	a4,a3,a4
    47dc:	fdc74703          	lbu	a4,-36(a4)
    47e0:	00e78023          	sb	a4,0(a5)
    for (i = 0; i < len; ++i)
    47e4:	fec42783          	lw	a5,-20(s0)
    47e8:	00178793          	addi	a5,a5,1
    47ec:	fef42623          	sw	a5,-20(s0)
    47f0:	fec42703          	lw	a4,-20(s0)
    47f4:	fe442783          	lw	a5,-28(s0)
    47f8:	fcf746e3          	blt	a4,a5,47c4 <iaddr+0x238>
    while (len < size--)
    47fc:	0180006f          	j	4814 <iaddr+0x288>
        *str++ = ' ';
    4800:	fbc42783          	lw	a5,-68(s0)
    4804:	00178713          	addi	a4,a5,1
    4808:	fae42e23          	sw	a4,-68(s0)
    480c:	02000713          	li	a4,32
    4810:	00e78023          	sb	a4,0(a5)
    while (len < size--)
    4814:	fb442783          	lw	a5,-76(s0)
    4818:	fff78713          	addi	a4,a5,-1
    481c:	fae42a23          	sw	a4,-76(s0)
    4820:	fe442703          	lw	a4,-28(s0)
    4824:	fcf74ee3          	blt	a4,a5,4800 <iaddr+0x274>

    return str;
    4828:	fbc42783          	lw	a5,-68(s0)
}
    482c:	00078513          	mv	a0,a5
    4830:	05c12083          	lw	ra,92(sp)
    4834:	05812403          	lw	s0,88(sp)
    4838:	05412483          	lw	s1,84(sp)
    483c:	06010113          	addi	sp,sp,96
    4840:	00008067          	ret

00004844 <ee_vsprintf>:

#endif

static int
ee_vsprintf(char *buf, const char *fmt, va_list args)
{
    4844:	fb010113          	addi	sp,sp,-80
    4848:	04112623          	sw	ra,76(sp)
    484c:	04812423          	sw	s0,72(sp)
    4850:	05010413          	addi	s0,sp,80
    4854:	faa42e23          	sw	a0,-68(s0)
    4858:	fab42c23          	sw	a1,-72(s0)
    485c:	fac42a23          	sw	a2,-76(s0)
    int field_width; // Width of output field
    int precision;   // Min. # of digits for integers; max number of chars for
                     // from string
    int qualifier;   // 'h', 'l', or 'L' for integer fields

    for (str = buf; *fmt; fmt++)
    4860:	fbc42783          	lw	a5,-68(s0)
    4864:	fef42023          	sw	a5,-32(s0)
    4868:	5ac0006f          	j	4e14 <ee_vsprintf+0x5d0>
    {
        if (*fmt != '%')
    486c:	fb842783          	lw	a5,-72(s0)
    4870:	0007c703          	lbu	a4,0(a5)
    4874:	02500793          	li	a5,37
    4878:	02f70063          	beq	a4,a5,4898 <ee_vsprintf+0x54>
        {
            *str++ = *fmt;
    487c:	fb842703          	lw	a4,-72(s0)
    4880:	fe042783          	lw	a5,-32(s0)
    4884:	00178693          	addi	a3,a5,1
    4888:	fed42023          	sw	a3,-32(s0)
    488c:	00074703          	lbu	a4,0(a4)
    4890:	00e78023          	sb	a4,0(a5)
            continue;
    4894:	5740006f          	j	4e08 <ee_vsprintf+0x5c4>
        }

        // Process flags
        flags = 0;
    4898:	fc042c23          	sw	zero,-40(s0)
    repeat:
        fmt++; // This also skips first '%'
    489c:	fb842783          	lw	a5,-72(s0)
    48a0:	00178793          	addi	a5,a5,1
    48a4:	faf42c23          	sw	a5,-72(s0)
        switch (*fmt)
    48a8:	fb842783          	lw	a5,-72(s0)
    48ac:	0007c783          	lbu	a5,0(a5)
    48b0:	fe078793          	addi	a5,a5,-32
    48b4:	01000713          	li	a4,16
    48b8:	06f76663          	bltu	a4,a5,4924 <ee_vsprintf+0xe0>
    48bc:	00279713          	slli	a4,a5,0x2
    48c0:	000087b7          	lui	a5,0x8
    48c4:	d1078793          	addi	a5,a5,-752 # 7d10 <__subdf3+0xd94>
    48c8:	00f707b3          	add	a5,a4,a5
    48cc:	0007a783          	lw	a5,0(a5)
    48d0:	00078067          	jr	a5
        {
            case '-':
                flags |= LEFT;
    48d4:	fd842783          	lw	a5,-40(s0)
    48d8:	0107e793          	ori	a5,a5,16
    48dc:	fcf42c23          	sw	a5,-40(s0)
                goto repeat;
    48e0:	fbdff06f          	j	489c <ee_vsprintf+0x58>
            case '+':
                flags |= PLUS;
    48e4:	fd842783          	lw	a5,-40(s0)
    48e8:	0047e793          	ori	a5,a5,4
    48ec:	fcf42c23          	sw	a5,-40(s0)
                goto repeat;
    48f0:	fadff06f          	j	489c <ee_vsprintf+0x58>
            case ' ':
                flags |= SPACE;
    48f4:	fd842783          	lw	a5,-40(s0)
    48f8:	0087e793          	ori	a5,a5,8
    48fc:	fcf42c23          	sw	a5,-40(s0)
                goto repeat;
    4900:	f9dff06f          	j	489c <ee_vsprintf+0x58>
            case '#':
                flags |= HEX_PREP;
    4904:	fd842783          	lw	a5,-40(s0)
    4908:	0207e793          	ori	a5,a5,32
    490c:	fcf42c23          	sw	a5,-40(s0)
                goto repeat;
    4910:	f8dff06f          	j	489c <ee_vsprintf+0x58>
            case '0':
                flags |= ZEROPAD;
    4914:	fd842783          	lw	a5,-40(s0)
    4918:	0017e793          	ori	a5,a5,1
    491c:	fcf42c23          	sw	a5,-40(s0)
                goto repeat;
    4920:	f7dff06f          	j	489c <ee_vsprintf+0x58>
        }

        // Get field width
        field_width = -1;
    4924:	fff00793          	li	a5,-1
    4928:	fcf42a23          	sw	a5,-44(s0)
        if (is_digit(*fmt))
    492c:	fb842783          	lw	a5,-72(s0)
    4930:	0007c703          	lbu	a4,0(a5)
    4934:	02f00793          	li	a5,47
    4938:	02e7f463          	bgeu	a5,a4,4960 <ee_vsprintf+0x11c>
    493c:	fb842783          	lw	a5,-72(s0)
    4940:	0007c703          	lbu	a4,0(a5)
    4944:	03900793          	li	a5,57
    4948:	00e7ec63          	bltu	a5,a4,4960 <ee_vsprintf+0x11c>
            field_width = skip_atoi(&fmt);
    494c:	fb840793          	addi	a5,s0,-72
    4950:	00078513          	mv	a0,a5
    4954:	e50ff0ef          	jal	ra,3fa4 <skip_atoi>
    4958:	fca42a23          	sw	a0,-44(s0)
    495c:	0540006f          	j	49b0 <ee_vsprintf+0x16c>
        else if (*fmt == '*')
    4960:	fb842783          	lw	a5,-72(s0)
    4964:	0007c703          	lbu	a4,0(a5)
    4968:	02a00793          	li	a5,42
    496c:	04f71263          	bne	a4,a5,49b0 <ee_vsprintf+0x16c>
        {
            fmt++;
    4970:	fb842783          	lw	a5,-72(s0)
    4974:	00178793          	addi	a5,a5,1
    4978:	faf42c23          	sw	a5,-72(s0)
            field_width = va_arg(args, int);
    497c:	fb442783          	lw	a5,-76(s0)
    4980:	00478713          	addi	a4,a5,4
    4984:	fae42a23          	sw	a4,-76(s0)
    4988:	0007a783          	lw	a5,0(a5)
    498c:	fcf42a23          	sw	a5,-44(s0)
            if (field_width < 0)
    4990:	fd442783          	lw	a5,-44(s0)
    4994:	0007de63          	bgez	a5,49b0 <ee_vsprintf+0x16c>
            {
                field_width = -field_width;
    4998:	fd442783          	lw	a5,-44(s0)
    499c:	40f007b3          	neg	a5,a5
    49a0:	fcf42a23          	sw	a5,-44(s0)
                flags |= LEFT;
    49a4:	fd842783          	lw	a5,-40(s0)
    49a8:	0107e793          	ori	a5,a5,16
    49ac:	fcf42c23          	sw	a5,-40(s0)
            }
        }

        // Get the precision
        precision = -1;
    49b0:	fff00793          	li	a5,-1
    49b4:	fcf42823          	sw	a5,-48(s0)
        if (*fmt == '.')
    49b8:	fb842783          	lw	a5,-72(s0)
    49bc:	0007c703          	lbu	a4,0(a5)
    49c0:	02e00793          	li	a5,46
    49c4:	08f71063          	bne	a4,a5,4a44 <ee_vsprintf+0x200>
        {
            ++fmt;
    49c8:	fb842783          	lw	a5,-72(s0)
    49cc:	00178793          	addi	a5,a5,1
    49d0:	faf42c23          	sw	a5,-72(s0)
            if (is_digit(*fmt))
    49d4:	fb842783          	lw	a5,-72(s0)
    49d8:	0007c703          	lbu	a4,0(a5)
    49dc:	02f00793          	li	a5,47
    49e0:	02e7f463          	bgeu	a5,a4,4a08 <ee_vsprintf+0x1c4>
    49e4:	fb842783          	lw	a5,-72(s0)
    49e8:	0007c703          	lbu	a4,0(a5)
    49ec:	03900793          	li	a5,57
    49f0:	00e7ec63          	bltu	a5,a4,4a08 <ee_vsprintf+0x1c4>
                precision = skip_atoi(&fmt);
    49f4:	fb840793          	addi	a5,s0,-72
    49f8:	00078513          	mv	a0,a5
    49fc:	da8ff0ef          	jal	ra,3fa4 <skip_atoi>
    4a00:	fca42823          	sw	a0,-48(s0)
    4a04:	0340006f          	j	4a38 <ee_vsprintf+0x1f4>
            else if (*fmt == '*')
    4a08:	fb842783          	lw	a5,-72(s0)
    4a0c:	0007c703          	lbu	a4,0(a5)
    4a10:	02a00793          	li	a5,42
    4a14:	02f71263          	bne	a4,a5,4a38 <ee_vsprintf+0x1f4>
            {
                ++fmt;
    4a18:	fb842783          	lw	a5,-72(s0)
    4a1c:	00178793          	addi	a5,a5,1
    4a20:	faf42c23          	sw	a5,-72(s0)
                precision = va_arg(args, int);
    4a24:	fb442783          	lw	a5,-76(s0)
    4a28:	00478713          	addi	a4,a5,4
    4a2c:	fae42a23          	sw	a4,-76(s0)
    4a30:	0007a783          	lw	a5,0(a5)
    4a34:	fcf42823          	sw	a5,-48(s0)
            }
            if (precision < 0)
    4a38:	fd042783          	lw	a5,-48(s0)
    4a3c:	0007d463          	bgez	a5,4a44 <ee_vsprintf+0x200>
                precision = 0;
    4a40:	fc042823          	sw	zero,-48(s0)
        }

        // Get the conversion qualifier
        qualifier = -1;
    4a44:	fff00793          	li	a5,-1
    4a48:	fcf42623          	sw	a5,-52(s0)
        if (*fmt == 'l' || *fmt == 'L')
    4a4c:	fb842783          	lw	a5,-72(s0)
    4a50:	0007c703          	lbu	a4,0(a5)
    4a54:	06c00793          	li	a5,108
    4a58:	00f70a63          	beq	a4,a5,4a6c <ee_vsprintf+0x228>
    4a5c:	fb842783          	lw	a5,-72(s0)
    4a60:	0007c703          	lbu	a4,0(a5)
    4a64:	04c00793          	li	a5,76
    4a68:	00f71e63          	bne	a4,a5,4a84 <ee_vsprintf+0x240>
        {
            qualifier = *fmt;
    4a6c:	fb842783          	lw	a5,-72(s0)
    4a70:	0007c783          	lbu	a5,0(a5)
    4a74:	fcf42623          	sw	a5,-52(s0)
            fmt++;
    4a78:	fb842783          	lw	a5,-72(s0)
    4a7c:	00178793          	addi	a5,a5,1
    4a80:	faf42c23          	sw	a5,-72(s0)
        }

        // Default base
        base = 10;
    4a84:	00a00793          	li	a5,10
    4a88:	fef42223          	sw	a5,-28(s0)

        switch (*fmt)
    4a8c:	fb842783          	lw	a5,-72(s0)
    4a90:	0007c783          	lbu	a5,0(a5)
    4a94:	fbf78793          	addi	a5,a5,-65
    4a98:	03700713          	li	a4,55
    4a9c:	28f76863          	bltu	a4,a5,4d2c <ee_vsprintf+0x4e8>
    4aa0:	00279713          	slli	a4,a5,0x2
    4aa4:	000087b7          	lui	a5,0x8
    4aa8:	d5478793          	addi	a5,a5,-684 # 7d54 <__subdf3+0xdd8>
    4aac:	00f707b3          	add	a5,a4,a5
    4ab0:	0007a783          	lw	a5,0(a5)
    4ab4:	00078067          	jr	a5
        {
            case 'c':
                if (!(flags & LEFT))
    4ab8:	fd842783          	lw	a5,-40(s0)
    4abc:	0107f793          	andi	a5,a5,16
    4ac0:	02079863          	bnez	a5,4af0 <ee_vsprintf+0x2ac>
                    while (--field_width > 0)
    4ac4:	0180006f          	j	4adc <ee_vsprintf+0x298>
                        *str++ = ' ';
    4ac8:	fe042783          	lw	a5,-32(s0)
    4acc:	00178713          	addi	a4,a5,1
    4ad0:	fee42023          	sw	a4,-32(s0)
    4ad4:	02000713          	li	a4,32
    4ad8:	00e78023          	sb	a4,0(a5)
                    while (--field_width > 0)
    4adc:	fd442783          	lw	a5,-44(s0)
    4ae0:	fff78793          	addi	a5,a5,-1
    4ae4:	fcf42a23          	sw	a5,-44(s0)
    4ae8:	fd442783          	lw	a5,-44(s0)
    4aec:	fcf04ee3          	bgtz	a5,4ac8 <ee_vsprintf+0x284>
                *str++ = (unsigned char)va_arg(args, int);
    4af0:	fb442783          	lw	a5,-76(s0)
    4af4:	00478713          	addi	a4,a5,4
    4af8:	fae42a23          	sw	a4,-76(s0)
    4afc:	0007a683          	lw	a3,0(a5)
    4b00:	fe042783          	lw	a5,-32(s0)
    4b04:	00178713          	addi	a4,a5,1
    4b08:	fee42023          	sw	a4,-32(s0)
    4b0c:	0ff6f713          	zext.b	a4,a3
    4b10:	00e78023          	sb	a4,0(a5)
                while (--field_width > 0)
    4b14:	0180006f          	j	4b2c <ee_vsprintf+0x2e8>
                    *str++ = ' ';
    4b18:	fe042783          	lw	a5,-32(s0)
    4b1c:	00178713          	addi	a4,a5,1
    4b20:	fee42023          	sw	a4,-32(s0)
    4b24:	02000713          	li	a4,32
    4b28:	00e78023          	sb	a4,0(a5)
                while (--field_width > 0)
    4b2c:	fd442783          	lw	a5,-44(s0)
    4b30:	fff78793          	addi	a5,a5,-1
    4b34:	fcf42a23          	sw	a5,-44(s0)
    4b38:	fd442783          	lw	a5,-44(s0)
    4b3c:	fcf04ee3          	bgtz	a5,4b18 <ee_vsprintf+0x2d4>
                continue;
    4b40:	2c80006f          	j	4e08 <ee_vsprintf+0x5c4>

            case 's':
                s = va_arg(args, char *);
    4b44:	fb442783          	lw	a5,-76(s0)
    4b48:	00478713          	addi	a4,a5,4
    4b4c:	fae42a23          	sw	a4,-76(s0)
    4b50:	0007a783          	lw	a5,0(a5)
    4b54:	fcf42e23          	sw	a5,-36(s0)
                if (!s)
    4b58:	fdc42783          	lw	a5,-36(s0)
    4b5c:	00079863          	bnez	a5,4b6c <ee_vsprintf+0x328>
                    s = "<NULL>";
    4b60:	000087b7          	lui	a5,0x8
    4b64:	d0878793          	addi	a5,a5,-760 # 7d08 <__subdf3+0xd8c>
    4b68:	fcf42e23          	sw	a5,-36(s0)
                len = strnlen(s, precision);
    4b6c:	fd042783          	lw	a5,-48(s0)
    4b70:	00078593          	mv	a1,a5
    4b74:	fdc42503          	lw	a0,-36(s0)
    4b78:	bc8ff0ef          	jal	ra,3f40 <strnlen>
    4b7c:	00050793          	mv	a5,a0
    4b80:	fcf42423          	sw	a5,-56(s0)
                if (!(flags & LEFT))
    4b84:	fd842783          	lw	a5,-40(s0)
    4b88:	0107f793          	andi	a5,a5,16
    4b8c:	02079863          	bnez	a5,4bbc <ee_vsprintf+0x378>
                    while (len < field_width--)
    4b90:	0180006f          	j	4ba8 <ee_vsprintf+0x364>
                        *str++ = ' ';
    4b94:	fe042783          	lw	a5,-32(s0)
    4b98:	00178713          	addi	a4,a5,1
    4b9c:	fee42023          	sw	a4,-32(s0)
    4ba0:	02000713          	li	a4,32
    4ba4:	00e78023          	sb	a4,0(a5)
                    while (len < field_width--)
    4ba8:	fd442783          	lw	a5,-44(s0)
    4bac:	fff78713          	addi	a4,a5,-1
    4bb0:	fce42a23          	sw	a4,-44(s0)
    4bb4:	fc842703          	lw	a4,-56(s0)
    4bb8:	fcf74ee3          	blt	a4,a5,4b94 <ee_vsprintf+0x350>
                for (i = 0; i < len; ++i)
    4bbc:	fe042423          	sw	zero,-24(s0)
    4bc0:	0300006f          	j	4bf0 <ee_vsprintf+0x3ac>
                    *str++ = *s++;
    4bc4:	fdc42703          	lw	a4,-36(s0)
    4bc8:	00170793          	addi	a5,a4,1
    4bcc:	fcf42e23          	sw	a5,-36(s0)
    4bd0:	fe042783          	lw	a5,-32(s0)
    4bd4:	00178693          	addi	a3,a5,1
    4bd8:	fed42023          	sw	a3,-32(s0)
    4bdc:	00074703          	lbu	a4,0(a4)
    4be0:	00e78023          	sb	a4,0(a5)
                for (i = 0; i < len; ++i)
    4be4:	fe842783          	lw	a5,-24(s0)
    4be8:	00178793          	addi	a5,a5,1
    4bec:	fef42423          	sw	a5,-24(s0)
    4bf0:	fe842703          	lw	a4,-24(s0)
    4bf4:	fc842783          	lw	a5,-56(s0)
    4bf8:	fcf746e3          	blt	a4,a5,4bc4 <ee_vsprintf+0x380>
                while (len < field_width--)
    4bfc:	0180006f          	j	4c14 <ee_vsprintf+0x3d0>
                    *str++ = ' ';
    4c00:	fe042783          	lw	a5,-32(s0)
    4c04:	00178713          	addi	a4,a5,1
    4c08:	fee42023          	sw	a4,-32(s0)
    4c0c:	02000713          	li	a4,32
    4c10:	00e78023          	sb	a4,0(a5)
                while (len < field_width--)
    4c14:	fd442783          	lw	a5,-44(s0)
    4c18:	fff78713          	addi	a4,a5,-1
    4c1c:	fce42a23          	sw	a4,-44(s0)
    4c20:	fc842703          	lw	a4,-56(s0)
    4c24:	fcf74ee3          	blt	a4,a5,4c00 <ee_vsprintf+0x3bc>
                continue;
    4c28:	1e00006f          	j	4e08 <ee_vsprintf+0x5c4>

            case 'p':
                if (field_width == -1)
    4c2c:	fd442703          	lw	a4,-44(s0)
    4c30:	fff00793          	li	a5,-1
    4c34:	00f71c63          	bne	a4,a5,4c4c <ee_vsprintf+0x408>
                {
                    field_width = 2 * sizeof(void *);
    4c38:	00800793          	li	a5,8
    4c3c:	fcf42a23          	sw	a5,-44(s0)
                    flags |= ZEROPAD;
    4c40:	fd842783          	lw	a5,-40(s0)
    4c44:	0017e793          	ori	a5,a5,1
    4c48:	fcf42c23          	sw	a5,-40(s0)
                }
                str = number(str,
                             (unsigned long)va_arg(args, void *),
    4c4c:	fb442783          	lw	a5,-76(s0)
    4c50:	00478713          	addi	a4,a5,4
    4c54:	fae42a23          	sw	a4,-76(s0)
    4c58:	0007a783          	lw	a5,0(a5)
                str = number(str,
    4c5c:	00078593          	mv	a1,a5
    4c60:	fd842783          	lw	a5,-40(s0)
    4c64:	fd042703          	lw	a4,-48(s0)
    4c68:	fd442683          	lw	a3,-44(s0)
    4c6c:	01000613          	li	a2,16
    4c70:	fe042503          	lw	a0,-32(s0)
    4c74:	bc0ff0ef          	jal	ra,4034 <number>
    4c78:	fea42023          	sw	a0,-32(s0)
                             16,
                             field_width,
                             precision,
                             flags);
                continue;
    4c7c:	18c0006f          	j	4e08 <ee_vsprintf+0x5c4>

            case 'A':
                flags |= UPPERCASE;
    4c80:	fd842783          	lw	a5,-40(s0)
    4c84:	0407e793          	ori	a5,a5,64
    4c88:	fcf42c23          	sw	a5,-40(s0)

            case 'a':
                if (qualifier == 'l')
    4c8c:	fcc42703          	lw	a4,-52(s0)
    4c90:	06c00793          	li	a5,108
    4c94:	02f71a63          	bne	a4,a5,4cc8 <ee_vsprintf+0x484>
                    str = eaddr(str,
    4c98:	fb442783          	lw	a5,-76(s0)
    4c9c:	00478713          	addi	a4,a5,4
    4ca0:	fae42a23          	sw	a4,-76(s0)
    4ca4:	0007a783          	lw	a5,0(a5)
    4ca8:	fd842703          	lw	a4,-40(s0)
    4cac:	fd042683          	lw	a3,-48(s0)
    4cb0:	fd442603          	lw	a2,-44(s0)
    4cb4:	00078593          	mv	a1,a5
    4cb8:	fe042503          	lw	a0,-32(s0)
    4cbc:	f18ff0ef          	jal	ra,43d4 <eaddr>
    4cc0:	fea42023          	sw	a0,-32(s0)
                    str = iaddr(str,
                                va_arg(args, unsigned char *),
                                field_width,
                                precision,
                                flags);
                continue;
    4cc4:	1440006f          	j	4e08 <ee_vsprintf+0x5c4>
                    str = iaddr(str,
    4cc8:	fb442783          	lw	a5,-76(s0)
    4ccc:	00478713          	addi	a4,a5,4
    4cd0:	fae42a23          	sw	a4,-76(s0)
    4cd4:	0007a783          	lw	a5,0(a5)
    4cd8:	fd842703          	lw	a4,-40(s0)
    4cdc:	fd042683          	lw	a3,-48(s0)
    4ce0:	fd442603          	lw	a2,-44(s0)
    4ce4:	00078593          	mv	a1,a5
    4ce8:	fe042503          	lw	a0,-32(s0)
    4cec:	8a1ff0ef          	jal	ra,458c <iaddr>
    4cf0:	fea42023          	sw	a0,-32(s0)
                continue;
    4cf4:	1140006f          	j	4e08 <ee_vsprintf+0x5c4>

            // Integer number formats - set up the flags and "break"
            case 'o':
                base = 8;
    4cf8:	00800793          	li	a5,8
    4cfc:	fef42223          	sw	a5,-28(s0)
                break;
    4d00:	08c0006f          	j	4d8c <ee_vsprintf+0x548>

            case 'X':
                flags |= UPPERCASE;
    4d04:	fd842783          	lw	a5,-40(s0)
    4d08:	0407e793          	ori	a5,a5,64
    4d0c:	fcf42c23          	sw	a5,-40(s0)

            case 'x':
                base = 16;
    4d10:	01000793          	li	a5,16
    4d14:	fef42223          	sw	a5,-28(s0)
                break;
    4d18:	0740006f          	j	4d8c <ee_vsprintf+0x548>

            case 'd':
            case 'i':
                flags |= SIGN;
    4d1c:	fd842783          	lw	a5,-40(s0)
    4d20:	0027e793          	ori	a5,a5,2
    4d24:	fcf42c23          	sw	a5,-40(s0)

            case 'u':
                break;
    4d28:	0600006f          	j	4d88 <ee_vsprintf+0x544>
                continue;

#endif

            default:
                if (*fmt != '%')
    4d2c:	fb842783          	lw	a5,-72(s0)
    4d30:	0007c703          	lbu	a4,0(a5)
    4d34:	02500793          	li	a5,37
    4d38:	00f70c63          	beq	a4,a5,4d50 <ee_vsprintf+0x50c>
                    *str++ = '%';
    4d3c:	fe042783          	lw	a5,-32(s0)
    4d40:	00178713          	addi	a4,a5,1
    4d44:	fee42023          	sw	a4,-32(s0)
    4d48:	02500713          	li	a4,37
    4d4c:	00e78023          	sb	a4,0(a5)
                if (*fmt)
    4d50:	fb842783          	lw	a5,-72(s0)
    4d54:	0007c783          	lbu	a5,0(a5)
    4d58:	02078063          	beqz	a5,4d78 <ee_vsprintf+0x534>
                    *str++ = *fmt;
    4d5c:	fb842703          	lw	a4,-72(s0)
    4d60:	fe042783          	lw	a5,-32(s0)
    4d64:	00178693          	addi	a3,a5,1
    4d68:	fed42023          	sw	a3,-32(s0)
    4d6c:	00074703          	lbu	a4,0(a4)
    4d70:	00e78023          	sb	a4,0(a5)
                else
                    --fmt;
                continue;
    4d74:	0940006f          	j	4e08 <ee_vsprintf+0x5c4>
                    --fmt;
    4d78:	fb842783          	lw	a5,-72(s0)
    4d7c:	fff78793          	addi	a5,a5,-1
    4d80:	faf42c23          	sw	a5,-72(s0)
                continue;
    4d84:	0840006f          	j	4e08 <ee_vsprintf+0x5c4>
                break;
    4d88:	00000013          	nop
        }

        if (qualifier == 'l')
    4d8c:	fcc42703          	lw	a4,-52(s0)
    4d90:	06c00793          	li	a5,108
    4d94:	00f71e63          	bne	a4,a5,4db0 <ee_vsprintf+0x56c>
            num = va_arg(args, unsigned long);
    4d98:	fb442783          	lw	a5,-76(s0)
    4d9c:	00478713          	addi	a4,a5,4
    4da0:	fae42a23          	sw	a4,-76(s0)
    4da4:	0007a783          	lw	a5,0(a5)
    4da8:	fef42623          	sw	a5,-20(s0)
    4dac:	03c0006f          	j	4de8 <ee_vsprintf+0x5a4>
        else if (flags & SIGN)
    4db0:	fd842783          	lw	a5,-40(s0)
    4db4:	0027f793          	andi	a5,a5,2
    4db8:	00078e63          	beqz	a5,4dd4 <ee_vsprintf+0x590>
            num = va_arg(args, int);
    4dbc:	fb442783          	lw	a5,-76(s0)
    4dc0:	00478713          	addi	a4,a5,4
    4dc4:	fae42a23          	sw	a4,-76(s0)
    4dc8:	0007a783          	lw	a5,0(a5)
    4dcc:	fef42623          	sw	a5,-20(s0)
    4dd0:	0180006f          	j	4de8 <ee_vsprintf+0x5a4>
        else
            num = va_arg(args, unsigned int);
    4dd4:	fb442783          	lw	a5,-76(s0)
    4dd8:	00478713          	addi	a4,a5,4
    4ddc:	fae42a23          	sw	a4,-76(s0)
    4de0:	0007a783          	lw	a5,0(a5)
    4de4:	fef42623          	sw	a5,-20(s0)

        str = number(str, num, base, field_width, precision, flags);
    4de8:	fec42583          	lw	a1,-20(s0)
    4dec:	fd842783          	lw	a5,-40(s0)
    4df0:	fd042703          	lw	a4,-48(s0)
    4df4:	fd442683          	lw	a3,-44(s0)
    4df8:	fe442603          	lw	a2,-28(s0)
    4dfc:	fe042503          	lw	a0,-32(s0)
    4e00:	a34ff0ef          	jal	ra,4034 <number>
    4e04:	fea42023          	sw	a0,-32(s0)
    for (str = buf; *fmt; fmt++)
    4e08:	fb842783          	lw	a5,-72(s0)
    4e0c:	00178793          	addi	a5,a5,1
    4e10:	faf42c23          	sw	a5,-72(s0)
    4e14:	fb842783          	lw	a5,-72(s0)
    4e18:	0007c783          	lbu	a5,0(a5)
    4e1c:	a40798e3          	bnez	a5,486c <ee_vsprintf+0x28>
    }

    *str = '\0';
    4e20:	fe042783          	lw	a5,-32(s0)
    4e24:	00078023          	sb	zero,0(a5)
    return str - buf;
    4e28:	fe042703          	lw	a4,-32(s0)
    4e2c:	fbc42783          	lw	a5,-68(s0)
    4e30:	40f707b3          	sub	a5,a4,a5
}
    4e34:	00078513          	mv	a0,a5
    4e38:	04c12083          	lw	ra,76(sp)
    4e3c:	04812403          	lw	s0,72(sp)
    4e40:	05010113          	addi	sp,sp,80
    4e44:	00008067          	ret

00004e48 <uart_send_char>:

void
uart_send_char(char c)
{
    4e48:	fd010113          	addi	sp,sp,-48
    4e4c:	02812623          	sw	s0,44(sp)
    4e50:	03010413          	addi	s0,sp,48
    4e54:	00050793          	mv	a5,a0
    4e58:	fcf40fa3          	sb	a5,-33(s0)
	char* uart = (char*)0xDEADBEEE;
    4e5c:	deadc7b7          	lui	a5,0xdeadc
    4e60:	eee78793          	addi	a5,a5,-274 # deadbeee <RAM_SIZE+0xdeacbeee>
    4e64:	fef42623          	sw	a5,-20(s0)
	*uart = c;
    4e68:	fec42783          	lw	a5,-20(s0)
    4e6c:	fdf44703          	lbu	a4,-33(s0)
    4e70:	00e78023          	sb	a4,0(a5)
            while (*UART_CONTROL_ADDRESS != UART_READY);

            Check the UART sample code on your platform or the board
       documentation.
    */
}
    4e74:	00000013          	nop
    4e78:	02c12403          	lw	s0,44(sp)
    4e7c:	03010113          	addi	sp,sp,48
    4e80:	00008067          	ret

00004e84 <ee_printf>:

int
ee_printf(const char *fmt, ...)
{
    4e84:	bb010113          	addi	sp,sp,-1104
    4e88:	42112623          	sw	ra,1068(sp)
    4e8c:	42812423          	sw	s0,1064(sp)
    4e90:	43010413          	addi	s0,sp,1072
    4e94:	bca42e23          	sw	a0,-1060(s0)
    4e98:	00b42223          	sw	a1,4(s0)
    4e9c:	00c42423          	sw	a2,8(s0)
    4ea0:	00d42623          	sw	a3,12(s0)
    4ea4:	00e42823          	sw	a4,16(s0)
    4ea8:	00f42a23          	sw	a5,20(s0)
    4eac:	01042c23          	sw	a6,24(s0)
    4eb0:	01142e23          	sw	a7,28(s0)
    char    buf[1024], *p;
    va_list args;
    int     n = 0;
    4eb4:	fe042423          	sw	zero,-24(s0)

    va_start(args, fmt);
    4eb8:	02040793          	addi	a5,s0,32
    4ebc:	bcf42c23          	sw	a5,-1064(s0)
    4ec0:	bd842783          	lw	a5,-1064(s0)
    4ec4:	fe478793          	addi	a5,a5,-28
    4ec8:	bef42223          	sw	a5,-1052(s0)
    ee_vsprintf(buf, fmt, args);
    4ecc:	be442703          	lw	a4,-1052(s0)
    4ed0:	be840793          	addi	a5,s0,-1048
    4ed4:	00070613          	mv	a2,a4
    4ed8:	bdc42583          	lw	a1,-1060(s0)
    4edc:	00078513          	mv	a0,a5
    4ee0:	965ff0ef          	jal	ra,4844 <ee_vsprintf>
    va_end(args);
    p = buf;
    4ee4:	be840793          	addi	a5,s0,-1048
    4ee8:	fef42623          	sw	a5,-20(s0)
    while (*p)
    4eec:	02c0006f          	j	4f18 <ee_printf+0x94>
    {
        uart_send_char(*p);
    4ef0:	fec42783          	lw	a5,-20(s0)
    4ef4:	0007c783          	lbu	a5,0(a5)
    4ef8:	00078513          	mv	a0,a5
    4efc:	f4dff0ef          	jal	ra,4e48 <uart_send_char>
        n++;
    4f00:	fe842783          	lw	a5,-24(s0)
    4f04:	00178793          	addi	a5,a5,1
    4f08:	fef42423          	sw	a5,-24(s0)
        p++;
    4f0c:	fec42783          	lw	a5,-20(s0)
    4f10:	00178793          	addi	a5,a5,1
    4f14:	fef42623          	sw	a5,-20(s0)
    while (*p)
    4f18:	fec42783          	lw	a5,-20(s0)
    4f1c:	0007c783          	lbu	a5,0(a5)
    4f20:	fc0798e3          	bnez	a5,4ef0 <ee_printf+0x6c>
    }

    return n;
    4f24:	fe842783          	lw	a5,-24(s0)
}
    4f28:	00078513          	mv	a0,a5
    4f2c:	42c12083          	lw	ra,1068(sp)
    4f30:	42812403          	lw	s0,1064(sp)
    4f34:	45010113          	addi	sp,sp,1104
    4f38:	00008067          	ret

00004f3c <__adddf3>:
    4f3c:	00100837          	lui	a6,0x100
    4f40:	fff80813          	addi	a6,a6,-1 # fffff <RAM_SIZE+0xeffff>
    4f44:	fe010113          	addi	sp,sp,-32
    4f48:	00b877b3          	and	a5,a6,a1
    4f4c:	0145d713          	srli	a4,a1,0x14
    4f50:	00d87833          	and	a6,a6,a3
    4f54:	0146d313          	srli	t1,a3,0x14
    4f58:	00812c23          	sw	s0,24(sp)
    4f5c:	00379793          	slli	a5,a5,0x3
    4f60:	7ff77413          	andi	s0,a4,2047
    4f64:	01d55713          	srli	a4,a0,0x1d
    4f68:	00381813          	slli	a6,a6,0x3
    4f6c:	00912a23          	sw	s1,20(sp)
    4f70:	00f767b3          	or	a5,a4,a5
    4f74:	01f5d493          	srli	s1,a1,0x1f
    4f78:	01d65713          	srli	a4,a2,0x1d
    4f7c:	7ff37313          	andi	t1,t1,2047
    4f80:	00112e23          	sw	ra,28(sp)
    4f84:	01212823          	sw	s2,16(sp)
    4f88:	01312623          	sw	s3,12(sp)
    4f8c:	01f6d693          	srli	a3,a3,0x1f
    4f90:	01076733          	or	a4,a4,a6
    4f94:	00351593          	slli	a1,a0,0x3
    4f98:	00361613          	slli	a2,a2,0x3
    4f9c:	40640833          	sub	a6,s0,t1
    4fa0:	2cd49863          	bne	s1,a3,5270 <__adddf3+0x334>
    4fa4:	13005063          	blez	a6,50c4 <__adddf3+0x188>
    4fa8:	04031063          	bnez	t1,4fe8 <__adddf3+0xac>
    4fac:	00c766b3          	or	a3,a4,a2
    4fb0:	70068c63          	beqz	a3,56c8 <__adddf3+0x78c>
    4fb4:	fff80513          	addi	a0,a6,-1
    4fb8:	02051063          	bnez	a0,4fd8 <__adddf3+0x9c>
    4fbc:	00c58633          	add	a2,a1,a2
    4fc0:	00b63533          	sltu	a0,a2,a1
    4fc4:	00e787b3          	add	a5,a5,a4
    4fc8:	00a787b3          	add	a5,a5,a0
    4fcc:	00060593          	mv	a1,a2
    4fd0:	00100413          	li	s0,1
    4fd4:	0700006f          	j	5044 <__adddf3+0x108>
    4fd8:	7ff00693          	li	a3,2047
    4fdc:	02d81063          	bne	a6,a3,4ffc <__adddf3+0xc0>
    4fe0:	7ff00413          	li	s0,2047
    4fe4:	2140006f          	j	51f8 <__adddf3+0x2bc>
    4fe8:	7ff00693          	li	a3,2047
    4fec:	20d40663          	beq	s0,a3,51f8 <__adddf3+0x2bc>
    4ff0:	008006b7          	lui	a3,0x800
    4ff4:	00d76733          	or	a4,a4,a3
    4ff8:	00080513          	mv	a0,a6
    4ffc:	03800693          	li	a3,56
    5000:	0aa6cc63          	blt	a3,a0,50b8 <__adddf3+0x17c>
    5004:	01f00693          	li	a3,31
    5008:	06a6ce63          	blt	a3,a0,5084 <__adddf3+0x148>
    500c:	02000813          	li	a6,32
    5010:	40a80833          	sub	a6,a6,a0
    5014:	010716b3          	sll	a3,a4,a6
    5018:	00a658b3          	srl	a7,a2,a0
    501c:	01061633          	sll	a2,a2,a6
    5020:	0116e6b3          	or	a3,a3,a7
    5024:	00c03633          	snez	a2,a2
    5028:	00c6e633          	or	a2,a3,a2
    502c:	00a75733          	srl	a4,a4,a0
    5030:	00b60633          	add	a2,a2,a1
    5034:	00b63533          	sltu	a0,a2,a1
    5038:	00f70733          	add	a4,a4,a5
    503c:	00a707b3          	add	a5,a4,a0
    5040:	00060593          	mv	a1,a2
    5044:	00800737          	lui	a4,0x800
    5048:	00e7f733          	and	a4,a5,a4
    504c:	1a070663          	beqz	a4,51f8 <__adddf3+0x2bc>
    5050:	00140413          	addi	s0,s0,1
    5054:	7ff00713          	li	a4,2047
    5058:	5ce40a63          	beq	s0,a4,562c <__adddf3+0x6f0>
    505c:	ff800737          	lui	a4,0xff800
    5060:	fff70713          	addi	a4,a4,-1 # ff7fffff <RAM_SIZE+0xff7effff>
    5064:	00e7f7b3          	and	a5,a5,a4
    5068:	0015f513          	andi	a0,a1,1
    506c:	0015d713          	srli	a4,a1,0x1
    5070:	00a76533          	or	a0,a4,a0
    5074:	01f79593          	slli	a1,a5,0x1f
    5078:	00a5e5b3          	or	a1,a1,a0
    507c:	0017d793          	srli	a5,a5,0x1
    5080:	1780006f          	j	51f8 <__adddf3+0x2bc>
    5084:	fe050693          	addi	a3,a0,-32
    5088:	02000893          	li	a7,32
    508c:	00d756b3          	srl	a3,a4,a3
    5090:	00000813          	li	a6,0
    5094:	01150863          	beq	a0,a7,50a4 <__adddf3+0x168>
    5098:	04000813          	li	a6,64
    509c:	40a80533          	sub	a0,a6,a0
    50a0:	00a71833          	sll	a6,a4,a0
    50a4:	00c86633          	or	a2,a6,a2
    50a8:	00c03633          	snez	a2,a2
    50ac:	00c6e633          	or	a2,a3,a2
    50b0:	00000713          	li	a4,0
    50b4:	f7dff06f          	j	5030 <__adddf3+0xf4>
    50b8:	00c76633          	or	a2,a4,a2
    50bc:	00c03633          	snez	a2,a2
    50c0:	ff1ff06f          	j	50b0 <__adddf3+0x174>
    50c4:	0e080263          	beqz	a6,51a8 <__adddf3+0x26c>
    50c8:	40830533          	sub	a0,t1,s0
    50cc:	02041e63          	bnez	s0,5108 <__adddf3+0x1cc>
    50d0:	00b7e6b3          	or	a3,a5,a1
    50d4:	52068c63          	beqz	a3,560c <__adddf3+0x6d0>
    50d8:	fff50693          	addi	a3,a0,-1
    50dc:	00069c63          	bnez	a3,50f4 <__adddf3+0x1b8>
    50e0:	00c585b3          	add	a1,a1,a2
    50e4:	00e787b3          	add	a5,a5,a4
    50e8:	00c5b633          	sltu	a2,a1,a2
    50ec:	00c787b3          	add	a5,a5,a2
    50f0:	ee1ff06f          	j	4fd0 <__adddf3+0x94>
    50f4:	7ff00813          	li	a6,2047
    50f8:	03051263          	bne	a0,a6,511c <__adddf3+0x1e0>
    50fc:	00070793          	mv	a5,a4
    5100:	00060593          	mv	a1,a2
    5104:	eddff06f          	j	4fe0 <__adddf3+0xa4>
    5108:	7ff00693          	li	a3,2047
    510c:	fed308e3          	beq	t1,a3,50fc <__adddf3+0x1c0>
    5110:	008006b7          	lui	a3,0x800
    5114:	00d7e7b3          	or	a5,a5,a3
    5118:	00050693          	mv	a3,a0
    511c:	03800513          	li	a0,56
    5120:	06d54e63          	blt	a0,a3,519c <__adddf3+0x260>
    5124:	01f00513          	li	a0,31
    5128:	04d54063          	blt	a0,a3,5168 <__adddf3+0x22c>
    512c:	02000813          	li	a6,32
    5130:	40d80833          	sub	a6,a6,a3
    5134:	01079533          	sll	a0,a5,a6
    5138:	00d5d8b3          	srl	a7,a1,a3
    513c:	010595b3          	sll	a1,a1,a6
    5140:	01156533          	or	a0,a0,a7
    5144:	00b035b3          	snez	a1,a1
    5148:	00b56533          	or	a0,a0,a1
    514c:	00d7d7b3          	srl	a5,a5,a3
    5150:	00c505b3          	add	a1,a0,a2
    5154:	00e787b3          	add	a5,a5,a4
    5158:	00c5b633          	sltu	a2,a1,a2
    515c:	00c787b3          	add	a5,a5,a2
    5160:	00030413          	mv	s0,t1
    5164:	ee1ff06f          	j	5044 <__adddf3+0x108>
    5168:	fe068513          	addi	a0,a3,-32 # 7fffe0 <RAM_SIZE+0x7effe0>
    516c:	02000893          	li	a7,32
    5170:	00a7d833          	srl	a6,a5,a0
    5174:	00000513          	li	a0,0
    5178:	01168863          	beq	a3,a7,5188 <__adddf3+0x24c>
    517c:	04000513          	li	a0,64
    5180:	40d50533          	sub	a0,a0,a3
    5184:	00a79533          	sll	a0,a5,a0
    5188:	00b56533          	or	a0,a0,a1
    518c:	00a03533          	snez	a0,a0
    5190:	00a86533          	or	a0,a6,a0
    5194:	00000793          	li	a5,0
    5198:	fb9ff06f          	j	5150 <__adddf3+0x214>
    519c:	00b7e533          	or	a0,a5,a1
    51a0:	00a03533          	snez	a0,a0
    51a4:	ff1ff06f          	j	5194 <__adddf3+0x258>
    51a8:	00140693          	addi	a3,s0,1
    51ac:	7fe6f513          	andi	a0,a3,2046
    51b0:	08051863          	bnez	a0,5240 <__adddf3+0x304>
    51b4:	00b7e6b3          	or	a3,a5,a1
    51b8:	06041463          	bnez	s0,5220 <__adddf3+0x2e4>
    51bc:	46068063          	beqz	a3,561c <__adddf3+0x6e0>
    51c0:	00c766b3          	or	a3,a4,a2
    51c4:	02068a63          	beqz	a3,51f8 <__adddf3+0x2bc>
    51c8:	00c58633          	add	a2,a1,a2
    51cc:	00e787b3          	add	a5,a5,a4
    51d0:	00b63533          	sltu	a0,a2,a1
    51d4:	00a787b3          	add	a5,a5,a0
    51d8:	00800737          	lui	a4,0x800
    51dc:	00e7f733          	and	a4,a5,a4
    51e0:	00060593          	mv	a1,a2
    51e4:	00070a63          	beqz	a4,51f8 <__adddf3+0x2bc>
    51e8:	ff800737          	lui	a4,0xff800
    51ec:	fff70713          	addi	a4,a4,-1 # ff7fffff <RAM_SIZE+0xff7effff>
    51f0:	00e7f7b3          	and	a5,a5,a4
    51f4:	00100413          	li	s0,1
    51f8:	0075f713          	andi	a4,a1,7
    51fc:	42070c63          	beqz	a4,5634 <__adddf3+0x6f8>
    5200:	00f5f713          	andi	a4,a1,15
    5204:	00400693          	li	a3,4
    5208:	42d70663          	beq	a4,a3,5634 <__adddf3+0x6f8>
    520c:	00458713          	addi	a4,a1,4
    5210:	00b73533          	sltu	a0,a4,a1
    5214:	00a787b3          	add	a5,a5,a0
    5218:	00070593          	mv	a1,a4
    521c:	4180006f          	j	5634 <__adddf3+0x6f8>
    5220:	ec068ee3          	beqz	a3,50fc <__adddf3+0x1c0>
    5224:	00c76633          	or	a2,a4,a2
    5228:	da060ce3          	beqz	a2,4fe0 <__adddf3+0xa4>
    522c:	00000493          	li	s1,0
    5230:	004007b7          	lui	a5,0x400
    5234:	00000593          	li	a1,0
    5238:	7ff00413          	li	s0,2047
    523c:	3f80006f          	j	5634 <__adddf3+0x6f8>
    5240:	7ff00513          	li	a0,2047
    5244:	3ea68263          	beq	a3,a0,5628 <__adddf3+0x6ec>
    5248:	00c58633          	add	a2,a1,a2
    524c:	00b63533          	sltu	a0,a2,a1
    5250:	00e787b3          	add	a5,a5,a4
    5254:	00a787b3          	add	a5,a5,a0
    5258:	01f79513          	slli	a0,a5,0x1f
    525c:	00165613          	srli	a2,a2,0x1
    5260:	00c565b3          	or	a1,a0,a2
    5264:	0017d793          	srli	a5,a5,0x1
    5268:	00068413          	mv	s0,a3
    526c:	f8dff06f          	j	51f8 <__adddf3+0x2bc>
    5270:	0f005c63          	blez	a6,5368 <__adddf3+0x42c>
    5274:	08031e63          	bnez	t1,5310 <__adddf3+0x3d4>
    5278:	00c766b3          	or	a3,a4,a2
    527c:	44068663          	beqz	a3,56c8 <__adddf3+0x78c>
    5280:	fff80513          	addi	a0,a6,-1
    5284:	02051063          	bnez	a0,52a4 <__adddf3+0x368>
    5288:	40c58633          	sub	a2,a1,a2
    528c:	00c5b533          	sltu	a0,a1,a2
    5290:	40e787b3          	sub	a5,a5,a4
    5294:	40a787b3          	sub	a5,a5,a0
    5298:	00060593          	mv	a1,a2
    529c:	00100413          	li	s0,1
    52a0:	0540006f          	j	52f4 <__adddf3+0x3b8>
    52a4:	7ff00693          	li	a3,2047
    52a8:	d2d80ce3          	beq	a6,a3,4fe0 <__adddf3+0xa4>
    52ac:	03800693          	li	a3,56
    52b0:	0aa6c663          	blt	a3,a0,535c <__adddf3+0x420>
    52b4:	01f00693          	li	a3,31
    52b8:	06a6c863          	blt	a3,a0,5328 <__adddf3+0x3ec>
    52bc:	02000813          	li	a6,32
    52c0:	40a80833          	sub	a6,a6,a0
    52c4:	010716b3          	sll	a3,a4,a6
    52c8:	00a658b3          	srl	a7,a2,a0
    52cc:	01061633          	sll	a2,a2,a6
    52d0:	0116e6b3          	or	a3,a3,a7
    52d4:	00c03633          	snez	a2,a2
    52d8:	00c6e633          	or	a2,a3,a2
    52dc:	00a75733          	srl	a4,a4,a0
    52e0:	40c58633          	sub	a2,a1,a2
    52e4:	00c5b533          	sltu	a0,a1,a2
    52e8:	40e78733          	sub	a4,a5,a4
    52ec:	40a707b3          	sub	a5,a4,a0
    52f0:	00060593          	mv	a1,a2
    52f4:	00800937          	lui	s2,0x800
    52f8:	0127f733          	and	a4,a5,s2
    52fc:	ee070ee3          	beqz	a4,51f8 <__adddf3+0x2bc>
    5300:	fff90913          	addi	s2,s2,-1 # 7fffff <RAM_SIZE+0x7effff>
    5304:	0127f933          	and	s2,a5,s2
    5308:	00058993          	mv	s3,a1
    530c:	2140006f          	j	5520 <__adddf3+0x5e4>
    5310:	7ff00693          	li	a3,2047
    5314:	eed402e3          	beq	s0,a3,51f8 <__adddf3+0x2bc>
    5318:	008006b7          	lui	a3,0x800
    531c:	00d76733          	or	a4,a4,a3
    5320:	00080513          	mv	a0,a6
    5324:	f89ff06f          	j	52ac <__adddf3+0x370>
    5328:	fe050693          	addi	a3,a0,-32
    532c:	02000893          	li	a7,32
    5330:	00d756b3          	srl	a3,a4,a3
    5334:	00000813          	li	a6,0
    5338:	01150863          	beq	a0,a7,5348 <__adddf3+0x40c>
    533c:	04000813          	li	a6,64
    5340:	40a80533          	sub	a0,a6,a0
    5344:	00a71833          	sll	a6,a4,a0
    5348:	00c86633          	or	a2,a6,a2
    534c:	00c03633          	snez	a2,a2
    5350:	00c6e633          	or	a2,a3,a2
    5354:	00000713          	li	a4,0
    5358:	f89ff06f          	j	52e0 <__adddf3+0x3a4>
    535c:	00c76633          	or	a2,a4,a2
    5360:	00c03633          	snez	a2,a2
    5364:	ff1ff06f          	j	5354 <__adddf3+0x418>
    5368:	0e080863          	beqz	a6,5458 <__adddf3+0x51c>
    536c:	40830533          	sub	a0,t1,s0
    5370:	04041263          	bnez	s0,53b4 <__adddf3+0x478>
    5374:	00b7e833          	or	a6,a5,a1
    5378:	34080c63          	beqz	a6,56d0 <__adddf3+0x794>
    537c:	fff50813          	addi	a6,a0,-1
    5380:	00081e63          	bnez	a6,539c <__adddf3+0x460>
    5384:	40b605b3          	sub	a1,a2,a1
    5388:	40f707b3          	sub	a5,a4,a5
    538c:	00b63633          	sltu	a2,a2,a1
    5390:	40c787b3          	sub	a5,a5,a2
    5394:	00068493          	mv	s1,a3
    5398:	f05ff06f          	j	529c <__adddf3+0x360>
    539c:	7ff00893          	li	a7,2047
    53a0:	03151463          	bne	a0,a7,53c8 <__adddf3+0x48c>
    53a4:	00070793          	mv	a5,a4
    53a8:	00060593          	mv	a1,a2
    53ac:	7ff00413          	li	s0,2047
    53b0:	0d00006f          	j	5480 <__adddf3+0x544>
    53b4:	7ff00813          	li	a6,2047
    53b8:	ff0306e3          	beq	t1,a6,53a4 <__adddf3+0x468>
    53bc:	00800837          	lui	a6,0x800
    53c0:	0107e7b3          	or	a5,a5,a6
    53c4:	00050813          	mv	a6,a0
    53c8:	03800513          	li	a0,56
    53cc:	09054063          	blt	a0,a6,544c <__adddf3+0x510>
    53d0:	01f00513          	li	a0,31
    53d4:	05054263          	blt	a0,a6,5418 <__adddf3+0x4dc>
    53d8:	02000893          	li	a7,32
    53dc:	410888b3          	sub	a7,a7,a6
    53e0:	01179533          	sll	a0,a5,a7
    53e4:	0105de33          	srl	t3,a1,a6
    53e8:	011595b3          	sll	a1,a1,a7
    53ec:	01c56533          	or	a0,a0,t3
    53f0:	00b035b3          	snez	a1,a1
    53f4:	00b56533          	or	a0,a0,a1
    53f8:	0107d7b3          	srl	a5,a5,a6
    53fc:	40a605b3          	sub	a1,a2,a0
    5400:	40f707b3          	sub	a5,a4,a5
    5404:	00b63633          	sltu	a2,a2,a1
    5408:	40c787b3          	sub	a5,a5,a2
    540c:	00030413          	mv	s0,t1
    5410:	00068493          	mv	s1,a3
    5414:	ee1ff06f          	j	52f4 <__adddf3+0x3b8>
    5418:	fe080513          	addi	a0,a6,-32 # 7fffe0 <RAM_SIZE+0x7effe0>
    541c:	02000e13          	li	t3,32
    5420:	00a7d8b3          	srl	a7,a5,a0
    5424:	00000513          	li	a0,0
    5428:	01c80863          	beq	a6,t3,5438 <__adddf3+0x4fc>
    542c:	04000513          	li	a0,64
    5430:	41050533          	sub	a0,a0,a6
    5434:	00a79533          	sll	a0,a5,a0
    5438:	00b56533          	or	a0,a0,a1
    543c:	00a03533          	snez	a0,a0
    5440:	00a8e533          	or	a0,a7,a0
    5444:	00000793          	li	a5,0
    5448:	fb5ff06f          	j	53fc <__adddf3+0x4c0>
    544c:	00b7e533          	or	a0,a5,a1
    5450:	00a03533          	snez	a0,a0
    5454:	ff1ff06f          	j	5444 <__adddf3+0x508>
    5458:	00140513          	addi	a0,s0,1
    545c:	7fe57513          	andi	a0,a0,2046
    5460:	08051863          	bnez	a0,54f0 <__adddf3+0x5b4>
    5464:	00b7e833          	or	a6,a5,a1
    5468:	00c76533          	or	a0,a4,a2
    546c:	06041263          	bnez	s0,54d0 <__adddf3+0x594>
    5470:	00081c63          	bnez	a6,5488 <__adddf3+0x54c>
    5474:	26050663          	beqz	a0,56e0 <__adddf3+0x7a4>
    5478:	00070793          	mv	a5,a4
    547c:	00060593          	mv	a1,a2
    5480:	00068493          	mv	s1,a3
    5484:	d75ff06f          	j	51f8 <__adddf3+0x2bc>
    5488:	d60508e3          	beqz	a0,51f8 <__adddf3+0x2bc>
    548c:	40c58833          	sub	a6,a1,a2
    5490:	0105b8b3          	sltu	a7,a1,a6
    5494:	40e78533          	sub	a0,a5,a4
    5498:	41150533          	sub	a0,a0,a7
    549c:	008008b7          	lui	a7,0x800
    54a0:	011578b3          	and	a7,a0,a7
    54a4:	00088c63          	beqz	a7,54bc <__adddf3+0x580>
    54a8:	40b605b3          	sub	a1,a2,a1
    54ac:	40f707b3          	sub	a5,a4,a5
    54b0:	00b63633          	sltu	a2,a2,a1
    54b4:	40c787b3          	sub	a5,a5,a2
    54b8:	fc9ff06f          	j	5480 <__adddf3+0x544>
    54bc:	00a865b3          	or	a1,a6,a0
    54c0:	22058863          	beqz	a1,56f0 <__adddf3+0x7b4>
    54c4:	00050793          	mv	a5,a0
    54c8:	00080593          	mv	a1,a6
    54cc:	d2dff06f          	j	51f8 <__adddf3+0x2bc>
    54d0:	00081c63          	bnez	a6,54e8 <__adddf3+0x5ac>
    54d4:	22050263          	beqz	a0,56f8 <__adddf3+0x7bc>
    54d8:	00070793          	mv	a5,a4
    54dc:	00060593          	mv	a1,a2
    54e0:	00068493          	mv	s1,a3
    54e4:	afdff06f          	j	4fe0 <__adddf3+0xa4>
    54e8:	ae050ce3          	beqz	a0,4fe0 <__adddf3+0xa4>
    54ec:	d41ff06f          	j	522c <__adddf3+0x2f0>
    54f0:	40c589b3          	sub	s3,a1,a2
    54f4:	0135b533          	sltu	a0,a1,s3
    54f8:	40e78933          	sub	s2,a5,a4
    54fc:	40a90933          	sub	s2,s2,a0
    5500:	00800537          	lui	a0,0x800
    5504:	00a97533          	and	a0,s2,a0
    5508:	08050463          	beqz	a0,5590 <__adddf3+0x654>
    550c:	40b609b3          	sub	s3,a2,a1
    5510:	40f707b3          	sub	a5,a4,a5
    5514:	01363633          	sltu	a2,a2,s3
    5518:	40c78933          	sub	s2,a5,a2
    551c:	00068493          	mv	s1,a3
    5520:	08090263          	beqz	s2,55a4 <__adddf3+0x668>
    5524:	00090513          	mv	a0,s2
    5528:	408010ef          	jal	ra,6930 <__clzsi2>
    552c:	ff850713          	addi	a4,a0,-8 # 7ffff8 <RAM_SIZE+0x7efff8>
    5530:	01f00793          	li	a5,31
    5534:	08e7c063          	blt	a5,a4,55b4 <__adddf3+0x678>
    5538:	02000793          	li	a5,32
    553c:	40e787b3          	sub	a5,a5,a4
    5540:	00e91933          	sll	s2,s2,a4
    5544:	00f9d7b3          	srl	a5,s3,a5
    5548:	0127e7b3          	or	a5,a5,s2
    554c:	00e995b3          	sll	a1,s3,a4
    5550:	0a874463          	blt	a4,s0,55f8 <__adddf3+0x6bc>
    5554:	40870733          	sub	a4,a4,s0
    5558:	00170693          	addi	a3,a4,1
    555c:	01f00613          	li	a2,31
    5560:	06d64263          	blt	a2,a3,55c4 <__adddf3+0x688>
    5564:	02000713          	li	a4,32
    5568:	40d70733          	sub	a4,a4,a3
    556c:	00e79633          	sll	a2,a5,a4
    5570:	00d5d533          	srl	a0,a1,a3
    5574:	00e595b3          	sll	a1,a1,a4
    5578:	00a66633          	or	a2,a2,a0
    557c:	00b035b3          	snez	a1,a1
    5580:	00b665b3          	or	a1,a2,a1
    5584:	00d7d7b3          	srl	a5,a5,a3
    5588:	00000413          	li	s0,0
    558c:	c6dff06f          	j	51f8 <__adddf3+0x2bc>
    5590:	0129e5b3          	or	a1,s3,s2
    5594:	f80596e3          	bnez	a1,5520 <__adddf3+0x5e4>
    5598:	00000793          	li	a5,0
    559c:	00000413          	li	s0,0
    55a0:	1480006f          	j	56e8 <__adddf3+0x7ac>
    55a4:	00098513          	mv	a0,s3
    55a8:	388010ef          	jal	ra,6930 <__clzsi2>
    55ac:	02050513          	addi	a0,a0,32
    55b0:	f7dff06f          	j	552c <__adddf3+0x5f0>
    55b4:	fd850793          	addi	a5,a0,-40
    55b8:	00f997b3          	sll	a5,s3,a5
    55bc:	00000593          	li	a1,0
    55c0:	f91ff06f          	j	5550 <__adddf3+0x614>
    55c4:	fe170713          	addi	a4,a4,-31
    55c8:	02000613          	li	a2,32
    55cc:	00e7d733          	srl	a4,a5,a4
    55d0:	00000513          	li	a0,0
    55d4:	00c68863          	beq	a3,a2,55e4 <__adddf3+0x6a8>
    55d8:	04000513          	li	a0,64
    55dc:	40d50533          	sub	a0,a0,a3
    55e0:	00a79533          	sll	a0,a5,a0
    55e4:	00a5e533          	or	a0,a1,a0
    55e8:	00a03533          	snez	a0,a0
    55ec:	00a765b3          	or	a1,a4,a0
    55f0:	00000793          	li	a5,0
    55f4:	f95ff06f          	j	5588 <__adddf3+0x64c>
    55f8:	40e40433          	sub	s0,s0,a4
    55fc:	ff800737          	lui	a4,0xff800
    5600:	fff70713          	addi	a4,a4,-1 # ff7fffff <RAM_SIZE+0xff7effff>
    5604:	00e7f7b3          	and	a5,a5,a4
    5608:	bf1ff06f          	j	51f8 <__adddf3+0x2bc>
    560c:	00070793          	mv	a5,a4
    5610:	00060593          	mv	a1,a2
    5614:	00050413          	mv	s0,a0
    5618:	be1ff06f          	j	51f8 <__adddf3+0x2bc>
    561c:	00070793          	mv	a5,a4
    5620:	00060593          	mv	a1,a2
    5624:	bd5ff06f          	j	51f8 <__adddf3+0x2bc>
    5628:	7ff00413          	li	s0,2047
    562c:	00000793          	li	a5,0
    5630:	00000593          	li	a1,0
    5634:	00800737          	lui	a4,0x800
    5638:	00e7f733          	and	a4,a5,a4
    563c:	00070e63          	beqz	a4,5658 <__adddf3+0x71c>
    5640:	00140413          	addi	s0,s0,1
    5644:	7ff00713          	li	a4,2047
    5648:	0ce40063          	beq	s0,a4,5708 <__adddf3+0x7cc>
    564c:	ff800737          	lui	a4,0xff800
    5650:	fff70713          	addi	a4,a4,-1 # ff7fffff <RAM_SIZE+0xff7effff>
    5654:	00e7f7b3          	and	a5,a5,a4
    5658:	01d79713          	slli	a4,a5,0x1d
    565c:	0035d513          	srli	a0,a1,0x3
    5660:	00a76533          	or	a0,a4,a0
    5664:	7ff00713          	li	a4,2047
    5668:	0037d793          	srli	a5,a5,0x3
    566c:	00e41e63          	bne	s0,a4,5688 <__adddf3+0x74c>
    5670:	00f56533          	or	a0,a0,a5
    5674:	00000793          	li	a5,0
    5678:	00050863          	beqz	a0,5688 <__adddf3+0x74c>
    567c:	000807b7          	lui	a5,0x80
    5680:	00000513          	li	a0,0
    5684:	00000493          	li	s1,0
    5688:	01441713          	slli	a4,s0,0x14
    568c:	7ff006b7          	lui	a3,0x7ff00
    5690:	00c79793          	slli	a5,a5,0xc
    5694:	01c12083          	lw	ra,28(sp)
    5698:	01812403          	lw	s0,24(sp)
    569c:	00d77733          	and	a4,a4,a3
    56a0:	00c7d793          	srli	a5,a5,0xc
    56a4:	01f49493          	slli	s1,s1,0x1f
    56a8:	00f767b3          	or	a5,a4,a5
    56ac:	0097e733          	or	a4,a5,s1
    56b0:	01012903          	lw	s2,16(sp)
    56b4:	01412483          	lw	s1,20(sp)
    56b8:	00c12983          	lw	s3,12(sp)
    56bc:	00070593          	mv	a1,a4
    56c0:	02010113          	addi	sp,sp,32
    56c4:	00008067          	ret
    56c8:	00080413          	mv	s0,a6
    56cc:	b2dff06f          	j	51f8 <__adddf3+0x2bc>
    56d0:	00070793          	mv	a5,a4
    56d4:	00060593          	mv	a1,a2
    56d8:	00050413          	mv	s0,a0
    56dc:	da5ff06f          	j	5480 <__adddf3+0x544>
    56e0:	00000793          	li	a5,0
    56e4:	00000593          	li	a1,0
    56e8:	00000493          	li	s1,0
    56ec:	f49ff06f          	j	5634 <__adddf3+0x6f8>
    56f0:	00000793          	li	a5,0
    56f4:	ff5ff06f          	j	56e8 <__adddf3+0x7ac>
    56f8:	00000593          	li	a1,0
    56fc:	00000493          	li	s1,0
    5700:	004007b7          	lui	a5,0x400
    5704:	b35ff06f          	j	5238 <__adddf3+0x2fc>
    5708:	00000793          	li	a5,0
    570c:	00000593          	li	a1,0
    5710:	f49ff06f          	j	5658 <__adddf3+0x71c>

00005714 <__divdf3>:
    5714:	fb010113          	addi	sp,sp,-80
    5718:	05212023          	sw	s2,64(sp)
    571c:	0145d913          	srli	s2,a1,0x14
    5720:	04912223          	sw	s1,68(sp)
    5724:	03312e23          	sw	s3,60(sp)
    5728:	03512a23          	sw	s5,52(sp)
    572c:	03612823          	sw	s6,48(sp)
    5730:	03712623          	sw	s7,44(sp)
    5734:	00c59493          	slli	s1,a1,0xc
    5738:	04112623          	sw	ra,76(sp)
    573c:	04812423          	sw	s0,72(sp)
    5740:	03412c23          	sw	s4,56(sp)
    5744:	03812423          	sw	s8,40(sp)
    5748:	03912223          	sw	s9,36(sp)
    574c:	03a12023          	sw	s10,32(sp)
    5750:	01b12e23          	sw	s11,28(sp)
    5754:	7ff97913          	andi	s2,s2,2047
    5758:	00050993          	mv	s3,a0
    575c:	00060b93          	mv	s7,a2
    5760:	00068b13          	mv	s6,a3
    5764:	00c4d493          	srli	s1,s1,0xc
    5768:	01f5da93          	srli	s5,a1,0x1f
    576c:	0a090263          	beqz	s2,5810 <__divdf3+0xfc>
    5770:	7ff00793          	li	a5,2047
    5774:	10f90063          	beq	s2,a5,5874 <__divdf3+0x160>
    5778:	01d55c93          	srli	s9,a0,0x1d
    577c:	00349493          	slli	s1,s1,0x3
    5780:	009ce4b3          	or	s1,s9,s1
    5784:	00800cb7          	lui	s9,0x800
    5788:	0194ecb3          	or	s9,s1,s9
    578c:	00351413          	slli	s0,a0,0x3
    5790:	c0190913          	addi	s2,s2,-1023
    5794:	00000c13          	li	s8,0
    5798:	014b5513          	srli	a0,s6,0x14
    579c:	00cb1593          	slli	a1,s6,0xc
    57a0:	7ff57513          	andi	a0,a0,2047
    57a4:	00c5d993          	srli	s3,a1,0xc
    57a8:	01fb5b13          	srli	s6,s6,0x1f
    57ac:	10050263          	beqz	a0,58b0 <__divdf3+0x19c>
    57b0:	7ff00793          	li	a5,2047
    57b4:	16f50263          	beq	a0,a5,5918 <__divdf3+0x204>
    57b8:	00399593          	slli	a1,s3,0x3
    57bc:	01dbd793          	srli	a5,s7,0x1d
    57c0:	00b7e5b3          	or	a1,a5,a1
    57c4:	008009b7          	lui	s3,0x800
    57c8:	0135e9b3          	or	s3,a1,s3
    57cc:	003b9693          	slli	a3,s7,0x3
    57d0:	c0150513          	addi	a0,a0,-1023
    57d4:	00000793          	li	a5,0
    57d8:	002c1713          	slli	a4,s8,0x2
    57dc:	00f76733          	or	a4,a4,a5
    57e0:	fff70713          	addi	a4,a4,-1
    57e4:	00e00613          	li	a2,14
    57e8:	016ac4b3          	xor	s1,s5,s6
    57ec:	40a90933          	sub	s2,s2,a0
    57f0:	16e66063          	bltu	a2,a4,5950 <__divdf3+0x23c>
    57f4:	00002617          	auipc	a2,0x2
    57f8:	64060613          	addi	a2,a2,1600 # 7e34 <__subdf3+0xeb8>
    57fc:	00271713          	slli	a4,a4,0x2
    5800:	00c70733          	add	a4,a4,a2
    5804:	00072703          	lw	a4,0(a4)
    5808:	00c70733          	add	a4,a4,a2
    580c:	00070067          	jr	a4
    5810:	00a4ecb3          	or	s9,s1,a0
    5814:	060c8e63          	beqz	s9,5890 <__divdf3+0x17c>
    5818:	04048063          	beqz	s1,5858 <__divdf3+0x144>
    581c:	00048513          	mv	a0,s1
    5820:	110010ef          	jal	ra,6930 <__clzsi2>
    5824:	ff550793          	addi	a5,a0,-11
    5828:	01c00713          	li	a4,28
    582c:	02f74c63          	blt	a4,a5,5864 <__divdf3+0x150>
    5830:	01d00c93          	li	s9,29
    5834:	ff850413          	addi	s0,a0,-8
    5838:	40fc8cb3          	sub	s9,s9,a5
    583c:	008494b3          	sll	s1,s1,s0
    5840:	0199dcb3          	srl	s9,s3,s9
    5844:	009cecb3          	or	s9,s9,s1
    5848:	00899433          	sll	s0,s3,s0
    584c:	c0d00913          	li	s2,-1011
    5850:	40a90933          	sub	s2,s2,a0
    5854:	f41ff06f          	j	5794 <__divdf3+0x80>
    5858:	0d8010ef          	jal	ra,6930 <__clzsi2>
    585c:	02050513          	addi	a0,a0,32
    5860:	fc5ff06f          	j	5824 <__divdf3+0x110>
    5864:	fd850493          	addi	s1,a0,-40
    5868:	00999cb3          	sll	s9,s3,s1
    586c:	00000413          	li	s0,0
    5870:	fddff06f          	j	584c <__divdf3+0x138>
    5874:	00a4ecb3          	or	s9,s1,a0
    5878:	020c8463          	beqz	s9,58a0 <__divdf3+0x18c>
    587c:	00050413          	mv	s0,a0
    5880:	00048c93          	mv	s9,s1
    5884:	7ff00913          	li	s2,2047
    5888:	00300c13          	li	s8,3
    588c:	f0dff06f          	j	5798 <__divdf3+0x84>
    5890:	00000413          	li	s0,0
    5894:	00000913          	li	s2,0
    5898:	00100c13          	li	s8,1
    589c:	efdff06f          	j	5798 <__divdf3+0x84>
    58a0:	00000413          	li	s0,0
    58a4:	7ff00913          	li	s2,2047
    58a8:	00200c13          	li	s8,2
    58ac:	eedff06f          	j	5798 <__divdf3+0x84>
    58b0:	0179e6b3          	or	a3,s3,s7
    58b4:	06068e63          	beqz	a3,5930 <__divdf3+0x21c>
    58b8:	04098063          	beqz	s3,58f8 <__divdf3+0x1e4>
    58bc:	00098513          	mv	a0,s3
    58c0:	070010ef          	jal	ra,6930 <__clzsi2>
    58c4:	ff550793          	addi	a5,a0,-11
    58c8:	01c00713          	li	a4,28
    58cc:	02f74e63          	blt	a4,a5,5908 <__divdf3+0x1f4>
    58d0:	01d00613          	li	a2,29
    58d4:	ff850693          	addi	a3,a0,-8
    58d8:	40f60633          	sub	a2,a2,a5
    58dc:	00d995b3          	sll	a1,s3,a3
    58e0:	00cbd633          	srl	a2,s7,a2
    58e4:	00b669b3          	or	s3,a2,a1
    58e8:	00db96b3          	sll	a3,s7,a3
    58ec:	c0d00713          	li	a4,-1011
    58f0:	40a70533          	sub	a0,a4,a0
    58f4:	ee1ff06f          	j	57d4 <__divdf3+0xc0>
    58f8:	000b8513          	mv	a0,s7
    58fc:	034010ef          	jal	ra,6930 <__clzsi2>
    5900:	02050513          	addi	a0,a0,32
    5904:	fc1ff06f          	j	58c4 <__divdf3+0x1b0>
    5908:	fd850593          	addi	a1,a0,-40
    590c:	00bb99b3          	sll	s3,s7,a1
    5910:	00000693          	li	a3,0
    5914:	fd9ff06f          	j	58ec <__divdf3+0x1d8>
    5918:	0179e6b3          	or	a3,s3,s7
    591c:	02068263          	beqz	a3,5940 <__divdf3+0x22c>
    5920:	000b8693          	mv	a3,s7
    5924:	7ff00513          	li	a0,2047
    5928:	00300793          	li	a5,3
    592c:	eadff06f          	j	57d8 <__divdf3+0xc4>
    5930:	00000993          	li	s3,0
    5934:	00000513          	li	a0,0
    5938:	00100793          	li	a5,1
    593c:	e9dff06f          	j	57d8 <__divdf3+0xc4>
    5940:	00000993          	li	s3,0
    5944:	7ff00513          	li	a0,2047
    5948:	00200793          	li	a5,2
    594c:	e8dff06f          	j	57d8 <__divdf3+0xc4>
    5950:	0199e663          	bltu	s3,s9,595c <__divdf3+0x248>
    5954:	453c9a63          	bne	s9,s3,5da8 <__divdf3+0x694>
    5958:	44d46863          	bltu	s0,a3,5da8 <__divdf3+0x694>
    595c:	01fc9713          	slli	a4,s9,0x1f
    5960:	00145793          	srli	a5,s0,0x1
    5964:	01f41d93          	slli	s11,s0,0x1f
    5968:	001cdc93          	srli	s9,s9,0x1
    596c:	00f76433          	or	s0,a4,a5
    5970:	00899593          	slli	a1,s3,0x8
    5974:	0186da93          	srli	s5,a3,0x18
    5978:	00baeab3          	or	s5,s5,a1
    597c:	0105db93          	srli	s7,a1,0x10
    5980:	000b8593          	mv	a1,s7
    5984:	010a9c13          	slli	s8,s5,0x10
    5988:	000c8513          	mv	a0,s9
    598c:	00869b13          	slli	s6,a3,0x8
    5990:	010c5c13          	srli	s8,s8,0x10
    5994:	6f1000ef          	jal	ra,6884 <__udivsi3>
    5998:	00050593          	mv	a1,a0
    599c:	00050d13          	mv	s10,a0
    59a0:	000c0513          	mv	a0,s8
    59a4:	6b5000ef          	jal	ra,6858 <__mulsi3>
    59a8:	00050993          	mv	s3,a0
    59ac:	000b8593          	mv	a1,s7
    59b0:	000c8513          	mv	a0,s9
    59b4:	719000ef          	jal	ra,68cc <__umodsi3>
    59b8:	01051513          	slli	a0,a0,0x10
    59bc:	01045713          	srli	a4,s0,0x10
    59c0:	00a76733          	or	a4,a4,a0
    59c4:	000d0a13          	mv	s4,s10
    59c8:	01377e63          	bgeu	a4,s3,59e4 <__divdf3+0x2d0>
    59cc:	01570733          	add	a4,a4,s5
    59d0:	fffd0a13          	addi	s4,s10,-1
    59d4:	01576863          	bltu	a4,s5,59e4 <__divdf3+0x2d0>
    59d8:	01377663          	bgeu	a4,s3,59e4 <__divdf3+0x2d0>
    59dc:	ffed0a13          	addi	s4,s10,-2
    59e0:	01570733          	add	a4,a4,s5
    59e4:	413709b3          	sub	s3,a4,s3
    59e8:	000b8593          	mv	a1,s7
    59ec:	00098513          	mv	a0,s3
    59f0:	695000ef          	jal	ra,6884 <__udivsi3>
    59f4:	00050593          	mv	a1,a0
    59f8:	00050d13          	mv	s10,a0
    59fc:	000c0513          	mv	a0,s8
    5a00:	659000ef          	jal	ra,6858 <__mulsi3>
    5a04:	00050c93          	mv	s9,a0
    5a08:	000b8593          	mv	a1,s7
    5a0c:	00098513          	mv	a0,s3
    5a10:	6bd000ef          	jal	ra,68cc <__umodsi3>
    5a14:	01041413          	slli	s0,s0,0x10
    5a18:	01051513          	slli	a0,a0,0x10
    5a1c:	01045413          	srli	s0,s0,0x10
    5a20:	00a46433          	or	s0,s0,a0
    5a24:	000d0793          	mv	a5,s10
    5a28:	01947e63          	bgeu	s0,s9,5a44 <__divdf3+0x330>
    5a2c:	01540433          	add	s0,s0,s5
    5a30:	fffd0793          	addi	a5,s10,-1
    5a34:	01546863          	bltu	s0,s5,5a44 <__divdf3+0x330>
    5a38:	01947663          	bgeu	s0,s9,5a44 <__divdf3+0x330>
    5a3c:	ffed0793          	addi	a5,s10,-2
    5a40:	01540433          	add	s0,s0,s5
    5a44:	010a1813          	slli	a6,s4,0x10
    5a48:	00010e37          	lui	t3,0x10
    5a4c:	00f86833          	or	a6,a6,a5
    5a50:	41940433          	sub	s0,s0,s9
    5a54:	fffe0c93          	addi	s9,t3,-1 # ffff <__stack_top+0x4aef>
    5a58:	019878b3          	and	a7,a6,s9
    5a5c:	019b7cb3          	and	s9,s6,s9
    5a60:	01085713          	srli	a4,a6,0x10
    5a64:	010b5d13          	srli	s10,s6,0x10
    5a68:	00088513          	mv	a0,a7
    5a6c:	000c8593          	mv	a1,s9
    5a70:	5e9000ef          	jal	ra,6858 <__mulsi3>
    5a74:	00050793          	mv	a5,a0
    5a78:	000d0593          	mv	a1,s10
    5a7c:	00088513          	mv	a0,a7
    5a80:	5d9000ef          	jal	ra,6858 <__mulsi3>
    5a84:	00050893          	mv	a7,a0
    5a88:	000c8593          	mv	a1,s9
    5a8c:	00070513          	mv	a0,a4
    5a90:	5c9000ef          	jal	ra,6858 <__mulsi3>
    5a94:	00050313          	mv	t1,a0
    5a98:	000d0593          	mv	a1,s10
    5a9c:	00070513          	mv	a0,a4
    5aa0:	5b9000ef          	jal	ra,6858 <__mulsi3>
    5aa4:	0107d713          	srli	a4,a5,0x10
    5aa8:	006888b3          	add	a7,a7,t1
    5aac:	01170733          	add	a4,a4,a7
    5ab0:	00050613          	mv	a2,a0
    5ab4:	00677463          	bgeu	a4,t1,5abc <__divdf3+0x3a8>
    5ab8:	01c50633          	add	a2,a0,t3
    5abc:	00010537          	lui	a0,0x10
    5ac0:	fff50513          	addi	a0,a0,-1 # ffff <__stack_top+0x4aef>
    5ac4:	01075693          	srli	a3,a4,0x10
    5ac8:	00a77a33          	and	s4,a4,a0
    5acc:	010a1a13          	slli	s4,s4,0x10
    5ad0:	00a7f7b3          	and	a5,a5,a0
    5ad4:	00c686b3          	add	a3,a3,a2
    5ad8:	00fa0a33          	add	s4,s4,a5
    5adc:	00d46863          	bltu	s0,a3,5aec <__divdf3+0x3d8>
    5ae0:	00080993          	mv	s3,a6
    5ae4:	04d41463          	bne	s0,a3,5b2c <__divdf3+0x418>
    5ae8:	054df263          	bgeu	s11,s4,5b2c <__divdf3+0x418>
    5aec:	016d8db3          	add	s11,s11,s6
    5af0:	016db7b3          	sltu	a5,s11,s6
    5af4:	015787b3          	add	a5,a5,s5
    5af8:	00f40433          	add	s0,s0,a5
    5afc:	fff80993          	addi	s3,a6,-1
    5b00:	008ae663          	bltu	s5,s0,5b0c <__divdf3+0x3f8>
    5b04:	028a9463          	bne	s5,s0,5b2c <__divdf3+0x418>
    5b08:	036de263          	bltu	s11,s6,5b2c <__divdf3+0x418>
    5b0c:	00d46663          	bltu	s0,a3,5b18 <__divdf3+0x404>
    5b10:	00869e63          	bne	a3,s0,5b2c <__divdf3+0x418>
    5b14:	014dfc63          	bgeu	s11,s4,5b2c <__divdf3+0x418>
    5b18:	016d8db3          	add	s11,s11,s6
    5b1c:	016db7b3          	sltu	a5,s11,s6
    5b20:	015787b3          	add	a5,a5,s5
    5b24:	ffe80993          	addi	s3,a6,-2
    5b28:	00f40433          	add	s0,s0,a5
    5b2c:	414d8a33          	sub	s4,s11,s4
    5b30:	40d40433          	sub	s0,s0,a3
    5b34:	014db7b3          	sltu	a5,s11,s4
    5b38:	40f40433          	sub	s0,s0,a5
    5b3c:	fff00693          	li	a3,-1
    5b40:	1a8a8263          	beq	s5,s0,5ce4 <__divdf3+0x5d0>
    5b44:	000b8593          	mv	a1,s7
    5b48:	00040513          	mv	a0,s0
    5b4c:	539000ef          	jal	ra,6884 <__udivsi3>
    5b50:	00050593          	mv	a1,a0
    5b54:	00a12623          	sw	a0,12(sp)
    5b58:	000c0513          	mv	a0,s8
    5b5c:	4fd000ef          	jal	ra,6858 <__mulsi3>
    5b60:	00a12423          	sw	a0,8(sp)
    5b64:	000b8593          	mv	a1,s7
    5b68:	00040513          	mv	a0,s0
    5b6c:	561000ef          	jal	ra,68cc <__umodsi3>
    5b70:	00c12683          	lw	a3,12(sp)
    5b74:	00812703          	lw	a4,8(sp)
    5b78:	01051513          	slli	a0,a0,0x10
    5b7c:	010a5793          	srli	a5,s4,0x10
    5b80:	00a7e7b3          	or	a5,a5,a0
    5b84:	00068d93          	mv	s11,a3
    5b88:	00e7fe63          	bgeu	a5,a4,5ba4 <__divdf3+0x490>
    5b8c:	015787b3          	add	a5,a5,s5
    5b90:	fff68d93          	addi	s11,a3,-1 # 7fefffff <RAM_SIZE+0x7feeffff>
    5b94:	0157e863          	bltu	a5,s5,5ba4 <__divdf3+0x490>
    5b98:	00e7f663          	bgeu	a5,a4,5ba4 <__divdf3+0x490>
    5b9c:	ffe68d93          	addi	s11,a3,-2
    5ba0:	015787b3          	add	a5,a5,s5
    5ba4:	40e78433          	sub	s0,a5,a4
    5ba8:	000b8593          	mv	a1,s7
    5bac:	00040513          	mv	a0,s0
    5bb0:	4d5000ef          	jal	ra,6884 <__udivsi3>
    5bb4:	00050593          	mv	a1,a0
    5bb8:	00a12423          	sw	a0,8(sp)
    5bbc:	000c0513          	mv	a0,s8
    5bc0:	499000ef          	jal	ra,6858 <__mulsi3>
    5bc4:	00050c13          	mv	s8,a0
    5bc8:	000b8593          	mv	a1,s7
    5bcc:	00040513          	mv	a0,s0
    5bd0:	4fd000ef          	jal	ra,68cc <__umodsi3>
    5bd4:	00812703          	lw	a4,8(sp)
    5bd8:	010a1a13          	slli	s4,s4,0x10
    5bdc:	01051793          	slli	a5,a0,0x10
    5be0:	010a5a13          	srli	s4,s4,0x10
    5be4:	00fa67b3          	or	a5,s4,a5
    5be8:	00070693          	mv	a3,a4
    5bec:	0187fe63          	bgeu	a5,s8,5c08 <__divdf3+0x4f4>
    5bf0:	015787b3          	add	a5,a5,s5
    5bf4:	fff70693          	addi	a3,a4,-1
    5bf8:	0157e863          	bltu	a5,s5,5c08 <__divdf3+0x4f4>
    5bfc:	0187f663          	bgeu	a5,s8,5c08 <__divdf3+0x4f4>
    5c00:	ffe70693          	addi	a3,a4,-2
    5c04:	015787b3          	add	a5,a5,s5
    5c08:	010d9813          	slli	a6,s11,0x10
    5c0c:	00d86833          	or	a6,a6,a3
    5c10:	01081893          	slli	a7,a6,0x10
    5c14:	0108d893          	srli	a7,a7,0x10
    5c18:	418787b3          	sub	a5,a5,s8
    5c1c:	01085713          	srli	a4,a6,0x10
    5c20:	00088513          	mv	a0,a7
    5c24:	000c8593          	mv	a1,s9
    5c28:	431000ef          	jal	ra,6858 <__mulsi3>
    5c2c:	00050313          	mv	t1,a0
    5c30:	000d0593          	mv	a1,s10
    5c34:	00088513          	mv	a0,a7
    5c38:	421000ef          	jal	ra,6858 <__mulsi3>
    5c3c:	00050893          	mv	a7,a0
    5c40:	000c8593          	mv	a1,s9
    5c44:	00070513          	mv	a0,a4
    5c48:	411000ef          	jal	ra,6858 <__mulsi3>
    5c4c:	00050e13          	mv	t3,a0
    5c50:	000d0593          	mv	a1,s10
    5c54:	00070513          	mv	a0,a4
    5c58:	401000ef          	jal	ra,6858 <__mulsi3>
    5c5c:	01035713          	srli	a4,t1,0x10
    5c60:	01c888b3          	add	a7,a7,t3
    5c64:	01170733          	add	a4,a4,a7
    5c68:	00050693          	mv	a3,a0
    5c6c:	01c77663          	bgeu	a4,t3,5c78 <__divdf3+0x564>
    5c70:	00010637          	lui	a2,0x10
    5c74:	00c506b3          	add	a3,a0,a2
    5c78:	00010537          	lui	a0,0x10
    5c7c:	fff50513          	addi	a0,a0,-1 # ffff <__stack_top+0x4aef>
    5c80:	01075613          	srli	a2,a4,0x10
    5c84:	00a77733          	and	a4,a4,a0
    5c88:	01071713          	slli	a4,a4,0x10
    5c8c:	00a37533          	and	a0,t1,a0
    5c90:	00d60633          	add	a2,a2,a3
    5c94:	00a70533          	add	a0,a4,a0
    5c98:	00c7e863          	bltu	a5,a2,5ca8 <__divdf3+0x594>
    5c9c:	24c79a63          	bne	a5,a2,5ef0 <__divdf3+0x7dc>
    5ca0:	00080693          	mv	a3,a6
    5ca4:	04050063          	beqz	a0,5ce4 <__divdf3+0x5d0>
    5ca8:	00fa87b3          	add	a5,s5,a5
    5cac:	fff80693          	addi	a3,a6,-1
    5cb0:	0357e463          	bltu	a5,s5,5cd8 <__divdf3+0x5c4>
    5cb4:	00c7e663          	bltu	a5,a2,5cc0 <__divdf3+0x5ac>
    5cb8:	22c79a63          	bne	a5,a2,5eec <__divdf3+0x7d8>
    5cbc:	02ab7063          	bgeu	s6,a0,5cdc <__divdf3+0x5c8>
    5cc0:	001b1713          	slli	a4,s6,0x1
    5cc4:	01673b33          	sltu	s6,a4,s6
    5cc8:	015b0ab3          	add	s5,s6,s5
    5ccc:	ffe80693          	addi	a3,a6,-2
    5cd0:	015787b3          	add	a5,a5,s5
    5cd4:	00070b13          	mv	s6,a4
    5cd8:	00c79463          	bne	a5,a2,5ce0 <__divdf3+0x5cc>
    5cdc:	00ab0463          	beq	s6,a0,5ce4 <__divdf3+0x5d0>
    5ce0:	0016e693          	ori	a3,a3,1
    5ce4:	3ff90793          	addi	a5,s2,1023
    5ce8:	12f05063          	blez	a5,5e08 <__divdf3+0x6f4>
    5cec:	0076f713          	andi	a4,a3,7
    5cf0:	02070063          	beqz	a4,5d10 <__divdf3+0x5fc>
    5cf4:	00f6f713          	andi	a4,a3,15
    5cf8:	00400613          	li	a2,4
    5cfc:	00c70a63          	beq	a4,a2,5d10 <__divdf3+0x5fc>
    5d00:	00468613          	addi	a2,a3,4
    5d04:	00d636b3          	sltu	a3,a2,a3
    5d08:	00d989b3          	add	s3,s3,a3
    5d0c:	00060693          	mv	a3,a2
    5d10:	01000737          	lui	a4,0x1000
    5d14:	00e9f733          	and	a4,s3,a4
    5d18:	00070a63          	beqz	a4,5d2c <__divdf3+0x618>
    5d1c:	ff0007b7          	lui	a5,0xff000
    5d20:	fff78793          	addi	a5,a5,-1 # feffffff <RAM_SIZE+0xfefeffff>
    5d24:	00f9f9b3          	and	s3,s3,a5
    5d28:	40090793          	addi	a5,s2,1024
    5d2c:	7fe00713          	li	a4,2046
    5d30:	0af74663          	blt	a4,a5,5ddc <__divdf3+0x6c8>
    5d34:	0036d693          	srli	a3,a3,0x3
    5d38:	01d99713          	slli	a4,s3,0x1d
    5d3c:	00d76733          	or	a4,a4,a3
    5d40:	0039d593          	srli	a1,s3,0x3
    5d44:	01479793          	slli	a5,a5,0x14
    5d48:	7ff006b7          	lui	a3,0x7ff00
    5d4c:	00c59593          	slli	a1,a1,0xc
    5d50:	04c12083          	lw	ra,76(sp)
    5d54:	04812403          	lw	s0,72(sp)
    5d58:	00d7f7b3          	and	a5,a5,a3
    5d5c:	00c5d593          	srli	a1,a1,0xc
    5d60:	00b7e5b3          	or	a1,a5,a1
    5d64:	01f49493          	slli	s1,s1,0x1f
    5d68:	0095e7b3          	or	a5,a1,s1
    5d6c:	04012903          	lw	s2,64(sp)
    5d70:	04412483          	lw	s1,68(sp)
    5d74:	03c12983          	lw	s3,60(sp)
    5d78:	03812a03          	lw	s4,56(sp)
    5d7c:	03412a83          	lw	s5,52(sp)
    5d80:	03012b03          	lw	s6,48(sp)
    5d84:	02c12b83          	lw	s7,44(sp)
    5d88:	02812c03          	lw	s8,40(sp)
    5d8c:	02412c83          	lw	s9,36(sp)
    5d90:	02012d03          	lw	s10,32(sp)
    5d94:	01c12d83          	lw	s11,28(sp)
    5d98:	00070513          	mv	a0,a4
    5d9c:	00078593          	mv	a1,a5
    5da0:	05010113          	addi	sp,sp,80
    5da4:	00008067          	ret
    5da8:	fff90913          	addi	s2,s2,-1
    5dac:	00000d93          	li	s11,0
    5db0:	bc1ff06f          	j	5970 <__divdf3+0x25c>
    5db4:	000a8493          	mv	s1,s5
    5db8:	000c8993          	mv	s3,s9
    5dbc:	00040693          	mv	a3,s0
    5dc0:	000c0793          	mv	a5,s8
    5dc4:	00300713          	li	a4,3
    5dc8:	0ee78a63          	beq	a5,a4,5ebc <__divdf3+0x7a8>
    5dcc:	00100713          	li	a4,1
    5dd0:	10e78063          	beq	a5,a4,5ed0 <__divdf3+0x7bc>
    5dd4:	00200713          	li	a4,2
    5dd8:	f0e796e3          	bne	a5,a4,5ce4 <__divdf3+0x5d0>
    5ddc:	00000593          	li	a1,0
    5de0:	00000713          	li	a4,0
    5de4:	7ff00793          	li	a5,2047
    5de8:	f5dff06f          	j	5d44 <__divdf3+0x630>
    5dec:	000b0493          	mv	s1,s6
    5df0:	fd5ff06f          	j	5dc4 <__divdf3+0x6b0>
    5df4:	000809b7          	lui	s3,0x80
    5df8:	00000693          	li	a3,0
    5dfc:	00000493          	li	s1,0
    5e00:	00300793          	li	a5,3
    5e04:	fc1ff06f          	j	5dc4 <__divdf3+0x6b0>
    5e08:	00100593          	li	a1,1
    5e0c:	40f585b3          	sub	a1,a1,a5
    5e10:	03800713          	li	a4,56
    5e14:	0ab74e63          	blt	a4,a1,5ed0 <__divdf3+0x7bc>
    5e18:	01f00713          	li	a4,31
    5e1c:	06b74663          	blt	a4,a1,5e88 <__divdf3+0x774>
    5e20:	41e90913          	addi	s2,s2,1054
    5e24:	012997b3          	sll	a5,s3,s2
    5e28:	00b6d733          	srl	a4,a3,a1
    5e2c:	01269933          	sll	s2,a3,s2
    5e30:	00e7e7b3          	or	a5,a5,a4
    5e34:	01203933          	snez	s2,s2
    5e38:	0127e7b3          	or	a5,a5,s2
    5e3c:	00b9d5b3          	srl	a1,s3,a1
    5e40:	0077f713          	andi	a4,a5,7
    5e44:	02070063          	beqz	a4,5e64 <__divdf3+0x750>
    5e48:	00f7f713          	andi	a4,a5,15
    5e4c:	00400693          	li	a3,4
    5e50:	00d70a63          	beq	a4,a3,5e64 <__divdf3+0x750>
    5e54:	00478713          	addi	a4,a5,4
    5e58:	00f737b3          	sltu	a5,a4,a5
    5e5c:	00f585b3          	add	a1,a1,a5
    5e60:	00070793          	mv	a5,a4
    5e64:	00800737          	lui	a4,0x800
    5e68:	00e5f733          	and	a4,a1,a4
    5e6c:	06071863          	bnez	a4,5edc <__divdf3+0x7c8>
    5e70:	01d59713          	slli	a4,a1,0x1d
    5e74:	0037d793          	srli	a5,a5,0x3
    5e78:	00f76733          	or	a4,a4,a5
    5e7c:	0035d593          	srli	a1,a1,0x3
    5e80:	00000793          	li	a5,0
    5e84:	ec1ff06f          	j	5d44 <__divdf3+0x630>
    5e88:	fe100713          	li	a4,-31
    5e8c:	40f707b3          	sub	a5,a4,a5
    5e90:	02000613          	li	a2,32
    5e94:	00f9d7b3          	srl	a5,s3,a5
    5e98:	00000713          	li	a4,0
    5e9c:	00c58663          	beq	a1,a2,5ea8 <__divdf3+0x794>
    5ea0:	43e90713          	addi	a4,s2,1086
    5ea4:	00e99733          	sll	a4,s3,a4
    5ea8:	00d76733          	or	a4,a4,a3
    5eac:	00e03733          	snez	a4,a4
    5eb0:	00e7e7b3          	or	a5,a5,a4
    5eb4:	00000593          	li	a1,0
    5eb8:	f89ff06f          	j	5e40 <__divdf3+0x72c>
    5ebc:	000805b7          	lui	a1,0x80
    5ec0:	00000713          	li	a4,0
    5ec4:	7ff00793          	li	a5,2047
    5ec8:	00000493          	li	s1,0
    5ecc:	e79ff06f          	j	5d44 <__divdf3+0x630>
    5ed0:	00000593          	li	a1,0
    5ed4:	00000713          	li	a4,0
    5ed8:	fa9ff06f          	j	5e80 <__divdf3+0x76c>
    5edc:	00000593          	li	a1,0
    5ee0:	00000713          	li	a4,0
    5ee4:	00100793          	li	a5,1
    5ee8:	e5dff06f          	j	5d44 <__divdf3+0x630>
    5eec:	00068813          	mv	a6,a3
    5ef0:	00080693          	mv	a3,a6
    5ef4:	dedff06f          	j	5ce0 <__divdf3+0x5cc>

00005ef8 <__eqdf2>:
    5ef8:	0145d713          	srli	a4,a1,0x14
    5efc:	001007b7          	lui	a5,0x100
    5f00:	fff78793          	addi	a5,a5,-1 # fffff <RAM_SIZE+0xeffff>
    5f04:	0146d813          	srli	a6,a3,0x14
    5f08:	00050313          	mv	t1,a0
    5f0c:	00050e93          	mv	t4,a0
    5f10:	7ff77713          	andi	a4,a4,2047
    5f14:	7ff00513          	li	a0,2047
    5f18:	00b7f8b3          	and	a7,a5,a1
    5f1c:	00060f13          	mv	t5,a2
    5f20:	00d7f7b3          	and	a5,a5,a3
    5f24:	01f5d593          	srli	a1,a1,0x1f
    5f28:	7ff87813          	andi	a6,a6,2047
    5f2c:	01f6d693          	srli	a3,a3,0x1f
    5f30:	00a71c63          	bne	a4,a0,5f48 <__eqdf2+0x50>
    5f34:	0068ee33          	or	t3,a7,t1
    5f38:	00100513          	li	a0,1
    5f3c:	000e1463          	bnez	t3,5f44 <__eqdf2+0x4c>
    5f40:	00e80663          	beq	a6,a4,5f4c <__eqdf2+0x54>
    5f44:	00008067          	ret
    5f48:	00a81863          	bne	a6,a0,5f58 <__eqdf2+0x60>
    5f4c:	00c7e633          	or	a2,a5,a2
    5f50:	00100513          	li	a0,1
    5f54:	fe0618e3          	bnez	a2,5f44 <__eqdf2+0x4c>
    5f58:	00100513          	li	a0,1
    5f5c:	ff0714e3          	bne	a4,a6,5f44 <__eqdf2+0x4c>
    5f60:	fef892e3          	bne	a7,a5,5f44 <__eqdf2+0x4c>
    5f64:	ffee90e3          	bne	t4,t5,5f44 <__eqdf2+0x4c>
    5f68:	00d58a63          	beq	a1,a3,5f7c <__eqdf2+0x84>
    5f6c:	fc071ce3          	bnez	a4,5f44 <__eqdf2+0x4c>
    5f70:	0068e533          	or	a0,a7,t1
    5f74:	00a03533          	snez	a0,a0
    5f78:	00008067          	ret
    5f7c:	00000513          	li	a0,0
    5f80:	00008067          	ret

00005f84 <__gedf2>:
    5f84:	00100737          	lui	a4,0x100
    5f88:	fff70713          	addi	a4,a4,-1 # fffff <RAM_SIZE+0xeffff>
    5f8c:	0145d813          	srli	a6,a1,0x14
    5f90:	00b778b3          	and	a7,a4,a1
    5f94:	00050793          	mv	a5,a0
    5f98:	00050313          	mv	t1,a0
    5f9c:	7ff87813          	andi	a6,a6,2047
    5fa0:	01f5d513          	srli	a0,a1,0x1f
    5fa4:	7ff00e93          	li	t4,2047
    5fa8:	0146d593          	srli	a1,a3,0x14
    5fac:	00d77733          	and	a4,a4,a3
    5fb0:	00060e13          	mv	t3,a2
    5fb4:	7ff5f593          	andi	a1,a1,2047
    5fb8:	01f6d693          	srli	a3,a3,0x1f
    5fbc:	01d81a63          	bne	a6,t4,5fd0 <__gedf2+0x4c>
    5fc0:	00f8eeb3          	or	t4,a7,a5
    5fc4:	080e8a63          	beqz	t4,6058 <__gedf2+0xd4>
    5fc8:	ffe00513          	li	a0,-2
    5fcc:	00008067          	ret
    5fd0:	01d59663          	bne	a1,t4,5fdc <__gedf2+0x58>
    5fd4:	00c76eb3          	or	t4,a4,a2
    5fd8:	fe0e98e3          	bnez	t4,5fc8 <__gedf2+0x44>
    5fdc:	08081063          	bnez	a6,605c <__gedf2+0xd8>
    5fe0:	00f8e7b3          	or	a5,a7,a5
    5fe4:	0017b793          	seqz	a5,a5
    5fe8:	00059663          	bnez	a1,5ff4 <__gedf2+0x70>
    5fec:	00c76633          	or	a2,a4,a2
    5ff0:	04060c63          	beqz	a2,6048 <__gedf2+0xc4>
    5ff4:	00079c63          	bnez	a5,600c <__gedf2+0x88>
    5ff8:	00d51463          	bne	a0,a3,6000 <__gedf2+0x7c>
    5ffc:	0305d063          	bge	a1,a6,601c <__gedf2+0x98>
    6000:	04050063          	beqz	a0,6040 <__gedf2+0xbc>
    6004:	fff00513          	li	a0,-1
    6008:	00008067          	ret
    600c:	fff00513          	li	a0,-1
    6010:	00068a63          	beqz	a3,6024 <__gedf2+0xa0>
    6014:	00068513          	mv	a0,a3
    6018:	00008067          	ret
    601c:	00b85663          	bge	a6,a1,6028 <__gedf2+0xa4>
    6020:	fe0502e3          	beqz	a0,6004 <__gedf2+0x80>
    6024:	00008067          	ret
    6028:	fd176ce3          	bltu	a4,a7,6000 <__gedf2+0x7c>
    602c:	02e89263          	bne	a7,a4,6050 <__gedf2+0xcc>
    6030:	fc6e68e3          	bltu	t3,t1,6000 <__gedf2+0x7c>
    6034:	ffc366e3          	bltu	t1,t3,6020 <__gedf2+0x9c>
    6038:	00000513          	li	a0,0
    603c:	00008067          	ret
    6040:	00100513          	li	a0,1
    6044:	00008067          	ret
    6048:	fe0798e3          	bnez	a5,6038 <__gedf2+0xb4>
    604c:	fb5ff06f          	j	6000 <__gedf2+0x7c>
    6050:	fce8e8e3          	bltu	a7,a4,6020 <__gedf2+0x9c>
    6054:	fe5ff06f          	j	6038 <__gedf2+0xb4>
    6058:	f7058ee3          	beq	a1,a6,5fd4 <__gedf2+0x50>
    605c:	f8059ee3          	bnez	a1,5ff8 <__gedf2+0x74>
    6060:	00000793          	li	a5,0
    6064:	f89ff06f          	j	5fec <__gedf2+0x68>

00006068 <__ledf2>:
    6068:	00100737          	lui	a4,0x100
    606c:	fff70713          	addi	a4,a4,-1 # fffff <RAM_SIZE+0xeffff>
    6070:	0145d813          	srli	a6,a1,0x14
    6074:	00b778b3          	and	a7,a4,a1
    6078:	00050793          	mv	a5,a0
    607c:	00050313          	mv	t1,a0
    6080:	7ff87813          	andi	a6,a6,2047
    6084:	01f5d513          	srli	a0,a1,0x1f
    6088:	7ff00e93          	li	t4,2047
    608c:	0146d593          	srli	a1,a3,0x14
    6090:	00d77733          	and	a4,a4,a3
    6094:	00060e13          	mv	t3,a2
    6098:	7ff5f593          	andi	a1,a1,2047
    609c:	01f6d693          	srli	a3,a3,0x1f
    60a0:	01d81a63          	bne	a6,t4,60b4 <__ledf2+0x4c>
    60a4:	00f8eeb3          	or	t4,a7,a5
    60a8:	080e8a63          	beqz	t4,613c <__ledf2+0xd4>
    60ac:	00200513          	li	a0,2
    60b0:	00008067          	ret
    60b4:	01d59663          	bne	a1,t4,60c0 <__ledf2+0x58>
    60b8:	00c76eb3          	or	t4,a4,a2
    60bc:	fe0e98e3          	bnez	t4,60ac <__ledf2+0x44>
    60c0:	08081063          	bnez	a6,6140 <__ledf2+0xd8>
    60c4:	00f8e7b3          	or	a5,a7,a5
    60c8:	0017b793          	seqz	a5,a5
    60cc:	00059663          	bnez	a1,60d8 <__ledf2+0x70>
    60d0:	00c76633          	or	a2,a4,a2
    60d4:	04060c63          	beqz	a2,612c <__ledf2+0xc4>
    60d8:	00079c63          	bnez	a5,60f0 <__ledf2+0x88>
    60dc:	00d51463          	bne	a0,a3,60e4 <__ledf2+0x7c>
    60e0:	0305d063          	bge	a1,a6,6100 <__ledf2+0x98>
    60e4:	04050063          	beqz	a0,6124 <__ledf2+0xbc>
    60e8:	fff00513          	li	a0,-1
    60ec:	00008067          	ret
    60f0:	fff00513          	li	a0,-1
    60f4:	00068a63          	beqz	a3,6108 <__ledf2+0xa0>
    60f8:	00068513          	mv	a0,a3
    60fc:	00008067          	ret
    6100:	00b85663          	bge	a6,a1,610c <__ledf2+0xa4>
    6104:	fe0502e3          	beqz	a0,60e8 <__ledf2+0x80>
    6108:	00008067          	ret
    610c:	fd176ce3          	bltu	a4,a7,60e4 <__ledf2+0x7c>
    6110:	02e89263          	bne	a7,a4,6134 <__ledf2+0xcc>
    6114:	fc6e68e3          	bltu	t3,t1,60e4 <__ledf2+0x7c>
    6118:	ffc366e3          	bltu	t1,t3,6104 <__ledf2+0x9c>
    611c:	00000513          	li	a0,0
    6120:	00008067          	ret
    6124:	00100513          	li	a0,1
    6128:	00008067          	ret
    612c:	fe0798e3          	bnez	a5,611c <__ledf2+0xb4>
    6130:	fb5ff06f          	j	60e4 <__ledf2+0x7c>
    6134:	fce8e8e3          	bltu	a7,a4,6104 <__ledf2+0x9c>
    6138:	fe5ff06f          	j	611c <__ledf2+0xb4>
    613c:	f7058ee3          	beq	a1,a6,60b8 <__ledf2+0x50>
    6140:	f8059ee3          	bnez	a1,60dc <__ledf2+0x74>
    6144:	00000793          	li	a5,0
    6148:	f89ff06f          	j	60d0 <__ledf2+0x68>

0000614c <__muldf3>:
    614c:	fd010113          	addi	sp,sp,-48
    6150:	01312e23          	sw	s3,28(sp)
    6154:	0145d993          	srli	s3,a1,0x14
    6158:	02812423          	sw	s0,40(sp)
    615c:	02912223          	sw	s1,36(sp)
    6160:	01412c23          	sw	s4,24(sp)
    6164:	01512a23          	sw	s5,20(sp)
    6168:	01712623          	sw	s7,12(sp)
    616c:	00c59493          	slli	s1,a1,0xc
    6170:	02112623          	sw	ra,44(sp)
    6174:	03212023          	sw	s2,32(sp)
    6178:	01612823          	sw	s6,16(sp)
    617c:	7ff9f993          	andi	s3,s3,2047
    6180:	00050413          	mv	s0,a0
    6184:	00060b93          	mv	s7,a2
    6188:	00068a93          	mv	s5,a3
    618c:	00c4d493          	srli	s1,s1,0xc
    6190:	01f5da13          	srli	s4,a1,0x1f
    6194:	0a098463          	beqz	s3,623c <__muldf3+0xf0>
    6198:	7ff00793          	li	a5,2047
    619c:	10f98263          	beq	s3,a5,62a0 <__muldf3+0x154>
    61a0:	01d55793          	srli	a5,a0,0x1d
    61a4:	00349493          	slli	s1,s1,0x3
    61a8:	0097e4b3          	or	s1,a5,s1
    61ac:	008007b7          	lui	a5,0x800
    61b0:	00f4e4b3          	or	s1,s1,a5
    61b4:	00351913          	slli	s2,a0,0x3
    61b8:	c0198993          	addi	s3,s3,-1023 # 7fc01 <RAM_SIZE+0x6fc01>
    61bc:	00000b13          	li	s6,0
    61c0:	014ad513          	srli	a0,s5,0x14
    61c4:	00ca9413          	slli	s0,s5,0xc
    61c8:	7ff57513          	andi	a0,a0,2047
    61cc:	00c45413          	srli	s0,s0,0xc
    61d0:	01fada93          	srli	s5,s5,0x1f
    61d4:	10050263          	beqz	a0,62d8 <__muldf3+0x18c>
    61d8:	7ff00793          	li	a5,2047
    61dc:	16f50263          	beq	a0,a5,6340 <__muldf3+0x1f4>
    61e0:	01dbd793          	srli	a5,s7,0x1d
    61e4:	00341413          	slli	s0,s0,0x3
    61e8:	0087e433          	or	s0,a5,s0
    61ec:	008007b7          	lui	a5,0x800
    61f0:	00f46433          	or	s0,s0,a5
    61f4:	c0150513          	addi	a0,a0,-1023
    61f8:	003b9793          	slli	a5,s7,0x3
    61fc:	00000713          	li	a4,0
    6200:	002b1693          	slli	a3,s6,0x2
    6204:	00e6e6b3          	or	a3,a3,a4
    6208:	00a989b3          	add	s3,s3,a0
    620c:	fff68693          	addi	a3,a3,-1 # 7fefffff <RAM_SIZE+0x7feeffff>
    6210:	00e00613          	li	a2,14
    6214:	015a4833          	xor	a6,s4,s5
    6218:	00198893          	addi	a7,s3,1
    621c:	14d66e63          	bltu	a2,a3,6378 <__muldf3+0x22c>
    6220:	00002617          	auipc	a2,0x2
    6224:	c5060613          	addi	a2,a2,-944 # 7e70 <__subdf3+0xef4>
    6228:	00269693          	slli	a3,a3,0x2
    622c:	00c686b3          	add	a3,a3,a2
    6230:	0006a683          	lw	a3,0(a3)
    6234:	00c686b3          	add	a3,a3,a2
    6238:	00068067          	jr	a3
    623c:	00a4e933          	or	s2,s1,a0
    6240:	06090c63          	beqz	s2,62b8 <__muldf3+0x16c>
    6244:	04048063          	beqz	s1,6284 <__muldf3+0x138>
    6248:	00048513          	mv	a0,s1
    624c:	6e4000ef          	jal	ra,6930 <__clzsi2>
    6250:	ff550713          	addi	a4,a0,-11
    6254:	01c00793          	li	a5,28
    6258:	02e7cc63          	blt	a5,a4,6290 <__muldf3+0x144>
    625c:	01d00793          	li	a5,29
    6260:	ff850913          	addi	s2,a0,-8
    6264:	40e787b3          	sub	a5,a5,a4
    6268:	012494b3          	sll	s1,s1,s2
    626c:	00f457b3          	srl	a5,s0,a5
    6270:	0097e4b3          	or	s1,a5,s1
    6274:	01241933          	sll	s2,s0,s2
    6278:	c0d00993          	li	s3,-1011
    627c:	40a989b3          	sub	s3,s3,a0
    6280:	f3dff06f          	j	61bc <__muldf3+0x70>
    6284:	6ac000ef          	jal	ra,6930 <__clzsi2>
    6288:	02050513          	addi	a0,a0,32
    628c:	fc5ff06f          	j	6250 <__muldf3+0x104>
    6290:	fd850493          	addi	s1,a0,-40
    6294:	009414b3          	sll	s1,s0,s1
    6298:	00000913          	li	s2,0
    629c:	fddff06f          	j	6278 <__muldf3+0x12c>
    62a0:	00a4e933          	or	s2,s1,a0
    62a4:	02090263          	beqz	s2,62c8 <__muldf3+0x17c>
    62a8:	00050913          	mv	s2,a0
    62ac:	7ff00993          	li	s3,2047
    62b0:	00300b13          	li	s6,3
    62b4:	f0dff06f          	j	61c0 <__muldf3+0x74>
    62b8:	00000493          	li	s1,0
    62bc:	00000993          	li	s3,0
    62c0:	00100b13          	li	s6,1
    62c4:	efdff06f          	j	61c0 <__muldf3+0x74>
    62c8:	00000493          	li	s1,0
    62cc:	7ff00993          	li	s3,2047
    62d0:	00200b13          	li	s6,2
    62d4:	eedff06f          	j	61c0 <__muldf3+0x74>
    62d8:	017467b3          	or	a5,s0,s7
    62dc:	06078e63          	beqz	a5,6358 <__muldf3+0x20c>
    62e0:	04040063          	beqz	s0,6320 <__muldf3+0x1d4>
    62e4:	00040513          	mv	a0,s0
    62e8:	648000ef          	jal	ra,6930 <__clzsi2>
    62ec:	ff550693          	addi	a3,a0,-11
    62f0:	01c00793          	li	a5,28
    62f4:	02d7ce63          	blt	a5,a3,6330 <__muldf3+0x1e4>
    62f8:	01d00713          	li	a4,29
    62fc:	ff850793          	addi	a5,a0,-8
    6300:	40d70733          	sub	a4,a4,a3
    6304:	00f41433          	sll	s0,s0,a5
    6308:	00ebd733          	srl	a4,s7,a4
    630c:	00876433          	or	s0,a4,s0
    6310:	00fb97b3          	sll	a5,s7,a5
    6314:	c0d00713          	li	a4,-1011
    6318:	40a70533          	sub	a0,a4,a0
    631c:	ee1ff06f          	j	61fc <__muldf3+0xb0>
    6320:	000b8513          	mv	a0,s7
    6324:	60c000ef          	jal	ra,6930 <__clzsi2>
    6328:	02050513          	addi	a0,a0,32
    632c:	fc1ff06f          	j	62ec <__muldf3+0x1a0>
    6330:	fd850413          	addi	s0,a0,-40
    6334:	008b9433          	sll	s0,s7,s0
    6338:	00000793          	li	a5,0
    633c:	fd9ff06f          	j	6314 <__muldf3+0x1c8>
    6340:	017467b3          	or	a5,s0,s7
    6344:	02078263          	beqz	a5,6368 <__muldf3+0x21c>
    6348:	000b8793          	mv	a5,s7
    634c:	7ff00513          	li	a0,2047
    6350:	00300713          	li	a4,3
    6354:	eadff06f          	j	6200 <__muldf3+0xb4>
    6358:	00000413          	li	s0,0
    635c:	00000513          	li	a0,0
    6360:	00100713          	li	a4,1
    6364:	e9dff06f          	j	6200 <__muldf3+0xb4>
    6368:	00000413          	li	s0,0
    636c:	7ff00513          	li	a0,2047
    6370:	00200713          	li	a4,2
    6374:	e8dff06f          	j	6200 <__muldf3+0xb4>
    6378:	00010ab7          	lui	s5,0x10
    637c:	fffa8e93          	addi	t4,s5,-1 # ffff <__stack_top+0x4aef>
    6380:	01095f93          	srli	t6,s2,0x10
    6384:	01d7fa33          	and	s4,a5,t4
    6388:	01d97933          	and	s2,s2,t4
    638c:	0107d293          	srli	t0,a5,0x10
    6390:	00090513          	mv	a0,s2
    6394:	000a0593          	mv	a1,s4
    6398:	4c0000ef          	jal	ra,6858 <__mulsi3>
    639c:	00050393          	mv	t2,a0
    63a0:	00028593          	mv	a1,t0
    63a4:	00090513          	mv	a0,s2
    63a8:	4b0000ef          	jal	ra,6858 <__mulsi3>
    63ac:	00050313          	mv	t1,a0
    63b0:	000a0593          	mv	a1,s4
    63b4:	000f8513          	mv	a0,t6
    63b8:	4a0000ef          	jal	ra,6858 <__mulsi3>
    63bc:	00050e13          	mv	t3,a0
    63c0:	00028593          	mv	a1,t0
    63c4:	000f8513          	mv	a0,t6
    63c8:	490000ef          	jal	ra,6858 <__mulsi3>
    63cc:	0103d713          	srli	a4,t2,0x10
    63d0:	01c30333          	add	t1,t1,t3
    63d4:	00670733          	add	a4,a4,t1
    63d8:	00050f13          	mv	t5,a0
    63dc:	01c77463          	bgeu	a4,t3,63e4 <__muldf3+0x298>
    63e0:	01550f33          	add	t5,a0,s5
    63e4:	01d77e33          	and	t3,a4,t4
    63e8:	01d3f3b3          	and	t2,t2,t4
    63ec:	010e1e13          	slli	t3,t3,0x10
    63f0:	007e0e33          	add	t3,t3,t2
    63f4:	01045393          	srli	t2,s0,0x10
    63f8:	01d47433          	and	s0,s0,t4
    63fc:	01075a93          	srli	s5,a4,0x10
    6400:	00090513          	mv	a0,s2
    6404:	00040593          	mv	a1,s0
    6408:	450000ef          	jal	ra,6858 <__mulsi3>
    640c:	00050e93          	mv	t4,a0
    6410:	00038593          	mv	a1,t2
    6414:	00090513          	mv	a0,s2
    6418:	440000ef          	jal	ra,6858 <__mulsi3>
    641c:	00050793          	mv	a5,a0
    6420:	00040593          	mv	a1,s0
    6424:	000f8513          	mv	a0,t6
    6428:	430000ef          	jal	ra,6858 <__mulsi3>
    642c:	00050313          	mv	t1,a0
    6430:	00038593          	mv	a1,t2
    6434:	000f8513          	mv	a0,t6
    6438:	420000ef          	jal	ra,6858 <__mulsi3>
    643c:	010ed693          	srli	a3,t4,0x10
    6440:	006787b3          	add	a5,a5,t1
    6444:	00f686b3          	add	a3,a3,a5
    6448:	00050713          	mv	a4,a0
    644c:	0066f663          	bgeu	a3,t1,6458 <__muldf3+0x30c>
    6450:	000107b7          	lui	a5,0x10
    6454:	00f50733          	add	a4,a0,a5
    6458:	00010937          	lui	s2,0x10
    645c:	fff90793          	addi	a5,s2,-1 # ffff <__stack_top+0x4aef>
    6460:	0106df93          	srli	t6,a3,0x10
    6464:	00f6f6b3          	and	a3,a3,a5
    6468:	01069693          	slli	a3,a3,0x10
    646c:	00fefeb3          	and	t4,t4,a5
    6470:	01d68eb3          	add	t4,a3,t4
    6474:	0104db13          	srli	s6,s1,0x10
    6478:	00f4f4b3          	and	s1,s1,a5
    647c:	00ef8fb3          	add	t6,t6,a4
    6480:	01da8ab3          	add	s5,s5,t4
    6484:	00048513          	mv	a0,s1
    6488:	000a0593          	mv	a1,s4
    648c:	3cc000ef          	jal	ra,6858 <__mulsi3>
    6490:	00050713          	mv	a4,a0
    6494:	00028593          	mv	a1,t0
    6498:	00048513          	mv	a0,s1
    649c:	3bc000ef          	jal	ra,6858 <__mulsi3>
    64a0:	00050313          	mv	t1,a0
    64a4:	000a0593          	mv	a1,s4
    64a8:	000b0513          	mv	a0,s6
    64ac:	3ac000ef          	jal	ra,6858 <__mulsi3>
    64b0:	00050a13          	mv	s4,a0
    64b4:	00028593          	mv	a1,t0
    64b8:	000b0513          	mv	a0,s6
    64bc:	39c000ef          	jal	ra,6858 <__mulsi3>
    64c0:	01075793          	srli	a5,a4,0x10
    64c4:	01430333          	add	t1,t1,s4
    64c8:	006787b3          	add	a5,a5,t1
    64cc:	00050613          	mv	a2,a0
    64d0:	0147f463          	bgeu	a5,s4,64d8 <__muldf3+0x38c>
    64d4:	01250633          	add	a2,a0,s2
    64d8:	00010a37          	lui	s4,0x10
    64dc:	fffa0513          	addi	a0,s4,-1 # ffff <__stack_top+0x4aef>
    64e0:	00a7f333          	and	t1,a5,a0
    64e4:	00a77733          	and	a4,a4,a0
    64e8:	0107d293          	srli	t0,a5,0x10
    64ec:	01031313          	slli	t1,t1,0x10
    64f0:	00c282b3          	add	t0,t0,a2
    64f4:	00e30333          	add	t1,t1,a4
    64f8:	00048513          	mv	a0,s1
    64fc:	00040593          	mv	a1,s0
    6500:	358000ef          	jal	ra,6858 <__mulsi3>
    6504:	00050913          	mv	s2,a0
    6508:	00038593          	mv	a1,t2
    650c:	00048513          	mv	a0,s1
    6510:	348000ef          	jal	ra,6858 <__mulsi3>
    6514:	00050793          	mv	a5,a0
    6518:	00040593          	mv	a1,s0
    651c:	000b0513          	mv	a0,s6
    6520:	338000ef          	jal	ra,6858 <__mulsi3>
    6524:	00050493          	mv	s1,a0
    6528:	00038593          	mv	a1,t2
    652c:	000b0513          	mv	a0,s6
    6530:	328000ef          	jal	ra,6858 <__mulsi3>
    6534:	01095413          	srli	s0,s2,0x10
    6538:	009787b3          	add	a5,a5,s1
    653c:	00f407b3          	add	a5,s0,a5
    6540:	00050393          	mv	t2,a0
    6544:	0097f463          	bgeu	a5,s1,654c <__muldf3+0x400>
    6548:	014503b3          	add	t2,a0,s4
    654c:	00010737          	lui	a4,0x10
    6550:	fff70713          	addi	a4,a4,-1 # ffff <__stack_top+0x4aef>
    6554:	00e7f6b3          	and	a3,a5,a4
    6558:	01069693          	slli	a3,a3,0x10
    655c:	00e97733          	and	a4,s2,a4
    6560:	015f0f33          	add	t5,t5,s5
    6564:	00e686b3          	add	a3,a3,a4
    6568:	01df3eb3          	sltu	t4,t5,t4
    656c:	01f68733          	add	a4,a3,t6
    6570:	01d70433          	add	s0,a4,t4
    6574:	006f0f33          	add	t5,t5,t1
    6578:	006f3333          	sltu	t1,t5,t1
    657c:	00540633          	add	a2,s0,t0
    6580:	006605b3          	add	a1,a2,t1
    6584:	01d43eb3          	sltu	t4,s0,t4
    6588:	01f73733          	sltu	a4,a4,t6
    658c:	0107d413          	srli	s0,a5,0x10
    6590:	01d76733          	or	a4,a4,t4
    6594:	00563633          	sltu	a2,a2,t0
    6598:	0065b333          	sltu	t1,a1,t1
    659c:	00870733          	add	a4,a4,s0
    65a0:	00666333          	or	t1,a2,t1
    65a4:	00670433          	add	s0,a4,t1
    65a8:	00740433          	add	s0,s0,t2
    65ac:	0175d793          	srli	a5,a1,0x17
    65b0:	00941413          	slli	s0,s0,0x9
    65b4:	00f46433          	or	s0,s0,a5
    65b8:	009f1793          	slli	a5,t5,0x9
    65bc:	01c7e7b3          	or	a5,a5,t3
    65c0:	00f037b3          	snez	a5,a5
    65c4:	017f5f13          	srli	t5,t5,0x17
    65c8:	00959713          	slli	a4,a1,0x9
    65cc:	01e7e7b3          	or	a5,a5,t5
    65d0:	00e7e7b3          	or	a5,a5,a4
    65d4:	01000737          	lui	a4,0x1000
    65d8:	00e47733          	and	a4,s0,a4
    65dc:	10070663          	beqz	a4,66e8 <__muldf3+0x59c>
    65e0:	0017d713          	srli	a4,a5,0x1
    65e4:	0017f793          	andi	a5,a5,1
    65e8:	00f767b3          	or	a5,a4,a5
    65ec:	01f41713          	slli	a4,s0,0x1f
    65f0:	00e7e7b3          	or	a5,a5,a4
    65f4:	00145413          	srli	s0,s0,0x1
    65f8:	3ff88693          	addi	a3,a7,1023 # 8003ff <RAM_SIZE+0x7f03ff>
    65fc:	0ed05a63          	blez	a3,66f0 <__muldf3+0x5a4>
    6600:	0077f713          	andi	a4,a5,7
    6604:	02070063          	beqz	a4,6624 <__muldf3+0x4d8>
    6608:	00f7f713          	andi	a4,a5,15
    660c:	00400613          	li	a2,4
    6610:	00c70a63          	beq	a4,a2,6624 <__muldf3+0x4d8>
    6614:	00478713          	addi	a4,a5,4 # 10004 <RAM_SIZE+0x4>
    6618:	00f737b3          	sltu	a5,a4,a5
    661c:	00f40433          	add	s0,s0,a5
    6620:	00070793          	mv	a5,a4
    6624:	01000737          	lui	a4,0x1000
    6628:	00e47733          	and	a4,s0,a4
    662c:	00070a63          	beqz	a4,6640 <__muldf3+0x4f4>
    6630:	ff000737          	lui	a4,0xff000
    6634:	fff70713          	addi	a4,a4,-1 # feffffff <RAM_SIZE+0xfefeffff>
    6638:	00e47433          	and	s0,s0,a4
    663c:	40088693          	addi	a3,a7,1024
    6640:	7fe00713          	li	a4,2046
    6644:	16d74a63          	blt	a4,a3,67b8 <__muldf3+0x66c>
    6648:	0037d713          	srli	a4,a5,0x3
    664c:	01d41793          	slli	a5,s0,0x1d
    6650:	00e7e7b3          	or	a5,a5,a4
    6654:	00345413          	srli	s0,s0,0x3
    6658:	01469713          	slli	a4,a3,0x14
    665c:	00c41413          	slli	s0,s0,0xc
    6660:	7ff006b7          	lui	a3,0x7ff00
    6664:	00d77733          	and	a4,a4,a3
    6668:	00c45413          	srli	s0,s0,0xc
    666c:	00876433          	or	s0,a4,s0
    6670:	01f81813          	slli	a6,a6,0x1f
    6674:	02c12083          	lw	ra,44(sp)
    6678:	01046733          	or	a4,s0,a6
    667c:	02812403          	lw	s0,40(sp)
    6680:	02412483          	lw	s1,36(sp)
    6684:	02012903          	lw	s2,32(sp)
    6688:	01c12983          	lw	s3,28(sp)
    668c:	01812a03          	lw	s4,24(sp)
    6690:	01412a83          	lw	s5,20(sp)
    6694:	01012b03          	lw	s6,16(sp)
    6698:	00c12b83          	lw	s7,12(sp)
    669c:	00078513          	mv	a0,a5
    66a0:	00070593          	mv	a1,a4
    66a4:	03010113          	addi	sp,sp,48
    66a8:	00008067          	ret
    66ac:	000a0813          	mv	a6,s4
    66b0:	00048413          	mv	s0,s1
    66b4:	00090793          	mv	a5,s2
    66b8:	000b0713          	mv	a4,s6
    66bc:	00200693          	li	a3,2
    66c0:	0ed70c63          	beq	a4,a3,67b8 <__muldf3+0x66c>
    66c4:	00300693          	li	a3,3
    66c8:	0cd70e63          	beq	a4,a3,67a4 <__muldf3+0x658>
    66cc:	00100693          	li	a3,1
    66d0:	f2d714e3          	bne	a4,a3,65f8 <__muldf3+0x4ac>
    66d4:	00000413          	li	s0,0
    66d8:	00000793          	li	a5,0
    66dc:	08c0006f          	j	6768 <__muldf3+0x61c>
    66e0:	000a8813          	mv	a6,s5
    66e4:	fd9ff06f          	j	66bc <__muldf3+0x570>
    66e8:	00098893          	mv	a7,s3
    66ec:	f0dff06f          	j	65f8 <__muldf3+0x4ac>
    66f0:	00100613          	li	a2,1
    66f4:	40d60633          	sub	a2,a2,a3
    66f8:	03800713          	li	a4,56
    66fc:	fcc74ce3          	blt	a4,a2,66d4 <__muldf3+0x588>
    6700:	01f00713          	li	a4,31
    6704:	06c74663          	blt	a4,a2,6770 <__muldf3+0x624>
    6708:	41e88893          	addi	a7,a7,1054
    670c:	01141733          	sll	a4,s0,a7
    6710:	00c7d6b3          	srl	a3,a5,a2
    6714:	011797b3          	sll	a5,a5,a7
    6718:	00d76733          	or	a4,a4,a3
    671c:	00f037b3          	snez	a5,a5
    6720:	00f767b3          	or	a5,a4,a5
    6724:	00c45433          	srl	s0,s0,a2
    6728:	0077f713          	andi	a4,a5,7
    672c:	02070063          	beqz	a4,674c <__muldf3+0x600>
    6730:	00f7f713          	andi	a4,a5,15
    6734:	00400693          	li	a3,4
    6738:	00d70a63          	beq	a4,a3,674c <__muldf3+0x600>
    673c:	00478713          	addi	a4,a5,4
    6740:	00f737b3          	sltu	a5,a4,a5
    6744:	00f40433          	add	s0,s0,a5
    6748:	00070793          	mv	a5,a4
    674c:	00800737          	lui	a4,0x800
    6750:	00e47733          	and	a4,s0,a4
    6754:	06071a63          	bnez	a4,67c8 <__muldf3+0x67c>
    6758:	01d41713          	slli	a4,s0,0x1d
    675c:	0037d793          	srli	a5,a5,0x3
    6760:	00f767b3          	or	a5,a4,a5
    6764:	00345413          	srli	s0,s0,0x3
    6768:	00000693          	li	a3,0
    676c:	eedff06f          	j	6658 <__muldf3+0x50c>
    6770:	fe100713          	li	a4,-31
    6774:	40d70733          	sub	a4,a4,a3
    6778:	02000593          	li	a1,32
    677c:	00e45733          	srl	a4,s0,a4
    6780:	00000693          	li	a3,0
    6784:	00b60663          	beq	a2,a1,6790 <__muldf3+0x644>
    6788:	43e88893          	addi	a7,a7,1086
    678c:	011416b3          	sll	a3,s0,a7
    6790:	00f6e7b3          	or	a5,a3,a5
    6794:	00f037b3          	snez	a5,a5
    6798:	00f767b3          	or	a5,a4,a5
    679c:	00000413          	li	s0,0
    67a0:	f89ff06f          	j	6728 <__muldf3+0x5dc>
    67a4:	00080437          	lui	s0,0x80
    67a8:	00000793          	li	a5,0
    67ac:	7ff00693          	li	a3,2047
    67b0:	00000813          	li	a6,0
    67b4:	ea5ff06f          	j	6658 <__muldf3+0x50c>
    67b8:	00000413          	li	s0,0
    67bc:	00000793          	li	a5,0
    67c0:	7ff00693          	li	a3,2047
    67c4:	e95ff06f          	j	6658 <__muldf3+0x50c>
    67c8:	00000413          	li	s0,0
    67cc:	00000793          	li	a5,0
    67d0:	00100693          	li	a3,1
    67d4:	e85ff06f          	j	6658 <__muldf3+0x50c>

000067d8 <__fixdfsi>:
    67d8:	0145d713          	srli	a4,a1,0x14
    67dc:	001006b7          	lui	a3,0x100
    67e0:	fff68793          	addi	a5,a3,-1 # fffff <RAM_SIZE+0xeffff>
    67e4:	7ff77713          	andi	a4,a4,2047
    67e8:	3fe00613          	li	a2,1022
    67ec:	00b7f7b3          	and	a5,a5,a1
    67f0:	01f5d593          	srli	a1,a1,0x1f
    67f4:	04e65e63          	bge	a2,a4,6850 <__fixdfsi+0x78>
    67f8:	41d00613          	li	a2,1053
    67fc:	00e65a63          	bge	a2,a4,6810 <__fixdfsi+0x38>
    6800:	80000537          	lui	a0,0x80000
    6804:	fff54513          	not	a0,a0
    6808:	00a58533          	add	a0,a1,a0
    680c:	00008067          	ret
    6810:	00d7e7b3          	or	a5,a5,a3
    6814:	43300693          	li	a3,1075
    6818:	40e686b3          	sub	a3,a3,a4
    681c:	01f00613          	li	a2,31
    6820:	02d64063          	blt	a2,a3,6840 <__fixdfsi+0x68>
    6824:	bed70713          	addi	a4,a4,-1043 # 7ffbed <RAM_SIZE+0x7efbed>
    6828:	00e797b3          	sll	a5,a5,a4
    682c:	00d55533          	srl	a0,a0,a3
    6830:	00a7e533          	or	a0,a5,a0
    6834:	02058063          	beqz	a1,6854 <__fixdfsi+0x7c>
    6838:	40a00533          	neg	a0,a0
    683c:	00008067          	ret
    6840:	41300513          	li	a0,1043
    6844:	40e50533          	sub	a0,a0,a4
    6848:	00a7d533          	srl	a0,a5,a0
    684c:	fe9ff06f          	j	6834 <__fixdfsi+0x5c>
    6850:	00000513          	li	a0,0
    6854:	00008067          	ret

00006858 <__mulsi3>:
    6858:	00050613          	mv	a2,a0
    685c:	00000513          	li	a0,0
    6860:	0015f693          	andi	a3,a1,1
    6864:	00068463          	beqz	a3,686c <__mulsi3+0x14>
    6868:	00c50533          	add	a0,a0,a2
    686c:	0015d593          	srli	a1,a1,0x1
    6870:	00161613          	slli	a2,a2,0x1
    6874:	fe0596e3          	bnez	a1,6860 <__mulsi3+0x8>
    6878:	00008067          	ret

0000687c <__divsi3>:
    687c:	06054063          	bltz	a0,68dc <__umodsi3+0x10>
    6880:	0605c663          	bltz	a1,68ec <__umodsi3+0x20>

00006884 <__udivsi3>:
    6884:	00058613          	mv	a2,a1
    6888:	00050593          	mv	a1,a0
    688c:	fff00513          	li	a0,-1
    6890:	02060c63          	beqz	a2,68c8 <__udivsi3+0x44>
    6894:	00100693          	li	a3,1
    6898:	00b67a63          	bgeu	a2,a1,68ac <__udivsi3+0x28>
    689c:	00c05863          	blez	a2,68ac <__udivsi3+0x28>
    68a0:	00161613          	slli	a2,a2,0x1
    68a4:	00169693          	slli	a3,a3,0x1
    68a8:	feb66ae3          	bltu	a2,a1,689c <__udivsi3+0x18>
    68ac:	00000513          	li	a0,0
    68b0:	00c5e663          	bltu	a1,a2,68bc <__udivsi3+0x38>
    68b4:	40c585b3          	sub	a1,a1,a2
    68b8:	00d56533          	or	a0,a0,a3
    68bc:	0016d693          	srli	a3,a3,0x1
    68c0:	00165613          	srli	a2,a2,0x1
    68c4:	fe0696e3          	bnez	a3,68b0 <__udivsi3+0x2c>
    68c8:	00008067          	ret

000068cc <__umodsi3>:
    68cc:	00008293          	mv	t0,ra
    68d0:	fb5ff0ef          	jal	ra,6884 <__udivsi3>
    68d4:	00058513          	mv	a0,a1
    68d8:	00028067          	jr	t0
    68dc:	40a00533          	neg	a0,a0
    68e0:	00b04863          	bgtz	a1,68f0 <__umodsi3+0x24>
    68e4:	40b005b3          	neg	a1,a1
    68e8:	f9dff06f          	j	6884 <__udivsi3>
    68ec:	40b005b3          	neg	a1,a1
    68f0:	00008293          	mv	t0,ra
    68f4:	f91ff0ef          	jal	ra,6884 <__udivsi3>
    68f8:	40a00533          	neg	a0,a0
    68fc:	00028067          	jr	t0

00006900 <__modsi3>:
    6900:	00008293          	mv	t0,ra
    6904:	0005ca63          	bltz	a1,6918 <__modsi3+0x18>
    6908:	00054c63          	bltz	a0,6920 <__modsi3+0x20>
    690c:	f79ff0ef          	jal	ra,6884 <__udivsi3>
    6910:	00058513          	mv	a0,a1
    6914:	00028067          	jr	t0
    6918:	40b005b3          	neg	a1,a1
    691c:	fe0558e3          	bgez	a0,690c <__modsi3+0xc>
    6920:	40a00533          	neg	a0,a0
    6924:	f61ff0ef          	jal	ra,6884 <__udivsi3>
    6928:	40b00533          	neg	a0,a1
    692c:	00028067          	jr	t0

00006930 <__clzsi2>:
    6930:	000107b7          	lui	a5,0x10
    6934:	02f57a63          	bgeu	a0,a5,6968 <__clzsi2+0x38>
    6938:	0ff00793          	li	a5,255
    693c:	00a7b7b3          	sltu	a5,a5,a0
    6940:	00379793          	slli	a5,a5,0x3
    6944:	02000713          	li	a4,32
    6948:	40f70733          	sub	a4,a4,a5
    694c:	00f55533          	srl	a0,a0,a5
    6950:	00001797          	auipc	a5,0x1
    6954:	55c78793          	addi	a5,a5,1372 # 7eac <__clz_tab>
    6958:	00a78533          	add	a0,a5,a0
    695c:	00054503          	lbu	a0,0(a0) # 80000000 <RAM_SIZE+0x7fff0000>
    6960:	40a70533          	sub	a0,a4,a0
    6964:	00008067          	ret
    6968:	01000737          	lui	a4,0x1000
    696c:	01000793          	li	a5,16
    6970:	fce56ae3          	bltu	a0,a4,6944 <__clzsi2+0x14>
    6974:	01800793          	li	a5,24
    6978:	fcdff06f          	j	6944 <__clzsi2+0x14>

0000697c <exit>:
    697c:	ff010113          	addi	sp,sp,-16
    6980:	00000593          	li	a1,0
    6984:	00812423          	sw	s0,8(sp)
    6988:	00112623          	sw	ra,12(sp)
    698c:	00050413          	mv	s0,a0
    6990:	2f8000ef          	jal	ra,6c88 <__call_exitprocs>
    6994:	00001517          	auipc	a0,0x1
    6998:	62c52503          	lw	a0,1580(a0) # 7fc0 <_global_impure_ptr>
    699c:	03c52783          	lw	a5,60(a0)
    69a0:	00078463          	beqz	a5,69a8 <exit+0x2c>
    69a4:	000780e7          	jalr	a5
    69a8:	00040513          	mv	a0,s0
    69ac:	598000ef          	jal	ra,6f44 <_exit>

000069b0 <__libc_init_array>:
    69b0:	ff010113          	addi	sp,sp,-16
    69b4:	00812423          	sw	s0,8(sp)
    69b8:	01212023          	sw	s2,0(sp)
    69bc:	00001417          	auipc	s0,0x1
    69c0:	5f440413          	addi	s0,s0,1524 # 7fb0 <__init_array_start>
    69c4:	00001917          	auipc	s2,0x1
    69c8:	5ec90913          	addi	s2,s2,1516 # 7fb0 <__init_array_start>
    69cc:	40890933          	sub	s2,s2,s0
    69d0:	00112623          	sw	ra,12(sp)
    69d4:	00912223          	sw	s1,4(sp)
    69d8:	40295913          	srai	s2,s2,0x2
    69dc:	00090e63          	beqz	s2,69f8 <__libc_init_array+0x48>
    69e0:	00000493          	li	s1,0
    69e4:	00042783          	lw	a5,0(s0)
    69e8:	00148493          	addi	s1,s1,1
    69ec:	00440413          	addi	s0,s0,4
    69f0:	000780e7          	jalr	a5
    69f4:	fe9918e3          	bne	s2,s1,69e4 <__libc_init_array+0x34>
    69f8:	00001417          	auipc	s0,0x1
    69fc:	5b840413          	addi	s0,s0,1464 # 7fb0 <__init_array_start>
    6a00:	00001917          	auipc	s2,0x1
    6a04:	5b890913          	addi	s2,s2,1464 # 7fb8 <__do_global_dtors_aux_fini_array_entry>
    6a08:	40890933          	sub	s2,s2,s0
    6a0c:	40295913          	srai	s2,s2,0x2
    6a10:	00090e63          	beqz	s2,6a2c <__libc_init_array+0x7c>
    6a14:	00000493          	li	s1,0
    6a18:	00042783          	lw	a5,0(s0)
    6a1c:	00148493          	addi	s1,s1,1
    6a20:	00440413          	addi	s0,s0,4
    6a24:	000780e7          	jalr	a5
    6a28:	fe9918e3          	bne	s2,s1,6a18 <__libc_init_array+0x68>
    6a2c:	00c12083          	lw	ra,12(sp)
    6a30:	00812403          	lw	s0,8(sp)
    6a34:	00412483          	lw	s1,4(sp)
    6a38:	00012903          	lw	s2,0(sp)
    6a3c:	01010113          	addi	sp,sp,16
    6a40:	00008067          	ret

00006a44 <memset>:
    6a44:	00f00313          	li	t1,15
    6a48:	00050713          	mv	a4,a0
    6a4c:	02c37e63          	bgeu	t1,a2,6a88 <memset+0x44>
    6a50:	00f77793          	andi	a5,a4,15
    6a54:	0a079063          	bnez	a5,6af4 <memset+0xb0>
    6a58:	08059263          	bnez	a1,6adc <memset+0x98>
    6a5c:	ff067693          	andi	a3,a2,-16
    6a60:	00f67613          	andi	a2,a2,15
    6a64:	00e686b3          	add	a3,a3,a4
    6a68:	00b72023          	sw	a1,0(a4) # 1000000 <RAM_SIZE+0xff0000>
    6a6c:	00b72223          	sw	a1,4(a4)
    6a70:	00b72423          	sw	a1,8(a4)
    6a74:	00b72623          	sw	a1,12(a4)
    6a78:	01070713          	addi	a4,a4,16
    6a7c:	fed766e3          	bltu	a4,a3,6a68 <memset+0x24>
    6a80:	00061463          	bnez	a2,6a88 <memset+0x44>
    6a84:	00008067          	ret
    6a88:	40c306b3          	sub	a3,t1,a2
    6a8c:	00269693          	slli	a3,a3,0x2
    6a90:	00000297          	auipc	t0,0x0
    6a94:	005686b3          	add	a3,a3,t0
    6a98:	00c68067          	jr	12(a3)
    6a9c:	00b70723          	sb	a1,14(a4)
    6aa0:	00b706a3          	sb	a1,13(a4)
    6aa4:	00b70623          	sb	a1,12(a4)
    6aa8:	00b705a3          	sb	a1,11(a4)
    6aac:	00b70523          	sb	a1,10(a4)
    6ab0:	00b704a3          	sb	a1,9(a4)
    6ab4:	00b70423          	sb	a1,8(a4)
    6ab8:	00b703a3          	sb	a1,7(a4)
    6abc:	00b70323          	sb	a1,6(a4)
    6ac0:	00b702a3          	sb	a1,5(a4)
    6ac4:	00b70223          	sb	a1,4(a4)
    6ac8:	00b701a3          	sb	a1,3(a4)
    6acc:	00b70123          	sb	a1,2(a4)
    6ad0:	00b700a3          	sb	a1,1(a4)
    6ad4:	00b70023          	sb	a1,0(a4)
    6ad8:	00008067          	ret
    6adc:	0ff5f593          	zext.b	a1,a1
    6ae0:	00859693          	slli	a3,a1,0x8
    6ae4:	00d5e5b3          	or	a1,a1,a3
    6ae8:	01059693          	slli	a3,a1,0x10
    6aec:	00d5e5b3          	or	a1,a1,a3
    6af0:	f6dff06f          	j	6a5c <memset+0x18>
    6af4:	00279693          	slli	a3,a5,0x2
    6af8:	00000297          	auipc	t0,0x0
    6afc:	005686b3          	add	a3,a3,t0
    6b00:	00008293          	mv	t0,ra
    6b04:	fa0680e7          	jalr	-96(a3)
    6b08:	00028093          	mv	ra,t0
    6b0c:	ff078793          	addi	a5,a5,-16
    6b10:	40f70733          	sub	a4,a4,a5
    6b14:	00f60633          	add	a2,a2,a5
    6b18:	f6c378e3          	bgeu	t1,a2,6a88 <memset+0x44>
    6b1c:	f3dff06f          	j	6a58 <memset+0x14>

00006b20 <modf>:
    6b20:	4145d793          	srai	a5,a1,0x14
    6b24:	ff010113          	addi	sp,sp,-16
    6b28:	7ff7f793          	andi	a5,a5,2047
    6b2c:	00812423          	sw	s0,8(sp)
    6b30:	00912223          	sw	s1,4(sp)
    6b34:	01212023          	sw	s2,0(sp)
    6b38:	00112623          	sw	ra,12(sp)
    6b3c:	c0178713          	addi	a4,a5,-1023
    6b40:	01300693          	li	a3,19
    6b44:	00058413          	mv	s0,a1
    6b48:	00050493          	mv	s1,a0
    6b4c:	00060913          	mv	s2,a2
    6b50:	04e6c863          	blt	a3,a4,6ba0 <modf+0x80>
    6b54:	0e074a63          	bltz	a4,6c48 <modf+0x128>
    6b58:	001007b7          	lui	a5,0x100
    6b5c:	fff78793          	addi	a5,a5,-1 # fffff <RAM_SIZE+0xeffff>
    6b60:	40e7d733          	sra	a4,a5,a4
    6b64:	00b777b3          	and	a5,a4,a1
    6b68:	00a7e7b3          	or	a5,a5,a0
    6b6c:	06079263          	bnez	a5,6bd0 <modf+0xb0>
    6b70:	800005b7          	lui	a1,0x80000
    6b74:	00992023          	sw	s1,0(s2)
    6b78:	0085f5b3          	and	a1,a1,s0
    6b7c:	00892223          	sw	s0,4(s2)
    6b80:	00000493          	li	s1,0
    6b84:	00c12083          	lw	ra,12(sp)
    6b88:	00812403          	lw	s0,8(sp)
    6b8c:	00012903          	lw	s2,0(sp)
    6b90:	00048513          	mv	a0,s1
    6b94:	00412483          	lw	s1,4(sp)
    6b98:	01010113          	addi	sp,sp,16
    6b9c:	00008067          	ret
    6ba0:	03300693          	li	a3,51
    6ba4:	06e6c863          	blt	a3,a4,6c14 <modf+0xf4>
    6ba8:	fff00713          	li	a4,-1
    6bac:	bed78793          	addi	a5,a5,-1043
    6bb0:	00f757b3          	srl	a5,a4,a5
    6bb4:	00a7f733          	and	a4,a5,a0
    6bb8:	fa070ce3          	beqz	a4,6b70 <modf+0x50>
    6bbc:	fff7c793          	not	a5,a5
    6bc0:	00a7f4b3          	and	s1,a5,a0
    6bc4:	00048713          	mv	a4,s1
    6bc8:	00048613          	mv	a2,s1
    6bcc:	0180006f          	j	6be4 <modf+0xc4>
    6bd0:	fff74713          	not	a4,a4
    6bd4:	00000813          	li	a6,0
    6bd8:	00b77433          	and	s0,a4,a1
    6bdc:	00080613          	mv	a2,a6
    6be0:	00080713          	mv	a4,a6
    6be4:	00892223          	sw	s0,4(s2)
    6be8:	00040693          	mv	a3,s0
    6bec:	00e92023          	sw	a4,0(s2)
    6bf0:	38c000ef          	jal	ra,6f7c <__subdf3>
    6bf4:	00c12083          	lw	ra,12(sp)
    6bf8:	00812403          	lw	s0,8(sp)
    6bfc:	00050493          	mv	s1,a0
    6c00:	00012903          	lw	s2,0(sp)
    6c04:	00048513          	mv	a0,s1
    6c08:	00412483          	lw	s1,4(sp)
    6c0c:	01010113          	addi	sp,sp,16
    6c10:	00008067          	ret
    6c14:	00a92023          	sw	a0,0(s2)
    6c18:	00b92223          	sw	a1,4(s2)
    6c1c:	218000ef          	jal	ra,6e34 <__fpclassifyd>
    6c20:	04051c63          	bnez	a0,6c78 <modf+0x158>
    6c24:	00048613          	mv	a2,s1
    6c28:	00048513          	mv	a0,s1
    6c2c:	00040693          	mv	a3,s0
    6c30:	00040593          	mv	a1,s0
    6c34:	b08fe0ef          	jal	ra,4f3c <__adddf3>
    6c38:	00050493          	mv	s1,a0
    6c3c:	00a92023          	sw	a0,0(s2)
    6c40:	00b92223          	sw	a1,4(s2)
    6c44:	f41ff06f          	j	6b84 <modf+0x64>
    6c48:	00c12083          	lw	ra,12(sp)
    6c4c:	00812403          	lw	s0,8(sp)
    6c50:	800006b7          	lui	a3,0x80000
    6c54:	00000713          	li	a4,0
    6c58:	00e62023          	sw	a4,0(a2)
    6c5c:	00b6f6b3          	and	a3,a3,a1
    6c60:	00d92223          	sw	a3,4(s2)
    6c64:	00048513          	mv	a0,s1
    6c68:	00012903          	lw	s2,0(sp)
    6c6c:	00412483          	lw	s1,4(sp)
    6c70:	01010113          	addi	sp,sp,16
    6c74:	00008067          	ret
    6c78:	800005b7          	lui	a1,0x80000
    6c7c:	0085f5b3          	and	a1,a1,s0
    6c80:	00000493          	li	s1,0
    6c84:	f01ff06f          	j	6b84 <modf+0x64>

00006c88 <__call_exitprocs>:
    6c88:	fd010113          	addi	sp,sp,-48
    6c8c:	01412c23          	sw	s4,24(sp)
    6c90:	00001a17          	auipc	s4,0x1
    6c94:	330a2a03          	lw	s4,816(s4) # 7fc0 <_global_impure_ptr>
    6c98:	03212023          	sw	s2,32(sp)
    6c9c:	148a2903          	lw	s2,328(s4)
    6ca0:	02112623          	sw	ra,44(sp)
    6ca4:	02812423          	sw	s0,40(sp)
    6ca8:	02912223          	sw	s1,36(sp)
    6cac:	01312e23          	sw	s3,28(sp)
    6cb0:	01512a23          	sw	s5,20(sp)
    6cb4:	01612823          	sw	s6,16(sp)
    6cb8:	01712623          	sw	s7,12(sp)
    6cbc:	01812423          	sw	s8,8(sp)
    6cc0:	04090063          	beqz	s2,6d00 <__call_exitprocs+0x78>
    6cc4:	00050b13          	mv	s6,a0
    6cc8:	00058b93          	mv	s7,a1
    6ccc:	00100a93          	li	s5,1
    6cd0:	fff00993          	li	s3,-1
    6cd4:	00492483          	lw	s1,4(s2)
    6cd8:	fff48413          	addi	s0,s1,-1
    6cdc:	02044263          	bltz	s0,6d00 <__call_exitprocs+0x78>
    6ce0:	00249493          	slli	s1,s1,0x2
    6ce4:	009904b3          	add	s1,s2,s1
    6ce8:	040b8463          	beqz	s7,6d30 <__call_exitprocs+0xa8>
    6cec:	1044a783          	lw	a5,260(s1)
    6cf0:	05778063          	beq	a5,s7,6d30 <__call_exitprocs+0xa8>
    6cf4:	fff40413          	addi	s0,s0,-1
    6cf8:	ffc48493          	addi	s1,s1,-4
    6cfc:	ff3416e3          	bne	s0,s3,6ce8 <__call_exitprocs+0x60>
    6d00:	02c12083          	lw	ra,44(sp)
    6d04:	02812403          	lw	s0,40(sp)
    6d08:	02412483          	lw	s1,36(sp)
    6d0c:	02012903          	lw	s2,32(sp)
    6d10:	01c12983          	lw	s3,28(sp)
    6d14:	01812a03          	lw	s4,24(sp)
    6d18:	01412a83          	lw	s5,20(sp)
    6d1c:	01012b03          	lw	s6,16(sp)
    6d20:	00c12b83          	lw	s7,12(sp)
    6d24:	00812c03          	lw	s8,8(sp)
    6d28:	03010113          	addi	sp,sp,48
    6d2c:	00008067          	ret
    6d30:	00492783          	lw	a5,4(s2)
    6d34:	0044a683          	lw	a3,4(s1)
    6d38:	fff78793          	addi	a5,a5,-1
    6d3c:	04878e63          	beq	a5,s0,6d98 <__call_exitprocs+0x110>
    6d40:	0004a223          	sw	zero,4(s1)
    6d44:	fa0688e3          	beqz	a3,6cf4 <__call_exitprocs+0x6c>
    6d48:	18892783          	lw	a5,392(s2)
    6d4c:	008a9733          	sll	a4,s5,s0
    6d50:	00492c03          	lw	s8,4(s2)
    6d54:	00f777b3          	and	a5,a4,a5
    6d58:	02079263          	bnez	a5,6d7c <__call_exitprocs+0xf4>
    6d5c:	000680e7          	jalr	a3 # 80000000 <RAM_SIZE+0x7fff0000>
    6d60:	00492703          	lw	a4,4(s2)
    6d64:	148a2783          	lw	a5,328(s4)
    6d68:	01871463          	bne	a4,s8,6d70 <__call_exitprocs+0xe8>
    6d6c:	f92784e3          	beq	a5,s2,6cf4 <__call_exitprocs+0x6c>
    6d70:	f80788e3          	beqz	a5,6d00 <__call_exitprocs+0x78>
    6d74:	00078913          	mv	s2,a5
    6d78:	f5dff06f          	j	6cd4 <__call_exitprocs+0x4c>
    6d7c:	18c92783          	lw	a5,396(s2)
    6d80:	0844a583          	lw	a1,132(s1)
    6d84:	00f77733          	and	a4,a4,a5
    6d88:	00071c63          	bnez	a4,6da0 <__call_exitprocs+0x118>
    6d8c:	000b0513          	mv	a0,s6
    6d90:	000680e7          	jalr	a3
    6d94:	fcdff06f          	j	6d60 <__call_exitprocs+0xd8>
    6d98:	00892223          	sw	s0,4(s2)
    6d9c:	fa9ff06f          	j	6d44 <__call_exitprocs+0xbc>
    6da0:	00058513          	mv	a0,a1
    6da4:	000680e7          	jalr	a3
    6da8:	fb9ff06f          	j	6d60 <__call_exitprocs+0xd8>

00006dac <register_fini>:
    6dac:	00000793          	li	a5,0
    6db0:	00078863          	beqz	a5,6dc0 <register_fini+0x14>
    6db4:	00000517          	auipc	a0,0x0
    6db8:	02450513          	addi	a0,a0,36 # 6dd8 <__libc_fini_array>
    6dbc:	0080006f          	j	6dc4 <atexit>
    6dc0:	00008067          	ret

00006dc4 <atexit>:
    6dc4:	00050593          	mv	a1,a0
    6dc8:	00000693          	li	a3,0
    6dcc:	00000613          	li	a2,0
    6dd0:	00000513          	li	a0,0
    6dd4:	0d40006f          	j	6ea8 <__register_exitproc>

00006dd8 <__libc_fini_array>:
    6dd8:	ff010113          	addi	sp,sp,-16
    6ddc:	00812423          	sw	s0,8(sp)
    6de0:	00001797          	auipc	a5,0x1
    6de4:	1dc78793          	addi	a5,a5,476 # 7fbc <__fini_array_end>
    6de8:	00001417          	auipc	s0,0x1
    6dec:	1d040413          	addi	s0,s0,464 # 7fb8 <__do_global_dtors_aux_fini_array_entry>
    6df0:	408787b3          	sub	a5,a5,s0
    6df4:	00912223          	sw	s1,4(sp)
    6df8:	00112623          	sw	ra,12(sp)
    6dfc:	4027d493          	srai	s1,a5,0x2
    6e00:	02048063          	beqz	s1,6e20 <__libc_fini_array+0x48>
    6e04:	ffc78793          	addi	a5,a5,-4
    6e08:	00878433          	add	s0,a5,s0
    6e0c:	00042783          	lw	a5,0(s0)
    6e10:	fff48493          	addi	s1,s1,-1
    6e14:	ffc40413          	addi	s0,s0,-4
    6e18:	000780e7          	jalr	a5
    6e1c:	fe0498e3          	bnez	s1,6e0c <__libc_fini_array+0x34>
    6e20:	00c12083          	lw	ra,12(sp)
    6e24:	00812403          	lw	s0,8(sp)
    6e28:	00412483          	lw	s1,4(sp)
    6e2c:	01010113          	addi	sp,sp,16
    6e30:	00008067          	ret

00006e34 <__fpclassifyd>:
    6e34:	00b56733          	or	a4,a0,a1
    6e38:	00050793          	mv	a5,a0
    6e3c:	04070e63          	beqz	a4,6e98 <__fpclassifyd+0x64>
    6e40:	80000737          	lui	a4,0x80000
    6e44:	04e58463          	beq	a1,a4,6e8c <__fpclassifyd+0x58>
    6e48:	fff00737          	lui	a4,0xfff00
    6e4c:	00b70733          	add	a4,a4,a1
    6e50:	7fe006b7          	lui	a3,0x7fe00
    6e54:	00400513          	li	a0,4
    6e58:	02d76863          	bltu	a4,a3,6e88 <__fpclassifyd+0x54>
    6e5c:	7ff00737          	lui	a4,0x7ff00
    6e60:	00b70733          	add	a4,a4,a1
    6e64:	02d76263          	bltu	a4,a3,6e88 <__fpclassifyd+0x54>
    6e68:	7ff00737          	lui	a4,0x7ff00
    6e6c:	00b776b3          	and	a3,a4,a1
    6e70:	00300513          	li	a0,3
    6e74:	00068a63          	beqz	a3,6e88 <__fpclassifyd+0x54>
    6e78:	00159593          	slli	a1,a1,0x1
    6e7c:	0015d593          	srli	a1,a1,0x1
    6e80:	00000513          	li	a0,0
    6e84:	00e58e63          	beq	a1,a4,6ea0 <__fpclassifyd+0x6c>
    6e88:	00008067          	ret
    6e8c:	00200513          	li	a0,2
    6e90:	fc079ce3          	bnez	a5,6e68 <__fpclassifyd+0x34>
    6e94:	00008067          	ret
    6e98:	00200513          	li	a0,2
    6e9c:	00008067          	ret
    6ea0:	0017b513          	seqz	a0,a5
    6ea4:	00008067          	ret

00006ea8 <__register_exitproc>:
    6ea8:	00001717          	auipc	a4,0x1
    6eac:	11872703          	lw	a4,280(a4) # 7fc0 <_global_impure_ptr>
    6eb0:	14872783          	lw	a5,328(a4)
    6eb4:	04078c63          	beqz	a5,6f0c <__register_exitproc+0x64>
    6eb8:	0047a703          	lw	a4,4(a5)
    6ebc:	01f00813          	li	a6,31
    6ec0:	06e84e63          	blt	a6,a4,6f3c <__register_exitproc+0x94>
    6ec4:	00271813          	slli	a6,a4,0x2
    6ec8:	02050663          	beqz	a0,6ef4 <__register_exitproc+0x4c>
    6ecc:	01078333          	add	t1,a5,a6
    6ed0:	08c32423          	sw	a2,136(t1) # 140 <calc_func+0x7c>
    6ed4:	1887a883          	lw	a7,392(a5)
    6ed8:	00100613          	li	a2,1
    6edc:	00e61633          	sll	a2,a2,a4
    6ee0:	00c8e8b3          	or	a7,a7,a2
    6ee4:	1917a423          	sw	a7,392(a5)
    6ee8:	10d32423          	sw	a3,264(t1)
    6eec:	00200693          	li	a3,2
    6ef0:	02d50463          	beq	a0,a3,6f18 <__register_exitproc+0x70>
    6ef4:	00170713          	addi	a4,a4,1
    6ef8:	00e7a223          	sw	a4,4(a5)
    6efc:	010787b3          	add	a5,a5,a6
    6f00:	00b7a423          	sw	a1,8(a5)
    6f04:	00000513          	li	a0,0
    6f08:	00008067          	ret
    6f0c:	14c70793          	addi	a5,a4,332
    6f10:	14f72423          	sw	a5,328(a4)
    6f14:	fa5ff06f          	j	6eb8 <__register_exitproc+0x10>
    6f18:	18c7a683          	lw	a3,396(a5)
    6f1c:	00170713          	addi	a4,a4,1
    6f20:	00e7a223          	sw	a4,4(a5)
    6f24:	00c6e633          	or	a2,a3,a2
    6f28:	18c7a623          	sw	a2,396(a5)
    6f2c:	010787b3          	add	a5,a5,a6
    6f30:	00b7a423          	sw	a1,8(a5)
    6f34:	00000513          	li	a0,0
    6f38:	00008067          	ret
    6f3c:	fff00513          	li	a0,-1
    6f40:	00008067          	ret

00006f44 <_exit>:
    6f44:	05d00893          	li	a7,93
    6f48:	00000073          	ecall
    6f4c:	00054463          	bltz	a0,6f54 <_exit+0x10>
    6f50:	0000006f          	j	6f50 <_exit+0xc>
    6f54:	ff010113          	addi	sp,sp,-16
    6f58:	00812423          	sw	s0,8(sp)
    6f5c:	00050413          	mv	s0,a0
    6f60:	00112623          	sw	ra,12(sp)
    6f64:	40800433          	neg	s0,s0
    6f68:	00c000ef          	jal	ra,6f74 <__errno>
    6f6c:	00852023          	sw	s0,0(a0)
    6f70:	0000006f          	j	6f70 <_exit+0x2c>

00006f74 <__errno>:
    6f74:	8181a503          	lw	a0,-2024(gp) # 7fd8 <_impure_ptr>
    6f78:	00008067          	ret

00006f7c <__subdf3>:
    6f7c:	00100837          	lui	a6,0x100
    6f80:	fff80813          	addi	a6,a6,-1 # fffff <RAM_SIZE+0xeffff>
    6f84:	fe010113          	addi	sp,sp,-32
    6f88:	00b877b3          	and	a5,a6,a1
    6f8c:	0145d713          	srli	a4,a1,0x14
    6f90:	00d87833          	and	a6,a6,a3
    6f94:	0146d313          	srli	t1,a3,0x14
    6f98:	00812c23          	sw	s0,24(sp)
    6f9c:	00379793          	slli	a5,a5,0x3
    6fa0:	7ff77413          	andi	s0,a4,2047
    6fa4:	01d55713          	srli	a4,a0,0x1d
    6fa8:	00912a23          	sw	s1,20(sp)
    6fac:	00f767b3          	or	a5,a4,a5
    6fb0:	01f5d493          	srli	s1,a1,0x1f
    6fb4:	01d65713          	srli	a4,a2,0x1d
    6fb8:	00351593          	slli	a1,a0,0x3
    6fbc:	00381813          	slli	a6,a6,0x3
    6fc0:	00112e23          	sw	ra,28(sp)
    6fc4:	01212823          	sw	s2,16(sp)
    6fc8:	01312623          	sw	s3,12(sp)
    6fcc:	7ff37313          	andi	t1,t1,2047
    6fd0:	7ff00513          	li	a0,2047
    6fd4:	01f6d693          	srli	a3,a3,0x1f
    6fd8:	01076733          	or	a4,a4,a6
    6fdc:	00361613          	slli	a2,a2,0x3
    6fe0:	00a31663          	bne	t1,a0,6fec <__subdf3+0x70>
    6fe4:	00c76533          	or	a0,a4,a2
    6fe8:	00051463          	bnez	a0,6ff0 <__subdf3+0x74>
    6fec:	0016c693          	xori	a3,a3,1
    6ff0:	40640833          	sub	a6,s0,t1
    6ff4:	2c969863          	bne	a3,s1,72c4 <__subdf3+0x348>
    6ff8:	13005063          	blez	a6,7118 <__subdf3+0x19c>
    6ffc:	04031063          	bnez	t1,703c <__subdf3+0xc0>
    7000:	00c766b3          	or	a3,a4,a2
    7004:	70068c63          	beqz	a3,771c <__subdf3+0x7a0>
    7008:	fff80513          	addi	a0,a6,-1
    700c:	02051063          	bnez	a0,702c <__subdf3+0xb0>
    7010:	00c58633          	add	a2,a1,a2
    7014:	00b63533          	sltu	a0,a2,a1
    7018:	00e787b3          	add	a5,a5,a4
    701c:	00a787b3          	add	a5,a5,a0
    7020:	00060593          	mv	a1,a2
    7024:	00100413          	li	s0,1
    7028:	0700006f          	j	7098 <__subdf3+0x11c>
    702c:	7ff00693          	li	a3,2047
    7030:	02d81063          	bne	a6,a3,7050 <__subdf3+0xd4>
    7034:	7ff00413          	li	s0,2047
    7038:	2140006f          	j	724c <__subdf3+0x2d0>
    703c:	7ff00693          	li	a3,2047
    7040:	20d40663          	beq	s0,a3,724c <__subdf3+0x2d0>
    7044:	008006b7          	lui	a3,0x800
    7048:	00d76733          	or	a4,a4,a3
    704c:	00080513          	mv	a0,a6
    7050:	03800693          	li	a3,56
    7054:	0aa6cc63          	blt	a3,a0,710c <__subdf3+0x190>
    7058:	01f00693          	li	a3,31
    705c:	06a6ce63          	blt	a3,a0,70d8 <__subdf3+0x15c>
    7060:	02000813          	li	a6,32
    7064:	40a80833          	sub	a6,a6,a0
    7068:	010716b3          	sll	a3,a4,a6
    706c:	00a658b3          	srl	a7,a2,a0
    7070:	01061633          	sll	a2,a2,a6
    7074:	0116e6b3          	or	a3,a3,a7
    7078:	00c03633          	snez	a2,a2
    707c:	00c6e633          	or	a2,a3,a2
    7080:	00a75733          	srl	a4,a4,a0
    7084:	00b60633          	add	a2,a2,a1
    7088:	00b63533          	sltu	a0,a2,a1
    708c:	00f70733          	add	a4,a4,a5
    7090:	00a707b3          	add	a5,a4,a0
    7094:	00060593          	mv	a1,a2
    7098:	00800737          	lui	a4,0x800
    709c:	00e7f733          	and	a4,a5,a4
    70a0:	1a070663          	beqz	a4,724c <__subdf3+0x2d0>
    70a4:	00140413          	addi	s0,s0,1
    70a8:	7ff00713          	li	a4,2047
    70ac:	5ce40a63          	beq	s0,a4,7680 <__subdf3+0x704>
    70b0:	ff800737          	lui	a4,0xff800
    70b4:	fff70713          	addi	a4,a4,-1 # ff7fffff <RAM_SIZE+0xff7effff>
    70b8:	00e7f7b3          	and	a5,a5,a4
    70bc:	0015f513          	andi	a0,a1,1
    70c0:	0015d713          	srli	a4,a1,0x1
    70c4:	00a76533          	or	a0,a4,a0
    70c8:	01f79593          	slli	a1,a5,0x1f
    70cc:	00a5e5b3          	or	a1,a1,a0
    70d0:	0017d793          	srli	a5,a5,0x1
    70d4:	1780006f          	j	724c <__subdf3+0x2d0>
    70d8:	fe050693          	addi	a3,a0,-32
    70dc:	02000893          	li	a7,32
    70e0:	00d756b3          	srl	a3,a4,a3
    70e4:	00000813          	li	a6,0
    70e8:	01150863          	beq	a0,a7,70f8 <__subdf3+0x17c>
    70ec:	04000813          	li	a6,64
    70f0:	40a80533          	sub	a0,a6,a0
    70f4:	00a71833          	sll	a6,a4,a0
    70f8:	00c86633          	or	a2,a6,a2
    70fc:	00c03633          	snez	a2,a2
    7100:	00c6e633          	or	a2,a3,a2
    7104:	00000713          	li	a4,0
    7108:	f7dff06f          	j	7084 <__subdf3+0x108>
    710c:	00c76633          	or	a2,a4,a2
    7110:	00c03633          	snez	a2,a2
    7114:	ff1ff06f          	j	7104 <__subdf3+0x188>
    7118:	0e080263          	beqz	a6,71fc <__subdf3+0x280>
    711c:	40830533          	sub	a0,t1,s0
    7120:	02041e63          	bnez	s0,715c <__subdf3+0x1e0>
    7124:	00b7e6b3          	or	a3,a5,a1
    7128:	52068c63          	beqz	a3,7660 <__subdf3+0x6e4>
    712c:	fff50693          	addi	a3,a0,-1
    7130:	00069c63          	bnez	a3,7148 <__subdf3+0x1cc>
    7134:	00c585b3          	add	a1,a1,a2
    7138:	00e787b3          	add	a5,a5,a4
    713c:	00c5b633          	sltu	a2,a1,a2
    7140:	00c787b3          	add	a5,a5,a2
    7144:	ee1ff06f          	j	7024 <__subdf3+0xa8>
    7148:	7ff00813          	li	a6,2047
    714c:	03051263          	bne	a0,a6,7170 <__subdf3+0x1f4>
    7150:	00070793          	mv	a5,a4
    7154:	00060593          	mv	a1,a2
    7158:	eddff06f          	j	7034 <__subdf3+0xb8>
    715c:	7ff00693          	li	a3,2047
    7160:	fed308e3          	beq	t1,a3,7150 <__subdf3+0x1d4>
    7164:	008006b7          	lui	a3,0x800
    7168:	00d7e7b3          	or	a5,a5,a3
    716c:	00050693          	mv	a3,a0
    7170:	03800513          	li	a0,56
    7174:	06d54e63          	blt	a0,a3,71f0 <__subdf3+0x274>
    7178:	01f00513          	li	a0,31
    717c:	04d54063          	blt	a0,a3,71bc <__subdf3+0x240>
    7180:	02000813          	li	a6,32
    7184:	40d80833          	sub	a6,a6,a3
    7188:	01079533          	sll	a0,a5,a6
    718c:	00d5d8b3          	srl	a7,a1,a3
    7190:	010595b3          	sll	a1,a1,a6
    7194:	01156533          	or	a0,a0,a7
    7198:	00b035b3          	snez	a1,a1
    719c:	00b56533          	or	a0,a0,a1
    71a0:	00d7d7b3          	srl	a5,a5,a3
    71a4:	00c505b3          	add	a1,a0,a2
    71a8:	00e787b3          	add	a5,a5,a4
    71ac:	00c5b633          	sltu	a2,a1,a2
    71b0:	00c787b3          	add	a5,a5,a2
    71b4:	00030413          	mv	s0,t1
    71b8:	ee1ff06f          	j	7098 <__subdf3+0x11c>
    71bc:	fe068513          	addi	a0,a3,-32 # 7fffe0 <RAM_SIZE+0x7effe0>
    71c0:	02000893          	li	a7,32
    71c4:	00a7d833          	srl	a6,a5,a0
    71c8:	00000513          	li	a0,0
    71cc:	01168863          	beq	a3,a7,71dc <__subdf3+0x260>
    71d0:	04000513          	li	a0,64
    71d4:	40d50533          	sub	a0,a0,a3
    71d8:	00a79533          	sll	a0,a5,a0
    71dc:	00b56533          	or	a0,a0,a1
    71e0:	00a03533          	snez	a0,a0
    71e4:	00a86533          	or	a0,a6,a0
    71e8:	00000793          	li	a5,0
    71ec:	fb9ff06f          	j	71a4 <__subdf3+0x228>
    71f0:	00b7e533          	or	a0,a5,a1
    71f4:	00a03533          	snez	a0,a0
    71f8:	ff1ff06f          	j	71e8 <__subdf3+0x26c>
    71fc:	00140693          	addi	a3,s0,1
    7200:	7fe6f513          	andi	a0,a3,2046
    7204:	08051863          	bnez	a0,7294 <__subdf3+0x318>
    7208:	00b7e6b3          	or	a3,a5,a1
    720c:	06041463          	bnez	s0,7274 <__subdf3+0x2f8>
    7210:	46068063          	beqz	a3,7670 <__subdf3+0x6f4>
    7214:	00c766b3          	or	a3,a4,a2
    7218:	02068a63          	beqz	a3,724c <__subdf3+0x2d0>
    721c:	00c58633          	add	a2,a1,a2
    7220:	00e787b3          	add	a5,a5,a4
    7224:	00b63533          	sltu	a0,a2,a1
    7228:	00a787b3          	add	a5,a5,a0
    722c:	00800737          	lui	a4,0x800
    7230:	00e7f733          	and	a4,a5,a4
    7234:	00060593          	mv	a1,a2
    7238:	00070a63          	beqz	a4,724c <__subdf3+0x2d0>
    723c:	ff800737          	lui	a4,0xff800
    7240:	fff70713          	addi	a4,a4,-1 # ff7fffff <RAM_SIZE+0xff7effff>
    7244:	00e7f7b3          	and	a5,a5,a4
    7248:	00100413          	li	s0,1
    724c:	0075f713          	andi	a4,a1,7
    7250:	42070c63          	beqz	a4,7688 <__subdf3+0x70c>
    7254:	00f5f713          	andi	a4,a1,15
    7258:	00400693          	li	a3,4
    725c:	42d70663          	beq	a4,a3,7688 <__subdf3+0x70c>
    7260:	00458713          	addi	a4,a1,4 # 80000004 <RAM_SIZE+0x7fff0004>
    7264:	00b73533          	sltu	a0,a4,a1
    7268:	00a787b3          	add	a5,a5,a0
    726c:	00070593          	mv	a1,a4
    7270:	4180006f          	j	7688 <__subdf3+0x70c>
    7274:	ec068ee3          	beqz	a3,7150 <__subdf3+0x1d4>
    7278:	00c76633          	or	a2,a4,a2
    727c:	da060ce3          	beqz	a2,7034 <__subdf3+0xb8>
    7280:	00000493          	li	s1,0
    7284:	004007b7          	lui	a5,0x400
    7288:	00000593          	li	a1,0
    728c:	7ff00413          	li	s0,2047
    7290:	3f80006f          	j	7688 <__subdf3+0x70c>
    7294:	7ff00513          	li	a0,2047
    7298:	3ea68263          	beq	a3,a0,767c <__subdf3+0x700>
    729c:	00c58633          	add	a2,a1,a2
    72a0:	00b63533          	sltu	a0,a2,a1
    72a4:	00e787b3          	add	a5,a5,a4
    72a8:	00a787b3          	add	a5,a5,a0
    72ac:	01f79513          	slli	a0,a5,0x1f
    72b0:	00165613          	srli	a2,a2,0x1
    72b4:	00c565b3          	or	a1,a0,a2
    72b8:	0017d793          	srli	a5,a5,0x1
    72bc:	00068413          	mv	s0,a3
    72c0:	f8dff06f          	j	724c <__subdf3+0x2d0>
    72c4:	0f005c63          	blez	a6,73bc <__subdf3+0x440>
    72c8:	08031e63          	bnez	t1,7364 <__subdf3+0x3e8>
    72cc:	00c766b3          	or	a3,a4,a2
    72d0:	44068663          	beqz	a3,771c <__subdf3+0x7a0>
    72d4:	fff80513          	addi	a0,a6,-1
    72d8:	02051063          	bnez	a0,72f8 <__subdf3+0x37c>
    72dc:	40c58633          	sub	a2,a1,a2
    72e0:	00c5b533          	sltu	a0,a1,a2
    72e4:	40e787b3          	sub	a5,a5,a4
    72e8:	40a787b3          	sub	a5,a5,a0
    72ec:	00060593          	mv	a1,a2
    72f0:	00100413          	li	s0,1
    72f4:	0540006f          	j	7348 <__subdf3+0x3cc>
    72f8:	7ff00693          	li	a3,2047
    72fc:	d2d80ce3          	beq	a6,a3,7034 <__subdf3+0xb8>
    7300:	03800693          	li	a3,56
    7304:	0aa6c663          	blt	a3,a0,73b0 <__subdf3+0x434>
    7308:	01f00693          	li	a3,31
    730c:	06a6c863          	blt	a3,a0,737c <__subdf3+0x400>
    7310:	02000813          	li	a6,32
    7314:	40a80833          	sub	a6,a6,a0
    7318:	010716b3          	sll	a3,a4,a6
    731c:	00a658b3          	srl	a7,a2,a0
    7320:	01061633          	sll	a2,a2,a6
    7324:	0116e6b3          	or	a3,a3,a7
    7328:	00c03633          	snez	a2,a2
    732c:	00c6e633          	or	a2,a3,a2
    7330:	00a75733          	srl	a4,a4,a0
    7334:	40c58633          	sub	a2,a1,a2
    7338:	00c5b533          	sltu	a0,a1,a2
    733c:	40e78733          	sub	a4,a5,a4
    7340:	40a707b3          	sub	a5,a4,a0
    7344:	00060593          	mv	a1,a2
    7348:	00800937          	lui	s2,0x800
    734c:	0127f733          	and	a4,a5,s2
    7350:	ee070ee3          	beqz	a4,724c <__subdf3+0x2d0>
    7354:	fff90913          	addi	s2,s2,-1 # 7fffff <RAM_SIZE+0x7effff>
    7358:	0127f933          	and	s2,a5,s2
    735c:	00058993          	mv	s3,a1
    7360:	2140006f          	j	7574 <__subdf3+0x5f8>
    7364:	7ff00693          	li	a3,2047
    7368:	eed402e3          	beq	s0,a3,724c <__subdf3+0x2d0>
    736c:	008006b7          	lui	a3,0x800
    7370:	00d76733          	or	a4,a4,a3
    7374:	00080513          	mv	a0,a6
    7378:	f89ff06f          	j	7300 <__subdf3+0x384>
    737c:	fe050693          	addi	a3,a0,-32
    7380:	02000893          	li	a7,32
    7384:	00d756b3          	srl	a3,a4,a3
    7388:	00000813          	li	a6,0
    738c:	01150863          	beq	a0,a7,739c <__subdf3+0x420>
    7390:	04000813          	li	a6,64
    7394:	40a80533          	sub	a0,a6,a0
    7398:	00a71833          	sll	a6,a4,a0
    739c:	00c86633          	or	a2,a6,a2
    73a0:	00c03633          	snez	a2,a2
    73a4:	00c6e633          	or	a2,a3,a2
    73a8:	00000713          	li	a4,0
    73ac:	f89ff06f          	j	7334 <__subdf3+0x3b8>
    73b0:	00c76633          	or	a2,a4,a2
    73b4:	00c03633          	snez	a2,a2
    73b8:	ff1ff06f          	j	73a8 <__subdf3+0x42c>
    73bc:	0e080863          	beqz	a6,74ac <__subdf3+0x530>
    73c0:	40830533          	sub	a0,t1,s0
    73c4:	04041263          	bnez	s0,7408 <__subdf3+0x48c>
    73c8:	00b7e833          	or	a6,a5,a1
    73cc:	34080c63          	beqz	a6,7724 <__subdf3+0x7a8>
    73d0:	fff50813          	addi	a6,a0,-1
    73d4:	00081e63          	bnez	a6,73f0 <__subdf3+0x474>
    73d8:	40b605b3          	sub	a1,a2,a1
    73dc:	40f707b3          	sub	a5,a4,a5
    73e0:	00b63633          	sltu	a2,a2,a1
    73e4:	40c787b3          	sub	a5,a5,a2
    73e8:	00068493          	mv	s1,a3
    73ec:	f05ff06f          	j	72f0 <__subdf3+0x374>
    73f0:	7ff00893          	li	a7,2047
    73f4:	03151463          	bne	a0,a7,741c <__subdf3+0x4a0>
    73f8:	00070793          	mv	a5,a4
    73fc:	00060593          	mv	a1,a2
    7400:	7ff00413          	li	s0,2047
    7404:	0d00006f          	j	74d4 <__subdf3+0x558>
    7408:	7ff00813          	li	a6,2047
    740c:	ff0306e3          	beq	t1,a6,73f8 <__subdf3+0x47c>
    7410:	00800837          	lui	a6,0x800
    7414:	0107e7b3          	or	a5,a5,a6
    7418:	00050813          	mv	a6,a0
    741c:	03800513          	li	a0,56
    7420:	09054063          	blt	a0,a6,74a0 <__subdf3+0x524>
    7424:	01f00513          	li	a0,31
    7428:	05054263          	blt	a0,a6,746c <__subdf3+0x4f0>
    742c:	02000893          	li	a7,32
    7430:	410888b3          	sub	a7,a7,a6
    7434:	01179533          	sll	a0,a5,a7
    7438:	0105de33          	srl	t3,a1,a6
    743c:	011595b3          	sll	a1,a1,a7
    7440:	01c56533          	or	a0,a0,t3
    7444:	00b035b3          	snez	a1,a1
    7448:	00b56533          	or	a0,a0,a1
    744c:	0107d7b3          	srl	a5,a5,a6
    7450:	40a605b3          	sub	a1,a2,a0
    7454:	40f707b3          	sub	a5,a4,a5
    7458:	00b63633          	sltu	a2,a2,a1
    745c:	40c787b3          	sub	a5,a5,a2
    7460:	00030413          	mv	s0,t1
    7464:	00068493          	mv	s1,a3
    7468:	ee1ff06f          	j	7348 <__subdf3+0x3cc>
    746c:	fe080513          	addi	a0,a6,-32 # 7fffe0 <RAM_SIZE+0x7effe0>
    7470:	02000e13          	li	t3,32
    7474:	00a7d8b3          	srl	a7,a5,a0
    7478:	00000513          	li	a0,0
    747c:	01c80863          	beq	a6,t3,748c <__subdf3+0x510>
    7480:	04000513          	li	a0,64
    7484:	41050533          	sub	a0,a0,a6
    7488:	00a79533          	sll	a0,a5,a0
    748c:	00b56533          	or	a0,a0,a1
    7490:	00a03533          	snez	a0,a0
    7494:	00a8e533          	or	a0,a7,a0
    7498:	00000793          	li	a5,0
    749c:	fb5ff06f          	j	7450 <__subdf3+0x4d4>
    74a0:	00b7e533          	or	a0,a5,a1
    74a4:	00a03533          	snez	a0,a0
    74a8:	ff1ff06f          	j	7498 <__subdf3+0x51c>
    74ac:	00140513          	addi	a0,s0,1
    74b0:	7fe57513          	andi	a0,a0,2046
    74b4:	08051863          	bnez	a0,7544 <__subdf3+0x5c8>
    74b8:	00b7e833          	or	a6,a5,a1
    74bc:	00c76533          	or	a0,a4,a2
    74c0:	06041263          	bnez	s0,7524 <__subdf3+0x5a8>
    74c4:	00081c63          	bnez	a6,74dc <__subdf3+0x560>
    74c8:	26050663          	beqz	a0,7734 <__subdf3+0x7b8>
    74cc:	00070793          	mv	a5,a4
    74d0:	00060593          	mv	a1,a2
    74d4:	00068493          	mv	s1,a3
    74d8:	d75ff06f          	j	724c <__subdf3+0x2d0>
    74dc:	d60508e3          	beqz	a0,724c <__subdf3+0x2d0>
    74e0:	40c58833          	sub	a6,a1,a2
    74e4:	0105b8b3          	sltu	a7,a1,a6
    74e8:	40e78533          	sub	a0,a5,a4
    74ec:	41150533          	sub	a0,a0,a7
    74f0:	008008b7          	lui	a7,0x800
    74f4:	011578b3          	and	a7,a0,a7
    74f8:	00088c63          	beqz	a7,7510 <__subdf3+0x594>
    74fc:	40b605b3          	sub	a1,a2,a1
    7500:	40f707b3          	sub	a5,a4,a5
    7504:	00b63633          	sltu	a2,a2,a1
    7508:	40c787b3          	sub	a5,a5,a2
    750c:	fc9ff06f          	j	74d4 <__subdf3+0x558>
    7510:	00a865b3          	or	a1,a6,a0
    7514:	22058863          	beqz	a1,7744 <__subdf3+0x7c8>
    7518:	00050793          	mv	a5,a0
    751c:	00080593          	mv	a1,a6
    7520:	d2dff06f          	j	724c <__subdf3+0x2d0>
    7524:	00081c63          	bnez	a6,753c <__subdf3+0x5c0>
    7528:	22050263          	beqz	a0,774c <__subdf3+0x7d0>
    752c:	00070793          	mv	a5,a4
    7530:	00060593          	mv	a1,a2
    7534:	00068493          	mv	s1,a3
    7538:	afdff06f          	j	7034 <__subdf3+0xb8>
    753c:	ae050ce3          	beqz	a0,7034 <__subdf3+0xb8>
    7540:	d41ff06f          	j	7280 <__subdf3+0x304>
    7544:	40c589b3          	sub	s3,a1,a2
    7548:	0135b533          	sltu	a0,a1,s3
    754c:	40e78933          	sub	s2,a5,a4
    7550:	40a90933          	sub	s2,s2,a0
    7554:	00800537          	lui	a0,0x800
    7558:	00a97533          	and	a0,s2,a0
    755c:	08050463          	beqz	a0,75e4 <__subdf3+0x668>
    7560:	40b609b3          	sub	s3,a2,a1
    7564:	40f707b3          	sub	a5,a4,a5
    7568:	01363633          	sltu	a2,a2,s3
    756c:	40c78933          	sub	s2,a5,a2
    7570:	00068493          	mv	s1,a3
    7574:	08090263          	beqz	s2,75f8 <__subdf3+0x67c>
    7578:	00090513          	mv	a0,s2
    757c:	bb4ff0ef          	jal	ra,6930 <__clzsi2>
    7580:	ff850713          	addi	a4,a0,-8 # 7ffff8 <RAM_SIZE+0x7efff8>
    7584:	01f00793          	li	a5,31
    7588:	08e7c063          	blt	a5,a4,7608 <__subdf3+0x68c>
    758c:	02000793          	li	a5,32
    7590:	40e787b3          	sub	a5,a5,a4
    7594:	00e91933          	sll	s2,s2,a4
    7598:	00f9d7b3          	srl	a5,s3,a5
    759c:	0127e7b3          	or	a5,a5,s2
    75a0:	00e995b3          	sll	a1,s3,a4
    75a4:	0a874463          	blt	a4,s0,764c <__subdf3+0x6d0>
    75a8:	40870733          	sub	a4,a4,s0
    75ac:	00170693          	addi	a3,a4,1
    75b0:	01f00613          	li	a2,31
    75b4:	06d64263          	blt	a2,a3,7618 <__subdf3+0x69c>
    75b8:	02000713          	li	a4,32
    75bc:	40d70733          	sub	a4,a4,a3
    75c0:	00e79633          	sll	a2,a5,a4
    75c4:	00d5d533          	srl	a0,a1,a3
    75c8:	00e595b3          	sll	a1,a1,a4
    75cc:	00a66633          	or	a2,a2,a0
    75d0:	00b035b3          	snez	a1,a1
    75d4:	00b665b3          	or	a1,a2,a1
    75d8:	00d7d7b3          	srl	a5,a5,a3
    75dc:	00000413          	li	s0,0
    75e0:	c6dff06f          	j	724c <__subdf3+0x2d0>
    75e4:	0129e5b3          	or	a1,s3,s2
    75e8:	f80596e3          	bnez	a1,7574 <__subdf3+0x5f8>
    75ec:	00000793          	li	a5,0
    75f0:	00000413          	li	s0,0
    75f4:	1480006f          	j	773c <__subdf3+0x7c0>
    75f8:	00098513          	mv	a0,s3
    75fc:	b34ff0ef          	jal	ra,6930 <__clzsi2>
    7600:	02050513          	addi	a0,a0,32
    7604:	f7dff06f          	j	7580 <__subdf3+0x604>
    7608:	fd850793          	addi	a5,a0,-40
    760c:	00f997b3          	sll	a5,s3,a5
    7610:	00000593          	li	a1,0
    7614:	f91ff06f          	j	75a4 <__subdf3+0x628>
    7618:	fe170713          	addi	a4,a4,-31
    761c:	02000613          	li	a2,32
    7620:	00e7d733          	srl	a4,a5,a4
    7624:	00000513          	li	a0,0
    7628:	00c68863          	beq	a3,a2,7638 <__subdf3+0x6bc>
    762c:	04000513          	li	a0,64
    7630:	40d50533          	sub	a0,a0,a3
    7634:	00a79533          	sll	a0,a5,a0
    7638:	00a5e533          	or	a0,a1,a0
    763c:	00a03533          	snez	a0,a0
    7640:	00a765b3          	or	a1,a4,a0
    7644:	00000793          	li	a5,0
    7648:	f95ff06f          	j	75dc <__subdf3+0x660>
    764c:	40e40433          	sub	s0,s0,a4
    7650:	ff800737          	lui	a4,0xff800
    7654:	fff70713          	addi	a4,a4,-1 # ff7fffff <RAM_SIZE+0xff7effff>
    7658:	00e7f7b3          	and	a5,a5,a4
    765c:	bf1ff06f          	j	724c <__subdf3+0x2d0>
    7660:	00070793          	mv	a5,a4
    7664:	00060593          	mv	a1,a2
    7668:	00050413          	mv	s0,a0
    766c:	be1ff06f          	j	724c <__subdf3+0x2d0>
    7670:	00070793          	mv	a5,a4
    7674:	00060593          	mv	a1,a2
    7678:	bd5ff06f          	j	724c <__subdf3+0x2d0>
    767c:	7ff00413          	li	s0,2047
    7680:	00000793          	li	a5,0
    7684:	00000593          	li	a1,0
    7688:	00800737          	lui	a4,0x800
    768c:	00e7f733          	and	a4,a5,a4
    7690:	00070e63          	beqz	a4,76ac <__subdf3+0x730>
    7694:	00140413          	addi	s0,s0,1
    7698:	7ff00713          	li	a4,2047
    769c:	0ce40063          	beq	s0,a4,775c <__subdf3+0x7e0>
    76a0:	ff800737          	lui	a4,0xff800
    76a4:	fff70713          	addi	a4,a4,-1 # ff7fffff <RAM_SIZE+0xff7effff>
    76a8:	00e7f7b3          	and	a5,a5,a4
    76ac:	01d79713          	slli	a4,a5,0x1d
    76b0:	0035d513          	srli	a0,a1,0x3
    76b4:	00a76533          	or	a0,a4,a0
    76b8:	7ff00713          	li	a4,2047
    76bc:	0037d793          	srli	a5,a5,0x3
    76c0:	00e41e63          	bne	s0,a4,76dc <__subdf3+0x760>
    76c4:	00f56533          	or	a0,a0,a5
    76c8:	00000793          	li	a5,0
    76cc:	00050863          	beqz	a0,76dc <__subdf3+0x760>
    76d0:	000807b7          	lui	a5,0x80
    76d4:	00000513          	li	a0,0
    76d8:	00000493          	li	s1,0
    76dc:	01441713          	slli	a4,s0,0x14
    76e0:	7ff006b7          	lui	a3,0x7ff00
    76e4:	00c79793          	slli	a5,a5,0xc
    76e8:	01c12083          	lw	ra,28(sp)
    76ec:	01812403          	lw	s0,24(sp)
    76f0:	00d77733          	and	a4,a4,a3
    76f4:	00c7d793          	srli	a5,a5,0xc
    76f8:	01f49493          	slli	s1,s1,0x1f
    76fc:	00f767b3          	or	a5,a4,a5
    7700:	0097e733          	or	a4,a5,s1
    7704:	01012903          	lw	s2,16(sp)
    7708:	01412483          	lw	s1,20(sp)
    770c:	00c12983          	lw	s3,12(sp)
    7710:	00070593          	mv	a1,a4
    7714:	02010113          	addi	sp,sp,32
    7718:	00008067          	ret
    771c:	00080413          	mv	s0,a6
    7720:	b2dff06f          	j	724c <__subdf3+0x2d0>
    7724:	00070793          	mv	a5,a4
    7728:	00060593          	mv	a1,a2
    772c:	00050413          	mv	s0,a0
    7730:	da5ff06f          	j	74d4 <__subdf3+0x558>
    7734:	00000793          	li	a5,0
    7738:	00000593          	li	a1,0
    773c:	00000493          	li	s1,0
    7740:	f49ff06f          	j	7688 <__subdf3+0x70c>
    7744:	00000793          	li	a5,0
    7748:	ff5ff06f          	j	773c <__subdf3+0x7c0>
    774c:	00000593          	li	a1,0
    7750:	00000493          	li	s1,0
    7754:	004007b7          	lui	a5,0x400
    7758:	b35ff06f          	j	728c <__subdf3+0x310>
    775c:	00000793          	li	a5,0
    7760:	00000593          	li	a1,0
    7764:	f49ff06f          	j	76ac <__subdf3+0x730>
	...
    7770:	74617453          	0x74617453
    7774:	6369                	lui	t1,0x1a
    7776:	0000                	unimp
    7778:	6548                	flw	fa0,12(a0)
    777a:	7061                	c.lui	zero,0xffff8
    777c:	0000                	unimp
    777e:	0000                	unimp
    7780:	63617453          	0x63617453
    7784:	0000006b          	0x6b
    7788:	6b36                	flw	fs6,76(sp)
    778a:	7020                	flw	fs0,96(s0)
    778c:	7265                	lui	tp,0xffff9
    778e:	6f66                	flw	ft10,88(sp)
    7790:	6d72                	flw	fs10,28(sp)
    7792:	6e61                	lui	t3,0x18
    7794:	72206563          	bltu	zero,sp,7ebe <__clz_tab+0x12>
    7798:	6e75                	lui	t3,0x1d
    779a:	7020                	flw	fs0,96(s0)
    779c:	7261                	lui	tp,0xffff8
    779e:	6d61                	lui	s10,0x18
    77a0:	7465                	lui	s0,0xffff9
    77a2:	7265                	lui	tp,0xffff9
    77a4:	6f662073          	csrs	0x6f6,a2
    77a8:	2072                	fld	ft0,280(sp)
    77aa:	65726f63          	bltu	tp,s7,7e08 <__subdf3+0xe8c>
    77ae:	616d                	addi	sp,sp,240
    77b0:	6b72                	flw	fs6,28(sp)
    77b2:	0a2e                	slli	s4,s4,0xb
    77b4:	0000                	unimp
    77b6:	0000                	unimp
    77b8:	6b36                	flw	fs6,76(sp)
    77ba:	7620                	flw	fs0,104(a2)
    77bc:	6c61                	lui	s8,0x18
    77be:	6469                	lui	s0,0x1a
    77c0:	7461                	lui	s0,0xffff8
    77c2:	6f69                	lui	t5,0x1a
    77c4:	206e                	fld	ft0,216(sp)
    77c6:	7572                	flw	fa0,60(sp)
    77c8:	206e                	fld	ft0,216(sp)
    77ca:	6170                	flw	fa2,68(a0)
    77cc:	6172                	flw	ft2,28(sp)
    77ce:	656d                	lui	a0,0x1b
    77d0:	6574                	flw	fa3,76(a0)
    77d2:	7372                	flw	ft6,60(sp)
    77d4:	6620                	flw	fs0,72(a2)
    77d6:	6320726f          	jal	tp,ee08 <__stack_top+0x38f8>
    77da:	6d65726f          	jal	tp,5eeb0 <RAM_SIZE+0x4eeb0>
    77de:	7261                	lui	tp,0xffff8
    77e0:	000a2e6b          	0xa2e6b
    77e4:	7250                	flw	fa2,36(a2)
    77e6:	6c69666f          	jal	a2,9deac <RAM_SIZE+0x8deac>
    77ea:	2065                	jal	7892 <__subdf3+0x916>
    77ec:	656e6567          	0x656e6567
    77f0:	6172                	flw	ft2,28(sp)
    77f2:	6974                	flw	fa3,84(a0)
    77f4:	72206e6f          	jal	t3,df16 <__stack_top+0x2a06>
    77f8:	6e75                	lui	t3,0x1d
    77fa:	7020                	flw	fs0,96(s0)
    77fc:	7261                	lui	tp,0xffff8
    77fe:	6d61                	lui	s10,0x18
    7800:	7465                	lui	s0,0xffff9
    7802:	7265                	lui	tp,0xffff9
    7804:	6f662073          	csrs	0x6f6,a2
    7808:	2072                	fld	ft0,280(sp)
    780a:	65726f63          	bltu	tp,s7,7e68 <__subdf3+0xeec>
    780e:	616d                	addi	sp,sp,240
    7810:	6b72                	flw	fs6,28(sp)
    7812:	0a2e                	slli	s4,s4,0xb
    7814:	0000                	unimp
    7816:	0000                	unimp
    7818:	4b32                	lw	s6,12(sp)
    781a:	7020                	flw	fs0,96(s0)
    781c:	7265                	lui	tp,0xffff9
    781e:	6f66                	flw	ft10,88(sp)
    7820:	6d72                	flw	fs10,28(sp)
    7822:	6e61                	lui	t3,0x18
    7824:	72206563          	bltu	zero,sp,7f4e <__clz_tab+0xa2>
    7828:	6e75                	lui	t3,0x1d
    782a:	7020                	flw	fs0,96(s0)
    782c:	7261                	lui	tp,0xffff8
    782e:	6d61                	lui	s10,0x18
    7830:	7465                	lui	s0,0xffff9
    7832:	7265                	lui	tp,0xffff9
    7834:	6f662073          	csrs	0x6f6,a2
    7838:	2072                	fld	ft0,280(sp)
    783a:	65726f63          	bltu	tp,s7,7e98 <__subdf3+0xf1c>
    783e:	616d                	addi	sp,sp,240
    7840:	6b72                	flw	fs6,28(sp)
    7842:	0a2e                	slli	s4,s4,0xb
    7844:	0000                	unimp
    7846:	0000                	unimp
    7848:	4b32                	lw	s6,12(sp)
    784a:	7620                	flw	fs0,104(a2)
    784c:	6c61                	lui	s8,0x18
    784e:	6469                	lui	s0,0x1a
    7850:	7461                	lui	s0,0xffff8
    7852:	6f69                	lui	t5,0x1a
    7854:	206e                	fld	ft0,216(sp)
    7856:	7572                	flw	fa0,60(sp)
    7858:	206e                	fld	ft0,216(sp)
    785a:	6170                	flw	fa2,68(a0)
    785c:	6172                	flw	ft2,28(sp)
    785e:	656d                	lui	a0,0x1b
    7860:	6574                	flw	fa3,76(a0)
    7862:	7372                	flw	ft6,60(sp)
    7864:	6620                	flw	fs0,72(a2)
    7866:	6320726f          	jal	tp,ee98 <__stack_top+0x3988>
    786a:	6d65726f          	jal	tp,5ef40 <RAM_SIZE+0x4ef40>
    786e:	7261                	lui	tp,0xffff8
    7870:	000a2e6b          	0xa2e6b
    7874:	5d75255b          	0x5d75255b
    7878:	5245                	li	tp,-15
    787a:	4f52                	lw	t5,20(sp)
    787c:	2152                	fld	ft2,272(sp)
    787e:	6c20                	flw	fs0,88(s0)
    7880:	7369                	lui	t1,0xffffa
    7882:	2074                	fld	fa3,192(s0)
    7884:	20637263          	bgeu	t1,t1,7a88 <__subdf3+0xb0c>
    7888:	7830                	flw	fa2,112(s0)
    788a:	3025                	jal	70b2 <__subdf3+0x136>
    788c:	7834                	flw	fa3,112(s0)
    788e:	2d20                	fld	fs0,88(a0)
    7890:	7320                	flw	fs0,96(a4)
    7892:	6f68                	flw	fa0,92(a4)
    7894:	6c75                	lui	s8,0x1d
    7896:	2064                	fld	fs1,192(s0)
    7898:	6562                	flw	fa0,24(sp)
    789a:	3020                	fld	fs0,96(s0)
    789c:	2578                	fld	fa4,200(a0)
    789e:	3430                	fld	fa2,104(s0)
    78a0:	0a78                	addi	a4,sp,284
    78a2:	0000                	unimp
    78a4:	5d75255b          	0x5d75255b
    78a8:	5245                	li	tp,-15
    78aa:	4f52                	lw	t5,20(sp)
    78ac:	2152                	fld	ft2,272(sp)
    78ae:	6d20                	flw	fs0,88(a0)
    78b0:	7461                	lui	s0,0xffff8
    78b2:	6972                	flw	fs2,28(sp)
    78b4:	2078                	fld	fa4,192(s0)
    78b6:	20637263          	bgeu	t1,t1,7aba <__subdf3+0xb3e>
    78ba:	7830                	flw	fa2,112(s0)
    78bc:	3025                	jal	70e4 <__subdf3+0x168>
    78be:	7834                	flw	fa3,112(s0)
    78c0:	2d20                	fld	fs0,88(a0)
    78c2:	7320                	flw	fs0,96(a4)
    78c4:	6f68                	flw	fa0,92(a4)
    78c6:	6c75                	lui	s8,0x1d
    78c8:	2064                	fld	fs1,192(s0)
    78ca:	6562                	flw	fa0,24(sp)
    78cc:	3020                	fld	fs0,96(s0)
    78ce:	2578                	fld	fa4,200(a0)
    78d0:	3430                	fld	fa2,104(s0)
    78d2:	0a78                	addi	a4,sp,284
    78d4:	0000                	unimp
    78d6:	0000                	unimp
    78d8:	5d75255b          	0x5d75255b
    78dc:	5245                	li	tp,-15
    78de:	4f52                	lw	t5,20(sp)
    78e0:	2152                	fld	ft2,272(sp)
    78e2:	7320                	flw	fs0,96(a4)
    78e4:	6174                	flw	fa3,68(a0)
    78e6:	6574                	flw	fa3,76(a0)
    78e8:	6320                	flw	fs0,64(a4)
    78ea:	6372                	flw	ft6,28(sp)
    78ec:	3020                	fld	fs0,96(s0)
    78ee:	2578                	fld	fa4,200(a0)
    78f0:	3430                	fld	fa2,104(s0)
    78f2:	2078                	fld	fa4,192(s0)
    78f4:	202d                	jal	791e <__subdf3+0x9a2>
    78f6:	756f6873          	csrrsi	a6,0x756,30
    78fa:	646c                	flw	fa1,76(s0)
    78fc:	6220                	flw	fs0,64(a2)
    78fe:	2065                	jal	79a6 <__subdf3+0xa2a>
    7900:	7830                	flw	fa2,112(s0)
    7902:	3025                	jal	712a <__subdf3+0x1ae>
    7904:	7834                	flw	fa3,112(s0)
    7906:	000a                	c.slli	zero,0x2
    7908:	65726f43          	fmadd.h	ft10,ft4,fs7,fa2,unknown
    790c:	614d                	addi	sp,sp,176
    790e:	6b72                	flw	fs6,28(sp)
    7910:	5320                	lw	s0,96(a4)
    7912:	7a69                	lui	s4,0xffffa
    7914:	2065                	jal	79bc <__subdf3+0xa40>
    7916:	2020                	fld	fs0,64(s0)
    7918:	3a20                	fld	fs0,112(a2)
    791a:	2520                	fld	fs0,72(a0)
    791c:	756c                	flw	fa1,108(a0)
    791e:	000a                	c.slli	zero,0x2
    7920:	6f54                	flw	fa3,28(a4)
    7922:	6174                	flw	fa3,68(a0)
    7924:	206c                	fld	fa1,192(s0)
    7926:	6974                	flw	fa3,84(a0)
    7928:	20736b63          	bltu	t1,t2,7b3e <__subdf3+0xbc2>
    792c:	2020                	fld	fs0,64(s0)
    792e:	2020                	fld	fs0,64(s0)
    7930:	3a20                	fld	fs0,112(a2)
    7932:	2520                	fld	fs0,72(a0)
    7934:	756c                	flw	fa1,108(a0)
    7936:	000a                	c.slli	zero,0x2
    7938:	6f54                	flw	fa3,28(a4)
    793a:	6174                	flw	fa3,68(a0)
    793c:	206c                	fld	fa1,192(s0)
    793e:	6974                	flw	fa3,84(a0)
    7940:	656d                	lui	a0,0x1b
    7942:	2820                	fld	fs0,80(s0)
    7944:	73636573          	csrrsi	a0,0x736,6
    7948:	3a29                	jal	7262 <__subdf3+0x2e6>
    794a:	2520                	fld	fs0,72(a0)
    794c:	0a64                	addi	s1,sp,284
    794e:	0000                	unimp
    7950:	7449                	lui	s0,0xffff2
    7952:	7265                	lui	tp,0xffff9
    7954:	7461                	lui	s0,0xffff8
    7956:	6f69                	lui	t5,0x1a
    7958:	736e                	flw	ft6,248(sp)
    795a:	6365532f          	vamoandei16.v	zero,(a0),v22,v6
    795e:	2020                	fld	fs0,64(s0)
    7960:	3a20                	fld	fs0,112(a2)
    7962:	2520                	fld	fs0,72(a0)
    7964:	0a64                	addi	s1,sp,284
    7966:	0000                	unimp
    7968:	5245                	li	tp,-15
    796a:	4f52                	lw	t5,20(sp)
    796c:	2152                	fld	ft2,272(sp)
    796e:	4d20                	lw	s0,88(a0)
    7970:	7375                	lui	t1,0xffffd
    7972:	2074                	fld	fa3,192(s0)
    7974:	7865                	lui	a6,0xffff9
    7976:	6365                	lui	t1,0x19
    7978:	7475                	lui	s0,0xffffd
    797a:	2065                	jal	7a22 <__subdf3+0xaa6>
    797c:	6f66                	flw	ft10,88(sp)
    797e:	2072                	fld	ft0,280(sp)
    7980:	7461                	lui	s0,0xffff8
    7982:	6c20                	flw	fs0,88(s0)
    7984:	6165                	addi	sp,sp,112
    7986:	31207473          	csrrci	s0,0x312,0
    798a:	2030                	fld	fa2,64(s0)
    798c:	73636573          	csrrsi	a0,0x736,6
    7990:	6620                	flw	fs0,72(a2)
    7992:	6120726f          	jal	tp,efa4 <__stack_top+0x3a94>
    7996:	7620                	flw	fs0,104(a2)
    7998:	6c61                	lui	s8,0x18
    799a:	6469                	lui	s0,0x1a
    799c:	7220                	flw	fs0,96(a2)
    799e:	7365                	lui	t1,0xffff9
    79a0:	6c75                	lui	s8,0x1d
    79a2:	2174                	fld	fa3,192(a0)
    79a4:	000a                	c.slli	zero,0x2
    79a6:	0000                	unimp
    79a8:	7449                	lui	s0,0xffff2
    79aa:	7265                	lui	tp,0xffff9
    79ac:	7461                	lui	s0,0xffff8
    79ae:	6f69                	lui	t5,0x1a
    79b0:	736e                	flw	ft6,248(sp)
    79b2:	2020                	fld	fs0,64(s0)
    79b4:	2020                	fld	fs0,64(s0)
    79b6:	2020                	fld	fs0,64(s0)
    79b8:	3a20                	fld	fs0,112(a2)
    79ba:	2520                	fld	fs0,72(a0)
    79bc:	756c                	flw	fa1,108(a0)
    79be:	000a                	c.slli	zero,0x2
    79c0:	31434347          	fmsub.s	ft6,ft6,fs4,ft6,rmm
    79c4:	2e30                	fld	fa2,88(a2)
    79c6:	2e32                	fld	ft8,264(sp)
    79c8:	0030                	addi	a2,sp,8
    79ca:	0000                	unimp
    79cc:	706d6f43          	fmadd.s	ft10,fs10,ft6,fa4,unknown
    79d0:	6c69                	lui	s8,0x1a
    79d2:	7265                	lui	tp,0xffff9
    79d4:	7620                	flw	fs0,104(a2)
    79d6:	7265                	lui	tp,0xffff9
    79d8:	6e6f6973          	csrrsi	s2,0x6e6,30
    79dc:	3a20                	fld	fs0,112(a2)
    79de:	2520                	fld	fs0,72(a0)
    79e0:	00000a73          	0xa73
    79e4:	6628                	flw	fa0,72(a2)
    79e6:	616c                	flw	fa1,68(a0)
    79e8:	75207367          	0x75207367
    79ec:	6b6e                	flw	fs6,216(sp)
    79ee:	6f6e                	flw	ft10,216(sp)
    79f0:	00296e77          	0x296e77
    79f4:	706d6f43          	fmadd.s	ft10,fs10,ft6,fa4,unknown
    79f8:	6c69                	lui	s8,0x1a
    79fa:	7265                	lui	tp,0xffff9
    79fc:	6620                	flw	fs0,72(a2)
    79fe:	616c                	flw	fa1,68(a0)
    7a00:	20207367          	0x20207367
    7a04:	3a20                	fld	fs0,112(a2)
    7a06:	2520                	fld	fs0,72(a0)
    7a08:	00000a73          	0xa73
    7a0c:	43415453          	0x43415453
    7a10:	0000004b          	fnmsub.s	ft0,ft0,ft0,ft0,rne
    7a14:	654d                	lui	a0,0x13
    7a16:	6f6d                	lui	t5,0x1b
    7a18:	7972                	flw	fs2,60(sp)
    7a1a:	6c20                	flw	fs0,88(s0)
    7a1c:	7461636f          	jal	t1,1e162 <RAM_SIZE+0xe162>
    7a20:	6f69                	lui	t5,0x1a
    7a22:	206e                	fld	ft0,216(sp)
    7a24:	3a20                	fld	fs0,112(a2)
    7a26:	2520                	fld	fs0,72(a0)
    7a28:	00000a73          	0xa73
    7a2c:	64656573          	csrrsi	a0,0x646,10
    7a30:	20637263          	bgeu	t1,t1,7c34 <__subdf3+0xcb8>
    7a34:	2020                	fld	fs0,64(s0)
    7a36:	2020                	fld	fs0,64(s0)
    7a38:	2020                	fld	fs0,64(s0)
    7a3a:	2020                	fld	fs0,64(s0)
    7a3c:	3a20                	fld	fs0,112(a2)
    7a3e:	3020                	fld	fs0,96(s0)
    7a40:	2578                	fld	fa4,200(a0)
    7a42:	3430                	fld	fa2,104(s0)
    7a44:	0a78                	addi	a4,sp,284
    7a46:	0000                	unimp
    7a48:	5d64255b          	0x5d64255b
    7a4c:	6c637263          	bgeu	t1,t1,8110 <impure_data+0xc0>
    7a50:	7369                	lui	t1,0xffffa
    7a52:	2074                	fld	fa3,192(s0)
    7a54:	2020                	fld	fs0,64(s0)
    7a56:	2020                	fld	fs0,64(s0)
    7a58:	2020                	fld	fs0,64(s0)
    7a5a:	203a                	fld	ft0,392(sp)
    7a5c:	7830                	flw	fa2,112(s0)
    7a5e:	3025                	jal	7286 <__subdf3+0x30a>
    7a60:	7834                	flw	fa3,112(s0)
    7a62:	000a                	c.slli	zero,0x2
    7a64:	5d64255b          	0x5d64255b
    7a68:	6d637263          	bgeu	t1,s6,812c <impure_data+0xdc>
    7a6c:	7461                	lui	s0,0xffff8
    7a6e:	6972                	flw	fs2,28(sp)
    7a70:	2078                	fld	fa4,192(s0)
    7a72:	2020                	fld	fs0,64(s0)
    7a74:	2020                	fld	fs0,64(s0)
    7a76:	203a                	fld	ft0,392(sp)
    7a78:	7830                	flw	fa2,112(s0)
    7a7a:	3025                	jal	72a2 <__subdf3+0x326>
    7a7c:	7834                	flw	fa3,112(s0)
    7a7e:	000a                	c.slli	zero,0x2
    7a80:	5d64255b          	0x5d64255b
    7a84:	73637263          	bgeu	t1,s6,81a8 <impure_data+0x158>
    7a88:	6174                	flw	fa3,68(a0)
    7a8a:	6574                	flw	fa3,76(a0)
    7a8c:	2020                	fld	fs0,64(s0)
    7a8e:	2020                	fld	fs0,64(s0)
    7a90:	2020                	fld	fs0,64(s0)
    7a92:	203a                	fld	ft0,392(sp)
    7a94:	7830                	flw	fa2,112(s0)
    7a96:	3025                	jal	72be <__subdf3+0x342>
    7a98:	7834                	flw	fa3,112(s0)
    7a9a:	000a                	c.slli	zero,0x2
    7a9c:	5d64255b          	0x5d64255b
    7aa0:	66637263          	bgeu	t1,t1,8104 <impure_data+0xb4>
    7aa4:	6e69                	lui	t3,0x1a
    7aa6:	6c61                	lui	s8,0x18
    7aa8:	2020                	fld	fs0,64(s0)
    7aaa:	2020                	fld	fs0,64(s0)
    7aac:	2020                	fld	fs0,64(s0)
    7aae:	203a                	fld	ft0,392(sp)
    7ab0:	7830                	flw	fa2,112(s0)
    7ab2:	3025                	jal	72da <__subdf3+0x35e>
    7ab4:	7834                	flw	fa3,112(s0)
    7ab6:	000a                	c.slli	zero,0x2
    7ab8:	72726f43          	fmadd.d	ft10,ft4,ft7,fa4,unknown
    7abc:	6365                	lui	t1,0x19
    7abe:	2074                	fld	fa3,192(s0)
    7ac0:	7265706f          	j	5f1e6 <RAM_SIZE+0x4f1e6>
    7ac4:	7461                	lui	s0,0xffff8
    7ac6:	6f69                	lui	t5,0x1a
    7ac8:	206e                	fld	ft0,216(sp)
    7aca:	6176                	flw	ft2,92(sp)
    7acc:	696c                	flw	fa1,84(a0)
    7ace:	6164                	flw	fs1,68(a0)
    7ad0:	6574                	flw	fa3,76(a0)
    7ad2:	2e64                	fld	fs1,216(a2)
    7ad4:	5320                	lw	s0,96(a4)
    7ad6:	6565                	lui	a0,0x19
    7ad8:	5220                	lw	s0,96(a2)
    7ada:	4145                	li	sp,17
    7adc:	4d44                	lw	s1,28(a0)
    7ade:	2e45                	jal	7e8e <__subdf3+0xf12>
    7ae0:	646d                	lui	s0,0x1b
    7ae2:	6620                	flw	fs0,72(a2)
    7ae4:	7220726f          	jal	tp,f206 <__stack_top+0x3cf6>
    7ae8:	6e75                	lui	t3,0x1d
    7aea:	6120                	flw	fs0,64(a0)
    7aec:	646e                	flw	fs0,216(sp)
    7aee:	7220                	flw	fs0,96(a2)
    7af0:	7065                	c.lui	zero,0xffff9
    7af2:	6974726f          	jal	tp,4f988 <RAM_SIZE+0x3f988>
    7af6:	676e                	flw	fa4,216(sp)
    7af8:	7220                	flw	fs0,96(a2)
    7afa:	6c75                	lui	s8,0x1d
    7afc:	7365                	lui	t1,0xffff9
    7afe:	0a2e                	slli	s4,s4,0xb
    7b00:	0000                	unimp
    7b02:	0000                	unimp
    7b04:	7245                	lui	tp,0xffff1
    7b06:	6f72                	flw	ft10,28(sp)
    7b08:	7372                	flw	ft6,60(sp)
    7b0a:	6420                	flw	fs0,72(s0)
    7b0c:	7465                	lui	s0,0xffff9
    7b0e:	6365                	lui	t1,0x19
    7b10:	6574                	flw	fa3,76(a0)
    7b12:	0a64                	addi	s1,sp,284
    7b14:	0000                	unimp
    7b16:	0000                	unimp
    7b18:	6e6e6143          	fmadd.q	ft2,ft8,ft6,fa3,unknown
    7b1c:	7620746f          	jal	s0,f27e <__stack_top+0x3d6e>
    7b20:	6c61                	lui	s8,0x18
    7b22:	6469                	lui	s0,0x1a
    7b24:	7461                	lui	s0,0xffff8
    7b26:	2065                	jal	7bce <__subdf3+0xc52>
    7b28:	7265706f          	j	5f24e <RAM_SIZE+0x4f24e>
    7b2c:	7461                	lui	s0,0xffff8
    7b2e:	6f69                	lui	t5,0x1a
    7b30:	206e                	fld	ft0,216(sp)
    7b32:	6f66                	flw	ft10,88(sp)
    7b34:	2072                	fld	ft0,280(sp)
    7b36:	6874                	flw	fa3,84(s0)
    7b38:	7365                	lui	t1,0xffff9
    7b3a:	2065                	jal	7be2 <__subdf3+0xc66>
    7b3c:	64656573          	csrrsi	a0,0x646,10
    7b40:	7620                	flw	fs0,104(a2)
    7b42:	6c61                	lui	s8,0x18
    7b44:	6575                	lui	a0,0x1d
    7b46:	70202c73          	csrr	s8,0x702
    7b4a:	656c                	flw	fa1,76(a0)
    7b4c:	7361                	lui	t1,0xffff8
    7b4e:	2065                	jal	7bf6 <__subdf3+0xc7a>
    7b50:	706d6f63          	bltu	s10,t1,826e <impure_data+0x21e>
    7b54:	7261                	lui	tp,0xffff8
    7b56:	2065                	jal	7bfe <__subdf3+0xc82>
    7b58:	68746977          	0x68746977
    7b5c:	7220                	flw	fs0,96(a2)
    7b5e:	7365                	lui	t1,0xffff9
    7b60:	6c75                	lui	s8,0x1d
    7b62:	7374                	flw	fa3,100(a4)
    7b64:	6f20                	flw	fs0,88(a4)
    7b66:	206e                	fld	ft0,216(sp)
    7b68:	2061                	jal	7bf0 <__subdf3+0xc74>
    7b6a:	776f6e6b          	0x776f6e6b
    7b6e:	206e                	fld	ft0,216(sp)
    7b70:	6c70                	flw	fa2,92(s0)
    7b72:	7461                	lui	s0,0xffff8
    7b74:	6f66                	flw	ft10,88(sp)
    7b76:	6d72                	flw	fs10,28(sp)
    7b78:	0a2e                	slli	s4,s4,0xb
    7b7a:	0000                	unimp
    7b7c:	3035                	jal	73a8 <__subdf3+0x42c>
    7b7e:	3231                	jal	748a <__subdf3+0x50e>
    7b80:	0000                	unimp
    7b82:	0000                	unimp
    7b84:	3231                	jal	7490 <__subdf3+0x514>
    7b86:	00003433          	snez	s0,zero
    7b8a:	0000                	unimp
    7b8c:	382d                	jal	73c6 <__subdf3+0x44a>
    7b8e:	00003437          	lui	s0,0x3
    7b92:	0000                	unimp
    7b94:	3232312b          	0x3232312b
    7b98:	0000                	unimp
    7b9a:	0000                	unimp
    7b9c:	352e3533          	0x352e3533
    7ba0:	3434                	fld	fa3,104(s0)
    7ba2:	3030                	fld	fa2,96(s0)
    7ba4:	0000                	unimp
    7ba6:	0000                	unimp
    7ba8:	312e                	fld	ft2,232(sp)
    7baa:	3332                	fld	ft6,296(sp)
    7bac:	3534                	fld	fa3,104(a0)
    7bae:	3030                	fld	fa2,96(s0)
    7bb0:	0000                	unimp
    7bb2:	0000                	unimp
    7bb4:	312d                	jal	77de <__subdf3+0x862>
    7bb6:	3031                	jal	73c2 <__subdf3+0x446>
    7bb8:	372e                	fld	fa4,232(sp)
    7bba:	3030                	fld	fa2,96(s0)
    7bbc:	0000                	unimp
    7bbe:	0000                	unimp
    7bc0:	362e302b          	0x362e302b
    7bc4:	3434                	fld	fa3,104(s0)
    7bc6:	3030                	fld	fa2,96(s0)
    7bc8:	0000                	unimp
    7bca:	0000                	unimp
    7bcc:	2e35                	jal	7f08 <__clz_tab+0x5c>
    7bce:	3035                	jal	73fa <__subdf3+0x47e>
    7bd0:	6530                	flw	fa2,72(a0)
    7bd2:	0000332b          	0x332b
    7bd6:	0000                	unimp
    7bd8:	2e2d                	jal	7f12 <__clz_tab+0x66>
    7bda:	3231                	jal	74e6 <__subdf3+0x56a>
    7bdc:	322d6533          	0x322d6533
    7be0:	0000                	unimp
    7be2:	0000                	unimp
    7be4:	382d                	jal	741e <__subdf3+0x4a2>
    7be6:	382b6537          	lui	a0,0x382b6
    7bea:	00003233          	snez	tp,zero
    7bee:	0000                	unimp
    7bf0:	362e302b          	0x362e302b
    7bf4:	2d65                	jal	82ac <impure_data+0x25c>
    7bf6:	3231                	jal	7502 <__subdf3+0x586>
    7bf8:	0000                	unimp
    7bfa:	0000                	unimp
    7bfc:	3054                	fld	fa3,160(s0)
    7bfe:	332e                	fld	ft6,232(sp)
    7c00:	2d65                	jal	82b8 <impure_data+0x268>
    7c02:	4631                	li	a2,12
    7c04:	0000                	unimp
    7c06:	0000                	unimp
    7c08:	542d                	li	s0,-21
    7c0a:	542e                	lw	s0,232(sp)
    7c0c:	71542b2b          	0x71542b2b
    7c10:	0000                	unimp
    7c12:	0000                	unimp
    7c14:	5431                	li	s0,-20
    7c16:	65342e33          	0x65342e33
    7c1a:	7a34                	flw	fa3,112(a2)
    7c1c:	0000                	unimp
    7c1e:	0000                	unimp
    7c20:	302e3433          	0x302e3433
    7c24:	2d65                	jal	82dc <impure_data+0x28c>
    7c26:	5e54                	lw	a3,60(a2)
    7c28:	0000                	unimp
    7c2a:	0000                	unimp
    7c2c:	32e0                	fld	fs0,224(a3)
    7c2e:	0000                	unimp
    7c30:	359c                	fld	fa5,40(a1)
    7c32:	0000                	unimp
    7c34:	3370                	fld	fa2,224(a4)
    7c36:	0000                	unimp
    7c38:	34bc                	fld	fa5,104(s1)
    7c3a:	0000                	unimp
    7c3c:	33f0                	fld	fa2,224(a5)
    7c3e:	0000                	unimp
    7c40:	3450                	fld	fa2,168(s0)
    7c42:	0000                	unimp
    7c44:	3514                	fld	fa3,40(a0)
    7c46:	0000                	unimp
    7c48:	3568                	fld	fa0,232(a0)
    7c4a:	0000                	unimp
    7c4c:	3678                	fld	fa4,232(a2)
    7c4e:	0000                	unimp
    7c50:	3638                	fld	fa4,104(a2)
    7c52:	0000                	unimp
    7c54:	3644                	fld	fs1,168(a2)
    7c56:	0000                	unimp
    7c58:	3650                	fld	fa2,168(a2)
    7c5a:	0000                	unimp
    7c5c:	3660                	fld	fs0,232(a2)
    7c5e:	0000                	unimp
    7c60:	366c                	fld	fa1,232(a2)
    7c62:	0000                	unimp
    7c64:	5245                	li	tp,-15
    7c66:	4f52                	lw	t5,20(sp)
    7c68:	3a52                	fld	fs4,304(sp)
    7c6a:	5020                	lw	s0,96(s0)
    7c6c:	656c                	flw	fa1,76(a0)
    7c6e:	7361                	lui	t1,0xffff8
    7c70:	2065                	jal	7d18 <__subdf3+0xd9c>
    7c72:	6f6d                	lui	t5,0x1b
    7c74:	6964                	flw	fs1,84(a0)
    7c76:	7966                	flw	fs2,120(sp)
    7c78:	7420                	flw	fs0,104(s0)
    7c7a:	6568                	flw	fa0,76(a0)
    7c7c:	6420                	flw	fs0,72(s0)
    7c7e:	7461                	lui	s0,0xffff8
    7c80:	7461                	lui	s0,0xffff8
    7c82:	7079                	c.lui	zero,0xffffe
    7c84:	7365                	lui	t1,0xffff9
    7c86:	6920                	flw	fs0,80(a0)
    7c88:	206e                	fld	ft0,216(sp)
    7c8a:	65726f63          	bltu	tp,s7,82e8 <impure_data+0x298>
    7c8e:	705f 726f 6d74      	0x6d74726f705f
    7c94:	2e65                	jal	804c <errpat+0xc>
    7c96:	2168                	fld	fa0,192(a0)
    7c98:	000a                	c.slli	zero,0x2
	...
    7ca6:	4024                	lw	s1,64(s0)
    7ca8:	1eb8                	addi	a4,sp,888
    7caa:	eb85                	bnez	a5,7cda <__subdf3+0xd5e>
    7cac:	b851                	j	7540 <__subdf3+0x5c4>
    7cae:	3f9e                	fld	ft11,480(sp)
    7cb0:	0000                	unimp
    7cb2:	0000                	unimp
    7cb4:	0000                	unimp
    7cb6:	3ff0                	fld	fa2,248(a5)
    7cb8:	3130                	fld	fa2,96(a0)
    7cba:	3332                	fld	ft6,296(sp)
    7cbc:	3534                	fld	fa3,104(a0)
    7cbe:	3736                	fld	fa4,360(sp)
    7cc0:	3938                	fld	fa4,112(a0)
    7cc2:	6261                	lui	tp,0x18
    7cc4:	66656463          	bltu	a0,t1,832c <impure_data+0x2dc>
    7cc8:	6a696867          	0x6a696867
    7ccc:	6e6d6c6b          	0x6e6d6c6b
    7cd0:	7271706f          	j	1fbf6 <RAM_SIZE+0xfbf6>
    7cd4:	76757473          	csrrci	s0,0x767,10
    7cd8:	7a797877          	0x7a797877
    7cdc:	0000                	unimp
    7cde:	0000                	unimp
    7ce0:	3130                	fld	fa2,96(a0)
    7ce2:	3332                	fld	ft6,296(sp)
    7ce4:	3534                	fld	fa3,104(a0)
    7ce6:	3736                	fld	fa4,360(sp)
    7ce8:	3938                	fld	fa4,112(a0)
    7cea:	4241                	li	tp,16
    7cec:	46454443          	fmadd.q	fs0,fa0,ft4,fs0,rmm
    7cf0:	4a494847          	fmsub.d	fa6,fs2,ft4,fs1,rmm
    7cf4:	4e4d4c4b          	fnmsub.q	fs8,fs10,ft4,fs1,rmm
    7cf8:	5251504f          	fnmadd.d	ft0,ft2,ft5,fa0,unknown
    7cfc:	56555453          	0x56555453
    7d00:	5a595857          	0x5a595857
    7d04:	0000                	unimp
    7d06:	0000                	unimp
    7d08:	4e3c                	lw	a5,88(a2)
    7d0a:	4c55                	li	s8,21
    7d0c:	3e4c                	fld	fa1,184(a2)
    7d0e:	0000                	unimp
    7d10:	48f4                	lw	a3,84(s1)
    7d12:	0000                	unimp
    7d14:	4924                	lw	s1,80(a0)
    7d16:	0000                	unimp
    7d18:	4924                	lw	s1,80(a0)
    7d1a:	0000                	unimp
    7d1c:	4904                	lw	s1,16(a0)
    7d1e:	0000                	unimp
    7d20:	4924                	lw	s1,80(a0)
    7d22:	0000                	unimp
    7d24:	4924                	lw	s1,80(a0)
    7d26:	0000                	unimp
    7d28:	4924                	lw	s1,80(a0)
    7d2a:	0000                	unimp
    7d2c:	4924                	lw	s1,80(a0)
    7d2e:	0000                	unimp
    7d30:	4924                	lw	s1,80(a0)
    7d32:	0000                	unimp
    7d34:	4924                	lw	s1,80(a0)
    7d36:	0000                	unimp
    7d38:	4924                	lw	s1,80(a0)
    7d3a:	0000                	unimp
    7d3c:	48e4                	lw	s1,84(s1)
    7d3e:	0000                	unimp
    7d40:	4924                	lw	s1,80(a0)
    7d42:	0000                	unimp
    7d44:	48d4                	lw	a3,20(s1)
    7d46:	0000                	unimp
    7d48:	4924                	lw	s1,80(a0)
    7d4a:	0000                	unimp
    7d4c:	4924                	lw	s1,80(a0)
    7d4e:	0000                	unimp
    7d50:	4914                	lw	a3,16(a0)
    7d52:	0000                	unimp
    7d54:	4c80                	lw	s0,24(s1)
    7d56:	0000                	unimp
    7d58:	4d2c                	lw	a1,88(a0)
    7d5a:	0000                	unimp
    7d5c:	4d2c                	lw	a1,88(a0)
    7d5e:	0000                	unimp
    7d60:	4d2c                	lw	a1,88(a0)
    7d62:	0000                	unimp
    7d64:	4d2c                	lw	a1,88(a0)
    7d66:	0000                	unimp
    7d68:	4d2c                	lw	a1,88(a0)
    7d6a:	0000                	unimp
    7d6c:	4d2c                	lw	a1,88(a0)
    7d6e:	0000                	unimp
    7d70:	4d2c                	lw	a1,88(a0)
    7d72:	0000                	unimp
    7d74:	4d2c                	lw	a1,88(a0)
    7d76:	0000                	unimp
    7d78:	4d2c                	lw	a1,88(a0)
    7d7a:	0000                	unimp
    7d7c:	4d2c                	lw	a1,88(a0)
    7d7e:	0000                	unimp
    7d80:	4d2c                	lw	a1,88(a0)
    7d82:	0000                	unimp
    7d84:	4d2c                	lw	a1,88(a0)
    7d86:	0000                	unimp
    7d88:	4d2c                	lw	a1,88(a0)
    7d8a:	0000                	unimp
    7d8c:	4d2c                	lw	a1,88(a0)
    7d8e:	0000                	unimp
    7d90:	4d2c                	lw	a1,88(a0)
    7d92:	0000                	unimp
    7d94:	4d2c                	lw	a1,88(a0)
    7d96:	0000                	unimp
    7d98:	4d2c                	lw	a1,88(a0)
    7d9a:	0000                	unimp
    7d9c:	4d2c                	lw	a1,88(a0)
    7d9e:	0000                	unimp
    7da0:	4d2c                	lw	a1,88(a0)
    7da2:	0000                	unimp
    7da4:	4d2c                	lw	a1,88(a0)
    7da6:	0000                	unimp
    7da8:	4d2c                	lw	a1,88(a0)
    7daa:	0000                	unimp
    7dac:	4d2c                	lw	a1,88(a0)
    7dae:	0000                	unimp
    7db0:	4d04                	lw	s1,24(a0)
    7db2:	0000                	unimp
    7db4:	4d2c                	lw	a1,88(a0)
    7db6:	0000                	unimp
    7db8:	4d2c                	lw	a1,88(a0)
    7dba:	0000                	unimp
    7dbc:	4d2c                	lw	a1,88(a0)
    7dbe:	0000                	unimp
    7dc0:	4d2c                	lw	a1,88(a0)
    7dc2:	0000                	unimp
    7dc4:	4d2c                	lw	a1,88(a0)
    7dc6:	0000                	unimp
    7dc8:	4d2c                	lw	a1,88(a0)
    7dca:	0000                	unimp
    7dcc:	4d2c                	lw	a1,88(a0)
    7dce:	0000                	unimp
    7dd0:	4d2c                	lw	a1,88(a0)
    7dd2:	0000                	unimp
    7dd4:	4c8c                	lw	a1,24(s1)
    7dd6:	0000                	unimp
    7dd8:	4d2c                	lw	a1,88(a0)
    7dda:	0000                	unimp
    7ddc:	4ab8                	lw	a4,80(a3)
    7dde:	0000                	unimp
    7de0:	4d1c                	lw	a5,24(a0)
    7de2:	0000                	unimp
    7de4:	4d2c                	lw	a1,88(a0)
    7de6:	0000                	unimp
    7de8:	4d2c                	lw	a1,88(a0)
    7dea:	0000                	unimp
    7dec:	4d2c                	lw	a1,88(a0)
    7dee:	0000                	unimp
    7df0:	4d2c                	lw	a1,88(a0)
    7df2:	0000                	unimp
    7df4:	4d1c                	lw	a5,24(a0)
    7df6:	0000                	unimp
    7df8:	4d2c                	lw	a1,88(a0)
    7dfa:	0000                	unimp
    7dfc:	4d2c                	lw	a1,88(a0)
    7dfe:	0000                	unimp
    7e00:	4d2c                	lw	a1,88(a0)
    7e02:	0000                	unimp
    7e04:	4d2c                	lw	a1,88(a0)
    7e06:	0000                	unimp
    7e08:	4d2c                	lw	a1,88(a0)
    7e0a:	0000                	unimp
    7e0c:	4cf8                	lw	a4,92(s1)
    7e0e:	0000                	unimp
    7e10:	4c2c                	lw	a1,88(s0)
    7e12:	0000                	unimp
    7e14:	4d2c                	lw	a1,88(a0)
    7e16:	0000                	unimp
    7e18:	4d2c                	lw	a1,88(a0)
    7e1a:	0000                	unimp
    7e1c:	4b44                	lw	s1,20(a4)
    7e1e:	0000                	unimp
    7e20:	4d2c                	lw	a1,88(a0)
    7e22:	0000                	unimp
    7e24:	4d88                	lw	a0,24(a1)
    7e26:	0000                	unimp
    7e28:	4d2c                	lw	a1,88(a0)
    7e2a:	0000                	unimp
    7e2c:	4d2c                	lw	a1,88(a0)
    7e2e:	0000                	unimp
    7e30:	4d10                	lw	a2,24(a0)
    7e32:	0000                	unimp
    7e34:	dfa8                	sw	a0,120(a5)
    7e36:	ffff                	0xffff
    7e38:	e09c                	fsw	fa5,0(s1)
    7e3a:	ffff                	0xffff
    7e3c:	dfb8                	sw	a4,120(a5)
    7e3e:	ffff                	0xffff
    7e40:	e09c                	fsw	fa5,0(s1)
    7e42:	ffff                	0xffff
    7e44:	e088                	fsw	fa0,0(s1)
    7e46:	ffff                	0xffff
    7e48:	e09c                	fsw	fa5,0(s1)
    7e4a:	ffff                	0xffff
    7e4c:	dfb8                	sw	a4,120(a5)
    7e4e:	ffff                	0xffff
    7e50:	dfa8                	sw	a0,120(a5)
    7e52:	ffff                	0xffff
    7e54:	dfa8                	sw	a0,120(a5)
    7e56:	ffff                	0xffff
    7e58:	e088                	fsw	fa0,0(s1)
    7e5a:	ffff                	0xffff
    7e5c:	dfb8                	sw	a4,120(a5)
    7e5e:	ffff                	0xffff
    7e60:	df80                	sw	s0,56(a5)
    7e62:	ffff                	0xffff
    7e64:	df80                	sw	s0,56(a5)
    7e66:	ffff                	0xffff
    7e68:	df80                	sw	s0,56(a5)
    7e6a:	ffff                	0xffff
    7e6c:	dfc0                	sw	s0,60(a5)
    7e6e:	ffff                	0xffff
    7e70:	e84c                	fsw	fa1,20(s0)
    7e72:	ffff                	0xffff
    7e74:	e84c                	fsw	fa1,20(s0)
    7e76:	ffff                	0xffff
    7e78:	e870                	fsw	fa2,84(s0)
    7e7a:	ffff                	0xffff
    7e7c:	e840                	fsw	fs0,20(s0)
    7e7e:	ffff                	0xffff
    7e80:	e840                	fsw	fs0,20(s0)
    7e82:	ffff                	0xffff
    7e84:	e934                	fsw	fa3,80(a0)
    7e86:	ffff                	0xffff
    7e88:	e870                	fsw	fa2,84(s0)
    7e8a:	ffff                	0xffff
    7e8c:	e840                	fsw	fs0,20(s0)
    7e8e:	ffff                	0xffff
    7e90:	e934                	fsw	fa3,80(a0)
    7e92:	ffff                	0xffff
    7e94:	e840                	fsw	fs0,20(s0)
    7e96:	ffff                	0xffff
    7e98:	e870                	fsw	fa2,84(s0)
    7e9a:	ffff                	0xffff
    7e9c:	e83c                	fsw	fa5,80(s0)
    7e9e:	ffff                	0xffff
    7ea0:	e83c                	fsw	fa5,80(s0)
    7ea2:	ffff                	0xffff
    7ea4:	e83c                	fsw	fa5,80(s0)
    7ea6:	ffff                	0xffff
    7ea8:	e934                	fsw	fa3,80(a0)
    7eaa:	ffff                	0xffff

00007eac <__clz_tab>:
    7eac:	0100                	addi	s0,sp,128
    7eae:	0202                	c.slli64	tp
    7eb0:	03030303          	lb	t1,48(t1) # ffff9030 <RAM_SIZE+0xfffe9030>
    7eb4:	0404                	addi	s1,sp,512
    7eb6:	0404                	addi	s1,sp,512
    7eb8:	0404                	addi	s1,sp,512
    7eba:	0404                	addi	s1,sp,512
    7ebc:	0505                	addi	a0,a0,1
    7ebe:	0505                	addi	a0,a0,1
    7ec0:	0505                	addi	a0,a0,1
    7ec2:	0505                	addi	a0,a0,1
    7ec4:	0505                	addi	a0,a0,1
    7ec6:	0505                	addi	a0,a0,1
    7ec8:	0505                	addi	a0,a0,1
    7eca:	0505                	addi	a0,a0,1
    7ecc:	0606                	slli	a2,a2,0x1
    7ece:	0606                	slli	a2,a2,0x1
    7ed0:	0606                	slli	a2,a2,0x1
    7ed2:	0606                	slli	a2,a2,0x1
    7ed4:	0606                	slli	a2,a2,0x1
    7ed6:	0606                	slli	a2,a2,0x1
    7ed8:	0606                	slli	a2,a2,0x1
    7eda:	0606                	slli	a2,a2,0x1
    7edc:	0606                	slli	a2,a2,0x1
    7ede:	0606                	slli	a2,a2,0x1
    7ee0:	0606                	slli	a2,a2,0x1
    7ee2:	0606                	slli	a2,a2,0x1
    7ee4:	0606                	slli	a2,a2,0x1
    7ee6:	0606                	slli	a2,a2,0x1
    7ee8:	0606                	slli	a2,a2,0x1
    7eea:	0606                	slli	a2,a2,0x1
    7eec:	07070707          	vluxei8.v	v14,(a4),v16
    7ef0:	07070707          	vluxei8.v	v14,(a4),v16
    7ef4:	07070707          	vluxei8.v	v14,(a4),v16
    7ef8:	07070707          	vluxei8.v	v14,(a4),v16
    7efc:	07070707          	vluxei8.v	v14,(a4),v16
    7f00:	07070707          	vluxei8.v	v14,(a4),v16
    7f04:	07070707          	vluxei8.v	v14,(a4),v16
    7f08:	07070707          	vluxei8.v	v14,(a4),v16
    7f0c:	07070707          	vluxei8.v	v14,(a4),v16
    7f10:	07070707          	vluxei8.v	v14,(a4),v16
    7f14:	07070707          	vluxei8.v	v14,(a4),v16
    7f18:	07070707          	vluxei8.v	v14,(a4),v16
    7f1c:	07070707          	vluxei8.v	v14,(a4),v16
    7f20:	07070707          	vluxei8.v	v14,(a4),v16
    7f24:	07070707          	vluxei8.v	v14,(a4),v16
    7f28:	07070707          	vluxei8.v	v14,(a4),v16
    7f2c:	0808                	addi	a0,sp,16
    7f2e:	0808                	addi	a0,sp,16
    7f30:	0808                	addi	a0,sp,16
    7f32:	0808                	addi	a0,sp,16
    7f34:	0808                	addi	a0,sp,16
    7f36:	0808                	addi	a0,sp,16
    7f38:	0808                	addi	a0,sp,16
    7f3a:	0808                	addi	a0,sp,16
    7f3c:	0808                	addi	a0,sp,16
    7f3e:	0808                	addi	a0,sp,16
    7f40:	0808                	addi	a0,sp,16
    7f42:	0808                	addi	a0,sp,16
    7f44:	0808                	addi	a0,sp,16
    7f46:	0808                	addi	a0,sp,16
    7f48:	0808                	addi	a0,sp,16
    7f4a:	0808                	addi	a0,sp,16
    7f4c:	0808                	addi	a0,sp,16
    7f4e:	0808                	addi	a0,sp,16
    7f50:	0808                	addi	a0,sp,16
    7f52:	0808                	addi	a0,sp,16
    7f54:	0808                	addi	a0,sp,16
    7f56:	0808                	addi	a0,sp,16
    7f58:	0808                	addi	a0,sp,16
    7f5a:	0808                	addi	a0,sp,16
    7f5c:	0808                	addi	a0,sp,16
    7f5e:	0808                	addi	a0,sp,16
    7f60:	0808                	addi	a0,sp,16
    7f62:	0808                	addi	a0,sp,16
    7f64:	0808                	addi	a0,sp,16
    7f66:	0808                	addi	a0,sp,16
    7f68:	0808                	addi	a0,sp,16
    7f6a:	0808                	addi	a0,sp,16
    7f6c:	0808                	addi	a0,sp,16
    7f6e:	0808                	addi	a0,sp,16
    7f70:	0808                	addi	a0,sp,16
    7f72:	0808                	addi	a0,sp,16
    7f74:	0808                	addi	a0,sp,16
    7f76:	0808                	addi	a0,sp,16
    7f78:	0808                	addi	a0,sp,16
    7f7a:	0808                	addi	a0,sp,16
    7f7c:	0808                	addi	a0,sp,16
    7f7e:	0808                	addi	a0,sp,16
    7f80:	0808                	addi	a0,sp,16
    7f82:	0808                	addi	a0,sp,16
    7f84:	0808                	addi	a0,sp,16
    7f86:	0808                	addi	a0,sp,16
    7f88:	0808                	addi	a0,sp,16
    7f8a:	0808                	addi	a0,sp,16
    7f8c:	0808                	addi	a0,sp,16
    7f8e:	0808                	addi	a0,sp,16
    7f90:	0808                	addi	a0,sp,16
    7f92:	0808                	addi	a0,sp,16
    7f94:	0808                	addi	a0,sp,16
    7f96:	0808                	addi	a0,sp,16
    7f98:	0808                	addi	a0,sp,16
    7f9a:	0808                	addi	a0,sp,16
    7f9c:	0808                	addi	a0,sp,16
    7f9e:	0808                	addi	a0,sp,16
    7fa0:	0808                	addi	a0,sp,16
    7fa2:	0808                	addi	a0,sp,16
    7fa4:	0808                	addi	a0,sp,16
    7fa6:	0808                	addi	a0,sp,16
    7fa8:	0808                	addi	a0,sp,16
    7faa:	0808                	addi	a0,sp,16

00007fac <__EH_FRAME_BEGIN__>:
    7fac:	0000                	unimp
	...

00007fb0 <__init_array_start>:
    7fb0:	6dac                	flw	fa1,88(a1)
	...

00007fb4 <__frame_dummy_init_array_entry>:
    7fb4:	00a4                	addi	s1,sp,72
	...

00007fb8 <__do_global_dtors_aux_fini_array_entry>:
    7fb8:	005c                	addi	a5,sp,4
	...

00007fbc <__fini_array_end>:
    7fbc:	0000                	unimp
	...

Disassembly of section .sdata:

00007fc0 <_global_impure_ptr>:
    7fc0:	8050                	0x8050
	...

00007fc4 <__dso_handle>:
    7fc4:	0000                	unimp
	...

00007fc8 <seed3_volatile>:
volatile ee_s32 seed3_volatile = 0x66;
    7fc8:	0066                	c.slli	zero,0x19
	...

00007fcc <default_num_contexts>:
ee_u32 default_num_contexts = 1;
    7fcc:	0001                	nop
	...

00007fd0 <digits>:
static char *    digits       = "0123456789abcdefghijklmnopqrstuvwxyz";
    7fd0:	7cb8                	flw	fa4,120(s1)
	...

00007fd4 <upper_digits>:
static char *    upper_digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    7fd4:	7ce0                	flw	fs0,124(s1)
	...

00007fd8 <_impure_ptr>:
    7fd8:	8050                	0x8050
    7fda:	0000                	unimp
    7fdc:	0000                	unimp
	...

Disassembly of section .data:

00007fe0 <list_known_crc>:
    7fe0:	d4b0                	sw	a2,104(s1)
    7fe2:	3340                	fld	fs0,160(a4)
    7fe4:	6a79                	lui	s4,0x1e
    7fe6:	e714                	fsw	fa3,8(a4)
    7fe8:	e3c1                	bnez	a5,8068 <impure_data+0x18>
	...

00007fec <matrix_known_crc>:
static ee_u16 matrix_known_crc[] = { (ee_u16)0xbe52,
    7fec:	be52                	fsd	fs4,312(sp)
    7fee:	1199                	addi	gp,gp,-26
    7ff0:	5608                	lw	a0,40(a2)
    7ff2:	07471fd7          	vfredsum.vs	v31,v20,v14
	...

00007ff8 <state_known_crc>:
static ee_u16 state_known_crc[]  = { (ee_u16)0x5e47,
    7ff8:	39bf5e47          	fmsub.s	ft8,ft10,fs11,ft7,unknown
    7ffc:	e5a4                	fsw	fs1,72(a1)
    7ffe:	8e3a                	mv	t3,a4
    8000:	8d84                	0x8d84
	...

00008004 <mem_name>:
char *mem_name[3] = { "Static", "Heap", "Stack" };
    8004:	7770                	flw	fa2,108(a4)
    8006:	0000                	unimp
    8008:	7778                	flw	fa4,108(a4)
    800a:	0000                	unimp
    800c:	7780                	flw	fs0,40(a5)
	...

00008010 <intpat>:
static ee_u8 *intpat[4]
    8010:	7b7c                	flw	fa5,116(a4)
    8012:	0000                	unimp
    8014:	7b84                	flw	fs1,48(a5)
    8016:	0000                	unimp
    8018:	7b8c                	flw	fa1,48(a5)
    801a:	0000                	unimp
    801c:	7b94                	flw	fa3,48(a5)
	...

00008020 <floatpat>:
static ee_u8 *floatpat[4] = { (ee_u8 *)"35.54400",
    8020:	7b9c                	flw	fa5,48(a5)
    8022:	0000                	unimp
    8024:	7ba8                	flw	fa0,112(a5)
    8026:	0000                	unimp
    8028:	7bb4                	flw	fa3,112(a5)
    802a:	0000                	unimp
    802c:	7bc0                	flw	fs0,52(a5)
	...

00008030 <scipat>:
static ee_u8 *scipat[4]   = { (ee_u8 *)"5.500e+3",
    8030:	7bcc                	flw	fa1,52(a5)
    8032:	0000                	unimp
    8034:	7bd8                	flw	fa4,52(a5)
    8036:	0000                	unimp
    8038:	7be4                	flw	fs1,116(a5)
    803a:	0000                	unimp
    803c:	7bf0                	flw	fa2,116(a5)
	...

00008040 <errpat>:
static ee_u8 *errpat[4]   = { (ee_u8 *)"T0.3e-1F",
    8040:	7bfc                	flw	fa5,116(a5)
    8042:	0000                	unimp
    8044:	7c08                	flw	fa0,56(s0)
    8046:	0000                	unimp
    8048:	7c14                	flw	fa3,56(s0)
    804a:	0000                	unimp
    804c:	7c20                	flw	fs0,120(s0)
	...

00008050 <impure_data>:
    8050:	0000                	unimp
    8052:	0000                	unimp
    8054:	833c                	0x833c
    8056:	0000                	unimp
    8058:	83a4                	0x83a4
    805a:	0000                	unimp
    805c:	840c                	0x840c
	...
    80f6:	0000                	unimp
    80f8:	0001                	nop
    80fa:	0000                	unimp
    80fc:	0000                	unimp
    80fe:	0000                	unimp
    8100:	330e                	fld	ft6,224(sp)
    8102:	abcd                	j	86f4 <__bss_end+0x1e4>
    8104:	1234                	addi	a3,sp,296
    8106:	e66d                	bnez	a2,81f0 <impure_data+0x1a0>
    8108:	deec                	sw	a1,124(a3)
    810a:	0005                	c.nop	1
    810c:	0000000b          	0xb
	...

Disassembly of section .sbss:

00008480 <seed1_volatile>:
volatile ee_s32 seed1_volatile = 0x0;
    8480:	0000                	unimp
	...

00008484 <seed2_volatile>:
volatile ee_s32 seed2_volatile = 0x0;
    8484:	0000                	unimp
	...

00008488 <seed4_volatile>:
volatile ee_s32 seed4_volatile = ITERATIONS;
    8488:	0000                	unimp
	...

0000848c <seed5_volatile>:
volatile ee_s32 seed5_volatile = 0;
    848c:	0000                	unimp
	...

Disassembly of section .bss:

00008490 <completed.1>:
    8490:	0000                	unimp
	...

00008494 <object.0>:
	...

000084ac <start_time_val>:
static CORETIMETYPE start_time_val, stop_time_val;
    84ac:	0000                	unimp
	...

000084b0 <stop_time_val>:
    84b0:	0000                	unimp
	...

000084b4 <CVTBUF>:
	...

Disassembly of section .heap:

00008510 <__heap_start>:
	...

Disassembly of section .stack:

00008d10 <__stack_bottom>:
	...

Disassembly of section .riscv.attributes:

00000000 <.riscv.attributes>:
lui     sp,%hi(__stack_top)                                             
   0:	1b41                	addi	s6,s6,-16
   2:	0000                	unimp
addi    sp,sp,%lo(__stack_top)
   4:	7200                	flw	fs0,32(a2)
   6:	7369                	lui	t1,0xffffa
jal   zero, _start
   8:	01007663          	bgeu	zero,a6,14 <_start+0x4>
   c:	0011                	c.nop	4
   e:	0000                	unimp
  10:	1004                	addi	s1,sp,32
  12:	7205                	lui	tp,0xfffe1
  14:	3376                	fld	ft6,376(sp)
  16:	6932                	flw	fs2,12(sp)
  18:	7032                	flw	ft0,44(sp)
  1a:	0030                	addi	a2,sp,8

Disassembly of section .comment:

00000000 <.comment>:
lui     sp,%hi(__stack_top)                                             
   0:	3a434347          	fmsub.d	ft6,ft6,ft4,ft7,rmm
addi    sp,sp,%lo(__stack_top)
   4:	2820                	fld	fs0,80(s0)
   6:	69466953          	0x69466953
jal   zero, _start
   a:	6576                	flw	fa0,92(sp)
   c:	4720                	lw	s0,72(a4)
   e:	4d2d4343          	fmadd.h	ft6,fs10,fs2,fs1,rmm
  12:	7465                	lui	s0,0xffff9
  14:	6c61                	lui	s8,0x18
  16:	3120                	fld	fs0,96(a0)
  18:	2e30                	fld	fa2,88(a2)
  1a:	2e32                	fld	ft8,264(sp)
  1c:	2d30                	fld	fa2,88(a0)
  1e:	3032                	fld	ft0,296(sp)
  20:	3032                	fld	ft0,296(sp)
  22:	312e                	fld	ft2,232(sp)
  24:	2e32                	fld	ft8,264(sp)
  26:	2938                	fld	fa4,80(a0)
  28:	3120                	fld	fs0,96(a0)
  2a:	2e30                	fld	fa2,88(a2)
  2c:	2e32                	fld	ft8,264(sp)
  2e:	0030                	addi	a2,sp,8

Disassembly of section .debug_line:

00000000 <.debug_line>:
lui     sp,%hi(__stack_top)                                             
       0:	005d                	c.nop	23
       2:	0000                	unimp
addi    sp,sp,%lo(__stack_top)
       4:	003d0003          	lb	zero,3(s10) # 18003 <RAM_SIZE+0x8003>
jal   zero, _start
       8:	0000                	unimp
       a:	0101                	addi	sp,sp,0
       c:	000d0efb          	0xd0efb
      10:	0101                	addi	sp,sp,0
      12:	0101                	addi	sp,sp,0
      14:	0000                	unimp
      16:	0100                	addi	s0,sp,128
      18:	0000                	unimp
      1a:	2f01                	jal	72a <core_bench_list+0x2de>
      1c:	72616873          	csrrsi	a6,0x726,2
      20:	6465                	lui	s0,0x19
      22:	7369722f          	0x7369722f
      26:	652d7663          	bgeu	s10,s2,672 <core_bench_list+0x226>
      2a:	6178                	flw	fa4,68(a0)
      2c:	706d                	c.lui	zero,0xffffb
      2e:	656c                	flw	fa1,76(a0)
      30:	726f632f          	0x726f632f
      34:	6d65                	lui	s10,0x19
      36:	7261                	lui	tp,0xffff8
      38:	6500006b          	0x6500006b
      3c:	746e                	flw	fs0,248(sp)
      3e:	7972                	flw	fs2,60(sp)
      40:	532e                	lw	t1,232(sp)
      42:	0100                	addi	s0,sp,128
      44:	0000                	unimp
      46:	0000                	unimp
      48:	0205                	addi	tp,tp,1
      4a:	0000                	unimp
      4c:	0000                	unimp
      4e:	0319                	addi	t1,t1,6
      50:	0901                	addi	s2,s2,0
      52:	0004                	0x4
      54:	0301                	addi	t1,t1,0
      56:	0901                	addi	s2,s2,0
      58:	0004                	0x4
      5a:	0901                	addi	s2,s2,0
      5c:	0004                	0x4
      5e:	0100                	addi	s0,sp,128
      60:	a801                	j	70 <__do_global_dtors_aux+0x14>
      62:	000a                	c.slli	zero,0x2
      64:	0300                	addi	s0,sp,384
      66:	6500                	flw	fs0,8(a0)
      68:	0000                	unimp
      6a:	0100                	addi	s0,sp,128
      6c:	fb01                	bnez	a4,ffffff7c <RAM_SIZE+0xfffeff7c>
      6e:	0d0e                	slli	s10,s10,0x3
      70:	0100                	addi	s0,sp,128
      72:	0101                	addi	sp,sp,0
      74:	0001                	nop
      76:	0000                	unimp
      78:	0001                	nop
      7a:	0100                	addi	s0,sp,128
      7c:	6168732f          	vamoandei64.v	zero,(a6),v22,v6,v0.t
      80:	6572                	flw	fa0,28(sp)
      82:	2f64                	fld	fs1,216(a4)
      84:	6972                	flw	fs2,28(sp)
      86:	2d766373          	csrrsi	t1,0x2d7,12
      8a:	7865                	lui	a6,0xffff9
      8c:	6d61                	lui	s10,0x18
      8e:	6c70                	flw	fa2,92(s0)
      90:	2f65                	jal	848 <HEAP_SIZE+0x48>
      92:	65726f63          	bltu	tp,s7,6f0 <core_bench_list+0x2a4>
      96:	616d                	addi	sp,sp,240
      98:	6b72                	flw	fs6,28(sp)
      9a:	0000                	unimp
      9c:	65726f63          	bltu	tp,s7,6fa <core_bench_list+0x2ae>
      a0:	6c5f 7369 5f74      	0x5f7473696c5f
      a6:	6f6a                	flw	ft10,152(sp)
      a8:	6e69                	lui	t3,0x1a
      aa:	632e                	flw	ft6,200(sp)
      ac:	0100                	addi	s0,sp,128
      ae:	0000                	unimp
      b0:	65726f63          	bltu	tp,s7,70e <core_bench_list+0x2c2>
      b4:	705f 726f 6d74      	0x6d74726f705f
      ba:	2e65                	jal	472 <core_bench_list+0x26>
      bc:	0068                	addi	a0,sp,12
      be:	0001                	nop
      c0:	6300                	flw	fs0,0(a4)
      c2:	6d65726f          	jal	tp,57798 <RAM_SIZE+0x47798>
{
      c6:	7261                	lui	tp,0xffff8
      c8:	00682e6b          	0x682e6b
      cc:	0001                	nop
      ce:	0000                	unimp
      d0:	0105                	addi	sp,sp,1
      d2:	0500                	addi	s0,sp,640
      d4:	c402                	sw	zero,8(sp)
      d6:	0000                	unimp
      d8:	0300                	addi	s0,sp,384
      da:	00c6                	slli	ra,ra,0x11
    ee_s16 data = *pdata;
      dc:	0501                	addi	a0,a0,0
      de:	030c                	addi	a1,sp,384
      e0:	0901                	addi	s2,s2,0
      e2:	0018                	0x18
      e4:	0501                	addi	a0,a0,0
      e6:	0904030b          	0x904030b
          & 1;  /* bit 7 indicates if the function result has been cached */
      ea:	000c                	0xc
      ec:	0501                	addi	a0,a0,0
      ee:	030c                	addi	a1,sp,384
      f0:	097e                	slli	s2,s2,0x1f
      f2:	0014                	0x14
      f4:	0501                	addi	a0,a0,0
      f6:	0308                	addi	a0,sp,384
      f8:	00080903          	lb	s2,0(a6) # ffff9000 <RAM_SIZE+0xfffe9000>
    ee_u8  optype
      fc:	0501                	addi	a0,a0,0
      fe:	0316                	slli	t1,t1,0x5
     100:	0901                	addi	s2,s2,0
     102:	0008                	0x8
    if (optype) /* if cached, use cache */
     104:	0501                	addi	a0,a0,0
     106:	0310                	addi	a2,sp,384
     108:	00140903          	lb	s2,1(s0) # 19001 <RAM_SIZE+0x9001>
        return (data & 0x007f);
     10c:	0301                	addi	t1,t1,0
     10e:	000c0903          	lb	s2,0(s8) # 18000 <RAM_SIZE+0x8000>
     112:	0301                	addi	t1,t1,0
     114:	097e                	slli	s2,s2,0x1f
     116:	0010                	0x10
     118:	0501                	addi	a0,a0,0
     11a:	0318                	addi	a4,sp,384
     11c:	00080903          	lb	s2,0(a6)
        ee_s16 flag = data & 0x7; /* bits 0-2 is type of function to perform */
     120:	0501                	addi	a0,a0,0
     122:	0900030f          	0x900030f
     126:	0008                	0x8
     128:	0501                	addi	a0,a0,0
     12a:	0309                	addi	t1,t1,2
               & 0xf);       /* bits 3-6 is specific data for the operation */
     12c:	0901                	addi	s2,s2,0
     12e:	0014                	0x14
     130:	0501                	addi	a0,a0,0
     132:	0314                	addi	a3,sp,384
     134:	00140903          	lb	s2,1(s0)
     138:	0501                	addi	a0,a0,0
     13a:	0901031b          	0x901031b
        ee_s16 dtype
     13e:	000c                	0xc
     140:	0501                	addi	a0,a0,0
     142:	031a                	slli	t1,t1,0x6
        dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
     144:	0901                	addi	s2,s2,0
     146:	0008                	0x8
     148:	0501                	addi	a0,a0,0
     14a:	0338                	addi	a4,sp,392
     14c:	0901                	addi	s2,s2,0
     14e:	0008                	0x8
     150:	0501                	addi	a0,a0,0
     152:	031a                	slli	t1,t1,0x6
     154:	097f                	0x97f
     156:	0008                	0x8
     158:	0501                	addi	a0,a0,0
     15a:	0318                	addi	a4,sp,384
     15c:	0900                	addi	s0,sp,144
     15e:	0024                	addi	s1,sp,8
        switch (flag)
     160:	0301                	addi	t1,t1,0
     162:	0906                	slli	s2,s2,0x1
     164:	0004                	0x4
     166:	0501                	addi	a0,a0,0
     168:	0314                	addi	a3,sp,384
     16a:	0900                	addi	s0,sp,144
     16c:	0008                	0x8
     16e:	0501                	addi	a0,a0,0
     170:	09010323          	sb	a6,134(sp)
                if (dtype < 0x22) /* set min period for bit corruption */
     174:	0004                	0x4
     176:	0501                	addi	a0,a0,0
     178:	0311                	addi	t1,t1,4
     17a:	0901                	addi	s2,s2,0
     17c:	000c                	0xc
     17e:	0501                	addi	a0,a0,0
                    dtype = 0x22;
     180:	031a                	slli	t1,t1,0x6
     182:	0902                	c.slli64	s2
     184:	0004                	0x4
     186:	0501                	addi	a0,a0,0
                retval = core_bench_state(res->size,
     188:	0318                	addi	a4,sp,384
     18a:	0900                	addi	s0,sp,144
     18c:	0028                	addi	a0,sp,8
     18e:	0301                	addi	t1,t1,0
                                          res->memblock[3],
     190:	0901                	addi	s2,s2,0
     192:	0004                	0x4
     194:	0501                	addi	a0,a0,0
     196:	0314                	addi	a3,sp,384
                retval = core_bench_state(res->size,
     198:	0900                	addi	s0,sp,144
     19a:	0008                	0x8
     19c:	0501                	addi	a0,a0,0
     19e:	0324                	addi	s1,sp,392
     1a0:	0901                	addi	s2,s2,0
     1a2:	0004                	0x4
     1a4:	0501                	addi	a0,a0,0
     1a6:	0311                	addi	t1,t1,4
     1a8:	0901                	addi	s2,s2,0
     1aa:	000c                	0xc
     1ac:	0501                	addi	a0,a0,0
     1ae:	0318                	addi	a4,sp,384
     1b0:	0902                	c.slli64	s2
     1b2:	0004                	0x4
     1b4:	0501                	addi	a0,a0,0
     1b6:	0311                	addi	t1,t1,4
     1b8:	0901                	addi	s2,s2,0
     1ba:	0008                	0x8
     1bc:	0301                	addi	t1,t1,0
     1be:	0978                	addi	a4,sp,156
                if (res->crcstate == 0)
     1c0:	0004                	0x4
     1c2:	0301                	addi	t1,t1,0
     1c4:	0905                	addi	s2,s2,1
     1c6:	0008                	0x8
     1c8:	0501                	addi	a0,a0,0
     1ca:	0314                	addi	a3,sp,384
                    res->crcstate = retval;
     1cc:	0905                	addi	s2,s2,1
     1ce:	0004                	0x4
     1d0:	0501                	addi	a0,a0,0
     1d2:	0312                	slli	t1,t1,0x4
     1d4:	0900                	addi	s0,sp,144
     1d6:	0020                	addi	s0,sp,8
                break;
     1d8:	0501                	addi	a0,a0,0
     1da:	0310                	addi	a2,sp,384
                retval = core_bench_matrix(&(res->mat), dtype, res->crc);
     1dc:	0901                	addi	s2,s2,0
     1de:	0008                	0x8
     1e0:	0501                	addi	a0,a0,0
     1e2:	0318                	addi	a4,sp,384
     1e4:	0901                	addi	s2,s2,0
     1e6:	000c                	0xc
     1e8:	0501                	addi	a0,a0,0
     1ea:	0322                	slli	t1,t1,0x8
     1ec:	0900                	addi	s0,sp,144
     1ee:	0010                	0x10
     1f0:	0501                	addi	a0,a0,0
     1f2:	0900032b          	0x900032b
     1f6:	000c                	0xc
     1f8:	0501                	addi	a0,a0,0
     1fa:	0310                	addi	a2,sp,384
     1fc:	0900                	addi	s0,sp,144
     1fe:	0010                	0x10
     200:	0301                	addi	t1,t1,0
     202:	0901                	addi	s2,s2,0
     204:	0008                	0x8
     206:	0501                	addi	a0,a0,0
                if (res->crcmatrix == 0)
     208:	0301                	addi	t1,t1,0
     20a:	0902                	c.slli64	s2
     20c:	0004                	0x4
     20e:	0301                	addi	t1,t1,0
     210:	0908                	addi	a0,sp,144
     212:	0014                	0x14
                    res->crcmatrix = retval;
     214:	0501                	addi	a0,a0,0
     216:	09010313          	addi	t1,sp,144
     21a:	001c                	0x1c
     21c:	0301                	addi	t1,t1,0
     21e:	0901                	addi	s2,s2,0
                break;
     220:	0018                	0x18
     222:	0501                	addi	a0,a0,0
                retval = data;
     224:	0311                	addi	t1,t1,4
     226:	0901                	addi	s2,s2,0
     228:	0018                	0x18
     22a:	0501                	addi	a0,a0,0
                break;
     22c:	0301                	addi	t1,t1,0
     22e:	0901                	addi	s2,s2,0
                break;
     230:	000c                	0xc
     232:	0301                	addi	t1,t1,0
     234:	0909                	addi	s2,s2,2
     236:	0014                	0x14
                break;
     238:	0501                	addi	a0,a0,0
     23a:	0308                	addi	a0,sp,384
        res->crc = crcu16(retval, res->crc);
     23c:	0901                	addi	s2,s2,0
     23e:	0018                	0x18
     240:	0501                	addi	a0,a0,0
     242:	09020317          	auipc	t1,0x9020
     246:	0008                	0x8
     248:	0501                	addi	a0,a0,0
     24a:	0320                	addi	s0,sp,392
     24c:	0900                	addi	s0,sp,144
     24e:	0008                	0x8
     250:	0501                	addi	a0,a0,0
     252:	0338                	addi	a4,sp,392
     254:	0900                	addi	s0,sp,144
     256:	000c                	0xc
     258:	0501                	addi	a0,a0,0
     25a:	032a                	slli	t1,t1,0xa
     25c:	0900                	addi	s0,sp,144
     25e:	0008                	0x8
     260:	0501                	addi	a0,a0,0
     262:	09000313          	li	t1,144
        retval &= 0x007f;
     266:	0028                	addi	a0,sp,8
     268:	0501                	addi	a0,a0,0
     26a:	09010317          	auipc	t1,0x9010
     26e:	0008                	0x8
        *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
     270:	0501                	addi	a0,a0,0
     272:	0320                	addi	s0,sp,392
     274:	0900                	addi	s0,sp,144
     276:	0008                	0x8
     278:	0501                	addi	a0,a0,0
     27a:	0338                	addi	a4,sp,392
     27c:	0900                	addi	s0,sp,144
     27e:	000c                	0xc
     280:	0501                	addi	a0,a0,0
     282:	032a                	slli	t1,t1,0xa
     284:	0900                	addi	s0,sp,144
     286:	0008                	0x8
     288:	0501                	addi	a0,a0,0
     28a:	09000313          	li	t1,144
     28e:	0028                	addi	a0,sp,8
     290:	0501                	addi	a0,a0,0
     292:	030d                	addi	t1,t1,3
     294:	0902                	c.slli64	s2
     296:	0008                	0x8
     298:	0501                	addi	a0,a0,0
     29a:	0316                	slli	t1,t1,0x5
     29c:	0900                	addi	s0,sp,144
     29e:	000c                	0xc
     2a0:	0501                	addi	a0,a0,0
     2a2:	09000313          	li	t1,144
        return retval;
     2a6:	0008                	0x8
}
     2a8:	0501                	addi	a0,a0,0
     2aa:	0301                	addi	t1,t1,0
     2ac:	0901                	addi	s2,s2,0
     2ae:	0004                	0x4
     2b0:	0301                	addi	t1,t1,0
     2b2:	0904                	addi	s1,sp,144
     2b4:	0010                	0x10
     2b6:	0501                	addi	a0,a0,0
     2b8:	0316                	slli	t1,t1,0x5
     2ba:	0901                	addi	s2,s2,0
{
     2bc:	0014                	0x14
     2be:	0501                	addi	a0,a0,0
     2c0:	0310                	addi	a2,sp,384
     2c2:	0900                	addi	s0,sp,144
     2c4:	0008                	0x8
     2c6:	0501                	addi	a0,a0,0
     2c8:	0316                	slli	t1,t1,0x5
     2ca:	0901                	addi	s2,s2,0
     2cc:	0008                	0x8
     2ce:	0501                	addi	a0,a0,0
     2d0:	0310                	addi	a2,sp,384
     2d2:	0900                	addi	s0,sp,144
     2d4:	0008                	0x8
     2d6:	0501                	addi	a0,a0,0
    ee_s16 val1 = calc_func(&(a->data16), res);
     2d8:	0301                	addi	t1,t1,0
     2da:	0901                	addi	s2,s2,0
     2dc:	0008                	0x8
     2de:	0301                	addi	t1,t1,0
     2e0:	0010090b          	0x10090b
     2e4:	0501                	addi	a0,a0,0
     2e6:	0310                	addi	a2,sp,384
     2e8:	0901                	addi	s2,s2,0
     2ea:	001c                	0x1c
     2ec:	0301                	addi	t1,t1,0
     2ee:	0901                	addi	s2,s2,0
    ee_s16 val2 = calc_func(&(b->data16), res);
     2f0:	0004                	0x4
     2f2:	0501                	addi	a0,a0,0
     2f4:	0900031b          	0x900031b
     2f8:	0004                	0x4
     2fa:	0501                	addi	a0,a0,0
     2fc:	0310                	addi	a2,sp,384
     2fe:	0901                	addi	s2,s2,0
     300:	0004                	0x4
     302:	0301                	addi	t1,t1,0
     304:	0901                	addi	s2,s2,0
     306:	000c                	0xc
    return val1 - val2;
     308:	0501                	addi	a0,a0,0
     30a:	030e                	slli	t1,t1,0x3
     30c:	0906                	slli	s2,s2,0x1
     30e:	000c                	0xc
     310:	0501                	addi	a0,a0,0
     312:	030c                	addi	a1,sp,384
}
     314:	00080903          	lb	s2,0(a6)
     318:	0501                	addi	a0,a0,0
     31a:	0305                	addi	t1,t1,1
     31c:	0900                	addi	s0,sp,144
     31e:	0004                	0x4
     320:	0501                	addi	a0,a0,0
     322:	031a                	slli	t1,t1,0x6
     324:	0902                	c.slli64	s2
     326:	0004                	0x4
{
     328:	0501                	addi	a0,a0,0
     32a:	0315                	addi	t1,t1,5
     32c:	0900                	addi	s0,sp,144
     32e:	0010                	0x10
     330:	0501                	addi	a0,a0,0
     332:	09010317          	auipc	t1,0x9010
     336:	0004                	0x4
     338:	0301                	addi	t1,t1,0
     33a:	0901                	addi	s2,s2,0
     33c:	0014                	0x14
     33e:	0501                	addi	a0,a0,0
    if (res == NULL)
     340:	030c                	addi	a1,sp,384
     342:	0901                	addi	s2,s2,0
     344:	000c                	0xc
     346:	0501                	addi	a0,a0,0
        a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16 >> 8));
     348:	09020313          	addi	t1,tp,144 # ffff8090 <RAM_SIZE+0xfffe8090>
     34c:	0008                	0x8
     34e:	0501                	addi	a0,a0,0
     350:	031c                	addi	a5,sp,384
     352:	0901                	addi	s2,s2,0
     354:	000c                	0xc
     356:	0501                	addi	a0,a0,0
     358:	0322                	slli	t1,t1,0x8
     35a:	0900                	addi	s0,sp,144
     35c:	0008                	0x8
     35e:	0501                	addi	a0,a0,0
     360:	0328                	addi	a0,sp,392
     362:	0900                	addi	s0,sp,144
     364:	0004                	0x4
     366:	0501                	addi	a0,a0,0
     368:	09000337          	lui	t1,0x9000
     36c:	0004                	0x4
     36e:	0501                	addi	a0,a0,0
     370:	0314                	addi	a3,sp,384
     372:	0900                	addi	s0,sp,144
     374:	0020                	addi	s0,sp,8
     376:	0501                	addi	a0,a0,0
     378:	0312                	slli	t1,t1,0x4
     37a:	0904                	addi	s1,sp,144
     37c:	0010                	0x10
     37e:	0501                	addi	a0,a0,0
     380:	031a                	slli	t1,t1,0x6
     382:	0901                	addi	s2,s2,0
     384:	000c                	0xc
     386:	0501                	addi	a0,a0,0
     388:	0320                	addi	s0,sp,392
     38a:	0900                	addi	s0,sp,144
     38c:	0008                	0x8
     38e:	0501                	addi	a0,a0,0
     390:	0329                	addi	t1,t1,10
     392:	0900                	addi	s0,sp,144
        b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16 >> 8));
     394:	0004                	0x4
     396:	0501                	addi	a0,a0,0
     398:	0310                	addi	a2,sp,384
     39a:	0900                	addi	s0,sp,144
     39c:	000c                	0xc
     39e:	0501                	addi	a0,a0,0
     3a0:	0325                	addi	t1,t1,9
     3a2:	0901                	addi	s2,s2,0
     3a4:	0004                	0x4
     3a6:	0501                	addi	a0,a0,0
     3a8:	0900032b          	0x900032b
     3ac:	0008                	0x8
     3ae:	0501                	addi	a0,a0,0
     3b0:	033a                	slli	t1,t1,0xe
     3b2:	0900                	addi	s0,sp,144
     3b4:	0004                	0x4
     3b6:	0501                	addi	a0,a0,0
     3b8:	0318                	addi	a4,sp,384
     3ba:	0900                	addi	s0,sp,144
     3bc:	0020                	addi	s0,sp,8
     3be:	0501                	addi	a0,a0,0
     3c0:	031a                	slli	t1,t1,0x6
     3c2:	0902                	c.slli64	s2
     3c4:	000c                	0xc
     3c6:	0501                	addi	a0,a0,0
     3c8:	0310                	addi	a2,sp,384
     3ca:	0900                	addi	s0,sp,144
     3cc:	0008                	0x8
     3ce:	0501                	addi	a0,a0,0
     3d0:	0321                	addi	t1,t1,8
     3d2:	0902                	c.slli64	s2
     3d4:	0004                	0x4
     3d6:	0501                	addi	a0,a0,0
     3d8:	0329                	addi	t1,t1,10
     3da:	0901                	addi	s2,s2,0
     3dc:	000c                	0xc
     3de:	0501                	addi	a0,a0,0
    return a->idx - b->idx;
     3e0:	0321                	addi	t1,t1,8
     3e2:	0900                	addi	s0,sp,144
     3e4:	0008                	0x8
     3e6:	0501                	addi	a0,a0,0
     3e8:	09010327          	vsse8.v	v6,(sp),a6,v0.t
     3ec:	0008                	0x8
     3ee:	0501                	addi	a0,a0,0
     3f0:	0321                	addi	t1,t1,8
     3f2:	0900                	addi	s0,sp,144
     3f4:	0008                	0x8
     3f6:	0301                	addi	t1,t1,0
}
     3f8:	0901                	addi	s2,s2,0
     3fa:	0008                	0x8
     3fc:	0501                	addi	a0,a0,0
     3fe:	0311                	addi	t1,t1,4
     400:	000c0903          	lb	s2,0(s8)
     404:	0501                	addi	a0,a0,0
     406:	030c                	addi	a1,sp,384
{
     408:	0900                	addi	s0,sp,144
     40a:	0004                	0x4
     40c:	0501                	addi	a0,a0,0
     40e:	0311                	addi	t1,t1,4
     410:	0901                	addi	s2,s2,0
     412:	0004                	0x4
     414:	0501                	addi	a0,a0,0
     416:	0315                	addi	t1,t1,5
     418:	0900                	addi	s0,sp,144
     41a:	0004                	0x4
    to->data16 = from->data16;
     41c:	0501                	addi	a0,a0,0
     41e:	0020                	addi	s0,sp,8
     420:	0402                	c.slli64	s0
     422:	0302                	c.slli64	t1
     424:	00200967          	jalr	s2,2(zero) # 0 <RAM_START_ADDRESS>
     428:	0501                	addi	a0,a0,0
     42a:	0005                	c.nop	1
    to->idx    = from->idx;
     42c:	0402                	c.slli64	s0
     42e:	0301                	addi	t1,t1,0
     430:	0900                	addi	s0,sp,144
     432:	001c                	0x1c
     434:	0501                	addi	a0,a0,0
     436:	0319                	addi	t1,t1,6
     438:	091e                	slli	s2,s2,0x7
     43a:	000c                	0xc
}
     43c:	0501                	addi	a0,a0,0
     43e:	030c                	addi	a1,sp,384
     440:	0900                	addi	s0,sp,144
     442:	0020                	addi	s0,sp,8
     444:	0501                	addi	a0,a0,0
     446:	0308                	addi	a0,sp,384
     448:	0902                	c.slli64	s2
     44a:	000c                	0xc
{
     44c:	0501                	addi	a0,a0,0
     44e:	0310                	addi	a2,sp,384
     450:	0901                	addi	s2,s2,0
     452:	0008                	0x8
     454:	0501                	addi	a0,a0,0
     456:	0324                	addi	s1,sp,392
     458:	0901                	addi	s2,s2,0
     45a:	0014                	0x14
     45c:	0501                	addi	a0,a0,0
     45e:	0900030f          	0x900030f
     462:	0008                	0x8
     464:	0501                	addi	a0,a0,0
     466:	030e                	slli	t1,t1,0x3
    ee_u16     retval = 0;
     468:	000c0903          	lb	s2,0(s8)
    ee_u16     found = 0, missed = 0;
     46c:	0501                	addi	a0,a0,0
     46e:	0308                	addi	a0,sp,384
     470:	0901                	addi	s2,s2,0
     472:	0014                	0x14
    list_head *list     = res->list;
     474:	0501                	addi	a0,a0,0
     476:	0310                	addi	a2,sp,384
     478:	0901                	addi	s2,s2,0
     47a:	0008                	0x8
     47c:	0501                	addi	a0,a0,0
     47e:	0901030b          	0x901030b
    ee_s16     find_num = res->seed3;
     482:	000c                	0xc
     484:	0501                	addi	a0,a0,0
     486:	031c                	addi	a5,sp,384
     488:	0902                	c.slli64	s2
     48a:	0004                	0x4
    info.idx = finder_idx;
     48c:	0501                	addi	a0,a0,0
     48e:	0312                	slli	t1,t1,0x4
     490:	0900                	addi	s0,sp,144
     492:	0008                	0x8
    for (i = 0; i < find_num; i++)
     494:	0501                	addi	a0,a0,0
     496:	0310                	addi	a2,sp,384
     498:	0901                	addi	s2,s2,0
     49a:	001c                	0x1c
        info.data16 = (i & 0xff);
     49c:	0501                	addi	a0,a0,0
     49e:	097d030b          	0x97d030b
     4a2:	000c                	0xc
     4a4:	0501                	addi	a0,a0,0
     4a6:	0332                	slli	t1,t1,0xc
     4a8:	0908                	addi	a0,sp,144
     4aa:	0008                	0x8
     4ac:	0501                	addi	a0,a0,0
     4ae:	0900030f          	0x900030f
        this_find   = core_list_find(list, &info);
     4b2:	0008                	0x8
     4b4:	0501                	addi	a0,a0,0
     4b6:	030c                	addi	a1,sp,384
     4b8:	0902                	c.slli64	s2
     4ba:	0010                	0x10
     4bc:	0301                	addi	t1,t1,0
     4be:	0902                	c.slli64	s2
     4c0:	0014                	0x14
     4c2:	0501                	addi	a0,a0,0
        list        = core_list_reverse(list);
     4c4:	0901030b          	0x901030b
     4c8:	000c                	0xc
     4ca:	0501                	addi	a0,a0,0
     4cc:	031c                	addi	a5,sp,384
     4ce:	0902                	c.slli64	s2
        if (this_find == NULL)
     4d0:	0004                	0x4
     4d2:	0501                	addi	a0,a0,0
     4d4:	0312                	slli	t1,t1,0x4
     4d6:	0900                	addi	s0,sp,144
            missed++;
     4d8:	0008                	0x8
     4da:	0501                	addi	a0,a0,0
     4dc:	0310                	addi	a2,sp,384
     4de:	0901                	addi	s2,s2,0
     4e0:	001c                	0x1c
     4e2:	0501                	addi	a0,a0,0
            retval += (list->next->info->data16 >> 8) & 1;
     4e4:	097d030b          	0x97d030b
     4e8:	000c                	0xc
     4ea:	0501                	addi	a0,a0,0
     4ec:	030c                	addi	a1,sp,384
     4ee:	0908                	addi	a0,sp,144
     4f0:	0008                	0x8
     4f2:	0501                	addi	a0,a0,0
     4f4:	0301                	addi	t1,t1,0
     4f6:	0901                	addi	s2,s2,0
     4f8:	0004                	0x4
     4fa:	0301                	addi	t1,t1,0
     4fc:	0911                	addi	s2,s2,4
     4fe:	0014                	0x14
     500:	0501                	addi	a0,a0,0
     502:	030c                	addi	a1,sp,384
     504:	0902                	c.slli64	s2
     506:	0020                	addi	s0,sp,8
     508:	0501                	addi	a0,a0,0
     50a:	0320                	addi	s0,sp,392
     50c:	0901                	addi	s2,s2,0
     50e:	0008                	0x8
     510:	0501                	addi	a0,a0,0
     512:	030c                	addi	a1,sp,384
     514:	0900                	addi	s0,sp,144
     516:	0010                	0x10
     518:	0501                	addi	a0,a0,0
     51a:	0329                	addi	t1,t1,10
     51c:	00080903          	lb	s2,0(a6)
     520:	0501                	addi	a0,a0,0
     522:	0310                	addi	a2,sp,384
            found++;
     524:	0900                	addi	s0,sp,144
     526:	000c                	0xc
     528:	0301                	addi	t1,t1,0
     52a:	0901                	addi	s2,s2,0
     52c:	0008                	0x8
     52e:	0501                	addi	a0,a0,0
            if (this_find->info->data16 & 0x1) /* use found value */
     530:	032a                	slli	t1,t1,0xa
     532:	0901                	addi	s2,s2,0
     534:	0008                	0x8
     536:	0501                	addi	a0,a0,0
     538:	0310                	addi	a2,sp,384
     53a:	0900                	addi	s0,sp,144
     53c:	000c                	0xc
     53e:	0501                	addi	a0,a0,0
     540:	0319                	addi	t1,t1,6
     542:	00080903          	lb	s2,0(a6)
     546:	0501                	addi	a0,a0,0
     548:	0318                	addi	a4,sp,384
     54a:	0904                	addi	s1,sp,144
                retval += (this_find->info->data16 >> 9) & 1;
     54c:	0008                	0x8
     54e:	0301                	addi	t1,t1,0
     550:	0901                	addi	s2,s2,0
     552:	0008                	0x8
     554:	0501                	addi	a0,a0,0
     556:	0309                	addi	t1,t1,2
     558:	0901                	addi	s2,s2,0
     55a:	000c                	0xc
     55c:	0501                	addi	a0,a0,0
     55e:	0318                	addi	a4,sp,384
     560:	0900                	addi	s0,sp,144
     562:	0008                	0x8
     564:	0501                	addi	a0,a0,0
     566:	0309                	addi	t1,t1,2
     568:	0901                	addi	s2,s2,0
     56a:	0004                	0x4
     56c:	0501                	addi	a0,a0,0
     56e:	0318                	addi	a4,sp,384
     570:	0900                	addi	s0,sp,144
     572:	0008                	0x8
     574:	0501                	addi	a0,a0,0
     576:	030d                	addi	t1,t1,3
     578:	0901                	addi	s2,s2,0
     57a:	000c                	0xc
     57c:	0501                	addi	a0,a0,0
     57e:	030e                	slli	t1,t1,0x3
     580:	0901                	addi	s2,s2,0
     582:	000c                	0xc
            if (this_find->next != NULL)
     584:	0501                	addi	a0,a0,0
     586:	0311                	addi	t1,t1,4
     588:	0901                	addi	s2,s2,0
     58a:	000c                	0xc
     58c:	0301                	addi	t1,t1,0
     58e:	0901                	addi	s2,s2,0
                finder          = this_find->next;
     590:	000c                	0xc
     592:	0501                	addi	a0,a0,0
     594:	0305                	addi	t1,t1,1
     596:	0901                	addi	s2,s2,0
     598:	0008                	0x8
     59a:	0501                	addi	a0,a0,0
                this_find->next = finder->next;
     59c:	030c                	addi	a1,sp,384
     59e:	0904                	addi	s1,sp,144
     5a0:	001c                	0x1c
     5a2:	0501                	addi	a0,a0,0
     5a4:	0305                	addi	t1,t1,1
     5a6:	0900                	addi	s0,sp,144
     5a8:	0004                	0x4
     5aa:	0501                	addi	a0,a0,0
                finder->next    = list->next;
     5ac:	002d                	c.nop	11
     5ae:	0402                	c.slli64	s0
     5b0:	09020303          	lb	t1,144(tp) # 90 <__do_global_dtors_aux+0x34>
     5b4:	0004                	0x4
     5b6:	0501                	addi	a0,a0,0
     5b8:	001a                	c.slli	zero,0x6
     5ba:	0402                	c.slli64	s0
                list->next      = finder;
     5bc:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
     5c0:	0010                	0x10
     5c2:	0501                	addi	a0,a0,0
     5c4:	0010                	0x10
     5c6:	0402                	c.slli64	s0
        if (info.idx >= 0)
     5c8:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
     5cc:	000c                	0xc
     5ce:	0501                	addi	a0,a0,0
            info.idx++;
     5d0:	04020017          	auipc	zero,0x4020
     5d4:	09020303          	lb	t1,144(tp) # 90 <__do_global_dtors_aux+0x34>
     5d8:	0008                	0x8
     5da:	0501                	addi	a0,a0,0
     5dc:	0022                	c.slli	zero,0x8
     5de:	0402                	c.slli64	s0
     5e0:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
     5e4:	0010                	0x10
     5e6:	0501                	addi	a0,a0,0
     5e8:	0010                	0x10
     5ea:	0402                	c.slli64	s0
     5ec:	097f0303          	lb	t1,151(t5) # 1b097 <RAM_SIZE+0xb097>
     5f0:	0018                	0x18
     5f2:	0501                	addi	a0,a0,0
    for (i = 0; i < find_num; i++)
     5f4:	001c                	0x1c
     5f6:	0402                	c.slli64	s0
     5f8:	09020303          	lb	t1,144(tp) # 90 <__do_global_dtors_aux+0x34>
     5fc:	0008                	0x8
     5fe:	0501                	addi	a0,a0,0
     600:	0022                	c.slli	zero,0x8
     602:	0402                	c.slli64	s0
     604:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
     608:	0008                	0x8
     60a:	0501                	addi	a0,a0,0
     60c:	0015                	c.nop	5
     60e:	0402                	c.slli64	s0
     610:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
     614:	0018                	0x18
     616:	0501                	addi	a0,a0,0
     618:	0009                	c.nop	2
     61a:	0402                	c.slli64	s0
    retval += found * 4 - missed;
     61c:	09020303          	lb	t1,144(tp) # 90 <__do_global_dtors_aux+0x34>
     620:	0004                	0x4
     622:	0501                	addi	a0,a0,0
     624:	001c                	0x1c
     626:	0402                	c.slli64	s0
     628:	09790303          	lb	t1,151(s2)
     62c:	001c                	0x1c
     62e:	0501                	addi	a0,a0,0
     630:	0005                	c.nop	1
     632:	0402                	c.slli64	s0
     634:	0301                	addi	t1,t1,0
     636:	0900                	addi	s0,sp,144
     638:	000c                	0xc
     63a:	0501                	addi	a0,a0,0
     63c:	030c                	addi	a1,sp,384
     63e:	000c090b          	0xc090b
     642:	0301                	addi	t1,t1,0
     644:	0901                	addi	s2,s2,0
     646:	000c                	0xc
    if (finder_idx > 0)
     648:	0501                	addi	a0,a0,0
     64a:	0901030b          	0x901030b
     64e:	0008                	0x8
        list = core_list_mergesort(list, cmp_complex, res);
     650:	0501                	addi	a0,a0,0
     652:	0316                	slli	t1,t1,0x5
     654:	0902                	c.slli64	s2
     656:	0004                	0x4
     658:	0501                	addi	a0,a0,0
     65a:	030c                	addi	a1,sp,384
     65c:	0900                	addi	s0,sp,144
     65e:	0018                	0x18
     660:	0501                	addi	a0,a0,0
     662:	0322                	slli	t1,t1,0x8
    remover = core_list_remove(list->next);
     664:	0901                	addi	s2,s2,0
     666:	0008                	0x8
     668:	0501                	addi	a0,a0,0
     66a:	09000313          	li	t1,144
     66e:	000c                	0xc
     670:	0501                	addi	a0,a0,0
     672:	031f 0900 0008      	0x80900031f
    finder = core_list_find(list, &info);
     678:	0501                	addi	a0,a0,0
     67a:	0324                	addi	s1,sp,392
     67c:	00100903          	lb	s2,1(zero) # 1 <RAM_START_ADDRESS+0x1>
     680:	0501                	addi	a0,a0,0
     682:	031a                	slli	t1,t1,0x6
     684:	0900                	addi	s0,sp,144
     686:	000c                	0xc
     688:	0501                	addi	a0,a0,0
     68a:	0314                	addi	a3,sp,384
    if (!finder)
     68c:	0900                	addi	s0,sp,144
     68e:	000c                	0xc
     690:	0501                	addi	a0,a0,0
     692:	0330                	addi	a2,sp,392
        finder = list->next;
     694:	0902                	c.slli64	s2
     696:	0008                	0x8
     698:	0501                	addi	a0,a0,0
     69a:	0324                	addi	s1,sp,392
     69c:	0901                	addi	s2,s2,0
     69e:	0024                	addi	s1,sp,8
    while (finder)
     6a0:	0501                	addi	a0,a0,0
     6a2:	0321                	addi	t1,t1,8
        retval = crc16(list->info->data16, retval);
     6a4:	097f                	0x97f
     6a6:	0010                	0x10
     6a8:	0501                	addi	a0,a0,0
     6aa:	097f0313          	addi	t1,t5,151
     6ae:	0008                	0x8
     6b0:	0501                	addi	a0,a0,0
     6b2:	0321                	addi	t1,t1,8
     6b4:	0901                	addi	s2,s2,0
     6b6:	0008                	0x8
     6b8:	0501                	addi	a0,a0,0
     6ba:	031f 097f 0014      	0x14097f031f
     6c0:	0501                	addi	a0,a0,0
     6c2:	0310                	addi	a2,sp,384
     6c4:	0905                	addi	s2,s2,1
     6c6:	0004                	0x4
        finder = finder->next;
     6c8:	0501                	addi	a0,a0,0
     6ca:	0312                	slli	t1,t1,0x4
     6cc:	0974                	addi	a3,sp,156
     6ce:	000c                	0xc
     6d0:	0501                	addi	a0,a0,0
     6d2:	0900030b          	0x900030b
    while (finder)
     6d6:	0008                	0x8
     6d8:	0501                	addi	a0,a0,0
     6da:	030c                	addi	a1,sp,384
    remover = core_list_undo_remove(remover, list->next);
     6dc:	090e                	slli	s2,s2,0x3
     6de:	0004                	0x4
     6e0:	0301                	addi	t1,t1,0
     6e2:	090c                	addi	a1,sp,144
     6e4:	0014                	0x14
     6e6:	0501                	addi	a0,a0,0
     6e8:	0301                	addi	t1,t1,0
     6ea:	0901                	addi	s2,s2,0
     6ec:	0004                	0x4
     6ee:	0301                	addi	t1,t1,0
     6f0:	00140917          	auipc	s2,0x140
    list = core_list_mergesort(list, cmp_idx, NULL);
     6f4:	0501                	addi	a0,a0,0
     6f6:	030a                	slli	t1,t1,0x2
     6f8:	00280903          	lb	s2,2(a6)
     6fc:	0501                	addi	a0,a0,0
     6fe:	0314                	addi	a3,sp,384
     700:	0900                	addi	s0,sp,144
     702:	0008                	0x8
     704:	0501                	addi	a0,a0,0
     706:	0308                	addi	a0,sp,384
    finder = list->next;
     708:	0900                	addi	s0,sp,144
     70a:	0004                	0x4
     70c:	0501                	addi	a0,a0,0
     70e:	0310                	addi	a2,sp,384
     710:	0901                	addi	s2,s2,0
     712:	0008                	0x8
    while (finder)
     714:	0501                	addi	a0,a0,0
     716:	030a                	slli	t1,t1,0x2
        retval = crc16(list->info->data16, retval);
     718:	0901                	addi	s2,s2,0
     71a:	0008                	0x8
     71c:	0501                	addi	a0,a0,0
     71e:	0315                	addi	t1,t1,5
     720:	0900                	addi	s0,sp,144
     722:	0008                	0x8
     724:	0501                	addi	a0,a0,0
     726:	0308                	addi	a0,sp,384
     728:	0900                	addi	s0,sp,144
     72a:	0004                	0x4
     72c:	0501                	addi	a0,a0,0
     72e:	0310                	addi	a2,sp,384
     730:	0901                	addi	s2,s2,0
     732:	0008                	0x8
     734:	0501                	addi	a0,a0,0
     736:	030d                	addi	t1,t1,3
     738:	0902                	c.slli64	s2
     73a:	0008                	0x8
        finder = finder->next;
     73c:	0501                	addi	a0,a0,0
     73e:	0306                	slli	t1,t1,0x1
     740:	0901                	addi	s2,s2,0
     742:	000c                	0xc
     744:	0501                	addi	a0,a0,0
     746:	0310                	addi	a2,sp,384
    while (finder)
     748:	0900                	addi	s0,sp,144
     74a:	0008                	0x8
     74c:	0501                	addi	a0,a0,0
     74e:	0326                	slli	t1,t1,0x9
    return retval;
     750:	0901                	addi	s2,s2,0
     752:	000c                	0xc
}
     754:	0501                	addi	a0,a0,0
     756:	0318                	addi	a4,sp,384
     758:	0900                	addi	s0,sp,144
     75a:	0008                	0x8
     75c:	0301                	addi	t1,t1,0
     75e:	0901                	addi	s2,s2,0
     760:	0008                	0x8
     762:	0501                	addi	a0,a0,0
     764:	0315                	addi	t1,t1,5
     766:	0902                	c.slli64	s2
{
     768:	000c                	0xc
     76a:	0501                	addi	a0,a0,0
     76c:	09000313          	li	t1,144
     770:	0008                	0x8
     772:	0501                	addi	a0,a0,0
     774:	0306                	slli	t1,t1,0x1
     776:	0901                	addi	s2,s2,0
     778:	0008                	0x8
     77a:	0501                	addi	a0,a0,0
     77c:	0311                	addi	t1,t1,4
     77e:	0900                	addi	s0,sp,144
     780:	0008                	0x8
     782:	0501                	addi	a0,a0,0
     784:	0316                	slli	t1,t1,0x5
     786:	0901                	addi	s2,s2,0
    ee_u32 per_item = 16 + sizeof(struct list_data_s);
     788:	000c                	0xc
     78a:	0501                	addi	a0,a0,0
     78c:	0305                	addi	t1,t1,1
     78e:	0900                	addi	s0,sp,144
    ee_u32 size     = (blksize / per_item)
     790:	0008                	0x8
     792:	0501                	addi	a0,a0,0
     794:	030c                	addi	a1,sp,384
     796:	0902                	c.slli64	s2
     798:	000c                	0xc
     79a:	0501                	addi	a0,a0,0
     79c:	0301                	addi	t1,t1,0
     79e:	0901                	addi	s2,s2,0
     7a0:	0004                	0x4
     7a2:	0301                	addi	t1,t1,0
     7a4:	0912                	slli	s2,s2,0x4
     7a6:	0014                	0x14
    list_head *memblock_end  = memblock + size;
     7a8:	0501                	addi	a0,a0,0
     7aa:	0310                	addi	a2,sp,384
     7ac:	0902                	c.slli64	s2
     7ae:	0010                	0x10
     7b0:	0301                	addi	t1,t1,0
     7b2:	0902                	c.slli64	s2
     7b4:	000c                	0xc
     7b6:	0501                	addi	a0,a0,0
     7b8:	0315                	addi	t1,t1,5
     7ba:	0901                	addi	s2,s2,0
    list_data *datablock     = (list_data *)(memblock_end);
     7bc:	000c                	0xc
     7be:	0501                	addi	a0,a0,0
     7c0:	0310                	addi	a2,sp,384
     7c2:	0900                	addi	s0,sp,144
    list_data *datablock_end = datablock + size;
     7c4:	0008                	0x8
     7c6:	0301                	addi	t1,t1,0
     7c8:	0901                	addi	s2,s2,0
     7ca:	0008                	0x8
     7cc:	0501                	addi	a0,a0,0
     7ce:	0316                	slli	t1,t1,0x5
     7d0:	0902                	c.slli64	s2
     7d2:	000c                	0xc
     7d4:	0501                	addi	a0,a0,0
     7d6:	031c                	addi	a5,sp,384
    list_head *finder, *list = memblock;
     7d8:	0900                	addi	s0,sp,144
     7da:	0008                	0x8
     7dc:	0501                	addi	a0,a0,0
     7de:	0310                	addi	a2,sp,384
    list->next         = NULL;
     7e0:	0900                	addi	s0,sp,144
     7e2:	0004                	0x4
     7e4:	0301                	addi	t1,t1,0
     7e6:	0901                	addi	s2,s2,0
    list->info         = datablock;
     7e8:	0008                	0x8
     7ea:	0501                	addi	a0,a0,0
     7ec:	030c                	addi	a1,sp,384
     7ee:	0901                	addi	s2,s2,0
     7f0:	0008                	0x8
     7f2:	0501                	addi	a0,a0,0
    list->info->idx    = 0x0000;
     7f4:	0301                	addi	t1,t1,0
     7f6:	0901                	addi	s2,s2,0
     7f8:	0004                	0x4
     7fa:	0301                	addi	t1,t1,0
     7fc:	0914                	addi	a3,sp,144
     7fe:	0010                	0x10
    list->info->data16 = (ee_s16)0x8080;
     800:	0501                	addi	a0,a0,0
     802:	0319                	addi	t1,t1,6
     804:	00140903          	lb	s2,1(s0)
     808:	0501                	addi	a0,a0,0
     80a:	0328                	addi	a0,sp,392
     80c:	0901                	addi	s2,s2,0
     80e:	000c                	0xc
     810:	0501                	addi	a0,a0,0
     812:	0319                	addi	t1,t1,6
    memblock++;
     814:	0900                	addi	s0,sp,144
     816:	0008                	0x8
     818:	0301                	addi	t1,t1,0
     81a:	0901                	addi	s2,s2,0
     81c:	0008                	0x8
     81e:	0501                	addi	a0,a0,0
    datablock++;
     820:	0328                	addi	a0,sp,392
     822:	0902                	c.slli64	s2
     824:	000c                	0xc
     826:	0501                	addi	a0,a0,0
     828:	0319                	addi	t1,t1,6
     82a:	0900                	addi	s0,sp,144
    info.idx    = 0x7fff;
     82c:	0008                	0x8
     82e:	0301                	addi	t1,t1,0
     830:	0901                	addi	s2,s2,0
     832:	0008                	0x8
     834:	0501                	addi	a0,a0,0
     836:	030c                	addi	a1,sp,384
    info.data16 = (ee_s16)0xffff;
     838:	0901                	addi	s2,s2,0
     83a:	000c                	0xc
     83c:	0501                	addi	a0,a0,0
     83e:	0301                	addi	t1,t1,0
    core_list_insert_new(
     840:	0901                	addi	s2,s2,0
     842:	0004                	0x4
     844:	0301                	addi	t1,t1,0
     846:	0911                	addi	s2,s2,4
     848:	0010                	0x10
     84a:	0501                	addi	a0,a0,0
     84c:	030d                	addi	t1,t1,3
     84e:	0901                	addi	s2,s2,0
     850:	0014                	0x14
     852:	0501                	addi	a0,a0,0
     854:	0308                	addi	a0,sp,384
     856:	0900                	addi	s0,sp,144
     858:	0008                	0x8
     85a:	0501                	addi	a0,a0,0
    for (i = 0; i < size; i++)
     85c:	0902030f          	0x902030f
     860:	0004                	0x4
     862:	0501                	addi	a0,a0,0
        ee_u16 datpat = ((ee_u16)(seed ^ i) & 0xf);
     864:	0312                	slli	t1,t1,0x4
     866:	0901                	addi	s2,s2,0
     868:	0004                	0x4
     86a:	0501                	addi	a0,a0,0
     86c:	097f030f          	0x97f030f
     870:	000c                	0xc
     872:	0501                	addi	a0,a0,0
     874:	001d                	c.nop	7
     876:	0402                	c.slli64	s0
     878:	0301                	addi	t1,t1,0
     87a:	0900                	addi	s0,sp,144
     87c:	0008                	0x8
     87e:	0501                	addi	a0,a0,0
     880:	04020023          	sb	zero,64(tp) # 40 <_start+0x30>
     884:	0301                	addi	t1,t1,0
     886:	0900                	addi	s0,sp,144
            = (datpat << 3) | (i & 0x7); /* alternate between algorithms */
     888:	0008                	0x8
     88a:	0501                	addi	a0,a0,0
     88c:	0030                	addi	a2,sp,8
     88e:	0402                	c.slli64	s0
     890:	0301                	addi	t1,t1,0
     892:	0900                	addi	s0,sp,144
     894:	0004                	0x4
     896:	0501                	addi	a0,a0,0
     898:	0015                	c.nop	5
     89a:	0402                	c.slli64	s0
     89c:	0301                	addi	t1,t1,0
     89e:	0900                	addi	s0,sp,144
     8a0:	0008                	0x8
     8a2:	0501                	addi	a0,a0,0
     8a4:	0310                	addi	a2,sp,384
     8a6:	0902                	c.slli64	s2
     8a8:	0004                	0x4
     8aa:	0501                	addi	a0,a0,0
     8ac:	0312                	slli	t1,t1,0x4
     8ae:	0905                	addi	s2,s2,1
        ee_u16 dat
     8b0:	0008                	0x8
     8b2:	0501                	addi	a0,a0,0
     8b4:	097f030f          	0x97f030f
        info.data16 = (dat << 8) | dat;  /* fill the data with actual data and
     8b8:	000c                	0xc
     8ba:	0501                	addi	a0,a0,0
     8bc:	001e                	c.slli	zero,0x7
     8be:	0402                	c.slli64	s0
     8c0:	0301                	addi	t1,t1,0
     8c2:	0900                	addi	s0,sp,144
     8c4:	0008                	0x8
     8c6:	0501                	addi	a0,a0,0
     8c8:	0024                	addi	s1,sp,8
     8ca:	0402                	c.slli64	s0
     8cc:	0301                	addi	t1,t1,0
     8ce:	0900                	addi	s0,sp,144
     8d0:	0008                	0x8
     8d2:	0501                	addi	a0,a0,0
     8d4:	002d                	c.nop	11
     8d6:	0402                	c.slli64	s0
     8d8:	0301                	addi	t1,t1,0
     8da:	0900                	addi	s0,sp,144
        core_list_insert_new(
     8dc:	0004                	0x4
     8de:	0501                	addi	a0,a0,0
     8e0:	003c                	addi	a5,sp,8
     8e2:	0402                	c.slli64	s0
     8e4:	0301                	addi	t1,t1,0
     8e6:	0900                	addi	s0,sp,144
     8e8:	000c                	0xc
     8ea:	0501                	addi	a0,a0,0
     8ec:	0015                	c.nop	5
     8ee:	0402                	c.slli64	s0
     8f0:	0301                	addi	t1,t1,0
     8f2:	0900                	addi	s0,sp,144
     8f4:	0008                	0x8
     8f6:	0501                	addi	a0,a0,0
    for (i = 0; i < size; i++)
     8f8:	0310                	addi	a2,sp,384
     8fa:	0902                	c.slli64	s2
     8fc:	0004                	0x4
     8fe:	0501                	addi	a0,a0,0
     900:	0301                	addi	t1,t1,0
     902:	0902                	c.slli64	s2
     904:	0004                	0x4
     906:	0301                	addi	t1,t1,0
     908:	0911                	addi	s2,s2,4
     90a:	0010                	0x10
     90c:	0501                	addi	a0,a0,0
     90e:	0310                	addi	a2,sp,384
    finder = list->next;
     910:	0901                	addi	s2,s2,0
     912:	0010                	0x10
     914:	0501                	addi	a0,a0,0
     916:	0901030b          	0x901030b
     91a:	0004                	0x4
    i      = 1;
     91c:	0501                	addi	a0,a0,0
     91e:	0314                	addi	a3,sp,384
     920:	0902                	c.slli64	s2
     922:	0004                	0x4
    while (finder->next != NULL)
     924:	0301                	addi	t1,t1,0
     926:	0901                	addi	s2,s2,0
        if (i < size / 5) /* first 20% of the list in order */
     928:	000c                	0xc
     92a:	0301                	addi	t1,t1,0
     92c:	0901                	addi	s2,s2,0
     92e:	000c                	0xc
     930:	0301                	addi	t1,t1,0
     932:	0901                	addi	s2,s2,0
     934:	0008                	0x8
     936:	0501                	addi	a0,a0,0
     938:	097b030b          	0x97b030b
     93c:	0008                	0x8
     93e:	0501                	addi	a0,a0,0
     940:	030c                	addi	a1,sp,384
     942:	00080907          	vle8.v	v18,(a6),v0.t
     946:	0501                	addi	a0,a0,0
            finder->info->idx = i++;
     948:	0301                	addi	t1,t1,0
     94a:	0901                	addi	s2,s2,0
     94c:	0004                	0x4
     94e:	0301                	addi	t1,t1,0
     950:	0919                	addi	s2,s2,6
     952:	0010                	0x10
     954:	0501                	addi	a0,a0,0
     956:	030c                	addi	a1,sp,384
     958:	0904                	addi	s1,sp,144
     95a:	001c                	0x1c
     95c:	0501                	addi	a0,a0,0
     95e:	030e                	slli	t1,t1,0x3
     960:	0904                	addi	s1,sp,144
     962:	0008                	0x8
     964:	0301                	addi	t1,t1,0
     966:	0901                	addi	s2,s2,0
     968:	0008                	0x8
     96a:	0301                	addi	t1,t1,0
            ee_u16 pat = (ee_u16)(i++ ^ seed); /* get a pseudo random number */
     96c:	0901                	addi	s2,s2,0
     96e:	0004                	0x4
     970:	0501                	addi	a0,a0,0
     972:	0311                	addi	t1,t1,4
     974:	0902                	c.slli64	s2
     976:	0004                	0x4
     978:	0501                	addi	a0,a0,0
     97a:	0902030f          	0x902030f
     97e:	0004                	0x4
     980:	0501                	addi	a0,a0,0
     982:	0314                	addi	a3,sp,384
     984:	0902                	c.slli64	s2
     986:	0004                	0x4
     988:	0501                	addi	a0,a0,0
     98a:	09020313          	addi	t1,tp,144 # 90 <__do_global_dtors_aux+0x34>
                                & (((i & 0x07) << 8)
     98e:	000c                	0xc
     990:	0301                	addi	t1,t1,0
     992:	0901                	addi	s2,s2,0
     994:	0008                	0x8
     996:	0501                	addi	a0,a0,0
     998:	0314                	addi	a3,sp,384
     99a:	0901                	addi	s2,s2,0
     99c:	0004                	0x4
     99e:	0501                	addi	a0,a0,0
     9a0:	030d                	addi	t1,t1,3
     9a2:	0900                	addi	s0,sp,144
     9a4:	0004                	0x4
     9a6:	0501                	addi	a0,a0,0
     9a8:	0316                	slli	t1,t1,0x5
     9aa:	0902                	c.slli64	s2
     9ac:	0004                	0x4
     9ae:	0501                	addi	a0,a0,0
                                   | pat); /* make sure the mixed items end up
     9b0:	09010313          	addi	t1,sp,144
     9b4:	000c                	0xc
     9b6:	0501                	addi	a0,a0,0
     9b8:	0314                	addi	a3,sp,384
     9ba:	0901                	addi	s2,s2,0
     9bc:	000c                	0xc
     9be:	0501                	addi	a0,a0,0
                                & (((i & 0x07) << 8)
     9c0:	0026                	c.slli	zero,0x9
     9c2:	0402                	c.slli64	s0
     9c4:	0302                	c.slli64	t1
     9c6:	097c                	addi	a5,sp,156
            finder->info->idx = 0x3fff
     9c8:	0008                	0x8
     9ca:	0501                	addi	a0,a0,0
     9cc:	000d                	c.nop	3
     9ce:	0402                	c.slli64	s0
                                & (((i & 0x07) << 8)
     9d0:	0301                	addi	t1,t1,0
     9d2:	0900                	addi	s0,sp,144
     9d4:	000c                	0xc
     9d6:	0501                	addi	a0,a0,0
     9d8:	0315                	addi	t1,t1,5
     9da:	0905                	addi	s2,s2,1
     9dc:	0010                	0x10
     9de:	0501                	addi	a0,a0,0
     9e0:	09040313          	addi	t1,s0,144
            finder->info->idx = 0x3fff
     9e4:	0004                	0x4
     9e6:	0301                	addi	t1,t1,0
        finder = finder->next;
     9e8:	00080903          	lb	s2,0(a6)
     9ec:	0501                	addi	a0,a0,0
     9ee:	0314                	addi	a3,sp,384
     9f0:	0904                	addi	s1,sp,144
     9f2:	0004                	0x4
    while (finder->next != NULL)
     9f4:	0501                	addi	a0,a0,0
     9f6:	09030317          	auipc	t1,0x9030
     9fa:	0008                	0x8
     9fc:	0301                	addi	t1,t1,0
     9fe:	0901                	addi	s2,s2,0
    list = core_list_mergesort(list, cmp_idx, NULL);
     a00:	0008                	0x8
     a02:	0501                	addi	a0,a0,0
     a04:	031a                	slli	t1,t1,0x6
     a06:	0901                	addi	s2,s2,0
     a08:	000c                	0xc
     a0a:	0501                	addi	a0,a0,0
     a0c:	0319                	addi	t1,t1,6
     a0e:	0902                	c.slli64	s2
     a10:	0010                	0x10
     a12:	0501                	addi	a0,a0,0
    return list;
     a14:	0025                	c.nop	9
     a16:	0402                	c.slli64	s0
}
     a18:	0301                	addi	t1,t1,0
     a1a:	0900                	addi	s0,sp,144
     a1c:	0008                	0x8
     a1e:	0501                	addi	a0,a0,0
     a20:	09030317          	auipc	t1,0x9030
     a24:	0008                	0x8
     a26:	0301                	addi	t1,t1,0
     a28:	0901                	addi	s2,s2,0
     a2a:	0008                	0x8
{
     a2c:	0501                	addi	a0,a0,0
     a2e:	031a                	slli	t1,t1,0x6
     a30:	0901                	addi	s2,s2,0
     a32:	000c                	0xc
     a34:	0501                	addi	a0,a0,0
     a36:	031f 0902 0010      	0x100902031f
     a3c:	0501                	addi	a0,a0,0
     a3e:	0328                	addi	a0,sp,392
     a40:	0900                	addi	s0,sp,144
     a42:	0008                	0x8
     a44:	0501                	addi	a0,a0,0
     a46:	031a                	slli	t1,t1,0x6
     a48:	0900                	addi	s0,sp,144
     a4a:	0008                	0x8
     a4c:	0501                	addi	a0,a0,0
     a4e:	0319                	addi	t1,t1,6
     a50:	0900                	addi	s0,sp,144
     a52:	0018                	0x18
    if ((*memblock + 1) >= memblock_end)
     a54:	0501                	addi	a0,a0,0
     a56:	09040317          	auipc	t1,0x9040
     a5a:	0004                	0x4
     a5c:	0301                	addi	t1,t1,0
     a5e:	0901                	addi	s2,s2,0
     a60:	0008                	0x8
     a62:	0501                	addi	a0,a0,0
     a64:	031a                	slli	t1,t1,0x6
     a66:	0901                	addi	s2,s2,0
        return NULL;
     a68:	000c                	0xc
     a6a:	0501                	addi	a0,a0,0
     a6c:	09050317          	auipc	t1,0x9050
    if ((*datablock + 1) >= datablock_end)
     a70:	0010                	0x10
     a72:	0301                	addi	t1,t1,0
     a74:	0901                	addi	s2,s2,0
     a76:	0008                	0x8
     a78:	0501                	addi	a0,a0,0
     a7a:	031a                	slli	t1,t1,0x6
     a7c:	0901                	addi	s2,s2,0
     a7e:	000c                	0xc
     a80:	0501                	addi	a0,a0,0
     a82:	0314                	addi	a3,sp,384
        return NULL;
     a84:	0904                	addi	s1,sp,144
     a86:	000c                	0xc
     a88:	0501                	addi	a0,a0,0
     a8a:	0320                	addi	s0,sp,392
    newitem = *memblock;
     a8c:	0902                	c.slli64	s2
     a8e:	0008                	0x8
     a90:	0501                	addi	a0,a0,0
     a92:	031a                	slli	t1,t1,0x6
     a94:	0904                	addi	s1,sp,144
     a96:	0010                	0x10
    (*memblock)++;
     a98:	0501                	addi	a0,a0,0
     a9a:	0316                	slli	t1,t1,0x5
     a9c:	0902                	c.slli64	s2
     a9e:	0008                	0x8
     aa0:	0501                	addi	a0,a0,0
     aa2:	09550313          	addi	t1,a0,149 # 382b6095 <RAM_SIZE+0x382a6095>
     aa6:	0008                	0x8
     aa8:	0501                	addi	a0,a0,0
     aaa:	001e                	c.slli	zero,0x7
    newitem->next      = insert_point->next;
     aac:	0402                	c.slli64	s0
     aae:	0301                	addi	t1,t1,0
     ab0:	0900                	addi	s0,sp,144
     ab2:	0008                	0x8
     ab4:	0501                	addi	a0,a0,0
     ab6:	002c                	addi	a1,sp,8
     ab8:	0402                	c.slli64	s0
     aba:	0302                	c.slli64	t1
    insert_point->next = newitem;
     abc:	0900                	addi	s0,sp,144
     abe:	0008                	0x8
     ac0:	0501                	addi	a0,a0,0
     ac2:	092f030f          	0x92f030f
     ac6:	0008                	0x8
    newitem->info = *datablock;
     ac8:	0301                	addi	t1,t1,0
     aca:	08097fbf 14050100 	0x1405010008097fbf
     ad2:	0900c403          	lbu	s0,144(ra) # 114 <calc_func+0x50>
     ad6:	0008                	0x8
    (*datablock)++;
     ad8:	0501                	addi	a0,a0,0
     ada:	030c                	addi	a1,sp,384
     adc:	00080903          	lb	s2,0(a6)
     ae0:	0501                	addi	a0,a0,0
     ae2:	0314                	addi	a3,sp,384
     ae4:	0901                	addi	s2,s2,0
     ae6:	000c                	0xc
     ae8:	0501                	addi	a0,a0,0
     aea:	0310                	addi	a2,sp,384
    copy_info(newitem->info, info);
     aec:	00080903          	lb	s2,0(a6)
     af0:	0501                	addi	a0,a0,0
     af2:	030e                	slli	t1,t1,0x3
     af4:	0c097faf          	vamoswapei64.v	v31,(s2),v0,v31,v0.t
     af8:	0100                	addi	s0,sp,128
     afa:	0105                	addi	sp,sp,1
     afc:	0200                	addi	s0,sp,256
     afe:	0104                	addi	s1,sp,128
    return newitem;
     b00:	0900d603          	lhu	a2,144(ra)
}
     b04:	0004                	0x4
     b06:	0901                	addi	s2,s2,0
     b08:	0014                	0x14
     b0a:	0100                	addi	s0,sp,128
     b0c:	6c01                	0x6c01
     b0e:	0300000b          	0x300000b
     b12:	6000                	flw	fs0,0(s0)
     b14:	0000                	unimp
     b16:	0100                	addi	s0,sp,128
{
     b18:	fb01                	bnez	a4,a28 <HEAP_SIZE+0x228>
     b1a:	0d0e                	slli	s10,s10,0x3
     b1c:	0100                	addi	s0,sp,128
     b1e:	0101                	addi	sp,sp,0
     b20:	0001                	nop
     b22:	0000                	unimp
     b24:	0001                	nop
     b26:	0100                	addi	s0,sp,128
    list_head *ret = item->next;
     b28:	6168732f          	vamoandei64.v	zero,(a6),v22,v6,v0.t
     b2c:	6572                	flw	fa0,28(sp)
     b2e:	2f64                	fld	fs1,216(a4)
     b30:	6972                	flw	fs2,28(sp)
     b32:	2d766373          	csrrsi	t1,0x2d7,12
    tmp        = item->info;
     b36:	7865                	lui	a6,0xffff9
     b38:	6d61                	lui	s10,0x18
     b3a:	6c70                	flw	fa2,92(s0)
     b3c:	2f65                	jal	12f4 <main+0x2e4>
     b3e:	65726f63          	bltu	tp,s7,119c <main+0x18c>
    item->info = ret->info;
     b42:	616d                	addi	sp,sp,240
     b44:	6b72                	flw	fs6,28(sp)
     b46:	0000                	unimp
     b48:	65726f63          	bltu	tp,s7,11a6 <main+0x196>
     b4c:	6d5f 6961 2e6e      	0x2e6e69616d5f
    ret->info  = tmp;
     b52:	00010063          	beqz	sp,b52 <core_list_remove+0x3a>
     b56:	6300                	flw	fs0,0(a4)
     b58:	5f65726f          	jal	tp,5814e <RAM_SIZE+0x4814e>
    item->next = item->next->next;
     b5c:	6f70                	flw	fa2,92(a4)
     b5e:	7472                	flw	fs0,60(sp)
     b60:	656d                	lui	a0,0x1b
     b62:	682e                	flw	fa6,200(sp)
     b64:	0100                	addi	s0,sp,128
     b66:	0000                	unimp
     b68:	65726f63          	bltu	tp,s7,11c6 <main+0x1b6>
     b6c:	616d                	addi	sp,sp,240
     b6e:	6b72                	flw	fs6,28(sp)
    ret->next  = NULL;
     b70:	682e                	flw	fa6,200(sp)
     b72:	0100                	addi	s0,sp,128
     b74:	0000                	unimp
     b76:	0500                	addi	s0,sp,640
    return ret;
     b78:	0001                	nop
     b7a:	0205                	addi	tp,tp,1
}
     b7c:	0f00                	addi	s0,sp,912
     b7e:	0000                	unimp
     b80:	05013403          	0x5013403
     b84:	09030313          	addi	t1,t1,144 # 9050afc <RAM_SIZE+0x9040afc>
     b88:	0014                	0x14
     b8a:	0301                	addi	t1,t1,0
{
     b8c:	0901                	addi	s2,s2,0
     b8e:	0008                	0x8
     b90:	0501                	addi	a0,a0,0
     b92:	031e                	slli	t1,t1,0x7
     b94:	0901                	addi	s2,s2,0
     b96:	000c                	0xc
     b98:	0301                	addi	t1,t1,0
     b9a:	0901                	addi	s2,s2,0
     b9c:	0008                	0x8
     b9e:	0301                	addi	t1,t1,0
    tmp                 = item_removed->info;
     ba0:	0901                	addi	s2,s2,0
     ba2:	0008                	0x8
     ba4:	0301                	addi	t1,t1,0
     ba6:	0901                	addi	s2,s2,0
     ba8:	0008                	0x8
     baa:	0501                	addi	a0,a0,0
    item_removed->info  = item_modified->info;
     bac:	030c                	addi	a1,sp,384
     bae:	0902                	c.slli64	s2
     bb0:	0008                	0x8
     bb2:	0501                	addi	a0,a0,0
     bb4:	0305                	addi	t1,t1,1
     bb6:	0900                	addi	s0,sp,144
     bb8:	0004                	0x4
     bba:	0501                	addi	a0,a0,0
    item_modified->info = tmp;
     bbc:	0314                	addi	a3,sp,384
     bbe:	0902                	c.slli64	s2
     bc0:	0004                	0x4
     bc2:	0301                	addi	t1,t1,0
     bc4:	0901                	addi	s2,s2,0
     bc6:	0014                	0x14
    item_removed->next  = item_modified->next;
     bc8:	0501                	addi	a0,a0,0
     bca:	0312                	slli	t1,t1,0x4
     bcc:	0900                	addi	s0,sp,144
     bce:	0020                	addi	s0,sp,8
     bd0:	0501                	addi	a0,a0,0
     bd2:	0314                	addi	a3,sp,384
     bd4:	0901                	addi	s2,s2,0
     bd6:	0008                	0x8
    item_modified->next = item_removed;
     bd8:	0301                	addi	t1,t1,0
     bda:	0901                	addi	s2,s2,0
     bdc:	0014                	0x14
     bde:	0501                	addi	a0,a0,0
     be0:	0312                	slli	t1,t1,0x4
     be2:	0900                	addi	s0,sp,144
    return item_removed;
     be4:	0020                	addi	s0,sp,8
     be6:	0501                	addi	a0,a0,0
}
     be8:	030c                	addi	a1,sp,384
     bea:	0901                	addi	s2,s2,0
     bec:	0008                	0x8
     bee:	0501                	addi	a0,a0,0
     bf0:	031f 0901 0008      	0x80901031f
     bf6:	0501                	addi	a0,a0,0
{
     bf8:	031a                	slli	t1,t1,0x6
     bfa:	0900                	addi	s0,sp,144
     bfc:	0008                	0x8
     bfe:	0501                	addi	a0,a0,0
     c00:	0022                	c.slli	zero,0x8
     c02:	0402                	c.slli64	s0
     c04:	0302                	c.slli64	t1
     c06:	0979                	addi	s2,s2,30
     c08:	0008                	0x8
     c0a:	0501                	addi	a0,a0,0
    if (info->idx >= 0)
     c0c:	0005                	c.nop	1
     c0e:	0402                	c.slli64	s0
     c10:	0301                	addi	t1,t1,0
     c12:	0900                	addi	s0,sp,144
     c14:	000c                	0xc
     c16:	0501                	addi	a0,a0,0
        while (list && (list->info->idx != info->idx))
     c18:	030c                	addi	a1,sp,384
     c1a:	0909                	addi	s2,s2,2
            list = list->next;
     c1c:	000c                	0xc
     c1e:	0501                	addi	a0,a0,0
     c20:	0301                	addi	t1,t1,0
     c22:	0901                	addi	s2,s2,0
     c24:	0004                	0x4
     c26:	0301                	addi	t1,t1,0
        while (list && (list->info->idx != info->idx))
     c28:	0925                	addi	s2,s2,9
     c2a:	0014                	0x14
     c2c:	0501                	addi	a0,a0,0
     c2e:	0901030b          	0x901030b
     c32:	0018                	0x18
     c34:	0501                	addi	a0,a0,0
     c36:	0315                	addi	t1,t1,5
     c38:	00040907          	vle8.v	v18,(s0),v0.t
     c3c:	0501                	addi	a0,a0,0
     c3e:	031c                	addi	a5,sp,384
     c40:	0900                	addi	s0,sp,144
     c42:	0004                	0x4
     c44:	0501                	addi	a0,a0,0
     c46:	0312                	slli	t1,t1,0x4
        return list;
     c48:	0901                	addi	s2,s2,0
     c4a:	0004                	0x4
     c4c:	0501                	addi	a0,a0,0
     c4e:	0321                	addi	t1,t1,8
            list = list->next;
     c50:	0900                	addi	s0,sp,144
     c52:	0008                	0x8
     c54:	0501                	addi	a0,a0,0
     c56:	0312                	slli	t1,t1,0x4
     c58:	0901                	addi	s2,s2,0
     c5a:	0004                	0x4
        while (list && ((list->info->data16 & 0xff) != info->data16))
     c5c:	0501                	addi	a0,a0,0
     c5e:	0305                	addi	t1,t1,1
     c60:	00040907          	vle8.v	v18,(s0),v0.t
     c64:	0501                	addi	a0,a0,0
     c66:	031d                	addi	t1,t1,7
     c68:	00200907          	0x200907
     c6c:	0501                	addi	a0,a0,0
     c6e:	0900031b          	0x900031b
     c72:	0014                	0x14
     c74:	0501                	addi	a0,a0,0
     c76:	031d                	addi	t1,t1,7
     c78:	0901                	addi	s2,s2,0
     c7a:	0004                	0x4
     c7c:	0501                	addi	a0,a0,0
     c7e:	0900031b          	0x900031b
     c82:	0014                	0x14
     c84:	0501                	addi	a0,a0,0
     c86:	031d                	addi	t1,t1,7
        return list;
     c88:	0901                	addi	s2,s2,0
     c8a:	0004                	0x4
}
     c8c:	0501                	addi	a0,a0,0
     c8e:	0900031b          	0x900031b
     c92:	0014                	0x14
     c94:	0501                	addi	a0,a0,0
     c96:	031d                	addi	t1,t1,7
     c98:	0901                	addi	s2,s2,0
     c9a:	0004                	0x4
{
     c9c:	0501                	addi	a0,a0,0
     c9e:	0900031b          	0x900031b
     ca2:	000c                	0xc
     ca4:	0501                	addi	a0,a0,0
     ca6:	0318                	addi	a4,sp,384
     ca8:	0904                	addi	s1,sp,144
     caa:	0004                	0x4
    list_head *next = NULL, *tmp;
     cac:	0501                	addi	a0,a0,0
     cae:	0316                	slli	t1,t1,0x5
    while (list)
     cb0:	0900                	addi	s0,sp,144
     cb2:	000c                	0xc
        tmp        = list->next;
     cb4:	0501                	addi	a0,a0,0
     cb6:	09010313          	addi	t1,sp,144
     cba:	0004                	0x4
     cbc:	0501                	addi	a0,a0,0
     cbe:	0308                	addi	a0,sp,384
        list->next = next;
     cc0:	0900                	addi	s0,sp,144
     cc2:	0004                	0x4
     cc4:	0501                	addi	a0,a0,0
     cc6:	031a                	slli	t1,t1,0x6
     cc8:	0902                	c.slli64	s2
     cca:	0004                	0x4
        next       = list;
     ccc:	0501                	addi	a0,a0,0
     cce:	0314                	addi	a3,sp,384
     cd0:	00080903          	lb	s2,0(a6) # ffff9000 <RAM_SIZE+0xfffe9000>
        list       = tmp;
     cd4:	0501                	addi	a0,a0,0
     cd6:	0308                	addi	a0,sp,384
     cd8:	0900                	addi	s0,sp,144
     cda:	0004                	0x4
    while (list)
     cdc:	0501                	addi	a0,a0,0
     cde:	0402002f          	vamoaddei8.v	v0,(tp),v0,v0,v0.t
     ce2:	0301                	addi	t1,t1,0
    return next;
     ce4:	0900                	addi	s0,sp,144
     ce6:	0004                	0x4
}
     ce8:	0501                	addi	a0,a0,0
     cea:	0021                	c.nop	8
     cec:	0402                	c.slli64	s0
     cee:	0301                	addi	t1,t1,0
     cf0:	0900                	addi	s0,sp,144
     cf2:	0004                	0x4
     cf4:	0501                	addi	a0,a0,0
     cf6:	09010317          	auipc	t1,0x9010
{
     cfa:	0004                	0x4
     cfc:	0501                	addi	a0,a0,0
     cfe:	0309                	addi	t1,t1,2
     d00:	0900                	addi	s0,sp,144
     d02:	0004                	0x4
     d04:	0501                	addi	a0,a0,0
     d06:	031a                	slli	t1,t1,0x6
     d08:	0902                	c.slli64	s2
     d0a:	0004                	0x4
     d0c:	0301                	addi	t1,t1,0
     d0e:	0901                	addi	s2,s2,0
     d10:	0004                	0x4
     d12:	0301                	addi	t1,t1,0
    insize = 1;
     d14:	0901                	addi	s2,s2,0
     d16:	0004                	0x4
     d18:	0501                	addi	a0,a0,0
     d1a:	0314                	addi	a3,sp,384
        p    = list;
     d1c:	0902                	c.slli64	s2
     d1e:	0008                	0x8
     d20:	0501                	addi	a0,a0,0
     d22:	0308                	addi	a0,sp,384
        list = NULL;
     d24:	0900                	addi	s0,sp,144
     d26:	0004                	0x4
        tail = NULL;
     d28:	0501                	addi	a0,a0,0
     d2a:	0402002f          	vamoaddei8.v	v0,(tp),v0,v0,v0.t
        nmerges = 0; /* count number of merges we do in this pass */
     d2e:	0301                	addi	t1,t1,0
        while (p)
     d30:	0900                	addi	s0,sp,144
     d32:	0008                	0x8
            nmerges++; /* there exists a merge to be done */
     d34:	0501                	addi	a0,a0,0
     d36:	0021                	c.nop	8
     d38:	0402                	c.slli64	s0
     d3a:	0301                	addi	t1,t1,0
     d3c:	0900                	addi	s0,sp,144
     d3e:	0004                	0x4
            q     = p;
     d40:	0501                	addi	a0,a0,0
     d42:	09010317          	auipc	t1,0x9010
     d46:	0004                	0x4
            psize = 0;
     d48:	0501                	addi	a0,a0,0
     d4a:	0309                	addi	t1,t1,2
            for (i = 0; i < insize; i++)
     d4c:	0900                	addi	s0,sp,144
     d4e:	0004                	0x4
     d50:	0501                	addi	a0,a0,0
     d52:	031a                	slli	t1,t1,0x6
                psize++;
     d54:	0902                	c.slli64	s2
     d56:	0004                	0x4
     d58:	0301                	addi	t1,t1,0
     d5a:	0901                	addi	s2,s2,0
     d5c:	000c                	0xc
     d5e:	0301                	addi	t1,t1,0
                q = q->next;
     d60:	0901                	addi	s2,s2,0
     d62:	000c                	0xc
     d64:	0501                	addi	a0,a0,0
     d66:	0308                	addi	a0,sp,384
     d68:	0919                	addi	s2,s2,6
     d6a:	0008                	0x8
                if (!q)
     d6c:	0501                	addi	a0,a0,0
     d6e:	0301                	addi	t1,t1,0
     d70:	0900                	addi	s0,sp,144
     d72:	0004                	0x4
            for (i = 0; i < insize; i++)
     d74:	0501                	addi	a0,a0,0
     d76:	04020033          	0x4020033
     d7a:	09020303          	lb	t1,144(tp) # 90 <__do_global_dtors_aux+0x34>
     d7e:	0004                	0x4
     d80:	0501                	addi	a0,a0,0
     d82:	0018                	0x18
     d84:	0402                	c.slli64	s0
     d86:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
     d8a:	0020                	addi	s0,sp,8
     d8c:	0501                	addi	a0,a0,0
     d8e:	002d                	c.nop	11
                    break;
     d90:	0402                	c.slli64	s0
     d92:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
            qsize = insize;
     d96:	0004                	0x4
     d98:	0501                	addi	a0,a0,0
     d9a:	001c                	0x1c
            while (psize > 0 || (qsize > 0 && q))
     d9c:	0402                	c.slli64	s0
     d9e:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
                if (psize == 0)
     da2:	0014                	0x14
     da4:	0501                	addi	a0,a0,0
     da6:	0402000f          	0x402000f
                    e = q;
     daa:	09010303          	lb	t1,144(sp)
     dae:	001c                	0x1c
                    q = q->next;
     db0:	0501                	addi	a0,a0,0
     db2:	001c                	0x1c
     db4:	0402                	c.slli64	s0
     db6:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
     dba:	0004                	0x4
                    qsize--;
     dbc:	0501                	addi	a0,a0,0
     dbe:	0402000f          	0x402000f
     dc2:	09010303          	lb	t1,144(sp)
     dc6:	0020                	addi	s0,sp,8
     dc8:	0501                	addi	a0,a0,0
     dca:	0028                	addi	a0,sp,8
                else if (qsize == 0 || !q)
     dcc:	0402                	c.slli64	s0
     dce:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
     dd2:	0004                	0x4
     dd4:	0501                	addi	a0,a0,0
     dd6:	001c                	0x1c
     dd8:	0402                	c.slli64	s0
     dda:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
                    e = p;
     dde:	0004                	0x4
     de0:	0501                	addi	a0,a0,0
     de2:	0402000f          	0x402000f
                    p = p->next;
     de6:	09010303          	lb	t1,144(sp)
     dea:	001c                	0x1c
     dec:	0501                	addi	a0,a0,0
     dee:	0028                	addi	a0,sp,8
                    psize--;
     df0:	0402                	c.slli64	s0
     df2:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
     df6:	0004                	0x4
     df8:	0501                	addi	a0,a0,0
     dfa:	001c                	0x1c
     dfc:	0402                	c.slli64	s0
     dfe:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
                else if (cmp(p->info, q->info, res) <= 0)
     e02:	0004                	0x4
     e04:	0501                	addi	a0,a0,0
     e06:	0402000f          	0x402000f
     e0a:	09010303          	lb	t1,144(sp)
     e0e:	001c                	0x1c
     e10:	0501                	addi	a0,a0,0
     e12:	0028                	addi	a0,sp,8
     e14:	0402                	c.slli64	s0
     e16:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
     e1a:	0004                	0x4
     e1c:	0501                	addi	a0,a0,0
     e1e:	001c                	0x1c
     e20:	0402                	c.slli64	s0
     e22:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
     e26:	0004                	0x4
     e28:	0501                	addi	a0,a0,0
     e2a:	0402000f          	0x402000f
                    e = p;
     e2e:	09010303          	lb	t1,144(sp)
     e32:	001c                	0x1c
                    p = p->next;
     e34:	0501                	addi	a0,a0,0
     e36:	001c                	0x1c
     e38:	0402                	c.slli64	s0
     e3a:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
     e3e:	0004                	0x4
                    psize--;
     e40:	0501                	addi	a0,a0,0
     e42:	0402000f          	0x402000f
     e46:	09010303          	lb	t1,144(sp)
     e4a:	001c                	0x1c
     e4c:	0501                	addi	a0,a0,0
     e4e:	0028                	addi	a0,sp,8
                    e = q;
     e50:	0402                	c.slli64	s0
     e52:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
     e56:	0004                	0x4
                    q = q->next;
     e58:	0501                	addi	a0,a0,0
     e5a:	001c                	0x1c
     e5c:	0402                	c.slli64	s0
     e5e:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
     e62:	0004                	0x4
                    qsize--;
     e64:	0501                	addi	a0,a0,0
     e66:	001f 0402 0303      	0x3030402001f
     e6c:	0978                	addi	a4,sp,156
     e6e:	001c                	0x1c
                if (tail)
     e70:	0501                	addi	a0,a0,0
     e72:	0001                	nop
     e74:	0402                	c.slli64	s0
     e76:	0301                	addi	t1,t1,0
                    tail->next = e;
     e78:	0900                	addi	s0,sp,144
     e7a:	000c                	0xc
     e7c:	0501                	addi	a0,a0,0
     e7e:	030c                	addi	a1,sp,384
     e80:	0008090f          	0x8090f
     e84:	0501                	addi	a0,a0,0
     e86:	0305                	addi	t1,t1,1
                    list = e;
     e88:	0900                	addi	s0,sp,144
     e8a:	0004                	0x4
     e8c:	0501                	addi	a0,a0,0
     e8e:	09020313          	addi	t1,tp,144 # 90 <__do_global_dtors_aux+0x34>
                tail = e;
     e92:	0004                	0x4
     e94:	0501                	addi	a0,a0,0
     e96:	0310                	addi	a2,sp,384
            while (psize > 0 || (qsize > 0 && q))
     e98:	0900                	addi	s0,sp,144
     e9a:	0004                	0x4
     e9c:	0501                	addi	a0,a0,0
     e9e:	032a                	slli	t1,t1,0xa
     ea0:	0900                	addi	s0,sp,144
     ea2:	000c                	0xc
     ea4:	0501                	addi	a0,a0,0
     ea6:	031e                	slli	t1,t1,0x7
     ea8:	0900                	addi	s0,sp,144
     eaa:	0004                	0x4
     eac:	0501                	addi	a0,a0,0
     eae:	030c                	addi	a1,sp,384
            p = q;
     eb0:	0900                	addi	s0,sp,144
     eb2:	0004                	0x4
     eb4:	0501                	addi	a0,a0,0
     eb6:	0901031b          	0x901031b
        while (p)
     eba:	0004                	0x4
     ebc:	0501                	addi	a0,a0,0
     ebe:	0026                	c.slli	zero,0x9
        tail->next = NULL;
     ec0:	0402                	c.slli64	s0
     ec2:	0302                	c.slli64	t1
     ec4:	097d                	addi	s2,s2,31
     ec6:	000c                	0xc
        if (nmerges <= 1) /* allow for nmerges==0, the empty list case */
     ec8:	0501                	addi	a0,a0,0
     eca:	0005                	c.nop	1
     ecc:	0402                	c.slli64	s0
     ece:	0301                	addi	t1,t1,0
     ed0:	0900                	addi	s0,sp,144
     ed2:	000c                	0xc
            return list;
     ed4:	0501                	addi	a0,a0,0
     ed6:	030c                	addi	a1,sp,384
     ed8:	0905                	addi	s2,s2,1
     eda:	000c                	0xc
        insize *= 2;
     edc:	0501                	addi	a0,a0,0
     ede:	0305                	addi	t1,t1,1
     ee0:	0900                	addi	s0,sp,144
     ee2:	0004                	0x4
     ee4:	0501                	addi	a0,a0,0
     ee6:	0025                	c.nop	9
        p    = list;
     ee8:	0402                	c.slli64	s0
     eea:	09010303          	lb	t1,144(sp)
}
     eee:	0004                	0x4
     ef0:	0501                	addi	a0,a0,0
     ef2:	0402002b          	0x402002b
     ef6:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
     efa:	0020                	addi	s0,sp,8
     efc:	0501                	addi	a0,a0,0
     efe:	04020013          	addi	zero,tp,64 # 40 <_start+0x30>
{
     f02:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
     f06:	0004                	0x4
     f08:	0501                	addi	a0,a0,0
     f0a:	0402002b          	0x402002b
     f0e:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
     f12:	0004                	0x4
    core_results *res        = (core_results *)pres;
     f14:	0501                	addi	a0,a0,0
     f16:	0019                	c.nop	6
     f18:	0402                	c.slli64	s0
     f1a:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    ee_u32        iterations = res->iterations;
     f1e:	0014                	0x14
     f20:	0501                	addi	a0,a0,0
     f22:	04020023          	sb	zero,64(tp) # 40 <_start+0x30>
     f26:	097f0303          	lb	t1,151(t5)
    res->crc                 = 0;
     f2a:	001c                	0x1c
     f2c:	0501                	addi	a0,a0,0
     f2e:	0005                	c.nop	1
    res->crclist             = 0;
     f30:	0402                	c.slli64	s0
     f32:	0301                	addi	t1,t1,0
     f34:	0900                	addi	s0,sp,144
     f36:	000c                	0xc
    res->crcmatrix           = 0;
     f38:	0501                	addi	a0,a0,0
     f3a:	030c                	addi	a1,sp,384
     f3c:	00080903          	lb	s2,0(a6)
    res->crcstate            = 0;
     f40:	0501                	addi	a0,a0,0
     f42:	0305                	addi	t1,t1,1
     f44:	0900                	addi	s0,sp,144
     f46:	0004                	0x4
    for (i = 0; i < iterations; i++)
     f48:	0501                	addi	a0,a0,0
     f4a:	09030313          	addi	t1,t1,144 # 9010dd2 <RAM_SIZE+0x9000dd2>
     f4e:	0004                	0x4
        crc      = core_bench_list(res, 1);
     f50:	0501                	addi	a0,a0,0
     f52:	0310                	addi	a2,sp,384
     f54:	0900                	addi	s0,sp,144
     f56:	0004                	0x4
     f58:	0501                	addi	a0,a0,0
     f5a:	032a                	slli	t1,t1,0xa
     f5c:	0900                	addi	s0,sp,144
     f5e:	000c                	0xc
     f60:	0501                	addi	a0,a0,0
     f62:	031e                	slli	t1,t1,0x7
        res->crc = crcu16(crc, res->crc);
     f64:	0900                	addi	s0,sp,144
     f66:	0004                	0x4
     f68:	0501                	addi	a0,a0,0
     f6a:	030c                	addi	a1,sp,384
     f6c:	0900                	addi	s0,sp,144
     f6e:	0004                	0x4
     f70:	0501                	addi	a0,a0,0
     f72:	0316                	slli	t1,t1,0x5
     f74:	0902                	c.slli64	s2
     f76:	0004                	0x4
     f78:	0501                	addi	a0,a0,0
     f7a:	030d                	addi	t1,t1,3
     f7c:	0900                	addi	s0,sp,144
     f7e:	0004                	0x4
     f80:	0501                	addi	a0,a0,0
     f82:	0035                	c.nop	13
     f84:	0402                	c.slli64	s0
     f86:	09020303          	lb	t1,144(tp) # 90 <__do_global_dtors_aux+0x34>
     f8a:	0004                	0x4
        crc      = core_bench_list(res, -1);
     f8c:	0501                	addi	a0,a0,0
     f8e:	0046                	c.slli	zero,0x11
     f90:	0402                	c.slli64	s0
     f92:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
     f96:	0020                	addi	s0,sp,8
     f98:	0501                	addi	a0,a0,0
     f9a:	004c                	addi	a1,sp,4
     f9c:	0402                	c.slli64	s0
     f9e:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
        res->crc = crcu16(crc, res->crc);
     fa2:	0004                	0x4
     fa4:	0501                	addi	a0,a0,0
     fa6:	0029                	c.nop	10
     fa8:	0402                	c.slli64	s0
     faa:	097f0303          	lb	t1,151(t5)
     fae:	0018                	0x18
     fb0:	0501                	addi	a0,a0,0
     fb2:	003a                	c.slli	zero,0xe
     fb4:	0402                	c.slli64	s0
     fb6:	09010303          	lb	t1,144(sp)
     fba:	0008                	0x8
     fbc:	0501                	addi	a0,a0,0
     fbe:	0015                	c.nop	5
     fc0:	0402                	c.slli64	s0
     fc2:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
     fc6:	0004                	0x4
        if (i == 0)
     fc8:	0501                	addi	a0,a0,0
     fca:	0031                	c.nop	12
     fcc:	0402                	c.slli64	s0
     fce:	097e0303          	lb	t1,151(t3) # 1a097 <RAM_SIZE+0xa097>
            res->crclist = res->crc;
     fd2:	0024                	addi	s1,sp,8
     fd4:	0501                	addi	a0,a0,0
     fd6:	000d                	c.nop	3
     fd8:	0402                	c.slli64	s0
     fda:	0301                	addi	t1,t1,0
     fdc:	0900                	addi	s0,sp,144
     fde:	000c                	0xc
    for (i = 0; i < iterations; i++)
     fe0:	0501                	addi	a0,a0,0
     fe2:	030e                	slli	t1,t1,0x3
     fe4:	00080903          	lb	s2,0(a6)
     fe8:	0501                	addi	a0,a0,0
     fea:	0026                	c.slli	zero,0x9
     fec:	0402                	c.slli64	s0
     fee:	0302                	c.slli64	t1
     ff0:	0978                	addi	a4,sp,156
     ff2:	000c                	0xc
     ff4:	0501                	addi	a0,a0,0
     ff6:	0005                	c.nop	1
    return NULL;
     ff8:	0402                	c.slli64	s0
     ffa:	0301                	addi	t1,t1,0
}
     ffc:	0900                	addi	s0,sp,144
     ffe:	000c                	0xc
    1000:	0501                	addi	a0,a0,0
    1002:	030c                	addi	a1,sp,384
    1004:	090c                	addi	a1,sp,144
    1006:	000c                	0xc
    1008:	0501                	addi	a0,a0,0
    100a:	0305                	addi	t1,t1,1
    100c:	0900                	addi	s0,sp,144
    100e:	0004                	0x4
{
    1010:	0501                	addi	a0,a0,0
    1012:	09020317          	auipc	t1,0x9020
    1016:	0004                	0x4
    1018:	0501                	addi	a0,a0,0
    101a:	031e                	slli	t1,t1,0x7
    101c:	0900                	addi	s0,sp,144
    101e:	0020                	addi	s0,sp,8
    1020:	0501                	addi	a0,a0,0
    1022:	030c                	addi	a1,sp,384
    1024:	0900                	addi	s0,sp,144
    1026:	0004                	0x4
    int   argc = 0;
    1028:	0501                	addi	a0,a0,0
    102a:	031f 0902 0004      	0x40902031f
    ee_u16       i, j = 0, num_algorithms = 0;
    1030:	0501                	addi	a0,a0,0
    1032:	0335                	addi	t1,t1,13
    ee_s16       known_id = -1, total_errors = 0;
    1034:	0901                	addi	s2,s2,0
    1036:	0008                	0x8
    1038:	0501                	addi	a0,a0,0
    103a:	031f 097f 001c      	0x1c097f031f
    ee_u16       seedcrc = 0;
    1040:	0501                	addi	a0,a0,0
    1042:	09000317          	auipc	t1,0x9000
    portable_init(&(results[0].port), &argc, argv);
    1046:	0020                	addi	s0,sp,8
    1048:	0501                	addi	a0,a0,0
    104a:	031f 0900 0004      	0x40900031f
    1050:	0501                	addi	a0,a0,0
    1052:	031d                	addi	t1,t1,7
    1054:	0900                	addi	s0,sp,144
    1056:	0010                	0x10
    1058:	0501                	addi	a0,a0,0
    105a:	09030317          	auipc	t1,0x9030
    105e:	001c                	0x1c
    1060:	0501                	addi	a0,a0,0
    1062:	031e                	slli	t1,t1,0x7
    results[0].seed1      = get_seed(1);
    1064:	0900                	addi	s0,sp,144
    1066:	0020                	addi	s0,sp,8
    1068:	0501                	addi	a0,a0,0
    106a:	030c                	addi	a1,sp,384
    106c:	0900                	addi	s0,sp,144
    106e:	0004                	0x4
    1070:	0501                	addi	a0,a0,0
    1072:	030d                	addi	t1,t1,3
    1074:	0902                	c.slli64	s2
    1076:	0004                	0x4
    1078:	0501                	addi	a0,a0,0
    107a:	0330                	addi	a2,sp,392
    results[0].seed2      = get_seed(2);
    107c:	0902                	c.slli64	s2
    107e:	0024                	addi	s1,sp,8
    1080:	0501                	addi	a0,a0,0
    1082:	031e                	slli	t1,t1,0x7
    1084:	0900                	addi	s0,sp,144
    1086:	0020                	addi	s0,sp,8
    1088:	0501                	addi	a0,a0,0
    108a:	0338                	addi	a4,sp,392
    108c:	0901                	addi	s2,s2,0
    108e:	0004                	0x4
    1090:	0501                	addi	a0,a0,0
    1092:	0340                	addi	s0,sp,388
    results[0].seed3      = get_seed(3);
    1094:	0900                	addi	s0,sp,144
    1096:	0020                	addi	s0,sp,8
    1098:	0501                	addi	a0,a0,0
    109a:	030d                	addi	t1,t1,3
    109c:	097d                	addi	s2,s2,31
    109e:	0004                	0x4
    10a0:	0501                	addi	a0,a0,0
    10a2:	032a                	slli	t1,t1,0xa
    10a4:	0904                	addi	s1,sp,144
    10a6:	0004                	0x4
    10a8:	0501                	addi	a0,a0,0
    10aa:	030d                	addi	t1,t1,3
    results[0].iterations = get_seed_32(4);
    10ac:	097c                	addi	a5,sp,156
    10ae:	0004                	0x4
    10b0:	0501                	addi	a0,a0,0
    10b2:	09060317          	auipc	t1,0x9060
    10b6:	0028                	addi	a0,sp,8
    10b8:	0501                	addi	a0,a0,0
    10ba:	031e                	slli	t1,t1,0x7
    results[0].execs = get_seed_32(5);
    10bc:	0900                	addi	s0,sp,144
    10be:	0020                	addi	s0,sp,8
    10c0:	0501                	addi	a0,a0,0
    10c2:	030c                	addi	a1,sp,384
    10c4:	0900                	addi	s0,sp,144
    10c6:	0004                	0x4
    10c8:	0501                	addi	a0,a0,0
    10ca:	030d                	addi	t1,t1,3
    if (results[0].execs == 0)
    10cc:	0902                	c.slli64	s2
    10ce:	0004                	0x4
    10d0:	0501                	addi	a0,a0,0
    10d2:	09010347          	fmsub.s	ft6,ft2,fa6,ft1,rne
        results[0].execs = ALL_ALGORITHMS_MASK;
    10d6:	0028                	addi	a0,sp,8
    10d8:	0501                	addi	a0,a0,0
    10da:	030d                	addi	t1,t1,3
    if ((results[0].seed1 == 0) && (results[0].seed2 == 0)
    10dc:	097f                	0x97f
    10de:	001c                	0x1c
    10e0:	0501                	addi	a0,a0,0
    10e2:	04020023          	sb	zero,64(tp) # 40 <_start+0x30>
    10e6:	0302                	c.slli64	t1
    10e8:	000c096f          	jal	s2,c10e8 <RAM_SIZE+0xb10e8>
        && (results[0].seed3 == 0))
    10ec:	0501                	addi	a0,a0,0
    10ee:	0005                	c.nop	1
    10f0:	0402                	c.slli64	s0
    10f2:	0301                	addi	t1,t1,0
        results[0].seed1 = 0;
    10f4:	0900                	addi	s0,sp,144
    10f6:	000c                	0xc
        results[0].seed2 = 0;
    10f8:	0501                	addi	a0,a0,0
    10fa:	09170313          	addi	t1,a4,145
        results[0].seed3 = 0x66;
    10fe:	0008                	0x8
    1100:	0501                	addi	a0,a0,0
    1102:	0308                	addi	a0,sp,384
    if ((results[0].seed1 == 1) && (results[0].seed2 == 0)
    1104:	0900                	addi	s0,sp,144
    1106:	0004                	0x4
    1108:	0501                	addi	a0,a0,0
    110a:	0312                	slli	t1,t1,0x4
    110c:	0902                	c.slli64	s2
    110e:	0004                	0x4
    1110:	0501                	addi	a0,a0,0
    1112:	031f 0902 0004      	0x40902031f
        && (results[0].seed3 == 0))
    1118:	0501                	addi	a0,a0,0
    111a:	0901030f          	0x901030f
    111e:	0008                	0x8
        results[0].seed1 = 0x3415;
    1120:	0501                	addi	a0,a0,0
    1122:	09020323          	sb	a6,134(tp) # 86 <__do_global_dtors_aux+0x2a>
    1126:	0004                	0x4
    1128:	0501                	addi	a0,a0,0
    112a:	030d                	addi	t1,t1,3
        results[0].seed2 = 0x3415;
    112c:	0901                	addi	s2,s2,0
    112e:	0018                	0x18
    1130:	0301                	addi	t1,t1,0
    1132:	0901                	addi	s2,s2,0
    1134:	0004                	0x4
    1136:	0301                	addi	t1,t1,0
        results[0].seed3 = 0x66;
    1138:	0901                	addi	s2,s2,0
    113a:	000c                	0xc
    113c:	0501                	addi	a0,a0,0
    113e:	0901031b          	0x901031b
for (i = 0; i < MULTITHREAD; i++)
    1142:	0004                	0x4
    1144:	0501                	addi	a0,a0,0
    1146:	097a030f          	0x97a030f
    results[i].memblock[0] = stack_memblock + i * TOTAL_DATA_SIZE;
    114a:	0014                	0x14
    114c:	0501                	addi	a0,a0,0
    114e:	0311                	addi	t1,t1,4
    1150:	090a                	slli	s2,s2,0x2
    1152:	0008                	0x8
    1154:	0501                	addi	a0,a0,0
    1156:	030c                	addi	a1,sp,384
    1158:	0901                	addi	s2,s2,0
    115a:	0008                	0x8
    115c:	0501                	addi	a0,a0,0
    115e:	0315                	addi	t1,t1,5
    1160:	00080903          	lb	s2,0(a6)
    1164:	0501                	addi	a0,a0,0
    1166:	031f 0901 0008      	0x80901031f
    116c:	0501                	addi	a0,a0,0
    116e:	0329                	addi	t1,t1,10
    1170:	0900                	addi	s0,sp,144
    1172:	0004                	0x4
    1174:	0501                	addi	a0,a0,0
    1176:	0324                	addi	s1,sp,392
    1178:	0900                	addi	s0,sp,144
    117a:	0010                	0x10
    117c:	0501                	addi	a0,a0,0
    117e:	031f 0900 0004      	0x40900031f
    1184:	0501                	addi	a0,a0,0
    1186:	0305                	addi	t1,t1,1
    1188:	00140903          	lb	s2,1(s0)
    118c:	0301                	addi	t1,t1,0
    118e:	0911                	addi	s2,s2,4
    1190:	0004                	0x4
    1192:	0301                	addi	t1,t1,0
    1194:	0902                	c.slli64	s2
    1196:	000c                	0xc
    1198:	0501                	addi	a0,a0,0
    119a:	0312                	slli	t1,t1,0x4
    results[i].size        = TOTAL_DATA_SIZE;
    119c:	0901                	addi	s2,s2,0
    119e:	0004                	0x4
    11a0:	0501                	addi	a0,a0,0
    11a2:	0902030f          	0x902030f
    11a6:	0008                	0x8
    11a8:	0301                	addi	t1,t1,0
    11aa:	0901                	addi	s2,s2,0
    11ac:	001c                	0x1c
    11ae:	0301                	addi	t1,t1,0
    11b0:	0901                	addi	s2,s2,0
    11b2:	001c                	0x1c
    11b4:	0501                	addi	a0,a0,0
    11b6:	031f 0901 001c      	0x1c0901031f
    11bc:	0501                	addi	a0,a0,0
    11be:	0900030f          	0x900030f
    results[i].seed1       = results[0].seed1;
    11c2:	0004                	0x4
    11c4:	0501                	addi	a0,a0,0
    11c6:	0305                	addi	t1,t1,1
    11c8:	0902                	c.slli64	s2
    11ca:	0020                	addi	s0,sp,8
    11cc:	0501                	addi	a0,a0,0
    11ce:	0316                	slli	t1,t1,0x5
    11d0:	00680903          	lb	s2,6(a6)
    11d4:	0501                	addi	a0,a0,0
    11d6:	030d                	addi	t1,t1,3
    11d8:	0901                	addi	s2,s2,0
    11da:	0004                	0x4
    11dc:	0301                	addi	t1,t1,0
    11de:	0901                	addi	s2,s2,0
    11e0:	000c                	0xc
    11e2:	0501                	addi	a0,a0,0
    results[i].seed2       = results[0].seed2;
    11e4:	0316                	slli	t1,t1,0x5
    11e6:	00040903          	lb	s2,0(s0)
    11ea:	0501                	addi	a0,a0,0
    11ec:	030d                	addi	t1,t1,3
    11ee:	0901                	addi	s2,s2,0
    11f0:	0008                	0x8
    11f2:	0301                	addi	t1,t1,0
    11f4:	0901                	addi	s2,s2,0
    11f6:	000c                	0xc
    11f8:	0501                	addi	a0,a0,0
    11fa:	0316                	slli	t1,t1,0x5
    11fc:	00040903          	lb	s2,0(s0)
    1200:	0501                	addi	a0,a0,0
    1202:	030d                	addi	t1,t1,3
    1204:	0901                	addi	s2,s2,0
    1206:	0008                	0x8
    results[i].seed3       = results[0].seed3;
    1208:	0301                	addi	t1,t1,0
    120a:	0901                	addi	s2,s2,0
    120c:	000c                	0xc
    120e:	0501                	addi	a0,a0,0
    1210:	0316                	slli	t1,t1,0x5
    1212:	0902                	c.slli64	s2
    1214:	0004                	0x4
    1216:	0501                	addi	a0,a0,0
    1218:	030d                	addi	t1,t1,3
    121a:	0901                	addi	s2,s2,0
    121c:	0008                	0x8
    121e:	0301                	addi	t1,t1,0
    1220:	0901                	addi	s2,s2,0
    1222:	000c                	0xc
    1224:	0501                	addi	a0,a0,0
    1226:	0316                	slli	t1,t1,0x5
    1228:	00040903          	lb	s2,0(s0)
    results[i].err         = 0;
    122c:	0501                	addi	a0,a0,0
    122e:	030d                	addi	t1,t1,3
    1230:	0901                	addi	s2,s2,0
    1232:	0008                	0x8
    1234:	0301                	addi	t1,t1,0
    1236:	0901                	addi	s2,s2,0
    1238:	000c                	0xc
    123a:	0501                	addi	a0,a0,0
    123c:	031a                	slli	t1,t1,0x6
    123e:	0902                	c.slli64	s2
    1240:	0004                	0x4
    1242:	0501                	addi	a0,a0,0
    1244:	030d                	addi	t1,t1,3
    1246:	0901                	addi	s2,s2,0
    1248:	0008                	0x8
    124a:	0501                	addi	a0,a0,0
    results[i].execs       = results[0].execs;
    124c:	0308                	addi	a0,sp,384
    124e:	0902                	c.slli64	s2
    1250:	0004                	0x4
    1252:	0501                	addi	a0,a0,0
    1254:	0310                	addi	a2,sp,384
    1256:	0902                	c.slli64	s2
    1258:	0008                	0x8
    125a:	0501                	addi	a0,a0,0
    125c:	0309                	addi	t1,t1,2
    125e:	0900                	addi	s0,sp,144
    1260:	0004                	0x4
    1262:	0501                	addi	a0,a0,0
    1264:	09020317          	auipc	t1,0x9020
    1268:	0004                	0x4
    126a:	0501                	addi	a0,a0,0
    126c:	031c                	addi	a5,sp,384
    126e:	0900                	addi	s0,sp,144
for (i = 0; i < MULTITHREAD; i++)
    1270:	0004                	0x4
    1272:	0301                	addi	t1,t1,0
    1274:	0901                	addi	s2,s2,0
    1276:	001c                	0x1c
    1278:	0501                	addi	a0,a0,0
    127a:	09000323          	sb	a6,134(zero) # 86 <__do_global_dtors_aux+0x2a>
    127e:	0020                	addi	s0,sp,8
    1280:	0501                	addi	a0,a0,0
    1282:	0310                	addi	a2,sp,384
    for (i = 0; i < NUM_ALGORITHMS; i++)
    1284:	0900                	addi	s0,sp,144
    1286:	0004                	0x4
    1288:	0501                	addi	a0,a0,0
    128a:	031f 0901 0004      	0x40901031f
        if ((1 << (ee_u32)i) & results[0].execs)
    1290:	0501                	addi	a0,a0,0
    1292:	0339                	addi	t1,t1,14
    1294:	0900                	addi	s0,sp,144
    1296:	0020                	addi	s0,sp,8
    1298:	0501                	addi	a0,a0,0
    129a:	0311                	addi	t1,t1,4
    129c:	0900                	addi	s0,sp,144
    129e:	0014                	0x14
    12a0:	0301                	addi	t1,t1,0
    12a2:	0902                	c.slli64	s2
    12a4:	0004                	0x4
    12a6:	0501                	addi	a0,a0,0
            num_algorithms++;
    12a8:	0325                	addi	t1,t1,9
    12aa:	0902                	c.slli64	s2
    12ac:	0004                	0x4
    12ae:	0501                	addi	a0,a0,0
    12b0:	0311                	addi	t1,t1,4
    12b2:	097e                	slli	s2,s2,0x1f
    for (i = 0; i < NUM_ALGORITHMS; i++)
    12b4:	0020                	addi	s0,sp,8
    12b6:	0501                	addi	a0,a0,0
    12b8:	0329                	addi	t1,t1,10
    12ba:	00040903          	lb	s2,0(s0)
    12be:	0501                	addi	a0,a0,0
    12c0:	0311                	addi	t1,t1,4
    12c2:	097d                	addi	s2,s2,31
    12c4:	0014                	0x14
    12c6:	0501                	addi	a0,a0,0
    12c8:	0904031b          	0x904031b
    for (i = 0; i < MULTITHREAD; i++)
    12cc:	0010                	0x10
    12ce:	0501                	addi	a0,a0,0
    12d0:	031f 0900 0020      	0x200900031f
        results[i].size = results[i].size / num_algorithms;
    12d6:	0501                	addi	a0,a0,0
    12d8:	031c                	addi	a5,sp,384
    12da:	0902                	c.slli64	s2
    12dc:	0038                	addi	a4,sp,8
    12de:	0501                	addi	a0,a0,0
    12e0:	09000323          	sb	a6,134(zero) # 86 <__do_global_dtors_aux+0x2a>
    12e4:	0020                	addi	s0,sp,8
    12e6:	0501                	addi	a0,a0,0
    12e8:	0310                	addi	a2,sp,384
    12ea:	0900                	addi	s0,sp,144
    12ec:	0004                	0x4
    12ee:	0501                	addi	a0,a0,0
    12f0:	031f 0901 0004      	0x40901031f
    12f6:	0501                	addi	a0,a0,0
    12f8:	033d                	addi	t1,t1,15
    12fa:	0900                	addi	s0,sp,144
    12fc:	0020                	addi	s0,sp,8
    12fe:	0501                	addi	a0,a0,0
    1300:	0311                	addi	t1,t1,4
    1302:	0900                	addi	s0,sp,144
    1304:	0014                	0x14
    1306:	0301                	addi	t1,t1,0
    1308:	0902                	c.slli64	s2
    130a:	0004                	0x4
    130c:	0501                	addi	a0,a0,0
    130e:	0325                	addi	t1,t1,9
    1310:	0902                	c.slli64	s2
    1312:	0004                	0x4
    1314:	0501                	addi	a0,a0,0
    1316:	0311                	addi	t1,t1,4
    1318:	097e                	slli	s2,s2,0x1f
    131a:	0020                	addi	s0,sp,8
    131c:	0501                	addi	a0,a0,0
    131e:	0903032b          	0x903032b
    1322:	0004                	0x4
    1324:	0501                	addi	a0,a0,0
    1326:	0311                	addi	t1,t1,4
    1328:	097d                	addi	s2,s2,31
    132a:	0014                	0x14
    for (i = 0; i < MULTITHREAD; i++)
    132c:	0501                	addi	a0,a0,0
    132e:	0904031b          	0x904031b
    1332:	0010                	0x10
    1334:	0501                	addi	a0,a0,0
    1336:	031f 0900 0020      	0x200900031f
    133c:	0501                	addi	a0,a0,0
    133e:	031c                	addi	a5,sp,384
    for (i = 0; i < NUM_ALGORITHMS; i++)
    1340:	0902                	c.slli64	s2
    1342:	0038                	addi	a4,sp,8
    1344:	0501                	addi	a0,a0,0
    1346:	09000323          	sb	a6,134(zero) # 86 <__do_global_dtors_aux+0x2a>
        if ((1 << (ee_u32)i) & results[0].execs)
    134a:	0020                	addi	s0,sp,8
    134c:	0501                	addi	a0,a0,0
    134e:	0310                	addi	a2,sp,384
    1350:	0900                	addi	s0,sp,144
    1352:	0004                	0x4
    1354:	0501                	addi	a0,a0,0
    1356:	031f 0901 0004      	0x40901031f
    135c:	0501                	addi	a0,a0,0
    135e:	0900033b          	0x900033b
    1362:	0020                	addi	s0,sp,8
            for (ctx = 0; ctx < MULTITHREAD; ctx++)
    1364:	0501                	addi	a0,a0,0
    1366:	0311                	addi	t1,t1,4
    1368:	0900                	addi	s0,sp,144
    136a:	0014                	0x14
                    = (char *)(results[ctx].memblock[0]) + results[0].size * j;
    136c:	0301                	addi	t1,t1,0
    136e:	0902                	c.slli64	s2
    1370:	0004                	0x4
    1372:	0501                	addi	a0,a0,0
    1374:	0325                	addi	t1,t1,9
    1376:	0902                	c.slli64	s2
    1378:	0004                	0x4
    137a:	0501                	addi	a0,a0,0
    137c:	0311                	addi	t1,t1,4
    137e:	097e                	slli	s2,s2,0x1f
    1380:	0020                	addi	s0,sp,8
    1382:	0501                	addi	a0,a0,0
    1384:	032a                	slli	t1,t1,0xa
    1386:	00040903          	lb	s2,0(s0)
    138a:	0501                	addi	a0,a0,0
    138c:	0311                	addi	t1,t1,4
    138e:	097d                	addi	s2,s2,31
    1390:	0014                	0x14
    1392:	0501                	addi	a0,a0,0
    1394:	0904031b          	0x904031b
    1398:	0010                	0x10
    139a:	0501                	addi	a0,a0,0
    139c:	031f 0900 0020      	0x200900031f
    13a2:	0501                	addi	a0,a0,0
    13a4:	04020027          	vsuxei8.v	v0,(tp),v0,v0.t
                results[ctx].memblock[i + 1]
    13a8:	0302                	c.slli64	t1
    13aa:	0902                	c.slli64	s2
    13ac:	0038                	addi	a4,sp,8
    13ae:	0501                	addi	a0,a0,0
                    = (char *)(results[ctx].memblock[0]) + results[0].size * j;
    13b0:	001a                	c.slli	zero,0x6
    13b2:	0402                	c.slli64	s0
    13b4:	0302                	c.slli64	t1
    13b6:	0900                	addi	s0,sp,144
    13b8:	0028                	addi	a0,sp,8
    13ba:	0501                	addi	a0,a0,0
    13bc:	0030                	addi	a2,sp,8
    13be:	0402                	c.slli64	s0
    13c0:	0302                	c.slli64	t1
    13c2:	0962                	slli	s2,s2,0x18
    13c4:	0014                	0x14
    13c6:	0501                	addi	a0,a0,0
    13c8:	04020017          	auipc	zero,0x4020
    13cc:	0301                	addi	t1,t1,0
    13ce:	0900                	addi	s0,sp,144
    13d0:	000c                	0xc
    13d2:	0501                	addi	a0,a0,0
    13d4:	0009                	c.nop	2
    13d6:	0402                	c.slli64	s0
            for (ctx = 0; ctx < MULTITHREAD; ctx++)
    13d8:	0301                	addi	t1,t1,0
    13da:	0900                	addi	s0,sp,144
    13dc:	000c                	0xc
    13de:	0501                	addi	a0,a0,0
    13e0:	0315                	addi	t1,t1,5
    13e2:	0921                	addi	s2,s2,8
    13e4:	0004                	0x4
    13e6:	0501                	addi	a0,a0,0
    13e8:	0312                	slli	t1,t1,0x4
    13ea:	0900                	addi	s0,sp,144
            j++;
    13ec:	0010                	0x10
    13ee:	0501                	addi	a0,a0,0
    13f0:	0344                	addi	s1,sp,388
    13f2:	0902                	c.slli64	s2
    13f4:	0014                	0x14
    13f6:	0501                	addi	a0,a0,0
    for (i = 0; i < NUM_ALGORITHMS; i++)
    13f8:	0305                	addi	t1,t1,1
    13fa:	0900                	addi	s0,sp,144
    13fc:	0004                	0x4
    13fe:	0301                	addi	t1,t1,0
    1400:	0901                	addi	s2,s2,0
    1402:	0010                	0x10
    1404:	0301                	addi	t1,t1,0
    1406:	0908                	addi	a0,sp,144
    1408:	0010                	0x10
    140a:	0501                	addi	a0,a0,0
    140c:	0309                	addi	t1,t1,2
    140e:	0901                	addi	s2,s2,0
    for (i = 0; i < MULTITHREAD; i++)
    1410:	001c                	0x1c
    1412:	0501                	addi	a0,a0,0
    1414:	0308                	addi	a0,sp,384
    1416:	0900                	addi	s0,sp,144
        if (results[i].execs & ID_LIST)
    1418:	000c                	0xc
    141a:	0501                	addi	a0,a0,0
    141c:	0334                	addi	a3,sp,392
    141e:	0902                	c.slli64	s2
    1420:	0004                	0x4
    1422:	0501                	addi	a0,a0,0
    1424:	0328                	addi	a0,sp,392
    1426:	0900                	addi	s0,sp,144
    1428:	0004                	0x4
    142a:	0501                	addi	a0,a0,0
    142c:	0319                	addi	t1,t1,6
    142e:	0901                	addi	s2,s2,0
    1430:	001c                	0x1c
    1432:	0501                	addi	a0,a0,0
    1434:	0309                	addi	t1,t1,2
    1436:	097e                	slli	s2,s2,0x1f
    1438:	000c                	0xc
    143a:	0301                	addi	t1,t1,0
    143c:	0904                	addi	s1,sp,144
    143e:	0020                	addi	s0,sp,8
            results[i].list = core_list_init(
    1440:	0501                	addi	a0,a0,0
    1442:	0308                	addi	a0,sp,384
    1444:	0900                	addi	s0,sp,144
    1446:	000c                	0xc
                results[0].size, results[i].memblock[1], results[i].seed1);
    1448:	0501                	addi	a0,a0,0
    144a:	0309                	addi	t1,t1,2
    144c:	0902                	c.slli64	s2
    144e:	0008                	0x8
    1450:	0501                	addi	a0,a0,0
    1452:	0315                	addi	t1,t1,5
    1454:	0902                	c.slli64	s2
    1456:	000c                	0xc
    1458:	0501                	addi	a0,a0,0
    145a:	0904033f 0501001c 	0x501001c0904033f
    1462:	0900030f          	0x900030f
            results[i].list = core_list_init(
    1466:	0004                	0x4
    1468:	0501                	addi	a0,a0,0
    146a:	0305                	addi	t1,t1,1
    146c:	097f                	0x97f
    146e:	0008                	0x8
    1470:	0301                	addi	t1,t1,0
    1472:	0902                	c.slli64	s2
    1474:	0020                	addi	s0,sp,8
    1476:	0301                	addi	t1,t1,0
    1478:	0901                	addi	s2,s2,0
    147a:	0014                	0x14
    147c:	0301                	addi	t1,t1,0
    147e:	0904                	addi	s1,sp,144
    1480:	0014                	0x14
    1482:	0301                	addi	t1,t1,0
    1484:	0902                	c.slli64	s2
    1486:	0014                	0x14
    1488:	0501                	addi	a0,a0,0
    148a:	09010313          	addi	t1,sp,144
    148e:	0014                	0x14
    1490:	0501                	addi	a0,a0,0
    1492:	031a                	slli	t1,t1,0x6
    1494:	0900                	addi	s0,sp,144
    1496:	0004                	0x4
    1498:	0501                	addi	a0,a0,0
    149a:	0308                	addi	a0,sp,384
    149c:	0900                	addi	s0,sp,144
    149e:	0004                	0x4
    14a0:	0501                	addi	a0,a0,0
    14a2:	0310                	addi	a2,sp,384
    14a4:	0901                	addi	s2,s2,0
    14a6:	0004                	0x4
    14a8:	0501                	addi	a0,a0,0
    14aa:	0309                	addi	t1,t1,2
    14ac:	0900                	addi	s0,sp,144
    14ae:	0004                	0x4
    14b0:	0501                	addi	a0,a0,0
    14b2:	000d                	c.nop	3
        if (results[i].execs & ID_MATRIX)
    14b4:	0402                	c.slli64	s0
    14b6:	09010303          	lb	t1,144(sp)
    14ba:	0004                	0x4
    14bc:	0501                	addi	a0,a0,0
    14be:	0044                	addi	s1,sp,4
    14c0:	0402                	c.slli64	s0
    14c2:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    14c6:	0004                	0x4
    14c8:	0501                	addi	a0,a0,0
    14ca:	000d                	c.nop	3
    14cc:	0402                	c.slli64	s0
    14ce:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    14d2:	0020                	addi	s0,sp,8
    14d4:	0501                	addi	a0,a0,0
    14d6:	0030                	addi	a2,sp,8
    14d8:	0402                	c.slli64	s0
    14da:	097f0303          	lb	t1,151(t5)
            core_init_matrix(results[0].size,
    14de:	0014                	0x14
    14e0:	0501                	addi	a0,a0,0
    14e2:	04020017          	auipc	zero,0x4020
    14e6:	0301                	addi	t1,t1,0
    14e8:	0900                	addi	s0,sp,144
    14ea:	000c                	0xc
    14ec:	0501                	addi	a0,a0,0
    14ee:	0009                	c.nop	2
    14f0:	0402                	c.slli64	s0
    14f2:	0301                	addi	t1,t1,0
    14f4:	0900                	addi	s0,sp,144
    14f6:	000c                	0xc
    14f8:	0501                	addi	a0,a0,0
    14fa:	09020313          	addi	t1,tp,144 # 90 <__do_global_dtors_aux+0x34>
    14fe:	0004                	0x4
                             (ee_s32)results[i].seed1
    1500:	0501                	addi	a0,a0,0
    1502:	031a                	slli	t1,t1,0x6
    1504:	0900                	addi	s0,sp,144
    1506:	0004                	0x4
    1508:	0501                	addi	a0,a0,0
    150a:	0308                	addi	a0,sp,384
    150c:	0900                	addi	s0,sp,144
    150e:	0004                	0x4
    1510:	0501                	addi	a0,a0,0
    1512:	0310                	addi	a2,sp,384
    1514:	0901                	addi	s2,s2,0
    1516:	0004                	0x4
    1518:	0501                	addi	a0,a0,0
    151a:	0309                	addi	t1,t1,2
    151c:	0900                	addi	s0,sp,144
    151e:	0004                	0x4
    1520:	0501                	addi	a0,a0,0
    1522:	000d                	c.nop	3
                                 | (((ee_s32)results[i].seed2) << 16),
    1524:	0402                	c.slli64	s0
    1526:	09010303          	lb	t1,144(sp)
    152a:	0004                	0x4
    152c:	0501                	addi	a0,a0,0
    152e:	0044                	addi	s1,sp,4
    1530:	0402                	c.slli64	s0
    1532:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    1536:	0004                	0x4
    1538:	0501                	addi	a0,a0,0
    153a:	000d                	c.nop	3
    153c:	0402                	c.slli64	s0
    153e:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    1542:	0020                	addi	s0,sp,8
    1544:	0501                	addi	a0,a0,0
    1546:	0030                	addi	a2,sp,8
            core_init_matrix(results[0].size,
    1548:	0402                	c.slli64	s0
    154a:	097f0303          	lb	t1,151(t5)
                             &(results[i].mat));
    154e:	0014                	0x14
            core_init_matrix(results[0].size,
    1550:	0501                	addi	a0,a0,0
    1552:	04020017          	auipc	zero,0x4020
    1556:	0301                	addi	t1,t1,0
    1558:	0900                	addi	s0,sp,144
    155a:	000c                	0xc
    155c:	0501                	addi	a0,a0,0
    155e:	0009                	c.nop	2
    1560:	0402                	c.slli64	s0
    1562:	0301                	addi	t1,t1,0
    1564:	0900                	addi	s0,sp,144
    1566:	000c                	0xc
    1568:	0501                	addi	a0,a0,0
    156a:	09020313          	addi	t1,tp,144 # 90 <__do_global_dtors_aux+0x34>
    156e:	0004                	0x4
    1570:	0501                	addi	a0,a0,0
    1572:	031a                	slli	t1,t1,0x6
    1574:	0900                	addi	s0,sp,144
    1576:	0004                	0x4
        if (results[i].execs & ID_STATE)
    1578:	0501                	addi	a0,a0,0
    157a:	0308                	addi	a0,sp,384
    157c:	0900                	addi	s0,sp,144
    157e:	0004                	0x4
    1580:	0501                	addi	a0,a0,0
    1582:	0310                	addi	a2,sp,384
    1584:	0901                	addi	s2,s2,0
    1586:	0004                	0x4
    1588:	0501                	addi	a0,a0,0
    158a:	0309                	addi	t1,t1,2
    158c:	0900                	addi	s0,sp,144
    158e:	0004                	0x4
    1590:	0501                	addi	a0,a0,0
    1592:	000d                	c.nop	3
    1594:	0402                	c.slli64	s0
    1596:	09010303          	lb	t1,144(sp)
    159a:	0004                	0x4
    159c:	0501                	addi	a0,a0,0
    159e:	0044                	addi	s1,sp,4
            core_init_state(
    15a0:	0402                	c.slli64	s0
    15a2:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    15a6:	0004                	0x4
    15a8:	0501                	addi	a0,a0,0
    15aa:	000d                	c.nop	3
    15ac:	0402                	c.slli64	s0
    15ae:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    15b2:	0020                	addi	s0,sp,8
    15b4:	0501                	addi	a0,a0,0
    15b6:	0030                	addi	a2,sp,8
    15b8:	0402                	c.slli64	s0
    15ba:	097f0303          	lb	t1,151(t5)
    15be:	0014                	0x14
    15c0:	0501                	addi	a0,a0,0
    15c2:	04020017          	auipc	zero,0x4020
    15c6:	0301                	addi	t1,t1,0
                results[0].size, results[i].seed1, results[i].memblock[3]);
    15c8:	0900                	addi	s0,sp,144
    15ca:	000c                	0xc
    15cc:	0501                	addi	a0,a0,0
    15ce:	0009                	c.nop	2
    15d0:	0402                	c.slli64	s0
    15d2:	0301                	addi	t1,t1,0
    15d4:	0900                	addi	s0,sp,144
    15d6:	000c                	0xc
    15d8:	0501                	addi	a0,a0,0
    15da:	030c                	addi	a1,sp,384
    15dc:	0902                	c.slli64	s2
    15de:	0004                	0x4
    15e0:	0501                	addi	a0,a0,0
    15e2:	0305                	addi	t1,t1,1
            core_init_state(
    15e4:	0900                	addi	s0,sp,144
    15e6:	0004                	0x4
    15e8:	0501                	addi	a0,a0,0
    15ea:	0009                	c.nop	2
    15ec:	0402                	c.slli64	s0
    15ee:	09010303          	lb	t1,144(sp)
    for (i = 0; i < MULTITHREAD; i++)
    15f2:	0004                	0x4
    15f4:	0501                	addi	a0,a0,0
    15f6:	0040                	addi	s0,sp,4
    15f8:	0402                	c.slli64	s0
    15fa:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    15fe:	0004                	0x4
    1600:	0501                	addi	a0,a0,0
    1602:	0009                	c.nop	2
    if (results[0].iterations == 0)
    1604:	0402                	c.slli64	s0
    1606:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    160a:	0020                	addi	s0,sp,8
        secs_ret secs_passed = 0;
    160c:	0501                	addi	a0,a0,0
    160e:	002c                	addi	a1,sp,8
        results[0].iterations = 1;
    1610:	0402                	c.slli64	s0
    1612:	097f0303          	lb	t1,151(t5)
    1616:	0014                	0x14
        while (secs_passed < (secs_ret)1)
    1618:	0501                	addi	a0,a0,0
    161a:	04020013          	addi	zero,tp,64 # 40 <_start+0x30>
            results[0].iterations *= 10;
    161e:	0301                	addi	t1,t1,0
    1620:	0900                	addi	s0,sp,144
    1622:	000c                	0xc
    1624:	0501                	addi	a0,a0,0
    1626:	0005                	c.nop	1
    1628:	0402                	c.slli64	s0
    162a:	0301                	addi	t1,t1,0
    162c:	0900                	addi	s0,sp,144
    162e:	000c                	0xc
    1630:	0501                	addi	a0,a0,0
    1632:	0308                	addi	a0,sp,384
            start_time();
    1634:	0902                	c.slli64	s2
    1636:	0004                	0x4
            iterate(&results[0]);
    1638:	0501                	addi	a0,a0,0
    163a:	0309                	addi	t1,t1,2
    163c:	0902                	c.slli64	s2
    163e:	0008                	0x8
    1640:	0501                	addi	a0,a0,0
    1642:	0308                	addi	a0,sp,384
            stop_time();
    1644:	0918                	addi	a4,sp,144
    1646:	000c                	0xc
            secs_passed = time_in_secs(get_time());
    1648:	0501                	addi	a0,a0,0
    164a:	0309                	addi	t1,t1,2
    164c:	0901                	addi	s2,s2,0
    164e:	0008                	0x8
    1650:	0501                	addi	a0,a0,0
    1652:	0308                	addi	a0,sp,384
    1654:	0901                	addi	s2,s2,0
    1656:	000c                	0xc
    1658:	0501                	addi	a0,a0,0
    165a:	0309                	addi	t1,t1,2
        while (secs_passed < (secs_ret)1)
    165c:	0901                	addi	s2,s2,0
    165e:	0008                	0x8
    1660:	0501                	addi	a0,a0,0
    1662:	0305                	addi	t1,t1,1
        divisor = (ee_u32)secs_passed;
    1664:	0909                	addi	s2,s2,2
    1666:	000c                	0xc
    1668:	0301                	addi	t1,t1,0
    166a:	0902                	c.slli64	s2
        if (divisor == 0) /* some machines cast float to int as 0 since this
    166c:	0010                	0x10
    166e:	0501                	addi	a0,a0,0
    1670:	0301                	addi	t1,t1,0
    1672:	0901                	addi	s2,s2,0
            divisor = 1;
    1674:	0004                	0x4
    1676:	0901                	addi	s2,s2,0
    1678:	0018                	0x18
    167a:	0100                	addi	s0,sp,128
        results[0].iterations *= 1 + 10 / divisor;
    167c:	5101                	li	sp,-32
    167e:	0008                	0x8
    1680:	0300                	addi	s0,sp,384
    1682:	6200                	flw	fs0,0(a2)
    1684:	0000                	unimp
    1686:	0100                	addi	s0,sp,128
    1688:	fb01                	bnez	a4,1598 <main+0x588>
    168a:	0d0e                	slli	s10,s10,0x3
    168c:	0100                	addi	s0,sp,128
    168e:	0101                	addi	sp,sp,0
    1690:	0001                	nop
    1692:	0000                	unimp
    1694:	0001                	nop
    1696:	0100                	addi	s0,sp,128
    1698:	6168732f          	vamoandei64.v	zero,(a6),v22,v6,v0.t
    169c:	6572                	flw	fa0,28(sp)
    169e:	2f64                	fld	fs1,216(a4)
    16a0:	6972                	flw	fs2,28(sp)
    16a2:	2d766373          	csrrsi	t1,0x2d7,12
    16a6:	7865                	lui	a6,0xffff9
    start_time();
    16a8:	6d61                	lui	s10,0x18
    16aa:	6c70                	flw	fa2,92(s0)
    iterate(&results[0]);
    16ac:	2f65                	jal	1e64 <main+0xe54>
    16ae:	65726f63          	bltu	tp,s7,1d0c <main+0xcfc>
    16b2:	616d                	addi	sp,sp,240
    16b4:	6b72                	flw	fs6,28(sp)
    16b6:	0000                	unimp
    stop_time();
    16b8:	65726f63          	bltu	tp,s7,1d16 <main+0xd06>
    total_time = get_time();
    16bc:	6d5f 7461 6972      	0x697274616d5f
    16c2:	2e78                	fld	fa4,216(a2)
    seedcrc = crc16(results[0].seed1, seedcrc);
    16c4:	00010063          	beqz	sp,16c4 <main+0x6b4>
    16c8:	6300                	flw	fs0,0(a4)
    16ca:	5f65726f          	jal	tp,58cc0 <RAM_SIZE+0x48cc0>
    16ce:	6f70                	flw	fa2,92(a4)
    16d0:	7472                	flw	fs0,60(sp)
    16d2:	656d                	lui	a0,0x1b
    16d4:	682e                	flw	fa6,200(sp)
    16d6:	0100                	addi	s0,sp,128
    16d8:	0000                	unimp
    16da:	65726f63          	bltu	tp,s7,1d38 <main+0xd28>
    16de:	616d                	addi	sp,sp,240
    seedcrc = crc16(results[0].seed2, seedcrc);
    16e0:	6b72                	flw	fs6,28(sp)
    16e2:	682e                	flw	fa6,200(sp)
    16e4:	0100                	addi	s0,sp,128
    16e6:	0000                	unimp
    16e8:	0500                	addi	s0,sp,640
    16ea:	0001                	nop
    16ec:	0205                	addi	tp,tp,1
    16ee:	1f2c                	addi	a1,sp,952
    16f0:	0000                	unimp
    16f2:	0100dc03          	lhu	s8,16(ra)
    16f6:	1405                	addi	s0,s0,-31
    16f8:	28090103          	lb	sp,640(s2) # 140970 <RAM_SIZE+0x130970>
    seedcrc = crc16(results[0].seed3, seedcrc);
    16fc:	0100                	addi	s0,sp,128
    16fe:	0d05                	addi	s10,s10,1
    1700:	08090003          	lb	zero,128(s2)
    1704:	0100                	addi	s0,sp,128
    1706:	04090103          	lb	sp,64(s2)
    170a:	0100                	addi	s0,sp,128
    170c:	0c090103          	lb	sp,192(s2)
    1710:	0100                	addi	s0,sp,128
    1712:	0c090103          	lb	sp,192(s2)
    1716:	0100                	addi	s0,sp,128
    seedcrc = crc16(results[0].size, seedcrc);
    1718:	0c090103          	lb	sp,192(s2)
    171c:	0100                	addi	s0,sp,128
    171e:	0b05                	addi	s6,s6,1
    1720:	08090203          	lb	tp,128(s2)
    1724:	0100                	addi	s0,sp,128
    1726:	0c05                	addi	s8,s8,1
    1728:	3c090203          	lb	tp,960(s2)
    172c:	0100                	addi	s0,sp,128
    172e:	0105                	addi	sp,sp,1
    1730:	04090103          	lb	sp,64(s2)
    1734:	0100                	addi	s0,sp,128
    1736:	14091c03          	lh	s8,320(s2)
    173a:	0100                	addi	s0,sp,128
    switch (seedcrc)
    173c:	0c05                	addi	s8,s8,1
    173e:	28090103          	lb	sp,640(s2)
    1742:	0100                	addi	s0,sp,128
    1744:	04090103          	lb	sp,64(s2)
    1748:	0100                	addi	s0,sp,128
    174a:	0505                	addi	a0,a0,1
    174c:	10090203          	lb	tp,256(s2)
    1750:	0100                	addi	s0,sp,128
    1752:	14090403          	lb	s0,320(s2)
    1756:	0100                	addi	s0,sp,128
    1758:	0b05                	addi	s6,s6,1
    175a:	18090103          	lb	sp,384(s2)
    175e:	0100                	addi	s0,sp,128
    1760:	0505                	addi	a0,a0,1
    1762:	34090403          	lb	s0,832(s2)
    1766:	0100                	addi	s0,sp,128
    1768:	0b05                	addi	s6,s6,1
    176a:	14090103          	lb	sp,320(s2)
    176e:	0100                	addi	s0,sp,128
    1770:	0505                	addi	a0,a0,1
    1772:	34090403          	lb	s0,832(s2)
    1776:	0100                	addi	s0,sp,128
    1778:	0b05                	addi	s6,s6,1
    177a:	14090103          	lb	sp,320(s2)
    177e:	0100                	addi	s0,sp,128
    1780:	0505                	addi	a0,a0,1
    1782:	34090403          	lb	s0,832(s2)
    1786:	0100                	addi	s0,sp,128
    1788:	0b05                	addi	s6,s6,1
    178a:	14090103          	lb	sp,320(s2)
    178e:	0100                	addi	s0,sp,128
    1790:	0505                	addi	a0,a0,1
    1792:	34090503          	lb	a0,832(s2)
    1796:	0100                	addi	s0,sp,128
    1798:	0c05                	addi	s8,s8,1
    179a:	28090103          	lb	sp,640(s2)
    179e:	0100                	addi	s0,sp,128
    17a0:	0105                	addi	sp,sp,1
    17a2:	04090103          	lb	sp,64(s2)
            known_id = 0;
    17a6:	0100                	addi	s0,sp,128
            ee_printf("6k performance run parameters for coremark.\n");
    17a8:	14091403          	lh	s0,320(s2)
    17ac:	0100                	addi	s0,sp,128
    17ae:	0d05                	addi	s10,s10,1
    17b0:	20090103          	lb	sp,512(s2)
            break;
    17b4:	0100                	addi	s0,sp,128
    17b6:	04090303          	lb	t1,64(s2)
            known_id = 1;
    17ba:	0100                	addi	s0,sp,128
    17bc:	08090203          	lb	tp,128(s2)
            ee_printf("6k validation run parameters for coremark.\n");
    17c0:	0100                	addi	s0,sp,128
    17c2:	1405                	addi	s0,s0,-31
    17c4:	04090003          	lb	zero,64(s2)
    17c8:	0100                	addi	s0,sp,128
    17ca:	0805                	addi	a6,a6,1
            break;
    17cc:	04090103          	lb	sp,64(s2)
            known_id = 2;
    17d0:	0100                	addi	s0,sp,128
    17d2:	0e05                	addi	t3,t3,1
    17d4:	08090103          	lb	sp,128(s2)
            ee_printf("Profile generation run parameters for coremark.\n");
    17d8:	0100                	addi	s0,sp,128
    17da:	0b05                	addi	s6,s6,1
    17dc:	08090103          	lb	sp,128(s2)
    17e0:	0100                	addi	s0,sp,128
    17e2:	0a05                	addi	s4,s4,1
            break;
    17e4:	04090203          	lb	tp,64(s2)
            known_id = 3;
    17e8:	0100                	addi	s0,sp,128
    17ea:	0f05                	addi	t5,t5,1
    17ec:	0c090103          	lb	sp,192(s2)
            ee_printf("2K performance run parameters for coremark.\n");
    17f0:	0100                	addi	s0,sp,128
    17f2:	0b05                	addi	s6,s6,1
    17f4:	10090003          	lb	zero,256(s2)
    17f8:	0100                	addi	s0,sp,128
    17fa:	08097d03          	0x8097d03
            break;
    17fe:	0100                	addi	s0,sp,128
            known_id = 4;
    1800:	0705                	addi	a4,a4,1
    1802:	0c090503          	lb	a0,192(s2)
    1806:	0100                	addi	s0,sp,128
            ee_printf("2K validation run parameters for coremark.\n");
    1808:	1305                	addi	t1,t1,-31
    180a:	0c090103          	lb	sp,192(s2)
    180e:	0100                	addi	s0,sp,128
    1810:	0705                	addi	a4,a4,1
    1812:	10090003          	lb	zero,256(s2)
            break;
    1816:	0100                	addi	s0,sp,128
            total_errors = -1;
    1818:	0f05                	addi	t5,t5,1
    181a:	04090103          	lb	sp,64(s2)
    181e:	0100                	addi	s0,sp,128
            break;
    1820:	0b05                	addi	s6,s6,1
    1822:	10090003          	lb	zero,256(s2)
    if (known_id >= 0)
    1826:	0100                	addi	s0,sp,128
    1828:	0705                	addi	a4,a4,1
    182a:	04090003          	lb	zero,64(s2)
        for (i = 0; i < default_num_contexts; i++)
    182e:	0100                	addi	s0,sp,128
    1830:	0c05                	addi	s8,s8,1
    1832:	0c090203          	lb	tp,192(s2)
            results[i].err = 0;
    1836:	0100                	addi	s0,sp,128
    1838:	0505                	addi	a0,a0,1
    183a:	04090003          	lb	zero,64(s2)
    183e:	0100                	addi	s0,sp,128
    1840:	1005                	c.nop	-31
    1842:	04090203          	lb	tp,64(s2)
    1846:	0100                	addi	s0,sp,128
    1848:	0905                	addi	s2,s2,1
    184a:	04090003          	lb	zero,64(s2)
    184e:	0100                	addi	s0,sp,128
    1850:	2405                	jal	1a70 <main+0xa60>
    1852:	0200                	addi	s0,sp,256
            if ((results[i].execs & ID_LIST)
    1854:	0304                	addi	s1,sp,384
    1856:	04090203          	lb	tp,64(s2)
    185a:	0100                	addi	s0,sp,128
    185c:	1a05                	addi	s4,s4,-31
    185e:	0200                	addi	s0,sp,256
    1860:	0304                	addi	s1,sp,384
    1862:	14090003          	lb	zero,320(s2)
    1866:	0100                	addi	s0,sp,128
    1868:	2205                	jal	1988 <main+0x978>
    186a:	0200                	addi	s0,sp,256
    186c:	0304                	addi	s1,sp,384
    186e:	20090103          	lb	sp,512(s2)
    1872:	0100                	addi	s0,sp,128
    1874:	1a05                	addi	s4,s4,-31
    1876:	0200                	addi	s0,sp,256
    1878:	0304                	addi	s1,sp,384
    187a:	24090003          	lb	zero,576(s2)
                && (results[i].crclist != list_known_crc[known_id]))
    187e:	0100                	addi	s0,sp,128
    1880:	1105                	addi	sp,sp,-31
    1882:	0200                	addi	s0,sp,256
    1884:	0304                	addi	s1,sp,384
    1886:	04090203          	lb	tp,64(s2)
    188a:	0100                	addi	s0,sp,128
    188c:	1505                	addi	a0,a0,-31
    188e:	0200                	addi	s0,sp,256
    1890:	0304                	addi	s1,sp,384
    1892:	14090003          	lb	zero,320(s2)
    1896:	0100                	addi	s0,sp,128
    1898:	0e05                	addi	t3,t3,1
    189a:	0200                	addi	s0,sp,256
    189c:	0304                	addi	s1,sp,384
    189e:	08090003          	lb	zero,128(s2)
    18a2:	0100                	addi	s0,sp,128
    18a4:	1a05                	addi	s4,s4,-31
    18a6:	0200                	addi	s0,sp,256
    18a8:	0304                	addi	s1,sp,384
    18aa:	0c090003          	lb	zero,192(s2)
    18ae:	0100                	addi	s0,sp,128
    18b0:	2105                	jal	1cd0 <main+0xcc0>
    18b2:	0200                	addi	s0,sp,256
                ee_printf("[%u]ERROR! list crc 0x%04x - should be 0x%04x\n",
    18b4:	0304                	addi	s1,sp,384
    18b6:	08090103          	lb	sp,128(s2)
                          results[i].crclist,
    18ba:	0100                	addi	s0,sp,128
    18bc:	1a05                	addi	s4,s4,-31
    18be:	0200                	addi	s0,sp,256
    18c0:	0304                	addi	s1,sp,384
    18c2:	1c090003          	lb	zero,448(s2)
    18c6:	0100                	addi	s0,sp,128
    18c8:	0200                	addi	s0,sp,256
    18ca:	0304                	addi	s1,sp,384
    18cc:	04090103          	lb	sp,64(s2)
    18d0:	0100                	addi	s0,sp,128
    18d2:	1105                	addi	sp,sp,-31
    18d4:	0200                	addi	s0,sp,256
    18d6:	0304                	addi	s1,sp,384
                ee_printf("[%u]ERROR! list crc 0x%04x - should be 0x%04x\n",
    18d8:	0c090103          	lb	sp,192(s2)
                          list_known_crc[known_id]);
    18dc:	0100                	addi	s0,sp,128
    18de:	1505                	addi	a0,a0,-31
    18e0:	0200                	addi	s0,sp,256
    18e2:	0304                	addi	s1,sp,384
    18e4:	14090003          	lb	zero,320(s2)
    18e8:	0100                	addi	s0,sp,128
    18ea:	0e05                	addi	t3,t3,1
    18ec:	0200                	addi	s0,sp,256
    18ee:	0304                	addi	s1,sp,384
                ee_printf("[%u]ERROR! list crc 0x%04x - should be 0x%04x\n",
    18f0:	08090003          	lb	zero,128(s2)
    18f4:	0100                	addi	s0,sp,128
    18f6:	1a05                	addi	s4,s4,-31
    18f8:	0200                	addi	s0,sp,256
    18fa:	0304                	addi	s1,sp,384
    18fc:	0c090003          	lb	zero,192(s2)
                results[i].err++;
    1900:	0100                	addi	s0,sp,128
    1902:	1205                	addi	tp,tp,-31
    1904:	0200                	addi	s0,sp,256
    1906:	0304                	addi	s1,sp,384
    1908:	08090103          	lb	sp,128(s2)
    190c:	0100                	addi	s0,sp,128
    190e:	1d05                	addi	s10,s10,-31
    1910:	0200                	addi	s0,sp,256
    1912:	0304                	addi	s1,sp,384
    1914:	0c097703          	0xc097703
    1918:	0100                	addi	s0,sp,128
    191a:	0905                	addi	s2,s2,1
    191c:	0200                	addi	s0,sp,256
    191e:	0104                	addi	s1,sp,128
    1920:	0c090003          	lb	zero,192(s2)
    1924:	0100                	addi	s0,sp,128
    1926:	1905                	addi	s2,s2,-31
    1928:	0200                	addi	s0,sp,256
    192a:	0204                	addi	s1,sp,256
    192c:	0c097e03          	0xc097e03
    1930:	0100                	addi	s0,sp,128
    1932:	0505                	addi	a0,a0,1
    1934:	0200                	addi	s0,sp,256
    1936:	0104                	addi	s1,sp,128
    1938:	0c090003          	lb	zero,192(s2)
    193c:	0100                	addi	s0,sp,128
    193e:	0a05                	addi	s4,s4,1
    1940:	0c090f03          	lb	t5,192(s2)
    1944:	0100                	addi	s0,sp,128
    1946:	0c090103          	lb	sp,192(s2)
    194a:	0100                	addi	s0,sp,128
    194c:	1605                	addi	a2,a2,-31
    194e:	0c090103          	lb	sp,192(s2)
    1952:	0100                	addi	s0,sp,128
    1954:	0c05                	addi	s8,s8,1
    1956:	28090003          	lb	zero,640(s2)
            if ((results[i].execs & ID_MATRIX)
    195a:	0100                	addi	s0,sp,128
    195c:	0a05                	addi	s4,s4,1
    195e:	04090003          	lb	zero,64(s2)
    1962:	0100                	addi	s0,sp,128
    1964:	08090103          	lb	sp,128(s2)
    1968:	0100                	addi	s0,sp,128
    196a:	0c05                	addi	s8,s8,1
    196c:	0c090503          	lb	a0,192(s2)
    1970:	0100                	addi	s0,sp,128
    1972:	0105                	addi	sp,sp,1
    1974:	04090103          	lb	sp,64(s2)
    1978:	0100                	addi	s0,sp,128
    197a:	14090f03          	lb	t5,320(s2)
    197e:	0100                	addi	s0,sp,128
                && (results[i].crcmatrix != matrix_known_crc[known_id]))
    1980:	0c05                	addi	s8,s8,1
    1982:	20090103          	lb	sp,512(s2)
    1986:	0100                	addi	s0,sp,128
    1988:	1505                	addi	a0,a0,-31
    198a:	04090003          	lb	zero,64(s2)
    198e:	0100                	addi	s0,sp,128
    1990:	1f05                	addi	t5,t5,-31
    1992:	04090003          	lb	zero,64(s2)
    1996:	0100                	addi	s0,sp,128
    1998:	0c05                	addi	s8,s8,1
    199a:	04090103          	lb	sp,64(s2)
    199e:	0100                	addi	s0,sp,128
    19a0:	04090203          	lb	tp,64(s2)
    19a4:	0100                	addi	s0,sp,128
    19a6:	0505                	addi	a0,a0,1
    19a8:	04090003          	lb	zero,64(s2)
    19ac:	0100                	addi	s0,sp,128
    19ae:	1005                	c.nop	-31
    19b0:	04090203          	lb	tp,64(s2)
    19b4:	0100                	addi	s0,sp,128
    19b6:	0905                	addi	s2,s2,1
                ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n",
    19b8:	04090003          	lb	zero,64(s2)
                          results[i].crcmatrix,
    19bc:	0100                	addi	s0,sp,128
    19be:	1705                	addi	a4,a4,-31
    19c0:	04090203          	lb	tp,64(s2)
    19c4:	0100                	addi	s0,sp,128
    19c6:	1b05                	addi	s6,s6,-31
    19c8:	14090003          	lb	zero,320(s2)
    19cc:	0100                	addi	s0,sp,128
    19ce:	1405                	addi	s0,s0,-31
    19d0:	08090003          	lb	zero,128(s2)
    19d4:	0100                	addi	s0,sp,128
    19d6:	1105                	addi	sp,sp,-31
    19d8:	0c090003          	lb	zero,192(s2)
                ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n",
    19dc:	0100                	addi	s0,sp,128
    19de:	08090103          	lb	sp,128(s2)
                          matrix_known_crc[known_id]);
    19e2:	0100                	addi	s0,sp,128
    19e4:	1505                	addi	a0,a0,-31
    19e6:	10090103          	lb	sp,256(s2)
    19ea:	0100                	addi	s0,sp,128
    19ec:	1005                	c.nop	-31
    19ee:	04090003          	lb	zero,64(s2)
    19f2:	0100                	addi	s0,sp,128
                ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n",
    19f4:	1505                	addi	a0,a0,-31
    19f6:	08090203          	lb	tp,128(s2)
    19fa:	0100                	addi	s0,sp,128
    19fc:	14090103          	lb	sp,320(s2)
    1a00:	0100                	addi	s0,sp,128
    1a02:	2905                	jal	1e32 <main+0xe22>
                results[i].err++;
    1a04:	08090403          	lb	s0,128(s2)
    1a08:	0100                	addi	s0,sp,128
    1a0a:	1505                	addi	a0,a0,-31
    1a0c:	18090003          	lb	zero,384(s2)
    1a10:	0100                	addi	s0,sp,128
    1a12:	1205                	addi	tp,tp,-31
    1a14:	0200                	addi	s0,sp,256
    1a16:	0204                	addi	s1,sp,256
    1a18:	14090203          	lb	tp,320(s2)
    1a1c:	0100                	addi	s0,sp,128
    1a1e:	1d05                	addi	s10,s10,-31
    1a20:	0200                	addi	s0,sp,256
    1a22:	0204                	addi	s1,sp,256
    1a24:	08097303          	0x8097303
    1a28:	0100                	addi	s0,sp,128
    1a2a:	0905                	addi	s2,s2,1
    1a2c:	0200                	addi	s0,sp,256
    1a2e:	0104                	addi	s1,sp,128
    1a30:	0c090003          	lb	zero,192(s2)
    1a34:	0100                	addi	s0,sp,128
    1a36:	1905                	addi	s2,s2,-31
    1a38:	0200                	addi	s0,sp,256
    1a3a:	0204                	addi	s1,sp,256
    1a3c:	0c097e03          	0xc097e03
    1a40:	0100                	addi	s0,sp,128
    1a42:	0505                	addi	a0,a0,1
    1a44:	0200                	addi	s0,sp,256
    1a46:	0104                	addi	s1,sp,128
    1a48:	0c090003          	lb	zero,192(s2)
    1a4c:	0100                	addi	s0,sp,128
    1a4e:	0c05                	addi	s8,s8,1
    1a50:	0c091203          	lh	tp,192(s2)
    1a54:	0100                	addi	s0,sp,128
    1a56:	0105                	addi	sp,sp,1
    1a58:	04090103          	lb	sp,64(s2)
            if ((results[i].execs & ID_STATE)
    1a5c:	0100                	addi	s0,sp,128
    1a5e:	14090803          	lb	a6,320(s2)
    1a62:	0100                	addi	s0,sp,128
    1a64:	0c05                	addi	s8,s8,1
    1a66:	30090203          	lb	tp,768(s2)
    1a6a:	0100                	addi	s0,sp,128
    1a6c:	0505                	addi	a0,a0,1
    1a6e:	04090003          	lb	zero,64(s2)
    1a72:	0100                	addi	s0,sp,128
    1a74:	1005                	c.nop	-31
    1a76:	04090203          	lb	tp,64(s2)
    1a7a:	0100                	addi	s0,sp,128
    1a7c:	0905                	addi	s2,s2,1
    1a7e:	04090003          	lb	zero,64(s2)
    1a82:	0100                	addi	s0,sp,128
                && (results[i].crcstate != state_known_crc[known_id]))
    1a84:	2805                	jal	1ab4 <main+0xaa4>
    1a86:	0200                	addi	s0,sp,256
    1a88:	0304                	addi	s1,sp,384
    1a8a:	04090203          	lb	tp,64(s2)
    1a8e:	0100                	addi	s0,sp,128
    1a90:	2c05                	jal	1cc0 <main+0xcb0>
    1a92:	0200                	addi	s0,sp,256
    1a94:	0304                	addi	s1,sp,384
    1a96:	14090003          	lb	zero,320(s2)
    1a9a:	0100                	addi	s0,sp,128
    1a9c:	2505                	jal	20bc <matrix_test+0xdc>
    1a9e:	0200                	addi	s0,sp,256
    1aa0:	0304                	addi	s1,sp,384
    1aa2:	08090003          	lb	zero,128(s2)
    1aa6:	0100                	addi	s0,sp,128
    1aa8:	1c05                	addi	s8,s8,-31
    1aaa:	0200                	addi	s0,sp,256
    1aac:	0304                	addi	s1,sp,384
    1aae:	10090003          	lb	zero,256(s2)
    1ab2:	0100                	addi	s0,sp,128
    1ab4:	3305                	jal	17d4 <main+0x7c4>
    1ab6:	0200                	addi	s0,sp,256
    1ab8:	0304                	addi	s1,sp,384
    1aba:	04090003          	lb	zero,64(s2)
                ee_printf("[%u]ERROR! state crc 0x%04x - should be 0x%04x\n",
    1abe:	0100                	addi	s0,sp,128
                          results[i].crcstate,
    1ac0:	1105                	addi	sp,sp,-31
    1ac2:	0200                	addi	s0,sp,256
    1ac4:	0304                	addi	s1,sp,384
    1ac6:	04090003          	lb	zero,64(s2)
    1aca:	0100                	addi	s0,sp,128
    1acc:	1505                	addi	a0,a0,-31
    1ace:	0200                	addi	s0,sp,256
    1ad0:	0304                	addi	s1,sp,384
    1ad2:	14090003          	lb	zero,320(s2)
    1ad6:	0100                	addi	s0,sp,128
    1ad8:	0e05                	addi	t3,t3,1
    1ada:	0200                	addi	s0,sp,256
    1adc:	0304                	addi	s1,sp,384
    1ade:	08090003          	lb	zero,128(s2)
                ee_printf("[%u]ERROR! state crc 0x%04x - should be 0x%04x\n",
    1ae2:	0100                	addi	s0,sp,128
                          state_known_crc[known_id]);
    1ae4:	3105                	jal	1704 <main+0x6f4>
    1ae6:	0200                	addi	s0,sp,256
    1ae8:	0304                	addi	s1,sp,384
    1aea:	0c090003          	lb	zero,192(s2)
    1aee:	0100                	addi	s0,sp,128
    1af0:	1a05                	addi	s4,s4,-31
    1af2:	0200                	addi	s0,sp,256
    1af4:	0304                	addi	s1,sp,384
    1af6:	10090003          	lb	zero,256(s2)
                ee_printf("[%u]ERROR! state crc 0x%04x - should be 0x%04x\n",
    1afa:	0100                	addi	s0,sp,128
    1afc:	1d05                	addi	s10,s10,-31
    1afe:	0200                	addi	s0,sp,256
    1b00:	0304                	addi	s1,sp,384
    1b02:	04097e03          	0x4097e03
    1b06:	0100                	addi	s0,sp,128
                results[i].err++;
    1b08:	0905                	addi	s2,s2,1
    1b0a:	0200                	addi	s0,sp,256
    1b0c:	0104                	addi	s1,sp,128
    1b0e:	0c090003          	lb	zero,192(s2)
    1b12:	0100                	addi	s0,sp,128
    1b14:	1905                	addi	s2,s2,-31
    1b16:	0200                	addi	s0,sp,256
    1b18:	0204                	addi	s1,sp,256
    1b1a:	0c097e03          	0xc097e03
    1b1e:	0100                	addi	s0,sp,128
    1b20:	0505                	addi	a0,a0,1
    1b22:	0200                	addi	s0,sp,256
    1b24:	0104                	addi	s1,sp,128
    1b26:	0c090003          	lb	zero,192(s2)
    1b2a:	0100                	addi	s0,sp,128
    1b2c:	0105                	addi	sp,sp,1
    1b2e:	0c090703          	lb	a4,192(s2)
    1b32:	0100                	addi	s0,sp,128
    1b34:	24090703          	lb	a4,576(s2)
    1b38:	0100                	addi	s0,sp,128
    1b3a:	0c05                	addi	s8,s8,1
    1b3c:	24090203          	lb	tp,576(s2)
    1b40:	0100                	addi	s0,sp,128
    1b42:	0505                	addi	a0,a0,1
    1b44:	04090003          	lb	zero,64(s2)
    1b48:	0100                	addi	s0,sp,128
    1b4a:	1005                	c.nop	-31
    1b4c:	04090203          	lb	tp,64(s2)
    1b50:	0100                	addi	s0,sp,128
    1b52:	0905                	addi	s2,s2,1
    1b54:	04090003          	lb	zero,64(s2)
    1b58:	0100                	addi	s0,sp,128
    1b5a:	1a05                	addi	s4,s4,-31
    1b5c:	0200                	addi	s0,sp,256
    1b5e:	0304                	addi	s1,sp,384
            total_errors += results[i].err;
    1b60:	04090203          	lb	tp,64(s2)
    1b64:	0100                	addi	s0,sp,128
    1b66:	1d05                	addi	s10,s10,-31
    1b68:	0200                	addi	s0,sp,256
    1b6a:	0304                	addi	s1,sp,384
    1b6c:	78097e03          	0x78097e03
    1b70:	0100                	addi	s0,sp,128
    1b72:	0905                	addi	s2,s2,1
    1b74:	0200                	addi	s0,sp,256
    1b76:	0104                	addi	s1,sp,128
    1b78:	0c090003          	lb	zero,192(s2)
    1b7c:	0100                	addi	s0,sp,128
    1b7e:	1905                	addi	s2,s2,-31
    1b80:	0200                	addi	s0,sp,256
    1b82:	0204                	addi	s1,sp,256
    1b84:	0c097e03          	0xc097e03
    1b88:	0100                	addi	s0,sp,128
    1b8a:	0505                	addi	a0,a0,1
    1b8c:	0200                	addi	s0,sp,256
    1b8e:	0104                	addi	s1,sp,128
    1b90:	0c090003          	lb	zero,192(s2)
    1b94:	0100                	addi	s0,sp,128
    1b96:	0105                	addi	sp,sp,1
    1b98:	0c090703          	lb	a4,192(s2)
        for (i = 0; i < default_num_contexts; i++)
    1b9c:	0100                	addi	s0,sp,128
    1b9e:	1c090903          	lb	s2,448(s2)
    1ba2:	0100                	addi	s0,sp,128
    1ba4:	0c05                	addi	s8,s8,1
    1ba6:	24090203          	lb	tp,576(s2)
    1baa:	0100                	addi	s0,sp,128
    1bac:	0505                	addi	a0,a0,1
    1bae:	04090003          	lb	zero,64(s2)
    1bb2:	0100                	addi	s0,sp,128
    1bb4:	0a05                	addi	s4,s4,1
    1bb6:	04090203          	lb	tp,64(s2)
    total_errors += check_data_types();
    1bba:	0100                	addi	s0,sp,128
    1bbc:	0e05                	addi	t3,t3,1
    1bbe:	10090003          	lb	zero,256(s2)
    1bc2:	0100                	addi	s0,sp,128
    1bc4:	1005                	c.nop	-31
    1bc6:	04090103          	lb	sp,64(s2)
    1bca:	0100                	addi	s0,sp,128
    1bcc:	0905                	addi	s2,s2,1
    1bce:	04090003          	lb	zero,64(s2)
    1bd2:	0100                	addi	s0,sp,128
    1bd4:	1205                	addi	tp,tp,-31
    1bd6:	0200                	addi	s0,sp,256
    1bd8:	0304                	addi	s1,sp,384
    1bda:	04090203          	lb	tp,64(s2)
    ee_printf("CoreMark Size    : %lu\n", (long unsigned)results[0].size);
    1bde:	0100                	addi	s0,sp,128
    1be0:	2105                	jal	2000 <matrix_test+0x20>
    1be2:	0200                	addi	s0,sp,256
    1be4:	0304                	addi	s1,sp,384
    1be6:	14090003          	lb	zero,320(s2)
    1bea:	0100                	addi	s0,sp,128
    1bec:	2505                	jal	220c <core_init_matrix+0x78>
    1bee:	0200                	addi	s0,sp,256
    ee_printf("Total ticks      : %lu\n", (long unsigned)total_time);
    1bf0:	0304                	addi	s1,sp,384
    1bf2:	14090003          	lb	zero,320(s2)
    1bf6:	0100                	addi	s0,sp,128
    1bf8:	1e05                	addi	t3,t3,-31
    1bfa:	0200                	addi	s0,sp,256
    1bfc:	0304                	addi	s1,sp,384
    1bfe:	08090003          	lb	zero,128(s2)
    ee_printf("Total time (secs): %d\n", time_in_secs(total_time));
    1c02:	0100                	addi	s0,sp,128
    1c04:	1505                	addi	a0,a0,-31
    1c06:	0200                	addi	s0,sp,256
    1c08:	0304                	addi	s1,sp,384
    1c0a:	10090003          	lb	zero,256(s2)
    1c0e:	0100                	addi	s0,sp,128
    1c10:	3505                	jal	1a30 <main+0xa20>
    1c12:	0200                	addi	s0,sp,256
    1c14:	0304                	addi	s1,sp,384
    1c16:	04090003          	lb	zero,64(s2)
    1c1a:	0100                	addi	s0,sp,128
    if (time_in_secs(total_time) > 0)
    1c1c:	2a05                	jal	1d4c <main+0xd3c>
    1c1e:	0200                	addi	s0,sp,256
    1c20:	0304                	addi	s1,sp,384
    1c22:	14090003          	lb	zero,320(s2)
    1c26:	0100                	addi	s0,sp,128
    1c28:	1205                	addi	tp,tp,-31
    1c2a:	0200                	addi	s0,sp,256
                  default_num_contexts * results[0].iterations
    1c2c:	0304                	addi	s1,sp,384
    1c2e:	14090003          	lb	zero,320(s2)
    1c32:	0100                	addi	s0,sp,128
    1c34:	1d05                	addi	s10,s10,-31
    1c36:	0200                	addi	s0,sp,256
    1c38:	0304                	addi	s1,sp,384
    1c3a:	18097e03          	0x18097e03
    1c3e:	0100                	addi	s0,sp,128
    1c40:	0905                	addi	s2,s2,1
    1c42:	0200                	addi	s0,sp,256
    1c44:	0104                	addi	s1,sp,128
    1c46:	0c090003          	lb	zero,192(s2)
    1c4a:	0100                	addi	s0,sp,128
                      / time_in_secs(total_time));
    1c4c:	1905                	addi	s2,s2,-31
    1c4e:	0200                	addi	s0,sp,256
    1c50:	0204                	addi	s1,sp,256
    1c52:	0c097d03          	0xc097d03
    1c56:	0100                	addi	s0,sp,128
        ee_printf("Iterations/Sec   : %d\n",
    1c58:	0505                	addi	a0,a0,1
    1c5a:	0200                	addi	s0,sp,256
    1c5c:	0104                	addi	s1,sp,128
    1c5e:	0c090003          	lb	zero,192(s2)
    1c62:	0100                	addi	s0,sp,128
    1c64:	0105                	addi	sp,sp,1
    1c66:	0c090803          	lb	a6,192(s2)
    1c6a:	0100                	addi	s0,sp,128
    1c6c:	1c090903          	lb	s2,448(s2)
    1c70:	0100                	addi	s0,sp,128
    1c72:	0c05                	addi	s8,s8,1
    1c74:	28090203          	lb	tp,640(s2)
    if (time_in_secs(total_time) < 10)
    1c78:	0100                	addi	s0,sp,128
    1c7a:	0505                	addi	a0,a0,1
    1c7c:	04090003          	lb	zero,64(s2)
    1c80:	0100                	addi	s0,sp,128
    1c82:	1005                	c.nop	-31
    1c84:	04090203          	lb	tp,64(s2)
    1c88:	0100                	addi	s0,sp,128
    1c8a:	0905                	addi	s2,s2,1
        ee_printf(
    1c8c:	04090003          	lb	zero,64(s2)
    1c90:	0100                	addi	s0,sp,128
    1c92:	1105                	addi	sp,sp,-31
    1c94:	04090203          	lb	tp,64(s2)
        total_errors++;
    1c98:	0100                	addi	s0,sp,128
    1c9a:	1505                	addi	a0,a0,-31
    1c9c:	14090003          	lb	zero,320(s2)
    1ca0:	0100                	addi	s0,sp,128
    1ca2:	0e05                	addi	t3,t3,1
    1ca4:	08090003          	lb	zero,128(s2)
    1ca8:	0100                	addi	s0,sp,128
    1caa:	1a05                	addi	s4,s4,-31
    1cac:	0c090003          	lb	zero,192(s2)
    1cb0:	0100                	addi	s0,sp,128
    1cb2:	1405                	addi	s0,s0,-31
              (long unsigned)default_num_contexts * results[0].iterations);
    1cb4:	04090103          	lb	sp,64(s2)
    1cb8:	0100                	addi	s0,sp,128
    1cba:	0d05                	addi	s10,s10,1
    1cbc:	04090003          	lb	zero,64(s2)
    ee_printf("Iterations       : %lu\n",
    1cc0:	0100                	addi	s0,sp,128
    1cc2:	1e05                	addi	t3,t3,-31
    1cc4:	0200                	addi	s0,sp,256
    1cc6:	0304                	addi	s1,sp,384
    1cc8:	04090203          	lb	tp,64(s2)
    1ccc:	0100                	addi	s0,sp,128
    1cce:	2d05                	jal	22fe <core_init_matrix+0x16a>
    1cd0:	0200                	addi	s0,sp,256
    1cd2:	0304                	addi	s1,sp,384
    1cd4:	2c090003          	lb	zero,704(s2)
    1cd8:	0100                	addi	s0,sp,128
    1cda:	3105                	jal	18fa <main+0x8ea>
    1cdc:	0200                	addi	s0,sp,256
    1cde:	0304                	addi	s1,sp,384
    ee_printf("Compiler version : %s\n", COMPILER_VERSION);
    1ce0:	14090003          	lb	zero,320(s2)
    1ce4:	0100                	addi	s0,sp,128
    1ce6:	2a05                	jal	1e16 <main+0xe06>
    1ce8:	0200                	addi	s0,sp,256
    1cea:	0304                	addi	s1,sp,384
    1cec:	08090003          	lb	zero,128(s2)
    1cf0:	0100                	addi	s0,sp,128
    1cf2:	2105                	jal	2112 <matrix_test+0x132>
    ee_printf("Compiler flags   : %s\n", COMPILER_FLAGS);
    1cf4:	0200                	addi	s0,sp,256
    1cf6:	0304                	addi	s1,sp,384
    1cf8:	10090003          	lb	zero,256(s2)
    1cfc:	0100                	addi	s0,sp,128
    1cfe:	4405                	li	s0,1
    1d00:	0200                	addi	s0,sp,256
    1d02:	0304                	addi	s1,sp,384
    1d04:	04090003          	lb	zero,64(s2)
    ee_printf("Memory location  : %s\n", MEM_LOCATION);
    1d08:	0100                	addi	s0,sp,128
    1d0a:	4805                	li	a6,1
    1d0c:	0200                	addi	s0,sp,256
    1d0e:	0304                	addi	s1,sp,384
    1d10:	14090003          	lb	zero,320(s2)
    1d14:	0100                	addi	s0,sp,128
    1d16:	4105                	li	sp,1
    1d18:	0200                	addi	s0,sp,256
    1d1a:	0304                	addi	s1,sp,384
    ee_printf("seedcrc          : 0x%04x\n", seedcrc);
    1d1c:	08090003          	lb	zero,128(s2)
    1d20:	0100                	addi	s0,sp,128
    1d22:	3605                	jal	1842 <main+0x832>
    1d24:	0200                	addi	s0,sp,256
    1d26:	0304                	addi	s1,sp,384
    1d28:	10090003          	lb	zero,256(s2)
    1d2c:	0100                	addi	s0,sp,128
    1d2e:	1e05                	addi	t3,t3,-31
    if (results[0].execs & ID_LIST)
    1d30:	0200                	addi	s0,sp,256
    1d32:	0304                	addi	s1,sp,384
    1d34:	14090003          	lb	zero,320(s2)
    1d38:	0100                	addi	s0,sp,128
    1d3a:	2105                	jal	215a <matrix_test+0x17a>
        for (i = 0; i < default_num_contexts; i++)
    1d3c:	0200                	addi	s0,sp,256
    1d3e:	0304                	addi	s1,sp,384
    1d40:	30097e03          	0x30097e03
            ee_printf("[%d]crclist       : 0x%04x\n", i, results[i].crclist);
    1d44:	0100                	addi	s0,sp,128
    1d46:	0d05                	addi	s10,s10,1
    1d48:	0200                	addi	s0,sp,256
    1d4a:	0104                	addi	s1,sp,128
    1d4c:	0c090003          	lb	zero,192(s2)
    1d50:	0100                	addi	s0,sp,128
    1d52:	1d05                	addi	s10,s10,-31
    1d54:	0200                	addi	s0,sp,256
    1d56:	0204                	addi	s1,sp,256
    1d58:	0c097d03          	0xc097d03
    1d5c:	0100                	addi	s0,sp,128
    1d5e:	0905                	addi	s2,s2,1
    1d60:	0200                	addi	s0,sp,256
    1d62:	0104                	addi	s1,sp,128
    1d64:	0c090003          	lb	zero,192(s2)
    1d68:	0100                	addi	s0,sp,128
    1d6a:	1905                	addi	s2,s2,-31
    1d6c:	0200                	addi	s0,sp,256
    1d6e:	0204                	addi	s1,sp,256
    1d70:	0c097e03          	0xc097e03
    1d74:	0100                	addi	s0,sp,128
    1d76:	0505                	addi	a0,a0,1
    1d78:	0200                	addi	s0,sp,256
    1d7a:	0104                	addi	s1,sp,128
        for (i = 0; i < default_num_contexts; i++)
    1d7c:	0c090003          	lb	zero,192(s2)
    1d80:	0100                	addi	s0,sp,128
    1d82:	0105                	addi	sp,sp,1
    1d84:	0c090b03          	lb	s6,192(s2)
    1d88:	0100                	addi	s0,sp,128
    1d8a:	20090903          	lb	s2,512(s2)
    1d8e:	0100                	addi	s0,sp,128
    1d90:	0c05                	addi	s8,s8,1
    1d92:	24090203          	lb	tp,576(s2)
    1d96:	0100                	addi	s0,sp,128
    if (results[0].execs & ID_MATRIX)
    1d98:	0505                	addi	a0,a0,1
    1d9a:	04090003          	lb	zero,64(s2)
    1d9e:	0100                	addi	s0,sp,128
    1da0:	1005                	c.nop	-31
    1da2:	04090203          	lb	tp,64(s2)
        for (i = 0; i < default_num_contexts; i++)
    1da6:	0100                	addi	s0,sp,128
    1da8:	0905                	addi	s2,s2,1
    1daa:	04090003          	lb	zero,64(s2)
            ee_printf("[%d]crcmatrix     : 0x%04x\n", i, results[i].crcmatrix);
    1dae:	0100                	addi	s0,sp,128
    1db0:	1105                	addi	sp,sp,-31
    1db2:	04090203          	lb	tp,64(s2)
    1db6:	0100                	addi	s0,sp,128
    1db8:	1505                	addi	a0,a0,-31
    1dba:	14090003          	lb	zero,320(s2)
    1dbe:	0100                	addi	s0,sp,128
    1dc0:	0e05                	addi	t3,t3,1
    1dc2:	08090003          	lb	zero,128(s2)
    1dc6:	0100                	addi	s0,sp,128
    1dc8:	1a05                	addi	s4,s4,-31
    1dca:	0c090003          	lb	zero,192(s2)
    1dce:	0100                	addi	s0,sp,128
    1dd0:	1405                	addi	s0,s0,-31
    1dd2:	04090103          	lb	sp,64(s2)
    1dd6:	0100                	addi	s0,sp,128
    1dd8:	0d05                	addi	s10,s10,1
    1dda:	04090003          	lb	zero,64(s2)
    1dde:	0100                	addi	s0,sp,128
    1de0:	2a05                	jal	1f10 <main+0xf00>
    1de2:	0200                	addi	s0,sp,256
        for (i = 0; i < default_num_contexts; i++)
    1de4:	0304                	addi	s1,sp,384
    1de6:	04090203          	lb	tp,64(s2)
    1dea:	0100                	addi	s0,sp,128
    1dec:	2e05                	jal	211c <matrix_test+0x13c>
    1dee:	0200                	addi	s0,sp,256
    1df0:	0304                	addi	s1,sp,384
    1df2:	14090003          	lb	zero,320(s2)
    1df6:	0100                	addi	s0,sp,128
    1df8:	2705                	jal	2518 <matrix_mul_const+0x4>
    1dfa:	0200                	addi	s0,sp,256
    1dfc:	0304                	addi	s1,sp,384
    1dfe:	08090003          	lb	zero,128(s2)
    if (results[0].execs & ID_STATE)
    1e02:	0100                	addi	s0,sp,128
    1e04:	1e05                	addi	t3,t3,-31
    1e06:	0200                	addi	s0,sp,256
    1e08:	0304                	addi	s1,sp,384
    1e0a:	10090003          	lb	zero,256(s2)
        for (i = 0; i < default_num_contexts; i++)
    1e0e:	0100                	addi	s0,sp,128
    1e10:	4105                	li	sp,1
    1e12:	0200                	addi	s0,sp,256
            ee_printf("[%d]crcstate      : 0x%04x\n", i, results[i].crcstate);
    1e14:	0304                	addi	s1,sp,384
    1e16:	04090003          	lb	zero,64(s2)
    1e1a:	0100                	addi	s0,sp,128
    1e1c:	4505                	li	a0,1
    1e1e:	0200                	addi	s0,sp,256
    1e20:	0304                	addi	s1,sp,384
    1e22:	14090003          	lb	zero,320(s2)
    1e26:	0100                	addi	s0,sp,128
    1e28:	3e05                	jal	1958 <main+0x948>
    1e2a:	0200                	addi	s0,sp,256
    1e2c:	0304                	addi	s1,sp,384
    1e2e:	08090003          	lb	zero,128(s2)
    1e32:	0100                	addi	s0,sp,128
    1e34:	1805                	addi	a6,a6,-31
    1e36:	0200                	addi	s0,sp,256
    1e38:	0304                	addi	s1,sp,384
    1e3a:	10090003          	lb	zero,256(s2)
    1e3e:	0100                	addi	s0,sp,128
    1e40:	1e05                	addi	t3,t3,-31
    1e42:	0200                	addi	s0,sp,256
    1e44:	0304                	addi	s1,sp,384
    1e46:	14090103          	lb	sp,320(s2)
    1e4a:	0100                	addi	s0,sp,128
        for (i = 0; i < default_num_contexts; i++)
    1e4c:	2105                	jal	226c <core_init_matrix+0xd8>
    1e4e:	0200                	addi	s0,sp,256
    1e50:	0304                	addi	s1,sp,384
    1e52:	30090003          	lb	zero,768(s2)
    1e56:	0100                	addi	s0,sp,128
    1e58:	3a05                	jal	1788 <main+0x778>
    1e5a:	0200                	addi	s0,sp,256
    1e5c:	0304                	addi	s1,sp,384
    1e5e:	0c090003          	lb	zero,192(s2)
    1e62:	0100                	addi	s0,sp,128
    1e64:	3805                	jal	1694 <main+0x684>
    1e66:	0200                	addi	s0,sp,256
    for (i = 0; i < default_num_contexts; i++)
    1e68:	0304                	addi	s1,sp,384
    1e6a:	0c090003          	lb	zero,192(s2)
    1e6e:	0100                	addi	s0,sp,128
        ee_printf("[%d]crcfinal      : 0x%04x\n", i, results[i].crc);
    1e70:	1e05                	addi	t3,t3,-31
    1e72:	0200                	addi	s0,sp,256
    1e74:	0304                	addi	s1,sp,384
    1e76:	10090003          	lb	zero,256(s2)
    1e7a:	0100                	addi	s0,sp,128
    1e7c:	2105                	jal	229c <core_init_matrix+0x108>
    1e7e:	0200                	addi	s0,sp,256
    1e80:	0304                	addi	s1,sp,384
    1e82:	34097d03          	0x34097d03
    1e86:	0100                	addi	s0,sp,128
    1e88:	0d05                	addi	s10,s10,1
    1e8a:	0200                	addi	s0,sp,256
    1e8c:	0104                	addi	s1,sp,128
    1e8e:	0c090003          	lb	zero,192(s2)
    1e92:	0100                	addi	s0,sp,128
    1e94:	1d05                	addi	s10,s10,-31
    1e96:	0200                	addi	s0,sp,256
    1e98:	0204                	addi	s1,sp,256
    1e9a:	0c097d03          	0xc097d03
    1e9e:	0100                	addi	s0,sp,128
    1ea0:	0905                	addi	s2,s2,1
    1ea2:	0200                	addi	s0,sp,256
    1ea4:	0104                	addi	s1,sp,128
    1ea6:	0c090003          	lb	zero,192(s2)
    for (i = 0; i < default_num_contexts; i++)
    1eaa:	0100                	addi	s0,sp,128
    1eac:	1905                	addi	s2,s2,-31
    1eae:	0200                	addi	s0,sp,256
    1eb0:	0204                	addi	s1,sp,256
    1eb2:	0c097e03          	0xc097e03
    1eb6:	0100                	addi	s0,sp,128
    1eb8:	0505                	addi	a0,a0,1
    1eba:	0200                	addi	s0,sp,256
    1ebc:	0104                	addi	s1,sp,128
    1ebe:	0c090003          	lb	zero,192(s2)
    1ec2:	0100                	addi	s0,sp,128
    if (total_errors == 0)
    1ec4:	0105                	addi	sp,sp,1
    1ec6:	0c090c03          	lb	s8,192(s2)
    1eca:	0100                	addi	s0,sp,128
        ee_printf(
    1ecc:	1c09                	addi	s8,s8,-30
    1ece:	0000                	unimp
    1ed0:	0101                	addi	sp,sp,0
    1ed2:	012e                	slli	sp,sp,0xb
    1ed4:	0000                	unimp
    1ed6:	00620003          	lb	zero,6(tp) # 6 <RAM_START_ADDRESS+0x6>
    if (total_errors > 0)
    1eda:	0000                	unimp
    1edc:	0101                	addi	sp,sp,0
    1ede:	000d0efb          	0xd0efb
        ee_printf("Errors detected\n");
    1ee2:	0101                	addi	sp,sp,0
    1ee4:	0101                	addi	sp,sp,0
    1ee6:	0000                	unimp
    1ee8:	0100                	addi	s0,sp,128
    1eea:	0000                	unimp
    if (total_errors < 0)
    1eec:	2f01                	jal	25fc <matrix_mul_const+0xe8>
    1eee:	72616873          	csrrsi	a6,0x726,2
    1ef2:	6465                	lui	s0,0x19
        ee_printf(
    1ef4:	7369722f          	0x7369722f
    1ef8:	652d7663          	bgeu	s10,s2,2544 <matrix_mul_const+0x30>
    1efc:	6178                	flw	fa4,68(a0)
    1efe:	706d                	c.lui	zero,0xffffb
    portable_fini(&(results[0].port));
    1f00:	656c                	flw	fa1,76(a0)
    1f02:	726f632f          	0x726f632f
    1f06:	6d65                	lui	s10,0x19
    1f08:	7261                	lui	tp,0xffff8
    1f0a:	6300006b          	0x6300006b
    1f0e:	5f65726f          	jal	tp,59504 <RAM_SIZE+0x49504>
    return MAIN_RETURN_VAL;
    1f12:	6f70                	flw	fa2,92(a4)
}
    1f14:	7472                	flw	fs0,60(sp)
    1f16:	656d                	lui	a0,0x1b
    1f18:	632e                	flw	ft6,200(sp)
    1f1a:	0100                	addi	s0,sp,128
    1f1c:	0000                	unimp
    1f1e:	65726f63          	bltu	tp,s7,257c <matrix_mul_const+0x68>
    1f22:	705f 726f 6d74      	0x6d74726f705f
    1f28:	2e65                	jal	22e0 <core_init_matrix+0x14c>
    1f2a:	0068                	addi	a0,sp,12
{
    1f2c:	0001                	nop
    1f2e:	6300                	flw	fs0,0(a4)
    1f30:	6d65726f          	jal	tp,59606 <RAM_SIZE+0x49606>
    1f34:	7261                	lui	tp,0xffff8
    1f36:	00682e6b          	0x682e6b
    1f3a:	0001                	nop
    1f3c:	0000                	unimp
    1f3e:	0105                	addi	sp,sp,1
    1f40:	0500                	addi	s0,sp,640
    1f42:	9002                	ebreak
    1f44:	0300002b          	0x300002b
    1f48:	012e                	slli	sp,sp,0xb
    1f4a:	1d05                	addi	s10,s10,-31
    1f4c:	0c090103          	lb	sp,192(s2)
    1f50:	0100                	addi	s0,sp,128
    1f52:	0905                	addi	s2,s2,1
    ee_u32  N   = p->N;
    1f54:	0c090103          	lb	sp,192(s2)
    1f58:	0100                	addi	s0,sp,128
    1f5a:	0105                	addi	sp,sp,1
    1f5c:	08090103          	lb	sp,128(s2)
    MATRES *C   = p->C;
    1f60:	0100                	addi	s0,sp,128
    1f62:	10091c03          	lh	s8,256(s2)
    1f66:	0100                	addi	s0,sp,128
    1f68:	0505                	addi	a0,a0,1
    1f6a:	10090103          	lb	sp,256(s2)
    MATDAT *A   = p->A;
    1f6e:	0100                	addi	s0,sp,128
    1f70:	0105                	addi	sp,sp,1
    1f72:	0c090103          	lb	sp,192(s2)
    1f76:	0100                	addi	s0,sp,128
    MATDAT *B   = p->B;
    1f78:	14090b03          	lb	s6,320(s2)
    1f7c:	0100                	addi	s0,sp,128
    1f7e:	0505                	addi	a0,a0,1
    1f80:	10090103          	lb	sp,256(s2)
    MATDAT  val = (MATDAT)seed;
    1f84:	0100                	addi	s0,sp,128
    1f86:	0105                	addi	sp,sp,1
    1f88:	0c090103          	lb	sp,192(s2)
    crc = crc16(matrix_test(N, C, A, B, val), crc);
    1f8c:	0100                	addi	s0,sp,128
    1f8e:	14090c03          	lb	s8,320(s2)
    1f92:	0100                	addi	s0,sp,128
    1f94:	0b05                	addi	s6,s6,1
    1f96:	0c090203          	lb	tp,192(s2)
    1f9a:	0100                	addi	s0,sp,128
    1f9c:	1005                	c.nop	-31
    1f9e:	08097f03          	0x8097f03
    1fa2:	0100                	addi	s0,sp,128
    1fa4:	0c05                	addi	s8,s8,1
    1fa6:	08090203          	lb	tp,128(s2)
    1faa:	0100                	addi	s0,sp,128
    1fac:	0105                	addi	sp,sp,1
    1fae:	04090103          	lb	sp,64(s2)
    1fb2:	0100                	addi	s0,sp,128
    1fb4:	10090a03          	lb	s4,256(s2)
    1fb8:	0100                	addi	s0,sp,128
    1fba:	0e05                	addi	t3,t3,1
    1fbc:	14090103          	lb	sp,320(s2)
    1fc0:	0100                	addi	s0,sp,128
    1fc2:	0c05                	addi	s8,s8,1
    1fc4:	18090103          	lb	sp,384(s2)
    return crc;
    1fc8:	0100                	addi	s0,sp,128
    1fca:	0105                	addi	sp,sp,1
}
    1fcc:	04090103          	lb	sp,64(s2)
    1fd0:	0100                	addi	s0,sp,128
    1fd2:	14090a03          	lb	s4,320(s2)
    1fd6:	0100                	addi	s0,sp,128
    1fd8:	1405                	addi	s0,s0,-31
    1fda:	18090b03          	lb	s6,384(s2)
    1fde:	0100                	addi	s0,sp,128
{
    1fe0:	0105                	addi	sp,sp,1
    1fe2:	0c090103          	lb	sp,192(s2)
    1fe6:	0100                	addi	s0,sp,128
    1fe8:	10090603          	lb	a2,256(s2)
    1fec:	0100                	addi	s0,sp,128
    1fee:	1405                	addi	s0,s0,-31
    1ff0:	10090103          	lb	sp,256(s2)
    1ff4:	0100                	addi	s0,sp,128
    1ff6:	0105                	addi	sp,sp,1
    1ff8:	08090103          	lb	sp,128(s2)
    1ffc:	0100                	addi	s0,sp,128
    1ffe:	1009                	c.nop	-30
    2000:	0000                	unimp
    2002:	0101                	addi	sp,sp,0
    2004:	000006fb          	0x6fb
    ee_u16 crc     = 0;
    2008:	00610003          	lb	zero,6(sp)
    MATDAT clipval = matrix_big(val);
    200c:	0000                	unimp
    200e:	0101                	addi	sp,sp,0
    2010:	000d0efb          	0xd0efb
    2014:	0101                	addi	sp,sp,0
    2016:	0101                	addi	sp,sp,0
    2018:	0000                	unimp
    201a:	0100                	addi	s0,sp,128
    matrix_add_const(N, A, val); /* make sure data changes  */
    201c:	0000                	unimp
    201e:	2f01                	jal	272e <matrix_mul_vect+0x1e>
    2020:	72616873          	csrrsi	a6,0x726,2
    2024:	6465                	lui	s0,0x19
    2026:	7369722f          	0x7369722f
    202a:	652d7663          	bgeu	s10,s2,2676 <matrix_add_const+0x5e>
    202e:	6178                	flw	fa4,68(a0)
    matrix_mul_const(N, C, A, val);
    2030:	706d                	c.lui	zero,0xffffb
    2032:	656c                	flw	fa1,76(a0)
    2034:	726f632f          	0x726f632f
    2038:	6d65                	lui	s10,0x19
    203a:	7261                	lui	tp,0xffff8
    203c:	6300006b          	0x6300006b
    2040:	5f65726f          	jal	tp,59636 <RAM_SIZE+0x49636>
    2044:	74617473          	csrrci	s0,0x746,2
    crc = crc16(matrix_sum(N, C, clipval), crc);
    2048:	2e65                	jal	2400 <matrix_sum+0x10>
    204a:	00010063          	beqz	sp,204a <matrix_test+0x6a>
    204e:	6300                	flw	fs0,0(a4)
    2050:	5f65726f          	jal	tp,59646 <RAM_SIZE+0x49646>
    2054:	6f70                	flw	fa2,92(a4)
    2056:	7472                	flw	fs0,60(sp)
    2058:	656d                	lui	a0,0x1b
    205a:	682e                	flw	fa6,200(sp)
    205c:	0100                	addi	s0,sp,128
    205e:	0000                	unimp
    2060:	65726f63          	bltu	tp,s7,26be <matrix_add_const+0xa6>
    2064:	616d                	addi	sp,sp,240
    2066:	6b72                	flw	fs6,28(sp)
    2068:	682e                	flw	fa6,200(sp)
    206a:	0100                	addi	s0,sp,128
    206c:	0000                	unimp
    206e:	0500                	addi	s0,sp,640
    2070:	0001                	nop
    2072:	0205                	addi	tp,tp,1
    2074:	2cf0                	fld	fa2,216(s1)
    2076:	0000                	unimp
    2078:	05013303          	0x5013303
    matrix_mul_vect(N, C, A, B);
    207c:	030c                	addi	a1,sp,384
    207e:	00480903          	lb	s2,4(a6) # ffff9004 <RAM_SIZE+0xfffe9004>
    2082:	0301                	addi	t1,t1,0
    2084:	0906                	slli	s2,s2,0x1
    2086:	0008                	0x8
    2088:	0501                	addi	a0,a0,0
    208a:	0305                	addi	t1,t1,1
    208c:	0900                	addi	s0,sp,144
    208e:	0004                	0x4
    crc = crc16(matrix_sum(N, C, clipval), crc);
    2090:	0501                	addi	a0,a0,0
    2092:	0402002b          	0x402002b
    2096:	09020303          	lb	t1,144(tp) # ffff8090 <RAM_SIZE+0xfffe8090>
    209a:	0004                	0x4
    209c:	0501                	addi	a0,a0,0
    209e:	04020027          	vsuxei8.v	v0,(tp),v0,v0.t
    20a2:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    20a6:	0014                	0x14
    20a8:	0501                	addi	a0,a0,0
    20aa:	0019                	c.nop	6
    20ac:	0402                	c.slli64	s0
    20ae:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    20b2:	0014                	0x14
    20b4:	0501                	addi	a0,a0,0
    20b6:	04020027          	vsuxei8.v	v0,(tp),v0,v0.t
    20ba:	097e0303          	lb	t1,151(t3)
    20be:	0014                	0x14
    20c0:	0501                	addi	a0,a0,0
    20c2:	0005                	c.nop	1
    matrix_mul_matrix(N, C, A, B);
    20c4:	0402                	c.slli64	s0
    20c6:	0301                	addi	t1,t1,0
    20c8:	0900                	addi	s0,sp,144
    20ca:	000c                	0xc
    20cc:	0501                	addi	a0,a0,0
    20ce:	0905030b          	0x905030b
    20d2:	000c                	0xc
    20d4:	0501                	addi	a0,a0,0
    20d6:	0322                	slli	t1,t1,0x8
    crc = crc16(matrix_sum(N, C, clipval), crc);
    20d8:	0902                	c.slli64	s2
    20da:	0004                	0x4
    20dc:	0501                	addi	a0,a0,0
    20de:	0315                	addi	t1,t1,5
    20e0:	0901                	addi	s2,s2,0
    20e2:	0018                	0x18
    20e4:	0501                	addi	a0,a0,0
    20e6:	031d                	addi	t1,t1,7
    20e8:	0900                	addi	s0,sp,144
    20ea:	0014                	0x14
    20ec:	0501                	addi	a0,a0,0
    20ee:	030c                	addi	a1,sp,384
    20f0:	097d                	addi	s2,s2,31
    20f2:	0018                	0x18
    20f4:	0501                	addi	a0,a0,0
    20f6:	0900030b          	0x900030b
    20fa:	0008                	0x8
    20fc:	0501                	addi	a0,a0,0
    20fe:	090b0307          	vlse8.v	v6,(s6),a6,v0.t
    2102:	0004                	0x4
    2104:	0501                	addi	a0,a0,0
    2106:	0901030b          	0x901030b
    210a:	0008                	0x8
    matrix_mul_matrix_bitextract(N, C, A, B);
    210c:	0501                	addi	a0,a0,0
    210e:	030d                	addi	t1,t1,3
    2110:	0902                	c.slli64	s2
    2112:	0004                	0x4
    2114:	0501                	addi	a0,a0,0
    2116:	030c                	addi	a1,sp,384
    2118:	0900                	addi	s0,sp,144
    211a:	0008                	0x8
    211c:	0501                	addi	a0,a0,0
    211e:	0310                	addi	a2,sp,384
    crc = crc16(matrix_sum(N, C, clipval), crc);
    2120:	0901                	addi	s2,s2,0
    2122:	0008                	0x8
    2124:	0501                	addi	a0,a0,0
    2126:	09000313          	li	t1,144
    212a:	0008                	0x8
    212c:	0501                	addi	a0,a0,0
    212e:	0310                	addi	a2,sp,384
    2130:	0900                	addi	s0,sp,144
    2132:	0008                	0x8
    2134:	0501                	addi	a0,a0,0
    2136:	0901030b          	0x901030b
    213a:	0010                	0x10
    213c:	0501                	addi	a0,a0,0
    213e:	031a                	slli	t1,t1,0x6
    2140:	097c                	addi	a5,sp,156
    2142:	0010                	0x10
    2144:	0501                	addi	a0,a0,0
    2146:	030e                	slli	t1,t1,0x3
    2148:	0900                	addi	s0,sp,144
    214a:	000c                	0xc
    214c:	0501                	addi	a0,a0,0
    214e:	0900030b          	0x900030b
    2152:	0004                	0x4
    matrix_add_const(N, A, -val); /* return matrix to initial value */
    2154:	0501                	addi	a0,a0,0
    2156:	09060307          	vlse8.v	v6,(a2),a6,v0.t
    215a:	0004                	0x4
    215c:	0501                	addi	a0,a0,0
    215e:	0902030b          	0x902030b
    2162:	0008                	0x8
    2164:	0501                	addi	a0,a0,0
    2166:	0322                	slli	t1,t1,0x8
    2168:	0902                	c.slli64	s2
    216a:	0004                	0x4
    216c:	0501                	addi	a0,a0,0
    216e:	0315                	addi	t1,t1,5
    2170:	0901                	addi	s2,s2,0
    2172:	0018                	0x18
    2174:	0501                	addi	a0,a0,0
    2176:	031d                	addi	t1,t1,7
    2178:	0900                	addi	s0,sp,144
    217a:	0014                	0x14
    return crc;
    217c:	0501                	addi	a0,a0,0
    217e:	030c                	addi	a1,sp,384
}
    2180:	097d                	addi	s2,s2,31
    2182:	0018                	0x18
    2184:	0501                	addi	a0,a0,0
    2186:	0900030b          	0x900030b
    218a:	0008                	0x8
    218c:	0501                	addi	a0,a0,0
    218e:	090b0307          	vlse8.v	v6,(s6),a6,v0.t
    2192:	0004                	0x4
{
    2194:	0501                	addi	a0,a0,0
    2196:	0901030b          	0x901030b
    219a:	0008                	0x8
    219c:	0501                	addi	a0,a0,0
    219e:	030d                	addi	t1,t1,3
    21a0:	0902                	c.slli64	s2
    21a2:	0004                	0x4
    21a4:	0501                	addi	a0,a0,0
    21a6:	030c                	addi	a1,sp,384
    21a8:	0900                	addi	s0,sp,144
    21aa:	0008                	0x8
    21ac:	0501                	addi	a0,a0,0
    21ae:	0310                	addi	a2,sp,384
    21b0:	0901                	addi	s2,s2,0
    21b2:	0008                	0x8
    ee_u32  N = 0;
    21b4:	0501                	addi	a0,a0,0
    21b6:	09000313          	li	t1,144
    ee_s32  order = 1;
    21ba:	0008                	0x8
    21bc:	0501                	addi	a0,a0,0
    21be:	0310                	addi	a2,sp,384
    ee_u32  i = 0, j = 0;
    21c0:	0900                	addi	s0,sp,144
    21c2:	0008                	0x8
    21c4:	0501                	addi	a0,a0,0
    21c6:	0901030b          	0x901030b
    if (seed == 0)
    21ca:	0010                	0x10
    21cc:	0501                	addi	a0,a0,0
    21ce:	031a                	slli	t1,t1,0x6
        seed = 1;
    21d0:	097c                	addi	a5,sp,156
    21d2:	0010                	0x10
    21d4:	0501                	addi	a0,a0,0
    21d6:	030e                	slli	t1,t1,0x3
    while (j < blksize)
    21d8:	0900                	addi	s0,sp,144
    21da:	000c                	0xc
        i++;
    21dc:	0501                	addi	a0,a0,0
    21de:	0900030b          	0x900030b
    21e2:	0004                	0x4
    21e4:	0501                	addi	a0,a0,0
    21e6:	030c                	addi	a1,sp,384
        j = i * i * 2 * 4;
    21e8:	00040907          	vle8.v	v18,(s0),v0.t
    21ec:	0501                	addi	a0,a0,0
    21ee:	0305                	addi	t1,t1,1
    21f0:	0900                	addi	s0,sp,144
    21f2:	0004                	0x4
    21f4:	0501                	addi	a0,a0,0
    21f6:	0402000f          	0x402000f
    21fa:	09020303          	lb	t1,144(tp) # 90 <__do_global_dtors_aux+0x34>
    21fe:	0004                	0x4
    while (j < blksize)
    2200:	0001                	nop
    2202:	0402                	c.slli64	s0
    2204:	09010303          	lb	t1,144(sp)
    2208:	002c                	addi	a1,sp,8
    220a:	0501                	addi	a0,a0,0
    N = i - 1;
    220c:	04020027          	vsuxei8.v	v0,(tp),v0,v0.t
    2210:	097d0303          	lb	t1,151(s10) # 19097 <RAM_SIZE+0x9097>
    2214:	002c                	addi	a1,sp,8
    2216:	0501                	addi	a0,a0,0
    A = (MATDAT *)align_mem(memblk);
    2218:	0005                	c.nop	1
    221a:	0402                	c.slli64	s0
    221c:	0301                	addi	t1,t1,0
    221e:	0900                	addi	s0,sp,144
    2220:	000c                	0xc
    2222:	0501                	addi	a0,a0,0
    2224:	030c                	addi	a1,sp,384
    2226:	0905                	addi	s2,s2,1
    2228:	000c                	0xc
    222a:	0501                	addi	a0,a0,0
    B = A + N * N;
    222c:	0301                	addi	t1,t1,0
    222e:	0901                	addi	s2,s2,0
    2230:	0004                	0x4
    2232:	0301                	addi	t1,t1,0
    2234:	091e                	slli	s2,s2,0x7
    2236:	0014                	0x14
    2238:	0501                	addi	a0,a0,0
    223a:	030c                	addi	a1,sp,384
    223c:	0901                	addi	s2,s2,0
    223e:	001c                	0x1c
    2240:	0501                	addi	a0,a0,0
    2242:	09000317          	auipc	t1,0x9000
    2246:	0004                	0x4
    2248:	0501                	addi	a0,a0,0
    224a:	030c                	addi	a1,sp,384
    for (i = 0; i < N; i++)
    224c:	0901                	addi	s2,s2,0
    224e:	0004                	0x4
    2250:	0501                	addi	a0,a0,0
    2252:	0309                	addi	t1,t1,2
        for (j = 0; j < N; j++)
    2254:	0905                	addi	s2,s2,1
    2256:	0004                	0x4
    2258:	0501                	addi	a0,a0,0
    225a:	030a                	slli	t1,t1,0x2
            seed         = ((order * seed) % 65536);
    225c:	0901                	addi	s2,s2,0
    225e:	000c                	0xc
    2260:	0501                	addi	a0,a0,0
    2262:	0901030b          	0x901030b
    2266:	0004                	0x4
    2268:	0501                	addi	a0,a0,0
    226a:	030c                	addi	a1,sp,384
    226c:	0902                	c.slli64	s2
    226e:	0004                	0x4
    2270:	0501                	addi	a0,a0,0
    2272:	0314                	addi	a3,sp,384
    2274:	0902                	c.slli64	s2
    2276:	0008                	0x8
    2278:	0501                	addi	a0,a0,0
    227a:	030d                	addi	t1,t1,3
    227c:	0900                	addi	s0,sp,144
    227e:	0004                	0x4
    2280:	0501                	addi	a0,a0,0
    2282:	04020027          	vsuxei8.v	v0,(tp),v0,v0.t
    2286:	09010303          	lb	t1,144(sp)
    228a:	0004                	0x4
    228c:	0501                	addi	a0,a0,0
    228e:	001d                	c.nop	7
            val          = (seed + order);
    2290:	0402                	c.slli64	s0
    2292:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    2296:	000c                	0xc
    2298:	0501                	addi	a0,a0,0
    229a:	04020027          	vsuxei8.v	v0,(tp),v0,v0.t
    229e:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    22a2:	0014                	0x14
    22a4:	0501                	addi	a0,a0,0
    22a6:	0022                	c.slli	zero,0x8
    22a8:	0402                	c.slli64	s0
    22aa:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    22ae:	0004                	0x4
    22b0:	0501                	addi	a0,a0,0
    22b2:	0024                	addi	s1,sp,8
    22b4:	0402                	c.slli64	s0
    22b6:	097f0303          	lb	t1,151(t5)
            B[i * N + j] = val;
    22ba:	0004                	0x4
    22bc:	0501                	addi	a0,a0,0
    22be:	000d                	c.nop	3
    22c0:	0402                	c.slli64	s0
    22c2:	0301                	addi	t1,t1,0
    22c4:	0900                	addi	s0,sp,144
    22c6:	000c                	0xc
    22c8:	0501                	addi	a0,a0,0
    22ca:	0319                	addi	t1,t1,6
    22cc:	0902                	c.slli64	s2
    22ce:	000c                	0xc
    22d0:	0501                	addi	a0,a0,0
    22d2:	031e                	slli	t1,t1,0x7
    22d4:	0900                	addi	s0,sp,144
    22d6:	0014                	0x14
    22d8:	0501                	addi	a0,a0,0
    22da:	09010313          	addi	t1,sp,144
    22de:	0008                	0x8
    22e0:	0501                	addi	a0,a0,0
    22e2:	030d                	addi	t1,t1,3
    22e4:	0902                	c.slli64	s2
    22e6:	0014                	0x14
            val          = (val + order);
    22e8:	0501                	addi	a0,a0,0
    22ea:	0316                	slli	t1,t1,0x5
    22ec:	0901                	addi	s2,s2,0
    22ee:	001c                	0x1c
    22f0:	0501                	addi	a0,a0,0
    22f2:	0309                	addi	t1,t1,2
    22f4:	0900                	addi	s0,sp,144
    22f6:	0008                	0x8
    22f8:	0501                	addi	a0,a0,0
    22fa:	0905032b          	0x905032b
    22fe:	0040                	addi	s0,sp,4
    2300:	0501                	addi	a0,a0,0
    2302:	0316                	slli	t1,t1,0x5
    2304:	0900                	addi	s0,sp,144
    2306:	001c                	0x1c
            val          = matrix_clip(val, 1);
    2308:	0301                	addi	t1,t1,0
    230a:	0901                	addi	s2,s2,0
    230c:	0014                	0x14
    230e:	0501                	addi	a0,a0,0
    2310:	0311                	addi	t1,t1,4
    2312:	0901                	addi	s2,s2,0
            A[i * N + j] = val;
    2314:	0008                	0x8
    2316:	0501                	addi	a0,a0,0
    2318:	032d                	addi	t1,t1,11
    231a:	00040903          	lb	s2,0(s0) # 19000 <RAM_SIZE+0x9000>
    231e:	0501                	addi	a0,a0,0
    2320:	0316                	slli	t1,t1,0x5
    2322:	0900                	addi	s0,sp,144
    2324:	001c                	0x1c
    2326:	0301                	addi	t1,t1,0
    2328:	0901                	addi	s2,s2,0
    232a:	0014                	0x14
    232c:	0501                	addi	a0,a0,0
    232e:	0311                	addi	t1,t1,4
    2330:	0901                	addi	s2,s2,0
    2332:	0008                	0x8
    2334:	0501                	addi	a0,a0,0
    2336:	0903032b          	0x903032b
    233a:	0004                	0x4
    233c:	0501                	addi	a0,a0,0
    233e:	0316                	slli	t1,t1,0x5
    2340:	0900                	addi	s0,sp,144
    2342:	001c                	0x1c
            order++;
    2344:	0301                	addi	t1,t1,0
    2346:	0901                	addi	s2,s2,0
    2348:	0014                	0x14
    234a:	0501                	addi	a0,a0,0
    234c:	0311                	addi	t1,t1,4
    234e:	0901                	addi	s2,s2,0
        for (j = 0; j < N; j++)
    2350:	0008                	0x8
    2352:	0501                	addi	a0,a0,0
    2354:	0902032b          	0x902032b
    2358:	0004                	0x4
    235a:	0501                	addi	a0,a0,0
    235c:	0316                	slli	t1,t1,0x5
    235e:	0900                	addi	s0,sp,144
    2360:	001c                	0x1c
    2362:	0301                	addi	t1,t1,0
    2364:	0901                	addi	s2,s2,0
    2366:	0014                	0x14
    for (i = 0; i < N; i++)
    2368:	0501                	addi	a0,a0,0
    236a:	0311                	addi	t1,t1,4
    236c:	0901                	addi	s2,s2,0
    236e:	0008                	0x8
    2370:	0301                	addi	t1,t1,0
    2372:	0902                	c.slli64	s2
    2374:	0004                	0x4
    2376:	0501                	addi	a0,a0,0
    2378:	095f0313          	addi	t1,t5,149
    237c:	0004                	0x4
    237e:	0501                	addi	a0,a0,0
    p->A = A;
    2380:	031a                	slli	t1,t1,0x6
    2382:	0900                	addi	s0,sp,144
    2384:	000c                	0xc
    2386:	0501                	addi	a0,a0,0
    2388:	0900030b          	0x900030b
    p->B = B;
    238c:	0004                	0x4
    238e:	0501                	addi	a0,a0,0
    2390:	0309                	addi	t1,t1,2
    2392:	0924                	addi	s1,sp,152
    2394:	0008                	0x8
    2396:	0501                	addi	a0,a0,0
    p->C = (MATRES *)align_mem(B + N * N);
    2398:	0901030b          	0x901030b
    239c:	000c                	0xc
    239e:	0501                	addi	a0,a0,0
    23a0:	030d                	addi	t1,t1,3
    23a2:	0902                	c.slli64	s2
    23a4:	0004                	0x4
    23a6:	0501                	addi	a0,a0,0
    23a8:	0316                	slli	t1,t1,0x5
    23aa:	0900                	addi	s0,sp,144
    23ac:	000c                	0xc
    23ae:	0501                	addi	a0,a0,0
    23b0:	030e                	slli	t1,t1,0x3
    23b2:	0901                	addi	s2,s2,0
    23b4:	0004                	0x4
    23b6:	0501                	addi	a0,a0,0
    23b8:	097d030b          	0x97d030b
    23bc:	000c                	0xc
    23be:	0501                	addi	a0,a0,0
    23c0:	0301                	addi	t1,t1,0
    23c2:	0908                	addi	a0,sp,144
    23c4:	000c                	0xc
    23c6:	0301                	addi	t1,t1,0
    23c8:	0904                	addi	s1,sp,144
    23ca:	0014                	0x14
    p->N = N;
    23cc:	0501                	addi	a0,a0,0
    23ce:	031a                	slli	t1,t1,0x6
    23d0:	0902                	c.slli64	s2
    23d2:	0014                	0x14
    23d4:	0501                	addi	a0,a0,0
    23d6:	030c                	addi	a1,sp,384
    return N;
    23d8:	0900                	addi	s0,sp,144
    23da:	0024                	addi	s1,sp,8
}
    23dc:	0301                	addi	t1,t1,0
    23de:	0901                	addi	s2,s2,0
    23e0:	0004                	0x4
    23e2:	0501                	addi	a0,a0,0
    23e4:	0301                	addi	t1,t1,0
    23e6:	0901                	addi	s2,s2,0
    23e8:	0004                	0x4
    23ea:	0301                	addi	t1,t1,0
    23ec:	0010090f          	0x10090f
{
    23f0:	0501                	addi	a0,a0,0
    23f2:	0315                	addi	t1,t1,5
    23f4:	0901                	addi	s2,s2,0
    23f6:	0018                	0x18
    23f8:	0301                	addi	t1,t1,0
    23fa:	0902                	c.slli64	s2
    23fc:	000c                	0xc
    23fe:	0501                	addi	a0,a0,0
    2400:	0305                	addi	t1,t1,1
    2402:	0901                	addi	s2,s2,0
    2404:	0004                	0x4
    2406:	0501                	addi	a0,a0,0
    2408:	0315                	addi	t1,t1,5
    240a:	0902                	c.slli64	s2
    240c:	0004                	0x4
    240e:	0501                	addi	a0,a0,0
    MATRES tmp = 0, prev = 0, cur = 0;
    2410:	030c                	addi	a1,sp,384
    2412:	0901                	addi	s2,s2,0
    2414:	000c                	0xc
    2416:	0501                	addi	a0,a0,0
    2418:	0310                	addi	a2,sp,384
    241a:	0902                	c.slli64	s2
    ee_s16 ret = 0;
    241c:	000c                	0xc
    241e:	0501                	addi	a0,a0,0
    for (i = 0; i < N; i++)
    2420:	030d                	addi	t1,t1,3
    2422:	0901                	addi	s2,s2,0
    2424:	000c                	0xc
    2426:	0501                	addi	a0,a0,0
        for (j = 0; j < N; j++)
    2428:	0315                	addi	t1,t1,5
    242a:	0905                	addi	s2,s2,1
    242c:	002c                	addi	a1,sp,8
    242e:	0501                	addi	a0,a0,0
            cur = C[i * N + j];
    2430:	0314                	addi	a3,sp,384
    2432:	0900                	addi	s0,sp,144
    2434:	0010                	0x10
    2436:	0501                	addi	a0,a0,0
    2438:	0902031b          	0x902031b
    243c:	0004                	0x4
    243e:	0501                	addi	a0,a0,0
    2440:	0319                	addi	t1,t1,6
    2442:	0902                	c.slli64	s2
    2444:	000c                	0xc
    2446:	0501                	addi	a0,a0,0
    2448:	002d                	c.nop	11
    244a:	0402                	c.slli64	s0
    244c:	0301                	addi	t1,t1,0
    244e:	0900                	addi	s0,sp,144
    2450:	000c                	0xc
    2452:	0501                	addi	a0,a0,0
    2454:	0902031b          	0x902031b
    2458:	000c                	0xc
    245a:	0501                	addi	a0,a0,0
    245c:	0319                	addi	t1,t1,6
    245e:	0902                	c.slli64	s2
            tmp += cur;
    2460:	000c                	0xc
    2462:	0501                	addi	a0,a0,0
    2464:	0902031b          	0x902031b
    2468:	000c                	0xc
    246a:	0301                	addi	t1,t1,0
    246c:	0904                	addi	s1,sp,144
    246e:	000c                	0xc
            if (tmp > clipval)
    2470:	0501                	addi	a0,a0,0
    2472:	0325                	addi	t1,t1,9
    2474:	0901                	addi	s2,s2,0
    2476:	0008                	0x8
    2478:	0501                	addi	a0,a0,0
    247a:	09000333          	0x9000333
                ret += 10;
    247e:	000c                	0xc
    2480:	0501                	addi	a0,a0,0
    2482:	0321                	addi	t1,t1,8
    2484:	0902                	c.slli64	s2
    2486:	0008                	0x8
    2488:	0501                	addi	a0,a0,0
    248a:	032d                	addi	t1,t1,11
    248c:	0900                	addi	s0,sp,144
    248e:	0008                	0x8
                tmp = 0;
    2490:	0501                	addi	a0,a0,0
    2492:	0311                	addi	t1,t1,4
    2494:	0901                	addi	s2,s2,0
    2496:	000c                	0xc
                ret += (cur > prev) ? 1 : 0;
    2498:	0501                	addi	a0,a0,0
    249a:	0315                	addi	t1,t1,5
    249c:	0902                	c.slli64	s2
    249e:	0004                	0x4
    24a0:	0501                	addi	a0,a0,0
    24a2:	0314                	addi	a3,sp,384
    24a4:	0900                	addi	s0,sp,144
    24a6:	0010                	0x10
    24a8:	0501                	addi	a0,a0,0
    24aa:	0902031b          	0x902031b
    24ae:	0004                	0x4
    24b0:	0501                	addi	a0,a0,0
    24b2:	0325                	addi	t1,t1,9
    24b4:	0901                	addi	s2,s2,0
    24b6:	0008                	0x8
    24b8:	0501                	addi	a0,a0,0
    24ba:	032e                	slli	t1,t1,0xb
    24bc:	0900                	addi	s0,sp,144
    24be:	000c                	0xc
    24c0:	0501                	addi	a0,a0,0
    24c2:	0311                	addi	t1,t1,4
            prev = cur;
    24c4:	090c                	addi	a1,sp,144
    24c6:	0008                	0x8
    24c8:	0501                	addi	a0,a0,0
    24ca:	0319                	addi	t1,t1,6
        for (j = 0; j < N; j++)
    24cc:	0976                	slli	s2,s2,0x1d
    24ce:	0004                	0x4
    24d0:	0501                	addi	a0,a0,0
    24d2:	0902031b          	0x902031b
    24d6:	000c                	0xc
    24d8:	0501                	addi	a0,a0,0
    24da:	0325                	addi	t1,t1,9
    24dc:	0901                	addi	s2,s2,0
    24de:	0008                	0x8
    24e0:	0501                	addi	a0,a0,0
    24e2:	032e                	slli	t1,t1,0xb
    for (i = 0; i < N; i++)
    24e4:	0900                	addi	s0,sp,144
    24e6:	000c                	0xc
    24e8:	0501                	addi	a0,a0,0
    24ea:	0311                	addi	t1,t1,4
    24ec:	00080907          	vle8.v	v18,(a6),v0.t
    24f0:	0501                	addi	a0,a0,0
    24f2:	097d031b          	0x97d031b
    24f6:	0004                	0x4
    24f8:	0501                	addi	a0,a0,0
    24fa:	0325                	addi	t1,t1,9
    return ret;
    24fc:	0901                	addi	s2,s2,0
    24fe:	0008                	0x8
}
    2500:	0501                	addi	a0,a0,0
    2502:	032e                	slli	t1,t1,0xb
    2504:	0900                	addi	s0,sp,144
    2506:	000c                	0xc
    2508:	0501                	addi	a0,a0,0
    250a:	0311                	addi	t1,t1,4
    250c:	0902                	c.slli64	s2
    250e:	0008                	0x8
    2510:	0501                	addi	a0,a0,0
    2512:	0314                	addi	a3,sp,384
{
    2514:	0902                	c.slli64	s2
    2516:	0004                	0x4
    2518:	0501                	addi	a0,a0,0
    251a:	0902031b          	0x902031b
    251e:	000c                	0xc
    2520:	0501                	addi	a0,a0,0
    2522:	0325                	addi	t1,t1,9
    2524:	0901                	addi	s2,s2,0
    2526:	0008                	0x8
    2528:	0501                	addi	a0,a0,0
    252a:	0900032f          	vamoswapei8.v	zero,(zero),v16,v6,v0.t
    252e:	000c                	0xc
    2530:	0501                	addi	a0,a0,0
    2532:	0311                	addi	t1,t1,4
    2534:	00080907          	vle8.v	v18,(a6),v0.t
    2538:	0501                	addi	a0,a0,0
    253a:	097b031b          	0x97b031b
    253e:	0004                	0x4
    2540:	0501                	addi	a0,a0,0
    2542:	0319                	addi	t1,t1,6
    for (i = 0; i < N; i++)
    2544:	0900                	addi	s0,sp,144
    2546:	0010                	0x10
    2548:	0501                	addi	a0,a0,0
    254a:	0902031b          	0x902031b
        for (j = 0; j < N; j++)
    254e:	0004                	0x4
    2550:	0501                	addi	a0,a0,0
    2552:	0325                	addi	t1,t1,9
            C[i * N + j] = (MATRES)A[i * N + j] * (MATRES)val;
    2554:	0901                	addi	s2,s2,0
    2556:	0008                	0x8
    2558:	0501                	addi	a0,a0,0
    255a:	0900032f          	vamoswapei8.v	zero,(zero),v16,v6,v0.t
    255e:	000c                	0xc
    2560:	0501                	addi	a0,a0,0
    2562:	0311                	addi	t1,t1,4
    2564:	0902                	c.slli64	s2
    2566:	0008                	0x8
    2568:	0501                	addi	a0,a0,0
    256a:	0314                	addi	a3,sp,384
    256c:	0902                	c.slli64	s2
    256e:	0004                	0x4
    2570:	0501                	addi	a0,a0,0
    2572:	0028                	addi	a0,sp,8
    2574:	0402                	c.slli64	s0
    2576:	0301                	addi	t1,t1,0
    2578:	0900                	addi	s0,sp,144
    257a:	000c                	0xc
    257c:	0501                	addi	a0,a0,0
    257e:	0902031b          	0x902031b
    2582:	000c                	0xc
    2584:	0501                	addi	a0,a0,0
    2586:	0325                	addi	t1,t1,9
    2588:	0901                	addi	s2,s2,0
    258a:	0008                	0x8
    258c:	0501                	addi	a0,a0,0
    258e:	0331                	addi	t1,t1,12
    2590:	0900                	addi	s0,sp,144
    2592:	000c                	0xc
    2594:	0501                	addi	a0,a0,0
    2596:	0311                	addi	t1,t1,4
    2598:	00080907          	vle8.v	v18,(a6),v0.t
    259c:	0501                	addi	a0,a0,0
    259e:	097b031b          	0x97b031b
    25a2:	0004                	0x4
    25a4:	0501                	addi	a0,a0,0
    25a6:	0319                	addi	t1,t1,6
    25a8:	0900                	addi	s0,sp,144
    25aa:	0010                	0x10
    25ac:	0501                	addi	a0,a0,0
    25ae:	0902031b          	0x902031b
    25b2:	0004                	0x4
    25b4:	0501                	addi	a0,a0,0
    25b6:	0325                	addi	t1,t1,9
    25b8:	0901                	addi	s2,s2,0
    25ba:	0008                	0x8
    25bc:	0501                	addi	a0,a0,0
    25be:	0331                	addi	t1,t1,12
    25c0:	0900                	addi	s0,sp,144
    25c2:	000c                	0xc
        for (j = 0; j < N; j++)
    25c4:	0501                	addi	a0,a0,0
    25c6:	0311                	addi	t1,t1,4
    25c8:	0902                	c.slli64	s2
    25ca:	0008                	0x8
    25cc:	0501                	addi	a0,a0,0
    25ce:	0314                	addi	a3,sp,384
    25d0:	0902                	c.slli64	s2
    25d2:	0004                	0x4
    25d4:	0501                	addi	a0,a0,0
    25d6:	0028                	addi	a0,sp,8
    25d8:	0402                	c.slli64	s0
    25da:	0301                	addi	t1,t1,0
    for (i = 0; i < N; i++)
    25dc:	0900                	addi	s0,sp,144
    25de:	000c                	0xc
    25e0:	0501                	addi	a0,a0,0
    25e2:	0902031b          	0x902031b
    25e6:	000c                	0xc
    25e8:	0501                	addi	a0,a0,0
    25ea:	0325                	addi	t1,t1,9
    25ec:	0901                	addi	s2,s2,0
    25ee:	0008                	0x8
    25f0:	0501                	addi	a0,a0,0
    25f2:	032e                	slli	t1,t1,0xb
}
    25f4:	0900                	addi	s0,sp,144
    25f6:	000c                	0xc
    25f8:	0501                	addi	a0,a0,0
    25fa:	0311                	addi	t1,t1,4
    25fc:	00080907          	vle8.v	v18,(a6),v0.t
    2600:	0501                	addi	a0,a0,0
    2602:	097d031b          	0x97d031b
    2606:	0004                	0x4
    2608:	0501                	addi	a0,a0,0
    260a:	0325                	addi	t1,t1,9
    260c:	0901                	addi	s2,s2,0
    260e:	0008                	0x8
    2610:	0501                	addi	a0,a0,0
    2612:	032e                	slli	t1,t1,0xb
    2614:	0900                	addi	s0,sp,144
    2616:	000c                	0xc
{
    2618:	0501                	addi	a0,a0,0
    261a:	0311                	addi	t1,t1,4
    261c:	0902                	c.slli64	s2
    261e:	0008                	0x8
    2620:	0501                	addi	a0,a0,0
    2622:	0315                	addi	t1,t1,5
    2624:	0902                	c.slli64	s2
    2626:	0004                	0x4
    2628:	0501                	addi	a0,a0,0
    262a:	0314                	addi	a3,sp,384
    262c:	0900                	addi	s0,sp,144
    262e:	0010                	0x10
    2630:	0501                	addi	a0,a0,0
    2632:	0902031b          	0x902031b
    2636:	0004                	0x4
    2638:	0501                	addi	a0,a0,0
    263a:	0325                	addi	t1,t1,9
    for (i = 0; i < N; i++)
    263c:	0901                	addi	s2,s2,0
    263e:	0008                	0x8
    2640:	0501                	addi	a0,a0,0
    2642:	0334                	addi	a3,sp,392
        for (j = 0; j < N; j++)
    2644:	0900                	addi	s0,sp,144
    2646:	000c                	0xc
    2648:	0501                	addi	a0,a0,0
    264a:	0311                	addi	t1,t1,4
            A[i * N + j] += val;
    264c:	00080907          	vle8.v	v18,(a6),v0.t
    2650:	0501                	addi	a0,a0,0
    2652:	097d031b          	0x97d031b
    2656:	0004                	0x4
    2658:	0501                	addi	a0,a0,0
    265a:	0325                	addi	t1,t1,9
    265c:	0901                	addi	s2,s2,0
    265e:	0008                	0x8
    2660:	0501                	addi	a0,a0,0
    2662:	0334                	addi	a3,sp,392
    2664:	0900                	addi	s0,sp,144
    2666:	000c                	0xc
    2668:	0501                	addi	a0,a0,0
    266a:	0311                	addi	t1,t1,4
    266c:	0902                	c.slli64	s2
    266e:	0008                	0x8
    2670:	0501                	addi	a0,a0,0
    2672:	0316                	slli	t1,t1,0x5
    2674:	0902                	c.slli64	s2
    2676:	0004                	0x4
    2678:	0501                	addi	a0,a0,0
    267a:	0314                	addi	a3,sp,384
    267c:	0900                	addi	s0,sp,144
    267e:	0010                	0x10
    2680:	0501                	addi	a0,a0,0
    2682:	0902031b          	0x902031b
    2686:	0004                	0x4
    2688:	0501                	addi	a0,a0,0
    268a:	0325                	addi	t1,t1,9
    268c:	0901                	addi	s2,s2,0
    268e:	0008                	0x8
    2690:	0501                	addi	a0,a0,0
    2692:	09000333          	0x9000333
    2696:	000c                	0xc
    2698:	0501                	addi	a0,a0,0
    269a:	0311                	addi	t1,t1,4
    269c:	0902                	c.slli64	s2
    269e:	0008                	0x8
    26a0:	0301                	addi	t1,t1,0
    26a2:	0902                	c.slli64	s2
    26a4:	0004                	0x4
    26a6:	0301                	addi	t1,t1,0
    26a8:	00080953          	fadd.s	fs2,fa6,ft0,rne
    26ac:	0301                	addi	t1,t1,0
    26ae:	090c                	addi	a1,sp,144
    26b0:	0008                	0x8
    26b2:	0301                	addi	t1,t1,0
    26b4:	091f 0008 0501      	0x5010008091f
    26ba:	032e                	slli	t1,t1,0xb
    26bc:	04097f9b          	0x4097f9b
    26c0:	0100                	addi	s0,sp,128
    26c2:	0c05                	addi	s8,s8,1
        for (j = 0; j < N; j++)
    26c4:	0200                	addi	s0,sp,256
    26c6:	0104                	addi	s1,sp,128
    26c8:	0c090003          	lb	zero,192(s2)
    26cc:	0100                	addi	s0,sp,128
    26ce:	0505                	addi	a0,a0,1
    26d0:	0200                	addi	s0,sp,256
    26d2:	0104                	addi	s1,sp,128
    26d4:	08090003          	lb	zero,128(s2)
    26d8:	0100                	addi	s0,sp,128
    26da:	1105                	addi	sp,sp,-31
    for (i = 0; i < N; i++)
    26dc:	0200                	addi	s0,sp,256
    26de:	0204                	addi	s1,sp,256
    26e0:	04090003          	lb	zero,64(s2)
    26e4:	0100                	addi	s0,sp,128
    26e6:	0c05                	addi	s8,s8,1
    26e8:	0900ea03          	0x900ea03
    26ec:	000c                	0xc
    26ee:	0301                	addi	t1,t1,0
    26f0:	0901                	addi	s2,s2,0
    26f2:	000c                	0xc
}
    26f4:	0501                	addi	a0,a0,0
    26f6:	0301                	addi	t1,t1,0
    26f8:	0901                	addi	s2,s2,0
    26fa:	0004                	0x4
    26fc:	0901                	addi	s2,s2,0
    26fe:	0014                	0x14
    2700:	0100                	addi	s0,sp,128
    2702:	2301                	jal	2c02 <stop_time+0x12>
    2704:	0002                	c.slli64	zero
    2706:	0300                	addi	s0,sp,384
    2708:	5200                	lw	s0,32(a2)
    270a:	0000                	unimp
    270c:	0100                	addi	s0,sp,128
    270e:	fb01                	bnez	a4,261e <matrix_add_const+0x6>
{
    2710:	0d0e                	slli	s10,s10,0x3
    2712:	0100                	addi	s0,sp,128
    2714:	0101                	addi	sp,sp,0
    2716:	0001                	nop
    2718:	0000                	unimp
    271a:	0001                	nop
    271c:	0100                	addi	s0,sp,128
    271e:	6168732f          	vamoandei64.v	zero,(a6),v22,v6,v0.t
    2722:	6572                	flw	fa0,28(sp)
    2724:	2f64                	fld	fs1,216(a4)
    2726:	6972                	flw	fs2,28(sp)
    2728:	2d766373          	csrrsi	t1,0x2d7,12
    272c:	7865                	lui	a6,0xffff9
    272e:	6d61                	lui	s10,0x18
    2730:	6c70                	flw	fa2,92(s0)
    2732:	2f65                	jal	2eea <core_bench_state+0x1fa>
    for (i = 0; i < N; i++)
    2734:	65726f63          	bltu	tp,s7,2d92 <core_bench_state+0xa2>
    2738:	616d                	addi	sp,sp,240
    273a:	6b72                	flw	fs6,28(sp)
        C[i] = 0;
    273c:	0000                	unimp
    273e:	65726f63          	bltu	tp,s7,2d9c <core_bench_state+0xac>
    2742:	755f 6974 2e6c      	0x2e6c6974755f
    2748:	00010063          	beqz	sp,2748 <matrix_mul_vect+0x38>
    274c:	6300                	flw	fs0,0(a4)
    274e:	5f65726f          	jal	tp,59d44 <RAM_SIZE+0x49d44>
        for (j = 0; j < N; j++)
    2752:	6f70                	flw	fa2,92(a4)
    2754:	7472                	flw	fs0,60(sp)
    2756:	656d                	lui	a0,0x1b
            C[i] += (MATRES)A[i * N + j] * (MATRES)B[j];
    2758:	682e                	flw	fa6,200(sp)
    275a:	0100                	addi	s0,sp,128
    275c:	0000                	unimp
    275e:	0500                	addi	s0,sp,640
    2760:	0001                	nop
    2762:	0205                	addi	tp,tp,1
    2764:	3600                	fld	fs0,40(a2)
    2766:	0000                	unimp
    2768:	05012b03          	lw	s6,80(sp)
    276c:	0314                	addi	a3,sp,384
    276e:	0905                	addi	s2,s2,1
    2770:	0038                	addi	a4,sp,8
    2772:	0501                	addi	a0,a0,0
    2774:	030d                	addi	t1,t1,3
    2776:	0901                	addi	s2,s2,0
    2778:	0008                	0x8
    277a:	0501                	addi	a0,a0,0
    277c:	0314                	addi	a3,sp,384
    277e:	0902                	c.slli64	s2
    2780:	0004                	0x4
    2782:	0501                	addi	a0,a0,0
    2784:	030d                	addi	t1,t1,3
    2786:	0901                	addi	s2,s2,0
    2788:	0008                	0x8
    278a:	0501                	addi	a0,a0,0
    278c:	0314                	addi	a3,sp,384
    278e:	0902                	c.slli64	s2
    2790:	0004                	0x4
    2792:	0501                	addi	a0,a0,0
    2794:	030d                	addi	t1,t1,3
    2796:	0901                	addi	s2,s2,0
    2798:	000c                	0xc
    279a:	0501                	addi	a0,a0,0
    279c:	0314                	addi	a3,sp,384
    279e:	0902                	c.slli64	s2
    27a0:	0004                	0x4
    27a2:	0501                	addi	a0,a0,0
    27a4:	030d                	addi	t1,t1,3
    27a6:	0901                	addi	s2,s2,0
    27a8:	0008                	0x8
    27aa:	0501                	addi	a0,a0,0
    27ac:	0314                	addi	a3,sp,384
    27ae:	0902                	c.slli64	s2
    27b0:	0004                	0x4
    27b2:	0501                	addi	a0,a0,0
    27b4:	030d                	addi	t1,t1,3
    27b6:	0901                	addi	s2,s2,0
    27b8:	0008                	0x8
    27ba:	0501                	addi	a0,a0,0
    27bc:	0314                	addi	a3,sp,384
    27be:	0902                	c.slli64	s2
    27c0:	0004                	0x4
    27c2:	0501                	addi	a0,a0,0
    27c4:	030d                	addi	t1,t1,3
    27c6:	0901                	addi	s2,s2,0
    27c8:	0004                	0x4
    27ca:	0501                	addi	a0,a0,0
    27cc:	030c                	addi	a1,sp,384
    27ce:	0902                	c.slli64	s2
    27d0:	0004                	0x4
    27d2:	0501                	addi	a0,a0,0
    27d4:	0301                	addi	t1,t1,0
    27d6:	0901                	addi	s2,s2,0
    27d8:	0004                	0x4
    27da:	0301                	addi	t1,t1,0
        for (j = 0; j < N; j++)
    27dc:	00e2                	slli	ra,ra,0x18
    27de:	1009                	c.nop	-30
    27e0:	0100                	addi	s0,sp,128
    27e2:	0b05                	addi	s6,s6,1
    27e4:	20090103          	lb	sp,512(s2)
    27e8:	0100                	addi	s0,sp,128
    27ea:	1205                	addi	tp,tp,-31
    27ec:	04090003          	lb	zero,64(s2)
    27f0:	0100                	addi	s0,sp,128
    27f2:	1b05                	addi	s6,s6,-31
    for (i = 0; i < N; i++)
    27f4:	04090003          	lb	zero,64(s2)
    27f8:	0100                	addi	s0,sp,128
    27fa:	0c05                	addi	s8,s8,1
    27fc:	04090203          	lb	tp,64(s2)
    2800:	0100                	addi	s0,sp,128
    2802:	0505                	addi	a0,a0,1
    2804:	04090003          	lb	zero,64(s2)
    2808:	0100                	addi	s0,sp,128
    280a:	2505                	jal	2e2a <core_bench_state+0x13a>
}
    280c:	04090203          	lb	tp,64(s2)
    2810:	0100                	addi	s0,sp,128
    2812:	2205                	jal	2932 <matrix_mul_matrix+0x10a>
    2814:	0c090003          	lb	zero,192(s2)
    2818:	0100                	addi	s0,sp,128
    281a:	0d05                	addi	s10,s10,1
    281c:	14090003          	lb	zero,320(s2)
    2820:	0100                	addi	s0,sp,128
    2822:	0e05                	addi	t3,t3,1
    2824:	08090103          	lb	sp,128(s2)
{
    2828:	0100                	addi	s0,sp,128
    282a:	0c05                	addi	s8,s8,1
    282c:	0c090203          	lb	tp,192(s2)
    2830:	0100                	addi	s0,sp,128
    2832:	1105                	addi	sp,sp,-31
    2834:	0c090203          	lb	tp,192(s2)
    2838:	0100                	addi	s0,sp,128
    283a:	1305                	addi	t1,t1,-31
    283c:	14090103          	lb	sp,320(s2)
    2840:	0100                	addi	s0,sp,128
    2842:	0c090303          	lb	t1,192(s2)
    2846:	0100                	addi	s0,sp,128
    2848:	0d05                	addi	s10,s10,1
    284a:	04090103          	lb	sp,64(s2)
    284e:	0100                	addi	s0,sp,128
    for (i = 0; i < N; i++)
    2850:	0c05                	addi	s8,s8,1
    2852:	0c090103          	lb	sp,192(s2)
    2856:	0100                	addi	s0,sp,128
        for (j = 0; j < N; j++)
    2858:	1105                	addi	sp,sp,-31
    285a:	08090103          	lb	sp,128(s2)
    285e:	0100                	addi	s0,sp,128
            C[i * N + j] = 0;
    2860:	14090203          	lb	tp,320(s2)
    2864:	0100                	addi	s0,sp,128
    2866:	1905                	addi	s2,s2,-31
    2868:	0200                	addi	s0,sp,256
    286a:	0204                	addi	s1,sp,256
    286c:	14097003          	0x14097003
    2870:	0100                	addi	s0,sp,128
    2872:	0505                	addi	a0,a0,1
    2874:	0200                	addi	s0,sp,256
    2876:	0104                	addi	s1,sp,128
    2878:	0c090003          	lb	zero,192(s2)
    287c:	0100                	addi	s0,sp,128
    287e:	0c05                	addi	s8,s8,1
    2880:	0c091203          	lh	tp,192(s2)
    2884:	0100                	addi	s0,sp,128
    2886:	0105                	addi	sp,sp,1
    2888:	04090103          	lb	sp,64(s2)
            for (k = 0; k < N; k++)
    288c:	0100                	addi	s0,sp,128
    288e:	10090303          	lb	t1,256(s2)
    2892:	0100                	addi	s0,sp,128
                C[i * N + j] += (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
    2894:	0b05                	addi	s6,s6,1
    2896:	24090103          	lb	sp,576(s2)
    289a:	0100                	addi	s0,sp,128
    289c:	20090103          	lb	sp,512(s2)
    28a0:	0100                	addi	s0,sp,128
    28a2:	0c05                	addi	s8,s8,1
    28a4:	2c090103          	lb	sp,704(s2)
    28a8:	0100                	addi	s0,sp,128
    28aa:	0105                	addi	sp,sp,1
    28ac:	04090103          	lb	sp,64(s2)
    28b0:	0100                	addi	s0,sp,128
    28b2:	14090303          	lb	t1,320(s2)
    28b6:	0100                	addi	s0,sp,128
    28b8:	0b05                	addi	s6,s6,1
    28ba:	1c090103          	lb	sp,448(s2)
    28be:	0100                	addi	s0,sp,128
    28c0:	2105                	jal	2ce0 <portable_fini+0x18>
    28c2:	24090103          	lb	sp,576(s2)
    28c6:	0100                	addi	s0,sp,128
    28c8:	0b05                	addi	s6,s6,1
    28ca:	08090003          	lb	zero,128(s2)
    28ce:	0100                	addi	s0,sp,128
    28d0:	0c05                	addi	s8,s8,1
    28d2:	20090103          	lb	sp,512(s2)
    28d6:	0100                	addi	s0,sp,128
    28d8:	0105                	addi	sp,sp,1
    28da:	04090103          	lb	sp,64(s2)
    28de:	0100                	addi	s0,sp,128
    28e0:	14090303          	lb	t1,320(s2)
    28e4:	0100                	addi	s0,sp,128
    28e6:	0c05                	addi	s8,s8,1
    28e8:	24090103          	lb	sp,576(s2)
    28ec:	0100                	addi	s0,sp,128
    28ee:	0105                	addi	sp,sp,1
    28f0:	18090103          	lb	sp,384(s2)
    28f4:	0100                	addi	s0,sp,128
    28f6:	14090403          	lb	s0,320(s2)
    28fa:	0100                	addi	s0,sp,128
    28fc:	0b05                	addi	s6,s6,1
    28fe:	10090103          	lb	sp,256(s2)
    2902:	0100                	addi	s0,sp,128
    2904:	0805                	addi	a6,a6,1
    2906:	04092003          	lw	zero,64(s2)
    290a:	0100                	addi	s0,sp,128
    290c:	0905                	addi	s2,s2,1
    290e:	08090203          	lb	tp,128(s2)
    2912:	0100                	addi	s0,sp,128
    2914:	0c05                	addi	s8,s8,1
    2916:	0c090203          	lb	tp,192(s2)
    291a:	0100                	addi	s0,sp,128
    291c:	0105                	addi	sp,sp,1
    291e:	04090103          	lb	sp,64(s2)
    2922:	0100                	addi	s0,sp,128
    2924:	1409                	addi	s0,s0,-30
    2926:	0000                	unimp
    2928:	0101                	addi	sp,sp,0
    292a:	0000034f          	fnmadd.s	ft6,ft0,ft0,ft0,rne
    292e:	003b0003          	lb	zero,3(s6)
    2932:	0000                	unimp
    2934:	0101                	addi	sp,sp,0
    2936:	000d0efb          	0xd0efb
    293a:	0101                	addi	sp,sp,0
    293c:	0101                	addi	sp,sp,0
    293e:	0000                	unimp
    2940:	0100                	addi	s0,sp,128
    2942:	0000                	unimp
    2944:	2f01                	jal	3054 <core_init_state+0xb8>
    2946:	72616873          	csrrsi	a6,0x726,2
    294a:	6465                	lui	s0,0x19
    294c:	7369722f          	0x7369722f
    2950:	652d7663          	bgeu	s10,s2,2f9c <core_init_state>
    2954:	6178                	flw	fa4,68(a0)
    2956:	706d                	c.lui	zero,0xffffb
    2958:	656c                	flw	fa1,76(a0)
    295a:	726f632f          	0x726f632f
    295e:	6d65                	lui	s10,0x19
            for (k = 0; k < N; k++)
    2960:	7261                	lui	tp,0xffff8
    2962:	6300006b          	0x6300006b
    2966:	7476                	flw	fs0,124(sp)
    2968:	632e                	flw	ft6,200(sp)
    296a:	0100                	addi	s0,sp,128
    296c:	0000                	unimp
    296e:	0500                	addi	s0,sp,640
    2970:	0001                	nop
    2972:	0205                	addi	tp,tp,1
    2974:	392c                	fld	fa1,112(a0)
    2976:	0000                	unimp
        for (j = 0; j < N; j++)
    2978:	05011503          	lh	a0,80(sp)
    297c:	0308                	addi	a0,sp,384
    297e:	0905                	addi	s2,s2,1
    2980:	002c                	addi	a1,sp,8
    2982:	0501                	addi	a0,a0,0
    2984:	0311                	addi	t1,t1,4
    2986:	0901                	addi	s2,s2,0
    2988:	0008                	0x8
    298a:	0501                	addi	a0,a0,0
    298c:	0308                	addi	a0,sp,384
    298e:	0901                	addi	s2,s2,0
    for (i = 0; i < N; i++)
    2990:	0004                	0x4
    2992:	0501                	addi	a0,a0,0
    2994:	0311                	addi	t1,t1,4
    2996:	0901                	addi	s2,s2,0
    2998:	000c                	0xc
    299a:	0501                	addi	a0,a0,0
    299c:	0901030b          	0x901030b
    29a0:	0008                	0x8
    29a2:	0301                	addi	t1,t1,0
    29a4:	0901                	addi	s2,s2,0
    29a6:	0004                	0x4
}
    29a8:	0301                	addi	t1,t1,0
    29aa:	0901                	addi	s2,s2,0
    29ac:	0008                	0x8
    29ae:	0501                	addi	a0,a0,0
    29b0:	0308                	addi	a0,sp,384
    29b2:	0901                	addi	s2,s2,0
    29b4:	0008                	0x8
    29b6:	0501                	addi	a0,a0,0
    29b8:	0902030f          	0x902030f
    29bc:	001c                	0x1c
    29be:	0301                	addi	t1,t1,0
    29c0:	0901                	addi	s2,s2,0
    29c2:	000c                	0xc
    29c4:	0501                	addi	a0,a0,0
    29c6:	0902030b          	0x902030b
{
    29ca:	0018                	0x18
    29cc:	0501                	addi	a0,a0,0
    29ce:	0309                	addi	t1,t1,2
    29d0:	0901                	addi	s2,s2,0
    29d2:	001c                	0x1c
    29d4:	0501                	addi	a0,a0,0
    29d6:	030c                	addi	a1,sp,384
    29d8:	0902                	c.slli64	s2
    29da:	000c                	0xc
    29dc:	0501                	addi	a0,a0,0
    29de:	0308                	addi	a0,sp,384
    29e0:	0900                	addi	s0,sp,144
    29e2:	0008                	0x8
    29e4:	0501                	addi	a0,a0,0
    29e6:	030c                	addi	a1,sp,384
    29e8:	0902                	c.slli64	s2
    29ea:	001c                	0x1c
    for (i = 0; i < N; i++)
    29ec:	0501                	addi	a0,a0,0
    29ee:	0901030f          	0x901030f
    29f2:	000c                	0xc
        for (j = 0; j < N; j++)
    29f4:	0501                	addi	a0,a0,0
    29f6:	0315                	addi	t1,t1,5
    29f8:	0902                	c.slli64	s2
    29fa:	0004                	0x4
            C[i * N + j] = 0;
    29fc:	0501                	addi	a0,a0,0
    29fe:	09000313          	li	t1,144
    2a02:	0044                	addi	s1,sp,4
    2a04:	0501                	addi	a0,a0,0
    2a06:	031f 0901 0008      	0x80901031f
    2a0c:	0501                	addi	a0,a0,0
    2a0e:	0326                	slli	t1,t1,0x9
    2a10:	0900                	addi	s0,sp,144
    2a12:	0030                	addi	a2,sp,8
    2a14:	0501                	addi	a0,a0,0
    2a16:	0315                	addi	t1,t1,5
    2a18:	0900                	addi	s0,sp,144
    2a1a:	0018                	0x18
    2a1c:	0501                	addi	a0,a0,0
    2a1e:	032c                	addi	a1,sp,392
    2a20:	0900                	addi	s0,sp,144
    2a22:	0010                	0x10
    2a24:	0501                	addi	a0,a0,0
    2a26:	09000313          	li	t1,144
            for (k = 0; k < N; k++)
    2a2a:	0004                	0x4
    2a2c:	0501                	addi	a0,a0,0
    2a2e:	032c                	addi	a1,sp,392
                MATRES tmp = (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
    2a30:	0900                	addi	s0,sp,144
    2a32:	000c                	0xc
    2a34:	0501                	addi	a0,a0,0
    2a36:	09000313          	li	t1,144
    2a3a:	0008                	0x8
    2a3c:	0501                	addi	a0,a0,0
    2a3e:	0901030f          	0x901030f
    2a42:	0008                	0x8
    2a44:	0501                	addi	a0,a0,0
    2a46:	097c0313          	addi	t1,s8,151
    2a4a:	000c                	0xc
    2a4c:	0501                	addi	a0,a0,0
    2a4e:	0900030f          	0x900030f
    2a52:	0008                	0x8
    2a54:	0301                	addi	t1,t1,0
    2a56:	0906                	slli	s2,s2,0x1
    2a58:	001c                	0x1c
    2a5a:	0501                	addi	a0,a0,0
    2a5c:	09010317          	auipc	t1,0x9010
    2a60:	0004                	0x4
    2a62:	0501                	addi	a0,a0,0
    2a64:	0900030f          	0x900030f
    2a68:	000c                	0xc
    2a6a:	0501                	addi	a0,a0,0
    2a6c:	0314                	addi	a3,sp,384
    2a6e:	0900                	addi	s0,sp,144
    2a70:	000c                	0xc
    2a72:	0501                	addi	a0,a0,0
    2a74:	0312                	slli	t1,t1,0x4
    2a76:	0900                	addi	s0,sp,144
    2a78:	0004                	0x4
    2a7a:	0501                	addi	a0,a0,0
    2a7c:	0315                	addi	t1,t1,5
    2a7e:	097f                	0x97f
    2a80:	0004                	0x4
    2a82:	0501                	addi	a0,a0,0
    2a84:	0900030f          	0x900030f
    2a88:	0008                	0x8
    2a8a:	0501                	addi	a0,a0,0
    2a8c:	030d                	addi	t1,t1,3
    2a8e:	000c0903          	lb	s2,0(s8)
    2a92:	0501                	addi	a0,a0,0
    2a94:	0902030f          	0x902030f
    2a98:	001c                	0x1c
    2a9a:	0501                	addi	a0,a0,0
    2a9c:	0311                	addi	t1,t1,4
    2a9e:	0902                	c.slli64	s2
                C[i * N + j] += bit_extract(tmp, 2, 4) * bit_extract(tmp, 5, 7);
    2aa0:	0004                	0x4
    2aa2:	0501                	addi	a0,a0,0
    2aa4:	0901030f          	0x901030f
    2aa8:	0010                	0x10
    2aaa:	0501                	addi	a0,a0,0
    2aac:	031a                	slli	t1,t1,0x6
    2aae:	097d                	addi	s2,s2,31
    2ab0:	000c                	0xc
    2ab2:	0501                	addi	a0,a0,0
    2ab4:	0314                	addi	a3,sp,384
    2ab6:	0900                	addi	s0,sp,144
    2ab8:	0020                	addi	s0,sp,8
    2aba:	0501                	addi	a0,a0,0
    2abc:	0900030f          	0x900030f
    2ac0:	0010                	0x10
    2ac2:	0501                	addi	a0,a0,0
    2ac4:	030a                	slli	t1,t1,0x2
    2ac6:	0906                	slli	s2,s2,0x1
    2ac8:	0020                	addi	s0,sp,8
    2aca:	0501                	addi	a0,a0,0
    2acc:	0308                	addi	a0,sp,384
    2ace:	0900                	addi	s0,sp,144
    2ad0:	0004                	0x4
    2ad2:	0301                	addi	t1,t1,0
    2ad4:	0901                	addi	s2,s2,0
    2ad6:	000c                	0xc
    2ad8:	0501                	addi	a0,a0,0
    2ada:	030c                	addi	a1,sp,384
    2adc:	0901                	addi	s2,s2,0
    2ade:	0008                	0x8
    2ae0:	0301                	addi	t1,t1,0
    2ae2:	0901                	addi	s2,s2,0
    2ae4:	0010                	0x10
    2ae6:	0501                	addi	a0,a0,0
    2ae8:	0308                	addi	a0,sp,384
    2aea:	0901                	addi	s2,s2,0
    2aec:	000c                	0xc
    2aee:	0501                	addi	a0,a0,0
    2af0:	0310                	addi	a2,sp,384
    2af2:	0902                	c.slli64	s2
    2af4:	000c                	0xc
    2af6:	0301                	addi	t1,t1,0
    2af8:	0901                	addi	s2,s2,0
    2afa:	0008                	0x8
    2afc:	0501                	addi	a0,a0,0
    2afe:	030d                	addi	t1,t1,3
    2b00:	0904                	addi	s1,sp,144
    2b02:	0008                	0x8
    2b04:	0501                	addi	a0,a0,0
    2b06:	0310                	addi	a2,sp,384
    2b08:	0901                	addi	s2,s2,0
    2b0a:	0028                	addi	a0,sp,8
    2b0c:	0301                	addi	t1,t1,0
    2b0e:	0901                	addi	s2,s2,0
    2b10:	001c                	0x1c
    2b12:	0501                	addi	a0,a0,0
    2b14:	0318                	addi	a4,sp,384
    2b16:	0900                	addi	s0,sp,144
    2b18:	0018                	0x18
    2b1a:	0501                	addi	a0,a0,0
    2b1c:	0900030b          	0x900030b
    2b20:	0004                	0x4
    2b22:	0501                	addi	a0,a0,0
    2b24:	0318                	addi	a4,sp,384
    2b26:	0900                	addi	s0,sp,144
    2b28:	000c                	0xc
    2b2a:	0501                	addi	a0,a0,0
            for (k = 0; k < N; k++)
    2b2c:	030e                	slli	t1,t1,0x3
    2b2e:	0900                	addi	s0,sp,144
    2b30:	0008                	0x8
    2b32:	0501                	addi	a0,a0,0
    2b34:	097c030b          	0x97c030b
    2b38:	0004                	0x4
    2b3a:	0501                	addi	a0,a0,0
    2b3c:	0402001b          	0x402001b
    2b40:	0301                	addi	t1,t1,0
    2b42:	0900                	addi	s0,sp,144
        for (j = 0; j < N; j++)
    2b44:	000c                	0xc
    2b46:	0501                	addi	a0,a0,0
    2b48:	0014                	0x14
    2b4a:	0402                	c.slli64	s0
    2b4c:	0301                	addi	t1,t1,0
    2b4e:	0900                	addi	s0,sp,144
    2b50:	0008                	0x8
    2b52:	0501                	addi	a0,a0,0
    2b54:	0906030f          	0x906030f
    2b58:	0008                	0x8
    2b5a:	0501                	addi	a0,a0,0
    for (i = 0; i < N; i++)
    2b5c:	0308                	addi	a0,sp,384
    2b5e:	0900                	addi	s0,sp,144
    2b60:	0008                	0x8
    2b62:	0501                	addi	a0,a0,0
    2b64:	030c                	addi	a1,sp,384
    2b66:	0902                	c.slli64	s2
    2b68:	0008                	0x8
    2b6a:	0501                	addi	a0,a0,0
    2b6c:	031d                	addi	t1,t1,7
    2b6e:	0900                	addi	s0,sp,144
    2b70:	0008                	0x8
    2b72:	0501                	addi	a0,a0,0
}
    2b74:	0310                	addi	a2,sp,384
    2b76:	0901                	addi	s2,s2,0
    2b78:	0004                	0x4
    2b7a:	0501                	addi	a0,a0,0
    2b7c:	09020307          	vlse8.v	v6,(tp),a6,v0.t
    2b80:	0008                	0x8
    2b82:	0501                	addi	a0,a0,0
    2b84:	0309                	addi	t1,t1,2
    2b86:	0901                	addi	s2,s2,0
    2b88:	0008                	0x8
    2b8a:	0501                	addi	a0,a0,0
    2b8c:	0901030b          	0x901030b
{
    2b90:	0018                	0x18
    2b92:	0501                	addi	a0,a0,0
    2b94:	030d                	addi	t1,t1,3
    2b96:	0902                	c.slli64	s2
    2b98:	0004                	0x4
    2b9a:	0501                	addi	a0,a0,0
	const CORETIMETYPE * const time_ptr = (CORETIMETYPE*)0xDEADBEE0;
    2b9c:	030c                	addi	a1,sp,384
    2b9e:	0901                	addi	s2,s2,0
    2ba0:	000c                	0xc
    2ba2:	0501                	addi	a0,a0,0
    2ba4:	030d                	addi	t1,t1,3
    2ba6:	0901                	addi	s2,s2,0
	return *time_ptr;
    2ba8:	000c                	0xc
    2baa:	0501                	addi	a0,a0,0
    2bac:	0900030f          	0x900030f
}
    2bb0:	000c                	0xc
    2bb2:	0501                	addi	a0,a0,0
    2bb4:	030d                	addi	t1,t1,3
    2bb6:	0900                	addi	s0,sp,144
    2bb8:	0008                	0x8
    2bba:	0501                	addi	a0,a0,0
    2bbc:	0311                	addi	t1,t1,4
    2bbe:	00140903          	lb	s2,1(s0) # 19001 <RAM_SIZE+0x9001>
{
    2bc2:	0501                	addi	a0,a0,0
    2bc4:	030e                	slli	t1,t1,0x3
    2bc6:	0901                	addi	s2,s2,0
    2bc8:	000c                	0xc
    2bca:	0501                	addi	a0,a0,0
    2bcc:	0315                	addi	t1,t1,5
    2bce:	0900                	addi	s0,sp,144
    GETMYTIME(&start_time_val);
    2bd0:	0008                	0x8
    2bd2:	0501                	addi	a0,a0,0
    2bd4:	0310                	addi	a2,sp,384
    2bd6:	0901                	addi	s2,s2,0
    2bd8:	000c                	0xc
    2bda:	0501                	addi	a0,a0,0
}
    2bdc:	0314                	addi	a3,sp,384
    2bde:	0902                	c.slli64	s2
    2be0:	0008                	0x8
    2be2:	0501                	addi	a0,a0,0
    2be4:	0318                	addi	a4,sp,384
    2be6:	0901                	addi	s2,s2,0
    2be8:	000c                	0xc
    2bea:	0501                	addi	a0,a0,0
    2bec:	0312                	slli	t1,t1,0x4
    2bee:	0901                	addi	s2,s2,0
{
    2bf0:	000c                	0xc
    2bf2:	0501                	addi	a0,a0,0
    2bf4:	030c                	addi	a1,sp,384
    2bf6:	000c0973          	0xc0973
    2bfa:	0501                	addi	a0,a0,0
    2bfc:	0900030b          	0x900030b
    GETMYTIME(&stop_time_val);
    2c00:	0008                	0x8
    2c02:	0501                	addi	a0,a0,0
    2c04:	0308                	addi	a0,sp,384
    2c06:	0911                	addi	s2,s2,4
    2c08:	0008                	0x8
    2c0a:	0501                	addi	a0,a0,0
}
    2c0c:	030c                	addi	a1,sp,384
    2c0e:	0901                	addi	s2,s2,0
    2c10:	0008                	0x8
    2c12:	0501                	addi	a0,a0,0
    2c14:	0001                	nop
    2c16:	0402                	c.slli64	s0
    2c18:	0301                	addi	t1,t1,0
    2c1a:	0901                	addi	s2,s2,0
    2c1c:	0004                	0x4
    2c1e:	0301                	addi	t1,t1,0
{
    2c20:	0904                	addi	s1,sp,144
    2c22:	0014                	0x14
    2c24:	0501                	addi	a0,a0,0
    2c26:	030c                	addi	a1,sp,384
    2c28:	0901                	addi	s2,s2,0
    2c2a:	0024                	addi	s1,sp,8
        = (CORE_TICKS)(MYTIMEDIFF(stop_time_val, start_time_val));
    2c2c:	0501                	addi	a0,a0,0
    2c2e:	0301                	addi	t1,t1,0
    2c30:	0901                	addi	s2,s2,0
    2c32:	0024                	addi	s1,sp,8
    CORE_TICKS elapsed
    2c34:	0301                	addi	t1,t1,0
    2c36:	0904                	addi	s1,sp,144
    2c38:	0014                	0x14
    2c3a:	0501                	addi	a0,a0,0
    return elapsed;
    2c3c:	030c                	addi	a1,sp,384
    2c3e:	0901                	addi	s2,s2,0
}
    2c40:	0028                	addi	a0,sp,8
    2c42:	0501                	addi	a0,a0,0
    2c44:	0301                	addi	t1,t1,0
    2c46:	0901                	addi	s2,s2,0
    2c48:	0024                	addi	s1,sp,8
    2c4a:	0301                	addi	t1,t1,0
    2c4c:	0904                	addi	s1,sp,144
    2c4e:	0014                	0x14
{
    2c50:	0501                	addi	a0,a0,0
    2c52:	030c                	addi	a1,sp,384
    2c54:	0901                	addi	s2,s2,0
    2c56:	0024                	addi	s1,sp,8
    2c58:	0501                	addi	a0,a0,0
    2c5a:	0301                	addi	t1,t1,0
    2c5c:	0901                	addi	s2,s2,0
    2c5e:	0024                	addi	s1,sp,8
    2c60:	0301                	addi	t1,t1,0
    2c62:	0904                	addi	s1,sp,144
    secs_ret retval = ((secs_ret)ticks) / (secs_ret)EE_TICKS_PER_SEC;
    2c64:	0014                	0x14
    2c66:	0501                	addi	a0,a0,0
    2c68:	030c                	addi	a1,sp,384
    2c6a:	0901                	addi	s2,s2,0
    2c6c:	0028                	addi	a0,sp,8
    2c6e:	0501                	addi	a0,a0,0
    2c70:	0301                	addi	t1,t1,0
    2c72:	0901                	addi	s2,s2,0
    2c74:	0024                	addi	s1,sp,8
    2c76:	0901                	addi	s2,s2,0
    2c78:	0014                	0x14
    2c7a:	0100                	addi	s0,sp,128
    return retval;
    2c7c:	1501                	addi	a0,a0,-32
    2c7e:	000e                	c.slli	zero,0x3
}
    2c80:	0300                	addi	s0,sp,384
    2c82:	da00                	sw	s0,48(a2)
    2c84:	0000                	unimp
    2c86:	0100                	addi	s0,sp,128
    2c88:	fb01                	bnez	a4,2b98 <barebones_clock+0x8>
    2c8a:	0d0e                	slli	s10,s10,0x3
    2c8c:	0100                	addi	s0,sp,128
    2c8e:	0101                	addi	sp,sp,0
    2c90:	0001                	nop
    2c92:	0000                	unimp
{
    2c94:	0001                	nop
    2c96:	0100                	addi	s0,sp,128
    2c98:	6168732f          	vamoandei64.v	zero,(a6),v22,v6,v0.t
    2c9c:	6572                	flw	fa0,28(sp)
    2c9e:	2f64                	fld	fs1,216(a4)
    2ca0:	6972                	flw	fs2,28(sp)
    2ca2:	2d766373          	csrrsi	t1,0x2d7,12
    2ca6:	7865                	lui	a6,0xffff9
    2ca8:	6d61                	lui	s10,0x18
    2caa:	6c70                	flw	fa2,92(s0)
    p->portable_id = 1;
    2cac:	2f65                	jal	3464 <core_state_transition+0x200>
    2cae:	65726f63          	bltu	tp,s7,330c <core_state_transition+0xa8>
    2cb2:	616d                	addi	sp,sp,240
    2cb4:	6b72                	flw	fs6,28(sp)
    2cb6:	2f00                	fld	fs0,24(a4)
}
    2cb8:	6972                	flw	fs2,28(sp)
    2cba:	36766373          	csrrsi	t1,0x367,12
    2cbe:	2d34                	fld	fa3,88(a0)
    2cc0:	6e75                	lui	t3,0x1d
    2cc2:	776f6e6b          	0x776f6e6b
    2cc6:	2d6e                	fld	fs10,216(sp)
{
    2cc8:	6c65                	lui	s8,0x19
    2cca:	2d66                	fld	fs10,88(sp)
    2ccc:	6f74                	flw	fa3,92(a4)
    2cce:	68636c6f          	jal	s8,39354 <RAM_SIZE+0x29354>
    2cd2:	6961                	lui	s2,0x18
    2cd4:	2d6e                	fld	fs10,216(sp)
    2cd6:	3031                	jal	24e2 <matrix_sum+0xf2>
    p->portable_id = 0;
    2cd8:	322e                	fld	ft4,232(sp)
    2cda:	302e                	fld	ft0,232(sp)
    2cdc:	322d                	jal	2606 <matrix_mul_const+0xf2>
    2cde:	3230                	fld	fa2,96(a2)
}
    2ce0:	2e30                	fld	fa2,88(a2)
    2ce2:	3231                	jal	25ee <matrix_mul_const+0xda>
    2ce4:	382e                	fld	fa6,232(sp)
    2ce6:	782d                	lui	a6,0xfffeb
    2ce8:	3638                	fld	fa4,104(a2)
    2cea:	365f 2d34 696c      	0x696c2d34365f
{
    2cf0:	756e                	flw	fa0,248(sp)
    2cf2:	2d78                	fld	fa4,216(a0)
    2cf4:	746e6563          	bltu	t3,t1,343e <core_state_transition+0x1da>
    2cf8:	2f36736f          	jal	t1,6a7ea <RAM_SIZE+0x5a7ea>
    2cfc:	696c                	flw	fa1,84(a0)
    2cfe:	2f62                	fld	ft10,24(sp)
    2d00:	2f636367          	0x2f636367
    2d04:	6972                	flw	fs2,28(sp)
    2d06:	36766373          	csrrsi	t1,0x367,12
    2d0a:	2d34                	fld	fa3,88(a0)
    2d0c:	6e75                	lui	t3,0x1d
    2d0e:	776f6e6b          	0x776f6e6b
    2d12:	2d6e                	fld	fs10,216(sp)
    2d14:	6c65                	lui	s8,0x19
    2d16:	2f66                	fld	ft10,88(sp)
    2d18:	3031                	jal	2524 <matrix_mul_const+0x10>
    2d1a:	322e                	fld	ft4,232(sp)
    2d1c:	302e                	fld	ft0,232(sp)
    2d1e:	636e692f          	vamoandei32.v	zero,(t3),v22,v18
    2d22:	756c                	flw	fa1,108(a0)
    2d24:	6564                	flw	fs1,76(a0)
    2d26:	0000                	unimp
    2d28:	6565                	lui	a0,0x19
    2d2a:	705f 6972 746e      	0x746e6972705f
    2d30:	2e66                	fld	ft8,88(sp)
    2d32:	00010063          	beqz	sp,2d32 <core_bench_state+0x42>
    2d36:	7300                	flw	fs0,32(a4)
    ee_u8 *p = memblock;
    2d38:	6474                	flw	fa3,76(s0)
    2d3a:	6564                	flw	fs1,76(a0)
    2d3c:	2e66                	fld	ft8,88(sp)
    2d3e:	0068                	addi	a0,sp,12
    for (i = 0; i < NUM_CORE_STATES; i++)
    2d40:	0002                	c.slli64	zero
    2d42:	6300                	flw	fs0,0(a4)
    2d44:	5f65726f          	jal	tp,5a33a <RAM_SIZE+0x4a33a>
        final_counts[i] = track_counts[i] = 0;
    2d48:	6f70                	flw	fa2,92(a4)
    2d4a:	7472                	flw	fs0,60(sp)
    2d4c:	656d                	lui	a0,0x1b
    2d4e:	682e                	flw	fa6,200(sp)
    2d50:	0100                	addi	s0,sp,128
    2d52:	0000                	unimp
    2d54:	61647473          	csrrci	s0,0x616,8
    2d58:	6772                	flw	fa4,28(sp)
    2d5a:	682e                	flw	fa6,200(sp)
    2d5c:	0200                	addi	s0,sp,256
    2d5e:	0000                	unimp
    2d60:	0500                	addi	s0,sp,640
    2d62:	0001                	nop
    2d64:	0205                	addi	tp,tp,1
    2d66:	3f40                	fld	fs0,184(a4)
    2d68:	0000                	unimp
    2d6a:	05012303          	lw	t1,80(sp)
    2d6e:	030d                	addi	t1,t1,3
    2d70:	0902                	c.slli64	s2
    2d72:	0014                	0x14
    2d74:	0501                	addi	a0,a0,0
    2d76:	0305                	addi	t1,t1,1
    2d78:	0900                	addi	s0,sp,144
    2d7a:	0008                	0x8
    2d7c:	0501                	addi	a0,a0,0
    2d7e:	002a                	c.slli	zero,0xa
    2d80:	0402                	c.slli64	s0
    2d82:	0304                	addi	s1,sp,384
    for (i = 0; i < NUM_CORE_STATES; i++)
    2d84:	0900                	addi	s0,sp,144
    2d86:	0004                	0x4
    2d88:	0501                	addi	a0,a0,0
    2d8a:	0012                	c.slli	zero,0x4
    2d8c:	0402                	c.slli64	s0
    2d8e:	0301                	addi	t1,t1,0
    2d90:	0900                	addi	s0,sp,144
    2d92:	000c                	0xc
    2d94:	0501                	addi	a0,a0,0
    2d96:	0005                	c.nop	1
    2d98:	0402                	c.slli64	s0
    2d9a:	0301                	addi	t1,t1,0
    while (*p != 0)
    2d9c:	0900                	addi	s0,sp,144
    2d9e:	0008                	0x8
        enum CORE_STATE fstate = core_state_transition(&p, track_counts);
    2da0:	0501                	addi	a0,a0,0
    2da2:	0026                	c.slli	zero,0x9
    2da4:	0402                	c.slli64	s0
    2da6:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    2daa:	0004                	0x4
    2dac:	0501                	addi	a0,a0,0
    2dae:	001e                	c.slli	zero,0x7
    2db0:	0402                	c.slli64	s0
    2db2:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    2db6:	000c                	0xc
        final_counts[fstate]++;
    2db8:	0501                	addi	a0,a0,0
    2dba:	0902030f          	0x902030f
    2dbe:	0004                	0x4
    2dc0:	0501                	addi	a0,a0,0
    2dc2:	0301                	addi	t1,t1,0
    2dc4:	0901                	addi	s2,s2,0
    2dc6:	000c                	0xc
    2dc8:	0301                	addi	t1,t1,0
    2dca:	0904                	addi	s1,sp,144
    2dcc:	0010                	0x10
    2dce:	0501                	addi	a0,a0,0
    2dd0:	0309                	addi	t1,t1,2
    2dd2:	0901                	addi	s2,s2,0
    2dd4:	0010                	0x10
    2dd6:	0501                	addi	a0,a0,0
    2dd8:	0901030b          	0x901030b
    2ddc:	0004                	0x4
    2dde:	0501                	addi	a0,a0,0
    2de0:	0901030f          	0x901030f
    while (*p != 0)
    2de4:	0004                	0x4
    2de6:	0501                	addi	a0,a0,0
    2de8:	0319                	addi	t1,t1,6
    2dea:	0900                	addi	s0,sp,144
    2dec:	0018                	0x18
    2dee:	0501                	addi	a0,a0,0
    p = memblock;
    2df0:	031c                	addi	a5,sp,384
    2df2:	0900                	addi	s0,sp,144
    2df4:	0008                	0x8
    2df6:	0501                	addi	a0,a0,0
    while (p < (memblock + blksize))
    2df8:	0316                	slli	t1,t1,0x5
    2dfa:	0900                	addi	s0,sp,144
        if (*p != ',')
    2dfc:	000c                	0xc
    2dfe:	0501                	addi	a0,a0,0
    2e00:	0314                	addi	a3,sp,384
    2e02:	0900                	addi	s0,sp,144
    2e04:	0004                	0x4
    2e06:	0501                	addi	a0,a0,0
    2e08:	0900030b          	0x900030b
            *p ^= (ee_u8)seed1;
    2e0c:	0004                	0x4
    2e0e:	0501                	addi	a0,a0,0
    2e10:	030c                	addi	a1,sp,384
    2e12:	097f                	0x97f
    2e14:	0008                	0x8
    2e16:	0501                	addi	a0,a0,0
    2e18:	0900030b          	0x900030b
    2e1c:	000c                	0xc
    2e1e:	0501                	addi	a0,a0,0
    2e20:	000c                	0xc
    2e22:	0402                	c.slli64	s0
    2e24:	0301                	addi	t1,t1,0
    2e26:	0900                	addi	s0,sp,144
    2e28:	0008                	0x8
    2e2a:	0301                	addi	t1,t1,0
        p += step;
    2e2c:	0902                	c.slli64	s2
    2e2e:	0014                	0x14
    2e30:	0501                	addi	a0,a0,0
    2e32:	0301                	addi	t1,t1,0
    2e34:	0901                	addi	s2,s2,0
    2e36:	0004                	0x4
    2e38:	0301                	addi	t1,t1,0
    2e3a:	0904                	addi	s1,sp,144
    while (p < (memblock + blksize))
    2e3c:	0010                	0x10
    2e3e:	0501                	addi	a0,a0,0
    2e40:	0902030b          	0x902030b
    2e44:	0028                	addi	a0,sp,8
    2e46:	0501                	addi	a0,a0,0
    2e48:	030e                	slli	t1,t1,0x3
    2e4a:	000c0903          	lb	s2,0(s8) # 19000 <RAM_SIZE+0x9000>
    2e4e:	0501                	addi	a0,a0,0
    p = memblock;
    2e50:	0308                	addi	a0,sp,384
    2e52:	0900                	addi	s0,sp,144
    2e54:	0008                	0x8
    2e56:	0501                	addi	a0,a0,0
    while (*p != 0)
    2e58:	030d                	addi	t1,t1,3
    2e5a:	0901                	addi	s2,s2,0
        enum CORE_STATE fstate = core_state_transition(&p, track_counts);
    2e5c:	0004                	0x4
    2e5e:	0501                	addi	a0,a0,0
    2e60:	030e                	slli	t1,t1,0x3
    2e62:	0901                	addi	s2,s2,0
    2e64:	0008                	0x8
    2e66:	0501                	addi	a0,a0,0
    2e68:	0308                	addi	a0,sp,384
    2e6a:	0900                	addi	s0,sp,144
    2e6c:	0008                	0x8
    2e6e:	0501                	addi	a0,a0,0
    2e70:	030e                	slli	t1,t1,0x3
    2e72:	0901                	addi	s2,s2,0
        final_counts[fstate]++;
    2e74:	0004                	0x4
    2e76:	0501                	addi	a0,a0,0
    2e78:	0308                	addi	a0,sp,384
    2e7a:	0901                	addi	s2,s2,0
    2e7c:	000c                	0xc
    2e7e:	0501                	addi	a0,a0,0
    2e80:	0012                	c.slli	zero,0x4
    2e82:	0402                	c.slli64	s0
    2e84:	0301                	addi	t1,t1,0
    2e86:	0900                	addi	s0,sp,144
    2e88:	000c                	0xc
    2e8a:	0501                	addi	a0,a0,0
    2e8c:	0310                	addi	a2,sp,384
    2e8e:	0901                	addi	s2,s2,0
    2e90:	000c                	0xc
    2e92:	0501                	addi	a0,a0,0
    2e94:	0312                	slli	t1,t1,0x4
    2e96:	0902                	c.slli64	s2
    2e98:	0008                	0x8
    2e9a:	0501                	addi	a0,a0,0
    2e9c:	030a                	slli	t1,t1,0x2
    2e9e:	0900                	addi	s0,sp,144
    while (*p != 0)
    2ea0:	0008                	0x8
    2ea2:	0001                	nop
    2ea4:	0402                	c.slli64	s0
    2ea6:	0601                	addi	a2,a2,0
    2ea8:	04090003          	lb	zero,64(s2) # 18040 <RAM_SIZE+0x8040>
    p = memblock;
    2eac:	0100                	addi	s0,sp,128
    2eae:	0200                	addi	s0,sp,256
    2eb0:	0204                	addi	s1,sp,256
    2eb2:	08090003          	lb	zero,128(s2)
    while (p < (memblock + blksize))
    2eb6:	0100                	addi	s0,sp,128
        if (*p != ',')
    2eb8:	0200                	addi	s0,sp,256
    2eba:	0404                	addi	s1,sp,512
    2ebc:	04090003          	lb	zero,64(s2)
    2ec0:	0100                	addi	s0,sp,128
    2ec2:	0200                	addi	s0,sp,256
    2ec4:	0404                	addi	s1,sp,512
    2ec6:	0306                	slli	t1,t1,0x1
            *p ^= (ee_u8)seed2;
    2ec8:	0901                	addi	s2,s2,0
    2eca:	0004                	0x4
    2ecc:	0501                	addi	a0,a0,0
    2ece:	000e                	c.slli	zero,0x3
    2ed0:	0402                	c.slli64	s0
    2ed2:	0304                	addi	s1,sp,384
    2ed4:	0901                	addi	s2,s2,0
    2ed6:	0004                	0x4
    2ed8:	0501                	addi	a0,a0,0
    2eda:	0008                	0x8
    2edc:	0402                	c.slli64	s0
    2ede:	0304                	addi	s1,sp,384
    2ee0:	0900                	addi	s0,sp,144
    2ee2:	0008                	0x8
    2ee4:	0501                	addi	a0,a0,0
    2ee6:	030c                	addi	a1,sp,384
        p += step;
    2ee8:	0902                	c.slli64	s2
    2eea:	0004                	0x4
    2eec:	0501                	addi	a0,a0,0
    2eee:	0312                	slli	t1,t1,0x4
    2ef0:	0902                	c.slli64	s2
    2ef2:	0008                	0x8
    2ef4:	0301                	addi	t1,t1,0
    2ef6:	0901                	addi	s2,s2,0
    while (p < (memblock + blksize))
    2ef8:	0008                	0x8
    2efa:	0501                	addi	a0,a0,0
    2efc:	0311                	addi	t1,t1,4
    2efe:	0901                	addi	s2,s2,0
    2f00:	000c                	0xc
    2f02:	0501                	addi	a0,a0,0
    2f04:	09020317          	auipc	t1,0x9020
    2f08:	0010                	0x10
    2f0a:	0501                	addi	a0,a0,0
    for (i = 0; i < NUM_CORE_STATES; i++)
    2f0c:	0311                	addi	t1,t1,4
    2f0e:	0900                	addi	s0,sp,144
    2f10:	0008                	0x8
    2f12:	0501                	addi	a0,a0,0
        crc = crcu32(final_counts[i], crc);
    2f14:	0312                	slli	t1,t1,0x4
    2f16:	0902                	c.slli64	s2
    2f18:	0004                	0x4
    2f1a:	0501                	addi	a0,a0,0
    2f1c:	0311                	addi	t1,t1,4
    2f1e:	0901                	addi	s2,s2,0
    2f20:	0008                	0x8
    2f22:	0501                	addi	a0,a0,0
    2f24:	09020317          	auipc	t1,0x9020
    2f28:	0010                	0x10
    2f2a:	0501                	addi	a0,a0,0
    2f2c:	0311                	addi	t1,t1,4
    2f2e:	0900                	addi	s0,sp,144
    2f30:	0008                	0x8
    2f32:	0501                	addi	a0,a0,0
    2f34:	0312                	slli	t1,t1,0x4
    2f36:	0902                	c.slli64	s2
    2f38:	0004                	0x4
    2f3a:	0501                	addi	a0,a0,0
    2f3c:	0311                	addi	t1,t1,4
    2f3e:	0901                	addi	s2,s2,0
        crc = crcu32(track_counts[i], crc);
    2f40:	0008                	0x8
    2f42:	0501                	addi	a0,a0,0
    2f44:	030e                	slli	t1,t1,0x3
    2f46:	0904                	addi	s1,sp,144
    2f48:	000c                	0xc
    2f4a:	0501                	addi	a0,a0,0
    2f4c:	0308                	addi	a0,sp,384
    2f4e:	0900                	addi	s0,sp,144
    2f50:	0008                	0x8
    2f52:	0501                	addi	a0,a0,0
    2f54:	030c                	addi	a1,sp,384
    2f56:	0902                	c.slli64	s2
    2f58:	0004                	0x4
    2f5a:	0501                	addi	a0,a0,0
    2f5c:	0312                	slli	t1,t1,0x4
    2f5e:	0901                	addi	s2,s2,0
    2f60:	000c                	0xc
    2f62:	0501                	addi	a0,a0,0
    2f64:	0311                	addi	t1,t1,4
    2f66:	0901                	addi	s2,s2,0
    2f68:	0010                	0x10
    2f6a:	0301                	addi	t1,t1,0
    for (i = 0; i < NUM_CORE_STATES; i++)
    2f6c:	0901                	addi	s2,s2,0
    2f6e:	000c                	0xc
    2f70:	0501                	addi	a0,a0,0
    2f72:	09030307          	vlse8.v	v6,(t1),a6,v0.t
    2f76:	000c                	0xc
    2f78:	0501                	addi	a0,a0,0
    2f7a:	0308                	addi	a0,sp,384
    2f7c:	0902                	c.slli64	s2
    2f7e:	0004                	0x4
    2f80:	0501                	addi	a0,a0,0
    2f82:	030e                	slli	t1,t1,0x3
    return crc;
    2f84:	0901                	addi	s2,s2,0
    2f86:	0008                	0x8
}
    2f88:	0501                	addi	a0,a0,0
    2f8a:	0312                	slli	t1,t1,0x4
    2f8c:	0900                	addi	s0,sp,144
    2f8e:	000c                	0xc
    2f90:	0501                	addi	a0,a0,0
    2f92:	031d                	addi	t1,t1,7
    2f94:	0905                	addi	s2,s2,1
    2f96:	0014                	0x14
    2f98:	0501                	addi	a0,a0,0
    2f9a:	09000333          	0x9000333
{
    2f9e:	0004                	0x4
    2fa0:	0501                	addi	a0,a0,0
    2fa2:	0331                	addi	t1,t1,12
    2fa4:	0900                	addi	s0,sp,144
    2fa6:	0004                	0x4
    2fa8:	0501                	addi	a0,a0,0
    2faa:	0900031b          	0x900031b
    2fae:	0014                	0x14
    2fb0:	0501                	addi	a0,a0,0
    2fb2:	0312                	slli	t1,t1,0x4
    2fb4:	0900                	addi	s0,sp,144
    2fb6:	0008                	0x8
    ee_u32 total = 0, next = 0, i;
    2fb8:	0501                	addi	a0,a0,0
    2fba:	0900031b          	0x900031b
    2fbe:	000c                	0xc
    ee_u8 *buf = 0;
    2fc0:	0501                	addi	a0,a0,0
    2fc2:	0316                	slli	t1,t1,0x5
    size--;
    2fc4:	0900                	addi	s0,sp,144
    2fc6:	0004                	0x4
    2fc8:	0501                	addi	a0,a0,0
    2fca:	0319                	addi	t1,t1,6
    2fcc:	0901                	addi	s2,s2,0
    2fce:	000c                	0xc
    next = 0;
    2fd0:	0501                	addi	a0,a0,0
    2fd2:	0900032f          	vamoswapei8.v	zero,(zero),v16,v6,v0.t
    while ((total + next + 1) < size)
    2fd6:	0004                	0x4
        if (next > 0)
    2fd8:	0501                	addi	a0,a0,0
    2fda:	032d                	addi	t1,t1,11
    2fdc:	0900                	addi	s0,sp,144
    2fde:	0004                	0x4
            for (i = 0; i < next; i++)
    2fe0:	0501                	addi	a0,a0,0
    2fe2:	0316                	slli	t1,t1,0x5
    2fe4:	0900                	addi	s0,sp,144
    2fe6:	0010                	0x10
                *(p + total + i) = buf[i];
    2fe8:	0501                	addi	a0,a0,0
    2fea:	097d030f          	0x97d030f
    2fee:	0004                	0x4
    2ff0:	0501                	addi	a0,a0,0
    2ff2:	0308                	addi	a0,sp,384
    2ff4:	00080907          	vle8.v	v18,(a6),v0.t
    2ff8:	0501                	addi	a0,a0,0
    2ffa:	09010313          	addi	t1,sp,144
    2ffe:	000c                	0xc
    3000:	0501                	addi	a0,a0,0
    3002:	030a                	slli	t1,t1,0x2
    3004:	0901                	addi	s2,s2,0
    3006:	0008                	0x8
    3008:	0501                	addi	a0,a0,0
    300a:	0310                	addi	a2,sp,384
    300c:	0901                	addi	s2,s2,0
    300e:	0010                	0x10
            for (i = 0; i < next; i++)
    3010:	0501                	addi	a0,a0,0
    3012:	0308                	addi	a0,sp,384
    3014:	0900                	addi	s0,sp,144
    3016:	0008                	0x8
    3018:	0501                	addi	a0,a0,0
    301a:	0901030f          	0x901030f
    301e:	0004                	0x4
    3020:	0501                	addi	a0,a0,0
    3022:	0311                	addi	t1,t1,4
    3024:	0901                	addi	s2,s2,0
    3026:	0004                	0x4
            *(p + total + i) = ',';
    3028:	0501                	addi	a0,a0,0
    302a:	0314                	addi	a3,sp,384
    302c:	0900                	addi	s0,sp,144
    302e:	000c                	0xc
    3030:	0301                	addi	t1,t1,0
    3032:	097f                	0x97f
    3034:	0008                	0x8
    3036:	0501                	addi	a0,a0,0
    3038:	0900030f          	0x900030f
    303c:	000c                	0xc
    303e:	0501                	addi	a0,a0,0
    3040:	0308                	addi	a0,sp,384
    3042:	0902                	c.slli64	s2
            total += next + 1;
    3044:	0004                	0x4
    3046:	0501                	addi	a0,a0,0
    3048:	030d                	addi	t1,t1,3
    304a:	0901                	addi	s2,s2,0
    304c:	0008                	0x8
    304e:	0501                	addi	a0,a0,0
    3050:	0310                	addi	a2,sp,384
    3052:	0900                	addi	s0,sp,144
    3054:	000c                	0xc
    3056:	0501                	addi	a0,a0,0
        seed++;
    3058:	030e                	slli	t1,t1,0x3
    305a:	0902                	c.slli64	s2
    305c:	0008                	0x8
    305e:	0501                	addi	a0,a0,0
    3060:	0308                	addi	a0,sp,384
    3062:	0900                	addi	s0,sp,144
    3064:	0008                	0x8
    3066:	0501                	addi	a0,a0,0
    3068:	030c                	addi	a1,sp,384
    306a:	0902                	c.slli64	s2
    306c:	0004                	0x4
    306e:	0501                	addi	a0,a0,0
    3070:	0311                	addi	t1,t1,4
    3072:	0901                	addi	s2,s2,0
        switch (seed & 0x7)
    3074:	000c                	0xc
    3076:	0501                	addi	a0,a0,0
    3078:	0314                	addi	a3,sp,384
    307a:	0900                	addi	s0,sp,144
    307c:	000c                	0xc
    307e:	0501                	addi	a0,a0,0
    3080:	0311                	addi	t1,t1,4
    3082:	0901                	addi	s2,s2,0
    3084:	000c                	0xc
    3086:	0301                	addi	t1,t1,0
    3088:	0902                	c.slli64	s2
    308a:	000c                	0xc
    308c:	0501                	addi	a0,a0,0
    308e:	0314                	addi	a3,sp,384
    3090:	0900                	addi	s0,sp,144
    3092:	000c                	0xc
    3094:	0301                	addi	t1,t1,0
    3096:	0901                	addi	s2,s2,0
    3098:	0008                	0x8
    309a:	0501                	addi	a0,a0,0
    309c:	0311                	addi	t1,t1,4
    309e:	0900                	addi	s0,sp,144
    30a0:	0008                	0x8
    30a2:	0501                	addi	a0,a0,0
    30a4:	0314                	addi	a3,sp,384
    30a6:	0900                	addi	s0,sp,144
    30a8:	000c                	0xc
    30aa:	0501                	addi	a0,a0,0
    30ac:	0310                	addi	a2,sp,384
    30ae:	0904                	addi	s1,sp,144
    30b0:	0008                	0x8
    30b2:	0501                	addi	a0,a0,0
    30b4:	0308                	addi	a0,sp,384
    30b6:	0900                	addi	s0,sp,144
    30b8:	0008                	0x8
    30ba:	0501                	addi	a0,a0,0
                buf  = intpat[(seed >> 3) & 0x3];
    30bc:	0901030f          	0x901030f
    30c0:	0004                	0x4
    30c2:	0501                	addi	a0,a0,0
    30c4:	0311                	addi	t1,t1,4
    30c6:	0901                	addi	s2,s2,0
    30c8:	0004                	0x4
    30ca:	0501                	addi	a0,a0,0
    30cc:	0314                	addi	a3,sp,384
    30ce:	0900                	addi	s0,sp,144
    30d0:	000c                	0xc
    30d2:	0301                	addi	t1,t1,0
    30d4:	097f                	0x97f
    30d6:	0008                	0x8
    30d8:	0501                	addi	a0,a0,0
    30da:	0900030f          	0x900030f
    30de:	000c                	0xc
    30e0:	0501                	addi	a0,a0,0
    30e2:	0902030b          	0x902030b
    30e6:	0004                	0x4
    30e8:	0501                	addi	a0,a0,0
    30ea:	030d                	addi	t1,t1,3
                next = 4;
    30ec:	0901                	addi	s2,s2,0
    30ee:	0004                	0x4
    30f0:	0501                	addi	a0,a0,0
    30f2:	0310                	addi	a2,sp,384
                break;
    30f4:	0900                	addi	s0,sp,144
    30f6:	000c                	0xc
                buf  = floatpat[(seed >> 3) & 0x3];
    30f8:	0501                	addi	a0,a0,0
    30fa:	0319                	addi	t1,t1,6
    30fc:	097f                	0x97f
    30fe:	0008                	0x8
    3100:	0501                	addi	a0,a0,0
    3102:	0900030b          	0x900030b
    3106:	000c                	0xc
    3108:	0301                	addi	t1,t1,0
    310a:	0902                	c.slli64	s2
    310c:	0008                	0x8
    310e:	0501                	addi	a0,a0,0
    3110:	030d                	addi	t1,t1,3
    3112:	0901                	addi	s2,s2,0
    3114:	0004                	0x4
    3116:	0501                	addi	a0,a0,0
    3118:	0315                	addi	t1,t1,5
    311a:	0900                	addi	s0,sp,144
    311c:	000c                	0xc
    311e:	0501                	addi	a0,a0,0
    3120:	0310                	addi	a2,sp,384
    3122:	0900                	addi	s0,sp,144
    3124:	0010                	0x10
    3126:	0501                	addi	a0,a0,0
                next = 8;
    3128:	030d                	addi	t1,t1,3
    312a:	097f                	0x97f
    312c:	0004                	0x4
    312e:	0501                	addi	a0,a0,0
                break;
    3130:	0900030b          	0x900030b
                buf  = scipat[(seed >> 3) & 0x3];
    3134:	000c                	0xc
    3136:	0301                	addi	t1,t1,0
    3138:	0902                	c.slli64	s2
    313a:	0004                	0x4
    313c:	0501                	addi	a0,a0,0
    313e:	030d                	addi	t1,t1,3
    3140:	0901                	addi	s2,s2,0
    3142:	0004                	0x4
    3144:	0501                	addi	a0,a0,0
    3146:	0310                	addi	a2,sp,384
    3148:	0900                	addi	s0,sp,144
    314a:	000c                	0xc
    314c:	0301                	addi	t1,t1,0
    314e:	097f                	0x97f
    3150:	0008                	0x8
    3152:	0501                	addi	a0,a0,0
    3154:	0900030b          	0x900030b
    3158:	000c                	0xc
    315a:	0501                	addi	a0,a0,0
    315c:	030c                	addi	a1,sp,384
    315e:	00040903          	lb	s2,0(s0)
    3162:	0501                	addi	a0,a0,0
                next = 8;
    3164:	0001                	nop
    3166:	0402                	c.slli64	s0
    3168:	0301                	addi	t1,t1,0
    316a:	0901                	addi	s2,s2,0
                break;
    316c:	0004                	0x4
    316e:	0301                	addi	t1,t1,0
                buf  = errpat[(seed >> 3) & 0x3];
    3170:	0904                	addi	s1,sp,144
    3172:	0014                	0x14
    3174:	0501                	addi	a0,a0,0
    3176:	0902030b          	0x902030b
    317a:	0020                	addi	s0,sp,8
    317c:	0501                	addi	a0,a0,0
    317e:	030e                	slli	t1,t1,0x3
    3180:	000c0903          	lb	s2,0(s8)
    3184:	0501                	addi	a0,a0,0
    3186:	0308                	addi	a0,sp,384
    3188:	0900                	addi	s0,sp,144
    318a:	0008                	0x8
    318c:	0501                	addi	a0,a0,0
    318e:	030d                	addi	t1,t1,3
    3190:	0901                	addi	s2,s2,0
    3192:	0004                	0x4
    3194:	0501                	addi	a0,a0,0
    3196:	0309                	addi	t1,t1,2
    3198:	0901                	addi	s2,s2,0
    319a:	0008                	0x8
    319c:	0501                	addi	a0,a0,0
    319e:	030c                	addi	a1,sp,384
                next = 8;
    31a0:	0901                	addi	s2,s2,0
    31a2:	0004                	0x4
    31a4:	0501                	addi	a0,a0,0
    31a6:	0305                	addi	t1,t1,1
                break;
    31a8:	0900                	addi	s0,sp,144
    31aa:	0004                	0x4
                break;
    31ac:	0501                	addi	a0,a0,0
    31ae:	030c                	addi	a1,sp,384
    while ((total + next + 1) < size)
    31b0:	0902                	c.slli64	s2
    31b2:	0004                	0x4
    31b4:	0501                	addi	a0,a0,0
    31b6:	0314                	addi	a3,sp,384
    31b8:	0901                	addi	s2,s2,0
    31ba:	0008                	0x8
    31bc:	0501                	addi	a0,a0,0
    31be:	0318                	addi	a4,sp,384
    31c0:	0900                	addi	s0,sp,144
    31c2:	000c                	0xc
    31c4:	0501                	addi	a0,a0,0
    31c6:	001e                	c.slli	zero,0x7
    size++;
    31c8:	0402                	c.slli64	s0
    31ca:	0302                	c.slli64	t1
    31cc:	0901                	addi	s2,s2,0
    31ce:	0010                	0x10
    31d0:	0501                	addi	a0,a0,0
    31d2:	0022                	c.slli	zero,0x8
    while (total < size)
    31d4:	0402                	c.slli64	s0
    31d6:	0302                	c.slli64	t1
        *(p + total) = 0;
    31d8:	0900                	addi	s0,sp,144
    31da:	0010                	0x10
    31dc:	0501                	addi	a0,a0,0
    31de:	0019                	c.nop	6
    31e0:	0402                	c.slli64	s0
    31e2:	0302                	c.slli64	t1
    31e4:	0900                	addi	s0,sp,144
    31e6:	000c                	0xc
        total++;
    31e8:	0501                	addi	a0,a0,0
    31ea:	0010                	0x10
    31ec:	0402                	c.slli64	s0
    31ee:	0302                	c.slli64	t1
    31f0:	0900                	addi	s0,sp,144
    31f2:	0008                	0x8
    while (total < size)
    31f4:	0501                	addi	a0,a0,0
    31f6:	0019                	c.nop	6
    31f8:	0402                	c.slli64	s0
    31fa:	0302                	c.slli64	t1
    31fc:	0900                	addi	s0,sp,144
    31fe:	000c                	0xc
}
    3200:	0501                	addi	a0,a0,0
    3202:	0014                	0x14
    3204:	0402                	c.slli64	s0
    3206:	0302                	c.slli64	t1
    3208:	0900                	addi	s0,sp,144
    320a:	0004                	0x4
    320c:	0501                	addi	a0,a0,0
    320e:	001e                	c.slli	zero,0x7
    3210:	0402                	c.slli64	s0
    3212:	0302                	c.slli64	t1
{
    3214:	0901                	addi	s2,s2,0
    3216:	000c                	0xc
    3218:	0501                	addi	a0,a0,0
    321a:	0022                	c.slli	zero,0x8
    321c:	0402                	c.slli64	s0
    321e:	0302                	c.slli64	t1
    3220:	0900                	addi	s0,sp,144
    3222:	0010                	0x10
    3224:	0501                	addi	a0,a0,0
    3226:	0019                	c.nop	6
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    3228:	0402                	c.slli64	s0
    322a:	0302                	c.slli64	t1
    322c:	0900                	addi	s0,sp,144
    322e:	0004                	0x4
    3230:	0501                	addi	a0,a0,0
    3232:	0010                	0x10
    3234:	0402                	c.slli64	s0
    3236:	0302                	c.slli64	t1
    3238:	0900                	addi	s0,sp,144
    323a:	0008                	0x8
    323c:	0501                	addi	a0,a0,0
    323e:	0019                	c.nop	6
    3240:	0402                	c.slli64	s0
    3242:	0302                	c.slli64	t1
    3244:	0900                	addi	s0,sp,144
    3246:	000c                	0xc
    3248:	0501                	addi	a0,a0,0
    324a:	0014                	0x14
    324c:	0402                	c.slli64	s0
    324e:	0302                	c.slli64	t1
    return retval;
    3250:	0900                	addi	s0,sp,144
    3252:	0004                	0x4
}
    3254:	0501                	addi	a0,a0,0
    3256:	0019                	c.nop	6
    3258:	0402                	c.slli64	s0
    325a:	0302                	c.slli64	t1
    325c:	000c097b          	0xc097b
    3260:	0501                	addi	a0,a0,0
    3262:	0005                	c.nop	1
{
    3264:	0402                	c.slli64	s0
    3266:	0301                	addi	t1,t1,0
    3268:	0900                	addi	s0,sp,144
    326a:	000c                	0xc
    326c:	0501                	addi	a0,a0,0
    326e:	0310                	addi	a2,sp,384
    3270:	0908                	addi	a0,sp,144
    3272:	000c                	0xc
    3274:	0501                	addi	a0,a0,0
    3276:	0308                	addi	a0,sp,384
    3278:	0900                	addi	s0,sp,144
    327a:	0008                	0x8
    ee_u8 *         str = *instr;
    327c:	0501                	addi	a0,a0,0
    327e:	0901030f          	0x901030f
    3282:	0004                	0x4
    3284:	0501                	addi	a0,a0,0
    3286:	0311                	addi	t1,t1,4
    enum CORE_STATE state = CORE_START;
    3288:	0901                	addi	s2,s2,0
    328a:	0004                	0x4
    for (; *str && state != CORE_INVALID; str++)
    328c:	0501                	addi	a0,a0,0
    328e:	0314                	addi	a3,sp,384
        NEXT_SYMBOL = *str;
    3290:	0900                	addi	s0,sp,144
    3292:	000c                	0xc
    3294:	0501                	addi	a0,a0,0
    3296:	031a                	slli	t1,t1,0x6
    3298:	097f                	0x97f
    329a:	0008                	0x8
        if (NEXT_SYMBOL == ',') /* end of this input */
    329c:	0501                	addi	a0,a0,0
    329e:	0900030f          	0x900030f
    32a2:	000c                	0xc
    32a4:	0501                	addi	a0,a0,0
    32a6:	030c                	addi	a1,sp,384
            str++;
    32a8:	0902                	c.slli64	s2
    32aa:	0008                	0x8
    32ac:	0501                	addi	a0,a0,0
    32ae:	0305                	addi	t1,t1,1
    32b0:	0900                	addi	s0,sp,144
    32b2:	0004                	0x4
            break;
    32b4:	0501                	addi	a0,a0,0
    32b6:	000d                	c.nop	3
    32b8:	0402                	c.slli64	s0
    32ba:	09010303          	lb	t1,144(sp)
    32be:	0004                	0x4
    32c0:	0501                	addi	a0,a0,0
    32c2:	0015                	c.nop	5
    32c4:	0402                	c.slli64	s0
    32c6:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    32ca:	000c                	0xc
    32cc:	0501                	addi	a0,a0,0
    32ce:	0010                	0x10
    32d0:	0402                	c.slli64	s0
    32d2:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    32d6:	0010                	0x10
    32d8:	0501                	addi	a0,a0,0
    32da:	001a                	c.slli	zero,0x6
    32dc:	0402                	c.slli64	s0
    32de:	097f0303          	lb	t1,151(t5)
                if (ee_isdigit(NEXT_SYMBOL))
    32e2:	0004                	0x4
    32e4:	0501                	addi	a0,a0,0
    32e6:	0005                	c.nop	1
    32e8:	0402                	c.slli64	s0
    32ea:	0301                	addi	t1,t1,0
    32ec:	0900                	addi	s0,sp,144
    32ee:	000c                	0xc
    32f0:	0501                	addi	a0,a0,0
    32f2:	0902030b          	0x902030b
                    state = CORE_INT;
    32f6:	000c                	0xc
    32f8:	0501                	addi	a0,a0,0
    32fa:	030d                	addi	t1,t1,3
    32fc:	0901                	addi	s2,s2,0
    32fe:	0004                	0x4
                else if (NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-')
    3300:	0501                	addi	a0,a0,0
    3302:	0310                	addi	a2,sp,384
    3304:	0900                	addi	s0,sp,144
    3306:	000c                	0xc
    3308:	0501                	addi	a0,a0,0
    330a:	0316                	slli	t1,t1,0x5
    330c:	097f                	0x97f
    330e:	0008                	0x8
    3310:	0501                	addi	a0,a0,0
    3312:	0900030b          	0x900030b
    3316:	000c                	0xc
                    state = CORE_S1;
    3318:	0501                	addi	a0,a0,0
    331a:	030c                	addi	a1,sp,384
    331c:	00080903          	lb	s2,0(a6) # fffeb000 <RAM_SIZE+0xfffdb000>
    3320:	0501                	addi	a0,a0,0
    3322:	0301                	addi	t1,t1,0
                else if (NEXT_SYMBOL == '.')
    3324:	0901                	addi	s2,s2,0
    3326:	0004                	0x4
    3328:	0301                	addi	t1,t1,0
    332a:	0904                	addi	s1,sp,144
    332c:	0010                	0x10
    332e:	0501                	addi	a0,a0,0
                    state = CORE_FLOAT;
    3330:	0309                	addi	t1,t1,2
    3332:	0904                	addi	s1,sp,144
    3334:	0028                	addi	a0,sp,8
    3336:	0501                	addi	a0,a0,0
    3338:	030c                	addi	a1,sp,384
    333a:	0901                	addi	s2,s2,0
                    state = CORE_INVALID;
    333c:	0004                	0x4
    333e:	0501                	addi	a0,a0,0
    3340:	0305                	addi	t1,t1,1
    3342:	0900                	addi	s0,sp,144
                    transition_count[CORE_INVALID]++;
    3344:	0004                	0x4
    3346:	0501                	addi	a0,a0,0
    3348:	030c                	addi	a1,sp,384
    334a:	0902                	c.slli64	s2
    334c:	0004                	0x4
    334e:	0501                	addi	a0,a0,0
    3350:	0314                	addi	a3,sp,384
    3352:	0901                	addi	s2,s2,0
    3354:	0008                	0x8
    3356:	0501                	addi	a0,a0,0
                transition_count[CORE_START]++;
    3358:	0318                	addi	a4,sp,384
    335a:	0900                	addi	s0,sp,144
    335c:	000c                	0xc
    335e:	0501                	addi	a0,a0,0
    3360:	0311                	addi	t1,t1,4
    3362:	0901                	addi	s2,s2,0
    3364:	0010                	0x10
    3366:	0501                	addi	a0,a0,0
    3368:	0900030b          	0x900030b
                break;
    336c:	0010                	0x10
    336e:	0501                	addi	a0,a0,0
                if (ee_isdigit(NEXT_SYMBOL))
    3370:	030c                	addi	a1,sp,384
    3372:	0902                	c.slli64	s2
    3374:	0004                	0x4
    3376:	0501                	addi	a0,a0,0
    3378:	0320                	addi	s0,sp,392
    337a:	0901                	addi	s2,s2,0
    337c:	0008                	0x8
    337e:	0501                	addi	a0,a0,0
    3380:	0314                	addi	a3,sp,384
    3382:	0900                	addi	s0,sp,144
                    state = CORE_INT;
    3384:	0008                	0x8
    3386:	0501                	addi	a0,a0,0
    3388:	0320                	addi	s0,sp,392
    338a:	0900                	addi	s0,sp,144
                    transition_count[CORE_S1]++;
    338c:	000c                	0xc
    338e:	0501                	addi	a0,a0,0
    3390:	0318                	addi	a4,sp,384
    3392:	0900                	addi	s0,sp,144
    3394:	0004                	0x4
    3396:	0501                	addi	a0,a0,0
    3398:	0310                	addi	a2,sp,384
    339a:	00100903          	lb	s2,1(zero) # 1 <RAM_START_ADDRESS+0x1>
    339e:	0501                	addi	a0,a0,0
                break;
    33a0:	0324                	addi	s1,sp,392
    33a2:	0902                	c.slli64	s2
                else if (NEXT_SYMBOL == '.')
    33a4:	000c                	0xc
    33a6:	0501                	addi	a0,a0,0
    33a8:	09000327          	vsse8.v	v6,(zero),a6,v0.t
    33ac:	0008                	0x8
    33ae:	0501                	addi	a0,a0,0
                    state = CORE_FLOAT;
    33b0:	0324                	addi	s1,sp,392
    33b2:	0900                	addi	s0,sp,144
    33b4:	0014                	0x14
    33b6:	0501                	addi	a0,a0,0
                    transition_count[CORE_S1]++;
    33b8:	0318                	addi	a4,sp,384
    33ba:	0900                	addi	s0,sp,144
    33bc:	0004                	0x4
    33be:	0501                	addi	a0,a0,0
    33c0:	0324                	addi	s1,sp,392
    33c2:	0900                	addi	s0,sp,144
    33c4:	000c                	0xc
    33c6:	0501                	addi	a0,a0,0
    33c8:	031c                	addi	a5,sp,384
    33ca:	0900                	addi	s0,sp,144
                break;
    33cc:	0004                	0x4
    33ce:	0301                	addi	t1,t1,0
                    state = CORE_INVALID;
    33d0:	0901                	addi	s2,s2,0
    33d2:	000c                	0xc
    33d4:	0501                	addi	a0,a0,0
    33d6:	0324                	addi	s1,sp,392
                    transition_count[CORE_S1]++;
    33d8:	0901                	addi	s2,s2,0
    33da:	0018                	0x18
    33dc:	0501                	addi	a0,a0,0
    33de:	09000327          	vsse8.v	v6,(zero),a6,v0.t
    33e2:	0008                	0x8
    33e4:	0501                	addi	a0,a0,0
    33e6:	0324                	addi	s1,sp,392
    33e8:	0900                	addi	s0,sp,144
    33ea:	0014                	0x14
                break;
    33ec:	0501                	addi	a0,a0,0
    33ee:	0318                	addi	a4,sp,384
                if (NEXT_SYMBOL == '.')
    33f0:	0900                	addi	s0,sp,144
    33f2:	0004                	0x4
    33f4:	0501                	addi	a0,a0,0
    33f6:	0324                	addi	s1,sp,392
    33f8:	0900                	addi	s0,sp,144
    33fa:	000c                	0xc
                    state = CORE_FLOAT;
    33fc:	0501                	addi	a0,a0,0
    33fe:	031c                	addi	a5,sp,384
    3400:	0900                	addi	s0,sp,144
    3402:	0004                	0x4
                    transition_count[CORE_INT]++;
    3404:	0301                	addi	t1,t1,0
    3406:	0901                	addi	s2,s2,0
    3408:	000c                	0xc
    340a:	0501                	addi	a0,a0,0
    340c:	0315                	addi	t1,t1,5
    340e:	0902                	c.slli64	s2
    3410:	001c                	0x1c
    3412:	0501                	addi	a0,a0,0
    3414:	0324                	addi	s1,sp,392
    3416:	0902                	c.slli64	s2
                break;
    3418:	000c                	0xc
    341a:	0501                	addi	a0,a0,0
                else if (!ee_isdigit(NEXT_SYMBOL))
    341c:	09000327          	vsse8.v	v6,(zero),a6,v0.t
    3420:	0008                	0x8
    3422:	0501                	addi	a0,a0,0
    3424:	0324                	addi	s1,sp,392
    3426:	0900                	addi	s0,sp,144
    3428:	0014                	0x14
    342a:	0501                	addi	a0,a0,0
    342c:	0318                	addi	a4,sp,384
    342e:	0900                	addi	s0,sp,144
                    state = CORE_INVALID;
    3430:	0004                	0x4
    3432:	0501                	addi	a0,a0,0
    3434:	0324                	addi	s1,sp,392
    3436:	0900                	addi	s0,sp,144
                    transition_count[CORE_INT]++;
    3438:	000c                	0xc
    343a:	0501                	addi	a0,a0,0
    343c:	031c                	addi	a5,sp,384
    343e:	0900                	addi	s0,sp,144
    3440:	0004                	0x4
    3442:	0301                	addi	t1,t1,0
    3444:	0901                	addi	s2,s2,0
    3446:	000c                	0xc
    3448:	0501                	addi	a0,a0,0
    344a:	0320                	addi	s0,sp,392
                break;
    344c:	00180903          	lb	s2,1(a6)
                if (NEXT_SYMBOL == 'E' || NEXT_SYMBOL == 'e')
    3450:	0501                	addi	a0,a0,0
    3452:	0314                	addi	a3,sp,384
    3454:	0900                	addi	s0,sp,144
    3456:	0010                	0x10
    3458:	0501                	addi	a0,a0,0
    345a:	0320                	addi	s0,sp,392
    345c:	0900                	addi	s0,sp,144
    345e:	000c                	0xc
    3460:	0501                	addi	a0,a0,0
    3462:	0318                	addi	a4,sp,384
    3464:	0900                	addi	s0,sp,144
    3466:	0004                	0x4
                    state = CORE_S2;
    3468:	0501                	addi	a0,a0,0
    346a:	0019                	c.nop	6
    346c:	0402                	c.slli64	s0
    346e:	0302                	c.slli64	t1
                    transition_count[CORE_FLOAT]++;
    3470:	0969                	addi	s2,s2,26
    3472:	000c                	0xc
    3474:	0501                	addi	a0,a0,0
    3476:	0005                	c.nop	1
    3478:	0402                	c.slli64	s0
    347a:	0301                	addi	t1,t1,0
    347c:	0900                	addi	s0,sp,144
    347e:	000c                	0xc
    3480:	0501                	addi	a0,a0,0
    3482:	0310                	addi	a2,sp,384
                break;
    3484:	000c091b          	0xc091b
                else if (!ee_isdigit(NEXT_SYMBOL))
    3488:	0501                	addi	a0,a0,0
    348a:	0308                	addi	a0,sp,384
    348c:	0900                	addi	s0,sp,144
    348e:	0008                	0x8
    3490:	0501                	addi	a0,a0,0
    3492:	0901030f          	0x901030f
    3496:	0004                	0x4
    3498:	0501                	addi	a0,a0,0
    349a:	0311                	addi	t1,t1,4
                    state = CORE_INVALID;
    349c:	0901                	addi	s2,s2,0
    349e:	0004                	0x4
    34a0:	0501                	addi	a0,a0,0
    34a2:	0314                	addi	a3,sp,384
                    transition_count[CORE_FLOAT]++;
    34a4:	0900                	addi	s0,sp,144
    34a6:	000c                	0xc
    34a8:	0501                	addi	a0,a0,0
    34aa:	031a                	slli	t1,t1,0x6
    34ac:	097f                	0x97f
    34ae:	0008                	0x8
    34b0:	0501                	addi	a0,a0,0
    34b2:	0900030f          	0x900030f
    34b6:	000c                	0xc
                break;
    34b8:	0501                	addi	a0,a0,0
    34ba:	030c                	addi	a1,sp,384
                if (NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-')
    34bc:	0902                	c.slli64	s2
    34be:	0008                	0x8
    34c0:	0501                	addi	a0,a0,0
    34c2:	0305                	addi	t1,t1,1
    34c4:	0900                	addi	s0,sp,144
    34c6:	0004                	0x4
    34c8:	0501                	addi	a0,a0,0
    34ca:	000d                	c.nop	3
    34cc:	0402                	c.slli64	s0
    34ce:	09010303          	lb	t1,144(sp)
    34d2:	0004                	0x4
                    state = CORE_EXPONENT;
    34d4:	0501                	addi	a0,a0,0
    34d6:	0015                	c.nop	5
    34d8:	0402                	c.slli64	s0
    34da:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
                    transition_count[CORE_S2]++;
    34de:	000c                	0xc
    34e0:	0501                	addi	a0,a0,0
    34e2:	0010                	0x10
    34e4:	0402                	c.slli64	s0
    34e6:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    34ea:	0010                	0x10
    34ec:	0501                	addi	a0,a0,0
    34ee:	001a                	c.slli	zero,0x6
                break;
    34f0:	0402                	c.slli64	s0
    34f2:	097f0303          	lb	t1,151(t5)
                    state = CORE_INVALID;
    34f6:	0004                	0x4
    34f8:	0501                	addi	a0,a0,0
    34fa:	0005                	c.nop	1
                    transition_count[CORE_S2]++;
    34fc:	0402                	c.slli64	s0
    34fe:	0301                	addi	t1,t1,0
    3500:	0900                	addi	s0,sp,144
    3502:	000c                	0xc
    3504:	0501                	addi	a0,a0,0
    3506:	0902030b          	0x902030b
    350a:	000c                	0xc
    350c:	0501                	addi	a0,a0,0
    350e:	030d                	addi	t1,t1,3
                break;
    3510:	0901                	addi	s2,s2,0
    3512:	0004                	0x4
                if (ee_isdigit(NEXT_SYMBOL))
    3514:	0501                	addi	a0,a0,0
    3516:	0310                	addi	a2,sp,384
    3518:	0900                	addi	s0,sp,144
    351a:	000c                	0xc
    351c:	0501                	addi	a0,a0,0
    351e:	0316                	slli	t1,t1,0x5
    3520:	097f                	0x97f
    3522:	0008                	0x8
    3524:	0501                	addi	a0,a0,0
    3526:	0900030b          	0x900030b
                    state = CORE_SCIENTIFIC;
    352a:	000c                	0xc
    352c:	0501                	addi	a0,a0,0
    352e:	030c                	addi	a1,sp,384
                    transition_count[CORE_EXPONENT]++;
    3530:	00080903          	lb	s2,0(a6)
    3534:	0501                	addi	a0,a0,0
    3536:	0301                	addi	t1,t1,0
    3538:	0901                	addi	s2,s2,0
    353a:	0004                	0x4
    353c:	0301                	addi	t1,t1,0
    353e:	01f8                	addi	a4,sp,204
    3540:	1809                	addi	a6,a6,-30
    3542:	0100                	addi	s0,sp,128
                break;
    3544:	0e05                	addi	t3,t3,1
    3546:	1c090e03          	lb	t3,448(s2)
                    state = CORE_INVALID;
    354a:	0100                	addi	s0,sp,128
    354c:	0505                	addi	a0,a0,1
    354e:	08090003          	lb	zero,128(s2)
                    transition_count[CORE_EXPONENT]++;
    3552:	0100                	addi	s0,sp,128
    3554:	0d05                	addi	s10,s10,1
    3556:	04090203          	lb	tp,64(s2)
    355a:	0100                	addi	s0,sp,128
    355c:	0c05                	addi	s8,s8,1
    355e:	08090003          	lb	zero,128(s2)
    3562:	0100                	addi	s0,sp,128
                break;
    3564:	1605                	addi	a2,a2,-31
    3566:	08090203          	lb	tp,128(s2)
                if (!ee_isdigit(NEXT_SYMBOL))
    356a:	0100                	addi	s0,sp,128
    356c:	1105                	addi	sp,sp,-31
    356e:	04090003          	lb	zero,64(s2)
    3572:	0100                	addi	s0,sp,128
    3574:	1605                	addi	a2,a2,-31
    3576:	0c090003          	lb	zero,192(s2)
    357a:	0100                	addi	s0,sp,128
                    state = CORE_INVALID;
    357c:	1405                	addi	s0,s0,-31
    357e:	04090003          	lb	zero,64(s2)
    3582:	0100                	addi	s0,sp,128
                    transition_count[CORE_INVALID]++;
    3584:	0d05                	addi	s10,s10,1
    3586:	04090103          	lb	sp,64(s2)
    358a:	0100                	addi	s0,sp,128
    358c:	0f05                	addi	t5,t5,1
    358e:	04090403          	lb	s0,64(s2)
    3592:	0100                	addi	s0,sp,128
    3594:	0c05                	addi	s8,s8,1
    3596:	04090203          	lb	tp,64(s2)
                break;
    359a:	0100                	addi	s0,sp,128
                break;
    359c:	1105                	addi	sp,sp,-31
    359e:	0c090103          	lb	sp,192(s2)
    35a2:	0100                	addi	s0,sp,128
                break;
    35a4:	1705                	addi	a4,a4,-31
    35a6:	2c090303          	lb	t1,704(s2)
    35aa:	0100                	addi	s0,sp,128
                break;
    35ac:	1105                	addi	sp,sp,-31
    35ae:	0c090103          	lb	sp,192(s2)
    35b2:	0100                	addi	s0,sp,128
                break;
    35b4:	1705                	addi	a4,a4,-31
    35b6:	04090203          	lb	tp,64(s2)
    for (; *str && state != CORE_INVALID; str++)
    35ba:	0100                	addi	s0,sp,128
    35bc:	1105                	addi	sp,sp,-31
    35be:	0c090103          	lb	sp,192(s2)
    35c2:	0100                	addi	s0,sp,128
    35c4:	1705                	addi	a4,a4,-31
    35c6:	04090203          	lb	tp,64(s2)
    35ca:	0100                	addi	s0,sp,128
    35cc:	1105                	addi	sp,sp,-31
    35ce:	0c090103          	lb	sp,192(s2)
    35d2:	0100                	addi	s0,sp,128
    35d4:	1705                	addi	a4,a4,-31
    35d6:	04090203          	lb	tp,64(s2)
    35da:	0100                	addi	s0,sp,128
    *instr = str;
    35dc:	1105                	addi	sp,sp,-31
    35de:	0c090103          	lb	sp,192(s2)
    35e2:	0100                	addi	s0,sp,128
    35e4:	1705                	addi	a4,a4,-31
    35e6:	04090203          	lb	tp,64(s2)
    return state;
    35ea:	0100                	addi	s0,sp,128
}
    35ec:	1105                	addi	sp,sp,-31
    35ee:	0c090103          	lb	sp,192(s2)
    35f2:	0100                	addi	s0,sp,128
    35f4:	1505                	addi	a0,a0,-31
    35f6:	04090403          	lb	s0,64(s2)
    35fa:	0100                	addi	s0,sp,128
    35fc:	0d05                	addi	s10,s10,1
    35fe:	08090103          	lb	sp,128(s2)
{
    3602:	0100                	addi	s0,sp,128
    3604:	0c05                	addi	s8,s8,1
    3606:	08090003          	lb	zero,128(s2)
    360a:	0100                	addi	s0,sp,128
    360c:	0d05                	addi	s10,s10,1
    360e:	0200                	addi	s0,sp,256
    3610:	0104                	addi	s1,sp,128
    3612:	08090003          	lb	zero,128(s2)
    3616:	0100                	addi	s0,sp,128
    3618:	1b05                	addi	s6,s6,-31
    361a:	10090103          	lb	sp,256(s2)
    361e:	0100                	addi	s0,sp,128
    3620:	1905                	addi	s2,s2,-31
    3622:	10090003          	lb	zero,256(s2)
    3626:	0100                	addi	s0,sp,128
    3628:	1205                	addi	tp,tp,-31
    362a:	04090103          	lb	sp,64(s2)
    362e:	0100                	addi	s0,sp,128
    3630:	1105                	addi	sp,sp,-31
    3632:	08090003          	lb	zero,128(s2)
    3636:	0100                	addi	s0,sp,128
            retval = seed1_volatile;
    3638:	1005                	c.nop	-31
    363a:	08090203          	lb	tp,128(s2)
    363e:	0100                	addi	s0,sp,128
            break;
    3640:	1905                	addi	s2,s2,-31
    3642:	0c090103          	lb	sp,192(s2)
            retval = seed2_volatile;
    3646:	0100                	addi	s0,sp,128
    3648:	1005                	c.nop	-31
    364a:	14090103          	lb	sp,320(s2)
            break;
    364e:	0100                	addi	s0,sp,128
            retval = seed3_volatile;
    3650:	1d05                	addi	s10,s10,-31
    3652:	08090203          	lb	tp,128(s2)
    3656:	0100                	addi	s0,sp,128
    3658:	1705                	addi	a4,a4,-31
    365a:	0c090103          	lb	sp,192(s2)
            break;
    365e:	0100                	addi	s0,sp,128
            retval = seed4_volatile;
    3660:	1305                	addi	t1,t1,-31
    3662:	0c090503          	lb	a0,192(s2)
    3666:	0100                	addi	s0,sp,128
            break;
    3668:	0d05                	addi	s10,s10,1
    366a:	08090103          	lb	sp,128(s2)
            retval = seed5_volatile;
    366e:	0100                	addi	s0,sp,128
    3670:	0c05                	addi	s8,s8,1
    3672:	08090003          	lb	zero,128(s2)
            break;
    3676:	0100                	addi	s0,sp,128
            retval = 0;
    3678:	0d05                	addi	s10,s10,1
    367a:	08090203          	lb	tp,128(s2)
            break;
    367e:	0100                	addi	s0,sp,128
    return retval;
    3680:	1105                	addi	sp,sp,-31
    3682:	0c090103          	lb	sp,192(s2)
}
    3686:	0100                	addi	s0,sp,128
    3688:	1005                	c.nop	-31
    368a:	08090003          	lb	zero,128(s2)
    368e:	0100                	addi	s0,sp,128
    3690:	1105                	addi	sp,sp,-31
    3692:	0200                	addi	s0,sp,256
{
    3694:	0104                	addi	s1,sp,128
    3696:	08090003          	lb	zero,128(s2)
    369a:	0100                	addi	s0,sp,128
    369c:	1d05                	addi	s10,s10,-31
    369e:	10090103          	lb	sp,256(s2)
    36a2:	0100                	addi	s0,sp,128
    36a4:	1b05                	addi	s6,s6,-31
    36a6:	10090003          	lb	zero,256(s2)
    36aa:	0100                	addi	s0,sp,128
    36ac:	1605                	addi	a2,a2,-31
    36ae:	04090103          	lb	sp,64(s2)
    36b2:	0100                	addi	s0,sp,128
    ee_u8 i = 0, x16 = 0, carry = 0;
    36b4:	1505                	addi	a0,a0,-31
    36b6:	08090003          	lb	zero,128(s2)
    36ba:	0100                	addi	s0,sp,128
    36bc:	1105                	addi	sp,sp,-31
    36be:	08090203          	lb	tp,128(s2)
    for (i = 0; i < 8; i++)
    36c2:	0100                	addi	s0,sp,128
    36c4:	1b05                	addi	s6,s6,-31
    36c6:	0c090103          	lb	sp,192(s2)
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    36ca:	0100                	addi	s0,sp,128
    36cc:	1005                	c.nop	-31
    36ce:	14090203          	lb	tp,320(s2)
    36d2:	0100                	addi	s0,sp,128
    36d4:	1b05                	addi	s6,s6,-31
    36d6:	08090103          	lb	sp,128(s2)
    36da:	0100                	addi	s0,sp,128
    36dc:	1305                	addi	t1,t1,-31
    36de:	04090403          	lb	s0,64(s2)
    36e2:	0100                	addi	s0,sp,128
    36e4:	0d05                	addi	s10,s10,1
    36e6:	08090103          	lb	sp,128(s2)
    36ea:	0100                	addi	s0,sp,128
    36ec:	0c05                	addi	s8,s8,1
    36ee:	08090003          	lb	zero,128(s2)
        data >>= 1;
    36f2:	0100                	addi	s0,sp,128
    36f4:	1c05                	addi	s8,s8,-31
    36f6:	0200                	addi	s0,sp,256
    36f8:	0104                	addi	s1,sp,128
    36fa:	08090003          	lb	zero,128(s2)
        if (x16 == 1)
    36fe:	0100                	addi	s0,sp,128
    3700:	1905                	addi	s2,s2,-31
    3702:	0200                	addi	s0,sp,256
    3704:	0104                	addi	s1,sp,128
    3706:	08090003          	lb	zero,128(s2)
            crc ^= 0x4002;
    370a:	0100                	addi	s0,sp,128
    370c:	08090203          	lb	tp,128(s2)
    3710:	0100                	addi	s0,sp,128
    3712:	1705                	addi	a4,a4,-31
    3714:	08090003          	lb	zero,128(s2)
    3718:	0100                	addi	s0,sp,128
    371a:	1005                	c.nop	-31
            carry = 1;
    371c:	04090103          	lb	sp,64(s2)
    3720:	0100                	addi	s0,sp,128
    3722:	0e05                	addi	t3,t3,1
    3724:	0c090403          	lb	s0,192(s2)
            carry = 0;
    3728:	0100                	addi	s0,sp,128
    372a:	1105                	addi	sp,sp,-31
        crc >>= 1;
    372c:	08090203          	lb	tp,128(s2)
    3730:	0100                	addi	s0,sp,128
    3732:	1d05                	addi	s10,s10,-31
    3734:	2c090303          	lb	t1,704(s2)
        if (carry)
    3738:	0100                	addi	s0,sp,128
    373a:	1405                	addi	s0,s0,-31
    373c:	08090003          	lb	zero,128(s2)
            crc |= 0x8000;
    3740:	0100                	addi	s0,sp,128
    3742:	1b05                	addi	s6,s6,-31
    3744:	04090103          	lb	sp,64(s2)
    3748:	0100                	addi	s0,sp,128
    374a:	1d05                	addi	s10,s10,-31
    374c:	04090103          	lb	sp,64(s2)
    3750:	0100                	addi	s0,sp,128
    3752:	2005                	jal	3772 <crcu8+0xde>
            crc &= 0x7fff;
    3754:	0c090003          	lb	zero,192(s2)
    3758:	0100                	addi	s0,sp,128
    375a:	1b05                	addi	s6,s6,-31
    375c:	08097f03          	0x8097f03
    3760:	0100                	addi	s0,sp,128
    3762:	2905                	jal	3b92 <cvt+0x266>
    3764:	14090203          	lb	tp,320(s2)
    for (i = 0; i < 8; i++)
    3768:	0100                	addi	s0,sp,128
    376a:	1505                	addi	a0,a0,-31
    376c:	10090003          	lb	zero,256(s2)
    3770:	0100                	addi	s0,sp,128
    3772:	1a05                	addi	s4,s4,-31
    3774:	0c090003          	lb	zero,192(s2)
    3778:	0100                	addi	s0,sp,128
    377a:	1805                	addi	a6,a6,-31
    377c:	04090003          	lb	zero,64(s2)
    return crc;
    3780:	0100                	addi	s0,sp,128
    3782:	1705                	addi	a4,a4,-31
}
    3784:	04090103          	lb	sp,64(s2)
    3788:	0100                	addi	s0,sp,128
    378a:	1905                	addi	s2,s2,-31
    378c:	04090103          	lb	sp,64(s2)
    3790:	0100                	addi	s0,sp,128
    3792:	1c05                	addi	s8,s8,-31
{
    3794:	0c090003          	lb	zero,192(s2)
    3798:	0100                	addi	s0,sp,128
    379a:	1705                	addi	a4,a4,-31
    379c:	08097f03          	0x8097f03
    37a0:	0100                	addi	s0,sp,128
    37a2:	1105                	addi	sp,sp,-31
    37a4:	14090203          	lb	tp,320(s2)
    37a8:	0100                	addi	s0,sp,128
    37aa:	1305                	addi	t1,t1,-31
    37ac:	04090303          	lb	t1,64(s2)
    37b0:	0100                	addi	s0,sp,128
    37b2:	1405                	addi	s0,s0,-31
    37b4:	14090103          	lb	sp,320(s2)
    crc = crcu8((ee_u8)(newval), crc);
    37b8:	0100                	addi	s0,sp,128
    37ba:	1705                	addi	a4,a4,-31
    37bc:	08090103          	lb	sp,128(s2)
    37c0:	0100                	addi	s0,sp,128
    37c2:	0c090103          	lb	sp,192(s2)
    37c6:	0100                	addi	s0,sp,128
    37c8:	1505                	addi	a0,a0,-31
    37ca:	14090003          	lb	zero,320(s2)
    37ce:	0100                	addi	s0,sp,128
    37d0:	1d05                	addi	s10,s10,-31
    37d2:	04090103          	lb	sp,64(s2)
    37d6:	0100                	addi	s0,sp,128
    crc = crcu8((ee_u8)((newval) >> 8), crc);
    37d8:	1405                	addi	s0,s0,-31
    37da:	08090003          	lb	zero,128(s2)
    37de:	0100                	addi	s0,sp,128
    37e0:	1b05                	addi	s6,s6,-31
    37e2:	04090103          	lb	sp,64(s2)
    37e6:	0100                	addi	s0,sp,128
    37e8:	1d05                	addi	s10,s10,-31
    37ea:	04090103          	lb	sp,64(s2)
    37ee:	0100                	addi	s0,sp,128
    37f0:	2005                	jal	3810 <crcu16+0x7c>
    37f2:	0c090003          	lb	zero,192(s2)
    37f6:	0100                	addi	s0,sp,128
    37f8:	2d05                	jal	3e28 <ecvtbuf+0x4>
    37fa:	08097f03          	0x8097f03
    37fe:	0100                	addi	s0,sp,128
    3800:	1b05                	addi	s6,s6,-31
    3802:	0c090003          	lb	zero,192(s2)
    return crc;
    3806:	0100                	addi	s0,sp,128
}
    3808:	1805                	addi	a6,a6,-31
    380a:	08090203          	lb	tp,128(s2)
    380e:	0100                	addi	s0,sp,128
    3810:	1105                	addi	sp,sp,-31
    3812:	04090003          	lb	zero,64(s2)
    3816:	0100                	addi	s0,sp,128
    3818:	2005                	jal	3838 <crcu32+0x1c>
    381a:	0200                	addi	s0,sp,256
{
    381c:	0304                	addi	s1,sp,384
    381e:	04090103          	lb	sp,64(s2)
    3822:	0100                	addi	s0,sp,128
    3824:	1905                	addi	s2,s2,-31
    3826:	0200                	addi	s0,sp,256
    3828:	0304                	addi	s1,sp,384
    382a:	0c090003          	lb	zero,192(s2)
    382e:	0100                	addi	s0,sp,128
    3830:	1e05                	addi	t3,t3,-31
    3832:	0200                	addi	s0,sp,256
    3834:	0304                	addi	s1,sp,384
    3836:	0c090003          	lb	zero,192(s2)
    crc = crc16((ee_s16)newval, crc);
    383a:	0100                	addi	s0,sp,128
    383c:	1c05                	addi	s8,s8,-31
    383e:	0200                	addi	s0,sp,256
    3840:	0304                	addi	s1,sp,384
    3842:	04090003          	lb	zero,64(s2)
    3846:	0100                	addi	s0,sp,128
    3848:	2605                	jal	3b68 <cvt+0x23c>
    384a:	0200                	addi	s0,sp,256
    384c:	0304                	addi	s1,sp,384
    384e:	04097f03          	0x4097f03
    3852:	0100                	addi	s0,sp,128
    3854:	1105                	addi	sp,sp,-31
    3856:	0200                	addi	s0,sp,256
    3858:	0104                	addi	s1,sp,128
    385a:	0c090003          	lb	zero,192(s2)
    crc = crc16((ee_s16)(newval >> 16), crc);
    385e:	0100                	addi	s0,sp,128
    3860:	1705                	addi	a4,a4,-31
    3862:	0c090203          	lb	tp,192(s2)
    3866:	0100                	addi	s0,sp,128
    3868:	1905                	addi	s2,s2,-31
    386a:	04090103          	lb	sp,64(s2)
    386e:	0100                	addi	s0,sp,128
    3870:	1c05                	addi	s8,s8,-31
    3872:	0c090003          	lb	zero,192(s2)
    3876:	0100                	addi	s0,sp,128
    3878:	2905                	jal	3ca8 <cvt+0x37c>
    387a:	08097f03          	0x8097f03
    387e:	0100                	addi	s0,sp,128
    3880:	1705                	addi	a4,a4,-31
    3882:	0c090003          	lb	zero,192(s2)
    return crc;
    3886:	0100                	addi	s0,sp,128
}
    3888:	1105                	addi	sp,sp,-31
    388a:	08090203          	lb	tp,128(s2)
    388e:	0100                	addi	s0,sp,128
    3890:	1405                	addi	s0,s0,-31
    3892:	04090303          	lb	t1,64(s2)
    3896:	0100                	addi	s0,sp,128
    3898:	2105                	jal	3cb8 <cvt+0x38c>
    389a:	0c090203          	lb	tp,192(s2)
{
    389e:	0100                	addi	s0,sp,128
    38a0:	1b05                	addi	s6,s6,-31
    38a2:	08090103          	lb	sp,128(s2)
    38a6:	0100                	addi	s0,sp,128
    38a8:	2d05                	jal	3ed8 <fcvt+0x54>
    38aa:	0c090303          	lb	t1,192(s2)
    38ae:	0100                	addi	s0,sp,128
    38b0:	1705                	addi	a4,a4,-31
    38b2:	10097f03          	0x10097f03
    38b6:	0100                	addi	s0,sp,128
    38b8:	1105                	addi	sp,sp,-31
    38ba:	20090603          	lb	a2,512(s2)
    38be:	0100                	addi	s0,sp,128
    return crcu16((ee_u16)newval, crc);
    38c0:	1705                	addi	a4,a4,-31
    38c2:	04090303          	lb	t1,64(s2)
    38c6:	0100                	addi	s0,sp,128
    38c8:	1405                	addi	s0,s0,-31
    38ca:	0c090303          	lb	t1,192(s2)
    38ce:	0100                	addi	s0,sp,128
    38d0:	1b05                	addi	s6,s6,-31
    38d2:	0c090103          	lb	sp,192(s2)
    38d6:	0100                	addi	s0,sp,128
}
    38d8:	1105                	addi	sp,sp,-31
    38da:	2c090b03          	lb	s6,704(s2)
    38de:	0100                	addi	s0,sp,128
    38e0:	1b05                	addi	s6,s6,-31
    38e2:	04097b03          	0x4097b03
    38e6:	0100                	addi	s0,sp,128
    38e8:	1105                	addi	sp,sp,-31
    38ea:	2c090503          	lb	a0,704(s2)
{
    38ee:	0100                	addi	s0,sp,128
    38f0:	1605                	addi	a2,a2,-31
    38f2:	04090403          	lb	s0,64(s2)
    38f6:	0100                	addi	s0,sp,128
    38f8:	1105                	addi	sp,sp,-31
    38fa:	08090103          	lb	sp,128(s2)
    ee_u8 retval = 0;
    38fe:	0100                	addi	s0,sp,128
    if (retval > 0)
    3900:	1705                	addi	a4,a4,-31
    3902:	04090303          	lb	t1,64(s2)
    3906:	0100                	addi	s0,sp,128
        ee_printf("ERROR: Please modify the datatypes in core_portme.h!\n");
    3908:	1605                	addi	a2,a2,-31
    390a:	0c090303          	lb	t1,192(s2)
    390e:	0100                	addi	s0,sp,128
    3910:	1105                	addi	sp,sp,-31
    3912:	08090103          	lb	sp,128(s2)
    return retval;
    3916:	0100                	addi	s0,sp,128
}
    3918:	1705                	addi	a4,a4,-31
    391a:	04090403          	lb	s0,64(s2)
    391e:	0100                	addi	s0,sp,128
    3920:	1105                	addi	sp,sp,-31
    3922:	0c090303          	lb	t1,192(s2)
    3926:	0100                	addi	s0,sp,128
    3928:	1505                	addi	a0,a0,-31
    392a:	04091003          	lh	zero,64(s2)
{
    392e:	0100                	addi	s0,sp,128
    3930:	1405                	addi	s0,s0,-31
    3932:	08090003          	lb	zero,128(s2)
    3936:	0100                	addi	s0,sp,128
    3938:	1905                	addi	s2,s2,-31
    393a:	08090103          	lb	sp,128(s2)
    393e:	0100                	addi	s0,sp,128
    3940:	1c05                	addi	s8,s8,-31
    3942:	0c090003          	lb	zero,192(s2)
    3946:	0100                	addi	s0,sp,128
    3948:	1505                	addi	a0,a0,-31
    394a:	08090103          	lb	sp,128(s2)
    394e:	0100                	addi	s0,sp,128
    3950:	1405                	addi	s0,s0,-31
    3952:	08090003          	lb	zero,128(s2)
    3956:	0100                	addi	s0,sp,128
    if (ndigits < 0)
    3958:	1e05                	addi	t3,t3,-31
    395a:	04090103          	lb	sp,64(s2)
    395e:	0100                	addi	s0,sp,128
        ndigits = 0;
    3960:	1905                	addi	s2,s2,-31
    3962:	04090003          	lb	zero,64(s2)
    if (ndigits >= CVTBUFSIZE - 1)
    3966:	0100                	addi	s0,sp,128
    3968:	1e05                	addi	t3,t3,-31
    396a:	0c090003          	lb	zero,192(s2)
    396e:	0100                	addi	s0,sp,128
        ndigits = CVTBUFSIZE - 2;
    3970:	1c05                	addi	s8,s8,-31
    3972:	04090003          	lb	zero,64(s2)
    3976:	0100                	addi	s0,sp,128
    r2    = 0;
    3978:	1105                	addi	sp,sp,-31
    397a:	04090303          	lb	t1,64(s2)
    *sign = 0;
    397e:	0100                	addi	s0,sp,128
    3980:	1505                	addi	a0,a0,-31
    3982:	04097f03          	0x4097f03
    p     = &buf[0];
    3986:	0100                	addi	s0,sp,128
    3988:	1105                	addi	sp,sp,-31
    398a:	0c090103          	lb	sp,192(s2)
    if (arg < 0)
    398e:	0100                	addi	s0,sp,128
    3990:	04096a03          	0x4096a03
    3994:	0100                	addi	s0,sp,128
    3996:	0c05                	addi	s8,s8,1
    3998:	04091903          	lh	s2,64(s2)
    399c:	0100                	addi	s0,sp,128
    399e:	1105                	addi	sp,sp,-31
    39a0:	0c090103          	lb	sp,192(s2)
    39a4:	0100                	addi	s0,sp,128
    39a6:	1805                	addi	a6,a6,-31
        *sign = 1;
    39a8:	18090103          	lb	sp,384(s2)
    39ac:	0100                	addi	s0,sp,128
    39ae:	1105                	addi	sp,sp,-31
    39b0:	08090003          	lb	zero,128(s2)
        arg   = -arg;
    39b4:	0100                	addi	s0,sp,128
    39b6:	1305                	addi	t1,t1,-31
    39b8:	04090103          	lb	sp,64(s2)
    39bc:	0100                	addi	s0,sp,128
    39be:	1105                	addi	sp,sp,-31
    39c0:	10090003          	lb	zero,256(s2)
    39c4:	0100                	addi	s0,sp,128
    39c6:	08090203          	lb	tp,128(s2)
    39ca:	0100                	addi	s0,sp,128
    arg = modf(arg, &fi);
    39cc:	0f05                	addi	t5,t5,1
    39ce:	14090203          	lb	tp,320(s2)
    39d2:	0100                	addi	s0,sp,128
    39d4:	1e05                	addi	t3,t3,-31
    39d6:	0200                	addi	s0,sp,256
    39d8:	0204                	addi	s1,sp,256
    39da:	097ecd03          	lbu	s10,151(t4)
    39de:	0020                	addi	s0,sp,8
    39e0:	0501                	addi	a0,a0,0
    39e2:	0015                	c.nop	5
    39e4:	0402                	c.slli64	s0
    39e6:	0301                	addi	t1,t1,0
    p1  = &buf[CVTBUFSIZE];
    39e8:	0900                	addi	s0,sp,144
    39ea:	000c                	0xc
    39ec:	0501                	addi	a0,a0,0
    39ee:	0005                	c.nop	1
    39f0:	0402                	c.slli64	s0
    39f2:	0301                	addi	t1,t1,0
    if (fi != 0)
    39f4:	0900                	addi	s0,sp,144
    39f6:	0008                	0x8
    39f8:	0501                	addi	a0,a0,0
    39fa:	030a                	slli	t1,t1,0x2
    39fc:	01b6                	slli	gp,gp,0xd
    39fe:	0409                	addi	s0,s0,2
    3a00:	0100                	addi	s0,sp,128
    3a02:	1005                	c.nop	-31
    3a04:	08090103          	lb	sp,128(s2)
    3a08:	0100                	addi	s0,sp,128
    3a0a:	0105                	addi	sp,sp,1
    3a0c:	0c090103          	lb	sp,192(s2)
    3a10:	0100                	addi	s0,sp,128
    3a12:	14090403          	lb	s0,320(s2)
    3a16:	0100                	addi	s0,sp,128
        p1 = &buf[CVTBUFSIZE];
    3a18:	0805                	addi	a6,a6,1
    3a1a:	14090103          	lb	sp,320(s2)
    3a1e:	0100                	addi	s0,sp,128
    3a20:	0c090103          	lb	sp,192(s2)
        while (fi != 0)
    3a24:	0100                	addi	s0,sp,128
    3a26:	0105                	addi	sp,sp,1
            fj    = modf(fi / 10, &fi);
    3a28:	0c090e03          	lb	t3,192(s2)
    3a2c:	0100                	addi	s0,sp,128
    3a2e:	10090403          	lb	s0,256(s2)
    3a32:	0100                	addi	s0,sp,128
    3a34:	0d05                	addi	s10,s10,1
    3a36:	30090303          	lb	t1,768(s2)
    3a3a:	0100                	addi	s0,sp,128
    3a3c:	0505                	addi	a0,a0,1
    3a3e:	04090203          	lb	tp,64(s2)
    3a42:	0100                	addi	s0,sp,128
    3a44:	14090103          	lb	sp,320(s2)
    3a48:	0100                	addi	s0,sp,128
    3a4a:	0705                	addi	a4,a4,1
    3a4c:	18090203          	lb	tp,384(s2)
    3a50:	0100                	addi	s0,sp,128
    3a52:	0b05                	addi	s6,s6,1
    3a54:	08090103          	lb	sp,128(s2)
    3a58:	0100                	addi	s0,sp,128
    3a5a:	0905                	addi	s2,s2,1
    3a5c:	04090203          	lb	tp,64(s2)
    3a60:	0100                	addi	s0,sp,128
    3a62:	0a05                	addi	s4,s4,1
    3a64:	10090103          	lb	sp,256(s2)
    3a68:	0100                	addi	s0,sp,128
    3a6a:	0c090103          	lb	sp,192(s2)
    3a6e:	0100                	addi	s0,sp,128
    3a70:	0c05                	addi	s8,s8,1
    3a72:	0c097c03          	0xc097c03
            *--p1 = (int)((fj + .03) * 10) + '0';
    3a76:	0100                	addi	s0,sp,128
    3a78:	0b05                	addi	s6,s6,1
    3a7a:	08090003          	lb	zero,128(s2)
    3a7e:	0100                	addi	s0,sp,128
    3a80:	0c05                	addi	s8,s8,1
    3a82:	04090703          	lb	a4,64(s2)
    3a86:	0100                	addi	s0,sp,128
    3a88:	0105                	addi	sp,sp,1
    3a8a:	04090103          	lb	sp,64(s2)
    3a8e:	0100                	addi	s0,sp,128
    3a90:	1409                	addi	s0,s0,-30
    3a92:	0000                	unimp
    3a94:	0101                	addi	sp,sp,0
    3a96:	100d                	c.nop	-29
    3a98:	0000                	unimp
    3a9a:	00530003          	lb	zero,5(t1) # 9022f29 <RAM_SIZE+0x9012f29>
    3a9e:	0000                	unimp
    3aa0:	0101                	addi	sp,sp,0
    3aa2:	000d0efb          	0xd0efb
    3aa6:	0101                	addi	sp,sp,0
    3aa8:	0101                	addi	sp,sp,0
    3aaa:	0000                	unimp
    3aac:	0100                	addi	s0,sp,128
    3aae:	0000                	unimp
    3ab0:	2e01                	jal	3dc0 <cvt+0x494>
    3ab2:	2f2e                	fld	ft10,200(sp)
    3ab4:	2e2e                	fld	ft8,200(sp)
    3ab6:	2f2e2e2f          	0x2f2e2e2f
    3aba:	2e2e                	fld	ft8,200(sp)
    3abc:	2f2e2e2f          	0x2f2e2e2f
    3ac0:	6972                	flw	fs2,28(sp)
    3ac2:	2d766373          	csrrsi	t1,0x2d7,12
    3ac6:	2f636367          	0x2f636367
    3aca:	696c                	flw	fa1,84(a0)
    3acc:	6762                	flw	fa4,24(sp)
    3ace:	732f6363          	bltu	t5,s2,41f4 <number+0x1c0>
    3ad2:	2d74666f          	jal	a2,4a5a8 <RAM_SIZE+0x3a5a8>
    3ad6:	7066                	flw	ft0,120(sp)
    3ad8:	0000                	unimp
    3ada:	6461                	lui	s0,0x18
    3adc:	6464                	flw	fs1,76(s0)
    3ade:	3366                	fld	ft6,120(sp)
    3ae0:	632e                	flw	ft6,200(sp)
    3ae2:	0100                	addi	s0,sp,128
    3ae4:	0000                	unimp
    3ae6:	6f64                	flw	fs1,92(a4)
    3ae8:	6275                	lui	tp,0x1d
    3aea:	656c                	flw	fa1,76(a0)
            r2++;
    3aec:	682e                	flw	fa6,200(sp)
    3aee:	0100                	addi	s0,sp,128
    3af0:	0000                	unimp
    3af2:	0500                	addi	s0,sp,640
    3af4:	0001                	nop
    3af6:	0205                	addi	tp,tp,1
        while (fi != 0)
    3af8:	4f3c                	lw	a5,88(a4)
    3afa:	0000                	unimp
    3afc:	05012303          	lw	t1,80(sp)
    3b00:	09010303          	lb	t1,144(sp)
    3b04:	0000                	unimp
    3b06:	0301                	addi	t1,t1,0
    3b08:	0900                	addi	s0,sp,144
    3b0a:	0000                	unimp
    3b0c:	0501                	addi	a0,a0,0
    3b0e:	030d                	addi	t1,t1,3
    3b10:	0900                	addi	s0,sp,144
    3b12:	0000                	unimp
    3b14:	0501                	addi	a0,a0,0
    3b16:	09010303          	lb	t1,144(sp)
    3b1a:	0000                	unimp
        while (p1 < &buf[CVTBUFSIZE])
    3b1c:	0301                	addi	t1,t1,0
    3b1e:	0900                	addi	s0,sp,144
            *p++ = *p1++;
    3b20:	0000                	unimp
    3b22:	0301                	addi	t1,t1,0
    3b24:	0900                	addi	s0,sp,144
    3b26:	0000                	unimp
    3b28:	0301                	addi	t1,t1,0
    3b2a:	0900                	addi	s0,sp,144
    3b2c:	0000                	unimp
    3b2e:	0301                	addi	t1,t1,0
    3b30:	0901                	addi	s2,s2,0
    3b32:	0000                	unimp
    3b34:	0301                	addi	t1,t1,0
    3b36:	0900                	addi	s0,sp,144
    3b38:	0000                	unimp
    3b3a:	0301                	addi	t1,t1,0
    3b3c:	0900                	addi	s0,sp,144
    3b3e:	0000                	unimp
        while (p1 < &buf[CVTBUFSIZE])
    3b40:	0301                	addi	t1,t1,0
    3b42:	0900                	addi	s0,sp,144
    3b44:	0000                	unimp
    3b46:	0301                	addi	t1,t1,0
    3b48:	0901                	addi	s2,s2,0
    3b4a:	0000                	unimp
    3b4c:	0301                	addi	t1,t1,0
    3b4e:	0900                	addi	s0,sp,144
    3b50:	0000                	unimp
    3b52:	0301                	addi	t1,t1,0
    else if (arg > 0)
    3b54:	0900                	addi	s0,sp,144
    3b56:	0000                	unimp
    3b58:	0301                	addi	t1,t1,0
    3b5a:	0900                	addi	s0,sp,144
    3b5c:	0000                	unimp
    3b5e:	0301                	addi	t1,t1,0
    3b60:	0901                	addi	s2,s2,0
    3b62:	0000                	unimp
    3b64:	0301                	addi	t1,t1,0
    3b66:	0902                	c.slli64	s2
    3b68:	0000                	unimp
    3b6a:	0301                	addi	t1,t1,0
    3b6c:	0901                	addi	s2,s2,0
    3b6e:	0000                	unimp
        while ((fj = arg * 10) < 1)
    3b70:	0301                	addi	t1,t1,0
    3b72:	0900                	addi	s0,sp,144
            arg = fj;
    3b74:	0000                	unimp
    3b76:	0301                	addi	t1,t1,0
    3b78:	0900                	addi	s0,sp,144
    3b7a:	0000                	unimp
    3b7c:	0301                	addi	t1,t1,0
    3b7e:	0900                	addi	s0,sp,144
    3b80:	0000                	unimp
    3b82:	0301                	addi	t1,t1,0
            r2--;
    3b84:	0900                	addi	s0,sp,144
    3b86:	0000                	unimp
    3b88:	0301                	addi	t1,t1,0
    3b8a:	0900                	addi	s0,sp,144
    3b8c:	0000                	unimp
    3b8e:	0501                	addi	a0,a0,0
        while ((fj = arg * 10) < 1)
    3b90:	0601                	addi	a2,a2,0
    3b92:	08097803          	0x8097803
    3b96:	0100                	addi	s0,sp,128
    3b98:	0305                	addi	t1,t1,1
    3b9a:	04090803          	lb	a6,64(s2)
    3b9e:	0100                	addi	s0,sp,128
    3ba0:	0306                	slli	t1,t1,0x1
    3ba2:	0900                	addi	s0,sp,144
    3ba4:	0004                	0x4
    3ba6:	0601                	addi	a2,a2,0
    3ba8:	04090103          	lb	sp,64(s2)
    3bac:	0100                	addi	s0,sp,128
    3bae:	0105                	addi	sp,sp,1
    3bb0:	08097703          	0x8097703
    3bb4:	0100                	addi	s0,sp,128
    3bb6:	0305                	addi	t1,t1,1
    3bb8:	04090803          	lb	a6,64(s2)
    3bbc:	0100                	addi	s0,sp,128
    3bbe:	0306                	slli	t1,t1,0x1
    3bc0:	0900                	addi	s0,sp,144
    3bc2:	0008                	0x8
    3bc4:	0601                	addi	a2,a2,0
    3bc6:	04090103          	lb	sp,64(s2)
    3bca:	0100                	addi	s0,sp,128
    3bcc:	0105                	addi	sp,sp,1
    3bce:	04097703          	0x4097703
    3bd2:	0100                	addi	s0,sp,128
    3bd4:	0305                	addi	t1,t1,1
    3bd6:	04090803          	lb	a6,64(s2)
    3bda:	0100                	addi	s0,sp,128
    3bdc:	0306                	slli	t1,t1,0x1
    3bde:	0900                	addi	s0,sp,144
    p1 = &buf[ndigits];
    3be0:	0008                	0x8
    3be2:	0301                	addi	t1,t1,0
    3be4:	0900                	addi	s0,sp,144
    3be6:	0000                	unimp
    3be8:	0301                	addi	t1,t1,0
    3bea:	0900                	addi	s0,sp,144
    3bec:	0000                	unimp
    3bee:	0301                	addi	t1,t1,0
    if (eflag == 0)
    3bf0:	0900                	addi	s0,sp,144
    3bf2:	0000                	unimp
    3bf4:	0301                	addi	t1,t1,0
    3bf6:	0900                	addi	s0,sp,144
        p1 += r2;
    3bf8:	0000                	unimp
    3bfa:	0601                	addi	a2,a2,0
    3bfc:	00090103          	lb	sp,0(s2)
    3c00:	0100                	addi	s0,sp,128
    3c02:	0105                	addi	sp,sp,1
    3c04:	08097703          	0x8097703
    *decpt = r2;
    3c08:	0100                	addi	s0,sp,128
    3c0a:	0305                	addi	t1,t1,1
    3c0c:	0c090903          	lb	s2,192(s2)
    3c10:	0100                	addi	s0,sp,128
    3c12:	08097f03          	0x8097f03
    if (p1 < &buf[0])
    3c16:	0100                	addi	s0,sp,128
    3c18:	0306                	slli	t1,t1,0x1
    3c1a:	0900                	addi	s0,sp,144
    3c1c:	0004                	0x4
    3c1e:	0301                	addi	t1,t1,0
        buf[0] = '\0';
    3c20:	0900                	addi	s0,sp,144
    3c22:	0000                	unimp
    3c24:	0301                	addi	t1,t1,0
    3c26:	0901                	addi	s2,s2,0
        return buf;
    3c28:	0000                	unimp
    3c2a:	0301                	addi	t1,t1,0
    3c2c:	0900                	addi	s0,sp,144
    3c2e:	0000                	unimp
        arg *= 10;
    3c30:	0301                	addi	t1,t1,0
    3c32:	0900                	addi	s0,sp,144
    3c34:	0000                	unimp
    3c36:	0301                	addi	t1,t1,0
    3c38:	0900                	addi	s0,sp,144
    3c3a:	0000                	unimp
    3c3c:	0301                	addi	t1,t1,0
    3c3e:	0900                	addi	s0,sp,144
    3c40:	0000                	unimp
    3c42:	0301                	addi	t1,t1,0
    3c44:	0900                	addi	s0,sp,144
    3c46:	0000                	unimp
    3c48:	0301                	addi	t1,t1,0
    3c4a:	0900                	addi	s0,sp,144
    3c4c:	0000                	unimp
    3c4e:	0301                	addi	t1,t1,0
    3c50:	0900                	addi	s0,sp,144
    3c52:	0000                	unimp
    3c54:	0301                	addi	t1,t1,0
    3c56:	0900                	addi	s0,sp,144
        arg  = modf(arg, &fj);
    3c58:	0000                	unimp
    3c5a:	0301                	addi	t1,t1,0
    3c5c:	0900                	addi	s0,sp,144
    3c5e:	0000                	unimp
    3c60:	0301                	addi	t1,t1,0
    3c62:	0900                	addi	s0,sp,144
    3c64:	0000                	unimp
    3c66:	0301                	addi	t1,t1,0
    3c68:	0900                	addi	s0,sp,144
    3c6a:	0000                	unimp
    3c6c:	0301                	addi	t1,t1,0
    3c6e:	0900                	addi	s0,sp,144
    3c70:	0000                	unimp
    3c72:	0301                	addi	t1,t1,0
        *p++ = (int)fj + '0';
    3c74:	0900                	addi	s0,sp,144
    3c76:	0004                	0x4
    3c78:	0301                	addi	t1,t1,0
    3c7a:	0900                	addi	s0,sp,144
    3c7c:	0000                	unimp
    3c7e:	0301                	addi	t1,t1,0
    3c80:	0901                	addi	s2,s2,0
    3c82:	0000                	unimp
    3c84:	0301                	addi	t1,t1,0
    3c86:	0900                	addi	s0,sp,144
    3c88:	0000                	unimp
    3c8a:	0301                	addi	t1,t1,0
    3c8c:	0900                	addi	s0,sp,144
    3c8e:	0000                	unimp
    3c90:	0301                	addi	t1,t1,0
    3c92:	0900                	addi	s0,sp,144
    3c94:	0000                	unimp
    3c96:	0301                	addi	t1,t1,0
    3c98:	0900                	addi	s0,sp,144
    3c9a:	0000                	unimp
    3c9c:	0301                	addi	t1,t1,0
    3c9e:	0900                	addi	s0,sp,144
    3ca0:	0000                	unimp
    3ca2:	0301                	addi	t1,t1,0
    3ca4:	0900                	addi	s0,sp,144
    3ca6:	0000                	unimp
    while (p <= p1 && p < &buf[CVTBUFSIZE])
    3ca8:	0301                	addi	t1,t1,0
    3caa:	0900                	addi	s0,sp,144
    3cac:	0000                	unimp
    3cae:	0001                	nop
    3cb0:	0402                	c.slli64	s0
    3cb2:	09000307          	vlse8.v	v6,(zero),a6,v0.t
    3cb6:	0008                	0x8
    3cb8:	0001                	nop
    3cba:	0402                	c.slli64	s0
    3cbc:	09000307          	vlse8.v	v6,(zero),a6,v0.t
    3cc0:	0000                	unimp
    3cc2:	0001                	nop
    if (p1 >= &buf[CVTBUFSIZE])
    3cc4:	0402                	c.slli64	s0
    3cc6:	09000307          	vlse8.v	v6,(zero),a6,v0.t
    3cca:	0000                	unimp
    3ccc:	0001                	nop
    3cce:	0402                	c.slli64	s0
    3cd0:	0309                	addi	t1,t1,2
    3cd2:	0900                	addi	s0,sp,144
        buf[CVTBUFSIZE - 1] = '\0';
    3cd4:	0004                	0x4
    3cd6:	0001                	nop
    3cd8:	0402                	c.slli64	s0
    3cda:	0309                	addi	t1,t1,2
    3cdc:	0900                	addi	s0,sp,144
    3cde:	0000                	unimp
        return buf;
    3ce0:	0001                	nop
    3ce2:	0402                	c.slli64	s0
    3ce4:	0900030b          	0x900030b
    p = p1;
    3ce8:	0004                	0x4
    3cea:	0001                	nop
    3cec:	0402                	c.slli64	s0
    3cee:	030e                	slli	t1,t1,0x3
    *p1 += 5;
    3cf0:	0900                	addi	s0,sp,144
    3cf2:	0008                	0x8
    3cf4:	0001                	nop
    3cf6:	0402                	c.slli64	s0
    3cf8:	030e                	slli	t1,t1,0x3
    3cfa:	0900                	addi	s0,sp,144
    3cfc:	0000                	unimp
    3cfe:	0001                	nop
    3d00:	0402                	c.slli64	s0
    3d02:	030e                	slli	t1,t1,0x3
    3d04:	0900                	addi	s0,sp,144
    3d06:	0004                	0x4
    while (*p1 > '9')
    3d08:	0001                	nop
    3d0a:	0402                	c.slli64	s0
        *p1 = '0';
    3d0c:	09000317          	auipc	t1,0x9000
    3d10:	0004                	0x4
    3d12:	0001                	nop
    3d14:	0402                	c.slli64	s0
    3d16:	09000317          	auipc	t1,0x9000
        if (p1 > buf)
    3d1a:	0000                	unimp
    3d1c:	0001                	nop
    3d1e:	0402                	c.slli64	s0
    3d20:	09000317          	auipc	t1,0x9000
            ++*--p1;
    3d24:	0000                	unimp
    3d26:	0001                	nop
    3d28:	0402                	c.slli64	s0
    3d2a:	09000317          	auipc	t1,0x9000
    3d2e:	0004                	0x4
    3d30:	0001                	nop
    3d32:	0402                	c.slli64	s0
    3d34:	09000317          	auipc	t1,0x9000
    3d38:	000c                	0xc
    3d3a:	0001                	nop
    3d3c:	0402                	c.slli64	s0
    3d3e:	09000317          	auipc	t1,0x9000
    3d42:	0000                	unimp
    3d44:	0001                	nop
    3d46:	0402                	c.slli64	s0
    3d48:	09000317          	auipc	t1,0x9000
            *p1 = '1';
    3d4c:	0000                	unimp
    3d4e:	0001                	nop
    3d50:	0402                	c.slli64	s0
    3d52:	0350                	addi	a2,sp,388
    3d54:	0900                	addi	s0,sp,144
    3d56:	0004                	0x4
            (*decpt)++;
    3d58:	0001                	nop
    3d5a:	0402                	c.slli64	s0
    3d5c:	0350                	addi	a2,sp,388
    3d5e:	0900                	addi	s0,sp,144
    3d60:	0000                	unimp
    3d62:	0001                	nop
    3d64:	0402                	c.slli64	s0
    3d66:	0350                	addi	a2,sp,388
    3d68:	0900                	addi	s0,sp,144
    3d6a:	0000                	unimp
            if (eflag == 0)
    3d6c:	0001                	nop
    3d6e:	0402                	c.slli64	s0
    3d70:	0650                	addi	a2,sp,772
    3d72:	00097f03          	0x97f03
                if (p > buf)
    3d76:	0100                	addi	s0,sp,128
    3d78:	0200                	addi	s0,sp,256
    3d7a:	5004                	lw	s1,32(s0)
    3d7c:	04090103          	lb	sp,64(s2)
                    *p = '0';
    3d80:	0100                	addi	s0,sp,128
    3d82:	0200                	addi	s0,sp,256
    3d84:	1804                	addi	s1,sp,48
    3d86:	0306                	slli	t1,t1,0x1
    3d88:	0900                	addi	s0,sp,144
    3d8a:	0004                	0x4
                p++;
    3d8c:	0601                	addi	a2,a2,0
    3d8e:	08090003          	lb	zero,128(s2)
    3d92:	0100                	addi	s0,sp,128
    3d94:	0200                	addi	s0,sp,256
    3d96:	0c04                	addi	s1,sp,528
    while (*p1 > '9')
    3d98:	0306                	slli	t1,t1,0x1
    3d9a:	0900                	addi	s0,sp,144
    3d9c:	0008                	0x8
    3d9e:	0001                	nop
    3da0:	0402                	c.slli64	s0
    3da2:	0326                	slli	t1,t1,0x9
    3da4:	0900                	addi	s0,sp,144
    3da6:	0008                	0x8
    *p = '\0';
    3da8:	0001                	nop
    3daa:	0402                	c.slli64	s0
    3dac:	0900032f          	vamoswapei8.v	zero,(zero),v16,v6,v0.t
    return buf;
    3db0:	000c                	0xc
    3db2:	0001                	nop
}
    3db4:	0402                	c.slli64	s0
    3db6:	0330                	addi	a2,sp,392
    3db8:	0900                	addi	s0,sp,144
    3dba:	0008                	0x8
    3dbc:	0001                	nop
    3dbe:	0402                	c.slli64	s0
    3dc0:	0332                	slli	t1,t1,0xc
    3dc2:	0900                	addi	s0,sp,144
    3dc4:	0008                	0x8
    3dc6:	0001                	nop
{
    3dc8:	0402                	c.slli64	s0
    3dca:	0332                	slli	t1,t1,0xc
    3dcc:	0900                	addi	s0,sp,144
    3dce:	0020                	addi	s0,sp,8
    3dd0:	0001                	nop
    3dd2:	0402                	c.slli64	s0
    3dd4:	0340                	addi	s0,sp,388
    3dd6:	0900                	addi	s0,sp,144
    3dd8:	0004                	0x4
    3dda:	0001                	nop
    3ddc:	0402                	c.slli64	s0
    3dde:	0340                	addi	s0,sp,388
    3de0:	0900                	addi	s0,sp,144
    3de2:	0000                	unimp
    3de4:	0001                	nop
    3de6:	0402                	c.slli64	s0
    3de8:	0340                	addi	s0,sp,388
    3dea:	0900                	addi	s0,sp,144
    return cvt(arg, ndigits, decpt, sign, CVTBUF, 1);
    3dec:	0000                	unimp
    3dee:	0001                	nop
    3df0:	0402                	c.slli64	s0
    3df2:	0340                	addi	s0,sp,388
    3df4:	0900                	addi	s0,sp,144
    3df6:	0004                	0x4
    3df8:	0001                	nop
    3dfa:	0402                	c.slli64	s0
    3dfc:	0340                	addi	s0,sp,388
    3dfe:	0900                	addi	s0,sp,144
    3e00:	000c                	0xc
    3e02:	0001                	nop
    3e04:	0402                	c.slli64	s0
    3e06:	0340                	addi	s0,sp,388
    3e08:	0900                	addi	s0,sp,144
    3e0a:	0000                	unimp
    3e0c:	0001                	nop
    3e0e:	0402                	c.slli64	s0
}
    3e10:	037a                	slli	t1,t1,0x1e
    3e12:	0900                	addi	s0,sp,144
    3e14:	0004                	0x4
    3e16:	0001                	nop
    3e18:	01b60403          	lb	s0,27(a2)
    3e1c:	0c090003          	lb	zero,192(s2)
    3e20:	0100                	addi	s0,sp,128
    3e22:	0300                	addi	s0,sp,384
{
    3e24:	b604                	fsd	fs1,40(a2)
    3e26:	0301                	addi	t1,t1,0
    3e28:	0900                	addi	s0,sp,144
    3e2a:	0000                	unimp
    3e2c:	0001                	nop
    3e2e:	01b60403          	lb	s0,27(a2)
    3e32:	04090003          	lb	zero,64(s2)
    3e36:	0100                	addi	s0,sp,128
    3e38:	0300                	addi	s0,sp,384
    3e3a:	b604                	fsd	fs1,40(a2)
    3e3c:	0301                	addi	t1,t1,0
    3e3e:	0900                	addi	s0,sp,144
    3e40:	0000                	unimp
    3e42:	0001                	nop
    3e44:	01b60403          	lb	s0,27(a2)
    3e48:	00090003          	lb	zero,0(s2)
    return cvt(arg, ndigits, decpt, sign, buf, 1);
    3e4c:	0100                	addi	s0,sp,128
    3e4e:	0300                	addi	s0,sp,384
    3e50:	b604                	fsd	fs1,40(a2)
    3e52:	0301                	addi	t1,t1,0
    3e54:	0900                	addi	s0,sp,144
    3e56:	0000                	unimp
    3e58:	0601                	addi	a2,a2,0
    3e5a:	08090003          	lb	zero,128(s2)
    3e5e:	0100                	addi	s0,sp,128
    3e60:	0200                	addi	s0,sp,256
    3e62:	3304                	fld	fs1,32(a4)
    3e64:	0306                	slli	t1,t1,0x1
    3e66:	0900                	addi	s0,sp,144
    3e68:	0028                	addi	a0,sp,8
    3e6a:	0001                	nop
    3e6c:	0402                	c.slli64	s0
    3e6e:	063a                	slli	a2,a2,0xe
}
    3e70:	14090003          	lb	zero,320(s2)
    3e74:	0100                	addi	s0,sp,128
    3e76:	0200                	addi	s0,sp,256
    3e78:	3d04                	fld	fs1,56(a0)
    3e7a:	0c090003          	lb	zero,192(s2)
    3e7e:	0100                	addi	s0,sp,128
    3e80:	0200                	addi	s0,sp,256
    3e82:	3d04                	fld	fs1,56(a0)
{
    3e84:	0306                	slli	t1,t1,0x1
    3e86:	0900                	addi	s0,sp,144
    3e88:	000c                	0xc
    3e8a:	0001                	nop
    3e8c:	0402                	c.slli64	s0
    3e8e:	0631                	addi	a2,a2,12
    3e90:	00090003          	lb	zero,0(s2)
    3e94:	0100                	addi	s0,sp,128
    3e96:	0200                	addi	s0,sp,256
    3e98:	3104                	fld	fs1,32(a0)
    3e9a:	0306                	slli	t1,t1,0x1
    3e9c:	0900                	addi	s0,sp,144
    3e9e:	0008                	0x8
    3ea0:	0001                	nop
    3ea2:	0402                	c.slli64	s0
    3ea4:	030a                	slli	t1,t1,0x2
    3ea6:	0900                	addi	s0,sp,144
    return cvt(arg, ndigits, decpt, sign, CVTBUF, 0);
    3ea8:	000c                	0xc
    3eaa:	0001                	nop
    3eac:	0402                	c.slli64	s0
    3eae:	0342                	slli	t1,t1,0x10
    3eb0:	0900                	addi	s0,sp,144
    3eb2:	0004                	0x4
    3eb4:	0001                	nop
    3eb6:	0402                	c.slli64	s0
    3eb8:	0342                	slli	t1,t1,0x10
    3eba:	0900                	addi	s0,sp,144
    3ebc:	0004                	0x4
    3ebe:	0001                	nop
    3ec0:	0402                	c.slli64	s0
    3ec2:	0342                	slli	t1,t1,0x10
    3ec4:	0900                	addi	s0,sp,144
    3ec6:	0000                	unimp
    3ec8:	0001                	nop
    3eca:	0402                	c.slli64	s0
}
    3ecc:	0344                	addi	s1,sp,388
    3ece:	0900                	addi	s0,sp,144
    3ed0:	0004                	0x4
    3ed2:	0001                	nop
    3ed4:	0402                	c.slli64	s0
    3ed6:	09000347          	fmsub.s	ft6,ft0,fa6,ft1,rne
    3eda:	0008                	0x8
    3edc:	0001                	nop
    3ede:	0402                	c.slli64	s0
{
    3ee0:	09000347          	fmsub.s	ft6,ft0,fa6,ft1,rne
    3ee4:	0000                	unimp
    3ee6:	0001                	nop
    3ee8:	0402                	c.slli64	s0
    3eea:	09000347          	fmsub.s	ft6,ft0,fa6,ft1,rne
    3eee:	0004                	0x4
    3ef0:	0001                	nop
    3ef2:	0402                	c.slli64	s0
    3ef4:	0350                	addi	a2,sp,388
    3ef6:	0900                	addi	s0,sp,144
    3ef8:	0004                	0x4
    3efa:	0001                	nop
    3efc:	0402                	c.slli64	s0
    3efe:	0350                	addi	a2,sp,388
    3f00:	0900                	addi	s0,sp,144
    3f02:	0000                	unimp
    3f04:	0001                	nop
    3f06:	0402                	c.slli64	s0
    return cvt(arg, ndigits, decpt, sign, buf, 0);
    3f08:	0350                	addi	a2,sp,388
    3f0a:	0900                	addi	s0,sp,144
    3f0c:	0000                	unimp
    3f0e:	0001                	nop
    3f10:	0402                	c.slli64	s0
    3f12:	0350                	addi	a2,sp,388
    3f14:	0900                	addi	s0,sp,144
    3f16:	0004                	0x4
    3f18:	0001                	nop
    3f1a:	0402                	c.slli64	s0
    3f1c:	0351                	addi	t1,t1,20
    3f1e:	0900                	addi	s0,sp,144
    3f20:	0010                	0x10
    3f22:	0601                	addi	a2,a2,0
    3f24:	08097f03          	0x8097f03
    3f28:	0100                	addi	s0,sp,128
    3f2a:	0200                	addi	s0,sp,256
}
    3f2c:	4504                	lw	s1,8(a0)
    3f2e:	0306                	slli	t1,t1,0x1
    3f30:	0901                	addi	s2,s2,0
    3f32:	000c                	0xc
    3f34:	0001                	nop
    3f36:	0402                	c.slli64	s0
    3f38:	035f 0900 0008      	0x80900035f
    3f3e:	0001                	nop
{
    3f40:	0402                	c.slli64	s0
    3f42:	0368                	addi	a0,sp,396
    3f44:	0900                	addi	s0,sp,144
    3f46:	000c                	0xc
    3f48:	0001                	nop
    3f4a:	0402                	c.slli64	s0
    3f4c:	0369                	addi	t1,t1,26
    3f4e:	0900                	addi	s0,sp,144
    3f50:	0008                	0x8
    3f52:	0001                	nop
    for (sc = s; *sc != '\0' && count--; ++sc)
    3f54:	0402                	c.slli64	s0
    3f56:	0900036b          	0x900036b
    3f5a:	0008                	0x8
    3f5c:	0001                	nop
    3f5e:	0402                	c.slli64	s0
    3f60:	0900036b          	0x900036b
    3f64:	0020                	addi	s0,sp,8
    3f66:	0001                	nop
    3f68:	0402                	c.slli64	s0
    3f6a:	0379                	addi	t1,t1,30
    3f6c:	0900                	addi	s0,sp,144
    3f6e:	0004                	0x4
    3f70:	0001                	nop
    3f72:	0402                	c.slli64	s0
    3f74:	0379                	addi	t1,t1,30
    3f76:	0900                	addi	s0,sp,144
    3f78:	0000                	unimp
    3f7a:	0001                	nop
    3f7c:	0402                	c.slli64	s0
    3f7e:	0379                	addi	t1,t1,30
    3f80:	0900                	addi	s0,sp,144
    3f82:	0000                	unimp
    3f84:	0001                	nop
    3f86:	0402                	c.slli64	s0
    return sc - s;
    3f88:	0379                	addi	t1,t1,30
    3f8a:	0900                	addi	s0,sp,144
    3f8c:	0004                	0x4
    3f8e:	0001                	nop
    3f90:	0402                	c.slli64	s0
    3f92:	0379                	addi	t1,t1,30
}
    3f94:	0900                	addi	s0,sp,144
    3f96:	000c                	0xc
    3f98:	0001                	nop
    3f9a:	0402                	c.slli64	s0
    3f9c:	0379                	addi	t1,t1,30
    3f9e:	0900                	addi	s0,sp,144
    3fa0:	0000                	unimp
    3fa2:	0001                	nop
{
    3fa4:	0402                	c.slli64	s0
    3fa6:	0679                	addi	a2,a2,30
    3fa8:	00097f03          	0x97f03
    3fac:	0100                	addi	s0,sp,128
    3fae:	0200                	addi	s0,sp,256
    3fb0:	6c04                	flw	fs1,24(s0)
    3fb2:	0306                	slli	t1,t1,0x1
    int i = 0;
    3fb4:	0901                	addi	s2,s2,0
    3fb6:	0008                	0x8
    while (is_digit(**s))
    3fb8:	0001                	nop
    3fba:	0402                	c.slli64	s0
        i = i * 10 + *((*s)++) - '0';
    3fbc:	00030673          	0x30673
    3fc0:	1409                	addi	s0,s0,-30
    3fc2:	0100                	addi	s0,sp,128
    3fc4:	0200                	addi	s0,sp,256
    3fc6:	7604                	flw	fs1,40(a2)
    3fc8:	0c090003          	lb	zero,192(s2)
    3fcc:	0100                	addi	s0,sp,128
    3fce:	0200                	addi	s0,sp,256
    3fd0:	7604                	flw	fs1,40(a2)
    3fd2:	0306                	slli	t1,t1,0x1
    3fd4:	0900                	addi	s0,sp,144
    3fd6:	000c                	0xc
    3fd8:	0001                	nop
    3fda:	0402                	c.slli64	s0
    3fdc:	066a                	slli	a2,a2,0x1a
    3fde:	00090003          	lb	zero,0(s2)
    3fe2:	0100                	addi	s0,sp,128
    3fe4:	0200                	addi	s0,sp,256
    3fe6:	6a04                	flw	fs1,16(a2)
    3fe8:	0306                	slli	t1,t1,0x1
    3fea:	0900                	addi	s0,sp,144
    3fec:	0008                	0x8
    3fee:	0001                	nop
    3ff0:	0402                	c.slli64	s0
    3ff2:	09000343          	fmadd.s	ft6,ft0,fa6,ft1,rne
    3ff6:	000c                	0xc
    while (is_digit(**s))
    3ff8:	0001                	nop
    3ffa:	0402                	c.slli64	s0
    3ffc:	0900037b          	0x900037b
    4000:	000c                	0xc
    4002:	0001                	nop
    4004:	0402                	c.slli64	s0
    4006:	037d                	addi	t1,t1,31
    4008:	0900                	addi	s0,sp,144
    400a:	0008                	0x8
    400c:	0001                	nop
    400e:	0402                	c.slli64	s0
    4010:	037d                	addi	t1,t1,31
    4012:	0900                	addi	s0,sp,144
    4014:	0000                	unimp
    4016:	0001                	nop
    4018:	01800403          	lb	s0,24(zero) # 18 <_start+0x8>
    401c:	04090003          	lb	zero,64(s2)
    return i;
    4020:	0100                	addi	s0,sp,128
    4022:	0300                	addi	s0,sp,384
}
    4024:	8604                	0x8604
    4026:	0301                	addi	t1,t1,0
    4028:	0900                	addi	s0,sp,144
    402a:	0008                	0x8
    402c:	0001                	nop
    402e:	01860403          	lb	s0,24(a2)
    4032:	00090003          	lb	zero,0(s2)
{
    4036:	0100                	addi	s0,sp,128
    4038:	0300                	addi	s0,sp,384
    403a:	8604                	0x8604
    403c:	0301                	addi	t1,t1,0
    403e:	0900                	addi	s0,sp,144
    4040:	0000                	unimp
    4042:	0001                	nop
    4044:	01860403          	lb	s0,24(a2)
    4048:	00090003          	lb	zero,0(s2)
    404c:	0100                	addi	s0,sp,128
    404e:	0300                	addi	s0,sp,384
    4050:	8604                	0x8604
    4052:	0301                	addi	t1,t1,0
    4054:	0900                	addi	s0,sp,144
    4056:	0004                	0x4
    4058:	0001                	nop
    405a:	01860403          	lb	s0,24(a2)
    char *dig = digits;
    405e:	0c090003          	lb	zero,192(s2)
    4062:	0100                	addi	s0,sp,128
    4064:	0300                	addi	s0,sp,384
    4066:	8604                	0x8604
    if (type & UPPERCASE)
    4068:	0301                	addi	t1,t1,0
    406a:	0900                	addi	s0,sp,144
    406c:	0000                	unimp
    406e:	0001                	nop
    4070:	01860403          	lb	s0,24(a2)
        dig = upper_digits;
    4074:	00090003          	lb	zero,0(s2)
    4078:	0100                	addi	s0,sp,128
    407a:	0300                	addi	s0,sp,384
    if (type & LEFT)
    407c:	8804                	0x8804
    407e:	0301                	addi	t1,t1,0
    4080:	0900                	addi	s0,sp,144
    4082:	0010                	0x10
    4084:	0001                	nop
    4086:	01880403          	lb	s0,24(a6)
        type &= ~ZEROPAD;
    408a:	0c090003          	lb	zero,192(s2)
    408e:	0100                	addi	s0,sp,128
    4090:	0300                	addi	s0,sp,384
    4092:	a504                	fsd	fs1,8(a0)
    if (base < 2 || base > 36)
    4094:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    4098:	0004                	0x4
    409a:	0001                	nop
    409c:	03a50403          	lb	s0,58(a0) # 1b03a <RAM_SIZE+0xb03a>
    40a0:	00090003          	lb	zero,0(s2)
    40a4:	0100                	addi	s0,sp,128
    40a6:	0300                	addi	s0,sp,384
    40a8:	a504                	fsd	fs1,8(a0)
    40aa:	09010303          	lb	t1,144(sp)
        return 0;
    40ae:	0000                	unimp
    40b0:	0001                	nop
    40b2:	03a50403          	lb	s0,58(a0)
    c    = (type & ZEROPAD) ? '0' : ' ';
    40b6:	00090003          	lb	zero,0(s2)
    40ba:	0100                	addi	s0,sp,128
    40bc:	0300                	addi	s0,sp,384
    40be:	a504                	fsd	fs1,8(a0)
    40c0:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    40c4:	0000                	unimp
    40c6:	0001                	nop
    40c8:	03a50403          	lb	s0,58(a0)
    40cc:	00090003          	lb	zero,0(s2)
    sign = 0;
    40d0:	0100                	addi	s0,sp,128
    40d2:	0300                	addi	s0,sp,384
    if (type & SIGN)
    40d4:	a504                	fsd	fs1,8(a0)
    40d6:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    40da:	0000                	unimp
    40dc:	0001                	nop
    40de:	0402                	c.slli64	s0
        if (num < 0)
    40e0:	0325                	addi	t1,t1,9
    40e2:	0900                	addi	s0,sp,144
    40e4:	0008                	0x8
    40e6:	0001                	nop
            sign = '-';
    40e8:	0402                	c.slli64	s0
    40ea:	0325                	addi	t1,t1,9
    40ec:	0900                	addi	s0,sp,144
    40ee:	0000                	unimp
            num  = -num;
    40f0:	0001                	nop
    40f2:	0402                	c.slli64	s0
    40f4:	0325                	addi	t1,t1,9
    40f6:	0900                	addi	s0,sp,144
    40f8:	0000                	unimp
    40fa:	0001                	nop
            size--;
    40fc:	0402                	c.slli64	s0
    40fe:	0325                	addi	t1,t1,9
    4100:	0900                	addi	s0,sp,144
    4102:	0000                	unimp
    4104:	0001                	nop
    4106:	0402                	c.slli64	s0
    4108:	032c                	addi	a1,sp,392
    410a:	0900                	addi	s0,sp,144
        else if (type & PLUS)
    410c:	000c                	0xc
    410e:	0001                	nop
    4110:	0402                	c.slli64	s0
    4112:	032c                	addi	a1,sp,392
    4114:	0900                	addi	s0,sp,144
    4116:	0000                	unimp
            sign = '+';
    4118:	0001                	nop
    411a:	0402                	c.slli64	s0
    411c:	032c                	addi	a1,sp,392
    411e:	0900                	addi	s0,sp,144
            size--;
    4120:	0000                	unimp
    4122:	0001                	nop
    4124:	0402                	c.slli64	s0
    4126:	032c                	addi	a1,sp,392
    4128:	0900                	addi	s0,sp,144
    412a:	0004                	0x4
    412c:	0001                	nop
    412e:	0402                	c.slli64	s0
        else if (type & SPACE)
    4130:	032c                	addi	a1,sp,392
    4132:	0900                	addi	s0,sp,144
    4134:	0008                	0x8
    4136:	0001                	nop
    4138:	01990403          	lb	s0,25(s2)
            sign = ' ';
    413c:	08097f03          	0x8097f03
    4140:	0100                	addi	s0,sp,128
    4142:	0300                	addi	s0,sp,384
            size--;
    4144:	9904                	0x9904
    4146:	0301                	addi	t1,t1,0
    4148:	0900                	addi	s0,sp,144
    414a:	0000                	unimp
    414c:	0001                	nop
    414e:	01990403          	lb	s0,25(s2)
    if (type & HEX_PREP)
    4152:	00090003          	lb	zero,0(s2)
    4156:	0100                	addi	s0,sp,128
    4158:	0300                	addi	s0,sp,384
    415a:	9904                	0x9904
        if (base == 16)
    415c:	0301                	addi	t1,t1,0
    415e:	0900                	addi	s0,sp,144
    4160:	0000                	unimp
    4162:	0001                	nop
    4164:	01990403          	lb	s0,25(s2)
            size -= 2;
    4168:	00090003          	lb	zero,0(s2)
    416c:	0100                	addi	s0,sp,128
    416e:	0300                	addi	s0,sp,384
    4170:	9904                	0x9904
    4172:	0301                	addi	t1,t1,0
    4174:	0900                	addi	s0,sp,144
    4176:	0000                	unimp
        else if (base == 8)
    4178:	0001                	nop
    417a:	01990403          	lb	s0,25(s2)
    417e:	00090003          	lb	zero,0(s2)
    4182:	0100                	addi	s0,sp,128
            size--;
    4184:	0300                	addi	s0,sp,384
    4186:	9904                	0x9904
    4188:	0301                	addi	t1,t1,0
    418a:	0900                	addi	s0,sp,144
    418c:	0000                	unimp
    418e:	0001                	nop
    i = 0;
    4190:	019b0403          	lb	s0,25(s6)
    if (num == 0)
    4194:	04090003          	lb	zero,64(s2)
    4198:	0100                	addi	s0,sp,128
    419a:	0306                	slli	t1,t1,0x1
        tmp[i++] = '0';
    419c:	0900                	addi	s0,sp,144
    419e:	0008                	0x8
    41a0:	0001                	nop
    41a2:	0402                	c.slli64	s0
    41a4:	067c                	addi	a5,sp,780
    41a6:	14090003          	lb	zero,320(s2)
    41aa:	0100                	addi	s0,sp,128
    41ac:	0200                	addi	s0,sp,256
    41ae:	7c04                	flw	fs1,56(s0)
    41b0:	00090003          	lb	zero,0(s2)
    41b4:	0100                	addi	s0,sp,128
    41b6:	0200                	addi	s0,sp,256
    41b8:	7c04                	flw	fs1,56(s0)
    41ba:	00090003          	lb	zero,0(s2)
            tmp[i++] = dig[((unsigned long)num) % (unsigned)base];
    41be:	0100                	addi	s0,sp,128
    41c0:	0200                	addi	s0,sp,256
    41c2:	7c04                	flw	fs1,56(s0)
    41c4:	00090003          	lb	zero,0(s2)
    41c8:	0100                	addi	s0,sp,128
    41ca:	0200                	addi	s0,sp,256
    41cc:	7c04                	flw	fs1,56(s0)
    41ce:	00090003          	lb	zero,0(s2)
    41d2:	0100                	addi	s0,sp,128
    41d4:	0200                	addi	s0,sp,256
    41d6:	7c04                	flw	fs1,56(s0)
    41d8:	00090003          	lb	zero,0(s2)
    41dc:	0100                	addi	s0,sp,128
    41de:	0200                	addi	s0,sp,256
    41e0:	7c04                	flw	fs1,56(s0)
    41e2:	00090003          	lb	zero,0(s2)
    41e6:	0100                	addi	s0,sp,128
    41e8:	0200                	addi	s0,sp,256
    41ea:	7c04                	flw	fs1,56(s0)
    41ec:	00090003          	lb	zero,0(s2)
    41f0:	0100                	addi	s0,sp,128
    41f2:	0200                	addi	s0,sp,256
    41f4:	7c04                	flw	fs1,56(s0)
    41f6:	00090003          	lb	zero,0(s2)
    41fa:	0100                	addi	s0,sp,128
            num      = ((unsigned long)num) / (unsigned)base;
    41fc:	0200                	addi	s0,sp,256
    41fe:	7c04                	flw	fs1,56(s0)
    4200:	00090003          	lb	zero,0(s2)
    4204:	0100                	addi	s0,sp,128
    4206:	0200                	addi	s0,sp,256
    4208:	7c04                	flw	fs1,56(s0)
    420a:	00090003          	lb	zero,0(s2)
    420e:	0100                	addi	s0,sp,128
    4210:	0306                	slli	t1,t1,0x1
    4212:	0900                	addi	s0,sp,144
    4214:	0008                	0x8
    4216:	0001                	nop
        while (num != 0)
    4218:	0402                	c.slli64	s0
    421a:	0608                	addi	a0,sp,768
    421c:	28090003          	lb	zero,640(s2)
    if (i > precision)
    4220:	0100                	addi	s0,sp,128
    4222:	0200                	addi	s0,sp,256
    4224:	0804                	addi	s1,sp,16
    4226:	00090003          	lb	zero,0(s2)
    422a:	0100                	addi	s0,sp,128
        precision = i;
    422c:	0300                	addi	s0,sp,384
    422e:	c804                	sw	s1,16(s0)
    4230:	0301                	addi	t1,t1,0
    4232:	0900                	addi	s0,sp,144
    size -= precision;
    4234:	0004                	0x4
    4236:	0001                	nop
    4238:	01c80403          	lb	s0,28(a6)
    423c:	00090003          	lb	zero,0(s2)
    4240:	0100                	addi	s0,sp,128
    4242:	0300                	addi	s0,sp,384
    if (!(type & (ZEROPAD | LEFT)))
    4244:	c804                	sw	s1,16(s0)
    4246:	0301                	addi	t1,t1,0
    4248:	0900                	addi	s0,sp,144
    424a:	0000                	unimp
    424c:	0001                	nop
    424e:	01ca0403          	lb	s0,28(s4) # 1e01c <RAM_SIZE+0xe01c>
        while (size-- > 0)
    4252:	04090003          	lb	zero,64(s2)
            *str++ = ' ';
    4256:	0100                	addi	s0,sp,128
    4258:	0300                	addi	s0,sp,384
    425a:	cd04                	sw	s1,24(a0)
    425c:	0301                	addi	t1,t1,0
    425e:	0900                	addi	s0,sp,144
    4260:	0008                	0x8
    4262:	0001                	nop
    4264:	01cd0403          	lb	s0,28(s10) # 1801c <RAM_SIZE+0x801c>
        while (size-- > 0)
    4268:	00090003          	lb	zero,0(s2)
    426c:	0100                	addi	s0,sp,128
    426e:	0300                	addi	s0,sp,384
    4270:	cd04                	sw	s1,24(a0)
    4272:	0301                	addi	t1,t1,0
    4274:	0900                	addi	s0,sp,144
    4276:	0004                	0x4
    if (sign)
    4278:	0001                	nop
    427a:	01d60403          	lb	s0,29(a2)
    427e:	04090003          	lb	zero,64(s2)
        *str++ = sign;
    4282:	0100                	addi	s0,sp,128
    4284:	0300                	addi	s0,sp,384
    4286:	d604                	sw	s1,40(a2)
    4288:	0301                	addi	t1,t1,0
    428a:	0900                	addi	s0,sp,144
    428c:	0000                	unimp
    428e:	0001                	nop
    4290:	01d60403          	lb	s0,29(a2)
    if (type & HEX_PREP)
    4294:	00090003          	lb	zero,0(s2)
    4298:	0100                	addi	s0,sp,128
    429a:	0300                	addi	s0,sp,384
    429c:	d604                	sw	s1,40(a2)
    429e:	0301                	addi	t1,t1,0
        if (base == 8)
    42a0:	0900                	addi	s0,sp,144
    42a2:	0004                	0x4
    42a4:	0001                	nop
    42a6:	01d60403          	lb	s0,29(a2)
    42aa:	0c090003          	lb	zero,192(s2)
            *str++ = '0';
    42ae:	0100                	addi	s0,sp,128
    42b0:	0300                	addi	s0,sp,384
    42b2:	d604                	sw	s1,40(a2)
    42b4:	0301                	addi	t1,t1,0
    42b6:	0900                	addi	s0,sp,144
    42b8:	0000                	unimp
    42ba:	0001                	nop
    42bc:	01d60403          	lb	s0,29(a2)
    42c0:	00090003          	lb	zero,0(s2)
        else if (base == 16)
    42c4:	0100                	addi	s0,sp,128
    42c6:	0300                	addi	s0,sp,384
    42c8:	8f04                	0x8f04
    42ca:	0602                	c.slli64	a2
    42cc:	04097f03          	0x4097f03
            *str++ = '0';
    42d0:	0100                	addi	s0,sp,128
    42d2:	0300                	addi	s0,sp,384
    42d4:	8f04                	0x8f04
    42d6:	0302                	c.slli64	t1
    42d8:	0901                	addi	s2,s2,0
    42da:	0004                	0x4
    42dc:	0001                	nop
    42de:	01d70403          	lb	s0,29(a4)
    42e2:	0306                	slli	t1,t1,0x1
            *str++ = digits[33];
    42e4:	0900                	addi	s0,sp,144
    42e6:	0004                	0x4
    42e8:	0001                	nop
    42ea:	01ee0403          	lb	s0,30(t3) # 1d01e <RAM_SIZE+0xd01e>
    42ee:	08090003          	lb	zero,128(s2)
    42f2:	0100                	addi	s0,sp,128
    42f4:	0300                	addi	s0,sp,384
    42f6:	ef04                	fsw	fs1,24(a4)
    42f8:	0301                	addi	t1,t1,0
    42fa:	0900                	addi	s0,sp,144
    42fc:	0008                	0x8
    42fe:	0001                	nop
    if (!(type & LEFT))
    4300:	01f10403          	lb	s0,31(sp)
    4304:	08090003          	lb	zero,128(s2)
    4308:	0100                	addi	s0,sp,128
    430a:	0300                	addi	s0,sp,384
        while (size-- > 0)
    430c:	f104                	fsw	fs1,32(a0)
    430e:	0301                	addi	t1,t1,0
            *str++ = c;
    4310:	0900                	addi	s0,sp,144
    4312:	0020                	addi	s0,sp,8
    4314:	0001                	nop
    4316:	01ff0403          	lb	s0,31(t5)
    431a:	04090003          	lb	zero,64(s2)
    431e:	0100                	addi	s0,sp,128
    4320:	0300                	addi	s0,sp,384
    4322:	ff04                	fsw	fs1,56(a4)
        while (size-- > 0)
    4324:	0301                	addi	t1,t1,0
    4326:	0900                	addi	s0,sp,144
    4328:	0000                	unimp
    432a:	0001                	nop
    432c:	01ff0403          	lb	s0,31(t5)
    4330:	00090003          	lb	zero,0(s2)
    while (i < precision--)
    4334:	0100                	addi	s0,sp,128
    4336:	0300                	addi	s0,sp,384
        *str++ = '0';
    4338:	ff04                	fsw	fs1,56(a4)
    433a:	0301                	addi	t1,t1,0
    433c:	0900                	addi	s0,sp,144
    433e:	0004                	0x4
    4340:	0001                	nop
    4342:	01ff0403          	lb	s0,31(t5)
    4346:	0c090003          	lb	zero,192(s2)
    434a:	0100                	addi	s0,sp,128
    while (i < precision--)
    434c:	0300                	addi	s0,sp,384
    434e:	ff04                	fsw	fs1,56(a4)
    4350:	0301                	addi	t1,t1,0
    4352:	0900                	addi	s0,sp,144
    4354:	0000                	unimp
    4356:	0001                	nop
    4358:	02b90403          	lb	s0,43(s2)
    435c:	04090003          	lb	zero,64(s2)
    while (i-- > 0)
    4360:	0100                	addi	s0,sp,128
    4362:	0300                	addi	s0,sp,384
        *str++ = tmp[i];
    4364:	f504                	fsw	fs1,40(a0)
    4366:	0302                	c.slli64	t1
    4368:	0900                	addi	s0,sp,144
    436a:	000c                	0xc
    436c:	0001                	nop
    436e:	02f50403          	lb	s0,47(a0)
    4372:	00090003          	lb	zero,0(s2)
    4376:	0100                	addi	s0,sp,128
    4378:	0300                	addi	s0,sp,384
    437a:	cb04                	sw	s1,16(a4)
    437c:	0301                	addi	t1,t1,0
    437e:	0900                	addi	s0,sp,144
    4380:	0010                	0x10
    4382:	0001                	nop
    while (i-- > 0)
    4384:	01e50403          	lb	s0,30(a0)
    4388:	08090003          	lb	zero,128(s2)
    438c:	0100                	addi	s0,sp,128
    438e:	0300                	addi	s0,sp,384
    4390:	f204                	fsw	fs1,32(a2)
    4392:	0301                	addi	t1,t1,0
    while (size-- > 0)
    4394:	0900                	addi	s0,sp,144
    4396:	0010                	0x10
        *str++ = ' ';
    4398:	0001                	nop
    439a:	01f90403          	lb	s0,31(s2)
    439e:	0306                	slli	t1,t1,0x1
    43a0:	0900                	addi	s0,sp,144
    43a2:	0014                	0x14
    43a4:	0001                	nop
    43a6:	01fc0403          	lb	s0,31(s8)
    43aa:	0c090003          	lb	zero,192(s2)
    while (size-- > 0)
    43ae:	0100                	addi	s0,sp,128
    43b0:	0300                	addi	s0,sp,384
    43b2:	fc04                	fsw	fs1,56(s0)
    43b4:	0601                	addi	a2,a2,0
    43b6:	0c090003          	lb	zero,192(s2)
    43ba:	0100                	addi	s0,sp,128
    return str;
    43bc:	0300                	addi	s0,sp,384
    43be:	f004                	fsw	fs1,32(s0)
}
    43c0:	0601                	addi	a2,a2,0
    43c2:	00090003          	lb	zero,0(s2)
    43c6:	0100                	addi	s0,sp,128
    43c8:	0300                	addi	s0,sp,384
    43ca:	f004                	fsw	fs1,32(s0)
    43cc:	0601                	addi	a2,a2,0
    43ce:	08090003          	lb	zero,128(s2)
    43d2:	0100                	addi	s0,sp,128
{
    43d4:	0300                	addi	s0,sp,384
    43d6:	c904                	sw	s1,16(a0)
    43d8:	0301                	addi	t1,t1,0
    43da:	0900                	addi	s0,sp,144
    43dc:	000c                	0xc
    43de:	0001                	nop
    43e0:	02810403          	lb	s0,40(sp)
    43e4:	04090003          	lb	zero,64(s2)
    43e8:	0100                	addi	s0,sp,128
    43ea:	0300                	addi	s0,sp,384
    43ec:	8104                	0x8104
    43ee:	0302                	c.slli64	t1
    43f0:	0900                	addi	s0,sp,144
    43f2:	0004                	0x4
    char *dig = digits;
    43f4:	0001                	nop
    43f6:	02810403          	lb	s0,40(sp)
    43fa:	00090003          	lb	zero,0(s2)
    43fe:	0100                	addi	s0,sp,128
    if (type & UPPERCASE)
    4400:	0300                	addi	s0,sp,384
    4402:	8104                	0x8104
    4404:	0302                	c.slli64	t1
    4406:	0900                	addi	s0,sp,144
    4408:	0000                	unimp
    440a:	0001                	nop
        dig = upper_digits;
    440c:	02830403          	lb	s0,40(t1) # 9003d70 <RAM_SIZE+0x8ff3d70>
    4410:	04090003          	lb	zero,64(s2)
    len = 0;
    4414:	0100                	addi	s0,sp,128
    4416:	0300                	addi	s0,sp,384
    for (i = 0; i < 6; i++)
    4418:	8604                	0x8604
    441a:	0302                	c.slli64	t1
    441c:	0900                	addi	s0,sp,144
    441e:	0008                	0x8
        if (i != 0)
    4420:	0001                	nop
    4422:	02860403          	lb	s0,40(a2)
    4426:	00090003          	lb	zero,0(s2)
            tmp[len++] = ':';
    442a:	0100                	addi	s0,sp,128
    442c:	0300                	addi	s0,sp,384
    442e:	8604                	0x8604
    4430:	0302                	c.slli64	t1
    4432:	0900                	addi	s0,sp,144
    4434:	0004                	0x4
    4436:	0001                	nop
    4438:	028f0403          	lb	s0,40(t5)
    443c:	04090003          	lb	zero,64(s2)
    4440:	0100                	addi	s0,sp,128
    4442:	0300                	addi	s0,sp,384
        tmp[len++] = dig[addr[i] >> 4];
    4444:	8f04                	0x8f04
    4446:	0302                	c.slli64	t1
    4448:	0900                	addi	s0,sp,144
    444a:	0000                	unimp
    444c:	0001                	nop
    444e:	028f0403          	lb	s0,40(t5)
    4452:	00090003          	lb	zero,0(s2)
    4456:	0100                	addi	s0,sp,128
    4458:	0300                	addi	s0,sp,384
    445a:	8f04                	0x8f04
    445c:	0302                	c.slli64	t1
    445e:	0900                	addi	s0,sp,144
    4460:	0004                	0x4
    4462:	0001                	nop
    4464:	028f0403          	lb	s0,40(t5)
    4468:	0c090003          	lb	zero,192(s2)
    446c:	0100                	addi	s0,sp,128
    446e:	0300                	addi	s0,sp,384
    4470:	8f04                	0x8f04
    4472:	0302                	c.slli64	t1
    4474:	0900                	addi	s0,sp,144
    4476:	0000                	unimp
    4478:	0001                	nop
    447a:	028f0403          	lb	s0,40(t5)
    447e:	00090003          	lb	zero,0(s2)
    4482:	0100                	addi	s0,sp,128
        tmp[len++] = dig[addr[i] & 0x0F];
    4484:	0300                	addi	s0,sp,384
    4486:	9004                	0x9004
    4488:	0302                	c.slli64	t1
    448a:	0900                	addi	s0,sp,144
    448c:	0008                	0x8
    448e:	0601                	addi	a2,a2,0
    4490:	08097f03          	0x8097f03
    4494:	0100                	addi	s0,sp,128
    4496:	08090103          	lb	sp,128(s2)
    449a:	0100                	addi	s0,sp,128
    449c:	0300                	addi	s0,sp,384
    449e:	8404                	0x8404
    44a0:	0602                	c.slli64	a2
    44a2:	08090003          	lb	zero,128(s2)
    44a6:	0100                	addi	s0,sp,128
    44a8:	0300                	addi	s0,sp,384
    44aa:	9e04                	0x9e04
    44ac:	0302                	c.slli64	t1
    44ae:	0900                	addi	s0,sp,144
    44b0:	0008                	0x8
    44b2:	0001                	nop
    44b4:	02a70403          	lb	s0,42(a4)
    44b8:	0c090003          	lb	zero,192(s2)
    for (i = 0; i < 6; i++)
    44bc:	0100                	addi	s0,sp,128
    44be:	0300                	addi	s0,sp,384
    44c0:	a804                	fsd	fs1,16(s0)
    44c2:	0302                	c.slli64	t1
    44c4:	0900                	addi	s0,sp,144
    44c6:	0008                	0x8
    44c8:	0001                	nop
    44ca:	02aa0403          	lb	s0,42(s4)
    44ce:	08090003          	lb	zero,128(s2)
    44d2:	0100                	addi	s0,sp,128
    if (!(type & LEFT))
    44d4:	0300                	addi	s0,sp,384
    44d6:	aa04                	fsd	fs1,16(a2)
    44d8:	0302                	c.slli64	t1
    44da:	0900                	addi	s0,sp,144
    44dc:	0020                	addi	s0,sp,8
    44de:	0001                	nop
        while (len < size--)
    44e0:	02b80403          	lb	s0,43(a6)
            *str++ = ' ';
    44e4:	04090003          	lb	zero,64(s2)
    44e8:	0100                	addi	s0,sp,128
    44ea:	0300                	addi	s0,sp,384
    44ec:	b804                	fsd	fs1,48(s0)
    44ee:	0302                	c.slli64	t1
    44f0:	0900                	addi	s0,sp,144
    44f2:	0000                	unimp
    44f4:	0001                	nop
    44f6:	02b80403          	lb	s0,43(a6)
        while (len < size--)
    44fa:	00090003          	lb	zero,0(s2)
    44fe:	0100                	addi	s0,sp,128
    4500:	0300                	addi	s0,sp,384
    4502:	b804                	fsd	fs1,48(s0)
    4504:	0302                	c.slli64	t1
    4506:	0900                	addi	s0,sp,144
    4508:	0004                	0x4
    450a:	0001                	nop
    for (i = 0; i < len; ++i)
    450c:	02b80403          	lb	s0,43(a6)
    4510:	0c090003          	lb	zero,192(s2)
        *str++ = tmp[i];
    4514:	0100                	addi	s0,sp,128
    4516:	0300                	addi	s0,sp,384
    4518:	b804                	fsd	fs1,48(s0)
    451a:	0302                	c.slli64	t1
    451c:	0900                	addi	s0,sp,144
    451e:	0000                	unimp
    4520:	0001                	nop
    4522:	02b80403          	lb	s0,43(a6)
    4526:	0306                	slli	t1,t1,0x1
    4528:	097f                	0x97f
    452a:	0000                	unimp
    452c:	0001                	nop
    452e:	02ab0403          	lb	s0,42(s6)
    4532:	0306                	slli	t1,t1,0x1
    for (i = 0; i < len; ++i)
    4534:	0901                	addi	s2,s2,0
    4536:	000c                	0xc
    4538:	0001                	nop
    453a:	02b20403          	lb	s0,43(tp) # 1d02b <RAM_SIZE+0xd02b>
    453e:	0306                	slli	t1,t1,0x1
    4540:	0900                	addi	s0,sp,144
    4542:	0014                	0x14
    4544:	0001                	nop
    4546:	02b50403          	lb	s0,43(a0)
    454a:	0c090003          	lb	zero,192(s2)
    while (len < size--)
    454e:	0100                	addi	s0,sp,128
        *str++ = ' ';
    4550:	0300                	addi	s0,sp,384
    4552:	b504                	fsd	fs1,40(a0)
    4554:	0602                	c.slli64	a2
    4556:	0c090003          	lb	zero,192(s2)
    455a:	0100                	addi	s0,sp,128
    455c:	0300                	addi	s0,sp,384
    455e:	a904                	fsd	fs1,16(a0)
    4560:	0602                	c.slli64	a2
    4562:	00090003          	lb	zero,0(s2)
    while (len < size--)
    4566:	0100                	addi	s0,sp,128
    4568:	0300                	addi	s0,sp,384
    456a:	a904                	fsd	fs1,16(a0)
    456c:	0602                	c.slli64	a2
    456e:	08090003          	lb	zero,128(s2)
    4572:	0100                	addi	s0,sp,128
    4574:	0300                	addi	s0,sp,384
    4576:	8204                	0x8204
    return str;
    4578:	0302                	c.slli64	t1
    457a:	0900                	addi	s0,sp,144
}
    457c:	000c                	0xc
    457e:	0001                	nop
    4580:	02ba0403          	lb	s0,43(s4)
    4584:	0c090003          	lb	zero,192(s2)
    4588:	0100                	addi	s0,sp,128
    458a:	0300                	addi	s0,sp,384
{
    458c:	bc04                	fsd	fs1,56(s0)
    458e:	0302                	c.slli64	t1
    4590:	0900                	addi	s0,sp,144
    4592:	000c                	0xc
    4594:	0001                	nop
    4596:	02bc0403          	lb	s0,43(s8)
    459a:	00090003          	lb	zero,0(s2)
    459e:	0100                	addi	s0,sp,128
    45a0:	0300                	addi	s0,sp,384
    45a2:	be04                	fsd	fs1,56(a2)
    45a4:	0302                	c.slli64	t1
    45a6:	0900                	addi	s0,sp,144
    45a8:	0004                	0x4
    45aa:	0001                	nop
    45ac:	02be0403          	lb	s0,43(t3)
    45b0:	00090003          	lb	zero,0(s2)
    len = 0;
    45b4:	0100                	addi	s0,sp,128
    45b6:	0306                	slli	t1,t1,0x1
    for (i = 0; i < 4; i++)
    45b8:	097f                	0x97f
    45ba:	0004                	0x4
    45bc:	0001                	nop
    45be:	02bf0403          	lb	s0,43(t5)
        if (i != 0)
    45c2:	0306                	slli	t1,t1,0x1
    45c4:	0901                	addi	s2,s2,0
    45c6:	0010                	0x10
            tmp[len++] = '.';
    45c8:	0001                	nop
    45ca:	02c60403          	lb	s0,44(a2)
    45ce:	04090003          	lb	zero,64(s2)
    45d2:	0100                	addi	s0,sp,128
    45d4:	0300                	addi	s0,sp,384
    45d6:	c604                	sw	s1,8(a2)
    45d8:	0302                	c.slli64	t1
    45da:	0900                	addi	s0,sp,144
    45dc:	0000                	unimp
    45de:	0001                	nop
    45e0:	02c60403          	lb	s0,44(a2)
        n = addr[i];
    45e4:	00090003          	lb	zero,0(s2)
    45e8:	0100                	addi	s0,sp,128
    45ea:	0300                	addi	s0,sp,384
    45ec:	c604                	sw	s1,8(a2)
    45ee:	0302                	c.slli64	t1
    45f0:	0900                	addi	s0,sp,144
    45f2:	0000                	unimp
    45f4:	0001                	nop
    45f6:	02c60403          	lb	s0,44(a2)
        if (n == 0)
    45fa:	04090003          	lb	zero,64(s2)
    45fe:	0100                	addi	s0,sp,128
            tmp[len++] = digits[0];
    4600:	0300                	addi	s0,sp,384
    4602:	c604                	sw	s1,8(a2)
    4604:	0302                	c.slli64	t1
    4606:	0900                	addi	s0,sp,144
    4608:	000c                	0xc
    460a:	0001                	nop
    460c:	02c60403          	lb	s0,44(a2)
    4610:	00090003          	lb	zero,0(s2)
    4614:	0100                	addi	s0,sp,128
    4616:	0300                	addi	s0,sp,384
    4618:	c604                	sw	s1,8(a2)
    461a:	0302                	c.slli64	t1
    461c:	0900                	addi	s0,sp,144
    461e:	0000                	unimp
    4620:	0001                	nop
    4622:	02c60403          	lb	s0,44(a2)
    4626:	00090003          	lb	zero,0(s2)
            if (n >= 100)
    462a:	0100                	addi	s0,sp,128
    462c:	0300                	addi	s0,sp,384
    462e:	c804                	sw	s1,16(s0)
    4630:	0302                	c.slli64	t1
    4632:	0900                	addi	s0,sp,144
                tmp[len++] = digits[n / 100];
    4634:	000c                	0xc
    4636:	0001                	nop
    4638:	02c80403          	lb	s0,44(a6)
    463c:	00090003          	lb	zero,0(s2)
    4640:	0100                	addi	s0,sp,128
    4642:	0300                	addi	s0,sp,384
    4644:	c804                	sw	s1,16(s0)
    4646:	0302                	c.slli64	t1
    4648:	0900                	addi	s0,sp,144
    464a:	0000                	unimp
    464c:	0001                	nop
    464e:	02c80403          	lb	s0,44(a6)
    4652:	04090003          	lb	zero,64(s2)
    4656:	0100                	addi	s0,sp,128
    4658:	0300                	addi	s0,sp,384
    465a:	c804                	sw	s1,16(s0)
    465c:	0302                	c.slli64	t1
    465e:	0900                	addi	s0,sp,144
    4660:	000c                	0xc
    4662:	0001                	nop
    4664:	02c80403          	lb	s0,44(a6)
    4668:	00090003          	lb	zero,0(s2)
    466c:	0100                	addi	s0,sp,128
    466e:	0300                	addi	s0,sp,384
                n          = n % 100;
    4670:	c804                	sw	s1,16(s0)
    4672:	0302                	c.slli64	t1
    4674:	0900                	addi	s0,sp,144
    4676:	0000                	unimp
    4678:	0001                	nop
    467a:	02c90403          	lb	s0,44(s2)
    467e:	04090003          	lb	zero,64(s2)
    4682:	0100                	addi	s0,sp,128
    4684:	0306                	slli	t1,t1,0x1
    4686:	0900                	addi	s0,sp,144
                tmp[len++] = digits[n / 10];
    4688:	0008                	0x8
    468a:	0001                	nop
    468c:	02dc0403          	lb	s0,45(s8)
    4690:	0306                	slli	t1,t1,0x1
    4692:	0900                	addi	s0,sp,144
    4694:	000c                	0xc
    4696:	0001                	nop
    4698:	02dc0403          	lb	s0,45(s8)
    469c:	00090003          	lb	zero,0(s2)
    46a0:	0100                	addi	s0,sp,128
    46a2:	0300                	addi	s0,sp,384
    46a4:	dc04                	sw	s1,56(s0)
    46a6:	0302                	c.slli64	t1
    46a8:	0900                	addi	s0,sp,144
    46aa:	0000                	unimp
    46ac:	0001                	nop
    46ae:	02dc0403          	lb	s0,45(s8)
    46b2:	00090003          	lb	zero,0(s2)
    46b6:	0100                	addi	s0,sp,128
    46b8:	0300                	addi	s0,sp,384
    46ba:	dc04                	sw	s1,56(s0)
    46bc:	0302                	c.slli64	t1
    46be:	0900                	addi	s0,sp,144
    46c0:	0000                	unimp
    46c2:	0001                	nop
                n          = n % 10;
    46c4:	02dc0403          	lb	s0,45(s8)
    46c8:	00090003          	lb	zero,0(s2)
    46cc:	0100                	addi	s0,sp,128
    46ce:	0300                	addi	s0,sp,384
    46d0:	dc04                	sw	s1,56(s0)
    46d2:	0302                	c.slli64	t1
    46d4:	0900                	addi	s0,sp,144
    46d6:	0000                	unimp
    46d8:	0001                	nop
    46da:	02dc0403          	lb	s0,45(s8)
    46de:	00090003          	lb	zero,0(s2)
            else if (n >= 10)
    46e2:	0100                	addi	s0,sp,128
    46e4:	0300                	addi	s0,sp,384
    46e6:	dd04                	sw	s1,56(a0)
    46e8:	0302                	c.slli64	t1
    46ea:	0900                	addi	s0,sp,144
                tmp[len++] = digits[n / 10];
    46ec:	0004                	0x4
    46ee:	0601                	addi	a2,a2,0
    46f0:	04097f03          	0x4097f03
    46f4:	0100                	addi	s0,sp,128
    46f6:	08090103          	lb	sp,128(s2)
    46fa:	0100                	addi	s0,sp,128
    46fc:	0300                	addi	s0,sp,384
    46fe:	de04                	sw	s1,56(a2)
    4700:	0602                	c.slli64	a2
    4702:	08090003          	lb	zero,128(s2)
    4706:	0100                	addi	s0,sp,128
    4708:	0300                	addi	s0,sp,384
    470a:	bb04                	fsd	fs1,48(a4)
    470c:	0302                	c.slli64	t1
    470e:	0900                	addi	s0,sp,144
    4710:	0008                	0x8
    4712:	0001                	nop
    4714:	02bb0403          	lb	s0,43(s6)
    4718:	00090003          	lb	zero,0(s2)
    471c:	0100                	addi	s0,sp,128
    471e:	0300                	addi	s0,sp,384
    4720:	bb04                	fsd	fs1,48(a4)
    4722:	0302                	c.slli64	t1
    4724:	0900                	addi	s0,sp,144
    4726:	0000                	unimp
                n          = n % 10;
    4728:	0001                	nop
    472a:	02bb0403          	lb	s0,43(s6)
    472e:	00090003          	lb	zero,0(s2)
    4732:	0100                	addi	s0,sp,128
    4734:	0300                	addi	s0,sp,384
    4736:	bb04                	fsd	fs1,48(a4)
    4738:	0302                	c.slli64	t1
    473a:	0900                	addi	s0,sp,144
    473c:	0004                	0x4
    473e:	0001                	nop
            tmp[len++] = digits[n];
    4740:	02bb0403          	lb	s0,43(s6)
    4744:	0c090003          	lb	zero,192(s2)
    4748:	0100                	addi	s0,sp,128
    474a:	0300                	addi	s0,sp,384
    474c:	bb04                	fsd	fs1,48(a4)
    474e:	0302                	c.slli64	t1
    4750:	0900                	addi	s0,sp,144
    4752:	0000                	unimp
    4754:	0001                	nop
    4756:	02bb0403          	lb	s0,43(s6)
    475a:	00090003          	lb	zero,0(s2)
    475e:	0100                	addi	s0,sp,128
    4760:	0300                	addi	s0,sp,384
    4762:	bb04                	fsd	fs1,48(a4)
    4764:	0302                	c.slli64	t1
    4766:	0900                	addi	s0,sp,144
    4768:	0000                	unimp
    476a:	0001                	nop
    for (i = 0; i < 4; i++)
    476c:	02ee0403          	lb	s0,46(t3)
    4770:	0c090003          	lb	zero,192(s2)
    4774:	0100                	addi	s0,sp,128
    4776:	0300                	addi	s0,sp,384
    4778:	ee04                	fsw	fs1,24(a2)
    477a:	0302                	c.slli64	t1
    477c:	0900                	addi	s0,sp,144
    477e:	0000                	unimp
    4780:	0001                	nop
    4782:	02ee0403          	lb	s0,46(t3)
    if (!(type & LEFT))
    4786:	00090003          	lb	zero,0(s2)
    478a:	0100                	addi	s0,sp,128
    478c:	0300                	addi	s0,sp,384
    478e:	ee04                	fsw	fs1,24(a2)
        while (len < size--)
    4790:	0302                	c.slli64	t1
    4792:	0900                	addi	s0,sp,144
            *str++ = ' ';
    4794:	0004                	0x4
    4796:	0001                	nop
    4798:	02ee0403          	lb	s0,46(t3)
    479c:	0c090003          	lb	zero,192(s2)
    47a0:	0100                	addi	s0,sp,128
    47a2:	0300                	addi	s0,sp,384
    47a4:	ee04                	fsw	fs1,24(a2)
    47a6:	0302                	c.slli64	t1
        while (len < size--)
    47a8:	0900                	addi	s0,sp,144
    47aa:	0000                	unimp
    47ac:	0001                	nop
    47ae:	02ee0403          	lb	s0,46(t3)
    47b2:	00090003          	lb	zero,0(s2)
    47b6:	0100                	addi	s0,sp,128
    47b8:	0300                	addi	s0,sp,384
    47ba:	f704                	fsw	fs1,40(a4)
    for (i = 0; i < len; ++i)
    47bc:	0302                	c.slli64	t1
    47be:	0900                	addi	s0,sp,144
    47c0:	0004                	0x4
    47c2:	0001                	nop
        *str++ = tmp[i];
    47c4:	02f70403          	lb	s0,47(a4)
    47c8:	00090003          	lb	zero,0(s2)
    47cc:	0100                	addi	s0,sp,128
    47ce:	0300                	addi	s0,sp,384
    47d0:	fa04                	fsw	fs1,48(a2)
    47d2:	0302                	c.slli64	t1
    47d4:	0900                	addi	s0,sp,144
    47d6:	0004                	0x4
    47d8:	0001                	nop
    47da:	02fa0403          	lb	s0,47(s4)
    47de:	00090003          	lb	zero,0(s2)
    47e2:	0100                	addi	s0,sp,128
    for (i = 0; i < len; ++i)
    47e4:	0300                	addi	s0,sp,384
    47e6:	fa04                	fsw	fs1,48(a2)
    47e8:	0302                	c.slli64	t1
    47ea:	0900                	addi	s0,sp,144
    47ec:	0000                	unimp
    47ee:	0001                	nop
    47f0:	02fa0403          	lb	s0,47(s4)
    47f4:	00090003          	lb	zero,0(s2)
    47f8:	0100                	addi	s0,sp,128
    47fa:	0300                	addi	s0,sp,384
    while (len < size--)
    47fc:	fa04                	fsw	fs1,48(a2)
    47fe:	0302                	c.slli64	t1
        *str++ = ' ';
    4800:	0900                	addi	s0,sp,144
    4802:	0008                	0x8
    4804:	0001                	nop
    4806:	03880403          	lb	s0,56(a6)
    480a:	00090003          	lb	zero,0(s2)
    480e:	0100                	addi	s0,sp,128
    4810:	0300                	addi	s0,sp,384
    4812:	8804                	0x8804
    while (len < size--)
    4814:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    4818:	0000                	unimp
    481a:	0001                	nop
    481c:	03880403          	lb	s0,56(a6)
    4820:	04090003          	lb	zero,64(s2)
    4824:	0100                	addi	s0,sp,128
    4826:	0300                	addi	s0,sp,384
    return str;
    4828:	8e04                	0x8e04
    482a:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
}
    482e:	0008                	0x8
    4830:	0001                	nop
    4832:	038e0403          	lb	s0,56(t3)
    4836:	00090003          	lb	zero,0(s2)
    483a:	0100                	addi	s0,sp,128
    483c:	0300                	addi	s0,sp,384
    483e:	8e04                	0x8e04
    4840:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
{
    4844:	0014                	0x14
    4846:	0001                	nop
    4848:	03920403          	lb	s0,57(tp) # 39 <_start+0x29>
    484c:	04090003          	lb	zero,64(s2)
    4850:	0100                	addi	s0,sp,128
    4852:	0300                	addi	s0,sp,384
    4854:	9304                	0x9304
    4856:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    485a:	0004                	0x4
    485c:	0001                	nop
    485e:	03930403          	lb	s0,57(t1)
    for (str = buf; *fmt; fmt++)
    4862:	08090003          	lb	zero,128(s2)
    4866:	0100                	addi	s0,sp,128
    4868:	0300                	addi	s0,sp,384
    486a:	9504                	0x9504
        if (*fmt != '%')
    486c:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    4870:	0008                	0x8
    4872:	0001                	nop
    4874:	03950403          	lb	s0,57(a0)
    4878:	20090003          	lb	zero,512(s2)
            *str++ = *fmt;
    487c:	0100                	addi	s0,sp,128
    487e:	0300                	addi	s0,sp,384
    4880:	a104                	fsd	fs1,0(a0)
    4882:	00030603          	lb	a2,0(t1)
    4886:	0409                	addi	s0,s0,2
    4888:	0100                	addi	s0,sp,128
    488a:	0300                	addi	s0,sp,384
    488c:	ef04                	fsw	fs1,24(a4)
    488e:	0602                	c.slli64	a2
    4890:	08090003          	lb	zero,128(s2)
            continue;
    4894:	0100                	addi	s0,sp,128
    4896:	0306                	slli	t1,t1,0x1
        flags = 0;
    4898:	0900                	addi	s0,sp,144
    489a:	000c                	0xc
        fmt++; // This also skips first '%'
    489c:	0001                	nop
    489e:	03810403          	lb	s0,56(sp)
    48a2:	0306                	slli	t1,t1,0x1
    48a4:	0900                	addi	s0,sp,144
    48a6:	0008                	0x8
        switch (*fmt)
    48a8:	0001                	nop
    48aa:	03810403          	lb	s0,56(sp)
    48ae:	00090003          	lb	zero,0(s2)
    48b2:	0100                	addi	s0,sp,128
    48b4:	0300                	addi	s0,sp,384
    48b6:	8104                	0x8104
    48b8:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    48bc:	0000                	unimp
    48be:	0001                	nop
    48c0:	03810403          	lb	s0,56(sp)
    48c4:	00090003          	lb	zero,0(s2)
    48c8:	0100                	addi	s0,sp,128
    48ca:	0300                	addi	s0,sp,384
    48cc:	8104                	0x8104
    48ce:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    48d2:	0008                	0x8
                flags |= LEFT;
    48d4:	0001                	nop
    48d6:	03810403          	lb	s0,56(sp)
    48da:	00090003          	lb	zero,0(s2)
    48de:	0100                	addi	s0,sp,128
                goto repeat;
    48e0:	0300                	addi	s0,sp,384
    48e2:	8a04                	0x8a04
                flags |= PLUS;
    48e4:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    48e8:	0008                	0x8
    48ea:	0001                	nop
    48ec:	038a0403          	lb	s0,56(s4)
                goto repeat;
    48f0:	08090003          	lb	zero,128(s2)
                flags |= SPACE;
    48f4:	0100                	addi	s0,sp,128
    48f6:	0300                	addi	s0,sp,384
    48f8:	9604                	0x9604
    48fa:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    48fe:	0008                	0x8
                goto repeat;
    4900:	0001                	nop
    4902:	039e0403          	lb	s0,57(t3)
                flags |= HEX_PREP;
    4906:	0306                	slli	t1,t1,0x1
    4908:	0900                	addi	s0,sp,144
    490a:	0014                	0x14
    490c:	0001                	nop
    490e:	03a10403          	lb	s0,58(sp)
                goto repeat;
    4912:	0c090003          	lb	zero,192(s2)
                flags |= ZEROPAD;
    4916:	0100                	addi	s0,sp,128
    4918:	0300                	addi	s0,sp,384
    491a:	a104                	fsd	fs1,0(a0)
    491c:	00030603          	lb	a2,0(t1)
                goto repeat;
    4920:	0c09                	addi	s8,s8,2
    4922:	0100                	addi	s0,sp,128
        field_width = -1;
    4924:	0300                	addi	s0,sp,384
    4926:	9404                	0x9404
    4928:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
        if (is_digit(*fmt))
    492c:	0008                	0x8
    492e:	0001                	nop
    4930:	03940403          	lb	s0,57(s0) # 18039 <RAM_SIZE+0x8039>
    4934:	04090003          	lb	zero,64(s2)
    4938:	0100                	addi	s0,sp,128
    493a:	0306                	slli	t1,t1,0x1
    493c:	097f                	0x97f
    493e:	0010                	0x10
    4940:	0301                	addi	t1,t1,0
    4942:	0901                	addi	s2,s2,0
    4944:	0008                	0x8
    4946:	0301                	addi	t1,t1,0
    4948:	097f                	0x97f
    494a:	0008                	0x8
            field_width = skip_atoi(&fmt);
    494c:	0001                	nop
    494e:	0402                	c.slli64	s0
    4950:	0203062f          	vamoaddei8.v	zero,(t1),v0,v12
    4954:	1809                	addi	a6,a6,-30
    4956:	0100                	addi	s0,sp,128
    4958:	0200                	addi	s0,sp,256
    495a:	2f04                	fld	fs1,24(a4)
    495c:	00090003          	lb	zero,0(s2)
        else if (*fmt == '*')
    4960:	0100                	addi	s0,sp,128
    4962:	0200                	addi	s0,sp,256
    4964:	2f04                	fld	fs1,24(a4)
    4966:	00090003          	lb	zero,0(s2)
    496a:	0100                	addi	s0,sp,128
    496c:	0200                	addi	s0,sp,256
    496e:	3f04                	fld	fs1,56(a4)
            fmt++;
    4970:	0c090003          	lb	zero,192(s2)
    4974:	0100                	addi	s0,sp,128
    4976:	0200                	addi	s0,sp,256
    4978:	3f04                	fld	fs1,56(a4)
    497a:	00090003          	lb	zero,0(s2)
            field_width = va_arg(args, int);
    497e:	0100                	addi	s0,sp,128
    4980:	0200                	addi	s0,sp,256
    4982:	3f04                	fld	fs1,56(a4)
    4984:	04090003          	lb	zero,64(s2)
    4988:	0100                	addi	s0,sp,128
    498a:	0306                	slli	t1,t1,0x1
    498c:	0900                	addi	s0,sp,144
    498e:	0008                	0x8
            if (field_width < 0)
    4990:	0001                	nop
    4992:	0402                	c.slli64	s0
    4994:	0003064f          	fnmadd.s	fa2,ft6,ft0,ft0,rne
                field_width = -field_width;
    4998:	0c09                	addi	s8,s8,2
    499a:	0100                	addi	s0,sp,128
    499c:	0200                	addi	s0,sp,256
    499e:	4f04                	lw	s1,24(a4)
    49a0:	00090003          	lb	zero,0(s2)
                flags |= LEFT;
    49a4:	0100                	addi	s0,sp,128
    49a6:	0200                	addi	s0,sp,256
    49a8:	4f04                	lw	s1,24(a4)
    49aa:	00090003          	lb	zero,0(s2)
    49ae:	0100                	addi	s0,sp,128
        precision = -1;
    49b0:	0200                	addi	s0,sp,256
    49b2:	4f04                	lw	s1,24(a4)
    49b4:	0c090003          	lb	zero,192(s2)
        if (*fmt == '.')
    49b8:	0100                	addi	s0,sp,128
    49ba:	0200                	addi	s0,sp,256
    49bc:	4f04                	lw	s1,24(a4)
    49be:	08090003          	lb	zero,128(s2)
    49c2:	0100                	addi	s0,sp,128
    49c4:	0200                	addi	s0,sp,256
    49c6:	5004                	lw	s1,32(s0)
            ++fmt;
    49c8:	0306                	slli	t1,t1,0x1
    49ca:	0900                	addi	s0,sp,144
    49cc:	0004                	0x4
    49ce:	0301                	addi	t1,t1,0
    49d0:	0900                	addi	s0,sp,144
    49d2:	000c                	0xc
            if (is_digit(*fmt))
    49d4:	0001                	nop
    49d6:	0402                	c.slli64	s0
    49d8:	065a                	slli	a2,a2,0x16
    49da:	0c090003          	lb	zero,192(s2)
    49de:	0100                	addi	s0,sp,128
    49e0:	0200                	addi	s0,sp,256
    49e2:	5a04                	lw	s1,48(a2)
    49e4:	00090003          	lb	zero,0(s2)
    49e8:	0100                	addi	s0,sp,128
    49ea:	0200                	addi	s0,sp,256
    49ec:	5a04                	lw	s1,48(a2)
    49ee:	00090003          	lb	zero,0(s2)
    49f2:	0100                	addi	s0,sp,128
                precision = skip_atoi(&fmt);
    49f4:	0200                	addi	s0,sp,256
    49f6:	5a04                	lw	s1,48(a2)
    49f8:	00090003          	lb	zero,0(s2)
    49fc:	0100                	addi	s0,sp,128
    49fe:	0200                	addi	s0,sp,256
    4a00:	5a04                	lw	s1,48(a2)
    4a02:	00090003          	lb	zero,0(s2)
    4a06:	0100                	addi	s0,sp,128
            else if (*fmt == '*')
    4a08:	0200                	addi	s0,sp,256
    4a0a:	5a04                	lw	s1,48(a2)
    4a0c:	00090003          	lb	zero,0(s2)
    4a10:	0100                	addi	s0,sp,128
    4a12:	0200                	addi	s0,sp,256
    4a14:	5a04                	lw	s1,48(a2)
    4a16:	00090003          	lb	zero,0(s2)
                ++fmt;
    4a1a:	0100                	addi	s0,sp,128
    4a1c:	0200                	addi	s0,sp,256
    4a1e:	5a04                	lw	s1,48(a2)
    4a20:	00090003          	lb	zero,0(s2)
                precision = va_arg(args, int);
    4a24:	0100                	addi	s0,sp,128
    4a26:	0200                	addi	s0,sp,256
    4a28:	5a04                	lw	s1,48(a2)
    4a2a:	00090003          	lb	zero,0(s2)
    4a2e:	0100                	addi	s0,sp,128
    4a30:	0105                	addi	sp,sp,1
    4a32:	0200                	addi	s0,sp,256
    4a34:	5a04                	lw	s1,48(a2)
    4a36:	0306                	slli	t1,t1,0x1
            if (precision < 0)
    4a38:	0904                	addi	s1,sp,144
    4a3a:	000c                	0xc
    4a3c:	0501                	addi	a0,a0,0
    4a3e:	04020003          	lb	zero,64(tp) # 40 <_start+0x30>
                precision = 0;
    4a42:	035a                	slli	t1,t1,0x16
        qualifier = -1;
    4a44:	097c                	addi	a5,sp,156
    4a46:	0008                	0x8
    4a48:	0001                	nop
    4a4a:	0402                	c.slli64	s0
        if (*fmt == 'l' || *fmt == 'L')
    4a4c:	065a                	slli	a2,a2,0x16
    4a4e:	14090003          	lb	zero,320(s2)
    4a52:	0100                	addi	s0,sp,128
    4a54:	0200                	addi	s0,sp,256
    4a56:	5a04                	lw	s1,48(a2)
    4a58:	00090003          	lb	zero,0(s2)
    4a5c:	0100                	addi	s0,sp,128
    4a5e:	0200                	addi	s0,sp,256
    4a60:	5a04                	lw	s1,48(a2)
    4a62:	00090103          	lb	sp,0(s2)
    4a66:	0100                	addi	s0,sp,128
    4a68:	0200                	addi	s0,sp,256
    4a6a:	5a04                	lw	s1,48(a2)
            qualifier = *fmt;
    4a6c:	00090003          	lb	zero,0(s2)
    4a70:	0100                	addi	s0,sp,128
    4a72:	0200                	addi	s0,sp,256
    4a74:	5a04                	lw	s1,48(a2)
    4a76:	00090003          	lb	zero,0(s2)
            fmt++;
    4a7a:	0100                	addi	s0,sp,128
    4a7c:	0200                	addi	s0,sp,256
    4a7e:	5a04                	lw	s1,48(a2)
    4a80:	00090203          	lb	tp,0(s2)
        base = 10;
    4a84:	0100                	addi	s0,sp,128
    4a86:	0105                	addi	sp,sp,1
    4a88:	0200                	addi	s0,sp,256
    4a8a:	5a04                	lw	s1,48(a2)
        switch (*fmt)
    4a8c:	0306                	slli	t1,t1,0x1
    4a8e:	0901                	addi	s2,s2,0
    4a90:	0000                	unimp
    4a92:	0501                	addi	a0,a0,0
    4a94:	097a0303          	lb	t1,151(s4)
    4a98:	0020                	addi	s0,sp,8
    4a9a:	0301                	addi	t1,t1,0
    4a9c:	0901                	addi	s2,s2,0
    4a9e:	0008                	0x8
    4aa0:	0901                	addi	s2,s2,0
    4aa2:	003c                	addi	a5,sp,8
    4aa4:	0100                	addi	s0,sp,128
    4aa6:	a401                	j	4ca6 <ee_vsprintf+0x462>
    4aa8:	0010                	0x10
    4aaa:	0300                	addi	s0,sp,384
    4aac:	6000                	flw	fs0,0(s0)
    4aae:	0000                	unimp
    4ab0:	0100                	addi	s0,sp,128
    4ab2:	fb01                	bnez	a4,49c2 <ee_vsprintf+0x17e>
    4ab4:	0d0e                	slli	s10,s10,0x3
    4ab6:	0100                	addi	s0,sp,128
                if (!(flags & LEFT))
    4ab8:	0101                	addi	sp,sp,0
    4aba:	0001                	nop
    4abc:	0000                	unimp
    4abe:	0001                	nop
    4ac0:	0100                	addi	s0,sp,128
    4ac2:	2e2e                	fld	ft8,200(sp)
                    while (--field_width > 0)
    4ac4:	2f2e2e2f          	0x2f2e2e2f
                        *str++ = ' ';
    4ac8:	2e2e                	fld	ft8,200(sp)
    4aca:	2f2e2e2f          	0x2f2e2e2f
    4ace:	2e2e                	fld	ft8,200(sp)
    4ad0:	7369722f          	0x7369722f
    4ad4:	672d7663          	bgeu	s10,s2,5140 <__adddf3+0x204>
    4ad8:	6c2f6363          	bltu	t5,sp,519e <__adddf3+0x262>
                    while (--field_width > 0)
    4adc:	6269                	lui	tp,0x1a
    4ade:	2f636367          	0x2f636367
    4ae2:	74666f73          	csrrsi	t5,0x746,12
    4ae6:	662d                	lui	a2,0xb
    4ae8:	0070                	addi	a2,sp,12
    4aea:	6400                	flw	fs0,8(s0)
    4aec:	7669                	lui	a2,0xffffa
    4aee:	6664                	flw	fs1,76(a2)
                *str++ = (unsigned char)va_arg(args, int);
    4af0:	00632e33          	slt	t3,t1,t1
    4af4:	0001                	nop
    4af6:	7300                	flw	fs0,32(a4)
    4af8:	2d74666f          	jal	a2,4b5ce <RAM_SIZE+0x3b5ce>
    4afc:	7066                	flw	ft0,120(sp)
    4afe:	682e                	flw	fa6,200(sp)
    4b00:	0100                	addi	s0,sp,128
    4b02:	0000                	unimp
    4b04:	6f64                	flw	fs1,92(a4)
    4b06:	6275                	lui	tp,0x1d
    4b08:	656c                	flw	fa1,76(a0)
    4b0a:	682e                	flw	fa6,200(sp)
    4b0c:	0100                	addi	s0,sp,128
    4b0e:	0000                	unimp
    4b10:	0500                	addi	s0,sp,640
    4b12:	0001                	nop
                while (--field_width > 0)
    4b14:	0205                	addi	tp,tp,1
    4b16:	5714                	lw	a3,40(a4)
                    *str++ = ' ';
    4b18:	0000                	unimp
    4b1a:	05012303          	lw	t1,80(sp)
    4b1e:	09010303          	lb	t1,144(sp)
    4b22:	0000                	unimp
    4b24:	0301                	addi	t1,t1,0
    4b26:	0900                	addi	s0,sp,144
    4b28:	0000                	unimp
    4b2a:	0501                	addi	a0,a0,0
                while (--field_width > 0)
    4b2c:	030d                	addi	t1,t1,3
    4b2e:	0900                	addi	s0,sp,144
    4b30:	0000                	unimp
    4b32:	0501                	addi	a0,a0,0
    4b34:	09010303          	lb	t1,144(sp)
    4b38:	0000                	unimp
    4b3a:	0301                	addi	t1,t1,0
    4b3c:	0900                	addi	s0,sp,144
    4b3e:	0000                	unimp
                continue;
    4b40:	0301                	addi	t1,t1,0
    4b42:	0900                	addi	s0,sp,144
                s = va_arg(args, char *);
    4b44:	0000                	unimp
    4b46:	0301                	addi	t1,t1,0
    4b48:	0900                	addi	s0,sp,144
    4b4a:	0000                	unimp
    4b4c:	0301                	addi	t1,t1,0
    4b4e:	0901                	addi	s2,s2,0
    4b50:	0000                	unimp
    4b52:	0301                	addi	t1,t1,0
    4b54:	0900                	addi	s0,sp,144
    4b56:	0000                	unimp
                if (!s)
    4b58:	0301                	addi	t1,t1,0
    4b5a:	0900                	addi	s0,sp,144
    4b5c:	0000                	unimp
    4b5e:	0301                	addi	t1,t1,0
                    s = "<NULL>";
    4b60:	0900                	addi	s0,sp,144
    4b62:	0000                	unimp
    4b64:	0301                	addi	t1,t1,0
    4b66:	0901                	addi	s2,s2,0
    4b68:	0000                	unimp
    4b6a:	0301                	addi	t1,t1,0
                len = strnlen(s, precision);
    4b6c:	0900                	addi	s0,sp,144
    4b6e:	0000                	unimp
    4b70:	0301                	addi	t1,t1,0
    4b72:	0900                	addi	s0,sp,144
    4b74:	0000                	unimp
    4b76:	0301                	addi	t1,t1,0
    4b78:	0900                	addi	s0,sp,144
    4b7a:	0000                	unimp
    4b7c:	0301                	addi	t1,t1,0
    4b7e:	0901                	addi	s2,s2,0
    4b80:	0000                	unimp
    4b82:	0301                	addi	t1,t1,0
                if (!(flags & LEFT))
    4b84:	0902                	c.slli64	s2
    4b86:	0000                	unimp
    4b88:	0301                	addi	t1,t1,0
    4b8a:	0901                	addi	s2,s2,0
    4b8c:	0000                	unimp
    4b8e:	0301                	addi	t1,t1,0
                    while (len < field_width--)
    4b90:	0900                	addi	s0,sp,144
    4b92:	0000                	unimp
                        *str++ = ' ';
    4b94:	0301                	addi	t1,t1,0
    4b96:	0900                	addi	s0,sp,144
    4b98:	0000                	unimp
    4b9a:	0301                	addi	t1,t1,0
    4b9c:	0900                	addi	s0,sp,144
    4b9e:	0000                	unimp
    4ba0:	0301                	addi	t1,t1,0
    4ba2:	0900                	addi	s0,sp,144
    4ba4:	0000                	unimp
    4ba6:	0301                	addi	t1,t1,0
                    while (len < field_width--)
    4ba8:	0900                	addi	s0,sp,144
    4baa:	0000                	unimp
    4bac:	0501                	addi	a0,a0,0
    4bae:	0601                	addi	a2,a2,0
    4bb0:	00097803          	0x97803
    4bb4:	0100                	addi	s0,sp,128
    4bb6:	0305                	addi	t1,t1,1
    4bb8:	08090803          	lb	a6,128(s2)
                for (i = 0; i < len; ++i)
    4bbc:	0100                	addi	s0,sp,128
    4bbe:	0105                	addi	sp,sp,1
    4bc0:	04097803          	0x4097803
                    *str++ = *s++;
    4bc4:	0100                	addi	s0,sp,128
    4bc6:	0305                	addi	t1,t1,1
    4bc8:	14090803          	lb	a6,320(s2)
    4bcc:	0100                	addi	s0,sp,128
    4bce:	0105                	addi	sp,sp,1
    4bd0:	04097803          	0x4097803
    4bd4:	0100                	addi	s0,sp,128
    4bd6:	0305                	addi	t1,t1,1
    4bd8:	1c090803          	lb	a6,448(s2)
    4bdc:	0100                	addi	s0,sp,128
    4bde:	0105                	addi	sp,sp,1
    4be0:	04097803          	0x4097803
                for (i = 0; i < len; ++i)
    4be4:	0100                	addi	s0,sp,128
    4be6:	0305                	addi	t1,t1,1
    4be8:	0c090803          	lb	a6,192(s2)
    4bec:	0100                	addi	s0,sp,128
    4bee:	0306                	slli	t1,t1,0x1
    4bf0:	0900                	addi	s0,sp,144
    4bf2:	0004                	0x4
    4bf4:	0301                	addi	t1,t1,0
    4bf6:	0900                	addi	s0,sp,144
    4bf8:	0000                	unimp
    4bfa:	0301                	addi	t1,t1,0
                while (len < field_width--)
    4bfc:	0900                	addi	s0,sp,144
    4bfe:	0004                	0x4
                    *str++ = ' ';
    4c00:	0301                	addi	t1,t1,0
    4c02:	0900                	addi	s0,sp,144
    4c04:	0000                	unimp
    4c06:	0301                	addi	t1,t1,0
    4c08:	0900                	addi	s0,sp,144
    4c0a:	0000                	unimp
    4c0c:	0001                	nop
    4c0e:	0402                	c.slli64	s0
    4c10:	0301                	addi	t1,t1,0
    4c12:	0900                	addi	s0,sp,144
                while (len < field_width--)
    4c14:	000c                	0xc
    4c16:	0001                	nop
    4c18:	0402                	c.slli64	s0
    4c1a:	0301                	addi	t1,t1,0
    4c1c:	0900                	addi	s0,sp,144
    4c1e:	0000                	unimp
    4c20:	0001                	nop
    4c22:	0402                	c.slli64	s0
    4c24:	0301                	addi	t1,t1,0
    4c26:	0900                	addi	s0,sp,144
                continue;
    4c28:	0000                	unimp
    4c2a:	0001                	nop
                if (field_width == -1)
    4c2c:	0402                	c.slli64	s0
    4c2e:	0301                	addi	t1,t1,0
    4c30:	0900                	addi	s0,sp,144
    4c32:	0000                	unimp
    4c34:	0001                	nop
    4c36:	0402                	c.slli64	s0
                    field_width = 2 * sizeof(void *);
    4c38:	0301                	addi	t1,t1,0
    4c3a:	0900                	addi	s0,sp,144
    4c3c:	0014                	0x14
    4c3e:	0001                	nop
                    flags |= ZEROPAD;
    4c40:	0402                	c.slli64	s0
    4c42:	0301                	addi	t1,t1,0
    4c44:	0900                	addi	s0,sp,144
    4c46:	0004                	0x4
    4c48:	0001                	nop
    4c4a:	0402                	c.slli64	s0
                             (unsigned long)va_arg(args, void *),
    4c4c:	0301                	addi	t1,t1,0
    4c4e:	0900                	addi	s0,sp,144
    4c50:	0000                	unimp
    4c52:	0001                	nop
    4c54:	0402                	c.slli64	s0
    4c56:	0301                	addi	t1,t1,0
    4c58:	0900                	addi	s0,sp,144
    4c5a:	0004                	0x4
                str = number(str,
    4c5c:	0001                	nop
    4c5e:	0402                	c.slli64	s0
    4c60:	0301                	addi	t1,t1,0
    4c62:	0900                	addi	s0,sp,144
    4c64:	0000                	unimp
    4c66:	0001                	nop
    4c68:	0402                	c.slli64	s0
    4c6a:	0329                	addi	t1,t1,10
    4c6c:	0900                	addi	s0,sp,144
    4c6e:	0000                	unimp
    4c70:	0001                	nop
    4c72:	0402                	c.slli64	s0
    4c74:	0329                	addi	t1,t1,10
    4c76:	0900                	addi	s0,sp,144
    4c78:	0000                	unimp
    4c7a:	0001                	nop
                continue;
    4c7c:	0402                	c.slli64	s0
    4c7e:	0308                	addi	a0,sp,384
                flags |= UPPERCASE;
    4c80:	0900                	addi	s0,sp,144
    4c82:	0004                	0x4
    4c84:	0001                	nop
    4c86:	0402                	c.slli64	s0
    4c88:	0308                	addi	a0,sp,384
    4c8a:	0900                	addi	s0,sp,144
                if (qualifier == 'l')
    4c8c:	0000                	unimp
    4c8e:	0001                	nop
    4c90:	0402                	c.slli64	s0
    4c92:	0308                	addi	a0,sp,384
    4c94:	0901                	addi	s2,s2,0
    4c96:	0000                	unimp
                    str = eaddr(str,
    4c98:	0001                	nop
    4c9a:	0402                	c.slli64	s0
    4c9c:	0308                	addi	a0,sp,384
    4c9e:	0900                	addi	s0,sp,144
    4ca0:	0000                	unimp
    4ca2:	0001                	nop
    4ca4:	0402                	c.slli64	s0
    4ca6:	0308                	addi	a0,sp,384
    4ca8:	0900                	addi	s0,sp,144
    4caa:	0000                	unimp
    4cac:	0001                	nop
    4cae:	0402                	c.slli64	s0
    4cb0:	0308                	addi	a0,sp,384
    4cb2:	0900                	addi	s0,sp,144
    4cb4:	0000                	unimp
    4cb6:	0001                	nop
    4cb8:	0402                	c.slli64	s0
    4cba:	0308                	addi	a0,sp,384
    4cbc:	0900                	addi	s0,sp,144
    4cbe:	0000                	unimp
    4cc0:	0001                	nop
    4cc2:	0402                	c.slli64	s0
                continue;
    4cc4:	0308                	addi	a0,sp,384
    4cc6:	0900                	addi	s0,sp,144
                    str = iaddr(str,
    4cc8:	0000                	unimp
    4cca:	0001                	nop
    4ccc:	0402                	c.slli64	s0
    4cce:	0308                	addi	a0,sp,384
    4cd0:	0900                	addi	s0,sp,144
    4cd2:	0010                	0x10
    4cd4:	0001                	nop
    4cd6:	0402                	c.slli64	s0
    4cd8:	0308                	addi	a0,sp,384
    4cda:	0900                	addi	s0,sp,144
    4cdc:	0000                	unimp
    4cde:	0001                	nop
    4ce0:	0402                	c.slli64	s0
    4ce2:	0308                	addi	a0,sp,384
    4ce4:	0900                	addi	s0,sp,144
    4ce6:	0004                	0x4
    4ce8:	0001                	nop
    4cea:	0402                	c.slli64	s0
    4cec:	0308                	addi	a0,sp,384
    4cee:	0900                	addi	s0,sp,144
    4cf0:	0000                	unimp
    4cf2:	0001                	nop
                continue;
    4cf4:	0402                	c.slli64	s0
    4cf6:	0308                	addi	a0,sp,384
                base = 8;
    4cf8:	0900                	addi	s0,sp,144
    4cfa:	0000                	unimp
    4cfc:	0601                	addi	a2,a2,0
    4cfe:	04090003          	lb	zero,64(s2)
                break;
    4d02:	0100                	addi	s0,sp,128
                flags |= UPPERCASE;
    4d04:	0200                	addi	s0,sp,256
    4d06:	0104                	addi	s1,sp,128
    4d08:	0306                	slli	t1,t1,0x1
    4d0a:	0900                	addi	s0,sp,144
    4d0c:	0008                	0x8
    4d0e:	0001                	nop
                base = 16;
    4d10:	0402                	c.slli64	s0
    4d12:	0301                	addi	t1,t1,0
    4d14:	0900                	addi	s0,sp,144
    4d16:	0000                	unimp
                break;
    4d18:	0001                	nop
    4d1a:	0402                	c.slli64	s0
                flags |= SIGN;
    4d1c:	0301                	addi	t1,t1,0
    4d1e:	0900                	addi	s0,sp,144
    4d20:	0000                	unimp
    4d22:	0001                	nop
    4d24:	0402                	c.slli64	s0
    4d26:	0301                	addi	t1,t1,0
                break;
    4d28:	0900                	addi	s0,sp,144
    4d2a:	0000                	unimp
                if (*fmt != '%')
    4d2c:	0001                	nop
    4d2e:	0402                	c.slli64	s0
    4d30:	0301                	addi	t1,t1,0
    4d32:	0900                	addi	s0,sp,144
    4d34:	0014                	0x14
    4d36:	0001                	nop
    4d38:	0402                	c.slli64	s0
    4d3a:	0301                	addi	t1,t1,0
                    *str++ = '%';
    4d3c:	0900                	addi	s0,sp,144
    4d3e:	0004                	0x4
    4d40:	0001                	nop
    4d42:	0402                	c.slli64	s0
    4d44:	0301                	addi	t1,t1,0
    4d46:	0900                	addi	s0,sp,144
    4d48:	0000                	unimp
    4d4a:	0001                	nop
    4d4c:	0402                	c.slli64	s0
    4d4e:	0301                	addi	t1,t1,0
                if (*fmt)
    4d50:	0900                	addi	s0,sp,144
    4d52:	0004                	0x4
    4d54:	0001                	nop
    4d56:	0402                	c.slli64	s0
    4d58:	0301                	addi	t1,t1,0
    4d5a:	0900                	addi	s0,sp,144
                    *str++ = *fmt;
    4d5c:	0000                	unimp
    4d5e:	0001                	nop
    4d60:	0402                	c.slli64	s0
    4d62:	0329                	addi	t1,t1,10
    4d64:	0900                	addi	s0,sp,144
    4d66:	0000                	unimp
    4d68:	0001                	nop
    4d6a:	0402                	c.slli64	s0
    4d6c:	0329                	addi	t1,t1,10
    4d6e:	0900                	addi	s0,sp,144
    4d70:	0000                	unimp
    4d72:	0001                	nop
                continue;
    4d74:	0402                	c.slli64	s0
    4d76:	0308                	addi	a0,sp,384
                    --fmt;
    4d78:	0900                	addi	s0,sp,144
    4d7a:	0004                	0x4
    4d7c:	0001                	nop
    4d7e:	0402                	c.slli64	s0
    4d80:	0308                	addi	a0,sp,384
    4d82:	0900                	addi	s0,sp,144
                continue;
    4d84:	0000                	unimp
    4d86:	0001                	nop
                break;
    4d88:	0402                	c.slli64	s0
    4d8a:	0308                	addi	a0,sp,384
        if (qualifier == 'l')
    4d8c:	0901                	addi	s2,s2,0
    4d8e:	0000                	unimp
    4d90:	0001                	nop
    4d92:	0402                	c.slli64	s0
    4d94:	0308                	addi	a0,sp,384
    4d96:	0900                	addi	s0,sp,144
            num = va_arg(args, unsigned long);
    4d98:	0000                	unimp
    4d9a:	0001                	nop
    4d9c:	0402                	c.slli64	s0
    4d9e:	0308                	addi	a0,sp,384
    4da0:	0900                	addi	s0,sp,144
    4da2:	0014                	0x14
    4da4:	0001                	nop
    4da6:	0402                	c.slli64	s0
    4da8:	0308                	addi	a0,sp,384
    4daa:	0900                	addi	s0,sp,144
    4dac:	0004                	0x4
    4dae:	0001                	nop
        else if (flags & SIGN)
    4db0:	0402                	c.slli64	s0
    4db2:	0302                	c.slli64	t1
    4db4:	097e                	slli	s2,s2,0x1f
    4db6:	0020                	addi	s0,sp,8
    4db8:	0001                	nop
    4dba:	0402                	c.slli64	s0
            num = va_arg(args, int);
    4dbc:	030d                	addi	t1,t1,3
    4dbe:	0900                	addi	s0,sp,144
    4dc0:	0008                	0x8
    4dc2:	0001                	nop
    4dc4:	0402                	c.slli64	s0
    4dc6:	030d                	addi	t1,t1,3
    4dc8:	0900                	addi	s0,sp,144
    4dca:	0000                	unimp
    4dcc:	0001                	nop
    4dce:	0402                	c.slli64	s0
    4dd0:	030d                	addi	t1,t1,3
    4dd2:	0900                	addi	s0,sp,144
            num = va_arg(args, unsigned int);
    4dd4:	0000                	unimp
    4dd6:	0001                	nop
    4dd8:	0402                	c.slli64	s0
    4dda:	030d                	addi	t1,t1,3
    4ddc:	0900                	addi	s0,sp,144
    4dde:	0000                	unimp
    4de0:	0001                	nop
    4de2:	0402                	c.slli64	s0
    4de4:	0311                	addi	t1,t1,4
    4de6:	0900                	addi	s0,sp,144
        str = number(str, num, base, field_width, precision, flags);
    4de8:	0004                	0x4
    4dea:	0001                	nop
    4dec:	0402                	c.slli64	s0
    4dee:	0311                	addi	t1,t1,4
    4df0:	0900                	addi	s0,sp,144
    4df2:	0000                	unimp
    4df4:	0001                	nop
    4df6:	0402                	c.slli64	s0
    4df8:	0311                	addi	t1,t1,4
    4dfa:	0900                	addi	s0,sp,144
    4dfc:	0000                	unimp
    4dfe:	0001                	nop
    4e00:	0402                	c.slli64	s0
    4e02:	0311                	addi	t1,t1,4
    4e04:	0900                	addi	s0,sp,144
    4e06:	0000                	unimp
    for (str = buf; *fmt; fmt++)
    4e08:	0001                	nop
    4e0a:	0402                	c.slli64	s0
    4e0c:	0311                	addi	t1,t1,4
    4e0e:	0900                	addi	s0,sp,144
    4e10:	0008                	0x8
    4e12:	0001                	nop
    4e14:	0402                	c.slli64	s0
    4e16:	031f 0900 0000      	0x900031f
    4e1c:	0001                	nop
    4e1e:	0402                	c.slli64	s0
    *str = '\0';
    4e20:	031f 0900 0000      	0x900031f
    4e26:	0001                	nop
    return str - buf;
    4e28:	0402                	c.slli64	s0
    4e2a:	031f 0900 0004      	0x40900031f
    4e30:	0001                	nop
    4e32:	0402                	c.slli64	s0
}
    4e34:	0320                	addi	s0,sp,392
    4e36:	0900                	addi	s0,sp,144
    4e38:	0008                	0x8
    4e3a:	0001                	nop
    4e3c:	0402                	c.slli64	s0
    4e3e:	0320                	addi	s0,sp,392
    4e40:	0900                	addi	s0,sp,144
    4e42:	0008                	0x8
    4e44:	0001                	nop
    4e46:	0402                	c.slli64	s0
{
    4e48:	0320                	addi	s0,sp,392
    4e4a:	0900                	addi	s0,sp,144
    4e4c:	0010                	0x10
    4e4e:	0001                	nop
    4e50:	0402                	c.slli64	s0
    4e52:	0320                	addi	s0,sp,392
    4e54:	0900                	addi	s0,sp,144
    4e56:	0004                	0x4
    4e58:	0001                	nop
    4e5a:	0402                	c.slli64	s0
	char* uart = (char*)0xDEADBEEE;
    4e5c:	0329                	addi	t1,t1,10
    4e5e:	0900                	addi	s0,sp,144
    4e60:	0000                	unimp
    4e62:	0001                	nop
    4e64:	0402                	c.slli64	s0
    4e66:	0318                	addi	a4,sp,384
	*uart = c;
    4e68:	0900                	addi	s0,sp,144
    4e6a:	000c                	0xc
    4e6c:	0001                	nop
    4e6e:	0402                	c.slli64	s0
    4e70:	0318                	addi	a4,sp,384
    4e72:	0900                	addi	s0,sp,144
}
    4e74:	0000                	unimp
    4e76:	0001                	nop
    4e78:	0402                	c.slli64	s0
    4e7a:	0318                	addi	a4,sp,384
    4e7c:	0900                	addi	s0,sp,144
    4e7e:	0000                	unimp
    4e80:	0001                	nop
    4e82:	0402                	c.slli64	s0
{
    4e84:	0318                	addi	a4,sp,384
    4e86:	0900                	addi	s0,sp,144
    4e88:	0000                	unimp
    4e8a:	0001                	nop
    4e8c:	0402                	c.slli64	s0
    4e8e:	0318                	addi	a4,sp,384
    4e90:	0900                	addi	s0,sp,144
    4e92:	0004                	0x4
    4e94:	0001                	nop
    4e96:	0402                	c.slli64	s0
    4e98:	0318                	addi	a4,sp,384
    4e9a:	0900                	addi	s0,sp,144
    4e9c:	0000                	unimp
    4e9e:	0001                	nop
    4ea0:	0402                	c.slli64	s0
    4ea2:	0321                	addi	t1,t1,8
    4ea4:	0900                	addi	s0,sp,144
    4ea6:	0008                	0x8
    4ea8:	0001                	nop
    4eaa:	0402                	c.slli64	s0
    4eac:	0321                	addi	t1,t1,8
    4eae:	0900                	addi	s0,sp,144
    4eb0:	0008                	0x8
    4eb2:	0001                	nop
    int     n = 0;
    4eb4:	0402                	c.slli64	s0
    4eb6:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    va_start(args, fmt);
    4eba:	0008                	0x8
    4ebc:	0601                	addi	a2,a2,0
    4ebe:	0c090003          	lb	zero,192(s2)
    4ec2:	0100                	addi	s0,sp,128
    4ec4:	0200                	addi	s0,sp,256
    4ec6:	0204                	addi	s1,sp,256
    4ec8:	0306                	slli	t1,t1,0x1
    4eca:	0901                	addi	s2,s2,0
    ee_vsprintf(buf, fmt, args);
    4ecc:	0030                	addi	a2,sp,8
    4ece:	0001                	nop
    4ed0:	0402                	c.slli64	s0
    4ed2:	030d                	addi	t1,t1,3
    4ed4:	0900                	addi	s0,sp,144
    4ed6:	0008                	0x8
    4ed8:	0001                	nop
    4eda:	0402                	c.slli64	s0
    4edc:	030d                	addi	t1,t1,3
    4ede:	0900                	addi	s0,sp,144
    4ee0:	0000                	unimp
    4ee2:	0001                	nop
    p = buf;
    4ee4:	0402                	c.slli64	s0
    4ee6:	030d                	addi	t1,t1,3
    4ee8:	0900                	addi	s0,sp,144
    4eea:	0000                	unimp
    while (*p)
    4eec:	0001                	nop
    4eee:	0402                	c.slli64	s0
        uart_send_char(*p);
    4ef0:	030d                	addi	t1,t1,3
    4ef2:	0900                	addi	s0,sp,144
    4ef4:	0000                	unimp
    4ef6:	0001                	nop
    4ef8:	0402                	c.slli64	s0
    4efa:	0311                	addi	t1,t1,4
    4efc:	0900                	addi	s0,sp,144
    4efe:	0004                	0x4
        n++;
    4f00:	0001                	nop
    4f02:	0402                	c.slli64	s0
    4f04:	0311                	addi	t1,t1,4
    4f06:	0900                	addi	s0,sp,144
    4f08:	0000                	unimp
    4f0a:	0001                	nop
        p++;
    4f0c:	0402                	c.slli64	s0
    4f0e:	0311                	addi	t1,t1,4
    4f10:	0900                	addi	s0,sp,144
    4f12:	0000                	unimp
    4f14:	0001                	nop
    4f16:	0402                	c.slli64	s0
    while (*p)
    4f18:	0311                	addi	t1,t1,4
    4f1a:	0900                	addi	s0,sp,144
    4f1c:	0000                	unimp
    4f1e:	0001                	nop
    4f20:	0402                	c.slli64	s0
    4f22:	0311                	addi	t1,t1,4
    return n;
    4f24:	0900                	addi	s0,sp,144
    4f26:	0008                	0x8
}
    4f28:	0001                	nop
    4f2a:	0402                	c.slli64	s0
    4f2c:	031f 0900 0000      	0x900031f
    4f32:	0001                	nop
    4f34:	0402                	c.slli64	s0
    4f36:	031f 0900 0000      	0x900031f
    4f3c:	0001                	nop
    4f3e:	0402                	c.slli64	s0
    4f40:	031f 0900 0004      	0x40900031f
    4f46:	0001                	nop
    4f48:	0402                	c.slli64	s0
    4f4a:	0320                	addi	s0,sp,392
    4f4c:	0900                	addi	s0,sp,144
    4f4e:	0008                	0x8
    4f50:	0001                	nop
    4f52:	0402                	c.slli64	s0
    4f54:	0320                	addi	s0,sp,392
    4f56:	0900                	addi	s0,sp,144
    4f58:	0008                	0x8
    4f5a:	0001                	nop
    4f5c:	0402                	c.slli64	s0
    4f5e:	0320                	addi	s0,sp,392
    4f60:	0900                	addi	s0,sp,144
    4f62:	0010                	0x10
    4f64:	0001                	nop
    4f66:	0402                	c.slli64	s0
    4f68:	0320                	addi	s0,sp,392
    4f6a:	0900                	addi	s0,sp,144
    4f6c:	0004                	0x4
    4f6e:	0001                	nop
    4f70:	0402                	c.slli64	s0
    4f72:	0329                	addi	t1,t1,10
    4f74:	0900                	addi	s0,sp,144
    4f76:	0000                	unimp
    4f78:	0001                	nop
    4f7a:	0402                	c.slli64	s0
    4f7c:	0318                	addi	a4,sp,384
    4f7e:	0900                	addi	s0,sp,144
    4f80:	000c                	0xc
    4f82:	0001                	nop
    4f84:	0402                	c.slli64	s0
    4f86:	0318                	addi	a4,sp,384
    4f88:	0900                	addi	s0,sp,144
    4f8a:	0000                	unimp
    4f8c:	0001                	nop
    4f8e:	0402                	c.slli64	s0
    4f90:	0318                	addi	a4,sp,384
    4f92:	0900                	addi	s0,sp,144
    4f94:	0000                	unimp
    4f96:	0001                	nop
    4f98:	0402                	c.slli64	s0
    4f9a:	0318                	addi	a4,sp,384
    4f9c:	0900                	addi	s0,sp,144
    4f9e:	0000                	unimp
    4fa0:	0001                	nop
    4fa2:	0402                	c.slli64	s0
    4fa4:	0318                	addi	a4,sp,384
    4fa6:	0900                	addi	s0,sp,144
    4fa8:	0008                	0x8
    4faa:	0001                	nop
    4fac:	0402                	c.slli64	s0
    4fae:	0318                	addi	a4,sp,384
    4fb0:	0900                	addi	s0,sp,144
    4fb2:	0000                	unimp
    4fb4:	0001                	nop
    4fb6:	0402                	c.slli64	s0
    4fb8:	0321                	addi	t1,t1,8
    4fba:	0900                	addi	s0,sp,144
    4fbc:	0008                	0x8
    4fbe:	0001                	nop
    4fc0:	0402                	c.slli64	s0
    4fc2:	0321                	addi	t1,t1,8
    4fc4:	0900                	addi	s0,sp,144
    4fc6:	0008                	0x8
    4fc8:	0001                	nop
    4fca:	0402                	c.slli64	s0
    4fcc:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    4fd0:	0008                	0x8
    4fd2:	0601                	addi	a2,a2,0
    4fd4:	08090003          	lb	zero,128(s2)
    4fd8:	0100                	addi	s0,sp,128
    4fda:	0200                	addi	s0,sp,256
    4fdc:	0204                	addi	s1,sp,256
    4fde:	0306                	slli	t1,t1,0x1
    4fe0:	0901                	addi	s2,s2,0
    4fe2:	0030                	addi	a2,sp,8
    4fe4:	0001                	nop
    4fe6:	0402                	c.slli64	s0
    4fe8:	0302                	c.slli64	t1
    4fea:	0900                	addi	s0,sp,144
    4fec:	0000                	unimp
    4fee:	0001                	nop
    4ff0:	0402                	c.slli64	s0
    4ff2:	0302                	c.slli64	t1
    4ff4:	0900                	addi	s0,sp,144
    4ff6:	0000                	unimp
    4ff8:	0001                	nop
    4ffa:	0402                	c.slli64	s0
    4ffc:	0302                	c.slli64	t1
    4ffe:	0900                	addi	s0,sp,144
    5000:	0000                	unimp
    5002:	0001                	nop
    5004:	0402                	c.slli64	s0
    5006:	0302                	c.slli64	t1
    5008:	0900                	addi	s0,sp,144
    500a:	0000                	unimp
    500c:	0001                	nop
    500e:	0402                	c.slli64	s0
    5010:	0302                	c.slli64	t1
    5012:	0900                	addi	s0,sp,144
    5014:	0000                	unimp
    5016:	0001                	nop
    5018:	0402                	c.slli64	s0
    501a:	0302                	c.slli64	t1
    501c:	0900                	addi	s0,sp,144
    501e:	0000                	unimp
    5020:	0001                	nop
    5022:	0402                	c.slli64	s0
    5024:	0302                	c.slli64	t1
    5026:	0900                	addi	s0,sp,144
    5028:	0000                	unimp
    502a:	0001                	nop
    502c:	0402                	c.slli64	s0
    502e:	0302                	c.slli64	t1
    5030:	0900                	addi	s0,sp,144
    5032:	0000                	unimp
    5034:	0001                	nop
    5036:	0402                	c.slli64	s0
    5038:	0302                	c.slli64	t1
    503a:	0900                	addi	s0,sp,144
    503c:	0000                	unimp
    503e:	0001                	nop
    5040:	0402                	c.slli64	s0
    5042:	0003060b          	0x3060b
    5046:	0409                	addi	s0,s0,2
    5048:	0100                	addi	s0,sp,128
    504a:	0200                	addi	s0,sp,256
    504c:	0c04                	addi	s1,sp,528
    504e:	04090003          	lb	zero,64(s2)
    5052:	0100                	addi	s0,sp,128
    5054:	0200                	addi	s0,sp,256
    5056:	0e04                	addi	s1,sp,784
    5058:	0306                	slli	t1,t1,0x1
    505a:	0900                	addi	s0,sp,144
    505c:	0004                	0x4
    505e:	0001                	nop
    5060:	0402                	c.slli64	s0
    5062:	030e                	slli	t1,t1,0x3
    5064:	0900                	addi	s0,sp,144
    5066:	0000                	unimp
    5068:	0001                	nop
    506a:	0402                	c.slli64	s0
    506c:	030e                	slli	t1,t1,0x3
    506e:	0900                	addi	s0,sp,144
    5070:	0008                	0x8
    5072:	0001                	nop
    5074:	0402                	c.slli64	s0
    5076:	09000313          	li	t1,144
    507a:	000c                	0xc
    507c:	0001                	nop
    507e:	0402                	c.slli64	s0
    5080:	09000313          	li	t1,144
    5084:	0000                	unimp
    5086:	0001                	nop
    5088:	0402                	c.slli64	s0
    508a:	09000313          	li	t1,144
    508e:	0000                	unimp
    5090:	0001                	nop
    5092:	0402                	c.slli64	s0
    5094:	09000313          	li	t1,144
    5098:	000c                	0xc
    509a:	0001                	nop
    509c:	0402                	c.slli64	s0
    509e:	09000313          	li	t1,144
    50a2:	0014                	0x14
    50a4:	0001                	nop
    50a6:	0402                	c.slli64	s0
    50a8:	09000313          	li	t1,144
    50ac:	0000                	unimp
    50ae:	0001                	nop
    50b0:	0402                	c.slli64	s0
    50b2:	09000313          	li	t1,144
    50b6:	0000                	unimp
    50b8:	0001                	nop
    50ba:	0402                	c.slli64	s0
    50bc:	09000313          	li	t1,144
    50c0:	0000                	unimp
    50c2:	0001                	nop
    50c4:	0402                	c.slli64	s0
    50c6:	09000313          	li	t1,144
    50ca:	0000                	unimp
    50cc:	0001                	nop
    50ce:	0402                	c.slli64	s0
    50d0:	09000313          	li	t1,144
    50d4:	0000                	unimp
    50d6:	0001                	nop
    50d8:	0402                	c.slli64	s0
    50da:	09000313          	li	t1,144
    50de:	0004                	0x4
    50e0:	0001                	nop
    50e2:	0402                	c.slli64	s0
    50e4:	09000313          	li	t1,144
    50e8:	0000                	unimp
    50ea:	0001                	nop
    50ec:	0402                	c.slli64	s0
    50ee:	09000313          	li	t1,144
    50f2:	000c                	0xc
    50f4:	0001                	nop
    50f6:	0402                	c.slli64	s0
    50f8:	09000313          	li	t1,144
    50fc:	000c                	0xc
    50fe:	0001                	nop
    5100:	0402                	c.slli64	s0
    5102:	09000313          	li	t1,144
    5106:	0018                	0x18
    5108:	0001                	nop
    510a:	0402                	c.slli64	s0
    510c:	0316                	slli	t1,t1,0x5
    510e:	0900                	addi	s0,sp,144
    5110:	0008                	0x8
    5112:	0001                	nop
    5114:	0402                	c.slli64	s0
    5116:	0316                	slli	t1,t1,0x5
    5118:	0900                	addi	s0,sp,144
    511a:	0008                	0x8
    511c:	0001                	nop
    511e:	0402                	c.slli64	s0
    5120:	0318                	addi	a4,sp,384
    5122:	0900                	addi	s0,sp,144
    5124:	0004                	0x4
    5126:	0001                	nop
    5128:	0402                	c.slli64	s0
    512a:	031a                	slli	t1,t1,0x6
    512c:	0900                	addi	s0,sp,144
    512e:	0004                	0x4
    5130:	0001                	nop
    5132:	0402                	c.slli64	s0
    5134:	031c                	addi	a5,sp,384
    5136:	0900                	addi	s0,sp,144
    5138:	0008                	0x8
    513a:	0001                	nop
    513c:	0402                	c.slli64	s0
    513e:	031c                	addi	a5,sp,384
    5140:	0900                	addi	s0,sp,144
    5142:	0004                	0x4
    5144:	0001                	nop
    5146:	0402                	c.slli64	s0
    5148:	031c                	addi	a5,sp,384
    514a:	0900                	addi	s0,sp,144
    514c:	0000                	unimp
    514e:	0001                	nop
    5150:	0402                	c.slli64	s0
    5152:	031c                	addi	a5,sp,384
    5154:	0900                	addi	s0,sp,144
    5156:	0014                	0x14
    5158:	0001                	nop
    515a:	0402                	c.slli64	s0
    515c:	031c                	addi	a5,sp,384
    515e:	0900                	addi	s0,sp,144
    5160:	000c                	0xc
    5162:	0001                	nop
    5164:	0402                	c.slli64	s0
    5166:	031c                	addi	a5,sp,384
    5168:	0900                	addi	s0,sp,144
    516a:	001c                	0x1c
    516c:	0001                	nop
    516e:	0402                	c.slli64	s0
    5170:	031d                	addi	t1,t1,7
    5172:	0900                	addi	s0,sp,144
    5174:	0008                	0x8
    5176:	0001                	nop
    5178:	0402                	c.slli64	s0
    517a:	031d                	addi	t1,t1,7
    517c:	0900                	addi	s0,sp,144
    517e:	0008                	0x8
    5180:	0001                	nop
    5182:	0402                	c.slli64	s0
    5184:	031f 0900 0004      	0x40900031f
    518a:	0001                	nop
    518c:	0402                	c.slli64	s0
    518e:	0321                	addi	t1,t1,8
    5190:	0900                	addi	s0,sp,144
    5192:	0004                	0x4
    5194:	0001                	nop
    5196:	0402                	c.slli64	s0
    5198:	09000323          	sb	a6,134(zero) # 86 <__do_global_dtors_aux+0x2a>
    519c:	0008                	0x8
    519e:	0001                	nop
    51a0:	0402                	c.slli64	s0
    51a2:	09000323          	sb	a6,134(zero) # 86 <__do_global_dtors_aux+0x2a>
    51a6:	0010                	0x10
    51a8:	0001                	nop
    51aa:	0402                	c.slli64	s0
    51ac:	09000323          	sb	a6,134(zero) # 86 <__do_global_dtors_aux+0x2a>
    51b0:	0000                	unimp
    51b2:	0001                	nop
    51b4:	0402                	c.slli64	s0
    51b6:	09000323          	sb	a6,134(zero) # 86 <__do_global_dtors_aux+0x2a>
    51ba:	0000                	unimp
    51bc:	0001                	nop
    51be:	0402                	c.slli64	s0
    51c0:	09000323          	sb	a6,134(zero) # 86 <__do_global_dtors_aux+0x2a>
    51c4:	0000                	unimp
    51c6:	0001                	nop
    51c8:	0402                	c.slli64	s0
    51ca:	09000323          	sb	a6,134(zero) # 86 <__do_global_dtors_aux+0x2a>
    51ce:	0000                	unimp
    51d0:	0001                	nop
    51d2:	0402                	c.slli64	s0
    51d4:	09000323          	sb	a6,134(zero) # 86 <__do_global_dtors_aux+0x2a>
    51d8:	0000                	unimp
    51da:	0001                	nop
    51dc:	0402                	c.slli64	s0
    51de:	09000323          	sb	a6,134(zero) # 86 <__do_global_dtors_aux+0x2a>
    51e2:	0000                	unimp
    51e4:	0001                	nop
    51e6:	0402                	c.slli64	s0
    51e8:	09000323          	sb	a6,134(zero) # 86 <__do_global_dtors_aux+0x2a>
    51ec:	0000                	unimp
    51ee:	0001                	nop
    51f0:	0402                	c.slli64	s0
    51f2:	09000323          	sb	a6,134(zero) # 86 <__do_global_dtors_aux+0x2a>
    51f6:	0010                	0x10
    51f8:	0001                	nop
    51fa:	0402                	c.slli64	s0
    51fc:	09000323          	sb	a6,134(zero) # 86 <__do_global_dtors_aux+0x2a>
    5200:	0000                	unimp
    5202:	0001                	nop
    5204:	0402                	c.slli64	s0
    5206:	09000323          	sb	a6,134(zero) # 86 <__do_global_dtors_aux+0x2a>
    520a:	0004                	0x4
    520c:	0001                	nop
    520e:	0402                	c.slli64	s0
    5210:	09000323          	sb	a6,134(zero) # 86 <__do_global_dtors_aux+0x2a>
    5214:	0000                	unimp
    5216:	0001                	nop
    5218:	0402                	c.slli64	s0
    521a:	09000323          	sb	a6,134(zero) # 86 <__do_global_dtors_aux+0x2a>
    521e:	0004                	0x4
    5220:	0001                	nop
    5222:	0402                	c.slli64	s0
    5224:	09000323          	sb	a6,134(zero) # 86 <__do_global_dtors_aux+0x2a>
    5228:	0004                	0x4
    522a:	0001                	nop
    522c:	0402                	c.slli64	s0
    522e:	09000323          	sb	a6,134(zero) # 86 <__do_global_dtors_aux+0x2a>
    5232:	0004                	0x4
    5234:	0001                	nop
    5236:	0402                	c.slli64	s0
    5238:	09000323          	sb	a6,134(zero) # 86 <__do_global_dtors_aux+0x2a>
    523c:	0004                	0x4
    523e:	0001                	nop
    5240:	0402                	c.slli64	s0
    5242:	09000323          	sb	a6,134(zero) # 86 <__do_global_dtors_aux+0x2a>
    5246:	0000                	unimp
    5248:	0001                	nop
    524a:	0402                	c.slli64	s0
    524c:	09000323          	sb	a6,134(zero) # 86 <__do_global_dtors_aux+0x2a>
    5250:	0008                	0x8
    5252:	0001                	nop
    5254:	0402                	c.slli64	s0
    5256:	09000323          	sb	a6,134(zero) # 86 <__do_global_dtors_aux+0x2a>
    525a:	0000                	unimp
    525c:	0001                	nop
    525e:	0402                	c.slli64	s0
    5260:	09000323          	sb	a6,134(zero) # 86 <__do_global_dtors_aux+0x2a>
    5264:	0004                	0x4
    5266:	0001                	nop
    5268:	0402                	c.slli64	s0
    526a:	09000323          	sb	a6,134(zero) # 86 <__do_global_dtors_aux+0x2a>
    526e:	0004                	0x4
    5270:	0001                	nop
    5272:	0402                	c.slli64	s0
    5274:	09000323          	sb	a6,134(zero) # 86 <__do_global_dtors_aux+0x2a>
    5278:	0000                	unimp
    527a:	0001                	nop
    527c:	0402                	c.slli64	s0
    527e:	09000323          	sb	a6,134(zero) # 86 <__do_global_dtors_aux+0x2a>
    5282:	0008                	0x8
    5284:	0001                	nop
    5286:	0402                	c.slli64	s0
    5288:	09000323          	sb	a6,134(zero) # 86 <__do_global_dtors_aux+0x2a>
    528c:	0000                	unimp
    528e:	0001                	nop
    5290:	0402                	c.slli64	s0
    5292:	09000323          	sb	a6,134(zero) # 86 <__do_global_dtors_aux+0x2a>
    5296:	0004                	0x4
    5298:	0001                	nop
    529a:	0402                	c.slli64	s0
    529c:	09000323          	sb	a6,134(zero) # 86 <__do_global_dtors_aux+0x2a>
    52a0:	0004                	0x4
    52a2:	0001                	nop
    52a4:	0402                	c.slli64	s0
    52a6:	09000323          	sb	a6,134(zero) # 86 <__do_global_dtors_aux+0x2a>
    52aa:	0000                	unimp
    52ac:	0001                	nop
    52ae:	0402                	c.slli64	s0
    52b0:	09000323          	sb	a6,134(zero) # 86 <__do_global_dtors_aux+0x2a>
    52b4:	0008                	0x8
    52b6:	0001                	nop
    52b8:	0402                	c.slli64	s0
    52ba:	09000323          	sb	a6,134(zero) # 86 <__do_global_dtors_aux+0x2a>
    52be:	0000                	unimp
    52c0:	0001                	nop
    52c2:	0402                	c.slli64	s0
    52c4:	09000323          	sb	a6,134(zero) # 86 <__do_global_dtors_aux+0x2a>
    52c8:	0004                	0x4
    52ca:	0001                	nop
    52cc:	0402                	c.slli64	s0
    52ce:	09000323          	sb	a6,134(zero) # 86 <__do_global_dtors_aux+0x2a>
    52d2:	0010                	0x10
    52d4:	0001                	nop
    52d6:	0402                	c.slli64	s0
    52d8:	09000323          	sb	a6,134(zero) # 86 <__do_global_dtors_aux+0x2a>
    52dc:	0000                	unimp
    52de:	0001                	nop
    52e0:	0402                	c.slli64	s0
    52e2:	09000323          	sb	a6,134(zero) # 86 <__do_global_dtors_aux+0x2a>
    52e6:	0000                	unimp
    52e8:	0001                	nop
    52ea:	0402                	c.slli64	s0
    52ec:	0324                	addi	s1,sp,392
    52ee:	0900                	addi	s0,sp,144
    52f0:	0004                	0x4
    52f2:	0001                	nop
    52f4:	0402                	c.slli64	s0
    52f6:	0326                	slli	t1,t1,0x9
    52f8:	0900                	addi	s0,sp,144
    52fa:	0004                	0x4
    52fc:	0001                	nop
    52fe:	0402                	c.slli64	s0
    5300:	0326                	slli	t1,t1,0x9
    5302:	0900                	addi	s0,sp,144
    5304:	001c                	0x1c
    5306:	0001                	nop
    5308:	0402                	c.slli64	s0
    530a:	0326                	slli	t1,t1,0x9
    530c:	0900                	addi	s0,sp,144
    530e:	0004                	0x4
    5310:	0001                	nop
    5312:	0402                	c.slli64	s0
    5314:	0326                	slli	t1,t1,0x9
    5316:	0900                	addi	s0,sp,144
    5318:	0000                	unimp
    531a:	0001                	nop
    531c:	0402                	c.slli64	s0
    531e:	0326                	slli	t1,t1,0x9
    5320:	0900                	addi	s0,sp,144
    5322:	0000                	unimp
    5324:	0001                	nop
    5326:	0402                	c.slli64	s0
    5328:	0628                	addi	a0,sp,776
    532a:	04090003          	lb	zero,64(s2)
    532e:	0100                	addi	s0,sp,128
    5330:	0200                	addi	s0,sp,256
    5332:	2904                	fld	fs1,16(a0)
    5334:	08090003          	lb	zero,128(s2)
    5338:	0100                	addi	s0,sp,128
    533a:	0200                	addi	s0,sp,256
    533c:	2b04                	fld	fs1,16(a4)
    533e:	0306                	slli	t1,t1,0x1
    5340:	0900                	addi	s0,sp,144
    5342:	0004                	0x4
    5344:	0001                	nop
    5346:	0402                	c.slli64	s0
    5348:	0900032b          	0x900032b
    534c:	0014                	0x14
    534e:	0001                	nop
    5350:	0402                	c.slli64	s0
    5352:	0900032b          	0x900032b
    5356:	0000                	unimp
    5358:	0001                	nop
    535a:	0402                	c.slli64	s0
    535c:	0900032b          	0x900032b
    5360:	0000                	unimp
    5362:	0001                	nop
    5364:	0402                	c.slli64	s0
    5366:	0900032b          	0x900032b
    536a:	0000                	unimp
    536c:	0001                	nop
    536e:	0402                	c.slli64	s0
    5370:	0900032b          	0x900032b
    5374:	0000                	unimp
    5376:	0001                	nop
    5378:	0402                	c.slli64	s0
    537a:	0900032b          	0x900032b
    537e:	0000                	unimp
    5380:	0001                	nop
    5382:	0402                	c.slli64	s0
    5384:	0900032b          	0x900032b
    5388:	0000                	unimp
    538a:	0001                	nop
    538c:	0402                	c.slli64	s0
    538e:	062e                	slli	a2,a2,0xb
    5390:	04090003          	lb	zero,64(s2)
    5394:	0100                	addi	s0,sp,128
    5396:	0200                	addi	s0,sp,256
    5398:	2f04                	fld	fs1,24(a4)
    539a:	04090003          	lb	zero,64(s2)
    539e:	0100                	addi	s0,sp,128
    53a0:	0200                	addi	s0,sp,256
    53a2:	3104                	fld	fs1,32(a0)
    53a4:	04090003          	lb	zero,64(s2)
    53a8:	0100                	addi	s0,sp,128
    53aa:	0200                	addi	s0,sp,256
    53ac:	3404                	fld	fs1,40(s0)
    53ae:	04090003          	lb	zero,64(s2)
    53b2:	0100                	addi	s0,sp,128
    53b4:	0200                	addi	s0,sp,256
    53b6:	3504                	fld	fs1,40(a0)
    53b8:	04090003          	lb	zero,64(s2)
    53bc:	0100                	addi	s0,sp,128
    53be:	0200                	addi	s0,sp,256
    53c0:	3704                	fld	fs1,40(a4)
    53c2:	0306                	slli	t1,t1,0x1
    53c4:	0900                	addi	s0,sp,144
    53c6:	0004                	0x4
    53c8:	0001                	nop
    53ca:	0402                	c.slli64	s0
    53cc:	09000337          	lui	t1,0x9000
    53d0:	0010                	0x10
    53d2:	0001                	nop
    53d4:	0402                	c.slli64	s0
    53d6:	09000337          	lui	t1,0x9000
    53da:	0000                	unimp
    53dc:	0001                	nop
    53de:	0402                	c.slli64	s0
    53e0:	09000337          	lui	t1,0x9000
    53e4:	0000                	unimp
    53e6:	0001                	nop
    53e8:	0402                	c.slli64	s0
    53ea:	09000337          	lui	t1,0x9000
    53ee:	0000                	unimp
    53f0:	0001                	nop
    53f2:	0402                	c.slli64	s0
    53f4:	09000337          	lui	t1,0x9000
    53f8:	0004                	0x4
    53fa:	0001                	nop
    53fc:	0402                	c.slli64	s0
    53fe:	0339                	addi	t1,t1,14
    5400:	0900                	addi	s0,sp,144
    5402:	0000                	unimp
    5404:	0001                	nop
    5406:	0402                	c.slli64	s0
    5408:	0339                	addi	t1,t1,14
    540a:	0900                	addi	s0,sp,144
    540c:	0000                	unimp
    540e:	0001                	nop
    5410:	0402                	c.slli64	s0
    5412:	0339                	addi	t1,t1,14
    5414:	0900                	addi	s0,sp,144
    5416:	0000                	unimp
    5418:	0001                	nop
    541a:	0402                	c.slli64	s0
    541c:	0339                	addi	t1,t1,14
    541e:	0900                	addi	s0,sp,144
    5420:	0000                	unimp
    5422:	0001                	nop
    5424:	0402                	c.slli64	s0
    5426:	0339                	addi	t1,t1,14
    5428:	0900                	addi	s0,sp,144
    542a:	0004                	0x4
    542c:	0001                	nop
    542e:	0402                	c.slli64	s0
    5430:	0339                	addi	t1,t1,14
    5432:	0900                	addi	s0,sp,144
    5434:	000c                	0xc
    5436:	0001                	nop
    5438:	0402                	c.slli64	s0
    543a:	0339                	addi	t1,t1,14
    543c:	0900                	addi	s0,sp,144
    543e:	0000                	unimp
    5440:	0001                	nop
    5442:	0402                	c.slli64	s0
    5444:	0339                	addi	t1,t1,14
    5446:	0900                	addi	s0,sp,144
    5448:	0000                	unimp
    544a:	0001                	nop
    544c:	0402                	c.slli64	s0
    544e:	0900033b          	0x900033b
    5452:	0008                	0x8
    5454:	0001                	nop
    5456:	0402                	c.slli64	s0
    5458:	0900033b          	0x900033b
    545c:	0000                	unimp
    545e:	0001                	nop
    5460:	0402                	c.slli64	s0
    5462:	0900033b          	0x900033b
    5466:	0000                	unimp
    5468:	0001                	nop
    546a:	0402                	c.slli64	s0
    546c:	0900033b          	0x900033b
    5470:	0000                	unimp
    5472:	0001                	nop
    5474:	0402                	c.slli64	s0
    5476:	0900033b          	0x900033b
    547a:	0000                	unimp
    547c:	0001                	nop
    547e:	0402                	c.slli64	s0
    5480:	0900033b          	0x900033b
    5484:	0000                	unimp
    5486:	0001                	nop
    5488:	0402                	c.slli64	s0
    548a:	0900033b          	0x900033b
    548e:	0000                	unimp
    5490:	0001                	nop
    5492:	0402                	c.slli64	s0
    5494:	0900033b          	0x900033b
    5498:	000c                	0xc
    549a:	0001                	nop
    549c:	0402                	c.slli64	s0
    549e:	0900033b          	0x900033b
    54a2:	0014                	0x14
    54a4:	0001                	nop
    54a6:	0402                	c.slli64	s0
    54a8:	0900033b          	0x900033b
    54ac:	0020                	addi	s0,sp,8
    54ae:	0001                	nop
    54b0:	0402                	c.slli64	s0
    54b2:	033d                	addi	t1,t1,15
    54b4:	0900                	addi	s0,sp,144
    54b6:	0008                	0x8
    54b8:	0001                	nop
    54ba:	0402                	c.slli64	s0
    54bc:	033d                	addi	t1,t1,15
    54be:	0900                	addi	s0,sp,144
    54c0:	0008                	0x8
    54c2:	0001                	nop
    54c4:	0402                	c.slli64	s0
    54c6:	0900033f 00010004 	0x100040900033f
    54ce:	0402                	c.slli64	s0
    54d0:	0341                	addi	t1,t1,16
    54d2:	0900                	addi	s0,sp,144
    54d4:	0004                	0x4
    54d6:	0001                	nop
    54d8:	0402                	c.slli64	s0
    54da:	09000343          	fmadd.s	ft6,ft0,fa6,ft1,rne
    54de:	0008                	0x8
    54e0:	0001                	nop
    54e2:	0402                	c.slli64	s0
    54e4:	09000343          	fmadd.s	ft6,ft0,fa6,ft1,rne
    54e8:	0004                	0x4
    54ea:	0001                	nop
    54ec:	0402                	c.slli64	s0
    54ee:	09000343          	fmadd.s	ft6,ft0,fa6,ft1,rne
    54f2:	0000                	unimp
    54f4:	0001                	nop
    54f6:	0402                	c.slli64	s0
    54f8:	09000343          	fmadd.s	ft6,ft0,fa6,ft1,rne
    54fc:	000c                	0xc
    54fe:	0001                	nop
    5500:	0402                	c.slli64	s0
    5502:	09000343          	fmadd.s	ft6,ft0,fa6,ft1,rne
    5506:	0014                	0x14
    5508:	0001                	nop
    550a:	0402                	c.slli64	s0
    550c:	09000343          	fmadd.s	ft6,ft0,fa6,ft1,rne
    5510:	0020                	addi	s0,sp,8
    5512:	0001                	nop
    5514:	0402                	c.slli64	s0
    5516:	0344                	addi	s1,sp,388
    5518:	0900                	addi	s0,sp,144
    551a:	0008                	0x8
    551c:	0001                	nop
    551e:	0402                	c.slli64	s0
    5520:	0344                	addi	s1,sp,388
    5522:	0900                	addi	s0,sp,144
    5524:	0008                	0x8
    5526:	0001                	nop
    5528:	0402                	c.slli64	s0
    552a:	0346                	slli	t1,t1,0x11
    552c:	0900                	addi	s0,sp,144
    552e:	0004                	0x4
    5530:	0001                	nop
    5532:	0402                	c.slli64	s0
    5534:	0348                	addi	a0,sp,388
    5536:	0900                	addi	s0,sp,144
    5538:	0004                	0x4
    553a:	0001                	nop
    553c:	0402                	c.slli64	s0
    553e:	034a                	slli	t1,t1,0x12
    5540:	0900                	addi	s0,sp,144
    5542:	0008                	0x8
    5544:	0001                	nop
    5546:	0402                	c.slli64	s0
    5548:	034a                	slli	t1,t1,0x12
    554a:	0900                	addi	s0,sp,144
    554c:	0014                	0x14
    554e:	0001                	nop
    5550:	0402                	c.slli64	s0
    5552:	034a                	slli	t1,t1,0x12
    5554:	0900                	addi	s0,sp,144
    5556:	0000                	unimp
    5558:	0001                	nop
    555a:	0402                	c.slli64	s0
    555c:	034a                	slli	t1,t1,0x12
    555e:	0900                	addi	s0,sp,144
    5560:	0000                	unimp
    5562:	0001                	nop
    5564:	0402                	c.slli64	s0
    5566:	034a                	slli	t1,t1,0x12
    5568:	0900                	addi	s0,sp,144
    556a:	0000                	unimp
    556c:	0001                	nop
    556e:	0402                	c.slli64	s0
    5570:	034a                	slli	t1,t1,0x12
    5572:	0900                	addi	s0,sp,144
    5574:	0000                	unimp
    5576:	0001                	nop
    5578:	0402                	c.slli64	s0
    557a:	034a                	slli	t1,t1,0x12
    557c:	0900                	addi	s0,sp,144
    557e:	0000                	unimp
    5580:	0001                	nop
    5582:	0402                	c.slli64	s0
    5584:	034a                	slli	t1,t1,0x12
    5586:	0900                	addi	s0,sp,144
    5588:	0000                	unimp
    558a:	0001                	nop
    558c:	0402                	c.slli64	s0
    558e:	034a                	slli	t1,t1,0x12
    5590:	0900                	addi	s0,sp,144
    5592:	0000                	unimp
    5594:	0001                	nop
    5596:	0402                	c.slli64	s0
    5598:	034a                	slli	t1,t1,0x12
    559a:	0900                	addi	s0,sp,144
    559c:	0004                	0x4
    559e:	0001                	nop
    55a0:	0402                	c.slli64	s0
    55a2:	034a                	slli	t1,t1,0x12
    55a4:	0900                	addi	s0,sp,144
    55a6:	0000                	unimp
    55a8:	0001                	nop
    55aa:	0402                	c.slli64	s0
    55ac:	034a                	slli	t1,t1,0x12
    55ae:	0900                	addi	s0,sp,144
    55b0:	0000                	unimp
    55b2:	0001                	nop
    55b4:	0402                	c.slli64	s0
    55b6:	034a                	slli	t1,t1,0x12
    55b8:	0900                	addi	s0,sp,144
    55ba:	0000                	unimp
    55bc:	0001                	nop
    55be:	0402                	c.slli64	s0
    55c0:	034a                	slli	t1,t1,0x12
    55c2:	0900                	addi	s0,sp,144
    55c4:	0004                	0x4
    55c6:	0001                	nop
    55c8:	0402                	c.slli64	s0
    55ca:	034a                	slli	t1,t1,0x12
    55cc:	0900                	addi	s0,sp,144
    55ce:	0004                	0x4
    55d0:	0001                	nop
    55d2:	0402                	c.slli64	s0
    55d4:	034a                	slli	t1,t1,0x12
    55d6:	0900                	addi	s0,sp,144
    55d8:	0004                	0x4
    55da:	0001                	nop
    55dc:	0402                	c.slli64	s0
    55de:	034a                	slli	t1,t1,0x12
    55e0:	0900                	addi	s0,sp,144
    55e2:	0004                	0x4
    55e4:	0001                	nop
    55e6:	0402                	c.slli64	s0
    55e8:	034a                	slli	t1,t1,0x12
    55ea:	0900                	addi	s0,sp,144
    55ec:	0000                	unimp
    55ee:	0001                	nop
    55f0:	0402                	c.slli64	s0
    55f2:	034a                	slli	t1,t1,0x12
    55f4:	0900                	addi	s0,sp,144
    55f6:	0008                	0x8
    55f8:	0001                	nop
    55fa:	0402                	c.slli64	s0
    55fc:	034a                	slli	t1,t1,0x12
    55fe:	0900                	addi	s0,sp,144
    5600:	0000                	unimp
    5602:	0001                	nop
    5604:	0402                	c.slli64	s0
    5606:	034a                	slli	t1,t1,0x12
    5608:	0900                	addi	s0,sp,144
    560a:	0004                	0x4
    560c:	0001                	nop
    560e:	0402                	c.slli64	s0
    5610:	034a                	slli	t1,t1,0x12
    5612:	0900                	addi	s0,sp,144
    5614:	0004                	0x4
    5616:	0001                	nop
    5618:	0402                	c.slli64	s0
    561a:	034a                	slli	t1,t1,0x12
    561c:	0900                	addi	s0,sp,144
    561e:	0000                	unimp
    5620:	0001                	nop
    5622:	0402                	c.slli64	s0
    5624:	034a                	slli	t1,t1,0x12
    5626:	0900                	addi	s0,sp,144
    5628:	0008                	0x8
    562a:	0001                	nop
    562c:	0402                	c.slli64	s0
    562e:	034a                	slli	t1,t1,0x12
    5630:	0900                	addi	s0,sp,144
    5632:	0000                	unimp
    5634:	0001                	nop
    5636:	0402                	c.slli64	s0
    5638:	034a                	slli	t1,t1,0x12
    563a:	0900                	addi	s0,sp,144
    563c:	0004                	0x4
    563e:	0001                	nop
    5640:	0402                	c.slli64	s0
    5642:	034a                	slli	t1,t1,0x12
    5644:	0900                	addi	s0,sp,144
    5646:	0004                	0x4
    5648:	0001                	nop
    564a:	0402                	c.slli64	s0
    564c:	034a                	slli	t1,t1,0x12
    564e:	0900                	addi	s0,sp,144
    5650:	0000                	unimp
    5652:	0001                	nop
    5654:	0402                	c.slli64	s0
    5656:	034a                	slli	t1,t1,0x12
    5658:	0900                	addi	s0,sp,144
    565a:	0008                	0x8
    565c:	0001                	nop
    565e:	0402                	c.slli64	s0
    5660:	034a                	slli	t1,t1,0x12
    5662:	0900                	addi	s0,sp,144
    5664:	0000                	unimp
    5666:	0001                	nop
    5668:	0402                	c.slli64	s0
    566a:	034a                	slli	t1,t1,0x12
    566c:	0900                	addi	s0,sp,144
    566e:	0004                	0x4
    5670:	0001                	nop
    5672:	0402                	c.slli64	s0
    5674:	034a                	slli	t1,t1,0x12
    5676:	0900                	addi	s0,sp,144
    5678:	0010                	0x10
    567a:	0001                	nop
    567c:	0402                	c.slli64	s0
    567e:	034a                	slli	t1,t1,0x12
    5680:	0900                	addi	s0,sp,144
    5682:	0000                	unimp
    5684:	0001                	nop
    5686:	0402                	c.slli64	s0
    5688:	034a                	slli	t1,t1,0x12
    568a:	0900                	addi	s0,sp,144
    568c:	0000                	unimp
    568e:	0001                	nop
    5690:	0402                	c.slli64	s0
    5692:	0900034b          	fnmsub.s	ft6,ft0,fa6,ft1,rne
    5696:	0004                	0x4
    5698:	0001                	nop
    569a:	0402                	c.slli64	s0
    569c:	034d                	addi	t1,t1,19
    569e:	0900                	addi	s0,sp,144
    56a0:	0008                	0x8
    56a2:	0001                	nop
    56a4:	0402                	c.slli64	s0
    56a6:	034d                	addi	t1,t1,19
    56a8:	0900                	addi	s0,sp,144
    56aa:	001c                	0x1c
    56ac:	0001                	nop
    56ae:	0402                	c.slli64	s0
    56b0:	034d                	addi	t1,t1,19
    56b2:	0900                	addi	s0,sp,144
    56b4:	0004                	0x4
    56b6:	0001                	nop
    56b8:	0402                	c.slli64	s0
    56ba:	034d                	addi	t1,t1,19
    56bc:	0900                	addi	s0,sp,144
    56be:	0000                	unimp
    56c0:	0001                	nop
    56c2:	0402                	c.slli64	s0
    56c4:	034d                	addi	t1,t1,19
    56c6:	0900                	addi	s0,sp,144
    56c8:	0000                	unimp
    56ca:	0001                	nop
    56cc:	0402                	c.slli64	s0
    56ce:	0003064f          	fnmadd.s	fa2,ft6,ft0,ft0,rne
    56d2:	0409                	addi	s0,s0,2
    56d4:	0100                	addi	s0,sp,128
    56d6:	0200                	addi	s0,sp,256
    56d8:	5004                	lw	s1,32(s0)
    56da:	04090003          	lb	zero,64(s2)
    56de:	0100                	addi	s0,sp,128
    56e0:	0200                	addi	s0,sp,256
    56e2:	5204                	lw	s1,32(a2)
    56e4:	0306                	slli	t1,t1,0x1
    56e6:	0900                	addi	s0,sp,144
    56e8:	0008                	0x8
    56ea:	0001                	nop
    56ec:	0402                	c.slli64	s0
    56ee:	0352                	slli	t1,t1,0x14
    56f0:	0900                	addi	s0,sp,144
    56f2:	0008                	0x8
    56f4:	0001                	nop
    56f6:	0402                	c.slli64	s0
    56f8:	0352                	slli	t1,t1,0x14
    56fa:	0900                	addi	s0,sp,144
    56fc:	0000                	unimp
    56fe:	0001                	nop
    5700:	0402                	c.slli64	s0
    5702:	0352                	slli	t1,t1,0x14
    5704:	0900                	addi	s0,sp,144
    5706:	0000                	unimp
    5708:	0001                	nop
    570a:	0402                	c.slli64	s0
    570c:	0352                	slli	t1,t1,0x14
    570e:	0900                	addi	s0,sp,144
    5710:	0000                	unimp
    5712:	0001                	nop
    5714:	0402                	c.slli64	s0
    5716:	0352                	slli	t1,t1,0x14
    5718:	0900                	addi	s0,sp,144
    571a:	0000                	unimp
    571c:	0001                	nop
    571e:	0402                	c.slli64	s0
    5720:	0352                	slli	t1,t1,0x14
    5722:	0900                	addi	s0,sp,144
    5724:	0000                	unimp
    5726:	0001                	nop
    5728:	0402                	c.slli64	s0
    572a:	0352                	slli	t1,t1,0x14
    572c:	0900                	addi	s0,sp,144
    572e:	0000                	unimp
    5730:	0001                	nop
    5732:	0402                	c.slli64	s0
    5734:	0658                	addi	a4,sp,772
    5736:	04090003          	lb	zero,64(s2)
    573a:	0100                	addi	s0,sp,128
    573c:	0200                	addi	s0,sp,256
    573e:	5b04                	lw	s1,48(a4)
    5740:	04090003          	lb	zero,64(s2)
    5744:	0100                	addi	s0,sp,128
    5746:	0200                	addi	s0,sp,256
    5748:	5c04                	lw	s1,56(s0)
    574a:	04090003          	lb	zero,64(s2)
    574e:	0100                	addi	s0,sp,128
    5750:	0200                	addi	s0,sp,256
    5752:	5e04                	lw	s1,56(a2)
    5754:	0306                	slli	t1,t1,0x1
    5756:	0900                	addi	s0,sp,144
    5758:	0004                	0x4
    575a:	0001                	nop
    575c:	0402                	c.slli64	s0
    575e:	035e                	slli	t1,t1,0x17
    5760:	0900                	addi	s0,sp,144
    5762:	0010                	0x10
    5764:	0001                	nop
    5766:	0402                	c.slli64	s0
    5768:	035e                	slli	t1,t1,0x17
    576a:	0900                	addi	s0,sp,144
    576c:	0000                	unimp
    576e:	0001                	nop
    5770:	0402                	c.slli64	s0
    5772:	035e                	slli	t1,t1,0x17
    5774:	0900                	addi	s0,sp,144
    5776:	0000                	unimp
    5778:	0001                	nop
    577a:	0402                	c.slli64	s0
    577c:	035e                	slli	t1,t1,0x17
    577e:	0900                	addi	s0,sp,144
    5780:	0000                	unimp
    5782:	0001                	nop
    5784:	0402                	c.slli64	s0
    5786:	035e                	slli	t1,t1,0x17
    5788:	0900                	addi	s0,sp,144
    578a:	0004                	0x4
    578c:	0001                	nop
    578e:	0402                	c.slli64	s0
    5790:	0360                	addi	s0,sp,396
    5792:	0900                	addi	s0,sp,144
    5794:	0004                	0x4
    5796:	0001                	nop
    5798:	0402                	c.slli64	s0
    579a:	0360                	addi	s0,sp,396
    579c:	0900                	addi	s0,sp,144
    579e:	0000                	unimp
    57a0:	0001                	nop
    57a2:	0402                	c.slli64	s0
    57a4:	0662                	slli	a2,a2,0x18
    57a6:	04090003          	lb	zero,64(s2)
    57aa:	0100                	addi	s0,sp,128
    57ac:	0200                	addi	s0,sp,256
    57ae:	6304                	flw	fs1,0(a4)
    57b0:	0306                	slli	t1,t1,0x1
    57b2:	0900                	addi	s0,sp,144
    57b4:	0004                	0x4
    57b6:	0001                	nop
    57b8:	0402                	c.slli64	s0
    57ba:	0302                	c.slli64	t1
    57bc:	0901                	addi	s2,s2,0
    57be:	0004                	0x4
    57c0:	0001                	nop
    57c2:	0402                	c.slli64	s0
    57c4:	0302                	c.slli64	t1
    57c6:	0900                	addi	s0,sp,144
    57c8:	0004                	0x4
    57ca:	0001                	nop
    57cc:	0402                	c.slli64	s0
    57ce:	0306                	slli	t1,t1,0x1
    57d0:	0900                	addi	s0,sp,144
    57d2:	0004                	0x4
    57d4:	0001                	nop
    57d6:	0402                	c.slli64	s0
    57d8:	0306                	slli	t1,t1,0x1
    57da:	0900                	addi	s0,sp,144
    57dc:	0000                	unimp
    57de:	0001                	nop
    57e0:	0402                	c.slli64	s0
    57e2:	0308                	addi	a0,sp,384
    57e4:	0900                	addi	s0,sp,144
    57e6:	0008                	0x8
    57e8:	0001                	nop
    57ea:	0402                	c.slli64	s0
    57ec:	0308                	addi	a0,sp,384
    57ee:	0900                	addi	s0,sp,144
    57f0:	0000                	unimp
    57f2:	0001                	nop
    57f4:	0402                	c.slli64	s0
    57f6:	0308                	addi	a0,sp,384
    57f8:	0900                	addi	s0,sp,144
    57fa:	0000                	unimp
    57fc:	0001                	nop
    57fe:	0402                	c.slli64	s0
    5800:	0308                	addi	a0,sp,384
    5802:	0900                	addi	s0,sp,144
    5804:	0000                	unimp
    5806:	0001                	nop
    5808:	0402                	c.slli64	s0
    580a:	030a                	slli	t1,t1,0x2
    580c:	0900                	addi	s0,sp,144
    580e:	000c                	0xc
    5810:	0001                	nop
    5812:	0402                	c.slli64	s0
    5814:	030a                	slli	t1,t1,0x2
    5816:	0900                	addi	s0,sp,144
    5818:	0000                	unimp
    581a:	0001                	nop
    581c:	0402                	c.slli64	s0
    581e:	030a                	slli	t1,t1,0x2
    5820:	0900                	addi	s0,sp,144
    5822:	0000                	unimp
    5824:	0001                	nop
    5826:	0402                	c.slli64	s0
    5828:	030a                	slli	t1,t1,0x2
    582a:	0900                	addi	s0,sp,144
    582c:	0004                	0x4
    582e:	0001                	nop
    5830:	0402                	c.slli64	s0
    5832:	030a                	slli	t1,t1,0x2
    5834:	0900                	addi	s0,sp,144
    5836:	0008                	0x8
    5838:	0001                	nop
    583a:	0402                	c.slli64	s0
    583c:	0309                	addi	t1,t1,2
    583e:	0900                	addi	s0,sp,144
    5840:	0004                	0x4
    5842:	0001                	nop
    5844:	0402                	c.slli64	s0
    5846:	0309                	addi	t1,t1,2
    5848:	0900                	addi	s0,sp,144
    584a:	0000                	unimp
    584c:	0001                	nop
    584e:	0402                	c.slli64	s0
    5850:	0318                	addi	a4,sp,384
    5852:	0900                	addi	s0,sp,144
    5854:	000c                	0xc
    5856:	0001                	nop
    5858:	0402                	c.slli64	s0
    585a:	0318                	addi	a4,sp,384
    585c:	0900                	addi	s0,sp,144
    585e:	000c                	0xc
    5860:	0001                	nop
    5862:	0402                	c.slli64	s0
    5864:	031a                	slli	t1,t1,0x6
    5866:	0900                	addi	s0,sp,144
    5868:	0004                	0x4
    586a:	0001                	nop
    586c:	0402                	c.slli64	s0
    586e:	031a                	slli	t1,t1,0x6
    5870:	0900                	addi	s0,sp,144
    5872:	0000                	unimp
    5874:	0001                	nop
    5876:	0402                	c.slli64	s0
    5878:	031a                	slli	t1,t1,0x6
    587a:	0900                	addi	s0,sp,144
    587c:	0000                	unimp
    587e:	0001                	nop
    5880:	0402                	c.slli64	s0
    5882:	031a                	slli	t1,t1,0x6
    5884:	0900                	addi	s0,sp,144
    5886:	0000                	unimp
    5888:	0601                	addi	a2,a2,0
    588a:	08090003          	lb	zero,128(s2)
    588e:	0100                	addi	s0,sp,128
    5890:	0200                	addi	s0,sp,256
    5892:	7704                	flw	fs1,40(a4)
    5894:	0306                	slli	t1,t1,0x1
    5896:	0900                	addi	s0,sp,144
    5898:	0010                	0x10
    589a:	0001                	nop
    589c:	0402                	c.slli64	s0
    589e:	09000377          	0x9000377
    58a2:	0000                	unimp
    58a4:	0001                	nop
    58a6:	0402                	c.slli64	s0
    58a8:	09000377          	0x9000377
    58ac:	0000                	unimp
    58ae:	0001                	nop
    58b0:	0402                	c.slli64	s0
    58b2:	09000377          	0x9000377
    58b6:	0000                	unimp
    58b8:	0001                	nop
    58ba:	0402                	c.slli64	s0
    58bc:	09000377          	0x9000377
    58c0:	0000                	unimp
    58c2:	0001                	nop
    58c4:	0402                	c.slli64	s0
    58c6:	09000377          	0x9000377
    58ca:	0000                	unimp
    58cc:	0001                	nop
    58ce:	0402                	c.slli64	s0
    58d0:	09000377          	0x9000377
    58d4:	0000                	unimp
    58d6:	0001                	nop
    58d8:	0402                	c.slli64	s0
    58da:	09000377          	0x9000377
    58de:	0000                	unimp
    58e0:	0501                	addi	a0,a0,0
    58e2:	0001                	nop
    58e4:	0402                	c.slli64	s0
    58e6:	04030677          	0x4030677
    58ea:	0c09                	addi	s8,s8,2
    58ec:	0100                	addi	s0,sp,128
    58ee:	0305                	addi	t1,t1,1
    58f0:	0200                	addi	s0,sp,256
    58f2:	7704                	flw	fs1,40(a4)
    58f4:	08097c03          	0x8097c03
    58f8:	0100                	addi	s0,sp,128
    58fa:	0200                	addi	s0,sp,256
    58fc:	7704                	flw	fs1,40(a4)
    58fe:	0306                	slli	t1,t1,0x1
    5900:	0900                	addi	s0,sp,144
    5902:	0014                	0x14
    5904:	0001                	nop
    5906:	0402                	c.slli64	s0
    5908:	09000377          	0x9000377
    590c:	0000                	unimp
    590e:	0001                	nop
    5910:	0402                	c.slli64	s0
    5912:	09010377          	0x9010377
    5916:	0000                	unimp
    5918:	0001                	nop
    591a:	0402                	c.slli64	s0
    591c:	09000377          	0x9000377
    5920:	0000                	unimp
    5922:	0001                	nop
    5924:	0402                	c.slli64	s0
    5926:	09000377          	0x9000377
    592a:	0000                	unimp
    592c:	0001                	nop
    592e:	0402                	c.slli64	s0
    5930:	09020377          	0x9020377
    5934:	0000                	unimp
    5936:	0501                	addi	a0,a0,0
    5938:	0001                	nop
    593a:	0402                	c.slli64	s0
    593c:	01030677          	0x1030677
    5940:	0009                	c.nop	2
    5942:	0100                	addi	s0,sp,128
    5944:	0305                	addi	t1,t1,1
    5946:	0200                	addi	s0,sp,256
    5948:	0f04                	addi	s1,sp,912
    594a:	0306                	slli	t1,t1,0x1
    594c:	003c097b          	0x3c097b
    5950:	0001                	nop
    5952:	0402                	c.slli64	s0
    5954:	0900030f          	0x900030f
    5958:	0004                	0x4
    595a:	0001                	nop
    595c:	0402                	c.slli64	s0
    595e:	0900030f          	0x900030f
    5962:	0000                	unimp
    5964:	0001                	nop
    5966:	0402                	c.slli64	s0
    5968:	0900030f          	0x900030f
    596c:	0000                	unimp
    596e:	0001                	nop
    5970:	0402                	c.slli64	s0
    5972:	0608                	addi	a0,sp,768
    5974:	08097e03          	0x8097e03
    5978:	0100                	addi	s0,sp,128
    597a:	0200                	addi	s0,sp,256
    597c:	0804                	addi	s1,sp,16
    597e:	0306                	slli	t1,t1,0x1
    5980:	0902                	c.slli64	s2
    5982:	0004                	0x4
    5984:	0001                	nop
    5986:	0402                	c.slli64	s0
    5988:	0308                	addi	a0,sp,384
    598a:	0900                	addi	s0,sp,144
    598c:	0000                	unimp
    598e:	0001                	nop
    5990:	0402                	c.slli64	s0
    5992:	0308                	addi	a0,sp,384
    5994:	0900                	addi	s0,sp,144
    5996:	0000                	unimp
    5998:	0001                	nop
    599a:	0402                	c.slli64	s0
    599c:	0308                	addi	a0,sp,384
    599e:	0900                	addi	s0,sp,144
    59a0:	0000                	unimp
    59a2:	0001                	nop
    59a4:	0402                	c.slli64	s0
    59a6:	036c                	addi	a1,sp,396
    59a8:	0900                	addi	s0,sp,144
    59aa:	000c                	0xc
    59ac:	0001                	nop
    59ae:	0402                	c.slli64	s0
    59b0:	036c                	addi	a1,sp,396
    59b2:	0901                	addi	s2,s2,0
    59b4:	0000                	unimp
    59b6:	0001                	nop
    59b8:	0402                	c.slli64	s0
    59ba:	036c                	addi	a1,sp,396
    59bc:	0900                	addi	s0,sp,144
    59be:	0000                	unimp
    59c0:	0001                	nop
    59c2:	0402                	c.slli64	s0
    59c4:	036c                	addi	a1,sp,396
    59c6:	0900                	addi	s0,sp,144
    59c8:	0000                	unimp
    59ca:	0601                	addi	a2,a2,0
    59cc:	08090003          	lb	zero,128(s2)
    59d0:	0100                	addi	s0,sp,128
    59d2:	0200                	addi	s0,sp,256
    59d4:	0504                	addi	s1,sp,640
    59d6:	20097e03          	0x20097e03
    59da:	0100                	addi	s0,sp,128
    59dc:	0200                	addi	s0,sp,256
    59de:	0504                	addi	s1,sp,640
    59e0:	0306                	slli	t1,t1,0x1
    59e2:	0901                	addi	s2,s2,0
    59e4:	0004                	0x4
    59e6:	0001                	nop
    59e8:	0402                	c.slli64	s0
    59ea:	0305                	addi	t1,t1,1
    59ec:	0900                	addi	s0,sp,144
    59ee:	0000                	unimp
    59f0:	0001                	nop
    59f2:	0402                	c.slli64	s0
    59f4:	0305                	addi	t1,t1,1
    59f6:	0900                	addi	s0,sp,144
    59f8:	0000                	unimp
    59fa:	0001                	nop
    59fc:	0402                	c.slli64	s0
    59fe:	0305                	addi	t1,t1,1
    5a00:	0900                	addi	s0,sp,144
    5a02:	0000                	unimp
    5a04:	0601                	addi	a2,a2,0
    5a06:	04090003          	lb	zero,64(s2)
    5a0a:	0100                	addi	s0,sp,128
    5a0c:	0200                	addi	s0,sp,256
    5a0e:	3b04                	fld	fs1,48(a4)
    5a10:	0306                	slli	t1,t1,0x1
    5a12:	0901                	addi	s2,s2,0
    5a14:	0014                	0x14
    5a16:	0001                	nop
    5a18:	0402                	c.slli64	s0
    5a1a:	0900033b          	0x900033b
    5a1e:	0000                	unimp
    5a20:	0001                	nop
    5a22:	0402                	c.slli64	s0
    5a24:	0900033b          	0x900033b
    5a28:	0000                	unimp
    5a2a:	0001                	nop
    5a2c:	0402                	c.slli64	s0
    5a2e:	0900033b          	0x900033b
    5a32:	0008                	0x8
    5a34:	0001                	nop
    5a36:	0402                	c.slli64	s0
    5a38:	033c                	addi	a5,sp,392
    5a3a:	0900                	addi	s0,sp,144
    5a3c:	0008                	0x8
    5a3e:	0001                	nop
    5a40:	0402                	c.slli64	s0
    5a42:	033e                	slli	t1,t1,0xf
    5a44:	0900                	addi	s0,sp,144
    5a46:	0008                	0x8
    5a48:	0001                	nop
    5a4a:	0402                	c.slli64	s0
    5a4c:	033e                	slli	t1,t1,0xf
    5a4e:	0900                	addi	s0,sp,144
    5a50:	001c                	0x1c
    5a52:	0001                	nop
    5a54:	0402                	c.slli64	s0
    5a56:	0900034b          	fnmsub.s	ft6,ft0,fa6,ft1,rne
    5a5a:	0004                	0x4
    5a5c:	0001                	nop
    5a5e:	0402                	c.slli64	s0
    5a60:	0900034b          	fnmsub.s	ft6,ft0,fa6,ft1,rne
    5a64:	0000                	unimp
    5a66:	0001                	nop
    5a68:	0402                	c.slli64	s0
    5a6a:	034c                	addi	a1,sp,388
    5a6c:	0900                	addi	s0,sp,144
    5a6e:	0008                	0x8
    5a70:	0001                	nop
    5a72:	0402                	c.slli64	s0
    5a74:	034c                	addi	a1,sp,388
    5a76:	0900                	addi	s0,sp,144
    5a78:	0000                	unimp
    5a7a:	0001                	nop
    5a7c:	0402                	c.slli64	s0
    5a7e:	034c                	addi	a1,sp,388
    5a80:	0900                	addi	s0,sp,144
    5a82:	0000                	unimp
    5a84:	0001                	nop
    5a86:	0402                	c.slli64	s0
    5a88:	034c                	addi	a1,sp,388
    5a8a:	0900                	addi	s0,sp,144
    5a8c:	0000                	unimp
    5a8e:	0001                	nop
    5a90:	0402                	c.slli64	s0
    5a92:	034e                	slli	t1,t1,0x13
    5a94:	0900                	addi	s0,sp,144
    5a96:	000c                	0xc
    5a98:	0001                	nop
    5a9a:	0402                	c.slli64	s0
    5a9c:	034e                	slli	t1,t1,0x13
    5a9e:	0900                	addi	s0,sp,144
    5aa0:	0000                	unimp
    5aa2:	0001                	nop
    5aa4:	0402                	c.slli64	s0
    5aa6:	034e                	slli	t1,t1,0x13
    5aa8:	0900                	addi	s0,sp,144
    5aaa:	0000                	unimp
    5aac:	0001                	nop
    5aae:	0402                	c.slli64	s0
    5ab0:	034e                	slli	t1,t1,0x13
    5ab2:	0900                	addi	s0,sp,144
    5ab4:	0004                	0x4
    5ab6:	0001                	nop
    5ab8:	0402                	c.slli64	s0
    5aba:	034e                	slli	t1,t1,0x13
    5abc:	0900                	addi	s0,sp,144
    5abe:	0008                	0x8
    5ac0:	0001                	nop
    5ac2:	0402                	c.slli64	s0
    5ac4:	034d                	addi	t1,t1,19
    5ac6:	0900                	addi	s0,sp,144
    5ac8:	0004                	0x4
    5aca:	0001                	nop
    5acc:	0402                	c.slli64	s0
    5ace:	034d                	addi	t1,t1,19
    5ad0:	0900                	addi	s0,sp,144
    5ad2:	0000                	unimp
    5ad4:	0001                	nop
    5ad6:	0402                	c.slli64	s0
    5ad8:	035d                	addi	t1,t1,23
    5ada:	0900                	addi	s0,sp,144
    5adc:	000c                	0xc
    5ade:	0001                	nop
    5ae0:	0402                	c.slli64	s0
    5ae2:	035d                	addi	t1,t1,23
    5ae4:	0900                	addi	s0,sp,144
    5ae6:	0000                	unimp
    5ae8:	0001                	nop
    5aea:	0402                	c.slli64	s0
    5aec:	035d                	addi	t1,t1,23
    5aee:	0900                	addi	s0,sp,144
    5af0:	0000                	unimp
    5af2:	0001                	nop
    5af4:	0402                	c.slli64	s0
    5af6:	035d                	addi	t1,t1,23
    5af8:	0900                	addi	s0,sp,144
    5afa:	000c                	0xc
    5afc:	0601                	addi	a2,a2,0
    5afe:	04090003          	lb	zero,64(s2)
    5b02:	0100                	addi	s0,sp,128
    5b04:	0200                	addi	s0,sp,256
    5b06:	3f04                	fld	fs1,56(a4)
    5b08:	0306                	slli	t1,t1,0x1
    5b0a:	0900                	addi	s0,sp,144
    5b0c:	0008                	0x8
    5b0e:	0001                	nop
    5b10:	0402                	c.slli64	s0
    5b12:	00030647          	fmsub.s	fa2,ft6,ft0,ft0,rne
    5b16:	1809                	addi	a6,a6,-30
    5b18:	0100                	addi	s0,sp,128
    5b1a:	0200                	addi	s0,sp,256
    5b1c:	4a04                	lw	s1,16(a2)
    5b1e:	08090003          	lb	zero,128(s2)
    5b22:	0100                	addi	s0,sp,128
    5b24:	0200                	addi	s0,sp,256
    5b26:	4a04                	lw	s1,16(a2)
    5b28:	0306                	slli	t1,t1,0x1
    5b2a:	0900                	addi	s0,sp,144
    5b2c:	000c                	0xc
    5b2e:	0601                	addi	a2,a2,0
    5b30:	08090003          	lb	zero,128(s2)
    5b34:	0100                	addi	s0,sp,128
    5b36:	30097f03          	0x30097f03
    5b3a:	0100                	addi	s0,sp,128
    5b3c:	0306                	slli	t1,t1,0x1
    5b3e:	0900                	addi	s0,sp,144
    5b40:	0004                	0x4
    5b42:	0301                	addi	t1,t1,0
    5b44:	0900                	addi	s0,sp,144
    5b46:	0000                	unimp
    5b48:	0901                	addi	s2,s2,0
    5b4a:	0008                	0x8
    5b4c:	0100                	addi	s0,sp,128
    5b4e:	4a01                	li	s4,0
    5b50:	0002                	c.slli64	zero
    5b52:	0300                	addi	s0,sp,384
    5b54:	6500                	flw	fs0,8(a0)
    5b56:	0000                	unimp
    5b58:	0100                	addi	s0,sp,128
    5b5a:	fb01                	bnez	a4,5a6a <__divdf3+0x356>
    5b5c:	0d0e                	slli	s10,s10,0x3
    5b5e:	0100                	addi	s0,sp,128
    5b60:	0101                	addi	sp,sp,0
    5b62:	0001                	nop
    5b64:	0000                	unimp
    5b66:	0001                	nop
    5b68:	0100                	addi	s0,sp,128
    5b6a:	2e2e                	fld	ft8,200(sp)
    5b6c:	2f2e2e2f          	0x2f2e2e2f
    5b70:	2e2e                	fld	ft8,200(sp)
    5b72:	2f2e2e2f          	0x2f2e2e2f
    5b76:	2e2e                	fld	ft8,200(sp)
    5b78:	7369722f          	0x7369722f
    5b7c:	672d7663          	bgeu	s10,s2,61e8 <__muldf3+0x9c>
    5b80:	6c2f6363          	bltu	t5,sp,6246 <__muldf3+0xfa>
    5b84:	6269                	lui	tp,0x1a
    5b86:	2f636367          	0x2f636367
    5b8a:	74666f73          	csrrsi	t5,0x746,12
    5b8e:	662d                	lui	a2,0xb
    5b90:	0070                	addi	a2,sp,12
    5b92:	002e                	c.slli	zero,0xb
    5b94:	6500                	flw	fs0,8(a0)
    5b96:	6471                	lui	s0,0x1c
    5b98:	3266                	fld	ft4,120(sp)
    5b9a:	632e                	flw	ft6,200(sp)
    5b9c:	0100                	addi	s0,sp,128
    5b9e:	0000                	unimp
    5ba0:	2d706673          	csrrsi	a2,0x2d7,0
    5ba4:	616d                	addi	sp,sp,240
    5ba6:	6e696863          	bltu	s2,t1,6296 <__muldf3+0x14a>
    5baa:	2e65                	jal	5f62 <__eqdf2+0x6a>
    5bac:	0068                	addi	a0,sp,12
    5bae:	0002                	c.slli64	zero
    5bb0:	6400                	flw	fs0,8(s0)
    5bb2:	6c62756f          	jal	a0,2d278 <RAM_SIZE+0x1d278>
    5bb6:	2e65                	jal	5f6e <__eqdf2+0x76>
    5bb8:	0068                	addi	a0,sp,12
    5bba:	0001                	nop
    5bbc:	0000                	unimp
    5bbe:	0105                	addi	sp,sp,1
    5bc0:	0500                	addi	s0,sp,640
    5bc2:	f802                	fsw	ft0,48(sp)
    5bc4:	005e                	c.slli	zero,0x17
    5bc6:	0300                	addi	s0,sp,384
    5bc8:	03050123          	sb	a6,34(a0)
    5bcc:	00090103          	lb	sp,0(s2)
    5bd0:	0100                	addi	s0,sp,128
    5bd2:	00090003          	lb	zero,0(s2)
    5bd6:	0100                	addi	s0,sp,128
    5bd8:	0d05                	addi	s10,s10,1
    5bda:	00090003          	lb	zero,0(s2)
    5bde:	0100                	addi	s0,sp,128
    5be0:	0305                	addi	t1,t1,1
    5be2:	00090103          	lb	sp,0(s2)
    5be6:	0100                	addi	s0,sp,128
    5be8:	00090003          	lb	zero,0(s2)
    5bec:	0100                	addi	s0,sp,128
    5bee:	00090003          	lb	zero,0(s2)
    5bf2:	0100                	addi	s0,sp,128
    5bf4:	00090003          	lb	zero,0(s2)
    5bf8:	0100                	addi	s0,sp,128
    5bfa:	00090103          	lb	sp,0(s2)
    5bfe:	0100                	addi	s0,sp,128
    5c00:	00090003          	lb	zero,0(s2)
    5c04:	0100                	addi	s0,sp,128
    5c06:	00090003          	lb	zero,0(s2)
    5c0a:	0100                	addi	s0,sp,128
    5c0c:	00090003          	lb	zero,0(s2)
    5c10:	0100                	addi	s0,sp,128
    5c12:	00090103          	lb	sp,0(s2)
    5c16:	0100                	addi	s0,sp,128
    5c18:	00090203          	lb	tp,0(s2)
    5c1c:	0100                	addi	s0,sp,128
    5c1e:	00090103          	lb	sp,0(s2)
    5c22:	0100                	addi	s0,sp,128
    5c24:	00090003          	lb	zero,0(s2)
    5c28:	0100                	addi	s0,sp,128
    5c2a:	00090003          	lb	zero,0(s2)
    5c2e:	0100                	addi	s0,sp,128
    5c30:	00090003          	lb	zero,0(s2)
    5c34:	0100                	addi	s0,sp,128
    5c36:	0306                	slli	t1,t1,0x1
    5c38:	0901                	addi	s2,s2,0
    5c3a:	000c                	0xc
    5c3c:	0501                	addi	a0,a0,0
    5c3e:	0301                	addi	t1,t1,0
    5c40:	0978                	addi	a4,sp,156
    5c42:	0004                	0x4
    5c44:	0501                	addi	a0,a0,0
    5c46:	07030603          	lb	a2,112(t1) # 9000070 <RAM_SIZE+0x8ff0070>
    5c4a:	0809                	addi	a6,a6,2
    5c4c:	0100                	addi	s0,sp,128
    5c4e:	0306                	slli	t1,t1,0x1
    5c50:	0902                	c.slli64	s2
    5c52:	0004                	0x4
    5c54:	0301                	addi	t1,t1,0
    5c56:	097e                	slli	s2,s2,0x1f
    5c58:	0004                	0x4
    5c5a:	0601                	addi	a2,a2,0
    5c5c:	04090003          	lb	zero,64(s2)
    5c60:	0100                	addi	s0,sp,128
    5c62:	00090003          	lb	zero,0(s2)
    5c66:	0100                	addi	s0,sp,128
    5c68:	0306                	slli	t1,t1,0x1
    5c6a:	0901                	addi	s2,s2,0
    5c6c:	0004                	0x4
    5c6e:	0301                	addi	t1,t1,0
    5c70:	097f                	0x97f
    5c72:	0004                	0x4
    5c74:	0601                	addi	a2,a2,0
    5c76:	04090003          	lb	zero,64(s2)
    5c7a:	0100                	addi	s0,sp,128
    5c7c:	00090103          	lb	sp,0(s2)
    5c80:	0100                	addi	s0,sp,128
    5c82:	00090003          	lb	zero,0(s2)
    5c86:	0100                	addi	s0,sp,128
    5c88:	00090003          	lb	zero,0(s2)
    5c8c:	0100                	addi	s0,sp,128
    5c8e:	00090003          	lb	zero,0(s2)
    5c92:	0100                	addi	s0,sp,128
    5c94:	00090003          	lb	zero,0(s2)
    5c98:	0100                	addi	s0,sp,128
    5c9a:	00090003          	lb	zero,0(s2)
    5c9e:	0100                	addi	s0,sp,128
    5ca0:	04090003          	lb	zero,64(s2)
    5ca4:	0100                	addi	s0,sp,128
    5ca6:	04090003          	lb	zero,64(s2)
    5caa:	0100                	addi	s0,sp,128
    5cac:	00090103          	lb	sp,0(s2)
    5cb0:	0100                	addi	s0,sp,128
    5cb2:	00090003          	lb	zero,0(s2)
    5cb6:	0100                	addi	s0,sp,128
    5cb8:	00090003          	lb	zero,0(s2)
    5cbc:	0100                	addi	s0,sp,128
    5cbe:	00090003          	lb	zero,0(s2)
    5cc2:	0100                	addi	s0,sp,128
    5cc4:	00090003          	lb	zero,0(s2)
    5cc8:	0100                	addi	s0,sp,128
    5cca:	0200                	addi	s0,sp,256
    5ccc:	1404                	addi	s1,sp,544
    5cce:	0306                	slli	t1,t1,0x1
    5cd0:	0900                	addi	s0,sp,144
    5cd2:	0004                	0x4
    5cd4:	0301                	addi	t1,t1,0
    5cd6:	0900                	addi	s0,sp,144
    5cd8:	000c                	0xc
    5cda:	0501                	addi	a0,a0,0
    5cdc:	0301                	addi	t1,t1,0
    5cde:	0904                	addi	s1,sp,144
    5ce0:	0004                	0x4
    5ce2:	0501                	addi	a0,a0,0
    5ce4:	04020003          	lb	zero,64(tp) # 1a040 <RAM_SIZE+0xa040>
    5ce8:	097c0317          	auipc	t1,0x97c0
    5cec:	0004                	0x4
    5cee:	0001                	nop
    5cf0:	0402                	c.slli64	s0
    5cf2:	0318                	addi	a4,sp,384
    5cf4:	0900                	addi	s0,sp,144
    5cf6:	0004                	0x4
    5cf8:	0001                	nop
    5cfa:	0402                	c.slli64	s0
    5cfc:	064e                	slli	a2,a2,0x13
    5cfe:	0c090003          	lb	zero,192(s2)
    5d02:	0100                	addi	s0,sp,128
    5d04:	0200                	addi	s0,sp,256
    5d06:	4e04                	lw	s1,24(a2)
    5d08:	00090003          	lb	zero,0(s2)
    5d0c:	0100                	addi	s0,sp,128
    5d0e:	0200                	addi	s0,sp,256
    5d10:	4e04                	lw	s1,24(a2)
    5d12:	00090003          	lb	zero,0(s2)
    5d16:	0100                	addi	s0,sp,128
    5d18:	0200                	addi	s0,sp,256
    5d1a:	4e04                	lw	s1,24(a2)
    5d1c:	00090003          	lb	zero,0(s2)
    5d20:	0100                	addi	s0,sp,128
    5d22:	0200                	addi	s0,sp,256
    5d24:	4e04                	lw	s1,24(a2)
    5d26:	00090003          	lb	zero,0(s2)
    5d2a:	0100                	addi	s0,sp,128
    5d2c:	0200                	addi	s0,sp,256
    5d2e:	4e04                	lw	s1,24(a2)
    5d30:	00090003          	lb	zero,0(s2)
    5d34:	0100                	addi	s0,sp,128
    5d36:	0200                	addi	s0,sp,256
    5d38:	4e04                	lw	s1,24(a2)
    5d3a:	00090003          	lb	zero,0(s2)
    5d3e:	0100                	addi	s0,sp,128
    5d40:	0200                	addi	s0,sp,256
    5d42:	4e04                	lw	s1,24(a2)
    5d44:	00090003          	lb	zero,0(s2)
    5d48:	0100                	addi	s0,sp,128
    5d4a:	0200                	addi	s0,sp,256
    5d4c:	4e04                	lw	s1,24(a2)
    5d4e:	00090003          	lb	zero,0(s2)
    5d52:	0100                	addi	s0,sp,128
    5d54:	0200                	addi	s0,sp,256
    5d56:	4e04                	lw	s1,24(a2)
    5d58:	00090003          	lb	zero,0(s2)
    5d5c:	0100                	addi	s0,sp,128
    5d5e:	0200                	addi	s0,sp,256
    5d60:	5004                	lw	s1,32(s0)
    5d62:	0306                	slli	t1,t1,0x1
    5d64:	0900                	addi	s0,sp,144
    5d66:	0008                	0x8
    5d68:	0001                	nop
    5d6a:	0402                	c.slli64	s0
    5d6c:	0352                	slli	t1,t1,0x14
    5d6e:	0900                	addi	s0,sp,144
    5d70:	0004                	0x4
    5d72:	0001                	nop
    5d74:	0402                	c.slli64	s0
    5d76:	0354                	addi	a3,sp,388
    5d78:	0900                	addi	s0,sp,144
    5d7a:	0004                	0x4
    5d7c:	0001                	nop
    5d7e:	0402                	c.slli64	s0
    5d80:	0355                	addi	t1,t1,21
    5d82:	0900                	addi	s0,sp,144
    5d84:	0004                	0x4
    5d86:	0001                	nop
    5d88:	0402                	c.slli64	s0
    5d8a:	0358                	addi	a4,sp,388
    5d8c:	0900                	addi	s0,sp,144
    5d8e:	0004                	0x4
    5d90:	0301                	addi	t1,t1,0
    5d92:	0900                	addi	s0,sp,144
    5d94:	000c                	0xc
    5d96:	0901                	addi	s2,s2,0
    5d98:	0008                	0x8
    5d9a:	0100                	addi	s0,sp,128
    5d9c:	df01                	beqz	a4,5cb4 <__divdf3+0x5a0>
    5d9e:	0002                	c.slli64	zero
    5da0:	0300                	addi	s0,sp,384
    5da2:	6500                	flw	fs0,8(a0)
    5da4:	0000                	unimp
    5da6:	0100                	addi	s0,sp,128
    5da8:	fb01                	bnez	a4,5cb8 <__divdf3+0x5a4>
    5daa:	0d0e                	slli	s10,s10,0x3
    5dac:	0100                	addi	s0,sp,128
    5dae:	0101                	addi	sp,sp,0
    5db0:	0001                	nop
    5db2:	0000                	unimp
    5db4:	0001                	nop
    5db6:	0100                	addi	s0,sp,128
    5db8:	2e2e                	fld	ft8,200(sp)
    5dba:	2f2e2e2f          	0x2f2e2e2f
    5dbe:	2e2e                	fld	ft8,200(sp)
    5dc0:	2f2e2e2f          	0x2f2e2e2f
    5dc4:	2e2e                	fld	ft8,200(sp)
    5dc6:	7369722f          	0x7369722f
    5dca:	672d7663          	bgeu	s10,s2,6436 <__muldf3+0x2ea>
    5dce:	6c2f6363          	bltu	t5,sp,6494 <__muldf3+0x348>
    5dd2:	6269                	lui	tp,0x1a
    5dd4:	2f636367          	0x2f636367
    5dd8:	74666f73          	csrrsi	t5,0x746,12
    5ddc:	662d                	lui	a2,0xb
    5dde:	0070                	addi	a2,sp,12
    5de0:	002e                	c.slli	zero,0xb
    5de2:	6700                	flw	fs0,8(a4)
    5de4:	6465                	lui	s0,0x19
    5de6:	3266                	fld	ft4,120(sp)
    5de8:	632e                	flw	ft6,200(sp)
    5dea:	0100                	addi	s0,sp,128
    5dec:	0000                	unimp
    5dee:	2d706673          	csrrsi	a2,0x2d7,0
    5df2:	616d                	addi	sp,sp,240
    5df4:	6e696863          	bltu	s2,t1,64e4 <__muldf3+0x398>
    5df8:	2e65                	jal	61b0 <__muldf3+0x64>
    5dfa:	0068                	addi	a0,sp,12
    5dfc:	0002                	c.slli64	zero
    5dfe:	6400                	flw	fs0,8(s0)
    5e00:	6c62756f          	jal	a0,2d4c6 <RAM_SIZE+0x1d4c6>
    5e04:	2e65                	jal	61bc <__muldf3+0x70>
    5e06:	0068                	addi	a0,sp,12
    5e08:	0001                	nop
    5e0a:	0000                	unimp
    5e0c:	0105                	addi	sp,sp,1
    5e0e:	0500                	addi	s0,sp,640
    5e10:	8402                	jr	s0
    5e12:	005f 0300 0123      	0x1230300005f
    5e18:	0305                	addi	t1,t1,1
    5e1a:	00090103          	lb	sp,0(s2)
    5e1e:	0100                	addi	s0,sp,128
    5e20:	00090003          	lb	zero,0(s2)
    5e24:	0100                	addi	s0,sp,128
    5e26:	0d05                	addi	s10,s10,1
    5e28:	00090003          	lb	zero,0(s2)
    5e2c:	0100                	addi	s0,sp,128
    5e2e:	0305                	addi	t1,t1,1
    5e30:	00090103          	lb	sp,0(s2)
    5e34:	0100                	addi	s0,sp,128
    5e36:	00090003          	lb	zero,0(s2)
    5e3a:	0100                	addi	s0,sp,128
    5e3c:	00090003          	lb	zero,0(s2)
    5e40:	0100                	addi	s0,sp,128
    5e42:	00090003          	lb	zero,0(s2)
    5e46:	0100                	addi	s0,sp,128
    5e48:	00090103          	lb	sp,0(s2)
    5e4c:	0100                	addi	s0,sp,128
    5e4e:	00090003          	lb	zero,0(s2)
    5e52:	0100                	addi	s0,sp,128
    5e54:	00090003          	lb	zero,0(s2)
    5e58:	0100                	addi	s0,sp,128
    5e5a:	00090003          	lb	zero,0(s2)
    5e5e:	0100                	addi	s0,sp,128
    5e60:	00090103          	lb	sp,0(s2)
    5e64:	0100                	addi	s0,sp,128
    5e66:	00090203          	lb	tp,0(s2)
    5e6a:	0100                	addi	s0,sp,128
    5e6c:	00090103          	lb	sp,0(s2)
    5e70:	0100                	addi	s0,sp,128
    5e72:	00090003          	lb	zero,0(s2)
    5e76:	0100                	addi	s0,sp,128
    5e78:	00090003          	lb	zero,0(s2)
    5e7c:	0100                	addi	s0,sp,128
    5e7e:	00090003          	lb	zero,0(s2)
    5e82:	0100                	addi	s0,sp,128
    5e84:	0105                	addi	sp,sp,1
    5e86:	0306                	slli	t1,t1,0x1
    5e88:	0979                	addi	s2,s2,30
    5e8a:	0010                	0x10
    5e8c:	0501                	addi	a0,a0,0
    5e8e:	07030603          	lb	a2,112(t1) # 97c5d58 <RAM_SIZE+0x97b5d58>
    5e92:	0809                	addi	a6,a6,2
    5e94:	0100                	addi	s0,sp,128
    5e96:	00090003          	lb	zero,0(s2)
    5e9a:	0100                	addi	s0,sp,128
    5e9c:	04090003          	lb	zero,64(s2)
    5ea0:	0100                	addi	s0,sp,128
    5ea2:	04090003          	lb	zero,64(s2)
    5ea6:	0100                	addi	s0,sp,128
    5ea8:	00090103          	lb	sp,0(s2)
    5eac:	0100                	addi	s0,sp,128
    5eae:	00090003          	lb	zero,0(s2)
    5eb2:	0100                	addi	s0,sp,128
    5eb4:	00090003          	lb	zero,0(s2)
    5eb8:	0100                	addi	s0,sp,128
    5eba:	00090003          	lb	zero,0(s2)
    5ebe:	0100                	addi	s0,sp,128
    5ec0:	0306                	slli	t1,t1,0x1
    5ec2:	0901                	addi	s2,s2,0
    5ec4:	0000                	unimp
    5ec6:	0301                	addi	t1,t1,0
    5ec8:	097f                	0x97f
    5eca:	0004                	0x4
    5ecc:	0601                	addi	a2,a2,0
    5ece:	0c090003          	lb	zero,192(s2)
    5ed2:	0100                	addi	s0,sp,128
    5ed4:	00090003          	lb	zero,0(s2)
    5ed8:	0100                	addi	s0,sp,128
    5eda:	04090003          	lb	zero,64(s2)
    5ede:	0100                	addi	s0,sp,128
    5ee0:	04090003          	lb	zero,64(s2)
    5ee4:	0100                	addi	s0,sp,128
    5ee6:	00090103          	lb	sp,0(s2)
    5eea:	0100                	addi	s0,sp,128
    5eec:	00090003          	lb	zero,0(s2)
    5ef0:	0100                	addi	s0,sp,128
    5ef2:	00090003          	lb	zero,0(s2)
    5ef6:	0100                	addi	s0,sp,128
    5ef8:	00090003          	lb	zero,0(s2)
    5efc:	0100                	addi	s0,sp,128
    5efe:	00090003          	lb	zero,0(s2)
    5f02:	0100                	addi	s0,sp,128
    5f04:	0200                	addi	s0,sp,256
    5f06:	1404                	addi	s1,sp,544
    5f08:	0306                	slli	t1,t1,0x1
    5f0a:	0900                	addi	s0,sp,144
    5f0c:	0004                	0x4
    5f0e:	0301                	addi	t1,t1,0
    5f10:	0900                	addi	s0,sp,144
    5f12:	0008                	0x8
    5f14:	0001                	nop
    5f16:	0402                	c.slli64	s0
    5f18:	09000317          	auipc	t1,0x9000
    5f1c:	0008                	0x8
    5f1e:	0001                	nop
    5f20:	0402                	c.slli64	s0
    5f22:	0318                	addi	a4,sp,384
    5f24:	0900                	addi	s0,sp,144
    5f26:	0004                	0x4
    5f28:	0001                	nop
    5f2a:	0402                	c.slli64	s0
    5f2c:	063e                	slli	a2,a2,0xf
    5f2e:	08090003          	lb	zero,128(s2)
    5f32:	0100                	addi	s0,sp,128
    5f34:	0200                	addi	s0,sp,256
    5f36:	3e04                	fld	fs1,56(a2)
    5f38:	00090003          	lb	zero,0(s2)
    5f3c:	0100                	addi	s0,sp,128
    5f3e:	0200                	addi	s0,sp,256
    5f40:	3e04                	fld	fs1,56(a2)
    5f42:	00090003          	lb	zero,0(s2)
    5f46:	0100                	addi	s0,sp,128
    5f48:	0200                	addi	s0,sp,256
    5f4a:	3e04                	fld	fs1,56(a2)
    5f4c:	00090003          	lb	zero,0(s2)
    5f50:	0100                	addi	s0,sp,128
    5f52:	0200                	addi	s0,sp,256
    5f54:	3e04                	fld	fs1,56(a2)
    5f56:	00090003          	lb	zero,0(s2)
    5f5a:	0100                	addi	s0,sp,128
    5f5c:	0200                	addi	s0,sp,256
    5f5e:	3e04                	fld	fs1,56(a2)
    5f60:	00090003          	lb	zero,0(s2)
    5f64:	0100                	addi	s0,sp,128
    5f66:	0200                	addi	s0,sp,256
    5f68:	3e04                	fld	fs1,56(a2)
    5f6a:	00090003          	lb	zero,0(s2)
    5f6e:	0100                	addi	s0,sp,128
    5f70:	0200                	addi	s0,sp,256
    5f72:	3e04                	fld	fs1,56(a2)
    5f74:	00090003          	lb	zero,0(s2)
    5f78:	0100                	addi	s0,sp,128
    5f7a:	0200                	addi	s0,sp,256
    5f7c:	3e04                	fld	fs1,56(a2)
    5f7e:	00090003          	lb	zero,0(s2)
    5f82:	0100                	addi	s0,sp,128
    5f84:	0200                	addi	s0,sp,256
    5f86:	3e04                	fld	fs1,56(a2)
    5f88:	00090003          	lb	zero,0(s2)
    5f8c:	0100                	addi	s0,sp,128
    5f8e:	0200                	addi	s0,sp,256
    5f90:	3e04                	fld	fs1,56(a2)
    5f92:	00090003          	lb	zero,0(s2)
    5f96:	0100                	addi	s0,sp,128
    5f98:	0200                	addi	s0,sp,256
    5f9a:	3e04                	fld	fs1,56(a2)
    5f9c:	00090003          	lb	zero,0(s2)
    5fa0:	0100                	addi	s0,sp,128
    5fa2:	0200                	addi	s0,sp,256
    5fa4:	3f04                	fld	fs1,56(a4)
    5fa6:	0306                	slli	t1,t1,0x1
    5fa8:	0900                	addi	s0,sp,144
    5faa:	0004                	0x4
    5fac:	0001                	nop
    5fae:	0402                	c.slli64	s0
    5fb0:	0003063f 01000809 	0x10008090003063f
    5fb8:	0200                	addi	s0,sp,256
    5fba:	4504                	lw	s1,8(a0)
    5fbc:	0306                	slli	t1,t1,0x1
    5fbe:	0900                	addi	s0,sp,144
    5fc0:	0004                	0x4
    5fc2:	0601                	addi	a2,a2,0
    5fc4:	08090003          	lb	zero,128(s2)
    5fc8:	0100                	addi	s0,sp,128
    5fca:	04090003          	lb	zero,64(s2)
    5fce:	0100                	addi	s0,sp,128
    5fd0:	00090003          	lb	zero,0(s2)
    5fd4:	0100                	addi	s0,sp,128
    5fd6:	00090003          	lb	zero,0(s2)
    5fda:	0100                	addi	s0,sp,128
    5fdc:	0200                	addi	s0,sp,256
    5fde:	5f04                	lw	s1,56(a4)
    5fe0:	04090003          	lb	zero,64(s2)
    5fe4:	0100                	addi	s0,sp,128
    5fe6:	0200                	addi	s0,sp,256
    5fe8:	7704                	flw	fs1,40(a4)
    5fea:	04090003          	lb	zero,64(s2)
    5fee:	0100                	addi	s0,sp,128
    5ff0:	0306                	slli	t1,t1,0x1
    5ff2:	0900                	addi	s0,sp,144
    5ff4:	0004                	0x4
    5ff6:	0001                	nop
    5ff8:	0402                	c.slli64	s0
    5ffa:	0650                	addi	a2,sp,772
    5ffc:	08090003          	lb	zero,128(s2)
    6000:	0100                	addi	s0,sp,128
    6002:	0200                	addi	s0,sp,256
    6004:	5004                	lw	s1,32(s0)
    6006:	00090003          	lb	zero,0(s2)
    600a:	0100                	addi	s0,sp,128
    600c:	0306                	slli	t1,t1,0x1
    600e:	0900                	addi	s0,sp,144
    6010:	0008                	0x8
    6012:	0001                	nop
    6014:	0402                	c.slli64	s0
    6016:	0666                	slli	a2,a2,0x19
    6018:	08090003          	lb	zero,128(s2)
    601c:	0100                	addi	s0,sp,128
    601e:	0300                	addi	s0,sp,384
    6020:	8204                	0x8204
    6022:	0301                	addi	t1,t1,0
    6024:	0900                	addi	s0,sp,144
    6026:	0004                	0x4
    6028:	0501                	addi	a0,a0,0
    602a:	0601                	addi	a2,a2,0
    602c:	04090403          	lb	s0,64(s2)
    6030:	0100                	addi	s0,sp,128
    6032:	0305                	addi	t1,t1,1
    6034:	0200                	addi	s0,sp,256
    6036:	6d04                	flw	fs1,24(a0)
    6038:	0306                	slli	t1,t1,0x1
    603a:	097c                	addi	a5,sp,156
    603c:	0004                	0x4
    603e:	0001                	nop
    6040:	0402                	c.slli64	s0
    6042:	0674                	addi	a3,sp,780
    6044:	04090003          	lb	zero,64(s2)
    6048:	0100                	addi	s0,sp,128
    604a:	0200                	addi	s0,sp,256
    604c:	7504                	flw	fs1,40(a0)
    604e:	04090003          	lb	zero,64(s2)
    6052:	0100                	addi	s0,sp,128
    6054:	0300                	addi	s0,sp,384
    6056:	8004                	0x8004
    6058:	0601                	addi	a2,a2,0
    605a:	04090003          	lb	zero,64(s2)
    605e:	0100                	addi	s0,sp,128
    6060:	0306                	slli	t1,t1,0x1
    6062:	0900                	addi	s0,sp,144
    6064:	0004                	0x4
    6066:	0601                	addi	a2,a2,0
    6068:	10090003          	lb	zero,256(s2)
    606c:	0100                	addi	s0,sp,128
    606e:	08090003          	lb	zero,128(s2)
    6072:	0100                	addi	s0,sp,128
    6074:	0c090003          	lb	zero,192(s2)
    6078:	0100                	addi	s0,sp,128
    607a:	0c09                	addi	s8,s8,2
    607c:	0000                	unimp
    607e:	0101                	addi	sp,sp,0
    6080:	02df 0000 0003      	0x3000002df
    6086:	0065                	c.nop	25
    6088:	0000                	unimp
    608a:	0101                	addi	sp,sp,0
    608c:	000d0efb          	0xd0efb
    6090:	0101                	addi	sp,sp,0
    6092:	0101                	addi	sp,sp,0
    6094:	0000                	unimp
    6096:	0100                	addi	s0,sp,128
    6098:	0000                	unimp
    609a:	2e01                	jal	63aa <__muldf3+0x25e>
    609c:	2f2e                	fld	ft10,200(sp)
    609e:	2e2e                	fld	ft8,200(sp)
    60a0:	2f2e2e2f          	0x2f2e2e2f
    60a4:	2e2e                	fld	ft8,200(sp)
    60a6:	2f2e2e2f          	0x2f2e2e2f
    60aa:	6972                	flw	fs2,28(sp)
    60ac:	2d766373          	csrrsi	t1,0x2d7,12
    60b0:	2f636367          	0x2f636367
    60b4:	696c                	flw	fa1,84(a0)
    60b6:	6762                	flw	fa4,24(sp)
    60b8:	732f6363          	bltu	t5,s2,67de <__fixdfsi+0x6>
    60bc:	2d74666f          	jal	a2,4cb92 <RAM_SIZE+0x3cb92>
    60c0:	7066                	flw	ft0,120(sp)
    60c2:	2e00                	fld	fs0,24(a2)
    60c4:	0000                	unimp
    60c6:	656c                	flw	fa1,76(a0)
    60c8:	6664                	flw	fs1,76(a2)
    60ca:	2e32                	fld	ft8,264(sp)
    60cc:	00010063          	beqz	sp,60cc <__ledf2+0x64>
    60d0:	7300                	flw	fs0,32(a4)
    60d2:	7066                	flw	ft0,120(sp)
    60d4:	6d2d                	lui	s10,0xb
    60d6:	6361                	lui	t1,0x18
    60d8:	6968                	flw	fa0,84(a0)
    60da:	656e                	flw	fa0,216(sp)
    60dc:	682e                	flw	fa6,200(sp)
    60de:	0200                	addi	s0,sp,256
    60e0:	0000                	unimp
    60e2:	6f64                	flw	fs1,92(a4)
    60e4:	6275                	lui	tp,0x1d
    60e6:	656c                	flw	fa1,76(a0)
    60e8:	682e                	flw	fa6,200(sp)
    60ea:	0100                	addi	s0,sp,128
    60ec:	0000                	unimp
    60ee:	0500                	addi	s0,sp,640
    60f0:	0001                	nop
    60f2:	0205                	addi	tp,tp,1
    60f4:	6068                	flw	fa0,68(s0)
    60f6:	0000                	unimp
    60f8:	05012303          	lw	t1,80(sp)
    60fc:	09010303          	lb	t1,144(sp)
    6100:	0000                	unimp
    6102:	0301                	addi	t1,t1,0
    6104:	0900                	addi	s0,sp,144
    6106:	0000                	unimp
    6108:	0501                	addi	a0,a0,0
    610a:	030d                	addi	t1,t1,3
    610c:	0900                	addi	s0,sp,144
    610e:	0000                	unimp
    6110:	0501                	addi	a0,a0,0
    6112:	09010303          	lb	t1,144(sp)
    6116:	0000                	unimp
    6118:	0301                	addi	t1,t1,0
    611a:	0900                	addi	s0,sp,144
    611c:	0000                	unimp
    611e:	0301                	addi	t1,t1,0
    6120:	0900                	addi	s0,sp,144
    6122:	0000                	unimp
    6124:	0301                	addi	t1,t1,0
    6126:	0900                	addi	s0,sp,144
    6128:	0000                	unimp
    612a:	0301                	addi	t1,t1,0
    612c:	0901                	addi	s2,s2,0
    612e:	0000                	unimp
    6130:	0301                	addi	t1,t1,0
    6132:	0900                	addi	s0,sp,144
    6134:	0000                	unimp
    6136:	0301                	addi	t1,t1,0
    6138:	0900                	addi	s0,sp,144
    613a:	0000                	unimp
    613c:	0301                	addi	t1,t1,0
    613e:	0900                	addi	s0,sp,144
    6140:	0000                	unimp
    6142:	0301                	addi	t1,t1,0
    6144:	0901                	addi	s2,s2,0
    6146:	0000                	unimp
    6148:	0301                	addi	t1,t1,0
    614a:	0902                	c.slli64	s2
    614c:	0000                	unimp
    614e:	0301                	addi	t1,t1,0
    6150:	0901                	addi	s2,s2,0
    6152:	0000                	unimp
    6154:	0301                	addi	t1,t1,0
    6156:	0900                	addi	s0,sp,144
    6158:	0000                	unimp
    615a:	0301                	addi	t1,t1,0
    615c:	0900                	addi	s0,sp,144
    615e:	0000                	unimp
    6160:	0301                	addi	t1,t1,0
    6162:	0900                	addi	s0,sp,144
    6164:	0000                	unimp
    6166:	0501                	addi	a0,a0,0
    6168:	0601                	addi	a2,a2,0
    616a:	10097903          	0x10097903
    616e:	0100                	addi	s0,sp,128
    6170:	0305                	addi	t1,t1,1
    6172:	0306                	slli	t1,t1,0x1
    6174:	00080907          	vle8.v	v18,(a6),v0.t
    6178:	0301                	addi	t1,t1,0
    617a:	0900                	addi	s0,sp,144
    617c:	0000                	unimp
    617e:	0301                	addi	t1,t1,0
    6180:	0900                	addi	s0,sp,144
    6182:	0004                	0x4
    6184:	0301                	addi	t1,t1,0
    6186:	0900                	addi	s0,sp,144
    6188:	0004                	0x4
    618a:	0301                	addi	t1,t1,0
    618c:	0901                	addi	s2,s2,0
    618e:	0000                	unimp
    6190:	0301                	addi	t1,t1,0
    6192:	0900                	addi	s0,sp,144
    6194:	0000                	unimp
    6196:	0301                	addi	t1,t1,0
    6198:	0900                	addi	s0,sp,144
    619a:	0000                	unimp
    619c:	0301                	addi	t1,t1,0
    619e:	0900                	addi	s0,sp,144
    61a0:	0000                	unimp
    61a2:	0601                	addi	a2,a2,0
    61a4:	00090103          	lb	sp,0(s2)
    61a8:	0100                	addi	s0,sp,128
    61aa:	04097f03          	0x4097f03
    61ae:	0100                	addi	s0,sp,128
    61b0:	0306                	slli	t1,t1,0x1
    61b2:	0900                	addi	s0,sp,144
    61b4:	000c                	0xc
    61b6:	0301                	addi	t1,t1,0
    61b8:	0900                	addi	s0,sp,144
    61ba:	0000                	unimp
    61bc:	0301                	addi	t1,t1,0
    61be:	0900                	addi	s0,sp,144
    61c0:	0004                	0x4
    61c2:	0301                	addi	t1,t1,0
    61c4:	0900                	addi	s0,sp,144
    61c6:	0004                	0x4
    61c8:	0301                	addi	t1,t1,0
    61ca:	0901                	addi	s2,s2,0
    61cc:	0000                	unimp
    61ce:	0301                	addi	t1,t1,0
    61d0:	0900                	addi	s0,sp,144
    61d2:	0000                	unimp
    61d4:	0301                	addi	t1,t1,0
    61d6:	0900                	addi	s0,sp,144
    61d8:	0000                	unimp
    61da:	0301                	addi	t1,t1,0
    61dc:	0900                	addi	s0,sp,144
    61de:	0000                	unimp
    61e0:	0301                	addi	t1,t1,0
    61e2:	0900                	addi	s0,sp,144
    61e4:	0000                	unimp
    61e6:	0001                	nop
    61e8:	0402                	c.slli64	s0
    61ea:	0614                	addi	a3,sp,768
    61ec:	04090003          	lb	zero,64(s2)
    61f0:	0100                	addi	s0,sp,128
    61f2:	08090003          	lb	zero,128(s2)
    61f6:	0100                	addi	s0,sp,128
    61f8:	0200                	addi	s0,sp,256
    61fa:	1704                	addi	s1,sp,928
    61fc:	08090003          	lb	zero,128(s2)
    6200:	0100                	addi	s0,sp,128
    6202:	0200                	addi	s0,sp,256
    6204:	1804                	addi	s1,sp,48
    6206:	04090003          	lb	zero,64(s2)
    620a:	0100                	addi	s0,sp,128
    620c:	0200                	addi	s0,sp,256
    620e:	3e04                	fld	fs1,56(a2)
    6210:	0306                	slli	t1,t1,0x1
    6212:	0900                	addi	s0,sp,144
    6214:	0008                	0x8
    6216:	0001                	nop
    6218:	0402                	c.slli64	s0
    621a:	033e                	slli	t1,t1,0xf
    621c:	0900                	addi	s0,sp,144
    621e:	0000                	unimp
    6220:	0001                	nop
    6222:	0402                	c.slli64	s0
    6224:	033e                	slli	t1,t1,0xf
    6226:	0900                	addi	s0,sp,144
    6228:	0000                	unimp
    622a:	0001                	nop
    622c:	0402                	c.slli64	s0
    622e:	033e                	slli	t1,t1,0xf
    6230:	0900                	addi	s0,sp,144
    6232:	0000                	unimp
    6234:	0001                	nop
    6236:	0402                	c.slli64	s0
    6238:	033e                	slli	t1,t1,0xf
    623a:	0900                	addi	s0,sp,144
    623c:	0000                	unimp
    623e:	0001                	nop
    6240:	0402                	c.slli64	s0
    6242:	033e                	slli	t1,t1,0xf
    6244:	0900                	addi	s0,sp,144
    6246:	0000                	unimp
    6248:	0001                	nop
    624a:	0402                	c.slli64	s0
    624c:	033e                	slli	t1,t1,0xf
    624e:	0900                	addi	s0,sp,144
    6250:	0000                	unimp
    6252:	0001                	nop
    6254:	0402                	c.slli64	s0
    6256:	033e                	slli	t1,t1,0xf
    6258:	0900                	addi	s0,sp,144
    625a:	0000                	unimp
    625c:	0001                	nop
    625e:	0402                	c.slli64	s0
    6260:	033e                	slli	t1,t1,0xf
    6262:	0900                	addi	s0,sp,144
    6264:	0000                	unimp
    6266:	0001                	nop
    6268:	0402                	c.slli64	s0
    626a:	033e                	slli	t1,t1,0xf
    626c:	0900                	addi	s0,sp,144
    626e:	0000                	unimp
    6270:	0001                	nop
    6272:	0402                	c.slli64	s0
    6274:	033e                	slli	t1,t1,0xf
    6276:	0900                	addi	s0,sp,144
    6278:	0000                	unimp
    627a:	0001                	nop
    627c:	0402                	c.slli64	s0
    627e:	033e                	slli	t1,t1,0xf
    6280:	0900                	addi	s0,sp,144
    6282:	0000                	unimp
    6284:	0001                	nop
    6286:	0402                	c.slli64	s0
    6288:	0003063f 01000409 	0x10004090003063f
    6290:	0200                	addi	s0,sp,256
    6292:	3f04                	fld	fs1,56(a4)
    6294:	0306                	slli	t1,t1,0x1
    6296:	0900                	addi	s0,sp,144
    6298:	0008                	0x8
    629a:	0001                	nop
    629c:	0402                	c.slli64	s0
    629e:	0645                	addi	a2,a2,17
    62a0:	04090003          	lb	zero,64(s2)
    62a4:	0100                	addi	s0,sp,128
    62a6:	0306                	slli	t1,t1,0x1
    62a8:	0900                	addi	s0,sp,144
    62aa:	0008                	0x8
    62ac:	0301                	addi	t1,t1,0
    62ae:	0900                	addi	s0,sp,144
    62b0:	0004                	0x4
    62b2:	0301                	addi	t1,t1,0
    62b4:	0900                	addi	s0,sp,144
    62b6:	0000                	unimp
    62b8:	0301                	addi	t1,t1,0
    62ba:	0900                	addi	s0,sp,144
    62bc:	0000                	unimp
    62be:	0001                	nop
    62c0:	0402                	c.slli64	s0
    62c2:	035f 0900 0004      	0x40900035f
    62c8:	0001                	nop
    62ca:	0402                	c.slli64	s0
    62cc:	09000377          	0x9000377
    62d0:	0004                	0x4
    62d2:	0601                	addi	a2,a2,0
    62d4:	04090003          	lb	zero,64(s2)
    62d8:	0100                	addi	s0,sp,128
    62da:	0200                	addi	s0,sp,256
    62dc:	5004                	lw	s1,32(s0)
    62de:	0306                	slli	t1,t1,0x1
    62e0:	0900                	addi	s0,sp,144
    62e2:	0008                	0x8
    62e4:	0001                	nop
    62e6:	0402                	c.slli64	s0
    62e8:	0350                	addi	a2,sp,388
    62ea:	0900                	addi	s0,sp,144
    62ec:	0000                	unimp
    62ee:	0601                	addi	a2,a2,0
    62f0:	08090003          	lb	zero,128(s2)
    62f4:	0100                	addi	s0,sp,128
    62f6:	0200                	addi	s0,sp,256
    62f8:	6604                	flw	fs1,8(a2)
    62fa:	0306                	slli	t1,t1,0x1
    62fc:	0900                	addi	s0,sp,144
    62fe:	0008                	0x8
    6300:	0001                	nop
    6302:	01820403          	lb	s0,24(tp) # 1d018 <RAM_SIZE+0xd018>
    6306:	04090003          	lb	zero,64(s2)
    630a:	0100                	addi	s0,sp,128
    630c:	0105                	addi	sp,sp,1
    630e:	0306                	slli	t1,t1,0x1
    6310:	0904                	addi	s1,sp,144
    6312:	0004                	0x4
    6314:	0501                	addi	a0,a0,0
    6316:	04020003          	lb	zero,64(tp) # 40 <_start+0x30>
    631a:	066d                	addi	a2,a2,27
    631c:	04097c03          	0x4097c03
    6320:	0100                	addi	s0,sp,128
    6322:	0200                	addi	s0,sp,256
    6324:	7404                	flw	fs1,40(s0)
    6326:	0306                	slli	t1,t1,0x1
    6328:	0900                	addi	s0,sp,144
    632a:	0004                	0x4
    632c:	0001                	nop
    632e:	0402                	c.slli64	s0
    6330:	0375                	addi	t1,t1,29
    6332:	0900                	addi	s0,sp,144
    6334:	0004                	0x4
    6336:	0001                	nop
    6338:	01800403          	lb	s0,24(zero) # 18 <_start+0x8>
    633c:	0306                	slli	t1,t1,0x1
    633e:	0900                	addi	s0,sp,144
    6340:	0004                	0x4
    6342:	0601                	addi	a2,a2,0
    6344:	04090003          	lb	zero,64(s2)
    6348:	0100                	addi	s0,sp,128
    634a:	0306                	slli	t1,t1,0x1
    634c:	0900                	addi	s0,sp,144
    634e:	0010                	0x10
    6350:	0301                	addi	t1,t1,0
    6352:	0900                	addi	s0,sp,144
    6354:	0008                	0x8
    6356:	0301                	addi	t1,t1,0
    6358:	0900                	addi	s0,sp,144
    635a:	000c                	0xc
    635c:	0901                	addi	s2,s2,0
    635e:	000c                	0xc
    6360:	0100                	addi	s0,sp,128
    6362:	1f01                	addi	t5,t5,-32
    6364:	0010                	0x10
    6366:	0300                	addi	s0,sp,384
    6368:	6000                	flw	fs0,0(s0)
    636a:	0000                	unimp
    636c:	0100                	addi	s0,sp,128
    636e:	fb01                	bnez	a4,627e <__muldf3+0x132>
    6370:	0d0e                	slli	s10,s10,0x3
    6372:	0100                	addi	s0,sp,128
    6374:	0101                	addi	sp,sp,0
    6376:	0001                	nop
    6378:	0000                	unimp
    637a:	0001                	nop
    637c:	0100                	addi	s0,sp,128
    637e:	2e2e                	fld	ft8,200(sp)
    6380:	2f2e2e2f          	0x2f2e2e2f
    6384:	2e2e                	fld	ft8,200(sp)
    6386:	2f2e2e2f          	0x2f2e2e2f
    638a:	2e2e                	fld	ft8,200(sp)
    638c:	7369722f          	0x7369722f
    6390:	672d7663          	bgeu	s10,s2,69fc <__libc_init_array+0x4c>
    6394:	6c2f6363          	bltu	t5,sp,6a5a <memset+0x16>
    6398:	6269                	lui	tp,0x1a
    639a:	2f636367          	0x2f636367
    639e:	74666f73          	csrrsi	t5,0x746,12
    63a2:	662d                	lui	a2,0xb
    63a4:	0070                	addi	a2,sp,12
    63a6:	6d00                	flw	fs0,24(a0)
    63a8:	6c75                	lui	s8,0x1d
    63aa:	6664                	flw	fs1,76(a2)
    63ac:	00632e33          	slt	t3,t1,t1
    63b0:	0001                	nop
    63b2:	7300                	flw	fs0,32(a4)
    63b4:	2d74666f          	jal	a2,4ce8a <RAM_SIZE+0x3ce8a>
    63b8:	7066                	flw	ft0,120(sp)
    63ba:	682e                	flw	fa6,200(sp)
    63bc:	0100                	addi	s0,sp,128
    63be:	0000                	unimp
    63c0:	6f64                	flw	fs1,92(a4)
    63c2:	6275                	lui	tp,0x1d
    63c4:	656c                	flw	fa1,76(a0)
    63c6:	682e                	flw	fa6,200(sp)
    63c8:	0100                	addi	s0,sp,128
    63ca:	0000                	unimp
    63cc:	0500                	addi	s0,sp,640
    63ce:	0001                	nop
    63d0:	0205                	addi	tp,tp,1
    63d2:	614c                	flw	fa1,4(a0)
    63d4:	0000                	unimp
    63d6:	05012303          	lw	t1,80(sp)
    63da:	09010303          	lb	t1,144(sp)
    63de:	0000                	unimp
    63e0:	0301                	addi	t1,t1,0
    63e2:	0900                	addi	s0,sp,144
    63e4:	0000                	unimp
    63e6:	0501                	addi	a0,a0,0
    63e8:	030d                	addi	t1,t1,3
    63ea:	0900                	addi	s0,sp,144
    63ec:	0000                	unimp
    63ee:	0501                	addi	a0,a0,0
    63f0:	09010303          	lb	t1,144(sp)
    63f4:	0000                	unimp
    63f6:	0301                	addi	t1,t1,0
    63f8:	0900                	addi	s0,sp,144
    63fa:	0000                	unimp
    63fc:	0301                	addi	t1,t1,0
    63fe:	0900                	addi	s0,sp,144
    6400:	0000                	unimp
    6402:	0301                	addi	t1,t1,0
    6404:	0900                	addi	s0,sp,144
    6406:	0000                	unimp
    6408:	0301                	addi	t1,t1,0
    640a:	0901                	addi	s2,s2,0
    640c:	0000                	unimp
    640e:	0301                	addi	t1,t1,0
    6410:	0900                	addi	s0,sp,144
    6412:	0000                	unimp
    6414:	0301                	addi	t1,t1,0
    6416:	0900                	addi	s0,sp,144
    6418:	0000                	unimp
    641a:	0301                	addi	t1,t1,0
    641c:	0900                	addi	s0,sp,144
    641e:	0000                	unimp
    6420:	0301                	addi	t1,t1,0
    6422:	0901                	addi	s2,s2,0
    6424:	0000                	unimp
    6426:	0301                	addi	t1,t1,0
    6428:	0900                	addi	s0,sp,144
    642a:	0000                	unimp
    642c:	0301                	addi	t1,t1,0
    642e:	0900                	addi	s0,sp,144
    6430:	0000                	unimp
    6432:	0301                	addi	t1,t1,0
    6434:	0900                	addi	s0,sp,144
    6436:	0000                	unimp
    6438:	0301                	addi	t1,t1,0
    643a:	0901                	addi	s2,s2,0
    643c:	0000                	unimp
    643e:	0301                	addi	t1,t1,0
    6440:	0902                	c.slli64	s2
    6442:	0000                	unimp
    6444:	0301                	addi	t1,t1,0
    6446:	0901                	addi	s2,s2,0
    6448:	0000                	unimp
    644a:	0301                	addi	t1,t1,0
    644c:	0900                	addi	s0,sp,144
    644e:	0000                	unimp
    6450:	0301                	addi	t1,t1,0
    6452:	0900                	addi	s0,sp,144
    6454:	0000                	unimp
    6456:	0301                	addi	t1,t1,0
    6458:	0900                	addi	s0,sp,144
    645a:	0000                	unimp
    645c:	0301                	addi	t1,t1,0
    645e:	0900                	addi	s0,sp,144
    6460:	0000                	unimp
    6462:	0301                	addi	t1,t1,0
    6464:	0900                	addi	s0,sp,144
    6466:	0000                	unimp
    6468:	0501                	addi	a0,a0,0
    646a:	0601                	addi	a2,a2,0
    646c:	00097803          	0x97803
    6470:	0100                	addi	s0,sp,128
    6472:	0305                	addi	t1,t1,1
    6474:	08090803          	lb	a6,128(s2)
    6478:	0100                	addi	s0,sp,128
    647a:	0105                	addi	sp,sp,1
    647c:	04097803          	0x4097803
    6480:	0100                	addi	s0,sp,128
    6482:	0305                	addi	t1,t1,1
    6484:	14090803          	lb	a6,320(s2)
    6488:	0100                	addi	s0,sp,128
    648a:	0105                	addi	sp,sp,1
    648c:	04097803          	0x4097803
    6490:	0100                	addi	s0,sp,128
    6492:	0305                	addi	t1,t1,1
    6494:	0c090803          	lb	a6,192(s2)
    6498:	0100                	addi	s0,sp,128
    649a:	0105                	addi	sp,sp,1
    649c:	04097803          	0x4097803
    64a0:	0100                	addi	s0,sp,128
    64a2:	0305                	addi	t1,t1,1
    64a4:	0c090803          	lb	a6,192(s2)
    64a8:	0100                	addi	s0,sp,128
    64aa:	0306                	slli	t1,t1,0x1
    64ac:	0900                	addi	s0,sp,144
    64ae:	0004                	0x4
    64b0:	0301                	addi	t1,t1,0
    64b2:	0900                	addi	s0,sp,144
    64b4:	0000                	unimp
    64b6:	0301                	addi	t1,t1,0
    64b8:	0900                	addi	s0,sp,144
    64ba:	0004                	0x4
    64bc:	0301                	addi	t1,t1,0
    64be:	0900                	addi	s0,sp,144
    64c0:	0000                	unimp
    64c2:	0301                	addi	t1,t1,0
    64c4:	0900                	addi	s0,sp,144
    64c6:	0000                	unimp
    64c8:	0001                	nop
    64ca:	0402                	c.slli64	s0
    64cc:	0301                	addi	t1,t1,0
    64ce:	0900                	addi	s0,sp,144
    64d0:	000c                	0xc
    64d2:	0001                	nop
    64d4:	0402                	c.slli64	s0
    64d6:	0301                	addi	t1,t1,0
    64d8:	0900                	addi	s0,sp,144
    64da:	0000                	unimp
    64dc:	0001                	nop
    64de:	0402                	c.slli64	s0
    64e0:	0301                	addi	t1,t1,0
    64e2:	0900                	addi	s0,sp,144
    64e4:	0000                	unimp
    64e6:	0001                	nop
    64e8:	0402                	c.slli64	s0
    64ea:	0301                	addi	t1,t1,0
    64ec:	0900                	addi	s0,sp,144
    64ee:	0000                	unimp
    64f0:	0001                	nop
    64f2:	0402                	c.slli64	s0
    64f4:	0301                	addi	t1,t1,0
    64f6:	0900                	addi	s0,sp,144
    64f8:	0014                	0x14
    64fa:	0001                	nop
    64fc:	0402                	c.slli64	s0
    64fe:	0301                	addi	t1,t1,0
    6500:	0900                	addi	s0,sp,144
    6502:	0004                	0x4
    6504:	0001                	nop
    6506:	0402                	c.slli64	s0
    6508:	0301                	addi	t1,t1,0
    650a:	0900                	addi	s0,sp,144
    650c:	0000                	unimp
    650e:	0001                	nop
    6510:	0402                	c.slli64	s0
    6512:	0301                	addi	t1,t1,0
    6514:	0900                	addi	s0,sp,144
    6516:	0004                	0x4
    6518:	0001                	nop
    651a:	0402                	c.slli64	s0
    651c:	0301                	addi	t1,t1,0
    651e:	0900                	addi	s0,sp,144
    6520:	0000                	unimp
    6522:	0001                	nop
    6524:	0402                	c.slli64	s0
    6526:	0329                	addi	t1,t1,10
    6528:	0900                	addi	s0,sp,144
    652a:	0000                	unimp
    652c:	0001                	nop
    652e:	0402                	c.slli64	s0
    6530:	0329                	addi	t1,t1,10
    6532:	0900                	addi	s0,sp,144
    6534:	0000                	unimp
    6536:	0001                	nop
    6538:	0402                	c.slli64	s0
    653a:	0308                	addi	a0,sp,384
    653c:	0900                	addi	s0,sp,144
    653e:	0004                	0x4
    6540:	0001                	nop
    6542:	0402                	c.slli64	s0
    6544:	0308                	addi	a0,sp,384
    6546:	0900                	addi	s0,sp,144
    6548:	0000                	unimp
    654a:	0001                	nop
    654c:	0402                	c.slli64	s0
    654e:	0308                	addi	a0,sp,384
    6550:	0901                	addi	s2,s2,0
    6552:	0000                	unimp
    6554:	0001                	nop
    6556:	0402                	c.slli64	s0
    6558:	0308                	addi	a0,sp,384
    655a:	0900                	addi	s0,sp,144
    655c:	0000                	unimp
    655e:	0001                	nop
    6560:	0402                	c.slli64	s0
    6562:	0308                	addi	a0,sp,384
    6564:	0900                	addi	s0,sp,144
    6566:	0000                	unimp
    6568:	0001                	nop
    656a:	0402                	c.slli64	s0
    656c:	0308                	addi	a0,sp,384
    656e:	0900                	addi	s0,sp,144
    6570:	0000                	unimp
    6572:	0001                	nop
    6574:	0402                	c.slli64	s0
    6576:	0308                	addi	a0,sp,384
    6578:	0900                	addi	s0,sp,144
    657a:	0000                	unimp
    657c:	0001                	nop
    657e:	0402                	c.slli64	s0
    6580:	0308                	addi	a0,sp,384
    6582:	0900                	addi	s0,sp,144
    6584:	0000                	unimp
    6586:	0001                	nop
    6588:	0402                	c.slli64	s0
    658a:	0308                	addi	a0,sp,384
    658c:	0900                	addi	s0,sp,144
    658e:	0010                	0x10
    6590:	0001                	nop
    6592:	0402                	c.slli64	s0
    6594:	0308                	addi	a0,sp,384
    6596:	0900                	addi	s0,sp,144
    6598:	0000                	unimp
    659a:	0001                	nop
    659c:	0402                	c.slli64	s0
    659e:	0308                	addi	a0,sp,384
    65a0:	0900                	addi	s0,sp,144
    65a2:	0004                	0x4
    65a4:	0001                	nop
    65a6:	0402                	c.slli64	s0
    65a8:	0308                	addi	a0,sp,384
    65aa:	0900                	addi	s0,sp,144
    65ac:	0000                	unimp
    65ae:	0001                	nop
    65b0:	0402                	c.slli64	s0
    65b2:	0308                	addi	a0,sp,384
    65b4:	0900                	addi	s0,sp,144
    65b6:	0000                	unimp
    65b8:	0601                	addi	a2,a2,0
    65ba:	04090003          	lb	zero,64(s2)
    65be:	0100                	addi	s0,sp,128
    65c0:	0200                	addi	s0,sp,256
    65c2:	0104                	addi	s1,sp,128
    65c4:	0306                	slli	t1,t1,0x1
    65c6:	0900                	addi	s0,sp,144
    65c8:	0008                	0x8
    65ca:	0001                	nop
    65cc:	0402                	c.slli64	s0
    65ce:	0301                	addi	t1,t1,0
    65d0:	0900                	addi	s0,sp,144
    65d2:	0000                	unimp
    65d4:	0001                	nop
    65d6:	0402                	c.slli64	s0
    65d8:	0301                	addi	t1,t1,0
    65da:	0900                	addi	s0,sp,144
    65dc:	0000                	unimp
    65de:	0001                	nop
    65e0:	0402                	c.slli64	s0
    65e2:	0301                	addi	t1,t1,0
    65e4:	0900                	addi	s0,sp,144
    65e6:	0000                	unimp
    65e8:	0001                	nop
    65ea:	0402                	c.slli64	s0
    65ec:	0301                	addi	t1,t1,0
    65ee:	0900                	addi	s0,sp,144
    65f0:	0014                	0x14
    65f2:	0001                	nop
    65f4:	0402                	c.slli64	s0
    65f6:	0301                	addi	t1,t1,0
    65f8:	0900                	addi	s0,sp,144
    65fa:	0008                	0x8
    65fc:	0001                	nop
    65fe:	0402                	c.slli64	s0
    6600:	0301                	addi	t1,t1,0
    6602:	0900                	addi	s0,sp,144
    6604:	0000                	unimp
    6606:	0001                	nop
    6608:	0402                	c.slli64	s0
    660a:	0301                	addi	t1,t1,0
    660c:	0900                	addi	s0,sp,144
    660e:	0000                	unimp
    6610:	0001                	nop
    6612:	0402                	c.slli64	s0
    6614:	0301                	addi	t1,t1,0
    6616:	0900                	addi	s0,sp,144
    6618:	0000                	unimp
    661a:	0001                	nop
    661c:	0402                	c.slli64	s0
    661e:	0329                	addi	t1,t1,10
    6620:	0900                	addi	s0,sp,144
    6622:	0000                	unimp
    6624:	0001                	nop
    6626:	0402                	c.slli64	s0
    6628:	0329                	addi	t1,t1,10
    662a:	0900                	addi	s0,sp,144
    662c:	0000                	unimp
    662e:	0001                	nop
    6630:	0402                	c.slli64	s0
    6632:	0308                	addi	a0,sp,384
    6634:	0900                	addi	s0,sp,144
    6636:	0004                	0x4
    6638:	0001                	nop
    663a:	0402                	c.slli64	s0
    663c:	0308                	addi	a0,sp,384
    663e:	0900                	addi	s0,sp,144
    6640:	0000                	unimp
    6642:	0001                	nop
    6644:	0402                	c.slli64	s0
    6646:	0308                	addi	a0,sp,384
    6648:	0901                	addi	s2,s2,0
    664a:	0000                	unimp
    664c:	0001                	nop
    664e:	0402                	c.slli64	s0
    6650:	0308                	addi	a0,sp,384
    6652:	0900                	addi	s0,sp,144
    6654:	0000                	unimp
    6656:	0001                	nop
    6658:	0402                	c.slli64	s0
    665a:	0308                	addi	a0,sp,384
    665c:	0900                	addi	s0,sp,144
    665e:	0018                	0x18
    6660:	0001                	nop
    6662:	0402                	c.slli64	s0
    6664:	0308                	addi	a0,sp,384
    6666:	0900                	addi	s0,sp,144
    6668:	0004                	0x4
    666a:	0001                	nop
    666c:	0402                	c.slli64	s0
    666e:	0302                	c.slli64	t1
    6670:	097e                	slli	s2,s2,0x1f
    6672:	0020                	addi	s0,sp,8
    6674:	0001                	nop
    6676:	0402                	c.slli64	s0
    6678:	030d                	addi	t1,t1,3
    667a:	0900                	addi	s0,sp,144
    667c:	0008                	0x8
    667e:	0001                	nop
    6680:	0402                	c.slli64	s0
    6682:	030d                	addi	t1,t1,3
    6684:	0900                	addi	s0,sp,144
    6686:	0000                	unimp
    6688:	0001                	nop
    668a:	0402                	c.slli64	s0
    668c:	030d                	addi	t1,t1,3
    668e:	0900                	addi	s0,sp,144
    6690:	0000                	unimp
    6692:	0001                	nop
    6694:	0402                	c.slli64	s0
    6696:	030d                	addi	t1,t1,3
    6698:	0900                	addi	s0,sp,144
    669a:	0000                	unimp
    669c:	0001                	nop
    669e:	0402                	c.slli64	s0
    66a0:	0311                	addi	t1,t1,4
    66a2:	0900                	addi	s0,sp,144
    66a4:	0004                	0x4
    66a6:	0001                	nop
    66a8:	0402                	c.slli64	s0
    66aa:	0311                	addi	t1,t1,4
    66ac:	0900                	addi	s0,sp,144
    66ae:	0000                	unimp
    66b0:	0001                	nop
    66b2:	0402                	c.slli64	s0
    66b4:	0311                	addi	t1,t1,4
    66b6:	0900                	addi	s0,sp,144
    66b8:	0000                	unimp
    66ba:	0001                	nop
    66bc:	0402                	c.slli64	s0
    66be:	0311                	addi	t1,t1,4
    66c0:	0900                	addi	s0,sp,144
    66c2:	0000                	unimp
    66c4:	0001                	nop
    66c6:	0402                	c.slli64	s0
    66c8:	0311                	addi	t1,t1,4
    66ca:	0900                	addi	s0,sp,144
    66cc:	0008                	0x8
    66ce:	0001                	nop
    66d0:	0402                	c.slli64	s0
    66d2:	031f 0900 0000      	0x900031f
    66d8:	0001                	nop
    66da:	0402                	c.slli64	s0
    66dc:	031f 0900 0000      	0x900031f
    66e2:	0001                	nop
    66e4:	0402                	c.slli64	s0
    66e6:	031f 0900 0004      	0x40900031f
    66ec:	0001                	nop
    66ee:	0402                	c.slli64	s0
    66f0:	0320                	addi	s0,sp,392
    66f2:	0900                	addi	s0,sp,144
    66f4:	0008                	0x8
    66f6:	0001                	nop
    66f8:	0402                	c.slli64	s0
    66fa:	0320                	addi	s0,sp,392
    66fc:	0900                	addi	s0,sp,144
    66fe:	0008                	0x8
    6700:	0001                	nop
    6702:	0402                	c.slli64	s0
    6704:	0320                	addi	s0,sp,392
    6706:	0900                	addi	s0,sp,144
    6708:	0010                	0x10
    670a:	0001                	nop
    670c:	0402                	c.slli64	s0
    670e:	0320                	addi	s0,sp,392
    6710:	0900                	addi	s0,sp,144
    6712:	0004                	0x4
    6714:	0001                	nop
    6716:	0402                	c.slli64	s0
    6718:	0329                	addi	t1,t1,10
    671a:	0900                	addi	s0,sp,144
    671c:	0000                	unimp
    671e:	0001                	nop
    6720:	0402                	c.slli64	s0
    6722:	0318                	addi	a4,sp,384
    6724:	0900                	addi	s0,sp,144
    6726:	000c                	0xc
    6728:	0001                	nop
    672a:	0402                	c.slli64	s0
    672c:	0318                	addi	a4,sp,384
    672e:	0900                	addi	s0,sp,144
    6730:	0000                	unimp
    6732:	0001                	nop
    6734:	0402                	c.slli64	s0
    6736:	0318                	addi	a4,sp,384
    6738:	0900                	addi	s0,sp,144
    673a:	0000                	unimp
    673c:	0001                	nop
    673e:	0402                	c.slli64	s0
    6740:	0318                	addi	a4,sp,384
    6742:	0900                	addi	s0,sp,144
    6744:	0000                	unimp
    6746:	0001                	nop
    6748:	0402                	c.slli64	s0
    674a:	0318                	addi	a4,sp,384
    674c:	0900                	addi	s0,sp,144
    674e:	0004                	0x4
    6750:	0001                	nop
    6752:	0402                	c.slli64	s0
    6754:	0318                	addi	a4,sp,384
    6756:	0900                	addi	s0,sp,144
    6758:	0000                	unimp
    675a:	0001                	nop
    675c:	0402                	c.slli64	s0
    675e:	0321                	addi	t1,t1,8
    6760:	0900                	addi	s0,sp,144
    6762:	0008                	0x8
    6764:	0001                	nop
    6766:	0402                	c.slli64	s0
    6768:	0321                	addi	t1,t1,8
    676a:	0900                	addi	s0,sp,144
    676c:	0008                	0x8
    676e:	0001                	nop
    6770:	0402                	c.slli64	s0
    6772:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    6776:	0008                	0x8
    6778:	0601                	addi	a2,a2,0
    677a:	08090003          	lb	zero,128(s2)
    677e:	0100                	addi	s0,sp,128
    6780:	0200                	addi	s0,sp,256
    6782:	0204                	addi	s1,sp,256
    6784:	0306                	slli	t1,t1,0x1
    6786:	0901                	addi	s2,s2,0
    6788:	0030                	addi	a2,sp,8
    678a:	0001                	nop
    678c:	0402                	c.slli64	s0
    678e:	030d                	addi	t1,t1,3
    6790:	0900                	addi	s0,sp,144
    6792:	0008                	0x8
    6794:	0001                	nop
    6796:	0402                	c.slli64	s0
    6798:	030d                	addi	t1,t1,3
    679a:	0900                	addi	s0,sp,144
    679c:	0000                	unimp
    679e:	0001                	nop
    67a0:	0402                	c.slli64	s0
    67a2:	030d                	addi	t1,t1,3
    67a4:	0900                	addi	s0,sp,144
    67a6:	0000                	unimp
    67a8:	0001                	nop
    67aa:	0402                	c.slli64	s0
    67ac:	030d                	addi	t1,t1,3
    67ae:	0900                	addi	s0,sp,144
    67b0:	0000                	unimp
    67b2:	0001                	nop
    67b4:	0402                	c.slli64	s0
    67b6:	0311                	addi	t1,t1,4
    67b8:	0900                	addi	s0,sp,144
    67ba:	0004                	0x4
    67bc:	0001                	nop
    67be:	0402                	c.slli64	s0
    67c0:	0311                	addi	t1,t1,4
    67c2:	0900                	addi	s0,sp,144
    67c4:	0000                	unimp
    67c6:	0001                	nop
    67c8:	0402                	c.slli64	s0
    67ca:	0311                	addi	t1,t1,4
    67cc:	0900                	addi	s0,sp,144
    67ce:	0000                	unimp
    67d0:	0001                	nop
    67d2:	0402                	c.slli64	s0
    67d4:	0311                	addi	t1,t1,4
    67d6:	0900                	addi	s0,sp,144
    67d8:	0000                	unimp
    67da:	0001                	nop
    67dc:	0402                	c.slli64	s0
    67de:	0311                	addi	t1,t1,4
    67e0:	0900                	addi	s0,sp,144
    67e2:	0008                	0x8
    67e4:	0001                	nop
    67e6:	0402                	c.slli64	s0
    67e8:	031f 0900 0000      	0x900031f
    67ee:	0001                	nop
    67f0:	0402                	c.slli64	s0
    67f2:	031f 0900 0000      	0x900031f
    67f8:	0001                	nop
    67fa:	0402                	c.slli64	s0
    67fc:	031f 0900 0004      	0x40900031f
    6802:	0001                	nop
    6804:	0402                	c.slli64	s0
    6806:	0320                	addi	s0,sp,392
    6808:	0900                	addi	s0,sp,144
    680a:	0008                	0x8
    680c:	0001                	nop
    680e:	0402                	c.slli64	s0
    6810:	0320                	addi	s0,sp,392
    6812:	0900                	addi	s0,sp,144
    6814:	0008                	0x8
    6816:	0001                	nop
    6818:	0402                	c.slli64	s0
    681a:	0320                	addi	s0,sp,392
    681c:	0900                	addi	s0,sp,144
    681e:	0010                	0x10
    6820:	0001                	nop
    6822:	0402                	c.slli64	s0
    6824:	0320                	addi	s0,sp,392
    6826:	0900                	addi	s0,sp,144
    6828:	0004                	0x4
    682a:	0001                	nop
    682c:	0402                	c.slli64	s0
    682e:	0329                	addi	t1,t1,10
    6830:	0900                	addi	s0,sp,144
    6832:	0000                	unimp
    6834:	0001                	nop
    6836:	0402                	c.slli64	s0
    6838:	0318                	addi	a4,sp,384
    683a:	0900                	addi	s0,sp,144
    683c:	000c                	0xc
    683e:	0001                	nop
    6840:	0402                	c.slli64	s0
    6842:	0318                	addi	a4,sp,384
    6844:	0900                	addi	s0,sp,144
    6846:	0000                	unimp
    6848:	0001                	nop
    684a:	0402                	c.slli64	s0
    684c:	0318                	addi	a4,sp,384
    684e:	0900                	addi	s0,sp,144
    6850:	0000                	unimp
    6852:	0001                	nop
    6854:	0402                	c.slli64	s0
    6856:	0318                	addi	a4,sp,384
    6858:	0900                	addi	s0,sp,144
    685a:	0000                	unimp
    685c:	0001                	nop
    685e:	0402                	c.slli64	s0
    6860:	0318                	addi	a4,sp,384
    6862:	0900                	addi	s0,sp,144
    6864:	0008                	0x8
    6866:	0001                	nop
    6868:	0402                	c.slli64	s0
    686a:	0318                	addi	a4,sp,384
    686c:	0900                	addi	s0,sp,144
    686e:	0000                	unimp
    6870:	0001                	nop
    6872:	0402                	c.slli64	s0
    6874:	0321                	addi	t1,t1,8
    6876:	0900                	addi	s0,sp,144
    6878:	0008                	0x8
    687a:	0001                	nop
    687c:	0402                	c.slli64	s0
    687e:	0321                	addi	t1,t1,8
    6880:	0900                	addi	s0,sp,144
    6882:	0008                	0x8
    6884:	0001                	nop
    6886:	0402                	c.slli64	s0
    6888:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    688c:	0008                	0x8
    688e:	0601                	addi	a2,a2,0
    6890:	08090003          	lb	zero,128(s2)
    6894:	0100                	addi	s0,sp,128
    6896:	0200                	addi	s0,sp,256
    6898:	0204                	addi	s1,sp,256
    689a:	0306                	slli	t1,t1,0x1
    689c:	0901                	addi	s2,s2,0
    689e:	0030                	addi	a2,sp,8
    68a0:	0001                	nop
    68a2:	0402                	c.slli64	s0
    68a4:	0302                	c.slli64	t1
    68a6:	0900                	addi	s0,sp,144
    68a8:	0000                	unimp
    68aa:	0001                	nop
    68ac:	0402                	c.slli64	s0
    68ae:	0302                	c.slli64	t1
    68b0:	0900                	addi	s0,sp,144
    68b2:	0000                	unimp
    68b4:	0001                	nop
    68b6:	0402                	c.slli64	s0
    68b8:	0302                	c.slli64	t1
    68ba:	0900                	addi	s0,sp,144
    68bc:	0000                	unimp
    68be:	0001                	nop
    68c0:	0402                	c.slli64	s0
    68c2:	0302                	c.slli64	t1
    68c4:	0900                	addi	s0,sp,144
    68c6:	0000                	unimp
    68c8:	0001                	nop
    68ca:	0402                	c.slli64	s0
    68cc:	0302                	c.slli64	t1
    68ce:	0900                	addi	s0,sp,144
    68d0:	0000                	unimp
    68d2:	0001                	nop
    68d4:	0402                	c.slli64	s0
    68d6:	0302                	c.slli64	t1
    68d8:	0900                	addi	s0,sp,144
    68da:	0000                	unimp
    68dc:	0001                	nop
    68de:	0402                	c.slli64	s0
    68e0:	0302                	c.slli64	t1
    68e2:	0900                	addi	s0,sp,144
    68e4:	0000                	unimp
    68e6:	0001                	nop
    68e8:	0402                	c.slli64	s0
    68ea:	0302                	c.slli64	t1
    68ec:	0900                	addi	s0,sp,144
    68ee:	0000                	unimp
    68f0:	0001                	nop
    68f2:	0402                	c.slli64	s0
    68f4:	0302                	c.slli64	t1
    68f6:	0900                	addi	s0,sp,144
    68f8:	0000                	unimp
    68fa:	0001                	nop
    68fc:	0402                	c.slli64	s0
    68fe:	0302                	c.slli64	t1
    6900:	0900                	addi	s0,sp,144
    6902:	0000                	unimp
    6904:	0001                	nop
    6906:	0402                	c.slli64	s0
    6908:	0302                	c.slli64	t1
    690a:	0900                	addi	s0,sp,144
    690c:	000c                	0xc
    690e:	0001                	nop
    6910:	0402                	c.slli64	s0
    6912:	0302                	c.slli64	t1
    6914:	0900                	addi	s0,sp,144
    6916:	0000                	unimp
    6918:	0001                	nop
    691a:	0402                	c.slli64	s0
    691c:	0302                	c.slli64	t1
    691e:	0900                	addi	s0,sp,144
    6920:	000c                	0xc
    6922:	0001                	nop
    6924:	0402                	c.slli64	s0
    6926:	0302                	c.slli64	t1
    6928:	0900                	addi	s0,sp,144
    692a:	0000                	unimp
    692c:	0001                	nop
    692e:	0402                	c.slli64	s0
    6930:	0302                	c.slli64	t1
    6932:	0900                	addi	s0,sp,144
    6934:	0004                	0x4
    6936:	0001                	nop
    6938:	0402                	c.slli64	s0
    693a:	0302                	c.slli64	t1
    693c:	0900                	addi	s0,sp,144
    693e:	0004                	0x4
    6940:	0001                	nop
    6942:	0402                	c.slli64	s0
    6944:	0302                	c.slli64	t1
    6946:	0900                	addi	s0,sp,144
    6948:	0004                	0x4
    694a:	0001                	nop
    694c:	0402                	c.slli64	s0
    694e:	0302                	c.slli64	t1
    6950:	0900                	addi	s0,sp,144
    6952:	0004                	0x4
    6954:	0001                	nop
    6956:	0402                	c.slli64	s0
    6958:	0302                	c.slli64	t1
    695a:	0900                	addi	s0,sp,144
    695c:	0000                	unimp
    695e:	0001                	nop
    6960:	0402                	c.slli64	s0
    6962:	0302                	c.slli64	t1
    6964:	0900                	addi	s0,sp,144
    6966:	0008                	0x8
    6968:	0001                	nop
    696a:	0402                	c.slli64	s0
    696c:	0302                	c.slli64	t1
    696e:	0900                	addi	s0,sp,144
    6970:	0000                	unimp
    6972:	0001                	nop
    6974:	0402                	c.slli64	s0
    6976:	0302                	c.slli64	t1
    6978:	0900                	addi	s0,sp,144
    697a:	0004                	0x4
    697c:	0001                	nop
    697e:	0402                	c.slli64	s0
    6980:	0302                	c.slli64	t1
    6982:	0900                	addi	s0,sp,144
    6984:	0004                	0x4
    6986:	0001                	nop
    6988:	0402                	c.slli64	s0
    698a:	0302                	c.slli64	t1
    698c:	0900                	addi	s0,sp,144
    698e:	0000                	unimp
    6990:	0001                	nop
    6992:	0402                	c.slli64	s0
    6994:	0302                	c.slli64	t1
    6996:	0900                	addi	s0,sp,144
    6998:	0008                	0x8
    699a:	0001                	nop
    699c:	0402                	c.slli64	s0
    699e:	0302                	c.slli64	t1
    69a0:	0900                	addi	s0,sp,144
    69a2:	0000                	unimp
    69a4:	0001                	nop
    69a6:	0402                	c.slli64	s0
    69a8:	0302                	c.slli64	t1
    69aa:	0900                	addi	s0,sp,144
    69ac:	0004                	0x4
    69ae:	0001                	nop
    69b0:	0402                	c.slli64	s0
    69b2:	0302                	c.slli64	t1
    69b4:	0900                	addi	s0,sp,144
    69b6:	0004                	0x4
    69b8:	0001                	nop
    69ba:	0402                	c.slli64	s0
    69bc:	0302                	c.slli64	t1
    69be:	0900                	addi	s0,sp,144
    69c0:	0000                	unimp
    69c2:	0001                	nop
    69c4:	0402                	c.slli64	s0
    69c6:	0302                	c.slli64	t1
    69c8:	0900                	addi	s0,sp,144
    69ca:	0008                	0x8
    69cc:	0001                	nop
    69ce:	0402                	c.slli64	s0
    69d0:	0302                	c.slli64	t1
    69d2:	0900                	addi	s0,sp,144
    69d4:	0000                	unimp
    69d6:	0001                	nop
    69d8:	0402                	c.slli64	s0
    69da:	0302                	c.slli64	t1
    69dc:	0900                	addi	s0,sp,144
    69de:	0004                	0x4
    69e0:	0001                	nop
    69e2:	0402                	c.slli64	s0
    69e4:	0302                	c.slli64	t1
    69e6:	0900                	addi	s0,sp,144
    69e8:	0010                	0x10
    69ea:	0001                	nop
    69ec:	0402                	c.slli64	s0
    69ee:	0302                	c.slli64	t1
    69f0:	0900                	addi	s0,sp,144
    69f2:	0000                	unimp
    69f4:	0001                	nop
    69f6:	0402                	c.slli64	s0
    69f8:	0302                	c.slli64	t1
    69fa:	0900                	addi	s0,sp,144
    69fc:	0000                	unimp
    69fe:	0001                	nop
    6a00:	0402                	c.slli64	s0
    6a02:	0309                	addi	t1,t1,2
    6a04:	0900                	addi	s0,sp,144
    6a06:	0004                	0x4
    6a08:	0001                	nop
    6a0a:	0402                	c.slli64	s0
    6a0c:	0900030b          	0x900030b
    6a10:	0004                	0x4
    6a12:	0001                	nop
    6a14:	0402                	c.slli64	s0
    6a16:	0900030b          	0x900030b
    6a1a:	001c                	0x1c
    6a1c:	0001                	nop
    6a1e:	0402                	c.slli64	s0
    6a20:	0900030b          	0x900030b
    6a24:	0000                	unimp
    6a26:	0001                	nop
    6a28:	0402                	c.slli64	s0
    6a2a:	0900030b          	0x900030b
    6a2e:	0000                	unimp
    6a30:	0001                	nop
    6a32:	0402                	c.slli64	s0
    6a34:	0900030b          	0x900030b
    6a38:	0000                	unimp
    6a3a:	0001                	nop
    6a3c:	0402                	c.slli64	s0
    6a3e:	0900030b          	0x900030b
    6a42:	0000                	unimp
    6a44:	0001                	nop
    6a46:	0402                	c.slli64	s0
    6a48:	0900030b          	0x900030b
    6a4c:	0000                	unimp
    6a4e:	0001                	nop
    6a50:	0402                	c.slli64	s0
    6a52:	0900030b          	0x900030b
    6a56:	0000                	unimp
    6a58:	0001                	nop
    6a5a:	0402                	c.slli64	s0
    6a5c:	0900030b          	0x900030b
    6a60:	0000                	unimp
    6a62:	0001                	nop
    6a64:	0402                	c.slli64	s0
    6a66:	0900030b          	0x900030b
    6a6a:	0000                	unimp
    6a6c:	0001                	nop
    6a6e:	0402                	c.slli64	s0
    6a70:	0900030b          	0x900030b
    6a74:	0000                	unimp
    6a76:	0001                	nop
    6a78:	0402                	c.slli64	s0
    6a7a:	0900030b          	0x900030b
    6a7e:	0000                	unimp
    6a80:	0001                	nop
    6a82:	0402                	c.slli64	s0
    6a84:	0900030b          	0x900030b
    6a88:	0004                	0x4
    6a8a:	0001                	nop
    6a8c:	0402                	c.slli64	s0
    6a8e:	0900030b          	0x900030b
    6a92:	0004                	0x4
    6a94:	0001                	nop
    6a96:	0402                	c.slli64	s0
    6a98:	0900030b          	0x900030b
    6a9c:	0004                	0x4
    6a9e:	0001                	nop
    6aa0:	0402                	c.slli64	s0
    6aa2:	0900030b          	0x900030b
    6aa6:	0004                	0x4
    6aa8:	0001                	nop
    6aaa:	0402                	c.slli64	s0
    6aac:	0900030b          	0x900030b
    6ab0:	0000                	unimp
    6ab2:	0001                	nop
    6ab4:	0402                	c.slli64	s0
    6ab6:	0900030b          	0x900030b
    6aba:	0008                	0x8
    6abc:	0001                	nop
    6abe:	0402                	c.slli64	s0
    6ac0:	0900030b          	0x900030b
    6ac4:	0000                	unimp
    6ac6:	0001                	nop
    6ac8:	0402                	c.slli64	s0
    6aca:	0900030b          	0x900030b
    6ace:	0004                	0x4
    6ad0:	0001                	nop
    6ad2:	0402                	c.slli64	s0
    6ad4:	0900030b          	0x900030b
    6ad8:	0004                	0x4
    6ada:	0001                	nop
    6adc:	0402                	c.slli64	s0
    6ade:	0900030b          	0x900030b
    6ae2:	0000                	unimp
    6ae4:	0001                	nop
    6ae6:	0402                	c.slli64	s0
    6ae8:	0900030b          	0x900030b
    6aec:	0008                	0x8
    6aee:	0001                	nop
    6af0:	0402                	c.slli64	s0
    6af2:	0900030b          	0x900030b
    6af6:	0000                	unimp
    6af8:	0001                	nop
    6afa:	0402                	c.slli64	s0
    6afc:	0900030b          	0x900030b
    6b00:	0004                	0x4
    6b02:	0001                	nop
    6b04:	0402                	c.slli64	s0
    6b06:	0900030b          	0x900030b
    6b0a:	0004                	0x4
    6b0c:	0001                	nop
    6b0e:	0402                	c.slli64	s0
    6b10:	0900030b          	0x900030b
    6b14:	0000                	unimp
    6b16:	0001                	nop
    6b18:	0402                	c.slli64	s0
    6b1a:	0900030b          	0x900030b
    6b1e:	0008                	0x8
    6b20:	0001                	nop
    6b22:	0402                	c.slli64	s0
    6b24:	0900030b          	0x900030b
    6b28:	0000                	unimp
    6b2a:	0001                	nop
    6b2c:	0402                	c.slli64	s0
    6b2e:	0900030b          	0x900030b
    6b32:	0004                	0x4
    6b34:	0001                	nop
    6b36:	0402                	c.slli64	s0
    6b38:	0900030b          	0x900030b
    6b3c:	0010                	0x10
    6b3e:	0001                	nop
    6b40:	0402                	c.slli64	s0
    6b42:	0900030b          	0x900030b
    6b46:	0000                	unimp
    6b48:	0001                	nop
    6b4a:	0402                	c.slli64	s0
    6b4c:	0900030b          	0x900030b
    6b50:	0000                	unimp
    6b52:	0001                	nop
    6b54:	0402                	c.slli64	s0
    6b56:	030c                	addi	a1,sp,384
    6b58:	0900                	addi	s0,sp,144
    6b5a:	0004                	0x4
    6b5c:	0001                	nop
    6b5e:	0402                	c.slli64	s0
    6b60:	030e                	slli	t1,t1,0x3
    6b62:	0900                	addi	s0,sp,144
    6b64:	0008                	0x8
    6b66:	0001                	nop
    6b68:	0402                	c.slli64	s0
    6b6a:	030e                	slli	t1,t1,0x3
    6b6c:	0900                	addi	s0,sp,144
    6b6e:	0028                	addi	a0,sp,8
    6b70:	0001                	nop
    6b72:	0402                	c.slli64	s0
    6b74:	030e                	slli	t1,t1,0x3
    6b76:	0900                	addi	s0,sp,144
    6b78:	0004                	0x4
    6b7a:	0001                	nop
    6b7c:	0402                	c.slli64	s0
    6b7e:	030e                	slli	t1,t1,0x3
    6b80:	0900                	addi	s0,sp,144
    6b82:	0000                	unimp
    6b84:	0001                	nop
    6b86:	0402                	c.slli64	s0
    6b88:	030e                	slli	t1,t1,0x3
    6b8a:	0900                	addi	s0,sp,144
    6b8c:	0000                	unimp
    6b8e:	0001                	nop
    6b90:	0402                	c.slli64	s0
    6b92:	030e                	slli	t1,t1,0x3
    6b94:	0900                	addi	s0,sp,144
    6b96:	0000                	unimp
    6b98:	0001                	nop
    6b9a:	0402                	c.slli64	s0
    6b9c:	030e                	slli	t1,t1,0x3
    6b9e:	0900                	addi	s0,sp,144
    6ba0:	0000                	unimp
    6ba2:	0001                	nop
    6ba4:	0402                	c.slli64	s0
    6ba6:	030e                	slli	t1,t1,0x3
    6ba8:	0900                	addi	s0,sp,144
    6baa:	0000                	unimp
    6bac:	0001                	nop
    6bae:	0402                	c.slli64	s0
    6bb0:	030e                	slli	t1,t1,0x3
    6bb2:	0900                	addi	s0,sp,144
    6bb4:	0000                	unimp
    6bb6:	0001                	nop
    6bb8:	0402                	c.slli64	s0
    6bba:	030e                	slli	t1,t1,0x3
    6bbc:	0900                	addi	s0,sp,144
    6bbe:	0000                	unimp
    6bc0:	0001                	nop
    6bc2:	0402                	c.slli64	s0
    6bc4:	030e                	slli	t1,t1,0x3
    6bc6:	0900                	addi	s0,sp,144
    6bc8:	0000                	unimp
    6bca:	0001                	nop
    6bcc:	0402                	c.slli64	s0
    6bce:	030e                	slli	t1,t1,0x3
    6bd0:	0900                	addi	s0,sp,144
    6bd2:	0000                	unimp
    6bd4:	0001                	nop
    6bd6:	0402                	c.slli64	s0
    6bd8:	030e                	slli	t1,t1,0x3
    6bda:	0900                	addi	s0,sp,144
    6bdc:	0004                	0x4
    6bde:	0001                	nop
    6be0:	0402                	c.slli64	s0
    6be2:	030e                	slli	t1,t1,0x3
    6be4:	0900                	addi	s0,sp,144
    6be6:	0004                	0x4
    6be8:	0001                	nop
    6bea:	0402                	c.slli64	s0
    6bec:	030e                	slli	t1,t1,0x3
    6bee:	0900                	addi	s0,sp,144
    6bf0:	0004                	0x4
    6bf2:	0001                	nop
    6bf4:	0402                	c.slli64	s0
    6bf6:	030e                	slli	t1,t1,0x3
    6bf8:	0900                	addi	s0,sp,144
    6bfa:	0004                	0x4
    6bfc:	0001                	nop
    6bfe:	0402                	c.slli64	s0
    6c00:	030e                	slli	t1,t1,0x3
    6c02:	0900                	addi	s0,sp,144
    6c04:	0000                	unimp
    6c06:	0001                	nop
    6c08:	0402                	c.slli64	s0
    6c0a:	030e                	slli	t1,t1,0x3
    6c0c:	0900                	addi	s0,sp,144
    6c0e:	0008                	0x8
    6c10:	0001                	nop
    6c12:	0402                	c.slli64	s0
    6c14:	030e                	slli	t1,t1,0x3
    6c16:	0900                	addi	s0,sp,144
    6c18:	0000                	unimp
    6c1a:	0001                	nop
    6c1c:	0402                	c.slli64	s0
    6c1e:	030e                	slli	t1,t1,0x3
    6c20:	0900                	addi	s0,sp,144
    6c22:	0004                	0x4
    6c24:	0001                	nop
    6c26:	0402                	c.slli64	s0
    6c28:	030e                	slli	t1,t1,0x3
    6c2a:	0900                	addi	s0,sp,144
    6c2c:	0004                	0x4
    6c2e:	0001                	nop
    6c30:	0402                	c.slli64	s0
    6c32:	030e                	slli	t1,t1,0x3
    6c34:	0900                	addi	s0,sp,144
    6c36:	0000                	unimp
    6c38:	0001                	nop
    6c3a:	0402                	c.slli64	s0
    6c3c:	030e                	slli	t1,t1,0x3
    6c3e:	0900                	addi	s0,sp,144
    6c40:	0008                	0x8
    6c42:	0001                	nop
    6c44:	0402                	c.slli64	s0
    6c46:	030e                	slli	t1,t1,0x3
    6c48:	0900                	addi	s0,sp,144
    6c4a:	0000                	unimp
    6c4c:	0001                	nop
    6c4e:	0402                	c.slli64	s0
    6c50:	030e                	slli	t1,t1,0x3
    6c52:	0900                	addi	s0,sp,144
    6c54:	0004                	0x4
    6c56:	0001                	nop
    6c58:	0402                	c.slli64	s0
    6c5a:	030e                	slli	t1,t1,0x3
    6c5c:	0900                	addi	s0,sp,144
    6c5e:	0004                	0x4
    6c60:	0001                	nop
    6c62:	0402                	c.slli64	s0
    6c64:	030e                	slli	t1,t1,0x3
    6c66:	0900                	addi	s0,sp,144
    6c68:	0000                	unimp
    6c6a:	0001                	nop
    6c6c:	0402                	c.slli64	s0
    6c6e:	030e                	slli	t1,t1,0x3
    6c70:	0900                	addi	s0,sp,144
    6c72:	0008                	0x8
    6c74:	0001                	nop
    6c76:	0402                	c.slli64	s0
    6c78:	030e                	slli	t1,t1,0x3
    6c7a:	0900                	addi	s0,sp,144
    6c7c:	0000                	unimp
    6c7e:	0001                	nop
    6c80:	0402                	c.slli64	s0
    6c82:	030e                	slli	t1,t1,0x3
    6c84:	0900                	addi	s0,sp,144
    6c86:	0004                	0x4
    6c88:	0001                	nop
    6c8a:	0402                	c.slli64	s0
    6c8c:	030e                	slli	t1,t1,0x3
    6c8e:	0900                	addi	s0,sp,144
    6c90:	0010                	0x10
    6c92:	0001                	nop
    6c94:	0402                	c.slli64	s0
    6c96:	030e                	slli	t1,t1,0x3
    6c98:	0900                	addi	s0,sp,144
    6c9a:	0000                	unimp
    6c9c:	0001                	nop
    6c9e:	0402                	c.slli64	s0
    6ca0:	030e                	slli	t1,t1,0x3
    6ca2:	0900                	addi	s0,sp,144
    6ca4:	0000                	unimp
    6ca6:	0001                	nop
    6ca8:	0402                	c.slli64	s0
    6caa:	0900030f          	0x900030f
    6cae:	0004                	0x4
    6cb0:	0001                	nop
    6cb2:	0402                	c.slli64	s0
    6cb4:	0311                	addi	t1,t1,4
    6cb6:	0900                	addi	s0,sp,144
    6cb8:	0004                	0x4
    6cba:	0001                	nop
    6cbc:	0402                	c.slli64	s0
    6cbe:	0311                	addi	t1,t1,4
    6cc0:	0900                	addi	s0,sp,144
    6cc2:	001c                	0x1c
    6cc4:	0001                	nop
    6cc6:	0402                	c.slli64	s0
    6cc8:	0311                	addi	t1,t1,4
    6cca:	0900                	addi	s0,sp,144
    6ccc:	0004                	0x4
    6cce:	0001                	nop
    6cd0:	0402                	c.slli64	s0
    6cd2:	0311                	addi	t1,t1,4
    6cd4:	0900                	addi	s0,sp,144
    6cd6:	0000                	unimp
    6cd8:	0001                	nop
    6cda:	0402                	c.slli64	s0
    6cdc:	0311                	addi	t1,t1,4
    6cde:	0900                	addi	s0,sp,144
    6ce0:	0000                	unimp
    6ce2:	0001                	nop
    6ce4:	0402                	c.slli64	s0
    6ce6:	0311                	addi	t1,t1,4
    6ce8:	0900                	addi	s0,sp,144
    6cea:	0000                	unimp
    6cec:	0001                	nop
    6cee:	0402                	c.slli64	s0
    6cf0:	0311                	addi	t1,t1,4
    6cf2:	0900                	addi	s0,sp,144
    6cf4:	0000                	unimp
    6cf6:	0001                	nop
    6cf8:	0402                	c.slli64	s0
    6cfa:	0311                	addi	t1,t1,4
    6cfc:	0900                	addi	s0,sp,144
    6cfe:	0000                	unimp
    6d00:	0001                	nop
    6d02:	0402                	c.slli64	s0
    6d04:	0311                	addi	t1,t1,4
    6d06:	0900                	addi	s0,sp,144
    6d08:	0000                	unimp
    6d0a:	0001                	nop
    6d0c:	0402                	c.slli64	s0
    6d0e:	0311                	addi	t1,t1,4
    6d10:	0900                	addi	s0,sp,144
    6d12:	0000                	unimp
    6d14:	0001                	nop
    6d16:	0402                	c.slli64	s0
    6d18:	0311                	addi	t1,t1,4
    6d1a:	0900                	addi	s0,sp,144
    6d1c:	0000                	unimp
    6d1e:	0001                	nop
    6d20:	0402                	c.slli64	s0
    6d22:	0311                	addi	t1,t1,4
    6d24:	0900                	addi	s0,sp,144
    6d26:	0000                	unimp
    6d28:	0001                	nop
    6d2a:	0402                	c.slli64	s0
    6d2c:	0311                	addi	t1,t1,4
    6d2e:	0900                	addi	s0,sp,144
    6d30:	0004                	0x4
    6d32:	0001                	nop
    6d34:	0402                	c.slli64	s0
    6d36:	0311                	addi	t1,t1,4
    6d38:	0900                	addi	s0,sp,144
    6d3a:	0004                	0x4
    6d3c:	0001                	nop
    6d3e:	0402                	c.slli64	s0
    6d40:	0311                	addi	t1,t1,4
    6d42:	0900                	addi	s0,sp,144
    6d44:	0004                	0x4
    6d46:	0001                	nop
    6d48:	0402                	c.slli64	s0
    6d4a:	0311                	addi	t1,t1,4
    6d4c:	0900                	addi	s0,sp,144
    6d4e:	0004                	0x4
    6d50:	0001                	nop
    6d52:	0402                	c.slli64	s0
    6d54:	0311                	addi	t1,t1,4
    6d56:	0900                	addi	s0,sp,144
    6d58:	0000                	unimp
    6d5a:	0001                	nop
    6d5c:	0402                	c.slli64	s0
    6d5e:	0311                	addi	t1,t1,4
    6d60:	0900                	addi	s0,sp,144
    6d62:	0008                	0x8
    6d64:	0001                	nop
    6d66:	0402                	c.slli64	s0
    6d68:	0311                	addi	t1,t1,4
    6d6a:	0900                	addi	s0,sp,144
    6d6c:	0000                	unimp
    6d6e:	0001                	nop
    6d70:	0402                	c.slli64	s0
    6d72:	0311                	addi	t1,t1,4
    6d74:	0900                	addi	s0,sp,144
    6d76:	0004                	0x4
    6d78:	0001                	nop
    6d7a:	0402                	c.slli64	s0
    6d7c:	0311                	addi	t1,t1,4
    6d7e:	0900                	addi	s0,sp,144
    6d80:	0004                	0x4
    6d82:	0001                	nop
    6d84:	0402                	c.slli64	s0
    6d86:	0311                	addi	t1,t1,4
    6d88:	0900                	addi	s0,sp,144
    6d8a:	0000                	unimp
    6d8c:	0001                	nop
    6d8e:	0402                	c.slli64	s0
    6d90:	0311                	addi	t1,t1,4
    6d92:	0900                	addi	s0,sp,144
    6d94:	0008                	0x8
    6d96:	0001                	nop
    6d98:	0402                	c.slli64	s0
    6d9a:	0311                	addi	t1,t1,4
    6d9c:	0900                	addi	s0,sp,144
    6d9e:	0000                	unimp
    6da0:	0001                	nop
    6da2:	0402                	c.slli64	s0
    6da4:	0311                	addi	t1,t1,4
    6da6:	0900                	addi	s0,sp,144
    6da8:	0004                	0x4
    6daa:	0001                	nop
    6dac:	0402                	c.slli64	s0
    6dae:	0311                	addi	t1,t1,4
    6db0:	0900                	addi	s0,sp,144
    6db2:	0004                	0x4
    6db4:	0001                	nop
    6db6:	0402                	c.slli64	s0
    6db8:	0311                	addi	t1,t1,4
    6dba:	0900                	addi	s0,sp,144
    6dbc:	0000                	unimp
    6dbe:	0001                	nop
    6dc0:	0402                	c.slli64	s0
    6dc2:	0311                	addi	t1,t1,4
    6dc4:	0900                	addi	s0,sp,144
    6dc6:	0008                	0x8
    6dc8:	0001                	nop
    6dca:	0402                	c.slli64	s0
    6dcc:	0311                	addi	t1,t1,4
    6dce:	0900                	addi	s0,sp,144
    6dd0:	0000                	unimp
    6dd2:	0001                	nop
    6dd4:	0402                	c.slli64	s0
    6dd6:	0311                	addi	t1,t1,4
    6dd8:	0900                	addi	s0,sp,144
    6dda:	0004                	0x4
    6ddc:	0001                	nop
    6dde:	0402                	c.slli64	s0
    6de0:	0311                	addi	t1,t1,4
    6de2:	0900                	addi	s0,sp,144
    6de4:	0010                	0x10
    6de6:	0001                	nop
    6de8:	0402                	c.slli64	s0
    6dea:	0311                	addi	t1,t1,4
    6dec:	0900                	addi	s0,sp,144
    6dee:	0000                	unimp
    6df0:	0001                	nop
    6df2:	0402                	c.slli64	s0
    6df4:	0311                	addi	t1,t1,4
    6df6:	0900                	addi	s0,sp,144
    6df8:	0000                	unimp
    6dfa:	0001                	nop
    6dfc:	0402                	c.slli64	s0
    6dfe:	0312                	slli	t1,t1,0x4
    6e00:	0900                	addi	s0,sp,144
    6e02:	0004                	0x4
    6e04:	0001                	nop
    6e06:	0402                	c.slli64	s0
    6e08:	0314                	addi	a3,sp,384
    6e0a:	0900                	addi	s0,sp,144
    6e0c:	0004                	0x4
    6e0e:	0001                	nop
    6e10:	0402                	c.slli64	s0
    6e12:	0314                	addi	a3,sp,384
    6e14:	0900                	addi	s0,sp,144
    6e16:	0000                	unimp
    6e18:	0001                	nop
    6e1a:	0402                	c.slli64	s0
    6e1c:	0314                	addi	a3,sp,384
    6e1e:	0900                	addi	s0,sp,144
    6e20:	0000                	unimp
    6e22:	0001                	nop
    6e24:	0402                	c.slli64	s0
    6e26:	0314                	addi	a3,sp,384
    6e28:	0900                	addi	s0,sp,144
    6e2a:	0000                	unimp
    6e2c:	0001                	nop
    6e2e:	0402                	c.slli64	s0
    6e30:	0314                	addi	a3,sp,384
    6e32:	0900                	addi	s0,sp,144
    6e34:	0000                	unimp
    6e36:	0001                	nop
    6e38:	0402                	c.slli64	s0
    6e3a:	0314                	addi	a3,sp,384
    6e3c:	0900                	addi	s0,sp,144
    6e3e:	0000                	unimp
    6e40:	0001                	nop
    6e42:	0402                	c.slli64	s0
    6e44:	0314                	addi	a3,sp,384
    6e46:	0900                	addi	s0,sp,144
    6e48:	0018                	0x18
    6e4a:	0001                	nop
    6e4c:	0402                	c.slli64	s0
    6e4e:	0314                	addi	a3,sp,384
    6e50:	0900                	addi	s0,sp,144
    6e52:	0008                	0x8
    6e54:	0001                	nop
    6e56:	0402                	c.slli64	s0
    6e58:	0314                	addi	a3,sp,384
    6e5a:	0900                	addi	s0,sp,144
    6e5c:	0004                	0x4
    6e5e:	0001                	nop
    6e60:	0402                	c.slli64	s0
    6e62:	0314                	addi	a3,sp,384
    6e64:	0900                	addi	s0,sp,144
    6e66:	0000                	unimp
    6e68:	0001                	nop
    6e6a:	0402                	c.slli64	s0
    6e6c:	0314                	addi	a3,sp,384
    6e6e:	0900                	addi	s0,sp,144
    6e70:	0004                	0x4
    6e72:	0001                	nop
    6e74:	0402                	c.slli64	s0
    6e76:	0314                	addi	a3,sp,384
    6e78:	0900                	addi	s0,sp,144
    6e7a:	0000                	unimp
    6e7c:	0001                	nop
    6e7e:	0402                	c.slli64	s0
    6e80:	0314                	addi	a3,sp,384
    6e82:	0900                	addi	s0,sp,144
    6e84:	0000                	unimp
    6e86:	0001                	nop
    6e88:	0402                	c.slli64	s0
    6e8a:	0314                	addi	a3,sp,384
    6e8c:	0900                	addi	s0,sp,144
    6e8e:	0000                	unimp
    6e90:	0001                	nop
    6e92:	0402                	c.slli64	s0
    6e94:	0314                	addi	a3,sp,384
    6e96:	0900                	addi	s0,sp,144
    6e98:	0000                	unimp
    6e9a:	0001                	nop
    6e9c:	0402                	c.slli64	s0
    6e9e:	0314                	addi	a3,sp,384
    6ea0:	0900                	addi	s0,sp,144
    6ea2:	0000                	unimp
    6ea4:	0001                	nop
    6ea6:	0402                	c.slli64	s0
    6ea8:	0314                	addi	a3,sp,384
    6eaa:	0900                	addi	s0,sp,144
    6eac:	0004                	0x4
    6eae:	0001                	nop
    6eb0:	0402                	c.slli64	s0
    6eb2:	0314                	addi	a3,sp,384
    6eb4:	0900                	addi	s0,sp,144
    6eb6:	0004                	0x4
    6eb8:	0001                	nop
    6eba:	0402                	c.slli64	s0
    6ebc:	0314                	addi	a3,sp,384
    6ebe:	0900                	addi	s0,sp,144
    6ec0:	0004                	0x4
    6ec2:	0001                	nop
    6ec4:	0402                	c.slli64	s0
    6ec6:	0314                	addi	a3,sp,384
    6ec8:	0900                	addi	s0,sp,144
    6eca:	0000                	unimp
    6ecc:	0001                	nop
    6ece:	0402                	c.slli64	s0
    6ed0:	0314                	addi	a3,sp,384
    6ed2:	0900                	addi	s0,sp,144
    6ed4:	0004                	0x4
    6ed6:	0001                	nop
    6ed8:	0402                	c.slli64	s0
    6eda:	0314                	addi	a3,sp,384
    6edc:	0900                	addi	s0,sp,144
    6ede:	0000                	unimp
    6ee0:	0001                	nop
    6ee2:	0402                	c.slli64	s0
    6ee4:	0314                	addi	a3,sp,384
    6ee6:	0900                	addi	s0,sp,144
    6ee8:	0000                	unimp
    6eea:	0001                	nop
    6eec:	0402                	c.slli64	s0
    6eee:	0314                	addi	a3,sp,384
    6ef0:	0900                	addi	s0,sp,144
    6ef2:	0000                	unimp
    6ef4:	0001                	nop
    6ef6:	0402                	c.slli64	s0
    6ef8:	0314                	addi	a3,sp,384
    6efa:	0900                	addi	s0,sp,144
    6efc:	0000                	unimp
    6efe:	0001                	nop
    6f00:	0402                	c.slli64	s0
    6f02:	0314                	addi	a3,sp,384
    6f04:	0900                	addi	s0,sp,144
    6f06:	0000                	unimp
    6f08:	0001                	nop
    6f0a:	0402                	c.slli64	s0
    6f0c:	0314                	addi	a3,sp,384
    6f0e:	0900                	addi	s0,sp,144
    6f10:	0000                	unimp
    6f12:	0001                	nop
    6f14:	0402                	c.slli64	s0
    6f16:	0314                	addi	a3,sp,384
    6f18:	0900                	addi	s0,sp,144
    6f1a:	0000                	unimp
    6f1c:	0001                	nop
    6f1e:	0402                	c.slli64	s0
    6f20:	0314                	addi	a3,sp,384
    6f22:	0900                	addi	s0,sp,144
    6f24:	0000                	unimp
    6f26:	0001                	nop
    6f28:	0402                	c.slli64	s0
    6f2a:	0314                	addi	a3,sp,384
    6f2c:	0900                	addi	s0,sp,144
    6f2e:	0000                	unimp
    6f30:	0001                	nop
    6f32:	0402                	c.slli64	s0
    6f34:	0314                	addi	a3,sp,384
    6f36:	0900                	addi	s0,sp,144
    6f38:	0000                	unimp
    6f3a:	0001                	nop
    6f3c:	0402                	c.slli64	s0
    6f3e:	0314                	addi	a3,sp,384
    6f40:	0900                	addi	s0,sp,144
    6f42:	0000                	unimp
    6f44:	0001                	nop
    6f46:	0402                	c.slli64	s0
    6f48:	0314                	addi	a3,sp,384
    6f4a:	0900                	addi	s0,sp,144
    6f4c:	0000                	unimp
    6f4e:	0001                	nop
    6f50:	0402                	c.slli64	s0
    6f52:	0314                	addi	a3,sp,384
    6f54:	0900                	addi	s0,sp,144
    6f56:	0000                	unimp
    6f58:	0001                	nop
    6f5a:	0402                	c.slli64	s0
    6f5c:	0314                	addi	a3,sp,384
    6f5e:	0900                	addi	s0,sp,144
    6f60:	0000                	unimp
    6f62:	0001                	nop
    6f64:	0402                	c.slli64	s0
    6f66:	0314                	addi	a3,sp,384
    6f68:	0900                	addi	s0,sp,144
    6f6a:	0000                	unimp
    6f6c:	0001                	nop
    6f6e:	0402                	c.slli64	s0
    6f70:	0314                	addi	a3,sp,384
    6f72:	0900                	addi	s0,sp,144
    6f74:	0000                	unimp
    6f76:	0001                	nop
    6f78:	0402                	c.slli64	s0
    6f7a:	0314                	addi	a3,sp,384
    6f7c:	0900                	addi	s0,sp,144
    6f7e:	0000                	unimp
    6f80:	0001                	nop
    6f82:	0402                	c.slli64	s0
    6f84:	0314                	addi	a3,sp,384
    6f86:	0900                	addi	s0,sp,144
    6f88:	0000                	unimp
    6f8a:	0001                	nop
    6f8c:	0402                	c.slli64	s0
    6f8e:	0314                	addi	a3,sp,384
    6f90:	0900                	addi	s0,sp,144
    6f92:	0000                	unimp
    6f94:	0001                	nop
    6f96:	0402                	c.slli64	s0
    6f98:	0314                	addi	a3,sp,384
    6f9a:	0900                	addi	s0,sp,144
    6f9c:	0000                	unimp
    6f9e:	0001                	nop
    6fa0:	0402                	c.slli64	s0
    6fa2:	0314                	addi	a3,sp,384
    6fa4:	0900                	addi	s0,sp,144
    6fa6:	0000                	unimp
    6fa8:	0001                	nop
    6faa:	0402                	c.slli64	s0
    6fac:	0314                	addi	a3,sp,384
    6fae:	0900                	addi	s0,sp,144
    6fb0:	0000                	unimp
    6fb2:	0001                	nop
    6fb4:	0402                	c.slli64	s0
    6fb6:	0314                	addi	a3,sp,384
    6fb8:	0900                	addi	s0,sp,144
    6fba:	0000                	unimp
    6fbc:	0001                	nop
    6fbe:	0402                	c.slli64	s0
    6fc0:	0314                	addi	a3,sp,384
    6fc2:	0900                	addi	s0,sp,144
    6fc4:	0000                	unimp
    6fc6:	0001                	nop
    6fc8:	0402                	c.slli64	s0
    6fca:	0314                	addi	a3,sp,384
    6fcc:	0900                	addi	s0,sp,144
    6fce:	0000                	unimp
    6fd0:	0001                	nop
    6fd2:	0402                	c.slli64	s0
    6fd4:	0314                	addi	a3,sp,384
    6fd6:	0900                	addi	s0,sp,144
    6fd8:	0034                	addi	a3,sp,8
    6fda:	0001                	nop
    6fdc:	0402                	c.slli64	s0
    6fde:	0314                	addi	a3,sp,384
    6fe0:	0900                	addi	s0,sp,144
    6fe2:	0000                	unimp
    6fe4:	0001                	nop
    6fe6:	0402                	c.slli64	s0
    6fe8:	0314                	addi	a3,sp,384
    6fea:	0900                	addi	s0,sp,144
    6fec:	0000                	unimp
    6fee:	0001                	nop
    6ff0:	0402                	c.slli64	s0
    6ff2:	0314                	addi	a3,sp,384
    6ff4:	0900                	addi	s0,sp,144
    6ff6:	0000                	unimp
    6ff8:	0001                	nop
    6ffa:	0402                	c.slli64	s0
    6ffc:	0314                	addi	a3,sp,384
    6ffe:	0900                	addi	s0,sp,144
    7000:	0000                	unimp
    7002:	0001                	nop
    7004:	0402                	c.slli64	s0
    7006:	0314                	addi	a3,sp,384
    7008:	0900                	addi	s0,sp,144
    700a:	0000                	unimp
    700c:	0001                	nop
    700e:	0402                	c.slli64	s0
    7010:	0314                	addi	a3,sp,384
    7012:	0900                	addi	s0,sp,144
    7014:	0000                	unimp
    7016:	0001                	nop
    7018:	0402                	c.slli64	s0
    701a:	0314                	addi	a3,sp,384
    701c:	0900                	addi	s0,sp,144
    701e:	001c                	0x1c
    7020:	0001                	nop
    7022:	0402                	c.slli64	s0
    7024:	0314                	addi	a3,sp,384
    7026:	0900                	addi	s0,sp,144
    7028:	0000                	unimp
    702a:	0001                	nop
    702c:	0402                	c.slli64	s0
    702e:	0314                	addi	a3,sp,384
    7030:	0900                	addi	s0,sp,144
    7032:	0000                	unimp
    7034:	0001                	nop
    7036:	0402                	c.slli64	s0
    7038:	0314                	addi	a3,sp,384
    703a:	0900                	addi	s0,sp,144
    703c:	0000                	unimp
    703e:	0001                	nop
    7040:	0402                	c.slli64	s0
    7042:	0314                	addi	a3,sp,384
    7044:	0900                	addi	s0,sp,144
    7046:	0000                	unimp
    7048:	0001                	nop
    704a:	0402                	c.slli64	s0
    704c:	0326                	slli	t1,t1,0x9
    704e:	0900                	addi	s0,sp,144
    7050:	000c                	0xc
    7052:	0001                	nop
    7054:	0402                	c.slli64	s0
    7056:	0326                	slli	t1,t1,0x9
    7058:	0900                	addi	s0,sp,144
    705a:	0000                	unimp
    705c:	0001                	nop
    705e:	0402                	c.slli64	s0
    7060:	0326                	slli	t1,t1,0x9
    7062:	0900                	addi	s0,sp,144
    7064:	0014                	0x14
    7066:	0001                	nop
    7068:	0402                	c.slli64	s0
    706a:	0302                	c.slli64	t1
    706c:	0901                	addi	s2,s2,0
    706e:	0004                	0x4
    7070:	0001                	nop
    7072:	0402                	c.slli64	s0
    7074:	0302                	c.slli64	t1
    7076:	0900                	addi	s0,sp,144
    7078:	0004                	0x4
    707a:	0001                	nop
    707c:	0402                	c.slli64	s0
    707e:	0306                	slli	t1,t1,0x1
    7080:	0900                	addi	s0,sp,144
    7082:	0004                	0x4
    7084:	0001                	nop
    7086:	0402                	c.slli64	s0
    7088:	0306                	slli	t1,t1,0x1
    708a:	0900                	addi	s0,sp,144
    708c:	0000                	unimp
    708e:	0001                	nop
    7090:	0402                	c.slli64	s0
    7092:	0308                	addi	a0,sp,384
    7094:	0900                	addi	s0,sp,144
    7096:	0008                	0x8
    7098:	0001                	nop
    709a:	0402                	c.slli64	s0
    709c:	0308                	addi	a0,sp,384
    709e:	0900                	addi	s0,sp,144
    70a0:	0000                	unimp
    70a2:	0001                	nop
    70a4:	0402                	c.slli64	s0
    70a6:	0308                	addi	a0,sp,384
    70a8:	0900                	addi	s0,sp,144
    70aa:	0000                	unimp
    70ac:	0001                	nop
    70ae:	0402                	c.slli64	s0
    70b0:	0308                	addi	a0,sp,384
    70b2:	0900                	addi	s0,sp,144
    70b4:	0000                	unimp
    70b6:	0001                	nop
    70b8:	0402                	c.slli64	s0
    70ba:	030a                	slli	t1,t1,0x2
    70bc:	0900                	addi	s0,sp,144
    70be:	000c                	0xc
    70c0:	0001                	nop
    70c2:	0402                	c.slli64	s0
    70c4:	030a                	slli	t1,t1,0x2
    70c6:	0900                	addi	s0,sp,144
    70c8:	0000                	unimp
    70ca:	0001                	nop
    70cc:	0402                	c.slli64	s0
    70ce:	030a                	slli	t1,t1,0x2
    70d0:	0900                	addi	s0,sp,144
    70d2:	0000                	unimp
    70d4:	0001                	nop
    70d6:	0402                	c.slli64	s0
    70d8:	030a                	slli	t1,t1,0x2
    70da:	0900                	addi	s0,sp,144
    70dc:	0004                	0x4
    70de:	0001                	nop
    70e0:	0402                	c.slli64	s0
    70e2:	030a                	slli	t1,t1,0x2
    70e4:	0900                	addi	s0,sp,144
    70e6:	0008                	0x8
    70e8:	0001                	nop
    70ea:	0402                	c.slli64	s0
    70ec:	0309                	addi	t1,t1,2
    70ee:	0900                	addi	s0,sp,144
    70f0:	0004                	0x4
    70f2:	0001                	nop
    70f4:	0402                	c.slli64	s0
    70f6:	0309                	addi	t1,t1,2
    70f8:	0900                	addi	s0,sp,144
    70fa:	0000                	unimp
    70fc:	0001                	nop
    70fe:	0402                	c.slli64	s0
    7100:	0318                	addi	a4,sp,384
    7102:	0900                	addi	s0,sp,144
    7104:	000c                	0xc
    7106:	0001                	nop
    7108:	0402                	c.slli64	s0
    710a:	0318                	addi	a4,sp,384
    710c:	0900                	addi	s0,sp,144
    710e:	000c                	0xc
    7110:	0001                	nop
    7112:	0402                	c.slli64	s0
    7114:	031a                	slli	t1,t1,0x6
    7116:	0900                	addi	s0,sp,144
    7118:	0004                	0x4
    711a:	0001                	nop
    711c:	0402                	c.slli64	s0
    711e:	031a                	slli	t1,t1,0x6
    7120:	0900                	addi	s0,sp,144
    7122:	0000                	unimp
    7124:	0001                	nop
    7126:	0402                	c.slli64	s0
    7128:	031a                	slli	t1,t1,0x6
    712a:	0900                	addi	s0,sp,144
    712c:	0000                	unimp
    712e:	0001                	nop
    7130:	0402                	c.slli64	s0
    7132:	031a                	slli	t1,t1,0x6
    7134:	0900                	addi	s0,sp,144
    7136:	0000                	unimp
    7138:	0601                	addi	a2,a2,0
    713a:	08090003          	lb	zero,128(s2)
    713e:	0100                	addi	s0,sp,128
    7140:	0200                	addi	s0,sp,256
    7142:	7704                	flw	fs1,40(a4)
    7144:	0306                	slli	t1,t1,0x1
    7146:	0900                	addi	s0,sp,144
    7148:	0010                	0x10
    714a:	0001                	nop
    714c:	0402                	c.slli64	s0
    714e:	09000377          	0x9000377
    7152:	0000                	unimp
    7154:	0001                	nop
    7156:	0402                	c.slli64	s0
    7158:	09000377          	0x9000377
    715c:	0000                	unimp
    715e:	0001                	nop
    7160:	0402                	c.slli64	s0
    7162:	09000377          	0x9000377
    7166:	0000                	unimp
    7168:	0001                	nop
    716a:	0402                	c.slli64	s0
    716c:	09000377          	0x9000377
    7170:	0000                	unimp
    7172:	0001                	nop
    7174:	0402                	c.slli64	s0
    7176:	09000377          	0x9000377
    717a:	0000                	unimp
    717c:	0001                	nop
    717e:	0402                	c.slli64	s0
    7180:	09000377          	0x9000377
    7184:	0000                	unimp
    7186:	0001                	nop
    7188:	0402                	c.slli64	s0
    718a:	09000377          	0x9000377
    718e:	0000                	unimp
    7190:	0501                	addi	a0,a0,0
    7192:	0001                	nop
    7194:	0402                	c.slli64	s0
    7196:	04030677          	0x4030677
    719a:	1c09                	addi	s8,s8,-30
    719c:	0100                	addi	s0,sp,128
    719e:	0305                	addi	t1,t1,1
    71a0:	0200                	addi	s0,sp,256
    71a2:	7704                	flw	fs1,40(a4)
    71a4:	04097c03          	0x4097c03
    71a8:	0100                	addi	s0,sp,128
    71aa:	0200                	addi	s0,sp,256
    71ac:	7704                	flw	fs1,40(a4)
    71ae:	0306                	slli	t1,t1,0x1
    71b0:	0900                	addi	s0,sp,144
    71b2:	0004                	0x4
    71b4:	0001                	nop
    71b6:	0402                	c.slli64	s0
    71b8:	09000377          	0x9000377
    71bc:	0000                	unimp
    71be:	0001                	nop
    71c0:	0402                	c.slli64	s0
    71c2:	09010377          	0x9010377
    71c6:	0000                	unimp
    71c8:	0001                	nop
    71ca:	0402                	c.slli64	s0
    71cc:	09000377          	0x9000377
    71d0:	0000                	unimp
    71d2:	0001                	nop
    71d4:	0402                	c.slli64	s0
    71d6:	09000377          	0x9000377
    71da:	0000                	unimp
    71dc:	0001                	nop
    71de:	0402                	c.slli64	s0
    71e0:	09020377          	0x9020377
    71e4:	0000                	unimp
    71e6:	0501                	addi	a0,a0,0
    71e8:	0001                	nop
    71ea:	0402                	c.slli64	s0
    71ec:	01030677          	0x1030677
    71f0:	0009                	c.nop	2
    71f2:	0100                	addi	s0,sp,128
    71f4:	0305                	addi	t1,t1,1
    71f6:	0200                	addi	s0,sp,256
    71f8:	0704                	addi	s1,sp,896
    71fa:	30097903          	0x30097903
    71fe:	0100                	addi	s0,sp,128
    7200:	0200                	addi	s0,sp,256
    7202:	0704                	addi	s1,sp,896
    7204:	0306                	slli	t1,t1,0x1
    7206:	0902                	c.slli64	s2
    7208:	0004                	0x4
    720a:	0001                	nop
    720c:	0402                	c.slli64	s0
    720e:	0900032f          	vamoswapei8.v	zero,(zero),v16,v6,v0.t
    7212:	000c                	0xc
    7214:	0001                	nop
    7216:	0402                	c.slli64	s0
    7218:	0901032f          	vamoswapei8.v	zero,(sp),v16,v6,v0.t
    721c:	0000                	unimp
    721e:	0001                	nop
    7220:	0402                	c.slli64	s0
    7222:	0900032f          	vamoswapei8.v	zero,(zero),v16,v6,v0.t
    7226:	0000                	unimp
    7228:	0001                	nop
    722a:	0402                	c.slli64	s0
    722c:	0900032f          	vamoswapei8.v	zero,(zero),v16,v6,v0.t
    7230:	0000                	unimp
    7232:	0601                	addi	a2,a2,0
    7234:	08090003          	lb	zero,128(s2)
    7238:	0100                	addi	s0,sp,128
    723a:	0200                	addi	s0,sp,256
    723c:	0404                	addi	s1,sp,512
    723e:	1c097e03          	0x1c097e03
    7242:	0100                	addi	s0,sp,128
    7244:	0200                	addi	s0,sp,256
    7246:	0404                	addi	s1,sp,512
    7248:	0306                	slli	t1,t1,0x1
    724a:	0901                	addi	s2,s2,0
    724c:	0004                	0x4
    724e:	0601                	addi	a2,a2,0
    7250:	04090003          	lb	zero,64(s2)
    7254:	0100                	addi	s0,sp,128
    7256:	0200                	addi	s0,sp,256
    7258:	3b04                	fld	fs1,48(a4)
    725a:	0306                	slli	t1,t1,0x1
    725c:	0901                	addi	s2,s2,0
    725e:	0008                	0x8
    7260:	0001                	nop
    7262:	0402                	c.slli64	s0
    7264:	0900033b          	0x900033b
    7268:	0000                	unimp
    726a:	0001                	nop
    726c:	0402                	c.slli64	s0
    726e:	0900033b          	0x900033b
    7272:	0000                	unimp
    7274:	0001                	nop
    7276:	0402                	c.slli64	s0
    7278:	0900033b          	0x900033b
    727c:	0008                	0x8
    727e:	0001                	nop
    7280:	0402                	c.slli64	s0
    7282:	033c                	addi	a5,sp,392
    7284:	0900                	addi	s0,sp,144
    7286:	0008                	0x8
    7288:	0001                	nop
    728a:	0402                	c.slli64	s0
    728c:	033e                	slli	t1,t1,0xf
    728e:	0900                	addi	s0,sp,144
    7290:	0008                	0x8
    7292:	0001                	nop
    7294:	0402                	c.slli64	s0
    7296:	033e                	slli	t1,t1,0xf
    7298:	0900                	addi	s0,sp,144
    729a:	001c                	0x1c
    729c:	0001                	nop
    729e:	0402                	c.slli64	s0
    72a0:	0900034b          	fnmsub.s	ft6,ft0,fa6,ft1,rne
    72a4:	0004                	0x4
    72a6:	0001                	nop
    72a8:	0402                	c.slli64	s0
    72aa:	0900034b          	fnmsub.s	ft6,ft0,fa6,ft1,rne
    72ae:	0000                	unimp
    72b0:	0001                	nop
    72b2:	0402                	c.slli64	s0
    72b4:	034c                	addi	a1,sp,388
    72b6:	0900                	addi	s0,sp,144
    72b8:	0008                	0x8
    72ba:	0001                	nop
    72bc:	0402                	c.slli64	s0
    72be:	034c                	addi	a1,sp,388
    72c0:	0900                	addi	s0,sp,144
    72c2:	0000                	unimp
    72c4:	0001                	nop
    72c6:	0402                	c.slli64	s0
    72c8:	034c                	addi	a1,sp,388
    72ca:	0900                	addi	s0,sp,144
    72cc:	0000                	unimp
    72ce:	0001                	nop
    72d0:	0402                	c.slli64	s0
    72d2:	034c                	addi	a1,sp,388
    72d4:	0900                	addi	s0,sp,144
    72d6:	0000                	unimp
    72d8:	0001                	nop
    72da:	0402                	c.slli64	s0
    72dc:	034e                	slli	t1,t1,0x13
    72de:	0900                	addi	s0,sp,144
    72e0:	000c                	0xc
    72e2:	0001                	nop
    72e4:	0402                	c.slli64	s0
    72e6:	034e                	slli	t1,t1,0x13
    72e8:	0900                	addi	s0,sp,144
    72ea:	0000                	unimp
    72ec:	0001                	nop
    72ee:	0402                	c.slli64	s0
    72f0:	034e                	slli	t1,t1,0x13
    72f2:	0900                	addi	s0,sp,144
    72f4:	0000                	unimp
    72f6:	0001                	nop
    72f8:	0402                	c.slli64	s0
    72fa:	034e                	slli	t1,t1,0x13
    72fc:	0900                	addi	s0,sp,144
    72fe:	0004                	0x4
    7300:	0001                	nop
    7302:	0402                	c.slli64	s0
    7304:	034e                	slli	t1,t1,0x13
    7306:	0900                	addi	s0,sp,144
    7308:	0008                	0x8
    730a:	0001                	nop
    730c:	0402                	c.slli64	s0
    730e:	034d                	addi	t1,t1,19
    7310:	0900                	addi	s0,sp,144
    7312:	0004                	0x4
    7314:	0001                	nop
    7316:	0402                	c.slli64	s0
    7318:	034d                	addi	t1,t1,19
    731a:	0900                	addi	s0,sp,144
    731c:	0000                	unimp
    731e:	0001                	nop
    7320:	0402                	c.slli64	s0
    7322:	035d                	addi	t1,t1,23
    7324:	0900                	addi	s0,sp,144
    7326:	000c                	0xc
    7328:	0001                	nop
    732a:	0402                	c.slli64	s0
    732c:	035d                	addi	t1,t1,23
    732e:	0900                	addi	s0,sp,144
    7330:	0000                	unimp
    7332:	0001                	nop
    7334:	0402                	c.slli64	s0
    7336:	035d                	addi	t1,t1,23
    7338:	0900                	addi	s0,sp,144
    733a:	0000                	unimp
    733c:	0001                	nop
    733e:	0402                	c.slli64	s0
    7340:	035d                	addi	t1,t1,23
    7342:	0900                	addi	s0,sp,144
    7344:	000c                	0xc
    7346:	0601                	addi	a2,a2,0
    7348:	04090003          	lb	zero,64(s2)
    734c:	0100                	addi	s0,sp,128
    734e:	0200                	addi	s0,sp,256
    7350:	3f04                	fld	fs1,56(a4)
    7352:	0306                	slli	t1,t1,0x1
    7354:	0900                	addi	s0,sp,144
    7356:	0008                	0x8
    7358:	0001                	nop
    735a:	0402                	c.slli64	s0
    735c:	00030647          	fmsub.s	fa2,ft6,ft0,ft0,rne
    7360:	1809                	addi	a6,a6,-30
    7362:	0100                	addi	s0,sp,128
    7364:	0200                	addi	s0,sp,256
    7366:	4a04                	lw	s1,16(a2)
    7368:	08090003          	lb	zero,128(s2)
    736c:	0100                	addi	s0,sp,128
    736e:	0200                	addi	s0,sp,256
    7370:	4a04                	lw	s1,16(a2)
    7372:	0306                	slli	t1,t1,0x1
    7374:	0900                	addi	s0,sp,144
    7376:	000c                	0xc
    7378:	0601                	addi	a2,a2,0
    737a:	08090003          	lb	zero,128(s2)
    737e:	0100                	addi	s0,sp,128
    7380:	3409                	jal	6d82 <__call_exitprocs+0xfa>
    7382:	0000                	unimp
    7384:	0101                	addi	sp,sp,0
    7386:	020e                	slli	tp,tp,0x3
    7388:	0000                	unimp
    738a:	00610003          	lb	zero,6(sp)
    738e:	0000                	unimp
    7390:	0101                	addi	sp,sp,0
    7392:	000d0efb          	0xd0efb
    7396:	0101                	addi	sp,sp,0
    7398:	0101                	addi	sp,sp,0
    739a:	0000                	unimp
    739c:	0100                	addi	s0,sp,128
    739e:	0000                	unimp
    73a0:	2e01                	jal	76b0 <__subdf3+0x734>
    73a2:	2f2e                	fld	ft10,200(sp)
    73a4:	2e2e                	fld	ft8,200(sp)
    73a6:	2f2e2e2f          	0x2f2e2e2f
    73aa:	2e2e                	fld	ft8,200(sp)
    73ac:	2f2e2e2f          	0x2f2e2e2f
    73b0:	6972                	flw	fs2,28(sp)
    73b2:	2d766373          	csrrsi	t1,0x2d7,12
    73b6:	2f636367          	0x2f636367
    73ba:	696c                	flw	fa1,84(a0)
    73bc:	6762                	flw	fa4,24(sp)
    73be:	732f6363          	bltu	t5,s2,7ae4 <__subdf3+0xb68>
    73c2:	2d74666f          	jal	a2,4de98 <RAM_SIZE+0x3de98>
    73c6:	7066                	flw	ft0,120(sp)
    73c8:	0000                	unimp
    73ca:	6966                	flw	fs2,88(sp)
    73cc:	6478                	flw	fa4,76(s0)
    73ce:	7366                	flw	ft6,120(sp)
    73d0:	2e69                	jal	776a <__subdf3+0x7ee>
    73d2:	00010063          	beqz	sp,73d2 <__subdf3+0x456>
    73d6:	7300                	flw	fs0,32(a4)
    73d8:	2d74666f          	jal	a2,4deae <RAM_SIZE+0x3deae>
    73dc:	7066                	flw	ft0,120(sp)
    73de:	682e                	flw	fa6,200(sp)
    73e0:	0100                	addi	s0,sp,128
    73e2:	0000                	unimp
    73e4:	6f64                	flw	fs1,92(a4)
    73e6:	6275                	lui	tp,0x1d
    73e8:	656c                	flw	fa1,76(a0)
    73ea:	682e                	flw	fa6,200(sp)
    73ec:	0100                	addi	s0,sp,128
    73ee:	0000                	unimp
    73f0:	0500                	addi	s0,sp,640
    73f2:	0001                	nop
    73f4:	0205                	addi	tp,tp,1
    73f6:	67d8                	flw	fa4,12(a5)
    73f8:	0000                	unimp
    73fa:	05012303          	lw	t1,80(sp)
    73fe:	09010303          	lb	t1,144(sp)
    7402:	0000                	unimp
    7404:	0301                	addi	t1,t1,0
    7406:	0900                	addi	s0,sp,144
    7408:	0000                	unimp
    740a:	0501                	addi	a0,a0,0
    740c:	030d                	addi	t1,t1,3
    740e:	0900                	addi	s0,sp,144
    7410:	0000                	unimp
    7412:	0501                	addi	a0,a0,0
    7414:	09010303          	lb	t1,144(sp)
    7418:	0000                	unimp
    741a:	0301                	addi	t1,t1,0
    741c:	0900                	addi	s0,sp,144
    741e:	0000                	unimp
    7420:	0301                	addi	t1,t1,0
    7422:	0900                	addi	s0,sp,144
    7424:	0000                	unimp
    7426:	0301                	addi	t1,t1,0
    7428:	0900                	addi	s0,sp,144
    742a:	0000                	unimp
    742c:	0301                	addi	t1,t1,0
    742e:	0901                	addi	s2,s2,0
    7430:	0000                	unimp
    7432:	0301                	addi	t1,t1,0
    7434:	0902                	c.slli64	s2
    7436:	0000                	unimp
    7438:	0301                	addi	t1,t1,0
    743a:	0901                	addi	s2,s2,0
    743c:	0000                	unimp
    743e:	0301                	addi	t1,t1,0
    7440:	0900                	addi	s0,sp,144
    7442:	0000                	unimp
    7444:	0301                	addi	t1,t1,0
    7446:	0900                	addi	s0,sp,144
    7448:	0000                	unimp
    744a:	0301                	addi	t1,t1,0
    744c:	0900                	addi	s0,sp,144
    744e:	0000                	unimp
    7450:	0301                	addi	t1,t1,0
    7452:	0900                	addi	s0,sp,144
    7454:	0000                	unimp
    7456:	0601                	addi	a2,a2,0
    7458:	10090103          	lb	sp,256(s2)
    745c:	0100                	addi	s0,sp,128
    745e:	04097f03          	0x4097f03
    7462:	0100                	addi	s0,sp,128
    7464:	0306                	slli	t1,t1,0x1
    7466:	0900                	addi	s0,sp,144
    7468:	0004                	0x4
    746a:	0301                	addi	t1,t1,0
    746c:	0900                	addi	s0,sp,144
    746e:	0000                	unimp
    7470:	0301                	addi	t1,t1,0
    7472:	0900                	addi	s0,sp,144
    7474:	0004                	0x4
    7476:	0301                	addi	t1,t1,0
    7478:	0901                	addi	s2,s2,0
    747a:	0000                	unimp
    747c:	0301                	addi	t1,t1,0
    747e:	0900                	addi	s0,sp,144
    7480:	0000                	unimp
    7482:	0001                	nop
    7484:	0402                	c.slli64	s0
    7486:	030a                	slli	t1,t1,0x2
    7488:	0900                	addi	s0,sp,144
    748a:	0004                	0x4
    748c:	0001                	nop
    748e:	0402                	c.slli64	s0
    7490:	030a                	slli	t1,t1,0x2
    7492:	0900                	addi	s0,sp,144
    7494:	0000                	unimp
    7496:	0001                	nop
    7498:	0402                	c.slli64	s0
    749a:	030e                	slli	t1,t1,0x3
    749c:	0900                	addi	s0,sp,144
    749e:	0008                	0x8
    74a0:	0001                	nop
    74a2:	0402                	c.slli64	s0
    74a4:	030e                	slli	t1,t1,0x3
    74a6:	0900                	addi	s0,sp,144
    74a8:	0000                	unimp
    74aa:	0001                	nop
    74ac:	0402                	c.slli64	s0
    74ae:	030e                	slli	t1,t1,0x3
    74b0:	0900                	addi	s0,sp,144
    74b2:	0000                	unimp
    74b4:	0001                	nop
    74b6:	0402                	c.slli64	s0
    74b8:	030e                	slli	t1,t1,0x3
    74ba:	0900                	addi	s0,sp,144
    74bc:	0000                	unimp
    74be:	0001                	nop
    74c0:	0402                	c.slli64	s0
    74c2:	030e                	slli	t1,t1,0x3
    74c4:	0900                	addi	s0,sp,144
    74c6:	000c                	0xc
    74c8:	0001                	nop
    74ca:	0402                	c.slli64	s0
    74cc:	030d                	addi	t1,t1,3
    74ce:	0900                	addi	s0,sp,144
    74d0:	0004                	0x4
    74d2:	0001                	nop
    74d4:	0402                	c.slli64	s0
    74d6:	030d                	addi	t1,t1,3
    74d8:	0900                	addi	s0,sp,144
    74da:	0000                	unimp
    74dc:	0001                	nop
    74de:	0402                	c.slli64	s0
    74e0:	030d                	addi	t1,t1,3
    74e2:	0900                	addi	s0,sp,144
    74e4:	0004                	0x4
    74e6:	0001                	nop
    74e8:	0402                	c.slli64	s0
    74ea:	030d                	addi	t1,t1,3
    74ec:	0900                	addi	s0,sp,144
    74ee:	0000                	unimp
    74f0:	0001                	nop
    74f2:	0402                	c.slli64	s0
    74f4:	031e                	slli	t1,t1,0x7
    74f6:	0900                	addi	s0,sp,144
    74f8:	0010                	0x10
    74fa:	0001                	nop
    74fc:	0402                	c.slli64	s0
    74fe:	031e                	slli	t1,t1,0x7
    7500:	0900                	addi	s0,sp,144
    7502:	0000                	unimp
    7504:	0001                	nop
    7506:	0402                	c.slli64	s0
    7508:	031e                	slli	t1,t1,0x7
    750a:	0900                	addi	s0,sp,144
    750c:	0010                	0x10
    750e:	0001                	nop
    7510:	0402                	c.slli64	s0
    7512:	0900032b          	0x900032b
    7516:	0000                	unimp
    7518:	0001                	nop
    751a:	0402                	c.slli64	s0
    751c:	0900032b          	0x900032b
    7520:	0000                	unimp
    7522:	0001                	nop
    7524:	0402                	c.slli64	s0
    7526:	032d                	addi	t1,t1,11
    7528:	0900                	addi	s0,sp,144
    752a:	0004                	0x4
    752c:	0001                	nop
    752e:	0402                	c.slli64	s0
    7530:	032a                	slli	t1,t1,0xa
    7532:	0900                	addi	s0,sp,144
    7534:	0008                	0x8
    7536:	0001                	nop
    7538:	0402                	c.slli64	s0
    753a:	032a                	slli	t1,t1,0xa
    753c:	0900                	addi	s0,sp,144
    753e:	0000                	unimp
    7540:	0001                	nop
    7542:	0402                	c.slli64	s0
    7544:	032a                	slli	t1,t1,0xa
    7546:	0900                	addi	s0,sp,144
    7548:	000c                	0xc
    754a:	0601                	addi	a2,a2,0
    754c:	04090003          	lb	zero,64(s2)
    7550:	0100                	addi	s0,sp,128
    7552:	0200                	addi	s0,sp,256
    7554:	3b04                	fld	fs1,48(a4)
    7556:	0306                	slli	t1,t1,0x1
    7558:	0900                	addi	s0,sp,144
    755a:	0004                	0x4
    755c:	0001                	nop
    755e:	0402                	c.slli64	s0
    7560:	0901033b          	0x901033b
    7564:	0000                	unimp
    7566:	0001                	nop
    7568:	0402                	c.slli64	s0
    756a:	0900033b          	0x900033b
    756e:	0000                	unimp
    7570:	0001                	nop
    7572:	0402                	c.slli64	s0
    7574:	0900033b          	0x900033b
    7578:	0000                	unimp
    757a:	0001                	nop
    757c:	0402                	c.slli64	s0
    757e:	0902033b          	0x902033b
    7582:	0000                	unimp
    7584:	0501                	addi	a0,a0,0
    7586:	0001                	nop
    7588:	0402                	c.slli64	s0
    758a:	0103063b          	0x103063b
    758e:	0009                	c.nop	2
    7590:	0100                	addi	s0,sp,128
    7592:	0409                	addi	s0,s0,2
    7594:	0000                	unimp
    7596:	0101                	addi	sp,sp,0
    7598:	0092                	slli	ra,ra,0x4
    759a:	0000                	unimp
    759c:	004c0003          	lb	zero,4(s8) # 1d004 <RAM_SIZE+0xd004>
    75a0:	0000                	unimp
    75a2:	0101                	addi	sp,sp,0
    75a4:	000d0efb          	0xd0efb
    75a8:	0101                	addi	sp,sp,0
    75aa:	0101                	addi	sp,sp,0
    75ac:	0000                	unimp
    75ae:	0100                	addi	s0,sp,128
    75b0:	0000                	unimp
    75b2:	2e01                	jal	78c2 <__subdf3+0x946>
    75b4:	2f2e                	fld	ft10,200(sp)
    75b6:	2e2e                	fld	ft8,200(sp)
    75b8:	2f2e2e2f          	0x2f2e2e2f
    75bc:	2e2e                	fld	ft8,200(sp)
    75be:	2f2e2e2f          	0x2f2e2e2f
    75c2:	6972                	flw	fs2,28(sp)
    75c4:	2d766373          	csrrsi	t1,0x2d7,12
    75c8:	2f636367          	0x2f636367
    75cc:	696c                	flw	fa1,84(a0)
    75ce:	6762                	flw	fa4,24(sp)
    75d0:	632f6363          	bltu	t5,s2,7bf6 <__subdf3+0xc7a>
    75d4:	69666e6f          	jal	t3,6dc6a <RAM_SIZE+0x5dc6a>
    75d8:	69722f67          	0x69722f67
    75dc:	00766373          	csrrsi	t1,0x7,12
    75e0:	6d00                	flw	fs0,24(a0)
    75e2:	6c75                	lui	s8,0x1d
    75e4:	6964                	flw	fs1,84(a0)
    75e6:	00532e33          	slt	t3,t1,t0
    75ea:	0001                	nop
    75ec:	0000                	unimp
    75ee:	0500                	addi	s0,sp,640
    75f0:	5802                	lw	a6,32(sp)
    75f2:	0068                	addi	a0,sp,12
    75f4:	0300                	addi	s0,sp,384
    75f6:	0124                	addi	s1,sp,136
    75f8:	04090103          	lb	sp,64(s2)
    75fc:	0100                	addi	s0,sp,128
    75fe:	04090203          	lb	tp,64(s2)
    7602:	0100                	addi	s0,sp,128
    7604:	04090103          	lb	sp,64(s2)
    7608:	0100                	addi	s0,sp,128
    760a:	04090103          	lb	sp,64(s2)
    760e:	0100                	addi	s0,sp,128
    7610:	04090203          	lb	tp,64(s2)
    7614:	0100                	addi	s0,sp,128
    7616:	04090103          	lb	sp,64(s2)
    761a:	0100                	addi	s0,sp,128
    761c:	04090103          	lb	sp,64(s2)
    7620:	0100                	addi	s0,sp,128
    7622:	04090103          	lb	sp,64(s2)
    7626:	0100                	addi	s0,sp,128
    7628:	0409                	addi	s0,s0,2
    762a:	0000                	unimp
    762c:	0101                	addi	sp,sp,0
    762e:	0168                	addi	a0,sp,140
    7630:	0000                	unimp
    7632:	00490003          	lb	zero,4(s2)
    7636:	0000                	unimp
    7638:	0101                	addi	sp,sp,0
    763a:	000d0efb          	0xd0efb
    763e:	0101                	addi	sp,sp,0
    7640:	0101                	addi	sp,sp,0
    7642:	0000                	unimp
    7644:	0100                	addi	s0,sp,128
    7646:	0000                	unimp
    7648:	2e01                	jal	7958 <__subdf3+0x9dc>
    764a:	2f2e                	fld	ft10,200(sp)
    764c:	2e2e                	fld	ft8,200(sp)
    764e:	2f2e2e2f          	0x2f2e2e2f
    7652:	2e2e                	fld	ft8,200(sp)
    7654:	2f2e2e2f          	0x2f2e2e2f
    7658:	6972                	flw	fs2,28(sp)
    765a:	2d766373          	csrrsi	t1,0x2d7,12
    765e:	2f636367          	0x2f636367
    7662:	696c                	flw	fa1,84(a0)
    7664:	6762                	flw	fa4,24(sp)
    7666:	632f6363          	bltu	t5,s2,7c8c <__subdf3+0xd10>
    766a:	69666e6f          	jal	t3,6dd00 <RAM_SIZE+0x5dd00>
    766e:	69722f67          	0x69722f67
    7672:	00766373          	csrrsi	t1,0x7,12
    7676:	6400                	flw	fs0,8(s0)
    7678:	7669                	lui	a2,0xffffa
    767a:	532e                	lw	t1,232(sp)
    767c:	0100                	addi	s0,sp,128
    767e:	0000                	unimp
    7680:	0000                	unimp
    7682:	0205                	addi	tp,tp,1
    7684:	687c                	flw	fa5,84(s0)
    7686:	0000                	unimp
    7688:	0100c403          	lbu	s0,16(ra)
    768c:	04090103          	lb	sp,64(s2)
    7690:	0100                	addi	s0,sp,128
    7692:	04090403          	lb	s0,64(s2)
    7696:	0100                	addi	s0,sp,128
    7698:	04090103          	lb	sp,64(s2)
    769c:	0100                	addi	s0,sp,128
    769e:	04090103          	lb	sp,64(s2)
    76a2:	0100                	addi	s0,sp,128
    76a4:	04090103          	lb	sp,64(s2)
    76a8:	0100                	addi	s0,sp,128
    76aa:	04090103          	lb	sp,64(s2)
    76ae:	0100                	addi	s0,sp,128
    76b0:	04090103          	lb	sp,64(s2)
    76b4:	0100                	addi	s0,sp,128
    76b6:	04090203          	lb	tp,64(s2)
    76ba:	0100                	addi	s0,sp,128
    76bc:	04090103          	lb	sp,64(s2)
    76c0:	0100                	addi	s0,sp,128
    76c2:	04090103          	lb	sp,64(s2)
    76c6:	0100                	addi	s0,sp,128
    76c8:	04090103          	lb	sp,64(s2)
    76cc:	0100                	addi	s0,sp,128
    76ce:	04090203          	lb	tp,64(s2)
    76d2:	0100                	addi	s0,sp,128
    76d4:	04090203          	lb	tp,64(s2)
    76d8:	0100                	addi	s0,sp,128
    76da:	04090103          	lb	sp,64(s2)
    76de:	0100                	addi	s0,sp,128
    76e0:	04090103          	lb	sp,64(s2)
    76e4:	0100                	addi	s0,sp,128
    76e6:	04090203          	lb	tp,64(s2)
    76ea:	0100                	addi	s0,sp,128
    76ec:	04090103          	lb	sp,64(s2)
    76f0:	0100                	addi	s0,sp,128
    76f2:	04090103          	lb	sp,64(s2)
    76f6:	0100                	addi	s0,sp,128
    76f8:	04090203          	lb	tp,64(s2)
    76fc:	0100                	addi	s0,sp,128
    76fe:	04090503          	lb	a0,64(s2)
    7702:	0100                	addi	s0,sp,128
    7704:	04090103          	lb	sp,64(s2)
    7708:	0100                	addi	s0,sp,128
    770a:	04090103          	lb	sp,64(s2)
    770e:	0100                	addi	s0,sp,128
    7710:	04090103          	lb	sp,64(s2)
    7714:	0100                	addi	s0,sp,128
    7716:	04090503          	lb	a0,64(s2)
    771a:	0100                	addi	s0,sp,128
    771c:	04090203          	lb	tp,64(s2)
    7720:	0100                	addi	s0,sp,128
    7722:	04090203          	lb	tp,64(s2)
    7726:	0100                	addi	s0,sp,128
    7728:	04090103          	lb	sp,64(s2)
    772c:	0100                	addi	s0,sp,128
    772e:	04090203          	lb	tp,64(s2)
    7732:	0100                	addi	s0,sp,128
    7734:	04090203          	lb	tp,64(s2)
    7738:	0100                	addi	s0,sp,128
    773a:	04090103          	lb	sp,64(s2)
    773e:	0100                	addi	s0,sp,128
    7740:	04090103          	lb	sp,64(s2)
    7744:	0100                	addi	s0,sp,128
    7746:	04090103          	lb	sp,64(s2)
    774a:	0100                	addi	s0,sp,128
    774c:	04090403          	lb	s0,64(s2)
    7750:	0100                	addi	s0,sp,128
    7752:	04090103          	lb	sp,64(s2)
    7756:	0100                	addi	s0,sp,128
    7758:	04090103          	lb	sp,64(s2)
    775c:	0100                	addi	s0,sp,128
    775e:	04090203          	lb	tp,64(s2)
    7762:	0100                	addi	s0,sp,128
    7764:	04090103          	lb	sp,64(s2)
    7768:	0100                	addi	s0,sp,128
    776a:	04090103          	lb	sp,64(s2)
    776e:	0100                	addi	s0,sp,128
    7770:	04090203          	lb	tp,64(s2)
    7774:	0100                	addi	s0,sp,128
    7776:	04090103          	lb	sp,64(s2)
    777a:	0100                	addi	s0,sp,128
    777c:	04090203          	lb	tp,64(s2)
    7780:	0100                	addi	s0,sp,128
    7782:	04090103          	lb	sp,64(s2)
    7786:	0100                	addi	s0,sp,128
    7788:	04090103          	lb	sp,64(s2)
    778c:	0100                	addi	s0,sp,128
    778e:	04090103          	lb	sp,64(s2)
    7792:	0100                	addi	s0,sp,128
    7794:	0409                	addi	s0,s0,2
    7796:	0000                	unimp
    7798:	0101                	addi	sp,sp,0
    779a:	00df 0000 0003      	0x3000000df
    77a0:	004d                	c.nop	19
    77a2:	0000                	unimp
    77a4:	0101                	addi	sp,sp,0
    77a6:	000d0efb          	0xd0efb
    77aa:	0101                	addi	sp,sp,0
    77ac:	0101                	addi	sp,sp,0
    77ae:	0000                	unimp
    77b0:	0100                	addi	s0,sp,128
    77b2:	0000                	unimp
    77b4:	2e01                	jal	7ac4 <__subdf3+0xb48>
    77b6:	2f2e                	fld	ft10,200(sp)
    77b8:	2e2e                	fld	ft8,200(sp)
    77ba:	2f2e2e2f          	0x2f2e2e2f
    77be:	2e2e                	fld	ft8,200(sp)
    77c0:	2f2e2e2f          	0x2f2e2e2f
    77c4:	6972                	flw	fs2,28(sp)
    77c6:	2d766373          	csrrsi	t1,0x2d7,12
    77ca:	2f636367          	0x2f636367
    77ce:	696c                	flw	fa1,84(a0)
    77d0:	6762                	flw	fa4,24(sp)
    77d2:	00006363          	bltu	zero,zero,77d8 <__subdf3+0x85c>
    77d6:	696c                	flw	fa1,84(a0)
    77d8:	6762                	flw	fa4,24(sp)
    77da:	2e326363          	bltu	tp,gp,7ac0 <__subdf3+0xb44>
    77de:	00010063          	beqz	sp,77de <__subdf3+0x862>
    77e2:	6c00                	flw	fs0,24(s0)
    77e4:	6269                	lui	tp,0x1a
    77e6:	32636367          	0x32636367
    77ea:	682e                	flw	fa6,200(sp)
    77ec:	0100                	addi	s0,sp,128
    77ee:	0000                	unimp
    77f0:	0500                	addi	s0,sp,640
    77f2:	0001                	nop
    77f4:	0205                	addi	tp,tp,1
    77f6:	6930                	flw	fa2,80(a0)
    77f8:	0000                	unimp
    77fa:	0105c203          	lbu	tp,16(a1)
    77fe:	0305                	addi	t1,t1,1
    7800:	00090103          	lb	sp,0(s2)
    7804:	0100                	addi	s0,sp,128
    7806:	00090203          	lb	tp,0(s2)
    780a:	0100                	addi	s0,sp,128
    780c:	00090003          	lb	zero,0(s2)
    7810:	0100                	addi	s0,sp,128
    7812:	00090003          	lb	zero,0(s2)
    7816:	0100                	addi	s0,sp,128
    7818:	00090003          	lb	zero,0(s2)
    781c:	0100                	addi	s0,sp,128
    781e:	00090003          	lb	zero,0(s2)
    7822:	0100                	addi	s0,sp,128
    7824:	0200                	addi	s0,sp,256
    7826:	0304                	addi	s1,sp,384
    7828:	0306                	slli	t1,t1,0x1
    782a:	0900                	addi	s0,sp,144
    782c:	0008                	0x8
    782e:	0001                	nop
    7830:	0402                	c.slli64	s0
    7832:	060e                	slli	a2,a2,0x3
    7834:	0c090003          	lb	zero,192(s2)
    7838:	0100                	addi	s0,sp,128
    783a:	0200                	addi	s0,sp,256
    783c:	0e04                	addi	s1,sp,784
    783e:	00090003          	lb	zero,0(s2)
    7842:	0100                	addi	s0,sp,128
    7844:	0200                	addi	s0,sp,256
    7846:	0e04                	addi	s1,sp,784
    7848:	00090203          	lb	tp,0(s2)
    784c:	0100                	addi	s0,sp,128
    784e:	0200                	addi	s0,sp,256
    7850:	0e04                	addi	s1,sp,784
    7852:	0306                	slli	t1,t1,0x1
    7854:	097e                	slli	s2,s2,0x1f
    7856:	0000                	unimp
    7858:	0501                	addi	a0,a0,0
    785a:	0001                	nop
    785c:	0402                	c.slli64	s0
    785e:	030e                	slli	t1,t1,0x3
    7860:	001c0903          	lb	s2,1(s8) # 1d001 <RAM_SIZE+0xd001>
    7864:	0501                	addi	a0,a0,0
    7866:	04020003          	lb	zero,64(tp) # 1a040 <RAM_SIZE+0xa040>
    786a:	0304                	addi	s1,sp,384
    786c:	097d                	addi	s2,s2,31
    786e:	0008                	0x8
    7870:	0301                	addi	t1,t1,0
    7872:	0900                	addi	s0,sp,144
    7874:	000c                	0xc
    7876:	0901                	addi	s2,s2,0
    7878:	0008                	0x8
    787a:	0100                	addi	s0,sp,128
    787c:	5301                	li	t1,-32
    787e:	0000                	unimp
    7880:	0300                	addi	s0,sp,384
    7882:	4d00                	lw	s0,24(a0)
    7884:	0000                	unimp
    7886:	0100                	addi	s0,sp,128
    7888:	fb01                	bnez	a4,7798 <__subdf3+0x81c>
    788a:	0d0e                	slli	s10,s10,0x3
    788c:	0100                	addi	s0,sp,128
    788e:	0101                	addi	sp,sp,0
    7890:	0001                	nop
    7892:	0000                	unimp
    7894:	0001                	nop
    7896:	0100                	addi	s0,sp,128
    7898:	2e2e                	fld	ft8,200(sp)
    789a:	2f2e2e2f          	0x2f2e2e2f
    789e:	2e2e                	fld	ft8,200(sp)
    78a0:	2f2e2e2f          	0x2f2e2e2f
    78a4:	2e2e                	fld	ft8,200(sp)
    78a6:	7369722f          	0x7369722f
    78aa:	672d7663          	bgeu	s10,s2,7f16 <__clz_tab+0x6a>
    78ae:	6c2f6363          	bltu	t5,sp,7f74 <__clz_tab+0xc8>
    78b2:	6269                	lui	tp,0x1a
    78b4:	00636367          	0x636367
    78b8:	6c00                	flw	fs0,24(s0)
    78ba:	6269                	lui	tp,0x1a
    78bc:	32636367          	0x32636367
    78c0:	682e                	flw	fa6,200(sp)
    78c2:	0100                	addi	s0,sp,128
    78c4:	0000                	unimp
    78c6:	696c                	flw	fa1,84(a0)
    78c8:	6762                	flw	fa4,24(sp)
    78ca:	2e326363          	bltu	tp,gp,7bb0 <__subdf3+0xc34>
    78ce:	00010063          	beqz	sp,78ce <__subdf3+0x952>
    78d2:	0000                	unimp
    78d4:	1072                	c.slli	zero,0x3c
    78d6:	0000                	unimp
    78d8:	00530003          	lb	zero,5(t1) # 18005 <RAM_SIZE+0x8005>
    78dc:	0000                	unimp
    78de:	0101                	addi	sp,sp,0
    78e0:	000d0efb          	0xd0efb
    78e4:	0101                	addi	sp,sp,0
    78e6:	0101                	addi	sp,sp,0
    78e8:	0000                	unimp
    78ea:	0100                	addi	s0,sp,128
    78ec:	0000                	unimp
    78ee:	2e01                	jal	7bfe <__subdf3+0xc82>
    78f0:	2f2e                	fld	ft10,200(sp)
    78f2:	2e2e                	fld	ft8,200(sp)
    78f4:	2f2e2e2f          	0x2f2e2e2f
    78f8:	2e2e                	fld	ft8,200(sp)
    78fa:	2f2e2e2f          	0x2f2e2e2f
    78fe:	6972                	flw	fs2,28(sp)
    7900:	2d766373          	csrrsi	t1,0x2d7,12
    7904:	2f636367          	0x2f636367
    7908:	696c                	flw	fa1,84(a0)
    790a:	6762                	flw	fa4,24(sp)
    790c:	732f6363          	bltu	t5,s2,8032 <scipat+0x2>
    7910:	2d74666f          	jal	a2,4e3e6 <RAM_SIZE+0x3e3e6>
    7914:	7066                	flw	ft0,120(sp)
    7916:	0000                	unimp
    7918:	64627573          	csrrci	a0,0x646,4
    791c:	3366                	fld	ft6,120(sp)
    791e:	632e                	flw	ft6,200(sp)
    7920:	0100                	addi	s0,sp,128
    7922:	0000                	unimp
    7924:	6f64                	flw	fs1,92(a4)
    7926:	6275                	lui	tp,0x1d
    7928:	656c                	flw	fa1,76(a0)
    792a:	682e                	flw	fa6,200(sp)
    792c:	0100                	addi	s0,sp,128
    792e:	0000                	unimp
    7930:	0500                	addi	s0,sp,640
    7932:	0001                	nop
    7934:	0205                	addi	tp,tp,1
    7936:	6f7c                	flw	fa5,92(a4)
    7938:	0000                	unimp
    793a:	05012303          	lw	t1,80(sp)
    793e:	09010303          	lb	t1,144(sp)
    7942:	0000                	unimp
    7944:	0301                	addi	t1,t1,0
    7946:	0900                	addi	s0,sp,144
    7948:	0000                	unimp
    794a:	0501                	addi	a0,a0,0
    794c:	030d                	addi	t1,t1,3
    794e:	0900                	addi	s0,sp,144
    7950:	0000                	unimp
    7952:	0501                	addi	a0,a0,0
    7954:	09010303          	lb	t1,144(sp)
    7958:	0000                	unimp
    795a:	0301                	addi	t1,t1,0
    795c:	0900                	addi	s0,sp,144
    795e:	0000                	unimp
    7960:	0301                	addi	t1,t1,0
    7962:	0900                	addi	s0,sp,144
    7964:	0000                	unimp
    7966:	0301                	addi	t1,t1,0
    7968:	0900                	addi	s0,sp,144
    796a:	0000                	unimp
    796c:	0301                	addi	t1,t1,0
    796e:	0901                	addi	s2,s2,0
    7970:	0000                	unimp
    7972:	0301                	addi	t1,t1,0
    7974:	0900                	addi	s0,sp,144
    7976:	0000                	unimp
    7978:	0301                	addi	t1,t1,0
    797a:	0900                	addi	s0,sp,144
    797c:	0000                	unimp
    797e:	0301                	addi	t1,t1,0
    7980:	0900                	addi	s0,sp,144
    7982:	0000                	unimp
    7984:	0301                	addi	t1,t1,0
    7986:	0901                	addi	s2,s2,0
    7988:	0000                	unimp
    798a:	0301                	addi	t1,t1,0
    798c:	0900                	addi	s0,sp,144
    798e:	0000                	unimp
    7990:	0301                	addi	t1,t1,0
    7992:	0900                	addi	s0,sp,144
    7994:	0000                	unimp
    7996:	0301                	addi	t1,t1,0
    7998:	0900                	addi	s0,sp,144
    799a:	0000                	unimp
    799c:	0301                	addi	t1,t1,0
    799e:	0901                	addi	s2,s2,0
    79a0:	0000                	unimp
    79a2:	0301                	addi	t1,t1,0
    79a4:	0902                	c.slli64	s2
    79a6:	0000                	unimp
    79a8:	0301                	addi	t1,t1,0
    79aa:	0901                	addi	s2,s2,0
    79ac:	0000                	unimp
    79ae:	0301                	addi	t1,t1,0
    79b0:	0900                	addi	s0,sp,144
    79b2:	0000                	unimp
    79b4:	0301                	addi	t1,t1,0
    79b6:	0900                	addi	s0,sp,144
    79b8:	0000                	unimp
    79ba:	0301                	addi	t1,t1,0
    79bc:	0900                	addi	s0,sp,144
    79be:	0000                	unimp
    79c0:	0301                	addi	t1,t1,0
    79c2:	0900                	addi	s0,sp,144
    79c4:	0000                	unimp
    79c6:	0301                	addi	t1,t1,0
    79c8:	0900                	addi	s0,sp,144
    79ca:	0000                	unimp
    79cc:	0501                	addi	a0,a0,0
    79ce:	0601                	addi	a2,a2,0
    79d0:	08097803          	0x8097803
    79d4:	0100                	addi	s0,sp,128
    79d6:	0305                	addi	t1,t1,1
    79d8:	04090803          	lb	a6,64(s2)
    79dc:	0100                	addi	s0,sp,128
    79de:	0306                	slli	t1,t1,0x1
    79e0:	0900                	addi	s0,sp,144
    79e2:	0004                	0x4
    79e4:	0601                	addi	a2,a2,0
    79e6:	04090103          	lb	sp,64(s2)
    79ea:	0100                	addi	s0,sp,128
    79ec:	0105                	addi	sp,sp,1
    79ee:	08097703          	0x8097703
    79f2:	0100                	addi	s0,sp,128
    79f4:	0305                	addi	t1,t1,1
    79f6:	04090803          	lb	a6,64(s2)
    79fa:	0100                	addi	s0,sp,128
    79fc:	0306                	slli	t1,t1,0x1
    79fe:	0900                	addi	s0,sp,144
    7a00:	0008                	0x8
    7a02:	0501                	addi	a0,a0,0
    7a04:	0601                	addi	a2,a2,0
    7a06:	04097803          	0x4097803
    7a0a:	0100                	addi	s0,sp,128
    7a0c:	0305                	addi	t1,t1,1
    7a0e:	04090803          	lb	a6,64(s2)
    7a12:	0100                	addi	s0,sp,128
    7a14:	0306                	slli	t1,t1,0x1
    7a16:	0900                	addi	s0,sp,144
    7a18:	0008                	0x8
    7a1a:	0301                	addi	t1,t1,0
    7a1c:	0900                	addi	s0,sp,144
    7a1e:	0000                	unimp
    7a20:	0301                	addi	t1,t1,0
    7a22:	0900                	addi	s0,sp,144
    7a24:	0000                	unimp
    7a26:	0301                	addi	t1,t1,0
    7a28:	0900                	addi	s0,sp,144
    7a2a:	0000                	unimp
    7a2c:	0301                	addi	t1,t1,0
    7a2e:	0900                	addi	s0,sp,144
    7a30:	0000                	unimp
    7a32:	0601                	addi	a2,a2,0
    7a34:	00090103          	lb	sp,0(s2)
    7a38:	0100                	addi	s0,sp,128
    7a3a:	04097f03          	0x4097f03
    7a3e:	0100                	addi	s0,sp,128
    7a40:	0306                	slli	t1,t1,0x1
    7a42:	0900                	addi	s0,sp,144
    7a44:	0004                	0x4
    7a46:	0301                	addi	t1,t1,0
    7a48:	0900                	addi	s0,sp,144
    7a4a:	0000                	unimp
    7a4c:	0301                	addi	t1,t1,0
    7a4e:	0901                	addi	s2,s2,0
    7a50:	0000                	unimp
    7a52:	0301                	addi	t1,t1,0
    7a54:	0900                	addi	s0,sp,144
    7a56:	0000                	unimp
    7a58:	0301                	addi	t1,t1,0
    7a5a:	0900                	addi	s0,sp,144
    7a5c:	0000                	unimp
    7a5e:	0301                	addi	t1,t1,0
    7a60:	0900                	addi	s0,sp,144
    7a62:	0000                	unimp
    7a64:	0301                	addi	t1,t1,0
    7a66:	0900                	addi	s0,sp,144
    7a68:	0000                	unimp
    7a6a:	0301                	addi	t1,t1,0
    7a6c:	0900                	addi	s0,sp,144
    7a6e:	0000                	unimp
    7a70:	0301                	addi	t1,t1,0
    7a72:	0900                	addi	s0,sp,144
    7a74:	0000                	unimp
    7a76:	0501                	addi	a0,a0,0
    7a78:	0601                	addi	a2,a2,0
    7a7a:	04097703          	0x4097703
    7a7e:	0100                	addi	s0,sp,128
    7a80:	0305                	addi	t1,t1,1
    7a82:	0c090903          	lb	s2,192(s2)
    7a86:	0100                	addi	s0,sp,128
    7a88:	0306                	slli	t1,t1,0x1
    7a8a:	0900                	addi	s0,sp,144
    7a8c:	0004                	0x4
    7a8e:	0601                	addi	a2,a2,0
    7a90:	00090103          	lb	sp,0(s2)
    7a94:	0100                	addi	s0,sp,128
    7a96:	04097f03          	0x4097f03
    7a9a:	0100                	addi	s0,sp,128
    7a9c:	0306                	slli	t1,t1,0x1
    7a9e:	0900                	addi	s0,sp,144
    7aa0:	0004                	0x4
    7aa2:	0301                	addi	t1,t1,0
    7aa4:	0900                	addi	s0,sp,144
    7aa6:	0000                	unimp
    7aa8:	0301                	addi	t1,t1,0
    7aaa:	0900                	addi	s0,sp,144
    7aac:	0000                	unimp
    7aae:	0301                	addi	t1,t1,0
    7ab0:	0900                	addi	s0,sp,144
    7ab2:	0000                	unimp
    7ab4:	0301                	addi	t1,t1,0
    7ab6:	0900                	addi	s0,sp,144
    7ab8:	0004                	0x4
    7aba:	0301                	addi	t1,t1,0
    7abc:	0900                	addi	s0,sp,144
    7abe:	0004                	0x4
    7ac0:	0301                	addi	t1,t1,0
    7ac2:	0900                	addi	s0,sp,144
    7ac4:	0000                	unimp
    7ac6:	0301                	addi	t1,t1,0
    7ac8:	0901                	addi	s2,s2,0
    7aca:	0000                	unimp
    7acc:	0301                	addi	t1,t1,0
    7ace:	0900                	addi	s0,sp,144
    7ad0:	0000                	unimp
    7ad2:	0001                	nop
    7ad4:	0402                	c.slli64	s0
    7ad6:	0602                	c.slli64	a2
    7ad8:	04090003          	lb	zero,64(s2)
    7adc:	0100                	addi	s0,sp,128
    7ade:	0200                	addi	s0,sp,256
    7ae0:	0304                	addi	s1,sp,384
    7ae2:	0306                	slli	t1,t1,0x1
    7ae4:	0900                	addi	s0,sp,144
    7ae6:	0008                	0x8
    7ae8:	0001                	nop
    7aea:	0402                	c.slli64	s0
    7aec:	0900030b          	0x900030b
    7af0:	0004                	0x4
    7af2:	0001                	nop
    7af4:	0402                	c.slli64	s0
    7af6:	0900030b          	0x900030b
    7afa:	0000                	unimp
    7afc:	0001                	nop
    7afe:	0402                	c.slli64	s0
    7b00:	0900030b          	0x900030b
    7b04:	0000                	unimp
    7b06:	0001                	nop
    7b08:	0402                	c.slli64	s0
    7b0a:	0900030b          	0x900030b
    7b0e:	0000                	unimp
    7b10:	0001                	nop
    7b12:	0402                	c.slli64	s0
    7b14:	0900030b          	0x900030b
    7b18:	0000                	unimp
    7b1a:	0001                	nop
    7b1c:	0402                	c.slli64	s0
    7b1e:	0900030b          	0x900030b
    7b22:	0000                	unimp
    7b24:	0001                	nop
    7b26:	0402                	c.slli64	s0
    7b28:	0900030b          	0x900030b
    7b2c:	0000                	unimp
    7b2e:	0001                	nop
    7b30:	0402                	c.slli64	s0
    7b32:	0900030b          	0x900030b
    7b36:	0000                	unimp
    7b38:	0001                	nop
    7b3a:	0402                	c.slli64	s0
    7b3c:	030c                	addi	a1,sp,384
    7b3e:	0900                	addi	s0,sp,144
    7b40:	0008                	0x8
    7b42:	0001                	nop
    7b44:	0402                	c.slli64	s0
    7b46:	030c                	addi	a1,sp,384
    7b48:	0900                	addi	s0,sp,144
    7b4a:	0000                	unimp
    7b4c:	0001                	nop
    7b4e:	0402                	c.slli64	s0
    7b50:	030c                	addi	a1,sp,384
    7b52:	0900                	addi	s0,sp,144
    7b54:	0000                	unimp
    7b56:	0001                	nop
    7b58:	0402                	c.slli64	s0
    7b5a:	030e                	slli	t1,t1,0x3
    7b5c:	0900                	addi	s0,sp,144
    7b5e:	0004                	0x4
    7b60:	0001                	nop
    7b62:	0402                	c.slli64	s0
    7b64:	030e                	slli	t1,t1,0x3
    7b66:	0900                	addi	s0,sp,144
    7b68:	0000                	unimp
    7b6a:	0001                	nop
    7b6c:	0402                	c.slli64	s0
    7b6e:	0310                	addi	a2,sp,384
    7b70:	0900                	addi	s0,sp,144
    7b72:	0004                	0x4
    7b74:	0001                	nop
    7b76:	0402                	c.slli64	s0
    7b78:	09000313          	li	t1,144
    7b7c:	0008                	0x8
    7b7e:	0001                	nop
    7b80:	0402                	c.slli64	s0
    7b82:	09000313          	li	t1,144
    7b86:	0000                	unimp
    7b88:	0001                	nop
    7b8a:	0402                	c.slli64	s0
    7b8c:	09000313          	li	t1,144
    7b90:	0004                	0x4
    7b92:	0001                	nop
    7b94:	0402                	c.slli64	s0
    7b96:	031c                	addi	a5,sp,384
    7b98:	0900                	addi	s0,sp,144
    7b9a:	0004                	0x4
    7b9c:	0001                	nop
    7b9e:	0402                	c.slli64	s0
    7ba0:	031c                	addi	a5,sp,384
    7ba2:	0900                	addi	s0,sp,144
    7ba4:	0000                	unimp
    7ba6:	0001                	nop
    7ba8:	0402                	c.slli64	s0
    7baa:	031c                	addi	a5,sp,384
    7bac:	0900                	addi	s0,sp,144
    7bae:	0000                	unimp
    7bb0:	0001                	nop
    7bb2:	0402                	c.slli64	s0
    7bb4:	031c                	addi	a5,sp,384
    7bb6:	0900                	addi	s0,sp,144
    7bb8:	0004                	0x4
    7bba:	0001                	nop
    7bbc:	0402                	c.slli64	s0
    7bbe:	031c                	addi	a5,sp,384
    7bc0:	0900                	addi	s0,sp,144
    7bc2:	000c                	0xc
    7bc4:	0001                	nop
    7bc6:	0402                	c.slli64	s0
    7bc8:	031c                	addi	a5,sp,384
    7bca:	0900                	addi	s0,sp,144
    7bcc:	0000                	unimp
    7bce:	0001                	nop
    7bd0:	0402                	c.slli64	s0
    7bd2:	031c                	addi	a5,sp,384
    7bd4:	0900                	addi	s0,sp,144
    7bd6:	0000                	unimp
    7bd8:	0001                	nop
    7bda:	0402                	c.slli64	s0
    7bdc:	0355                	addi	t1,t1,21
    7bde:	0900                	addi	s0,sp,144
    7be0:	0004                	0x4
    7be2:	0001                	nop
    7be4:	0402                	c.slli64	s0
    7be6:	0355                	addi	t1,t1,21
    7be8:	0900                	addi	s0,sp,144
    7bea:	0000                	unimp
    7bec:	0001                	nop
    7bee:	0402                	c.slli64	s0
    7bf0:	0355                	addi	t1,t1,21
    7bf2:	0900                	addi	s0,sp,144
    7bf4:	0000                	unimp
    7bf6:	0001                	nop
    7bf8:	0402                	c.slli64	s0
    7bfa:	0655                	addi	a2,a2,21
    7bfc:	00097f03          	0x97f03
    7c00:	0100                	addi	s0,sp,128
    7c02:	0200                	addi	s0,sp,256
    7c04:	5504                	lw	s1,40(a0)
    7c06:	04090103          	lb	sp,64(s2)
    7c0a:	0100                	addi	s0,sp,128
    7c0c:	0200                	addi	s0,sp,256
    7c0e:	1d04                	addi	s1,sp,688
    7c10:	0306                	slli	t1,t1,0x1
    7c12:	0900                	addi	s0,sp,144
    7c14:	0004                	0x4
    7c16:	0601                	addi	a2,a2,0
    7c18:	08090003          	lb	zero,128(s2)
    7c1c:	0100                	addi	s0,sp,128
    7c1e:	0200                	addi	s0,sp,256
    7c20:	1104                	addi	s1,sp,160
    7c22:	0306                	slli	t1,t1,0x1
    7c24:	0900                	addi	s0,sp,144
    7c26:	0008                	0x8
    7c28:	0001                	nop
    7c2a:	0402                	c.slli64	s0
    7c2c:	0900032b          	0x900032b
    7c30:	0008                	0x8
    7c32:	0001                	nop
    7c34:	0402                	c.slli64	s0
    7c36:	0334                	addi	a3,sp,392
    7c38:	0900                	addi	s0,sp,144
    7c3a:	000c                	0xc
    7c3c:	0001                	nop
    7c3e:	0402                	c.slli64	s0
    7c40:	0335                	addi	t1,t1,13
    7c42:	0900                	addi	s0,sp,144
    7c44:	0008                	0x8
    7c46:	0001                	nop
    7c48:	0402                	c.slli64	s0
    7c4a:	09000337          	lui	t1,0x9000
    7c4e:	0008                	0x8
    7c50:	0001                	nop
    7c52:	0402                	c.slli64	s0
    7c54:	09000337          	lui	t1,0x9000
    7c58:	0020                	addi	s0,sp,8
    7c5a:	0001                	nop
    7c5c:	0402                	c.slli64	s0
    7c5e:	0345                	addi	t1,t1,17
    7c60:	0900                	addi	s0,sp,144
    7c62:	0004                	0x4
    7c64:	0001                	nop
    7c66:	0402                	c.slli64	s0
    7c68:	0345                	addi	t1,t1,17
    7c6a:	0900                	addi	s0,sp,144
    7c6c:	0000                	unimp
    7c6e:	0001                	nop
    7c70:	0402                	c.slli64	s0
    7c72:	0345                	addi	t1,t1,17
    7c74:	0900                	addi	s0,sp,144
    7c76:	0000                	unimp
    7c78:	0001                	nop
    7c7a:	0402                	c.slli64	s0
    7c7c:	0345                	addi	t1,t1,17
    7c7e:	0900                	addi	s0,sp,144
    7c80:	0004                	0x4
    7c82:	0001                	nop
    7c84:	0402                	c.slli64	s0
    7c86:	0345                	addi	t1,t1,17
    7c88:	0900                	addi	s0,sp,144
    7c8a:	000c                	0xc
    7c8c:	0001                	nop
    7c8e:	0402                	c.slli64	s0
    7c90:	0345                	addi	t1,t1,17
    7c92:	0900                	addi	s0,sp,144
    7c94:	0000                	unimp
    7c96:	0001                	nop
    7c98:	0402                	c.slli64	s0
    7c9a:	037f                	0x37f
    7c9c:	0900                	addi	s0,sp,144
    7c9e:	0004                	0x4
    7ca0:	0001                	nop
    7ca2:	01bb0403          	lb	s0,27(s6)
    7ca6:	0c090003          	lb	zero,192(s2)
    7caa:	0100                	addi	s0,sp,128
    7cac:	0300                	addi	s0,sp,384
    7cae:	bb04                	fsd	fs1,48(a4)
    7cb0:	0301                	addi	t1,t1,0
    7cb2:	0900                	addi	s0,sp,144
    7cb4:	0000                	unimp
    7cb6:	0001                	nop
    7cb8:	01bb0403          	lb	s0,27(s6)
    7cbc:	04090003          	lb	zero,64(s2)
    7cc0:	0100                	addi	s0,sp,128
    7cc2:	0300                	addi	s0,sp,384
    7cc4:	bb04                	fsd	fs1,48(a4)
    7cc6:	0301                	addi	t1,t1,0
    7cc8:	0900                	addi	s0,sp,144
    7cca:	0000                	unimp
    7ccc:	0001                	nop
    7cce:	01bb0403          	lb	s0,27(s6)
    7cd2:	00090003          	lb	zero,0(s2)
    7cd6:	0100                	addi	s0,sp,128
    7cd8:	0300                	addi	s0,sp,384
    7cda:	bb04                	fsd	fs1,48(a4)
    7cdc:	0301                	addi	t1,t1,0
    7cde:	0900                	addi	s0,sp,144
    7ce0:	0000                	unimp
    7ce2:	0601                	addi	a2,a2,0
    7ce4:	08090003          	lb	zero,128(s2)
    7ce8:	0100                	addi	s0,sp,128
    7cea:	0200                	addi	s0,sp,256
    7cec:	3804                	fld	fs1,48(s0)
    7cee:	0306                	slli	t1,t1,0x1
    7cf0:	0900                	addi	s0,sp,144
    7cf2:	0028                	addi	a0,sp,8
    7cf4:	0001                	nop
    7cf6:	0402                	c.slli64	s0
    7cf8:	0003063f 01001409 	0x10014090003063f
    7d00:	0200                	addi	s0,sp,256
    7d02:	4204                	lw	s1,0(a2)
    7d04:	0c090003          	lb	zero,192(s2)
    7d08:	0100                	addi	s0,sp,128
    7d0a:	0200                	addi	s0,sp,256
    7d0c:	4204                	lw	s1,0(a2)
    7d0e:	0306                	slli	t1,t1,0x1
    7d10:	0900                	addi	s0,sp,144
    7d12:	000c                	0xc
    7d14:	0001                	nop
    7d16:	0402                	c.slli64	s0
    7d18:	0636                	slli	a2,a2,0xd
    7d1a:	00090003          	lb	zero,0(s2)
    7d1e:	0100                	addi	s0,sp,128
    7d20:	0200                	addi	s0,sp,256
    7d22:	3604                	fld	fs1,40(a2)
    7d24:	0306                	slli	t1,t1,0x1
    7d26:	0900                	addi	s0,sp,144
    7d28:	0008                	0x8
    7d2a:	0001                	nop
    7d2c:	0402                	c.slli64	s0
    7d2e:	0900030f          	0x900030f
    7d32:	000c                	0xc
    7d34:	0001                	nop
    7d36:	0402                	c.slli64	s0
    7d38:	09000347          	fmsub.s	ft6,ft0,fa6,ft1,rne
    7d3c:	0004                	0x4
    7d3e:	0001                	nop
    7d40:	0402                	c.slli64	s0
    7d42:	09000347          	fmsub.s	ft6,ft0,fa6,ft1,rne
    7d46:	0004                	0x4
    7d48:	0001                	nop
    7d4a:	0402                	c.slli64	s0
    7d4c:	09000347          	fmsub.s	ft6,ft0,fa6,ft1,rne
    7d50:	0000                	unimp
    7d52:	0001                	nop
    7d54:	0402                	c.slli64	s0
    7d56:	0349                	addi	t1,t1,18
    7d58:	0900                	addi	s0,sp,144
    7d5a:	0004                	0x4
    7d5c:	0001                	nop
    7d5e:	0402                	c.slli64	s0
    7d60:	034c                	addi	a1,sp,388
    7d62:	0900                	addi	s0,sp,144
    7d64:	0008                	0x8
    7d66:	0001                	nop
    7d68:	0402                	c.slli64	s0
    7d6a:	034c                	addi	a1,sp,388
    7d6c:	0900                	addi	s0,sp,144
    7d6e:	0000                	unimp
    7d70:	0001                	nop
    7d72:	0402                	c.slli64	s0
    7d74:	034c                	addi	a1,sp,388
    7d76:	0900                	addi	s0,sp,144
    7d78:	0004                	0x4
    7d7a:	0001                	nop
    7d7c:	0402                	c.slli64	s0
    7d7e:	0355                	addi	t1,t1,21
    7d80:	0900                	addi	s0,sp,144
    7d82:	0004                	0x4
    7d84:	0001                	nop
    7d86:	0402                	c.slli64	s0
    7d88:	0355                	addi	t1,t1,21
    7d8a:	0900                	addi	s0,sp,144
    7d8c:	0000                	unimp
    7d8e:	0001                	nop
    7d90:	0402                	c.slli64	s0
    7d92:	0355                	addi	t1,t1,21
    7d94:	0900                	addi	s0,sp,144
    7d96:	0000                	unimp
    7d98:	0001                	nop
    7d9a:	0402                	c.slli64	s0
    7d9c:	0355                	addi	t1,t1,21
    7d9e:	0900                	addi	s0,sp,144
    7da0:	0004                	0x4
    7da2:	0001                	nop
    7da4:	0402                	c.slli64	s0
    7da6:	0356                	slli	t1,t1,0x15
    7da8:	0900                	addi	s0,sp,144
    7daa:	0010                	0x10
    7dac:	0601                	addi	a2,a2,0
    7dae:	08097f03          	0x8097f03
    7db2:	0100                	addi	s0,sp,128
    7db4:	0200                	addi	s0,sp,256
    7db6:	4a04                	lw	s1,16(a2)
    7db8:	0306                	slli	t1,t1,0x1
    7dba:	0901                	addi	s2,s2,0
    7dbc:	000c                	0xc
    7dbe:	0001                	nop
    7dc0:	0402                	c.slli64	s0
    7dc2:	0364                	addi	s1,sp,396
    7dc4:	0900                	addi	s0,sp,144
    7dc6:	0008                	0x8
    7dc8:	0001                	nop
    7dca:	0402                	c.slli64	s0
    7dcc:	036d                	addi	t1,t1,27
    7dce:	0900                	addi	s0,sp,144
    7dd0:	000c                	0xc
    7dd2:	0001                	nop
    7dd4:	0402                	c.slli64	s0
    7dd6:	036e                	slli	t1,t1,0x1b
    7dd8:	0900                	addi	s0,sp,144
    7dda:	0008                	0x8
    7ddc:	0001                	nop
    7dde:	0402                	c.slli64	s0
    7de0:	0370                	addi	a2,sp,396
    7de2:	0900                	addi	s0,sp,144
    7de4:	0008                	0x8
    7de6:	0001                	nop
    7de8:	0402                	c.slli64	s0
    7dea:	0370                	addi	a2,sp,396
    7dec:	0900                	addi	s0,sp,144
    7dee:	0020                	addi	s0,sp,8
    7df0:	0001                	nop
    7df2:	0402                	c.slli64	s0
    7df4:	037e                	slli	t1,t1,0x1f
    7df6:	0900                	addi	s0,sp,144
    7df8:	0004                	0x4
    7dfa:	0001                	nop
    7dfc:	0402                	c.slli64	s0
    7dfe:	037e                	slli	t1,t1,0x1f
    7e00:	0900                	addi	s0,sp,144
    7e02:	0000                	unimp
    7e04:	0001                	nop
    7e06:	0402                	c.slli64	s0
    7e08:	037e                	slli	t1,t1,0x1f
    7e0a:	0900                	addi	s0,sp,144
    7e0c:	0000                	unimp
    7e0e:	0001                	nop
    7e10:	0402                	c.slli64	s0
    7e12:	037e                	slli	t1,t1,0x1f
    7e14:	0900                	addi	s0,sp,144
    7e16:	0004                	0x4
    7e18:	0001                	nop
    7e1a:	0402                	c.slli64	s0
    7e1c:	037e                	slli	t1,t1,0x1f
    7e1e:	0900                	addi	s0,sp,144
    7e20:	000c                	0xc
    7e22:	0001                	nop
    7e24:	0402                	c.slli64	s0
    7e26:	037e                	slli	t1,t1,0x1f
    7e28:	0900                	addi	s0,sp,144
    7e2a:	0000                	unimp
    7e2c:	0001                	nop
    7e2e:	0402                	c.slli64	s0
    7e30:	067e                	slli	a2,a2,0x1f
    7e32:	00097f03          	0x97f03
    7e36:	0100                	addi	s0,sp,128
    7e38:	0200                	addi	s0,sp,256
    7e3a:	7104                	flw	fs1,32(a0)
    7e3c:	0306                	slli	t1,t1,0x1
    7e3e:	0901                	addi	s2,s2,0
    7e40:	0008                	0x8
    7e42:	0001                	nop
    7e44:	0402                	c.slli64	s0
    7e46:	0678                	addi	a4,sp,780
    7e48:	14090003          	lb	zero,320(s2)
    7e4c:	0100                	addi	s0,sp,128
    7e4e:	0200                	addi	s0,sp,256
    7e50:	7b04                	flw	fs1,48(a4)
    7e52:	0c090003          	lb	zero,192(s2)
    7e56:	0100                	addi	s0,sp,128
    7e58:	0200                	addi	s0,sp,256
    7e5a:	7b04                	flw	fs1,48(a4)
    7e5c:	0306                	slli	t1,t1,0x1
    7e5e:	0900                	addi	s0,sp,144
    7e60:	000c                	0xc
    7e62:	0001                	nop
    7e64:	0402                	c.slli64	s0
    7e66:	0003066f          	jal	a2,37e66 <RAM_SIZE+0x27e66>
    7e6a:	0009                	c.nop	2
    7e6c:	0100                	addi	s0,sp,128
    7e6e:	0200                	addi	s0,sp,256
    7e70:	6f04                	flw	fs1,24(a4)
    7e72:	0306                	slli	t1,t1,0x1
    7e74:	0900                	addi	s0,sp,144
    7e76:	0008                	0x8
    7e78:	0001                	nop
    7e7a:	0402                	c.slli64	s0
    7e7c:	0348                	addi	a0,sp,388
    7e7e:	0900                	addi	s0,sp,144
    7e80:	000c                	0xc
    7e82:	0001                	nop
    7e84:	01800403          	lb	s0,24(zero) # 18 <_start+0x8>
    7e88:	0c090003          	lb	zero,192(s2)
    7e8c:	0100                	addi	s0,sp,128
    7e8e:	0300                	addi	s0,sp,384
    7e90:	8204                	0x8204
    7e92:	0301                	addi	t1,t1,0
    7e94:	0900                	addi	s0,sp,144
    7e96:	0008                	0x8
    7e98:	0001                	nop
    7e9a:	01820403          	lb	s0,24(tp) # 1d018 <RAM_SIZE+0xd018>
    7e9e:	00090003          	lb	zero,0(s2)
    7ea2:	0100                	addi	s0,sp,128
    7ea4:	0300                	addi	s0,sp,384
    7ea6:	8504                	0x8504
    7ea8:	0301                	addi	t1,t1,0
    7eaa:	0900                	addi	s0,sp,144
    7eac:	0004                	0x4
    7eae:	0001                	nop
    7eb0:	018b0403          	lb	s0,24(s6)
    7eb4:	08090003          	lb	zero,128(s2)
    7eb8:	0100                	addi	s0,sp,128
    7eba:	0300                	addi	s0,sp,384
    7ebc:	8b04                	0x8b04
    7ebe:	0301                	addi	t1,t1,0
    7ec0:	0900                	addi	s0,sp,144
    7ec2:	0000                	unimp
    7ec4:	0001                	nop
    7ec6:	018b0403          	lb	s0,24(s6)
    7eca:	00090003          	lb	zero,0(s2)
    7ece:	0100                	addi	s0,sp,128
    7ed0:	0300                	addi	s0,sp,384
    7ed2:	8b04                	0x8b04
    7ed4:	0301                	addi	t1,t1,0
    7ed6:	0900                	addi	s0,sp,144
    7ed8:	0000                	unimp
    7eda:	0001                	nop
    7edc:	018b0403          	lb	s0,24(s6)
    7ee0:	04090003          	lb	zero,64(s2)
    7ee4:	0100                	addi	s0,sp,128
    7ee6:	0300                	addi	s0,sp,384
    7ee8:	8b04                	0x8b04
    7eea:	0301                	addi	t1,t1,0
    7eec:	0900                	addi	s0,sp,144
    7eee:	000c                	0xc
    7ef0:	0001                	nop
    7ef2:	018b0403          	lb	s0,24(s6)
    7ef6:	00090003          	lb	zero,0(s2)
    7efa:	0100                	addi	s0,sp,128
    7efc:	0300                	addi	s0,sp,384
    7efe:	8b04                	0x8b04
    7f00:	0301                	addi	t1,t1,0
    7f02:	0900                	addi	s0,sp,144
    7f04:	0000                	unimp
    7f06:	0001                	nop
    7f08:	018d0403          	lb	s0,24(s10) # b018 <__heap_end+0x2308>
    7f0c:	10090003          	lb	zero,256(s2)
    7f10:	0100                	addi	s0,sp,128
    7f12:	0300                	addi	s0,sp,384
    7f14:	8d04                	0x8d04
    7f16:	0301                	addi	t1,t1,0
    7f18:	0900                	addi	s0,sp,144
    7f1a:	000c                	0xc
    7f1c:	0001                	nop
    7f1e:	03aa0403          	lb	s0,58(s4)
    7f22:	04090003          	lb	zero,64(s2)
    7f26:	0100                	addi	s0,sp,128
    7f28:	0300                	addi	s0,sp,384
    7f2a:	aa04                	fsd	fs1,16(a2)
    7f2c:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    7f30:	0000                	unimp
    7f32:	0001                	nop
    7f34:	03aa0403          	lb	s0,58(s4)
    7f38:	00090003          	lb	zero,0(s2)
    7f3c:	0100                	addi	s0,sp,128
    7f3e:	0300                	addi	s0,sp,384
    7f40:	aa04                	fsd	fs1,16(a2)
    7f42:	09010303          	lb	t1,144(sp)
    7f46:	0000                	unimp
    7f48:	0001                	nop
    7f4a:	03aa0403          	lb	s0,58(s4)
    7f4e:	00090003          	lb	zero,0(s2)
    7f52:	0100                	addi	s0,sp,128
    7f54:	0300                	addi	s0,sp,384
    7f56:	aa04                	fsd	fs1,16(a2)
    7f58:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    7f5c:	0000                	unimp
    7f5e:	0001                	nop
    7f60:	03aa0403          	lb	s0,58(s4)
    7f64:	00090003          	lb	zero,0(s2)
    7f68:	0100                	addi	s0,sp,128
    7f6a:	0300                	addi	s0,sp,384
    7f6c:	aa04                	fsd	fs1,16(a2)
    7f6e:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    7f72:	0000                	unimp
    7f74:	0001                	nop
    7f76:	0402                	c.slli64	s0
    7f78:	0325                	addi	t1,t1,9
    7f7a:	0900                	addi	s0,sp,144
    7f7c:	0008                	0x8
    7f7e:	0001                	nop
    7f80:	0402                	c.slli64	s0
    7f82:	0325                	addi	t1,t1,9
    7f84:	0900                	addi	s0,sp,144
    7f86:	0000                	unimp
    7f88:	0001                	nop
    7f8a:	0402                	c.slli64	s0
    7f8c:	0325                	addi	t1,t1,9
    7f8e:	0900                	addi	s0,sp,144
    7f90:	0000                	unimp
    7f92:	0001                	nop
    7f94:	0402                	c.slli64	s0
    7f96:	0325                	addi	t1,t1,9
    7f98:	0900                	addi	s0,sp,144
    7f9a:	0000                	unimp
    7f9c:	0001                	nop
    7f9e:	0402                	c.slli64	s0
    7fa0:	032c                	addi	a1,sp,392
    7fa2:	0900                	addi	s0,sp,144
    7fa4:	000c                	0xc
    7fa6:	0001                	nop
    7fa8:	0402                	c.slli64	s0
    7faa:	032c                	addi	a1,sp,392
    7fac:	0900                	addi	s0,sp,144
    7fae:	0000                	unimp
    7fb0:	0001                	nop
    7fb2:	0402                	c.slli64	s0
    7fb4:	032c                	addi	a1,sp,392
    7fb6:	0900                	addi	s0,sp,144
    7fb8:	0000                	unimp
    7fba:	0001                	nop
    7fbc:	0402                	c.slli64	s0
    7fbe:	032c                	addi	a1,sp,392
    7fc0:	0900                	addi	s0,sp,144
    7fc2:	0004                	0x4
    7fc4:	0001                	nop
    7fc6:	0402                	c.slli64	s0
    7fc8:	032c                	addi	a1,sp,392
    7fca:	0900                	addi	s0,sp,144
    7fcc:	0008                	0x8
    7fce:	0001                	nop
    7fd0:	019e0403          	lb	s0,25(t3)
    7fd4:	08097f03          	0x8097f03
    7fd8:	0100                	addi	s0,sp,128
    7fda:	0300                	addi	s0,sp,384
    7fdc:	9e04                	0x9e04
    7fde:	0301                	addi	t1,t1,0
    7fe0:	0900                	addi	s0,sp,144
    7fe2:	0000                	unimp
    7fe4:	0001                	nop
    7fe6:	019e0403          	lb	s0,25(t3)
    7fea:	00090003          	lb	zero,0(s2)
    7fee:	0100                	addi	s0,sp,128
    7ff0:	0300                	addi	s0,sp,384
    7ff2:	9e04                	0x9e04
    7ff4:	0301                	addi	t1,t1,0
    7ff6:	0900                	addi	s0,sp,144
    7ff8:	0000                	unimp
    7ffa:	0001                	nop
    7ffc:	019e0403          	lb	s0,25(t3)
    8000:	00090003          	lb	zero,0(s2)
    8004:	0100                	addi	s0,sp,128
    8006:	0300                	addi	s0,sp,384
    8008:	9e04                	0x9e04
    800a:	0301                	addi	t1,t1,0
    800c:	0900                	addi	s0,sp,144
    800e:	0000                	unimp
    8010:	0001                	nop
    8012:	019e0403          	lb	s0,25(t3)
    8016:	00090003          	lb	zero,0(s2)
    801a:	0100                	addi	s0,sp,128
    801c:	0300                	addi	s0,sp,384
    801e:	9e04                	0x9e04
    8020:	0301                	addi	t1,t1,0
    8022:	0900                	addi	s0,sp,144
    8024:	0000                	unimp
    8026:	0001                	nop
    8028:	01a00403          	lb	s0,26(zero) # 1a <_start+0xa>
    802c:	04090003          	lb	zero,64(s2)
    8030:	0100                	addi	s0,sp,128
    8032:	0306                	slli	t1,t1,0x1
    8034:	0900                	addi	s0,sp,144
    8036:	0008                	0x8
    8038:	0001                	nop
    803a:	01810403          	lb	s0,24(sp)
    803e:	0306                	slli	t1,t1,0x1
    8040:	0900                	addi	s0,sp,144
    8042:	0014                	0x14
    8044:	0001                	nop
    8046:	01810403          	lb	s0,24(sp)
    804a:	00090003          	lb	zero,0(s2)
    804e:	0100                	addi	s0,sp,128
    8050:	0300                	addi	s0,sp,384
    8052:	8104                	0x8104
    8054:	0301                	addi	t1,t1,0
    8056:	0900                	addi	s0,sp,144
    8058:	0000                	unimp
    805a:	0001                	nop
    805c:	01810403          	lb	s0,24(sp)
    8060:	00090003          	lb	zero,0(s2)
    8064:	0100                	addi	s0,sp,128
    8066:	0300                	addi	s0,sp,384
    8068:	8104                	0x8104
    806a:	0301                	addi	t1,t1,0
    806c:	0900                	addi	s0,sp,144
    806e:	0000                	unimp
    8070:	0001                	nop
    8072:	01810403          	lb	s0,24(sp)
    8076:	00090003          	lb	zero,0(s2)
    807a:	0100                	addi	s0,sp,128
    807c:	0300                	addi	s0,sp,384
    807e:	8104                	0x8104
    8080:	0301                	addi	t1,t1,0
    8082:	0900                	addi	s0,sp,144
    8084:	0000                	unimp
    8086:	0001                	nop
    8088:	01810403          	lb	s0,24(sp)
    808c:	00090003          	lb	zero,0(s2)
    8090:	0100                	addi	s0,sp,128
    8092:	0300                	addi	s0,sp,384
    8094:	8104                	0x8104
    8096:	0301                	addi	t1,t1,0
    8098:	0900                	addi	s0,sp,144
    809a:	0000                	unimp
    809c:	0001                	nop
    809e:	01810403          	lb	s0,24(sp)
    80a2:	00090003          	lb	zero,0(s2)
    80a6:	0100                	addi	s0,sp,128
    80a8:	0300                	addi	s0,sp,384
    80aa:	8104                	0x8104
    80ac:	0301                	addi	t1,t1,0
    80ae:	0900                	addi	s0,sp,144
    80b0:	0000                	unimp
    80b2:	0601                	addi	a2,a2,0
    80b4:	08090003          	lb	zero,128(s2)
    80b8:	0100                	addi	s0,sp,128
    80ba:	0200                	addi	s0,sp,256
    80bc:	0d04                	addi	s1,sp,656
    80be:	0306                	slli	t1,t1,0x1
    80c0:	0900                	addi	s0,sp,144
    80c2:	0028                	addi	a0,sp,8
    80c4:	0001                	nop
    80c6:	0402                	c.slli64	s0
    80c8:	030d                	addi	t1,t1,3
    80ca:	0900                	addi	s0,sp,144
    80cc:	0000                	unimp
    80ce:	0001                	nop
    80d0:	01cd0403          	lb	s0,28(s10)
    80d4:	04090003          	lb	zero,64(s2)
    80d8:	0100                	addi	s0,sp,128
    80da:	0300                	addi	s0,sp,384
    80dc:	cd04                	sw	s1,24(a0)
    80de:	0301                	addi	t1,t1,0
    80e0:	0900                	addi	s0,sp,144
    80e2:	0000                	unimp
    80e4:	0001                	nop
    80e6:	01cd0403          	lb	s0,28(s10)
    80ea:	00090003          	lb	zero,0(s2)
    80ee:	0100                	addi	s0,sp,128
    80f0:	0300                	addi	s0,sp,384
    80f2:	cf04                	sw	s1,24(a4)
    80f4:	0301                	addi	t1,t1,0
    80f6:	0900                	addi	s0,sp,144
    80f8:	0004                	0x4
    80fa:	0001                	nop
    80fc:	01d20403          	lb	s0,29(tp) # 1d <_start+0xd>
    8100:	08090003          	lb	zero,128(s2)
    8104:	0100                	addi	s0,sp,128
    8106:	0300                	addi	s0,sp,384
    8108:	d204                	sw	s1,32(a2)
    810a:	0301                	addi	t1,t1,0
    810c:	0900                	addi	s0,sp,144
    810e:	0000                	unimp
    8110:	0001                	nop
    8112:	01d20403          	lb	s0,29(tp) # 1d <_start+0xd>
    8116:	04090003          	lb	zero,64(s2)
    811a:	0100                	addi	s0,sp,128
    811c:	0300                	addi	s0,sp,384
    811e:	db04                	sw	s1,48(a4)
    8120:	0301                	addi	t1,t1,0
    8122:	0900                	addi	s0,sp,144
    8124:	0004                	0x4
    8126:	0001                	nop
    8128:	01db0403          	lb	s0,29(s6)
    812c:	00090003          	lb	zero,0(s2)
    8130:	0100                	addi	s0,sp,128
    8132:	0300                	addi	s0,sp,384
    8134:	db04                	sw	s1,48(a4)
    8136:	0301                	addi	t1,t1,0
    8138:	0900                	addi	s0,sp,144
    813a:	0000                	unimp
    813c:	0001                	nop
    813e:	01db0403          	lb	s0,29(s6)
    8142:	04090003          	lb	zero,64(s2)
    8146:	0100                	addi	s0,sp,128
    8148:	0300                	addi	s0,sp,384
    814a:	db04                	sw	s1,48(a4)
    814c:	0301                	addi	t1,t1,0
    814e:	0900                	addi	s0,sp,144
    8150:	000c                	0xc
    8152:	0001                	nop
    8154:	01db0403          	lb	s0,29(s6)
    8158:	00090003          	lb	zero,0(s2)
    815c:	0100                	addi	s0,sp,128
    815e:	0300                	addi	s0,sp,384
    8160:	db04                	sw	s1,48(a4)
    8162:	0301                	addi	t1,t1,0
    8164:	0900                	addi	s0,sp,144
    8166:	0000                	unimp
    8168:	0001                	nop
    816a:	02940403          	lb	s0,41(s0) # 19029 <RAM_SIZE+0x9029>
    816e:	0306                	slli	t1,t1,0x1
    8170:	097f                	0x97f
    8172:	0004                	0x4
    8174:	0001                	nop
    8176:	02940403          	lb	s0,41(s0)
    817a:	04090103          	lb	sp,64(s2)
    817e:	0100                	addi	s0,sp,128
    8180:	0300                	addi	s0,sp,384
    8182:	dc04                	sw	s1,56(s0)
    8184:	0601                	addi	a2,a2,0
    8186:	04090003          	lb	zero,64(s2)
    818a:	0100                	addi	s0,sp,128
    818c:	0300                	addi	s0,sp,384
    818e:	f304                	fsw	fs1,32(a4)
    8190:	0301                	addi	t1,t1,0
    8192:	0900                	addi	s0,sp,144
    8194:	0008                	0x8
    8196:	0001                	nop
    8198:	01f40403          	lb	s0,31(s0)
    819c:	08090003          	lb	zero,128(s2)
    81a0:	0100                	addi	s0,sp,128
    81a2:	0300                	addi	s0,sp,384
    81a4:	f604                	fsw	fs1,40(a2)
    81a6:	0301                	addi	t1,t1,0
    81a8:	0900                	addi	s0,sp,144
    81aa:	0008                	0x8
    81ac:	0001                	nop
    81ae:	01f60403          	lb	s0,31(a2) # ffffa01f <RAM_SIZE+0xfffea01f>
    81b2:	20090003          	lb	zero,512(s2)
    81b6:	0100                	addi	s0,sp,128
    81b8:	0300                	addi	s0,sp,384
    81ba:	8404                	0x8404
    81bc:	0302                	c.slli64	t1
    81be:	0900                	addi	s0,sp,144
    81c0:	0004                	0x4
    81c2:	0001                	nop
    81c4:	02840403          	lb	s0,40(s0)
    81c8:	00090003          	lb	zero,0(s2)
    81cc:	0100                	addi	s0,sp,128
    81ce:	0300                	addi	s0,sp,384
    81d0:	8404                	0x8404
    81d2:	0302                	c.slli64	t1
    81d4:	0900                	addi	s0,sp,144
    81d6:	0000                	unimp
    81d8:	0001                	nop
    81da:	02840403          	lb	s0,40(s0)
    81de:	04090003          	lb	zero,64(s2)
    81e2:	0100                	addi	s0,sp,128
    81e4:	0300                	addi	s0,sp,384
    81e6:	8404                	0x8404
    81e8:	0302                	c.slli64	t1
    81ea:	0900                	addi	s0,sp,144
    81ec:	000c                	0xc
    81ee:	0001                	nop
    81f0:	02840403          	lb	s0,40(s0)
    81f4:	00090003          	lb	zero,0(s2)
    81f8:	0100                	addi	s0,sp,128
    81fa:	0300                	addi	s0,sp,384
    81fc:	be04                	fsd	fs1,56(a2)
    81fe:	0302                	c.slli64	t1
    8200:	0900                	addi	s0,sp,144
    8202:	0004                	0x4
    8204:	0001                	nop
    8206:	02fa0403          	lb	s0,47(s4)
    820a:	0c090003          	lb	zero,192(s2)
    820e:	0100                	addi	s0,sp,128
    8210:	0300                	addi	s0,sp,384
    8212:	fa04                	fsw	fs1,48(a2)
    8214:	0302                	c.slli64	t1
    8216:	0900                	addi	s0,sp,144
    8218:	0000                	unimp
    821a:	0001                	nop
    821c:	01d00403          	lb	s0,29(zero) # 1d <_start+0xd>
    8220:	10090003          	lb	zero,256(s2)
    8224:	0100                	addi	s0,sp,128
    8226:	0300                	addi	s0,sp,384
    8228:	ea04                	fsw	fs1,16(a2)
    822a:	0301                	addi	t1,t1,0
    822c:	0900                	addi	s0,sp,144
    822e:	0008                	0x8
    8230:	0001                	nop
    8232:	01f70403          	lb	s0,31(a4)
    8236:	10090003          	lb	zero,256(s2)
    823a:	0100                	addi	s0,sp,128
    823c:	0300                	addi	s0,sp,384
    823e:	fe04                	fsw	fs1,56(a2)
    8240:	0601                	addi	a2,a2,0
    8242:	14090003          	lb	zero,320(s2)
    8246:	0100                	addi	s0,sp,128
    8248:	0300                	addi	s0,sp,384
    824a:	8104                	0x8104
    824c:	0302                	c.slli64	t1
    824e:	0900                	addi	s0,sp,144
    8250:	000c                	0xc
    8252:	0001                	nop
    8254:	02810403          	lb	s0,40(sp)
    8258:	0306                	slli	t1,t1,0x1
    825a:	0900                	addi	s0,sp,144
    825c:	000c                	0xc
    825e:	0001                	nop
    8260:	01f50403          	lb	s0,31(a0)
    8264:	0306                	slli	t1,t1,0x1
    8266:	0900                	addi	s0,sp,144
    8268:	0000                	unimp
    826a:	0001                	nop
    826c:	01f50403          	lb	s0,31(a0)
    8270:	0306                	slli	t1,t1,0x1
    8272:	0900                	addi	s0,sp,144
    8274:	0008                	0x8
    8276:	0001                	nop
    8278:	01ce0403          	lb	s0,28(t3)
    827c:	0c090003          	lb	zero,192(s2)
    8280:	0100                	addi	s0,sp,128
    8282:	0300                	addi	s0,sp,384
    8284:	8604                	0x8604
    8286:	0302                	c.slli64	t1
    8288:	0900                	addi	s0,sp,144
    828a:	0004                	0x4
    828c:	0001                	nop
    828e:	02860403          	lb	s0,40(a2)
    8292:	04090003          	lb	zero,64(s2)
    8296:	0100                	addi	s0,sp,128
    8298:	0300                	addi	s0,sp,384
    829a:	8604                	0x8604
    829c:	0302                	c.slli64	t1
    829e:	0900                	addi	s0,sp,144
    82a0:	0000                	unimp
    82a2:	0001                	nop
    82a4:	02860403          	lb	s0,40(a2)
    82a8:	00090003          	lb	zero,0(s2)
    82ac:	0100                	addi	s0,sp,128
    82ae:	0300                	addi	s0,sp,384
    82b0:	8804                	0x8804
    82b2:	0302                	c.slli64	t1
    82b4:	0900                	addi	s0,sp,144
    82b6:	0004                	0x4
    82b8:	0001                	nop
    82ba:	028b0403          	lb	s0,40(s6)
    82be:	08090003          	lb	zero,128(s2)
    82c2:	0100                	addi	s0,sp,128
    82c4:	0300                	addi	s0,sp,384
    82c6:	8b04                	0x8b04
    82c8:	0302                	c.slli64	t1
    82ca:	0900                	addi	s0,sp,144
    82cc:	0000                	unimp
    82ce:	0001                	nop
    82d0:	028b0403          	lb	s0,40(s6)
    82d4:	04090003          	lb	zero,64(s2)
    82d8:	0100                	addi	s0,sp,128
    82da:	0300                	addi	s0,sp,384
    82dc:	9404                	0x9404
    82de:	0302                	c.slli64	t1
    82e0:	0900                	addi	s0,sp,144
    82e2:	0004                	0x4
    82e4:	0001                	nop
    82e6:	02940403          	lb	s0,41(s0)
    82ea:	00090003          	lb	zero,0(s2)
    82ee:	0100                	addi	s0,sp,128
    82f0:	0300                	addi	s0,sp,384
    82f2:	9404                	0x9404
    82f4:	0302                	c.slli64	t1
    82f6:	0900                	addi	s0,sp,144
    82f8:	0000                	unimp
    82fa:	0001                	nop
    82fc:	02940403          	lb	s0,41(s0)
    8300:	04090003          	lb	zero,64(s2)
    8304:	0100                	addi	s0,sp,128
    8306:	0300                	addi	s0,sp,384
    8308:	9404                	0x9404
    830a:	0302                	c.slli64	t1
    830c:	0900                	addi	s0,sp,144
    830e:	000c                	0xc
    8310:	0001                	nop
    8312:	02940403          	lb	s0,41(s0)
    8316:	00090003          	lb	zero,0(s2)
    831a:	0100                	addi	s0,sp,128
    831c:	0300                	addi	s0,sp,384
    831e:	9404                	0x9404
    8320:	0302                	c.slli64	t1
    8322:	0900                	addi	s0,sp,144
    8324:	0000                	unimp
    8326:	0001                	nop
    8328:	02950403          	lb	s0,41(a0)
    832c:	08090003          	lb	zero,128(s2)
    8330:	0100                	addi	s0,sp,128
    8332:	0306                	slli	t1,t1,0x1
    8334:	097f                	0x97f
    8336:	0008                	0x8
    8338:	0301                	addi	t1,t1,0
    833a:	0901                	addi	s2,s2,0
    833c:	0008                	0x8
    833e:	0001                	nop
    8340:	02890403          	lb	s0,40(s2)
    8344:	0306                	slli	t1,t1,0x1
    8346:	0900                	addi	s0,sp,144
    8348:	0008                	0x8
    834a:	0001                	nop
    834c:	02a30403          	lb	s0,42(t1) # 900002a <RAM_SIZE+0x8ff002a>
    8350:	08090003          	lb	zero,128(s2)
    8354:	0100                	addi	s0,sp,128
    8356:	0300                	addi	s0,sp,384
    8358:	ac04                	fsd	fs1,24(s0)
    835a:	0302                	c.slli64	t1
    835c:	0900                	addi	s0,sp,144
    835e:	000c                	0xc
    8360:	0001                	nop
    8362:	02ad0403          	lb	s0,42(s10)
    8366:	08090003          	lb	zero,128(s2)
    836a:	0100                	addi	s0,sp,128
    836c:	0300                	addi	s0,sp,384
    836e:	af04                	fsd	fs1,24(a4)
    8370:	0302                	c.slli64	t1
    8372:	0900                	addi	s0,sp,144
    8374:	0008                	0x8
    8376:	0001                	nop
    8378:	02af0403          	lb	s0,42(t5)
    837c:	20090003          	lb	zero,512(s2)
    8380:	0100                	addi	s0,sp,128
    8382:	0300                	addi	s0,sp,384
    8384:	bd04                	fsd	fs1,56(a0)
    8386:	0302                	c.slli64	t1
    8388:	0900                	addi	s0,sp,144
    838a:	0004                	0x4
    838c:	0001                	nop
    838e:	02bd0403          	lb	s0,43(s10)
    8392:	00090003          	lb	zero,0(s2)
    8396:	0100                	addi	s0,sp,128
    8398:	0300                	addi	s0,sp,384
    839a:	bd04                	fsd	fs1,56(a0)
    839c:	0302                	c.slli64	t1
    839e:	0900                	addi	s0,sp,144
    83a0:	0000                	unimp
    83a2:	0001                	nop
    83a4:	02bd0403          	lb	s0,43(s10)
    83a8:	04090003          	lb	zero,64(s2)
    83ac:	0100                	addi	s0,sp,128
    83ae:	0300                	addi	s0,sp,384
    83b0:	bd04                	fsd	fs1,56(a0)
    83b2:	0302                	c.slli64	t1
    83b4:	0900                	addi	s0,sp,144
    83b6:	000c                	0xc
    83b8:	0001                	nop
    83ba:	02bd0403          	lb	s0,43(s10)
    83be:	00090003          	lb	zero,0(s2)
    83c2:	0100                	addi	s0,sp,128
    83c4:	0300                	addi	s0,sp,384
    83c6:	bd04                	fsd	fs1,56(a0)
    83c8:	0602                	c.slli64	a2
    83ca:	00097f03          	0x97f03
    83ce:	0100                	addi	s0,sp,128
    83d0:	0300                	addi	s0,sp,384
    83d2:	b004                	fsd	fs1,32(s0)
    83d4:	0602                	c.slli64	a2
    83d6:	0c090103          	lb	sp,192(s2)
    83da:	0100                	addi	s0,sp,128
    83dc:	0300                	addi	s0,sp,384
    83de:	b704                	fsd	fs1,40(a4)
    83e0:	0602                	c.slli64	a2
    83e2:	14090003          	lb	zero,320(s2)
    83e6:	0100                	addi	s0,sp,128
    83e8:	0300                	addi	s0,sp,384
    83ea:	ba04                	fsd	fs1,48(a2)
    83ec:	0302                	c.slli64	t1
    83ee:	0900                	addi	s0,sp,144
    83f0:	000c                	0xc
    83f2:	0001                	nop
    83f4:	02ba0403          	lb	s0,43(s4)
    83f8:	0306                	slli	t1,t1,0x1
    83fa:	0900                	addi	s0,sp,144
    83fc:	000c                	0xc
    83fe:	0001                	nop
    8400:	02ae0403          	lb	s0,42(t3)
    8404:	0306                	slli	t1,t1,0x1
    8406:	0900                	addi	s0,sp,144
    8408:	0000                	unimp
    840a:	0001                	nop
    840c:	02ae0403          	lb	s0,42(t3)
    8410:	0306                	slli	t1,t1,0x1
    8412:	0900                	addi	s0,sp,144
    8414:	0008                	0x8
    8416:	0001                	nop
    8418:	02870403          	lb	s0,40(a4)
    841c:	0c090003          	lb	zero,192(s2)
    8420:	0100                	addi	s0,sp,128
    8422:	0300                	addi	s0,sp,384
    8424:	bf04                	fsd	fs1,56(a4)
    8426:	0302                	c.slli64	t1
    8428:	0900                	addi	s0,sp,144
    842a:	000c                	0xc
    842c:	0001                	nop
    842e:	02c10403          	lb	s0,44(sp)
    8432:	0c090003          	lb	zero,192(s2)
    8436:	0100                	addi	s0,sp,128
    8438:	0300                	addi	s0,sp,384
    843a:	c104                	sw	s1,0(a0)
    843c:	0302                	c.slli64	t1
    843e:	0900                	addi	s0,sp,144
    8440:	0000                	unimp
    8442:	0001                	nop
    8444:	02c30403          	lb	s0,44(t1)
    8448:	04090003          	lb	zero,64(s2)
    844c:	0100                	addi	s0,sp,128
    844e:	0300                	addi	s0,sp,384
    8450:	c304                	sw	s1,0(a4)
    8452:	0302                	c.slli64	t1
    8454:	0900                	addi	s0,sp,144
    8456:	0000                	unimp
    8458:	0601                	addi	a2,a2,0
    845a:	04097f03          	0x4097f03
    845e:	0100                	addi	s0,sp,128
    8460:	0300                	addi	s0,sp,384
    8462:	c404                	sw	s1,8(s0)
    8464:	0602                	c.slli64	a2
    8466:	10090103          	lb	sp,256(s2)
    846a:	0100                	addi	s0,sp,128
    846c:	0300                	addi	s0,sp,384
    846e:	cb04                	sw	s1,16(a4)
    8470:	0302                	c.slli64	t1
    8472:	0900                	addi	s0,sp,144
    8474:	0004                	0x4
    8476:	0001                	nop
    8478:	02cb0403          	lb	s0,44(s6)
    847c:	00090003          	lb	zero,0(s2)
    8480:	0100                	addi	s0,sp,128
    8482:	0300                	addi	s0,sp,384
    8484:	cb04                	sw	s1,16(a4)
    8486:	0302                	c.slli64	t1
    8488:	0900                	addi	s0,sp,144
    848a:	0000                	unimp
    848c:	0001                	nop
    848e:	02cb0403          	lb	s0,44(s6)
    8492:	00090003          	lb	zero,0(s2)
    8496:	0100                	addi	s0,sp,128
    8498:	0300                	addi	s0,sp,384
    849a:	cb04                	sw	s1,16(a4)
    849c:	0302                	c.slli64	t1
    849e:	0900                	addi	s0,sp,144
    84a0:	0004                	0x4
    84a2:	0001                	nop
    84a4:	02cb0403          	lb	s0,44(s6)
    84a8:	0c090003          	lb	zero,192(s2)
    84ac:	0100                	addi	s0,sp,128
    84ae:	0300                	addi	s0,sp,384
    84b0:	cb04                	sw	s1,16(a4)
    84b2:	0302                	c.slli64	t1
    84b4:	0900                	addi	s0,sp,144
    84b6:	0000                	unimp
    84b8:	0001                	nop
    84ba:	02cb0403          	lb	s0,44(s6)
    84be:	00090003          	lb	zero,0(s2)
    84c2:	0100                	addi	s0,sp,128
    84c4:	0300                	addi	s0,sp,384
    84c6:	cb04                	sw	s1,16(a4)
    84c8:	0302                	c.slli64	t1
    84ca:	0900                	addi	s0,sp,144
    84cc:	0000                	unimp
    84ce:	0001                	nop
    84d0:	02cd0403          	lb	s0,44(s10)
    84d4:	0c090003          	lb	zero,192(s2)
    84d8:	0100                	addi	s0,sp,128
    84da:	0300                	addi	s0,sp,384
    84dc:	cd04                	sw	s1,24(a0)
    84de:	0302                	c.slli64	t1
    84e0:	0900                	addi	s0,sp,144
    84e2:	0000                	unimp
    84e4:	0001                	nop
    84e6:	02cd0403          	lb	s0,44(s10)
    84ea:	00090003          	lb	zero,0(s2)
    84ee:	0100                	addi	s0,sp,128
    84f0:	0300                	addi	s0,sp,384
    84f2:	cd04                	sw	s1,24(a0)
    84f4:	0302                	c.slli64	t1
    84f6:	0900                	addi	s0,sp,144
    84f8:	0004                	0x4
    84fa:	0001                	nop
    84fc:	02cd0403          	lb	s0,44(s10)
    8500:	0c090003          	lb	zero,192(s2)
    8504:	0100                	addi	s0,sp,128
    8506:	0300                	addi	s0,sp,384
    8508:	cd04                	sw	s1,24(a0)
    850a:	0302                	c.slli64	t1
    850c:	0900                	addi	s0,sp,144
    850e:	0000                	unimp
    8510:	0001                	nop
    8512:	02cd0403          	lb	s0,44(s10)
    8516:	00090003          	lb	zero,0(s2)
    851a:	0100                	addi	s0,sp,128
    851c:	0300                	addi	s0,sp,384
    851e:	ce04                	sw	s1,24(a2)
    8520:	0302                	c.slli64	t1
    8522:	0900                	addi	s0,sp,144
    8524:	0004                	0x4
    8526:	0601                	addi	a2,a2,0
    8528:	08090003          	lb	zero,128(s2)
    852c:	0100                	addi	s0,sp,128
    852e:	0300                	addi	s0,sp,384
    8530:	e104                	fsw	fs1,0(a0)
    8532:	0602                	c.slli64	a2
    8534:	0c090003          	lb	zero,192(s2)
    8538:	0100                	addi	s0,sp,128
    853a:	0300                	addi	s0,sp,384
    853c:	e104                	fsw	fs1,0(a0)
    853e:	0302                	c.slli64	t1
    8540:	0900                	addi	s0,sp,144
    8542:	0000                	unimp
    8544:	0001                	nop
    8546:	02e10403          	lb	s0,46(sp)
    854a:	00090003          	lb	zero,0(s2)
    854e:	0100                	addi	s0,sp,128
    8550:	0300                	addi	s0,sp,384
    8552:	e104                	fsw	fs1,0(a0)
    8554:	0302                	c.slli64	t1
    8556:	0900                	addi	s0,sp,144
    8558:	0000                	unimp
    855a:	0001                	nop
    855c:	02e10403          	lb	s0,46(sp)
    8560:	00090003          	lb	zero,0(s2)
    8564:	0100                	addi	s0,sp,128
    8566:	0300                	addi	s0,sp,384
    8568:	e104                	fsw	fs1,0(a0)
    856a:	0302                	c.slli64	t1
    856c:	0900                	addi	s0,sp,144
    856e:	0000                	unimp
    8570:	0001                	nop
    8572:	02e10403          	lb	s0,46(sp)
    8576:	00090003          	lb	zero,0(s2)
    857a:	0100                	addi	s0,sp,128
    857c:	0300                	addi	s0,sp,384
    857e:	e104                	fsw	fs1,0(a0)
    8580:	0302                	c.slli64	t1
    8582:	0900                	addi	s0,sp,144
    8584:	0000                	unimp
    8586:	0001                	nop
    8588:	02e20403          	lb	s0,46(tp) # 2e <_start+0x1e>
    858c:	04090003          	lb	zero,64(s2)
    8590:	0100                	addi	s0,sp,128
    8592:	0306                	slli	t1,t1,0x1
    8594:	097f                	0x97f
    8596:	0004                	0x4
    8598:	0301                	addi	t1,t1,0
    859a:	0901                	addi	s2,s2,0
    859c:	0008                	0x8
    859e:	0001                	nop
    85a0:	02e30403          	lb	s0,46(t1)
    85a4:	0306                	slli	t1,t1,0x1
    85a6:	0900                	addi	s0,sp,144
    85a8:	0008                	0x8
    85aa:	0001                	nop
    85ac:	02c00403          	lb	s0,44(zero) # 2c <_start+0x1c>
    85b0:	08090003          	lb	zero,128(s2)
    85b4:	0100                	addi	s0,sp,128
    85b6:	0300                	addi	s0,sp,384
    85b8:	c004                	sw	s1,0(s0)
    85ba:	0302                	c.slli64	t1
    85bc:	0900                	addi	s0,sp,144
    85be:	0000                	unimp
    85c0:	0001                	nop
    85c2:	02c00403          	lb	s0,44(zero) # 2c <_start+0x1c>
    85c6:	00090003          	lb	zero,0(s2)
    85ca:	0100                	addi	s0,sp,128
    85cc:	0300                	addi	s0,sp,384
    85ce:	c004                	sw	s1,0(s0)
    85d0:	0302                	c.slli64	t1
    85d2:	0900                	addi	s0,sp,144
    85d4:	0000                	unimp
    85d6:	0001                	nop
    85d8:	02c00403          	lb	s0,44(zero) # 2c <_start+0x1c>
    85dc:	04090003          	lb	zero,64(s2)
    85e0:	0100                	addi	s0,sp,128
    85e2:	0300                	addi	s0,sp,384
    85e4:	c004                	sw	s1,0(s0)
    85e6:	0302                	c.slli64	t1
    85e8:	0900                	addi	s0,sp,144
    85ea:	000c                	0xc
    85ec:	0001                	nop
    85ee:	02c00403          	lb	s0,44(zero) # 2c <_start+0x1c>
    85f2:	00090003          	lb	zero,0(s2)
    85f6:	0100                	addi	s0,sp,128
    85f8:	0300                	addi	s0,sp,384
    85fa:	c004                	sw	s1,0(s0)
    85fc:	0302                	c.slli64	t1
    85fe:	0900                	addi	s0,sp,144
    8600:	0000                	unimp
    8602:	0001                	nop
    8604:	02c00403          	lb	s0,44(zero) # 2c <_start+0x1c>
    8608:	00090003          	lb	zero,0(s2)
    860c:	0100                	addi	s0,sp,128
    860e:	0300                	addi	s0,sp,384
    8610:	f304                	fsw	fs1,32(a4)
    8612:	0302                	c.slli64	t1
    8614:	0900                	addi	s0,sp,144
    8616:	000c                	0xc
    8618:	0001                	nop
    861a:	02f30403          	lb	s0,47(t1)
    861e:	00090003          	lb	zero,0(s2)
    8622:	0100                	addi	s0,sp,128
    8624:	0300                	addi	s0,sp,384
    8626:	f304                	fsw	fs1,32(a4)
    8628:	0302                	c.slli64	t1
    862a:	0900                	addi	s0,sp,144
    862c:	0000                	unimp
    862e:	0001                	nop
    8630:	02f30403          	lb	s0,47(t1)
    8634:	04090003          	lb	zero,64(s2)
    8638:	0100                	addi	s0,sp,128
    863a:	0300                	addi	s0,sp,384
    863c:	f304                	fsw	fs1,32(a4)
    863e:	0302                	c.slli64	t1
    8640:	0900                	addi	s0,sp,144
    8642:	000c                	0xc
    8644:	0001                	nop
    8646:	02f30403          	lb	s0,47(t1)
    864a:	00090003          	lb	zero,0(s2)
    864e:	0100                	addi	s0,sp,128
    8650:	0300                	addi	s0,sp,384
    8652:	f304                	fsw	fs1,32(a4)
    8654:	0302                	c.slli64	t1
    8656:	0900                	addi	s0,sp,144
    8658:	0000                	unimp
    865a:	0001                	nop
    865c:	02fc0403          	lb	s0,47(s8)
    8660:	04090003          	lb	zero,64(s2)
    8664:	0100                	addi	s0,sp,128
    8666:	0300                	addi	s0,sp,384
    8668:	fc04                	fsw	fs1,56(s0)
    866a:	0302                	c.slli64	t1
    866c:	0900                	addi	s0,sp,144
    866e:	0000                	unimp
    8670:	0001                	nop
    8672:	02ff0403          	lb	s0,47(t5)
    8676:	04090003          	lb	zero,64(s2)
    867a:	0100                	addi	s0,sp,128
    867c:	0300                	addi	s0,sp,384
    867e:	ff04                	fsw	fs1,56(a4)
    8680:	0302                	c.slli64	t1
    8682:	0900                	addi	s0,sp,144
    8684:	0000                	unimp
    8686:	0001                	nop
    8688:	02ff0403          	lb	s0,47(t5)
    868c:	00090003          	lb	zero,0(s2)
    8690:	0100                	addi	s0,sp,128
    8692:	0300                	addi	s0,sp,384
    8694:	ff04                	fsw	fs1,56(a4)
    8696:	0302                	c.slli64	t1
    8698:	0900                	addi	s0,sp,144
    869a:	0000                	unimp
    869c:	0001                	nop
    869e:	02ff0403          	lb	s0,47(t5)
    86a2:	08090003          	lb	zero,128(s2)
    86a6:	0100                	addi	s0,sp,128
    86a8:	0300                	addi	s0,sp,384
    86aa:	8d04                	0x8d04
    86ac:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    86b0:	0000                	unimp
    86b2:	0001                	nop
    86b4:	038d0403          	lb	s0,56(s10)
    86b8:	00090003          	lb	zero,0(s2)
    86bc:	0100                	addi	s0,sp,128
    86be:	0300                	addi	s0,sp,384
    86c0:	8d04                	0x8d04
    86c2:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    86c6:	0004                	0x4
    86c8:	0001                	nop
    86ca:	03930403          	lb	s0,57(t1)
    86ce:	08090003          	lb	zero,128(s2)
    86d2:	0100                	addi	s0,sp,128
    86d4:	0300                	addi	s0,sp,384
    86d6:	9304                	0x9304
    86d8:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    86dc:	0000                	unimp
    86de:	0001                	nop
    86e0:	03930403          	lb	s0,57(t1)
    86e4:	14090003          	lb	zero,320(s2)
    86e8:	0100                	addi	s0,sp,128
    86ea:	0300                	addi	s0,sp,384
    86ec:	9704                	0x9704
    86ee:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    86f2:	0004                	0x4
    86f4:	0001                	nop
    86f6:	03980403          	lb	s0,57(a6)
    86fa:	04090003          	lb	zero,64(s2)
    86fe:	0100                	addi	s0,sp,128
    8700:	0300                	addi	s0,sp,384
    8702:	9804                	0x9804
    8704:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    8708:	0008                	0x8
    870a:	0001                	nop
    870c:	039a0403          	lb	s0,57(s4)
    8710:	08090003          	lb	zero,128(s2)
    8714:	0100                	addi	s0,sp,128
    8716:	0300                	addi	s0,sp,384
    8718:	9a04                	0x9a04
    871a:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    871e:	0020                	addi	s0,sp,8
    8720:	0001                	nop
    8722:	03a60403          	lb	s0,58(a2)
    8726:	0306                	slli	t1,t1,0x1
    8728:	0900                	addi	s0,sp,144
    872a:	0004                	0x4
    872c:	0001                	nop
    872e:	02f40403          	lb	s0,47(s0)
    8732:	0306                	slli	t1,t1,0x1
    8734:	0900                	addi	s0,sp,144
    8736:	0008                	0x8
    8738:	0601                	addi	a2,a2,0
    873a:	0c090003          	lb	zero,192(s2)
    873e:	0100                	addi	s0,sp,128
    8740:	0300                	addi	s0,sp,384
    8742:	8604                	0x8604
    8744:	00030603          	lb	a2,0(t1)
    8748:	0809                	addi	a6,a6,2
    874a:	0100                	addi	s0,sp,128
    874c:	0300                	addi	s0,sp,384
    874e:	8604                	0x8604
    8750:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    8754:	0000                	unimp
    8756:	0001                	nop
    8758:	03860403          	lb	s0,56(a2)
    875c:	00090003          	lb	zero,0(s2)
    8760:	0100                	addi	s0,sp,128
    8762:	0300                	addi	s0,sp,384
    8764:	8604                	0x8604
    8766:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    876a:	0000                	unimp
    876c:	0001                	nop
    876e:	03860403          	lb	s0,56(a2)
    8772:	08090003          	lb	zero,128(s2)
    8776:	0100                	addi	s0,sp,128
    8778:	0300                	addi	s0,sp,384
    877a:	8604                	0x8604
    877c:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    8780:	0000                	unimp
    8782:	0001                	nop
    8784:	038f0403          	lb	s0,56(t5)
    8788:	08090003          	lb	zero,128(s2)
    878c:	0100                	addi	s0,sp,128
    878e:	0300                	addi	s0,sp,384
    8790:	8f04                	0x8f04
    8792:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    8796:	0008                	0x8
    8798:	0001                	nop
    879a:	039b0403          	lb	s0,57(s6)
    879e:	08090003          	lb	zero,128(s2)
    87a2:	0100                	addi	s0,sp,128
    87a4:	0300                	addi	s0,sp,384
    87a6:	a304                	fsd	fs1,0(a4)
    87a8:	00030603          	lb	a2,0(t1)
    87ac:	1409                	addi	s0,s0,-30
    87ae:	0100                	addi	s0,sp,128
    87b0:	0300                	addi	s0,sp,384
    87b2:	a604                	fsd	fs1,8(a2)
    87b4:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    87b8:	000c                	0xc
    87ba:	0001                	nop
    87bc:	03a60403          	lb	s0,58(a2)
    87c0:	0306                	slli	t1,t1,0x1
    87c2:	0900                	addi	s0,sp,144
    87c4:	000c                	0xc
    87c6:	0001                	nop
    87c8:	03990403          	lb	s0,57(s2)
    87cc:	08090003          	lb	zero,128(s2)
    87d0:	0100                	addi	s0,sp,128
    87d2:	0300                	addi	s0,sp,384
    87d4:	9904                	0x9904
    87d6:	09000303          	lb	t1,144(zero) # 90 <__do_global_dtors_aux+0x34>
    87da:	0004                	0x4
    87dc:	0601                	addi	a2,a2,0
    87de:	10097f03          	0x10097f03
    87e2:	0100                	addi	s0,sp,128
    87e4:	08090103          	lb	sp,128(s2)
    87e8:	0100                	addi	s0,sp,128
    87ea:	08097f03          	0x8097f03
    87ee:	0100                	addi	s0,sp,128
    87f0:	0200                	addi	s0,sp,256
    87f2:	2f04                	fld	fs1,24(a4)
    87f4:	0306                	slli	t1,t1,0x1
    87f6:	0902                	c.slli64	s2
    87f8:	0018                	0x18
    87fa:	0001                	nop
    87fc:	0402                	c.slli64	s0
    87fe:	0900032f          	vamoswapei8.v	zero,(zero),v16,v6,v0.t
    8802:	0000                	unimp
    8804:	0001                	nop
    8806:	0402                	c.slli64	s0
    8808:	0900032f          	vamoswapei8.v	zero,(zero),v16,v6,v0.t
    880c:	0000                	unimp
    880e:	0001                	nop
    8810:	0402                	c.slli64	s0
    8812:	0900033f 0001000c 	0x1000c0900033f
    881a:	0402                	c.slli64	s0
    881c:	0900033f 00010000 	0x100000900033f
    8824:	0402                	c.slli64	s0
    8826:	0900033f 06010004 	0x60100040900033f
    882e:	08090003          	lb	zero,128(s2)
    8832:	0100                	addi	s0,sp,128
    8834:	0200                	addi	s0,sp,256
    8836:	4f04                	lw	s1,24(a4)
    8838:	0306                	slli	t1,t1,0x1
    883a:	0900                	addi	s0,sp,144
    883c:	000c                	0xc
    883e:	0001                	nop
    8840:	0402                	c.slli64	s0
    8842:	0900034f          	fnmadd.s	ft6,ft0,fa6,ft1,rne
    8846:	0000                	unimp
    8848:	0001                	nop
    884a:	0402                	c.slli64	s0
    884c:	0900034f          	fnmadd.s	ft6,ft0,fa6,ft1,rne
    8850:	0000                	unimp
    8852:	0001                	nop
    8854:	0402                	c.slli64	s0
    8856:	0900034f          	fnmadd.s	ft6,ft0,fa6,ft1,rne
    885a:	000c                	0xc
    885c:	0001                	nop
    885e:	0402                	c.slli64	s0
    8860:	0900034f          	fnmadd.s	ft6,ft0,fa6,ft1,rne
    8864:	0008                	0x8
    8866:	0001                	nop
    8868:	0402                	c.slli64	s0
    886a:	0650                	addi	a2,sp,772
    886c:	04090003          	lb	zero,64(s2)
    8870:	0100                	addi	s0,sp,128
    8872:	0c090003          	lb	zero,192(s2)
    8876:	0100                	addi	s0,sp,128
    8878:	0200                	addi	s0,sp,256
    887a:	5a04                	lw	s1,48(a2)
    887c:	0306                	slli	t1,t1,0x1
    887e:	0900                	addi	s0,sp,144
    8880:	000c                	0xc
    8882:	0001                	nop
    8884:	0402                	c.slli64	s0
    8886:	035a                	slli	t1,t1,0x16
    8888:	0900                	addi	s0,sp,144
    888a:	0000                	unimp
    888c:	0001                	nop
    888e:	0402                	c.slli64	s0
    8890:	035a                	slli	t1,t1,0x16
    8892:	0900                	addi	s0,sp,144
    8894:	0000                	unimp
    8896:	0001                	nop
    8898:	0402                	c.slli64	s0
    889a:	035a                	slli	t1,t1,0x16
    889c:	0900                	addi	s0,sp,144
    889e:	0000                	unimp
    88a0:	0001                	nop
    88a2:	0402                	c.slli64	s0
    88a4:	035a                	slli	t1,t1,0x16
    88a6:	0900                	addi	s0,sp,144
    88a8:	0000                	unimp
    88aa:	0001                	nop
    88ac:	0402                	c.slli64	s0
    88ae:	035a                	slli	t1,t1,0x16
    88b0:	0900                	addi	s0,sp,144
    88b2:	0000                	unimp
    88b4:	0001                	nop
    88b6:	0402                	c.slli64	s0
    88b8:	035a                	slli	t1,t1,0x16
    88ba:	0900                	addi	s0,sp,144
    88bc:	0000                	unimp
    88be:	0001                	nop
    88c0:	0402                	c.slli64	s0
    88c2:	035a                	slli	t1,t1,0x16
    88c4:	0900                	addi	s0,sp,144
    88c6:	0000                	unimp
    88c8:	0001                	nop
    88ca:	0402                	c.slli64	s0
    88cc:	035a                	slli	t1,t1,0x16
    88ce:	0900                	addi	s0,sp,144
    88d0:	0000                	unimp
    88d2:	0501                	addi	a0,a0,0
    88d4:	0001                	nop
    88d6:	0402                	c.slli64	s0
    88d8:	065a                	slli	a2,a2,0x16
    88da:	0c090403          	lb	s0,192(s2)
    88de:	0100                	addi	s0,sp,128
    88e0:	0305                	addi	t1,t1,1
    88e2:	0200                	addi	s0,sp,256
    88e4:	5a04                	lw	s1,48(a2)
    88e6:	08097c03          	0x8097c03
    88ea:	0100                	addi	s0,sp,128
    88ec:	0200                	addi	s0,sp,256
    88ee:	5a04                	lw	s1,48(a2)
    88f0:	0306                	slli	t1,t1,0x1
    88f2:	0900                	addi	s0,sp,144
    88f4:	0014                	0x14
    88f6:	0001                	nop
    88f8:	0402                	c.slli64	s0
    88fa:	035a                	slli	t1,t1,0x16
    88fc:	0900                	addi	s0,sp,144
    88fe:	0000                	unimp
    8900:	0001                	nop
    8902:	0402                	c.slli64	s0
    8904:	035a                	slli	t1,t1,0x16
    8906:	0901                	addi	s2,s2,0
    8908:	0000                	unimp
    890a:	0001                	nop
    890c:	0402                	c.slli64	s0
    890e:	035a                	slli	t1,t1,0x16
    8910:	0900                	addi	s0,sp,144
    8912:	0000                	unimp
    8914:	0001                	nop
    8916:	0402                	c.slli64	s0
    8918:	035a                	slli	t1,t1,0x16
    891a:	0900                	addi	s0,sp,144
    891c:	0000                	unimp
    891e:	0001                	nop
    8920:	0402                	c.slli64	s0
    8922:	035a                	slli	t1,t1,0x16
    8924:	0902                	c.slli64	s2
    8926:	0000                	unimp
    8928:	0501                	addi	a0,a0,0
    892a:	0001                	nop
    892c:	0402                	c.slli64	s0
    892e:	065a                	slli	a2,a2,0x16
    8930:	00090103          	lb	sp,0(s2)
    8934:	0100                	addi	s0,sp,128
    8936:	0305                	addi	t1,t1,1
    8938:	20097a03          	0x20097a03
    893c:	0100                	addi	s0,sp,128
    893e:	08090103          	lb	sp,128(s2)
    8942:	0100                	addi	s0,sp,128
    8944:	3c09                	jal	8356 <impure_data+0x306>
    8946:	0000                	unimp
    8948:	0101                	addi	sp,sp,0

Disassembly of section .debug_info:

00000000 <.debug_info>:
lui     sp,%hi(__stack_top)                                             
       0:	0022                	c.slli	zero,0x8
       2:	0000                	unimp
addi    sp,sp,%lo(__stack_top)
       4:	0002                	c.slli64	zero
       6:	0000                	unimp
jal   zero, _start
       8:	0000                	unimp
       a:	0104                	addi	s1,sp,128
	...
      14:	000c                	0xc
      16:	0000                	unimp
      18:	0000                	unimp
      1a:	0000                	unimp
      1c:	00000027          	vse8.v	v0,(zero),v0.t
      20:	004c                	addi	a1,sp,4
      22:	0000                	unimp
      24:	8001                	c.srli64	s0
      26:	08b0                	addi	a2,sp,88
      28:	0000                	unimp
      2a:	0004                	0x4
      2c:	0014                	0x14
      2e:	0000                	unimp
      30:	0104                	addi	s1,sp,128
      32:	000002d3          	fadd.s	ft5,ft0,ft0,rne
      36:	ef0c                	fsw	fa1,24(a4)
      38:	0000                	unimp
      3a:	2700                	fld	fs0,8(a4)
      3c:	0000                	unimp
      3e:	c400                	sw	s0,8(s0)
      40:	0000                	unimp
      42:	3c00                	fld	fs0,56(s0)
      44:	000e                	c.slli	zero,0x3
      46:	6100                	flw	fs0,0(a0)
      48:	0000                	unimp
      4a:	0200                	addi	s0,sp,256
      4c:	0504                	addi	s1,sp,640
      4e:	6e69                	lui	t3,0x1a
      50:	0074                	addi	a3,sp,12
      52:	ca070403          	lb	s0,-864(a4)
      56:	0008                	0x8
      58:	0300                	addi	s0,sp,384
      5a:	0508                	addi	a0,sp,640
      5c:	018d                	addi	gp,gp,3
      5e:	0000                	unimp
      60:	b8041003          	lh	zero,-1152(s0)
      64:	0011                	c.nop	4
      66:	0400                	addi	s0,sp,512
      68:	02b2                	slli	t0,t0,0xc
      6a:	0000                	unimp
      6c:	5f02                	lw	t5,32(sp)
      6e:	4d18                	lw	a4,24(a0)
      70:	0000                	unimp
      72:	0300                	addi	s0,sp,384
      74:	0502                	c.slli64	a0
      76:	0085                	addi	ra,ra,1
      78:	0000                	unimp
      7a:	f604                	fsw	fs1,40(a2)
      7c:	0001                	nop
      7e:	0200                	addi	s0,sp,256
      80:	1860                	addi	s0,sp,60
      82:	0060                	addi	s0,sp,12
      84:	0000                	unimp
      86:	5a070203          	lb	tp,1440(a4)
      8a:	0002                	c.slli64	zero
      8c:	0400                	addi	s0,sp,512
      8e:	00ce                	slli	ra,ra,0x13
      90:	0000                	unimp
      92:	6102                	flw	ft2,0(sp)
      94:	2518                	fld	fa4,8(a0)
      96:	0000                	unimp
      98:	0300                	addi	s0,sp,384
      9a:	0408                	addi	a0,sp,512
      9c:	11bd                	addi	gp,gp,-17
      9e:	0000                	unimp
      a0:	b104                	fsd	fs1,32(a0)
      a2:	0000                	unimp
      a4:	0200                	addi	s0,sp,256
      a6:	00861863          	bne	a2,s0,b6 <frame_dummy+0x12>
      aa:	0000                	unimp
      ac:	11080103          	lb	sp,272(a6)
      b0:	0002                	c.slli64	zero
      b2:	0400                	addi	s0,sp,512
      b4:	0398                	addi	a4,sp,448
      b6:	0000                	unimp
      b8:	6402                	flw	fs0,0(sp)
      ba:	2c18                	fld	fa4,24(s0)
      bc:	0000                	unimp
      be:	0500                	addi	s0,sp,640
      c0:	033c                	addi	a5,sp,392
      c2:	0000                	unimp
{
      c4:	0201                	addi	tp,tp,0
      c6:	10c4                	addi	s1,sp,100
      c8:	00b4                	addi	a3,sp,72
      ca:	0000                	unimp
      cc:	8106                	mv	sp,ra
      ce:	0001                	nop
      d0:	0200                	addi	s0,sp,256
      d2:	0bc6                	slli	s7,s7,0x11
      d4:	007a                	c.slli	zero,0x1e
      d6:	0000                	unimp
      d8:	0000                	unimp
      da:	9f04                	0x9f04
    ee_s16 data = *pdata;
      dc:	02000003          	lb	zero,32(zero) # 20 <_start+0x10>
      e0:	009903c7          	fmsub.s	ft7,fs2,fs1,ft0,rne
      e4:	0000                	unimp
      e6:	d505                	beqz	a0,e <RAM_START_ADDRESS+0xe>
          & 1;  /* bit 7 indicates if the function result has been cached */
      e8:	0001                	nop
      ea:	0400                	addi	s0,sp,512
      ec:	e8105b03          	lhu	s6,-383(zero) # fffffe81 <RAM_SIZE+0xfffefe81>
      f0:	0000                	unimp
      f2:	0600                	addi	s0,sp,768
      f4:	034c                	addi	a1,sp,388
      f6:	0000                	unimp
      f8:	410c5d03          	lhu	s10,1040(s8)
    ee_u8  optype
      fc:	0000                	unimp
      fe:	0000                	unimp
     100:	78646907          	vlsseg4e512.v	v18,(s0),t1,v0.t
    if (optype) /* if cached, use cache */
     104:	0300                	addi	s0,sp,384
     106:	0c5e                	slli	s8,s8,0x17
     108:	0041                	c.nop	16
     10a:	0000                	unimp
        return (data & 0x007f);
     10c:	0002                	c.slli64	zero
     10e:	3904                	fld	fs1,48(a0)
     110:	0002                	c.slli64	zero
     112:	0300                	addi	s0,sp,384
     114:	035f 00c0 0000      	0xc0035f
     11a:	6605                	lui	a2,0x1
     11c:	0000                	unimp
     11e:	0800                	addi	s0,sp,16
        ee_s16 flag = data & 0x7; /* bits 0-2 is type of function to perform */
     120:	1c106103          	0x1c106103
     124:	0001                	nop
     126:	0600                	addi	s0,sp,768
     128:	03b9                	addi	t2,t2,14
     12a:	0000                	unimp
               & 0xf);       /* bits 3-6 is specific data for the operation */
     12c:	1c196303          	0x1c196303
     130:	0001                	nop
     132:	0000                	unimp
     134:	2e06                	fld	ft8,64(sp)
     136:	0001                	nop
     138:	0300                	addi	s0,sp,384
     13a:	1964                	addi	s1,sp,188
        ee_s16 dtype
     13c:	0122                	slli	sp,sp,0x8
     13e:	0000                	unimp
     140:	0004                	0x4
     142:	0408                	addi	a0,sp,512
        dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
     144:	00f4                	addi	a3,sp,76
     146:	0000                	unimp
     148:	0408                	addi	a0,sp,512
     14a:	00c0                	addi	s0,sp,68
     14c:	0000                	unimp
     14e:	7204                	flw	fs1,32(a2)
     150:	0000                	unimp
     152:	0300                	addi	s0,sp,384
     154:	0365                	addi	t1,t1,25
     156:	00f4                	addi	a3,sp,76
     158:	0000                	unimp
     15a:	c704                	sw	s1,8(a4)
     15c:	0000                	unimp
     15e:	0300                	addi	s0,sp,384
        switch (flag)
     160:	106a                	c.slli	zero,0x3a
     162:	0041                	c.nop	16
     164:	0000                	unimp
     166:	7304                	flw	fs1,32(a4)
     168:	0002                	c.slli64	zero
     16a:	0300                	addi	s0,sp,384
     16c:	0067106b          	0x67106b
     170:	0000                	unimp
     172:	6305                	lui	t1,0x1
                if (dtype < 0x22) /* set min period for bit corruption */
     174:	10000003          	lb	zero,256(zero) # 100 <calc_func+0x3c>
     178:	86107103          	0x86107103
     17c:	0001                	nop
     17e:	0700                	addi	s0,sp,896
                    dtype = 0x22;
     180:	004e                	c.slli	zero,0x13
     182:	250d7303          	0x250d7303
     186:	0000                	unimp
                retval = core_bench_state(res->size,
     188:	0000                	unimp
     18a:	03004107          	flq	ft2,48(zero) # 30 <_start+0x20>
     18e:	0d74                	addi	a3,sp,668
                                          res->memblock[3],
     190:	0186                	slli	gp,gp,0x1
     192:	0000                	unimp
     194:	0704                	addi	s1,sp,896
     196:	0042                	c.slli	zero,0x10
                retval = core_bench_state(res->size,
     198:	860d7503          	0x860d7503
     19c:	0001                	nop
     19e:	0800                	addi	s0,sp,16
     1a0:	03004307          	flq	ft6,48(zero) # 30 <_start+0x20>
     1a4:	0d76                	slli	s10,s10,0x1d
     1a6:	018c                	addi	a1,sp,192
     1a8:	0000                	unimp
     1aa:	000c                	0xc
     1ac:	0408                	addi	a0,sp,512
     1ae:	0134                	addi	a3,sp,136
     1b0:	0000                	unimp
     1b2:	0408                	addi	a0,sp,512
     1b4:	0140                	addi	s0,sp,132
     1b6:	0000                	unimp
     1b8:	2e04                	fld	fs1,24(a2)
     1ba:	0002                	c.slli64	zero
     1bc:	0300                	addi	s0,sp,384
     1be:	014c0377          	0x14c0377
                if (res->crcstate == 0)
     1c2:	0000                	unimp
     1c4:	1f05                	addi	t5,t5,-31
     1c6:	0001                	nop
     1c8:	4400                	lw	s0,8(s0)
     1ca:	6f108903          	lb	s2,1777(ra)
                    res->crcstate = retval;
     1ce:	0002                	c.slli64	zero
     1d0:	0600                	addi	s0,sp,768
     1d2:	014d                	addi	sp,sp,19
     1d4:	0000                	unimp
     1d6:	41198c03          	lb	s8,1041(s3)
                break;
     1da:	0000                	unimp
                retval = core_bench_matrix(&(res->mat), dtype, res->crc);
     1dc:	0000                	unimp
     1de:	5306                	lw	t1,96(sp)
     1e0:	0001                	nop
     1e2:	0300                	addi	s0,sp,384
     1e4:	198d                	addi	s3,s3,-29
     1e6:	0041                	c.nop	16
     1e8:	0000                	unimp
     1ea:	0602                	c.slli64	a2
     1ec:	0159                	addi	sp,sp,22
     1ee:	0000                	unimp
     1f0:	41198e03          	lb	t3,1041(s3)
     1f4:	0000                	unimp
     1f6:	0400                	addi	s0,sp,512
     1f8:	9206                	add	tp,tp,ra
     1fa:	0004                	0x4
     1fc:	0300                	addi	s0,sp,384
     1fe:	026f198f          	0x26f198f
     202:	0000                	unimp
     204:	0608                	addi	a0,sp,768
     206:	0255                	addi	tp,tp,21
                if (res->crcmatrix == 0)
     208:	0000                	unimp
     20a:	8d199003          	lh	zero,-1839(s3)
     20e:	0000                	unimp
     210:	1800                	addi	s0,sp,48
     212:	5806                	lw	a6,96(sp)
                    res->crcmatrix = retval;
     214:	03000003          	lb	zero,48(zero) # 30 <_start+0x20>
     218:	1991                	addi	s3,s3,-28
     21a:	008d                	addi	ra,ra,3
     21c:	0000                	unimp
     21e:	061c                	addi	a5,sp,768
                break;
     220:	0336                	slli	t1,t1,0xd
     222:	0000                	unimp
                retval = data;
     224:	8d199203          	lh	tp,-1839(s3)
     228:	0000                	unimp
     22a:	2000                	fld	fs0,0(s0)
                break;
     22c:	9a06                	add	s4,s4,ra
     22e:	0009                	c.nop	2
                break;
     230:	0300                	addi	s0,sp,384
     232:	011c1993          	slli	s3,s8,0x11
     236:	0000                	unimp
                break;
     238:	0724                	addi	s1,sp,904
     23a:	616d                	addi	sp,sp,240
        res->crc = crcu16(retval, res->crc);
     23c:	0074                	addi	a3,sp,12
     23e:	92199403          	lh	s0,-1759(s3)
     242:	0001                	nop
     244:	2800                	fld	fs0,16(s0)
     246:	63726307          	0x63726307
     24a:	0300                	addi	s0,sp,384
     24c:	0c96                	slli	s9,s9,0x5
     24e:	0054                	addi	a3,sp,4
     250:	0000                	unimp
     252:	0638                	addi	a4,sp,776
     254:	015f 0000 9703      	0x97030000015f
     25a:	540c                	lw	a1,40(s0)
     25c:	0000                	unimp
     25e:	3a00                	fld	fs0,48(a2)
     260:	1606                	slli	a2,a2,0x21
     262:	03000003          	lb	zero,48(zero) # 30 <_start+0x20>
        retval &= 0x007f;
     266:	0c98                	addi	a4,sp,592
     268:	0054                	addi	a3,sp,4
     26a:	0000                	unimp
     26c:	063c                	addi	a5,sp,776
     26e:	01ba                	slli	gp,gp,0xe
        *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
     270:	0000                	unimp
     272:	540c9903          	lh	s2,1344(s9) # 800540 <RAM_SIZE+0x7f0540>
     276:	0000                	unimp
     278:	3e00                	fld	fs0,56(a2)
     27a:	72726507          	0x72726507
     27e:	0300                	addi	s0,sp,384
     280:	0c9a                	slli	s9,s9,0x6
     282:	0041                	c.nop	16
     284:	0000                	unimp
     286:	0640                	addi	s0,sp,772
     288:	0331                	addi	t1,t1,12
     28a:	0000                	unimp
     28c:	b4139c03          	lh	s8,-1215(t2)
     290:	0000                	unimp
     292:	4200                	lw	s0,0(a2)
     294:	0900                	addi	s0,sp,144
     296:	027f                	0x27f
     298:	0000                	unimp
     29a:	027f                	0x27f
     29c:	0000                	unimp
     29e:	2c0a                	fld	fs8,128(sp)
     2a0:	0000                	unimp
     2a2:	0300                	addi	s0,sp,384
        return retval;
     2a4:	0b00                	addi	s0,sp,400
     2a6:	0404                	addi	s1,sp,512
}
     2a8:	00000133          	add	sp,zero,zero
     2ac:	9e039d03          	lh	s10,-1568(t2)
     2b0:	0001                	nop
     2b2:	0400                	addi	s0,sp,512
     2b4:	01b1                	addi	gp,gp,12
     2b6:	0000                	unimp
     2b8:	4001                	c.li	zero,0
     2ba:	9912                	add	s2,s2,tp
{
     2bc:	0002                	c.slli64	zero
     2be:	0800                	addi	s0,sp,16
     2c0:	9f04                	0x9f04
     2c2:	0002                	c.slli64	zero
     2c4:	0c00                	addi	s0,sp,528
     2c6:	00000067          	jr	zero # 0 <RAM_START_ADDRESS>
     2ca:	02b8                	addi	a4,sp,328
     2cc:	0000                	unimp
     2ce:	b80d                	j	fffffb00 <RAM_SIZE+0xfffefb00>
     2d0:	0002                	c.slli64	zero
     2d2:	0d00                	addi	s0,sp,656
     2d4:	02b8                	addi	a4,sp,328
     2d6:	0000                	unimp
    ee_s16 val1 = calc_func(&(a->data16), res);
     2d8:	be0d                	j	fffffe0a <RAM_SIZE+0xfffefe0a>
     2da:	0002                	c.slli64	zero
     2dc:	0000                	unimp
     2de:	0408                	addi	a0,sp,512
     2e0:	00e8                	addi	a0,sp,76
     2e2:	0000                	unimp
     2e4:	0408                	addi	a0,sp,512
     2e6:	0281                	addi	t0,t0,0
     2e8:	0000                	unimp
     2ea:	910e                	add	sp,sp,gp
     2ec:	0002                	c.slli64	zero
     2ee:	0100                	addi	s0,sp,128
    ee_s16 val2 = calc_func(&(b->data16), res);
     2f0:	01f4                	addi	a3,sp,204
     2f2:	9b01                	andi	a4,a4,-32
     2f4:	f8000003          	lb	zero,-128(zero) # ffffff80 <RAM_SIZE+0xfffeff80>
     2f8:	000c                	0xc
     2fa:	0800                	addi	s0,sp,16
     2fc:	0002                	c.slli64	zero
     2fe:	0100                	addi	s0,sp,128
     300:	9b9c                	0x9b9c
     302:	0f000003          	lb	zero,240(zero) # f0 <calc_func+0x2c>
     306:	099a                	slli	s3,s3,0x6
    return val1 - val2;
     308:	0000                	unimp
     30a:	f401                	bnez	s0,212 <calc_func+0x14e>
     30c:	2001                	jal	30c <cmp_complex+0x50>
     30e:	0000039b          	0x39b
     312:	7fbc9103          	lh	sp,2043(s9)
}
     316:	6310                	flw	fa2,0(a4)
     318:	706d                	c.lui	zero,0xffffb
     31a:	0100                	addi	s0,sp,128
     31c:	01f4                	addi	a3,sp,204
     31e:	00028d2f          	vamoaddei8.v	zero,(t0),v0,v26,v0.t
     322:	0300                	addi	s0,sp,384
     324:	b891                	j	fffffb78 <RAM_SIZE+0xfffefb78>
     326:	107f                	0x107f
{
     328:	6572                	flw	fa0,28(sp)
     32a:	f4010073          	0xf4010073
     32e:	4201                	li	tp,0
     330:	02be                	slli	t0,t0,0xf
     332:	0000                	unimp
     334:	7fb49103          	lh	sp,2043(s1)
     338:	7011                	c.lui	zero,0xfffe4
     33a:	0100                	addi	s0,sp,128
     33c:	01f6                	slli	gp,gp,0x1d
     33e:	9b10                	0x9b10
    if (res == NULL)
     340:	02000003          	lb	zero,32(zero) # 20 <_start+0x10>
     344:	6c91                	lui	s9,0x4
     346:	7111                	addi	sp,sp,-256
        a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16 >> 8));
     348:	0100                	addi	s0,sp,128
     34a:	01f6                	slli	gp,gp,0x1d
     34c:	9b14                	0x9b14
     34e:	02000003          	lb	zero,32(zero) # 20 <_start+0x10>
     352:	6891                	lui	a7,0x4
     354:	6511                	lui	a0,0x4
     356:	0100                	addi	s0,sp,128
     358:	01f6                	slli	gp,gp,0x1d
     35a:	9b18                	0x9b18
     35c:	02000003          	lb	zero,32(zero) # 20 <_start+0x10>
     360:	6491                	lui	s1,0x4
     362:	0c12                	slli	s8,s8,0x4
     364:	0002                	c.slli64	zero
     366:	0100                	addi	s0,sp,128
     368:	01f6                	slli	gp,gp,0x1d
     36a:	9b1c                	0x9b1c
     36c:	02000003          	lb	zero,32(zero) # 20 <_start+0x10>
     370:	6091                	lui	ra,0x4
     372:	7a12                	flw	fs4,36(sp)
     374:	0001                	nop
     376:	0100                	addi	s0,sp,128
     378:	671001f7          	0x671001f7
     37c:	0000                	unimp
     37e:	0200                	addi	s0,sp,256
     380:	5c91                	li	s9,-28
     382:	cd12                	sw	tp,152(sp)
     384:	0001                	nop
     386:	0100                	addi	s0,sp,128
     388:	671801f7          	0x671801f7
     38c:	0000                	unimp
     38e:	0200                	addi	s0,sp,256
     390:	5891                	li	a7,-28
     392:	9212                	add	tp,tp,tp
        b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16 >> 8));
     394:	01000003          	lb	zero,16(zero) # 10 <_start>
     398:	672101f7          	0x672101f7
     39c:	0000                	unimp
     39e:	0200                	addi	s0,sp,256
     3a0:	5491                	li	s1,-28
     3a2:	7a12                	flw	fs4,36(sp)
     3a4:	0002                	c.slli64	zero
     3a6:	0100                	addi	s0,sp,128
     3a8:	672801f7          	0x672801f7
     3ac:	0000                	unimp
     3ae:	0200                	addi	s0,sp,256
     3b0:	5091                	li	ra,-28
     3b2:	6911                	lui	s2,0x4
     3b4:	0100                	addi	s0,sp,128
     3b6:	672f01f7          	0x672f01f7
     3ba:	0000                	unimp
     3bc:	0200                	addi	s0,sp,256
     3be:	4c91                	li	s9,4
     3c0:	0800                	addi	s0,sp,16
     3c2:	2804                	fld	fs1,16(s0)
     3c4:	0001                	nop
     3c6:	1300                	addi	s0,sp,416
     3c8:	0370                	addi	a2,sp,396
     3ca:	0000                	unimp
     3cc:	d101                	beqz	a0,2cc <cmp_complex+0x10>
     3ce:	0101                	addi	sp,sp,0
     3d0:	0000039b          	0x39b
     3d4:	0c9c                	addi	a5,sp,592
     3d6:	0000                	unimp
     3d8:	005c                	addi	a5,sp,4
     3da:	0000                	unimp
     3dc:	9c01                	0x9c01
     3de:	03ed                	addi	t2,t2,27
    return a->idx - b->idx;
     3e0:	0000                	unimp
     3e2:	00099a0f          	0x99a0f
     3e6:	0100                	addi	s0,sp,128
     3e8:	01d1                	addi	gp,gp,20
     3ea:	9b1e                	add	s6,s6,t2
     3ec:	02000003          	lb	zero,32(zero) # 20 <_start+0x10>
     3f0:	5c91                	li	s9,-28
     3f2:	b912                	fsd	ft4,176(sp)
     3f4:	01000003          	lb	zero,16(zero) # 10 <_start>
}
     3f8:	9b1001d3          	0x9b1001d3
     3fc:	02000003          	lb	zero,32(zero) # 20 <_start+0x10>
     400:	6c91                	lui	s9,0x4
     402:	7411                	lui	s0,0xfffe4
     404:	706d                	c.lui	zero,0xffffb
     406:	0100                	addi	s0,sp,128
{
     408:	9b1e01d3          	0x9b1e01d3
     40c:	02000003          	lb	zero,32(zero) # 20 <_start+0x10>
     410:	6891                	lui	a7,0x4
     412:	1300                	addi	s0,sp,416
     414:	021f 0000 b301      	0xb3010000021f
     41a:	0101                	addi	sp,sp,0
    to->data16 = from->data16;
     41c:	0000039b          	0x39b
     420:	0bf8                	addi	a4,sp,476
     422:	0000                	unimp
     424:	00a4                	addi	s1,sp,72
     426:	0000                	unimp
     428:	9c01                	0x9c01
     42a:	0429                	addi	s0,s0,10
    to->idx    = from->idx;
     42c:	0000                	unimp
     42e:	00099a0f          	0x99a0f
     432:	0100                	addi	s0,sp,128
     434:	9b1b01b3          	0x9b1b01b3
     438:	02000003          	lb	zero,32(zero) # 20 <_start+0x10>
}
     43c:	6c91                	lui	s9,0x4
     43e:	00012e0f          	0x12e0f
     442:	0100                	addi	s0,sp,128
     444:	b82c01b3          	0xb82c01b3
     448:	0002                	c.slli64	zero
     44a:	0200                	addi	s0,sp,256
{
     44c:	6891                	lui	a7,0x4
     44e:	1300                	addi	s0,sp,416
     450:	0000019b          	0x19b
     454:	9801                	andi	s0,s0,-32
     456:	0101                	addi	sp,sp,0
     458:	0000039b          	0x39b
     45c:	0b8c                	addi	a1,sp,464
     45e:	0000                	unimp
     460:	006c                	addi	a1,sp,12
     462:	0000                	unimp
     464:	9c01                	0x9c01
     466:	0475                	addi	s0,s0,29
    ee_u16     retval = 0;
     468:	0000                	unimp
     46a:	0002a50f          	0x2a50f
    ee_u16     found = 0, missed = 0;
     46e:	0100                	addi	s0,sp,128
     470:	0198                	addi	a4,sp,192
     472:	9b22                	add	s6,s6,s0
    list_head *list     = res->list;
     474:	02000003          	lb	zero,32(zero) # 20 <_start+0x10>
     478:	5c91                	li	s9,-28
     47a:	0000580f          	0x580f
     47e:	0100                	addi	s0,sp,128
    ee_s16     find_num = res->seed3;
     480:	0198                	addi	a4,sp,192
     482:	00039b3b          	0x39b3b
     486:	0200                	addi	s0,sp,256
     488:	5891                	li	a7,-28
     48a:	7411                	lui	s0,0xfffe4
    info.idx = finder_idx;
     48c:	706d                	c.lui	zero,0xffffb
     48e:	0100                	addi	s0,sp,128
     490:	019a                	slli	gp,gp,0x6
     492:	b810                	fsd	fa2,48(s0)
    for (i = 0; i < find_num; i++)
     494:	0002                	c.slli64	zero
     496:	0200                	addi	s0,sp,256
     498:	6c91                	lui	s9,0x4
     49a:	1300                	addi	s0,sp,416
        info.data16 = (i & 0xff);
     49c:	0280                	addi	s0,sp,320
     49e:	0000                	unimp
     4a0:	7901                	lui	s2,0xfffe0
     4a2:	0101                	addi	sp,sp,0
     4a4:	0000039b          	0x39b
     4a8:	0b18                	addi	a4,sp,400
     4aa:	0000                	unimp
     4ac:	0074                	addi	a3,sp,12
     4ae:	0000                	unimp
        this_find   = core_list_find(list, &info);
     4b0:	9c01                	0x9c01
     4b2:	04c1                	addi	s1,s1,16
     4b4:	0000                	unimp
     4b6:	0000e30f          	0xe30f
     4ba:	0100                	addi	s0,sp,128
     4bc:	0179                	addi	sp,sp,30
     4be:	9b1d                	andi	a4,a4,-25
     4c0:	02000003          	lb	zero,32(zero) # 20 <_start+0x10>
        list        = core_list_reverse(list);
     4c4:	5c91                	li	s9,-28
     4c6:	7411                	lui	s0,0xfffe4
     4c8:	706d                	c.lui	zero,0xffffb
     4ca:	0100                	addi	s0,sp,128
     4cc:	b810017b          	0xb810017b
        if (this_find == NULL)
     4d0:	0002                	c.slli64	zero
     4d2:	0200                	addi	s0,sp,256
     4d4:	6891                	lui	a7,0x4
     4d6:	7211                	lui	tp,0xfffe4
            missed++;
     4d8:	7465                	lui	s0,0xffff9
     4da:	0100                	addi	s0,sp,128
     4dc:	017c                	addi	a5,sp,140
     4de:	9b10                	0x9b10
     4e0:	02000003          	lb	zero,32(zero) # 20 <_start+0x10>
            retval += (list->next->info->data16 >> 8) & 1;
     4e4:	6c91                	lui	s9,0x4
     4e6:	0e00                	addi	s0,sp,784
     4e8:	0000008f          	0x8f
     4ec:	5001                	c.li	zero,-32
     4ee:	0101                	addi	sp,sp,0
     4f0:	0000039b          	0x39b
     4f4:	0a2c                	addi	a1,sp,280
     4f6:	0000                	unimp
     4f8:	00ec                	addi	a1,sp,76
     4fa:	0000                	unimp
     4fc:	9c01                	0x9c01
     4fe:	054d                	addi	a0,a0,19
     500:	0000                	unimp
     502:	0001400f          	0x1400f
     506:	0100                	addi	s0,sp,128
     508:	0150                	addi	a2,sp,132
     50a:	9b22                	add	s6,s6,s0
     50c:	02000003          	lb	zero,32(zero) # 20 <_start+0x10>
     510:	5c91                	li	s9,-28
     512:	00012e0f          	0x12e0f
     516:	0100                	addi	s0,sp,128
     518:	0151                	addi	sp,sp,20
     51a:	b822                	fsd	fs0,48(sp)
     51c:	0002                	c.slli64	zero
     51e:	0200                	addi	s0,sp,256
     520:	5891                	li	a7,-28
     522:	0004920f          	0x4920f
            found++;
     526:	0100                	addi	s0,sp,128
     528:	0152                	slli	sp,sp,0x14
     52a:	4d22                	lw	s10,8(sp)
     52c:	0005                	c.nop	1
     52e:	0200                	addi	s0,sp,256
            if (this_find->info->data16 & 0x1) /* use found value */
     530:	5491                	li	s1,-28
     532:	0000d50f          	0xd50f
     536:	0100                	addi	s0,sp,128
     538:	53220153          	0x53220153
     53c:	0005                	c.nop	1
     53e:	0200                	addi	s0,sp,256
     540:	5091                	li	ra,-28
     542:	0001e90f          	0x1e90f
     546:	0100                	addi	s0,sp,128
     548:	0154                	addi	a3,sp,132
     54a:	9b22                	add	s6,s6,s0
                retval += (this_find->info->data16 >> 9) & 1;
     54c:	02000003          	lb	zero,32(zero) # 20 <_start+0x10>
     550:	4c91                	li	s9,4
     552:	0002b90f          	0x2b90f
     556:	0100                	addi	s0,sp,128
     558:	0155                	addi	sp,sp,21
     55a:	b822                	fsd	fs0,48(sp)
     55c:	0002                	c.slli64	zero
     55e:	0200                	addi	s0,sp,256
     560:	4891                	li	a7,4
     562:	8212                	mv	tp,tp
     564:	01000003          	lb	zero,16(zero) # 10 <_start>
     568:	9b100157          	0x9b100157
     56c:	02000003          	lb	zero,32(zero) # 20 <_start+0x10>
     570:	6c91                	lui	s9,0x4
     572:	0800                	addi	s0,sp,16
     574:	9b04                	0x9b04
     576:	08000003          	lb	zero,128(zero) # 80 <__do_global_dtors_aux+0x24>
     57a:	b804                	fsd	fs1,48(s0)
     57c:	0002                	c.slli64	zero
     57e:	1400                	addi	s0,sp,544
     580:	01fd                	addi	gp,gp,31
     582:	0000                	unimp
            if (this_find->next != NULL)
     584:	fb01                	bnez	a4,494 <core_bench_list+0x48>
     586:	9b01                	andi	a4,a4,-32
     588:	68000003          	lb	zero,1664(zero) # 680 <core_bench_list+0x234>
     58c:	c4000007          	vluxseg7ei8.v	v0,(zero),v0,v0.t
                finder          = this_find->next;
     590:	0002                	c.slli64	zero
     592:	0100                	addi	s0,sp,128
     594:	789c                	flw	fa5,48(s1)
     596:	0006                	c.slli	zero,0x1
     598:	1500                	addi	s0,sp,672
     59a:	0252                	slli	tp,tp,0x14
                this_find->next = finder->next;
     59c:	0000                	unimp
     59e:	fb01                	bnez	a4,4ae <core_bench_list+0x62>
     5a0:	00008d17          	auipc	s10,0x8
     5a4:	0300                	addi	s0,sp,384
     5a6:	bc91                	j	fffffffa <RAM_SIZE+0xfffefffa>
     5a8:	157f                	0x157f
     5aa:	0492                	slli	s1,s1,0x4
                finder->next    = list->next;
     5ac:	0000                	unimp
     5ae:	fb01                	bnez	a4,4be <core_bench_list+0x72>
     5b0:	00039b2b          	0x39b2b
     5b4:	0300                	addi	s0,sp,384
     5b6:	b891                	j	fffffe0a <RAM_SIZE+0xfffefe0a>
     5b8:	157f                	0x157f
     5ba:	00000353          	fadd.s	ft6,ft0,ft0,rne
                list->next      = finder;
     5be:	fb01                	bnez	a4,4ce <core_bench_list+0x82>
     5c0:	413c                	lw	a5,64(a0)
     5c2:	0000                	unimp
     5c4:	0300                	addi	s0,sp,384
     5c6:	b691                	j	10a <calc_func+0x46>
        if (info.idx >= 0)
     5c8:	167f                	0x167f
     5ca:	00df 0000 fe01      	0xfe01000000df
            info.idx++;
     5d0:	8d0c                	0x8d0c
     5d2:	0000                	unimp
     5d4:	0200                	addi	s0,sp,256
     5d6:	6491                	lui	s1,0x4
     5d8:	5516                	lw	a0,100(sp)
     5da:	0002                	c.slli64	zero
     5dc:	0100                	addi	s0,sp,128
     5de:	0cff                	0xcff
     5e0:	008d                	addi	ra,ra,3
     5e2:	0000                	unimp
     5e4:	9102                	jalr	sp
     5e6:	1260                	addi	s0,sp,300
     5e8:	01e9                	addi	gp,gp,26
     5ea:	0000                	unimp
     5ec:	0201                	addi	tp,tp,0
     5ee:	1001                	c.nop	-32
     5f0:	0000039b          	0x39b
    for (i = 0; i < find_num; i++)
     5f4:	9102                	jalr	sp
     5f6:	125c                	addi	a5,sp,292
     5f8:	00d5                	addi	ra,ra,21
     5fa:	0000                	unimp
     5fc:	0301                	addi	t1,t1,0
     5fe:	1001                	c.nop	-32
     600:	02b8                	addi	a4,sp,328
     602:	0000                	unimp
     604:	9102                	jalr	sp
     606:	1248                	addi	a0,sp,292
     608:	02b9                	addi	t0,t0,14
     60a:	0000                	unimp
     60c:	0401                	addi	s0,s0,0
     60e:	1001                	c.nop	-32
     610:	02b8                	addi	a4,sp,328
     612:	0000                	unimp
     614:	9102                	jalr	sp
     616:	1158                	addi	a4,sp,164
     618:	0069                	c.nop	26
     61a:	0601                	addi	a2,a2,0
    retval += found * 4 - missed;
     61c:	1001                	c.nop	-32
     61e:	008d                	addi	ra,ra,3
     620:	0000                	unimp
     622:	9102                	jalr	sp
     624:	126c                	addi	a1,sp,300
     626:	00000173          	0x173
     62a:	0701                	addi	a4,a4,0
     62c:	1001                	c.nop	-32
     62e:	0000039b          	0x39b
     632:	9102                	jalr	sp
     634:	1268                	addi	a0,sp,300
     636:	099a                	slli	s3,s3,0x6
     638:	0000                	unimp
     63a:	0701                	addi	a4,a4,0
     63c:	1901                	addi	s2,s2,-32
     63e:	0000039b          	0x39b
     642:	9102                	jalr	sp
     644:	1254                	addi	a3,sp,292
     646:	012e                	slli	sp,sp,0xb
    if (finder_idx > 0)
     648:	0000                	unimp
     64a:	0801                	addi	a6,a6,0
     64c:	1001                	c.nop	-32
     64e:	00e8                	addi	a0,sp,76
        list = core_list_mergesort(list, cmp_complex, res);
     650:	0000                	unimp
     652:	9102                	jalr	sp
     654:	1744                	addi	s1,sp,932
     656:	0864                	addi	s1,sp,28
     658:	0000                	unimp
     65a:	0094                	addi	a3,sp,64
     65c:	0000                	unimp
     65e:	065d                	addi	a2,a2,23
     660:	0000                	unimp
     662:	a412                	fsd	ft4,8(sp)
    remover = core_list_remove(list->next);
     664:	0000                	unimp
     666:	0100                	addi	s0,sp,128
     668:	0119                	addi	sp,sp,6
     66a:	5410                	lw	a2,40(s0)
     66c:	0000                	unimp
     66e:	0200                	addi	s0,sp,256
     670:	5091                	li	ra,-28
     672:	6411                	lui	s0,0x4
     674:	7461                	lui	s0,0xffff8
     676:	0100                	addi	s0,sp,128
    finder = core_list_find(list, &info);
     678:	011a                	slli	sp,sp,0x6
     67a:	5410                	lw	a2,40(s0)
     67c:	0000                	unimp
     67e:	0200                	addi	s0,sp,256
     680:	4e91                	li	t4,4
     682:	1800                	addi	s0,sp,48
     684:	096c                	addi	a1,sp,156
     686:	0000                	unimp
     688:	007c                	addi	a5,sp,12
     68a:	0000                	unimp
    if (!finder)
     68c:	7011                	c.lui	zero,0xfffe4
     68e:	7461                	lui	s0,0xffff8
     690:	0100                	addi	s0,sp,128
     692:	012a                	slli	sp,sp,0xa
        finder = list->next;
     694:	5414                	lw	a3,40(s0)
     696:	0000                	unimp
     698:	0200                	addi	s0,sp,256
     69a:	5291                	li	t0,-28
     69c:	0000                	unimp
     69e:	b714                	fsd	fa3,40(a4)
    while (finder)
     6a0:	0000                	unimp
     6a2:	0100                	addi	s0,sp,128
        retval = crc16(list->info->data16, retval);
     6a4:	019f 0054 0000      	0x54019f
     6aa:	044c                	addi	a1,sp,516
     6ac:	0000                	unimp
     6ae:	031c                	addi	a5,sp,384
     6b0:	0000                	unimp
     6b2:	9c01                	0x9c01
     6b4:	0745                	addi	a4,a4,17
     6b6:	0000                	unimp
     6b8:	7219                	lui	tp,0xfffe6
     6ba:	7365                	lui	t1,0xffff9
     6bc:	0100                	addi	s0,sp,128
     6be:	1f9f 02be 0000      	0x2be1f9f
     6c4:	9102                	jalr	sp
     6c6:	154c                	addi	a1,sp,676
        finder = finder->next;
     6c8:	0326                	slli	t1,t1,0x9
     6ca:	0000                	unimp
     6cc:	9f01                	0x9f01
     6ce:	0000412b          	0x412b
     6d2:	0200                	addi	s0,sp,256
    while (finder)
     6d4:	4a91                	li	s5,4
     6d6:	e816                	fsw	ft5,16(sp)
     6d8:	0000                	unimp
     6da:	0100                	addi	s0,sp,128
    remover = core_list_undo_remove(remover, list->next);
     6dc:	10a1                	addi	ra,ra,-24
     6de:	0054                	addi	a3,sp,4
     6e0:	0000                	unimp
     6e2:	9102                	jalr	sp
     6e4:	166e                	slli	a2,a2,0x3b
     6e6:	0320                	addi	s0,sp,392
     6e8:	0000                	unimp
     6ea:	a201                	j	7ea <core_list_init+0x82>
     6ec:	5410                	lw	a2,40(s0)
     6ee:	0000                	unimp
     6f0:	0200                	addi	s0,sp,256
     6f2:	6c91                	lui	s9,0x4
    list = core_list_mergesort(list, cmp_idx, NULL);
     6f4:	6716                	flw	fa4,68(sp)
     6f6:	0001                	nop
     6f8:	0100                	addi	s0,sp,128
     6fa:	1ba2                	slli	s7,s7,0x28
     6fc:	0054                	addi	a3,sp,4
     6fe:	0000                	unimp
     700:	9102                	jalr	sp
     702:	166a                	slli	a2,a2,0x3a
     704:	099a                	slli	s3,s3,0x6
     706:	0000                	unimp
    finder = list->next;
     708:	a301                	j	c08 <core_list_find+0x10>
     70a:	9b10                	0x9b10
     70c:	02000003          	lb	zero,32(zero) # 20 <_start+0x10>
     710:	6491                	lui	s1,0x4
     712:	7c16                	flw	fs8,100(sp)
    while (finder)
     714:	0000                	unimp
     716:	0100                	addi	s0,sp,128
        retval = crc16(list->info->data16, retval);
     718:	10a4                	addi	s1,sp,104
     71a:	0041                	c.nop	16
     71c:	0000                	unimp
     71e:	9102                	jalr	sp
     720:	165c                	addi	a5,sp,804
     722:	0248                	addi	a0,sp,260
     724:	0000                	unimp
     726:	a501                	j	d26 <core_list_mergesort+0x2e>
     728:	9b10                	0x9b10
     72a:	02000003          	lb	zero,32(zero) # 20 <_start+0x10>
     72e:	5491                	li	s1,-28
     730:	7316                	flw	ft6,100(sp)
     732:	0001                	nop
     734:	0100                	addi	s0,sp,128
     736:	10a6                	slli	ra,ra,0x29
     738:	0000039b          	0x39b
        finder = finder->next;
     73c:	9102                	jalr	sp
     73e:	1660                	addi	s0,sp,812
     740:	038a                	slli	t2,t2,0x2
     742:	0000                	unimp
     744:	a601                	j	a44 <core_list_insert_new+0x18>
     746:	9b19                	andi	a4,a4,-26
    while (finder)
     748:	02000003          	lb	zero,32(zero) # 20 <_start+0x10>
     74c:	5891                	li	a7,-28
     74e:	2e16                	fld	ft8,320(sp)
    return retval;
     750:	0001                	nop
     752:	0100                	addi	s0,sp,128
}
     754:	00e810a7          	fsh	fa4,1(a6)
     758:	0000                	unimp
     75a:	9102                	jalr	sp
     75c:	1a50                	addi	a2,sp,308
     75e:	0069                	c.nop	26
     760:	a801                	j	770 <core_list_init+0x8>
     762:	4110                	lw	a2,0(a0)
     764:	0000                	unimp
     766:	0200                	addi	s0,sp,256
{
     768:	5e91                	li	t4,-28
     76a:	1b00                	addi	s0,sp,432
     76c:	0129                	addi	sp,sp,10
     76e:	0000                	unimp
     770:	9101                	srli	a0,a0,0x20
     772:	0801                	addi	a6,a6,0
     774:	0004                	0x4
     776:	4400                	lw	s0,8(s0)
     778:	0000                	unimp
     77a:	0100                	addi	s0,sp,128
     77c:	799c                	flw	fa5,48(a1)
     77e:	19000007          	vlse128.v	v0,(zero),a6,v0.t
     782:	6f74                	flw	fa3,92(a4)
     784:	0100                	addi	s0,sp,128
     786:	1691                	addi	a3,a3,-28
    ee_u32 per_item = 16 + sizeof(struct list_data_s);
     788:	02b8                	addi	a4,sp,328
     78a:	0000                	unimp
     78c:	9102                	jalr	sp
     78e:	156c                	addi	a1,sp,684
    ee_u32 size     = (blksize / per_item)
     790:	03b4                	addi	a3,sp,456
     792:	0000                	unimp
     794:	9101                	srli	a0,a0,0x20
     796:	b825                	j	ffffffce <RAM_SIZE+0xfffeffce>
     798:	0002                	c.slli64	zero
     79a:	0200                	addi	s0,sp,256
     79c:	6891                	lui	a7,0x4
     79e:	1c00                	addi	s0,sp,560
     7a0:	01e1                	addi	gp,gp,24
     7a2:	0000                	unimp
     7a4:	8601                	c.srai64	a2
     7a6:	6701                	0x6701
    list_head *memblock_end  = memblock + size;
     7a8:	0000                	unimp
     7aa:	2800                	fld	fs0,16(s0)
     7ac:	e0000003          	lb	zero,-512(zero) # fffffe00 <RAM_SIZE+0xfffefe00>
     7b0:	0000                	unimp
     7b2:	0100                	addi	s0,sp,128
     7b4:	bd9c                	fsd	fa5,56(a1)
     7b6:	19000007          	vlse128.v	v0,(zero),a6,v0.t
     7ba:	0061                	c.nop	24
    list_data *datablock     = (list_data *)(memblock_end);
     7bc:	8601                	c.srai64	a2
     7be:	b814                	fsd	fa3,48(s0)
     7c0:	0002                	c.slli64	zero
     7c2:	0200                	addi	s0,sp,256
    list_data *datablock_end = datablock + size;
     7c4:	6c91                	lui	s9,0x4
     7c6:	6219                	lui	tp,0x6
     7c8:	0100                	addi	s0,sp,128
     7ca:	2286                	fld	ft5,64(sp)
     7cc:	02b8                	addi	a4,sp,328
     7ce:	0000                	unimp
     7d0:	9102                	jalr	sp
     7d2:	1968                	addi	a0,sp,188
     7d4:	6572                	flw	fa0,28(sp)
     7d6:	86010073          	0x86010073
    list_head *finder, *list = memblock;
     7da:	0002be33          	sltu	t3,t0,zero
     7de:	0200                	addi	s0,sp,256
    list->next         = NULL;
     7e0:	6491                	lui	s1,0x4
     7e2:	1400                	addi	s0,sp,544
     7e4:	000002c7          	fmsub.s	ft5,ft0,ft0,ft0,rne
    list->info         = datablock;
     7e8:	7901                	lui	s2,0xfffe0
     7ea:	6701                	0x6701
     7ec:	0000                	unimp
     7ee:	bc00                	fsd	fs0,56(s0)
     7f0:	0002                	c.slli64	zero
     7f2:	6c00                	flw	fs0,24(s0)
    list->info->idx    = 0x0000;
     7f4:	0000                	unimp
     7f6:	0100                	addi	s0,sp,128
     7f8:	1f9c                	addi	a5,sp,1008
     7fa:	0008                	0x8
     7fc:	1900                	addi	s0,sp,176
     7fe:	0061                	c.nop	24
    list->info->data16 = (ee_s16)0x8080;
     800:	7901                	lui	s2,0xfffe0
     802:	b818                	fsd	fa4,48(s0)
     804:	0002                	c.slli64	zero
     806:	0200                	addi	s0,sp,256
     808:	5c91                	li	s9,-28
     80a:	6219                	lui	tp,0x6
     80c:	0100                	addi	s0,sp,128
     80e:	2679                	jal	b9c <core_list_undo_remove+0x10>
     810:	02b8                	addi	a4,sp,328
     812:	0000                	unimp
    memblock++;
     814:	9102                	jalr	sp
     816:	1958                	addi	a4,sp,180
     818:	6572                	flw	fa0,28(sp)
     81a:	79010073          	0x79010073
     81e:	0002be37          	lui	t3,0x2b
    datablock++;
     822:	0200                	addi	s0,sp,256
     824:	5491                	li	s1,-28
     826:	6e16                	flw	ft8,68(sp)
     828:	0001                	nop
     82a:	0100                	addi	s0,sp,128
    info.idx    = 0x7fff;
     82c:	00410c7b          	0x410c7b
     830:	0000                	unimp
     832:	9102                	jalr	sp
     834:	166e                	slli	a2,a2,0x3b
     836:	00000243          	fmadd.s	ft4,ft0,ft0,ft0,rne
    info.data16 = (ee_s16)0xffff;
     83a:	7c01                	lui	s8,0xfffe0
     83c:	410c                	lw	a1,0(a0)
     83e:	0000                	unimp
    core_list_insert_new(
     840:	0200                	addi	s0,sp,256
     842:	6c91                	lui	s9,0x4
     844:	1400                	addi	s0,sp,544
     846:	000001c3          	fmadd.s	ft3,ft0,ft0,ft0,rne
     84a:	4601                	li	a2,0
     84c:	4101                	li	sp,0
     84e:	0000                	unimp
     850:	c400                	sw	s0,8(s0)
     852:	0000                	unimp
     854:	f800                	fsw	fs0,48(s0)
     856:	0001                	nop
     858:	0100                	addi	s0,sp,128
     85a:	ad9c                	fsd	fa5,24(a1)
    for (i = 0; i < size; i++)
     85c:	0008                	0x8
     85e:	1500                	addi	s0,sp,672
     860:	026d                	addi	tp,tp,27
     862:	0000                	unimp
        ee_u16 datpat = ((ee_u16)(seed ^ i) & 0xf);
     864:	4601                	li	a2,0
     866:	0008ad13          	slti	s10,a7,0
     86a:	0200                	addi	s0,sp,256
     86c:	5c91                	li	s9,-28
     86e:	7219                	lui	tp,0xfffe6
     870:	7365                	lui	t1,0xffff9
     872:	0100                	addi	s0,sp,128
     874:	2846                	fld	fa6,80(sp)
     876:	02be                	slli	t0,t0,0xf
     878:	0000                	unimp
     87a:	9102                	jalr	sp
     87c:	1658                	addi	a4,sp,804
     87e:	023e                	slli	tp,tp,0xf
     880:	0000                	unimp
     882:	4801                	li	a6,0
     884:	410c                	lw	a1,0(a0)
     886:	0000                	unimp
            = (datpat << 3) | (i & 0x7); /* alternate between algorithms */
     888:	0200                	addi	s0,sp,256
     88a:	6a91                	lui	s5,0x4
     88c:	e816                	fsw	ft5,16(sp)
     88e:	0000                	unimp
     890:	0100                	addi	s0,sp,128
     892:	0c49                	addi	s8,s8,18
     894:	0041                	c.nop	16
     896:	0000                	unimp
     898:	9102                	jalr	sp
     89a:	166e                	slli	a2,a2,0x3b
     89c:	03ad                	addi	t2,t2,11
     89e:	0000                	unimp
     8a0:	4a01                	li	s4,0
     8a2:	7a0c                	flw	fa1,48(a2)
     8a4:	0000                	unimp
     8a6:	0200                	addi	s0,sp,256
     8a8:	6991                	lui	s3,0x4
     8aa:	2018                	fld	fa4,0(s0)
     8ac:	0001                	nop
     8ae:	8800                	0x8800
        ee_u16 dat
     8b0:	0001                	nop
     8b2:	1600                	addi	s0,sp,800
     8b4:	08d8                	addi	a4,sp,84
     8b6:	0000                	unimp
        info.data16 = (dat << 8) | dat;  /* fill the data with actual data and
     8b8:	5101                	li	sp,-32
     8ba:	4110                	lw	a2,0(a0)
     8bc:	0000                	unimp
     8be:	0200                	addi	s0,sp,256
     8c0:	6691                	lui	a3,0x4
     8c2:	ab16                	fsd	ft5,400(sp)
     8c4:	0000                	unimp
     8c6:	0100                	addi	s0,sp,128
     8c8:	1052                	c.slli	zero,0x34
     8ca:	0041                	c.nop	16
     8cc:	0000                	unimp
     8ce:	9102                	jalr	sp
     8d0:	006c                	addi	a1,sp,12
     8d2:	0800                	addi	s0,sp,16
     8d4:	4104                	lw	s1,0(a0)
     8d6:	0000                	unimp
     8d8:	0000                	unimp
     8da:	04a5                	addi	s1,s1,9
        core_list_insert_new(
     8dc:	0000                	unimp
     8de:	0004                	0x4
     8e0:	01e4                	addi	s1,sp,204
     8e2:	0000                	unimp
     8e4:	0104                	addi	s1,sp,128
     8e6:	000002d3          	fadd.s	ft5,ft0,ft0,rne
     8ea:	2e0c                	fld	fa1,24(a2)
     8ec:	0004                	0x4
     8ee:	2700                	fld	fs0,8(a4)
     8f0:	0000                	unimp
     8f2:	0000                	unimp
     8f4:	2c00000f          	0x2c00000f
    for (i = 0; i < size; i++)
     8f8:	0010                	0x10
     8fa:	0d00                	addi	s0,sp,656
     8fc:	0200000b          	0x200000b
     900:	0504                	addi	s1,sp,640
     902:	6e69                	lui	t3,0x1a
     904:	0074                	addi	a3,sp,12
     906:	ca070403          	lb	s0,-864(a4)
     90a:	0008                	0x8
     90c:	0300                	addi	s0,sp,384
     90e:	0508                	addi	a0,sp,640
    finder = list->next;
     910:	018d                	addi	gp,gp,3
     912:	0000                	unimp
     914:	b8041003          	lh	zero,-1152(s0) # ffff7b80 <RAM_SIZE+0xfffe7b80>
     918:	0011                	c.nop	4
     91a:	0400                	addi	s0,sp,512
    i      = 1;
     91c:	02b2                	slli	t0,t0,0xc
     91e:	0000                	unimp
     920:	5f02                	lw	t5,32(sp)
     922:	4d18                	lw	a4,24(a0)
    while (finder->next != NULL)
     924:	0000                	unimp
     926:	0300                	addi	s0,sp,384
        if (i < size / 5) /* first 20% of the list in order */
     928:	0502                	c.slli64	a0
     92a:	0085                	addi	ra,ra,1
     92c:	0000                	unimp
     92e:	f604                	fsw	fs1,40(a2)
     930:	0001                	nop
     932:	0200                	addi	s0,sp,256
     934:	1860                	addi	s0,sp,60
     936:	0060                	addi	s0,sp,12
     938:	0000                	unimp
     93a:	5a070203          	lb	tp,1440(a4)
     93e:	0002                	c.slli64	zero
     940:	0400                	addi	s0,sp,512
     942:	00ce                	slli	ra,ra,0x13
     944:	0000                	unimp
     946:	6102                	flw	ft2,0(sp)
            finder->info->idx = i++;
     948:	2518                	fld	fa4,8(a0)
     94a:	0000                	unimp
     94c:	0300                	addi	s0,sp,384
     94e:	0408                	addi	a0,sp,512
     950:	11bd                	addi	gp,gp,-17
     952:	0000                	unimp
     954:	b104                	fsd	fs1,32(a0)
     956:	0000                	unimp
     958:	0200                	addi	s0,sp,256
     95a:	00861863          	bne	a2,s0,96a <HEAP_SIZE+0x16a>
     95e:	0000                	unimp
     960:	11080103          	lb	sp,272(a6)
     964:	0002                	c.slli64	zero
     966:	0400                	addi	s0,sp,512
     968:	0398                	addi	a4,sp,448
     96a:	0000                	unimp
            ee_u16 pat = (ee_u16)(i++ ^ seed); /* get a pseudo random number */
     96c:	6402                	flw	fs0,0(sp)
     96e:	2c18                	fld	fa4,24(s0)
     970:	0000                	unimp
     972:	0400                	addi	s0,sp,512
     974:	000004af          	vamoaddei8.v	zero,(zero),v0,v9,v0.t
     978:	7202                	flw	ft4,32(sp)
     97a:	8d10                	0x8d10
     97c:	0000                	unimp
     97e:	0500                	addi	s0,sp,640
     980:	03e8                	addi	a0,sp,460
     982:	0000                	unimp
     984:	c202                	sw	zero,4(sp)
     986:	00008d0f          	0x8d0f
     98a:	0600                	addi	s0,sp,768
                                & (((i & 0x07) << 8)
     98c:	033c                	addi	a5,sp,392
     98e:	0000                	unimp
     990:	0201                	addi	tp,tp,0
     992:	10c4                	addi	s1,sp,100
     994:	00cc                	addi	a1,sp,68
     996:	0000                	unimp
     998:	00018107          	vle8.v	v2,(gp),v0.t
     99c:	0200                	addi	s0,sp,256
     99e:	0bc6                	slli	s7,s7,0x11
     9a0:	007a                	c.slli	zero,0x1e
     9a2:	0000                	unimp
     9a4:	0000                	unimp
     9a6:	9f04                	0x9f04
     9a8:	02000003          	lb	zero,32(zero) # 20 <_start+0x10>
     9ac:	00b103c7          	fmsub.s	ft7,ft2,fa1,ft0,rne
                                   | pat); /* make sure the mixed items end up
     9b0:	0000                	unimp
     9b2:	5904                	lw	s1,48(a0)
     9b4:	0004                	0x4
     9b6:	0300                	addi	s0,sp,384
     9b8:	1039                	c.nop	-18
     9ba:	008d                	addi	ra,ra,3
     9bc:	0000                	unimp
     9be:	d506                	sw	ra,168(sp)
                                & (((i & 0x07) << 8)
     9c0:	0001                	nop
     9c2:	0400                	addi	s0,sp,512
     9c4:	0c105b03          	lhu	s6,193(zero) # c1 <frame_dummy+0x1d>
            finder->info->idx = 0x3fff
     9c8:	0001                	nop
     9ca:	0700                	addi	s0,sp,896
     9cc:	034c                	addi	a1,sp,388
     9ce:	0000                	unimp
                                & (((i & 0x07) << 8)
     9d0:	410c5d03          	lhu	s10,1040(s8) # fffe0410 <RAM_SIZE+0xfffd0410>
     9d4:	0000                	unimp
     9d6:	0000                	unimp
     9d8:	6908                	flw	fa0,16(a0)
     9da:	7864                	flw	fs1,116(s0)
     9dc:	0300                	addi	s0,sp,384
     9de:	0c5e                	slli	s8,s8,0x17
     9e0:	0041                	c.nop	16
     9e2:	0000                	unimp
            finder->info->idx = 0x3fff
     9e4:	0002                	c.slli64	zero
     9e6:	6606                	flw	fa2,64(sp)
        finder = finder->next;
     9e8:	0000                	unimp
     9ea:	0800                	addi	s0,sp,16
     9ec:	34106103          	0x34106103
     9f0:	0001                	nop
     9f2:	0700                	addi	s0,sp,896
    while (finder->next != NULL)
     9f4:	03b9                	addi	t2,t2,14
     9f6:	0000                	unimp
     9f8:	34196303          	0x34196303
     9fc:	0001                	nop
     9fe:	0000                	unimp
    list = core_list_mergesort(list, cmp_idx, NULL);
     a00:	00012e07          	flw	ft8,0(sp)
     a04:	0300                	addi	s0,sp,384
     a06:	1964                	addi	s1,sp,188
     a08:	013a                	slli	sp,sp,0xe
     a0a:	0000                	unimp
     a0c:	0004                	0x4
     a0e:	0409                	addi	s0,s0,2
     a10:	010c                	addi	a1,sp,128
     a12:	0000                	unimp
    return list;
     a14:	0409                	addi	s0,s0,2
     a16:	00e4                	addi	s1,sp,76
}
     a18:	0000                	unimp
     a1a:	c704                	sw	s1,8(a4)
     a1c:	0000                	unimp
     a1e:	0300                	addi	s0,sp,384
     a20:	106a                	c.slli	zero,0x3a
     a22:	0041                	c.nop	16
     a24:	0000                	unimp
     a26:	7304                	flw	fs1,32(a4)
     a28:	0002                	c.slli64	zero
     a2a:	0300                	addi	s0,sp,384
{
     a2c:	0067106b          	0x67106b
     a30:	0000                	unimp
     a32:	6306                	flw	ft6,64(sp)
     a34:	10000003          	lb	zero,256(zero) # 100 <calc_func+0x3c>
     a38:	92107103          	0x92107103
     a3c:	0001                	nop
     a3e:	0800                	addi	s0,sp,16
     a40:	004e                	c.slli	zero,0x13
     a42:	250d7303          	0x250d7303
     a46:	0000                	unimp
     a48:	0000                	unimp
     a4a:	4108                	lw	a0,0(a0)
     a4c:	0300                	addi	s0,sp,384
     a4e:	0d74                	addi	a3,sp,668
     a50:	0192                	slli	gp,gp,0x4
     a52:	0000                	unimp
    if ((*memblock + 1) >= memblock_end)
     a54:	0804                	addi	s1,sp,16
     a56:	0042                	c.slli	zero,0x10
     a58:	920d7503          	0x920d7503
     a5c:	0001                	nop
     a5e:	0800                	addi	s0,sp,16
     a60:	4308                	lw	a0,0(a4)
     a62:	0300                	addi	s0,sp,384
     a64:	0d76                	slli	s10,s10,0x1d
     a66:	0198                	addi	a4,sp,192
        return NULL;
     a68:	0000                	unimp
     a6a:	000c                	0xc
     a6c:	0409                	addi	s0,s0,2
     a6e:	0140                	addi	s0,sp,132
    if ((*datablock + 1) >= datablock_end)
     a70:	0000                	unimp
     a72:	0409                	addi	s0,s0,2
     a74:	014c                	addi	a1,sp,132
     a76:	0000                	unimp
     a78:	2e04                	fld	fs1,24(a2)
     a7a:	0002                	c.slli64	zero
     a7c:	0300                	addi	s0,sp,384
     a7e:	01580377          	0x1580377
     a82:	0000                	unimp
        return NULL;
     a84:	1f06                	slli	t5,t5,0x21
     a86:	0001                	nop
     a88:	4400                	lw	s0,8(s0)
     a8a:	7b108903          	lb	s2,1969(ra) # 47b1 <iaddr+0x225>
    newitem = *memblock;
     a8e:	0002                	c.slli64	zero
     a90:	0700                	addi	s0,sp,896
     a92:	014d                	addi	sp,sp,19
     a94:	0000                	unimp
     a96:	41198c03          	lb	s8,1041(s3) # 4411 <eaddr+0x3d>
    (*memblock)++;
     a9a:	0000                	unimp
     a9c:	0000                	unimp
     a9e:	00015307          	vle16.v	v6,(sp),v0.t
     aa2:	0300                	addi	s0,sp,384
     aa4:	198d                	addi	s3,s3,-29
     aa6:	0041                	c.nop	16
     aa8:	0000                	unimp
     aaa:	0702                	c.slli64	a4
    newitem->next      = insert_point->next;
     aac:	0159                	addi	sp,sp,22
     aae:	0000                	unimp
     ab0:	41198e03          	lb	t3,1041(s3)
     ab4:	0000                	unimp
     ab6:	0400                	addi	s0,sp,512
     ab8:	00049207          	flh	ft4,0(s1) # 4000 <skip_atoi+0x5c>
    insert_point->next = newitem;
     abc:	0300                	addi	s0,sp,384
     abe:	027b198f          	0x27b198f
     ac2:	0000                	unimp
     ac4:	0708                	addi	a0,sp,896
     ac6:	0255                	addi	tp,tp,21
    newitem->info = *datablock;
     ac8:	0000                	unimp
     aca:	8d199003          	lh	zero,-1839(s3)
     ace:	0000                	unimp
     ad0:	1800                	addi	s0,sp,48
     ad2:	00035807          	vle16.v	v16,(t1),v0.t
     ad6:	0300                	addi	s0,sp,384
    (*datablock)++;
     ad8:	1991                	addi	s3,s3,-28
     ada:	008d                	addi	ra,ra,3
     adc:	0000                	unimp
     ade:	071c                	addi	a5,sp,896
     ae0:	0336                	slli	t1,t1,0xd
     ae2:	0000                	unimp
     ae4:	8d199203          	lh	tp,-1839(s3)
     ae8:	0000                	unimp
     aea:	2000                	fld	fs0,0(s0)
    copy_info(newitem->info, info);
     aec:	00099a07          	flh	fs4,0(s3)
     af0:	0300                	addi	s0,sp,384
     af2:	01341993          	slli	s3,s0,0x13
     af6:	0000                	unimp
     af8:	0824                	addi	s1,sp,24
     afa:	616d                	addi	sp,sp,240
     afc:	0074                	addi	a3,sp,12
     afe:	9e199403          	lh	s0,-1567(s3)
    return newitem;
     b02:	0001                	nop
}
     b04:	2800                	fld	fs0,16(s0)
     b06:	6308                	flw	fa0,0(a4)
     b08:	6372                	flw	ft6,28(sp)
     b0a:	0300                	addi	s0,sp,384
     b0c:	0c96                	slli	s9,s9,0x5
     b0e:	0054                	addi	a3,sp,4
     b10:	0000                	unimp
     b12:	0738                	addi	a4,sp,904
     b14:	015f 0000 9703      	0x97030000015f
{
     b1a:	540c                	lw	a1,40(s0)
     b1c:	0000                	unimp
     b1e:	3a00                	fld	fs0,48(a2)
     b20:	00031607          	flh	fa2,0(t1) # ffff9000 <RAM_SIZE+0xfffe9000>
     b24:	0300                	addi	s0,sp,384
     b26:	0c98                	addi	a4,sp,592
    list_head *ret = item->next;
     b28:	0054                	addi	a3,sp,4
     b2a:	0000                	unimp
     b2c:	073c                	addi	a5,sp,904
     b2e:	01ba                	slli	gp,gp,0xe
     b30:	0000                	unimp
     b32:	540c9903          	lh	s2,1344(s9) # 4540 <eaddr+0x16c>
    tmp        = item->info;
     b36:	0000                	unimp
     b38:	3e00                	fld	fs0,56(a2)
     b3a:	6508                	flw	fa0,8(a0)
     b3c:	7272                	flw	ft4,60(sp)
     b3e:	0300                	addi	s0,sp,384
    item->info = ret->info;
     b40:	0c9a                	slli	s9,s9,0x6
     b42:	0041                	c.nop	16
     b44:	0000                	unimp
     b46:	0740                	addi	s0,sp,900
     b48:	0331                	addi	t1,t1,12
     b4a:	0000                	unimp
     b4c:	cc139c03          	lh	s8,-831(t2)
    ret->info  = tmp;
     b50:	0000                	unimp
     b52:	4200                	lw	s0,0(a2)
     b54:	0a00                	addi	s0,sp,272
     b56:	0000028b          	0x28b
     b5a:	0000028b          	0x28b
    item->next = item->next->next;
     b5e:	00002c0b          	0x2c0b
     b62:	0300                	addi	s0,sp,384
     b64:	0c00                	addi	s0,sp,528
     b66:	0404                	addi	s1,sp,512
     b68:	00000133          	add	sp,zero,zero
     b6c:	aa039d03          	lh	s10,-1376(t2)
    ret->next  = NULL;
     b70:	0001                	nop
     b72:	0a00                	addi	s0,sp,272
     b74:	0054                	addi	a3,sp,4
     b76:	0000                	unimp
    return ret;
     b78:	02a9                	addi	t0,t0,10
     b7a:	0000                	unimp
}
     b7c:	00002c0b          	0x2c0b
     b80:	0400                	addi	s0,sp,512
     b82:	0d00                	addi	s0,sp,656
     b84:	00000417          	auipc	s0,0x0
     b88:	2401                	jal	d88 <core_list_mergesort+0x90>
     b8a:	0002990f          	0x2990f
{
     b8e:	0500                	addi	s0,sp,640
     b90:	007fe003          	0x7fe003
     b94:	0d00                	addi	s0,sp,656
     b96:	0470                	addi	a2,sp,524
     b98:	0000                	unimp
     b9a:	2901                	jal	faa <iterate+0xaa>
     b9c:	0002990f          	0x2990f
    tmp                 = item_removed->info;
     ba0:	0500                	addi	s0,sp,640
     ba2:	007fec03          	0x7fec03
     ba6:	0d00                	addi	s0,sp,656
     ba8:	03be                	slli	t2,t2,0xf
     baa:	0000                	unimp
    item_removed->info  = item_modified->info;
     bac:	2e01                	jal	ebc <core_list_mergesort+0x1c4>
     bae:	0002990f          	0x2990f
     bb2:	0500                	addi	s0,sp,640
     bb4:	007ff803          	0x7ff803
     bb8:	0a00                	addi	s0,sp,272
     bba:	000002ef          	jal	t0,bba <core_list_undo_remove+0x2e>
    item_modified->info = tmp;
     bbe:	000002ef          	jal	t0,bbe <core_list_undo_remove+0x32>
     bc2:	00002c0b          	0x2c0b
     bc6:	0200                	addi	s0,sp,256
    item_removed->next  = item_modified->next;
     bc8:	0900                	addi	s0,sp,144
     bca:	f504                	fsw	fs1,40(a0)
     bcc:	0002                	c.slli64	zero
     bce:	0300                	addi	s0,sp,384
     bd0:	0801                	addi	a6,a6,0
     bd2:	021a                	slli	tp,tp,0x6
     bd4:	0000                	unimp
     bd6:	fd0e                	fsw	ft3,184(sp)
    item_modified->next = item_removed;
     bd8:	01000003          	lb	zero,16(zero) # 10 <_start>
     bdc:	02df0757          	vadd.vv	v14,v13,v30
     be0:	0000                	unimp
     be2:	0305                	addi	t1,t1,1
    return item_removed;
     be4:	8004                	0x8004
     be6:	0000                	unimp
}
     be8:	0003e30f          	0x3e30f
     bec:	0100                	addi	s0,sp,128
     bee:	016d                	addi	sp,sp,27
     bf0:	1010                	addi	a2,sp,32
     bf2:	0000                	unimp
     bf4:	0f1c                	addi	a5,sp,912
     bf6:	0000                	unimp
{
     bf8:	9c01                	0x9c01
     bfa:	040d                	addi	s0,s0,3
     bfc:	0000                	unimp
     bfe:	060d                	addi	a2,a2,3
     c00:	0004                	0x4
     c02:	0100                	addi	s0,sp,128
     c04:	00250b6f          	jal	s6,50c06 <RAM_SIZE+0x40c06>
     c08:	0000                	unimp
     c0a:	9102                	jalr	sp
    if (info->idx >= 0)
     c0c:	0d4c                	addi	a1,sp,660
     c0e:	0000046b          	0x46b
     c12:	7001                	c.lui	zero,0xfffe0
     c14:	00040d0b          	0x40d0b
        while (list && (list->info->idx != info->idx))
     c18:	0200                	addi	s0,sp,256
     c1a:	4891                	li	a7,4
            list = list->next;
     c1c:	6910                	flw	fa2,16(a0)
     c1e:	0100                	addi	s0,sp,128
     c20:	1276                	slli	tp,tp,0x3d
     c22:	0054                	addi	a3,sp,4
     c24:	0000                	unimp
     c26:	9102                	jalr	sp
        while (list && (list->info->idx != info->idx))
     c28:	106e                	c.slli	zero,0x3b
     c2a:	006a                	c.slli	zero,0x1a
     c2c:	7601                	lui	a2,0xfffe0
     c2e:	5415                	li	s0,-27
     c30:	0000                	unimp
     c32:	0200                	addi	s0,sp,256
     c34:	6c91                	lui	s9,0x4
     c36:	9b0d                	andi	a4,a4,-29
     c38:	0004                	0x4
     c3a:	0100                	addi	s0,sp,128
     c3c:	1c76                	slli	s8,s8,0x3d
     c3e:	0054                	addi	a3,sp,4
     c40:	0000                	unimp
     c42:	9102                	jalr	sp
     c44:	0d6a                	slli	s10,s10,0x1a
     c46:	0462                	slli	s0,s0,0x18
        return list;
     c48:	0000                	unimp
     c4a:	7701                	lui	a4,0xfffe0
     c4c:	4112                	lw	sp,4(sp)
     c4e:	0000                	unimp
            list = list->next;
     c50:	0200                	addi	s0,sp,256
     c52:	6891                	lui	a7,0x4
     c54:	d60d                	beqz	a2,b7e <core_list_remove+0x66>
     c56:	01000003          	lb	zero,16(zero) # 10 <_start>
     c5a:	00412177          	0x412177
        while (list && ((list->info->data16 & 0xff) != info->data16))
     c5e:	0000                	unimp
     c60:	9102                	jalr	sp
     c62:	0d66                	slli	s10,s10,0x19
     c64:	0426                	slli	s0,s0,0x9
     c66:	0000                	unimp
     c68:	7801                	lui	a6,0xfffe0
     c6a:	5412                	lw	s0,36(sp)
     c6c:	0000                	unimp
     c6e:	0200                	addi	s0,sp,256
     c70:	5691                	li	a3,-28
     c72:	810d                	srli	a0,a0,0x3
     c74:	0004                	0x4
     c76:	0100                	addi	s0,sp,128
     c78:	1279                	addi	tp,tp,-2
     c7a:	0099                	addi	ra,ra,6
     c7c:	0000                	unimp
     c7e:	9102                	jalr	sp
     c80:	0d50                	addi	a2,sp,660
     c82:	0138                	addi	a4,sp,136
     c84:	0000                	unimp
     c86:	7a01                	lui	s4,0xfffe0
        return list;
     c88:	1d12                	slli	s10,s10,0x24
     c8a:	0004                	0x4
}
     c8c:	0300                	addi	s0,sp,384
     c8e:	8491                	srai	s1,s1,0x4
     c90:	0d7f                	0xd7f
     c92:	048c                	addi	a1,sp,576
     c94:	0000                	unimp
     c96:	7c01                	lui	s8,0xfffe0
     c98:	00042d0b          	0x42d0b
{
     c9c:	0300                	addi	s0,sp,384
     c9e:	b491                	j	6e2 <core_bench_list+0x296>
     ca0:	1348116f          	jal	sp,81dd4 <RAM_SIZE+0x71dd4>
     ca4:	0000                	unimp
     ca6:	00b0                	addi	a2,sp,72
     ca8:	0000                	unimp
     caa:	03e4                	addi	s1,sp,460
    list_head *next = NULL, *tmp;
     cac:	0000                	unimp
     cae:	6310                	flw	fa2,0(a4)
    while (list)
     cb0:	7874                	flw	fa3,116(s0)
     cb2:	0100                	addi	s0,sp,128
        tmp        = list->next;
     cb4:	10d1                	addi	ra,ra,-12
     cb6:	008d                	addi	ra,ra,3
     cb8:	0000                	unimp
     cba:	9102                	jalr	sp
     cbc:	0060                	addi	s0,sp,12
     cbe:	0c12                	slli	s8,s8,0x4
        list->next = next;
     cc0:	0016                	c.slli	zero,0x5
     cc2:	9c00                	0x9c00
     cc4:	0000                	unimp
     cc6:	0d00                	addi	s0,sp,656
     cc8:	0000040b          	0x40b
        next       = list;
     ccc:	f401                	bnez	s0,bd4 <core_list_undo_remove+0x48>
     cce:	d812                	sw	tp,48(sp)
     cd0:	0000                	unimp
     cd2:	0200                	addi	s0,sp,256
        list       = tmp;
     cd4:	5c91                	li	s9,-28
     cd6:	ba0d                	j	608 <core_bench_list+0x1bc>
     cd8:	0004                	0x4
     cda:	0100                	addi	s0,sp,128
    while (list)
     cdc:	12f5                	addi	t0,t0,-3
     cde:	008d                	addi	ra,ra,3
     ce0:	0000                	unimp
     ce2:	9102                	jalr	sp
    return next;
     ce4:	0058                	addi	a4,sp,4
     ce6:	0a00                	addi	s0,sp,272
}
     ce8:	000002ef          	jal	t0,ce8 <core_list_reverse+0x4c>
     cec:	041d                	addi	s0,s0,7
     cee:	0000                	unimp
     cf0:	00002c0b          	0x2c0b
     cf4:	0000                	unimp
     cf6:	0a00                	addi	s0,sp,272
{
     cf8:	028d                	addi	t0,t0,3
     cfa:	0000                	unimp
     cfc:	042d                	addi	s0,s0,11
     cfe:	0000                	unimp
     d00:	00002c0b          	0x2c0b
     d04:	0000                	unimp
     d06:	0a00                	addi	s0,sp,272
     d08:	007a                	c.slli	zero,0x1e
     d0a:	0000                	unimp
     d0c:	043e                	slli	s0,s0,0xf
     d0e:	0000                	unimp
     d10:	00002c13          	slti	s8,zero,0
    insize = 1;
     d14:	cf00                	sw	s0,24(a4)
     d16:	ce140007          	vloxseg7ei8.v	v0,(s0),v1
     d1a:	01000003          	lb	zero,16(zero) # 10 <_start>
        p    = list;
     d1e:	0134                	addi	a3,sp,136
     d20:	0000028b          	0x28b
        list = NULL;
     d24:	0f00                	addi	s0,sp,912
     d26:	0000                	unimp
        tail = NULL;
     d28:	0110                	addi	a2,sp,128
     d2a:	0000                	unimp
        nmerges = 0; /* count number of merges we do in this pass */
     d2c:	9c01                	0x9c01
     d2e:	04a2                	slli	s1,s1,0x8
        while (p)
     d30:	0000                	unimp
     d32:	aa15                	j	e66 <core_list_mergesort+0x16e>
            nmerges++; /* there exists a merge to be done */
     d34:	0004                	0x4
     d36:	0100                	addi	s0,sp,128
     d38:	0f34                	addi	a3,sp,920
     d3a:	0000028b          	0x28b
     d3e:	9102                	jalr	sp
            q     = p;
     d40:	105c                	addi	a5,sp,36
     d42:	0069                	c.nop	26
     d44:	3601                	jal	844 <HEAP_SIZE+0x44>
     d46:	00008d13          	mv	s10,ra
            psize = 0;
     d4a:	0200                	addi	s0,sp,256
            for (i = 0; i < insize; i++)
     d4c:	6c91                	lui	s9,0x4
     d4e:	6310                	flw	fa2,0(a4)
     d50:	6372                	flw	ft6,28(sp)
     d52:	0100                	addi	s0,sp,128
                psize++;
     d54:	00541337          	lui	t1,0x541
     d58:	0000                	unimp
     d5a:	9102                	jalr	sp
     d5c:	1062                	c.slli	zero,0x38
     d5e:	6572                	flw	fa0,28(sp)
                q = q->next;
     d60:	38010073          	0x38010073
     d64:	0004a213          	slti	tp,s1,0
     d68:	0200                	addi	s0,sp,256
     d6a:	6891                	lui	a7,0x4
                if (!q)
     d6c:	580d                	li	a6,-29
     d6e:	01000003          	lb	zero,16(zero) # 10 <_start>
     d72:	1339                	addi	t1,t1,-18
            for (i = 0; i < insize; i++)
     d74:	008d                	addi	ra,ra,3
     d76:	0000                	unimp
     d78:	9102                	jalr	sp
     d7a:	0064                	addi	s1,sp,12
     d7c:	0409                	addi	s0,s0,2
     d7e:	028d                	addi	t0,t0,3
     d80:	0000                	unimp
     d82:	9f00                	0x9f00
     d84:	0005                	c.nop	1
     d86:	0400                	addi	s0,sp,512
     d88:	2200                	fld	fs0,0(a2)
     d8a:	04000003          	lb	zero,64(zero) # 40 <_start+0x30>
     d8e:	d301                	beqz	a4,c8e <core_list_find+0x96>
                    break;
     d90:	0002                	c.slli64	zero
     d92:	0c00                	addi	s0,sp,528
            qsize = insize;
     d94:	0582                	c.slli64	a1
     d96:	0000                	unimp
     d98:	00000027          	vse8.v	v0,(zero),v0.t
            while (psize > 0 || (qsize > 0 && q))
     d9c:	1f2c                	addi	a1,sp,952
     d9e:	0000                	unimp
                if (psize == 0)
     da0:	0c64                	addi	s1,sp,540
     da2:	0000                	unimp
     da4:	167d                	addi	a2,a2,-1
     da6:	0000                	unimp
                    e = q;
     da8:	0402                	c.slli64	s0
     daa:	6905                	lui	s2,0x1
     dac:	746e                	flw	fs0,248(sp)
     dae:	0300                	addi	s0,sp,384
                    q = q->next;
     db0:	0704                	addi	s1,sp,896
     db2:	08ca                	slli	a7,a7,0x12
     db4:	0000                	unimp
     db6:	8d050803          	lb	a6,-1840(a0) # 38d0 <crc16+0x34>
     dba:	0001                	nop
                    qsize--;
     dbc:	0300                	addi	s0,sp,384
     dbe:	0410                	addi	a2,sp,512
     dc0:	11b8                	addi	a4,sp,232
     dc2:	0000                	unimp
     dc4:	b204                	fsd	fs1,32(a2)
     dc6:	0002                	c.slli64	zero
     dc8:	0200                	addi	s0,sp,256
     dca:	185f 004d 0000      	0x4d185f
                else if (qsize == 0 || !q)
     dd0:	85050203          	lb	tp,-1968(a0)
     dd4:	0000                	unimp
     dd6:	0400                	addi	s0,sp,512
     dd8:	01f6                	slli	gp,gp,0x1d
     dda:	0000                	unimp
                    e = p;
     ddc:	6002                	flw	ft0,0(sp)
     dde:	6018                	flw	fa4,0(s0)
     de0:	0000                	unimp
     de2:	0300                	addi	s0,sp,384
                    p = p->next;
     de4:	0702                	c.slli64	a4
     de6:	025a                	slli	tp,tp,0x16
     de8:	0000                	unimp
     dea:	ce04                	sw	s1,24(a2)
     dec:	0000                	unimp
     dee:	0200                	addi	s0,sp,256
                    psize--;
     df0:	1861                	addi	a6,a6,-8
     df2:	0025                	c.nop	9
     df4:	0000                	unimp
     df6:	bd040803          	lb	a6,-1072(s0) # 754 <core_bench_list+0x308>
     dfa:	0011                	c.nop	4
     dfc:	0300                	addi	s0,sp,384
     dfe:	0801                	addi	a6,a6,0
                else if (cmp(p->info, q->info, res) <= 0)
     e00:	0211                	addi	tp,tp,4
     e02:	0000                	unimp
     e04:	9804                	0x9804
     e06:	02000003          	lb	zero,32(zero) # 20 <_start+0x10>
     e0a:	1864                	addi	s1,sp,60
     e0c:	002c                	addi	a1,sp,8
     e0e:	0000                	unimp
     e10:	4904                	lw	s1,16(a0)
     e12:	0005                	c.nop	1
     e14:	0200                	addi	s0,sp,256
     e16:	1865                	addi	a6,a6,-7
     e18:	0081                	addi	ra,ra,0
     e1a:	0000                	unimp
     e1c:	c704                	sw	s1,8(a4)
     e1e:	0000                	unimp
     e20:	0300                	addi	s0,sp,384
     e22:	106a                	c.slli	zero,0x3a
     e24:	0041                	c.nop	16
     e26:	0000                	unimp
     e28:	7304                	flw	fs1,32(a4)
     e2a:	0002                	c.slli64	zero
                    e = p;
     e2c:	0300                	addi	s0,sp,384
     e2e:	0067106b          	0x67106b
     e32:	0000                	unimp
                    p = p->next;
     e34:	6305                	lui	t1,0x1
     e36:	10000003          	lb	zero,256(zero) # 100 <calc_func+0x3c>
     e3a:	eb107103          	0xeb107103
     e3e:	0000                	unimp
                    psize--;
     e40:	0600                	addi	s0,sp,768
     e42:	004e                	c.slli	zero,0x13
     e44:	250d7303          	0x250d7303
     e48:	0000                	unimp
     e4a:	0000                	unimp
     e4c:	4106                	lw	sp,64(sp)
     e4e:	0300                	addi	s0,sp,384
                    e = q;
     e50:	0d74                	addi	a3,sp,668
     e52:	000000eb          	0xeb
     e56:	0604                	addi	s1,sp,768
                    q = q->next;
     e58:	0042                	c.slli	zero,0x10
     e5a:	eb0d7503          	0xeb0d7503
     e5e:	0000                	unimp
     e60:	0800                	addi	s0,sp,16
     e62:	4306                	lw	t1,64(sp)
                    qsize--;
     e64:	0300                	addi	s0,sp,384
     e66:	0d76                	slli	s10,s10,0x1d
     e68:	00f1                	addi	ra,ra,28
     e6a:	0000                	unimp
     e6c:	000c                	0xc
     e6e:	00990407          	0x990407
                if (tail)
     e72:	0000                	unimp
     e74:	00a50407          	0xa50407
                    tail->next = e;
     e78:	0000                	unimp
     e7a:	2e04                	fld	fs1,24(a2)
     e7c:	0002                	c.slli64	zero
     e7e:	0300                	addi	s0,sp,384
     e80:	00b10377          	0xb10377
     e84:	0000                	unimp
     e86:	0408                	addi	a0,sp,512
                    list = e;
     e88:	cd09                	beqz	a0,ea2 <core_list_mergesort+0x1aa>
     e8a:	0004                	0x4
     e8c:	0100                	addi	s0,sp,128
     e8e:	0158                	addi	a4,sp,132
                tail = e;
     e90:	c801                	beqz	s0,ea0 <core_list_mergesort+0x1a8>
     e92:	0029                	c.nop	10
     e94:	c800                	sw	s0,16(s0)
     e96:	0001                	nop
            while (psize > 0 || (qsize > 0 && q))
     e98:	0100                	addi	s0,sp,128
     e9a:	999c                	0x999c
     e9c:	0001                	nop
     e9e:	0a00                	addi	s0,sp,272
     ea0:	004e                	c.slli	zero,0x13
     ea2:	5801                	li	a6,-32
     ea4:	2501                	jal	14a4 <main+0x494>
     ea6:	0081                	addi	ra,ra,0
     ea8:	0000                	unimp
     eaa:	9102                	jalr	sp
     eac:	0a5c                	addi	a5,sp,276
     eae:	58010043          	fmadd.s	ft0,ft2,ft0,fa1,rne
            p = q;
     eb2:	3001                	jal	6b2 <core_bench_list+0x266>
     eb4:	00f1                	addi	ra,ra,28
     eb6:	0000                	unimp
        while (p)
     eb8:	9102                	jalr	sp
     eba:	0a58                	addi	a4,sp,276
     ebc:	0041                	c.nop	16
     ebe:	5801                	li	a6,-32
        tail->next = NULL;
     ec0:	3b01                	jal	bd0 <core_list_undo_remove+0x44>
     ec2:	000000eb          	0xeb
     ec6:	9102                	jalr	sp
        if (nmerges <= 1) /* allow for nmerges==0, the empty list case */
     ec8:	0a54                	addi	a3,sp,276
     eca:	0042                	c.slli	zero,0x10
     ecc:	5801                	li	a6,-32
     ece:	4601                	li	a2,0
     ed0:	000000eb          	0xeb
            return list;
     ed4:	9102                	jalr	sp
     ed6:	0b50                	addi	a2,sp,404
     ed8:	0069                	c.nop	26
     eda:	5a01                	li	s4,-32
        insize *= 2;
     edc:	0c01                	addi	s8,s8,0
     ede:	0081                	addi	ra,ra,0
     ee0:	0000                	unimp
     ee2:	9102                	jalr	sp
     ee4:	0b6c                	addi	a1,sp,412
     ee6:	006a                	c.slli	zero,0x1a
        p    = list;
     ee8:	5a01                	li	s4,-32
     eea:	0f01                	addi	t5,t5,0
}
     eec:	0081                	addi	ra,ra,0
     eee:	0000                	unimp
     ef0:	9102                	jalr	sp
     ef2:	0b68                	addi	a0,sp,412
     ef4:	5a01006b          	0x5a01006b
     ef8:	1201                	addi	tp,tp,-32
     efa:	0081                	addi	ra,ra,0
     efc:	0000                	unimp
     efe:	9102                	jalr	sp
{
     f00:	0c64                	addi	s1,sp,540
     f02:	2a30                	fld	fa2,80(a2)
     f04:	0000                	unimp
     f06:	00fc                	addi	a5,sp,76
     f08:	0000                	unimp
     f0a:	706d740b          	0x706d740b
     f0e:	0100                	addi	s0,sp,128
     f10:	0162                	slli	sp,sp,0x18
     f12:	a518                	fsd	fa4,8(a0)
    core_results *res        = (core_results *)pres;
     f14:	0000                	unimp
     f16:	0200                	addi	s0,sp,256
     f18:	6091                	lui	ra,0x4
     f1a:	0000                	unimp
    ee_u32        iterations = res->iterations;
     f1c:	6509                	lui	a0,0x2
     f1e:	0005                	c.nop	1
     f20:	0100                	addi	s0,sp,128
     f22:	0142                	slli	sp,sp,0x10
     f24:	2801                	jal	f34 <iterate+0x34>
     f26:	0028                	addi	a0,sp,8
    res->crc                 = 0;
     f28:	a000                	fsd	fs0,0(s0)
     f2a:	0001                	nop
     f2c:	0100                	addi	s0,sp,128
     f2e:	139c                	addi	a5,sp,480
    res->crclist             = 0;
     f30:	0002                	c.slli64	zero
     f32:	0a00                	addi	s0,sp,272
     f34:	004e                	c.slli	zero,0x13
     f36:	4201                	li	tp,0
    res->crcmatrix           = 0;
     f38:	1a01                	addi	s4,s4,-32
     f3a:	0081                	addi	ra,ra,0
     f3c:	0000                	unimp
     f3e:	9102                	jalr	sp
    res->crcstate            = 0;
     f40:	0a5c                	addi	a5,sp,276
     f42:	42010043          	fmadd.d	ft0,ft2,ft0,fs0,rne
     f46:	2501                	jal	1546 <main+0x536>
    for (i = 0; i < iterations; i++)
     f48:	00f1                	addi	ra,ra,28
     f4a:	0000                	unimp
     f4c:	9102                	jalr	sp
     f4e:	0a58                	addi	a4,sp,276
        crc      = core_bench_list(res, 1);
     f50:	0041                	c.nop	16
     f52:	4201                	li	tp,0
     f54:	3001                	jal	754 <core_bench_list+0x308>
     f56:	000000eb          	0xeb
     f5a:	9102                	jalr	sp
     f5c:	0a54                	addi	a3,sp,276
     f5e:	0042                	c.slli	zero,0x10
     f60:	4201                	li	tp,0
     f62:	3b01                	jal	c72 <core_list_find+0x7a>
        res->crc = crcu16(crc, res->crc);
     f64:	000000eb          	0xeb
     f68:	9102                	jalr	sp
     f6a:	0b50                	addi	a2,sp,404
     f6c:	0069                	c.nop	26
     f6e:	4401                	li	s0,0
     f70:	0c01                	addi	s8,s8,0
     f72:	0081                	addi	ra,ra,0
     f74:	0000                	unimp
     f76:	9102                	jalr	sp
     f78:	0b6c                	addi	a1,sp,412
     f7a:	006a                	c.slli	zero,0x1a
     f7c:	4401                	li	s0,0
     f7e:	0f01                	addi	t5,t5,0
     f80:	0081                	addi	ra,ra,0
     f82:	0000                	unimp
     f84:	9102                	jalr	sp
     f86:	0b68                	addi	a0,sp,412
     f88:	4401006b          	0x4401006b
        crc      = core_bench_list(res, -1);
     f8c:	1201                	addi	tp,tp,-32
     f8e:	0081                	addi	ra,ra,0
     f90:	0000                	unimp
     f92:	9102                	jalr	sp
     f94:	0064                	addi	s1,sp,12
     f96:	2809                	jal	fa8 <iterate+0xa8>
     f98:	0005                	c.nop	1
     f9a:	0100                	addi	s0,sp,128
     f9c:	1001012f          	0x1001012f
        res->crc = crcu16(crc, res->crc);
     fa0:	18000027          	vsse128.v	v0,(zero),zero,v0.t
     fa4:	0001                	nop
     fa6:	0100                	addi	s0,sp,128
     fa8:	7f9c                	flw	fa5,56(a5)
     faa:	0002                	c.slli64	zero
     fac:	0a00                	addi	s0,sp,272
     fae:	004e                	c.slli	zero,0x13
     fb0:	2f01                	jal	16c0 <main+0x6b0>
     fb2:	1801                	addi	a6,a6,-32
     fb4:	0081                	addi	ra,ra,0
     fb6:	0000                	unimp
     fb8:	9102                	jalr	sp
     fba:	0a5c                	addi	a5,sp,276
     fbc:	2f010043          	fmadd.q	ft0,ft2,fa6,ft5,rne
     fc0:	2301                	jal	14c0 <main+0x4b0>
     fc2:	00f1                	addi	ra,ra,28
     fc4:	0000                	unimp
     fc6:	9102                	jalr	sp
        if (i == 0)
     fc8:	0a58                	addi	a4,sp,276
     fca:	0041                	c.nop	16
     fcc:	2f01                	jal	16dc <main+0x6cc>
     fce:	2e01                	jal	12de <main+0x2ce>
            res->crclist = res->crc;
     fd0:	000000eb          	0xeb
     fd4:	9102                	jalr	sp
     fd6:	0a54                	addi	a3,sp,276
     fd8:	0042                	c.slli	zero,0x10
     fda:	2f01                	jal	16ea <main+0x6da>
     fdc:	3901                	jal	bec <core_list_undo_remove+0x60>
     fde:	000000eb          	0xeb
    for (i = 0; i < iterations; i++)
     fe2:	9102                	jalr	sp
     fe4:	0b50                	addi	a2,sp,404
     fe6:	0069                	c.nop	26
     fe8:	3101                	jal	be8 <core_list_undo_remove+0x5c>
     fea:	0c01                	addi	s8,s8,0
     fec:	0081                	addi	ra,ra,0
     fee:	0000                	unimp
     ff0:	9102                	jalr	sp
     ff2:	0b6c                	addi	a1,sp,412
     ff4:	006a                	c.slli	zero,0x1a
     ff6:	3101                	jal	bf6 <core_list_undo_remove+0x6a>
    return NULL;
     ff8:	0f01                	addi	t5,t5,0
     ffa:	0081                	addi	ra,ra,0
}
     ffc:	0000                	unimp
     ffe:	9102                	jalr	sp
    1000:	0068                	addi	a0,sp,12
    1002:	3809                	jal	814 <HEAP_SIZE+0x14>
    1004:	0005                	c.nop	1
    1006:	0100                	addi	s0,sp,128
    1008:	011d                	addi	sp,sp,7
    100a:	1801                	addi	a6,a6,-32
    100c:	0026                	c.slli	zero,0x9
    100e:	f800                	fsw	fs0,48(s0)
{
    1010:	0000                	unimp
    1012:	0100                	addi	s0,sp,128
    1014:	df9c                	sw	a5,56(a5)
    1016:	0002                	c.slli64	zero
    1018:	0a00                	addi	s0,sp,272
    101a:	004e                	c.slli	zero,0x13
    101c:	1d01                	addi	s10,s10,-32
    101e:	1901                	addi	s2,s2,-32
    1020:	0081                	addi	ra,ra,0
    1022:	0000                	unimp
    1024:	9102                	jalr	sp
    1026:	0a5c                	addi	a5,sp,276
    int   argc = 0;
    1028:	0041                	c.nop	16
    102a:	1d01                	addi	s10,s10,-32
    ee_u16       i, j = 0, num_algorithms = 0;
    102c:	2401                	jal	122c <main+0x21c>
    102e:	000000eb          	0xeb
    1032:	9102                	jalr	sp
    ee_s16       known_id = -1, total_errors = 0;
    1034:	0a58                	addi	a4,sp,276
    1036:	6176                	flw	ft2,92(sp)
    1038:	006c                	addi	a1,sp,12
    103a:	1d01                	addi	s10,s10,-32
    103c:	2e01                	jal	134c <main+0x33c>
    103e:	0099                	addi	ra,ra,6
    ee_u16       seedcrc = 0;
    1040:	0000                	unimp
    1042:	9102                	jalr	sp
    portable_init(&(results[0].port), &argc, argv);
    1044:	0b56                	slli	s6,s6,0x15
    1046:	0069                	c.nop	26
    1048:	1f01                	addi	t5,t5,-32
    104a:	0c01                	addi	s8,s8,0
    104c:	0081                	addi	ra,ra,0
    104e:	0000                	unimp
    1050:	9102                	jalr	sp
    1052:	0b6c                	addi	a1,sp,412
    1054:	006a                	c.slli	zero,0x1a
    1056:	1f01                	addi	t5,t5,-32
    1058:	0f01                	addi	t5,t5,0
    105a:	0081                	addi	ra,ra,0
    105c:	0000                	unimp
    105e:	9102                	jalr	sp
    1060:	0068                	addi	a0,sp,12
    1062:	5409                	li	s0,-30
    results[0].seed1      = get_seed(1);
    1064:	0005                	c.nop	1
    1066:	0100                	addi	s0,sp,128
    1068:	010d                	addi	sp,sp,3
    106a:	1401                	addi	s0,s0,-32
    106c:	0025                	c.nop	9
    106e:	0400                	addi	s0,sp,512
    1070:	0001                	nop
    1072:	0100                	addi	s0,sp,128
    1074:	4d9c                	lw	a5,24(a1)
    1076:	0a000003          	lb	zero,160(zero) # a0 <__do_global_dtors_aux+0x44>
    107a:	004e                	c.slli	zero,0x13
    results[0].seed2      = get_seed(2);
    107c:	0d01                	addi	s10,s10,0
    107e:	1901                	addi	s2,s2,-32
    1080:	0081                	addi	ra,ra,0
    1082:	0000                	unimp
    1084:	9102                	jalr	sp
    1086:	0a4c                	addi	a1,sp,276
    1088:	0d010043          	fmadd.h	ft0,ft2,fa6,ft1,rne
    108c:	2401                	jal	128c <main+0x27c>
    108e:	00f1                	addi	ra,ra,28
    1090:	0000                	unimp
    1092:	9102                	jalr	sp
    results[0].seed3      = get_seed(3);
    1094:	0a48                	addi	a0,sp,276
    1096:	0041                	c.nop	16
    1098:	0d01                	addi	s10,s10,0
    109a:	2f01                	jal	17aa <main+0x79a>
    109c:	000000eb          	0xeb
    10a0:	9102                	jalr	sp
    10a2:	0a44                	addi	s1,sp,276
    10a4:	6176                	flw	ft2,92(sp)
    10a6:	006c                	addi	a1,sp,12
    10a8:	0d01                	addi	s10,s10,0
    10aa:	3901                	jal	cba <core_list_reverse+0x1e>
    results[0].iterations = get_seed_32(4);
    10ac:	0099                	addi	ra,ra,6
    10ae:	0000                	unimp
    10b0:	9102                	jalr	sp
    10b2:	0b42                	slli	s6,s6,0x10
    10b4:	0069                	c.nop	26
    10b6:	0f01                	addi	t5,t5,0
    10b8:	0c01                	addi	s8,s8,0
    10ba:	0081                	addi	ra,ra,0
    results[0].execs = get_seed_32(5);
    10bc:	0000                	unimp
    10be:	9102                	jalr	sp
    10c0:	0b5c                	addi	a5,sp,404
    10c2:	006a                	c.slli	zero,0x1a
    10c4:	0f01                	addi	t5,t5,0
    10c6:	0f01                	addi	t5,t5,0
    10c8:	0081                	addi	ra,ra,0
    10ca:	0000                	unimp
    if (results[0].execs == 0)
    10cc:	9102                	jalr	sp
    10ce:	0058                	addi	a4,sp,4
    10d0:	c20d                	beqz	a2,10f2 <main+0xe2>
    10d2:	0004                	0x4
        results[0].execs = ALL_ALGORITHMS_MASK;
    10d4:	0100                	addi	s0,sp,128
    10d6:	01ee                	slli	gp,gp,0x1b
    10d8:	0041                	c.nop	16
    10da:	0000                	unimp
    if ((results[0].seed1 == 0) && (results[0].seed2 == 0)
    10dc:	23f0                	fld	fa2,192(a5)
    10de:	0000                	unimp
    10e0:	0124                	addi	s1,sp,136
    10e2:	0000                	unimp
    10e4:	9c01                	0x9c01
    10e6:	000003e7          	jalr	t2,zero # 0 <RAM_START_ADDRESS>
    10ea:	4e0e                	lw	t3,192(sp)
        && (results[0].seed3 == 0))
    10ec:	0100                	addi	s0,sp,128
    10ee:	13ee                	slli	t2,t2,0x3b
    10f0:	0081                	addi	ra,ra,0
    10f2:	0000                	unimp
        results[0].seed1 = 0;
    10f4:	9102                	jalr	sp
    10f6:	0e4c                	addi	a1,sp,788
        results[0].seed2 = 0;
    10f8:	ee010043          	fmadd.q	ft0,ft2,ft0,ft9,rne
        results[0].seed3 = 0x66;
    10fc:	f11e                	fsw	ft7,160(sp)
    10fe:	0000                	unimp
    1100:	0200                	addi	s0,sp,256
    1102:	4891                	li	a7,4
    if ((results[0].seed1 == 1) && (results[0].seed2 == 0)
    1104:	0005200f          	0x5200f
    1108:	0100                	addi	s0,sp,128
    110a:	28ee                	fld	fa7,216(sp)
    110c:	0099                	addi	ra,ra,6
    110e:	0000                	unimp
    1110:	9102                	jalr	sp
    1112:	1046                	c.slli	zero,0x31
    1114:	6d74                	flw	fa3,92(a0)
    1116:	0070                	addi	a2,sp,12
        && (results[0].seed3 == 0))
    1118:	f001                	bnez	s0,1018 <main+0x8>
    111a:	a50c                	fsd	fa1,8(a0)
    111c:	0000                	unimp
    111e:	0200                	addi	s0,sp,256
        results[0].seed1 = 0x3415;
    1120:	6c91                	lui	s9,0x4
    1122:	7d11                	lui	s10,0xfffe4
    1124:	0005                	c.nop	1
    1126:	0100                	addi	s0,sp,128
    1128:	15f0                	addi	a2,sp,748
    112a:	00a5                	addi	ra,ra,9
        results[0].seed2 = 0x3415;
    112c:	0000                	unimp
    112e:	9102                	jalr	sp
    1130:	1068                	addi	a0,sp,44
    1132:	00727563          	bgeu	tp,t2,113c <main+0x12c>
    1136:	f001                	bnez	s0,1036 <main+0x26>
        results[0].seed3 = 0x66;
    1138:	a51f 0000 0200      	0x2000000a51f
    113e:	5891                	li	a7,-28
for (i = 0; i < MULTITHREAD; i++)
    1140:	7210                	flw	fa2,32(a2)
    1142:	7465                	lui	s0,0xffff9
    1144:	0100                	addi	s0,sp,128
    1146:	0cf1                	addi	s9,s9,28
    results[i].memblock[0] = stack_memblock + i * TOTAL_DATA_SIZE;
    1148:	0041                	c.nop	16
    114a:	0000                	unimp
    114c:	9102                	jalr	sp
    114e:	1066                	c.slli	zero,0x39
    1150:	0069                	c.nop	26
    1152:	f201                	bnez	a2,1052 <main+0x42>
    1154:	810c                	0x810c
    1156:	0000                	unimp
    1158:	0200                	addi	s0,sp,256
    115a:	6091                	lui	ra,0x4
    115c:	6a10                	flw	fa2,16(a2)
    115e:	0100                	addi	s0,sp,128
    1160:	0ff2                	slli	t6,t6,0x1c
    1162:	0081                	addi	ra,ra,0
    1164:	0000                	unimp
    1166:	9102                	jalr	sp
    1168:	005c                	addi	a5,sp,4
    116a:	f10d                	bnez	a0,108c <main+0x7c>
    116c:	0004                	0x4
    116e:	0100                	addi	s0,sp,128
    1170:	01b5                	addi	gp,gp,13
    1172:	0081                	addi	ra,ra,0
    1174:	0000                	unimp
    1176:	2194                	fld	fa3,0(a1)
    1178:	0000                	unimp
    117a:	025c                	addi	a5,sp,260
    117c:	0000                	unimp
    117e:	9c01                	0x9c01
    1180:	0000049b          	0x49b
    1184:	0002520f          	0x2520f
    1188:	0100                	addi	s0,sp,128
    118a:	19b5                	addi	s3,s3,-19
    118c:	0081                	addi	ra,ra,0
    118e:	0000                	unimp
    1190:	9102                	jalr	sp
    1192:	0f4c                	addi	a1,sp,916
    1194:	04ea                	slli	s1,s1,0x1a
    1196:	0000                	unimp
    1198:	b501                	j	f98 <iterate+0x98>
    119a:	0328                	addi	a0,sp,392
    results[i].size        = TOTAL_DATA_SIZE;
    119c:	0001                	nop
    119e:	0200                	addi	s0,sp,256
    11a0:	4891                	li	a7,4
    11a2:	0003530f          	0x3530f
    11a6:	0100                	addi	s0,sp,128
    11a8:	37b5                	jal	1114 <main+0x104>
    11aa:	00000067          	jr	zero # 0 <RAM_START_ADDRESS>
    11ae:	9102                	jalr	sp
    11b0:	0e44                	addi	s1,sp,788
    11b2:	0070                	addi	a2,sp,12
    11b4:	b501                	j	fb4 <iterate+0xb4>
    11b6:	9b49                	andi	a4,a4,-14
    11b8:	0004                	0x4
    11ba:	0200                	addi	s0,sp,256
    11bc:	4091                	li	ra,4
    11be:	4e10                	lw	a2,24(a2)
    results[i].seed1       = results[0].seed1;
    11c0:	0100                	addi	s0,sp,128
    11c2:	00810db7          	lui	s11,0x810
    11c6:	0000                	unimp
    11c8:	9102                	jalr	sp
    11ca:	1060                	addi	s0,sp,44
    11cc:	0041                	c.nop	16
    11ce:	b801                	j	9de <HEAP_SIZE+0x1de>
    11d0:	eb0d                	bnez	a4,1202 <main+0x1f2>
    11d2:	0000                	unimp
    11d4:	0200                	addi	s0,sp,256
    11d6:	5c91                	li	s9,-28
    11d8:	4210                	lw	a2,0(a2)
    11da:	0100                	addi	s0,sp,128
    11dc:	0db9                	addi	s11,s11,14
    11de:	000000eb          	0xeb
    11e2:	9102                	jalr	sp
    results[i].seed2       = results[0].seed2;
    11e4:	1158                	addi	a4,sp,164
    11e6:	00000577          	0x577
    11ea:	ba01                	j	afa <core_list_insert_new+0xce>
    11ec:	670d                	lui	a4,0x3
    11ee:	0000                	unimp
    11f0:	0200                	addi	s0,sp,256
    11f2:	6c91                	lui	s9,0x4
    11f4:	7610                	flw	fa2,40(a2)
    11f6:	6c61                	lui	s8,0x18
    11f8:	0100                	addi	s0,sp,128
    11fa:	00990dbb          	0x990dbb
    11fe:	0000                	unimp
    1200:	9102                	jalr	sp
    1202:	1056                	c.slli	zero,0x35
    1204:	0069                	c.nop	26
    1206:	bc01                	j	c16 <core_list_find+0x1e>
    results[i].seed3       = results[0].seed3;
    1208:	810d                	srli	a0,a0,0x3
    120a:	0000                	unimp
    120c:	0200                	addi	s0,sp,256
    120e:	6891                	lui	a7,0x4
    1210:	6a10                	flw	fa2,16(a2)
    1212:	0100                	addi	s0,sp,128
    1214:	14bc                	addi	a5,sp,616
    1216:	0081                	addi	ra,ra,0
    1218:	0000                	unimp
    121a:	9102                	jalr	sp
    121c:	0064                	addi	s1,sp,12
    121e:	00f70407          	0xf70407
    1222:	0000                	unimp
    1224:	020d                	addi	tp,tp,3
    1226:	0005                	c.nop	1
    1228:	0100                	addi	s0,sp,128
    122a:	0182                	c.slli64	gp
    results[i].err         = 0;
    122c:	0041                	c.nop	16
    122e:	0000                	unimp
    1230:	1fe0                	addi	s0,sp,1020
    1232:	0000                	unimp
    1234:	01b4                	addi	a3,sp,200
    1236:	0000                	unimp
    1238:	9c01                	0x9c01
    123a:	051d                	addi	a0,a0,7
    123c:	0000                	unimp
    123e:	4e0e                	lw	t3,192(sp)
    1240:	0100                	addi	s0,sp,128
    1242:	1482                	slli	s1,s1,0x20
    1244:	0081                	addi	ra,ra,0
    1246:	0000                	unimp
    1248:	9102                	jalr	sp
    124a:	0e5c                	addi	a5,sp,788
    results[i].execs       = results[0].execs;
    124c:	82010043          	fmadd.d	ft0,ft2,ft0,fa6,rne
    1250:	f11f 0000 0200      	0x2000000f11f
    1256:	5891                	li	a7,-28
    1258:	410e                	lw	sp,192(sp)
    125a:	0100                	addi	s0,sp,128
    125c:	2a82                	fld	fs5,0(sp)
    125e:	000000eb          	0xeb
    1262:	9102                	jalr	sp
    1264:	0e54                	addi	a3,sp,788
    1266:	0042                	c.slli	zero,0x10
    1268:	8201                	c.srli64	a2
    126a:	eb35                	bnez	a4,12de <main+0x2ce>
    126c:	0000                	unimp
    126e:	0200                	addi	s0,sp,256
for (i = 0; i < MULTITHREAD; i++)
    1270:	5091                	li	ra,-28
    1272:	760e                	flw	fa2,224(sp)
    1274:	6c61                	lui	s8,0x18
    1276:	0100                	addi	s0,sp,128
    1278:	3f82                	fld	ft11,32(sp)
    127a:	0099                	addi	ra,ra,6
    127c:	0000                	unimp
    127e:	9102                	jalr	sp
    1280:	104e                	c.slli	zero,0x33
    1282:	00637263          	bgeu	t1,t1,1286 <main+0x276>
    for (i = 0; i < NUM_ALGORITHMS; i++)
    1286:	8401                	c.srai64	s0
    1288:	540c                	lw	a1,40(s0)
    128a:	0000                	unimp
        if ((1 << (ee_u32)i) & results[0].execs)
    128c:	0200                	addi	s0,sp,256
    128e:	6e91                	lui	t4,0x4
    1290:	2011                	jal	1294 <main+0x284>
    1292:	0005                	c.nop	1
    1294:	0100                	addi	s0,sp,128
    1296:	0c85                	addi	s9,s9,1
    1298:	0099                	addi	ra,ra,6
    129a:	0000                	unimp
    129c:	9102                	jalr	sp
    129e:	006c                	addi	a1,sp,12
    12a0:	0e12                	slli	t3,t3,0x4
    12a2:	0005                	c.nop	1
    12a4:	0100                	addi	s0,sp,128
    12a6:	015c                	addi	a5,sp,132
            num_algorithms++;
    12a8:	0054                	addi	a3,sp,4
    12aa:	0000                	unimp
    12ac:	1f2c                	addi	a1,sp,952
    12ae:	0000                	unimp
    12b0:	00b4                	addi	a3,sp,72
    12b2:	0000                	unimp
    for (i = 0; i < NUM_ALGORITHMS; i++)
    12b4:	9c01                	0x9c01
    12b6:	700e                	flw	ft0,224(sp)
    12b8:	0100                	addi	s0,sp,128
    12ba:	1f5c                	addi	a5,sp,948
    12bc:	0000049b          	0x49b
    12c0:	9102                	jalr	sp
    12c2:	0f4c                	addi	a1,sp,916
    12c4:	00000353          	fadd.s	ft6,ft0,ft0,rne
    12c8:	5c01                	li	s8,-32
    12ca:	4129                	li	sp,10
    for (i = 0; i < MULTITHREAD; i++)
    12cc:	0000                	unimp
    12ce:	0200                	addi	s0,sp,256
    12d0:	4a91                	li	s5,4
    12d2:	630e                	flw	ft6,192(sp)
        results[i].size = results[i].size / num_algorithms;
    12d4:	6372                	flw	ft6,28(sp)
    12d6:	0100                	addi	s0,sp,128
    12d8:	365c                	fld	fa5,168(a2)
    12da:	0054                	addi	a3,sp,4
    12dc:	0000                	unimp
    12de:	9102                	jalr	sp
    12e0:	1048                	addi	a0,sp,36
    12e2:	004e                	c.slli	zero,0x13
    12e4:	5e01                	li	t3,-32
    12e6:	810d                	srli	a0,a0,0x3
    12e8:	0000                	unimp
    12ea:	0200                	addi	s0,sp,256
    12ec:	6c91                	lui	s9,0x4
    12ee:	4310                	lw	a2,0(a4)
    12f0:	0100                	addi	s0,sp,128
    12f2:	0d5f 00f1 0000      	0xf10d5f
    12f8:	9102                	jalr	sp
    12fa:	1068                	addi	a0,sp,44
    12fc:	0041                	c.nop	16
    12fe:	6001                	0x6001
    1300:	eb0d                	bnez	a4,1332 <main+0x322>
    1302:	0000                	unimp
    1304:	0200                	addi	s0,sp,256
    1306:	6491                	lui	s1,0x4
    1308:	4210                	lw	a2,0(a2)
    130a:	0100                	addi	s0,sp,128
    130c:	0d61                	addi	s10,s10,24
    130e:	000000eb          	0xeb
    1312:	9102                	jalr	sp
    1314:	1060                	addi	s0,sp,44
    1316:	6176                	flw	ft2,92(sp)
    1318:	006c                	addi	a1,sp,12
    131a:	6201                	0x6201
    131c:	990d                	andi	a0,a0,-29
    131e:	0000                	unimp
    1320:	0200                	addi	s0,sp,256
    1322:	5e91                	li	t4,-28
    1324:	0000                	unimp
    1326:	02a0                	addi	s0,sp,328
    1328:	0000                	unimp
    132a:	0004                	0x4
    for (i = 0; i < MULTITHREAD; i++)
    132c:	0452                	slli	s0,s0,0x14
    132e:	0000                	unimp
    1330:	0104                	addi	s1,sp,128
    1332:	000002d3          	fadd.s	ft5,ft0,ft0,rne
    1336:	b50c                	fsd	fa1,40(a0)
    1338:	0005                	c.nop	1
    133a:	2700                	fld	fs0,8(a4)
    133c:	0000                	unimp
    133e:	9000                	0x9000
    for (i = 0; i < NUM_ALGORITHMS; i++)
    1340:	6000002b          	0x6000002b
    1344:	0001                	nop
    1346:	d200                	sw	s0,32(a2)
        if ((1 << (ee_u32)i) & results[0].execs)
    1348:	001e                	c.slli	zero,0x7
    134a:	0200                	addi	s0,sp,256
    134c:	0504                	addi	s1,sp,640
    134e:	6e69                	lui	t3,0x1a
    1350:	0074                	addi	a3,sp,12
    1352:	ca070403          	lb	s0,-864(a4) # 2ca0 <portable_init+0xc>
    1356:	0008                	0x8
    1358:	0300                	addi	s0,sp,384
    135a:	0508                	addi	a0,sp,640
    135c:	018d                	addi	gp,gp,3
    135e:	0000                	unimp
    1360:	b8041003          	lh	zero,-1152(s0) # ffff8b80 <RAM_SIZE+0xfffe8b80>
            for (ctx = 0; ctx < MULTITHREAD; ctx++)
    1364:	0011                	c.nop	4
    1366:	0300                	addi	s0,sp,384
    1368:	0502                	c.slli64	a0
    136a:	0085                	addi	ra,ra,1
                    = (char *)(results[ctx].memblock[0]) + results[0].size * j;
    136c:	0000                	unimp
    136e:	5a070203          	lb	tp,1440(a4)
    1372:	0002                	c.slli64	zero
    1374:	0400                	addi	s0,sp,512
    1376:	00ce                	slli	ra,ra,0x13
    1378:	0000                	unimp
    137a:	6102                	flw	ft2,0(sp)
    137c:	2518                	fld	fa4,8(a0)
    137e:	0000                	unimp
    1380:	0500                	addi	s0,sp,640
    1382:	0000004f          	fnmadd.s	ft0,ft0,ft0,ft0,rne
    1386:	bd040803          	lb	a6,-1072(s0)
    138a:	0011                	c.nop	4
    138c:	0400                	addi	s0,sp,512
    138e:	00b1                	addi	ra,ra,12
    1390:	0000                	unimp
    1392:	6302                	flw	ft6,0(sp)
    1394:	7318                	flw	fa4,32(a4)
    1396:	0000                	unimp
    1398:	0300                	addi	s0,sp,384
    139a:	0801                	addi	a6,a6,0
    139c:	0211                	addi	tp,tp,4
    139e:	0000                	unimp
    13a0:	9804                	0x9804
    13a2:	02000003          	lb	zero,32(zero) # 20 <_start+0x10>
    13a6:	1864                	addi	s1,sp,60
                results[ctx].memblock[i + 1]
    13a8:	002c                	addi	a1,sp,8
    13aa:	0000                	unimp
    13ac:	7a06                	flw	fs4,96(sp)
    13ae:	0000                	unimp
                    = (char *)(results[ctx].memblock[0]) + results[0].size * j;
    13b0:	0400                	addi	s0,sp,512
    13b2:	000004af          	vamoaddei8.v	zero,(zero),v0,v9,v0.t
    13b6:	7202                	flw	ft4,32(sp)
    13b8:	7a10                	flw	fa2,48(a2)
    13ba:	0000                	unimp
    13bc:	0700                	addi	s0,sp,896
    13be:	03e8                	addi	a0,sp,460
    13c0:	0000                	unimp
    13c2:	c202                	sw	zero,4(sp)
    13c4:	00007a0f          	0x7a0f
    13c8:	0800                	addi	s0,sp,16
    13ca:	033c                	addi	a5,sp,392
    13cc:	0000                	unimp
    13ce:	0201                	addi	tp,tp,0
    13d0:	10c4                	addi	s1,sp,100
    13d2:	00be                	slli	ra,ra,0xf
    13d4:	0000                	unimp
    13d6:	8109                	srli	a0,a0,0x2
            for (ctx = 0; ctx < MULTITHREAD; ctx++)
    13d8:	0001                	nop
    13da:	0200                	addi	s0,sp,256
    13dc:	0bc6                	slli	s7,s7,0x11
    13de:	00000067          	jr	zero # 0 <RAM_START_ADDRESS>
    13e2:	0000                	unimp
    13e4:	9f04                	0x9f04
    13e6:	02000003          	lb	zero,32(zero) # 20 <_start+0x10>
    13ea:	00a303c7          	fmsub.s	ft7,ft6,fa0,ft0,rne
            j++;
    13ee:	0000                	unimp
    13f0:	5904                	lw	s1,48(a0)
    13f2:	0004                	0x4
    13f4:	0300                	addi	s0,sp,384
    13f6:	1039                	c.nop	-18
    for (i = 0; i < NUM_ALGORITHMS; i++)
    13f8:	007a                	c.slli	zero,0x1e
    13fa:	0000                	unimp
    13fc:	940a                	add	s0,s0,sp
    13fe:	0006                	c.slli	zero,0x1
    1400:	0100                	addi	s0,sp,128
    1402:	005b111b          	0x5b111b
    1406:	0000                	unimp
    1408:	0305                	addi	t1,t1,1
    140a:	8480                	0x8480
    140c:	0000                	unimp
    140e:	7c0a                	flw	fs8,160(sp)
    for (i = 0; i < MULTITHREAD; i++)
    1410:	0006                	c.slli	zero,0x1
    1412:	0100                	addi	s0,sp,128
    1414:	111c                	addi	a5,sp,160
    1416:	0000005b          	0x5b
        if (results[i].execs & ID_LIST)
    141a:	0305                	addi	t1,t1,1
    141c:	8484                	0x8484
    141e:	0000                	unimp
    1420:	f70a                	fsw	ft2,172(sp)
    1422:	0005                	c.nop	1
    1424:	0100                	addi	s0,sp,128
    1426:	111d                	addi	sp,sp,-25
    1428:	0000005b          	0x5b
    142c:	0305                	addi	t1,t1,1
    142e:	7fc8                	flw	fa0,60(a5)
    1430:	0000                	unimp
    1432:	540a                	lw	s0,160(sp)
    1434:	0006                	c.slli	zero,0x1
    1436:	0100                	addi	s0,sp,128
    1438:	1124                	addi	s1,sp,168
    143a:	0000005b          	0x5b
    143e:	0305                	addi	t1,t1,1
            results[i].list = core_list_init(
    1440:	8488                	0x8488
    1442:	0000                	unimp
    1444:	a30a                	fsd	ft2,384(sp)
    1446:	0006                	c.slli	zero,0x1
                results[0].size, results[i].memblock[1], results[i].seed1);
    1448:	0100                	addi	s0,sp,128
    144a:	1125                	addi	sp,sp,-23
    144c:	0000005b          	0x5b
    1450:	0305                	addi	t1,t1,1
    1452:	848c                	0x848c
    1454:	0000                	unimp
    1456:	00063c0b          	0x63c0b
    145a:	0100                	addi	s0,sp,128
    145c:	1542                	slli	a0,a0,0x30
    145e:	007a                	c.slli	zero,0x1e
    1460:	0000                	unimp
    1462:	0305                	addi	t1,t1,1
            results[i].list = core_list_init(
    1464:	84ac                	0x84ac
    1466:	0000                	unimp
    1468:	00066e0b          	0x66e0b
    146c:	0100                	addi	s0,sp,128
    146e:	2542                	fld	fa0,16(sp)
    1470:	007a                	c.slli	zero,0x1e
    1472:	0000                	unimp
    1474:	0305                	addi	t1,t1,1
    1476:	84b0                	0x84b0
    1478:	0000                	unimp
    147a:	970c                	0x970c
    147c:	0000                	unimp
    147e:	0100                	addi	s0,sp,128
    1480:	087c                	addi	a5,sp,28
    1482:	0305                	addi	t1,t1,1
    1484:	7fcc                	flw	fa1,60(a5)
    1486:	0000                	unimp
    1488:	2e0d                	jal	17ba <main+0x7aa>
    148a:	0006                	c.slli	zero,0x1
    148c:	0100                	addi	s0,sp,128
    148e:	0195                	addi	gp,gp,5
    1490:	2cc8                	fld	fa0,152(s1)
    1492:	0000                	unimp
    1494:	0028                	addi	a0,sp,8
    1496:	0000                	unimp
    1498:	9c01                	0x9c01
    149a:	0186                	slli	gp,gp,0x1
    149c:	0000                	unimp
    149e:	700e                	flw	ft0,224(sp)
    14a0:	0100                	addi	s0,sp,128
    14a2:	1e95                	addi	t4,t4,-27
    14a4:	0186                	slli	gp,gp,0x1
    14a6:	0000                	unimp
    14a8:	9102                	jalr	sp
    14aa:	006c                	addi	a1,sp,12
    14ac:	00be040f          	0xbe040f
    14b0:	0000                	unimp
    14b2:	160d                	addi	a2,a2,-29
        if (results[i].execs & ID_MATRIX)
    14b4:	0006                	c.slli	zero,0x1
    14b6:	0100                	addi	s0,sp,128
    14b8:	2c940183          	lb	gp,713(s0)
    14bc:	0000                	unimp
    14be:	0034                	addi	a3,sp,8
    14c0:	0000                	unimp
    14c2:	9c01                	0x9c01
    14c4:	01ce                	slli	gp,gp,0x13
    14c6:	0000                	unimp
    14c8:	700e                	flw	ft0,224(sp)
    14ca:	0100                	addi	s0,sp,128
    14cc:	01861e83          	lh	t4,24(a2) # fffe0018 <RAM_SIZE+0xfffd0018>
    14d0:	0000                	unimp
    14d2:	9102                	jalr	sp
    14d4:	106c                	addi	a1,sp,44
    14d6:	0406                	slli	s0,s0,0x1
    14d8:	0000                	unimp
    14da:	8301                	c.srli64	a4
            core_init_matrix(results[0].size,
    14dc:	ce26                	sw	s1,28(sp)
    14de:	0001                	nop
    14e0:	0200                	addi	s0,sp,256
    14e2:	6891                	lui	a7,0x4
    14e4:	6b10                	flw	fa2,16(a4)
    14e6:	0004                	0x4
    14e8:	0100                	addi	s0,sp,128
    14ea:	01d43283          	0x1d43283
    14ee:	0000                	unimp
    14f0:	9102                	jalr	sp
    14f2:	0064                	addi	s1,sp,12
    14f4:	0025040f          	0x25040f
    14f8:	0000                	unimp
    14fa:	01da040f          	0x1da040f
    14fe:	0000                	unimp
                             (ee_s32)results[i].seed1
    1500:	01e0040f          	0x1e0040f
    1504:	0000                	unimp
    1506:	1a080103          	lb	sp,416(a6) # fffe01a0 <RAM_SIZE+0xfffd01a0>
    150a:	0002                	c.slli64	zero
    150c:	1100                	addi	s0,sp,160
    150e:	05ea                	slli	a1,a1,0x1a
    1510:	0000                	unimp
    1512:	7601                	lui	a2,0xfffe0
    1514:	ca01                	beqz	a2,1524 <main+0x514>
    1516:	0000                	unimp
    1518:	5000                	lw	s0,32(s0)
    151a:	002c                	addi	a1,sp,8
    151c:	4400                	lw	s0,8(s0)
    151e:	0000                	unimp
    1520:	0100                	addi	s0,sp,128
    1522:	209c                	fld	fa5,0(s1)
                                 | (((ee_s32)results[i].seed2) << 16),
    1524:	0002                	c.slli64	zero
    1526:	1000                	addi	s0,sp,32
    1528:	000005af          	vamoaddei8.v	zero,(zero),v0,v11,v0.t
    152c:	7601                	lui	a2,0xfffe0
    152e:	8b19                	andi	a4,a4,6
    1530:	0000                	unimp
    1532:	0200                	addi	s0,sp,256
    1534:	5c91                	li	s9,-28
    1536:	0000e80b          	0xe80b
    153a:	0100                	addi	s0,sp,128
    153c:	0e78                	addi	a4,sp,796
    153e:	00ca                	slli	ra,ra,0x12
    1540:	0000                	unimp
    1542:	9102                	jalr	sp
    1544:	006c                	addi	a1,sp,12
    1546:	8b12                	mv	s6,tp
            core_init_matrix(results[0].size,
    1548:	0006                	c.slli	zero,0x1
    154a:	0100                	addi	s0,sp,128
                             &(results[i].mat));
    154c:	0168                	addi	a0,sp,140
    154e:	0000008b          	0x8b
            core_init_matrix(results[0].size,
    1552:	2c20                	fld	fs0,88(s0)
    1554:	0000                	unimp
    1556:	0030                	addi	a2,sp,8
    1558:	0000                	unimp
    155a:	9c01                	0x9c01
    155c:	024a                	slli	tp,tp,0x12
    155e:	0000                	unimp
    1560:	0005e20b          	0x5e20b
    1564:	0100                	addi	s0,sp,128
    1566:	106a                	c.slli	zero,0x3a
    1568:	0000008b          	0x8b
    156c:	9102                	jalr	sp
    156e:	006c                	addi	a1,sp,12
    1570:	00062413          	slti	s0,a2,0
    1574:	0100                	addi	s0,sp,128
    1576:	015a                	slli	sp,sp,0x16
        if (results[i].execs & ID_STATE)
    1578:	2bf0                	fld	fa2,208(a5)
    157a:	0000                	unimp
    157c:	0030                	addi	a2,sp,8
    157e:	0000                	unimp
    1580:	9c01                	0x9c01
    1582:	00066313          	ori	t1,a2,0
    1586:	0100                	addi	s0,sp,128
    1588:	014d                	addi	sp,sp,19
    158a:	2bc0                	fld	fs0,144(a5)
    158c:	0000                	unimp
    158e:	0030                	addi	a2,sp,8
    1590:	0000                	unimp
    1592:	9c01                	0x9c01
    1594:	0614                	addi	a3,sp,768
    1596:	0006                	c.slli	zero,0x1
    1598:	0100                	addi	s0,sp,128
    159a:	012e                	slli	sp,sp,0xb
    159c:	007a                	c.slli	zero,0x1e
    159e:	0000                	unimp
            core_init_state(
    15a0:	2b90                	fld	fa2,16(a5)
    15a2:	0000                	unimp
    15a4:	0030                	addi	a2,sp,8
    15a6:	0000                	unimp
    15a8:	9c01                	0x9c01
    15aa:	0298                	addi	a4,sp,320
    15ac:	0000                	unimp
    15ae:	00064b0b          	0x64b0b
    15b2:	0100                	addi	s0,sp,128
    15b4:	1d30                	addi	a2,sp,696
    15b6:	029e                	slli	t0,t0,0x7
    15b8:	0000                	unimp
    15ba:	9102                	jalr	sp
    15bc:	006c                	addi	a1,sp,12
    15be:	0086040f          	0x86040f
    15c2:	0000                	unimp
    15c4:	9806                	add	a6,a6,ra
    15c6:	0002                	c.slli64	zero
                results[0].size, results[i].seed1, results[i].memblock[3]);
    15c8:	0000                	unimp
    15ca:	034d                	addi	t1,t1,19
    15cc:	0000                	unimp
    15ce:	0004                	0x4
    15d0:	05ba                	slli	a1,a1,0xe
    15d2:	0000                	unimp
    15d4:	0104                	addi	s1,sp,128
    15d6:	000002d3          	fadd.s	ft5,ft0,ft0,rne
    15da:	cb0c                	sw	a1,16(a4)
    15dc:	27000007          	vluxseg2ei8.v	v0,(zero),v16
    15e0:	0000                	unimp
    15e2:	f000                	fsw	fs0,32(s0)
            core_init_state(
    15e4:	002c                	addi	a1,sp,8
    15e6:	1000                	addi	s0,sp,32
    15e8:	0009                	c.nop	2
    15ea:	0400                	addi	s0,sp,512
    15ec:	0020                	addi	s0,sp,8
    15ee:	0200                	addi	s0,sp,256
    for (i = 0; i < MULTITHREAD; i++)
    15f0:	0504                	addi	s1,sp,640
    15f2:	6e69                	lui	t3,0x1a
    15f4:	0074                	addi	a3,sp,12
    15f6:	ca070403          	lb	s0,-864(a4)
    15fa:	0008                	0x8
    15fc:	0300                	addi	s0,sp,384
    15fe:	0508                	addi	a0,sp,640
    1600:	018d                	addi	gp,gp,3
    1602:	0000                	unimp
    if (results[0].iterations == 0)
    1604:	b8041003          	lh	zero,-1152(s0)
    1608:	0011                	c.nop	4
    160a:	0400                	addi	s0,sp,512
        secs_ret secs_passed = 0;
    160c:	02b2                	slli	t0,t0,0xc
    160e:	0000                	unimp
        results[0].iterations = 1;
    1610:	5f02                	lw	t5,32(sp)
    1612:	4d18                	lw	a4,24(a0)
    1614:	0000                	unimp
    1616:	0300                	addi	s0,sp,384
        while (secs_passed < (secs_ret)1)
    1618:	0502                	c.slli64	a0
    161a:	0085                	addi	ra,ra,1
            results[0].iterations *= 10;
    161c:	0000                	unimp
    161e:	f604                	fsw	fs1,40(a2)
    1620:	0001                	nop
    1622:	0200                	addi	s0,sp,256
    1624:	1860                	addi	s0,sp,60
    1626:	0060                	addi	s0,sp,12
    1628:	0000                	unimp
    162a:	5a070203          	lb	tp,1440(a4)
    162e:	0002                	c.slli64	zero
    1630:	0300                	addi	s0,sp,384
    1632:	0408                	addi	a0,sp,512
            start_time();
    1634:	11bd                	addi	gp,gp,-17
    1636:	0000                	unimp
            iterate(&results[0]);
    1638:	b104                	fsd	fs1,32(a0)
    163a:	0000                	unimp
    163c:	0200                	addi	s0,sp,256
    163e:	007a1863          	bne	s4,t2,164e <main+0x63e>
    1642:	0000                	unimp
            stop_time();
    1644:	11080103          	lb	sp,272(a6)
            secs_passed = time_in_secs(get_time());
    1648:	0002                	c.slli64	zero
    164a:	0400                	addi	s0,sp,512
    164c:	0398                	addi	a4,sp,448
    164e:	0000                	unimp
    1650:	6402                	flw	fs0,0(sp)
    1652:	2c18                	fld	fa4,24(s0)
    1654:	0000                	unimp
    1656:	0500                	addi	s0,sp,640
    1658:	06b2                	slli	a3,a3,0xc
    165a:	0000                	unimp
        while (secs_passed < (secs_ret)1)
    165c:	002c0407          	0x2c0407
    1660:	0000                	unimp
    1662:	d60e7b03          	0xd60e7b03
        divisor = (ee_u32)secs_passed;
    1666:	0000                	unimp
    1668:	0600                	addi	s0,sp,768
    166a:	00000767          	jalr	a4,zero # 0 <RAM_START_ADDRESS>
        if (divisor == 0) /* some machines cast float to int as 0 since this
    166e:	0600                	addi	s0,sp,768
    1670:	0780                	addi	s0,sp,960
    1672:	0000                	unimp
            divisor = 1;
    1674:	0601                	addi	a2,a2,0
    1676:	07b4                	addi	a3,sp,968
    1678:	0000                	unimp
    167a:	0602                	c.slli64	a2
        results[0].iterations *= 1 + 10 / divisor;
    167c:	07bc                	addi	a5,sp,968
    167e:	0000                	unimp
    1680:	075e0603          	lb	a2,117(t3) # 1a075 <RAM_SIZE+0xa075>
    1684:	0000                	unimp
    1686:	0604                	addi	s1,sp,768
    1688:	078d                	addi	a5,a5,3
    168a:	0000                	unimp
    168c:	0605                	addi	a2,a2,1
    168e:	074a                	slli	a4,a4,0x12
    1690:	0000                	unimp
    1692:	0606                	slli	a2,a2,0x1
    1694:	000006f3          	0x6f3
    1698:	07a40607          	vluxei8.v	v12,(s0),v26
    169c:	0000                	unimp
    169e:	0008                	0x8
    16a0:	0000e607          	vle32.v	v12,(ra),v0.t
    16a4:	e600                	fsw	fs0,8(a2)
    16a6:	0000                	unimp
    start_time();
    16a8:	0800                	addi	s0,sp,16
    16aa:	002c                	addi	a1,sp,8
    iterate(&results[0]);
    16ac:	0000                	unimp
    16ae:	04090003          	lb	zero,64(s2) # 1040 <main+0x30>
    16b2:	006e                	c.slli	zero,0x1b
    16b4:	0000                	unimp
    16b6:	ec0a                	fsw	ft2,24(sp)
    stop_time();
    16b8:	0006                	c.slli	zero,0x1
    16ba:	0100                	addi	s0,sp,128
    total_time = get_time();
    16bc:	0f72                	slli	t5,t5,0x1c
    16be:	00d6                	slli	ra,ra,0x15
    16c0:	0000                	unimp
    16c2:	0305                	addi	t1,t1,1
    seedcrc = crc16(results[0].seed1, seedcrc);
    16c4:	8010                	0x8010
    16c6:	0000                	unimp
    16c8:	d30a                	sw	sp,164(sp)
    16ca:	0006                	c.slli	zero,0x1
    16cc:	0100                	addi	s0,sp,128
    16ce:	0f74                	addi	a3,sp,924
    16d0:	00d6                	slli	ra,ra,0x15
    16d2:	0000                	unimp
    16d4:	0305                	addi	t1,t1,1
    16d6:	8020                	0x8020
    16d8:	0000                	unimp
    16da:	c40a                	sw	sp,8(sp)
    16dc:	01000007          	vle8ff.v	v0,(zero),v0.t
    seedcrc = crc16(results[0].seed2, seedcrc);
    16e0:	0f78                	addi	a4,sp,924
    16e2:	00d6                	slli	ra,ra,0x15
    16e4:	0000                	unimp
    16e6:	0305                	addi	t1,t1,1
    16e8:	8030                	0x8030
    16ea:	0000                	unimp
    16ec:	790a                	flw	fs2,160(sp)
    16ee:	01000007          	vle8ff.v	v0,(zero),v0.t
    16f2:	0f7c                	addi	a5,sp,924
    16f4:	00d6                	slli	ra,ra,0x15
    16f6:	0000                	unimp
    16f8:	0305                	addi	t1,t1,1
    16fa:	8040                	0x8040
    seedcrc = crc16(results[0].seed3, seedcrc);
    16fc:	0000                	unimp
    16fe:	0006bd0b          	0x6bd0b
    1702:	0100                	addi	s0,sp,128
    1704:	01d9                	addi	gp,gp,22
    1706:	008d                	addi	ra,ra,3
    1708:	0000                	unimp
    170a:	3264                	fld	fs1,224(a2)
    170c:	0000                	unimp
    170e:	039c                	addi	a5,sp,448
    1710:	0000                	unimp
    1712:	9c01                	0x9c01
    1714:	019a                	slli	gp,gp,0x6
    1716:	0000                	unimp
    seedcrc = crc16(results[0].size, seedcrc);
    1718:	580c                	lw	a1,48(s0)
    171a:	01000007          	vle8ff.v	v0,(zero),v0.t
    171e:	1fd9                	addi	t6,t6,-10
    1720:	019a                	slli	gp,gp,0x6
    1722:	0000                	unimp
    1724:	9102                	jalr	sp
    1726:	0c5c                	addi	a5,sp,532
    1728:	0739                	addi	a4,a4,14
    172a:	0000                	unimp
    172c:	d901                	beqz	a0,163c <main+0x62c>
    172e:	a02e                	fsd	fa1,0(sp)
    1730:	0001                	nop
    1732:	0200                	addi	s0,sp,256
    1734:	5891                	li	a7,-28
    1736:	730d                	lui	t1,0xfffe3
    1738:	7274                	flw	fa3,100(a2)
    173a:	0100                	addi	s0,sp,128
    switch (seedcrc)
    173c:	00e615db          	0xe615db
    1740:	0000                	unimp
    1742:	9102                	jalr	sp
    1744:	0a6c                	addi	a1,sp,284
    1746:	0798                	addi	a4,sp,960
    1748:	0000                	unimp
    174a:	dc01                	beqz	s0,1662 <main+0x652>
    174c:	6e15                	lui	t3,0x5
    174e:	0000                	unimp
    1750:	0200                	addi	s0,sp,256
    1752:	6791                	lui	a5,0x4
    1754:	260a                	fld	fa2,128(sp)
    1756:	01000007          	vle8ff.v	v0,(zero),v0.t
    175a:	15dd                	addi	a1,a1,-9
    175c:	008d                	addi	ra,ra,3
    175e:	0000                	unimp
    1760:	9102                	jalr	sp
    1762:	0068                	addi	a0,sp,12
    1764:	0409                	addi	s0,s0,2
    1766:	00e6                	slli	ra,ra,0x19
    1768:	0000                	unimp
    176a:	0409                	addi	s0,s0,2
    176c:	0081                	addi	ra,ra,0
    176e:	0000                	unimp
    1770:	100e                	c.slli	zero,0x23
    1772:	01000007          	vle8ff.v	v0,(zero),v0.t
    1776:	01c6                	slli	gp,gp,0x11
    1778:	006e                	c.slli	zero,0x1b
    177a:	0000                	unimp
    177c:	3214                	fld	fa3,32(a2)
    177e:	0000                	unimp
    1780:	0050                	addi	a2,sp,4
    1782:	0000                	unimp
    1784:	9c01                	0x9c01
    1786:	01dd                	addi	gp,gp,23
    1788:	0000                	unimp
    178a:	0100630f          	0x100630f
    178e:	12c6                	slli	t0,t0,0x31
    1790:	006e                	c.slli	zero,0x1b
    1792:	0000                	unimp
    1794:	9102                	jalr	sp
    1796:	0a5f 00e8 0000      	0xe80a5f
    179c:	c801                	beqz	s0,17ac <main+0x79c>
    179e:	00006e0b          	0x6e0b
    17a2:	0200                	addi	s0,sp,256
            known_id = 0;
    17a4:	6f91                	lui	t6,0x4
    17a6:	1000                	addi	s0,sp,32
            ee_printf("6k performance run parameters for coremark.\n");
    17a8:	06dc                	addi	a5,sp,836
    17aa:	0000                	unimp
    17ac:	8c01                	sub	s0,s0,s0
    17ae:	9c01                	0x9c01
    17b0:	7800002f          	0x7800002f
            break;
    17b4:	0002                	c.slli64	zero
    17b6:	0100                	addi	s0,sp,128
            known_id = 1;
    17b8:	599c                	lw	a5,48(a1)
    17ba:	0002                	c.slli64	zero
    17bc:	0c00                	addi	s0,sp,528
    17be:	0255                	addi	tp,tp,21
            ee_printf("6k validation run parameters for coremark.\n");
    17c0:	0000                	unimp
    17c2:	8c01                	sub	s0,s0,s0
    17c4:	8118                	0x8118
    17c6:	0000                	unimp
    17c8:	0200                	addi	s0,sp,256
    17ca:	5c91                	li	s9,-28
            break;
    17cc:	530c                	lw	a1,32(a4)
    17ce:	01000003          	lb	zero,16(zero) # 10 <_start>
            known_id = 2;
    17d2:	258c                	fld	fa1,8(a1)
    17d4:	0041                	c.nop	16
    17d6:	0000                	unimp
            ee_printf("Profile generation run parameters for coremark.\n");
    17d8:	9102                	jalr	sp
    17da:	0f5a                	slli	t5,t5,0x16
    17dc:	0070                	addi	a2,sp,12
    17de:	8c01                	sub	s0,s0,s0
    17e0:	e632                	fsw	fa2,12(sp)
    17e2:	0000                	unimp
            break;
    17e4:	0200                	addi	s0,sp,256
    17e6:	5491                	li	s1,-28
            known_id = 3;
    17e8:	f70a                	fsw	ft2,172(sp)
    17ea:	01000007          	vle8ff.v	v0,(zero),v0.t
    17ee:	0c8e                	slli	s9,s9,0x3
            ee_printf("2K performance run parameters for coremark.\n");
    17f0:	0081                	addi	ra,ra,0
    17f2:	0000                	unimp
    17f4:	9102                	jalr	sp
    17f6:	0a6c                	addi	a1,sp,284
    17f8:	03b9                	addi	t2,t2,14
    17fa:	0000                	unimp
            break;
    17fc:	8e01                	sub	a2,a2,s0
    17fe:	00008117          	auipc	sp,0x8
            known_id = 4;
    1802:	0200                	addi	s0,sp,256
    1804:	6891                	lui	a7,0x4
    1806:	690d                	lui	s2,0x3
            ee_printf("2K validation run parameters for coremark.\n");
    1808:	0100                	addi	s0,sp,128
    180a:	218e                	fld	ft3,192(sp)
    180c:	0081                	addi	ra,ra,0
    180e:	0000                	unimp
    1810:	9102                	jalr	sp
    1812:	0d64                	addi	s1,sp,668
            break;
    1814:	7562                	flw	fa0,56(sp)
    1816:	0066                	c.slli	zero,0x19
            total_errors = -1;
    1818:	8f01                	sub	a4,a4,s0
    181a:	e60c                	fsw	fa1,8(a2)
    181c:	0000                	unimp
    181e:	0200                	addi	s0,sp,256
            break;
    1820:	6091                	lui	ra,0x4
    1822:	0b00                	addi	s0,sp,400
    if (known_id >= 0)
    1824:	0000071b          	0x71b
    1828:	2e01                	jal	1b38 <main+0xb28>
    182a:	5401                	li	s0,-32
        for (i = 0; i < default_num_contexts; i++)
    182c:	0000                	unimp
    182e:	f000                	fsw	fs0,32(s0)
    1830:	002c                	addi	a1,sp,8
    1832:	ac00                	fsd	fs0,24(s0)
            results[i].err = 0;
    1834:	0002                	c.slli64	zero
    1836:	0100                	addi	s0,sp,128
    1838:	449c                	lw	a5,8(s1)
    183a:	0c000003          	lb	zero,192(zero) # c0 <frame_dummy+0x1c>
    183e:	0252                	slli	tp,tp,0x14
    1840:	0000                	unimp
    1842:	2e01                	jal	1b52 <main+0xb42>
    1844:	8119                	srli	a0,a0,0x6
    1846:	0000                	unimp
    1848:	0300                	addi	s0,sp,384
    184a:	9c91                	0x9c91
    184c:	0c7f                	0xc7f
    184e:	0492                	slli	s1,s1,0x4
    1850:	0000                	unimp
    1852:	2f01                	jal	1f62 <core_bench_matrix+0x36>
            if ((results[i].execs & ID_LIST)
    1854:	e619                	bnez	a2,1862 <main+0x852>
    1856:	0000                	unimp
    1858:	0300                	addi	s0,sp,384
    185a:	9891                	andi	s1,s1,-28
    185c:	0c7f                	0xc7f
    185e:	014d                	addi	sp,sp,19
    1860:	0000                	unimp
    1862:	3001                	jal	1062 <main+0x52>
    1864:	4119                	li	sp,6
    1866:	0000                	unimp
    1868:	0300                	addi	s0,sp,384
    186a:	9691                	srai	a3,a3,0x24
    186c:	0c7f                	0xc7f
    186e:	00000153          	fadd.s	ft2,ft0,ft0,rne
    1872:	3101                	jal	1472 <main+0x462>
    1874:	4119                	li	sp,6
    1876:	0000                	unimp
    1878:	0300                	addi	s0,sp,384
    187a:	9491                	srai	s1,s1,0x24
                && (results[i].crclist != list_known_crc[known_id]))
    187c:	0c7f                	0xc7f
    187e:	07fd                	addi	a5,a5,31
    1880:	0000                	unimp
    1882:	3201                	jal	1182 <main+0x172>
    1884:	4119                	li	sp,6
    1886:	0000                	unimp
    1888:	0300                	addi	s0,sp,384
    188a:	9291                	srli	a3,a3,0x24
    188c:	0f7f                	0xf7f
    188e:	00637263          	bgeu	t1,t1,1892 <main+0x882>
    1892:	3301                	jal	1592 <main+0x582>
    1894:	5419                	li	s0,-26
    1896:	0000                	unimp
    1898:	0300                	addi	s0,sp,384
    189a:	9091                	srli	s1,s1,0x24
    189c:	0a7f                	0xa7f
    189e:	00000703          	lb	a4,0(zero) # 0 <RAM_START_ADDRESS>
    18a2:	3501                	jal	16a2 <main+0x692>
    18a4:	440c                	lw	a1,8(s0)
    18a6:	02000003          	lb	zero,32(zero) # 20 <_start+0x10>
    18aa:	4491                	li	s1,4
    18ac:	2c0a                	fld	fs8,128(sp)
    18ae:	01000007          	vle8ff.v	v0,(zero),v0.t
    18b2:	0c36                	slli	s8,s8,0xd
                ee_printf("[%u]ERROR! list crc 0x%04x - should be 0x%04x\n",
    18b4:	0344                	addi	s1,sp,388
    18b6:	0000                	unimp
                          results[i].crclist,
    18b8:	7fa49103          	lh	sp,2042(s1) # 47fa <iaddr+0x26e>
    18bc:	700d                	c.lui	zero,0xfffe3
    18be:	0100                	addi	s0,sp,128
    18c0:	00e60c37          	lui	s8,0xe60
    18c4:	0000                	unimp
    18c6:	7fa09103          	lh	sp,2042(ra) # 47fa <iaddr+0x26e>
    18ca:	690d                	lui	s2,0x3
    18cc:	0100                	addi	s0,sp,128
    18ce:	0c38                	addi	a4,sp,536
    18d0:	0081                	addi	ra,ra,0
    18d2:	0000                	unimp
    18d4:	9102                	jalr	sp
    18d6:	116c                	addi	a1,sp,172
                ee_printf("[%u]ERROR! list crc 0x%04x - should be 0x%04x\n",
    18d8:	2da0                	fld	fs0,88(a1)
    18da:	0000                	unimp
                          list_known_crc[known_id]);
    18dc:	0044                	addi	s1,sp,4
    18de:	0000                	unimp
    18e0:	032a                	slli	t1,t1,0xa
    18e2:	0000                	unimp
    18e4:	720a                	flw	ft4,160(sp)
    18e6:	01000007          	vle8ff.v	v0,(zero),v0.t
    18ea:	1944                	addi	s1,sp,180
    18ec:	008d                	addi	ra,ra,3
    18ee:	0000                	unimp
                ee_printf("[%u]ERROR! list crc 0x%04x - should be 0x%04x\n",
    18f0:	9102                	jalr	sp
    18f2:	0064                	addi	s1,sp,12
    18f4:	5c12                	lw	s8,36(sp)
    18f6:	002e                	c.slli	zero,0xb
    18f8:	4400                	lw	s0,8(s0)
    18fa:	0000                	unimp
    18fc:	0a00                	addi	s0,sp,272
    18fe:	0772                	slli	a4,a4,0x1c
                results[i].err++;
    1900:	0000                	unimp
    1902:	5801                	li	a6,-32
    1904:	8d19                	sub	a0,a0,a4
    1906:	0000                	unimp
    1908:	0200                	addi	s0,sp,256
    190a:	6891                	lui	a7,0x4
    190c:	0000                	unimp
    190e:	00008113          	mv	sp,ra
    1912:	0800                	addi	s0,sp,16
    1914:	002c                	addi	a1,sp,8
    1916:	0000                	unimp
    1918:	43000007          	vlseg3e8ff.v	v0,(zero)
    191c:	0002                	c.slli64	zero
    191e:	0400                	addi	s0,sp,512
    1920:	e100                	fsw	fs0,0(a0)
    1922:	0006                	c.slli	zero,0x1
    1924:	0400                	addi	s0,sp,512
    1926:	d301                	beqz	a4,1826 <main+0x816>
    1928:	0002                	c.slli64	zero
    192a:	0c00                	addi	s0,sp,528
    192c:	0816                	slli	a6,a6,0x5
    192e:	0000                	unimp
    1930:	00000027          	vse8.v	v0,(zero),v0.t
    1934:	3600                	fld	fs0,40(a2)
    1936:	0000                	unimp
    1938:	032c                	addi	a1,sp,392
    193a:	0000                	unimp
    193c:	00002703          	lw	a4,0(zero) # 0 <RAM_START_ADDRESS>
    1940:	0402                	c.slli64	s0
    1942:	6905                	lui	s2,0x1
    1944:	746e                	flw	fs0,248(sp)
    1946:	0300                	addi	s0,sp,384
    1948:	0704                	addi	s1,sp,896
    194a:	08ca                	slli	a7,a7,0x12
    194c:	0000                	unimp
    194e:	8d050803          	lb	a6,-1840(a0) # 18d0 <main+0x8c0>
    1952:	0001                	nop
    1954:	0300                	addi	s0,sp,384
    1956:	0410                	addi	a2,sp,512
            if ((results[i].execs & ID_MATRIX)
    1958:	11b8                	addi	a4,sp,232
    195a:	0000                	unimp
    195c:	b204                	fsd	fs1,32(a2)
    195e:	0002                	c.slli64	zero
    1960:	0200                	addi	s0,sp,256
    1962:	185f 004d 0000      	0x4d185f
    1968:	85050203          	lb	tp,-1968(a0)
    196c:	0000                	unimp
    196e:	0400                	addi	s0,sp,512
    1970:	01f6                	slli	gp,gp,0x1d
    1972:	0000                	unimp
    1974:	6002                	flw	ft0,0(sp)
    1976:	6018                	flw	fa4,0(s0)
    1978:	0000                	unimp
    197a:	0300                	addi	s0,sp,384
    197c:	0702                	c.slli64	a4
    197e:	025a                	slli	tp,tp,0x16
                && (results[i].crcmatrix != matrix_known_crc[known_id]))
    1980:	0000                	unimp
    1982:	ce04                	sw	s1,24(a2)
    1984:	0000                	unimp
    1986:	0200                	addi	s0,sp,256
    1988:	1861                	addi	a6,a6,-8
    198a:	0025                	c.nop	9
    198c:	0000                	unimp
    198e:	6705                	lui	a4,0x1
    1990:	0000                	unimp
    1992:	0300                	addi	s0,sp,384
    1994:	0408                	addi	a0,sp,512
    1996:	11bd                	addi	gp,gp,-17
    1998:	0000                	unimp
    199a:	b104                	fsd	fs1,32(a0)
    199c:	0000                	unimp
    199e:	0200                	addi	s0,sp,256
    19a0:	008b1863          	bne	s6,s0,19b0 <main+0x9a0>
    19a4:	0000                	unimp
    19a6:	11080103          	lb	sp,272(a6)
    19aa:	0002                	c.slli64	zero
    19ac:	0400                	addi	s0,sp,512
    19ae:	0398                	addi	a4,sp,448
    19b0:	0000                	unimp
    19b2:	6402                	flw	fs0,0(sp)
    19b4:	2c18                	fld	fa4,24(s0)
    19b6:	0000                	unimp
                ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n",
    19b8:	0600                	addi	s0,sp,768
    19ba:	0694                	addi	a3,sp,832
                          results[i].crcmatrix,
    19bc:	0000                	unimp
    19be:	2501                	jal	1fbe <core_bench_matrix+0x92>
    19c0:	7318                	flw	fa4,32(a4)
    19c2:	0000                	unimp
    19c4:	0600                	addi	s0,sp,768
    19c6:	067c                	addi	a5,sp,780
    19c8:	0000                	unimp
    19ca:	2601                	jal	1cca <main+0xcba>
    19cc:	7318                	flw	fa4,32(a4)
    19ce:	0000                	unimp
    19d0:	0600                	addi	s0,sp,768
    19d2:	000005f7          	0x5f7
    19d6:	2701                	jal	20d6 <matrix_test+0xf6>
    19d8:	7318                	flw	fa4,32(a4)
    19da:	0000                	unimp
                ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n",
    19dc:	0600                	addi	s0,sp,768
    19de:	0654                	addi	a3,sp,772
                          matrix_known_crc[known_id]);
    19e0:	0000                	unimp
    19e2:	2801                	jal	19f2 <main+0x9e2>
    19e4:	7318                	flw	fa4,32(a4)
    19e6:	0000                	unimp
    19e8:	0600                	addi	s0,sp,768
    19ea:	000006a3          	sb	zero,13(zero) # d <RAM_START_ADDRESS+0xd>
    19ee:	2901                	jal	1dfe <main+0xdee>
    19f0:	7318                	flw	fa4,32(a4)
    19f2:	0000                	unimp
                ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n",
    19f4:	0700                	addi	s0,sp,896
    19f6:	085a                	slli	a6,a6,0x16
    19f8:	0000                	unimp
    19fa:	d201                	beqz	a2,18fa <main+0x8ea>
    19fc:	7f01                	lui	t5,0xfffe0
    19fe:	0000                	unimp
    1a00:	ec00                	fsw	fs0,24(s0)
    1a02:	0038                	addi	a4,sp,8
                results[i].err++;
    1a04:	4000                	lw	s0,0(s0)
    1a06:	0000                	unimp
    1a08:	0100                	addi	s0,sp,128
    1a0a:	049c                	addi	a5,sp,576
    1a0c:	0001                	nop
    1a0e:	0800                	addi	s0,sp,16
    1a10:	00e8                	addi	a0,sp,76
    1a12:	0000                	unimp
    1a14:	d401                	beqz	s0,191c <main+0x90c>
    1a16:	00007f0b          	0x7f0b
    1a1a:	0200                	addi	s0,sp,256
    1a1c:	6f91                	lui	t6,0x4
    1a1e:	0700                	addi	s0,sp,896
    1a20:	0000086b          	0x86b
    1a24:	cc01                	beqz	s0,1a3c <main+0xa2c>
    1a26:	5401                	li	s0,-32
    1a28:	0000                	unimp
    1a2a:	9c00                	0x9c00
    1a2c:	0038                	addi	a4,sp,8
    1a2e:	5000                	lw	s0,32(s0)
    1a30:	0000                	unimp
    1a32:	0100                	addi	s0,sp,128
    1a34:	3d9c                	fld	fa5,56(a1)
    1a36:	0001                	nop
    1a38:	0900                	addi	s0,sp,144
    1a3a:	084d                	addi	a6,a6,19
    1a3c:	0000                	unimp
    1a3e:	cc01                	beqz	s0,1a56 <main+0xa46>
    1a40:	410e                	lw	sp,192(sp)
    1a42:	0000                	unimp
    1a44:	0200                	addi	s0,sp,256
    1a46:	6e91                	lui	t4,0x4
    1a48:	630a                	flw	ft6,128(sp)
    1a4a:	6372                	flw	ft6,28(sp)
    1a4c:	0100                	addi	s0,sp,128
    1a4e:	1dcc                	addi	a1,sp,756
    1a50:	0054                	addi	a3,sp,4
    1a52:	0000                	unimp
    1a54:	9102                	jalr	sp
    1a56:	006c                	addi	a1,sp,12
    1a58:	00080907          	vle8.v	v18,(a6),v0.t
            if ((results[i].execs & ID_STATE)
    1a5c:	0100                	addi	s0,sp,128
    1a5e:	01c5                	addi	gp,gp,17
    1a60:	0054                	addi	a3,sp,4
    1a62:	0000                	unimp
    1a64:	381c                	fld	fa5,48(s0)
    1a66:	0000                	unimp
    1a68:	0080                	addi	s0,sp,64
    1a6a:	0000                	unimp
    1a6c:	9c01                	0x9c01
    1a6e:	0176                	slli	sp,sp,0x1d
    1a70:	0000                	unimp
    1a72:	4d09                	li	s10,2
    1a74:	0008                	0x8
    1a76:	0100                	addi	s0,sp,128
    1a78:	0fc5                	addi	t6,t6,17
    1a7a:	0092                	slli	ra,ra,0x4
    1a7c:	0000                	unimp
    1a7e:	9102                	jalr	sp
    1a80:	0a6c                	addi	a1,sp,284
    1a82:	00637263          	bgeu	t1,t1,1a86 <main+0xa76>
                && (results[i].crcstate != state_known_crc[known_id]))
    1a86:	c501                	beqz	a0,1a8e <main+0xa7e>
    1a88:	541e                	lw	s0,228(sp)
    1a8a:	0000                	unimp
    1a8c:	0200                	addi	s0,sp,256
    1a8e:	6a91                	lui	s5,0x4
    1a90:	0700                	addi	s0,sp,896
    1a92:	0802                	c.slli64	a6
    1a94:	0000                	unimp
    1a96:	be01                	j	15a6 <main+0x596>
    1a98:	5401                	li	s0,-32
    1a9a:	0000                	unimp
    1a9c:	9400                	0x9400
    1a9e:	88000037          	lui	zero,0x88000
    1aa2:	0000                	unimp
    1aa4:	0100                	addi	s0,sp,128
    1aa6:	af9c                	fsd	fa5,24(a5)
    1aa8:	0001                	nop
    1aaa:	0900                	addi	s0,sp,144
    1aac:	084d                	addi	a6,a6,19
    1aae:	0000                	unimp
    1ab0:	be01                	j	15c0 <main+0x5b0>
    1ab2:	0000540f          	0x540f
    1ab6:	0200                	addi	s0,sp,256
    1ab8:	6e91                	lui	t4,0x4
    1aba:	630a                	flw	ft6,128(sp)
                ee_printf("[%u]ERROR! state crc 0x%04x - should be 0x%04x\n",
    1abc:	6372                	flw	ft6,28(sp)
    1abe:	0100                	addi	s0,sp,128
                          results[i].crcstate,
    1ac0:	1ebe                	slli	t4,t4,0x2f
    1ac2:	0054                	addi	a3,sp,4
    1ac4:	0000                	unimp
    1ac6:	9102                	jalr	sp
    1ac8:	006c                	addi	a1,sp,12
    1aca:	0008540b          	0x8540b
    1ace:	0100                	addi	s0,sp,128
    1ad0:	01a5                	addi	gp,gp,9
    1ad2:	0054                	addi	a3,sp,4
    1ad4:	0000                	unimp
    1ad6:	3694                	fld	fa3,40(a3)
    1ad8:	0000                	unimp
    1ada:	0100                	addi	s0,sp,128
    1adc:	0000                	unimp
    1ade:	9c01                	0x9c01
                ee_printf("[%u]ERROR! state crc 0x%04x - should be 0x%04x\n",
    1ae0:	00000213          	li	tp,0
                          state_known_crc[known_id]);
    1ae4:	3e09                	jal	15f6 <main+0x5e6>
    1ae6:	0002                	c.slli64	zero
    1ae8:	0100                	addi	s0,sp,128
    1aea:	0da5                	addi	s11,s11,9
    1aec:	007f                	0x7f
    1aee:	0000                	unimp
    1af0:	9102                	jalr	sp
    1af2:	0a5f 7263 0063      	0x6372630a5f
                ee_printf("[%u]ERROR! state crc 0x%04x - should be 0x%04x\n",
    1af8:	a501                	j	20f8 <matrix_test+0x118>
    1afa:	541a                	lw	s0,164(sp)
    1afc:	0000                	unimp
    1afe:	0200                	addi	s0,sp,256
    1b00:	5c91                	li	s9,-28
    1b02:	690c                	flw	fa1,16(a0)
    1b04:	0100                	addi	s0,sp,128
    1b06:	007f0ba7          	0x7f0ba7
                results[i].err++;
    1b0a:	0000                	unimp
    1b0c:	9102                	jalr	sp
    1b0e:	31780c6f          	jal	s8,82624 <RAM_SIZE+0x72624>
    1b12:	0036                	c.slli	zero,0xd
    1b14:	a701                	j	2214 <core_init_matrix+0x80>
    1b16:	7f12                	flw	ft10,36(sp)
    1b18:	0000                	unimp
    1b1a:	0200                	addi	s0,sp,256
    1b1c:	6d91                	lui	s11,0x4
    1b1e:	1008                	addi	a0,sp,32
    1b20:	0008                	0x8
    1b22:	0100                	addi	s0,sp,128
    1b24:	007f1ba7          	fsh	ft7,23(t5) # fffe0017 <RAM_SIZE+0xfffd0017>
    1b28:	0000                	unimp
    1b2a:	9102                	jalr	sp
    1b2c:	006e                	c.slli	zero,0x1b
    1b2e:	410d                	li	sp,3
    1b30:	0008                	0x8
    1b32:	0100                	addi	s0,sp,128
    1b34:	0067012b          	0x67012b
    1b38:	0000                	unimp
    1b3a:	3600                	fld	fs0,40(a2)
    1b3c:	0000                	unimp
    1b3e:	0094                	addi	a3,sp,64
    1b40:	0000                	unimp
    1b42:	9c01                	0x9c01
    1b44:	690a                	flw	fs2,128(sp)
    1b46:	0100                	addi	s0,sp,128
    1b48:	0025112b          	0x25112b
    1b4c:	0000                	unimp
    1b4e:	9102                	jalr	sp
    1b50:	085c                	addi	a5,sp,20
    1b52:	00e8                	addi	a0,sp,76
    1b54:	0000                	unimp
    1b56:	2d01                	jal	2166 <matrix_test+0x186>
    1b58:	670c                	flw	fa1,8(a4)
    1b5a:	0000                	unimp
    1b5c:	0200                	addi	s0,sp,256
    1b5e:	6c91                	lui	s9,0x4
            total_errors += results[i].err;
    1b60:	0000                	unimp
    1b62:	02e5                	addi	t0,t0,25
    1b64:	0000                	unimp
    1b66:	0004                	0x4
    1b68:	07d0                	addi	a2,sp,964
    1b6a:	0000                	unimp
    1b6c:	0104                	addi	s1,sp,128
    1b6e:	000002d3          	fadd.s	ft5,ft0,ft0,rne
    1b72:	770c                	flw	fa1,40(a4)
    1b74:	0008                	0x8
    1b76:	2700                	fld	fs0,8(a4)
    1b78:	0000                	unimp
    1b7a:	2c00                	fld	fs0,24(s0)
    1b7c:	0039                	c.nop	14
    1b7e:	1400                	addi	s0,sp,544
    1b80:	0006                	c.slli	zero,0x1
    1b82:	2a00                	fld	fs0,16(a2)
    1b84:	0029                	c.nop	10
    1b86:	0200                	addi	s0,sp,256
    1b88:	0504                	addi	s1,sp,640
    1b8a:	6e69                	lui	t3,0x1a
    1b8c:	0074                	addi	a3,sp,12
    1b8e:	ca070403          	lb	s0,-864(a4) # ca0 <core_list_reverse+0x4>
    1b92:	0008                	0x8
    1b94:	0300                	addi	s0,sp,384
    1b96:	0508                	addi	a0,sp,640
    1b98:	018d                	addi	gp,gp,3
    1b9a:	0000                	unimp
        for (i = 0; i < default_num_contexts; i++)
    1b9c:	b8041003          	lh	zero,-1152(s0)
    1ba0:	0011                	c.nop	4
    1ba2:	0300                	addi	s0,sp,384
    1ba4:	0601                	addi	a2,a2,0
    1ba6:	00000213          	li	tp,0
    1baa:	11080103          	lb	sp,272(a6)
    1bae:	0002                	c.slli64	zero
    1bb0:	0300                	addi	s0,sp,384
    1bb2:	0502                	c.slli64	a0
    1bb4:	0085                	addi	ra,ra,1
    1bb6:	0000                	unimp
    total_errors += check_data_types();
    1bb8:	5a070203          	lb	tp,1440(a4)
    1bbc:	0002                	c.slli64	zero
    1bbe:	0300                	addi	s0,sp,384
    1bc0:	0504                	addi	s1,sp,640
    1bc2:	0192                	slli	gp,gp,0x4
    1bc4:	0000                	unimp
    1bc6:	c5070403          	lb	s0,-944(a4)
    1bca:	0008                	0x8
    1bcc:	0300                	addi	s0,sp,384
    1bce:	0708                	addi	a0,sp,896
    1bd0:	08c0                	addi	s0,sp,84
    1bd2:	0000                	unimp
    1bd4:	0404                	addi	s1,sp,512
    1bd6:	0078                	addi	a4,sp,12
    1bd8:	0000                	unimp
    1bda:	1a080103          	lb	sp,416(a6)
    ee_printf("CoreMark Size    : %lu\n", (long unsigned)results[0].size);
    1bde:	0002                	c.slli64	zero
    1be0:	0300                	addi	s0,sp,384
    1be2:	0404                	addi	s1,sp,512
    1be4:	11de                	slli	gp,gp,0x37
    1be6:	0000                	unimp
    1be8:	bd040803          	lb	a6,-1072(s0)
    1bec:	0011                	c.nop	4
    1bee:	0500                	addi	s0,sp,640
    ee_printf("Total ticks      : %lu\n", (long unsigned)total_time);
    1bf0:	0078                	addi	a4,sp,12
    1bf2:	0000                	unimp
    1bf4:	009d                	addi	ra,ra,7
    1bf6:	0000                	unimp
    1bf8:	2c06                	fld	fs8,64(sp)
    1bfa:	0000                	unimp
    1bfc:	4f00                	lw	s0,24(a4)
    1bfe:	0700                	addi	s0,sp,896
    ee_printf("Total time (secs): %d\n", time_in_secs(total_time));
    1c00:	08b1                	addi	a7,a7,12
    1c02:	0000                	unimp
    1c04:	1201                	addi	tp,tp,-32
    1c06:	8d0d                	sub	a0,a0,a1
    1c08:	0000                	unimp
    1c0a:	0500                	addi	s0,sp,640
    1c0c:	0084b403          	0x84b403
    1c10:	0800                	addi	s0,sp,16
    1c12:	089c                	addi	a5,sp,80
    1c14:	0000                	unimp
    1c16:	7c01                	lui	s8,0xfffe0
    1c18:	7201                	lui	tp,0xfffe0
    1c1a:	0000                	unimp
    if (time_in_secs(total_time) > 0)
    1c1c:	e000                	fsw	fs0,0(s0)
    1c1e:	003e                	c.slli	zero,0xf
    1c20:	6000                	flw	fs0,0(s0)
    1c22:	0000                	unimp
    1c24:	0100                	addi	s0,sp,128
    1c26:	159c                	addi	a5,sp,736
    1c28:	0001                	nop
    1c2a:	0900                	addi	s0,sp,144
                  default_num_contexts * results[0].iterations
    1c2c:	7261                	lui	tp,0xffff8
    1c2e:	7c010067          	jr	1984(sp) # 9fbe <__heap_end+0x12ae>
    1c32:	8610                	0x8610
    1c34:	0000                	unimp
    1c36:	0200                	addi	s0,sp,256
    1c38:	6891                	lui	a7,0x4
    1c3a:	b80a                	fsd	ft2,48(sp)
    1c3c:	0008                	0x8
    1c3e:	0100                	addi	s0,sp,128
    1c40:	197c                	addi	a5,sp,188
    1c42:	0025                	c.nop	9
    1c44:	0000                	unimp
    1c46:	9102                	jalr	sp
    1c48:	0a64                	addi	s1,sp,284
    1c4a:	0871                	addi	a6,a6,28
                      / time_in_secs(total_time));
    1c4c:	0000                	unimp
    1c4e:	7c01                	lui	s8,0xfffe0
    1c50:	00011527          	fsh	ft0,10(sp)
    1c54:	0200                	addi	s0,sp,256
    1c56:	6091                	lui	ra,0x4
        ee_printf("Iterations/Sec   : %d\n",
    1c58:	e20a                	fsw	ft2,4(sp)
    1c5a:	0008                	0x8
    1c5c:	0100                	addi	s0,sp,128
    1c5e:	337c                	fld	fa5,224(a4)
    1c60:	0115                	addi	sp,sp,5
    1c62:	0000                	unimp
    1c64:	9102                	jalr	sp
    1c66:	095c                	addi	a5,sp,148
    1c68:	7562                	flw	fa0,56(sp)
    1c6a:	0066                	c.slli	zero,0x19
    1c6c:	7c01                	lui	s8,0xfffe0
    1c6e:	0000723f 58910200 	0x589102000000723f
    1c76:	0400                	addi	s0,sp,512
    if (time_in_secs(total_time) < 10)
    1c78:	2504                	fld	fs1,8(a0)
    1c7a:	0000                	unimp
    1c7c:	0800                	addi	s0,sp,16
    1c7e:	08dd                	addi	a7,a7,23
    1c80:	0000                	unimp
    1c82:	7601                	lui	a2,0xfffe0
    1c84:	7201                	lui	tp,0xfffe0
    1c86:	0000                	unimp
    1c88:	8400                	0x8400
    1c8a:	003e                	c.slli	zero,0xf
        ee_printf(
    1c8c:	5c00                	lw	s0,56(s0)
    1c8e:	0000                	unimp
    1c90:	0100                	addi	s0,sp,128
    1c92:	729c                	flw	fa5,32(a3)
    1c94:	0001                	nop
    1c96:	0900                	addi	s0,sp,144
        total_errors++;
    1c98:	7261                	lui	tp,0xffff8
    1c9a:	76010067          	jr	1888(sp)
    1c9e:	860d                	srai	a2,a2,0x3
    1ca0:	0000                	unimp
    1ca2:	0200                	addi	s0,sp,256
    1ca4:	6891                	lui	a7,0x4
    1ca6:	b80a                	fsd	ft2,48(sp)
    1ca8:	0008                	0x8
    1caa:	0100                	addi	s0,sp,128
    1cac:	1676                	slli	a2,a2,0x3d
    1cae:	0025                	c.nop	9
    1cb0:	0000                	unimp
    1cb2:	9102                	jalr	sp
              (long unsigned)default_num_contexts * results[0].iterations);
    1cb4:	0a64                	addi	s1,sp,284
    1cb6:	0871                	addi	a6,a6,28
    1cb8:	0000                	unimp
    1cba:	7601                	lui	a2,0xfffe0
    1cbc:	1524                	addi	s1,sp,680
    1cbe:	0001                	nop
    ee_printf("Iterations       : %lu\n",
    1cc0:	0200                	addi	s0,sp,256
    1cc2:	6091                	lui	ra,0x4
    1cc4:	e20a                	fsw	ft2,4(sp)
    1cc6:	0008                	0x8
    1cc8:	0100                	addi	s0,sp,128
    1cca:	3076                	fld	ft0,376(sp)
    1ccc:	0115                	addi	sp,sp,5
    1cce:	0000                	unimp
    1cd0:	9102                	jalr	sp
    1cd2:	005c                	addi	a5,sp,4
    1cd4:	a408                	fsd	fa0,8(s0)
    1cd6:	0008                	0x8
    1cd8:	0100                	addi	s0,sp,128
    1cda:	0170                	addi	a2,sp,140
    1cdc:	0072                	c.slli	zero,0x1c
    1cde:	0000                	unimp
    ee_printf("Compiler version : %s\n", COMPILER_VERSION);
    1ce0:	3e24                	fld	fs1,120(a2)
    1ce2:	0000                	unimp
    1ce4:	0060                	addi	s0,sp,12
    1ce6:	0000                	unimp
    1ce8:	9c01                	0x9c01
    1cea:	01d8                	addi	a4,sp,196
    1cec:	0000                	unimp
    1cee:	6109                	addi	sp,sp,128
    1cf0:	6772                	flw	fa4,28(sp)
    1cf2:	0100                	addi	s0,sp,128
    ee_printf("Compiler flags   : %s\n", COMPILER_FLAGS);
    1cf4:	1070                	addi	a2,sp,44
    1cf6:	0086                	slli	ra,ra,0x1
    1cf8:	0000                	unimp
    1cfa:	9102                	jalr	sp
    1cfc:	0a68                	addi	a0,sp,284
    1cfe:	08b8                	addi	a4,sp,88
    1d00:	0000                	unimp
    1d02:	7001                	c.lui	zero,0xfffe0
    1d04:	2519                	jal	230a <core_init_matrix+0x176>
    1d06:	0000                	unimp
    ee_printf("Memory location  : %s\n", MEM_LOCATION);
    1d08:	0200                	addi	s0,sp,256
    1d0a:	6491                	lui	s1,0x4
    1d0c:	710a                	flw	ft2,160(sp)
    1d0e:	0008                	0x8
    1d10:	0100                	addi	s0,sp,128
    1d12:	2770                	fld	fa2,200(a4)
    1d14:	0115                	addi	sp,sp,5
    1d16:	0000                	unimp
    1d18:	9102                	jalr	sp
    1d1a:	0a60                	addi	s0,sp,284
    ee_printf("seedcrc          : 0x%04x\n", seedcrc);
    1d1c:	08e2                	slli	a7,a7,0x18
    1d1e:	0000                	unimp
    1d20:	7001                	c.lui	zero,0xfffe0
    1d22:	00011533          	sll	a0,sp,zero
    1d26:	0200                	addi	s0,sp,256
    1d28:	5c91                	li	s9,-28
    1d2a:	6209                	lui	tp,0x2
    1d2c:	6675                	lui	a2,0x1d
    1d2e:	0100                	addi	s0,sp,128
    if (results[0].execs & ID_LIST)
    1d30:	3f70                	fld	fa2,248(a4)
    1d32:	0072                	c.slli	zero,0x1c
    1d34:	0000                	unimp
    1d36:	9102                	jalr	sp
    1d38:	0058                	addi	a4,sp,4
    1d3a:	ac08                	fsd	fa0,24(s0)
        for (i = 0; i < default_num_contexts; i++)
    1d3c:	0008                	0x8
    1d3e:	0100                	addi	s0,sp,128
    1d40:	016a                	slli	sp,sp,0x1a
    1d42:	0072                	c.slli	zero,0x1c
            ee_printf("[%d]crclist       : 0x%04x\n", i, results[i].crclist);
    1d44:	0000                	unimp
    1d46:	3dc8                	fld	fa0,184(a1)
    1d48:	0000                	unimp
    1d4a:	005c                	addi	a5,sp,4
    1d4c:	0000                	unimp
    1d4e:	9c01                	0x9c01
    1d50:	0000022f          	vamoaddei8.v	zero,(zero),v0,v4,v0.t
    1d54:	6109                	addi	sp,sp,128
    1d56:	6772                	flw	fa4,28(sp)
    1d58:	0100                	addi	s0,sp,128
    1d5a:	0d6a                	slli	s10,s10,0x1a
    1d5c:	0086                	slli	ra,ra,0x1
    1d5e:	0000                	unimp
    1d60:	9102                	jalr	sp
    1d62:	0a68                	addi	a0,sp,284
    1d64:	08b8                	addi	a4,sp,88
    1d66:	0000                	unimp
    1d68:	6a01                	0x6a01
    1d6a:	2516                	fld	fa0,320(sp)
    1d6c:	0000                	unimp
    1d6e:	0200                	addi	s0,sp,256
    1d70:	6491                	lui	s1,0x4
    1d72:	710a                	flw	ft2,160(sp)
    1d74:	0008                	0x8
    1d76:	0100                	addi	s0,sp,128
    1d78:	246a                	fld	fs0,152(sp)
    1d7a:	0115                	addi	sp,sp,5
        for (i = 0; i < default_num_contexts; i++)
    1d7c:	0000                	unimp
    1d7e:	9102                	jalr	sp
    1d80:	0a60                	addi	s0,sp,284
    1d82:	08e2                	slli	a7,a7,0x18
    1d84:	0000                	unimp
    1d86:	6a01                	0x6a01
    1d88:	1530                	addi	a2,sp,680
    1d8a:	0001                	nop
    1d8c:	0200                	addi	s0,sp,256
    1d8e:	5c91                	li	s9,-28
    1d90:	0b00                	addi	s0,sp,400
    1d92:	00747663          	bgeu	s0,t2,1d9e <main+0xd8e>
    1d96:	1501                	addi	a0,a0,-32
    if (results[0].execs & ID_MATRIX)
    1d98:	7201                	lui	tp,0xfffe0
    1d9a:	0000                	unimp
    1d9c:	2c00                	fld	fs0,24(s0)
    1d9e:	0039                	c.nop	14
    1da0:	9c00                	0x9c00
    1da2:	0004                	0x4
        for (i = 0; i < default_num_contexts; i++)
    1da4:	0100                	addi	s0,sp,128
    1da6:	099c                	addi	a5,sp,208
    1da8:	7261                	lui	tp,0xffff8
    1daa:	15010067          	jr	336(sp)
            ee_printf("[%d]crcmatrix     : 0x%04x\n", i, results[i].crcmatrix);
    1dae:	860c                	0x860c
    1db0:	0000                	unimp
    1db2:	0200                	addi	s0,sp,256
    1db4:	4891                	li	a7,4
    1db6:	b80a                	fsd	ft2,48(sp)
    1db8:	0008                	0x8
    1dba:	0100                	addi	s0,sp,128
    1dbc:	1515                	addi	a0,a0,-27
    1dbe:	0025                	c.nop	9
    1dc0:	0000                	unimp
    1dc2:	9102                	jalr	sp
    1dc4:	0a44                	addi	s1,sp,276
    1dc6:	0871                	addi	a6,a6,28
    1dc8:	0000                	unimp
    1dca:	1501                	addi	a0,a0,-32
    1dcc:	00011523          	sh	zero,10(sp)
    1dd0:	0200                	addi	s0,sp,256
    1dd2:	4091                	li	ra,4
    1dd4:	e20a                	fsw	ft2,4(sp)
    1dd6:	0008                	0x8
    1dd8:	0100                	addi	s0,sp,128
    1dda:	2f15                	jal	250e <matrix_sum+0x11e>
    1ddc:	0115                	addi	sp,sp,5
    1dde:	0000                	unimp
    1de0:	7fbc9103          	lh	sp,2043(s9) # 47fb <iaddr+0x26f>
        for (i = 0; i < default_num_contexts; i++)
    1de4:	6209                	lui	tp,0x2
    1de6:	6675                	lui	a2,0x1d
    1de8:	0100                	addi	s0,sp,128
    1dea:	3b15                	jal	1b1e <main+0xb0e>
    1dec:	0072                	c.slli	zero,0x1c
    1dee:	0000                	unimp
    1df0:	7fb89103          	lh	sp,2043(a7) # 47fb <iaddr+0x26f>
    1df4:	d70a                	sw	sp,172(sp)
    1df6:	0008                	0x8
    1df8:	0100                	addi	s0,sp,128
    1dfa:	4415                	li	s0,5
    1dfc:	0025                	c.nop	9
    1dfe:	0000                	unimp
    if (results[0].execs & ID_STATE)
    1e00:	7fb49103          	lh	sp,2043(s1) # 47fb <iaddr+0x26f>
    1e04:	720c                	flw	fa1,32(a2)
    1e06:	0032                	c.slli	zero,0xc
    1e08:	1701                	addi	a4,a4,-32
    1e0a:	250c                	fld	fa1,8(a0)
        for (i = 0; i < default_num_contexts; i++)
    1e0c:	0000                	unimp
    1e0e:	0200                	addi	s0,sp,256
    1e10:	6c91                	lui	s9,0x4
    1e12:	660c                	flw	fa1,8(a2)
            ee_printf("[%d]crcstate      : 0x%04x\n", i, results[i].crcstate);
    1e14:	0069                	c.nop	26
    1e16:	1801                	addi	a6,a6,-32
    1e18:	860c                	0x860c
    1e1a:	0000                	unimp
    1e1c:	0200                	addi	s0,sp,256
    1e1e:	5891                	li	a7,-28
    1e20:	660c                	flw	fa1,8(a2)
    1e22:	006a                	c.slli	zero,0x1a
    1e24:	1801                	addi	a6,a6,-32
    1e26:	8610                	0x8610
    1e28:	0000                	unimp
    1e2a:	0200                	addi	s0,sp,256
    1e2c:	5091                	li	ra,-28
    1e2e:	700c                	flw	fa1,32(s0)
    1e30:	0100                	addi	s0,sp,128
    1e32:	0c19                	addi	s8,s8,6
    1e34:	0072                	c.slli	zero,0x1c
    1e36:	0000                	unimp
    1e38:	9102                	jalr	sp
    1e3a:	0c68                	addi	a0,sp,540
    1e3c:	3170                	fld	fa2,224(a0)
    1e3e:	0100                	addi	s0,sp,128
    1e40:	1019                	c.nop	-26
    1e42:	0072                	c.slli	zero,0x1c
    1e44:	0000                	unimp
    1e46:	9102                	jalr	sp
    1e48:	0064                	addi	s1,sp,12
    1e4a:	3200                	fld	fs0,32(a2)
        for (i = 0; i < default_num_contexts; i++)
    1e4c:	0005                	c.nop	1
    1e4e:	0400                	addi	s0,sp,512
    1e50:	9100                	0x9100
    1e52:	0008                	0x8
    1e54:	0400                	addi	s0,sp,512
    1e56:	d301                	beqz	a4,1d56 <main+0xd46>
    1e58:	0002                	c.slli64	zero
    1e5a:	0c00                	addi	s0,sp,528
    1e5c:	092a                	slli	s2,s2,0xa
    1e5e:	0000                	unimp
    1e60:	00000027          	vse8.v	v0,(zero),v0.t
    1e64:	3f40                	fld	fs0,184(a4)
    1e66:	0000                	unimp
    for (i = 0; i < default_num_contexts; i++)
    1e68:	0ffc                	addi	a5,sp,988
    1e6a:	0000                	unimp
    1e6c:	2c7d                	jal	212a <matrix_test+0x14a>
    1e6e:	0000                	unimp
        ee_printf("[%d]crcfinal      : 0x%04x\n", i, results[i].crc);
    1e70:	0402                	c.slli64	s0
    1e72:	6905                	lui	s2,0x1
    1e74:	746e                	flw	fs0,248(sp)
    1e76:	0300                	addi	s0,sp,384
    1e78:	0975                	addi	s2,s2,29
    1e7a:	0000                	unimp
    1e7c:	d102                	sw	zero,160(sp)
    1e7e:	00003817          	auipc	a6,0x3
    1e82:	0400                	addi	s0,sp,512
    1e84:	0704                	addi	s1,sp,896
    1e86:	08ca                	slli	a7,a7,0x12
    1e88:	0000                	unimp
    1e8a:	0804                	addi	s1,sp,16
    1e8c:	8d05                	sub	a0,a0,s1
    1e8e:	0001                	nop
    1e90:	0400                	addi	s0,sp,512
    1e92:	0410                	addi	a2,sp,512
    1e94:	11b8                	addi	a4,sp,232
    1e96:	0000                	unimp
    1e98:	0204                	addi	s1,sp,256
    1e9a:	8505                	srai	a0,a0,0x1
    1e9c:	0000                	unimp
    1e9e:	0400                	addi	s0,sp,512
    1ea0:	0702                	c.slli64	a4
    1ea2:	025a                	slli	tp,tp,0x16
    1ea4:	0000                	unimp
    1ea6:	0804                	addi	s1,sp,16
    for (i = 0; i < default_num_contexts; i++)
    1ea8:	bd04                	fsd	fs1,56(a0)
    1eaa:	0011                	c.nop	4
    1eac:	0400                	addi	s0,sp,512
    1eae:	0801                	addi	a6,a6,0
    1eb0:	0211                	addi	tp,tp,4
    1eb2:	0000                	unimp
    1eb4:	00097203          	0x97203
    1eb8:	0300                	addi	s0,sp,384
    1eba:	1866                	slli	a6,a6,0x39
    1ebc:	002c                	addi	a1,sp,8
    1ebe:	0000                	unimp
    1ec0:	00099003          	lh	zero,0(s3)
    if (total_errors == 0)
    1ec4:	0400                	addi	s0,sp,512
    1ec6:	1b28                	addi	a0,sp,440
    1ec8:	0081                	addi	ra,ra,0
    1eca:	0000                	unimp
        ee_printf(
    1ecc:	0405                	addi	s0,s0,1
    1ece:	0960                	addi	s0,sp,156
    1ed0:	0000                	unimp
    1ed2:	00099703          	lh	a4,0(s3)
    1ed6:	0400                	addi	s0,sp,512
    if (total_errors > 0)
    1ed8:	00751863          	bne	a0,t2,1ee8 <main+0xed8>
    1edc:	0000                	unimp
    1ede:	1d06                	slli	s10,s10,0x21
        ee_printf("Errors detected\n");
    1ee0:	0009                	c.nop	2
    1ee2:	0100                	addi	s0,sp,128
    1ee4:	121e                	slli	tp,tp,0x27
    1ee6:	00a5                	addi	ra,ra,9
    1ee8:	0000                	unimp
    1eea:	0305                	addi	t1,t1,1
    if (total_errors < 0)
    1eec:	7fd0                	flw	fa2,60(a5)
    1eee:	0000                	unimp
    1ef0:	00ab0407          	0xab0407
        ee_printf(
    1ef4:	0000                	unimp
    1ef6:	0104                	addi	s1,sp,128
    1ef8:	1a08                	addi	a0,sp,304
    1efa:	0002                	c.slli64	zero
    1efc:	0800                	addi	s0,sp,16
    1efe:	000000ab          	0xab
    portable_fini(&(results[0].port));
    1f02:	1706                	slli	a4,a4,0x21
    1f04:	0009                	c.nop	2
    1f06:	0100                	addi	s0,sp,128
    1f08:	121f 00a5 0000      	0xa5121f
    1f0e:	0305                	addi	t1,t1,1
    return MAIN_RETURN_VAL;
    1f10:	7fd4                	flw	fa3,60(a5)
    1f12:	0000                	unimp
}
    1f14:	ef09                	bnez	a4,1f2e <core_bench_matrix+0x2>
    1f16:	0008                	0x8
    1f18:	0100                	addi	s0,sp,128
    1f1a:	250102ab          	0x250102ab
    1f1e:	0000                	unimp
    1f20:	8400                	0x8400
    1f22:	004e                	c.slli	zero,0x13
    1f24:	b800                	fsd	fs0,48(s0)
    1f26:	0000                	unimp
    1f28:	0100                	addi	s0,sp,128
    1f2a:	359c                	fld	fa5,40(a1)
{
    1f2c:	0001                	nop
    1f2e:	0a00                	addi	s0,sp,272
    1f30:	6d66                	flw	fs10,88(sp)
    1f32:	0074                	addi	a3,sp,12
    1f34:	ab01                	j	2444 <matrix_sum+0x54>
    1f36:	1702                	slli	a4,a4,0x20
    1f38:	0135                	addi	sp,sp,13
    1f3a:	0000                	unimp
    1f3c:	77bc9103          	lh	sp,1915(s9) # 477b <iaddr+0x1ef>
    1f40:	75620c0b          	0x75620c0b
    1f44:	0066                	c.slli	zero,0x19
    1f46:	ad01                	j	2556 <matrix_mul_const+0x42>
    1f48:	0d02                	c.slli64	s10
    1f4a:	0000013b          	0x13b
    1f4e:	77c89103          	lh	sp,1916(a7)
    1f52:	700c                	flw	fa1,32(s0)
    ee_u32  N   = p->N;
    1f54:	0100                	addi	s0,sp,128
    1f56:	02ad                	addi	t0,t0,11
    1f58:	a519                	j	255e <matrix_mul_const+0x4a>
    1f5a:	0000                	unimp
    1f5c:	0200                	addi	s0,sp,256
    1f5e:	4c91                	li	s9,4
    MATRES *C   = p->C;
    1f60:	550d                	li	a0,-29
    1f62:	0009                	c.nop	2
    1f64:	0100                	addi	s0,sp,128
    1f66:	02ae                	slli	t0,t0,0xb
    1f68:	870d                	srai	a4,a4,0x3
    1f6a:	0000                	unimp
    MATDAT *A   = p->A;
    1f6c:	0300                	addi	s0,sp,384
    1f6e:	c491                	beqz	s1,1f7a <core_bench_matrix+0x4e>
    1f70:	006e0c77          	0x6e0c77
    1f74:	af01                	j	2684 <matrix_add_const+0x6c>
    1f76:	0d02                	c.slli64	s10
    MATDAT *B   = p->B;
    1f78:	0025                	c.nop	9
    1f7a:	0000                	unimp
    1f7c:	9102                	jalr	sp
    1f7e:	0048                	addi	a0,sp,4
    1f80:	00b20407          	0xb20407
    MATDAT  val = (MATDAT)seed;
    1f84:	0000                	unimp
    1f86:	ab0e                	fsd	ft3,400(sp)
    1f88:	0000                	unimp
    1f8a:	4c00                	lw	s0,24(s0)
    crc = crc16(matrix_test(N, C, A, B, val), crc);
    1f8c:	0001                	nop
    1f8e:	0f00                	addi	s0,sp,912
    1f90:	0038                	addi	a4,sp,8
    1f92:	0000                	unimp
    1f94:	03ff                	0x3ff
    1f96:	1000                	addi	s0,sp,32
    1f98:	000009ab          	0x9ab
    1f9c:	9701                	srai	a4,a4,0x20
    1f9e:	0102                	c.slli64	sp
    1fa0:	4e48                	lw	a0,28(a2)
    1fa2:	0000                	unimp
    1fa4:	003c                	addi	a5,sp,8
    1fa6:	0000                	unimp
    1fa8:	9c01                	0x9c01
    1faa:	0182                	c.slli64	gp
    1fac:	0000                	unimp
    1fae:	630a                	flw	ft6,128(sp)
    1fb0:	0100                	addi	s0,sp,128
    1fb2:	ab150297          	auipc	t0,0xab150
    1fb6:	0000                	unimp
    1fb8:	0200                	addi	s0,sp,256
    1fba:	5f91                	li	t6,-28
    1fbc:	0c0d                	addi	s8,s8,3
    1fbe:	0009                	c.nop	2
    1fc0:	0100                	addi	s0,sp,128
    1fc2:	0299                	addi	t0,t0,6
    1fc4:	a508                	fsd	fa0,8(a0)
    1fc6:	0000                	unimp
    return crc;
    1fc8:	0200                	addi	s0,sp,256
    1fca:	6c91                	lui	s9,0x4
}
    1fcc:	1100                	addi	s0,sp,160
    1fce:	099f 0000 cd01      	0xcd010000099f
    1fd4:	0101                	addi	sp,sp,0
    1fd6:	0025                	c.nop	9
    1fd8:	0000                	unimp
    1fda:	4844                	lw	s1,20(s0)
    1fdc:	0000                	unimp
    1fde:	0604                	addi	s1,sp,768
{
    1fe0:	0000                	unimp
    1fe2:	9c01                	0x9c01
    1fe4:	027a                	slli	tp,tp,0x1e
    1fe6:	0000                	unimp
    1fe8:	620a                	flw	ft4,128(sp)
    1fea:	6675                	lui	a2,0x1d
    1fec:	0100                	addi	s0,sp,128
    1fee:	01cd                	addi	gp,gp,19
    1ff0:	0000a513          	slti	a0,ra,0
    1ff4:	0300                	addi	s0,sp,384
    1ff6:	bc91                	j	1a4a <main+0xa3a>
    1ff8:	0a7f                	0xa7f
    1ffa:	6d66                	flw	fs10,88(sp)
    1ffc:	0074                	addi	a3,sp,12
    1ffe:	cd01                	beqz	a0,2016 <matrix_test+0x36>
    2000:	2401                	jal	2200 <core_init_matrix+0x6c>
    2002:	0135                	addi	sp,sp,13
    2004:	0000                	unimp
    2006:	7fb89103          	lh	sp,2043(a7)
    ee_u16 crc     = 0;
    200a:	5512                	lw	a0,36(sp)
    MATDAT clipval = matrix_big(val);
    200c:	0009                	c.nop	2
    200e:	0100                	addi	s0,sp,128
    2010:	01cd                	addi	gp,gp,19
    2012:	8731                	srai	a4,a4,0xc
    2014:	0000                	unimp
    2016:	0300                	addi	s0,sp,384
    2018:	b491                	j	1a5c <main+0xa4c>
    201a:	0c7f                	0xc7f
    matrix_add_const(N, A, val); /* make sure data changes  */
    201c:	656c                	flw	fa1,76(a0)
    201e:	006e                	c.slli	zero,0x1b
    2020:	cf01                	beqz	a4,2038 <matrix_test+0x58>
    2022:	1301                	addi	t1,t1,-32
    2024:	0025                	c.nop	9
    2026:	0000                	unimp
    2028:	9102                	jalr	sp
    202a:	0c48                	addi	a0,sp,532
    202c:	756e                	flw	fa0,248(sp)
    202e:	006d                	c.nop	27
    matrix_mul_const(N, C, A, val);
    2030:	d001                	beqz	s0,1f30 <core_bench_matrix+0x4>
    2032:	1301                	addi	t1,t1,-32
    2034:	027a                	slli	tp,tp,0x1e
    2036:	0000                	unimp
    2038:	9102                	jalr	sp
    203a:	0c6c                	addi	a1,sp,540
    203c:	0069                	c.nop	26
    203e:	d101                	beqz	a0,1f3e <core_bench_matrix+0x12>
    2040:	1301                	addi	t1,t1,-32
    2042:	0025                	c.nop	9
    2044:	0000                	unimp
    2046:	9102                	jalr	sp
    crc = crc16(matrix_sum(N, C, clipval), crc);
    2048:	0d68                	addi	a0,sp,668
    204a:	09c1                	addi	s3,s3,16
    204c:	0000                	unimp
    204e:	d101                	beqz	a0,1f4e <core_bench_matrix+0x22>
    2050:	1601                	addi	a2,a2,-32
    2052:	0025                	c.nop	9
    2054:	0000                	unimp
    2056:	9102                	jalr	sp
    2058:	0c64                	addi	s1,sp,540
    205a:	00727473          	csrrci	s0,0x7,4
    205e:	d201                	beqz	a2,1f5e <core_bench_matrix+0x32>
    2060:	1301                	addi	t1,t1,-32
    2062:	00a5                	addi	ra,ra,9
    2064:	0000                	unimp
    2066:	9102                	jalr	sp
    2068:	0c60                	addi	s0,sp,540
    206a:	d3010073          	0xd3010073
    206e:	1301                	addi	t1,t1,-32
    2070:	00a5                	addi	ra,ra,9
    2072:	0000                	unimp
    2074:	9102                	jalr	sp
    2076:	0d5c                	addi	a5,sp,660
    2078:	0924                	addi	s1,sp,152
    207a:	0000                	unimp
    matrix_mul_vect(N, C, A, B);
    207c:	d501                	beqz	a0,1f84 <core_bench_matrix+0x58>
    207e:	0901                	addi	s2,s2,0
    2080:	0025                	c.nop	9
    2082:	0000                	unimp
    2084:	9102                	jalr	sp
    2086:	0d58                	addi	a4,sp,660
    2088:	08f9                	addi	a7,a7,30
    208a:	0000                	unimp
    208c:	d701                	beqz	a4,1f94 <core_bench_matrix+0x68>
    208e:	0901                	addi	s2,s2,0
    crc = crc16(matrix_sum(N, C, clipval), crc);
    2090:	0025                	c.nop	9
    2092:	0000                	unimp
    2094:	9102                	jalr	sp
    2096:	0d54                	addi	a3,sp,660
    2098:	09c6                	slli	s3,s3,0x11
    209a:	0000                	unimp
    209c:	d801                	beqz	s0,1fac <core_bench_matrix+0x80>
    209e:	0901                	addi	s2,s2,0
    20a0:	0025                	c.nop	9
    20a2:	0000                	unimp
    20a4:	9102                	jalr	sp
    20a6:	0d50                	addi	a2,sp,660
    20a8:	097c                	addi	a5,sp,156
    20aa:	0000                	unimp
    20ac:	da01                	beqz	a2,1fbc <core_bench_matrix+0x90>
    20ae:	0901                	addi	s2,s2,0
    20b0:	0025                	c.nop	9
    20b2:	0000                	unimp
    20b4:	9102                	jalr	sp
    20b6:	134c                	addi	a1,sp,420
    20b8:	0905                	addi	s2,s2,1
    20ba:	0000                	unimp
    20bc:	e601                	bnez	a2,20c4 <matrix_test+0xe4>
    20be:	0501                	addi	a0,a0,0
    20c0:	489c                	lw	a5,16(s1)
    20c2:	0000                	unimp
    matrix_mul_matrix(N, C, A, B);
    20c4:	0400                	addi	s0,sp,512
    20c6:	0704                	addi	s1,sp,896
    20c8:	08c5                	addi	a7,a7,17
    20ca:	0000                	unimp
    20cc:	5a14                	lw	a3,48(a2)
    20ce:	0009                	c.nop	2
    20d0:	0100                	addi	s0,sp,128
    20d2:	01ac                	addi	a1,sp,200
    20d4:	00a5                	addi	ra,ra,9
    20d6:	0000                	unimp
    crc = crc16(matrix_sum(N, C, clipval), crc);
    20d8:	458c                	lw	a1,8(a1)
    20da:	0000                	unimp
    20dc:	02b8                	addi	a4,sp,328
    20de:	0000                	unimp
    20e0:	9c01                	0x9c01
    20e2:	0324                	addi	s1,sp,392
    20e4:	0000                	unimp
    20e6:	7315                	lui	t1,0xfffe5
    20e8:	7274                	flw	fa3,100(a2)
    20ea:	0100                	addi	s0,sp,128
    20ec:	0dac                	addi	a1,sp,728
    20ee:	00a5                	addi	ra,ra,9
    20f0:	0000                	unimp
    20f2:	7fbc9103          	lh	sp,2043(s9) # 47fb <iaddr+0x26f>
    20f6:	1216                	slli	tp,tp,0x25
    20f8:	0009                	c.nop	2
    20fa:	0100                	addi	s0,sp,128
    20fc:	21ac                	fld	fa1,64(a1)
    20fe:	0324                	addi	s1,sp,392
    2100:	0000                	unimp
    2102:	7fb89103          	lh	sp,2043(a7)
    2106:	5516                	lw	a0,100(sp)
    2108:	0002                	c.slli64	zero
    210a:	0100                	addi	s0,sp,128
    matrix_mul_matrix_bitextract(N, C, A, B);
    210c:	2bac                	fld	fa1,80(a5)
    210e:	0025                	c.nop	9
    2110:	0000                	unimp
    2112:	7fb49103          	lh	sp,2043(s1)
    2116:	c616                	sw	t0,12(sp)
    2118:	0009                	c.nop	2
    211a:	0100                	addi	s0,sp,128
    211c:	35ac                	fld	fa1,104(a1)
    211e:	0025                	c.nop	9
    crc = crc16(matrix_sum(N, C, clipval), crc);
    2120:	0000                	unimp
    2122:	7fb09103          	lh	sp,2043(ra) # 47fb <iaddr+0x26f>
    2126:	a816                	fsd	ft5,16(sp)
    2128:	000a                	c.slli	zero,0x2
    212a:	0100                	addi	s0,sp,128
    212c:	44ac                	lw	a1,72(s1)
    212e:	0025                	c.nop	9
    2130:	0000                	unimp
    2132:	7fac9103          	lh	sp,2042(s9)
    2136:	706d7417          	auipc	s0,0x706d7
    213a:	0100                	addi	s0,sp,128
    213c:	0aae                	slli	s5,s5,0xb
    213e:	032a                	slli	t1,t1,0xa
    2140:	0000                	unimp
    2142:	9102                	jalr	sp
    2144:	174c                	addi	a1,sp,932
    2146:	0069                	c.nop	26
    2148:	af01                	j	2858 <matrix_mul_matrix+0x30>
    214a:	250a                	fld	fa0,128(sp)
    214c:	0000                	unimp
    214e:	0200                	addi	s0,sp,256
    2150:	6c91                	lui	s9,0x4
    2152:	01006e17          	auipc	t3,0x1006
    matrix_add_const(N, A, -val); /* return matrix to initial value */
    2156:	00250daf          	vamoaddei8.v	zero,(a0),v2,v27,v0.t
    215a:	0000                	unimp
    215c:	9102                	jalr	sp
    215e:	1768                	addi	a0,sp,940
    2160:	656c                	flw	fa1,76(a0)
    2162:	006e                	c.slli	zero,0x1b
    2164:	af01                	j	2874 <matrix_mul_matrix+0x4c>
    2166:	2510                	fld	fa2,8(a0)
    2168:	0000                	unimp
    216a:	0200                	addi	s0,sp,256
    216c:	6491                	lui	s1,0x4
    216e:	0700                	addi	s0,sp,896
    2170:	6204                	flw	fs1,0(a2)
    2172:	0000                	unimp
    2174:	0e00                	addi	s0,sp,784
    2176:	000000ab          	0xab
    217a:	033a                	slli	t1,t1,0xe
    return crc;
    217c:	0000                	unimp
    217e:	3818                	fld	fa4,48(s0)
}
    2180:	0000                	unimp
    2182:	1700                	addi	s0,sp,928
    2184:	1900                	addi	s0,sp,176
    2186:	0911                	addi	s2,s2,4
    2188:	0000                	unimp
    218a:	8f01                	sub	a4,a4,s0
    218c:	a501                	j	278c <matrix_mul_vect+0x7c>
    218e:	0000                	unimp
    2190:	d400                	sw	s0,40(s0)
    2192:	b8000043          	fmadd.s	ft0,ft0,ft0,fs7,rne
{
    2196:	0001                	nop
    2198:	0100                	addi	s0,sp,128
    219a:	df9c                	sw	a5,56(a5)
    219c:	15000003          	lb	zero,336(zero) # 150 <calc_func+0x8c>
    21a0:	00727473          	csrrci	s0,0x7,4
    21a4:	8f01                	sub	a4,a4,s0
    21a6:	a50d                	j	27c8 <matrix_mul_vect+0xb8>
    21a8:	0000                	unimp
    21aa:	0300                	addi	s0,sp,384
    21ac:	bc91                	j	1c00 <main+0xbf0>
    21ae:	167f                	0x167f
    21b0:	0912                	slli	s2,s2,0x4
    21b2:	0000                	unimp
    ee_u32  N = 0;
    21b4:	8f01                	sub	a4,a4,s0
    21b6:	2421                	jal	23be <core_init_matrix+0x22a>
    ee_s32  order = 1;
    21b8:	03000003          	lb	zero,48(zero) # 30 <_start+0x20>
    21bc:	b891                	j	1a10 <main+0xa00>
    21be:	167f                	0x167f
    ee_u32  i = 0, j = 0;
    21c0:	0255                	addi	tp,tp,21
    21c2:	0000                	unimp
    21c4:	8f01                	sub	a4,a4,s0
    21c6:	0000252b          	0x252b
    if (seed == 0)
    21ca:	0300                	addi	s0,sp,384
    21cc:	b491                	j	1c10 <main+0xc00>
    21ce:	167f                	0x167f
        seed = 1;
    21d0:	09c6                	slli	s3,s3,0x11
    21d2:	0000                	unimp
    21d4:	8f01                	sub	a4,a4,s0
    21d6:	2535                	jal	2802 <STACK_SIZE+0x2>
    while (j < blksize)
    21d8:	0000                	unimp
    21da:	0300                	addi	s0,sp,384
        i++;
    21dc:	b091                	j	1a20 <main+0xa10>
    21de:	167f                	0x167f
    21e0:	0aa8                	addi	a0,sp,344
    21e2:	0000                	unimp
    21e4:	8f01                	sub	a4,a4,s0
    21e6:	2544                	fld	fs1,136(a0)
        j = i * i * 2 * 4;
    21e8:	0000                	unimp
    21ea:	0300                	addi	s0,sp,384
    21ec:	ac91                	j	2440 <matrix_sum+0x50>
    21ee:	177f                	0x177f
    21f0:	6d74                	flw	fa3,92(a0)
    21f2:	0070                	addi	a2,sp,12
    21f4:	9101                	srli	a0,a0,0x20
    21f6:	00032a0b          	0x32a0b
    21fa:	0200                	addi	s0,sp,256
    21fc:	4c91                	li	s9,4
    21fe:	67696417          	auipc	s0,0x67696
    while (j < blksize)
    2202:	0100                	addi	s0,sp,128
    2204:	0b92                	slli	s7,s7,0x4
    2206:	00a5                	addi	ra,ra,9
    2208:	0000                	unimp
    220a:	9102                	jalr	sp
    N = i - 1;
    220c:	176c                	addi	a1,sp,940
    220e:	0069                	c.nop	26
    2210:	9301                	srli	a4,a4,0x20
    2212:	0000250b          	0x250b
    2216:	0200                	addi	s0,sp,256
    A = (MATDAT *)align_mem(memblk);
    2218:	6891                	lui	a7,0x4
    221a:	6e656c17          	auipc	s8,0x6e656
    221e:	0100                	addi	s0,sp,128
    2220:	00250e93          	addi	t4,a0,2
    2224:	0000                	unimp
    2226:	9102                	jalr	sp
    2228:	0064                	addi	s1,sp,12
    222a:	ba14                	fsd	fa3,48(a2)
    B = A + N * N;
    222c:	0009                	c.nop	2
    222e:	0100                	addi	s0,sp,128
    2230:	0135                	addi	sp,sp,13
    2232:	00a5                	addi	ra,ra,9
    2234:	0000                	unimp
    2236:	4034                	lw	a3,64(s0)
    2238:	0000                	unimp
    223a:	03a0                	addi	s0,sp,456
    223c:	0000                	unimp
    223e:	9c01                	0x9c01
    2240:	04a2                	slli	s1,s1,0x8
    2242:	0000                	unimp
    2244:	7315                	lui	t1,0xfffe5
    2246:	7274                	flw	fa3,100(a2)
    2248:	0100                	addi	s0,sp,128
    224a:	0e35                	addi	t3,t3,13
    for (i = 0; i < N; i++)
    224c:	00a5                	addi	ra,ra,9
    224e:	0000                	unimp
    2250:	7f9c9103          	lh	sp,2041(s9) # 47f9 <iaddr+0x26d>
        for (j = 0; j < N; j++)
    2254:	6e15                	lui	t3,0x5
    2256:	6d75                	lui	s10,0x1d
    2258:	0100                	addi	s0,sp,128
    225a:	1835                	addi	a6,a6,-19
            seed         = ((order * seed) % 65536);
    225c:	04a2                	slli	s1,s1,0x8
    225e:	0000                	unimp
    2260:	7f989103          	lh	sp,2041(a7) # 47f9 <iaddr+0x26d>
    2264:	c116                	sw	t0,128(sp)
    2266:	0009                	c.nop	2
    2268:	0100                	addi	s0,sp,128
    226a:	2135                	jal	2696 <matrix_add_const+0x7e>
    226c:	0025                	c.nop	9
    226e:	0000                	unimp
    2270:	7f949103          	lh	sp,2041(s1) # 47f9 <iaddr+0x26d>
    2274:	5516                	lw	a0,100(sp)
    2276:	0002                	c.slli64	zero
    2278:	0100                	addi	s0,sp,128
    227a:	2b35                	jal	27b6 <matrix_mul_vect+0xa6>
    227c:	0025                	c.nop	9
    227e:	0000                	unimp
    2280:	7f909103          	lh	sp,2041(ra)
    2284:	c616                	sw	t0,12(sp)
    2286:	0009                	c.nop	2
    2288:	0100                	addi	s0,sp,128
    228a:	3535                	jal	20b6 <matrix_test+0xd6>
    228c:	0025                	c.nop	9
    228e:	0000                	unimp
            val          = (seed + order);
    2290:	7f8c9103          	lh	sp,2040(s9)
    2294:	a816                	fsd	ft5,16(sp)
    2296:	000a                	c.slli	zero,0x2
    2298:	0100                	addi	s0,sp,128
    229a:	4435                	li	s0,13
    229c:	0025                	c.nop	9
    229e:	0000                	unimp
    22a0:	7f889103          	lh	sp,2040(a7)
    22a4:	01006317          	auipc	t1,0x1006
    22a8:	00ab0b37          	lui	s6,0xab0
    22ac:	0000                	unimp
    22ae:	9102                	jalr	sp
    22b0:	08e20663          	beq	tp,a4,233c <core_init_matrix+0x1a8>
    22b4:	0000                	unimp
    22b6:	3701                	jal	21b6 <core_init_matrix+0x22>
            B[i * N + j] = val;
    22b8:	ab0e                	fsd	ft3,400(sp)
    22ba:	0000                	unimp
    22bc:	0200                	addi	s0,sp,256
    22be:	6f91                	lui	t6,0x4
    22c0:	706d7417          	auipc	s0,0x706d7
    22c4:	0100                	addi	s0,sp,128
    22c6:	04a91437          	lui	s0,0x4a91
    22ca:	0000                	unimp
    22cc:	7fa09103          	lh	sp,2042(ra)
    22d0:	67696417          	auipc	s0,0x67696
    22d4:	0100                	addi	s0,sp,128
    22d6:	0b38                	addi	a4,sp,408
    22d8:	00a5                	addi	ra,ra,9
    22da:	0000                	unimp
    22dc:	9102                	jalr	sp
    22de:	1768                	addi	a0,sp,940
    22e0:	0069                	c.nop	26
    22e2:	3901                	jal	1ef2 <main+0xee2>
    22e4:	0000250b          	0x250b
            val          = (val + order);
    22e8:	0200                	addi	s0,sp,256
    22ea:	6491                	lui	s1,0x4
    22ec:	0400                	addi	s0,sp,512
    22ee:	0504                	addi	s1,sp,640
    22f0:	0192                	slli	gp,gp,0x4
    22f2:	0000                	unimp
    22f4:	ab0e                	fsd	ft3,400(sp)
    22f6:	0000                	unimp
    22f8:	b900                	fsd	fs0,48(a0)
    22fa:	0004                	0x4
    22fc:	1800                	addi	s0,sp,48
    22fe:	0038                	addi	a4,sp,8
    2300:	0000                	unimp
    2302:	0041                	c.nop	16
    2304:	8619                	srai	a2,a2,0x6
    2306:	0009                	c.nop	2
            val          = matrix_clip(val, 1);
    2308:	0100                	addi	s0,sp,128
    230a:	012c                	addi	a1,sp,136
    230c:	0025                	c.nop	9
    230e:	0000                	unimp
    2310:	3fa4                	fld	fs1,120(a5)
    2312:	0000                	unimp
            A[i * N + j] = val;
    2314:	0090                	addi	a2,sp,64
    2316:	0000                	unimp
    2318:	9c01                	0x9c01
    231a:	04ee                	slli	s1,s1,0x1b
    231c:	0000                	unimp
    231e:	7315                	lui	t1,0xfffe5
    2320:	0100                	addi	s0,sp,128
    2322:	182c                	addi	a1,sp,56
    2324:	04ee                	slli	s1,s1,0x1b
    2326:	0000                	unimp
    2328:	9102                	jalr	sp
    232a:	175c                	addi	a5,sp,932
    232c:	0069                	c.nop	26
    232e:	2e01                	jal	263e <matrix_add_const+0x26>
    2330:	2509                	jal	2932 <matrix_mul_matrix+0x10a>
    2332:	0000                	unimp
    2334:	0200                	addi	s0,sp,256
    2336:	6c91                	lui	s9,0x4
    2338:	0700                	addi	s0,sp,896
    233a:	3504                	fld	fs1,40(a0)
    233c:	0001                	nop
    233e:	1a00                	addi	s0,sp,304
    2340:	000008e7          	jalr	a7,zero # 0 <RAM_START_ADDRESS>
            order++;
    2344:	2301                	jal	2844 <matrix_mul_matrix+0x1c>
    2346:	6901                	0x6901
    2348:	0000                	unimp
    234a:	4000                	lw	s0,0(s0)
    234c:	6400003f 01000000 	0x10000006400003f
        for (j = 0; j < N; j++)
    2354:	159c                	addi	a5,sp,736
    2356:	23010073          	0x23010073
    235a:	3515                	jal	217e <matrix_test+0x19e>
    235c:	0001                	nop
    235e:	0200                	addi	s0,sp,256
    2360:	5c91                	li	s9,-28
    2362:	4416                	lw	s0,68(sp)
    2364:	01000007          	vle8ff.v	v0,(zero),v0.t
    for (i = 0; i < N; i++)
    2368:	00692223          	sw	t1,4(s2) # 1004 <iterate+0x104>
    236c:	0000                	unimp
    236e:	9102                	jalr	sp
    2370:	1758                	addi	a4,sp,932
    2372:	01006373          	csrrsi	t1,0x10,0
    2376:	1125                	addi	sp,sp,-23
    2378:	0135                	addi	sp,sp,13
    237a:	0000                	unimp
    237c:	9102                	jalr	sp
    237e:	006c                	addi	a1,sp,12
    p->A = A;
    2380:	7d00                	flw	fs0,56(a0)
    2382:	0005                	c.nop	1
    2384:	0400                	addi	s0,sp,512
    2386:	4200                	lw	s0,0(a2)
    2388:	000a                	c.slli	zero,0x2
    238a:	0400                	addi	s0,sp,512
    p->B = B;
    238c:	ad01                	j	299c <matrix_mul_matrix+0x174>
    238e:	000a                	c.slli	zero,0x2
    2390:	0c00                	addi	s0,sp,528
    2392:	09d5                	addi	s3,s3,21
    2394:	0000                	unimp
    2396:	0a15                	addi	s4,s4,5
    p->C = (MATRES *)align_mem(B + N * N);
    2398:	0000                	unimp
    239a:	4f3c                	lw	a5,88(a4)
    239c:	0000                	unimp
    239e:	07d8                	addi	a4,sp,964
    23a0:	0000                	unimp
    23a2:	3a96                	fld	fs5,352(sp)
    23a4:	0000                	unimp
    23a6:	0802                	c.slli64	a6
    23a8:	bd04                	fsd	fs1,56(a0)
    23aa:	0011                	c.nop	4
    23ac:	0300                	addi	s0,sp,384
    23ae:	0504                	addi	s1,sp,640
    23b0:	6e69                	lui	t3,0x1a
    23b2:	0074                	addi	a3,sp,12
    23b4:	0102                	c.slli64	sp
    23b6:	1306                	slli	t1,t1,0x21
    23b8:	0002                	c.slli64	zero
    23ba:	0200                	addi	s0,sp,256
    23bc:	0508                	addi	a0,sp,640
    23be:	018d                	addi	gp,gp,3
    23c0:	0000                	unimp
    23c2:	0102                	c.slli64	sp
    23c4:	1108                	addi	a0,sp,160
    23c6:	0002                	c.slli64	zero
    23c8:	0200                	addi	s0,sp,256
    23ca:	0704                	addi	s1,sp,896
    p->N = N;
    23cc:	08ca                	slli	a7,a7,0x12
    23ce:	0000                	unimp
    23d0:	0802                	c.slli64	a6
    23d2:	0008c007          	flq	ft0,0(a7)
    23d6:	0200                	addi	s0,sp,256
    return N;
    23d8:	0702                	c.slli64	a4
    23da:	025a                	slli	tp,tp,0x16
}
    23dc:	0000                	unimp
    23de:	a604                	fsd	fs1,8(a2)
    23e0:	000a                	c.slli	zero,0x2
    23e2:	0200                	addi	s0,sp,256
    23e4:	0f48                	addi	a0,sp,916
    23e6:	0025                	c.nop	9
    23e8:	0000                	unimp
    23ea:	0805                	addi	a6,a6,1
    23ec:	4f02                	lw	t5,0(sp)
    23ee:	0000b303          	0xb303
{
    23f2:	0600                	addi	s0,sp,768
    23f4:	00000a0f          	0xa0f
    23f8:	5702                	lw	a4,32(sp)
    23fa:	480e                	lw	a6,192(sp)
    23fc:	0000                	unimp
    23fe:	0400                	addi	s0,sp,512
    2400:	0020                	addi	s0,sp,8
    2402:	0600                	addi	s0,sp,768
    2404:	00000b8f          	0xb8f
    2408:	5802                	lw	a6,32(sp)
    240a:	480e                	lw	a6,192(sp)
    240c:	0000                	unimp
    240e:	0400                	addi	s0,sp,512
    MATRES tmp = 0, prev = 0, cur = 0;
    2410:	0c14                	addi	a3,sp,528
    2412:	0704                	addi	s1,sp,896
    2414:	7865                	lui	a6,0xffff9
    2416:	0070                	addi	a2,sp,12
    2418:	5902                	lw	s2,32(sp)
    241a:	480e                	lw	a6,192(sp)
    ee_s16 ret = 0;
    241c:	0000                	unimp
    241e:	0400                	addi	s0,sp,512
    for (i = 0; i < N; i++)
    2420:	0604010b          	0x604010b
    2424:	08e2                	slli	a7,a7,0x18
    2426:	0000                	unimp
        for (j = 0; j < N; j++)
    2428:	5a02                	lw	s4,32(sp)
    242a:	480e                	lw	a6,192(sp)
    242c:	0000                	unimp
    242e:	0400                	addi	s0,sp,512
            cur = C[i * N + j];
    2430:	0001                	nop
    2432:	0004                	0x4
    2434:	3008                	fld	fa0,32(s0)
    2436:	000c                	0xc
    2438:	0800                	addi	s0,sp,16
    243a:	4c02                	lw	s8,0(sp)
    243c:	0000d907          	vle16.v	v18,(ra),v0.t
    2440:	0900                	addi	s0,sp,144
    2442:	6c66                	flw	fs8,88(sp)
    2444:	0074                	addi	a3,sp,12
    2446:	4e02                	lw	t3,0(sp)
    2448:	5d0a                	lw	s10,160(sp)
    244a:	0000                	unimp
    244c:	0a00                	addi	s0,sp,272
    244e:	0c69                	addi	s8,s8,26
    2450:	0000                	unimp
    2452:	5c02                	lw	s8,32(sp)
    2454:	6905                	lui	s2,0x1
    2456:	0000                	unimp
    2458:	0000                	unimp
    245a:	000a060b          	0xa060b
    245e:	0100                	addi	s0,sp,128
            tmp += cur;
    2460:	005d0123          	sb	t0,2(s10) # 1d002 <RAM_SIZE+0xd002>
    2464:	0000                	unimp
    2466:	4f3c                	lw	a5,88(a4)
    2468:	0000                	unimp
    246a:	07d8                	addi	a4,sp,964
    246c:	0000                	unimp
    246e:	9c01                	0x9c01
            if (tmp > clipval)
    2470:	0569                	addi	a0,a0,26
    2472:	0000                	unimp
    2474:	610c                	flw	fa1,0(a0)
    2476:	0100                	addi	s0,sp,128
    2478:	005d1223          	sh	t0,4(s10)
                ret += 10;
    247c:	0000                	unimp
    247e:	0000                	unimp
    2480:	0000                	unimp
    2482:	620c                	flw	fa1,0(a2)
    2484:	0100                	addi	s0,sp,128
    2486:	005d1c23          	sh	t0,24(s10)
    248a:	0000                	unimp
    248c:	0128                	addi	a0,sp,136
    248e:	0000                	unimp
                tmp = 0;
    2490:	700d                	c.lui	zero,0xfffe3
    2492:	0100000b          	0x100000b
    2496:	0325                	addi	t1,t1,9
                ret += (cur > prev) ? 1 : 0;
    2498:	002c                	addi	a1,sp,8
    249a:	0000                	unimp
    249c:	0150                	addi	a2,sp,132
    249e:	0000                	unimp
    24a0:	800e                	c.mv	zero,gp
    24a2:	000c                	0xc
    24a4:	0100                	addi	s0,sp,128
    24a6:	0325                	addi	t1,t1,9
    24a8:	002c                	addi	a1,sp,8
    24aa:	0000                	unimp
    24ac:	0f00                	addi	s0,sp,912
    24ae:	5f41                	li	t5,-16
    24b0:	26010063          	beqz	sp,2710 <matrix_mul_vect>
    24b4:	00056903          	0x56903
    24b8:	1000                	addi	s0,sp,32
    24ba:	5f41                	li	t5,-16
    24bc:	26010073          	0x26010073
    24c0:	00056903          	0x56903
            prev = cur;
    24c4:	a000                	fsd	fs0,0(s0)
    24c6:	0001                	nop
    24c8:	1000                	addi	s0,sp,32
    24ca:	5f41                	li	t5,-16
        for (j = 0; j < N; j++)
    24cc:	0065                	c.nop	25
    24ce:	2601                	jal	27ce <matrix_mul_vect+0xbe>
    24d0:	00056903          	0x56903
    24d4:	4200                	lw	s0,0(a2)
    24d6:	0002                	c.slli64	zero
    24d8:	0d00                	addi	s0,sp,656
    24da:	0b9a                	slli	s7,s7,0x6
    24dc:	0000                	unimp
    24de:	2601                	jal	27de <matrix_mul_vect+0xce>
    24e0:	00057003          	0x57003
    for (i = 0; i < N; i++)
    24e4:	3300                	fld	fs0,32(a4)
    24e6:	0d000003          	lb	zero,208(zero) # d0 <calc_func+0xc>
    24ea:	0b66                	slli	s6,s6,0x19
    24ec:	0000                	unimp
    24ee:	2601                	jal	27ee <matrix_mul_vect+0xde>
    24f0:	00057003          	0x57003
    24f4:	9000                	0x9000
    24f6:	0004                	0x4
    24f8:	0f00                	addi	s0,sp,912
    24fa:	5f42                	lw	t5,48(sp)
    return ret;
    24fc:	27010063          	beq	sp,a6,275c <matrix_mul_vect+0x4c>
}
    2500:	00056903          	0x56903
    2504:	1000                	addi	s0,sp,32
    2506:	5f42                	lw	t5,48(sp)
    2508:	27010073          	0x27010073
    250c:	00056903          	0x56903
    2510:	f500                	fsw	fs0,40(a0)
    2512:	0005                	c.nop	1
{
    2514:	1000                	addi	s0,sp,32
    2516:	5f42                	lw	t5,48(sp)
    2518:	0065                	c.nop	25
    251a:	2701                	jal	2c1a <stop_time+0x2a>
    251c:	00056903          	0x56903
    2520:	6b00                	flw	fs0,16(a4)
    2522:	0006                	c.slli	zero,0x1
    2524:	0d00                	addi	s0,sp,656
    2526:	0bb4                	addi	a3,sp,472
    2528:	0000                	unimp
    252a:	2701                	jal	2c2a <get_time+0xa>
    252c:	00057003          	0x57003
    2530:	aa00                	fsd	fs0,16(a2)
    2532:	0006                	c.slli	zero,0x1
    2534:	0d00                	addi	s0,sp,656
    2536:	0bb9                	addi	s7,s7,14
    2538:	0000                	unimp
    253a:	2701                	jal	2c3a <get_time+0x1a>
    253c:	00057003          	0x57003
    2540:	ba00                	fsd	fs0,48(a2)
    2542:	0f000007          	vloxei8.v	v0,(zero),v16
    for (i = 0; i < N; i++)
    2546:	5f52                	lw	t5,52(sp)
    2548:	28010063          	beqz	sp,27c8 <matrix_mul_vect+0xb8>
        for (j = 0; j < N; j++)
    254c:	00056903          	0x56903
    2550:	1000                	addi	s0,sp,32
    2552:	5f52                	lw	t5,52(sp)
            C[i * N + j] = (MATRES)A[i * N + j] * (MATRES)val;
    2554:	28010073          	0x28010073
    2558:	00056903          	0x56903
    255c:	2500                	fld	fs0,8(a0)
    255e:	0008                	0x8
    2560:	1000                	addi	s0,sp,32
    2562:	5f52                	lw	t5,52(sp)
    2564:	0065                	c.nop	25
    2566:	2801                	jal	2576 <matrix_mul_const+0x62>
    2568:	00056903          	0x56903
    256c:	d200                	sw	s0,32(a2)
    256e:	0008                	0x8
    2570:	0d00                	addi	s0,sp,656
    2572:	0b4c                	addi	a1,sp,404
    2574:	0000                	unimp
    2576:	2801                	jal	2586 <matrix_mul_const+0x72>
    2578:	00057003          	0x57003
    257c:	3700                	fld	fs0,40(a4)
    257e:	000a                	c.slli	zero,0x2
    2580:	0d00                	addi	s0,sp,656
    2582:	0c85                	addi	s9,s9,1
    2584:	0000                	unimp
    2586:	2801                	jal	2596 <matrix_mul_const+0x82>
    2588:	00057003          	0x57003
    258c:	6d00                	flw	fs0,24(a0)
    258e:	000c                	0xc
    2590:	0f00                	addi	s0,sp,912
    2592:	0072                	c.slli	zero,0x1c
    2594:	2901                	jal	29a4 <matrix_mul_matrix+0x17c>
    2596:	5d0a                	lw	s10,160(sp)
    2598:	0000                	unimp
    259a:	1100                	addi	s0,sp,160
    259c:	0000                	unimp
    259e:	0000                	unimp
    25a0:	0230                	addi	a2,sp,264
    25a2:	0000                	unimp
    25a4:	9f12                	add	t5,t5,tp
    25a6:	0100000b          	0x100000b
    25aa:	032c                	addi	a1,sp,392
    25ac:	000000b3          	add	ra,zero,zero
    25b0:	1100                	addi	s0,sp,160
    25b2:	0028                	addi	a0,sp,8
    25b4:	0000                	unimp
    25b6:	0246                	slli	tp,tp,0x11
    25b8:	0000                	unimp
    25ba:	9f12                	add	t5,t5,tp
    25bc:	0100000b          	0x100000b
    25c0:	032d                	addi	t1,t1,11
    25c2:	000000b3          	add	ra,zero,zero
        for (j = 0; j < N; j++)
    25c6:	1100                	addi	s0,sp,160
    25c8:	0070                	addi	a2,sp,12
    25ca:	0000                	unimp
    25cc:	032c                	addi	a1,sp,392
    25ce:	0000                	unimp
    25d0:	000c5a13          	srli	s4,s8,0x0
    25d4:	0100                	addi	s0,sp,128
    25d6:	032e                	slli	t1,t1,0xb
    25d8:	4ffc                	lw	a5,92(a5)
    25da:	0000                	unimp
    for (i = 0; i < N; i++)
    25dc:	000c5f13          	srli	t5,s8,0x0
    25e0:	0100                	addi	s0,sp,128
    25e2:	032e                	slli	t1,t1,0xb
    25e4:	511c                	lw	a5,32(a0)
    25e6:	0000                	unimp
    25e8:	000c6413          	ori	s0,s8,0
    25ec:	0100                	addi	s0,sp,128
    25ee:	032e                	slli	t1,t1,0xb
    25f0:	5044                	lw	s1,36(s0)
    25f2:	0000                	unimp
}
    25f4:	000c7713          	andi	a4,s8,0
    25f8:	0100                	addi	s0,sp,128
    25fa:	032e                	slli	t1,t1,0xb
    25fc:	51f8                	lw	a4,100(a1)
    25fe:	0000                	unimp
    2600:	190d                	addi	s2,s2,-29
    2602:	000c                	0xc
    2604:	0100                	addi	s0,sp,128
    2606:	032e                	slli	t1,t1,0xb
    2608:	002c                	addi	a1,sp,8
    260a:	0000                	unimp
    260c:	00000e5b          	0xe5b
    2610:	c811                	beqz	s0,2624 <matrix_add_const+0xc>
    2612:	0000                	unimp
    2614:	a900                	fsd	fs0,16(a0)
    2616:	0002                	c.slli64	zero
{
    2618:	1000                	addi	s0,sp,32
    261a:	5f5f 0078 2e01      	0x2e0100785f5f
    2620:	00057003          	0x57003
    2624:	2b00                	fld	fs0,16(a4)
    2626:	0000000f          	fence	unknown,unknown
    262a:	f811                	bnez	s0,253e <matrix_mul_const+0x2a>
    262c:	0000                	unimp
    262e:	c300                	sw	s0,0(a4)
    2630:	0002                	c.slli64	zero
    2632:	1000                	addi	s0,sp,32
    2634:	5f5f 0078 2e01      	0x2e0100785f5f
    263a:	00057003          	0x57003
    for (i = 0; i < N; i++)
    263e:	3e00                	fld	fs0,56(a2)
    2640:	0000000f          	fence	unknown,unknown
        for (j = 0; j < N; j++)
    2644:	e011                	bnez	s0,2648 <matrix_add_const+0x30>
    2646:	0000                	unimp
    2648:	dd00                	sw	s0,56(a0)
    264a:	0002                	c.slli64	zero
            A[i * N + j] += val;
    264c:	1000                	addi	s0,sp,32
    264e:	5f5f 0078 2e01      	0x2e0100785f5f
    2654:	00057003          	0x57003
    2658:	5100                	lw	s0,32(a0)
    265a:	0000000f          	fence	unknown,unknown
    265e:	5014                	lw	a3,32(s0)
    2660:	0051                	c.nop	20
    2662:	1000                	addi	s0,sp,32
    2664:	0000                	unimp
    2666:	fb00                	fsw	fs0,48(a4)
    2668:	0002                	c.slli64	zero
    266a:	1000                	addi	s0,sp,32
    266c:	5f5f 0078 2e01      	0x2e0100785f5f
    2672:	00057003          	0x57003
    2676:	6400                	flw	fs0,8(s0)
    2678:	0000000f          	fence	unknown,unknown
    267c:	1011                	c.nop	-28
    267e:	0001                	nop
    2680:	1500                	addi	s0,sp,672
    2682:	10000003          	lb	zero,256(zero) # 100 <calc_func+0x3c>
    2686:	5f5f 0078 2e01      	0x2e0100785f5f
    268c:	00057003          	0x57003
    2690:	7700                	flw	fs0,40(a4)
    2692:	0000000f          	fence	unknown,unknown
    2696:	2815                	jal	26ca <matrix_add_const+0xb2>
    2698:	0001                	nop
    269a:	1000                	addi	s0,sp,32
    269c:	5f5f 0078 2e01      	0x2e0100785f5f
    26a2:	00057003          	0x57003
    26a6:	8a00                	0x8a00
    26a8:	0000000f          	fence	unknown,unknown
    26ac:	1100                	addi	s0,sp,160
    26ae:	0140                	addi	s0,sp,132
    26b0:	0000                	unimp
    26b2:	048e                	slli	s1,s1,0x3
    26b4:	0000                	unimp
    26b6:	000b6b13          	ori	s6,s6,0
    26ba:	0100                	addi	s0,sp,128
    26bc:	032e                	slli	t1,t1,0xb
    26be:	52ac                	lw	a1,96(a3)
    26c0:	0000                	unimp
    26c2:	0009d013          	srli	zero,s3,0x0
        for (j = 0; j < N; j++)
    26c6:	0100                	addi	s0,sp,128
    26c8:	032e                	slli	t1,t1,0xb
    26ca:	53c8                	lw	a0,36(a5)
    26cc:	0000                	unimp
    26ce:	000b7513          	andi	a0,s6,0
    26d2:	0100                	addi	s0,sp,128
    26d4:	032e                	slli	t1,t1,0xb
    26d6:	52f4                	lw	a3,100(a3)
    26d8:	0000                	unimp
    26da:	000b9513          	slli	a0,s7,0x0
    for (i = 0; i < N; i++)
    26de:	0100                	addi	s0,sp,128
    26e0:	032e                	slli	t1,t1,0xb
    26e2:	5520                	lw	s0,104(a0)
    26e4:	0000                	unimp
    26e6:	000c5113          	srli	sp,s8,0x0
    26ea:	0100                	addi	s0,sp,128
    26ec:	032e                	slli	t1,t1,0xb
    26ee:	51f8                	lw	a4,100(a1)
    26f0:	0000                	unimp
    26f2:	190d                	addi	s2,s2,-29
}
    26f4:	000c                	0xc
    26f6:	0100                	addi	s0,sp,128
    26f8:	032e                	slli	t1,t1,0xb
    26fa:	002c                	addi	a1,sp,8
    26fc:	0000                	unimp
    26fe:	0fbd                	addi	t6,t6,15
    2700:	0000                	unimp
    2702:	a811                	j	2716 <matrix_mul_vect+0x6>
    2704:	0001                	nop
    2706:	9b00                	0x9b00
    2708:	10000003          	lb	zero,256(zero) # 100 <calc_func+0x3c>
    270c:	5f5f 0078 2e01      	0x2e0100785f5f
{
    2712:	00057003          	0x57003
    2716:	ac00                	fsd	fs0,24(s0)
    2718:	0010                	0x10
    271a:	0000                	unimp
    271c:	c011                	beqz	s0,2720 <matrix_mul_vect+0x10>
    271e:	0001                	nop
    2720:	b500                	fsd	fs0,40(a0)
    2722:	10000003          	lb	zero,256(zero) # 100 <calc_func+0x3c>
    2726:	5f5f 0078 2e01      	0x2e0100785f5f
    272c:	00057003          	0x57003
    2730:	bf00                	fsd	fs0,56(a4)
    2732:	0010                	0x10
    for (i = 0; i < N; i++)
    2734:	0000                	unimp
    2736:	8414                	0x8414
    2738:	10000053          	fmul.s	ft0,ft0,ft0,rne
        C[i] = 0;
    273c:	0000                	unimp
    273e:	d300                	sw	s0,32(a4)
    2740:	10000003          	lb	zero,256(zero) # 100 <calc_func+0x3c>
    2744:	5f5f 0078 2e01      	0x2e0100785f5f
    274a:	00057003          	0x57003
    274e:	d200                	sw	s0,32(a2)
        for (j = 0; j < N; j++)
    2750:	0010                	0x10
    2752:	0000                	unimp
    2754:	fc14                	fsw	fa3,56(s0)
    2756:	10000053          	fmul.s	ft0,ft0,ft0,rne
            C[i] += (MATRES)A[i * N + j] * (MATRES)B[j];
    275a:	0000                	unimp
    275c:	f100                	fsw	fs0,32(a0)
    275e:	10000003          	lb	zero,256(zero) # 100 <calc_func+0x3c>
    2762:	5f5f 0078 2e01      	0x2e0100785f5f
    2768:	00057003          	0x57003
    276c:	e500                	fsw	fs0,8(a0)
    276e:	0010                	0x10
    2770:	0000                	unimp
    2772:	f811                	bnez	s0,2686 <matrix_add_const+0x6e>
    2774:	0001                	nop
    2776:	0b00                	addi	s0,sp,400
    2778:	0004                	0x4
    277a:	1000                	addi	s0,sp,32
    277c:	5f5f 0078 2e01      	0x2e0100785f5f
    2782:	00057003          	0x57003
    2786:	f800                	fsw	fs0,48(s0)
    2788:	0010                	0x10
    278a:	0000                	unimp
    278c:	a814                	fsd	fa3,16(s0)
    278e:	0054                	addi	a3,sp,4
    2790:	1000                	addi	s0,sp,32
    2792:	0000                	unimp
    2794:	2900                	fld	fs0,16(a0)
    2796:	0004                	0x4
    2798:	1000                	addi	s0,sp,32
    279a:	5f5f 0078 2e01      	0x2e0100785f5f
    27a0:	00057003          	0x57003
    27a4:	1600                	addi	s0,sp,800
    27a6:	0011                	c.nop	4
    27a8:	0000                	unimp
    27aa:	f014                	fsw	fa3,32(s0)
    27ac:	0054                	addi	a3,sp,4
    27ae:	1000                	addi	s0,sp,32
    27b0:	0000                	unimp
    27b2:	4700                	lw	s0,8(a4)
    27b4:	0004                	0x4
    27b6:	1000                	addi	s0,sp,32
    27b8:	5f5f 0078 2e01      	0x2e0100785f5f
    27be:	00057003          	0x57003
    27c2:	2900                	fld	fs0,16(a0)
    27c4:	0011                	c.nop	4
    27c6:	0000                	unimp
    27c8:	0c14                	addi	a3,sp,528
    27ca:	0055                	c.nop	21
    27cc:	1000                	addi	s0,sp,32
    27ce:	0000                	unimp
    27d0:	6500                	flw	fs0,8(a0)
    27d2:	0004                	0x4
    27d4:	1000                	addi	s0,sp,32
    27d6:	5f5f 0078 2e01      	0x2e0100785f5f
        for (j = 0; j < N; j++)
    27dc:	00057003          	0x57003
    27e0:	5700                	lw	s0,40(a4)
    27e2:	0011                	c.nop	4
    27e4:	0000                	unimp
    27e6:	d815                	beqz	s0,271a <matrix_mul_vect+0xa>
    27e8:	0001                	nop
    27ea:	0d00                	addi	s0,sp,656
    27ec:	0bbe                	slli	s7,s7,0xf
    27ee:	0000                	unimp
    27f0:	2e01                	jal	2b00 <matrix_mul_matrix_bitextract+0x138>
    27f2:	00002c03          	lw	s8,0(zero) # 0 <RAM_START_ADDRESS>
    for (i = 0; i < N; i++)
    27f6:	6a00                	flw	fs0,16(a2)
    27f8:	0011                	c.nop	4
    27fa:	1600                	addi	s0,sp,800
    27fc:	552c                	lw	a1,104(a0)
    27fe:	0000                	unimp
    2800:	00000577          	0x577
    2804:	ac16                	fsd	ft5,24(sp)
    2806:	0055                	c.nop	21
    2808:	7700                	flw	fs0,40(a4)
    280a:	0005                	c.nop	1
}
    280c:	0000                	unimp
    280e:	1100                	addi	s0,sp,160
    2810:	0210                	addi	a2,sp,256
    2812:	0000                	unimp
    2814:	0556                	slli	a0,a0,0x15
    2816:	0000                	unimp
    2818:	d412                	sw	tp,40(sp)
    281a:	0100000b          	0x100000b
    281e:	002c032f          	vamoaddei8.v	zero,(s8),v2,v6,v0.t
    2822:	0000                	unimp
    2824:	00051717          	auipc	a4,0x51
{
    2828:	1200                	addi	s0,sp,288
    282a:	0c3c                	addi	a5,sp,536
    282c:	0000                	unimp
    282e:	2f01                	jal	2f3e <core_bench_state+0x24e>
    2830:	00056903          	0x56903
    2834:	1200                	addi	s0,sp,288
    2836:	0b51                	addi	s6,s6,20
    2838:	0000                	unimp
    283a:	2f01                	jal	2f4a <core_bench_state+0x25a>
    283c:	00056903          	0x56903
    2840:	1200                	addi	s0,sp,288
    2842:	0b7a                	slli	s6,s6,0x1e
    2844:	0000                	unimp
    2846:	2f01                	jal	2f56 <core_bench_state+0x266>
    2848:	00056903          	0x56903
    284c:	1200                	addi	s0,sp,288
    284e:	0bed                	addi	s7,s7,27
    for (i = 0; i < N; i++)
    2850:	0000                	unimp
    2852:	2f01                	jal	2f62 <core_bench_state+0x272>
    2854:	00057003          	0x57003
        for (j = 0; j < N; j++)
    2858:	1200                	addi	s0,sp,288
    285a:	00000c03          	lb	s8,0(zero) # 0 <RAM_START_ADDRESS>
    285e:	2f01                	jal	2f6e <core_bench_state+0x27e>
            C[i * N + j] = 0;
    2860:	00057003          	0x57003
    2864:	1700                	addi	s0,sp,928
    2866:	04f6                	slli	s1,s1,0x1d
    2868:	0000                	unimp
    286a:	785f5f0f          	0x785f5f0f
    286e:	0100                	addi	s0,sp,128
    2870:	0570032f          	vamoaddei8.v	v6,(zero),v23,v6,v0.t
    2874:	0000                	unimp
    2876:	1700                	addi	s0,sp,928
    2878:	0508                	addi	a0,sp,640
    287a:	0000                	unimp
    287c:	785f5f0f          	0x785f5f0f
    2880:	0100                	addi	s0,sp,128
    2882:	0570032f          	vamoaddei8.v	v6,(zero),v23,v6,v0.t
    2886:	0000                	unimp
    2888:	1800                	addi	s0,sp,48
    288a:	785f5f0f          	0x785f5f0f
            for (k = 0; k < N; k++)
    288e:	0100                	addi	s0,sp,128
    2890:	0570032f          	vamoaddei8.v	v6,(zero),v23,v6,v0.t
                C[i * N + j] += (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
    2894:	0000                	unimp
    2896:	0000                	unimp
    2898:	0c14                	addi	a3,sp,528
    289a:	0052                	c.slli	zero,0x14
    289c:	1400                	addi	s0,sp,544
    289e:	0000                	unimp
    28a0:	3500                	fld	fs0,40(a0)
    28a2:	0005                	c.nop	1
    28a4:	1000                	addi	s0,sp,32
    28a6:	5f5f 0078 2f01      	0x2f0100785f5f
    28ac:	00057003          	0x57003
    28b0:	d900                	sw	s0,48(a0)
    28b2:	0011                	c.nop	4
    28b4:	0000                	unimp
    28b6:	00054717          	auipc	a4,0x54
    28ba:	0f00                	addi	s0,sp,912
    28bc:	5f5f 0078 2f01      	0x2f0100785f5f
    28c2:	00057003          	0x57003
    28c6:	0000                	unimp
    28c8:	0f18                	addi	a4,sp,912
    28ca:	5f5f 0078 2f01      	0x2f0100785f5f
    28d0:	00057003          	0x57003
    28d4:	0000                	unimp
    28d6:	1500                	addi	s0,sp,672
    28d8:	0230                	addi	a2,sp,264
    28da:	0000                	unimp
    28dc:	9312                	add	t1,t1,tp
    28de:	000a                	c.slli	zero,0x2
    28e0:	0100                	addi	s0,sp,128
    28e2:	00b3032f          	vamoaddei8.v	zero,(t1),v11,v6,v0.t
    28e6:	0000                	unimp
    28e8:	0000                	unimp
    28ea:	0402                	c.slli64	s0
    28ec:	9205                	srli	a2,a2,0x21
    28ee:	0001                	nop
    28f0:	0200                	addi	s0,sp,256
    28f2:	0704                	addi	s1,sp,896
    28f4:	08c5                	addi	a7,a7,17
    28f6:	0000                	unimp
    28f8:	6e19                	lui	t3,0x6
    28fa:	000c                	0xc
    28fc:	6e00                	flw	fs0,24(a2)
    28fe:	000c                	0xc
    2900:	0000                	unimp
    2902:	08f1                	addi	a7,a7,28
    2904:	0000                	unimp
    2906:	0004                	0x4
    2908:	0bb5                	addi	s7,s7,13
    290a:	0000                	unimp
    290c:	0104                	addi	s1,sp,128
    290e:	0aad                	addi	s5,s5,11
    2910:	0000                	unimp
    2912:	c60c                	sw	a1,8(a2)
    2914:	000d                	c.nop	3
    2916:	1500                	addi	s0,sp,672
    2918:	000a                	c.slli	zero,0x2
    291a:	1400                	addi	s0,sp,544
    291c:	e4000057          	vdot.vv	v0,v0,v0,v0.t
    2920:	a7000007          	vluxseg6ei8.v	v0,(zero),v16
    2924:	004a                	c.slli	zero,0x12
    2926:	0200                	addi	s0,sp,256
    2928:	0408                	addi	a0,sp,512
    292a:	11bd                	addi	gp,gp,-17
    292c:	0000                	unimp
    292e:	69050403          	lb	s0,1680(a0)
    2932:	746e                	flw	fs0,248(sp)
    2934:	0200                	addi	s0,sp,256
    2936:	0601                	addi	a2,a2,0
    2938:	00000213          	li	tp,0
    293c:	0802                	c.slli64	a6
    293e:	8d05                	sub	a0,a0,s1
    2940:	0001                	nop
    2942:	0200                	addi	s0,sp,256
    2944:	0801                	addi	a6,a6,0
    2946:	0211                	addi	tp,tp,4
    2948:	0000                	unimp
    294a:	0402                	c.slli64	s0
    294c:	0008ca07          	flq	fs4,0(a7)
    2950:	0200                	addi	s0,sp,256
    2952:	0708                	addi	a0,sp,896
    2954:	08c0                	addi	s0,sp,84
    2956:	0000                	unimp
    2958:	eb04                	fsw	fs1,16(a4)
    295a:	000c                	0xc
    295c:	0200                	addi	s0,sp,256
    295e:	014e                	slli	sp,sp,0x13
            for (k = 0; k < N; k++)
    2960:	6316                	flw	ft6,68(sp)
    2962:	0000                	unimp
    2964:	0200                	addi	s0,sp,256
    2966:	0702                	c.slli64	a4
    2968:	025a                	slli	tp,tp,0x16
    296a:	0000                	unimp
    296c:	a605                	j	2c8c <time_in_secs+0x3c>
    296e:	000a                	c.slli	zero,0x2
    2970:	0300                	addi	s0,sp,384
    2972:	0f48                	addi	a0,sp,916
    2974:	0025                	c.nop	9
    2976:	0000                	unimp
        for (j = 0; j < N; j++)
    2978:	0806                	slli	a6,a6,0x1
    297a:	c0034f03          	lbu	t5,-1024(t1) # fffe4c00 <RAM_SIZE+0xfffd4c00>
    297e:	0000                	unimp
    2980:	0700                	addi	s0,sp,896
    2982:	00000a0f          	0xa0f
    2986:	480e5703          	lhu	a4,1152(t3) # 6480 <__muldf3+0x334>
    298a:	0000                	unimp
    298c:	0400                	addi	s0,sp,512
    298e:	0020                	addi	s0,sp,8
    for (i = 0; i < N; i++)
    2990:	0700                	addi	s0,sp,896
    2992:	00000b8f          	0xb8f
    2996:	480e5803          	lhu	a6,1152(t3)
    299a:	0000                	unimp
    299c:	0400                	addi	s0,sp,512
    299e:	0c14                	addi	a3,sp,528
    29a0:	0804                	addi	s1,sp,16
    29a2:	7865                	lui	a6,0xffff9
    29a4:	0070                	addi	a2,sp,12
    29a6:	480e5903          	lhu	s2,1152(t3)
}
    29aa:	0000                	unimp
    29ac:	0400                	addi	s0,sp,512
    29ae:	0704010b          	0x704010b
    29b2:	08e2                	slli	a7,a7,0x18
    29b4:	0000                	unimp
    29b6:	480e5a03          	lhu	s4,1152(t3)
    29ba:	0000                	unimp
    29bc:	0400                	addi	s0,sp,512
    29be:	0001                	nop
    29c0:	0004                	0x4
    29c2:	3009                	jal	21c4 <core_init_matrix+0x30>
    29c4:	000c                	0xc
    29c6:	0800                	addi	s0,sp,16
{
    29c8:	e6074c03          	lbu	s8,-416(a4) # 56716 <RAM_SIZE+0x46716>
    29cc:	0000                	unimp
    29ce:	0a00                	addi	s0,sp,272
    29d0:	6c66                	flw	fs8,88(sp)
    29d2:	0074                	addi	a3,sp,12
    29d4:	6a0a4e03          	lbu	t3,1696(s4) # fffe06a0 <RAM_SIZE+0xfffd06a0>
    29d8:	0000                	unimp
    29da:	0b00                	addi	s0,sp,400
    29dc:	0c69                	addi	s8,s8,26
    29de:	0000                	unimp
    29e0:	76055c03          	lhu	s8,1888(a0)
    29e4:	0000                	unimp
    29e6:	0000                	unimp
    29e8:	e20c                	fsw	fa1,0(a2)
    29ea:	000c                	0xc
    for (i = 0; i < N; i++)
    29ec:	0100                	addi	s0,sp,128
    29ee:	006a0123          	sb	t1,2(s4)
    29f2:	0000                	unimp
        for (j = 0; j < N; j++)
    29f4:	5714                	lw	a3,40(a4)
    29f6:	0000                	unimp
    29f8:	07e4                	addi	s1,sp,972
    29fa:	0000                	unimp
            C[i * N + j] = 0;
    29fc:	9c01                	0x9c01
    29fe:	08c2                	slli	a7,a7,0x10
    2a00:	0000                	unimp
    2a02:	610d                	addi	sp,sp,160
    2a04:	0100                	addi	s0,sp,128
    2a06:	006a1223          	sh	t1,4(s4)
    2a0a:	0000                	unimp
    2a0c:	11ec                	addi	a1,sp,236
    2a0e:	0000                	unimp
    2a10:	620d                	lui	tp,0x3
    2a12:	0100                	addi	s0,sp,128
    2a14:	006a1c23          	sh	t1,24(s4)
    2a18:	0000                	unimp
    2a1a:	1274                	addi	a3,sp,300
    2a1c:	0000                	unimp
    2a1e:	700e                	flw	ft0,224(sp)
    2a20:	0100000b          	0x100000b
    2a24:	0325                	addi	t1,t1,9
    2a26:	002c                	addi	a1,sp,8
            for (k = 0; k < N; k++)
    2a28:	0000                	unimp
    2a2a:	12fc                	addi	a5,sp,364
    2a2c:	0000                	unimp
    2a2e:	000c800f          	0xc800f
                MATRES tmp = (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
    2a32:	0100                	addi	s0,sp,128
    2a34:	0325                	addi	t1,t1,9
    2a36:	002c                	addi	a1,sp,8
    2a38:	0000                	unimp
    2a3a:	1000                	addi	s0,sp,32
    2a3c:	5f41                	li	t5,-16
    2a3e:	26010063          	beqz	sp,2c9e <portable_init+0xa>
    2a42:	0008c203          	lbu	tp,0(a7)
    2a46:	1c00                	addi	s0,sp,560
    2a48:	10000013          	li	zero,256
    2a4c:	5f41                	li	t5,-16
    2a4e:	26010073          	0x26010073
    2a52:	0008c203          	lbu	tp,0(a7)
    2a56:	6700                	flw	fs0,8(a4)
    2a58:	10000013          	li	zero,256
    2a5c:	5f41                	li	t5,-16
    2a5e:	0065                	c.nop	25
    2a60:	2601                	jal	2d60 <core_bench_state+0x70>
    2a62:	0008c203          	lbu	tp,0(a7)
    2a66:	af00                	fsd	fs0,24(a4)
    2a68:	0e000013          	li	zero,224
    2a6c:	0b9a                	slli	s7,s7,0x6
    2a6e:	0000                	unimp
    2a70:	2601                	jal	2d70 <core_bench_state+0x80>
    2a72:	0008c903          	lbu	s2,0(a7)
    2a76:	5b00                	lw	s0,48(a4)
    2a78:	0014                	0x14
    2a7a:	0e00                	addi	s0,sp,784
    2a7c:	0b66                	slli	s6,s6,0x19
    2a7e:	0000                	unimp
    2a80:	2601                	jal	2d80 <core_bench_state+0x90>
    2a82:	0008c903          	lbu	s2,0(a7)
    2a86:	f300                	fsw	fs0,32(a4)
    2a88:	0014                	0x14
    2a8a:	1000                	addi	s0,sp,32
    2a8c:	5f42                	lw	t5,48(sp)
    2a8e:	27010063          	beq	sp,a6,2cee <portable_fini+0x26>
    2a92:	0008c203          	lbu	tp,0(a7)
    2a96:	9a00                	0x9a00
    2a98:	0015                	c.nop	5
    2a9a:	1000                	addi	s0,sp,32
    2a9c:	5f42                	lw	t5,48(sp)
    2a9e:	27010073          	0x27010073
                C[i * N + j] += bit_extract(tmp, 2, 4) * bit_extract(tmp, 5, 7);
    2aa2:	0008c203          	lbu	tp,0(a7)
    2aa6:	da00                	sw	s0,48(a2)
    2aa8:	0015                	c.nop	5
    2aaa:	1000                	addi	s0,sp,32
    2aac:	5f42                	lw	t5,48(sp)
    2aae:	0065                	c.nop	25
    2ab0:	2701                	jal	31b0 <core_init_state+0x214>
    2ab2:	0008c203          	lbu	tp,0(a7)
    2ab6:	3200                	fld	fs0,32(a2)
    2ab8:	0016                	c.slli	zero,0x5
    2aba:	0e00                	addi	s0,sp,784
    2abc:	0bb4                	addi	a3,sp,472
    2abe:	0000                	unimp
    2ac0:	2701                	jal	31c0 <core_init_state+0x224>
    2ac2:	0008c903          	lbu	s2,0(a7)
    2ac6:	d700                	sw	s0,40(a4)
    2ac8:	0016                	c.slli	zero,0x5
    2aca:	0e00                	addi	s0,sp,784
    2acc:	0bb9                	addi	s7,s7,14
    2ace:	0000                	unimp
    2ad0:	2701                	jal	31d0 <core_init_state+0x234>
    2ad2:	0008c903          	lbu	s2,0(a7)
    2ad6:	6400                	flw	fs0,8(s0)
    2ad8:	10000017          	auipc	zero,0x10000
    2adc:	5f52                	lw	t5,52(sp)
    2ade:	28010063          	beqz	sp,2d5e <core_bench_state+0x6e>
    2ae2:	0008c203          	lbu	tp,0(a7)
    2ae6:	fe00                	fsw	fs0,56(a2)
    2ae8:	10000017          	auipc	zero,0x10000
    2aec:	5f52                	lw	t5,52(sp)
    2aee:	28010073          	0x28010073
    2af2:	0008c203          	lbu	tp,0(a7)
    2af6:	4b00                	lw	s0,16(a4)
    2af8:	0018                	0x18
    2afa:	1000                	addi	s0,sp,32
    2afc:	5f52                	lw	t5,52(sp)
    2afe:	0065                	c.nop	25
    2b00:	2801                	jal	2b10 <matrix_mul_matrix_bitextract+0x148>
    2b02:	0008c203          	lbu	tp,0(a7)
    2b06:	d000                	sw	s0,32(s0)
    2b08:	0018                	0x18
    2b0a:	0e00                	addi	s0,sp,784
    2b0c:	0b4c                	addi	a1,sp,404
    2b0e:	0000                	unimp
    2b10:	2801                	jal	2b20 <matrix_mul_matrix_bitextract+0x158>
    2b12:	0008c903          	lbu	s2,0(a7)
    2b16:	7c00                	flw	fs0,56(s0)
    2b18:	0019                	c.nop	6
    2b1a:	0e00                	addi	s0,sp,784
    2b1c:	0c85                	addi	s9,s9,1
    2b1e:	0000                	unimp
    2b20:	2801                	jal	2b30 <matrix_mul_matrix_bitextract+0x168>
    2b22:	0008c903          	lbu	s2,0(a7)
    2b26:	ac00                	fsd	fs0,24(s0)
    2b28:	001a                	c.slli	zero,0x6
    2b2a:	1100                	addi	s0,sp,160
            for (k = 0; k < N; k++)
    2b2c:	0072                	c.slli	zero,0x1c
    2b2e:	2901                	jal	2f3e <core_bench_state+0x24e>
    2b30:	6a0a                	flw	fs4,128(sp)
    2b32:	0000                	unimp
    2b34:	1200                	addi	s0,sp,288
    2b36:	0248                	addi	a0,sp,260
    2b38:	0000                	unimp
    2b3a:	0249                	addi	tp,tp,18
    2b3c:	0000                	unimp
    2b3e:	000b9f13          	slli	t5,s7,0x0
    2b42:	0100                	addi	s0,sp,128
        for (j = 0; j < N; j++)
    2b44:	032c                	addi	a1,sp,392
    2b46:	00c0                	addi	s0,sp,68
    2b48:	0000                	unimp
    2b4a:	1200                	addi	s0,sp,288
    2b4c:	0288                	addi	a0,sp,320
    2b4e:	0000                	unimp
    2b50:	0275                	addi	tp,tp,29
    2b52:	0000                	unimp
    2b54:	1c0e                	slli	s8,s8,0x23
    2b56:	000d                	c.nop	3
    2b58:	0100                	addi	s0,sp,128
    2b5a:	032c                	addi	a1,sp,392
    for (i = 0; i < N; i++)
    2b5c:	08c2                	slli	a7,a7,0x10
    2b5e:	0000                	unimp
    2b60:	1b48                	addi	a0,sp,436
    2b62:	0000                	unimp
    2b64:	2414                	fld	fa3,8(s0)
    2b66:	0058                	addi	a4,sp,4
    2b68:	d000                	sw	s0,32(s0)
    2b6a:	0008                	0x8
    2b6c:	1400                	addi	s0,sp,544
    2b6e:	585c                	lw	a5,52(s0)
    2b70:	0000                	unimp
    2b72:	08d0                	addi	a2,sp,84
}
    2b74:	0000                	unimp
    2b76:	1200                	addi	s0,sp,288
    2b78:	02a0                	addi	s0,sp,328
    2b7a:	0000                	unimp
    2b7c:	0000028b          	0x28b
    2b80:	000b9f13          	slli	t5,s7,0x0
    2b84:	0100                	addi	s0,sp,128
    2b86:	032d                	addi	t1,t1,11
    2b88:	00c0                	addi	s0,sp,68
    2b8a:	0000                	unimp
    2b8c:	1200                	addi	s0,sp,288
    2b8e:	02b8                	addi	a4,sp,328
{
    2b90:	0000                	unimp
    2b92:	000002b7          	lui	t0,0x0
    2b96:	1c0e                	slli	s8,s8,0x23
    2b98:	000d                	c.nop	3
    2b9a:	0100                	addi	s0,sp,128
	const CORETIMETYPE * const time_ptr = (CORETIMETYPE*)0xDEADBEE0;
    2b9c:	032d                	addi	t1,t1,11
    2b9e:	08c2                	slli	a7,a7,0x10
    2ba0:	0000                	unimp
    2ba2:	1b7c                	addi	a5,sp,444
    2ba4:	0000                	unimp
    2ba6:	c414                	sw	a3,8(s0)
	return *time_ptr;
    2ba8:	0058                	addi	a4,sp,4
    2baa:	d000                	sw	s0,32(s0)
    2bac:	0008                	0x8
    2bae:	1400                	addi	s0,sp,544
}
    2bb0:	5900                	lw	s0,48(a0)
    2bb2:	0000                	unimp
    2bb4:	08d0                	addi	a2,sp,84
    2bb6:	0000                	unimp
    2bb8:	1200                	addi	s0,sp,288
    2bba:	02d0                	addi	a2,sp,324
    2bbc:	0000                	unimp
    2bbe:	0000076f          	jal	a4,2bbe <barebones_clock+0x2e>
{
    2bc2:	120e                	slli	tp,tp,0x23
    2bc4:	000e                	c.slli	zero,0x3
    2bc6:	0100                	addi	s0,sp,128
    2bc8:	032e                	slli	t1,t1,0xb
    2bca:	08c9                	addi	a7,a7,18
    2bcc:	0000                	unimp
    2bce:	1bb0                	addi	a2,sp,504
    GETMYTIME(&start_time_val);
    2bd0:	0000                	unimp
    2bd2:	8c0e                	mv	s8,gp
    2bd4:	000d                	c.nop	3
    2bd6:	0100                	addi	s0,sp,128
    2bd8:	032e                	slli	t1,t1,0xb
    2bda:	08c9                	addi	a7,a7,18
}
    2bdc:	0000                	unimp
    2bde:	1bdd                	addi	s7,s7,-9
    2be0:	0000                	unimp
    2be2:	730e                	flw	ft6,224(sp)
    2be4:	000d                	c.nop	3
    2be6:	0100                	addi	s0,sp,128
    2be8:	032e                	slli	t1,t1,0xb
    2bea:	08c9                	addi	a7,a7,18
    2bec:	0000                	unimp
    2bee:	00001c0b          	0x1c0b
{
    2bf2:	500e                	0x500e
    2bf4:	000d                	c.nop	3
    2bf6:	0100                	addi	s0,sp,128
    2bf8:	032e                	slli	t1,t1,0xb
    2bfa:	08c9                	addi	a7,a7,18
    2bfc:	0000                	unimp
    2bfe:	1c2a                	slli	s8,s8,0x2a
    GETMYTIME(&stop_time_val);
    2c00:	0000                	unimp
    2c02:	370e                	fld	fa4,224(sp)
    2c04:	000d                	c.nop	3
    2c06:	0100                	addi	s0,sp,128
    2c08:	032e                	slli	t1,t1,0xb
    2c0a:	08c9                	addi	a7,a7,18
}
    2c0c:	0000                	unimp
    2c0e:	1c7f                	0x1c7f
    2c10:	0000                	unimp
    2c12:	f30e                	fsw	ft3,164(sp)
    2c14:	000c                	0xc
    2c16:	0100                	addi	s0,sp,128
    2c18:	032e                	slli	t1,t1,0xb
    2c1a:	08c9                	addi	a7,a7,18
    2c1c:	0000                	unimp
    2c1e:	00001ceb          	0x1ceb
{
    2c22:	c40e                	sw	gp,8(sp)
    2c24:	000c                	0xc
    2c26:	0100                	addi	s0,sp,128
    2c28:	032e                	slli	t1,t1,0xb
    2c2a:	08c9                	addi	a7,a7,18
        = (CORE_TICKS)(MYTIMEDIFF(stop_time_val, start_time_val));
    2c2c:	0000                	unimp
    2c2e:	1d26                	slli	s10,s10,0x29
    2c30:	0000                	unimp
    2c32:	f012                	fsw	ft4,32(sp)
    CORE_TICKS elapsed
    2c34:	0002                	c.slli64	zero
    2c36:	e000                	fsw	fs0,0(s0)
    2c38:	0e000003          	lb	zero,224(zero) # e0 <calc_func+0x1c>
    return elapsed;
    2c3c:	0e80                	addi	s0,sp,848
    2c3e:	0000                	unimp
}
    2c40:	2e01                	jal	2f50 <core_bench_state+0x260>
    2c42:	0008c903          	lbu	s2,0(a7)
    2c46:	4f00                	lw	s0,24(a4)
    2c48:	001d                	c.nop	7
    2c4a:	0e00                	addi	s0,sp,784
    2c4c:	0e64                	addi	s1,sp,796
    2c4e:	0000                	unimp
{
    2c50:	2e01                	jal	2f60 <core_bench_state+0x270>
    2c52:	0008c903          	lbu	s2,0(a7)
    2c56:	7800                	flw	fs0,48(s0)
    2c58:	001d                	c.nop	7
    2c5a:	0e00                	addi	s0,sp,784
    2c5c:	0cdd                	addi	s9,s9,23
    2c5e:	0000                	unimp
    2c60:	2e01                	jal	2f70 <core_bench_state+0x280>
    2c62:	0008c903          	lbu	s2,0(a7)
    secs_ret retval = ((secs_ret)ticks) / (secs_ret)EE_TICKS_PER_SEC;
    2c66:	ad00                	fsd	fs0,24(a0)
    2c68:	001d                	c.nop	7
    2c6a:	0e00                	addi	s0,sp,784
    2c6c:	00000e4b          	fnmsub.s	ft8,ft0,ft0,ft0,rne
    2c70:	2e01                	jal	2f80 <core_bench_state+0x290>
    2c72:	0008c903          	lbu	s2,0(a7)
    2c76:	e100                	fsw	fs0,0(a0)
    2c78:	001d                	c.nop	7
    2c7a:	0e00                	addi	s0,sp,784
    return retval;
    2c7c:	00000cbf c9032e01 	0xc9032e0100000cbf
}
    2c84:	0008                	0x8
    2c86:	1500                	addi	s0,sp,672
    2c88:	001e                	c.slli	zero,0x7
    2c8a:	0e00                	addi	s0,sp,784
    2c8c:	0cba                	slli	s9,s9,0xe
    2c8e:	0000                	unimp
    2c90:	2e01                	jal	2fa0 <core_init_state+0x4>
    2c92:	0008c903          	lbu	s2,0(a7)
{
    2c96:	7000                	flw	fs0,32(s0)
    2c98:	001e                	c.slli	zero,0x7
    2c9a:	1000                	addi	s0,sp,32
    2c9c:	5f5f 006d 2e01      	0x2e01006d5f5f
    2ca2:	0008c903          	lbu	s2,0(a7)
    2ca6:	9e00                	0x9e00
    2ca8:	001e                	c.slli	zero,0x7
    2caa:	1400                	addi	s0,sp,544
    p->portable_id = 1;
    2cac:	5998                	lw	a4,48(a1)
    2cae:	0000                	unimp
    2cb0:	08d9                	addi	a7,a7,22
    2cb2:	0000                	unimp
    2cb4:	a814                	fsd	fa3,16(s0)
    2cb6:	0059                	c.nop	22
}
    2cb8:	e200                	fsw	fs0,0(a2)
    2cba:	0008                	0x8
    2cbc:	1400                	addi	s0,sp,544
    2cbe:	59b8                	lw	a4,112(a1)
    2cc0:	0000                	unimp
    2cc2:	000008eb          	0x8eb
    2cc6:	f414                	fsw	fa3,40(s0)
{
    2cc8:	0059                	c.nop	22
    2cca:	d900                	sw	s0,48(a0)
    2ccc:	0008                	0x8
    2cce:	1400                	addi	s0,sp,544
    2cd0:	5a04                	lw	s1,48(a2)
    2cd2:	0000                	unimp
    2cd4:	08e2                	slli	a7,a7,0x18
    2cd6:	0000                	unimp
    p->portable_id = 0;
    2cd8:	1414                	addi	a3,sp,544
    2cda:	005a                	c.slli	zero,0x16
    2cdc:	eb00                	fsw	fs0,16(a4)
    2cde:	0008                	0x8
}
    2ce0:	0000                	unimp
    2ce2:	5415                	li	s0,-27
    2ce4:	005a                	c.slli	zero,0x16
    2ce6:	8800                	0x8800
    2ce8:	0000                	unimp
    2cea:	0e00                	addi	s0,sp,784
    2cec:	0005                	c.nop	1
    2cee:	0e00                	addi	s0,sp,784
{
    2cf0:	0d12                	slli	s10,s10,0x4
    2cf2:	0000                	unimp
    2cf4:	2e01                	jal	3004 <core_init_state+0x68>
    2cf6:	0008c903          	lbu	s2,0(a7)
    2cfa:	d200                	sw	s0,32(a2)
    2cfc:	001e                	c.slli	zero,0x7
    2cfe:	0e00                	addi	s0,sp,784
    2d00:	0e50                	addi	a2,sp,788
    2d02:	0000                	unimp
    2d04:	2e01                	jal	3014 <core_init_state+0x78>
    2d06:	0008c903          	lbu	s2,0(a7)
    2d0a:	f000                	fsw	fs0,32(s0)
    2d0c:	001e                	c.slli	zero,0x7
    2d0e:	0e00                	addi	s0,sp,784
    2d10:	00000d17          	auipc	s10,0x0
    2d14:	2e01                	jal	3024 <core_init_state+0x88>
    2d16:	0008c903          	lbu	s2,0(a7)
    2d1a:	1900                	addi	s0,sp,176
    2d1c:	001f 0e00 0e55      	0xe550e00001f
    2d22:	0000                	unimp
    2d24:	2e01                	jal	3034 <core_init_state+0x98>
    2d26:	0008c903          	lbu	s2,0(a7)
    2d2a:	2c00                	fld	fs0,24(s0)
    2d2c:	001f 0e00 0d69      	0xd690e00001f
    2d32:	0000                	unimp
    2d34:	2e01                	jal	3044 <core_init_state+0xa8>
    2d36:	00005603          	lhu	a2,0(zero) # 0 <RAM_START_ADDRESS>
    ee_u8 *p = memblock;
    2d3a:	4a00                	lw	s0,16(a2)
    2d3c:	001f 0e00 0e5f      	0xe5f0e00001f
    for (i = 0; i < NUM_CORE_STATES; i++)
    2d42:	0000                	unimp
    2d44:	2e01                	jal	3054 <core_init_state+0xb8>
    2d46:	00005603          	lhu	a2,0(zero) # 0 <RAM_START_ADDRESS>
        final_counts[i] = track_counts[i] = 0;
    2d4a:	5d00                	lw	s0,56(a0)
    2d4c:	001f 0e00 0d6e      	0xd6e0e00001f
    2d52:	0000                	unimp
    2d54:	2e01                	jal	3064 <core_init_state+0xc8>
    2d56:	00005603          	lhu	a2,0(zero) # 0 <RAM_START_ADDRESS>
    2d5a:	7b00                	flw	fs0,48(a4)
    2d5c:	001f 0e00 0e5a      	0xe5a0e00001f
    2d62:	0000                	unimp
    2d64:	2e01                	jal	3074 <core_init_state+0xd8>
    2d66:	00005603          	lhu	a2,0(zero) # 0 <RAM_START_ADDRESS>
    2d6a:	9d00                	0x9d00
    2d6c:	001f 1500 5a68      	0x5a681500001f
    2d72:	0000                	unimp
    2d74:	0010                	0x10
    2d76:	0000                	unimp
    2d78:	00000497          	auipc	s1,0x0
    2d7c:	8f16                	mv	t5,t0
    2d7e:	000e                	c.slli	zero,0x3
    2d80:	0100                	addi	s0,sp,128
    2d82:	032e                	slli	t1,t1,0xb
    for (i = 0; i < NUM_CORE_STATES; i++)
    2d84:	08c9                	addi	a7,a7,18
    2d86:	0000                	unimp
    2d88:	5a01                	li	s4,-32
    2d8a:	0c16                	slli	s8,s8,0x5
    2d8c:	000d                	c.nop	3
    2d8e:	0100                	addi	s0,sp,128
    2d90:	032e                	slli	t1,t1,0xb
    2d92:	08c9                	addi	a7,a7,18
    2d94:	0000                	unimp
    2d96:	5b01                	li	s6,-32
    2d98:	1500                	addi	s0,sp,672
    2d9a:	5a78                	lw	a4,116(a2)
    while (*p != 0)
    2d9c:	0000                	unimp
    2d9e:	0010                	0x10
        enum CORE_STATE fstate = core_state_transition(&p, track_counts);
    2da0:	0000                	unimp
    2da2:	04c1                	addi	s1,s1,16
    2da4:	0000                	unimp
    2da6:	8f16                	mv	t5,t0
    2da8:	000e                	c.slli	zero,0x3
    2daa:	0100                	addi	s0,sp,128
    2dac:	032e                	slli	t1,t1,0xb
    2dae:	08c9                	addi	a7,a7,18
    2db0:	0000                	unimp
    2db2:	5a01                	li	s4,-32
    2db4:	0c16                	slli	s8,s8,0x5
    2db6:	000d                	c.nop	3
        final_counts[fstate]++;
    2db8:	0100                	addi	s0,sp,128
    2dba:	032e                	slli	t1,t1,0xb
    2dbc:	08c9                	addi	a7,a7,18
    2dbe:	0000                	unimp
    2dc0:	5b01                	li	s6,-32
    2dc2:	1500                	addi	s0,sp,672
    2dc4:	5a88                	lw	a0,48(a3)
    2dc6:	0000                	unimp
    2dc8:	0010                	0x10
    2dca:	0000                	unimp
    2dcc:	000004eb          	0x4eb
    2dd0:	8f16                	mv	t5,t0
    2dd2:	000e                	c.slli	zero,0x3
    2dd4:	0100                	addi	s0,sp,128
    2dd6:	032e                	slli	t1,t1,0xb
    2dd8:	08c9                	addi	a7,a7,18
    2dda:	0000                	unimp
    2ddc:	5a01                	li	s4,-32
    2dde:	0c16                	slli	s8,s8,0x5
    2de0:	000d                	c.nop	3
    2de2:	0100                	addi	s0,sp,128
    while (*p != 0)
    2de4:	032e                	slli	t1,t1,0xb
    2de6:	08c9                	addi	a7,a7,18
    2de8:	0000                	unimp
    2dea:	5b01                	li	s6,-32
    2dec:	1700                	addi	s0,sp,928
    2dee:	0310                	addi	a2,sp,384
    p = memblock;
    2df0:	0000                	unimp
    2df2:	8f16                	mv	t5,t0
    2df4:	000e                	c.slli	zero,0x3
    2df6:	0100                	addi	s0,sp,128
    while (p < (memblock + blksize))
    2df8:	032e                	slli	t1,t1,0xb
    2dfa:	08c9                	addi	a7,a7,18
        if (*p != ',')
    2dfc:	0000                	unimp
    2dfe:	5a01                	li	s4,-32
    2e00:	0c16                	slli	s8,s8,0x5
    2e02:	000d                	c.nop	3
    2e04:	0100                	addi	s0,sp,128
    2e06:	032e                	slli	t1,t1,0xb
    2e08:	08c9                	addi	a7,a7,18
    2e0a:	0000                	unimp
            *p ^= (ee_u8)seed1;
    2e0c:	5b01                	li	s6,-32
    2e0e:	0000                	unimp
    2e10:	2812                	fld	fa6,256(sp)
    2e12:	28000003          	lb	zero,640(zero) # 280 <calc_func+0x1bc>
    2e16:	0005                	c.nop	1
    2e18:	1000                	addi	s0,sp,32
    2e1a:	5f5f 0078 2e01      	0x2e0100785f5f
    2e20:	0008c903          	lbu	s2,0(a7)
    2e24:	bb00                	fsd	fs0,48(a4)
    2e26:	001f 0000 4012      	0x40120000001f
        p += step;
    2e2c:	42000003          	lb	zero,1056(zero) # 420 <copy_info+0x18>
    2e30:	0005                	c.nop	1
    2e32:	1000                	addi	s0,sp,32
    2e34:	5f5f 0078 2e01      	0x2e0100785f5f
    2e3a:	0008c903          	lbu	s2,0(a7)
    while (p < (memblock + blksize))
    2e3e:	ce00                	sw	s0,24(a2)
    2e40:	001f 0000 2c15      	0x2c150000001f
    2e46:	1000005b          	0x1000005b
    2e4a:	0000                	unimp
    2e4c:	6000                	flw	fs0,0(s0)
    2e4e:	0005                	c.nop	1
    p = memblock;
    2e50:	1000                	addi	s0,sp,32
    2e52:	5f5f 0078 2e01      	0x2e0100785f5f
    while (*p != 0)
    2e58:	0008c903          	lbu	s2,0(a7)
        enum CORE_STATE fstate = core_state_transition(&p, track_counts);
    2e5c:	e100                	fsw	fs0,0(a0)
    2e5e:	001f 0000 5812      	0x58120000001f
    2e64:	10000003          	lb	zero,256(zero) # 100 <calc_func+0x3c>
    2e68:	0006                	c.slli	zero,0x1
    2e6a:	0e00                	addi	s0,sp,784
    2e6c:	0e80                	addi	s0,sp,848
    2e6e:	0000                	unimp
    2e70:	2e01                	jal	3180 <core_init_state+0x1e4>
    2e72:	0008c903          	lbu	s2,0(a7)
        final_counts[fstate]++;
    2e76:	f400                	fsw	fs0,40(s0)
    2e78:	001f 0e00 0e64      	0xe640e00001f
    2e7e:	0000                	unimp
    2e80:	2e01                	jal	3190 <core_init_state+0x1f4>
    2e82:	0008c903          	lbu	s2,0(a7)
    2e86:	1200                	addi	s0,sp,288
    2e88:	0020                	addi	s0,sp,8
    2e8a:	0e00                	addi	s0,sp,784
    2e8c:	0cdd                	addi	s9,s9,23
    2e8e:	0000                	unimp
    2e90:	2e01                	jal	31a0 <core_init_state+0x204>
    2e92:	0008c903          	lbu	s2,0(a7)
    2e96:	4700                	lw	s0,8(a4)
    2e98:	0020                	addi	s0,sp,8
    2e9a:	0e00                	addi	s0,sp,784
    2e9c:	00000e4b          	fnmsub.s	ft8,ft0,ft0,ft0,rne
    while (*p != 0)
    2ea0:	2e01                	jal	31b0 <core_init_state+0x214>
    2ea2:	0008c903          	lbu	s2,0(a7)
    2ea6:	8800                	0x8800
    2ea8:	0020                	addi	s0,sp,8
    2eaa:	0e00                	addi	s0,sp,784
    p = memblock;
    2eac:	00000cbf c9032e01 	0xc9032e0100000cbf
    while (p < (memblock + blksize))
    2eb4:	0008                	0x8
    2eb6:	be00                	fsd	fs0,56(a2)
        if (*p != ',')
    2eb8:	0020                	addi	s0,sp,8
    2eba:	0e00                	addi	s0,sp,784
    2ebc:	0cba                	slli	s9,s9,0xe
    2ebe:	0000                	unimp
    2ec0:	2e01                	jal	31d0 <core_init_state+0x234>
    2ec2:	0008c903          	lbu	s2,0(a7)
    2ec6:	1400                	addi	s0,sp,544
            *p ^= (ee_u8)seed2;
    2ec8:	0021                	c.nop	8
    2eca:	1000                	addi	s0,sp,32
    2ecc:	5f5f 006d 2e01      	0x2e01006d5f5f
    2ed2:	0008c903          	lbu	s2,0(a7)
    2ed6:	5400                	lw	s0,40(s0)
    2ed8:	0021                	c.nop	8
    2eda:	1400                	addi	s0,sp,544
    2edc:	5b50                	lw	a2,52(a4)
    2ede:	0000                	unimp
    2ee0:	08d9                	addi	a7,a7,22
    2ee2:	0000                	unimp
    2ee4:	6014                	flw	fa3,0(s0)
    2ee6:	e200005b          	0xe200005b
        p += step;
    2eea:	0008                	0x8
    2eec:	1400                	addi	s0,sp,544
    2eee:	5b70                	lw	a2,116(a4)
    2ef0:	0000                	unimp
    2ef2:	000008eb          	0x8eb
    2ef6:	b414                	fsd	fa3,40(s0)
    while (p < (memblock + blksize))
    2ef8:	d900005b          	0xd900005b
    2efc:	0008                	0x8
    2efe:	1400                	addi	s0,sp,544
    2f00:	5bc4                	lw	s1,52(a5)
    2f02:	0000                	unimp
    2f04:	08e2                	slli	a7,a7,0x18
    2f06:	0000                	unimp
    2f08:	d414                	sw	a3,40(s0)
    2f0a:	eb00005b          	0xeb00005b
    for (i = 0; i < NUM_CORE_STATES; i++)
    2f0e:	0008                	0x8
    2f10:	0000                	unimp
    2f12:	1c15                	addi	s8,s8,-27
        crc = crcu32(final_counts[i], crc);
    2f14:	005c                	addi	a5,sp,4
    2f16:	7c00                	flw	fs0,56(s0)
    2f18:	0000                	unimp
    2f1a:	3e00                	fld	fs0,56(a2)
    2f1c:	0e000007          	vloxei8.v	v0,(zero),v0
    2f20:	0d12                	slli	s10,s10,0x4
    2f22:	0000                	unimp
    2f24:	2e01                	jal	3234 <ee_isdigit+0x20>
    2f26:	0008c903          	lbu	s2,0(a7)
    2f2a:	9500                	0x9500
    2f2c:	0021                	c.nop	8
    2f2e:	0e00                	addi	s0,sp,784
    2f30:	0e50                	addi	a2,sp,788
    2f32:	0000                	unimp
    2f34:	2e01                	jal	3244 <ee_isdigit+0x30>
    2f36:	0008c903          	lbu	s2,0(a7)
    2f3a:	b300                	fsd	fs0,32(a4)
    2f3c:	0021                	c.nop	8
    2f3e:	0e00                	addi	s0,sp,784
        crc = crcu32(track_counts[i], crc);
    2f40:	00000d17          	auipc	s10,0x0
    2f44:	2e01                	jal	3254 <ee_isdigit+0x40>
    2f46:	0008c903          	lbu	s2,0(a7)
    2f4a:	0000                	unimp
    2f4c:	0022                	c.slli	zero,0x8
    2f4e:	0e00                	addi	s0,sp,784
    2f50:	0e55                	addi	t3,t3,21
    2f52:	0000                	unimp
    2f54:	2e01                	jal	3264 <core_state_transition>
    2f56:	0008c903          	lbu	s2,0(a7)
    2f5a:	2900                	fld	fs0,16(a0)
    2f5c:	0022                	c.slli	zero,0x8
    2f5e:	0e00                	addi	s0,sp,784
    2f60:	0d69                	addi	s10,s10,26
    2f62:	0000                	unimp
    2f64:	2e01                	jal	3274 <core_state_transition+0x10>
    2f66:	00005603          	lhu	a2,0(zero) # 0 <RAM_START_ADDRESS>
    2f6a:	4700                	lw	s0,8(a4)
    for (i = 0; i < NUM_CORE_STATES; i++)
    2f6c:	0022                	c.slli	zero,0x8
    2f6e:	0e00                	addi	s0,sp,784
    2f70:	0e5f 0000 2e01      	0x2e0100000e5f
    2f76:	00005603          	lhu	a2,0(zero) # 0 <RAM_START_ADDRESS>
    2f7a:	6500                	flw	fs0,8(a0)
    2f7c:	0022                	c.slli	zero,0x8
    2f7e:	0e00                	addi	s0,sp,784
    2f80:	0d6e                	slli	s10,s10,0x1b
    2f82:	0000                	unimp
    return crc;
    2f84:	2e01                	jal	3294 <core_state_transition+0x30>
    2f86:	00005603          	lhu	a2,0(zero) # 0 <RAM_START_ADDRESS>
}
    2f8a:	8300                	0x8300
    2f8c:	0022                	c.slli	zero,0x8
    2f8e:	0e00                	addi	s0,sp,784
    2f90:	0e5a                	slli	t3,t3,0x16
    2f92:	0000                	unimp
    2f94:	2e01                	jal	32a4 <core_state_transition+0x40>
    2f96:	00005603          	lhu	a2,0(zero) # 0 <RAM_START_ADDRESS>
    2f9a:	b400                	fsd	fs0,40(s0)
{
    2f9c:	0022                	c.slli	zero,0x8
    2f9e:	1500                	addi	s0,sp,672
    2fa0:	5c20                	lw	s0,120(s0)
    2fa2:	0000                	unimp
    2fa4:	0010                	0x10
    2fa6:	0000                	unimp
    2fa8:	000006c7          	fmsub.s	fa3,ft0,ft0,ft0,rne
    2fac:	8f16                	mv	t5,t0
    2fae:	000e                	c.slli	zero,0x3
    2fb0:	0100                	addi	s0,sp,128
    2fb2:	032e                	slli	t1,t1,0xb
    2fb4:	08c9                	addi	a7,a7,18
    2fb6:	0000                	unimp
    ee_u32 total = 0, next = 0, i;
    2fb8:	5a01                	li	s4,-32
    2fba:	0c16                	slli	s8,s8,0x5
    2fbc:	000d                	c.nop	3
    2fbe:	0100                	addi	s0,sp,128
    ee_u8 *buf = 0;
    2fc0:	032e                	slli	t1,t1,0xb
    2fc2:	08c9                	addi	a7,a7,18
    size--;
    2fc4:	0000                	unimp
    2fc6:	5b01                	li	s6,-32
    2fc8:	1500                	addi	s0,sp,672
    2fca:	5c30                	lw	a2,120(s0)
    2fcc:	0000                	unimp
    2fce:	0010                	0x10
    next = 0;
    2fd0:	0000                	unimp
    2fd2:	06f1                	addi	a3,a3,28
    while ((total + next + 1) < size)
    2fd4:	0000                	unimp
    2fd6:	8f16                	mv	t5,t0
        if (next > 0)
    2fd8:	000e                	c.slli	zero,0x3
    2fda:	0100                	addi	s0,sp,128
    2fdc:	032e                	slli	t1,t1,0xb
    2fde:	08c9                	addi	a7,a7,18
            for (i = 0; i < next; i++)
    2fe0:	0000                	unimp
    2fe2:	5a01                	li	s4,-32
    2fe4:	0c16                	slli	s8,s8,0x5
    2fe6:	000d                	c.nop	3
                *(p + total + i) = buf[i];
    2fe8:	0100                	addi	s0,sp,128
    2fea:	032e                	slli	t1,t1,0xb
    2fec:	08c9                	addi	a7,a7,18
    2fee:	0000                	unimp
    2ff0:	5b01                	li	s6,-32
    2ff2:	1500                	addi	s0,sp,672
    2ff4:	5c40                	lw	s0,60(s0)
    2ff6:	0000                	unimp
    2ff8:	0010                	0x10
    2ffa:	0000                	unimp
    2ffc:	0000071b          	0x71b
    3000:	8f16                	mv	t5,t0
    3002:	000e                	c.slli	zero,0x3
    3004:	0100                	addi	s0,sp,128
    3006:	032e                	slli	t1,t1,0xb
    3008:	08c9                	addi	a7,a7,18
    300a:	0000                	unimp
    300c:	5a01                	li	s4,-32
    300e:	0c16                	slli	s8,s8,0x5
            for (i = 0; i < next; i++)
    3010:	000d                	c.nop	3
    3012:	0100                	addi	s0,sp,128
    3014:	032e                	slli	t1,t1,0xb
    3016:	08c9                	addi	a7,a7,18
    3018:	0000                	unimp
    301a:	5b01                	li	s6,-32
    301c:	1700                	addi	s0,sp,928
    301e:	0370                	addi	a2,sp,396
    3020:	0000                	unimp
    3022:	8f16                	mv	t5,t0
    3024:	000e                	c.slli	zero,0x3
    3026:	0100                	addi	s0,sp,128
            *(p + total + i) = ',';
    3028:	032e                	slli	t1,t1,0xb
    302a:	08c9                	addi	a7,a7,18
    302c:	0000                	unimp
    302e:	5a01                	li	s4,-32
    3030:	0c16                	slli	s8,s8,0x5
    3032:	000d                	c.nop	3
    3034:	0100                	addi	s0,sp,128
    3036:	032e                	slli	t1,t1,0xb
    3038:	08c9                	addi	a7,a7,18
    303a:	0000                	unimp
    303c:	5b01                	li	s6,-32
    303e:	0000                	unimp
    3040:	8812                	mv	a6,tp
    3042:	58000003          	lb	zero,1408(zero) # 580 <core_bench_list+0x134>
            total += next + 1;
    3046:	10000007          	vle128.v	v0,(zero),v0.t
    304a:	5f5f 0078 2e01      	0x2e0100785f5f
    3050:	0008c903          	lbu	s2,0(a7)
    3054:	d200                	sw	s0,32(a2)
    3056:	0022                	c.slli	zero,0x8
        seed++;
    3058:	0000                	unimp
    305a:	0003a017          	auipc	zero,0x3a
    305e:	1000                	addi	s0,sp,32
    3060:	5f5f 0078 2e01      	0x2e0100785f5f
    3066:	0008c903          	lbu	s2,0(a7)
    306a:	f000                	fsw	fs0,32(s0)
    306c:	0022                	c.slli	zero,0x8
    306e:	0000                	unimp
    3070:	1500                	addi	s0,sp,672
    3072:	5d00                	lw	s0,56(a0)
        switch (seed & 0x7)
    3074:	0000                	unimp
    3076:	0010                	0x10
    3078:	0000                	unimp
    307a:	078d                	addi	a5,a5,3
    307c:	0000                	unimp
    307e:	5f10                	lw	a2,56(a4)
    3080:	785f 0100 032f      	0x32f0100785f
    3086:	08c9                	addi	a7,a7,18
    3088:	0000                	unimp
    308a:	00002303          	lw	t1,0(zero) # 0 <RAM_START_ADDRESS>
    308e:	1800                	addi	s0,sp,48
    3090:	079f 0000 5f11      	0x5f110000079f
    3096:	785f 0100 032f      	0x32f0100785f
    309c:	08c9                	addi	a7,a7,18
    309e:	0000                	unimp
    30a0:	1800                	addi	s0,sp,48
    30a2:	07b1                	addi	a5,a5,12
    30a4:	0000                	unimp
    30a6:	5f11                	li	t5,-28
    30a8:	785f 0100 032f      	0x32f0100785f
    30ae:	08c9                	addi	a7,a7,18
    30b0:	0000                	unimp
    30b2:	1200                	addi	s0,sp,288
    30b4:	03d8                	addi	a4,sp,452
    30b6:	0000                	unimp
    30b8:	000008af          	vamoaddei8.v	zero,(zero),v0,v17,v0.t
                buf  = intpat[(seed >> 3) & 0x3];
    30bc:	000df713          	andi	a4,s11,0
    30c0:	0100                	addi	s0,sp,128
    30c2:	002c032f          	vamoaddei8.v	zero,(s8),v2,v6,v0.t
    30c6:	0000                	unimp
    30c8:	3a18                	fld	fa4,48(a2)
    30ca:	0008                	0x8
    30cc:	1300                	addi	s0,sp,416
    30ce:	0e34                	addi	a3,sp,792
    30d0:	0000                	unimp
    30d2:	2f01                	jal	37e2 <crcu16+0x4e>
    30d4:	0008c203          	lbu	tp,0(a7)
    30d8:	1300                	addi	s0,sp,416
    30da:	00000daf          	vamoaddei8.v	zero,(zero),v0,v27,v0.t
    30de:	2f01                	jal	37ee <crcu16+0x5a>
    30e0:	0008c203          	lbu	tp,0(a7)
    30e4:	1300                	addi	s0,sp,416
    30e6:	0e69                	addi	t3,t3,26
    30e8:	0000                	unimp
    30ea:	2f01                	jal	37fa <crcu16+0x66>
                next = 4;
    30ec:	0008c203          	lbu	tp,0(a7)
    30f0:	1300                	addi	s0,sp,416
    30f2:	0c8a                	slli	s9,s9,0x2
                break;
    30f4:	0000                	unimp
    30f6:	2f01                	jal	3806 <crcu16+0x72>
                buf  = floatpat[(seed >> 3) & 0x3];
    30f8:	0008c903          	lbu	s2,0(a7)
    30fc:	1300                	addi	s0,sp,416
    30fe:	0ca2                	slli	s9,s9,0x8
    3100:	0000                	unimp
    3102:	2f01                	jal	3812 <crcu16+0x7e>
    3104:	0008c903          	lbu	s2,0(a7)
    3108:	1800                	addi	s0,sp,48
    310a:	0819                	addi	a6,a6,6
    310c:	0000                	unimp
    310e:	5f11                	li	t5,-28
    3110:	785f 0100 032f      	0x32f0100785f
    3116:	08c9                	addi	a7,a7,18
    3118:	0000                	unimp
    311a:	1800                	addi	s0,sp,48
    311c:	0000082b          	0x82b
    3120:	5f11                	li	t5,-28
    3122:	785f 0100 032f      	0x32f0100785f
                next = 8;
    3128:	08c9                	addi	a7,a7,18
    312a:	0000                	unimp
    312c:	1900                	addi	s0,sp,176
    312e:	5f11                	li	t5,-28
                break;
    3130:	785f 0100 032f      	0x32f0100785f
                buf  = scipat[(seed >> 3) & 0x3];
    3136:	08c9                	addi	a7,a7,18
    3138:	0000                	unimp
    313a:	0000                	unimp
    313c:	5415                	li	s0,-27
    313e:	005e                	c.slli	zero,0x17
    3140:	1000                	addi	s0,sp,32
    3142:	0000                	unimp
    3144:	5800                	lw	s0,48(s0)
    3146:	0008                	0x8
    3148:	1000                	addi	s0,sp,32
    314a:	5f5f 0078 2f01      	0x2f0100785f5f
    3150:	0008c903          	lbu	s2,0(a7)
    3154:	1600                	addi	s0,sp,800
    3156:	00000023          	sb	zero,0(zero) # 0 <RAM_START_ADDRESS>
    315a:	6a18                	flw	fa4,16(a2)
    315c:	0008                	0x8
    315e:	1100                	addi	s0,sp,160
    3160:	5f5f 0078 2f01      	0x2f0100785f5f
                next = 8;
    3166:	0008c903          	lbu	s2,0(a7)
    316a:	0000                	unimp
                break;
    316c:	7c18                	flw	fa4,56(s0)
    316e:	0008                	0x8
                buf  = errpat[(seed >> 3) & 0x3];
    3170:	1100                	addi	s0,sp,160
    3172:	5f5f 0078 2f01      	0x2f0100785f5f
    3178:	0008c903          	lbu	s2,0(a7)
    317c:	0000                	unimp
    317e:	8e18                	0x8e18
    3180:	0008                	0x8
    3182:	1100                	addi	s0,sp,160
    3184:	5f5f 0078 2f01      	0x2f0100785f5f
    318a:	0008c903          	lbu	s2,0(a7)
    318e:	0000                	unimp
    3190:	a018                	fsd	fa4,0(s0)
    3192:	0008                	0x8
    3194:	1100                	addi	s0,sp,160
    3196:	5f5f 0078 2f01      	0x2f0100785f5f
    319c:	0008c903          	lbu	s2,0(a7)
                next = 8;
    31a0:	0000                	unimp
    31a2:	1119                	addi	sp,sp,-26
    31a4:	5f5f 0078 2f01      	0x2f0100785f5f
                break;
    31aa:	0008c903          	lbu	s2,0(a7)
                break;
    31ae:	0000                	unimp
    while ((total + next + 1) < size)
    31b0:	1700                	addi	s0,sp,928
    31b2:	03c0                	addi	s0,sp,452
    31b4:	0000                	unimp
    31b6:	000a9313          	slli	t1,s5,0x0
    31ba:	0100                	addi	s0,sp,128
    31bc:	00c0032f          	vamoaddei8.v	zero,(zero),v12,v6,v0.t
    31c0:	0000                	unimp
    31c2:	0000                	unimp
    31c4:	0402                	c.slli64	s0
    31c6:	9205                	srli	a2,a2,0x21
    size++;
    31c8:	0001                	nop
    31ca:	0200                	addi	s0,sp,256
    31cc:	0704                	addi	s1,sp,896
    31ce:	08c5                	addi	a7,a7,17
    31d0:	0000                	unimp
    31d2:	6e1a                	flw	ft8,132(sp)
    while (total < size)
    31d4:	000c                	0xc
    31d6:	6e00                	flw	fs0,24(a2)
        *(p + total) = 0;
    31d8:	000c                	0xc
    31da:	1a00                	addi	s0,sp,304
    31dc:	0e85                	addi	t4,t4,1
    31de:	0000                	unimp
    31e0:	0e85                	addi	t4,t4,1
    31e2:	0000                	unimp
    31e4:	2b1a                	fld	fs6,384(sp)
    31e6:	000e                	c.slli	zero,0x3
        total++;
    31e8:	2b00                	fld	fs0,16(a4)
    31ea:	000e                	c.slli	zero,0x3
    31ec:	1a00                	addi	s0,sp,304
    31ee:	0da5                	addi	s11,s11,9
    31f0:	0000                	unimp
    31f2:	0da5                	addi	s11,s11,9
    while (total < size)
    31f4:	0000                	unimp
    31f6:	5100                	lw	s0,32(a0)
    31f8:	0002                	c.slli64	zero
    31fa:	0400                	addi	s0,sp,512
    31fc:	3900                	fld	fs0,48(a0)
    31fe:	000d                	c.nop	3
}
    3200:	0400                	addi	s0,sp,512
    3202:	ad01                	j	3812 <crcu16+0x7e>
    3204:	000a                	c.slli	zero,0x2
    3206:	0c00                	addi	s0,sp,528
    3208:	0e9d                	addi	t4,t4,7
    320a:	0000                	unimp
    320c:	0a15                	addi	s4,s4,5
    320e:	0000                	unimp
    3210:	5ef8                	lw	a4,124(a3)
    3212:	0000                	unimp
{
    3214:	008c                	addi	a1,sp,64
    3216:	0000                	unimp
    3218:	00005b4f          	fnmadd.s	fs6,ft0,ft0,ft0,unknown
    321c:	0802                	c.slli64	a6
    321e:	bd04                	fsd	fs1,56(a0)
    3220:	0011                	c.nop	4
    3222:	0300                	addi	s0,sp,384
    3224:	0ecd                	addi	t4,t4,19
    3226:	0000                	unimp
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    3228:	5202                	lw	tp,32(sp)
    322a:	380d                	jal	2a5c <matrix_mul_matrix_bitextract+0x94>
    322c:	0000                	unimp
    322e:	0400                	addi	s0,sp,512
    3230:	0504                	addi	s1,sp,640
    3232:	6e69                	lui	t3,0x1a
    3234:	0074                	addi	a3,sp,12
    3236:	0102                	c.slli64	sp
    3238:	1306                	slli	t1,t1,0x21
    323a:	0002                	c.slli64	zero
    323c:	0200                	addi	s0,sp,256
    323e:	0508                	addi	a0,sp,640
    3240:	018d                	addi	gp,gp,3
    3242:	0000                	unimp
    3244:	0102                	c.slli64	sp
    3246:	1108                	addi	a0,sp,160
    3248:	0002                	c.slli64	zero
    324a:	0200                	addi	s0,sp,256
    324c:	0704                	addi	s1,sp,896
    324e:	08ca                	slli	a7,a7,0x12
    return retval;
    3250:	0000                	unimp
    3252:	0802                	c.slli64	a6
}
    3254:	0008c007          	flq	ft0,0(a7)
    3258:	0200                	addi	s0,sp,256
    325a:	0702                	c.slli64	a4
    325c:	025a                	slli	tp,tp,0x16
    325e:	0000                	unimp
    3260:	000aa603          	lw	a2,0(s5) # 4000 <skip_atoi+0x5c>
{
    3264:	0300                	addi	s0,sp,384
    3266:	0f48                	addi	a0,sp,916
    3268:	0025                	c.nop	9
    326a:	0000                	unimp
    326c:	0805                	addi	a6,a6,1
    326e:	bf034f03          	lbu	t5,-1040(t1)
    3272:	0000                	unimp
    3274:	0600                	addi	s0,sp,768
    3276:	00000a0f          	0xa0f
    327a:	540e5703          	lhu	a4,1344(t3) # 1a540 <RAM_SIZE+0xa540>
    ee_u8 *         str = *instr;
    327e:	0000                	unimp
    3280:	0400                	addi	s0,sp,512
    3282:	0020                	addi	s0,sp,8
    3284:	0600                	addi	s0,sp,768
    3286:	00000b8f          	0xb8f
    enum CORE_STATE state = CORE_START;
    328a:	540e5803          	lhu	a6,1344(t3)
    for (; *str && state != CORE_INVALID; str++)
    328e:	0000                	unimp
        NEXT_SYMBOL = *str;
    3290:	0400                	addi	s0,sp,512
    3292:	0c14                	addi	a3,sp,528
    3294:	0704                	addi	s1,sp,896
    3296:	7865                	lui	a6,0xffff9
    3298:	0070                	addi	a2,sp,12
    329a:	540e5903          	lhu	s2,1344(t3)
        if (NEXT_SYMBOL == ',') /* end of this input */
    329e:	0000                	unimp
    32a0:	0400                	addi	s0,sp,512
    32a2:	0604010b          	0x604010b
    32a6:	08e2                	slli	a7,a7,0x18
            str++;
    32a8:	0000                	unimp
    32aa:	540e5a03          	lhu	s4,1344(t3)
    32ae:	0000                	unimp
    32b0:	0400                	addi	s0,sp,512
    32b2:	0001                	nop
            break;
    32b4:	0004                	0x4
    32b6:	3008                	fld	fa0,32(s0)
    32b8:	000c                	0xc
    32ba:	0800                	addi	s0,sp,16
    32bc:	e5074c03          	lbu	s8,-432(a4)
    32c0:	0000                	unimp
    32c2:	0900                	addi	s0,sp,144
    32c4:	6c66                	flw	fs8,88(sp)
    32c6:	0074                	addi	a3,sp,12
    32c8:	690a4e03          	lbu	t3,1680(s4)
    32cc:	0000                	unimp
    32ce:	0a00                	addi	s0,sp,272
    32d0:	0c69                	addi	s8,s8,26
    32d2:	0000                	unimp
    32d4:	75055c03          	lhu	s8,1872(a0)
    32d8:	0000                	unimp
    32da:	0000                	unimp
    32dc:	000e950b          	0xe950b
                if (ee_isdigit(NEXT_SYMBOL))
    32e0:	0100                	addi	s0,sp,128
    32e2:	002c0123          	sb	sp,2(s8) # 6e65821c <RAM_SIZE+0x6e64821c>
    32e6:	0000                	unimp
    32e8:	5ef8                	lw	a4,124(a3)
    32ea:	0000                	unimp
    32ec:	008c                	addi	a1,sp,64
    32ee:	0000                	unimp
    32f0:	9c01                	0x9c01
    32f2:	0246                	slli	tp,tp,0x11
                    state = CORE_INT;
    32f4:	0000                	unimp
    32f6:	610c                	flw	fa1,0(a0)
    32f8:	0100                	addi	s0,sp,128
    32fa:	00691123          	sh	t1,2(s2) # 1002 <iterate+0x102>
    32fe:	0000                	unimp
                else if (NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-')
    3300:	2329                	jal	380a <crcu16+0x76>
    3302:	0000                	unimp
    3304:	620c                	flw	fa1,0(a2)
    3306:	0100                	addi	s0,sp,128
    3308:	00691b23          	sh	t1,22(s2)
    330c:	0000                	unimp
    330e:	2351                	jal	3892 <crcu32+0x76>
    3310:	0000                	unimp
    3312:	700d                	c.lui	zero,0xfffe3
    3314:	0100000b          	0x100000b
                    state = CORE_S1;
    3318:	0325                	addi	t1,t1,9
    331a:	0038                	addi	a4,sp,8
    331c:	0000                	unimp
    331e:	0d00                	addi	s0,sp,656
    3320:	0c80                	addi	s0,sp,592
    3322:	0000                	unimp
                else if (NEXT_SYMBOL == '.')
    3324:	2501                	jal	3924 <check_data_types+0x38>
    3326:	00003803          	0x3803
    332a:	0000                	unimp
    332c:	410e                	lw	sp,192(sp)
    332e:	635f 0100 0326      	0x3260100635f
                    state = CORE_FLOAT;
    3334:	0246                	slli	tp,tp,0x11
    3336:	0000                	unimp
    3338:	735f410f          	0x735f410f
                    state = CORE_INVALID;
    333c:	0100                	addi	s0,sp,128
    333e:	0326                	slli	t1,t1,0x9
    3340:	0246                	slli	tp,tp,0x11
    3342:	0000                	unimp
                    transition_count[CORE_INVALID]++;
    3344:	7b06                	flw	fs6,96(sp)
    3346:	0800                	addi	s0,sp,16
    3348:	1aff                	0x1aff
    334a:	0f9f 5f41 0065      	0x655f410f9f
    3350:	2601                	jal	3650 <get_seed_32+0x50>
    3352:	00024603          	lbu	a2,0(tp) # 3000 <core_init_state+0x64>
    3356:	0100                	addi	s0,sp,128
                transition_count[CORE_START]++;
    3358:	105e                	c.slli	zero,0x37
    335a:	0b9a                	slli	s7,s7,0x6
    335c:	0000                	unimp
    335e:	2601                	jal	365e <get_seed_32+0x5e>
    3360:	00024d03          	lbu	s10,0(tp) # 0 <RAM_START_ADDRESS>
    3364:	0100                	addi	s0,sp,128
    3366:	1056                	c.slli	zero,0x35
    3368:	0b66                	slli	s6,s6,0x19
    336a:	0000                	unimp
                break;
    336c:	2601                	jal	366c <get_seed_32+0x6c>
    336e:	00024d03          	lbu	s10,0(tp) # 0 <RAM_START_ADDRESS>
                if (ee_isdigit(NEXT_SYMBOL))
    3372:	0100                	addi	s0,sp,128
    3374:	0e61                	addi	t3,t3,24
    3376:	5f42                	lw	t5,48(sp)
    3378:	27010063          	beq	sp,a6,35d8 <core_state_transition+0x374>
    337c:	00024603          	lbu	a2,0(tp) # 0 <RAM_START_ADDRESS>
    3380:	0f00                	addi	s0,sp,912
    3382:	5f42                	lw	t5,48(sp)
                    state = CORE_INT;
    3384:	27010073          	0x27010073
    3388:	00024603          	lbu	a2,0(tp) # 0 <RAM_START_ADDRESS>
                    transition_count[CORE_S1]++;
    338c:	0600                	addi	s0,sp,768
    338e:	007d                	c.nop	31
    3390:	ff08                	fsw	fa0,56(a4)
    3392:	9f1a                	add	t5,t5,t1
    3394:	655f420f          	0x655f420f
    3398:	0100                	addi	s0,sp,128
    339a:	02460327          	0x2460327
    339e:	0000                	unimp
                break;
    33a0:	6001                	0x6001
    33a2:	b411                	j	2da6 <core_bench_state+0xb6>
                else if (NEXT_SYMBOL == '.')
    33a4:	0100000b          	0x100000b
    33a8:	024d0327          	0x24d0327
    33ac:	0000                	unimp
    33ae:	2399                	jal	38f4 <check_data_types+0x8>
                    state = CORE_FLOAT;
    33b0:	0000                	unimp
    33b2:	b910                	fsd	fa2,48(a0)
    33b4:	0100000b          	0x100000b
                    transition_count[CORE_S1]++;
    33b8:	024d0327          	0x24d0327
    33bc:	0000                	unimp
    33be:	5f01                	li	t5,-32
    33c0:	0100720f          	0x100720f
    33c4:	0b28                	addi	a0,sp,408
    33c6:	002c                	addi	a1,sp,8
    33c8:	0000                	unimp
    33ca:	5a01                	li	s4,-32
                break;
    33cc:	f012                	fsw	ft4,32(sp)
    33ce:	eb000003          	lb	zero,-336(zero) # fffffeb0 <RAM_SIZE+0xfffefeb0>
                    state = CORE_INVALID;
    33d2:	0001                	nop
    33d4:	1300                	addi	s0,sp,416
    33d6:	0b9f 0000 2b01      	0x2b0100000b9f
                    transition_count[CORE_S1]++;
    33dc:	0000bf03          	0xbf03
    33e0:	0000                	unimp
    33e2:	1812                	slli	a6,a6,0x24
    33e4:	0004                	0x4
    33e6:	0100                	addi	s0,sp,128
    33e8:	0002                	c.slli64	zero
    33ea:	1300                	addi	s0,sp,416
                break;
    33ec:	0b9f 0000 2c01      	0x2c0100000b9f
                if (NEXT_SYMBOL == '.')
    33f2:	0000bf03          	0xbf03
    33f6:	0000                	unimp
    33f8:	1314                	addi	a3,sp,416
    33fa:	0002                	c.slli64	zero
                    state = CORE_FLOAT;
    33fc:	1300                	addi	s0,sp,416
    33fe:	00000edb          	0xedb
    3402:	2d01                	jal	3a12 <cvt+0xe6>
                    transition_count[CORE_INT]++;
    3404:	00003803          	0x3803
    3408:	0000                	unimp
    340a:	2514                	fld	fa3,8(a0)
    340c:	0002                	c.slli64	zero
    340e:	1300                	addi	s0,sp,416
    3410:	00000edb          	0xedb
    3414:	2d01                	jal	3a24 <cvt+0xf8>
    3416:	00003803          	0x3803
                break;
    341a:	0000                	unimp
                else if (!ee_isdigit(NEXT_SYMBOL))
    341c:	3714                	fld	fa3,40(a4)
    341e:	0002                	c.slli64	zero
    3420:	1300                	addi	s0,sp,416
    3422:	00000edb          	0xedb
    3426:	2d01                	jal	3a36 <cvt+0x10a>
    3428:	00003803          	0x3803
    342c:	0000                	unimp
    342e:	1315                	addi	t1,t1,-27
                    state = CORE_INVALID;
    3430:	00000edb          	0xedb
    3434:	2d01                	jal	3a44 <cvt+0x118>
    3436:	00003803          	0x3803
                    transition_count[CORE_INT]++;
    343a:	0000                	unimp
    343c:	0200                	addi	s0,sp,256
    343e:	0504                	addi	s1,sp,640
    3440:	0192                	slli	gp,gp,0x4
    3442:	0000                	unimp
    3444:	0402                	c.slli64	s0
    3446:	0008c507          	flq	fa0,0(a7)
    344a:	0000                	unimp
                break;
    344c:	0000024f          	fnmadd.s	ft4,ft0,ft0,ft0,rne
                if (NEXT_SYMBOL == 'E' || NEXT_SYMBOL == 'e')
    3450:	0004                	0x4
    3452:	0e84                	addi	s1,sp,848
    3454:	0000                	unimp
    3456:	0104                	addi	s1,sp,128
    3458:	0aad                	addi	s5,s5,11
    345a:	0000                	unimp
    345c:	f40c                	fsw	fa1,40(s0)
    345e:	000e                	c.slli	zero,0x3
    3460:	1500                	addi	s0,sp,672
    3462:	000a                	c.slli	zero,0x2
    3464:	8400                	0x8400
    3466:	005f e400 0000      	0xe400005f
                    state = CORE_S2;
    346c:	9d00                	0x9d00
    346e:	005d                	c.nop	23
                    transition_count[CORE_FLOAT]++;
    3470:	0200                	addi	s0,sp,256
    3472:	0408                	addi	a0,sp,512
    3474:	11bd                	addi	gp,gp,-17
    3476:	0000                	unimp
    3478:	000ecd03          	lbu	s10,0(t4) # 4000 <skip_atoi+0x5c>
    347c:	0200                	addi	s0,sp,256
    347e:	0d52                	slli	s10,s10,0x14
    3480:	0038                	addi	a4,sp,8
    3482:	0000                	unimp
                break;
    3484:	0404                	addi	s1,sp,512
    3486:	6905                	lui	s2,0x1
                else if (!ee_isdigit(NEXT_SYMBOL))
    3488:	746e                	flw	fs0,248(sp)
    348a:	0200                	addi	s0,sp,256
    348c:	0601                	addi	a2,a2,0
    348e:	00000213          	li	tp,0
    3492:	0802                	c.slli64	a6
    3494:	8d05                	sub	a0,a0,s1
    3496:	0001                	nop
    3498:	0200                	addi	s0,sp,256
    349a:	0801                	addi	a6,a6,0
                    state = CORE_INVALID;
    349c:	0211                	addi	tp,tp,4
    349e:	0000                	unimp
    34a0:	0402                	c.slli64	s0
    34a2:	0008ca07          	flq	fs4,0(a7)
                    transition_count[CORE_FLOAT]++;
    34a6:	0200                	addi	s0,sp,256
    34a8:	0708                	addi	a0,sp,896
    34aa:	08c0                	addi	s0,sp,84
    34ac:	0000                	unimp
    34ae:	0202                	c.slli64	tp
    34b0:	00025a07          	vle16.v	v20,(tp),v0.t
    34b4:	0300                	addi	s0,sp,384
    34b6:	0aa6                	slli	s5,s5,0x9
                break;
    34b8:	0000                	unimp
    34ba:	250f4803          	lbu	a6,592(t5)
                if (NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-')
    34be:	0000                	unimp
    34c0:	0500                	addi	s0,sp,640
    34c2:	0308                	addi	a0,sp,384
    34c4:	00bf034f          	fnmadd.s	ft6,ft10,fa1,ft0,rne
    34c8:	0000                	unimp
    34ca:	0f06                	slli	t5,t5,0x1
    34cc:	000a                	c.slli	zero,0x2
    34ce:	0300                	addi	s0,sp,384
    34d0:	00540e57          	vadd.vv	v28,v5,v8,v0.t
                    state = CORE_EXPONENT;
    34d4:	0000                	unimp
    34d6:	2004                	fld	fs1,0(s0)
    34d8:	0000                	unimp
    34da:	8f06                	mv	t5,ra
                    transition_count[CORE_S2]++;
    34dc:	0300000b          	0x300000b
    34e0:	0e58                	addi	a4,sp,788
    34e2:	0054                	addi	a3,sp,4
    34e4:	0000                	unimp
    34e6:	1404                	addi	s1,sp,544
    34e8:	040c                	addi	a1,sp,512
    34ea:	70786507          	0x70786507
    34ee:	0300                	addi	s0,sp,384
                break;
    34f0:	0e59                	addi	t3,t3,22
    34f2:	0054                	addi	a3,sp,4
                    state = CORE_INVALID;
    34f4:	0000                	unimp
    34f6:	0b04                	addi	s1,sp,400
    34f8:	0401                	addi	s0,s0,0
    34fa:	e206                	fsw	ft1,4(sp)
                    transition_count[CORE_S2]++;
    34fc:	0008                	0x8
    34fe:	0300                	addi	s0,sp,384
    3500:	0e5a                	slli	t3,t3,0x16
    3502:	0054                	addi	a3,sp,4
    3504:	0000                	unimp
    3506:	0104                	addi	s1,sp,128
    3508:	0400                	addi	s0,sp,512
    350a:	0800                	addi	s0,sp,16
    350c:	0c30                	addi	a2,sp,536
    350e:	0000                	unimp
                break;
    3510:	0308                	addi	a0,sp,384
    3512:	074c                	addi	a1,sp,900
                if (ee_isdigit(NEXT_SYMBOL))
    3514:	00e5                	addi	ra,ra,25
    3516:	0000                	unimp
    3518:	6609                	lui	a2,0x2
    351a:	746c                	flw	fa1,108(s0)
    351c:	0300                	addi	s0,sp,384
    351e:	0a4e                	slli	s4,s4,0x13
    3520:	0069                	c.nop	26
    3522:	0000                	unimp
    3524:	690a                	flw	fs2,128(sp)
    3526:	000c                	0xc
                    state = CORE_SCIENTIFIC;
    3528:	0300                	addi	s0,sp,384
    352a:	055c                	addi	a5,sp,644
    352c:	0075                	c.nop	29
    352e:	0000                	unimp
                    transition_count[CORE_EXPONENT]++;
    3530:	0b00                	addi	s0,sp,400
    3532:	0eec                	addi	a1,sp,860
    3534:	0000                	unimp
    3536:	2301                	jal	3a36 <cvt+0x10a>
    3538:	2c01                	jal	3748 <crcu8+0xb4>
    353a:	0000                	unimp
    353c:	8400                	0x8400
    353e:	005f e400 0000      	0xe400005f
                break;
    3544:	0100                	addi	s0,sp,128
    3546:	449c                	lw	a5,8(s1)
                    state = CORE_INVALID;
    3548:	0002                	c.slli64	zero
    354a:	0c00                	addi	s0,sp,528
    354c:	0061                	c.nop	24
    354e:	2301                	jal	3a4e <cvt+0x122>
                    transition_count[CORE_EXPONENT]++;
    3550:	6911                	lui	s2,0x4
    3552:	0000                	unimp
    3554:	cd00                	sw	s0,24(a0)
    3556:	0c000023          	sb	zero,192(zero) # c0 <frame_dummy+0x1c>
    355a:	0062                	c.slli	zero,0x18
    355c:	2301                	jal	3a5c <cvt+0x130>
    355e:	0000691b          	0x691b
    3562:	f500                	fsw	fs0,40(a0)
                break;
    3564:	0d000023          	sb	a6,192(zero) # c0 <frame_dummy+0x1c>
                if (!ee_isdigit(NEXT_SYMBOL))
    3568:	0b70                	addi	a2,sp,412
    356a:	0000                	unimp
    356c:	2501                	jal	3b6c <cvt+0x240>
    356e:	00003803          	0x3803
    3572:	0000                	unimp
    3574:	800d                	srli	s0,s0,0x3
    3576:	000c                	0xc
    3578:	0100                	addi	s0,sp,128
    357a:	0325                	addi	t1,t1,9
                    state = CORE_INVALID;
    357c:	0038                	addi	a4,sp,8
    357e:	0000                	unimp
    3580:	0e00                	addi	s0,sp,784
    3582:	5f41                	li	t5,-16
                    transition_count[CORE_INVALID]++;
    3584:	26010063          	beqz	sp,37e4 <crcu16+0x50>
    3588:	00024403          	lbu	s0,0(tp) # 0 <RAM_START_ADDRESS>
    358c:	0f00                	addi	s0,sp,912
    358e:	5f41                	li	t5,-16
    3590:	26010073          	0x26010073
    3594:	00024403          	lbu	s0,0(tp) # 0 <RAM_START_ADDRESS>
                break;
    3598:	2d00                	fld	fs0,24(a0)
    359a:	0024                	addi	s1,sp,8
                break;
    359c:	1000                	addi	s0,sp,32
    359e:	5f41                	li	t5,-16
    35a0:	0065                	c.nop	25
    35a2:	2601                	jal	38a2 <crc16+0x6>
                break;
    35a4:	00024403          	lbu	s0,0(tp) # 0 <RAM_START_ADDRESS>
    35a8:	0100                	addi	s0,sp,128
    35aa:	1160                	addi	s0,sp,172
                break;
    35ac:	0b9a                	slli	s7,s7,0x6
    35ae:	0000                	unimp
    35b0:	2601                	jal	38b0 <crc16+0x14>
    35b2:	00024b03          	lbu	s6,0(tp) # 0 <RAM_START_ADDRESS>
                break;
    35b6:	0100                	addi	s0,sp,128
    for (; *str && state != CORE_INVALID; str++)
    35b8:	1156                	slli	sp,sp,0x35
    35ba:	0b66                	slli	s6,s6,0x19
    35bc:	0000                	unimp
    35be:	2601                	jal	38be <crc16+0x22>
    35c0:	00024b03          	lbu	s6,0(tp) # 0 <RAM_START_ADDRESS>
    35c4:	0100                	addi	s0,sp,128
    35c6:	0e61                	addi	t3,t3,24
    35c8:	5f42                	lw	t5,48(sp)
    35ca:	27010063          	beq	sp,a6,382a <crcu32+0xe>
    35ce:	00024403          	lbu	s0,0(tp) # 0 <RAM_START_ADDRESS>
    35d2:	1000                	addi	s0,sp,32
    35d4:	5f42                	lw	t5,48(sp)
    35d6:	27010073          	0x27010073
    35da:	00024403          	lbu	s0,0(tp) # 0 <RAM_START_ADDRESS>
    *instr = str;
    35de:	0100                	addi	s0,sp,128
    35e0:	105d                	c.nop	-9
    35e2:	5f42                	lw	t5,48(sp)
    35e4:	0065                	c.nop	25
    35e6:	2701                	jal	3ce6 <cvt+0x3ba>
    return state;
    35e8:	00024403          	lbu	s0,0(tp) # 0 <RAM_START_ADDRESS>
}
    35ec:	0100                	addi	s0,sp,128
    35ee:	0bb4125b          	0xbb4125b
    35f2:	0000                	unimp
    35f4:	2701                	jal	3cf4 <cvt+0x3c8>
    35f6:	00024b03          	lbu	s6,0(tp) # 0 <RAM_START_ADDRESS>
    35fa:	8200                	0x8200
    35fc:	0024                	addi	s1,sp,8
    35fe:	1100                	addi	s0,sp,160
{
    3600:	0bb9                	addi	s7,s7,14
    3602:	0000                	unimp
    3604:	2701                	jal	3d04 <cvt+0x3d8>
    3606:	00024b03          	lbu	s6,0(tp) # 0 <RAM_START_ADDRESS>
    360a:	0100                	addi	s0,sp,128
    360c:	105e                	c.slli	zero,0x37
    360e:	0072                	c.slli	zero,0x1c
    3610:	2801                	jal	3620 <get_seed_32+0x20>
    3612:	00002c0b          	0x2c0b
    3616:	0100                	addi	s0,sp,128
    3618:	135a                	slli	t1,t1,0x36
    361a:	0438                	addi	a4,sp,520
    361c:	0000                	unimp
    361e:	000001e3          	beqz	zero,3e20 <ecvt+0x58>
    3622:	9f14                	0x9f14
    3624:	0100000b          	0x100000b
    3628:	00bf032b          	0xbf032b
    362c:	0000                	unimp
    362e:	1300                	addi	s0,sp,416
    3630:	0450                	addi	a2,sp,516
    3632:	0000                	unimp
    3634:	01f9                	addi	gp,gp,30
    3636:	0000                	unimp
            retval = seed1_volatile;
    3638:	9f14                	0x9f14
    363a:	0100000b          	0x100000b
    363e:	032c                	addi	a1,sp,392
            break;
    3640:	000000bf 020b1500 	0x20b1500000000bf
            retval = seed2_volatile;
    3648:	0000                	unimp
    364a:	db14                	sw	a3,48(a4)
            break;
    364c:	000e                	c.slli	zero,0x3
    364e:	0100                	addi	s0,sp,128
            retval = seed3_volatile;
    3650:	032d                	addi	t1,t1,11
    3652:	0038                	addi	a4,sp,8
    3654:	0000                	unimp
    3656:	1500                	addi	s0,sp,672
    3658:	021d                	addi	tp,tp,7
    365a:	0000                	unimp
            break;
    365c:	db14                	sw	a3,48(a4)
    365e:	000e                	c.slli	zero,0x3
            retval = seed4_volatile;
    3660:	0100                	addi	s0,sp,128
    3662:	032d                	addi	t1,t1,11
    3664:	0038                	addi	a4,sp,8
    3666:	0000                	unimp
            break;
    3668:	1600                	addi	s0,sp,800
    366a:	0468                	addi	a0,sp,524
            retval = seed5_volatile;
    366c:	0000                	unimp
    366e:	2412                	fld	fs0,256(sp)
    3670:	0100000f          	fence	w,unknown
            break;
    3674:	032d                	addi	t1,t1,11
    3676:	0038                	addi	a4,sp,8
            retval = 0;
    3678:	0000                	unimp
    367a:	000024ab          	0x24ab
            break;
    367e:	3612                	fld	fa2,288(sp)
    return retval;
    3680:	0100000f          	fence	w,unknown
}
    3684:	032d                	addi	t1,t1,11
    3686:	0038                	addi	a4,sp,8
    3688:	0000                	unimp
    368a:	24ca                	fld	fs1,144(sp)
    368c:	0000                	unimp
    368e:	0000                	unimp
    3690:	0402                	c.slli64	s0
    3692:	9205                	srli	a2,a2,0x21
{
    3694:	0001                	nop
    3696:	0200                	addi	s0,sp,256
    3698:	0704                	addi	s1,sp,896
    369a:	08c5                	addi	a7,a7,17
    369c:	0000                	unimp
    369e:	4f00                	lw	s0,24(a4)
    36a0:	0002                	c.slli64	zero
    36a2:	0400                	addi	s0,sp,512
    36a4:	e200                	fsw	fs0,0(a2)
    36a6:	0400000f          	fence	o,unknown
    36aa:	ad01                	j	3cba <cvt+0x38e>
    36ac:	000a                	c.slli	zero,0x2
    36ae:	0c00                	addi	s0,sp,528
    36b0:	0f50                	addi	a2,sp,916
    36b2:	0000                	unimp
    ee_u8 i = 0, x16 = 0, carry = 0;
    36b4:	0a15                	addi	s4,s4,5
    36b6:	0000                	unimp
    36b8:	6068                	flw	fa0,68(s0)
    36ba:	0000                	unimp
    36bc:	00e4                	addi	s1,sp,76
    36be:	0000                	unimp
    for (i = 0; i < 8; i++)
    36c0:	6080                	flw	fs0,0(s1)
    36c2:	0000                	unimp
    36c4:	0802                	c.slli64	a6
    36c6:	bd04                	fsd	fs1,56(a0)
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    36c8:	0011                	c.nop	4
    36ca:	0300                	addi	s0,sp,384
    36cc:	0ecd                	addi	t4,t4,19
    36ce:	0000                	unimp
    36d0:	5202                	lw	tp,32(sp)
    36d2:	380d                	jal	2f04 <core_bench_state+0x214>
    36d4:	0000                	unimp
    36d6:	0400                	addi	s0,sp,512
    36d8:	0504                	addi	s1,sp,640
    36da:	6e69                	lui	t3,0x1a
    36dc:	0074                	addi	a3,sp,12
    36de:	0102                	c.slli64	sp
    36e0:	1306                	slli	t1,t1,0x21
    36e2:	0002                	c.slli64	zero
    36e4:	0200                	addi	s0,sp,256
    36e6:	0508                	addi	a0,sp,640
    36e8:	018d                	addi	gp,gp,3
    36ea:	0000                	unimp
    36ec:	0102                	c.slli64	sp
    36ee:	1108                	addi	a0,sp,160
        data >>= 1;
    36f0:	0002                	c.slli64	zero
    36f2:	0200                	addi	s0,sp,256
    36f4:	0704                	addi	s1,sp,896
    36f6:	08ca                	slli	a7,a7,0x12
    36f8:	0000                	unimp
    36fa:	0802                	c.slli64	a6
        if (x16 == 1)
    36fc:	0008c007          	flq	ft0,0(a7)
    3700:	0200                	addi	s0,sp,256
    3702:	0702                	c.slli64	a4
    3704:	025a                	slli	tp,tp,0x16
    3706:	0000                	unimp
            crc ^= 0x4002;
    3708:	000aa603          	lw	a2,0(s5)
    370c:	0300                	addi	s0,sp,384
    370e:	0f48                	addi	a0,sp,916
    3710:	0025                	c.nop	9
    3712:	0000                	unimp
    3714:	0805                	addi	a6,a6,1
    3716:	bf034f03          	lbu	t5,-1040(t1)
    371a:	0000                	unimp
            carry = 1;
    371c:	0600                	addi	s0,sp,768
    371e:	00000a0f          	0xa0f
    3722:	540e5703          	lhu	a4,1344(t3) # 1a540 <RAM_SIZE+0xa540>
    3726:	0000                	unimp
            carry = 0;
    3728:	0400                	addi	s0,sp,512
    372a:	0020                	addi	s0,sp,8
        crc >>= 1;
    372c:	0600                	addi	s0,sp,768
    372e:	00000b8f          	0xb8f
    3732:	540e5803          	lhu	a6,1344(t3)
    3736:	0000                	unimp
        if (carry)
    3738:	0400                	addi	s0,sp,512
    373a:	0c14                	addi	a3,sp,528
    373c:	0704                	addi	s1,sp,896
    373e:	7865                	lui	a6,0xffff9
            crc |= 0x8000;
    3740:	0070                	addi	a2,sp,12
    3742:	540e5903          	lhu	s2,1344(t3)
    3746:	0000                	unimp
    3748:	0400                	addi	s0,sp,512
    374a:	0604010b          	0x604010b
    374e:	08e2                	slli	a7,a7,0x18
    3750:	0000                	unimp
    3752:	540e5a03          	lhu	s4,1344(t3)
            crc &= 0x7fff;
    3756:	0000                	unimp
    3758:	0400                	addi	s0,sp,512
    375a:	0001                	nop
    375c:	0004                	0x4
    375e:	3008                	fld	fa0,32(s0)
    3760:	000c                	0xc
    3762:	0800                	addi	s0,sp,16
    3764:	e5074c03          	lbu	s8,-432(a4)
    for (i = 0; i < 8; i++)
    3768:	0000                	unimp
    376a:	0900                	addi	s0,sp,144
    376c:	6c66                	flw	fs8,88(sp)
    376e:	0074                	addi	a3,sp,12
    3770:	690a4e03          	lbu	t3,1680(s4)
    3774:	0000                	unimp
    3776:	0a00                	addi	s0,sp,272
    3778:	0c69                	addi	s8,s8,26
    377a:	0000                	unimp
    377c:	75055c03          	lhu	s8,1872(a0)
    return crc;
    3780:	0000                	unimp
    3782:	0000                	unimp
}
    3784:	000f480b          	0xf480b
    3788:	0100                	addi	s0,sp,128
    378a:	002c0123          	sb	sp,2(s8)
    378e:	0000                	unimp
    3790:	6068                	flw	fa0,68(s0)
    3792:	0000                	unimp
{
    3794:	00e4                	addi	s1,sp,76
    3796:	0000                	unimp
    3798:	9c01                	0x9c01
    379a:	0244                	addi	s1,sp,260
    379c:	0000                	unimp
    379e:	610c                	flw	fa1,0(a0)
    37a0:	0100                	addi	s0,sp,128
    37a2:	00691123          	sh	t1,2(s2) # 4002 <skip_atoi+0x5e>
    37a6:	0000                	unimp
    37a8:	2502                	fld	fa0,0(sp)
    37aa:	0000                	unimp
    37ac:	620c                	flw	fa1,0(a2)
    37ae:	0100                	addi	s0,sp,128
    37b0:	00691b23          	sh	t1,22(s2)
    37b4:	0000                	unimp
    37b6:	252a                	fld	fa0,136(sp)
    crc = crcu8((ee_u8)(newval), crc);
    37b8:	0000                	unimp
    37ba:	700d                	c.lui	zero,0xfffe3
    37bc:	0100000b          	0x100000b
    37c0:	0325                	addi	t1,t1,9
    37c2:	0038                	addi	a4,sp,8
    37c4:	0000                	unimp
    37c6:	0d00                	addi	s0,sp,656
    37c8:	0c80                	addi	s0,sp,592
    37ca:	0000                	unimp
    37cc:	2501                	jal	3dcc <ecvt+0x4>
    37ce:	00003803          	0x3803
    37d2:	0000                	unimp
    37d4:	410e                	lw	sp,192(sp)
    37d6:	635f 0100 0326      	0x3260100635f
    crc = crcu8((ee_u8)((newval) >> 8), crc);
    37dc:	0244                	addi	s1,sp,260
    37de:	0000                	unimp
    37e0:	735f410f          	0x735f410f
    37e4:	0100                	addi	s0,sp,128
    37e6:	0326                	slli	t1,t1,0x9
    37e8:	0244                	addi	s1,sp,260
    37ea:	0000                	unimp
    37ec:	2562                	fld	fa0,24(sp)
    37ee:	0000                	unimp
    37f0:	4110                	lw	a2,0(a0)
    37f2:	655f 0100 0326      	0x3260100655f
    37f8:	0244                	addi	s1,sp,260
    37fa:	0000                	unimp
    37fc:	6001                	0x6001
    37fe:	9a11                	andi	a2,a2,-28
    3800:	0100000b          	0x100000b
    return crc;
    3804:	0326                	slli	t1,t1,0x9
    3806:	0000024b          	fnmsub.s	ft4,ft0,ft0,ft0,rne
}
    380a:	5601                	li	a2,-32
    380c:	6611                	lui	a2,0x4
    380e:	0100000b          	0x100000b
    3812:	0326                	slli	t1,t1,0x9
    3814:	0000024b          	fnmsub.s	ft4,ft0,ft0,ft0,rne
    3818:	6101                	0x6101
    381a:	420e                	lw	tp,192(sp)
{
    381c:	635f 0100 0327      	0x3270100635f
    3822:	0244                	addi	s1,sp,260
    3824:	0000                	unimp
    3826:	4210                	lw	a2,0(a2)
    3828:	735f 0100 0327      	0x3270100735f
    382e:	0244                	addi	s1,sp,260
    3830:	0000                	unimp
    3832:	5d01                	li	s10,-32
    3834:	4210                	lw	a2,0(a2)
    3836:	655f 0100 0327      	0x3270100655f
    crc = crc16((ee_s16)newval, crc);
    383c:	0244                	addi	s1,sp,260
    383e:	0000                	unimp
    3840:	5b01                	li	s6,-32
    3842:	b412                	fsd	ft4,40(sp)
    3844:	0100000b          	0x100000b
    3848:	024b0327          	0x24b0327
    384c:	0000                	unimp
    384e:	000025b7          	lui	a1,0x2
    3852:	b911                	j	3466 <core_state_transition+0x202>
    3854:	0100000b          	0x100000b
    3858:	024b0327          	0x24b0327
    crc = crc16((ee_s16)(newval >> 16), crc);
    385c:	0000                	unimp
    385e:	5e01                	li	t3,-32
    3860:	7210                	flw	fa2,32(a2)
    3862:	0100                	addi	s0,sp,128
    3864:	0b28                	addi	a0,sp,408
    3866:	002c                	addi	a1,sp,8
    3868:	0000                	unimp
    386a:	5a01                	li	s4,-32
    386c:	00048813          	mv	a6,s1
    3870:	e300                	fsw	fs0,0(a4)
    3872:	0001                	nop
    3874:	1400                	addi	s0,sp,544
    3876:	0b9f 0000 2b01      	0x2b0100000b9f
    387c:	0000bf03          	0xbf03
    3880:	0000                	unimp
    3882:	0004a013          	slti	zero,s1,0
    return crc;
    3886:	f900                	fsw	fs0,48(a0)
}
    3888:	0001                	nop
    388a:	1400                	addi	s0,sp,544
    388c:	0b9f 0000 2c01      	0x2c0100000b9f
    3892:	0000bf03          	0xbf03
    3896:	0000                	unimp
    3898:	0b15                	addi	s6,s6,5
    389a:	0002                	c.slli64	zero
{
    389c:	1400                	addi	s0,sp,544
    389e:	00000edb          	0xedb
    38a2:	2d01                	jal	3eb2 <fcvt+0x2e>
    38a4:	00003803          	0x3803
    38a8:	0000                	unimp
    38aa:	1d15                	addi	s10,s10,-27
    38ac:	0002                	c.slli64	zero
    38ae:	1400                	addi	s0,sp,544
    38b0:	00000edb          	0xedb
    38b4:	2d01                	jal	3ec4 <fcvt+0x40>
    38b6:	00003803          	0x3803
    38ba:	0000                	unimp
    38bc:	b816                	fsd	ft5,48(sp)
    38be:	0004                	0x4
    return crcu16((ee_u16)newval, crc);
    38c0:	1200                	addi	s0,sp,288
    38c2:	0f24                	addi	s1,sp,920
    38c4:	0000                	unimp
    38c6:	2d01                	jal	3ed6 <fcvt+0x52>
    38c8:	00003803          	0x3803
    38cc:	e000                	fsw	fs0,0(s0)
    38ce:	0025                	c.nop	9
    38d0:	1200                	addi	s0,sp,288
    38d2:	0f36                	slli	t5,t5,0xd
    38d4:	0000                	unimp
    38d6:	2d01                	jal	3ee6 <fcvtbuf+0x6>
}
    38d8:	00003803          	0x3803
    38dc:	ff00                	fsw	fs0,56(a4)
    38de:	0025                	c.nop	9
    38e0:	0000                	unimp
    38e2:	0200                	addi	s0,sp,256
    38e4:	0504                	addi	s1,sp,640
    38e6:	0192                	slli	gp,gp,0x4
    38e8:	0000                	unimp
    38ea:	0402                	c.slli64	s0
{
    38ec:	0008c507          	flq	fa0,0(a7)
    38f0:	0000                	unimp
    38f2:	09e2                	slli	s3,s3,0x18
    38f4:	0000                	unimp
    38f6:	0004                	0x4
    38f8:	1140                	addi	s0,sp,164
    38fa:	0000                	unimp
    ee_u8 retval = 0;
    38fc:	0104                	addi	s1,sp,128
    38fe:	0aad                	addi	s5,s5,11
    if (retval > 0)
    3900:	0000                	unimp
    3902:	000c                	0xc
    3904:	0010                	0x10
    3906:	1500                	addi	s0,sp,672
        ee_printf("ERROR: Please modify the datatypes in core_portme.h!\n");
    3908:	000a                	c.slli	zero,0x2
    390a:	4c00                	lw	s0,24(s0)
    390c:	0061                	c.nop	24
    390e:	8c00                	0x8c00
    3910:	0006                	c.slli	zero,0x1
    3912:	6300                	flw	fs0,0(a4)
    return retval;
    3914:	02000063          	beqz	zero,3934 <cvt+0x8>
}
    3918:	0408                	addi	a0,sp,512
    391a:	11bd                	addi	gp,gp,-17
    391c:	0000                	unimp
    391e:	69050403          	lb	s0,1680(a0)
    3922:	746e                	flw	fs0,248(sp)
    3924:	0200                	addi	s0,sp,256
    3926:	0601                	addi	a2,a2,0
    3928:	00000213          	li	tp,0
{
    392c:	0802                	c.slli64	a6
    392e:	8d05                	sub	a0,a0,s1
    3930:	0001                	nop
    3932:	0200                	addi	s0,sp,256
    3934:	0801                	addi	a6,a6,0
    3936:	0211                	addi	tp,tp,4
    3938:	0000                	unimp
    393a:	0402                	c.slli64	s0
    393c:	0008ca07          	flq	fs4,0(a7)
    3940:	0200                	addi	s0,sp,256
    3942:	0708                	addi	a0,sp,896
    3944:	08c0                	addi	s0,sp,84
    3946:	0000                	unimp
    3948:	eb04                	fsw	fs1,16(a4)
    394a:	000c                	0xc
    394c:	0200                	addi	s0,sp,256
    394e:	014e                	slli	sp,sp,0x13
    3950:	6316                	flw	ft6,68(sp)
    3952:	0000                	unimp
    3954:	0200                	addi	s0,sp,256
    3956:	0702                	c.slli64	a4
    if (ndigits < 0)
    3958:	025a                	slli	tp,tp,0x16
    395a:	0000                	unimp
    395c:	a605                	j	3c7c <cvt+0x350>
    395e:	000a                	c.slli	zero,0x2
        ndigits = 0;
    3960:	0300                	addi	s0,sp,384
    3962:	0f48                	addi	a0,sp,916
    if (ndigits >= CVTBUFSIZE - 1)
    3964:	0025                	c.nop	9
    3966:	0000                	unimp
    3968:	0806                	slli	a6,a6,0x1
    396a:	c0034f03          	lbu	t5,-1024(t1)
    396e:	0000                	unimp
        ndigits = CVTBUFSIZE - 2;
    3970:	0700                	addi	s0,sp,896
    3972:	00000a0f          	0xa0f
    3976:	480e5703          	lhu	a4,1152(t3)
    r2    = 0;
    397a:	0000                	unimp
    *sign = 0;
    397c:	0400                	addi	s0,sp,512
    397e:	0020                	addi	s0,sp,8
    3980:	0700                	addi	s0,sp,896
    3982:	00000b8f          	0xb8f
    p     = &buf[0];
    3986:	480e5803          	lhu	a6,1152(t3)
    398a:	0000                	unimp
    if (arg < 0)
    398c:	0400                	addi	s0,sp,512
    398e:	0c14                	addi	a3,sp,528
    3990:	0804                	addi	s1,sp,16
    3992:	7865                	lui	a6,0xffff9
    3994:	0070                	addi	a2,sp,12
    3996:	480e5903          	lhu	s2,1152(t3)
    399a:	0000                	unimp
    399c:	0400                	addi	s0,sp,512
    399e:	0704010b          	0x704010b
    39a2:	08e2                	slli	a7,a7,0x18
    39a4:	0000                	unimp
    39a6:	480e5a03          	lhu	s4,1152(t3)
        *sign = 1;
    39aa:	0000                	unimp
    39ac:	0400                	addi	s0,sp,512
    39ae:	0001                	nop
    39b0:	0004                	0x4
    39b2:	3009                	jal	31b4 <core_init_state+0x218>
        arg   = -arg;
    39b4:	000c                	0xc
    39b6:	0800                	addi	s0,sp,16
    39b8:	e6074c03          	lbu	s8,-416(a4)
    39bc:	0000                	unimp
    39be:	0a00                	addi	s0,sp,272
    39c0:	6c66                	flw	fs8,88(sp)
    39c2:	0074                	addi	a3,sp,12
    39c4:	6a0a4e03          	lbu	t3,1696(s4)
    39c8:	0000                	unimp
    39ca:	0b00                	addi	s0,sp,400
    arg = modf(arg, &fi);
    39cc:	0c69                	addi	s8,s8,26
    39ce:	0000                	unimp
    39d0:	76055c03          	lhu	s8,1888(a0)
    39d4:	0000                	unimp
    39d6:	0000                	unimp
    39d8:	f70c                	fsw	fa1,40(a4)
    39da:	0100000f          	fence	w,unknown
    39de:	006a0123          	sb	t1,2(s4)
    39e2:	0000                	unimp
    39e4:	614c                	flw	fa1,4(a0)
    39e6:	0000                	unimp
    p1  = &buf[CVTBUFSIZE];
    39e8:	068c                	addi	a1,sp,832
    39ea:	0000                	unimp
    39ec:	9c01                	0x9c01
    39ee:	09be                	slli	s3,s3,0xf
    39f0:	0000                	unimp
    39f2:	610d                	addi	sp,sp,160
    if (fi != 0)
    39f4:	0100                	addi	s0,sp,128
    39f6:	006a1223          	sh	t1,4(s4)
    39fa:	0000                	unimp
    39fc:	00002637          	lui	a2,0x2
    3a00:	620d                	lui	tp,0x3
    3a02:	0100                	addi	s0,sp,128
    3a04:	006a1c23          	sh	t1,24(s4)
    3a08:	0000                	unimp
    3a0a:	000026bf 000b700e 	0xb700e000026bf
    3a12:	0100                	addi	s0,sp,128
    3a14:	0325                	addi	t1,t1,9
    3a16:	002c                	addi	a1,sp,8
        p1 = &buf[CVTBUFSIZE];
    3a18:	0000                	unimp
    3a1a:	00002747          	fmsub.s	fa4,ft0,ft0,ft0,rdn
    3a1e:	000c800f          	0xc800f
    3a22:	0100                	addi	s0,sp,128
        while (fi != 0)
    3a24:	0325                	addi	t1,t1,9
    3a26:	002c                	addi	a1,sp,8
            fj    = modf(fi / 10, &fi);
    3a28:	0000                	unimp
    3a2a:	1000                	addi	s0,sp,32
    3a2c:	5f41                	li	t5,-16
    3a2e:	26010063          	beqz	sp,3c8e <cvt+0x362>
    3a32:	0009be03          	0x9be03
    3a36:	6700                	flw	fs0,8(a4)
    3a38:	10000027          	vse128.v	v0,(zero),v0.t
    3a3c:	5f41                	li	t5,-16
    3a3e:	26010073          	0x26010073
    3a42:	0009be03          	0x9be03
    3a46:	b200                	fsd	fs0,32(a2)
    3a48:	10000027          	vse128.v	v0,(zero),v0.t
    3a4c:	5f41                	li	t5,-16
    3a4e:	0065                	c.nop	25
    3a50:	2601                	jal	3d50 <cvt+0x424>
    3a52:	0009be03          	0x9be03
    3a56:	fa00                	fsw	fs0,48(a2)
    3a58:	0e000027          	vsoxei8.v	v0,(zero),v0
    3a5c:	0b9a                	slli	s7,s7,0x6
    3a5e:	0000                	unimp
    3a60:	2601                	jal	3d60 <cvt+0x434>
    3a62:	0009c503          	lbu	a0,0(s3)
    3a66:	a600                	fsd	fs0,8(a2)
    3a68:	0028                	addi	a0,sp,8
    3a6a:	0e00                	addi	s0,sp,784
    3a6c:	0b66                	slli	s6,s6,0x19
    3a6e:	0000                	unimp
    3a70:	2601                	jal	3d70 <cvt+0x444>
    3a72:	0009c503          	lbu	a0,0(s3)
            *--p1 = (int)((fj + .03) * 10) + '0';
    3a76:	2800                	fld	fs0,16(s0)
    3a78:	0029                	c.nop	10
    3a7a:	1000                	addi	s0,sp,32
    3a7c:	5f42                	lw	t5,48(sp)
    3a7e:	27010063          	beq	sp,a6,3cde <cvt+0x3b2>
    3a82:	0009be03          	0x9be03
    3a86:	db00                	sw	s0,48(a4)
    3a88:	0029                	c.nop	10
    3a8a:	1000                	addi	s0,sp,32
    3a8c:	5f42                	lw	t5,48(sp)
    3a8e:	27010073          	0x27010073
    3a92:	0009be03          	0x9be03
    3a96:	1b00                	addi	s0,sp,432
    3a98:	002a                	c.slli	zero,0xa
    3a9a:	1000                	addi	s0,sp,32
    3a9c:	5f42                	lw	t5,48(sp)
    3a9e:	0065                	c.nop	25
    3aa0:	2701                	jal	41a0 <number+0x16c>
    3aa2:	0009be03          	0x9be03
    3aa6:	7300                	flw	fs0,32(a4)
    3aa8:	002a                	c.slli	zero,0xa
    3aaa:	0e00                	addi	s0,sp,784
    3aac:	0bb4                	addi	a3,sp,472
    3aae:	0000                	unimp
    3ab0:	2701                	jal	41b0 <number+0x17c>
    3ab2:	0009c503          	lbu	a0,0(s3)
    3ab6:	2a00                	fld	fs0,16(a2)
    3ab8:	0e00002b          	0xe00002b
    3abc:	0bb9                	addi	s7,s7,14
    3abe:	0000                	unimp
    3ac0:	2701                	jal	41c0 <number+0x18c>
    3ac2:	0009c503          	lbu	a0,0(s3)
    3ac6:	a100                	fsd	fs0,0(a0)
    3ac8:	1000002b          	0x1000002b
    3acc:	5f52                	lw	t5,52(sp)
    3ace:	28010063          	beqz	sp,3d4e <cvt+0x422>
    3ad2:	0009be03          	0x9be03
    3ad6:	1d00                	addi	s0,sp,688
    3ad8:	002c                	addi	a1,sp,8
    3ada:	1000                	addi	s0,sp,32
    3adc:	5f52                	lw	t5,52(sp)
    3ade:	28010073          	0x28010073
    3ae2:	0009be03          	0x9be03
    3ae6:	4800                	lw	s0,16(s0)
    3ae8:	002c                	addi	a1,sp,8
    3aea:	1000                	addi	s0,sp,32
            r2++;
    3aec:	5f52                	lw	t5,52(sp)
    3aee:	0065                	c.nop	25
    3af0:	2801                	jal	3b00 <cvt+0x1d4>
    3af2:	0009be03          	0x9be03
    3af6:	b200                	fsd	fs0,32(a2)
        while (fi != 0)
    3af8:	002c                	addi	a1,sp,8
    3afa:	0e00                	addi	s0,sp,784
    3afc:	0b4c                	addi	a1,sp,404
    3afe:	0000                	unimp
    3b00:	2801                	jal	3b10 <cvt+0x1e4>
    3b02:	0009c503          	lbu	a0,0(s3)
    3b06:	4100                	lw	s0,0(a0)
    3b08:	002d                	c.nop	11
    3b0a:	0e00                	addi	s0,sp,784
    3b0c:	0c85                	addi	s9,s9,1
    3b0e:	0000                	unimp
    3b10:	2801                	jal	3b20 <cvt+0x1f4>
    3b12:	0009c503          	lbu	a0,0(s3)
    3b16:	4500                	lw	s0,8(a0)
    3b18:	002e                	c.slli	zero,0xb
    3b1a:	1100                	addi	s0,sp,160
        while (p1 < &buf[CVTBUFSIZE])
    3b1c:	0072                	c.slli	zero,0x1c
    3b1e:	2901                	jal	3f2e <fcvtbuf+0x4e>
            *p++ = *p1++;
    3b20:	6a0a                	flw	fs4,128(sp)
    3b22:	0000                	unimp
    3b24:	1200                	addi	s0,sp,288
    3b26:	04d8                	addi	a4,sp,580
    3b28:	0000                	unimp
    3b2a:	0249                	addi	tp,tp,18
    3b2c:	0000                	unimp
    3b2e:	000b9f13          	slli	t5,s7,0x0
    3b32:	0100                	addi	s0,sp,128
    3b34:	032c                	addi	a1,sp,392
    3b36:	00c0                	addi	s0,sp,68
    3b38:	0000                	unimp
    3b3a:	1200                	addi	s0,sp,288
    3b3c:	0510                	addi	a2,sp,640
    3b3e:	0000                	unimp
        while (p1 < &buf[CVTBUFSIZE])
    3b40:	0275                	addi	tp,tp,29
    3b42:	0000                	unimp
    3b44:	1c0e                	slli	s8,s8,0x23
    3b46:	000d                	c.nop	3
    3b48:	0100                	addi	s0,sp,128
    3b4a:	032c                	addi	a1,sp,392
    3b4c:	09be                	slli	s3,s3,0xf
    3b4e:	0000                	unimp
    3b50:	2eaa                	fld	ft9,136(sp)
    3b52:	0000                	unimp
    else if (arg > 0)
    3b54:	5014                	lw	a3,32(s0)
    3b56:	0062                	c.slli	zero,0x18
    3b58:	dc00                	sw	s0,56(s0)
    3b5a:	0009                	c.nop	2
    3b5c:	1400                	addi	s0,sp,544
    3b5e:	6288                	flw	fa0,0(a3)
    3b60:	0000                	unimp
    3b62:	09dc                	addi	a5,sp,212
    3b64:	0000                	unimp
    3b66:	1200                	addi	s0,sp,288
    3b68:	0528                	addi	a0,sp,648
    3b6a:	0000                	unimp
    3b6c:	0000028b          	0x28b
        while ((fj = arg * 10) < 1)
    3b70:	000b9f13          	slli	t5,s7,0x0
            arg = fj;
    3b74:	0100                	addi	s0,sp,128
    3b76:	032d                	addi	t1,t1,11
    3b78:	00c0                	addi	s0,sp,68
    3b7a:	0000                	unimp
    3b7c:	1200                	addi	s0,sp,288
    3b7e:	0540                	addi	s0,sp,644
    3b80:	0000                	unimp
    3b82:	000002b7          	lui	t0,0x0
            r2--;
    3b86:	1c0e                	slli	s8,s8,0x23
    3b88:	000d                	c.nop	3
    3b8a:	0100                	addi	s0,sp,128
    3b8c:	032d                	addi	t1,t1,11
    3b8e:	09be                	slli	s3,s3,0xf
        while ((fj = arg * 10) < 1)
    3b90:	0000                	unimp
    3b92:	2ede                	fld	ft9,464(sp)
    3b94:	0000                	unimp
    3b96:	ec14                	fsw	fa3,24(s0)
    3b98:	0062                	c.slli	zero,0x18
    3b9a:	dc00                	sw	s0,56(s0)
    3b9c:	0009                	c.nop	2
    3b9e:	1400                	addi	s0,sp,544
    3ba0:	6328                	flw	fa0,64(a4)
    3ba2:	0000                	unimp
    3ba4:	09dc                	addi	a5,sp,212
    3ba6:	0000                	unimp
    3ba8:	1500                	addi	s0,sp,672
    3baa:	6378                	flw	fa4,68(a4)
    3bac:	0000                	unimp
    3bae:	025c                	addi	a5,sp,260
    3bb0:	0000                	unimp
    3bb2:	0000086b          	0x86b
    3bb6:	7c0e                	flw	fs8,224(sp)
    3bb8:	0010                	0x10
    3bba:	0100                	addi	s0,sp,128
    3bbc:	032e                	slli	t1,t1,0xb
    3bbe:	09cc                	addi	a1,sp,212
    3bc0:	0000                	unimp
    3bc2:	2f12                	fld	ft10,256(sp)
    3bc4:	0000                	unimp
    3bc6:	5812                	lw	a6,36(sp)
    3bc8:	0005                	c.nop	1
    3bca:	fe00                	fsw	fs0,56(a2)
    3bcc:	0e000007          	vloxei8.v	v0,(zero),v0
    3bd0:	000010a7          	fsh	ft0,1(zero) # 1 <RAM_START_ADDRESS+0x1>
    3bd4:	2e01                	jal	3ee4 <fcvtbuf+0x4>
    3bd6:	0009c503          	lbu	a0,0(s3)
    3bda:	4f00                	lw	s0,24(a4)
    3bdc:	0e00002f          	vamoswapei8.v	v0,(zero),v0,v0
    p1 = &buf[ndigits];
    3be0:	000010c3          	fmadd.s	ft1,ft0,ft0,ft0,rtz
    3be4:	2e01                	jal	3ef4 <fcvtbuf+0x14>
    3be6:	0009c503          	lbu	a0,0(s3)
    3bea:	6200                	flw	fs0,0(a2)
    3bec:	0e00002f          	vamoswapei8.v	v0,(zero),v0,v0
    if (eflag == 0)
    3bf0:	1031                	c.nop	-20
    3bf2:	0000                	unimp
    3bf4:	2e01                	jal	3f04 <fcvtbuf+0x24>
    3bf6:	0009c503          	lbu	a0,0(s3)
        p1 += r2;
    3bfa:	8000                	0x8000
    3bfc:	0e00002f          	vamoswapei8.v	v0,(zero),v0,v0
    3c00:	104d                	c.nop	-13
    3c02:	0000                	unimp
    3c04:	2e01                	jal	3f14 <fcvtbuf+0x34>
    3c06:	0009c503          	lbu	a0,0(s3)
    *decpt = r2;
    3c0a:	9300                	0x9300
    3c0c:	1200002f          	0x1200002f
    3c10:	0570                	addi	a2,sp,652
    3c12:	0000                	unimp
    if (p1 < &buf[0])
    3c14:	00000447          	fmsub.s	fs0,ft0,ft0,ft0,rne
    3c18:	120e                	slli	tp,tp,0x23
    3c1a:	000d                	c.nop	3
    3c1c:	0100                	addi	s0,sp,128
    3c1e:	032e                	slli	t1,t1,0xb
        buf[0] = '\0';
    3c20:	09c5                	addi	s3,s3,17
    3c22:	0000                	unimp
    3c24:	2fb1                	jal	4380 <number+0x34c>
    3c26:	0000                	unimp
        return buf;
    3c28:	500e                	0x500e
    3c2a:	000e                	c.slli	zero,0x3
    3c2c:	0100                	addi	s0,sp,128
    3c2e:	032e                	slli	t1,t1,0xb
        arg *= 10;
    3c30:	09c5                	addi	s3,s3,17
    3c32:	0000                	unimp
    3c34:	2fc4                	fld	fs1,152(a5)
    3c36:	0000                	unimp
    3c38:	170e                	slli	a4,a4,0x23
    3c3a:	000d                	c.nop	3
    3c3c:	0100                	addi	s0,sp,128
    3c3e:	032e                	slli	t1,t1,0xb
    3c40:	09c5                	addi	s3,s3,17
    3c42:	0000                	unimp
    3c44:	2fe2                	fld	ft11,24(sp)
    3c46:	0000                	unimp
    3c48:	550e                	lw	a0,224(sp)
    3c4a:	000e                	c.slli	zero,0x3
    3c4c:	0100                	addi	s0,sp,128
    3c4e:	032e                	slli	t1,t1,0xb
    3c50:	09c5                	addi	s3,s3,17
    3c52:	0000                	unimp
    3c54:	3000                	fld	fs0,32(s0)
    3c56:	0000                	unimp
        arg  = modf(arg, &fj);
    3c58:	690e                	flw	fs2,192(sp)
    3c5a:	000d                	c.nop	3
    3c5c:	0100                	addi	s0,sp,128
    3c5e:	032e                	slli	t1,t1,0xb
    3c60:	0056                	c.slli	zero,0x15
    3c62:	0000                	unimp
    3c64:	301e                	fld	ft0,480(sp)
    3c66:	0000                	unimp
    3c68:	5f0e                	lw	t5,224(sp)
    3c6a:	000e                	c.slli	zero,0x3
    3c6c:	0100                	addi	s0,sp,128
    3c6e:	032e                	slli	t1,t1,0xb
    3c70:	0056                	c.slli	zero,0x15
    3c72:	0000                	unimp
        *p++ = (int)fj + '0';
    3c74:	3031                	jal	3480 <core_state_transition+0x21c>
    3c76:	0000                	unimp
    3c78:	6e0e                	flw	ft8,192(sp)
    3c7a:	000d                	c.nop	3
    3c7c:	0100                	addi	s0,sp,128
    3c7e:	032e                	slli	t1,t1,0xb
    3c80:	0056                	c.slli	zero,0x15
    3c82:	0000                	unimp
    3c84:	3044                	fld	fs1,160(s0)
    3c86:	0000                	unimp
    3c88:	5a0e                	lw	s4,224(sp)
    3c8a:	000e                	c.slli	zero,0x3
    3c8c:	0100                	addi	s0,sp,128
    3c8e:	032e                	slli	t1,t1,0xb
    3c90:	0056                	c.slli	zero,0x15
    3c92:	0000                	unimp
    3c94:	00003057          	vadd.vi	v0,v0,0,v0.t
    3c98:	9015                	srli	s0,s0,0x25
    3c9a:	10000063          	beqz	zero,3d9a <cvt+0x46e>
    3c9e:	0000                	unimp
    3ca0:	d000                	sw	s0,32(s0)
    3ca2:	16000003          	lb	zero,352(zero) # 160 <calc_func+0x9c>
    3ca6:	00000e8f          	0xe8f
    while (p <= p1 && p < &buf[CVTBUFSIZE])
    3caa:	2e01                	jal	3fba <skip_atoi+0x16>
    3cac:	0009c503          	lbu	a0,0(s3)
    3cb0:	0100                	addi	s0,sp,128
    3cb2:	165a                	slli	a2,a2,0x36
    3cb4:	0d0c                	addi	a1,sp,656
    3cb6:	0000                	unimp
    3cb8:	2e01                	jal	3fc8 <skip_atoi+0x24>
    3cba:	0009c503          	lbu	a0,0(s3)
    3cbe:	0100                	addi	s0,sp,128
    3cc0:	a015005b          	0xa015005b
    if (p1 >= &buf[CVTBUFSIZE])
    3cc4:	10000063          	beqz	zero,3dc4 <cvt+0x498>
    3cc8:	0000                	unimp
    3cca:	fa00                	fsw	fs0,48(a2)
    3ccc:	16000003          	lb	zero,352(zero) # 160 <calc_func+0x9c>
    3cd0:	00000e8f          	0xe8f
        buf[CVTBUFSIZE - 1] = '\0';
    3cd4:	2e01                	jal	3fe4 <skip_atoi+0x40>
    3cd6:	0009c503          	lbu	a0,0(s3)
    3cda:	0100                	addi	s0,sp,128
    3cdc:	165a                	slli	a2,a2,0x36
    3cde:	0d0c                	addi	a1,sp,656
        return buf;
    3ce0:	0000                	unimp
    3ce2:	2e01                	jal	3ff2 <skip_atoi+0x4e>
    3ce4:	0009c503          	lbu	a0,0(s3)
    p = p1;
    3ce8:	0100                	addi	s0,sp,128
    3cea:	b015005b          	0xb015005b
    3cee:	10000063          	beqz	zero,3dee <ecvt+0x26>
    *p1 += 5;
    3cf2:	0000                	unimp
    3cf4:	2400                	fld	fs0,8(s0)
    3cf6:	0004                	0x4
    3cf8:	1600                	addi	s0,sp,800
    3cfa:	00000e8f          	0xe8f
    3cfe:	2e01                	jal	400e <skip_atoi+0x6a>
    3d00:	0009c503          	lbu	a0,0(s3)
    3d04:	0100                	addi	s0,sp,128
    3d06:	165a                	slli	a2,a2,0x36
    while (*p1 > '9')
    3d08:	0d0c                	addi	a1,sp,656
    3d0a:	0000                	unimp
        *p1 = '0';
    3d0c:	2e01                	jal	401c <skip_atoi+0x78>
    3d0e:	0009c503          	lbu	a0,0(s3)
    3d12:	0100                	addi	s0,sp,128
    3d14:	8817005b          	0x8817005b
        if (p1 > buf)
    3d18:	0005                	c.nop	1
    3d1a:	1600                	addi	s0,sp,800
    3d1c:	00000e8f          	0xe8f
    3d20:	2e01                	jal	4030 <skip_atoi+0x8c>
    3d22:	0009c503          	lbu	a0,0(s3)
            ++*--p1;
    3d26:	0100                	addi	s0,sp,128
    3d28:	165a                	slli	a2,a2,0x36
    3d2a:	0d0c                	addi	a1,sp,656
    3d2c:	0000                	unimp
    3d2e:	2e01                	jal	403e <number+0xa>
    3d30:	0009c503          	lbu	a0,0(s3)
    3d34:	0100                	addi	s0,sp,128
    3d36:	1200005b          	0x1200005b
    3d3a:	05a0                	addi	s0,sp,712
    3d3c:	0000                	unimp
    3d3e:	0569                	addi	a0,a0,26
    3d40:	0000                	unimp
    3d42:	120e                	slli	tp,tp,0x23
    3d44:	000d                	c.nop	3
    3d46:	0100                	addi	s0,sp,128
    3d48:	032e                	slli	t1,t1,0xb
    3d4a:	09c5                	addi	s3,s3,17
            *p1 = '1';
    3d4c:	0000                	unimp
    3d4e:	306a                	fld	ft0,184(sp)
    3d50:	0000                	unimp
    3d52:	500e                	0x500e
    3d54:	000e                	c.slli	zero,0x3
    3d56:	0100                	addi	s0,sp,128
            (*decpt)++;
    3d58:	032e                	slli	t1,t1,0xb
    3d5a:	09c5                	addi	s3,s3,17
    3d5c:	0000                	unimp
    3d5e:	3088                	fld	fa0,32(s1)
    3d60:	0000                	unimp
    3d62:	170e                	slli	a4,a4,0x23
    3d64:	000d                	c.nop	3
    3d66:	0100                	addi	s0,sp,128
    3d68:	032e                	slli	t1,t1,0xb
    3d6a:	09c5                	addi	s3,s3,17
            if (eflag == 0)
    3d6c:	0000                	unimp
    3d6e:	30b1                	jal	35ba <core_state_transition+0x356>
    3d70:	0000                	unimp
    3d72:	550e                	lw	a0,224(sp)
                if (p > buf)
    3d74:	000e                	c.slli	zero,0x3
    3d76:	0100                	addi	s0,sp,128
    3d78:	032e                	slli	t1,t1,0xb
    3d7a:	09c5                	addi	s3,s3,17
    3d7c:	0000                	unimp
    3d7e:	30c4                	fld	fs1,160(s1)
                    *p = '0';
    3d80:	0000                	unimp
    3d82:	000d6913          	ori	s2,s10,0
    3d86:	0100                	addi	s0,sp,128
    3d88:	032e                	slli	t1,t1,0xb
    3d8a:	0056                	c.slli	zero,0x15
                p++;
    3d8c:	0000                	unimp
    3d8e:	000e5f13          	srli	t5,t3,0x0
    3d92:	0100                	addi	s0,sp,128
    3d94:	032e                	slli	t1,t1,0xb
    3d96:	0056                	c.slli	zero,0x15
    while (*p1 > '9')
    3d98:	0000                	unimp
    3d9a:	6e0e                	flw	ft8,192(sp)
    3d9c:	000d                	c.nop	3
    3d9e:	0100                	addi	s0,sp,128
    3da0:	032e                	slli	t1,t1,0xb
    3da2:	0056                	c.slli	zero,0x15
    3da4:	0000                	unimp
    3da6:	30e2                	fld	ft1,56(sp)
    *p = '\0';
    3da8:	0000                	unimp
    3daa:	5a0e                	lw	s4,224(sp)
    3dac:	000e                	c.slli	zero,0x3
    3dae:	0100                	addi	s0,sp,128
    return buf;
    3db0:	032e                	slli	t1,t1,0xb
    3db2:	0056                	c.slli	zero,0x15
}
    3db4:	0000                	unimp
    3db6:	30f5                	jal	36a2 <crcu8+0xe>
    3db8:	0000                	unimp
    3dba:	0015                	c.nop	5
    3dbc:	0064                	addi	s1,sp,12
    3dbe:	1000                	addi	s0,sp,32
    3dc0:	0000                	unimp
    3dc2:	f200                	fsw	fs0,32(a2)
    3dc4:	0004                	0x4
    3dc6:	1600                	addi	s0,sp,800
{
    3dc8:	00000e8f          	0xe8f
    3dcc:	2e01                	jal	40dc <number+0xa8>
    3dce:	0009c503          	lbu	a0,0(s3)
    3dd2:	0100                	addi	s0,sp,128
    3dd4:	165a                	slli	a2,a2,0x36
    3dd6:	0d0c                	addi	a1,sp,656
    3dd8:	0000                	unimp
    3dda:	2e01                	jal	40ea <number+0xb6>
    3ddc:	0009c503          	lbu	a0,0(s3)
    3de0:	0100                	addi	s0,sp,128
    3de2:	1015005b          	0x1015005b
    3de6:	0064                	addi	s1,sp,12
    3de8:	1000                	addi	s0,sp,32
    3dea:	0000                	unimp
    return cvt(arg, ndigits, decpt, sign, CVTBUF, 1);
    3dec:	1c00                	addi	s0,sp,560
    3dee:	0005                	c.nop	1
    3df0:	1600                	addi	s0,sp,800
    3df2:	00000e8f          	0xe8f
    3df6:	2e01                	jal	4106 <number+0xd2>
    3df8:	0009c503          	lbu	a0,0(s3)
    3dfc:	0100                	addi	s0,sp,128
    3dfe:	165a                	slli	a2,a2,0x36
    3e00:	0d0c                	addi	a1,sp,656
    3e02:	0000                	unimp
    3e04:	2e01                	jal	4114 <number+0xe0>
    3e06:	0009c503          	lbu	a0,0(s3)
    3e0a:	0100                	addi	s0,sp,128
    3e0c:	2015005b          	0x2015005b
}
    3e10:	0064                	addi	s1,sp,12
    3e12:	1000                	addi	s0,sp,32
    3e14:	0000                	unimp
    3e16:	4600                	lw	s0,8(a2)
    3e18:	0005                	c.nop	1
    3e1a:	1600                	addi	s0,sp,800
    3e1c:	00000e8f          	0xe8f
    3e20:	2e01                	jal	4130 <number+0xfc>
    3e22:	0009c503          	lbu	a0,0(s3)
{
    3e26:	0100                	addi	s0,sp,128
    3e28:	165a                	slli	a2,a2,0x36
    3e2a:	0d0c                	addi	a1,sp,656
    3e2c:	0000                	unimp
    3e2e:	2e01                	jal	413e <number+0x10a>
    3e30:	0009c503          	lbu	a0,0(s3)
    3e34:	0100                	addi	s0,sp,128
    3e36:	c017005b          	0xc017005b
    3e3a:	0005                	c.nop	1
    3e3c:	1600                	addi	s0,sp,800
    3e3e:	00000e8f          	0xe8f
    3e42:	2e01                	jal	4152 <number+0x11e>
    3e44:	0009c503          	lbu	a0,0(s3)
    3e48:	0100                	addi	s0,sp,128
    3e4a:	165a                	slli	a2,a2,0x36
    return cvt(arg, ndigits, decpt, sign, buf, 1);
    3e4c:	0d0c                	addi	a1,sp,656
    3e4e:	0000                	unimp
    3e50:	2e01                	jal	4160 <number+0x12c>
    3e52:	0009c503          	lbu	a0,0(s3)
    3e56:	0100                	addi	s0,sp,128
    3e58:	1200005b          	0x1200005b
    3e5c:	05d8                	addi	a4,sp,708
    3e5e:	0000                	unimp
    3e60:	0000068b          	0x68b
    3e64:	120e                	slli	tp,tp,0x23
    3e66:	000d                	c.nop	3
    3e68:	0100                	addi	s0,sp,128
    3e6a:	032e                	slli	t1,t1,0xb
    3e6c:	09c5                	addi	s3,s3,17
    3e6e:	0000                	unimp
}
    3e70:	3108                	fld	fa0,32(a0)
    3e72:	0000                	unimp
    3e74:	500e                	0x500e
    3e76:	000e                	c.slli	zero,0x3
    3e78:	0100                	addi	s0,sp,128
    3e7a:	032e                	slli	t1,t1,0xb
    3e7c:	09c5                	addi	s3,s3,17
    3e7e:	0000                	unimp
    3e80:	3126                	fld	ft2,104(sp)
    3e82:	0000                	unimp
{
    3e84:	170e                	slli	a4,a4,0x23
    3e86:	000d                	c.nop	3
    3e88:	0100                	addi	s0,sp,128
    3e8a:	032e                	slli	t1,t1,0xb
    3e8c:	09c5                	addi	s3,s3,17
    3e8e:	0000                	unimp
    3e90:	3144                	fld	fs1,160(a0)
    3e92:	0000                	unimp
    3e94:	550e                	lw	a0,224(sp)
    3e96:	000e                	c.slli	zero,0x3
    3e98:	0100                	addi	s0,sp,128
    3e9a:	032e                	slli	t1,t1,0xb
    3e9c:	09c5                	addi	s3,s3,17
    3e9e:	0000                	unimp
    3ea0:	3162                	fld	ft2,56(sp)
    3ea2:	0000                	unimp
    3ea4:	000d6913          	ori	s2,s10,0
    return cvt(arg, ndigits, decpt, sign, CVTBUF, 0);
    3ea8:	0100                	addi	s0,sp,128
    3eaa:	032e                	slli	t1,t1,0xb
    3eac:	0056                	c.slli	zero,0x15
    3eae:	0000                	unimp
    3eb0:	000e5f13          	srli	t5,t3,0x0
    3eb4:	0100                	addi	s0,sp,128
    3eb6:	032e                	slli	t1,t1,0xb
    3eb8:	0056                	c.slli	zero,0x15
    3eba:	0000                	unimp
    3ebc:	6e0e                	flw	ft8,192(sp)
    3ebe:	000d                	c.nop	3
    3ec0:	0100                	addi	s0,sp,128
    3ec2:	032e                	slli	t1,t1,0xb
    3ec4:	0056                	c.slli	zero,0x15
    3ec6:	0000                	unimp
    3ec8:	3180                	fld	fs0,32(a1)
    3eca:	0000                	unimp
}
    3ecc:	5a0e                	lw	s4,224(sp)
    3ece:	000e                	c.slli	zero,0x3
    3ed0:	0100                	addi	s0,sp,128
    3ed2:	032e                	slli	t1,t1,0xb
    3ed4:	0056                	c.slli	zero,0x15
    3ed6:	0000                	unimp
    3ed8:	319e                	fld	ft3,480(sp)
    3eda:	0000                	unimp
    3edc:	8415                	srai	s0,s0,0x5
    3ede:	0064                	addi	s1,sp,12
{
    3ee0:	1000                	addi	s0,sp,32
    3ee2:	0000                	unimp
    3ee4:	1400                	addi	s0,sp,544
    3ee6:	0006                	c.slli	zero,0x1
    3ee8:	1600                	addi	s0,sp,800
    3eea:	00000e8f          	0xe8f
    3eee:	2e01                	jal	41fe <number+0x1ca>
    3ef0:	0009c503          	lbu	a0,0(s3)
    3ef4:	0100                	addi	s0,sp,128
    3ef6:	165a                	slli	a2,a2,0x36
    3ef8:	0d0c                	addi	a1,sp,656
    3efa:	0000                	unimp
    3efc:	2e01                	jal	420c <number+0x1d8>
    3efe:	0009c503          	lbu	a0,0(s3)
    3f02:	0100                	addi	s0,sp,128
    3f04:	9415005b          	0x9415005b
    return cvt(arg, ndigits, decpt, sign, buf, 0);
    3f08:	0064                	addi	s1,sp,12
    3f0a:	1000                	addi	s0,sp,32
    3f0c:	0000                	unimp
    3f0e:	3e00                	fld	fs0,56(a2)
    3f10:	0006                	c.slli	zero,0x1
    3f12:	1600                	addi	s0,sp,800
    3f14:	00000e8f          	0xe8f
    3f18:	2e01                	jal	4228 <number+0x1f4>
    3f1a:	0009c503          	lbu	a0,0(s3)
    3f1e:	0100                	addi	s0,sp,128
    3f20:	165a                	slli	a2,a2,0x36
    3f22:	0d0c                	addi	a1,sp,656
    3f24:	0000                	unimp
    3f26:	2e01                	jal	4236 <number+0x202>
    3f28:	0009c503          	lbu	a0,0(s3)
}
    3f2c:	0100                	addi	s0,sp,128
    3f2e:	a415005b          	0xa415005b
    3f32:	0064                	addi	s1,sp,12
    3f34:	1000                	addi	s0,sp,32
    3f36:	0000                	unimp
    3f38:	6800                	flw	fs0,16(s0)
    3f3a:	0006                	c.slli	zero,0x1
    3f3c:	1600                	addi	s0,sp,800
    3f3e:	00000e8f          	0xe8f
{
    3f42:	2e01                	jal	4252 <number+0x21e>
    3f44:	0009c503          	lbu	a0,0(s3)
    3f48:	0100                	addi	s0,sp,128
    3f4a:	165a                	slli	a2,a2,0x36
    3f4c:	0d0c                	addi	a1,sp,656
    3f4e:	0000                	unimp
    3f50:	2e01                	jal	4260 <number+0x22c>
    3f52:	0009c503          	lbu	a0,0(s3)
    for (sc = s; *sc != '\0' && count--; ++sc)
    3f56:	0100                	addi	s0,sp,128
    3f58:	f017005b          	0xf017005b
    3f5c:	0005                	c.nop	1
    3f5e:	1600                	addi	s0,sp,800
    3f60:	00000e8f          	0xe8f
    3f64:	2e01                	jal	4274 <number+0x240>
    3f66:	0009c503          	lbu	a0,0(s3)
    3f6a:	0100                	addi	s0,sp,128
    3f6c:	165a                	slli	a2,a2,0x36
    3f6e:	0d0c                	addi	a1,sp,656
    3f70:	0000                	unimp
    3f72:	2e01                	jal	4282 <number+0x24e>
    3f74:	0009c503          	lbu	a0,0(s3)
    3f78:	0100                	addi	s0,sp,128
    3f7a:	1200005b          	0x1200005b
    3f7e:	0608                	addi	a0,sp,768
    3f80:	0000                	unimp
    3f82:	07ad                	addi	a5,a5,11
    3f84:	0000                	unimp
    3f86:	120e                	slli	tp,tp,0x23
    return sc - s;
    3f88:	000d                	c.nop	3
    3f8a:	0100                	addi	s0,sp,128
    3f8c:	032e                	slli	t1,t1,0xb
    3f8e:	09c5                	addi	s3,s3,17
    3f90:	0000                	unimp
    3f92:	31b1                	jal	3bde <cvt+0x2b2>
}
    3f94:	0000                	unimp
    3f96:	500e                	0x500e
    3f98:	000e                	c.slli	zero,0x3
    3f9a:	0100                	addi	s0,sp,128
    3f9c:	032e                	slli	t1,t1,0xb
    3f9e:	09c5                	addi	s3,s3,17
    3fa0:	0000                	unimp
    3fa2:	31da                	fld	ft3,432(sp)
{
    3fa4:	0000                	unimp
    3fa6:	170e                	slli	a4,a4,0x23
    3fa8:	000d                	c.nop	3
    3faa:	0100                	addi	s0,sp,128
    3fac:	032e                	slli	t1,t1,0xb
    3fae:	09c5                	addi	s3,s3,17
    3fb0:	0000                	unimp
    3fb2:	00003203          	0x3203
    int i = 0;
    3fb6:	550e                	lw	a0,224(sp)
    while (is_digit(**s))
    3fb8:	000e                	c.slli	zero,0x3
    3fba:	0100                	addi	s0,sp,128
        i = i * 10 + *((*s)++) - '0';
    3fbc:	032e                	slli	t1,t1,0xb
    3fbe:	09c5                	addi	s3,s3,17
    3fc0:	0000                	unimp
    3fc2:	3221                	jal	38ca <crc16+0x2e>
    3fc4:	0000                	unimp
    3fc6:	000d6913          	ori	s2,s10,0
    3fca:	0100                	addi	s0,sp,128
    3fcc:	032e                	slli	t1,t1,0xb
    3fce:	0056                	c.slli	zero,0x15
    3fd0:	0000                	unimp
    3fd2:	000e5f13          	srli	t5,t3,0x0
    3fd6:	0100                	addi	s0,sp,128
    3fd8:	032e                	slli	t1,t1,0xb
    3fda:	0056                	c.slli	zero,0x15
    3fdc:	0000                	unimp
    3fde:	6e0e                	flw	ft8,192(sp)
    3fe0:	000d                	c.nop	3
    3fe2:	0100                	addi	s0,sp,128
    3fe4:	032e                	slli	t1,t1,0xb
    3fe6:	0056                	c.slli	zero,0x15
    3fe8:	0000                	unimp
    3fea:	0000323f 000e5a0e 	0xe5a0e0000323f
    3ff2:	0100                	addi	s0,sp,128
    3ff4:	032e                	slli	t1,t1,0xb
    3ff6:	0056                	c.slli	zero,0x15
    while (is_digit(**s))
    3ff8:	0000                	unimp
    3ffa:	325d                	jal	39a0 <cvt+0x74>
    3ffc:	0000                	unimp
    3ffe:	f815                	bnez	s0,3f32 <fcvtbuf+0x52>
    4000:	0064                	addi	s1,sp,12
    4002:	1000                	addi	s0,sp,32
    4004:	0000                	unimp
    4006:	3600                	fld	fs0,40(a2)
    4008:	16000007          	0x16000007
    400c:	00000e8f          	0xe8f
    4010:	2e01                	jal	4320 <number+0x2ec>
    4012:	0009c503          	lbu	a0,0(s3)
    4016:	0100                	addi	s0,sp,128
    4018:	165a                	slli	a2,a2,0x36
    401a:	0d0c                	addi	a1,sp,656
    401c:	0000                	unimp
    401e:	2e01                	jal	432e <number+0x2fa>
    return i;
    4020:	0009c503          	lbu	a0,0(s3)
}
    4024:	0100                	addi	s0,sp,128
    4026:	0815005b          	0x815005b
    402a:	0065                	c.nop	25
    402c:	1000                	addi	s0,sp,32
    402e:	0000                	unimp
    4030:	6000                	flw	fs0,0(s0)
    4032:	16000007          	0x16000007
{
    4036:	00000e8f          	0xe8f
    403a:	2e01                	jal	434a <number+0x316>
    403c:	0009c503          	lbu	a0,0(s3)
    4040:	0100                	addi	s0,sp,128
    4042:	165a                	slli	a2,a2,0x36
    4044:	0d0c                	addi	a1,sp,656
    4046:	0000                	unimp
    4048:	2e01                	jal	4358 <number+0x324>
    404a:	0009c503          	lbu	a0,0(s3)
    404e:	0100                	addi	s0,sp,128
    4050:	1815005b          	0x1815005b
    4054:	0065                	c.nop	25
    4056:	1000                	addi	s0,sp,32
    4058:	0000                	unimp
    405a:	8a00                	0x8a00
    char *dig = digits;
    405c:	16000007          	0x16000007
    4060:	00000e8f          	0xe8f
    4064:	2e01                	jal	4374 <number+0x340>
    4066:	0009c503          	lbu	a0,0(s3)
    if (type & UPPERCASE)
    406a:	0100                	addi	s0,sp,128
    406c:	165a                	slli	a2,a2,0x36
    406e:	0d0c                	addi	a1,sp,656
    4070:	0000                	unimp
    4072:	2e01                	jal	4382 <number+0x34e>
        dig = upper_digits;
    4074:	0009c503          	lbu	a0,0(s3)
    4078:	0100                	addi	s0,sp,128
    407a:	3017005b          	0x3017005b
    if (type & LEFT)
    407e:	0006                	c.slli	zero,0x1
    4080:	1600                	addi	s0,sp,800
    4082:	00000e8f          	0xe8f
    4086:	2e01                	jal	4396 <number+0x362>
        type &= ~ZEROPAD;
    4088:	0009c503          	lbu	a0,0(s3)
    408c:	0100                	addi	s0,sp,128
    408e:	165a                	slli	a2,a2,0x36
    4090:	0d0c                	addi	a1,sp,656
    4092:	0000                	unimp
    if (base < 2 || base > 36)
    4094:	2e01                	jal	43a4 <number+0x370>
    4096:	0009c503          	lbu	a0,0(s3)
    409a:	0100                	addi	s0,sp,128
    409c:	1200005b          	0x1200005b
    40a0:	0648                	addi	a0,sp,772
    40a2:	0000                	unimp
    40a4:	000007d7          	vadd.vv	v15,v0,v0,v0.t
    40a8:	940e                	add	s0,s0,gp
    40aa:	0010                	0x10
        return 0;
    40ac:	0100                	addi	s0,sp,128
    40ae:	032e                	slli	t1,t1,0xb
    40b0:	09c5                	addi	s3,s3,17
    40b2:	0000                	unimp
    c    = (type & ZEROPAD) ? '0' : ' ';
    40b4:	3270                	fld	fa2,224(a2)
    40b6:	0000                	unimp
    40b8:	690e                	flw	fs2,192(sp)
    40ba:	0010                	0x10
    40bc:	0100                	addi	s0,sp,128
    40be:	032e                	slli	t1,t1,0xb
    40c0:	09c5                	addi	s3,s3,17
    40c2:	0000                	unimp
    40c4:	00003283          	0x3283
    40c8:	1700                	addi	s0,sp,928
    40ca:	0678                	addi	a4,sp,780
    40cc:	0000                	unimp
    40ce:	940e                	add	s0,s0,gp
    sign = 0;
    40d0:	0010                	0x10
    40d2:	0100                	addi	s0,sp,128
    if (type & SIGN)
    40d4:	032e                	slli	t1,t1,0xb
    40d6:	09c5                	addi	s3,s3,17
    40d8:	0000                	unimp
    40da:	000032cf          	fnmadd.s	ft5,ft0,ft0,ft0,rup
    40de:	690e                	flw	fs2,192(sp)
        if (num < 0)
    40e0:	0010                	0x10
    40e2:	0100                	addi	s0,sp,128
    40e4:	032e                	slli	t1,t1,0xb
    40e6:	09c5                	addi	s3,s3,17
            sign = '-';
    40e8:	0000                	unimp
    40ea:	32e2                	fld	ft5,56(sp)
    40ec:	0000                	unimp
    40ee:	0000                	unimp
            num  = -num;
    40f0:	00069017          	auipc	zero,0x69
    40f4:	0e00                	addi	s0,sp,784
    40f6:	0f95                	addi	t6,t6,5
    40f8:	0000                	unimp
    40fa:	2e01                	jal	440a <eaddr+0x36>
            size--;
    40fc:	00002c03          	lw	s8,0(zero) # 0 <RAM_START_ADDRESS>
    4100:	2e00                	fld	fs0,24(a2)
    4102:	17000033          	0x17000033
    4106:	06a8                	addi	a0,sp,840
    4108:	0000                	unimp
    410a:	e40e                	fsw	ft3,8(sp)
        else if (type & PLUS)
    410c:	0100000f          	fence	w,unknown
    4110:	032e                	slli	t1,t1,0xb
    4112:	09be                	slli	s3,s3,0xf
    4114:	0000                	unimp
    4116:	334d                	jal	3eb8 <fcvt+0x34>
            sign = '+';
    4118:	0000                	unimp
    411a:	ab0e                	fsd	ft3,400(sp)
    411c:	0100000f          	fence	w,unknown
            size--;
    4120:	032e                	slli	t1,t1,0xb
    4122:	09be                	slli	s3,s3,0xf
    4124:	0000                	unimp
    4126:	336d                	jal	3ed0 <fcvt+0x4c>
    4128:	0000                	unimp
    412a:	800e                	c.mv	zero,gp
    412c:	0100000f          	fence	w,unknown
        else if (type & SPACE)
    4130:	032e                	slli	t1,t1,0xb
    4132:	09be                	slli	s3,s3,0xf
    4134:	0000                	unimp
    4136:	338d                	jal	3e98 <fcvt+0x14>
    4138:	0000                	unimp
    413a:	c00e                	sw	gp,0(sp)
            sign = ' ';
    413c:	0100000f          	fence	w,unknown
    4140:	032e                	slli	t1,t1,0xb
    4142:	09be                	slli	s3,s3,0xf
            size--;
    4144:	0000                	unimp
    4146:	33ad                	jal	3eb0 <fcvt+0x2c>
    4148:	0000                	unimp
    414a:	d20e                	sw	gp,36(sp)
    414c:	0100000f          	fence	w,unknown
    if (type & HEX_PREP)
    4150:	032e                	slli	t1,t1,0xb
    4152:	09c5                	addi	s3,s3,17
    4154:	0000                	unimp
    4156:	33c1                	jal	3f16 <fcvtbuf+0x36>
    4158:	0000                	unimp
    415a:	0000                	unimp
        if (base == 16)
    415c:	1500                	addi	s0,sp,672
    415e:	6614                	flw	fa3,8(a2)
    4160:	0000                	unimp
    4162:	0010                	0x10
    4164:	0000                	unimp
    4166:	0889                	addi	a7,a7,2
            size -= 2;
    4168:	0000                	unimp
    416a:	5f10                	lw	a2,56(a4)
    416c:	785f 0100 032f      	0x32f0100785f
    4172:	09c5                	addi	s3,s3,17
    4174:	0000                	unimp
    4176:	33f8                	fld	fa4,224(a5)
        else if (base == 8)
    4178:	0000                	unimp
    417a:	1800                	addi	s0,sp,48
    417c:	0000089b          	0x89b
    4180:	5f11                	li	t5,-28
    4182:	785f 0100 032f      	0x32f0100785f
            size--;
    4188:	09c5                	addi	s3,s3,17
    418a:	0000                	unimp
    418c:	1800                	addi	s0,sp,48
    418e:	08ad                	addi	a7,a7,11
    i = 0;
    4190:	0000                	unimp
    4192:	5f11                	li	t5,-28
    if (num == 0)
    4194:	785f 0100 032f      	0x32f0100785f
    419a:	09c5                	addi	s3,s3,17
        tmp[i++] = '0';
    419c:	0000                	unimp
    419e:	1200                	addi	s0,sp,288
    41a0:	06e0                	addi	s0,sp,844
    41a2:	0000                	unimp
    41a4:	000009ab          	0x9ab
    41a8:	000df713          	andi	a4,s11,0
    41ac:	0100                	addi	s0,sp,128
    41ae:	002c032f          	vamoaddei8.v	zero,(s8),v2,v6,v0.t
    41b2:	0000                	unimp
    41b4:	3618                	fld	fa4,40(a2)
    41b6:	0009                	c.nop	2
    41b8:	1300                	addi	s0,sp,416
    41ba:	0e34                	addi	a3,sp,792
            tmp[i++] = dig[((unsigned long)num) % (unsigned)base];
    41bc:	0000                	unimp
    41be:	2f01                	jal	48ce <ee_vsprintf+0x8a>
    41c0:	0009be03          	0x9be03
    41c4:	1300                	addi	s0,sp,416
    41c6:	00000daf          	vamoaddei8.v	zero,(zero),v0,v27,v0.t
    41ca:	2f01                	jal	48da <ee_vsprintf+0x96>
    41cc:	0009be03          	0x9be03
    41d0:	1300                	addi	s0,sp,416
    41d2:	0e69                	addi	t3,t3,26
    41d4:	0000                	unimp
    41d6:	2f01                	jal	48e6 <ee_vsprintf+0xa2>
    41d8:	0009be03          	0x9be03
    41dc:	1300                	addi	s0,sp,416
    41de:	0c8a                	slli	s9,s9,0x2
    41e0:	0000                	unimp
    41e2:	2f01                	jal	48f2 <ee_vsprintf+0xae>
    41e4:	0009c503          	lbu	a0,0(s3)
    41e8:	1300                	addi	s0,sp,416
    41ea:	0ca2                	slli	s9,s9,0x8
    41ec:	0000                	unimp
    41ee:	2f01                	jal	48fe <ee_vsprintf+0xba>
    41f0:	0009c503          	lbu	a0,0(s3)
    41f4:	1800                	addi	s0,sp,48
    41f6:	0915                	addi	s2,s2,5
    41f8:	0000                	unimp
    41fa:	5f11                	li	t5,-28
            num      = ((unsigned long)num) / (unsigned)base;
    41fc:	785f 0100 032f      	0x32f0100785f
    4202:	09c5                	addi	s3,s3,17
    4204:	0000                	unimp
    4206:	1800                	addi	s0,sp,48
    4208:	00000927          	vse8.v	v18,(zero),v0.t
    420c:	5f11                	li	t5,-28
    420e:	785f 0100 032f      	0x32f0100785f
    4214:	09c5                	addi	s3,s3,17
    4216:	0000                	unimp
        while (num != 0)
    4218:	1900                	addi	s0,sp,176
    421a:	5f11                	li	t5,-28
    421c:	785f 0100 032f      	0x32f0100785f
    if (i > precision)
    4222:	09c5                	addi	s3,s3,17
    4224:	0000                	unimp
    4226:	0000                	unimp
    4228:	3c15                	jal	3c5c <cvt+0x330>
    422a:	10000067          	jr	256(zero) # 0 <RAM_START_ADDRESS>
        precision = i;
    422e:	0000                	unimp
    4230:	5400                	lw	s0,40(s0)
    4232:	0009                	c.nop	2
    size -= precision;
    4234:	1000                	addi	s0,sp,32
    4236:	5f5f 0078 2f01      	0x2f0100785f5f
    423c:	0009c503          	lbu	a0,0(s3)
    4240:	0b00                	addi	s0,sp,400
    4242:	0034                	addi	a3,sp,8
    if (!(type & (ZEROPAD | LEFT)))
    4244:	0000                	unimp
    4246:	6618                	flw	fa4,8(a2)
    4248:	0009                	c.nop	2
    424a:	1100                	addi	s0,sp,160
    424c:	5f5f 0078 2f01      	0x2f0100785f5f
        while (size-- > 0)
    4252:	0009c503          	lbu	a0,0(s3)
            *str++ = ' ';
    4256:	0000                	unimp
    4258:	7818                	flw	fa4,48(s0)
    425a:	0009                	c.nop	2
    425c:	1100                	addi	s0,sp,160
    425e:	5f5f 0078 2f01      	0x2f0100785f5f
    4264:	0009c503          	lbu	a0,0(s3)
        while (size-- > 0)
    4268:	0000                	unimp
    426a:	8a18                	0x8a18
    426c:	0009                	c.nop	2
    426e:	1100                	addi	s0,sp,160
    4270:	5f5f 0078 2f01      	0x2f0100785f5f
    4276:	0009c503          	lbu	a0,0(s3)
    if (sign)
    427a:	0000                	unimp
    427c:	9c18                	0x9c18
    427e:	0009                	c.nop	2
        *str++ = sign;
    4280:	1100                	addi	s0,sp,160
    4282:	5f5f 0078 2f01      	0x2f0100785f5f
    4288:	0009c503          	lbu	a0,0(s3)
    428c:	0000                	unimp
    428e:	1119                	addi	sp,sp,-26
    4290:	5f5f 0078 2f01      	0x2f0100785f5f
    if (type & HEX_PREP)
    4296:	0009c503          	lbu	a0,0(s3)
    429a:	0000                	unimp
    429c:	1700                	addi	s0,sp,928
    429e:	06c8                	addi	a0,sp,836
        if (base == 8)
    42a0:	0000                	unimp
    42a2:	000a9313          	slli	t1,s5,0x0
    42a6:	0100                	addi	s0,sp,128
    42a8:	00c0032f          	vamoaddei8.v	zero,(zero),v12,v6,v0.t
            *str++ = '0';
    42ac:	0000                	unimp
    42ae:	0000                	unimp
    42b0:	0402                	c.slli64	s0
    42b2:	9205                	srli	a2,a2,0x21
    42b4:	0001                	nop
    42b6:	0200                	addi	s0,sp,256
    42b8:	0704                	addi	s1,sp,896
    42ba:	08c5                	addi	a7,a7,17
    42bc:	0000                	unimp
    42be:	c51a                	sw	t1,136(sp)
    42c0:	0009                	c.nop	2
    42c2:	dc00                	sw	s0,56(s0)
        else if (base == 16)
    42c4:	0009                	c.nop	2
    42c6:	1b00                	addi	s0,sp,432
    42c8:	0048                	addi	a0,sp,4
    42ca:	0000                	unimp
    42cc:	6e1c0003          	lb	zero,1761(s8)
            *str++ = '0';
    42d0:	000c                	0xc
    42d2:	6e00                	flw	fs0,24(a2)
    42d4:	000c                	0xc
    42d6:	0000                	unimp
    42d8:	000001e3          	beqz	zero,4ada <ee_vsprintf+0x296>
    42dc:	0004                	0x4
    42de:	12d6                	slli	t0,t0,0x35
    42e0:	0000                	unimp
    42e2:	0104                	addi	s1,sp,128
            *str++ = digits[33];
    42e4:	0aad                	addi	s5,s5,11
    42e6:	0000                	unimp
    42e8:	fc0c                	fsw	fa1,56(s0)
    42ea:	0010                	0x10
    42ec:	1500                	addi	s0,sp,672
    42ee:	000a                	c.slli	zero,0x2
    42f0:	d800                	sw	s0,48(s0)
    42f2:	80000067          	jr	-2048(zero) # 0 <RAM_START_ADDRESS>
    42f6:	0000                	unimp
    42f8:	8600                	0x8600
    42fa:	02000073          	0x2000073
    42fe:	0408                	addi	a0,sp,512
    if (!(type & LEFT))
    4300:	11bd                	addi	gp,gp,-17
    4302:	0000                	unimp
    4304:	69050403          	lb	s0,1680(a0)
    4308:	746e                	flw	fs0,248(sp)
    430a:	0200                	addi	s0,sp,256
        while (size-- > 0)
    430c:	0601                	addi	a2,a2,0
    430e:	00000213          	li	tp,0
            *str++ = c;
    4312:	2f04                	fld	fs1,24(a4)
    4314:	0011                	c.nop	4
    4316:	0200                	addi	s0,sp,256
    4318:	0148                	addi	a0,sp,132
    431a:	2c0d                	jal	454c <eaddr+0x178>
    431c:	0000                	unimp
    431e:	0200                	addi	s0,sp,256
    4320:	0508                	addi	a0,sp,640
    4322:	018d                	addi	gp,gp,3
        while (size-- > 0)
    4324:	0000                	unimp
    4326:	0102                	c.slli64	sp
    4328:	1108                	addi	a0,sp,160
    432a:	0002                	c.slli64	zero
    432c:	0400                	addi	s0,sp,512
    432e:	112e                	slli	sp,sp,0x2b
    4330:	0000                	unimp
    4332:	4b02                	lw	s6,0(sp)
    while (i < precision--)
    4334:	1601                	addi	a2,a2,-32
    4336:	0062                	c.slli	zero,0x18
        *str++ = '0';
    4338:	0000                	unimp
    433a:	0402                	c.slli64	s0
    433c:	0008ca07          	flq	fs4,0(a7)
    4340:	0200                	addi	s0,sp,256
    4342:	0708                	addi	a0,sp,896
    4344:	08c0                	addi	s0,sp,84
    4346:	0000                	unimp
    4348:	0202                	c.slli64	tp
    434a:	00025a07          	vle16.v	v20,(tp),v0.t
    while (i < precision--)
    434e:	0500                	addi	s0,sp,640
    4350:	0aa6                	slli	s5,s5,0x9
    4352:	0000                	unimp
    4354:	250f4803          	lbu	a6,592(t5)
    4358:	0000                	unimp
    435a:	0600                	addi	s0,sp,768
    435c:	0308                	addi	a0,sp,384
    435e:	00cd034f          	fnmadd.s	ft6,fs10,fa2,ft0,rne
    while (i-- > 0)
    4362:	0000                	unimp
        *str++ = tmp[i];
    4364:	000a0f07          	vle8.v	v30,(s4),v0.t
    4368:	0300                	addi	s0,sp,384
    436a:	00620e57          	vadd.vv	v28,v6,v4,v0.t
    436e:	0000                	unimp
    4370:	2004                	fld	fs1,0(s0)
    4372:	0000                	unimp
    4374:	000b8f07          	vle8.v	v30,(s7),v0.t
    4378:	0300                	addi	s0,sp,384
    437a:	0e58                	addi	a4,sp,788
    437c:	0062                	c.slli	zero,0x18
    437e:	0000                	unimp
    4380:	1404                	addi	s1,sp,544
    4382:	040c                	addi	a1,sp,512
    while (i-- > 0)
    4384:	6508                	flw	fa0,8(a0)
    4386:	7078                	flw	fa4,100(s0)
    4388:	0300                	addi	s0,sp,384
    438a:	0e59                	addi	t3,t3,22
    438c:	0062                	c.slli	zero,0x18
    438e:	0000                	unimp
    4390:	0b04                	addi	s1,sp,400
    4392:	0401                	addi	s0,s0,0
    while (size-- > 0)
    4394:	0008e207          	vle32.v	v4,(a7),v0.t
        *str++ = ' ';
    4398:	0300                	addi	s0,sp,384
    439a:	0e5a                	slli	t3,t3,0x16
    439c:	0062                	c.slli	zero,0x18
    439e:	0000                	unimp
    43a0:	0104                	addi	s1,sp,128
    43a2:	0400                	addi	s0,sp,512
    43a4:	0900                	addi	s0,sp,144
    43a6:	0c30                	addi	a2,sp,536
    43a8:	0000                	unimp
    43aa:	0308                	addi	a0,sp,384
    while (size-- > 0)
    43ac:	074c                	addi	a1,sp,900
    43ae:	000000f3          	0xf3
    43b2:	660a                	flw	fa2,128(sp)
    43b4:	746c                	flw	fa1,108(s0)
    43b6:	0300                	addi	s0,sp,384
    43b8:	0a4e                	slli	s4,s4,0x13
    43ba:	00000077          	0x77
    return str;
    43be:	000c690b          	0xc690b
}
    43c2:	0300                	addi	s0,sp,384
    43c4:	055c                	addi	a5,sp,644
    43c6:	00000083          	lb	ra,0(zero) # 0 <RAM_START_ADDRESS>
    43ca:	0c00                	addi	s0,sp,528
    43cc:	10f2                	slli	ra,ra,0x3c
    43ce:	0000                	unimp
    43d0:	2301                	jal	48d0 <ee_vsprintf+0x8c>
    43d2:	3a01                	jal	3ce2 <cvt+0x3b6>
{
    43d4:	0000                	unimp
    43d6:	d800                	sw	s0,48(s0)
    43d8:	80000067          	jr	-2048(zero) # 0 <RAM_START_ADDRESS>
    43dc:	0000                	unimp
    43de:	0100                	addi	s0,sp,128
    43e0:	d89c                	sw	a5,48(s1)
    43e2:	0001                	nop
    43e4:	0d00                	addi	s0,sp,656
    43e6:	0061                	c.nop	24
    43e8:	2301                	jal	48e8 <ee_vsprintf+0xa4>
    43ea:	00007713          	andi	a4,zero,0
    43ee:	1e00                	addi	s0,sp,816
    43f0:	0034                	addi	a3,sp,8
    43f2:	0e00                	addi	s0,sp,784
    char *dig = digits;
    43f4:	0b70                	addi	a2,sp,412
    43f6:	0000                	unimp
    43f8:	2501                	jal	49f8 <ee_vsprintf+0x1b4>
    43fa:	00002c03          	lw	s8,0(zero) # 0 <RAM_START_ADDRESS>
    43fe:	a600                	fsd	fs0,8(a2)
    if (type & UPPERCASE)
    4400:	0034                	addi	a3,sp,8
    4402:	0f00                	addi	s0,sp,912
    4404:	0c80                	addi	s0,sp,592
    4406:	0000                	unimp
    4408:	2501                	jal	4a08 <ee_vsprintf+0x1c4>
    440a:	00002c03          	lw	s8,0(zero) # 0 <RAM_START_ADDRESS>
        dig = upper_digits;
    440e:	0000                	unimp
    4410:	4110                	lw	a2,0(a0)
    4412:	635f 0100 0326      	0x3260100635f
    for (i = 0; i < 6; i++)
    4418:	01d8                	addi	a4,sp,196
    441a:	0000                	unimp
    441c:	4111                	li	sp,4
    441e:	735f 0100 0326      	0x3260100735f
        if (i != 0)
    4424:	01d8                	addi	a4,sp,196
    4426:	0000                	unimp
            tmp[len++] = ':';
    4428:	7b06                	flw	fs6,96(sp)
    442a:	0800                	addi	s0,sp,16
    442c:	1aff                	0x1aff
    442e:	129f 5f41 0065      	0x655f41129f
    4434:	2601                	jal	4734 <iaddr+0x1a8>
    4436:	0001d803          	lhu	a6,0(gp) # 87c0 <__global_pointer$>
    443a:	ba00                	fsd	fs0,48(a2)
    443c:	0034                	addi	a3,sp,8
    443e:	0e00                	addi	s0,sp,784
    4440:	0b9a                	slli	s7,s7,0x6
    4442:	0000                	unimp
        tmp[len++] = dig[addr[i] >> 4];
    4444:	2601                	jal	4744 <iaddr+0x1b8>
    4446:	0001df03          	lhu	t5,0(gp) # 87c0 <__global_pointer$>
    444a:	e600                	fsw	fs0,8(a2)
    444c:	0034                	addi	a3,sp,8
    444e:	0e00                	addi	s0,sp,784
    4450:	0b66                	slli	s6,s6,0x19
    4452:	0000                	unimp
    4454:	2601                	jal	4754 <iaddr+0x1c8>
    4456:	0001df03          	lhu	t5,0(gp) # 87c0 <__global_pointer$>
    445a:	1200                	addi	s0,sp,288
    445c:	0035                	c.nop	13
    445e:	1200                	addi	s0,sp,288
    4460:	0072                	c.slli	zero,0x1c
    4462:	2701                	jal	4b62 <ee_vsprintf+0x31e>
    4464:	0000550b          	0x550b
    4468:	5300                	lw	s0,32(a4)
    446a:	0035                	c.nop	13
    446c:	1300                	addi	s0,sp,416
    446e:	0700                	addi	s0,sp,896
    4470:	0000                	unimp
    4472:	000001ab          	0x1ab
    4476:	9f14                	0x9f14
    4478:	0100000b          	0x100000b
    447c:	032a                	slli	t1,t1,0xa
    447e:	00cd                	addi	ra,ra,19
    4480:	0000                	unimp
    4482:	1500                	addi	s0,sp,672
        tmp[len++] = dig[addr[i] & 0x0F];
    4484:	01bd                	addi	gp,gp,15
    4486:	0000                	unimp
    4488:	df14                	sw	a3,56(a4)
    448a:	0010                	0x10
    448c:	0100                	addi	s0,sp,128
    448e:	002c032b          	0x2c032b
    4492:	0000                	unimp
    4494:	1600                	addi	s0,sp,800
    4496:	6810                	flw	fa2,16(s0)
    4498:	0000                	unimp
    449a:	0040                	addi	s0,sp,4
    449c:	0000                	unimp
    449e:	df0e                	sw	gp,188(sp)
    44a0:	0010                	0x10
    44a2:	0100                	addi	s0,sp,128
    44a4:	002c032b          	0x2c032b
    44a8:	0000                	unimp
    44aa:	0000358b          	0x358b
    44ae:	0000                	unimp
    44b0:	0402                	c.slli64	s0
    44b2:	9205                	srli	a2,a2,0x21
    44b4:	0001                	nop
    44b6:	0200                	addi	s0,sp,256
    44b8:	0704                	addi	s1,sp,896
    44ba:	08c5                	addi	a7,a7,17
    for (i = 0; i < 6; i++)
    44bc:	0000                	unimp
    44be:	2200                	fld	fs0,0(a2)
    44c0:	0000                	unimp
    44c2:	0200                	addi	s0,sp,256
    44c4:	3400                	fld	fs0,40(s0)
    44c6:	0014                	0x14
    44c8:	0400                	addi	s0,sp,512
    44ca:	9801                	andi	s0,s0,-32
    44cc:	0075                	c.nop	29
    44ce:	5800                	lw	s0,48(s0)
    44d0:	0068                	addi	a0,sp,12
    44d2:	7c00                	flw	fs0,56(s0)
    if (!(type & LEFT))
    44d4:	0068                	addi	a0,sp,12
    44d6:	3600                	fld	fs0,40(a2)
    44d8:	0011                	c.nop	4
    44da:	1500                	addi	s0,sp,672
    44dc:	000a                	c.slli	zero,0x2
    44de:	4c00                	lw	s0,24(s0)
        while (len < size--)
    44e0:	0000                	unimp
    44e2:	0100                	addi	s0,sp,128
            *str++ = ' ';
    44e4:	2280                	fld	fs0,0(a3)
    44e6:	0000                	unimp
    44e8:	0200                	addi	s0,sp,256
    44ea:	4800                	lw	s0,16(s0)
    44ec:	0014                	0x14
    44ee:	0400                	addi	s0,sp,512
    44f0:	2e01                	jal	4800 <iaddr+0x274>
    44f2:	0076                	c.slli	zero,0x1d
    44f4:	7c00                	flw	fs0,56(s0)
    44f6:	0068                	addi	a0,sp,12
        while (len < size--)
    44f8:	3000                	fld	fs0,32(s0)
    44fa:	0069                	c.nop	26
    44fc:	6c00                	flw	fs0,24(s0)
    44fe:	0011                	c.nop	4
    4500:	1500                	addi	s0,sp,672
    4502:	000a                	c.slli	zero,0x2
    4504:	4c00                	lw	s0,24(s0)
    4506:	0000                	unimp
    4508:	0100                	addi	s0,sp,128
    450a:	4e80                	lw	s0,24(a3)
    for (i = 0; i < len; ++i)
    450c:	0001                	nop
    450e:	0400                	addi	s0,sp,512
    4510:	5c00                	lw	s0,56(s0)
    4512:	0014                	0x14
        *str++ = tmp[i];
    4514:	0400                	addi	s0,sp,512
    4516:	ad01                	j	4b26 <ee_vsprintf+0x2e2>
    4518:	000a                	c.slli	zero,0x2
    451a:	0c00                	addi	s0,sp,528
    451c:	11e4                	addi	s1,sp,236
    451e:	0000                	unimp
    4520:	0a15                	addi	s4,s4,5
    4522:	0000                	unimp
    4524:	6930                	flw	fa2,80(a0)
    4526:	0000                	unimp
    4528:	004c                	addi	a1,sp,4
    452a:	0000                	unimp
    452c:	779a                	flw	fa5,164(sp)
    452e:	0000                	unimp
    4530:	0402                	c.slli64	s0
    4532:	6905                	lui	s2,0x1
    for (i = 0; i < len; ++i)
    4534:	746e                	flw	fs0,248(sp)
    4536:	0300                	addi	s0,sp,384
    4538:	0704                	addi	s1,sp,896
    453a:	08ca                	slli	a7,a7,0x12
    453c:	0000                	unimp
    453e:	8d050803          	lb	a6,-1840(a0)
    4542:	0001                	nop
    4544:	0300                	addi	s0,sp,384
    4546:	0410                	addi	a2,sp,512
    4548:	11b8                	addi	a4,sp,232
    454a:	0000                	unimp
    while (len < size--)
    454c:	13060103          	lb	sp,304(a2) # 2130 <matrix_test+0x150>
        *str++ = ' ';
    4550:	0002                	c.slli64	zero
    4552:	0300                	addi	s0,sp,384
    4554:	0801                	addi	a6,a6,0
    4556:	0211                	addi	tp,tp,4
    4558:	0000                	unimp
    455a:	85050203          	lb	tp,-1968(a0)
    455e:	0000                	unimp
    4560:	0300                	addi	s0,sp,384
    4562:	0702                	c.slli64	a4
    while (len < size--)
    4564:	025a                	slli	tp,tp,0x16
    4566:	0000                	unimp
    4568:	92050403          	lb	s0,-1760(a0)
    456c:	0001                	nop
    456e:	0300                	addi	s0,sp,384
    4570:	0704                	addi	s1,sp,896
    4572:	08c5                	addi	a7,a7,17
    4574:	0000                	unimp
    4576:	c0070803          	lb	a6,-1024(a4)
    return str;
    457a:	0008                	0x8
}
    457c:	0300                	addi	s0,sp,384
    457e:	0801                	addi	a6,a6,0
    4580:	021a                	slli	tp,tp,0x6
    4582:	0000                	unimp
    4584:	c404                	sw	s1,8(s0)
    4586:	0011                	c.nop	4
    4588:	0200                	addi	s0,sp,256
    458a:	0048167b          	0x48167b
{
    458e:	0000                	unimp
    4590:	7905                	lui	s2,0xfffe1
    4592:	0000                	unimp
    4594:	0400                	addi	s0,sp,512
    4596:	0000112f          	0x112f
    459a:	8002                	0x8002
    459c:	0000250f          	0x250f
    45a0:	0400                	addi	s0,sp,512
    45a2:	112e                	slli	sp,sp,0x2b
    45a4:	0000                	unimp
    45a6:	8102                	jr	sp
    45a8:	2c16                	fld	fs8,320(sp)
    45aa:	0000                	unimp
    45ac:	0300                	addi	s0,sp,384
    45ae:	0402                	c.slli64	s0
    45b0:	000011a7          	fsh	ft0,3(zero) # 3 <RAM_START_ADDRESS+0x3>
    len = 0;
    45b4:	9f030403          	lb	s0,-1552(t1)
    for (i = 0; i < 4; i++)
    45b8:	0011                	c.nop	4
    45ba:	0300                	addi	s0,sp,384
    45bc:	0404                	addi	s1,sp,512
    45be:	11de                	slli	gp,gp,0x37
        if (i != 0)
    45c0:	0000                	unimp
    45c2:	d6030803          	lb	a6,-672(t1)
    45c6:	0011                	c.nop	4
            tmp[len++] = '.';
    45c8:	0300                	addi	s0,sp,384
    45ca:	0408                	addi	a0,sp,512
    45cc:	11bd                	addi	gp,gp,-17
    45ce:	0000                	unimp
    45d0:	13031003          	lh	zero,304(t1)
    45d4:	0012                	c.slli	zero,0x4
    45d6:	0300                	addi	s0,sp,384
    45d8:	0320                	addi	s0,sp,392
    45da:	11b0                	addi	a2,sp,232
    45dc:	0000                	unimp
    45de:	8506                	mv	a0,ra
    45e0:	0000                	unimp
    45e2:	e300                	fsw	fs0,0(a4)
        n = addr[i];
    45e4:	0000                	unimp
    45e6:	0700                	addi	s0,sp,896
    45e8:	002c                	addi	a1,sp,8
    45ea:	0000                	unimp
    45ec:	00ff                	0xff
    45ee:	d305                	beqz	a4,450e <eaddr+0x13a>
    45f0:	0000                	unimp
    45f2:	0800                	addi	s0,sp,16
    45f4:	11cc                	addi	a1,sp,228
    45f6:	0000                	unimp
        if (n == 0)
    45f8:	0202                	c.slli64	tp
    45fa:	1602                	slli	a2,a2,0x20
    45fc:	000000e3          	beqz	zero,4dfc <ee_vsprintf+0x5b8>
            tmp[len++] = digits[0];
    4600:	6e09                	lui	t3,0x2
    4602:	000c                	0xc
    4604:	0100                	addi	s0,sp,128
    4606:	02c2                	slli	t0,t0,0x10
    4608:	2501                	jal	4c08 <ee_vsprintf+0x3c4>
    460a:	0000                	unimp
    460c:	3000                	fld	fs0,32(s0)
    460e:	0069                	c.nop	26
    4610:	4c00                	lw	s0,24(s0)
    4612:	0000                	unimp
    4614:	0100                	addi	s0,sp,128
    4616:	0a9c                	addi	a5,sp,336
    4618:	0078                	addi	a4,sp,12
    461a:	c201                	beqz	a2,461a <iaddr+0x8e>
    461c:	1202                	slli	tp,tp,0x20
    461e:	0096                	slli	ra,ra,0x5
    4620:	0000                	unimp
    4622:	359f 0000 720b      	0x720b0000359f
            if (n >= 100)
    4628:	7465                	lui	s0,0xffff9
    462a:	0100                	addi	s0,sp,128
    462c:	02c4                	addi	s1,sp,324
    462e:	8a09                	andi	a2,a2,2
    4630:	0000                	unimp
    4632:	0c00                	addi	s0,sp,528
                tmp[len++] = digits[n / 100];
    4634:	0718                	addi	a4,sp,896
    4636:	0000                	unimp
    4638:	0e0d                	addi	t3,t3,3
    463a:	0012                	c.slli	zero,0x4
    463c:	0100                	addi	s0,sp,128
    463e:	02c6                	slli	t0,t0,0x11
    4640:	00009603          	lh	a2,0(ra)
    4644:	cb00                	sw	s0,16(a4)
    4646:	0035                	c.nop	13
    4648:	0e00                	addi	s0,sp,784
    464a:	5f5f 0061 c601      	0xc60100615f5f
    4650:	0302                	c.slli64	t1
    4652:	0096                	slli	ra,ra,0x5
    4654:	0000                	unimp
    4656:	000035f7          	0x35f7
    465a:	0000                	unimp
    465c:	e100                	fsw	fs0,0(a0)
    465e:	0000                	unimp
    4660:	0400                	addi	s0,sp,512
    4662:	2600                	fld	fs0,8(a2)
    4664:	0015                	c.nop	5
    4666:	0400                	addi	s0,sp,512
    4668:	ad01                	j	4c78 <ee_vsprintf+0x434>
    466a:	000a                	c.slli	zero,0x2
    466c:	0c00                	addi	s0,sp,528
    466e:	11e4                	addi	s1,sp,236
                n          = n % 100;
    4670:	0000                	unimp
    4672:	0a15                	addi	s4,s4,5
    4674:	0000                	unimp
    4676:	787d                	lui	a6,0xfffff
    4678:	0000                	unimp
    467a:	0402                	c.slli64	s0
    467c:	6905                	lui	s2,0x1
    467e:	746e                	flw	fs0,248(sp)
    4680:	0300                	addi	s0,sp,384
    4682:	0704                	addi	s1,sp,896
    4684:	08ca                	slli	a7,a7,0x12
    4686:	0000                	unimp
                tmp[len++] = digits[n / 10];
    4688:	8d050803          	lb	a6,-1840(a0)
    468c:	0001                	nop
    468e:	0300                	addi	s0,sp,384
    4690:	0410                	addi	a2,sp,512
    4692:	11b8                	addi	a4,sp,232
    4694:	0000                	unimp
    4696:	13060103          	lb	sp,304(a2)
    469a:	0002                	c.slli64	zero
    469c:	0300                	addi	s0,sp,384
    469e:	0801                	addi	a6,a6,0
    46a0:	0211                	addi	tp,tp,4
    46a2:	0000                	unimp
    46a4:	85050203          	lb	tp,-1968(a0)
    46a8:	0000                	unimp
    46aa:	0300                	addi	s0,sp,384
    46ac:	0702                	c.slli64	a4
    46ae:	025a                	slli	tp,tp,0x16
    46b0:	0000                	unimp
    46b2:	92050403          	lb	s0,-1760(a0)
    46b6:	0001                	nop
    46b8:	0300                	addi	s0,sp,384
    46ba:	0704                	addi	s1,sp,896
    46bc:	08c5                	addi	a7,a7,17
    46be:	0000                	unimp
    46c0:	c0070803          	lb	a6,-1024(a4)
                n          = n % 10;
    46c4:	0008                	0x8
    46c6:	0300                	addi	s0,sp,384
    46c8:	0801                	addi	a6,a6,0
    46ca:	021a                	slli	tp,tp,0x6
    46cc:	0000                	unimp
    46ce:	c404                	sw	s1,8(s0)
    46d0:	0011                	c.nop	4
    46d2:	0100                	addi	s0,sp,128
    46d4:	0040167b          	0x40167b
    46d8:	0000                	unimp
    46da:	7105                	addi	sp,sp,-480
    46dc:	0000                	unimp
    46de:	0300                	addi	s0,sp,384
            else if (n >= 10)
    46e0:	0402                	c.slli64	s0
    46e2:	000011a7          	fsh	ft0,3(zero) # 3 <RAM_START_ADDRESS+0x3>
    46e6:	9f030403          	lb	s0,-1552(t1)
    46ea:	0011                	c.nop	4
                tmp[len++] = digits[n / 10];
    46ec:	0300                	addi	s0,sp,384
    46ee:	0404                	addi	s1,sp,512
    46f0:	11de                	slli	gp,gp,0x37
    46f2:	0000                	unimp
    46f4:	d6030803          	lb	a6,-672(t1)
    46f8:	0011                	c.nop	4
    46fa:	0300                	addi	s0,sp,384
    46fc:	0408                	addi	a0,sp,512
    46fe:	11bd                	addi	gp,gp,-17
    4700:	0000                	unimp
    4702:	13031003          	lh	zero,304(t1)
    4706:	0012                	c.slli	zero,0x4
    4708:	0300                	addi	s0,sp,384
    470a:	0320                	addi	s0,sp,392
    470c:	11b0                	addi	a2,sp,232
    470e:	0000                	unimp
    4710:	7d06                	flw	fs10,96(sp)
    4712:	0000                	unimp
    4714:	c300                	sw	s0,0(a4)
    4716:	0000                	unimp
    4718:	0700                	addi	s0,sp,896
    471a:	0024                	addi	s1,sp,8
    471c:	0000                	unimp
    471e:	00ff                	0xff
    4720:	b305                	j	4440 <eaddr+0x6c>
    4722:	0000                	unimp
    4724:	0800                	addi	s0,sp,16
    4726:	11cc                	addi	a1,sp,228
                n          = n % 10;
    4728:	0000                	unimp
    472a:	0201                	addi	tp,tp,0
    472c:	1602                	slli	a2,a2,0x20
    472e:	000000c3          	fmadd.s	ft1,ft0,ft0,ft0,rne
    4732:	c809                	beqz	s0,4744 <iaddr+0x1b8>
    4734:	0000                	unimp
    4736:	0200                	addi	s0,sp,256
    4738:	02b2                	slli	t0,t0,0xc
    473a:	ac03050f          	0xac03050f
    473e:	007e                	c.slli	zero,0x1f
            tmp[len++] = digits[n];
    4740:	0000                	unimp
    4742:	057d                	addi	a0,a0,31
    4744:	0000                	unimp
    4746:	0004                	0x4
    4748:	1596                	slli	a1,a1,0x25
    474a:	0000                	unimp
    474c:	0104                	addi	s1,sp,128
    474e:	0aad                	addi	s5,s5,11
    4750:	0000                	unimp
    4752:	220c                	fld	fa1,0(a2)
    4754:	0012                	c.slli	zero,0x4
    4756:	1500                	addi	s0,sp,672
    4758:	000a                	c.slli	zero,0x2
    475a:	7c00                	flw	fs0,56(s0)
    475c:	ec00006f          	j	fff04e1c <RAM_SIZE+0xffef4e1c>
    4760:	d4000007          	vluxseg7ei128.v	v0,(zero),v0,v0.t
    4764:	0078                	addi	a4,sp,12
    4766:	0200                	addi	s0,sp,256
    4768:	0408                	addi	a0,sp,512
    476a:	11bd                	addi	gp,gp,-17
    for (i = 0; i < 4; i++)
    476c:	0000                	unimp
    476e:	69050403          	lb	s0,1680(a0)
    4772:	746e                	flw	fs0,248(sp)
    4774:	0200                	addi	s0,sp,256
    4776:	0601                	addi	a2,a2,0
    4778:	00000213          	li	tp,0
    477c:	0802                	c.slli64	a6
    477e:	8d05                	sub	a0,a0,s1
    4780:	0001                	nop
    4782:	0200                	addi	s0,sp,256
    if (!(type & LEFT))
    4784:	0801                	addi	a6,a6,0
    4786:	0211                	addi	tp,tp,4
    4788:	0000                	unimp
    478a:	0402                	c.slli64	s0
    478c:	0008ca07          	flq	fs4,0(a7)
        while (len < size--)
    4790:	0200                	addi	s0,sp,256
    4792:	0708                	addi	a0,sp,896
            *str++ = ' ';
    4794:	08c0                	addi	s0,sp,84
    4796:	0000                	unimp
    4798:	0202                	c.slli64	tp
    479a:	00025a07          	vle16.v	v20,(tp),v0.t
    479e:	0400                	addi	s0,sp,512
    47a0:	0aa6                	slli	s5,s5,0x9
    47a2:	0000                	unimp
    47a4:	4802                	lw	a6,0(sp)
    47a6:	0000250f          	0x250f
        while (len < size--)
    47aa:	0500                	addi	s0,sp,640
    47ac:	0208                	addi	a0,sp,256
    47ae:	00b3034f          	fnmadd.s	ft6,ft6,fa1,ft0,rne
    47b2:	0000                	unimp
    47b4:	0f06                	slli	t5,t5,0x1
    47b6:	000a                	c.slli	zero,0x2
    47b8:	0200                	addi	s0,sp,256
    47ba:	00480e57          	vadd.vv	v28,v4,v16,v0.t
    for (i = 0; i < len; ++i)
    47be:	0000                	unimp
    47c0:	2004                	fld	fs1,0(s0)
    47c2:	0000                	unimp
        *str++ = tmp[i];
    47c4:	8f06                	mv	t5,ra
    47c6:	0200000b          	0x200000b
    47ca:	0e58                	addi	a4,sp,788
    47cc:	0048                	addi	a0,sp,4
    47ce:	0000                	unimp
    47d0:	1404                	addi	s1,sp,544
    47d2:	040c                	addi	a1,sp,512
    47d4:	70786507          	0x70786507
    47d8:	0200                	addi	s0,sp,256
    47da:	0e59                	addi	t3,t3,22
    47dc:	0048                	addi	a0,sp,4
    47de:	0000                	unimp
    47e0:	0b04                	addi	s1,sp,400
    47e2:	0401                	addi	s0,s0,0
    for (i = 0; i < len; ++i)
    47e4:	e206                	fsw	ft1,4(sp)
    47e6:	0008                	0x8
    47e8:	0200                	addi	s0,sp,256
    47ea:	0e5a                	slli	t3,t3,0x16
    47ec:	0048                	addi	a0,sp,4
    47ee:	0000                	unimp
    47f0:	0104                	addi	s1,sp,128
    47f2:	0400                	addi	s0,sp,512
    47f4:	0800                	addi	s0,sp,16
    47f6:	0c30                	addi	a2,sp,536
    47f8:	0000                	unimp
    47fa:	0208                	addi	a0,sp,256
    while (len < size--)
    47fc:	074c                	addi	a1,sp,900
    47fe:	00d9                	addi	ra,ra,22
        *str++ = ' ';
    4800:	0000                	unimp
    4802:	6609                	lui	a2,0x2
    4804:	746c                	flw	fa1,108(s0)
    4806:	0200                	addi	s0,sp,256
    4808:	0a4e                	slli	s4,s4,0x13
    480a:	005d                	c.nop	23
    480c:	0000                	unimp
    480e:	690a                	flw	fs2,128(sp)
    4810:	000c                	0xc
    4812:	0200                	addi	s0,sp,256
    while (len < size--)
    4814:	055c                	addi	a5,sp,644
    4816:	0069                	c.nop	26
    4818:	0000                	unimp
    481a:	0b00                	addi	s0,sp,400
    481c:	00001253          	fadd.s	ft4,ft0,ft0,rtz
    4820:	2301                	jal	4d20 <ee_vsprintf+0x4dc>
    4822:	5d01                	li	s10,-32
    4824:	0000                	unimp
    4826:	7c00                	flw	fs0,56(s0)
    return str;
    4828:	ec00006f          	j	fff04ee8 <RAM_SIZE+0xffef4ee8>
}
    482c:	01000007          	vle8ff.v	v0,(zero),v0.t
    4830:	699c                	flw	fa5,16(a1)
    4832:	0005                	c.nop	1
    4834:	0c00                	addi	s0,sp,528
    4836:	0061                	c.nop	24
    4838:	2301                	jal	4d38 <ee_vsprintf+0x4f4>
    483a:	5d12                	lw	s10,36(sp)
    483c:	0000                	unimp
    483e:	0a00                	addi	s0,sp,272
    4840:	0036                	c.slli	zero,0xd
    4842:	0c00                	addi	s0,sp,528
{
    4844:	0062                	c.slli	zero,0x18
    4846:	2301                	jal	4d46 <ee_vsprintf+0x502>
    4848:	5d1c                	lw	a5,56(a0)
    484a:	0000                	unimp
    484c:	3200                	fld	fs0,32(a2)
    484e:	0036                	c.slli	zero,0xd
    4850:	0d00                	addi	s0,sp,656
    4852:	0b70                	addi	a2,sp,412
    4854:	0000                	unimp
    4856:	2501                	jal	4e56 <uart_send_char+0xe>
    4858:	00002c03          	lw	s8,0(zero) # 0 <RAM_START_ADDRESS>
    485c:	5a00                	lw	s0,48(a2)
    485e:	0036                	c.slli	zero,0xd
    for (str = buf; *fmt; fmt++)
    4860:	0e00                	addi	s0,sp,784
    4862:	0c80                	addi	s0,sp,592
    4864:	0000                	unimp
    4866:	2501                	jal	4e66 <uart_send_char+0x1e>
    4868:	00002c03          	lw	s8,0(zero) # 0 <RAM_START_ADDRESS>
        if (*fmt != '%')
    486c:	0000                	unimp
    486e:	635f410f          	0x635f410f
    4872:	0100                	addi	s0,sp,128
    4874:	0326                	slli	t1,t1,0x9
    4876:	0569                	addi	a0,a0,26
    4878:	0000                	unimp
    487a:	4110                	lw	a2,0(a0)
            *str++ = *fmt;
    487c:	735f 0100 0326      	0x3260100735f
    4882:	0569                	addi	a0,a0,26
    4884:	0000                	unimp
    4886:	36aa                	fld	fa3,168(sp)
    4888:	0000                	unimp
    488a:	4110                	lw	a2,0(a0)
    488c:	655f 0100 0326      	0x3260100655f
    4892:	0569                	addi	a0,a0,26
            continue;
    4894:	0000                	unimp
    4896:	374c                	fld	fa1,168(a4)
        flags = 0;
    4898:	0000                	unimp
    489a:	9a0d                	andi	a2,a2,-29
        fmt++; // This also skips first '%'
    489c:	0100000b          	0x100000b
    48a0:	0326                	slli	t1,t1,0x9
    48a2:	0570                	addi	a2,sp,652
    48a4:	0000                	unimp
    48a6:	383d                	jal	40e4 <number+0xb0>
        switch (*fmt)
    48a8:	0000                	unimp
    48aa:	660d                	lui	a2,0x3
    48ac:	0100000b          	0x100000b
    48b0:	0326                	slli	t1,t1,0x9
    48b2:	0570                	addi	a2,sp,652
    48b4:	0000                	unimp
    48b6:	399a                	fld	fs3,416(sp)
    48b8:	0000                	unimp
    48ba:	635f420f          	0x635f420f
    48be:	0100                	addi	s0,sp,128
    48c0:	05690327          	vsuxei8.v	v6,(s2),v22,v0.t
    48c4:	0000                	unimp
    48c6:	4210                	lw	a2,0(a2)
    48c8:	735f 0100 0327      	0x3270100735f
    48ce:	0569                	addi	a0,a0,26
    48d0:	0000                	unimp
    48d2:	3aff                	0x3aff
                flags |= LEFT;
    48d4:	0000                	unimp
    48d6:	4210                	lw	a2,0(a2)
    48d8:	655f 0100 0327      	0x3270100655f
    48de:	0569                	addi	a0,a0,26
                goto repeat;
    48e0:	0000                	unimp
    48e2:	3b85                	jal	4652 <iaddr+0xc6>
                flags |= PLUS;
    48e4:	0000                	unimp
    48e6:	b40d                	j	4308 <number+0x2d4>
    48e8:	0100000b          	0x100000b
    48ec:	05700327          	vsuxei8.v	v6,(zero),v23,v0.t
                goto repeat;
    48f0:	0000                	unimp
    48f2:	3bc4                	fld	fs1,176(a5)
                flags |= SPACE;
    48f4:	0000                	unimp
    48f6:	b90d                	j	4528 <eaddr+0x154>
    48f8:	0100000b          	0x100000b
    48fc:	05700327          	vsuxei8.v	v6,(zero),v23,v0.t
                goto repeat;
    4900:	0000                	unimp
    4902:	3cd4                	fld	fa3,184(s1)
                flags |= HEX_PREP;
    4904:	0000                	unimp
    4906:	635f520f          	0x635f520f
    490a:	0100                	addi	s0,sp,128
    490c:	0328                	addi	a0,sp,392
    490e:	0569                	addi	a0,a0,26
                goto repeat;
    4910:	0000                	unimp
    4912:	5210                	lw	a2,32(a2)
                flags |= ZEROPAD;
    4914:	735f 0100 0328      	0x3280100735f
    491a:	0569                	addi	a0,a0,26
    491c:	0000                	unimp
    491e:	3d5d                	jal	47d4 <iaddr+0x248>
                goto repeat;
    4920:	0000                	unimp
    4922:	5210                	lw	a2,32(a2)
        field_width = -1;
    4924:	655f 0100 0328      	0x3280100655f
    492a:	0569                	addi	a0,a0,26
        if (is_digit(*fmt))
    492c:	0000                	unimp
    492e:	3e0a                	fld	ft8,160(sp)
    4930:	0000                	unimp
    4932:	4c0d                	li	s8,3
    4934:	0100000b          	0x100000b
    4938:	0328                	addi	a0,sp,392
    493a:	0570                	addi	a2,sp,652
    493c:	0000                	unimp
    493e:	00003f6f          	jal	t5,793e <__subdf3+0x9c2>
    4942:	850d                	srai	a0,a0,0x3
    4944:	000c                	0xc
    4946:	0100                	addi	s0,sp,128
    4948:	0328                	addi	a0,sp,392
    494a:	0570                	addi	a2,sp,652
            field_width = skip_atoi(&fmt);
    494c:	0000                	unimp
    494e:	41a5                	li	gp,9
    4950:	0000                	unimp
    4952:	0100720f          	0x100720f
    4956:	0a29                	addi	s4,s4,10
    4958:	005d                	c.nop	23
    495a:	0000                	unimp
    495c:	3811                	jal	4170 <number+0x13c>
    495e:	30000007          	vlseg2e128.v	v0,(zero),v0.t
        else if (*fmt == '*')
    4962:	0002                	c.slli64	zero
    4964:	1200                	addi	s0,sp,288
    4966:	0b9f 0000 2c01      	0x2c0100000b9f
    496c:	0000b303          	0xb303
            fmt++;
    4970:	0000                	unimp
    4972:	6011                	c.lui	zero,0x4
    4974:	46000007          	vluxseg3ei8.v	v0,(zero),v0
    4978:	0002                	c.slli64	zero
    497a:	1200                	addi	s0,sp,288
            field_width = va_arg(args, int);
    497c:	0b9f 0000 2d01      	0x2d0100000b9f
    4982:	0000b303          	0xb303
    4986:	0000                	unimp
    4988:	a811                	j	499c <ee_vsprintf+0x158>
    498a:	2c000007          	vloxseg2ei8.v	v0,(zero),v0,v0.t
    498e:	13000003          	lb	zero,304(zero) # 130 <calc_func+0x6c>
            if (field_width < 0)
    4992:	0c5a                	slli	s8,s8,0x16
    4994:	0000                	unimp
    4996:	2e01                	jal	4ca6 <ee_vsprintf+0x462>
                field_width = -field_width;
    4998:	00705003          	lhu	zero,7(zero) # 7 <RAM_START_ADDRESS+0x7>
    499c:	1300                	addi	s0,sp,416
    499e:	0c5f 0000 2e01      	0x2e0100000c5f
                flags |= LEFT;
    49a4:	00717003          	0x717003
    49a8:	1300                	addi	s0,sp,416
    49aa:	0c64                	addi	s1,sp,540
    49ac:	0000                	unimp
    49ae:	2e01                	jal	4cbe <ee_vsprintf+0x47a>
        precision = -1;
    49b0:	00709803          	lh	a6,7(ra)
    49b4:	1300                	addi	s0,sp,416
    49b6:	00000c77          	0xc77
        if (*fmt == '.')
    49ba:	2e01                	jal	4cca <ee_vsprintf+0x486>
    49bc:	00724c03          	lbu	s8,7(tp) # 3007 <core_init_state+0x6b>
    49c0:	0d00                	addi	s0,sp,656
    49c2:	0c19                	addi	s8,s8,6
    49c4:	0000                	unimp
    49c6:	2e01                	jal	4cd6 <ee_vsprintf+0x492>
            ++fmt;
    49c8:	00002c03          	lw	s8,0(zero) # 0 <RAM_START_ADDRESS>
    49cc:	9300                	0x9300
    49ce:	11000043          	fmadd.s	ft0,ft0,fa6,ft2,rne
    49d2:	0808                	addi	a0,sp,16
            if (is_digit(*fmt))
    49d4:	0000                	unimp
    49d6:	02a9                	addi	t0,t0,10
    49d8:	0000                	unimp
    49da:	5f10                	lw	a2,56(a4)
    49dc:	785f 0100 032e      	0x32e0100785f
    49e2:	0570                	addi	a2,sp,652
    49e4:	0000                	unimp
    49e6:	448d                	li	s1,3
    49e8:	0000                	unimp
    49ea:	1100                	addi	s0,sp,160
    49ec:	0838                	addi	a4,sp,24
    49ee:	0000                	unimp
    49f0:	000002c3          	fmadd.s	ft5,ft0,ft0,ft0,rne
                precision = skip_atoi(&fmt);
    49f4:	5f10                	lw	a2,56(a4)
    49f6:	785f 0100 032e      	0x32e0100785f
    49fc:	0570                	addi	a2,sp,652
    49fe:	0000                	unimp
    4a00:	44a0                	lw	s0,72(s1)
    4a02:	0000                	unimp
    4a04:	1100                	addi	s0,sp,160
    4a06:	0820                	addi	s0,sp,24
            else if (*fmt == '*')
    4a08:	0000                	unimp
    4a0a:	02dd                	addi	t0,t0,23
    4a0c:	0000                	unimp
    4a0e:	5f10                	lw	a2,56(a4)
    4a10:	785f 0100 032e      	0x32e0100785f
    4a16:	0570                	addi	a2,sp,652
                ++fmt;
    4a18:	0000                	unimp
    4a1a:	000044b3          	xor	s1,zero,zero
    4a1e:	1400                	addi	s0,sp,544
    4a20:	71a4                	flw	fs1,96(a1)
    4a22:	0000                	unimp
                precision = va_arg(args, int);
    4a24:	0010                	0x10
    4a26:	0000                	unimp
    4a28:	000002fb          	0x2fb
    4a2c:	5f10                	lw	a2,56(a4)
    4a2e:	785f 0100 032e      	0x32e0100785f
    4a34:	0570                	addi	a2,sp,652
    4a36:	0000                	unimp
            if (precision < 0)
    4a38:	44c6                	lw	s1,80(sp)
    4a3a:	0000                	unimp
    4a3c:	1100                	addi	s0,sp,160
    4a3e:	0850                	addi	a2,sp,20
                precision = 0;
    4a40:	0000                	unimp
    4a42:	0315                	addi	t1,t1,5
        qualifier = -1;
    4a44:	0000                	unimp
    4a46:	5f10                	lw	a2,56(a4)
    4a48:	785f 0100 032e      	0x32e0100785f
        if (*fmt == 'l' || *fmt == 'L')
    4a4e:	0570                	addi	a2,sp,652
    4a50:	0000                	unimp
    4a52:	44d9                	li	s1,22
    4a54:	0000                	unimp
    4a56:	1500                	addi	s0,sp,672
    4a58:	0868                	addi	a0,sp,28
    4a5a:	0000                	unimp
    4a5c:	5f10                	lw	a2,56(a4)
    4a5e:	785f 0100 032e      	0x32e0100785f
    4a64:	0570                	addi	a2,sp,652
    4a66:	0000                	unimp
    4a68:	44ec                	lw	a1,76(s1)
    4a6a:	0000                	unimp
            qualifier = *fmt;
    4a6c:	0000                	unimp
    4a6e:	8011                	srli	s0,s0,0x4
    4a70:	0008                	0x8
    4a72:	8e00                	0x8e00
    4a74:	0004                	0x4
    4a76:	1300                	addi	s0,sp,416
            fmt++;
    4a78:	00000b6b          	0xb6b
    4a7c:	2e01                	jal	4d8c <ee_vsprintf+0x548>
    4a7e:	00730003          	lb	zero,7(t1)
    4a82:	1300                	addi	s0,sp,416
        base = 10;
    4a84:	09d0                	addi	a2,sp,212
    4a86:	0000                	unimp
    4a88:	2e01                	jal	4d98 <ee_vsprintf+0x554>
    4a8a:	00741c03          	lh	s8,7(s0) # ffff9007 <RAM_SIZE+0xfffe9007>
        switch (*fmt)
    4a8e:	1300                	addi	s0,sp,416
    4a90:	0b75                	addi	s6,s6,29
    4a92:	0000                	unimp
    4a94:	2e01                	jal	4da4 <ee_vsprintf+0x560>
    4a96:	00734803          	lbu	a6,7(t1)
    4a9a:	1300                	addi	s0,sp,416
    4a9c:	0b95                	addi	s7,s7,5
    4a9e:	0000                	unimp
    4aa0:	2e01                	jal	4db0 <ee_vsprintf+0x56c>
    4aa2:	00757403          	0x757403
    4aa6:	1300                	addi	s0,sp,416
    4aa8:	0c51                	addi	s8,s8,20
    4aaa:	0000                	unimp
    4aac:	2e01                	jal	4dbc <ee_vsprintf+0x578>
    4aae:	00724c03          	lbu	s8,7(tp) # 7 <RAM_START_ADDRESS+0x7>
    4ab2:	0d00                	addi	s0,sp,656
    4ab4:	0c19                	addi	s8,s8,6
    4ab6:	0000                	unimp
                if (!(flags & LEFT))
    4ab8:	2e01                	jal	4dc8 <ee_vsprintf+0x584>
    4aba:	00002c03          	lw	s8,0(zero) # 0 <RAM_START_ADDRESS>
    4abe:	1f00                	addi	s0,sp,944
    4ac0:	0045                	c.nop	17
    4ac2:	1100                	addi	s0,sp,160
                    while (--field_width > 0)
    4ac4:	08e8                	addi	a0,sp,92
    4ac6:	0000                	unimp
                        *str++ = ' ';
    4ac8:	0000039b          	0x39b
    4acc:	5f10                	lw	a2,56(a4)
    4ace:	785f 0100 032e      	0x32e0100785f
    4ad4:	0570                	addi	a2,sp,652
    4ad6:	0000                	unimp
    4ad8:	00004617          	auipc	a2,0x4
                    while (--field_width > 0)
    4adc:	1100                	addi	s0,sp,160
    4ade:	0900                	addi	s0,sp,144
    4ae0:	0000                	unimp
    4ae2:	03b5                	addi	t2,t2,13
    4ae4:	0000                	unimp
    4ae6:	5f10                	lw	a2,56(a4)
    4ae8:	785f 0100 032e      	0x32e0100785f
    4aee:	0570                	addi	a2,sp,652
                *str++ = (unsigned char)va_arg(args, int);
    4af0:	0000                	unimp
    4af2:	462a                	lw	a2,136(sp)
    4af4:	0000                	unimp
    4af6:	1400                	addi	s0,sp,544
    4af8:	73d8                	flw	fa4,36(a5)
    4afa:	0000                	unimp
    4afc:	0010                	0x10
    4afe:	0000                	unimp
    4b00:	000003d3          	fadd.s	ft7,ft0,ft0,rne
    4b04:	5f10                	lw	a2,56(a4)
    4b06:	785f 0100 032e      	0x32e0100785f
    4b0c:	0570                	addi	a2,sp,652
    4b0e:	0000                	unimp
    4b10:	463d                	li	a2,15
    4b12:	0000                	unimp
                while (--field_width > 0)
    4b14:	1400                	addi	s0,sp,544
    4b16:	7450                	flw	fa2,44(s0)
                    *str++ = ' ';
    4b18:	0000                	unimp
    4b1a:	0010                	0x10
    4b1c:	0000                	unimp
    4b1e:	03f1                	addi	t2,t2,28
    4b20:	0000                	unimp
    4b22:	5f10                	lw	a2,56(a4)
    4b24:	785f 0100 032e      	0x32e0100785f
    4b2a:	0570                	addi	a2,sp,652
                while (--field_width > 0)
    4b2c:	0000                	unimp
    4b2e:	4650                	lw	a2,12(a2)
    4b30:	0000                	unimp
    4b32:	1100                	addi	s0,sp,160
    4b34:	0938                	addi	a4,sp,152
    4b36:	0000                	unimp
    4b38:	0000040b          	0x40b
    4b3c:	5f10                	lw	a2,56(a4)
    4b3e:	785f 0100 032e      	0x32e0100785f
                s = va_arg(args, char *);
    4b44:	0570                	addi	a2,sp,652
    4b46:	0000                	unimp
    4b48:	00004663          	bltz	zero,4b54 <ee_vsprintf+0x310>
    4b4c:	1400                	addi	s0,sp,544
    4b4e:	74fc                	flw	fa5,108(s1)
    4b50:	0000                	unimp
    4b52:	0010                	0x10
    4b54:	0000                	unimp
    4b56:	0429                	addi	s0,s0,10
                if (!s)
    4b58:	0000                	unimp
    4b5a:	5f10                	lw	a2,56(a4)
    4b5c:	785f 0100 032e      	0x32e0100785f
                    s = "<NULL>";
    4b62:	0570                	addi	a2,sp,652
    4b64:	0000                	unimp
    4b66:	4681                	li	a3,0
    4b68:	0000                	unimp
    4b6a:	1400                	addi	s0,sp,544
                len = strnlen(s, precision);
    4b6c:	7544                	flw	fs1,44(a0)
    4b6e:	0000                	unimp
    4b70:	0010                	0x10
    4b72:	0000                	unimp
    4b74:	00000447          	fmsub.s	fs0,ft0,ft0,ft0,rne
    4b78:	5f10                	lw	a2,56(a4)
    4b7a:	785f 0100 032e      	0x32e0100785f
    4b80:	0570                	addi	a2,sp,652
    4b82:	0000                	unimp
                if (!(flags & LEFT))
    4b84:	4694                	lw	a3,8(a3)
    4b86:	0000                	unimp
    4b88:	1400                	addi	s0,sp,544
    4b8a:	7560                	flw	fs0,108(a0)
    4b8c:	0000                	unimp
    4b8e:	0010                	0x10
                    while (len < field_width--)
    4b90:	0000                	unimp
    4b92:	0465                	addi	s0,s0,25
                        *str++ = ' ';
    4b94:	0000                	unimp
    4b96:	5f10                	lw	a2,56(a4)
    4b98:	785f 0100 032e      	0x32e0100785f
    4b9e:	0570                	addi	a2,sp,652
    4ba0:	0000                	unimp
    4ba2:	46c2                	lw	a3,16(sp)
    4ba4:	0000                	unimp
    4ba6:	1500                	addi	s0,sp,672
                    while (len < field_width--)
    4ba8:	0918                	addi	a4,sp,144
    4baa:	0000                	unimp
    4bac:	be0d                	j	46de <iaddr+0x152>
    4bae:	0100000b          	0x100000b
    4bb2:	032e                	slli	t1,t1,0xb
    4bb4:	002c                	addi	a1,sp,8
    4bb6:	0000                	unimp
    4bb8:	46d5                	li	a3,21
    4bba:	0000                	unimp
                for (i = 0; i < len; ++i)
    4bbc:	8016                	c.mv	zero,t0
    4bbe:	0075                	c.nop	29
    4bc0:	7700                	flw	fs0,40(a4)
    4bc2:	0005                	c.nop	1
                    *str++ = *s++;
    4bc4:	1600                	addi	s0,sp,800
    4bc6:	7600                	flw	fs0,40(a2)
    4bc8:	0000                	unimp
    4bca:	00000577          	0x577
    4bce:	0000                	unimp
    4bd0:	5011                	c.li	zero,-28
    4bd2:	0009                	c.nop	2
    4bd4:	5600                	lw	s0,40(a2)
    4bd6:	0005                	c.nop	1
    4bd8:	1200                	addi	s0,sp,288
    4bda:	0bd4                	addi	a3,sp,468
    4bdc:	0000                	unimp
    4bde:	2f01                	jal	52ee <__adddf3+0x3b2>
    4be0:	00002c03          	lw	s8,0(zero) # 0 <RAM_START_ADDRESS>
                for (i = 0; i < len; ++i)
    4be4:	1700                	addi	s0,sp,928
    4be6:	00000517          	auipc	a0,0x0
    4bea:	3c12                	fld	fs8,288(sp)
    4bec:	000c                	0xc
    4bee:	0100                	addi	s0,sp,128
    4bf0:	0569032f          	vamoaddei8.v	v6,(s2),v22,v6,v0.t
    4bf4:	0000                	unimp
    4bf6:	5112                	lw	sp,36(sp)
    4bf8:	0100000b          	0x100000b
                while (len < field_width--)
    4bfc:	0569032f          	vamoaddei8.v	v6,(s2),v22,v6,v0.t
                    *str++ = ' ';
    4c00:	0000                	unimp
    4c02:	7a12                	flw	fs4,36(sp)
    4c04:	0100000b          	0x100000b
    4c08:	0569032f          	vamoaddei8.v	v6,(s2),v22,v6,v0.t
    4c0c:	0000                	unimp
    4c0e:	ed12                	fsw	ft4,152(sp)
    4c10:	0100000b          	0x100000b
                while (len < field_width--)
    4c14:	0570032f          	vamoaddei8.v	v6,(zero),v23,v6,v0.t
    4c18:	0000                	unimp
    4c1a:	0312                	slli	t1,t1,0x4
    4c1c:	000c                	0xc
    4c1e:	0100                	addi	s0,sp,128
    4c20:	0570032f          	vamoaddei8.v	v6,(zero),v23,v6,v0.t
    4c24:	0000                	unimp
    4c26:	0004f617          	auipc	a2,0x4f
                continue;
    4c2a:	0f00                	addi	s0,sp,912
                if (field_width == -1)
    4c2c:	5f5f 0078 2f01      	0x2f0100785f5f
    4c32:	00057003          	0x57003
    4c36:	0000                	unimp
                    field_width = 2 * sizeof(void *);
    4c38:	00050817          	auipc	a6,0x50
    4c3c:	0f00                	addi	s0,sp,912
    4c3e:	5f5f 0078 2f01      	0x2f0100785f5f
                    flags |= ZEROPAD;
    4c44:	00057003          	0x57003
    4c48:	0000                	unimp
    4c4a:	0f18                	addi	a4,sp,912
                             (unsigned long)va_arg(args, void *),
    4c4c:	5f5f 0078 2f01      	0x2f0100785f5f
    4c52:	00057003          	0x57003
    4c56:	0000                	unimp
    4c58:	1400                	addi	s0,sp,544
    4c5a:	7260                	flw	fs0,100(a2)
                str = number(str,
    4c5c:	0000                	unimp
    4c5e:	0014                	0x14
    4c60:	0000                	unimp
    4c62:	0535                	addi	a0,a0,13
    4c64:	0000                	unimp
    4c66:	5f10                	lw	a2,56(a4)
    4c68:	785f 0100 032f      	0x32f0100785f
    4c6e:	0570                	addi	a2,sp,652
    4c70:	0000                	unimp
    4c72:	4744                	lw	s1,12(a4)
    4c74:	0000                	unimp
    4c76:	1700                	addi	s0,sp,928
    4c78:	00000547          	fmsub.s	fa0,ft0,ft0,ft0,rne
                continue;
    4c7c:	785f5f0f          	0x785f5f0f
                flags |= UPPERCASE;
    4c80:	0100                	addi	s0,sp,128
    4c82:	0570032f          	vamoaddei8.v	v6,(zero),v23,v6,v0.t
    4c86:	0000                	unimp
    4c88:	1800                	addi	s0,sp,48
    4c8a:	785f5f0f          	0x785f5f0f
                if (qualifier == 'l')
    4c8e:	0100                	addi	s0,sp,128
    4c90:	0570032f          	vamoaddei8.v	v6,(zero),v23,v6,v0.t
    4c94:	0000                	unimp
    4c96:	0000                	unimp
                    str = eaddr(str,
    4c98:	7015                	c.lui	zero,0xfffe5
    4c9a:	0009                	c.nop	2
    4c9c:	1200                	addi	s0,sp,288
    4c9e:	00000a93          	li	s5,0
    4ca2:	2f01                	jal	53b2 <__adddf3+0x476>
    4ca4:	0000b303          	0xb303
    4ca8:	0000                	unimp
    4caa:	0200                	addi	s0,sp,256
    4cac:	0504                	addi	s1,sp,640
    4cae:	0192                	slli	gp,gp,0x4
    4cb0:	0000                	unimp
    4cb2:	0402                	c.slli64	s0
    4cb4:	0008c507          	flq	fa0,0(a7)
    4cb8:	1900                	addi	s0,sp,176
    4cba:	0c6e                	slli	s8,s8,0x1b
    4cbc:	0000                	unimp
    4cbe:	0c6e                	slli	s8,s8,0x1b
    4cc0:	0000                	unimp
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
lui     sp,%hi(__stack_top)                                             
       0:	1101                	addi	sp,sp,-32
       2:	1000                	addi	s0,sp,32
addi    sp,sp,%lo(__stack_top)
       4:	1106                	slli	sp,sp,0x21
       6:	1201                	addi	tp,tp,-32
jal   zero, _start
       8:	0301                	addi	t1,t1,0
       a:	1b0e                	slli	s6,s6,0x23
       c:	250e                	fld	fa0,192(sp)
       e:	130e                	slli	t1,t1,0x23
      10:	0005                	c.nop	1
      12:	0000                	unimp
      14:	1101                	addi	sp,sp,-32
      16:	2501                	jal	616 <core_bench_list+0x1ca>
      18:	130e                	slli	t1,t1,0x23
      1a:	1b0e030b          	0x1b0e030b
      1e:	110e                	slli	sp,sp,0x23
      20:	1201                	addi	tp,tp,-32
      22:	1006                	c.slli	zero,0x21
      24:	02000017          	auipc	zero,0x2000
      28:	0024                	addi	s1,sp,8
      2a:	0b3e0b0b          	0xb3e0b0b
      2e:	00000803          	lb	a6,0(zero) # 0 <RAM_START_ADDRESS>
      32:	0b002403          	lw	s0,176(zero) # b0 <frame_dummy+0xc>
      36:	030b3e0b          	0x30b3e0b
      3a:	000e                	c.slli	zero,0x3
      3c:	0400                	addi	s0,sp,512
      3e:	0016                	c.slli	zero,0x5
      40:	0b3a0e03          	lb	t3,179(s4)
      44:	0b390b3b          	0xb390b3b
      48:	1349                	addi	t1,t1,-14
      4a:	0000                	unimp
      4c:	1305                	addi	t1,t1,-31
      4e:	0301                	addi	t1,t1,0
      50:	0b0e                	slli	s6,s6,0x3
      52:	3b0b3a0b          	0x3b0b3a0b
      56:	010b390b          	0x10b390b
      5a:	06000013          	li	zero,96
      5e:	000d                	c.nop	3
      60:	0b3a0e03          	lb	t3,179(s4)
      64:	0b390b3b          	0xb390b3b
      68:	1349                	addi	t1,t1,-14
      6a:	0b38                	addi	a4,sp,408
      6c:	0000                	unimp
      6e:	03000d07          	vle8ff.v	v26,(zero)
      72:	3a08                	fld	fa0,48(a2)
      74:	390b3b0b          	0x390b3b0b
      78:	3813490b          	0x3813490b
      7c:	0800000b          	0x800000b
      80:	0b0b000f          	0xb0b000f
      84:	1349                	addi	t1,t1,-14
      86:	0000                	unimp
      88:	0109                	addi	sp,sp,2
      8a:	4901                	li	s2,0
      8c:	00130113          	addi	sp,t1,1
      90:	0a00                	addi	s0,sp,272
      92:	0021                	c.nop	8
      94:	1349                	addi	t1,t1,-14
      96:	00000b2f          	vamoaddei8.v	zero,(zero),v0,v22,v0.t
      9a:	0b000f0b          	0xb000f0b
      9e:	0c00000b          	0xc00000b
      a2:	0115                	addi	sp,sp,5
      a4:	13491927          	fsh	fs4,306(s2) # 1132 <main+0x122>
      a8:	1301                	addi	t1,t1,-32
      aa:	0000                	unimp
      ac:	050d                	addi	a0,a0,3
      ae:	4900                	lw	s0,16(a0)
      b0:	0e000013          	li	zero,224
      b4:	012e                	slli	sp,sp,0xb
      b6:	0e03193f 053b0b3a 	0x53b0b3a0e03193f
      be:	0b39                	addi	s6,s6,14
      c0:	13491927          	fsh	fs4,306(s2)
{
      c4:	0111                	addi	sp,sp,4
      c6:	0612                	slli	a2,a2,0x4
      c8:	1840                	addi	s0,sp,52
      ca:	4296                	lw	t0,68(sp)
      cc:	0119                	addi	sp,sp,6
      ce:	0f000013          	li	zero,240
      d2:	0005                	c.nop	1
      d4:	0b3a0e03          	lb	t3,179(s4)
      d8:	0b39053b          	0xb39053b
    ee_s16 data = *pdata;
      dc:	1349                	addi	t1,t1,-14
      de:	1802                	slli	a6,a6,0x20
      e0:	0000                	unimp
      e2:	0510                	addi	a2,sp,640
      e4:	0300                	addi	s0,sp,384
      e6:	3a08                	fld	fa0,48(a2)
          & 1;  /* bit 7 indicates if the function result has been cached */
      e8:	39053b0b          	0x39053b0b
      ec:	0213490b          	0x213490b
      f0:	0018                	0x18
      f2:	1100                	addi	s0,sp,160
      f4:	0034                	addi	a3,sp,8
      f6:	0b3a0803          	lb	a6,179(s4)
      fa:	0b39053b          	0xb39053b
    ee_u8  optype
      fe:	1349                	addi	t1,t1,-14
     100:	1802                	slli	a6,a6,0x20
     102:	0000                	unimp
    if (optype) /* if cached, use cache */
     104:	3412                	fld	fs0,288(sp)
     106:	0300                	addi	s0,sp,384
     108:	3a0e                	fld	fs4,224(sp)
     10a:	39053b0b          	0x39053b0b
        return (data & 0x007f);
     10e:	0213490b          	0x213490b
     112:	0018                	0x18
     114:	1300                	addi	s0,sp,416
     116:	012e                	slli	sp,sp,0xb
     118:	0e03193f 053b0b3a 	0x53b0b3a0e03193f
        ee_s16 flag = data & 0x7; /* bits 0-2 is type of function to perform */
     120:	0b39                	addi	s6,s6,14
     122:	13491927          	fsh	fs4,306(s2)
     126:	0111                	addi	sp,sp,4
     128:	0612                	slli	a2,a2,0x4
     12a:	1840                	addi	s0,sp,52
               & 0xf);       /* bits 3-6 is specific data for the operation */
     12c:	01194297          	auipc	t0,0x1194
     130:	14000013          	li	zero,320
     134:	012e                	slli	sp,sp,0xb
     136:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
        ee_s16 dtype
     13e:	0b39                	addi	s6,s6,14
     140:	13491927          	fsh	fs4,306(s2)
        dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
     144:	0111                	addi	sp,sp,4
     146:	0612                	slli	a2,a2,0x4
     148:	1840                	addi	s0,sp,52
     14a:	4296                	lw	t0,68(sp)
     14c:	0119                	addi	sp,sp,6
     14e:	15000013          	li	zero,336
     152:	0005                	c.nop	1
     154:	0b3a0e03          	lb	t3,179(s4)
     158:	0b390b3b          	0xb390b3b
     15c:	1349                	addi	t1,t1,-14
     15e:	1802                	slli	a6,a6,0x20
        switch (flag)
     160:	0000                	unimp
     162:	3416                	fld	fs0,352(sp)
     164:	0300                	addi	s0,sp,384
     166:	3a0e                	fld	fs4,224(sp)
     168:	390b3b0b          	0x390b3b0b
     16c:	0213490b          	0x213490b
     170:	0018                	0x18
     172:	1700                	addi	s0,sp,928
                if (dtype < 0x22) /* set min period for bit corruption */
     174:	0111010b          	0x111010b
     178:	0612                	slli	a2,a2,0x4
     17a:	1301                	addi	t1,t1,-32
     17c:	0000                	unimp
     17e:	0b18                	addi	a4,sp,400
                    dtype = 0x22;
     180:	1101                	addi	sp,sp,-32
     182:	1201                	addi	tp,tp,-32
     184:	0006                	c.slli	zero,0x1
     186:	1900                	addi	s0,sp,176
                retval = core_bench_state(res->size,
     188:	0005                	c.nop	1
     18a:	0b3a0803          	lb	a6,179(s4)
     18e:	0b390b3b          	0xb390b3b
                                          res->memblock[3],
     192:	1349                	addi	t1,t1,-14
     194:	1802                	slli	a6,a6,0x20
     196:	0000                	unimp
                retval = core_bench_state(res->size,
     198:	341a                	fld	fs0,416(sp)
     19a:	0300                	addi	s0,sp,384
     19c:	3a08                	fld	fa0,48(a2)
     19e:	390b3b0b          	0x390b3b0b
     1a2:	0213490b          	0x213490b
     1a6:	0018                	0x18
     1a8:	1b00                	addi	s0,sp,432
     1aa:	012e                	slli	sp,sp,0xb
     1ac:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
     1b4:	0b39                	addi	s6,s6,14
     1b6:	01111927          	fsh	fa7,18(sp)
     1ba:	0612                	slli	a2,a2,0x4
     1bc:	1840                	addi	s0,sp,52
     1be:	01194297          	auipc	t0,0x1194
                if (res->crcstate == 0)
     1c2:	1c000013          	li	zero,448
     1c6:	012e                	slli	sp,sp,0xb
     1c8:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
                    res->crcstate = retval;
     1d0:	0b39                	addi	s6,s6,14
     1d2:	13491927          	fsh	fs4,306(s2)
     1d6:	0111                	addi	sp,sp,4
                break;
     1d8:	0612                	slli	a2,a2,0x4
     1da:	1840                	addi	s0,sp,52
                retval = core_bench_matrix(&(res->mat), dtype, res->crc);
     1dc:	01194297          	auipc	t0,0x1194
     1e0:	00000013          	nop
     1e4:	1101                	addi	sp,sp,-32
     1e6:	2501                	jal	7e6 <core_list_init+0x7e>
     1e8:	130e                	slli	t1,t1,0x23
     1ea:	1b0e030b          	0x1b0e030b
     1ee:	110e                	slli	sp,sp,0x23
     1f0:	1201                	addi	tp,tp,-32
     1f2:	1006                	c.slli	zero,0x21
     1f4:	02000017          	auipc	zero,0x2000
     1f8:	0024                	addi	s1,sp,8
     1fa:	0b3e0b0b          	0xb3e0b0b
     1fe:	00000803          	lb	a6,0(zero) # 0 <RAM_START_ADDRESS>
     202:	0b002403          	lw	s0,176(zero) # b0 <frame_dummy+0xc>
     206:	030b3e0b          	0x30b3e0b
                if (res->crcmatrix == 0)
     20a:	000e                	c.slli	zero,0x3
     20c:	0400                	addi	s0,sp,512
     20e:	0016                	c.slli	zero,0x5
     210:	0b3a0e03          	lb	t3,179(s4)
                    res->crcmatrix = retval;
     214:	0b390b3b          	0xb390b3b
     218:	1349                	addi	t1,t1,-14
     21a:	0000                	unimp
     21c:	3405                	jal	fffffc3c <RAM_SIZE+0xfffefc3c>
     21e:	0300                	addi	s0,sp,384
                break;
     220:	3a0e                	fld	fs4,224(sp)
     222:	390b3b0b          	0x390b3b0b
                retval = data;
     226:	3f13490b          	0x3f13490b
     22a:	3c19                	jal	fffffc40 <RAM_SIZE+0xfffefc40>
                break;
     22c:	0019                	c.nop	6
     22e:	0600                	addi	s0,sp,768
                break;
     230:	0e030113          	addi	sp,t1,224
     234:	0b3a0b0b          	0xb3a0b0b
                break;
     238:	0b390b3b          	0xb390b3b
        res->crc = crcu16(retval, res->crc);
     23c:	1301                	addi	t1,t1,-32
     23e:	0000                	unimp
     240:	03000d07          	vle8ff.v	v26,(zero)
     244:	3a0e                	fld	fs4,224(sp)
     246:	390b3b0b          	0x390b3b0b
     24a:	3813490b          	0x3813490b
     24e:	0800000b          	0x800000b
     252:	000d                	c.nop	3
     254:	0b3a0803          	lb	a6,179(s4)
     258:	0b390b3b          	0xb390b3b
     25c:	1349                	addi	t1,t1,-14
     25e:	0b38                	addi	a4,sp,408
     260:	0000                	unimp
     262:	0f09                	addi	t5,t5,2
        retval &= 0x007f;
     264:	0b00                	addi	s0,sp,400
     266:	0013490b          	0x13490b
     26a:	0a00                	addi	s0,sp,272
     26c:	0101                	addi	sp,sp,0
     26e:	1349                	addi	t1,t1,-14
        *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
     270:	1301                	addi	t1,t1,-32
     272:	0000                	unimp
     274:	4900210b          	0x4900210b
     278:	000b2f13          	slti	t5,s6,0
     27c:	0c00                	addi	s0,sp,528
     27e:	0b0b000f          	0xb0b000f
     282:	0000                	unimp
     284:	340d                	jal	fffffca6 <RAM_SIZE+0xfffefca6>
     286:	0300                	addi	s0,sp,384
     288:	3a0e                	fld	fs4,224(sp)
     28a:	390b3b0b          	0x390b3b0b
     28e:	0213490b          	0x213490b
     292:	0018                	0x18
     294:	0e00                	addi	s0,sp,784
     296:	0034                	addi	a3,sp,8
     298:	0b3a0e03          	lb	t3,179(s4)
     29c:	0b390b3b          	0xb390b3b
     2a0:	1349                	addi	t1,t1,-14
     2a2:	1802193f 2e0f0000 	0x2e0f00001802193f
}
     2aa:	3f01                	jal	1ba <calc_func+0xf6>
     2ac:	0319                	addi	t1,t1,6
     2ae:	3a0e                	fld	fs4,224(sp)
     2b0:	390b3b0b          	0x390b3b0b
     2b4:	1119270b          	0x1119270b
     2b8:	1201                	addi	tp,tp,-32
     2ba:	4006                	0x4006
{
     2bc:	9618                	0x9618
     2be:	1942                	slli	s2,s2,0x30
     2c0:	1301                	addi	t1,t1,-32
     2c2:	0000                	unimp
     2c4:	3410                	fld	fa2,40(s0)
     2c6:	0300                	addi	s0,sp,384
     2c8:	3a08                	fld	fa0,48(a2)
     2ca:	390b3b0b          	0x390b3b0b
     2ce:	0213490b          	0x213490b
     2d2:	0018                	0x18
     2d4:	1100                	addi	s0,sp,160
     2d6:	0111010b          	0x111010b
    ee_s16 val1 = calc_func(&(a->data16), res);
     2da:	0612                	slli	a2,a2,0x4
     2dc:	1301                	addi	t1,t1,-32
     2de:	0000                	unimp
     2e0:	0b12                	slli	s6,s6,0x4
     2e2:	1101                	addi	sp,sp,-32
     2e4:	1201                	addi	tp,tp,-32
     2e6:	0006                	c.slli	zero,0x1
     2e8:	1300                	addi	s0,sp,416
     2ea:	0021                	c.nop	8
     2ec:	1349                	addi	t1,t1,-14
     2ee:	0000052f          	vamoaddei8.v	zero,(zero),v0,v10,v0.t
    ee_s16 val2 = calc_func(&(b->data16), res);
     2f2:	2e14                	fld	fa3,24(a2)
     2f4:	3f01                	jal	204 <calc_func+0x140>
     2f6:	0319                	addi	t1,t1,6
     2f8:	3a0e                	fld	fs4,224(sp)
     2fa:	390b3b0b          	0x390b3b0b
     2fe:	4919270b          	0x4919270b
     302:	12011113          	0x12011113
     306:	4006                	0x4006
    return val1 - val2;
     308:	9618                	0x9618
     30a:	1942                	slli	s2,s2,0x30
     30c:	1301                	addi	t1,t1,-32
     30e:	0000                	unimp
     310:	0515                	addi	a0,a0,5
     312:	0300                	addi	s0,sp,384
}
     314:	3a0e                	fld	fs4,224(sp)
     316:	390b3b0b          	0x390b3b0b
     31a:	0213490b          	0x213490b
     31e:	0018                	0x18
     320:	0000                	unimp
     322:	1101                	addi	sp,sp,-32
     324:	2501                	jal	924 <HEAP_SIZE+0x124>
     326:	130e                	slli	t1,t1,0x23
{
     328:	1b0e030b          	0x1b0e030b
     32c:	110e                	slli	sp,sp,0x23
     32e:	1201                	addi	tp,tp,-32
     330:	1006                	c.slli	zero,0x21
     332:	02000017          	auipc	zero,0x2000
     336:	0024                	addi	s1,sp,8
     338:	0b3e0b0b          	0xb3e0b0b
     33c:	00000803          	lb	a6,0(zero) # 0 <RAM_START_ADDRESS>
    if (res == NULL)
     340:	0b002403          	lw	s0,176(zero) # b0 <frame_dummy+0xc>
     344:	030b3e0b          	0x30b3e0b
        a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16 >> 8));
     348:	000e                	c.slli	zero,0x3
     34a:	0400                	addi	s0,sp,512
     34c:	0016                	c.slli	zero,0x5
     34e:	0b3a0e03          	lb	t3,179(s4)
     352:	0b390b3b          	0xb390b3b
     356:	1349                	addi	t1,t1,-14
     358:	0000                	unimp
     35a:	1305                	addi	t1,t1,-31
     35c:	0301                	addi	t1,t1,0
     35e:	0b0e                	slli	s6,s6,0x3
     360:	3b0b3a0b          	0x3b0b3a0b
     364:	010b390b          	0x10b390b
     368:	06000013          	li	zero,96
     36c:	000d                	c.nop	3
     36e:	0b3a0803          	lb	a6,179(s4)
     372:	0b390b3b          	0xb390b3b
     376:	1349                	addi	t1,t1,-14
     378:	0b38                	addi	a4,sp,408
     37a:	0000                	unimp
     37c:	0b000f07          	vlse8.v	v30,(zero),a6
     380:	0013490b          	0x13490b
     384:	0800                	addi	s0,sp,16
     386:	0b0b000f          	0xb0b000f
     38a:	0000                	unimp
     38c:	2e09                	jal	69e <core_bench_list+0x252>
     38e:	3f01                	jal	29e <calc_func+0x1da>
     390:	0319                	addi	t1,t1,6
     392:	3a0e                	fld	fs4,224(sp)
        b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16 >> 8));
     394:	39053b0b          	0x39053b0b
     398:	1119270b          	0x1119270b
     39c:	1201                	addi	tp,tp,-32
     39e:	4006                	0x4006
     3a0:	9618                	0x9618
     3a2:	1942                	slli	s2,s2,0x30
     3a4:	1301                	addi	t1,t1,-32
     3a6:	0000                	unimp
     3a8:	050a                	slli	a0,a0,0x2
     3aa:	0300                	addi	s0,sp,384
     3ac:	3a08                	fld	fa0,48(a2)
     3ae:	39053b0b          	0x39053b0b
     3b2:	0213490b          	0x213490b
     3b6:	0018                	0x18
     3b8:	0b00                	addi	s0,sp,400
     3ba:	0034                	addi	a3,sp,8
     3bc:	0b3a0803          	lb	a6,179(s4)
     3c0:	0b39053b          	0xb39053b
     3c4:	1349                	addi	t1,t1,-14
     3c6:	1802                	slli	a6,a6,0x20
     3c8:	0000                	unimp
     3ca:	0b0c                	addi	a1,sp,400
     3cc:	1101                	addi	sp,sp,-32
     3ce:	1201                	addi	tp,tp,-32
     3d0:	0006                	c.slli	zero,0x1
     3d2:	0d00                	addi	s0,sp,656
     3d4:	012e                	slli	sp,sp,0xb
     3d6:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
     3de:	0b39                	addi	s6,s6,14
    return a->idx - b->idx;
     3e0:	13491927          	fsh	fs4,306(s2)
     3e4:	0111                	addi	sp,sp,4
     3e6:	0612                	slli	a2,a2,0x4
     3e8:	1840                	addi	s0,sp,52
     3ea:	4296                	lw	t0,68(sp)
     3ec:	0119                	addi	sp,sp,6
     3ee:	0e000013          	li	zero,224
     3f2:	0005                	c.nop	1
     3f4:	0b3a0803          	lb	a6,179(s4)
}
     3f8:	0b390b3b          	0xb390b3b
     3fc:	1349                	addi	t1,t1,-14
     3fe:	1802                	slli	a6,a6,0x20
     400:	0000                	unimp
     402:	0300050f          	0x300050f
     406:	3a0e                	fld	fs4,224(sp)
{
     408:	390b3b0b          	0x390b3b0b
     40c:	0213490b          	0x213490b
     410:	0018                	0x18
     412:	1000                	addi	s0,sp,32
     414:	0034                	addi	a3,sp,8
     416:	0b3a0803          	lb	a6,179(s4)
     41a:	0b390b3b          	0xb390b3b
    to->data16 = from->data16;
     41e:	1349                	addi	t1,t1,-14
     420:	1802                	slli	a6,a6,0x20
     422:	0000                	unimp
     424:	3411                	jal	fffffe28 <RAM_SIZE+0xfffefe28>
     426:	0300                	addi	s0,sp,384
     428:	3a0e                	fld	fs4,224(sp)
     42a:	390b3b0b          	0x390b3b0b
    to->idx    = from->idx;
     42e:	0213490b          	0x213490b
     432:	0018                	0x18
     434:	1200                	addi	s0,sp,288
     436:	012e                	slli	sp,sp,0xb
     438:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
}
     440:	0b39                	addi	s6,s6,14
     442:	13491927          	fsh	fs4,306(s2)
     446:	0111                	addi	sp,sp,4
     448:	0612                	slli	a2,a2,0x4
     44a:	1840                	addi	s0,sp,52
{
     44c:	4296                	lw	t0,68(sp)
     44e:	0019                	c.nop	6
     450:	0000                	unimp
     452:	1101                	addi	sp,sp,-32
     454:	2501                	jal	a54 <core_list_insert_new+0x28>
     456:	130e                	slli	t1,t1,0x23
     458:	1b0e030b          	0x1b0e030b
     45c:	110e                	slli	sp,sp,0x23
     45e:	1201                	addi	tp,tp,-32
     460:	1006                	c.slli	zero,0x21
     462:	02000017          	auipc	zero,0x2000
     466:	0024                	addi	s1,sp,8
    ee_u16     retval = 0;
     468:	0b3e0b0b          	0xb3e0b0b
    ee_u16     found = 0, missed = 0;
     46c:	00000803          	lb	a6,0(zero) # 0 <RAM_START_ADDRESS>
     470:	0b002403          	lw	s0,176(zero) # b0 <frame_dummy+0xc>
    list_head *list     = res->list;
     474:	030b3e0b          	0x30b3e0b
     478:	000e                	c.slli	zero,0x3
     47a:	0400                	addi	s0,sp,512
     47c:	0016                	c.slli	zero,0x5
     47e:	0b3a0e03          	lb	t3,179(s4)
    ee_s16     find_num = res->seed3;
     482:	0b390b3b          	0xb390b3b
     486:	1349                	addi	t1,t1,-14
     488:	0000                	unimp
     48a:	3505                	jal	2aa <calc_func+0x1e6>
    info.idx = finder_idx;
     48c:	4900                	lw	s0,16(a0)
     48e:	06000013          	li	zero,96
     492:	0026                	c.slli	zero,0x9
    for (i = 0; i < find_num; i++)
     494:	1349                	addi	t1,t1,-14
     496:	0000                	unimp
     498:	03003407          	fld	fs0,48(zero) # 30 <_start+0x20>
        info.data16 = (i & 0xff);
     49c:	3a0e                	fld	fs4,224(sp)
     49e:	390b3b0b          	0x390b3b0b
     4a2:	3f13490b          	0x3f13490b
     4a6:	3c19                	jal	fffffebc <RAM_SIZE+0xfffefebc>
     4a8:	0019                	c.nop	6
     4aa:	0800                	addi	s0,sp,16
     4ac:	0e030113          	addi	sp,t1,224
        this_find   = core_list_find(list, &info);
     4b0:	0b3a0b0b          	0xb3a0b0b
     4b4:	0b390b3b          	0xb390b3b
     4b8:	1301                	addi	t1,t1,-32
     4ba:	0000                	unimp
     4bc:	0d09                	addi	s10,s10,2
     4be:	0300                	addi	s0,sp,384
     4c0:	3a0e                	fld	fs4,224(sp)
     4c2:	390b3b0b          	0x390b3b0b
        list        = core_list_reverse(list);
     4c6:	3813490b          	0x3813490b
     4ca:	0a00000b          	0xa00000b
     4ce:	0034                	addi	a3,sp,8
        if (this_find == NULL)
     4d0:	0b3a0e03          	lb	t3,179(s4)
     4d4:	0b390b3b          	0xb390b3b
            missed++;
     4d8:	1349                	addi	t1,t1,-14
     4da:	1802193f 340b0000 	0x340b00001802193f
     4e2:	0300                	addi	s0,sp,384
            retval += (list->next->info->data16 >> 8) & 1;
     4e4:	3a0e                	fld	fs4,224(sp)
     4e6:	390b3b0b          	0x390b3b0b
     4ea:	0213490b          	0x213490b
     4ee:	0018                	0x18
     4f0:	0c00                	addi	s0,sp,528
     4f2:	0034                	addi	a3,sp,8
     4f4:	0b3a1347          	fmsub.d	ft6,fs4,fs3,ft1,rtz
     4f8:	0b390b3b          	0xb390b3b
     4fc:	1802                	slli	a6,a6,0x20
     4fe:	0000                	unimp
     500:	2e0d                	jal	832 <HEAP_SIZE+0x32>
     502:	3f01                	jal	412 <copy_info+0xa>
     504:	0319                	addi	t1,t1,6
     506:	3a0e                	fld	fs4,224(sp)
     508:	390b3b0b          	0x390b3b0b
     50c:	1119270b          	0x1119270b
     510:	1201                	addi	tp,tp,-32
     512:	4006                	0x4006
     514:	9718                	0x9718
     516:	1942                	slli	s2,s2,0x30
     518:	1301                	addi	t1,t1,-32
     51a:	0000                	unimp
     51c:	050e                	slli	a0,a0,0x3
     51e:	0300                	addi	s0,sp,384
     520:	3a08                	fld	fa0,48(a2)
     522:	390b3b0b          	0x390b3b0b
            found++;
     526:	0213490b          	0x213490b
     52a:	0018                	0x18
     52c:	0f00                	addi	s0,sp,912
     52e:	0b0b000f          	0xb0b000f
            if (this_find->info->data16 & 0x1) /* use found value */
     532:	1349                	addi	t1,t1,-14
     534:	0000                	unimp
     536:	0510                	addi	a2,sp,640
     538:	0300                	addi	s0,sp,384
     53a:	3a0e                	fld	fs4,224(sp)
     53c:	390b3b0b          	0x390b3b0b
     540:	0213490b          	0x213490b
     544:	0018                	0x18
     546:	1100                	addi	s0,sp,160
     548:	012e                	slli	sp,sp,0xb
     54a:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
                retval += (this_find->info->data16 >> 9) & 1;
     552:	0b39                	addi	s6,s6,14
     554:	13491927          	fsh	fs4,306(s2)
     558:	0111                	addi	sp,sp,4
     55a:	0612                	slli	a2,a2,0x4
     55c:	1840                	addi	s0,sp,52
     55e:	4296                	lw	t0,68(sp)
     560:	0119                	addi	sp,sp,6
     562:	12000013          	li	zero,288
     566:	012e                	slli	sp,sp,0xb
     568:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
     570:	0b39                	addi	s6,s6,14
     572:	13491927          	fsh	fs4,306(s2)
     576:	0111                	addi	sp,sp,4
     578:	0612                	slli	a2,a2,0x4
     57a:	1840                	addi	s0,sp,52
     57c:	01194297          	auipc	t0,0x1194
     580:	13000013          	li	zero,304
            if (this_find->next != NULL)
     584:	002e                	c.slli	zero,0xb
     586:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
     58e:	0b39                	addi	s6,s6,14
                finder          = this_find->next;
     590:	01111927          	fsh	fa7,18(sp)
     594:	0612                	slli	a2,a2,0x4
     596:	1840                	addi	s0,sp,52
     598:	4296                	lw	t0,68(sp)
     59a:	0019                	c.nop	6
                this_find->next = finder->next;
     59c:	1400                	addi	s0,sp,544
     59e:	012e                	slli	sp,sp,0xb
     5a0:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
     5a8:	0b39                	addi	s6,s6,14
     5aa:	1349                	addi	t1,t1,-14
                finder->next    = list->next;
     5ac:	0111                	addi	sp,sp,4
     5ae:	0612                	slli	a2,a2,0x4
     5b0:	1840                	addi	s0,sp,52
     5b2:	01194297          	auipc	t0,0x1194
     5b6:	00000013          	nop
     5ba:	1101                	addi	sp,sp,-32
                list->next      = finder;
     5bc:	2501                	jal	bbc <core_list_undo_remove+0x30>
     5be:	130e                	slli	t1,t1,0x23
     5c0:	1b0e030b          	0x1b0e030b
     5c4:	110e                	slli	sp,sp,0x23
     5c6:	1201                	addi	tp,tp,-32
        if (info.idx >= 0)
     5c8:	1006                	c.slli	zero,0x21
     5ca:	02000017          	auipc	zero,0x2000
     5ce:	0024                	addi	s1,sp,8
            info.idx++;
     5d0:	0b3e0b0b          	0xb3e0b0b
     5d4:	00000803          	lb	a6,0(zero) # 0 <RAM_START_ADDRESS>
     5d8:	0b002403          	lw	s0,176(zero) # b0 <frame_dummy+0xc>
     5dc:	030b3e0b          	0x30b3e0b
     5e0:	000e                	c.slli	zero,0x3
     5e2:	0400                	addi	s0,sp,512
     5e4:	0016                	c.slli	zero,0x5
     5e6:	0b3a0e03          	lb	t3,179(s4)
     5ea:	0b390b3b          	0xb390b3b
     5ee:	1349                	addi	t1,t1,-14
     5f0:	0000                	unimp
     5f2:	0405                	addi	s0,s0,1
    for (i = 0; i < find_num; i++)
     5f4:	0301                	addi	t1,t1,0
     5f6:	3e0e                	fld	ft8,224(sp)
     5f8:	490b0b0b          	0x490b0b0b
     5fc:	3b0b3a13          	sltiu	s4,s6,944
     600:	010b390b          	0x10b390b
     604:	06000013          	li	zero,96
     608:	0028                	addi	a0,sp,8
     60a:	0b1c0e03          	lb	t3,177(s8)
     60e:	0000                	unimp
     610:	49010107          	vlsseg3e8.v	v2,(sp),a6,v0.t
     614:	00130113          	addi	sp,t1,1
     618:	0800                	addi	s0,sp,16
     61a:	0021                	c.nop	8
    retval += found * 4 - missed;
     61c:	1349                	addi	t1,t1,-14
     61e:	00000b2f          	vamoaddei8.v	zero,(zero),v0,v22,v0.t
     622:	0f09                	addi	t5,t5,2
     624:	0b00                	addi	s0,sp,400
     626:	0013490b          	0x13490b
     62a:	0a00                	addi	s0,sp,272
     62c:	0034                	addi	a3,sp,8
     62e:	0b3a0e03          	lb	t3,179(s4)
     632:	0b390b3b          	0xb390b3b
     636:	1349                	addi	t1,t1,-14
     638:	1802                	slli	a6,a6,0x20
     63a:	0000                	unimp
     63c:	3f012e0b          	0x3f012e0b
     640:	0319                	addi	t1,t1,6
     642:	3a0e                	fld	fs4,224(sp)
     644:	390b3b0b          	0x390b3b0b
    if (finder_idx > 0)
     648:	4919270b          	0x4919270b
     64c:	12011113          	0x12011113
        list = core_list_mergesort(list, cmp_complex, res);
     650:	4006                	0x4006
     652:	9618                	0x9618
     654:	1942                	slli	s2,s2,0x30
     656:	1301                	addi	t1,t1,-32
     658:	0000                	unimp
     65a:	050c                	addi	a1,sp,640
     65c:	0300                	addi	s0,sp,384
     65e:	3a0e                	fld	fs4,224(sp)
     660:	390b3b0b          	0x390b3b0b
    remover = core_list_remove(list->next);
     664:	0213490b          	0x213490b
     668:	0018                	0x18
     66a:	0d00                	addi	s0,sp,656
     66c:	0034                	addi	a3,sp,8
     66e:	0b3a0803          	lb	a6,179(s4)
     672:	0b390b3b          	0xb390b3b
     676:	1349                	addi	t1,t1,-14
    finder = core_list_find(list, &info);
     678:	1802                	slli	a6,a6,0x20
     67a:	0000                	unimp
     67c:	2e0e                	fld	ft8,192(sp)
     67e:	0301                	addi	t1,t1,0
     680:	3a0e                	fld	fs4,224(sp)
     682:	390b3b0b          	0x390b3b0b
     686:	4919270b          	0x4919270b
     68a:	12011113          	0x12011113
    if (!finder)
     68e:	4006                	0x4006
     690:	9718                	0x9718
     692:	1942                	slli	s2,s2,0x30
        finder = list->next;
     694:	1301                	addi	t1,t1,-32
     696:	0000                	unimp
     698:	0300050f          	0x300050f
     69c:	3a08                	fld	fa0,48(a2)
     69e:	390b3b0b          	0x390b3b0b
    while (finder)
     6a2:	0213490b          	0x213490b
        retval = crc16(list->info->data16, retval);
     6a6:	0018                	0x18
     6a8:	1000                	addi	s0,sp,32
     6aa:	012e                	slli	sp,sp,0xb
     6ac:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
     6b4:	0b39                	addi	s6,s6,14
     6b6:	01111927          	fsh	fa7,18(sp)
     6ba:	0612                	slli	a2,a2,0x4
     6bc:	1840                	addi	s0,sp,52
     6be:	01194297          	auipc	t0,0x1194
     6c2:	11000013          	li	zero,272
     6c6:	0111010b          	0x111010b
        finder = finder->next;
     6ca:	0612                	slli	a2,a2,0x4
     6cc:	1301                	addi	t1,t1,-32
     6ce:	0000                	unimp
     6d0:	0b12                	slli	s6,s6,0x4
     6d2:	1101                	addi	sp,sp,-32
    while (finder)
     6d4:	1201                	addi	tp,tp,-32
     6d6:	0006                	c.slli	zero,0x1
     6d8:	1300                	addi	s0,sp,416
     6da:	0101                	addi	sp,sp,0
    remover = core_list_undo_remove(remover, list->next);
     6dc:	1349                	addi	t1,t1,-14
     6de:	0000                	unimp
     6e0:	0100                	addi	s0,sp,128
     6e2:	0111                	addi	sp,sp,4
     6e4:	0e25                	addi	t3,t3,9
     6e6:	0e030b13          	addi	s6,t1,224
     6ea:	01110e1b          	0x1110e1b
     6ee:	0612                	slli	a2,a2,0x4
     6f0:	1710                	addi	a2,sp,928
     6f2:	0000                	unimp
    list = core_list_mergesort(list, cmp_idx, NULL);
     6f4:	2402                	fld	fs0,0(sp)
     6f6:	0b00                	addi	s0,sp,400
     6f8:	030b3e0b          	0x30b3e0b
     6fc:	0008                	0x8
     6fe:	0300                	addi	s0,sp,384
     700:	0024                	addi	s1,sp,8
     702:	0b3e0b0b          	0xb3e0b0b
     706:	00000e03          	lb	t3,0(zero) # 0 <RAM_START_ADDRESS>
    finder = list->next;
     70a:	1604                	addi	s1,sp,800
     70c:	0300                	addi	s0,sp,384
     70e:	3a0e                	fld	fs4,224(sp)
     710:	390b3b0b          	0x390b3b0b
    while (finder)
     714:	0013490b          	0x13490b
        retval = crc16(list->info->data16, retval);
     718:	0500                	addi	s0,sp,640
     71a:	0035                	c.nop	13
     71c:	1349                	addi	t1,t1,-14
     71e:	0000                	unimp
     720:	3406                	fld	fs0,96(sp)
     722:	0300                	addi	s0,sp,384
     724:	3a0e                	fld	fs4,224(sp)
     726:	390b3b0b          	0x390b3b0b
     72a:	3f13490b          	0x3f13490b
     72e:	3c19                	jal	144 <calc_func+0x80>
     730:	0019                	c.nop	6
     732:	0700                	addi	s0,sp,896
     734:	012e                	slli	sp,sp,0xb
     736:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
        finder = finder->next;
     73e:	0b39                	addi	s6,s6,14
     740:	13491927          	fsh	fs4,306(s2)
     744:	0111                	addi	sp,sp,4
     746:	0612                	slli	a2,a2,0x4
    while (finder)
     748:	1840                	addi	s0,sp,52
     74a:	4296                	lw	t0,68(sp)
     74c:	0119                	addi	sp,sp,6
     74e:	08000013          	li	zero,128
    return retval;
     752:	0034                	addi	a3,sp,8
}
     754:	0b3a0e03          	lb	t3,179(s4)
     758:	0b390b3b          	0xb390b3b
     75c:	1349                	addi	t1,t1,-14
     75e:	1802                	slli	a6,a6,0x20
     760:	0000                	unimp
     762:	0509                	addi	a0,a0,2
     764:	0300                	addi	s0,sp,384
     766:	3a0e                	fld	fs4,224(sp)
{
     768:	390b3b0b          	0x390b3b0b
     76c:	0213490b          	0x213490b
     770:	0018                	0x18
     772:	0a00                	addi	s0,sp,272
     774:	0005                	c.nop	1
     776:	0b3a0803          	lb	a6,179(s4)
     77a:	0b390b3b          	0xb390b3b
     77e:	1349                	addi	t1,t1,-14
     780:	1802                	slli	a6,a6,0x20
     782:	0000                	unimp
     784:	3f012e0b          	0x3f012e0b
    ee_u32 per_item = 16 + sizeof(struct list_data_s);
     788:	0319                	addi	t1,t1,6
     78a:	3a0e                	fld	fs4,224(sp)
     78c:	390b3b0b          	0x390b3b0b
    ee_u32 size     = (blksize / per_item)
     790:	4919270b          	0x4919270b
     794:	12011113          	0x12011113
     798:	4006                	0x4006
     79a:	9718                	0x9718
     79c:	1942                	slli	s2,s2,0x30
     79e:	1301                	addi	t1,t1,-32
     7a0:	0000                	unimp
     7a2:	340c                	fld	fa1,40(s0)
     7a4:	0300                	addi	s0,sp,384
     7a6:	3a08                	fld	fa0,48(a2)
    list_head *memblock_end  = memblock + size;
     7a8:	390b3b0b          	0x390b3b0b
     7ac:	0213490b          	0x213490b
     7b0:	0018                	0x18
     7b2:	0d00                	addi	s0,sp,656
     7b4:	012e                	slli	sp,sp,0xb
     7b6:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
    list_data *datablock     = (list_data *)(memblock_end);
     7be:	0b39                	addi	s6,s6,14
     7c0:	13491927          	fsh	fs4,306(s2)
    list_data *datablock_end = datablock + size;
     7c4:	0111                	addi	sp,sp,4
     7c6:	0612                	slli	a2,a2,0x4
     7c8:	1840                	addi	s0,sp,52
     7ca:	00194297          	auipc	t0,0x194
     7ce:	0000                	unimp
     7d0:	1101                	addi	sp,sp,-32
     7d2:	2501                	jal	dd2 <core_list_mergesort+0xda>
     7d4:	130e                	slli	t1,t1,0x23
     7d6:	1b0e030b          	0x1b0e030b
    list_head *finder, *list = memblock;
     7da:	110e                	slli	sp,sp,0x23
     7dc:	1201                	addi	tp,tp,-32
     7de:	1006                	c.slli	zero,0x21
    list->next         = NULL;
     7e0:	02000017          	auipc	zero,0x2000
     7e4:	0024                	addi	s1,sp,8
     7e6:	0b3e0b0b          	0xb3e0b0b
    list->info         = datablock;
     7ea:	00000803          	lb	a6,0(zero) # 0 <RAM_START_ADDRESS>
     7ee:	0b002403          	lw	s0,176(zero) # b0 <frame_dummy+0xc>
     7f2:	030b3e0b          	0x30b3e0b
    list->info->idx    = 0x0000;
     7f6:	000e                	c.slli	zero,0x3
     7f8:	0400                	addi	s0,sp,512
     7fa:	0b0b000f          	0xb0b000f
     7fe:	1349                	addi	t1,t1,-14
    list->info->data16 = (ee_s16)0x8080;
     800:	0000                	unimp
     802:	0105                	addi	sp,sp,1
     804:	4901                	li	s2,0
     806:	00130113          	addi	sp,t1,1
     80a:	0600                	addi	s0,sp,768
     80c:	0021                	c.nop	8
     80e:	1349                	addi	t1,t1,-14
     810:	00000b2f          	vamoaddei8.v	zero,(zero),v0,v22,v0.t
    memblock++;
     814:	03003407          	fld	fs0,48(zero) # 30 <_start+0x20>
     818:	3a0e                	fld	fs4,224(sp)
     81a:	390b3b0b          	0x390b3b0b
     81e:	0213490b          	0x213490b
    datablock++;
     822:	0018                	0x18
     824:	0800                	addi	s0,sp,16
     826:	012e                	slli	sp,sp,0xb
     828:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
    info.idx    = 0x7fff;
     830:	0b39                	addi	s6,s6,14
     832:	13491927          	fsh	fs4,306(s2)
     836:	0111                	addi	sp,sp,4
    info.data16 = (ee_s16)0xffff;
     838:	0612                	slli	a2,a2,0x4
     83a:	1840                	addi	s0,sp,52
     83c:	4296                	lw	t0,68(sp)
     83e:	0119                	addi	sp,sp,6
    core_list_insert_new(
     840:	09000013          	li	zero,144
     844:	0005                	c.nop	1
     846:	0b3a0803          	lb	a6,179(s4)
     84a:	0b390b3b          	0xb390b3b
     84e:	1349                	addi	t1,t1,-14
     850:	1802                	slli	a6,a6,0x20
     852:	0000                	unimp
     854:	050a                	slli	a0,a0,0x2
     856:	0300                	addi	s0,sp,384
     858:	3a0e                	fld	fs4,224(sp)
     85a:	390b3b0b          	0x390b3b0b
    for (i = 0; i < size; i++)
     85e:	0213490b          	0x213490b
     862:	0018                	0x18
        ee_u16 datpat = ((ee_u16)(seed ^ i) & 0xf);
     864:	0b00                	addi	s0,sp,400
     866:	012e                	slli	sp,sp,0xb
     868:	0b3a0803          	lb	a6,179(s4)
     86c:	0b390b3b          	0xb390b3b
     870:	13491927          	fsh	fs4,306(s2)
     874:	0111                	addi	sp,sp,4
     876:	0612                	slli	a2,a2,0x4
     878:	1840                	addi	s0,sp,52
     87a:	4296                	lw	t0,68(sp)
     87c:	0019                	c.nop	6
     87e:	0c00                	addi	s0,sp,528
     880:	0034                	addi	a3,sp,8
     882:	0b3a0803          	lb	a6,179(s4)
     886:	0b390b3b          	0xb390b3b
            = (datpat << 3) | (i & 0x7); /* alternate between algorithms */
     88a:	1349                	addi	t1,t1,-14
     88c:	1802                	slli	a6,a6,0x20
     88e:	0000                	unimp
     890:	0100                	addi	s0,sp,128
     892:	0111                	addi	sp,sp,4
     894:	0e25                	addi	t3,t3,9
     896:	0e030b13          	addi	s6,t1,224
     89a:	01110e1b          	0x1110e1b
     89e:	0612                	slli	a2,a2,0x4
     8a0:	1710                	addi	a2,sp,928
     8a2:	0000                	unimp
     8a4:	2402                	fld	fs0,0(sp)
     8a6:	0b00                	addi	s0,sp,400
     8a8:	030b3e0b          	0x30b3e0b
     8ac:	0008                	0x8
     8ae:	0300                	addi	s0,sp,384
        ee_u16 dat
     8b0:	0016                	c.slli	zero,0x5
     8b2:	0b3a0e03          	lb	t3,179(s4)
     8b6:	0b390b3b          	0xb390b3b
        info.data16 = (dat << 8) | dat;  /* fill the data with actual data and
     8ba:	1349                	addi	t1,t1,-14
     8bc:	0000                	unimp
     8be:	2404                	fld	fs1,8(s0)
     8c0:	0b00                	addi	s0,sp,400
     8c2:	030b3e0b          	0x30b3e0b
     8c6:	000e                	c.slli	zero,0x3
     8c8:	0500                	addi	s0,sp,640
     8ca:	0b0b000f          	0xb0b000f
     8ce:	00000e03          	lb	t3,0(zero) # 0 <RAM_START_ADDRESS>
     8d2:	3406                	fld	fs0,96(sp)
     8d4:	0300                	addi	s0,sp,384
     8d6:	3a0e                	fld	fs4,224(sp)
     8d8:	390b3b0b          	0x390b3b0b
        core_list_insert_new(
     8dc:	0213490b          	0x213490b
     8e0:	0018                	0x18
     8e2:	0700                	addi	s0,sp,896
     8e4:	0b0b000f          	0xb0b000f
     8e8:	1349                	addi	t1,t1,-14
     8ea:	0000                	unimp
     8ec:	2608                	fld	fa0,8(a2)
     8ee:	4900                	lw	s0,16(a0)
     8f0:	09000013          	li	zero,144
     8f4:	012e                	slli	sp,sp,0xb
     8f6:	0e03193f 053b0b3a 	0x53b0b3a0e03193f
    for (i = 0; i < size; i++)
     8fe:	0b39                	addi	s6,s6,14
     900:	13491927          	fsh	fs4,306(s2)
     904:	0111                	addi	sp,sp,4
     906:	0612                	slli	a2,a2,0x4
     908:	1840                	addi	s0,sp,52
     90a:	4296                	lw	t0,68(sp)
     90c:	0119                	addi	sp,sp,6
     90e:	0a000013          	li	zero,160
    finder = list->next;
     912:	0005                	c.nop	1
     914:	0b3a0803          	lb	a6,179(s4)
     918:	0b39053b          	0xb39053b
    i      = 1;
     91c:	1349                	addi	t1,t1,-14
     91e:	1802                	slli	a6,a6,0x20
     920:	0000                	unimp
     922:	0000180b          	0x180b
    while (finder->next != NULL)
     926:	0c00                	addi	s0,sp,528
        if (i < size / 5) /* first 20% of the list in order */
     928:	0034                	addi	a3,sp,8
     92a:	0b3a0803          	lb	a6,179(s4)
     92e:	0b39053b          	0xb39053b
     932:	1349                	addi	t1,t1,-14
     934:	1802                	slli	a6,a6,0x20
     936:	0000                	unimp
     938:	340d                	jal	35a <cmp_idx+0x32>
     93a:	0300                	addi	s0,sp,384
     93c:	3a0e                	fld	fs4,224(sp)
     93e:	39053b0b          	0x39053b0b
     942:	0213490b          	0x213490b
     946:	0018                	0x18
            finder->info->idx = i++;
     948:	0e00                	addi	s0,sp,784
     94a:	0101                	addi	sp,sp,0
     94c:	1349                	addi	t1,t1,-14
     94e:	1301                	addi	t1,t1,-32
     950:	0000                	unimp
     952:	4900210f          	0x4900210f
     956:	00052f13          	slti	t5,a0,0
     95a:	1000                	addi	s0,sp,32
     95c:	012e                	slli	sp,sp,0xb
     95e:	0e03193f 053b0b3a 	0x53b0b3a0e03193f
     966:	0b39                	addi	s6,s6,14
     968:	01111927          	fsh	fa7,18(sp)
            ee_u16 pat = (ee_u16)(i++ ^ seed); /* get a pseudo random number */
     96c:	0612                	slli	a2,a2,0x4
     96e:	1840                	addi	s0,sp,52
     970:	01194297          	auipc	t0,0x1194
     974:	11000013          	li	zero,272
     978:	012e                	slli	sp,sp,0xb
     97a:	0b3a0e03          	lb	t3,179(s4)
     97e:	0b39053b          	0xb39053b
     982:	13491927          	fsh	fs4,306(s2)
     986:	0111                	addi	sp,sp,4
     988:	0612                	slli	a2,a2,0x4
     98a:	1840                	addi	s0,sp,52
                                & (((i & 0x07) << 8)
     98c:	4296                	lw	t0,68(sp)
     98e:	0119                	addi	sp,sp,6
     990:	12000013          	li	zero,288
     994:	0005                	c.nop	1
     996:	0b3a0e03          	lb	t3,179(s4)
     99a:	0b39053b          	0xb39053b
     99e:	1349                	addi	t1,t1,-14
     9a0:	1802                	slli	a6,a6,0x20
     9a2:	0000                	unimp
     9a4:	03000a13          	li	s4,48
     9a8:	3a0e                	fld	fs4,224(sp)
     9aa:	39053b0b          	0x39053b0b
     9ae:	0001110b          	0x1110b
                                   | pat); /* make sure the mixed items end up
     9b2:	1400                	addi	s0,sp,544
     9b4:	012e                	slli	sp,sp,0xb
     9b6:	0b3a0e03          	lb	t3,179(s4)
     9ba:	0b390b3b          	0xb390b3b
     9be:	13491927          	fsh	fs4,306(s2)
                                & (((i & 0x07) << 8)
     9c2:	0111                	addi	sp,sp,4
     9c4:	0612                	slli	a2,a2,0x4
     9c6:	1840                	addi	s0,sp,52
            finder->info->idx = 0x3fff
     9c8:	4296                	lw	t0,68(sp)
     9ca:	0119                	addi	sp,sp,6
     9cc:	15000013          	li	zero,336
                                & (((i & 0x07) << 8)
     9d0:	0005                	c.nop	1
     9d2:	0b3a0803          	lb	a6,179(s4)
     9d6:	0b390b3b          	0xb390b3b
     9da:	1349                	addi	t1,t1,-14
     9dc:	1802                	slli	a6,a6,0x20
     9de:	0000                	unimp
     9e0:	0516                	slli	a0,a0,0x5
     9e2:	0300                	addi	s0,sp,384
            finder->info->idx = 0x3fff
     9e4:	3a0e                	fld	fs4,224(sp)
     9e6:	390b3b0b          	0x390b3b0b
        finder = finder->next;
     9ea:	0213490b          	0x213490b
     9ee:	0018                	0x18
     9f0:	1700                	addi	s0,sp,928
     9f2:	0034                	addi	a3,sp,8
    while (finder->next != NULL)
     9f4:	0b3a0803          	lb	a6,179(s4)
     9f8:	0b390b3b          	0xb390b3b
     9fc:	1349                	addi	t1,t1,-14
     9fe:	1802                	slli	a6,a6,0x20
    list = core_list_mergesort(list, cmp_idx, NULL);
     a00:	0000                	unimp
     a02:	2118                	fld	fa4,0(a0)
     a04:	4900                	lw	s0,16(a0)
     a06:	000b2f13          	slti	t5,s6,0
     a0a:	1900                	addi	s0,sp,176
     a0c:	012e                	slli	sp,sp,0xb
     a0e:	0b3a0e03          	lb	t3,179(s4)
     a12:	0b390b3b          	0xb390b3b
    return list;
     a16:	13491927          	fsh	fs4,306(s2)
}
     a1a:	0111                	addi	sp,sp,4
     a1c:	0612                	slli	a2,a2,0x4
     a1e:	1840                	addi	s0,sp,52
     a20:	01194297          	auipc	t0,0x1194
     a24:	1a000013          	li	zero,416
     a28:	012e                	slli	sp,sp,0xb
     a2a:	0b3a0e03          	lb	t3,179(s4)
{
     a2e:	0b390b3b          	0xb390b3b
     a32:	13491927          	fsh	fs4,306(s2)
     a36:	0111                	addi	sp,sp,4
     a38:	0612                	slli	a2,a2,0x4
     a3a:	1840                	addi	s0,sp,52
     a3c:	00194297          	auipc	t0,0x194
     a40:	0000                	unimp
     a42:	1101                	addi	sp,sp,-32
     a44:	2501                	jal	1044 <main+0x34>
     a46:	130e                	slli	t1,t1,0x23
     a48:	1b0e030b          	0x1b0e030b
     a4c:	110e                	slli	sp,sp,0x23
     a4e:	1201                	addi	tp,tp,-32
     a50:	1006                	c.slli	zero,0x21
     a52:	02000017          	auipc	zero,0x2000
    if ((*memblock + 1) >= memblock_end)
     a56:	0024                	addi	s1,sp,8
     a58:	0b3e0b0b          	0xb3e0b0b
     a5c:	00000e03          	lb	t3,0(zero) # 0 <RAM_START_ADDRESS>
     a60:	0b002403          	lw	s0,176(zero) # b0 <frame_dummy+0xc>
     a64:	030b3e0b          	0x30b3e0b
        return NULL;
     a68:	0008                	0x8
     a6a:	0400                	addi	s0,sp,512
     a6c:	0016                	c.slli	zero,0x5
     a6e:	0b3a0e03          	lb	t3,179(s4)
    if ((*datablock + 1) >= datablock_end)
     a72:	0b390b3b          	0xb390b3b
     a76:	1349                	addi	t1,t1,-14
     a78:	0000                	unimp
     a7a:	1305                	addi	t1,t1,-31
     a7c:	0b01                	addi	s6,s6,0
     a7e:	3b0b3a0b          	0x3b0b3a0b
     a82:	010b390b          	0x10b390b
        return NULL;
     a86:	06000013          	li	zero,96
     a8a:	000d                	c.nop	3
    newitem = *memblock;
     a8c:	0b3a0e03          	lb	t3,179(s4)
     a90:	0b390b3b          	0xb390b3b
     a94:	1349                	addi	t1,t1,-14
     a96:	0b0d0b0b          	0xb0d0b0b
    (*memblock)++;
     a9a:	0b0c                	addi	a1,sp,400
     a9c:	0b38                	addi	a4,sp,408
     a9e:	0000                	unimp
     aa0:	03000d07          	vle8ff.v	v26,(zero)
     aa4:	3a08                	fld	fa0,48(a2)
     aa6:	390b3b0b          	0x390b3b0b
     aaa:	0b13490b          	0xb13490b
    newitem->next      = insert_point->next;
     aae:	0c0b0d0b          	0xc0b0d0b
     ab2:	000b380b          	0xb380b
     ab6:	0800                	addi	s0,sp,16
     ab8:	0e030117          	auipc	sp,0xe030
    insert_point->next = newitem;
     abc:	0b3a0b0b          	0xb3a0b0b
     ac0:	0b390b3b          	0xb390b3b
     ac4:	1301                	addi	t1,t1,-32
     ac6:	0000                	unimp
    newitem->info = *datablock;
     ac8:	0d09                	addi	s10,s10,2
     aca:	0300                	addi	s0,sp,384
     acc:	3a08                	fld	fa0,48(a2)
     ace:	390b3b0b          	0x390b3b0b
     ad2:	0013490b          	0x13490b
     ad6:	0a00                	addi	s0,sp,272
    (*datablock)++;
     ad8:	000d                	c.nop	3
     ada:	0b3a0e03          	lb	t3,179(s4)
     ade:	0b390b3b          	0xb390b3b
     ae2:	1349                	addi	t1,t1,-14
     ae4:	0000                	unimp
     ae6:	3f012e0b          	0x3f012e0b
     aea:	0319                	addi	t1,t1,6
    copy_info(newitem->info, info);
     aec:	3a0e                	fld	fs4,224(sp)
     aee:	390b3b0b          	0x390b3b0b
     af2:	4919270b          	0x4919270b
     af6:	12011113          	0x12011113
     afa:	4006                	0x4006
     afc:	9718                	0x9718
     afe:	1942                	slli	s2,s2,0x30
    return newitem;
     b00:	1301                	addi	t1,t1,-32
     b02:	0000                	unimp
}
     b04:	050c                	addi	a1,sp,640
     b06:	0300                	addi	s0,sp,384
     b08:	3a08                	fld	fa0,48(a2)
     b0a:	390b3b0b          	0x390b3b0b
     b0e:	0213490b          	0x213490b
     b12:	0d000017          	auipc	zero,0xd000
     b16:	0034                	addi	a3,sp,8
{
     b18:	0b3a0e03          	lb	t3,179(s4)
     b1c:	0b390b3b          	0xb390b3b
     b20:	1349                	addi	t1,t1,-14
     b22:	1702                	slli	a4,a4,0x20
     b24:	0000                	unimp
     b26:	340e                	fld	fs0,224(sp)
    list_head *ret = item->next;
     b28:	0300                	addi	s0,sp,384
     b2a:	3a0e                	fld	fs4,224(sp)
     b2c:	390b3b0b          	0x390b3b0b
     b30:	1c13490b          	0x1c13490b
    tmp        = item->info;
     b34:	0f00000b          	0xf00000b
     b38:	0034                	addi	a3,sp,8
     b3a:	0b3a0803          	lb	a6,179(s4)
     b3e:	0b390b3b          	0xb390b3b
    item->info = ret->info;
     b42:	1349                	addi	t1,t1,-14
     b44:	0000                	unimp
     b46:	3410                	fld	fa2,40(s0)
     b48:	0300                	addi	s0,sp,384
     b4a:	3a08                	fld	fa0,48(a2)
     b4c:	390b3b0b          	0x390b3b0b
    ret->info  = tmp;
     b50:	0213490b          	0x213490b
     b54:	11000017          	auipc	zero,0x11000
     b58:	1755010b          	0x1755010b
    item->next = item->next->next;
     b5c:	1301                	addi	t1,t1,-32
     b5e:	0000                	unimp
     b60:	3412                	fld	fs0,288(sp)
     b62:	0300                	addi	s0,sp,384
     b64:	3a0e                	fld	fs4,224(sp)
     b66:	390b3b0b          	0x390b3b0b
     b6a:	0013490b          	0x13490b
     b6e:	1300                	addi	s0,sp,416
    ret->next  = NULL;
     b70:	000a                	c.slli	zero,0x2
     b72:	0b3a0e03          	lb	t3,179(s4)
     b76:	0b390b3b          	0xb390b3b
    return ret;
     b7a:	0111                	addi	sp,sp,4
}
     b7c:	0000                	unimp
     b7e:	0b14                	addi	a3,sp,400
     b80:	1101                	addi	sp,sp,-32
     b82:	1201                	addi	tp,tp,-32
     b84:	0106                	slli	sp,sp,0x1
     b86:	15000013          	li	zero,336
     b8a:	1755010b          	0x1755010b
{
     b8e:	0000                	unimp
     b90:	8916                	mv	s2,t0
     b92:	0182                	c.slli64	gp
     b94:	1100                	addi	s0,sp,160
     b96:	3101                	jal	796 <core_list_init+0x2e>
     b98:	17000013          	li	zero,368
     b9c:	1301010b          	0x1301010b
    tmp                 = item_removed->info;
     ba0:	0000                	unimp
     ba2:	0b18                	addi	a4,sp,400
     ba4:	0001                	nop
     ba6:	1900                	addi	s0,sp,176
     ba8:	002e                	c.slli	zero,0xb
     baa:	193c193f 0e030e6e 	0xe030e6e193c193f
    item_removed->info  = item_modified->info;
     bb2:	0000                	unimp
     bb4:	0100                	addi	s0,sp,128
     bb6:	0111                	addi	sp,sp,4
     bb8:	0e25                	addi	t3,t3,9
     bba:	0e030b13          	addi	s6,t1,224
    item_modified->info = tmp;
     bbe:	01110e1b          	0x1110e1b
     bc2:	0612                	slli	a2,a2,0x4
     bc4:	1710                	addi	a2,sp,928
     bc6:	0000                	unimp
    item_removed->next  = item_modified->next;
     bc8:	2402                	fld	fs0,0(sp)
     bca:	0b00                	addi	s0,sp,400
     bcc:	030b3e0b          	0x30b3e0b
     bd0:	000e                	c.slli	zero,0x3
     bd2:	0300                	addi	s0,sp,384
     bd4:	0024                	addi	s1,sp,8
     bd6:	0b3e0b0b          	0xb3e0b0b
    item_modified->next = item_removed;
     bda:	00000803          	lb	a6,0(zero) # 0 <RAM_START_ADDRESS>
     bde:	1604                	addi	s1,sp,800
     be0:	0300                	addi	s0,sp,384
     be2:	3a0e                	fld	fs4,224(sp)
    return item_removed;
     be4:	39053b0b          	0x39053b0b
}
     be8:	0013490b          	0x13490b
     bec:	0500                	addi	s0,sp,640
     bee:	0016                	c.slli	zero,0x5
     bf0:	0b3a0e03          	lb	t3,179(s4)
     bf4:	0b390b3b          	0xb390b3b
{
     bf8:	1349                	addi	t1,t1,-14
     bfa:	0000                	unimp
     bfc:	1306                	slli	t1,t1,0x21
     bfe:	0b01                	addi	s6,s6,0
     c00:	3b0b3a0b          	0x3b0b3a0b
     c04:	010b390b          	0x10b390b
     c08:	07000013          	li	zero,112
    if (info->idx >= 0)
     c0c:	000d                	c.nop	3
     c0e:	0b3a0e03          	lb	t3,179(s4)
     c12:	0b390b3b          	0xb390b3b
     c16:	1349                	addi	t1,t1,-14
        while (list && (list->info->idx != info->idx))
     c18:	0b0d0b0b          	0xb0d0b0b
            list = list->next;
     c1c:	0b0c                	addi	a1,sp,400
     c1e:	0b38                	addi	a4,sp,408
     c20:	0000                	unimp
     c22:	0d08                	addi	a0,sp,656
     c24:	0300                	addi	s0,sp,384
     c26:	3a08                	fld	fa0,48(a2)
        while (list && (list->info->idx != info->idx))
     c28:	390b3b0b          	0x390b3b0b
     c2c:	0b13490b          	0xb13490b
     c30:	0c0b0d0b          	0xc0b0d0b
     c34:	000b380b          	0xb380b
     c38:	0900                	addi	s0,sp,144
     c3a:	0e030117          	auipc	sp,0xe030
     c3e:	0b3a0b0b          	0xb3a0b0b
     c42:	0b390b3b          	0xb390b3b
     c46:	1301                	addi	t1,t1,-32
        return list;
     c48:	0000                	unimp
     c4a:	0d0a                	slli	s10,s10,0x2
     c4c:	0300                	addi	s0,sp,384
     c4e:	3a08                	fld	fa0,48(a2)
            list = list->next;
     c50:	390b3b0b          	0x390b3b0b
     c54:	0013490b          	0x13490b
     c58:	0b00                	addi	s0,sp,400
     c5a:	000d                	c.nop	3
        while (list && ((list->info->data16 & 0xff) != info->data16))
     c5c:	0b3a0e03          	lb	t3,179(s4)
     c60:	0b390b3b          	0xb390b3b
     c64:	1349                	addi	t1,t1,-14
     c66:	0000                	unimp
     c68:	2e0c                	fld	fa1,24(a2)
     c6a:	3f01                	jal	b7a <core_list_remove+0x62>
     c6c:	0319                	addi	t1,t1,6
     c6e:	3a0e                	fld	fs4,224(sp)
     c70:	390b3b0b          	0x390b3b0b
     c74:	4919270b          	0x4919270b
     c78:	12011113          	0x12011113
     c7c:	4006                	0x4006
     c7e:	9718                	0x9718
     c80:	1942                	slli	s2,s2,0x30
     c82:	1301                	addi	t1,t1,-32
     c84:	0000                	unimp
     c86:	050d                	addi	a0,a0,3
        return list;
     c88:	0300                	addi	s0,sp,384
     c8a:	3a08                	fld	fa0,48(a2)
}
     c8c:	390b3b0b          	0x390b3b0b
     c90:	0213490b          	0x213490b
     c94:	0e000017          	auipc	zero,0xe000
     c98:	0034                	addi	a3,sp,8
     c9a:	0b3a0e03          	lb	t3,179(s4)
{
     c9e:	0b390b3b          	0xb390b3b
     ca2:	1349                	addi	t1,t1,-14
     ca4:	1702                	slli	a4,a4,0x20
     ca6:	0000                	unimp
     ca8:	0300340f          	0x300340f
    list_head *next = NULL, *tmp;
     cac:	3a0e                	fld	fs4,224(sp)
     cae:	390b3b0b          	0x390b3b0b
    while (list)
     cb2:	1c13490b          	0x1c13490b
        tmp        = list->next;
     cb6:	1000000b          	0x1000000b
     cba:	0034                	addi	a3,sp,8
     cbc:	0b3a0803          	lb	a6,179(s4)
        list->next = next;
     cc0:	0b390b3b          	0xb390b3b
     cc4:	1349                	addi	t1,t1,-14
     cc6:	1702                	slli	a4,a4,0x20
     cc8:	0000                	unimp
     cca:	3411                	jal	6ce <core_bench_list+0x282>
        next       = list;
     ccc:	0300                	addi	s0,sp,384
     cce:	3a08                	fld	fa0,48(a2)
     cd0:	390b3b0b          	0x390b3b0b
        list       = tmp;
     cd4:	0013490b          	0x13490b
     cd8:	1200                	addi	s0,sp,288
     cda:	1755010b          	0x1755010b
    while (list)
     cde:	1301                	addi	t1,t1,-32
     ce0:	0000                	unimp
     ce2:	03003413          	sltiu	s0,zero,48
    return next;
     ce6:	3a0e                	fld	fs4,224(sp)
}
     ce8:	390b3b0b          	0x390b3b0b
     cec:	0013490b          	0x13490b
     cf0:	1400                	addi	s0,sp,544
     cf2:	8289                	srli	a3,a3,0x2
     cf4:	0001                	nop
     cf6:	0111                	addi	sp,sp,4
{
     cf8:	1331                	addi	t1,t1,-20
     cfa:	0000                	unimp
     cfc:	0b15                	addi	s6,s6,5
     cfe:	1101                	addi	sp,sp,-32
     d00:	1201                	addi	tp,tp,-32
     d02:	0106                	slli	sp,sp,0x1
     d04:	16000013          	li	zero,352
     d08:	0034                	addi	a3,sp,8
     d0a:	0b3a0e03          	lb	t3,179(s4)
     d0e:	0b390b3b          	0xb390b3b
     d12:	1349                	addi	t1,t1,-14
    insize = 1;
     d14:	1802                	slli	a6,a6,0x20
     d16:	0000                	unimp
     d18:	55010b17          	auipc	s6,0x55010
        p    = list;
     d1c:	18000017          	auipc	zero,0x18000
     d20:	1301010b          	0x1301010b
        list = NULL;
     d24:	0000                	unimp
     d26:	0b19                	addi	s6,s6,6
        tail = NULL;
     d28:	0001                	nop
     d2a:	1a00                	addi	s0,sp,304
        nmerges = 0; /* count number of merges we do in this pass */
     d2c:	002e                	c.slli	zero,0xb
     d2e:	193c193f 0e030e6e 	0xe030e6e193c193f
            nmerges++; /* there exists a merge to be done */
     d36:	0000                	unimp
     d38:	0100                	addi	s0,sp,128
     d3a:	0111                	addi	sp,sp,4
     d3c:	0e25                	addi	t3,t3,9
     d3e:	0e030b13          	addi	s6,t1,224
            q     = p;
     d42:	01110e1b          	0x1110e1b
     d46:	0612                	slli	a2,a2,0x4
            psize = 0;
     d48:	1710                	addi	a2,sp,928
     d4a:	0000                	unimp
            for (i = 0; i < insize; i++)
     d4c:	2402                	fld	fs0,0(sp)
     d4e:	0b00                	addi	s0,sp,400
     d50:	030b3e0b          	0x30b3e0b
                psize++;
     d54:	000e                	c.slli	zero,0x3
     d56:	0300                	addi	s0,sp,384
     d58:	0016                	c.slli	zero,0x5
     d5a:	0b3a0e03          	lb	t3,179(s4)
     d5e:	0b390b3b          	0xb390b3b
                q = q->next;
     d62:	1349                	addi	t1,t1,-14
     d64:	0000                	unimp
     d66:	2404                	fld	fs1,8(s0)
     d68:	0b00                	addi	s0,sp,400
     d6a:	030b3e0b          	0x30b3e0b
                if (!q)
     d6e:	0008                	0x8
     d70:	0500                	addi	s0,sp,640
     d72:	0b0b0113          	addi	sp,s6,176 # 55010dc8 <RAM_SIZE+0x55000dc8>
            for (i = 0; i < insize; i++)
     d76:	0b3a                	slli	s6,s6,0xe
     d78:	0b390b3b          	0xb390b3b
     d7c:	1301                	addi	t1,t1,-32
     d7e:	0000                	unimp
     d80:	0d06                	slli	s10,s10,0x1
     d82:	0300                	addi	s0,sp,384
     d84:	3a0e                	fld	fs4,224(sp)
     d86:	390b3b0b          	0x390b3b0b
     d8a:	0b13490b          	0xb13490b
     d8e:	0c0b0d0b          	0xc0b0d0b
                    break;
     d92:	000b380b          	0xb380b
            qsize = insize;
     d96:	0700                	addi	s0,sp,896
     d98:	000d                	c.nop	3
     d9a:	0b3a0803          	lb	a6,179(s4)
            while (psize > 0 || (qsize > 0 && q))
     d9e:	0b390b3b          	0xb390b3b
                if (psize == 0)
     da2:	1349                	addi	t1,t1,-14
     da4:	0b0d0b0b          	0xb0d0b0b
                    e = q;
     da8:	0b0c                	addi	a1,sp,400
     daa:	0b38                	addi	a4,sp,408
     dac:	0000                	unimp
     dae:	1708                	addi	a0,sp,928
                    q = q->next;
     db0:	0301                	addi	t1,t1,0
     db2:	0b0e                	slli	s6,s6,0x3
     db4:	3b0b3a0b          	0x3b0b3a0b
     db8:	010b390b          	0x10b390b
                    qsize--;
     dbc:	09000013          	li	zero,144
     dc0:	000d                	c.nop	3
     dc2:	0b3a0803          	lb	a6,179(s4)
     dc6:	0b390b3b          	0xb390b3b
     dca:	1349                	addi	t1,t1,-14
                else if (qsize == 0 || !q)
     dcc:	0000                	unimp
     dce:	0d0a                	slli	s10,s10,0x2
     dd0:	0300                	addi	s0,sp,384
     dd2:	3a0e                	fld	fs4,224(sp)
     dd4:	390b3b0b          	0x390b3b0b
     dd8:	0013490b          	0x13490b
                    e = p;
     ddc:	0b00                	addi	s0,sp,400
     dde:	012e                	slli	sp,sp,0xb
     de0:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
                    p = p->next;
     de8:	0b39                	addi	s6,s6,14
     dea:	13491927          	fsh	fs4,306(s2)
     dee:	0111                	addi	sp,sp,4
                    psize--;
     df0:	0612                	slli	a2,a2,0x4
     df2:	1840                	addi	s0,sp,52
     df4:	01194297          	auipc	t0,0x1194
     df8:	0c000013          	li	zero,192
     dfc:	0005                	c.nop	1
     dfe:	0b3a0803          	lb	a6,179(s4)
                else if (cmp(p->info, q->info, res) <= 0)
     e02:	0b390b3b          	0xb390b3b
     e06:	1349                	addi	t1,t1,-14
     e08:	1702                	slli	a4,a4,0x20
     e0a:	0000                	unimp
     e0c:	340d                	jal	82e <HEAP_SIZE+0x2e>
     e0e:	0300                	addi	s0,sp,384
     e10:	3a0e                	fld	fs4,224(sp)
     e12:	390b3b0b          	0x390b3b0b
     e16:	1c13490b          	0x1c13490b
     e1a:	0e00000b          	0xe00000b
     e1e:	0034                	addi	a3,sp,8
     e20:	0b3a0803          	lb	a6,179(s4)
     e24:	0b390b3b          	0xb390b3b
     e28:	1349                	addi	t1,t1,-14
     e2a:	0000                	unimp
                    e = p;
     e2c:	0300340f          	0x300340f
     e30:	3a08                	fld	fa0,48(a2)
     e32:	390b3b0b          	0x390b3b0b
                    p = p->next;
     e36:	0213490b          	0x213490b
     e3a:	0018                	0x18
     e3c:	1000                	addi	s0,sp,32
     e3e:	0034                	addi	a3,sp,8
                    psize--;
     e40:	0b3a0e03          	lb	t3,179(s4)
     e44:	0b390b3b          	0xb390b3b
     e48:	1349                	addi	t1,t1,-14
     e4a:	1802                	slli	a6,a6,0x20
     e4c:	0000                	unimp
     e4e:	3411                	jal	852 <HEAP_SIZE+0x52>
                    e = q;
     e50:	0300                	addi	s0,sp,384
     e52:	3a0e                	fld	fs4,224(sp)
     e54:	390b3b0b          	0x390b3b0b
                    q = q->next;
     e58:	0213490b          	0x213490b
     e5c:	12000017          	auipc	zero,0x12000
     e60:	1755010b          	0x1755010b
                    qsize--;
     e64:	1301                	addi	t1,t1,-32
     e66:	0000                	unimp
     e68:	03003413          	sltiu	s0,zero,48
     e6c:	3a0e                	fld	fs4,224(sp)
     e6e:	390b3b0b          	0x390b3b0b
                if (tail)
     e72:	0013490b          	0x13490b
     e76:	1400                	addi	s0,sp,544
                    tail->next = e;
     e78:	1301010b          	0x1301010b
     e7c:	0000                	unimp
     e7e:	0b15                	addi	s6,s6,5
     e80:	0001                	nop
     e82:	0000                	unimp
     e84:	1101                	addi	sp,sp,-32
     e86:	2501                	jal	1486 <main+0x476>
                    list = e;
     e88:	130e                	slli	t1,t1,0x23
     e8a:	1b0e030b          	0x1b0e030b
     e8e:	110e                	slli	sp,sp,0x23
                tail = e;
     e90:	1201                	addi	tp,tp,-32
     e92:	1006                	c.slli	zero,0x21
     e94:	02000017          	auipc	zero,0x2000
            while (psize > 0 || (qsize > 0 && q))
     e98:	0024                	addi	s1,sp,8
     e9a:	0b3e0b0b          	0xb3e0b0b
     e9e:	00000e03          	lb	t3,0(zero) # 0 <RAM_START_ADDRESS>
     ea2:	03001603          	lh	a2,48(zero) # 30 <_start+0x20>
     ea6:	3a0e                	fld	fs4,224(sp)
     ea8:	390b3b0b          	0x390b3b0b
     eac:	0013490b          	0x13490b
            p = q;
     eb0:	0400                	addi	s0,sp,512
     eb2:	0024                	addi	s1,sp,8
     eb4:	0b3e0b0b          	0xb3e0b0b
        while (p)
     eb8:	00000803          	lb	a6,0(zero) # 0 <RAM_START_ADDRESS>
     ebc:	1305                	addi	t1,t1,-31
     ebe:	0b01                	addi	s6,s6,0
        tail->next = NULL;
     ec0:	3b0b3a0b          	0x3b0b3a0b
     ec4:	010b390b          	0x10b390b
        if (nmerges <= 1) /* allow for nmerges==0, the empty list case */
     ec8:	06000013          	li	zero,96
     ecc:	000d                	c.nop	3
     ece:	0b3a0e03          	lb	t3,179(s4)
     ed2:	0b390b3b          	0xb390b3b
            return list;
     ed6:	1349                	addi	t1,t1,-14
     ed8:	0b0d0b0b          	0xb0d0b0b
        insize *= 2;
     edc:	0b0c                	addi	a1,sp,400
     ede:	0b38                	addi	a4,sp,408
     ee0:	0000                	unimp
     ee2:	03000d07          	vle8ff.v	v26,(zero)
     ee6:	3a08                	fld	fa0,48(a2)
        p    = list;
     ee8:	390b3b0b          	0x390b3b0b
}
     eec:	0b13490b          	0xb13490b
     ef0:	0c0b0d0b          	0xc0b0d0b
     ef4:	000b380b          	0xb380b
     ef8:	0800                	addi	s0,sp,16
     efa:	0e030117          	auipc	sp,0xe030
     efe:	0b3a0b0b          	0xb3a0b0b
{
     f02:	0b390b3b          	0xb390b3b
     f06:	1301                	addi	t1,t1,-32
     f08:	0000                	unimp
     f0a:	0d09                	addi	s10,s10,2
     f0c:	0300                	addi	s0,sp,384
     f0e:	3a08                	fld	fa0,48(a2)
     f10:	390b3b0b          	0x390b3b0b
    core_results *res        = (core_results *)pres;
     f14:	0013490b          	0x13490b
     f18:	0a00                	addi	s0,sp,272
     f1a:	000d                	c.nop	3
    ee_u32        iterations = res->iterations;
     f1c:	0b3a0e03          	lb	t3,179(s4)
     f20:	0b390b3b          	0xb390b3b
     f24:	1349                	addi	t1,t1,-14
     f26:	0000                	unimp
    res->crc                 = 0;
     f28:	3f012e0b          	0x3f012e0b
     f2c:	0319                	addi	t1,t1,6
     f2e:	3a0e                	fld	fs4,224(sp)
    res->crclist             = 0;
     f30:	390b3b0b          	0x390b3b0b
     f34:	4919270b          	0x4919270b
    res->crcmatrix           = 0;
     f38:	12011113          	0x12011113
     f3c:	4006                	0x4006
     f3e:	9718                	0x9718
    res->crcstate            = 0;
     f40:	1942                	slli	s2,s2,0x30
     f42:	1301                	addi	t1,t1,-32
     f44:	0000                	unimp
     f46:	050c                	addi	a1,sp,640
    for (i = 0; i < iterations; i++)
     f48:	0300                	addi	s0,sp,384
     f4a:	3a08                	fld	fa0,48(a2)
     f4c:	390b3b0b          	0x390b3b0b
        crc      = core_bench_list(res, 1);
     f50:	0213490b          	0x213490b
     f54:	0d000017          	auipc	zero,0xd000
     f58:	0034                	addi	a3,sp,8
     f5a:	0b3a0e03          	lb	t3,179(s4)
     f5e:	0b390b3b          	0xb390b3b
     f62:	1349                	addi	t1,t1,-14
        res->crc = crcu16(crc, res->crc);
     f64:	0b1c                	addi	a5,sp,400
     f66:	0000                	unimp
     f68:	340e                	fld	fs0,224(sp)
     f6a:	0300                	addi	s0,sp,384
     f6c:	3a08                	fld	fa0,48(a2)
     f6e:	390b3b0b          	0x390b3b0b
     f72:	0013490b          	0x13490b
     f76:	0f00                	addi	s0,sp,912
     f78:	0034                	addi	a3,sp,8
     f7a:	0b3a0803          	lb	a6,179(s4)
     f7e:	0b390b3b          	0xb390b3b
     f82:	1349                	addi	t1,t1,-14
     f84:	1702                	slli	a4,a4,0x20
     f86:	0000                	unimp
     f88:	3410                	fld	fa2,40(s0)
     f8a:	0300                	addi	s0,sp,384
        crc      = core_bench_list(res, -1);
     f8c:	3a08                	fld	fa0,48(a2)
     f8e:	390b3b0b          	0x390b3b0b
     f92:	0213490b          	0x213490b
     f96:	0018                	0x18
     f98:	1100                	addi	s0,sp,160
     f9a:	0034                	addi	a3,sp,8
     f9c:	0b3a0e03          	lb	t3,179(s4)
        res->crc = crcu16(crc, res->crc);
     fa0:	0b390b3b          	0xb390b3b
     fa4:	1349                	addi	t1,t1,-14
     fa6:	1802                	slli	a6,a6,0x20
     fa8:	0000                	unimp
     faa:	3412                	fld	fs0,288(sp)
     fac:	0300                	addi	s0,sp,384
     fae:	3a0e                	fld	fs4,224(sp)
     fb0:	390b3b0b          	0x390b3b0b
     fb4:	0213490b          	0x213490b
     fb8:	13000017          	auipc	zero,0x13000
     fbc:	1755010b          	0x1755010b
     fc0:	1301                	addi	t1,t1,-32
     fc2:	0000                	unimp
     fc4:	3414                	fld	fa3,40(s0)
     fc6:	0300                	addi	s0,sp,384
        if (i == 0)
     fc8:	3a0e                	fld	fs4,224(sp)
     fca:	390b3b0b          	0x390b3b0b
     fce:	0013490b          	0x13490b
            res->crclist = res->crc;
     fd2:	1500                	addi	s0,sp,672
     fd4:	1301010b          	0x1301010b
     fd8:	0000                	unimp
     fda:	0b16                	slli	s6,s6,0x5
     fdc:	5501                	li	a0,-32
     fde:	00000017          	auipc	zero,0x0
    for (i = 0; i < iterations; i++)
     fe2:	1101                	addi	sp,sp,-32
     fe4:	2501                	jal	15e4 <main+0x5d4>
     fe6:	130e                	slli	t1,t1,0x23
     fe8:	1b0e030b          	0x1b0e030b
     fec:	110e                	slli	sp,sp,0x23
     fee:	1201                	addi	tp,tp,-32
     ff0:	1006                	c.slli	zero,0x21
     ff2:	02000017          	auipc	zero,0x2000
     ff6:	0024                	addi	s1,sp,8
    return NULL;
     ff8:	0b3e0b0b          	0xb3e0b0b
}
     ffc:	00000e03          	lb	t3,0(zero) # 0 <RAM_START_ADDRESS>
    1000:	03001603          	lh	a2,48(zero) # 30 <_start+0x20>
    1004:	3a0e                	fld	fs4,224(sp)
    1006:	390b3b0b          	0x390b3b0b
    100a:	0013490b          	0x13490b
    100e:	0400                	addi	s0,sp,512
{
    1010:	0024                	addi	s1,sp,8
    1012:	0b3e0b0b          	0xb3e0b0b
    1016:	00000803          	lb	a6,0(zero) # 0 <RAM_START_ADDRESS>
    101a:	1305                	addi	t1,t1,-31
    101c:	0b01                	addi	s6,s6,0
    101e:	3b0b3a0b          	0x3b0b3a0b
    1022:	010b390b          	0x10b390b
    1026:	06000013          	li	zero,96
    int   argc = 0;
    102a:	000d                	c.nop	3
    ee_u16       i, j = 0, num_algorithms = 0;
    102c:	0b3a0e03          	lb	t3,179(s4)
    1030:	0b390b3b          	0xb390b3b
    ee_s16       known_id = -1, total_errors = 0;
    1034:	1349                	addi	t1,t1,-14
    1036:	0b0d0b0b          	0xb0d0b0b
    103a:	0b0c                	addi	a1,sp,400
    103c:	0b38                	addi	a4,sp,408
    103e:	0000                	unimp
    ee_u16       seedcrc = 0;
    1040:	03000d07          	vle8ff.v	v26,(zero)
    portable_init(&(results[0].port), &argc, argv);
    1044:	3a08                	fld	fa0,48(a2)
    1046:	390b3b0b          	0x390b3b0b
    104a:	0b13490b          	0xb13490b
    104e:	0c0b0d0b          	0xc0b0d0b
    1052:	000b380b          	0xb380b
    1056:	0800                	addi	s0,sp,16
    1058:	0e030117          	auipc	sp,0xe030
    105c:	0b3a0b0b          	0xb3a0b0b
    1060:	0b390b3b          	0xb390b3b
    results[0].seed1      = get_seed(1);
    1064:	1301                	addi	t1,t1,-32
    1066:	0000                	unimp
    1068:	0d09                	addi	s10,s10,2
    106a:	0300                	addi	s0,sp,384
    106c:	3a08                	fld	fa0,48(a2)
    106e:	390b3b0b          	0x390b3b0b
    1072:	0013490b          	0x13490b
    1076:	0a00                	addi	s0,sp,272
    1078:	000d                	c.nop	3
    107a:	0b3a0e03          	lb	t3,179(s4)
    results[0].seed2      = get_seed(2);
    107e:	0b390b3b          	0xb390b3b
    1082:	1349                	addi	t1,t1,-14
    1084:	0000                	unimp
    1086:	3f012e0b          	0x3f012e0b
    108a:	0319                	addi	t1,t1,6
    108c:	3a0e                	fld	fs4,224(sp)
    108e:	390b3b0b          	0x390b3b0b
    1092:	4919270b          	0x4919270b
    results[0].seed3      = get_seed(3);
    1096:	12011113          	0x12011113
    109a:	4006                	0x4006
    109c:	9718                	0x9718
    109e:	1942                	slli	s2,s2,0x30
    10a0:	1301                	addi	t1,t1,-32
    10a2:	0000                	unimp
    10a4:	050c                	addi	a1,sp,640
    10a6:	0300                	addi	s0,sp,384
    10a8:	3a08                	fld	fa0,48(a2)
    10aa:	390b3b0b          	0x390b3b0b
    results[0].iterations = get_seed_32(4);
    10ae:	0213490b          	0x213490b
    10b2:	0d000017          	auipc	zero,0xd000
    10b6:	0034                	addi	a3,sp,8
    10b8:	0b3a0e03          	lb	t3,179(s4)
    results[0].execs = get_seed_32(5);
    10bc:	0b390b3b          	0xb390b3b
    10c0:	1349                	addi	t1,t1,-14
    10c2:	0b1c                	addi	a5,sp,400
    10c4:	0000                	unimp
    10c6:	340e                	fld	fs0,224(sp)
    10c8:	0300                	addi	s0,sp,384
    10ca:	3a08                	fld	fa0,48(a2)
    if (results[0].execs == 0)
    10cc:	390b3b0b          	0x390b3b0b
    10d0:	0013490b          	0x13490b
        results[0].execs = ALL_ALGORITHMS_MASK;
    10d4:	0f00                	addi	s0,sp,912
    10d6:	0034                	addi	a3,sp,8
    10d8:	0b3a0803          	lb	a6,179(s4)
    if ((results[0].seed1 == 0) && (results[0].seed2 == 0)
    10dc:	0b390b3b          	0xb390b3b
    10e0:	1349                	addi	t1,t1,-14
    10e2:	1702                	slli	a4,a4,0x20
    10e4:	0000                	unimp
    10e6:	3410                	fld	fa2,40(s0)
    10e8:	0300                	addi	s0,sp,384
    10ea:	3a08                	fld	fa0,48(a2)
        && (results[0].seed3 == 0))
    10ec:	390b3b0b          	0x390b3b0b
    10f0:	0213490b          	0x213490b
        results[0].seed1 = 0;
    10f4:	0018                	0x18
    10f6:	1100                	addi	s0,sp,160
        results[0].seed2 = 0;
    10f8:	0034                	addi	a3,sp,8
    10fa:	0b3a0e03          	lb	t3,179(s4)
        results[0].seed3 = 0x66;
    10fe:	0b390b3b          	0xb390b3b
    1102:	1349                	addi	t1,t1,-14
    if ((results[0].seed1 == 1) && (results[0].seed2 == 0)
    1104:	1802                	slli	a6,a6,0x20
    1106:	0000                	unimp
    1108:	3412                	fld	fs0,288(sp)
    110a:	0300                	addi	s0,sp,384
    110c:	3a0e                	fld	fs4,224(sp)
    110e:	390b3b0b          	0x390b3b0b
    1112:	0213490b          	0x213490b
    1116:	13000017          	auipc	zero,0x13000
        && (results[0].seed3 == 0))
    111a:	1755010b          	0x1755010b
    111e:	1301                	addi	t1,t1,-32
        results[0].seed1 = 0x3415;
    1120:	0000                	unimp
    1122:	3414                	fld	fa3,40(s0)
    1124:	0300                	addi	s0,sp,384
    1126:	3a0e                	fld	fs4,224(sp)
    1128:	390b3b0b          	0x390b3b0b
        results[0].seed2 = 0x3415;
    112c:	0013490b          	0x13490b
    1130:	1500                	addi	s0,sp,672
    1132:	1301010b          	0x1301010b
    1136:	0000                	unimp
        results[0].seed3 = 0x66;
    1138:	0b16                	slli	s6,s6,0x5
    113a:	5501                	li	a0,-32
    113c:	00000017          	auipc	zero,0x0
for (i = 0; i < MULTITHREAD; i++)
    1140:	1101                	addi	sp,sp,-32
    1142:	2501                	jal	1742 <main+0x732>
    1144:	130e                	slli	t1,t1,0x23
    1146:	1b0e030b          	0x1b0e030b
    results[i].memblock[0] = stack_memblock + i * TOTAL_DATA_SIZE;
    114a:	110e                	slli	sp,sp,0x23
    114c:	1201                	addi	tp,tp,-32
    114e:	1006                	c.slli	zero,0x21
    1150:	02000017          	auipc	zero,0x2000
    1154:	0024                	addi	s1,sp,8
    1156:	0b3e0b0b          	0xb3e0b0b
    115a:	00000e03          	lb	t3,0(zero) # 0 <RAM_START_ADDRESS>
    115e:	0b002403          	lw	s0,176(zero) # b0 <frame_dummy+0xc>
    1162:	030b3e0b          	0x30b3e0b
    1166:	0008                	0x8
    1168:	0400                	addi	s0,sp,512
    116a:	0016                	c.slli	zero,0x5
    116c:	0b3a0e03          	lb	t3,179(s4)
    1170:	0b39053b          	0xb39053b
    1174:	1349                	addi	t1,t1,-14
    1176:	0000                	unimp
    1178:	1605                	addi	a2,a2,-31
    117a:	0300                	addi	s0,sp,384
    117c:	3a0e                	fld	fs4,224(sp)
    117e:	390b3b0b          	0x390b3b0b
    1182:	0013490b          	0x13490b
    1186:	0600                	addi	s0,sp,768
    1188:	0b0b0113          	addi	sp,s6,176
    118c:	0b3a                	slli	s6,s6,0xe
    118e:	0b390b3b          	0xb390b3b
    1192:	1301                	addi	t1,t1,-32
    1194:	0000                	unimp
    1196:	03000d07          	vle8ff.v	v26,(zero)
    119a:	3a0e                	fld	fs4,224(sp)
    results[i].size        = TOTAL_DATA_SIZE;
    119c:	390b3b0b          	0x390b3b0b
    11a0:	0b13490b          	0xb13490b
    11a4:	0c0b0d0b          	0xc0b0d0b
    11a8:	000b380b          	0xb380b
    11ac:	0800                	addi	s0,sp,16
    11ae:	000d                	c.nop	3
    11b0:	0b3a0803          	lb	a6,179(s4)
    11b4:	0b390b3b          	0xb390b3b
    11b8:	1349                	addi	t1,t1,-14
    11ba:	0b0d0b0b          	0xb0d0b0b
    11be:	0b0c                	addi	a1,sp,400
    results[i].seed1       = results[0].seed1;
    11c0:	0b38                	addi	a4,sp,408
    11c2:	0000                	unimp
    11c4:	1709                	addi	a4,a4,-30
    11c6:	0301                	addi	t1,t1,0
    11c8:	0b0e                	slli	s6,s6,0x3
    11ca:	3b0b3a0b          	0x3b0b3a0b
    11ce:	010b390b          	0x10b390b
    11d2:	0a000013          	li	zero,160
    11d6:	000d                	c.nop	3
    11d8:	0b3a0803          	lb	a6,179(s4)
    11dc:	0b390b3b          	0xb390b3b
    11e0:	1349                	addi	t1,t1,-14
    11e2:	0000                	unimp
    results[i].seed2       = results[0].seed2;
    11e4:	03000d0b          	0x3000d0b
    11e8:	3a0e                	fld	fs4,224(sp)
    11ea:	390b3b0b          	0x390b3b0b
    11ee:	0013490b          	0x13490b
    11f2:	0c00                	addi	s0,sp,528
    11f4:	012e                	slli	sp,sp,0xb
    11f6:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
    11fe:	0b39                	addi	s6,s6,14
    1200:	13491927          	fsh	fs4,306(s2)
    1204:	0111                	addi	sp,sp,4
    1206:	0612                	slli	a2,a2,0x4
    results[i].seed3       = results[0].seed3;
    1208:	1840                	addi	s0,sp,52
    120a:	01194297          	auipc	t0,0x1194
    120e:	0d000013          	li	zero,208
    1212:	0005                	c.nop	1
    1214:	0b3a0803          	lb	a6,179(s4)
    1218:	0b390b3b          	0xb390b3b
    121c:	1349                	addi	t1,t1,-14
    121e:	1702                	slli	a4,a4,0x20
    1220:	0000                	unimp
    1222:	340e                	fld	fs0,224(sp)
    1224:	0300                	addi	s0,sp,384
    1226:	3a0e                	fld	fs4,224(sp)
    1228:	390b3b0b          	0x390b3b0b
    results[i].err         = 0;
    122c:	0213490b          	0x213490b
    1230:	0f000017          	auipc	zero,0xf000
    1234:	0034                	addi	a3,sp,8
    1236:	0b3a0e03          	lb	t3,179(s4)
    123a:	0b390b3b          	0xb390b3b
    123e:	1349                	addi	t1,t1,-14
    1240:	0b1c                	addi	a5,sp,400
    1242:	0000                	unimp
    1244:	3410                	fld	fa2,40(s0)
    1246:	0300                	addi	s0,sp,384
    1248:	3a08                	fld	fa0,48(a2)
    124a:	390b3b0b          	0x390b3b0b
    results[i].execs       = results[0].execs;
    124e:	0213490b          	0x213490b
    1252:	11000017          	auipc	zero,0x11000
    1256:	0034                	addi	a3,sp,8
    1258:	0b3a0803          	lb	a6,179(s4)
    125c:	0b390b3b          	0xb390b3b
    1260:	1349                	addi	t1,t1,-14
    1262:	0000                	unimp
    1264:	0b12                	slli	s6,s6,0x4
    1266:	5501                	li	a0,-32
    1268:	00130117          	auipc	sp,0x130
    126c:	1300                	addi	s0,sp,416
    126e:	0034                	addi	a3,sp,8
for (i = 0; i < MULTITHREAD; i++)
    1270:	0b3a0e03          	lb	t3,179(s4)
    1274:	0b390b3b          	0xb390b3b
    1278:	1349                	addi	t1,t1,-14
    127a:	0000                	unimp
    127c:	8914                	0x8914
    127e:	0182                	c.slli64	gp
    1280:	1100                	addi	s0,sp,160
    1282:	3101                	jal	e82 <core_list_mergesort+0x18a>
    for (i = 0; i < NUM_ALGORITHMS; i++)
    1284:	15000013          	li	zero,336
    1288:	0111010b          	0x111010b
        if ((1 << (ee_u32)i) & results[0].execs)
    128c:	0612                	slli	a2,a2,0x4
    128e:	1301                	addi	t1,t1,-32
    1290:	0000                	unimp
    1292:	3416                	fld	fs0,352(sp)
    1294:	0300                	addi	s0,sp,384
    1296:	3a0e                	fld	fs4,224(sp)
    1298:	390b3b0b          	0x390b3b0b
    129c:	0213490b          	0x213490b
    12a0:	0018                	0x18
    12a2:	1700                	addi	s0,sp,928
    12a4:	1755010b          	0x1755010b
            num_algorithms++;
    12a8:	0000                	unimp
    12aa:	0b18                	addi	a4,sp,400
    12ac:	0101                	addi	sp,sp,0
    12ae:	19000013          	li	zero,400
    12b2:	0000010b          	0x10b
    for (i = 0; i < NUM_ALGORITHMS; i++)
    12b6:	011a                	slli	sp,sp,0x6
    12b8:	4901                	li	s2,0
    12ba:	00130113          	addi	sp,t1,1
    12be:	1b00                	addi	s0,sp,432
    12c0:	0021                	c.nop	8
    12c2:	1349                	addi	t1,t1,-14
    12c4:	00000b2f          	vamoaddei8.v	zero,(zero),v0,v22,v0.t
    12c8:	2e1c                	fld	fa5,24(a2)
    12ca:	3f00                	fld	fs0,56(a4)
    for (i = 0; i < MULTITHREAD; i++)
    12cc:	3c19                	jal	ce2 <core_list_reverse+0x46>
    12ce:	6e19                	lui	t3,0x6
    12d0:	030e                	slli	t1,t1,0x3
    12d2:	000e                	c.slli	zero,0x3
        results[i].size = results[i].size / num_algorithms;
    12d4:	0000                	unimp
    12d6:	1101                	addi	sp,sp,-32
    12d8:	2501                	jal	18d8 <main+0x8c8>
    12da:	130e                	slli	t1,t1,0x23
    12dc:	1b0e030b          	0x1b0e030b
    12e0:	110e                	slli	sp,sp,0x23
    12e2:	1201                	addi	tp,tp,-32
    12e4:	1006                	c.slli	zero,0x21
    12e6:	02000017          	auipc	zero,0x2000
    12ea:	0024                	addi	s1,sp,8
    12ec:	0b3e0b0b          	0xb3e0b0b
    12f0:	00000e03          	lb	t3,0(zero) # 0 <RAM_START_ADDRESS>
    12f4:	0b002403          	lw	s0,176(zero) # b0 <frame_dummy+0xc>
    12f8:	030b3e0b          	0x30b3e0b
    12fc:	0008                	0x8
    12fe:	0400                	addi	s0,sp,512
    1300:	0016                	c.slli	zero,0x5
    1302:	0b3a0e03          	lb	t3,179(s4)
    1306:	0b39053b          	0xb39053b
    130a:	1349                	addi	t1,t1,-14
    130c:	0000                	unimp
    130e:	1605                	addi	a2,a2,-31
    1310:	0300                	addi	s0,sp,384
    1312:	3a0e                	fld	fs4,224(sp)
    1314:	390b3b0b          	0x390b3b0b
    1318:	0013490b          	0x13490b
    131c:	0600                	addi	s0,sp,768
    131e:	0b0b0113          	addi	sp,s6,176
    1322:	0b3a                	slli	s6,s6,0xe
    1324:	0b390b3b          	0xb390b3b
    1328:	1301                	addi	t1,t1,-32
    132a:	0000                	unimp
    for (i = 0; i < MULTITHREAD; i++)
    132c:	03000d07          	vle8ff.v	v26,(zero)
    1330:	3a0e                	fld	fs4,224(sp)
    1332:	390b3b0b          	0x390b3b0b
    1336:	0b13490b          	0xb13490b
    133a:	0c0b0d0b          	0xc0b0d0b
    133e:	000b380b          	0xb380b
    for (i = 0; i < NUM_ALGORITHMS; i++)
    1342:	0800                	addi	s0,sp,16
    1344:	000d                	c.nop	3
    1346:	0b3a0803          	lb	a6,179(s4)
        if ((1 << (ee_u32)i) & results[0].execs)
    134a:	0b390b3b          	0xb390b3b
    134e:	1349                	addi	t1,t1,-14
    1350:	0b0d0b0b          	0xb0d0b0b
    1354:	0b0c                	addi	a1,sp,400
    1356:	0b38                	addi	a4,sp,408
    1358:	0000                	unimp
    135a:	1709                	addi	a4,a4,-30
    135c:	0301                	addi	t1,t1,0
    135e:	0b0e                	slli	s6,s6,0x3
    1360:	3b0b3a0b          	0x3b0b3a0b
            for (ctx = 0; ctx < MULTITHREAD; ctx++)
    1364:	010b390b          	0x10b390b
    1368:	0a000013          	li	zero,160
                    = (char *)(results[ctx].memblock[0]) + results[0].size * j;
    136c:	000d                	c.nop	3
    136e:	0b3a0803          	lb	a6,179(s4)
    1372:	0b390b3b          	0xb390b3b
    1376:	1349                	addi	t1,t1,-14
    1378:	0000                	unimp
    137a:	03000d0b          	0x3000d0b
    137e:	3a0e                	fld	fs4,224(sp)
    1380:	390b3b0b          	0x390b3b0b
    1384:	0013490b          	0x13490b
    1388:	0c00                	addi	s0,sp,528
    138a:	012e                	slli	sp,sp,0xb
    138c:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
    1394:	0b39                	addi	s6,s6,14
    1396:	13491927          	fsh	fs4,306(s2)
    139a:	0111                	addi	sp,sp,4
    139c:	0612                	slli	a2,a2,0x4
    139e:	1840                	addi	s0,sp,52
    13a0:	01194297          	auipc	t0,0x1194
    13a4:	0d000013          	li	zero,208
                results[ctx].memblock[i + 1]
    13a8:	0005                	c.nop	1
    13aa:	0b3a0803          	lb	a6,179(s4)
    13ae:	0b390b3b          	0xb390b3b
                    = (char *)(results[ctx].memblock[0]) + results[0].size * j;
    13b2:	1349                	addi	t1,t1,-14
    13b4:	1702                	slli	a4,a4,0x20
    13b6:	0000                	unimp
    13b8:	340e                	fld	fs0,224(sp)
    13ba:	0300                	addi	s0,sp,384
    13bc:	3a0e                	fld	fs4,224(sp)
    13be:	390b3b0b          	0x390b3b0b
    13c2:	0213490b          	0x213490b
    13c6:	0f000017          	auipc	zero,0xf000
    13ca:	0034                	addi	a3,sp,8
    13cc:	0b3a0e03          	lb	t3,179(s4)
    13d0:	0b390b3b          	0xb390b3b
    13d4:	1349                	addi	t1,t1,-14
    13d6:	0b1c                	addi	a5,sp,400
            for (ctx = 0; ctx < MULTITHREAD; ctx++)
    13d8:	0000                	unimp
    13da:	3410                	fld	fa2,40(s0)
    13dc:	0300                	addi	s0,sp,384
    13de:	3a08                	fld	fa0,48(a2)
    13e0:	390b3b0b          	0x390b3b0b
    13e4:	0013490b          	0x13490b
    13e8:	1100                	addi	s0,sp,160
    13ea:	0034                	addi	a3,sp,8
            j++;
    13ec:	0b3a0803          	lb	a6,179(s4)
    13f0:	0b390b3b          	0xb390b3b
    13f4:	1349                	addi	t1,t1,-14
    13f6:	1802                	slli	a6,a6,0x20
    for (i = 0; i < NUM_ALGORITHMS; i++)
    13f8:	0000                	unimp
    13fa:	3412                	fld	fs0,288(sp)
    13fc:	0300                	addi	s0,sp,384
    13fe:	3a08                	fld	fa0,48(a2)
    1400:	390b3b0b          	0x390b3b0b
    1404:	0213490b          	0x213490b
    1408:	13000017          	auipc	zero,0x13000
    140c:	1755010b          	0x1755010b
    for (i = 0; i < MULTITHREAD; i++)
    1410:	1301                	addi	t1,t1,-32
    1412:	0000                	unimp
    1414:	3414                	fld	fa3,40(s0)
    1416:	0300                	addi	s0,sp,384
        if (results[i].execs & ID_LIST)
    1418:	3a0e                	fld	fs4,224(sp)
    141a:	390b3b0b          	0x390b3b0b
    141e:	0013490b          	0x13490b
    1422:	1500                	addi	s0,sp,672
    1424:	1301010b          	0x1301010b
    1428:	0000                	unimp
    142a:	0b16                	slli	s6,s6,0x5
    142c:	1101                	addi	sp,sp,-32
    142e:	1201                	addi	tp,tp,-32
    1430:	0006                	c.slli	zero,0x1
    1432:	0000                	unimp
    1434:	1101                	addi	sp,sp,-32
    1436:	1000                	addi	s0,sp,32
    1438:	1106                	slli	sp,sp,0x21
    143a:	1201                	addi	tp,tp,-32
    143c:	0301                	addi	t1,t1,0
    143e:	1b0e                	slli	s6,s6,0x23
            results[i].list = core_list_init(
    1440:	250e                	fld	fa0,192(sp)
    1442:	130e                	slli	t1,t1,0x23
    1444:	0005                	c.nop	1
    1446:	0000                	unimp
                results[0].size, results[i].memblock[1], results[i].seed1);
    1448:	1101                	addi	sp,sp,-32
    144a:	1000                	addi	s0,sp,32
    144c:	1106                	slli	sp,sp,0x21
    144e:	1201                	addi	tp,tp,-32
    1450:	0301                	addi	t1,t1,0
    1452:	1b0e                	slli	s6,s6,0x23
    1454:	250e                	fld	fa0,192(sp)
    1456:	130e                	slli	t1,t1,0x23
    1458:	0005                	c.nop	1
    145a:	0000                	unimp
    145c:	1101                	addi	sp,sp,-32
    145e:	2501                	jal	1a5e <main+0xa4e>
    1460:	130e                	slli	t1,t1,0x23
    1462:	1b0e030b          	0x1b0e030b
            results[i].list = core_list_init(
    1466:	110e                	slli	sp,sp,0x23
    1468:	1201                	addi	tp,tp,-32
    146a:	1006                	c.slli	zero,0x21
    146c:	02000017          	auipc	zero,0x2000
    1470:	0024                	addi	s1,sp,8
    1472:	0b3e0b0b          	0xb3e0b0b
    1476:	00000803          	lb	a6,0(zero) # 0 <RAM_START_ADDRESS>
    147a:	0b002403          	lw	s0,176(zero) # b0 <frame_dummy+0xc>
    147e:	030b3e0b          	0x30b3e0b
    1482:	000e                	c.slli	zero,0x3
    1484:	0400                	addi	s0,sp,512
    1486:	0016                	c.slli	zero,0x5
    1488:	0b3a0e03          	lb	t3,179(s4)
    148c:	0b390b3b          	0xb390b3b
    1490:	1349                	addi	t1,t1,-14
    1492:	0000                	unimp
    1494:	2605                	jal	17b4 <main+0x7a4>
    1496:	4900                	lw	s0,16(a0)
    1498:	06000013          	li	zero,96
    149c:	0101                	addi	sp,sp,0
    149e:	1349                	addi	t1,t1,-14
    14a0:	1301                	addi	t1,t1,-32
    14a2:	0000                	unimp
    14a4:	49002107          	flw	ft2,1168(zero) # 490 <core_bench_list+0x44>
    14a8:	000b2f13          	slti	t5,s6,0
    14ac:	0800                	addi	s0,sp,16
    14ae:	0034                	addi	a3,sp,8
    14b0:	0b3a0e03          	lb	t3,179(s4)
        if (results[i].execs & ID_MATRIX)
    14b4:	0b39053b          	0xb39053b
    14b8:	1349                	addi	t1,t1,-14
    14ba:	193c193f 2e090000 	0x2e090000193c193f
    14c2:	3f01                	jal	13d2 <main+0x3c2>
    14c4:	0319                	addi	t1,t1,6
    14c6:	3a0e                	fld	fs4,224(sp)
    14c8:	39053b0b          	0x39053b0b
    14cc:	4919270b          	0x4919270b
    14d0:	12011113          	0x12011113
    14d4:	4006                	0x4006
    14d6:	9718                	0x9718
    14d8:	1942                	slli	s2,s2,0x30
    14da:	0000                	unimp
            core_init_matrix(results[0].size,
    14dc:	050a                	slli	a0,a0,0x2
    14de:	0300                	addi	s0,sp,384
    14e0:	3a08                	fld	fa0,48(a2)
    14e2:	39053b0b          	0x39053b0b
    14e6:	0213490b          	0x213490b
    14ea:	0b000017          	auipc	zero,0xb000
    14ee:	0034                	addi	a3,sp,8
    14f0:	0b3a0803          	lb	a6,179(s4)
    14f4:	0b39053b          	0xb39053b
    14f8:	1349                	addi	t1,t1,-14
    14fa:	0000                	unimp
    14fc:	0b0c                	addi	a1,sp,400
    14fe:	5501                	li	a0,-32
                             (ee_s32)results[i].seed1
    1500:	0d000017          	auipc	zero,0xd000
    1504:	0034                	addi	a3,sp,8
    1506:	0b3a0e03          	lb	t3,179(s4)
    150a:	0b39053b          	0xb39053b
    150e:	1349                	addi	t1,t1,-14
    1510:	1702                	slli	a4,a4,0x20
    1512:	0000                	unimp
    1514:	340e                	fld	fs0,224(sp)
    1516:	0300                	addi	s0,sp,384
    1518:	3a08                	fld	fa0,48(a2)
    151a:	39053b0b          	0x39053b0b
    151e:	0213490b          	0x213490b
    1522:	00000017          	auipc	zero,0x0
                                 | (((ee_s32)results[i].seed2) << 16),
    1526:	1101                	addi	sp,sp,-32
    1528:	2501                	jal	1b28 <main+0xb18>
    152a:	130e                	slli	t1,t1,0x23
    152c:	1b0e030b          	0x1b0e030b
    1530:	100e                	c.slli	zero,0x23
    1532:	02000017          	auipc	zero,0x2000
    1536:	0024                	addi	s1,sp,8
    1538:	0b3e0b0b          	0xb3e0b0b
    153c:	00000803          	lb	a6,0(zero) # 0 <RAM_START_ADDRESS>
    1540:	0b002403          	lw	s0,176(zero) # b0 <frame_dummy+0xc>
    1544:	030b3e0b          	0x30b3e0b
            core_init_matrix(results[0].size,
    1548:	000e                	c.slli	zero,0x3
    154a:	0400                	addi	s0,sp,512
                             &(results[i].mat));
    154c:	0016                	c.slli	zero,0x5
    154e:	0b3a0e03          	lb	t3,179(s4)
            core_init_matrix(results[0].size,
    1552:	0b390b3b          	0xb390b3b
    1556:	1349                	addi	t1,t1,-14
    1558:	0000                	unimp
    155a:	2605                	jal	187a <main+0x86a>
    155c:	4900                	lw	s0,16(a0)
    155e:	06000013          	li	zero,96
    1562:	0101                	addi	sp,sp,0
    1564:	1349                	addi	t1,t1,-14
    1566:	1301                	addi	t1,t1,-32
    1568:	0000                	unimp
    156a:	49002107          	flw	ft2,1168(zero) # 490 <core_bench_list+0x44>
    156e:	000b2f13          	slti	t5,s6,0
    1572:	0800                	addi	s0,sp,16
    1574:	0034                	addi	a3,sp,8
    1576:	0b3a0e03          	lb	t3,179(s4)
        if (results[i].execs & ID_STATE)
    157a:	0b39053b          	0xb39053b
    157e:	1349                	addi	t1,t1,-14
    1580:	193c193f 34090000 	0x34090000193c193f
    1588:	4700                	lw	s0,8(a4)
    158a:	3b0b3a13          	sltiu	s4,s6,944
    158e:	3905                	jal	11be <main+0x1ae>
    1590:	0018020b          	0x18020b
    1594:	0000                	unimp
    1596:	1101                	addi	sp,sp,-32
    1598:	2501                	jal	1b98 <main+0xb88>
    159a:	130e                	slli	t1,t1,0x23
    159c:	1b0e030b          	0x1b0e030b
            core_init_state(
    15a0:	110e                	slli	sp,sp,0x23
    15a2:	1201                	addi	tp,tp,-32
    15a4:	1006                	c.slli	zero,0x21
    15a6:	02000017          	auipc	zero,0x2000
    15aa:	0024                	addi	s1,sp,8
    15ac:	0b3e0b0b          	0xb3e0b0b
    15b0:	00000e03          	lb	t3,0(zero) # 0 <RAM_START_ADDRESS>
    15b4:	0b002403          	lw	s0,176(zero) # b0 <frame_dummy+0xc>
    15b8:	030b3e0b          	0x30b3e0b
    15bc:	0008                	0x8
    15be:	0400                	addi	s0,sp,512
    15c0:	0016                	c.slli	zero,0x5
    15c2:	0b3a0e03          	lb	t3,179(s4)
    15c6:	0b390b3b          	0xb390b3b
                results[0].size, results[i].seed1, results[i].memblock[3]);
    15ca:	1349                	addi	t1,t1,-14
    15cc:	0000                	unimp
    15ce:	1305                	addi	t1,t1,-31
    15d0:	0b01                	addi	s6,s6,0
    15d2:	3b0b3a0b          	0x3b0b3a0b
    15d6:	010b390b          	0x10b390b
    15da:	06000013          	li	zero,96
    15de:	000d                	c.nop	3
    15e0:	0b3a0e03          	lb	t3,179(s4)
            core_init_state(
    15e4:	0b390b3b          	0xb390b3b
    15e8:	1349                	addi	t1,t1,-14
    15ea:	0b0d0b0b          	0xb0d0b0b
    15ee:	0b0c                	addi	a1,sp,400
    for (i = 0; i < MULTITHREAD; i++)
    15f0:	0b38                	addi	a4,sp,408
    15f2:	0000                	unimp
    15f4:	03000d07          	vle8ff.v	v26,(zero)
    15f8:	3a08                	fld	fa0,48(a2)
    15fa:	390b3b0b          	0x390b3b0b
    15fe:	0b13490b          	0xb13490b
    1602:	0c0b0d0b          	0xc0b0d0b
    if (results[0].iterations == 0)
    1606:	000b380b          	0xb380b
    160a:	0800                	addi	s0,sp,16
        secs_ret secs_passed = 0;
    160c:	0e030117          	auipc	sp,0xe030
        results[0].iterations = 1;
    1610:	0b3a0b0b          	0xb3a0b0b
    1614:	0b390b3b          	0xb390b3b
        while (secs_passed < (secs_ret)1)
    1618:	1301                	addi	t1,t1,-32
    161a:	0000                	unimp
            results[0].iterations *= 10;
    161c:	0d09                	addi	s10,s10,2
    161e:	0300                	addi	s0,sp,384
    1620:	3a08                	fld	fa0,48(a2)
    1622:	390b3b0b          	0x390b3b0b
    1626:	0013490b          	0x13490b
    162a:	0a00                	addi	s0,sp,272
    162c:	000d                	c.nop	3
    162e:	0b3a0e03          	lb	t3,179(s4)
    1632:	0b390b3b          	0xb390b3b
            start_time();
    1636:	1349                	addi	t1,t1,-14
            iterate(&results[0]);
    1638:	0000                	unimp
    163a:	3f012e0b          	0x3f012e0b
    163e:	0319                	addi	t1,t1,6
    1640:	3a0e                	fld	fs4,224(sp)
    1642:	390b3b0b          	0x390b3b0b
            stop_time();
    1646:	4919270b          	0x4919270b
            secs_passed = time_in_secs(get_time());
    164a:	12011113          	0x12011113
    164e:	4006                	0x4006
    1650:	9718                	0x9718
    1652:	1942                	slli	s2,s2,0x30
    1654:	1301                	addi	t1,t1,-32
    1656:	0000                	unimp
    1658:	050c                	addi	a1,sp,640
    165a:	0300                	addi	s0,sp,384
        while (secs_passed < (secs_ret)1)
    165c:	3a08                	fld	fa0,48(a2)
    165e:	390b3b0b          	0x390b3b0b
    1662:	0213490b          	0x213490b
        divisor = (ee_u32)secs_passed;
    1666:	0d000017          	auipc	zero,0xd000
    166a:	0034                	addi	a3,sp,8
        if (divisor == 0) /* some machines cast float to int as 0 since this
    166c:	0b3a0e03          	lb	t3,179(s4)
    1670:	0b390b3b          	0xb390b3b
            divisor = 1;
    1674:	1349                	addi	t1,t1,-14
    1676:	1702                	slli	a4,a4,0x20
    1678:	0000                	unimp
    167a:	340e                	fld	fs0,224(sp)
        results[0].iterations *= 1 + 10 / divisor;
    167c:	0300                	addi	s0,sp,384
    167e:	3a0e                	fld	fs4,224(sp)
    1680:	390b3b0b          	0x390b3b0b
    1684:	1c13490b          	0x1c13490b
    1688:	0f00000b          	0xf00000b
    168c:	0034                	addi	a3,sp,8
    168e:	0b3a0803          	lb	a6,179(s4)
    1692:	0b390b3b          	0xb390b3b
    1696:	1349                	addi	t1,t1,-14
    1698:	0000                	unimp
    169a:	3410                	fld	fa2,40(s0)
    169c:	0300                	addi	s0,sp,384
    169e:	3a08                	fld	fa0,48(a2)
    16a0:	390b3b0b          	0x390b3b0b
    16a4:	0213490b          	0x213490b
    start_time();
    16a8:	11000017          	auipc	zero,0x11000
    iterate(&results[0]);
    16ac:	1755010b          	0x1755010b
    16b0:	1301                	addi	t1,t1,-32
    16b2:	0000                	unimp
    16b4:	3412                	fld	fs0,288(sp)
    16b6:	0300                	addi	s0,sp,384
    stop_time();
    16b8:	3a0e                	fld	fs4,224(sp)
    16ba:	390b3b0b          	0x390b3b0b
    total_time = get_time();
    16be:	0013490b          	0x13490b
    16c2:	1300                	addi	s0,sp,416
    seedcrc = crc16(results[0].seed1, seedcrc);
    16c4:	000a                	c.slli	zero,0x2
    16c6:	0b3a0e03          	lb	t3,179(s4)
    16ca:	0b390b3b          	0xb390b3b
    16ce:	0111                	addi	sp,sp,4
    16d0:	0000                	unimp
    16d2:	0b14                	addi	a3,sp,400
    16d4:	1101                	addi	sp,sp,-32
    16d6:	1201                	addi	tp,tp,-32
    16d8:	0106                	slli	sp,sp,0x1
    16da:	15000013          	li	zero,336
    16de:	1755010b          	0x1755010b
    seedcrc = crc16(results[0].seed2, seedcrc);
    16e2:	0000                	unimp
    16e4:	8916                	mv	s2,t0
    16e6:	0182                	c.slli64	gp
    16e8:	1100                	addi	s0,sp,160
    16ea:	3101                	jal	12ea <main+0x2da>
    16ec:	17000013          	li	zero,368
    16f0:	1301010b          	0x1301010b
    16f4:	0000                	unimp
    16f6:	0b18                	addi	a4,sp,400
    16f8:	0001                	nop
    16fa:	1900                	addi	s0,sp,176
    seedcrc = crc16(results[0].seed3, seedcrc);
    16fc:	002e                	c.slli	zero,0xb
    16fe:	193c193f 0e030e6e 	0xe030e6e193c193f
    1706:	0000                	unimp
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
lui     sp,%hi(__stack_top)                                             
   0:	001c                	0x1c
   2:	0000                	unimp
addi    sp,sp,%lo(__stack_top)
   4:	0002                	c.slli64	zero
   6:	0000                	unimp
jal   zero, _start
   8:	0000                	unimp
   a:	0004                	0x4
	...
  14:	000c                	0xc
	...
  1e:	0000                	unimp
  20:	001c                	0x1c
  22:	0000                	unimp
  24:	0002                	c.slli64	zero
  26:	0026                	c.slli	zero,0x9
  28:	0000                	unimp
  2a:	0004                	0x4
  2c:	0000                	unimp
  2e:	0000                	unimp
  30:	00c4                	addi	s1,sp,68
  32:	0000                	unimp
  34:	0e3c                	addi	a5,sp,792
	...
  3e:	0000                	unimp
  40:	001c                	0x1c
  42:	0000                	unimp
  44:	0002                	c.slli64	zero
  46:	08da                	slli	a7,a7,0x16
  48:	0000                	unimp
  4a:	0004                	0x4
  4c:	0000                	unimp
  4e:	0000                	unimp
  50:	0f00                	addi	s0,sp,912
  52:	0000                	unimp
  54:	102c                	addi	a1,sp,40
	...
  5e:	0000                	unimp
  60:	001c                	0x1c
  62:	0000                	unimp
  64:	0002                	c.slli64	zero
  66:	00000d83          	lb	s11,0(zero) # 0 <RAM_START_ADDRESS>
  6a:	0004                	0x4
  6c:	0000                	unimp
  6e:	0000                	unimp
  70:	1f2c                	addi	a1,sp,952
  72:	0000                	unimp
  74:	0c64                	addi	s1,sp,540
	...
  7e:	0000                	unimp
  80:	001c                	0x1c
  82:	0000                	unimp
  84:	0002                	c.slli64	zero
  86:	1326                	slli	t1,t1,0x29
  88:	0000                	unimp
  8a:	0004                	0x4
  8c:	0000                	unimp
  8e:	0000                	unimp
  90:	2b90                	fld	fa2,16(a5)
  92:	0000                	unimp
  94:	0160                	addi	s0,sp,140
	...
  9e:	0000                	unimp
  a0:	001c                	0x1c
  a2:	0000                	unimp
  a4:	0002                	c.slli64	zero
  a6:	15ca                	slli	a1,a1,0x32
  a8:	0000                	unimp
  aa:	0004                	0x4
  ac:	0000                	unimp
  ae:	0000                	unimp
  b0:	2cf0                	fld	fa2,216(s1)
  b2:	0000                	unimp
  b4:	0910                	addi	a2,sp,144
	...
  be:	0000                	unimp
  c0:	001c                	0x1c
  c2:	0000                	unimp
{
  c4:	0002                	c.slli64	zero
  c6:	0000191b          	0x191b
  ca:	0004                	0x4
  cc:	0000                	unimp
  ce:	0000                	unimp
  d0:	3600                	fld	fs0,40(a2)
  d2:	0000                	unimp
  d4:	032c                	addi	a1,sp,392
	...
    ee_s16 data = *pdata;
  de:	0000                	unimp
  e0:	001c                	0x1c
  e2:	0000                	unimp
  e4:	0002                	c.slli64	zero
  e6:	1b62                	slli	s6,s6,0x38
          & 1;  /* bit 7 indicates if the function result has been cached */
  e8:	0000                	unimp
  ea:	0004                	0x4
  ec:	0000                	unimp
  ee:	0000                	unimp
  f0:	392c                	fld	fa1,112(a0)
  f2:	0000                	unimp
  f4:	0614                	addi	a3,sp,768
	...
    ee_u8  optype
  fe:	0000                	unimp
 100:	001c                	0x1c
 102:	0000                	unimp
    if (optype) /* if cached, use cache */
 104:	0002                	c.slli64	zero
 106:	00001e4b          	fnmsub.s	ft8,ft0,ft0,ft0,rtz
 10a:	0004                	0x4
        return (data & 0x007f);
 10c:	0000                	unimp
 10e:	0000                	unimp
 110:	3f40                	fld	fs0,184(a4)
 112:	0000                	unimp
 114:	0ffc                	addi	a5,sp,988
	...
 11e:	0000                	unimp
        ee_s16 flag = data & 0x7; /* bits 0-2 is type of function to perform */
 120:	001c                	0x1c
 122:	0000                	unimp
 124:	0002                	c.slli64	zero
 126:	2381                	jal	666 <core_bench_list+0x21a>
 128:	0000                	unimp
 12a:	0004                	0x4
               & 0xf);       /* bits 3-6 is specific data for the operation */
 12c:	0000                	unimp
 12e:	0000                	unimp
 130:	4f3c                	lw	a5,88(a4)
 132:	0000                	unimp
 134:	07d8                	addi	a4,sp,964
	...
        ee_s16 dtype
 13e:	0000                	unimp
 140:	001c                	0x1c
 142:	0000                	unimp
        dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
 144:	0002                	c.slli64	zero
 146:	2902                	fld	fs2,0(sp)
 148:	0000                	unimp
 14a:	0004                	0x4
 14c:	0000                	unimp
 14e:	0000                	unimp
 150:	5714                	lw	a3,40(a4)
 152:	0000                	unimp
 154:	07e4                	addi	s1,sp,972
	...
 15e:	0000                	unimp
        switch (flag)
 160:	001c                	0x1c
 162:	0000                	unimp
 164:	0002                	c.slli64	zero
 166:	000031f7          	0x31f7
 16a:	0004                	0x4
 16c:	0000                	unimp
 16e:	0000                	unimp
 170:	5ef8                	lw	a4,124(a3)
 172:	0000                	unimp
                if (dtype < 0x22) /* set min period for bit corruption */
 174:	008c                	addi	a1,sp,64
	...
 17e:	0000                	unimp
                    dtype = 0x22;
 180:	001c                	0x1c
 182:	0000                	unimp
 184:	0002                	c.slli64	zero
 186:	344c                	fld	fa1,168(s0)
                retval = core_bench_state(res->size,
 188:	0000                	unimp
 18a:	0004                	0x4
 18c:	0000                	unimp
 18e:	0000                	unimp
                                          res->memblock[3],
 190:	5f84                	lw	s1,56(a5)
 192:	0000                	unimp
 194:	00e4                	addi	s1,sp,76
	...
                retval = core_bench_state(res->size,
 19e:	0000                	unimp
 1a0:	001c                	0x1c
 1a2:	0000                	unimp
 1a4:	0002                	c.slli64	zero
 1a6:	369f 0000 0004      	0x40000369f
 1ac:	0000                	unimp
 1ae:	0000                	unimp
 1b0:	6068                	flw	fa0,68(s0)
 1b2:	0000                	unimp
 1b4:	00e4                	addi	s1,sp,76
	...
 1be:	0000                	unimp
                if (res->crcstate == 0)
 1c0:	001c                	0x1c
 1c2:	0000                	unimp
 1c4:	0002                	c.slli64	zero
 1c6:	38f2                	fld	fa7,312(sp)
 1c8:	0000                	unimp
 1ca:	0004                	0x4
                    res->crcstate = retval;
 1cc:	0000                	unimp
 1ce:	0000                	unimp
 1d0:	614c                	flw	fa1,4(a0)
 1d2:	0000                	unimp
 1d4:	068c                	addi	a1,sp,832
	...
                retval = core_bench_matrix(&(res->mat), dtype, res->crc);
 1de:	0000                	unimp
 1e0:	001c                	0x1c
 1e2:	0000                	unimp
 1e4:	0002                	c.slli64	zero
 1e6:	42d8                	lw	a4,4(a3)
 1e8:	0000                	unimp
 1ea:	0004                	0x4
 1ec:	0000                	unimp
 1ee:	0000                	unimp
 1f0:	67d8                	flw	fa4,12(a5)
 1f2:	0000                	unimp
 1f4:	0080                	addi	s0,sp,64
	...
 1fe:	0000                	unimp
 200:	001c                	0x1c
 202:	0000                	unimp
 204:	0002                	c.slli64	zero
 206:	000044bf 00000004 	0x4000044bf
                if (res->crcmatrix == 0)
 20e:	0000                	unimp
 210:	6858                	flw	fa4,20(s0)
 212:	0000                	unimp
                    res->crcmatrix = retval;
 214:	0024                	addi	s1,sp,8
	...
 21e:	0000                	unimp
                break;
 220:	001c                	0x1c
 222:	0000                	unimp
                retval = data;
 224:	0002                	c.slli64	zero
 226:	44e5                	li	s1,25
 228:	0000                	unimp
 22a:	0004                	0x4
                break;
 22c:	0000                	unimp
 22e:	0000                	unimp
                break;
 230:	687c                	flw	fa5,84(s0)
 232:	0000                	unimp
 234:	00b4                	addi	a3,sp,72
	...
        res->crc = crcu16(retval, res->crc);
 23e:	0000                	unimp
 240:	001c                	0x1c
 242:	0000                	unimp
 244:	0002                	c.slli64	zero
 246:	0000450b          	0x450b
 24a:	0004                	0x4
 24c:	0000                	unimp
 24e:	0000                	unimp
 250:	6930                	flw	fa2,80(a0)
 252:	0000                	unimp
 254:	004c                	addi	a1,sp,4
	...
 25e:	0000                	unimp
 260:	0014                	0x14
 262:	0000                	unimp
        retval &= 0x007f;
 264:	0002                	c.slli64	zero
 266:	465d                	li	a2,23
 268:	0000                	unimp
 26a:	0004                	0x4
	...
        *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
 278:	001c                	0x1c
 27a:	0000                	unimp
 27c:	0002                	c.slli64	zero
 27e:	4742                	lw	a4,16(sp)
 280:	0000                	unimp
 282:	0004                	0x4
 284:	0000                	unimp
 286:	0000                	unimp
 288:	6f7c                	flw	fa5,92(a4)
 28a:	0000                	unimp
 28c:	07ec                	addi	a1,sp,972
	...

Disassembly of section .debug_str:

00000000 <.debug_str>:
lui     sp,%hi(__stack_top)                                             
       0:	6168732f          	vamoandei64.v	zero,(a6),v22,v6,v0.t
addi    sp,sp,%lo(__stack_top)
       4:	6572                	flw	fa0,28(sp)
       6:	2f64                	fld	fs1,216(a4)
jal   zero, _start
       8:	6972                	flw	fs2,28(sp)
       a:	2d766373          	csrrsi	t1,0x2d7,12
       e:	7865                	lui	a6,0xffff9
      10:	6d61                	lui	s10,0x18
      12:	6c70                	flw	fa2,92(s0)
      14:	2f65                	jal	7cc <core_list_init+0x64>
      16:	65726f63          	bltu	tp,s7,674 <core_bench_list+0x228>
      1a:	616d                	addi	sp,sp,240
      1c:	6b72                	flw	fs6,28(sp)
      1e:	746e652f          	0x746e652f
      22:	7972                	flw	fs2,60(sp)
      24:	532e                	lw	t1,232(sp)
      26:	2f00                	fld	fs0,24(a4)
      28:	72616873          	csrrsi	a6,0x726,2
      2c:	6465                	lui	s0,0x19
      2e:	7369722f          	0x7369722f
      32:	652d7663          	bgeu	s10,s2,67e <core_bench_list+0x232>
      36:	6178                	flw	fa4,68(a0)
      38:	706d                	c.lui	zero,0xffffb
      3a:	656c                	flw	fa1,76(a0)
      3c:	726f632f          	0x726f632f
      40:	6d65                	lui	s10,0x19
      42:	7261                	lui	tp,0xffff8
      44:	75622f6b          	0x75622f6b
      48:	6c69                	lui	s8,0x1a
      4a:	0064                	addi	s1,sp,12
      4c:	20554e47          	fmsub.s	ft8,fa0,ft5,ft4,rmm
      50:	5341                	li	t1,-16
      52:	3220                	fld	fs0,96(a2)
      54:	332e                	fld	ft6,232(sp)
      56:	0035                	c.nop	13
      58:	7469                	lui	s0,0xffffa
      5a:	6d65                	lui	s10,0x19
      5c:	6d5f 646f 6669      	0x6669646f6d5f
      62:	6569                	lui	a0,0x1a
      64:	0064                	addi	s1,sp,12
      66:	696c                	flw	fa1,84(a0)
      68:	685f7473          	csrrci	s0,0x685,30
      6c:	6165                	addi	sp,sp,112
      6e:	5f64                	lw	s1,124(a4)
      70:	696c0073          	0x696c0073
      74:	685f7473          	csrrci	s0,0x685,30
      78:	6165                	addi	sp,sp,112
      7a:	0064                	addi	s1,sp,12
      7c:	6966                	flw	fs2,88(sp)
      7e:	646e                	flw	fs0,216(sp)
      80:	6e5f 6d75 7300      	0x73006d756e5f
      86:	6f68                	flw	fa0,92(a4)
      88:	7472                	flw	fs0,60(sp)
      8a:	6920                	flw	fs0,80(a0)
      8c:	746e                	flw	fs0,248(sp)
      8e:	6300                	flw	fs0,0(a4)
      90:	5f65726f          	jal	tp,57686 <RAM_SIZE+0x47686>
      94:	696c                	flw	fa1,84(a0)
      96:	695f7473          	csrrci	s0,0x695,30
      9a:	736e                	flw	ft6,248(sp)
      9c:	7265                	lui	tp,0xffff9
      9e:	5f74                	lw	a3,124(a4)
      a0:	656e                	flw	fa0,216(sp)
      a2:	61640077          	0x61640077
      a6:	7074                	flw	fa3,100(s0)
      a8:	7461                	lui	s0,0xffff8
      aa:	6400                	flw	fs0,8(s0)
      ac:	7974                	flw	fa3,116(a0)
      ae:	6570                	flw	fa2,76(a0)
      b0:	6500                	flw	fs0,8(a0)
      b2:	5f65                	li	t5,-7
      b4:	3875                	jal	fffff970 <RAM_SIZE+0xfffef970>
      b6:	6300                	flw	fs0,0(a4)
      b8:	5f65726f          	jal	tp,576ae <RAM_SIZE+0x476ae>
      bc:	6562                	flw	fa0,24(sp)
      be:	636e                	flw	ft6,216(sp)
      c0:	5f68                	lw	a0,124(a4)
      c2:	696c                	flw	fa1,84(a0)
{
      c4:	4d007473          	csrrci	s0,0x4d0,0
      c8:	5441                	li	s0,-16
      ca:	4144                	lw	s1,4(a0)
      cc:	0054                	addi	a3,sp,4
      ce:	6565                	lui	a0,0x19
      d0:	735f 3233 6400      	0x64003233735f
      d6:	7461                	lui	s0,0xffff8
      d8:	6261                	lui	tp,0x18
      da:	6f6c                	flw	fa1,92(a4)
    ee_s16 data = *pdata;
      dc:	70006b63          	bltu	zero,zero,7f2 <core_list_init+0x8a>
      e0:	7265                	lui	tp,0xffff9
      e2:	695f 6574 006d      	0x6d6574695f
          & 1;  /* bit 7 indicates if the function result has been cached */
      e8:	6572                	flw	fa0,28(sp)
      ea:	7674                	flw	fa3,108(a2)
      ec:	6c61                	lui	s8,0x18
      ee:	2f00                	fld	fs0,24(a4)
      f0:	72616873          	csrrsi	a6,0x726,2
      f4:	6465                	lui	s0,0x19
      f6:	7369722f          	0x7369722f
      fa:	652d7663          	bgeu	s10,s2,746 <core_bench_list+0x2fa>
    ee_u8  optype
      fe:	6178                	flw	fa4,68(a0)
     100:	706d                	c.lui	zero,0xffffb
     102:	656c                	flw	fa1,76(a0)
    if (optype) /* if cached, use cache */
     104:	726f632f          	0x726f632f
     108:	6d65                	lui	s10,0x19
     10a:	7261                	lui	tp,0xffff8
        return (data & 0x007f);
     10c:	6f632f6b          	0x6f632f6b
     110:	6572                	flw	fa0,28(sp)
     112:	6c5f 7369 5f74      	0x5f7473696c5f
     118:	6f6a                	flw	ft10,152(sp)
     11a:	6e69                	lui	t3,0x1a
     11c:	632e                	flw	ft6,200(sp)
     11e:	5200                	lw	s0,32(a2)
        ee_s16 flag = data & 0x7; /* bits 0-2 is type of function to perform */
     120:	5345                	li	t1,-15
     122:	4c55                	li	s8,21
     124:	5354                	lw	a3,36(a4)
     126:	535f 6300 706f      	0x706f6300535f
               & 0xf);       /* bits 3-6 is specific data for the operation */
     12c:	5f79                	li	t5,-2
     12e:	6e69                	lui	t3,0x1a
     130:	6f66                	flw	ft10,88(sp)
     132:	6300                	flw	fs0,0(a4)
     134:	5f65726f          	jal	tp,5772a <RAM_SIZE+0x4772a>
     138:	6572                	flw	fa0,28(sp)
     13a:	746c7573          	csrrci	a0,0x746,24
        ee_s16 dtype
     13e:	6e690073          	0x6e690073
     142:	74726573          	csrrsi	a0,0x747,4
        dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
     146:	705f 696f 746e      	0x746e696f705f
     14c:	7300                	flw	fs0,32(a4)
     14e:	6565                	lui	a0,0x19
     150:	3164                	fld	fs1,224(a0)
     152:	7300                	flw	fs0,32(a4)
     154:	6565                	lui	a0,0x19
     156:	3264                	fld	fs1,224(a2)
     158:	7300                	flw	fs0,32(a4)
     15a:	6565                	lui	a0,0x19
     15c:	3364                	fld	fs1,224(a4)
     15e:	6300                	flw	fs0,0(a4)
        switch (flag)
     160:	6372                	flw	ft6,28(sp)
     162:	696c                	flw	fa1,84(a0)
     164:	6d007473          	csrrci	s0,0x6d0,0
     168:	7369                	lui	t1,0xffffa
     16a:	00646573          	csrrsi	a0,0x6,8
     16e:	6176                	flw	ft2,92(sp)
     170:	316c                	fld	fa1,224(a0)
     172:	6600                	flw	fs0,8(a2)
                if (dtype < 0x22) /* set min period for bit corruption */
     174:	6e69                	lui	t3,0x1a
     176:	6564                	flw	fs1,76(a0)
     178:	0072                	c.slli	zero,0x1c
     17a:	6e69                	lui	t3,0x1a
     17c:	657a6973          	csrrsi	s2,0x657,20
                    dtype = 0x22;
     180:	7000                	flw	fs0,32(s0)
     182:	6174726f          	jal	tp,47f98 <RAM_SIZE+0x37f98>
     186:	6c62                	flw	fs8,24(sp)
                retval = core_bench_state(res->size,
     188:	5f65                	li	t5,-7
     18a:	6469                	lui	s0,0x1a
     18c:	6c00                	flw	fs0,24(s0)
     18e:	20676e6f          	jal	t3,76394 <RAM_SIZE+0x66394>
                                          res->memblock[3],
     192:	6f6c                	flw	fa1,92(a4)
     194:	676e                	flw	fa4,216(sp)
     196:	6920                	flw	fs0,80(a0)
                retval = core_bench_state(res->size,
     198:	746e                	flw	fs0,248(sp)
     19a:	6300                	flw	fs0,0(a4)
     19c:	5f65726f          	jal	tp,57792 <RAM_SIZE+0x47792>
     1a0:	696c                	flw	fa1,84(a0)
     1a2:	755f7473          	csrrci	s0,0x755,30
     1a6:	646e                	flw	fs0,216(sp)
     1a8:	65725f6f          	jal	t5,25ffe <RAM_SIZE+0x15ffe>
     1ac:	6f6d                	lui	t5,0x1b
     1ae:	6576                	flw	fa0,92(sp)
     1b0:	6c00                	flw	fs0,24(s0)
     1b2:	7369                	lui	t1,0xffffa
     1b4:	5f74                	lw	a3,124(a4)
     1b6:	00706d63          	bltu	zero,t2,1d0 <calc_func+0x10c>
     1ba:	73637263          	bgeu	t1,s6,8de <HEAP_SIZE+0xde>
     1be:	6174                	flw	fa3,68(a0)
                if (res->crcstate == 0)
     1c0:	6574                	flw	fa3,76(a0)
     1c2:	6300                	flw	fs0,0(a4)
     1c4:	6c61                	lui	s8,0x18
     1c6:	75665f63          	bge	a2,s6,924 <HEAP_SIZE+0x124>
     1ca:	636e                	flw	ft6,216(sp)
                    res->crcstate = retval;
     1cc:	6e00                	flw	fs0,24(a2)
     1ce:	656d                	lui	a0,0x1b
     1d0:	6772                	flw	fa4,28(sp)
     1d2:	7365                	lui	t1,0xffff9
     1d4:	6c00                	flw	fs0,24(s0)
     1d6:	7369                	lui	t1,0xffffa
                break;
     1d8:	5f74                	lw	a3,124(a4)
     1da:	6164                	flw	fs1,68(a0)
                retval = core_bench_matrix(&(res->mat), dtype, res->crc);
     1dc:	6174                	flw	fa3,68(a0)
     1de:	735f 6300 706d      	0x706d6300735f
     1e4:	695f 7864 6d00      	0x6d007864695f
     1ea:	6d65                	lui	s10,0x19
     1ec:	6c62                	flw	fs8,24(sp)
     1ee:	5f6b636f          	jal	t1,b67e4 <RAM_SIZE+0xa67e4>
     1f2:	6e65                	lui	t3,0x19
     1f4:	0064                	addi	s1,sp,12
     1f6:	6565                	lui	a0,0x19
     1f8:	755f 3631 6300      	0x63003631755f
     1fe:	5f65726f          	jal	tp,577f4 <RAM_SIZE+0x477f4>
     202:	696c                	flw	fa1,84(a0)
     204:	695f7473          	csrrci	s0,0x695,30
                if (res->crcmatrix == 0)
     208:	696e                	flw	fs2,216(sp)
     20a:	0074                	addi	a3,sp,12
     20c:	6174                	flw	fa3,68(a0)
     20e:	6c69                	lui	s8,0x1a
     210:	7500                	flw	fs0,40(a0)
     212:	736e                	flw	ft6,248(sp)
                    res->crcmatrix = retval;
     214:	6769                	lui	a4,0x1a
     216:	656e                	flw	fa0,216(sp)
     218:	2064                	fld	fs1,192(s0)
     21a:	72616863          	bltu	sp,t1,94a <HEAP_SIZE+0x14a>
     21e:	6300                	flw	fs0,0(a4)
                break;
     220:	5f65726f          	jal	tp,57816 <RAM_SIZE+0x47816>
                retval = data;
     224:	696c                	flw	fa1,84(a0)
     226:	665f7473          	csrrci	s0,0x665,30
     22a:	6e69                	lui	t3,0x1a
                break;
     22c:	0064                	addi	s1,sp,12
     22e:	616d                	addi	sp,sp,240
                break;
     230:	5f74                	lw	a3,124(a4)
     232:	6170                	flw	fa2,68(a0)
     234:	6172                	flw	ft2,28(sp)
     236:	736d                	lui	t1,0xffffb
                break;
     238:	6c00                	flw	fs0,24(s0)
     23a:	7369                	lui	t1,0xffffa
        res->crc = crcu16(retval, res->crc);
     23c:	5f74                	lw	a3,124(a4)
     23e:	6164                	flw	fs1,68(a0)
     240:	6174                	flw	fa3,68(a0)
     242:	7600                	flw	fs0,40(a2)
     244:	6c61                	lui	s8,0x18
     246:	0032                	c.slli	zero,0xc
     248:	6874                	flw	fa3,84(s0)
     24a:	7369                	lui	t1,0xffffa
     24c:	665f 6e69 0064      	0x646e69665f
     252:	6c62                	flw	fs8,24(sp)
     254:	7a69736b          	0x7a69736b
     258:	0065                	c.nop	25
     25a:	726f6873          	csrrsi	a6,0x726,30
     25e:	2074                	fld	fa3,192(s0)
     260:	6e75                	lui	t3,0x1d
     262:	6e676973          	csrrsi	s2,0x6e6,14
        retval &= 0x007f;
     266:	6465                	lui	s0,0x19
     268:	6920                	flw	fs0,80(a0)
     26a:	746e                	flw	fs0,248(sp)
     26c:	7000                	flw	fs0,32(s0)
     26e:	6164                	flw	fs1,68(a0)
        *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
     270:	6174                	flw	fa3,68(a0)
     272:	4d00                	lw	s0,24(a0)
     274:	5441                	li	s0,-16
     276:	4552                	lw	a0,20(sp)
     278:	73710053          	0x73710053
     27c:	7a69                	lui	s4,0xffffa
     27e:	0065                	c.nop	25
     280:	65726f63          	bltu	tp,s7,8de <HEAP_SIZE+0xde>
     284:	6c5f 7369 5f74      	0x5f7473696c5f
     28a:	6572                	flw	fa0,28(sp)
     28c:	6f6d                	lui	t5,0x1b
     28e:	6576                	flw	fa0,92(sp)
     290:	6300                	flw	fs0,0(a4)
     292:	5f65726f          	jal	tp,57888 <RAM_SIZE+0x47888>
     296:	696c                	flw	fa1,84(a0)
     298:	6d5f7473          	csrrci	s0,0x6d5,30
     29c:	7265                	lui	tp,0xffff9
     29e:	6f736567          	0x6f736567
     2a2:	7472                	flw	fs0,60(sp)
        return retval;
     2a4:	6900                	flw	fs0,16(a0)
     2a6:	6574                	flw	fa3,76(a0)
}
     2a8:	5f6d                	li	t5,-5
     2aa:	6572                	flw	fa0,28(sp)
     2ac:	6f6d                	lui	t5,0x1b
     2ae:	6576                	flw	fa0,92(sp)
     2b0:	0064                	addi	s1,sp,12
     2b2:	6565                	lui	a0,0x19
     2b4:	735f 3631 6400      	0x64003631735f
     2ba:	7461                	lui	s0,0xffff8
{
     2bc:	6261                	lui	tp,0x18
     2be:	6f6c                	flw	fa1,92(a4)
     2c0:	655f6b63          	bltu	t5,s5,916 <HEAP_SIZE+0x116>
     2c4:	646e                	flw	fs0,216(sp)
     2c6:	6300                	flw	fs0,0(a4)
     2c8:	706d                	c.lui	zero,0xffffb
     2ca:	635f 6d6f 6c70      	0x6c706d6f635f
     2d0:	7865                	lui	a6,0xffff9
     2d2:	4700                	lw	s0,8(a4)
     2d4:	554e                	lw	a0,240(sp)
     2d6:	4320                	lw	s0,64(a4)
    ee_s16 val1 = calc_func(&(a->data16), res);
     2d8:	3131                	jal	fffffee4 <RAM_SIZE+0xfffefee4>
     2da:	3120                	fld	fs0,96(a0)
     2dc:	2e30                	fld	fa2,88(a2)
     2de:	2e32                	fld	ft8,264(sp)
     2e0:	2030                	fld	fa2,64(s0)
     2e2:	6d2d                	lui	s10,0xb
     2e4:	7261                	lui	tp,0xffff8
     2e6:	723d6863          	bltu	s10,gp,a16 <HEAP_SIZE+0x216>
     2ea:	3376                	fld	ft6,376(sp)
     2ec:	6932                	flw	fs2,12(sp)
     2ee:	2d20                	fld	fs0,88(a0)
    ee_s16 val2 = calc_func(&(b->data16), res);
     2f0:	616d                	addi	sp,sp,240
     2f2:	6962                	flw	fs2,24(sp)
     2f4:	693d                	lui	s2,0xf
     2f6:	706c                	flw	fa1,100(s0)
     2f8:	2d203233          	0x2d203233
     2fc:	616d                	addi	sp,sp,240
     2fe:	6372                	flw	ft6,28(sp)
     300:	3d68                	fld	fa0,248(a0)
     302:	7672                	flw	fa2,60(sp)
     304:	20693233          	0x20693233
    return val1 - val2;
     308:	672d                	lui	a4,0xb
     30a:	2d20                	fld	fs0,88(a0)
     30c:	3d647473          	csrrci	s0,0x3d6,8
     310:	31756e67          	0x31756e67
}
     314:	0031                	c.nop	12
     316:	6d637263          	bgeu	t1,s6,9da <HEAP_SIZE+0x1da>
     31a:	7461                	lui	s0,0xffff8
     31c:	6972                	flw	fs2,28(sp)
     31e:	0078                	addi	a4,sp,12
     320:	6f66                	flw	ft10,88(sp)
     322:	6e75                	lui	t3,0x1d
     324:	0064                	addi	s1,sp,12
     326:	6966                	flw	fs2,88(sp)
{
     328:	646e                	flw	fs0,216(sp)
     32a:	7265                	lui	tp,0xffff9
     32c:	695f 7864 7000      	0x70007864695f
     332:	0074726f          	jal	tp,47b38 <RAM_SIZE+0x37b38>
     336:	7865                	lui	a6,0xffff9
     338:	6365                	lui	t1,0x19
     33a:	4f430073          	0x4f430073
     33e:	4552                	lw	a0,20(sp)
    if (res == NULL)
     340:	505f 524f 4154      	0x4154524f505f
     346:	4c42                	lw	s8,16(sp)
        a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16 >> 8));
     348:	5f45                	li	t5,-15
     34a:	61640053          	0x61640053
     34e:	6174                	flw	fa3,68(a0)
     350:	3631                	jal	fffffe5c <RAM_SIZE+0xfffefe5c>
     352:	7300                	flw	fs0,32(a4)
     354:	6565                	lui	a0,0x19
     356:	0064                	addi	s1,sp,12
     358:	7469                	lui	s0,0xffffa
     35a:	7265                	lui	tp,0xffff9
     35c:	7461                	lui	s0,0xffff8
     35e:	6f69                	lui	t5,0x1a
     360:	736e                	flw	ft6,248(sp)
     362:	4d00                	lw	s0,24(a0)
     364:	5441                	li	s0,-16
     366:	505f 5241 4d41      	0x4d415241505f
     36c:	00535f53          	fadd.s	ft10,ft6,ft5,unknown
     370:	65726f63          	bltu	tp,s7,9ce <HEAP_SIZE+0x1ce>
     374:	6c5f 7369 5f74      	0x5f7473696c5f
     37a:	6572                	flw	fa0,28(sp)
     37c:	6576                	flw	fa0,92(sp)
     37e:	7372                	flw	ft6,60(sp)
     380:	0065                	c.nop	25
     382:	656e                	flw	fa0,216(sp)
     384:	65746977          	0x65746977
     388:	006d                	c.nop	27
     38a:	6572                	flw	fa0,28(sp)
     38c:	6f6d                	lui	t5,0x1b
     38e:	6576                	flw	fa0,92(sp)
     390:	0072                	c.slli	zero,0x1c
     392:	7370                	flw	fa2,100(a4)
        b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16 >> 8));
     394:	7a69                	lui	s4,0xffffa
     396:	0065                	c.nop	25
     398:	6565                	lui	a0,0x19
     39a:	755f 3233 6300      	0x63003233755f
     3a0:	5f65726f          	jal	tp,57996 <RAM_SIZE+0x47996>
     3a4:	6f70                	flw	fa2,92(a4)
     3a6:	7472                	flw	fs0,60(sp)
     3a8:	6261                	lui	tp,0x18
     3aa:	656c                	flw	fa1,76(a0)
     3ac:	6f00                	flw	fs0,24(a4)
     3ae:	7470                	flw	fa2,108(s0)
     3b0:	7079                	c.lui	zero,0xffffe
     3b2:	0065                	c.nop	25
     3b4:	7266                	flw	ft4,120(sp)
     3b6:	6e006d6f          	jal	s10,6a96 <memset+0x52>
     3ba:	7865                	lui	a6,0xffff9
     3bc:	0074                	addi	a3,sp,12
     3be:	74617473          	csrrci	s0,0x746,2
     3c2:	5f65                	li	t5,-7
     3c4:	776f6e6b          	0x776f6e6b
     3c8:	5f6e                	lw	t5,248(sp)
     3ca:	00637263          	bgeu	t1,t1,3ce <cmp_idx+0xa6>
     3ce:	7469                	lui	s0,0xffffa
     3d0:	7265                	lui	tp,0xffff9
     3d2:	7461                	lui	s0,0xffff8
     3d4:	0065                	c.nop	25
     3d6:	6f74                	flw	fa3,92(a4)
     3d8:	6174                	flw	fa3,68(a0)
     3da:	5f6c                	lw	a1,124(a4)
     3dc:	7265                	lui	tp,0xffff9
     3de:	6f72                	flw	ft10,28(sp)
    return a->idx - b->idx;
     3e0:	7372                	flw	ft6,60(sp)
     3e2:	6d00                	flw	fs0,24(a0)
     3e4:	6961                	lui	s2,0x18
     3e6:	006e                	c.slli	zero,0x1b
     3e8:	6564                	flw	fs1,76(a0)
     3ea:	6166                	flw	ft2,88(sp)
     3ec:	6c75                	lui	s8,0x1d
     3ee:	5f74                	lw	a3,124(a4)
     3f0:	756e                	flw	fa0,248(sp)
     3f2:	5f6d                	li	t5,-5
     3f4:	746e6f63          	bltu	t3,t1,b52 <core_list_remove+0x3a>
}
     3f8:	7865                	lui	a6,0xffff9
     3fa:	7374                	flw	fa3,100(a4)
     3fc:	6d00                	flw	fs0,24(a0)
     3fe:	6d65                	lui	s10,0x19
     400:	6e5f 6d61 0065      	0x656d616e5f
     406:	7261                	lui	tp,0xffff8
{
     408:	73006367          	0x73006367
     40c:	6365                	lui	t1,0x19
     40e:	61705f73          	csrrwi	t5,0x617,0
     412:	64657373          	csrrci	t1,0x646,10
     416:	6c00                	flw	fs0,24(s0)
     418:	7369                	lui	t1,0xffffa
     41a:	5f74                	lw	a3,124(a4)
    to->data16 = from->data16;
     41c:	776f6e6b          	0x776f6e6b
     420:	5f6e                	lw	t5,248(sp)
     422:	00637263          	bgeu	t1,t1,426 <copy_info+0x1e>
     426:	64656573          	csrrsi	a0,0x646,10
     42a:	00637263          	bgeu	t1,t1,42e <copy_info+0x26>
    to->idx    = from->idx;
     42e:	6168732f          	vamoandei64.v	zero,(a6),v22,v6,v0.t
     432:	6572                	flw	fa0,28(sp)
     434:	2f64                	fld	fs1,216(a4)
     436:	6972                	flw	fs2,28(sp)
     438:	2d766373          	csrrsi	t1,0x2d7,12
}
     43c:	7865                	lui	a6,0xffff9
     43e:	6d61                	lui	s10,0x18
     440:	6c70                	flw	fa2,92(s0)
     442:	2f65                	jal	bfa <core_list_find+0x2>
     444:	65726f63          	bltu	tp,s7,aa2 <core_list_insert_new+0x76>
     448:	616d                	addi	sp,sp,240
     44a:	6b72                	flw	fs6,28(sp)
{
     44c:	726f632f          	0x726f632f
     450:	5f65                	li	t5,-7
     452:	616d                	addi	sp,sp,240
     454:	6e69                	lui	t3,0x1a
     456:	632e                	flw	ft6,200(sp)
     458:	7300                	flw	fs0,32(a4)
     45a:	6365                	lui	t1,0x19
     45c:	65725f73          	csrrwi	t5,0x657,4
     460:	0074                	addi	a3,sp,12
     462:	776f6e6b          	0x776f6e6b
     466:	5f6e                	lw	t5,248(sp)
    ee_u16     retval = 0;
     468:	6469                	lui	s0,0x1a
     46a:	6100                	flw	fs0,0(a0)
    ee_u16     found = 0, missed = 0;
     46c:	6772                	flw	fa4,28(sp)
     46e:	0076                	c.slli	zero,0x1d
     470:	616d                	addi	sp,sp,240
     472:	7274                	flw	fa3,100(a2)
    list_head *list     = res->list;
     474:	7869                	lui	a6,0xffffa
     476:	6b5f 6f6e 6e77      	0x6e776f6e6b5f
     47c:	635f 6372 7400      	0x74006372635f
    ee_s16     find_num = res->seed3;
     482:	6c61746f          	jal	s0,17b48 <RAM_SIZE+0x7b48>
     486:	745f 6d69 0065      	0x656d69745f
    info.idx = finder_idx;
     48c:	63617473          	csrrci	s0,0x636,2
     490:	656d5f6b          	0x656d5f6b
    for (i = 0; i < find_num; i++)
     494:	626d                	lui	tp,0x1b
     496:	6f6c                	flw	fa1,92(a4)
     498:	6e006b63          	bltu	zero,zero,b8e <core_list_undo_remove+0x2>
        info.data16 = (i & 0xff);
     49c:	6d75                	lui	s10,0x1d
     49e:	615f 676c 726f      	0x726f676c615f
     4a4:	7469                	lui	s0,0xffffa
     4a6:	6d68                	flw	fa0,92(a0)
     4a8:	72700073          	0x72700073
     4ac:	7365                	lui	t1,0xffff9
     4ae:	4300                	lw	s0,0(a4)
        this_find   = core_list_find(list, &info);
     4b0:	5f45524f          	fnmadd.q	ft4,fa0,fs4,fa1,unknown
     4b4:	4954                	lw	a3,20(a0)
     4b6:	00534b43          	fmadd.s	fs6,ft6,ft5,ft0,rmm
     4ba:	6964                	flw	fs1,84(a0)
     4bc:	6976                	flw	fs2,92(sp)
     4be:	00726f73          	csrrsi	t5,0x7,4
     4c2:	616d                	addi	sp,sp,240
        list        = core_list_reverse(list);
     4c4:	7274                	flw	fa3,100(a2)
     4c6:	7869                	lui	a6,0xffffa
     4c8:	735f 6d75 6d00      	0x6d006d75735f
     4ce:	7461                	lui	s0,0xffff8
        if (this_find == NULL)
     4d0:	6972                	flw	fs2,28(sp)
     4d2:	5f78                	lw	a4,124(a4)
     4d4:	756d                	lui	a0,0xffffb
     4d6:	5f6c                	lw	a1,124(a4)
            missed++;
     4d8:	616d                	addi	sp,sp,240
     4da:	7274                	flw	fa3,100(a2)
     4dc:	7869                	lui	a6,0xffffa
     4de:	625f 7469 7865      	0x78657469625f
            retval += (list->next->info->data16 >> 8) & 1;
     4e4:	7274                	flw	fa3,100(a2)
     4e6:	6361                	lui	t1,0x18
     4e8:	0074                	addi	a3,sp,12
     4ea:	656d                	lui	a0,0x1b
     4ec:	626d                	lui	tp,0x1b
     4ee:	6b6c                	flw	fa1,84(a4)
     4f0:	6300                	flw	fs0,0(a4)
     4f2:	5f65726f          	jal	tp,57ae8 <RAM_SIZE+0x47ae8>
     4f6:	6e69                	lui	t3,0x1a
     4f8:	7469                	lui	s0,0xffffa
     4fa:	6d5f 7461 6972      	0x697274616d5f
     500:	0078                	addi	a4,sp,12
     502:	616d                	addi	sp,sp,240
     504:	7274                	flw	fa3,100(a2)
     506:	7869                	lui	a6,0xffffa
     508:	745f 7365 0074      	0x747365745f
     50e:	65726f63          	bltu	tp,s7,b6c <core_list_remove+0x54>
     512:	625f 6e65 6863      	0x68636e65625f
     518:	6d5f 7461 6972      	0x697274616d5f
     51e:	0078                	addi	a4,sp,12
     520:	70696c63          	bltu	s2,t1,c38 <core_list_find+0x40>
            found++;
     524:	6176                	flw	ft2,92(sp)
     526:	006c                	addi	a1,sp,12
     528:	616d                	addi	sp,sp,240
     52a:	7274                	flw	fa3,100(a2)
     52c:	7869                	lui	a6,0xffffa
     52e:	6d5f 6c75 765f      	0x765f6c756d5f
            if (this_find->info->data16 & 0x1) /* use found value */
     534:	6365                	lui	t1,0x19
     536:	0074                	addi	a3,sp,12
     538:	616d                	addi	sp,sp,240
     53a:	7274                	flw	fa3,100(a2)
     53c:	7869                	lui	a6,0xffffa
     53e:	615f 6464 635f      	0x635f6464615f
     544:	74736e6f          	jal	t3,3748a <RAM_SIZE+0x2748a>
     548:	6500                	flw	fs0,8(a0)
     54a:	5f65                	li	t5,-7
                retval += (this_find->info->data16 >> 9) & 1;
     54c:	7470                	flw	fa2,108(s0)
     54e:	5f72                	lw	t5,60(sp)
     550:	6e69                	lui	t3,0x1a
     552:	0074                	addi	a3,sp,12
     554:	616d                	addi	sp,sp,240
     556:	7274                	flw	fa3,100(a2)
     558:	7869                	lui	a6,0xffffa
     55a:	6d5f 6c75 635f      	0x635f6c756d5f
     560:	74736e6f          	jal	t3,374a6 <RAM_SIZE+0x274a6>
     564:	6d00                	flw	fs0,24(a0)
     566:	7461                	lui	s0,0xffff8
     568:	6972                	flw	fs2,28(sp)
     56a:	5f78                	lw	a4,124(a4)
     56c:	756d                	lui	a0,0xffffb
     56e:	5f6c                	lw	a1,124(a4)
     570:	616d                	addi	sp,sp,240
     572:	7274                	flw	fa3,100(a2)
     574:	7869                	lui	a6,0xffffa
     576:	6f00                	flw	fs0,24(a4)
     578:	6472                	flw	fs0,28(sp)
     57a:	7265                	lui	tp,0xffff9
     57c:	7000                	flw	fs0,32(s0)
     57e:	6572                	flw	fa0,28(sp)
     580:	0076                	c.slli	zero,0x1d
     582:	6168732f          	vamoandei64.v	zero,(a6),v22,v6,v0.t
            if (this_find->next != NULL)
     586:	6572                	flw	fa0,28(sp)
     588:	2f64                	fld	fs1,216(a4)
     58a:	6972                	flw	fs2,28(sp)
     58c:	2d766373          	csrrsi	t1,0x2d7,12
                finder          = this_find->next;
     590:	7865                	lui	a6,0xffff9
     592:	6d61                	lui	s10,0x18
     594:	6c70                	flw	fa2,92(s0)
     596:	2f65                	jal	d4e <core_list_mergesort+0x56>
     598:	65726f63          	bltu	tp,s7,bf6 <core_list_undo_remove+0x6a>
                this_find->next = finder->next;
     59c:	616d                	addi	sp,sp,240
     59e:	6b72                	flw	fs6,28(sp)
     5a0:	726f632f          	0x726f632f
     5a4:	5f65                	li	t5,-7
     5a6:	616d                	addi	sp,sp,240
     5a8:	7274                	flw	fa3,100(a2)
     5aa:	7869                	lui	a6,0xffffa
                finder->next    = list->next;
     5ac:	632e                	flw	ft6,200(sp)
     5ae:	7400                	flw	fs0,40(s0)
     5b0:	6369                	lui	t1,0x1a
     5b2:	2f00736b          	0x2f00736b
     5b6:	72616873          	csrrsi	a6,0x726,2
     5ba:	6465                	lui	s0,0x19
                list->next      = finder;
     5bc:	7369722f          	0x7369722f
     5c0:	652d7663          	bgeu	s10,s2,c0c <core_list_find+0x14>
     5c4:	6178                	flw	fa4,68(a0)
     5c6:	706d                	c.lui	zero,0xffffb
        if (info.idx >= 0)
     5c8:	656c                	flw	fa1,76(a0)
     5ca:	726f632f          	0x726f632f
     5ce:	6d65                	lui	s10,0x19
            info.idx++;
     5d0:	7261                	lui	tp,0xffff8
     5d2:	6f632f6b          	0x6f632f6b
     5d6:	6572                	flw	fa0,28(sp)
     5d8:	705f 726f 6d74      	0x6d74726f705f
     5de:	2e65                	jal	996 <HEAP_SIZE+0x196>
     5e0:	6c650063          	beq	a0,t1,ca0 <core_list_reverse+0x4>
     5e4:	7061                	c.lui	zero,0xffff8
     5e6:	00646573          	csrrsi	a0,0x6,8
     5ea:	6974                	flw	fa3,84(a0)
     5ec:	656d                	lui	a0,0x1b
     5ee:	695f 5f6e 6573      	0x65735f6e695f
    for (i = 0; i < find_num; i++)
     5f4:	73007363          	bgeu	zero,a6,d1a <core_list_mergesort+0x22>
     5f8:	6565                	lui	a0,0x19
     5fa:	3364                	fld	fs1,224(a4)
     5fc:	765f 6c6f 7461      	0x74616c6f765f
     602:	6c69                	lui	s8,0x1a
     604:	0065                	c.nop	25
     606:	6162                	flw	ft2,24(sp)
     608:	6572                	flw	fa0,28(sp)
     60a:	6f62                	flw	ft10,24(sp)
     60c:	656e                	flw	fa0,216(sp)
     60e:	6c635f73          	csrrwi	t5,0x6c6,6
     612:	006b636f          	jal	t1,b6618 <RAM_SIZE+0xa6618>
     616:	6f70                	flw	fa2,92(a4)
     618:	7472                	flw	fs0,60(sp)
     61a:	6261                	lui	tp,0x18
    retval += found * 4 - missed;
     61c:	656c                	flw	fa1,76(a0)
     61e:	695f 696e 0074      	0x74696e695f
     624:	706f7473          	csrrci	s0,0x706,30
     628:	745f 6d69 0065      	0x656d69745f
     62e:	6f70                	flw	fa2,92(a4)
     630:	7472                	flw	fs0,60(sp)
     632:	6261                	lui	tp,0x18
     634:	656c                	flw	fa1,76(a0)
     636:	665f 6e69 0069      	0x696e69665f
     63c:	72617473          	csrrci	s0,0x726,2
     640:	5f74                	lw	a3,124(a4)
     642:	6974                	flw	fa3,84(a0)
     644:	656d                	lui	a0,0x1b
     646:	765f 6c61 7400      	0x74006c61765f
    if (finder_idx > 0)
     64c:	6d69                	lui	s10,0x1a
     64e:	5f65                	li	t5,-7
        list = core_list_mergesort(list, cmp_complex, res);
     650:	7470                	flw	fa2,108(s0)
     652:	0072                	c.slli	zero,0x1c
     654:	64656573          	csrrsi	a0,0x646,10
     658:	5f34                	lw	a3,120(a4)
     65a:	6f76                	flw	ft10,92(sp)
     65c:	616c                	flw	fa1,68(a0)
     65e:	6974                	flw	fa3,84(a0)
     660:	656c                	flw	fa1,76(a0)
     662:	7300                	flw	fs0,32(a4)
    remover = core_list_remove(list->next);
     664:	6174                	flw	fa3,68(a0)
     666:	7472                	flw	fs0,60(sp)
     668:	745f 6d69 0065      	0x656d69745f
     66e:	706f7473          	csrrci	s0,0x706,30
     672:	745f 6d69 5f65      	0x5f656d69745f
    finder = core_list_find(list, &info);
     678:	6176                	flw	ft2,92(sp)
     67a:	006c                	addi	a1,sp,12
     67c:	64656573          	csrrsi	a0,0x646,10
     680:	5f32                	lw	t5,44(sp)
     682:	6f76                	flw	ft10,92(sp)
     684:	616c                	flw	fa1,68(a0)
     686:	6974                	flw	fa3,84(a0)
     688:	656c                	flw	fa1,76(a0)
     68a:	6700                	flw	fs0,8(a4)
    if (!finder)
     68c:	7465                	lui	s0,0xffff9
     68e:	745f 6d69 0065      	0x656d69745f
        finder = list->next;
     694:	64656573          	csrrsi	a0,0x646,10
     698:	5f31                	li	t5,-20
     69a:	6f76                	flw	ft10,92(sp)
     69c:	616c                	flw	fa1,68(a0)
     69e:	6974                	flw	fa3,84(a0)
    while (finder)
     6a0:	656c                	flw	fa1,76(a0)
     6a2:	7300                	flw	fs0,32(a4)
        retval = crc16(list->info->data16, retval);
     6a4:	6565                	lui	a0,0x19
     6a6:	3564                	fld	fs1,232(a0)
     6a8:	765f 6c6f 7461      	0x74616c6f765f
     6ae:	6c69                	lui	s8,0x1a
     6b0:	0065                	c.nop	25
     6b2:	45524f43          	fmadd.h	ft10,ft4,fs5,fs0,rmm
     6b6:	535f 4154 4554      	0x45544154535f
     6bc:	6300                	flw	fs0,0(a4)
     6be:	5f65726f          	jal	tp,57cb4 <RAM_SIZE+0x47cb4>
     6c2:	74617473          	csrrci	s0,0x746,2
     6c6:	5f65                	li	t5,-7
        finder = finder->next;
     6c8:	7274                	flw	fa3,100(a2)
     6ca:	6e61                	lui	t3,0x18
     6cc:	69746973          	csrrsi	s2,0x697,8
     6d0:	66006e6f          	jal	t3,6d30 <__call_exitprocs+0xa8>
    while (finder)
     6d4:	6f6c                	flw	fa1,92(a4)
     6d6:	7461                	lui	s0,0xffff8
     6d8:	6170                	flw	fa2,68(a0)
     6da:	0074                	addi	a3,sp,12
    remover = core_list_undo_remove(remover, list->next);
     6dc:	65726f63          	bltu	tp,s7,d3a <core_list_mergesort+0x42>
     6e0:	695f 696e 5f74      	0x5f74696e695f
     6e6:	74617473          	csrrci	s0,0x746,2
     6ea:	0065                	c.nop	25
     6ec:	6e69                	lui	t3,0x1a
     6ee:	7074                	flw	fa3,100(s0)
     6f0:	7461                	lui	s0,0xffff8
     6f2:	4300                	lw	s0,0(a4)
    list = core_list_mergesort(list, cmp_idx, NULL);
     6f4:	5f45524f          	fnmadd.q	ft4,fa0,fs4,fa1,unknown
     6f8:	45494353          	0x45494353
     6fc:	544e                	lw	s0,240(sp)
     6fe:	4649                	li	a2,18
     700:	4349                	li	t1,18
     702:	6600                	flw	fs0,8(a2)
     704:	6e69                	lui	t3,0x1a
     706:	6c61                	lui	s8,0x18
    finder = list->next;
     708:	635f 756f 746e      	0x746e756f635f
     70e:	65650073          	0x65650073
     712:	695f 6473 6769      	0x67696473695f
        retval = crc16(list->info->data16, retval);
     718:	7469                	lui	s0,0xffffa
     71a:	6300                	flw	fs0,0(a4)
     71c:	5f65726f          	jal	tp,57d12 <RAM_SIZE+0x47d12>
     720:	6562                	flw	fa0,24(sp)
     722:	636e                	flw	ft6,216(sp)
     724:	5f68                	lw	a0,124(a4)
     726:	74617473          	csrrci	s0,0x746,2
     72a:	0065                	c.nop	25
     72c:	7274                	flw	fa3,100(a2)
     72e:	6361                	lui	t1,0x18
     730:	6f635f6b          	0x6f635f6b
     734:	6e75                	lui	t3,0x1d
     736:	7374                	flw	fa3,100(a4)
     738:	7400                	flw	fs0,40(s0)
     73a:	6172                	flw	ft2,28(sp)
        finder = finder->next;
     73c:	736e                	flw	ft6,248(sp)
     73e:	7469                	lui	s0,0xffffa
     740:	6f69                	lui	t5,0x1a
     742:	5f6e                	lw	t5,248(sp)
     744:	6e756f63          	bltu	a0,t2,e42 <core_list_mergesort+0x14a>
    while (finder)
     748:	0074                	addi	a3,sp,12
     74a:	45524f43          	fmadd.h	ft10,ft4,fs5,fs0,rmm
     74e:	455f 5058 4e4f      	0x4e4f5058455f
}
     754:	4e45                	li	t3,17
     756:	0054                	addi	a3,sp,4
     758:	6e69                	lui	t3,0x1a
     75a:	00727473          	csrrci	s0,0x7,4
     75e:	45524f43          	fmadd.h	ft10,ft4,fs5,fs0,rmm
     762:	495f 544e 4300      	0x4300544e495f
{
     768:	5f45524f          	fnmadd.q	ft4,fa0,fs4,fa1,unknown
     76c:	52415453          	0x52415453
     770:	0054                	addi	a3,sp,4
     772:	7366                	flw	ft6,120(sp)
     774:	6174                	flw	fa3,68(a0)
     776:	6574                	flw	fa3,76(a0)
     778:	6500                	flw	fs0,8(a0)
     77a:	7272                	flw	ft4,60(sp)
     77c:	6170                	flw	fa2,68(a0)
     77e:	0074                	addi	a3,sp,12
     780:	45524f43          	fmadd.h	ft10,ft4,fs5,fs0,rmm
     784:	495f 564e 4c41      	0x4c41564e495f
    ee_u32 per_item = 16 + sizeof(struct list_data_s);
     78a:	4449                	li	s0,18
     78c:	4300                	lw	s0,0(a4)
     78e:	5f45524f          	fnmadd.q	ft4,fa0,fs4,fa1,unknown
    ee_u32 size     = (blksize / per_item)
     792:	4c46                	lw	s8,80(sp)
     794:	0054414f          	fnmadd.s	ft2,fs0,ft5,ft0,rmm
     798:	454e                	lw	a0,208(sp)
     79a:	5458                	lw	a4,44(s0)
     79c:	535f 4d59 4f42      	0x4f424d59535f
     7a2:	004c                	addi	a1,sp,4
     7a4:	554e                	lw	a0,240(sp)
     7a6:	5f4d                	li	t5,-13
    list_head *memblock_end  = memblock + size;
     7a8:	45524f43          	fmadd.h	ft10,ft4,fs5,fs0,rmm
     7ac:	535f 4154 4554      	0x45544154535f
     7b2:	4f430053          	0x4f430053
     7b6:	4552                	lw	a0,20(sp)
     7b8:	535f 0031 4f43      	0x4f430031535f
    list_data *datablock     = (list_data *)(memblock_end);
     7be:	4552                	lw	a0,20(sp)
     7c0:	535f 0032 6373      	0x63730032535f
    list_data *datablock_end = datablock + size;
     7c6:	7069                	c.lui	zero,0xffffa
     7c8:	7461                	lui	s0,0xffff8
     7ca:	2f00                	fld	fs0,24(a4)
     7cc:	72616873          	csrrsi	a6,0x726,2
     7d0:	6465                	lui	s0,0x19
     7d2:	7369722f          	0x7369722f
     7d6:	652d7663          	bgeu	s10,s2,e22 <core_list_mergesort+0x12a>
    list_head *finder, *list = memblock;
     7da:	6178                	flw	fa4,68(a0)
     7dc:	706d                	c.lui	zero,0xffffb
     7de:	656c                	flw	fa1,76(a0)
    list->next         = NULL;
     7e0:	726f632f          	0x726f632f
     7e4:	6d65                	lui	s10,0x19
     7e6:	7261                	lui	tp,0xffff8
    list->info         = datablock;
     7e8:	6f632f6b          	0x6f632f6b
     7ec:	6572                	flw	fa0,28(sp)
     7ee:	735f 6174 6574      	0x65746174735f
    list->info->idx    = 0x0000;
     7f4:	632e                	flw	ft6,200(sp)
     7f6:	7400                	flw	fs0,40(s0)
     7f8:	6c61746f          	jal	s0,17ebe <RAM_SIZE+0x7ebe>
     7fc:	7300                	flw	fs0,32(a4)
     7fe:	6574                	flw	fa3,76(a0)
    list->info->data16 = (ee_s16)0x8080;
     800:	0070                	addi	a2,sp,12
     802:	75637263          	bgeu	t1,s6,f46 <iterate+0x46>
     806:	3631                	jal	312 <cmp_complex+0x56>
     808:	6300                	flw	fs0,0(a4)
     80a:	6372                	flw	ft6,28(sp)
     80c:	3375                	jal	5b8 <core_bench_list+0x16c>
     80e:	0032                	c.slli	zero,0xc
     810:	72726163          	bltu	tp,t2,f32 <iterate+0x32>
    memblock++;
     814:	0079                	c.nop	30
     816:	6168732f          	vamoandei64.v	zero,(a6),v22,v6,v0.t
     81a:	6572                	flw	fa0,28(sp)
     81c:	2f64                	fld	fs1,216(a4)
     81e:	6972                	flw	fs2,28(sp)
    datablock++;
     820:	2d766373          	csrrsi	t1,0x2d7,12
     824:	7865                	lui	a6,0xffff9
     826:	6d61                	lui	s10,0x18
     828:	6c70                	flw	fa2,92(s0)
     82a:	2f65                	jal	fe2 <iterate+0xe2>
    info.idx    = 0x7fff;
     82c:	65726f63          	bltu	tp,s7,e8a <core_list_mergesort+0x192>
     830:	616d                	addi	sp,sp,240
     832:	6b72                	flw	fs6,28(sp)
     834:	726f632f          	0x726f632f
    info.data16 = (ee_s16)0xffff;
     838:	5f65                	li	t5,-7
     83a:	7475                	lui	s0,0xffffd
     83c:	6c69                	lui	s8,0x1a
     83e:	632e                	flw	ft6,200(sp)
    core_list_insert_new(
     840:	6700                	flw	fs0,8(a4)
     842:	7465                	lui	s0,0xffff9
     844:	735f 6565 5f64      	0x5f646565735f
     84a:	6e003233          	0x6e003233
     84e:	7765                	lui	a4,0xffff9
     850:	6176                	flw	ft2,92(sp)
     852:	006c                	addi	a1,sp,12
     854:	75637263          	bgeu	t1,s6,f98 <iterate+0x98>
     858:	0038                	addi	a4,sp,8
     85a:	63656863          	bltu	a0,s6,e8a <core_list_mergesort+0x192>
    for (i = 0; i < size; i++)
     85e:	61645f6b          	0x61645f6b
     862:	6174                	flw	fa3,68(a0)
        ee_u16 datpat = ((ee_u16)(seed ^ i) & 0xf);
     864:	745f 7079 7365      	0x73657079745f
     86a:	6300                	flw	fs0,0(a4)
     86c:	6372                	flw	ft6,28(sp)
     86e:	3631                	jal	37a <cmp_idx+0x52>
     870:	6400                	flw	fs0,8(s0)
     872:	6365                	lui	t1,0x19
     874:	7470                	flw	fa2,108(s0)
     876:	2f00                	fld	fs0,24(a4)
     878:	72616873          	csrrsi	a6,0x726,2
     87c:	6465                	lui	s0,0x19
     87e:	7369722f          	0x7369722f
     882:	652d7663          	bgeu	s10,s2,ece <core_list_mergesort+0x1d6>
     886:	6178                	flw	fa4,68(a0)
            = (datpat << 3) | (i & 0x7); /* alternate between algorithms */
     888:	706d                	c.lui	zero,0xffffb
     88a:	656c                	flw	fa1,76(a0)
     88c:	726f632f          	0x726f632f
     890:	6d65                	lui	s10,0x19
     892:	7261                	lui	tp,0xffff8
     894:	76632f6b          	0x76632f6b
     898:	2e74                	fld	fa3,216(a2)
     89a:	63660063          	beq	a2,s6,eba <core_list_mergesort+0x1c2>
     89e:	7476                	flw	fs0,124(sp)
     8a0:	7562                	flw	fa0,56(sp)
     8a2:	0066                	c.slli	zero,0x19
     8a4:	6365                	lui	t1,0x19
     8a6:	7476                	flw	fs0,124(sp)
     8a8:	7562                	flw	fa0,56(sp)
     8aa:	0066                	c.slli	zero,0x19
     8ac:	6365                	lui	t1,0x19
     8ae:	7476                	flw	fs0,124(sp)
        ee_u16 dat
     8b0:	4300                	lw	s0,0(a4)
     8b2:	5456                	lw	s0,116(sp)
     8b4:	5542                	lw	a0,48(sp)
     8b6:	0046                	c.slli	zero,0x11
        info.data16 = (dat << 8) | dat;  /* fill the data with actual data and
     8b8:	646e                	flw	fs0,216(sp)
     8ba:	6769                	lui	a4,0x1a
     8bc:	7469                	lui	s0,0xffffa
     8be:	6f6c0073          	0x6f6c0073
     8c2:	676e                	flw	fa4,216(sp)
     8c4:	6c20                	flw	fs0,88(s0)
     8c6:	20676e6f          	jal	t3,76acc <RAM_SIZE+0x66acc>
     8ca:	6e75                	lui	t3,0x1d
     8cc:	6e676973          	csrrsi	s2,0x6e6,14
     8d0:	6465                	lui	s0,0x19
     8d2:	6920                	flw	fs0,80(a0)
     8d4:	746e                	flw	fs0,248(sp)
     8d6:	6500                	flw	fs0,8(a0)
     8d8:	6c66                	flw	fs8,88(sp)
     8da:	6761                	lui	a4,0x18
        core_list_insert_new(
     8dc:	6600                	flw	fs0,8(a2)
     8de:	00747663          	bgeu	s0,t2,8ea <HEAP_SIZE+0xea>
     8e2:	6e676973          	csrrsi	s2,0x6e6,14
     8e6:	7300                	flw	fs0,32(a4)
     8e8:	7274                	flw	fa3,100(a2)
     8ea:	6c6e                	flw	fs8,216(sp)
     8ec:	6e65                	lui	t3,0x19
     8ee:	6500                	flw	fs0,8(a0)
     8f0:	5f65                	li	t5,-7
     8f2:	7270                	flw	fa2,100(a2)
     8f4:	6e69                	lui	t3,0x1a
     8f6:	6674                	flw	fa3,76(a2)
    for (i = 0; i < size; i++)
     8f8:	6600                	flw	fs0,8(a2)
     8fa:	6569                	lui	a0,0x1a
     8fc:	646c                	flw	fa1,76(s0)
     8fe:	775f 6469 6874      	0x68746469775f
     904:	7200                	flw	fs0,32(a2)
     906:	7065                	c.lui	zero,0xffff9
     908:	6165                	addi	sp,sp,112
     90a:	0074                	addi	a3,sp,12
     90c:	6175                	addi	sp,sp,368
     90e:	7472                	flw	fs0,60(sp)
    finder = list->next;
     910:	6500                	flw	fs0,8(a0)
     912:	6461                	lui	s0,0x18
     914:	7264                	flw	fs1,100(a2)
     916:	7500                	flw	fs0,40(a0)
     918:	7070                	flw	fa2,100(s0)
     91a:	7265                	lui	tp,0xffff9
    i      = 1;
     91c:	645f 6769 7469      	0x74696769645f
     922:	6c660073          	0x6c660073
    while (finder->next != NULL)
     926:	6761                	lui	a4,0x18
        if (i < size / 5) /* first 20% of the list in order */
     928:	732f0073          	0x732f0073
     92c:	6168                	flw	fa0,68(a0)
     92e:	6572                	flw	fa0,28(sp)
     930:	2f64                	fld	fs1,216(a4)
     932:	6972                	flw	fs2,28(sp)
     934:	2d766373          	csrrsi	t1,0x2d7,12
     938:	7865                	lui	a6,0xffff9
     93a:	6d61                	lui	s10,0x18
     93c:	6c70                	flw	fa2,92(s0)
     93e:	2f65                	jal	10f6 <main+0xe6>
     940:	65726f63          	bltu	tp,s7,f9e <iterate+0x9e>
     944:	616d                	addi	sp,sp,240
     946:	6b72                	flw	fs6,28(sp)
            finder->info->idx = i++;
     948:	5f65652f          	0x5f65652f
     94c:	7270                	flw	fa2,100(a2)
     94e:	6e69                	lui	t3,0x1a
     950:	6674                	flw	fa3,76(a2)
     952:	632e                	flw	ft6,200(sp)
     954:	6100                	flw	fs0,0(a0)
     956:	6772                	flw	fa4,28(sp)
     958:	61690073          	0x61690073
     95c:	6464                	flw	fs1,76(s0)
     95e:	0072                	c.slli	zero,0x1c
     960:	5f5f 7562 6c69      	0x6c6975625f5f
     966:	6974                	flw	fa3,84(a0)
     968:	5f6e                	lw	t5,248(sp)
     96a:	6176                	flw	ft2,92(sp)
            ee_u16 pat = (ee_u16)(i++ ^ seed); /* get a pseudo random number */
     96c:	6c5f 7369 0074      	0x7473696c5f
     972:	6565                	lui	a0,0x19
     974:	735f 7a69 5f65      	0x5f657a69735f
     97a:	0074                	addi	a3,sp,12
     97c:	7571                	lui	a0,0xffffc
     97e:	6c61                	lui	s8,0x18
     980:	6669                	lui	a2,0x1a
     982:	6569                	lui	a0,0x1a
     984:	0072                	c.slli	zero,0x1c
     986:	70696b73          	csrrsi	s6,0x706,18
     98a:	615f 6f74 0069      	0x696f74615f
                                & (((i & 0x07) << 8)
     990:	5f5f 6e67 6375      	0x63756e675f5f
     996:	765f 5f61 696c      	0x696c5f61765f
     99c:	65007473          	csrrci	s0,0x650,0
     9a0:	5f65                	li	t5,-7
     9a2:	7376                	flw	ft6,124(sp)
     9a4:	7270                	flw	fa2,100(a2)
     9a6:	6e69                	lui	t3,0x1a
     9a8:	6674                	flw	fa3,76(a2)
     9aa:	7500                	flw	fs0,40(a0)
     9ac:	7261                	lui	tp,0xffff8
     9ae:	5f74                	lw	a3,124(a4)
                                   | pat); /* make sure the mixed items end up
     9b0:	646e6573          	csrrsi	a0,0x646,28
     9b4:	635f 6168 0072      	0x726168635f
     9ba:	756e                	flw	fa0,248(sp)
     9bc:	626d                	lui	tp,0x1b
     9be:	7265                	lui	tp,0xffff9
                                & (((i & 0x07) << 8)
     9c0:	6200                	flw	fs0,0(a2)
     9c2:	7361                	lui	t1,0xffff8
     9c4:	0065                	c.nop	25
     9c6:	7270                	flw	fa2,100(a2)
            finder->info->idx = 0x3fff
     9c8:	6365                	lui	t1,0x19
     9ca:	7369                	lui	t1,0xffffa
     9cc:	6f69                	lui	t5,0x1a
     9ce:	006e                	c.slli	zero,0x1b
                                & (((i & 0x07) << 8)
     9d0:	32627573          	csrrci	a0,mhpmevent6,4
     9d4:	2e00                	fld	fs0,24(a2)
     9d6:	2f2e                	fld	ft10,200(sp)
     9d8:	2e2e                	fld	ft8,200(sp)
     9da:	2f2e2e2f          	0x2f2e2e2f
     9de:	2e2e                	fld	ft8,200(sp)
     9e0:	2f2e2e2f          	0x2f2e2e2f
            finder->info->idx = 0x3fff
     9e4:	6972                	flw	fs2,28(sp)
     9e6:	2d766373          	csrrsi	t1,0x2d7,12
        finder = finder->next;
     9ea:	2f636367          	0x2f636367
     9ee:	696c                	flw	fa1,84(a0)
     9f0:	6762                	flw	fa4,24(sp)
     9f2:	732f6363          	bltu	t5,s2,1118 <main+0x108>
    while (finder->next != NULL)
     9f6:	2d74666f          	jal	a2,474cc <RAM_SIZE+0x374cc>
     9fa:	7066                	flw	ft0,120(sp)
     9fc:	6464612f          	vamoandei32.v	v2,(s0),v6,v2,v0.t
    list = core_list_mergesort(list, cmp_idx, NULL);
     a00:	6664                	flw	fs1,76(a2)
     a02:	00632e33          	slt	t3,t1,t1
     a06:	5f5f 6461 6464      	0x646464615f5f
     a0c:	3366                	fld	ft6,120(sp)
     a0e:	6600                	flw	fs0,8(a2)
     a10:	6172                	flw	ft2,28(sp)
     a12:	2f003063          	0x2f003063
    return list;
     a16:	7266                	flw	ft4,120(sp)
}
     a18:	6565                	lui	a0,0x19
     a1a:	6f64                	flw	fs1,92(a4)
     a1c:	2d6d                	jal	10d6 <main+0xc6>
     a1e:	6f74                	flw	fa3,92(a4)
     a20:	2f736c6f          	jal	s8,37516 <RAM_SIZE+0x27516>
     a24:	2f6a626f          	jal	tp,a6d1a <RAM_SIZE+0x96d1a>
     a28:	3878                	fld	fa4,240(s0)
     a2a:	5f36                	lw	t5,108(sp)
{
     a2c:	3436                	fld	fs0,360(sp)
     a2e:	6c2d                	lui	s8,0xb
     a30:	6e69                	lui	t3,0x1a
     a32:	7875                	lui	a6,0xffffd
     a34:	632d                	lui	t1,0xb
     a36:	6e65                	lui	t3,0x19
     a38:	6f74                	flw	fa3,92(a4)
     a3a:	622f3673          	csrrc	a2,0x622,t5
     a3e:	6975                	lui	s2,0x1d
     a40:	646c                	flw	fa1,76(s0)
     a42:	7369722f          	0x7369722f
     a46:	34367663          	bgeu	a2,gp,d92 <core_list_mergesort+0x9a>
     a4a:	752d                	lui	a0,0xfffeb
     a4c:	6b6e                	flw	fs6,216(sp)
     a4e:	6f6e                	flw	ft10,216(sp)
     a50:	652d6e77          	0x652d6e77
    if ((*memblock + 1) >= memblock_end)
     a54:	666c                	flw	fa1,76(a2)
     a56:	672d                	lui	a4,0xb
     a58:	622f6363          	bltu	t5,sp,107e <main+0x6e>
     a5c:	6975                	lui	s2,0x1d
     a5e:	646c                	flw	fa1,76(s0)
     a60:	672d                	lui	a4,0xb
     a62:	732d6363          	bltu	s10,s2,1188 <main+0x178>
     a66:	6174                	flw	fa3,68(a0)
        return NULL;
     a68:	2f326567          	0x2f326567
     a6c:	6972                	flw	fs2,28(sp)
     a6e:	36766373          	csrrsi	t1,0x367,12
    if ((*datablock + 1) >= datablock_end)
     a72:	2d34                	fld	fa3,88(a0)
     a74:	6e75                	lui	t3,0x1d
     a76:	776f6e6b          	0x776f6e6b
     a7a:	2d6e                	fld	fs10,216(sp)
     a7c:	6c65                	lui	s8,0x19
     a7e:	2f66                	fld	ft10,88(sp)
     a80:	7672                	flw	fa2,60(sp)
     a82:	2f693233          	0x2f693233
        return NULL;
     a86:	6c69                	lui	s8,0x1a
     a88:	3370                	fld	fa2,224(a4)
     a8a:	2f32                	fld	ft10,264(sp)
    newitem = *memblock;
     a8c:	696c                	flw	fa1,84(a0)
     a8e:	6762                	flw	fa4,24(sp)
     a90:	5f006363          	bltu	zero,a6,1076 <main+0x66>
     a94:	5046                	0x5046
     a96:	505f 4341 5f4b      	0x5f4b4341505f
    (*memblock)++;
     a9c:	4152                	lw	sp,20(sp)
     a9e:	5f325f57          	0x5f325f57
     aa2:	6c66                	flw	fs8,88(sp)
     aa4:	4644006f          	j	40f08 <RAM_SIZE+0x30f08>
     aa8:	7974                	flw	fa3,116(a0)
     aaa:	6570                	flw	fa2,76(a0)
    newitem->next      = insert_point->next;
     aac:	4700                	lw	s0,8(a4)
     aae:	554e                	lw	a0,240(sp)
     ab0:	4320                	lw	s0,64(a4)
     ab2:	3731                	jal	9be <HEAP_SIZE+0x1be>
     ab4:	3120                	fld	fs0,96(a0)
     ab6:	2e30                	fld	fa2,88(a2)
     ab8:	2e32                	fld	ft8,264(sp)
     aba:	2030                	fld	fa2,64(s0)
    insert_point->next = newitem;
     abc:	6d2d                	lui	s10,0xb
     abe:	646f6d63          	bltu	t5,t1,1118 <main+0x108>
     ac2:	6c65                	lui	s8,0x19
     ac4:	6d3d                	lui	s10,0xf
     ac6:	6465                	lui	s0,0x19
    newitem->info = *datablock;
     ac8:	6e61                	lui	t3,0x18
     aca:	2079                	jal	b58 <core_list_remove+0x40>
     acc:	6d2d                	lui	s10,0xb
     ace:	7261                	lui	tp,0xffff8
     ad0:	723d6863          	bltu	s10,gp,1200 <main+0x1f0>
     ad4:	3376                	fld	ft6,376(sp)
     ad6:	6932                	flw	fs2,12(sp)
    (*datablock)++;
     ad8:	2d20                	fld	fs0,88(a0)
     ada:	616d                	addi	sp,sp,240
     adc:	6962                	flw	fs2,24(sp)
     ade:	693d                	lui	s2,0xf
     ae0:	706c                	flw	fa1,100(s0)
     ae2:	2d203233          	0x2d203233
     ae6:	636d                	lui	t1,0x1b
     ae8:	6f6d                	lui	t5,0x1b
     aea:	6564                	flw	fs1,76(a0)
    copy_info(newitem->info, info);
     aec:	3d6c                	fld	fa1,248(a0)
     aee:	656d                	lui	a0,0x1b
     af0:	6164                	flw	fs1,68(a0)
     af2:	796e                	flw	fs2,248(sp)
     af4:	2d20                	fld	fs0,88(a0)
     af6:	616d                	addi	sp,sp,240
     af8:	6372                	flw	ft6,28(sp)
     afa:	3d68                	fld	fa0,248(a0)
     afc:	7672                	flw	fa2,60(sp)
     afe:	20693233          	0x20693233
    return newitem;
     b02:	672d                	lui	a4,0xb
}
     b04:	2d20                	fld	fs0,88(a0)
     b06:	2d20734f          	fnmadd.h	ft6,ft0,fs2,ft5
     b0a:	2d20324f          	fnmadd.h	ft4,ft0,fs2,ft5,rup
     b0e:	2d20734f          	fnmadd.h	ft6,ft0,fs2,ft5
     b12:	6266                	flw	ft4,88(sp)
     b14:	6975                	lui	s2,0x1d
     b16:	646c                	flw	fa1,76(s0)
{
     b18:	6e69                	lui	t3,0x1a
     b1a:	696c2d67          	0x696c2d67
     b1e:	6762                	flw	fa4,24(sp)
     b20:	2d206363          	bltu	zero,s2,de6 <core_list_mergesort+0xee>
     b24:	6e66                	flw	ft8,88(sp)
     b26:	74732d6f          	jal	s10,33a6c <RAM_SIZE+0x23a6c>
    list_head *ret = item->next;
     b2a:	6361                	lui	t1,0x18
     b2c:	72702d6b          	0x72702d6b
     b30:	6365746f          	jal	s0,58166 <RAM_SIZE+0x48166>
    tmp        = item->info;
     b34:	6f74                	flw	fa3,92(a4)
     b36:	2072                	fld	ft0,280(sp)
     b38:	662d                	lui	a2,0xb
     b3a:	6976                	flw	fs2,92(sp)
     b3c:	69626973          	csrrsi	s2,0x696,4
    item->info = ret->info;
     b40:	696c                	flw	fa1,84(a0)
     b42:	7974                	flw	fa3,116(a0)
     b44:	683d                	lui	a6,0xf
     b46:	6469                	lui	s0,0x1a
     b48:	6564                	flw	fs1,76(a0)
     b4a:	006e                	c.slli	zero,0x1b
     b4c:	5f52                	lw	t5,52(sp)
     b4e:	3066                	fld	ft0,120(sp)
    ret->info  = tmp;
     b50:	5f00                	lw	s0,56(a4)
     b52:	5046                	0x5046
     b54:	505f 4341 5f4b      	0x5f4b4341505f
     b5a:	494d4553          	0x494d4553
    item->next = item->next->next;
     b5e:	4152                	lw	sp,20(sp)
     b60:	5f545f57          	0x5f545f57
     b64:	5f410073          	0x5f410073
     b68:	3166                	fld	ft2,120(sp)
     b6a:	7300                	flw	fs0,32(a4)
     b6c:	6275                	lui	tp,0x1d
     b6e:	0031                	c.nop	12
    ret->next  = NULL;
     b70:	665f 7865 7300      	0x73007865665f
     b76:	6275                	lui	tp,0x1d
    return ret;
     b78:	465f0033          	0x465f0033
}
     b7c:	5f50                	lw	a2,60(a4)
     b7e:	4150                	lw	a2,4(a0)
     b80:	535f4b43          	fmadd.d	fs6,ft10,fs5,fa0,rmm
     b84:	4d45                	li	s10,17
     b86:	5249                	li	tp,-14
     b88:	5741                	li	a4,-16
     b8a:	545f 655f 6600      	0x6600655f545f
{
     b90:	6172                	flw	ft2,28(sp)
     b92:	6e003163          	0x6e003163
     b96:	006d726f          	jal	tp,d7b9c <RAM_SIZE+0xc7b9c>
     b9a:	5f41                	li	t5,-16
     b9c:	3066                	fld	ft0,120(sp)
     b9e:	5f00                	lw	s0,56(a4)
    tmp                 = item_removed->info;
     ba0:	5046                	0x5046
     ba2:	555f 504e 4341      	0x4341504e555f
     ba8:	41525f4b          	fnmsub.s	ft10,ft4,fs5,fs0,unknown
    item_removed->info  = item_modified->info;
     bac:	5f325f57          	0x5f325f57
     bb0:	6c66                	flw	fs8,88(sp)
     bb2:	5f42006f          	j	211a6 <RAM_SIZE+0x111a6>
     bb6:	3066                	fld	ft0,120(sp)
     bb8:	4200                	lw	s0,0(a2)
     bba:	665f 0031 465f      	0x465f0031665f
    item_modified->info = tmp;
     bc0:	5f50                	lw	a2,60(a4)
     bc2:	4441                	li	s0,16
     bc4:	5f44                	lw	s1,60(a4)
     bc6:	4e49                	li	t3,18
    item_removed->next  = item_modified->next;
     bc8:	4554                	lw	a3,12(a0)
     bca:	4e52                	lw	t3,20(sp)
     bcc:	4c41                	li	s8,16
     bce:	645f 6669 0066      	0x666669645f
     bd4:	465f 5f50 4150      	0x41505f50465f
    item_modified->next = item_removed;
     bda:	535f4b43          	fmadd.d	fs6,ft10,fs5,fa0,rmm
     bde:	4d45                	li	s10,17
     be0:	5249                	li	tp,-14
     be2:	5741                	li	a4,-16
    return item_removed;
     be4:	695f 5f73 6974      	0x69745f73695f
}
     bea:	796e                	flw	fs2,248(sp)
     bec:	5f00                	lw	s0,56(a4)
     bee:	5046                	0x5046
     bf0:	505f 4341 5f4b      	0x5f4b4341505f
     bf6:	494d4553          	0x494d4553
{
     bfa:	4152                	lw	sp,20(sp)
     bfc:	5f545f57          	0x5f545f57
     c00:	3066                	fld	ft0,120(sp)
     c02:	5f00                	lw	s0,56(a4)
     c04:	5046                	0x5046
     c06:	505f 4341 5f4b      	0x5f4b4341505f
    if (info->idx >= 0)
     c0c:	494d4553          	0x494d4553
     c10:	4152                	lw	sp,20(sp)
     c12:	5f545f57          	0x5f545f57
     c16:	3166                	fld	ft2,120(sp)
        while (list && (list->info->idx != info->idx))
     c18:	5f00                	lw	s0,56(a4)
     c1a:	5046                	0x5046
            list = list->next;
     c1c:	415f 4444 495f      	0x495f4444415f
     c22:	544e                	lw	s0,240(sp)
     c24:	5245                	li	tp,-15
     c26:	414e                	lw	sp,208(sp)
        while (list && (list->info->idx != info->idx))
     c28:	5f4c                	lw	a1,60(a4)
     c2a:	6465                	lui	s0,0x19
     c2c:	6669                	lui	a2,0x1a
     c2e:	0066                	c.slli	zero,0x19
     c30:	465f 5f50 4e55      	0x4e555f50465f
     c36:	4f49                	li	t5,18
     c38:	5f4e                	lw	t5,240(sp)
     c3a:	0044                	addi	s1,sp,4
     c3c:	465f 5f50 4150      	0x41505f50465f
     c42:	535f4b43          	fmadd.d	fs6,ft10,fs5,fa0,rmm
     c46:	4d45                	li	s10,17
        return list;
     c48:	5249                	li	tp,-14
     c4a:	5741                	li	a4,-16
     c4c:	545f 635f 7300      	0x7300635f545f
            list = list->next;
     c52:	6275                	lui	tp,0x1d
     c54:	645f 6e6f 0065      	0x656e6f645f
     c5a:	6461                	lui	s0,0x18
        while (list && ((list->info->data16 & 0xff) != info->data16))
     c5c:	3164                	fld	fs1,224(a0)
     c5e:	6100                	flw	fs0,0(a0)
     c60:	6464                	flw	fs1,76(s0)
     c62:	0032                	c.slli	zero,0xc
     c64:	6461                	lui	s0,0x18
     c66:	3364                	fld	fs1,224(a4)
     c68:	6200                	flw	fs0,0(a2)
     c6a:	7469                	lui	s0,0xffffa
     c6c:	5f5f0073          	0x5f5f0073
     c70:	737a6c63          	bltu	s4,s7,13a8 <main+0x398>
     c74:	3269                	jal	5fe <core_bench_list+0x1b2>
     c76:	6100                	flw	fs0,0(a0)
     c78:	6464                	flw	fs1,76(s0)
     c7a:	645f 6e6f 0065      	0x656e6f645f
     c80:	665f 6d72 5200      	0x52006d72665f
     c86:	665f 0031 465f      	0x465f0031665f
}
     c8c:	5f50                	lw	a2,60(a4)
     c8e:	4150                	lw	a2,4(a0)
     c90:	435f4b43          	fmadd.d	fs6,ft10,fs5,fs0,rmm
     c94:	4e41                	li	t3,16
     c96:	43494e4f          	fnmadd.d	ft8,fs2,fs4,fs0,rmm
     c9a:	4c41                	li	s8,16
{
     c9c:	545f 665f 0030      	0x30665f545f
     ca2:	465f 5f50 4150      	0x41505f50465f
     ca8:	435f4b43          	fmadd.d	fs6,ft10,fs5,fs0,rmm
    list_head *next = NULL, *tmp;
     cac:	4e41                	li	t3,16
     cae:	43494e4f          	fnmadd.d	ft8,fs2,fs4,fs0,rmm
    while (list)
     cb2:	4c41                	li	s8,16
        tmp        = list->next;
     cb4:	545f 665f 0031      	0x31665f545f
     cba:	5f5f 3072 5f00      	0x5f0030725f5f
        list->next = next;
     cc0:	725f 0031 465f      	0x465f0031725f
     cc6:	5f50                	lw	a2,60(a4)
     cc8:	4944                	lw	s1,20(a0)
     cca:	5f56                	lw	t5,116(sp)
        next       = list;
     ccc:	454d                	li	a0,19
     cce:	5441                	li	s0,-16
     cd0:	325f 755f 6964      	0x6964755f325f
        list       = tmp;
     cd6:	5f76                	lw	t5,124(sp)
     cd8:	5f6d                	li	t5,-5
     cda:	3066                	fld	ft0,120(sp)
    while (list)
     cdc:	5f00                	lw	s0,56(a4)
     cde:	715f 0031 5f5f      	0x5f5f0031715f
    return next;
     ce4:	6964                	flw	fs1,84(a0)
     ce6:	6476                	flw	fs0,92(sp)
}
     ce8:	3366                	fld	ft6,120(sp)
     cea:	5500                	lw	s0,40(a0)
     cec:	5748                	lw	a0,44(a4)
     cee:	7974                	flw	fa3,116(a0)
     cf0:	6570                	flw	fa2,76(a0)
     cf2:	5f00                	lw	s0,56(a4)
     cf4:	5046                	0x5046
     cf6:	445f 5649 4d5f      	0x4d5f5649445f
{
     cfc:	4145                	li	sp,17
     cfe:	5f54                	lw	a3,60(a4)
     d00:	5f32                	lw	t5,44(sp)
     d02:	6475                	lui	s0,0x1d
     d04:	7669                	lui	a2,0xffffa
     d06:	6d5f 665f 0031      	0x31665f6d5f
     d0c:	5f5f 706f 0031      	0x31706f5f5f
     d12:	5f5f 3078 5f00      	0x5f0030785f5f
    insize = 1;
     d18:	785f 0032 465f      	0x465f0032785f
        p    = list;
     d1e:	5f50                	lw	a2,60(a4)
     d20:	4e55                	li	t3,21
     d22:	4150                	lw	a2,4(a0)
        list = NULL;
     d24:	435f4b43          	fmadd.d	fs6,ft10,fs5,fs0,rmm
        tail = NULL;
     d28:	4e41                	li	t3,16
     d2a:	43494e4f          	fnmadd.d	ft8,fs2,fs4,fs0,rmm
        nmerges = 0; /* count number of merges we do in this pass */
     d2e:	4c41                	li	s8,16
        while (p)
     d30:	735f 6968 7466      	0x74666968735f
            nmerges++; /* there exists a merge to be done */
     d36:	5f00                	lw	s0,56(a4)
     d38:	5046                	0x5046
     d3a:	445f 5649 4d5f      	0x4d5f5649445f
            q     = p;
     d40:	4145                	li	sp,17
     d42:	5f54                	lw	a3,60(a4)
     d44:	5f32                	lw	t5,44(sp)
     d46:	6475                	lui	s0,0x1d
            psize = 0;
     d48:	7669                	lui	a2,0xffffa
     d4a:	725f 665f 0030      	0x30665f725f
            for (i = 0; i < insize; i++)
     d50:	465f 5f50 4944      	0x49445f50465f
                psize++;
     d56:	5f56                	lw	t5,116(sp)
     d58:	454d                	li	a0,19
     d5a:	5441                	li	s0,-16
     d5c:	325f 755f 6964      	0x6964755f325f
                q = q->next;
     d62:	5f76                	lw	t5,124(sp)
     d64:	5f72                	lw	t5,60(sp)
     d66:	3166                	fld	ft2,120(sp)
     d68:	5f00                	lw	s0,56(a4)
     d6a:	755f 006c 5f5f      	0x5f5f006c755f
                if (!q)
     d70:	6875                	lui	a6,0x1d
     d72:	5f00                	lw	s0,56(a4)
            for (i = 0; i < insize; i++)
     d74:	5046                	0x5046
     d76:	445f 5649 4d5f      	0x4d5f5649445f
     d7c:	4145                	li	sp,17
     d7e:	5f54                	lw	a3,60(a4)
     d80:	5f32                	lw	t5,44(sp)
     d82:	6475                	lui	s0,0x1d
     d84:	7669                	lui	a2,0xffffa
     d86:	6e5f 665f 0030      	0x30665f6e5f
     d8c:	465f 5f50 4944      	0x49445f50465f
                    break;
     d92:	5f56                	lw	t5,116(sp)
            qsize = insize;
     d94:	454d                	li	a0,19
     d96:	5441                	li	s0,-16
     d98:	325f 755f 6964      	0x6964755f325f
            while (psize > 0 || (qsize > 0 && q))
     d9e:	5f76                	lw	t5,124(sp)
                if (psize == 0)
     da0:	5f6e                	lw	t5,248(sp)
     da2:	3166                	fld	ft2,120(sp)
     da4:	5f00                	lw	s0,56(a4)
     da6:	755f 6f6d 7364      	0x73646f6d755f
                    e = q;
     dac:	3369                	jal	b36 <core_list_remove+0x1e>
     dae:	5f00                	lw	s0,56(a4)
                    q = q->next;
     db0:	5046                	0x5046
     db2:	505f 4341 5f4b      	0x5f4b4341505f
     db8:	4f4e4143          	fmadd.q	ft2,ft8,fs4,fs1,rmm
                    qsize--;
     dbc:	494e                	lw	s2,208(sp)
     dbe:	5f4c4143          	fmadd.q	ft2,fs8,fs4,fa1,rmm
     dc2:	5f54                	lw	a3,60(a4)
     dc4:	2e2e0073          	0x2e2e0073
     dc8:	2f2e2e2f          	0x2f2e2e2f
                else if (qsize == 0 || !q)
     dcc:	2e2e                	fld	ft8,200(sp)
     dce:	2f2e2e2f          	0x2f2e2e2f
     dd2:	2e2e                	fld	ft8,200(sp)
     dd4:	7369722f          	0x7369722f
     dd8:	672d7663          	bgeu	s10,s2,1444 <main+0x434>
                    e = p;
     ddc:	6c2f6363          	bltu	t5,sp,14a2 <main+0x492>
     de0:	6269                	lui	tp,0x1a
     de2:	2f636367          	0x2f636367
                    p = p->next;
     de6:	74666f73          	csrrsi	t5,0x746,12
     dea:	662d                	lui	a2,0xb
     dec:	2f70                	fld	fa2,216(a4)
     dee:	6964                	flw	fs1,84(a0)
                    psize--;
     df0:	6476                	flw	fs0,92(sp)
     df2:	3366                	fld	ft6,120(sp)
     df4:	632e                	flw	ft6,200(sp)
     df6:	5f00                	lw	s0,56(a4)
     df8:	5046                	0x5046
     dfa:	505f 4341 5f4b      	0x5f4b4341505f
                else if (cmp(p->info, q->info, res) <= 0)
     e00:	4f4e4143          	fmadd.q	ft2,ft8,fs4,fs1,rmm
     e04:	494e                	lw	s2,208(sp)
     e06:	5f4c4143          	fmadd.q	ft2,fs8,fs4,fa1,rmm
     e0a:	7369                	lui	t1,0xffffa
     e0c:	745f 6e69 0079      	0x796e69745f
     e12:	465f 5f50 4944      	0x49445f50465f
     e18:	5f56                	lw	t5,116(sp)
     e1a:	454d                	li	a0,19
     e1c:	5441                	li	s0,-16
     e1e:	325f 755f 6964      	0x6964755f325f
     e24:	5f76                	lw	t5,124(sp)
     e26:	5f6e                	lw	t5,248(sp)
     e28:	3266                	fld	ft4,120(sp)
     e2a:	5f00                	lw	s0,56(a4)
                    e = p;
     e2c:	6d5f 6c75 6973      	0x69736c756d5f
     e32:	465f0033          	0x465f0033
                    p = p->next;
     e36:	5f50                	lw	a2,60(a4)
     e38:	4150                	lw	a2,4(a0)
     e3a:	435f4b43          	fmadd.d	fs6,ft10,fs5,fs0,rmm
     e3e:	4e41                	li	t3,16
                    psize--;
     e40:	43494e4f          	fnmadd.d	ft8,fs2,fs4,fs0,rmm
     e44:	4c41                	li	s8,16
     e46:	545f 635f 5f00      	0x5f00635f545f
     e4c:	715f 0030 5f5f      	0x5f5f0030715f
                    e = q;
     e52:	3178                	fld	fa4,224(a0)
     e54:	5f00                	lw	s0,56(a4)
     e56:	785f 0033 5f5f      	0x5f5f0033785f
                    q = q->next;
     e5c:	6876                	flw	fa6,92(sp)
     e5e:	5f00                	lw	s0,56(a4)
     e60:	765f 006c 5f5f      	0x5f5f006c765f
                    qsize--;
     e66:	3064                	fld	fs1,224(s0)
     e68:	5f00                	lw	s0,56(a4)
     e6a:	5046                	0x5046
     e6c:	505f 4341 5f4b      	0x5f4b4341505f
                if (tail)
     e72:	4f4e4143          	fmadd.q	ft2,ft8,fs4,fs1,rmm
     e76:	494e                	lw	s2,208(sp)
                    tail->next = e;
     e78:	5f4c4143          	fmadd.q	ft2,fs8,fs4,fa1,rmm
     e7c:	5f54                	lw	a3,60(a4)
     e7e:	0065                	c.nop	25
     e80:	5f5f 3164 5f00      	0x5f0031645f5f
     e86:	755f 6964 7376      	0x73766964755f
                    list = e;
     e8c:	3369                	jal	c16 <core_list_find+0x1e>
     e8e:	5f00                	lw	s0,56(a4)
                tail = e;
     e90:	6f5f 3070 5f00      	0x5f0030706f5f
     e96:	655f 6471 3266      	0x32666471655f
            while (psize > 0 || (qsize > 0 && q))
     e9c:	2e00                	fld	fs0,24(a2)
     e9e:	2f2e                	fld	ft10,200(sp)
     ea0:	2e2e                	fld	ft8,200(sp)
     ea2:	2f2e2e2f          	0x2f2e2e2f
     ea6:	2e2e                	fld	ft8,200(sp)
     ea8:	2f2e2e2f          	0x2f2e2e2f
     eac:	6972                	flw	fs2,28(sp)
     eae:	2d766373          	csrrsi	t1,0x2d7,12
            p = q;
     eb2:	2f636367          	0x2f636367
     eb6:	696c                	flw	fa1,84(a0)
        while (p)
     eb8:	6762                	flw	fa4,24(sp)
     eba:	732f6363          	bltu	t5,s2,15e0 <main+0x5d0>
     ebe:	2d74666f          	jal	a2,47994 <RAM_SIZE+0x37994>
        tail->next = NULL;
     ec2:	7066                	flw	ft0,120(sp)
     ec4:	6471652f          	vamoandei32.v	v10,(sp),v7,v10,v0.t
        if (nmerges <= 1) /* allow for nmerges==0, the empty list case */
     ec8:	3266                	fld	ft4,120(sp)
     eca:	632e                	flw	ft6,200(sp)
     ecc:	5f00                	lw	s0,56(a4)
     ece:	675f 6363 435f      	0x435f6363675f
            return list;
     ed4:	504d                	c.li	zero,-13
     ed6:	7974                	flw	fa3,116(a0)
     ed8:	6570                	flw	fa2,76(a0)
     eda:	5f00                	lw	s0,56(a4)
        insize *= 2;
     edc:	5046                	0x5046
     ede:	495f 5353 4749      	0x47495353495f
     ee4:	414e                	lw	sp,208(sp)
     ee6:	5f4e                	lw	t5,240(sp)
        p    = list;
     ee8:	6572                	flw	fa0,28(sp)
     eea:	0074                	addi	a3,sp,12
}
     eec:	5f5f 6567 6664      	0x666465675f5f
     ef2:	0032                	c.slli	zero,0xc
     ef4:	2e2e                	fld	ft8,200(sp)
     ef6:	2f2e2e2f          	0x2f2e2e2f
     efa:	2e2e                	fld	ft8,200(sp)
     efc:	2f2e2e2f          	0x2f2e2e2f
{
     f00:	2e2e                	fld	ft8,200(sp)
     f02:	7369722f          	0x7369722f
     f06:	672d7663          	bgeu	s10,s2,1572 <main+0x562>
     f0a:	6c2f6363          	bltu	t5,sp,15d0 <main+0x5c0>
     f0e:	6269                	lui	tp,0x1a
     f10:	2f636367          	0x2f636367
    core_results *res        = (core_results *)pres;
     f14:	74666f73          	csrrsi	t5,0x746,12
     f18:	662d                	lui	a2,0xb
     f1a:	2f70                	fld	fa2,216(a4)
    ee_u32        iterations = res->iterations;
     f1c:	66646567          	0x66646567
     f20:	2e32                	fld	ft8,264(sp)
     f22:	465f0063          	beq	t5,t0,1382 <main+0x372>
     f26:	5f50                	lw	a2,60(a4)
    res->crc                 = 0;
     f28:	5f504d43          	fmadd.q	fs10,ft0,fs5,fa1,rmm
     f2c:	7369                	lui	t1,0xffffa
     f2e:	7a5f 7265 5f6f      	0x5f6f72657a5f
    res->crclist             = 0;
     f34:	0078                	addi	a4,sp,12
     f36:	465f 5f50 4d43      	0x4d435f50465f
    res->crcmatrix           = 0;
     f3c:	5f50                	lw	a2,60(a4)
     f3e:	7369                	lui	t1,0xffffa
    res->crcstate            = 0;
     f40:	7a5f 7265 5f6f      	0x5f6f72657a5f
     f46:	0079                	c.nop	30
    for (i = 0; i < iterations; i++)
     f48:	5f5f 656c 6664      	0x6664656c5f5f
     f4e:	0032                	c.slli	zero,0xc
        crc      = core_bench_list(res, 1);
     f50:	2e2e                	fld	ft8,200(sp)
     f52:	2f2e2e2f          	0x2f2e2e2f
     f56:	2e2e                	fld	ft8,200(sp)
     f58:	2f2e2e2f          	0x2f2e2e2f
     f5c:	2e2e                	fld	ft8,200(sp)
     f5e:	7369722f          	0x7369722f
     f62:	672d7663          	bgeu	s10,s2,15ce <main+0x5be>
        res->crc = crcu16(crc, res->crc);
     f66:	6c2f6363          	bltu	t5,sp,162c <main+0x61c>
     f6a:	6269                	lui	tp,0x1a
     f6c:	2f636367          	0x2f636367
     f70:	74666f73          	csrrsi	t5,0x746,12
     f74:	662d                	lui	a2,0xb
     f76:	2f70                	fld	fa2,216(a4)
     f78:	656c                	flw	fa1,76(a0)
     f7a:	6664                	flw	fs1,76(a2)
     f7c:	2e32                	fld	ft8,264(sp)
     f7e:	465f0063          	beq	t5,t0,13de <main+0x3ce>
     f82:	5f50                	lw	a2,60(a4)
     f84:	5246                	lw	tp,112(sp)
     f86:	4341                	li	t1,16
     f88:	535f 5352 5f54      	0x5f545352535f
        crc      = core_bench_list(res, -1);
     f8e:	5f34                	lw	a3,120(a4)
     f90:	70696b73          	csrrsi	s6,0x706,18
     f94:	5f00                	lw	s0,56(a4)
     f96:	5046                	0x5046
     f98:	465f 4152 5f43      	0x5f434152465f
     f9e:	5f535253          	0x5f535253
        res->crc = crcu16(crc, res->crc);
     fa2:	5f34                	lw	a3,120(a4)
     fa4:	63697473          	csrrci	s0,0x636,18
     fa8:	5f00796b          	0x5f00796b
     fac:	5046                	0x5046
     fae:	465f 4152 5f43      	0x5f434152465f
     fb4:	54535253          	0x54535253
     fb8:	345f 645f 776f      	0x776f645f345f
     fbe:	006e                	c.slli	zero,0x1b
     fc0:	465f 5f50 5246      	0x52465f50465f
     fc6:	4341                	li	t1,16
        if (i == 0)
     fc8:	535f 5352 5f54      	0x5f545352535f
     fce:	5f34                	lw	a3,120(a4)
            res->crclist = res->crc;
     fd0:	0069                	c.nop	26
     fd2:	465f 5f50 5246      	0x52465f50465f
     fd8:	4341                	li	t1,16
     fda:	535f 5352 5f54      	0x5f545352535f
    for (i = 0; i < iterations; i++)
     fe0:	5f34                	lw	a3,120(a4)
     fe2:	465f0073          	0x465f0073
     fe6:	5f50                	lw	a2,60(a4)
     fe8:	5246                	lw	tp,112(sp)
     fea:	4341                	li	t1,16
     fec:	535f 5352 5f54      	0x5f545352535f
     ff2:	5f34                	lw	a3,120(a4)
     ff4:	7075                	c.lui	zero,0xffffd
     ff6:	5f00                	lw	s0,56(a4)
    return NULL;
     ff8:	6d5f 6c75 6664      	0x66646c756d5f
}
     ffe:	2e2e0033          	0x2e2e0033
    1002:	2f2e2e2f          	0x2f2e2e2f
    1006:	2e2e                	fld	ft8,200(sp)
    1008:	2f2e2e2f          	0x2f2e2e2f
    100c:	2e2e                	fld	ft8,200(sp)
    100e:	7369722f          	0x7369722f
{
    1012:	672d7663          	bgeu	s10,s2,167e <main+0x66e>
    1016:	6c2f6363          	bltu	t5,sp,16dc <main+0x6cc>
    101a:	6269                	lui	tp,0x1a
    101c:	2f636367          	0x2f636367
    1020:	74666f73          	csrrsi	t5,0x746,12
    1024:	662d                	lui	a2,0xb
    1026:	2f70                	fld	fa2,216(a4)
    int   argc = 0;
    1028:	756d                	lui	a0,0xffffb
    102a:	646c                	flw	fa1,76(s0)
    ee_u16       i, j = 0, num_algorithms = 0;
    102c:	3366                	fld	ft6,120(sp)
    102e:	632e                	flw	ft6,200(sp)
    1030:	5f00                	lw	s0,56(a4)
    1032:	5046                	0x5046
    ee_s16       known_id = -1, total_errors = 0;
    1034:	4d5f 4c55 4d5f      	0x4d5f4c554d5f
    103a:	4145                	li	sp,17
    103c:	5f54                	lw	a3,60(a4)
    103e:	5744                	lw	s1,44(a4)
    ee_u16       seedcrc = 0;
    1040:	325f 775f 6469      	0x6469775f325f
    portable_init(&(results[0].port), &argc, argv);
    1046:	5f65                	li	t5,-7
    1048:	30665f63          	bge	a2,t1,1366 <main+0x356>
    104c:	5f00                	lw	s0,56(a4)
    104e:	5046                	0x5046
    1050:	4d5f 4c55 4d5f      	0x4d5f4c554d5f
    1056:	4145                	li	sp,17
    1058:	5f54                	lw	a3,60(a4)
    105a:	5744                	lw	s1,44(a4)
    105c:	325f 775f 6469      	0x6469775f325f
    1062:	5f65                	li	t5,-7
    results[0].seed1      = get_seed(1);
    1064:	31665f63          	bge	a2,s6,1382 <main+0x372>
    1068:	5f00                	lw	s0,56(a4)
    106a:	465f 5f50 5246      	0x52465f50465f
    1070:	4341                	li	t1,16
    1072:	415f 4444 335f      	0x335f4444415f
    1078:	635f 0032 465f      	0x465f0032635f
    results[0].seed2      = get_seed(2);
    107e:	5f50                	lw	a2,60(a4)
    1080:	554d                	li	a0,-13
    1082:	5f4c                	lw	a1,60(a4)
    1084:	454d                	li	a0,19
    1086:	5441                	li	s0,-16
    1088:	325f 775f 6469      	0x6469775f325f
    108e:	5f65                	li	t5,-7
    1090:	5f7a                	lw	t5,188(sp)
    1092:	0066                	c.slli	zero,0x19
    results[0].seed3      = get_seed(3);
    1094:	5f5f 5046 465f      	0x465f50465f5f
    109a:	4152                	lw	sp,20(sp)
    109c:	44415f43          	fmadd.h	ft10,ft2,ft4,fs0,unknown
    10a0:	5f44                	lw	s1,60(a4)
    10a2:	31635f33          	0x31635f33
    10a6:	5f00                	lw	s0,56(a4)
    10a8:	5046                	0x5046
    10aa:	4d5f 4c55 4d5f      	0x4d5f4c554d5f
    results[0].iterations = get_seed_32(4);
    10b0:	4145                	li	sp,17
    10b2:	5f54                	lw	a3,60(a4)
    10b4:	5744                	lw	s1,44(a4)
    10b6:	325f 775f 6469      	0x6469775f325f
    results[0].execs = get_seed_32(5);
    10bc:	5f65                	li	t5,-7
    10be:	5f62                	lw	t5,56(sp)
    10c0:	3066                	fld	ft0,120(sp)
    10c2:	5f00                	lw	s0,56(a4)
    10c4:	5046                	0x5046
    10c6:	4d5f 4c55 4d5f      	0x4d5f4c554d5f
    if (results[0].execs == 0)
    10cc:	4145                	li	sp,17
    10ce:	5f54                	lw	a3,60(a4)
    10d0:	5744                	lw	s1,44(a4)
    10d2:	325f 775f 6469      	0x6469775f325f
        results[0].execs = ALL_ALGORITHMS_MASK;
    10d8:	5f65                	li	t5,-7
    10da:	5f62                	lw	t5,56(sp)
    if ((results[0].seed1 == 0) && (results[0].seed2 == 0)
    10dc:	3166                	fld	ft2,120(sp)
    10de:	5f00                	lw	s0,56(a4)
    10e0:	5046                	0x5046
    10e2:	545f 5f4f 4e49      	0x4e495f4f545f
    10e8:	5f54                	lw	a3,60(a4)
    10ea:	6e69                	lui	t3,0x1a
        && (results[0].seed3 == 0))
    10ec:	7865                	lui	a6,0xffff9
    10ee:	6361                	lui	t1,0x18
    10f0:	0074                	addi	a3,sp,12
    10f2:	5f5f 6966 6478      	0x647869665f5f
        results[0].seed2 = 0;
    10f8:	7366                	flw	ft6,120(sp)
    10fa:	0069                	c.nop	26
        results[0].seed3 = 0x66;
    10fc:	2e2e                	fld	ft8,200(sp)
    10fe:	2f2e2e2f          	0x2f2e2e2f
    1102:	2e2e                	fld	ft8,200(sp)
    if ((results[0].seed1 == 1) && (results[0].seed2 == 0)
    1104:	2f2e2e2f          	0x2f2e2e2f
    1108:	2e2e                	fld	ft8,200(sp)
    110a:	7369722f          	0x7369722f
    110e:	672d7663          	bgeu	s10,s2,177a <main+0x76a>
    1112:	6c2f6363          	bltu	t5,sp,17d8 <main+0x7c8>
    1116:	6269                	lui	tp,0x1a
        && (results[0].seed3 == 0))
    1118:	2f636367          	0x2f636367
    111c:	74666f73          	csrrsi	t5,0x746,12
        results[0].seed1 = 0x3415;
    1120:	662d                	lui	a2,0xb
    1122:	2f70                	fld	fa2,216(a4)
    1124:	6966                	flw	fs2,88(sp)
    1126:	6478                	flw	fa4,76(s0)
    1128:	7366                	flw	ft6,120(sp)
    112a:	2e69                	jal	14c4 <main+0x4b4>
        results[0].seed2 = 0x3415;
    112c:	53550063          	beq	a0,s5,164c <main+0x63c>
    1130:	7449                	lui	s0,0xffff2
    1132:	7079                	c.lui	zero,0xffffe
    1134:	0065                	c.nop	25
    1136:	2e2e                	fld	ft8,200(sp)
        results[0].seed3 = 0x66;
    1138:	2f2e2e2f          	0x2f2e2e2f
    113c:	2e2e                	fld	ft8,200(sp)
    113e:	2f2e2e2f          	0x2f2e2e2f
for (i = 0; i < MULTITHREAD; i++)
    1142:	2e2e                	fld	ft8,200(sp)
    1144:	7369722f          	0x7369722f
    results[i].memblock[0] = stack_memblock + i * TOTAL_DATA_SIZE;
    1148:	672d7663          	bgeu	s10,s2,17b4 <main+0x7a4>
    114c:	6c2f6363          	bltu	t5,sp,1812 <main+0x802>
    1150:	6269                	lui	tp,0x1a
    1152:	2f636367          	0x2f636367
    1156:	666e6f63          	bltu	t3,t1,17d4 <main+0x7c4>
    115a:	6769                	lui	a4,0x1a
    115c:	7369722f          	0x7369722f
    1160:	6d2f7663          	bgeu	t5,s2,182c <main+0x81c>
    1164:	6c75                	lui	s8,0x1d
    1166:	6964                	flw	fs1,84(a0)
    1168:	00532e33          	slt	t3,t1,t0
    116c:	2e2e                	fld	ft8,200(sp)
    116e:	2f2e2e2f          	0x2f2e2e2f
    1172:	2e2e                	fld	ft8,200(sp)
    1174:	2f2e2e2f          	0x2f2e2e2f
    1178:	2e2e                	fld	ft8,200(sp)
    117a:	7369722f          	0x7369722f
    117e:	672d7663          	bgeu	s10,s2,17ea <main+0x7da>
    1182:	6c2f6363          	bltu	t5,sp,1848 <main+0x838>
    1186:	6269                	lui	tp,0x1a
    1188:	2f636367          	0x2f636367
    118c:	666e6f63          	bltu	t3,t1,180a <main+0x7fa>
    1190:	6769                	lui	a4,0x1a
    1192:	7369722f          	0x7369722f
    1196:	642f7663          	bgeu	t5,sp,17e2 <main+0x7d2>
    119a:	7669                	lui	a2,0xffffa
    results[i].size        = TOTAL_DATA_SIZE;
    119c:	532e                	lw	t1,232(sp)
    119e:	6300                	flw	fs0,0(a4)
    11a0:	6c706d6f          	jal	s10,8066 <impure_data+0x16>
    11a4:	7865                	lui	a6,0xffff9
    11a6:	5f20                	lw	s0,120(a4)
    11a8:	6c46                	flw	fs8,80(sp)
    11aa:	3174616f          	jal	sp,47cc0 <RAM_SIZE+0x37cc0>
    11ae:	0036                	c.slli	zero,0xd
    11b0:	706d6f63          	bltu	s10,t1,18ce <main+0x8be>
    11b4:	656c                	flw	fa1,76(a0)
    11b6:	2078                	fld	fa4,192(s0)
    11b8:	6f6c                	flw	fa1,92(a4)
    11ba:	676e                	flw	fa4,216(sp)
    11bc:	6420                	flw	fs0,72(s0)
    11be:	6c62756f          	jal	a0,28884 <RAM_SIZE+0x18884>
    results[i].seed1       = results[0].seed1;
    11c2:	0065                	c.nop	25
    11c4:	5155                	li	sp,-11
    11c6:	7449                	lui	s0,0xffff2
    11c8:	7079                	c.lui	zero,0xffffe
    11ca:	0065                	c.nop	25
    11cc:	5f5f 6c63 5f7a      	0x5f7a6c635f5f
    11d2:	6174                	flw	fa3,68(a0)
    11d4:	0062                	c.slli	zero,0x18
    11d6:	706d6f63          	bltu	s10,t1,18f4 <main+0x8e4>
    11da:	656c                	flw	fa1,76(a0)
    11dc:	2078                	fld	fa4,192(s0)
    11de:	6c66                	flw	fs8,88(sp)
    11e0:	0074616f          	jal	sp,479e6 <RAM_SIZE+0x379e6>
    results[i].seed2       = results[0].seed2;
    11e4:	2e2e                	fld	ft8,200(sp)
    11e6:	2f2e2e2f          	0x2f2e2e2f
    11ea:	2e2e                	fld	ft8,200(sp)
    11ec:	2f2e2e2f          	0x2f2e2e2f
    11f0:	2e2e                	fld	ft8,200(sp)
    11f2:	7369722f          	0x7369722f
    11f6:	672d7663          	bgeu	s10,s2,1862 <main+0x852>
    11fa:	6c2f6363          	bltu	t5,sp,18c0 <main+0x8b0>
    11fe:	6269                	lui	tp,0x1a
    1200:	2f636367          	0x2f636367
    1204:	696c                	flw	fa1,84(a0)
    1206:	6762                	flw	fa4,24(sp)
    results[i].seed3       = results[0].seed3;
    1208:	2e326363          	bltu	tp,gp,14ee <main+0x4de>
    120c:	5f5f0063          	beq	t5,s5,17ec <main+0x7dc>
    1210:	7278                	flw	fa4,100(a2)
    1212:	6300                	flw	fs0,0(a4)
    1214:	6c706d6f          	jal	s10,80da <impure_data+0x8a>
    1218:	7865                	lui	a6,0xffff9
    121a:	6420                	flw	fs0,72(s0)
    121c:	6c62756f          	jal	a0,288e2 <RAM_SIZE+0x188e2>
    1220:	0065                	c.nop	25
    1222:	2e2e                	fld	ft8,200(sp)
    1224:	2f2e2e2f          	0x2f2e2e2f
    1228:	2e2e                	fld	ft8,200(sp)
    122a:	2f2e2e2f          	0x2f2e2e2f
    results[i].err         = 0;
    122e:	2e2e                	fld	ft8,200(sp)
    1230:	7369722f          	0x7369722f
    1234:	672d7663          	bgeu	s10,s2,18a0 <main+0x890>
    1238:	6c2f6363          	bltu	t5,sp,18fe <main+0x8ee>
    123c:	6269                	lui	tp,0x1a
    123e:	2f636367          	0x2f636367
    1242:	74666f73          	csrrsi	t5,0x746,12
    1246:	662d                	lui	a2,0xb
    1248:	2f70                	fld	fa2,216(a4)
    124a:	64627573          	csrrci	a0,0x646,4
    results[i].execs       = results[0].execs;
    124e:	3366                	fld	ft6,120(sp)
    1250:	632e                	flw	ft6,200(sp)
    1252:	5f00                	lw	s0,56(a4)
    1254:	735f 6275 6664      	0x66646275735f
    125a:	          	add	zero,zero,zero

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
lui     sp,%hi(__stack_top)                                             
   0:	000c                	0xc
   2:	0000                	unimp
addi    sp,sp,%lo(__stack_top)
   4:	ffff                	0xffff
   6:	ffff                	0xffff
jal   zero, _start
   8:	7c010003          	lb	zero,1984(sp) # e031dcc <RAM_SIZE+0xe021dcc>
   c:	0d01                	addi	s10,s10,0
   e:	0002                	c.slli64	zero
  10:	0024                	addi	s1,sp,8
  12:	0000                	unimp
  14:	0000                	unimp
  16:	0000                	unimp
  18:	00c4                	addi	s1,sp,68
  1a:	0000                	unimp
  1c:	01f8                	addi	a4,sp,204
  1e:	0000                	unimp
  20:	0e44                	addi	s1,sp,788
  22:	4830                	lw	a2,80(s0)
  24:	0181                	addi	gp,gp,0
  26:	0288                	addi	a0,sp,320
  28:	0c44                	addi	s1,sp,532
  2a:	0008                	0x8
  2c:	c101dc03          	lhu	s8,-1008(gp) # 83d0 <impure_data+0x380>
  30:	c844                	sw	s1,20(s0)
  32:	020c                	addi	a1,sp,256
  34:	4430                	lw	a2,72(s0)
  36:	000e                	c.slli	zero,0x3
  38:	0024                	addi	s1,sp,8
  3a:	0000                	unimp
  3c:	0000                	unimp
  3e:	0000                	unimp
  40:	02bc                	addi	a5,sp,328
  42:	0000                	unimp
  44:	006c                	addi	a1,sp,12
  46:	0000                	unimp
  48:	0e44                	addi	s1,sp,788
  4a:	4830                	lw	a2,80(s0)
  4c:	0181                	addi	gp,gp,0
  4e:	0288                	addi	a0,sp,320
  50:	0c44                	addi	s1,sp,532
  52:	0008                	0x8
  54:	5002                	0x5002
  56:	44c1                	li	s1,16
  58:	0cc8                	addi	a0,sp,596
  5a:	3002                	fld	ft0,32(sp)
  5c:	0e44                	addi	s1,sp,788
  5e:	0000                	unimp
  60:	0020                	addi	s0,sp,8
  62:	0000                	unimp
  64:	0000                	unimp
  66:	0000                	unimp
  68:	0328                	addi	a0,sp,392
  6a:	0000                	unimp
  6c:	00e0                	addi	s0,sp,76
  6e:	0000                	unimp
  70:	0e44                	addi	s1,sp,788
  72:	4420                	lw	s0,72(s0)
  74:	0188                	addi	a0,sp,192
  76:	0c44                	addi	s1,sp,532
  78:	0008                	0x8
  7a:	cc02                	sw	zero,24(sp)
  7c:	0cc8                	addi	a0,sp,596
  7e:	2002                	fld	ft0,0(sp)
  80:	0e44                	addi	s1,sp,788
  82:	0000                	unimp
  84:	0020                	addi	s0,sp,8
  86:	0000                	unimp
  88:	0000                	unimp
  8a:	0000                	unimp
  8c:	0408                	addi	a0,sp,512
  8e:	0000                	unimp
  90:	0044                	addi	s1,sp,4
  92:	0000                	unimp
  94:	0e44                	addi	s1,sp,788
  96:	4420                	lw	s0,72(s0)
  98:	0188                	addi	a0,sp,192
  9a:	0c44                	addi	s1,sp,532
  9c:	0008                	0x8
  9e:	c870                	sw	a2,84(s0)
  a0:	020c                	addi	a1,sp,256
  a2:	4420                	lw	s0,72(s0)
  a4:	000e                	c.slli	zero,0x3
  a6:	0000                	unimp
  a8:	0024                	addi	s1,sp,8
  aa:	0000                	unimp
  ac:	0000                	unimp
  ae:	0000                	unimp
  b0:	044c                	addi	a1,sp,516
  b2:	0000                	unimp
  b4:	031c                	addi	a5,sp,384
  b6:	0000                	unimp
  b8:	0e44                	addi	s1,sp,788
  ba:	4840                	lw	s0,20(s0)
  bc:	0181                	addi	gp,gp,0
  be:	0288                	addi	a0,sp,320
  c0:	0c44                	addi	s1,sp,532
  c2:	0008                	0x8
{
  c4:	c1030003          	lb	zero,-1008(t1) # 17c10 <RAM_SIZE+0x7c10>
  c8:	c844                	sw	s1,20(s0)
  ca:	020c                	addi	a1,sp,256
  cc:	4440                	lw	s0,12(s0)
  ce:	000e                	c.slli	zero,0x3
  d0:	0024                	addi	s1,sp,8
  d2:	0000                	unimp
  d4:	0000                	unimp
  d6:	0000                	unimp
  d8:	0768                	addi	a0,sp,908
  da:	0000                	unimp
    ee_s16 data = *pdata;
  dc:	02c4                	addi	s1,sp,324
  de:	0000                	unimp
  e0:	0e44                	addi	s1,sp,788
  e2:	4850                	lw	a2,20(s0)
  e4:	0181                	addi	gp,gp,0
  e6:	0288                	addi	a0,sp,320
          & 1;  /* bit 7 indicates if the function result has been cached */
  e8:	0c44                	addi	s1,sp,532
  ea:	0008                	0x8
  ec:	c102a803          	lw	a6,-1008(t0) # 1194fb0 <RAM_SIZE+0x1184fb0>
  f0:	c844                	sw	s1,20(s0)
  f2:	020c                	addi	a1,sp,256
  f4:	4450                	lw	a2,12(s0)
  f6:	000e                	c.slli	zero,0x3
  f8:	0024                	addi	s1,sp,8
  fa:	0000                	unimp
    ee_u8  optype
  fc:	0000                	unimp
  fe:	0000                	unimp
 100:	0a2c                	addi	a1,sp,280
 102:	0000                	unimp
    if (optype) /* if cached, use cache */
 104:	00ec                	addi	a1,sp,76
 106:	0000                	unimp
 108:	0e44                	addi	s1,sp,788
 10a:	4840                	lw	s0,20(s0)
        return (data & 0x007f);
 10c:	0181                	addi	gp,gp,0
 10e:	0288                	addi	a0,sp,320
 110:	0c44                	addi	s1,sp,532
 112:	0008                	0x8
 114:	d002                	sw	zero,32(sp)
 116:	44c1                	li	s1,16
 118:	0cc8                	addi	a0,sp,596
 11a:	4002                	0x4002
 11c:	0e44                	addi	s1,sp,788
 11e:	0000                	unimp
        ee_s16 flag = data & 0x7; /* bits 0-2 is type of function to perform */
 120:	0020                	addi	s0,sp,8
 122:	0000                	unimp
 124:	0000                	unimp
 126:	0000                	unimp
 128:	0b18                	addi	a4,sp,400
 12a:	0000                	unimp
               & 0xf);       /* bits 3-6 is specific data for the operation */
 12c:	0074                	addi	a3,sp,12
 12e:	0000                	unimp
 130:	0e44                	addi	s1,sp,788
 132:	4430                	lw	a2,72(s0)
 134:	0188                	addi	a0,sp,192
 136:	0c44                	addi	s1,sp,532
 138:	0008                	0x8
 13a:	6002                	flw	ft0,0(sp)
        ee_s16 dtype
 13c:	0cc8                	addi	a0,sp,596
 13e:	3002                	fld	ft0,32(sp)
 140:	0e44                	addi	s1,sp,788
 142:	0000                	unimp
        dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
 144:	0020                	addi	s0,sp,8
 146:	0000                	unimp
 148:	0000                	unimp
 14a:	0000                	unimp
 14c:	0b8c                	addi	a1,sp,464
 14e:	0000                	unimp
 150:	006c                	addi	a1,sp,12
 152:	0000                	unimp
 154:	0e44                	addi	s1,sp,788
 156:	4430                	lw	a2,72(s0)
 158:	0188                	addi	a0,sp,192
 15a:	0c44                	addi	s1,sp,532
 15c:	0008                	0x8
 15e:	5802                	lw	a6,32(sp)
        switch (flag)
 160:	0cc8                	addi	a0,sp,596
 162:	3002                	fld	ft0,32(sp)
 164:	0e44                	addi	s1,sp,788
 166:	0000                	unimp
 168:	0020                	addi	s0,sp,8
 16a:	0000                	unimp
 16c:	0000                	unimp
 16e:	0000                	unimp
 170:	0bf8                	addi	a4,sp,476
 172:	0000                	unimp
                if (dtype < 0x22) /* set min period for bit corruption */
 174:	00a4                	addi	s1,sp,72
 176:	0000                	unimp
 178:	0e44                	addi	s1,sp,788
 17a:	4420                	lw	s0,72(s0)
 17c:	0188                	addi	a0,sp,192
 17e:	0c44                	addi	s1,sp,532
                    dtype = 0x22;
 180:	0008                	0x8
 182:	9002                	ebreak
 184:	0cc8                	addi	a0,sp,596
 186:	2002                	fld	ft0,0(sp)
                retval = core_bench_state(res->size,
 188:	0e44                	addi	s1,sp,788
 18a:	0000                	unimp
 18c:	0020                	addi	s0,sp,8
 18e:	0000                	unimp
                                          res->memblock[3],
 190:	0000                	unimp
 192:	0000                	unimp
 194:	0c9c                	addi	a5,sp,592
 196:	0000                	unimp
                retval = core_bench_state(res->size,
 198:	005c                	addi	a5,sp,4
 19a:	0000                	unimp
 19c:	0e44                	addi	s1,sp,788
 19e:	4430                	lw	a2,72(s0)
 1a0:	0188                	addi	a0,sp,192
 1a2:	0c44                	addi	s1,sp,532
 1a4:	0008                	0x8
 1a6:	4802                	lw	a6,0(sp)
 1a8:	0cc8                	addi	a0,sp,596
 1aa:	3002                	fld	ft0,32(sp)
 1ac:	0e44                	addi	s1,sp,788
 1ae:	0000                	unimp
 1b0:	0024                	addi	s1,sp,8
 1b2:	0000                	unimp
 1b4:	0000                	unimp
 1b6:	0000                	unimp
 1b8:	0cf8                	addi	a4,sp,604
 1ba:	0000                	unimp
 1bc:	0208                	addi	a0,sp,256
 1be:	0000                	unimp
                if (res->crcstate == 0)
 1c0:	0e44                	addi	s1,sp,788
 1c2:	4850                	lw	a2,20(s0)
 1c4:	0181                	addi	gp,gp,0
 1c6:	0288                	addi	a0,sp,320
 1c8:	0c44                	addi	s1,sp,532
 1ca:	0008                	0x8
                    res->crcstate = retval;
 1cc:	c101ec03          	0xc101ec03
 1d0:	c844                	sw	s1,20(s0)
 1d2:	020c                	addi	a1,sp,256
 1d4:	4450                	lw	a2,12(s0)
 1d6:	000e                	c.slli	zero,0x3
                break;
 1d8:	000c                	0xc
 1da:	0000                	unimp
                retval = core_bench_matrix(&(res->mat), dtype, res->crc);
 1dc:	ffff                	0xffff
 1de:	ffff                	0xffff
 1e0:	7c010003          	lb	zero,1984(sp)
 1e4:	0d01                	addi	s10,s10,0
 1e6:	0002                	c.slli64	zero
 1e8:	0024                	addi	s1,sp,8
 1ea:	0000                	unimp
 1ec:	01d8                	addi	a4,sp,196
 1ee:	0000                	unimp
 1f0:	0f00                	addi	s0,sp,912
 1f2:	0000                	unimp
 1f4:	0110                	addi	a2,sp,128
 1f6:	0000                	unimp
 1f8:	0e44                	addi	s1,sp,788
 1fa:	4830                	lw	a2,80(s0)
 1fc:	0181                	addi	gp,gp,0
 1fe:	0288                	addi	a0,sp,320
 200:	0c44                	addi	s1,sp,532
 202:	0008                	0x8
 204:	c100f403          	0xc100f403
                if (res->crcmatrix == 0)
 208:	c844                	sw	s1,20(s0)
 20a:	020c                	addi	a1,sp,256
 20c:	4430                	lw	a2,72(s0)
 20e:	000e                	c.slli	zero,0x3
 210:	002c                	addi	a1,sp,8
 212:	0000                	unimp
                    res->crcmatrix = retval;
 214:	01d8                	addi	a4,sp,196
 216:	0000                	unimp
 218:	1010                	addi	a2,sp,32
 21a:	0000                	unimp
 21c:	0f1c                	addi	a5,sp,912
 21e:	0000                	unimp
                break;
 220:	0e44                	addi	s1,sp,788
 222:	0ff0                	addi	a2,sp,988
                retval = data;
 224:	814c                	0x814c
 226:	8801                	andi	s0,s0,0
 228:	8902                	jr	s2
 22a:	080c4403          	lbu	s0,128(s8) # 1d080 <RAM_SIZE+0xd080>
                break;
 22e:	0300                	addi	s0,sp,384
                break;
 230:	0ef4                	addi	a3,sp,860
 232:	020c                	addi	a1,sp,256
 234:	0ff0                	addi	a2,sp,988
 236:	c144                	sw	s1,4(a0)
                break;
 238:	c844                	sw	s1,20(s0)
 23a:	c944                	sw	s1,20(a0)
        res->crc = crcu16(retval, res->crc);
 23c:	0e44                	addi	s1,sp,788
 23e:	0000                	unimp
 240:	000c                	0xc
 242:	0000                	unimp
 244:	ffff                	0xffff
 246:	ffff                	0xffff
 248:	7c010003          	lb	zero,1984(sp)
 24c:	0d01                	addi	s10,s10,0
 24e:	0002                	c.slli64	zero
 250:	0024                	addi	s1,sp,8
 252:	0000                	unimp
 254:	0240                	addi	s0,sp,260
 256:	0000                	unimp
 258:	1f2c                	addi	a1,sp,952
 25a:	0000                	unimp
 25c:	00b4                	addi	a3,sp,72
 25e:	0000                	unimp
 260:	0e44                	addi	s1,sp,788
 262:	4840                	lw	s0,20(s0)
        retval &= 0x007f;
 264:	0181                	addi	gp,gp,0
 266:	0288                	addi	a0,sp,320
 268:	0c44                	addi	s1,sp,532
 26a:	0008                	0x8
 26c:	9802                	jalr	a6
 26e:	44c1                	li	s1,16
        *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
 270:	0cc8                	addi	a0,sp,596
 272:	4002                	0x4002
 274:	0e44                	addi	s1,sp,788
 276:	0000                	unimp
 278:	0024                	addi	s1,sp,8
 27a:	0000                	unimp
 27c:	0240                	addi	s0,sp,260
 27e:	0000                	unimp
 280:	1fe0                	addi	s0,sp,1020
 282:	0000                	unimp
 284:	01b4                	addi	a3,sp,200
 286:	0000                	unimp
 288:	0e44                	addi	s1,sp,788
 28a:	4840                	lw	s0,20(s0)
 28c:	0181                	addi	gp,gp,0
 28e:	0288                	addi	a0,sp,320
 290:	0c44                	addi	s1,sp,532
 292:	0008                	0x8
 294:	c1019803          	lh	a6,-1008(gp) # 83d0 <impure_data+0x380>
 298:	c844                	sw	s1,20(s0)
 29a:	020c                	addi	a1,sp,256
 29c:	4440                	lw	s0,12(s0)
 29e:	000e                	c.slli	zero,0x3
 2a0:	0024                	addi	s1,sp,8
 2a2:	0000                	unimp
        return retval;
 2a4:	0240                	addi	s0,sp,260
 2a6:	0000                	unimp
}
 2a8:	2194                	fld	fa3,0(a1)
 2aa:	0000                	unimp
 2ac:	025c                	addi	a5,sp,260
 2ae:	0000                	unimp
 2b0:	0e44                	addi	s1,sp,788
 2b2:	4840                	lw	s0,20(s0)
 2b4:	0181                	addi	gp,gp,0
 2b6:	0288                	addi	a0,sp,320
 2b8:	0c44                	addi	s1,sp,532
 2ba:	0008                	0x8
{
 2bc:	c1024003          	lbu	zero,-1008(tp) # 19c10 <RAM_SIZE+0x9c10>
 2c0:	c844                	sw	s1,20(s0)
 2c2:	020c                	addi	a1,sp,256
 2c4:	4440                	lw	s0,12(s0)
 2c6:	000e                	c.slli	zero,0x3
 2c8:	0024                	addi	s1,sp,8
 2ca:	0000                	unimp
 2cc:	0240                	addi	s0,sp,260
 2ce:	0000                	unimp
 2d0:	23f0                	fld	fa2,192(a5)
 2d2:	0000                	unimp
 2d4:	0124                	addi	s1,sp,136
 2d6:	0000                	unimp
    ee_s16 val1 = calc_func(&(a->data16), res);
 2d8:	0e44                	addi	s1,sp,788
 2da:	4840                	lw	s0,20(s0)
 2dc:	0181                	addi	gp,gp,0
 2de:	0288                	addi	a0,sp,320
 2e0:	0c44                	addi	s1,sp,532
 2e2:	0008                	0x8
 2e4:	c1010803          	lb	a6,-1008(sp)
 2e8:	c844                	sw	s1,20(s0)
 2ea:	020c                	addi	a1,sp,256
 2ec:	4440                	lw	s0,12(s0)
 2ee:	000e                	c.slli	zero,0x3
    ee_s16 val2 = calc_func(&(b->data16), res);
 2f0:	0030                	addi	a2,sp,8
 2f2:	0000                	unimp
 2f4:	0240                	addi	s0,sp,260
 2f6:	0000                	unimp
 2f8:	2514                	fld	fa3,8(a0)
 2fa:	0000                	unimp
 2fc:	0104                	addi	s1,sp,128
 2fe:	0000                	unimp
 300:	0e44                	addi	s1,sp,788
 302:	5440                	lw	s0,44(s0)
 304:	0181                	addi	gp,gp,0
 306:	0288                	addi	a0,sp,320
    return val1 - val2;
 308:	0389                	addi	t2,t2,2
 30a:	0492                	slli	s1,s1,0x4
 30c:	0c440593          	addi	a1,s0,196 # ffff20c4 <RAM_SIZE+0xfffe20c4>
 310:	0008                	0x8
 312:	d002                	sw	zero,32(sp)
}
 314:	44c1                	li	s1,16
 316:	0cc8                	addi	a0,sp,596
 318:	4002                	0x4002
 31a:	c944                	sw	s1,20(a0)
 31c:	d244                	sw	s1,36(a2)
 31e:	d344                	sw	s1,36(a4)
 320:	0e44                	addi	s1,sp,788
 322:	0000                	unimp
 324:	0028                	addi	a0,sp,8
 326:	0000                	unimp
{
 328:	0240                	addi	s0,sp,260
 32a:	0000                	unimp
 32c:	2618                	fld	fa4,8(a2)
 32e:	0000                	unimp
 330:	00f8                	addi	a4,sp,76
 332:	0000                	unimp
 334:	0e44                	addi	s1,sp,788
 336:	4c30                	lw	a2,88(s0)
 338:	0181                	addi	gp,gp,0
 33a:	0288                	addi	a0,sp,320
 33c:	0389                	addi	t2,t2,2
 33e:	0c44                	addi	s1,sp,532
    if (res == NULL)
 340:	0008                	0x8
 342:	d402                	sw	zero,40(sp)
 344:	44c1                	li	s1,16
 346:	0cc8                	addi	a0,sp,596
        a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16 >> 8));
 348:	3002                	fld	ft0,32(sp)
 34a:	c944                	sw	s1,20(a0)
 34c:	0e44                	addi	s1,sp,788
 34e:	0000                	unimp
 350:	0028                	addi	a0,sp,8
 352:	0000                	unimp
 354:	0240                	addi	s0,sp,260
 356:	0000                	unimp
 358:	2710                	fld	fa2,8(a4)
 35a:	0000                	unimp
 35c:	0118                	addi	a4,sp,128
 35e:	0000                	unimp
 360:	0e44                	addi	s1,sp,788
 362:	4c30                	lw	a2,88(s0)
 364:	0181                	addi	gp,gp,0
 366:	0288                	addi	a0,sp,320
 368:	0389                	addi	t2,t2,2
 36a:	0c44                	addi	s1,sp,532
 36c:	0008                	0x8
 36e:	f402                	fsw	ft0,40(sp)
 370:	44c1                	li	s1,16
 372:	0cc8                	addi	a0,sp,596
 374:	3002                	fld	ft0,32(sp)
 376:	c944                	sw	s1,20(a0)
 378:	0e44                	addi	s1,sp,788
 37a:	0000                	unimp
 37c:	002c                	addi	a1,sp,8
 37e:	0000                	unimp
 380:	0240                	addi	s0,sp,260
 382:	0000                	unimp
 384:	2828                	fld	fa0,80(s0)
 386:	0000                	unimp
 388:	01a0                	addi	s0,sp,200
 38a:	0000                	unimp
 38c:	0e44                	addi	s1,sp,788
 38e:	5030                	lw	a2,96(s0)
 390:	0181                	addi	gp,gp,0
 392:	0288                	addi	a0,sp,320
        b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16 >> 8));
 394:	0389                	addi	t2,t2,2
 396:	0492                	slli	s1,s1,0x4
 398:	0c44                	addi	s1,sp,532
 39a:	0008                	0x8
 39c:	c1017403          	0xc1017403
 3a0:	c844                	sw	s1,20(s0)
 3a2:	020c                	addi	a1,sp,256
 3a4:	4430                	lw	a2,72(s0)
 3a6:	44c9                	li	s1,18
 3a8:	44d2                	lw	s1,20(sp)
 3aa:	000e                	c.slli	zero,0x3
 3ac:	0028                	addi	a0,sp,8
 3ae:	0000                	unimp
 3b0:	0240                	addi	s0,sp,260
 3b2:	0000                	unimp
 3b4:	29c8                	fld	fa0,144(a1)
 3b6:	0000                	unimp
 3b8:	01c8                	addi	a0,sp,196
 3ba:	0000                	unimp
 3bc:	0e44                	addi	s1,sp,788
 3be:	4c30                	lw	a2,88(s0)
 3c0:	0181                	addi	gp,gp,0
 3c2:	0288                	addi	a0,sp,320
 3c4:	0389                	addi	t2,t2,2
 3c6:	0c44                	addi	s1,sp,532
 3c8:	0008                	0x8
 3ca:	c101a403          	lw	s0,-1008(gp) # 83d0 <impure_data+0x380>
 3ce:	c844                	sw	s1,20(s0)
 3d0:	020c                	addi	a1,sp,256
 3d2:	4430                	lw	a2,72(s0)
 3d4:	44c9                	li	s1,18
 3d6:	000e                	c.slli	zero,0x3
 3d8:	000c                	0xc
 3da:	0000                	unimp
 3dc:	ffff                	0xffff
 3de:	ffff                	0xffff
    return a->idx - b->idx;
 3e0:	7c010003          	lb	zero,1984(sp)
 3e4:	0d01                	addi	s10,s10,0
 3e6:	0002                	c.slli64	zero
 3e8:	0020                	addi	s0,sp,8
 3ea:	0000                	unimp
 3ec:	03d8                	addi	a4,sp,452
 3ee:	0000                	unimp
 3f0:	2b90                	fld	fa2,16(a5)
 3f2:	0000                	unimp
 3f4:	0030                	addi	a2,sp,8
 3f6:	0000                	unimp
}
 3f8:	0e44                	addi	s1,sp,788
 3fa:	4420                	lw	s0,72(s0)
 3fc:	0188                	addi	a0,sp,192
 3fe:	0c44                	addi	s1,sp,532
 400:	0008                	0x8
 402:	c85c                	sw	a5,20(s0)
 404:	020c                	addi	a1,sp,256
 406:	4420                	lw	s0,72(s0)
{
 408:	000e                	c.slli	zero,0x3
 40a:	0000                	unimp
 40c:	0024                	addi	s1,sp,8
 40e:	0000                	unimp
 410:	03d8                	addi	a4,sp,452
 412:	0000                	unimp
 414:	2bc0                	fld	fs0,144(a5)
 416:	0000                	unimp
 418:	0030                	addi	a2,sp,8
 41a:	0000                	unimp
    to->data16 = from->data16;
 41c:	0e44                	addi	s1,sp,788
 41e:	4810                	lw	a2,16(s0)
 420:	0181                	addi	gp,gp,0
 422:	0288                	addi	a0,sp,320
 424:	0c44                	addi	s1,sp,532
 426:	0008                	0x8
 428:	c154                	sw	a3,4(a0)
 42a:	c844                	sw	s1,20(s0)
    to->idx    = from->idx;
 42c:	020c                	addi	a1,sp,256
 42e:	4410                	lw	a2,8(s0)
 430:	000e                	c.slli	zero,0x3
 432:	0000                	unimp
 434:	0024                	addi	s1,sp,8
 436:	0000                	unimp
 438:	03d8                	addi	a4,sp,452
 43a:	0000                	unimp
}
 43c:	2bf0                	fld	fa2,208(a5)
 43e:	0000                	unimp
 440:	0030                	addi	a2,sp,8
 442:	0000                	unimp
 444:	0e44                	addi	s1,sp,788
 446:	4810                	lw	a2,16(s0)
 448:	0181                	addi	gp,gp,0
 44a:	0288                	addi	a0,sp,320
{
 44c:	0c44                	addi	s1,sp,532
 44e:	0008                	0x8
 450:	c154                	sw	a3,4(a0)
 452:	c844                	sw	s1,20(s0)
 454:	020c                	addi	a1,sp,256
 456:	4410                	lw	a2,8(s0)
 458:	000e                	c.slli	zero,0x3
 45a:	0000                	unimp
 45c:	0020                	addi	s0,sp,8
 45e:	0000                	unimp
 460:	03d8                	addi	a4,sp,452
 462:	0000                	unimp
 464:	2c20                	fld	fs0,88(s0)
 466:	0000                	unimp
    ee_u16     retval = 0;
 468:	0030                	addi	a2,sp,8
 46a:	0000                	unimp
    ee_u16     found = 0, missed = 0;
 46c:	0e44                	addi	s1,sp,788
 46e:	4420                	lw	s0,72(s0)
 470:	0188                	addi	a0,sp,192
 472:	0c44                	addi	s1,sp,532
    list_head *list     = res->list;
 474:	0008                	0x8
 476:	c85c                	sw	a5,20(s0)
 478:	020c                	addi	a1,sp,256
 47a:	4420                	lw	s0,72(s0)
 47c:	000e                	c.slli	zero,0x3
 47e:	0000                	unimp
    ee_s16     find_num = res->seed3;
 480:	0024                	addi	s1,sp,8
 482:	0000                	unimp
 484:	03d8                	addi	a4,sp,452
 486:	0000                	unimp
 488:	2c50                	fld	fa2,152(s0)
 48a:	0000                	unimp
    info.idx = finder_idx;
 48c:	0044                	addi	s1,sp,4
 48e:	0000                	unimp
 490:	0e44                	addi	s1,sp,788
 492:	4830                	lw	a2,80(s0)
    for (i = 0; i < find_num; i++)
 494:	0181                	addi	gp,gp,0
 496:	0288                	addi	a0,sp,320
 498:	0c44                	addi	s1,sp,532
 49a:	0008                	0x8
        info.data16 = (i & 0xff);
 49c:	c168                	sw	a0,68(a0)
 49e:	c844                	sw	s1,20(s0)
 4a0:	020c                	addi	a1,sp,256
 4a2:	4430                	lw	a2,72(s0)
 4a4:	000e                	c.slli	zero,0x3
 4a6:	0000                	unimp
 4a8:	0020                	addi	s0,sp,8
 4aa:	0000                	unimp
 4ac:	03d8                	addi	a4,sp,452
 4ae:	0000                	unimp
        this_find   = core_list_find(list, &info);
 4b0:	2c94                	fld	fa3,24(s1)
 4b2:	0000                	unimp
 4b4:	0034                	addi	a3,sp,8
 4b6:	0000                	unimp
 4b8:	0e44                	addi	s1,sp,788
 4ba:	4420                	lw	s0,72(s0)
 4bc:	0188                	addi	a0,sp,192
 4be:	0c44                	addi	s1,sp,532
 4c0:	0008                	0x8
 4c2:	c860                	sw	s0,84(s0)
        list        = core_list_reverse(list);
 4c4:	020c                	addi	a1,sp,256
 4c6:	4420                	lw	s0,72(s0)
 4c8:	000e                	c.slli	zero,0x3
 4ca:	0000                	unimp
 4cc:	0020                	addi	s0,sp,8
 4ce:	0000                	unimp
        if (this_find == NULL)
 4d0:	03d8                	addi	a4,sp,452
 4d2:	0000                	unimp
 4d4:	2cc8                	fld	fa0,152(s1)
 4d6:	0000                	unimp
            missed++;
 4d8:	0028                	addi	a0,sp,8
 4da:	0000                	unimp
 4dc:	0e44                	addi	s1,sp,788
 4de:	4420                	lw	s0,72(s0)
 4e0:	0188                	addi	a0,sp,192
 4e2:	0c44                	addi	s1,sp,532
            retval += (list->next->info->data16 >> 8) & 1;
 4e4:	0008                	0x8
 4e6:	c854                	sw	a3,20(s0)
 4e8:	020c                	addi	a1,sp,256
 4ea:	4420                	lw	s0,72(s0)
 4ec:	000e                	c.slli	zero,0x3
 4ee:	0000                	unimp
 4f0:	000c                	0xc
 4f2:	0000                	unimp
 4f4:	ffff                	0xffff
 4f6:	ffff                	0xffff
 4f8:	7c010003          	lb	zero,1984(sp)
 4fc:	0d01                	addi	s10,s10,0
 4fe:	0002                	c.slli64	zero
 500:	0024                	addi	s1,sp,8
 502:	0000                	unimp
 504:	04f0                	addi	a2,sp,588
 506:	0000                	unimp
 508:	2cf0                	fld	fa2,216(s1)
 50a:	0000                	unimp
 50c:	02ac                	addi	a1,sp,328
 50e:	0000                	unimp
 510:	0e44                	addi	s1,sp,788
 512:	4870                	lw	a2,84(s0)
 514:	0181                	addi	gp,gp,0
 516:	0288                	addi	a0,sp,320
 518:	0c44                	addi	s1,sp,532
 51a:	0008                	0x8
 51c:	c1029003          	lh	zero,-1008(t0)
 520:	c844                	sw	s1,20(s0)
 522:	020c                	addi	a1,sp,256
            found++;
 524:	4470                	lw	a2,76(s0)
 526:	000e                	c.slli	zero,0x3
 528:	0020                	addi	s0,sp,8
 52a:	0000                	unimp
 52c:	04f0                	addi	a2,sp,588
 52e:	0000                	unimp
            if (this_find->info->data16 & 0x1) /* use found value */
 530:	2f9c                	fld	fa5,24(a5)
 532:	0000                	unimp
 534:	0278                	addi	a4,sp,268
 536:	0000                	unimp
 538:	0e44                	addi	s1,sp,788
 53a:	4430                	lw	a2,72(s0)
 53c:	0188                	addi	a0,sp,192
 53e:	0c44                	addi	s1,sp,532
 540:	0008                	0x8
 542:	c8026403          	0xc8026403
 546:	020c                	addi	a1,sp,256
 548:	4430                	lw	a2,72(s0)
 54a:	000e                	c.slli	zero,0x3
                retval += (this_find->info->data16 >> 9) & 1;
 54c:	0020                	addi	s0,sp,8
 54e:	0000                	unimp
 550:	04f0                	addi	a2,sp,588
 552:	0000                	unimp
 554:	3214                	fld	fa3,32(a2)
 556:	0000                	unimp
 558:	0050                	addi	a2,sp,4
 55a:	0000                	unimp
 55c:	0e44                	addi	s1,sp,788
 55e:	4430                	lw	a2,72(s0)
 560:	0188                	addi	a0,sp,192
 562:	0c44                	addi	s1,sp,532
 564:	0008                	0x8
 566:	c87c                	sw	a5,84(s0)
 568:	020c                	addi	a1,sp,256
 56a:	4430                	lw	a2,72(s0)
 56c:	000e                	c.slli	zero,0x3
 56e:	0000                	unimp
 570:	0024                	addi	s1,sp,8
 572:	0000                	unimp
 574:	04f0                	addi	a2,sp,588
 576:	0000                	unimp
 578:	3264                	fld	fs1,224(a2)
 57a:	0000                	unimp
 57c:	039c                	addi	a5,sp,448
 57e:	0000                	unimp
 580:	0e44                	addi	s1,sp,788
 582:	4830                	lw	a2,80(s0)
            if (this_find->next != NULL)
 584:	0181                	addi	gp,gp,0
 586:	0288                	addi	a0,sp,320
 588:	0c44                	addi	s1,sp,532
 58a:	0008                	0x8
 58c:	c1038003          	lb	zero,-1008(t2)
                finder          = this_find->next;
 590:	c844                	sw	s1,20(s0)
 592:	020c                	addi	a1,sp,256
 594:	4430                	lw	a2,72(s0)
 596:	000e                	c.slli	zero,0x3
 598:	000c                	0xc
 59a:	0000                	unimp
                this_find->next = finder->next;
 59c:	ffff                	0xffff
 59e:	ffff                	0xffff
 5a0:	7c010003          	lb	zero,1984(sp)
 5a4:	0d01                	addi	s10,s10,0
 5a6:	0002                	c.slli64	zero
 5a8:	0020                	addi	s0,sp,8
 5aa:	0000                	unimp
                finder->next    = list->next;
 5ac:	0598                	addi	a4,sp,704
 5ae:	0000                	unimp
 5b0:	3600                	fld	fs0,40(a2)
 5b2:	0000                	unimp
 5b4:	0094                	addi	a3,sp,64
 5b6:	0000                	unimp
 5b8:	0e44                	addi	s1,sp,788
 5ba:	4430                	lw	a2,72(s0)
                list->next      = finder;
 5bc:	0188                	addi	a0,sp,192
 5be:	0c44                	addi	s1,sp,532
 5c0:	0008                	0x8
 5c2:	8002                	0x8002
 5c4:	0cc8                	addi	a0,sp,596
 5c6:	3002                	fld	ft0,32(sp)
        if (info.idx >= 0)
 5c8:	0e44                	addi	s1,sp,788
 5ca:	0000                	unimp
 5cc:	0020                	addi	s0,sp,8
 5ce:	0000                	unimp
            info.idx++;
 5d0:	0598                	addi	a4,sp,704
 5d2:	0000                	unimp
 5d4:	3694                	fld	fa3,40(a3)
 5d6:	0000                	unimp
 5d8:	0100                	addi	s0,sp,128
 5da:	0000                	unimp
 5dc:	0e44                	addi	s1,sp,788
 5de:	4430                	lw	a2,72(s0)
 5e0:	0188                	addi	a0,sp,192
 5e2:	0c44                	addi	s1,sp,532
 5e4:	0008                	0x8
 5e6:	ec02                	fsw	ft0,24(sp)
 5e8:	0cc8                	addi	a0,sp,596
 5ea:	3002                	fld	ft0,32(sp)
 5ec:	0e44                	addi	s1,sp,788
 5ee:	0000                	unimp
 5f0:	0024                	addi	s1,sp,8
 5f2:	0000                	unimp
    for (i = 0; i < find_num; i++)
 5f4:	0598                	addi	a4,sp,704
 5f6:	0000                	unimp
 5f8:	3794                	fld	fa3,40(a5)
 5fa:	0000                	unimp
 5fc:	0088                	addi	a0,sp,64
 5fe:	0000                	unimp
 600:	0e44                	addi	s1,sp,788
 602:	4820                	lw	s0,80(s0)
 604:	0181                	addi	gp,gp,0
 606:	0288                	addi	a0,sp,320
 608:	0c44                	addi	s1,sp,532
 60a:	0008                	0x8
 60c:	6c02                	flw	fs8,0(sp)
 60e:	44c1                	li	s1,16
 610:	0cc8                	addi	a0,sp,596
 612:	2002                	fld	ft0,0(sp)
 614:	0e44                	addi	s1,sp,788
 616:	0000                	unimp
 618:	0024                	addi	s1,sp,8
 61a:	0000                	unimp
    retval += found * 4 - missed;
 61c:	0598                	addi	a4,sp,704
 61e:	0000                	unimp
 620:	381c                	fld	fa5,48(s0)
 622:	0000                	unimp
 624:	0080                	addi	s0,sp,64
 626:	0000                	unimp
 628:	0e44                	addi	s1,sp,788
 62a:	4820                	lw	s0,80(s0)
 62c:	0181                	addi	gp,gp,0
 62e:	0288                	addi	a0,sp,320
 630:	0c44                	addi	s1,sp,532
 632:	0008                	0x8
 634:	6402                	flw	fs0,0(sp)
 636:	44c1                	li	s1,16
 638:	0cc8                	addi	a0,sp,596
 63a:	2002                	fld	ft0,0(sp)
 63c:	0e44                	addi	s1,sp,788
 63e:	0000                	unimp
 640:	0024                	addi	s1,sp,8
 642:	0000                	unimp
 644:	0598                	addi	a4,sp,704
 646:	0000                	unimp
    if (finder_idx > 0)
 648:	389c                	fld	fa5,48(s1)
 64a:	0000                	unimp
 64c:	0050                	addi	a2,sp,4
 64e:	0000                	unimp
        list = core_list_mergesort(list, cmp_complex, res);
 650:	0e44                	addi	s1,sp,788
 652:	4820                	lw	s0,80(s0)
 654:	0181                	addi	gp,gp,0
 656:	0288                	addi	a0,sp,320
 658:	0c44                	addi	s1,sp,532
 65a:	0008                	0x8
 65c:	c174                	sw	a3,68(a0)
 65e:	c844                	sw	s1,20(s0)
 660:	020c                	addi	a1,sp,256
 662:	4420                	lw	s0,72(s0)
    remover = core_list_remove(list->next);
 664:	000e                	c.slli	zero,0x3
 666:	0000                	unimp
 668:	0024                	addi	s1,sp,8
 66a:	0000                	unimp
 66c:	0598                	addi	a4,sp,704
 66e:	0000                	unimp
 670:	38ec                	fld	fa1,240(s1)
 672:	0000                	unimp
 674:	0040                	addi	s0,sp,4
 676:	0000                	unimp
    finder = core_list_find(list, &info);
 678:	0e44                	addi	s1,sp,788
 67a:	4820                	lw	s0,80(s0)
 67c:	0181                	addi	gp,gp,0
 67e:	0288                	addi	a0,sp,320
 680:	0c44                	addi	s1,sp,532
 682:	0008                	0x8
 684:	c164                	sw	s1,68(a0)
 686:	c844                	sw	s1,20(s0)
 688:	020c                	addi	a1,sp,256
 68a:	4420                	lw	s0,72(s0)
    if (!finder)
 68c:	000e                	c.slli	zero,0x3
 68e:	0000                	unimp
 690:	000c                	0xc
 692:	0000                	unimp
        finder = list->next;
 694:	ffff                	0xffff
 696:	ffff                	0xffff
 698:	7c010003          	lb	zero,1984(sp)
 69c:	0d01                	addi	s10,s10,0
 69e:	0002                	c.slli64	zero
    while (finder)
 6a0:	0024                	addi	s1,sp,8
 6a2:	0000                	unimp
        retval = crc16(list->info->data16, retval);
 6a4:	0690                	addi	a2,sp,832
 6a6:	0000                	unimp
 6a8:	392c                	fld	fa1,112(a0)
 6aa:	0000                	unimp
 6ac:	049c                	addi	a5,sp,576
 6ae:	0000                	unimp
 6b0:	0e44                	addi	s1,sp,788
 6b2:	4850                	lw	a2,20(s0)
 6b4:	0181                	addi	gp,gp,0
 6b6:	0288                	addi	a0,sp,320
 6b8:	0c44                	addi	s1,sp,532
 6ba:	0008                	0x8
 6bc:	c1048003          	lb	zero,-1008(s1) # 2988 <matrix_mul_matrix+0x160>
 6c0:	c844                	sw	s1,20(s0)
 6c2:	020c                	addi	a1,sp,256
 6c4:	4450                	lw	a2,12(s0)
 6c6:	000e                	c.slli	zero,0x3
        finder = finder->next;
 6c8:	0024                	addi	s1,sp,8
 6ca:	0000                	unimp
 6cc:	0690                	addi	a2,sp,832
 6ce:	0000                	unimp
 6d0:	3dc8                	fld	fa0,184(a1)
 6d2:	0000                	unimp
    while (finder)
 6d4:	005c                	addi	a5,sp,4
 6d6:	0000                	unimp
 6d8:	0e44                	addi	s1,sp,788
 6da:	4830                	lw	a2,80(s0)
    remover = core_list_undo_remove(remover, list->next);
 6dc:	0181                	addi	gp,gp,0
 6de:	0288                	addi	a0,sp,320
 6e0:	0c44                	addi	s1,sp,532
 6e2:	0008                	0x8
 6e4:	4002                	0x4002
 6e6:	44c1                	li	s1,16
 6e8:	0cc8                	addi	a0,sp,596
 6ea:	3002                	fld	ft0,32(sp)
 6ec:	0e44                	addi	s1,sp,788
 6ee:	0000                	unimp
 6f0:	0024                	addi	s1,sp,8
 6f2:	0000                	unimp
    list = core_list_mergesort(list, cmp_idx, NULL);
 6f4:	0690                	addi	a2,sp,832
 6f6:	0000                	unimp
 6f8:	3e24                	fld	fs1,120(a2)
 6fa:	0000                	unimp
 6fc:	0060                	addi	s0,sp,12
 6fe:	0000                	unimp
 700:	0e44                	addi	s1,sp,788
 702:	4830                	lw	a2,80(s0)
 704:	0181                	addi	gp,gp,0
 706:	0288                	addi	a0,sp,320
    finder = list->next;
 708:	0c44                	addi	s1,sp,532
 70a:	0008                	0x8
 70c:	4402                	lw	s0,0(sp)
 70e:	44c1                	li	s1,16
 710:	0cc8                	addi	a0,sp,596
 712:	3002                	fld	ft0,32(sp)
    while (finder)
 714:	0e44                	addi	s1,sp,788
 716:	0000                	unimp
        retval = crc16(list->info->data16, retval);
 718:	0024                	addi	s1,sp,8
 71a:	0000                	unimp
 71c:	0690                	addi	a2,sp,832
 71e:	0000                	unimp
 720:	3e84                	fld	fs1,56(a3)
 722:	0000                	unimp
 724:	005c                	addi	a5,sp,4
 726:	0000                	unimp
 728:	0e44                	addi	s1,sp,788
 72a:	4830                	lw	a2,80(s0)
 72c:	0181                	addi	gp,gp,0
 72e:	0288                	addi	a0,sp,320
 730:	0c44                	addi	s1,sp,532
 732:	0008                	0x8
 734:	4002                	0x4002
 736:	44c1                	li	s1,16
 738:	0cc8                	addi	a0,sp,596
 73a:	3002                	fld	ft0,32(sp)
        finder = finder->next;
 73c:	0e44                	addi	s1,sp,788
 73e:	0000                	unimp
 740:	0024                	addi	s1,sp,8
 742:	0000                	unimp
 744:	0690                	addi	a2,sp,832
 746:	0000                	unimp
    while (finder)
 748:	3ee0                	fld	fs0,248(a3)
 74a:	0000                	unimp
 74c:	0060                	addi	s0,sp,12
 74e:	0000                	unimp
    return retval;
 750:	0e44                	addi	s1,sp,788
 752:	4830                	lw	a2,80(s0)
}
 754:	0181                	addi	gp,gp,0
 756:	0288                	addi	a0,sp,320
 758:	0c44                	addi	s1,sp,532
 75a:	0008                	0x8
 75c:	4402                	lw	s0,0(sp)
 75e:	44c1                	li	s1,16
 760:	0cc8                	addi	a0,sp,596
 762:	3002                	fld	ft0,32(sp)
 764:	0e44                	addi	s1,sp,788
 766:	0000                	unimp
{
 768:	000c                	0xc
 76a:	0000                	unimp
 76c:	ffff                	0xffff
 76e:	ffff                	0xffff
 770:	7c010003          	lb	zero,1984(sp)
 774:	0d01                	addi	s10,s10,0
 776:	0002                	c.slli64	zero
 778:	0020                	addi	s0,sp,8
 77a:	0000                	unimp
 77c:	0768                	addi	a0,sp,908
 77e:	0000                	unimp
 780:	3f40                	fld	fs0,184(a4)
 782:	0000                	unimp
 784:	0064                	addi	s1,sp,12
 786:	0000                	unimp
    ee_u32 per_item = 16 + sizeof(struct list_data_s);
 788:	0e44                	addi	s1,sp,788
 78a:	4430                	lw	a2,72(s0)
 78c:	0188                	addi	a0,sp,192
 78e:	0c44                	addi	s1,sp,532
    ee_u32 size     = (blksize / per_item)
 790:	0008                	0x8
 792:	5002                	0x5002
 794:	0cc8                	addi	a0,sp,596
 796:	3002                	fld	ft0,32(sp)
 798:	0e44                	addi	s1,sp,788
 79a:	0000                	unimp
 79c:	0020                	addi	s0,sp,8
 79e:	0000                	unimp
 7a0:	0768                	addi	a0,sp,908
 7a2:	0000                	unimp
 7a4:	3fa4                	fld	fs1,120(a5)
 7a6:	0000                	unimp
    list_head *memblock_end  = memblock + size;
 7a8:	0090                	addi	a2,sp,64
 7aa:	0000                	unimp
 7ac:	0e44                	addi	s1,sp,788
 7ae:	4430                	lw	a2,72(s0)
 7b0:	0188                	addi	a0,sp,192
 7b2:	0c44                	addi	s1,sp,532
 7b4:	0008                	0x8
 7b6:	7c02                	flw	fs8,32(sp)
 7b8:	0cc8                	addi	a0,sp,596
 7ba:	3002                	fld	ft0,32(sp)
    list_data *datablock     = (list_data *)(memblock_end);
 7bc:	0e44                	addi	s1,sp,788
 7be:	0000                	unimp
 7c0:	0028                	addi	a0,sp,8
 7c2:	0000                	unimp
    list_data *datablock_end = datablock + size;
 7c4:	0768                	addi	a0,sp,908
 7c6:	0000                	unimp
 7c8:	4034                	lw	a3,64(s0)
 7ca:	0000                	unimp
 7cc:	03a0                	addi	s0,sp,456
 7ce:	0000                	unimp
 7d0:	0e44                	addi	s1,sp,788
 7d2:	0180                	addi	s0,sp,192
 7d4:	8148                	0x8148
 7d6:	8801                	andi	s0,s0,0
    list_head *finder, *list = memblock;
 7d8:	4402                	lw	s0,0(sp)
 7da:	080c                	addi	a1,sp,16
 7dc:	0300                	addi	s0,sp,384
 7de:	0384                	addi	s1,sp,448
    list->next         = NULL;
 7e0:	44c1                	li	s1,16
 7e2:	0cc8                	addi	a0,sp,596
 7e4:	8002                	0x8002
 7e6:	4401                	li	s0,0
    list->info         = datablock;
 7e8:	000e                	c.slli	zero,0x3
 7ea:	0000                	unimp
 7ec:	0020                	addi	s0,sp,8
 7ee:	0000                	unimp
 7f0:	0768                	addi	a0,sp,908
 7f2:	0000                	unimp
    list->info->idx    = 0x0000;
 7f4:	43d4                	lw	a3,4(a5)
 7f6:	0000                	unimp
 7f8:	01b8                	addi	a4,sp,200
 7fa:	0000                	unimp
 7fc:	0e44                	addi	s1,sp,788
 7fe:	4460                	lw	s0,76(s0)
    list->info->data16 = (ee_s16)0x8080;
 800:	0188                	addi	a0,sp,192
 802:	0c44                	addi	s1,sp,532
 804:	0008                	0x8
 806:	c801a403          	lw	s0,-896(gp) # 8440 <impure_data+0x3f0>
 80a:	020c                	addi	a1,sp,256
 80c:	4460                	lw	s0,76(s0)
 80e:	000e                	c.slli	zero,0x3
 810:	0028                	addi	a0,sp,8
 812:	0000                	unimp
    memblock++;
 814:	0768                	addi	a0,sp,908
 816:	0000                	unimp
 818:	458c                	lw	a1,8(a1)
 81a:	0000                	unimp
 81c:	02b8                	addi	a4,sp,328
 81e:	0000                	unimp
    datablock++;
 820:	0e44                	addi	s1,sp,788
 822:	4c60                	lw	s0,92(s0)
 824:	0181                	addi	gp,gp,0
 826:	0288                	addi	a0,sp,320
 828:	0389                	addi	t2,t2,2
 82a:	0c44                	addi	s1,sp,532
    info.idx    = 0x7fff;
 82c:	0008                	0x8
 82e:	c1029403          	lh	s0,-1008(t0)
 832:	c844                	sw	s1,20(s0)
 834:	020c                	addi	a1,sp,256
 836:	4460                	lw	s0,76(s0)
    info.data16 = (ee_s16)0xffff;
 838:	44c9                	li	s1,18
 83a:	000e                	c.slli	zero,0x3
 83c:	0024                	addi	s1,sp,8
 83e:	0000                	unimp
    core_list_insert_new(
 840:	0768                	addi	a0,sp,908
 842:	0000                	unimp
 844:	4844                	lw	s1,20(s0)
 846:	0000                	unimp
 848:	0604                	addi	s1,sp,768
 84a:	0000                	unimp
 84c:	0e44                	addi	s1,sp,788
 84e:	4850                	lw	a2,20(s0)
 850:	0181                	addi	gp,gp,0
 852:	0288                	addi	a0,sp,320
 854:	0c44                	addi	s1,sp,532
 856:	0008                	0x8
 858:	c105e803          	0xc105e803
    for (i = 0; i < size; i++)
 85c:	c844                	sw	s1,20(s0)
 85e:	020c                	addi	a1,sp,256
 860:	4450                	lw	a2,12(s0)
 862:	000e                	c.slli	zero,0x3
        ee_u16 datpat = ((ee_u16)(seed ^ i) & 0xf);
 864:	0020                	addi	s0,sp,8
 866:	0000                	unimp
 868:	0768                	addi	a0,sp,908
 86a:	0000                	unimp
 86c:	4e48                	lw	a0,28(a2)
 86e:	0000                	unimp
 870:	003c                	addi	a5,sp,8
 872:	0000                	unimp
 874:	0e44                	addi	s1,sp,788
 876:	4430                	lw	a2,72(s0)
 878:	0188                	addi	a0,sp,192
 87a:	0c44                	addi	s1,sp,532
 87c:	0008                	0x8
 87e:	c868                	sw	a0,84(s0)
 880:	020c                	addi	a1,sp,256
 882:	4430                	lw	a2,72(s0)
 884:	000e                	c.slli	zero,0x3
 886:	0000                	unimp
            = (datpat << 3) | (i & 0x7); /* alternate between algorithms */
 888:	0028                	addi	a0,sp,8
 88a:	0000                	unimp
 88c:	0768                	addi	a0,sp,908
 88e:	0000                	unimp
 890:	4e84                	lw	s1,24(a3)
 892:	0000                	unimp
 894:	00b8                	addi	a4,sp,72
 896:	0000                	unimp
 898:	0e44                	addi	s1,sp,788
 89a:	08d0                	addi	a2,sp,84
 89c:	8148                	0x8148
 89e:	8809                	andi	s0,s0,2
 8a0:	440a                	lw	s0,128(sp)
 8a2:	080c                	addi	a1,sp,16
 8a4:	0220                	addi	s0,sp,264
 8a6:	c19c                	sw	a5,0(a1)
 8a8:	c844                	sw	s1,20(s0)
 8aa:	020c                	addi	a1,sp,256
 8ac:	08d0                	addi	a2,sp,84
 8ae:	0e44                	addi	s1,sp,788
        ee_u16 dat
 8b0:	0000                	unimp
 8b2:	0000                	unimp
 8b4:	000c                	0xc
 8b6:	0000                	unimp
        info.data16 = (dat << 8) | dat;  /* fill the data with actual data and
 8b8:	ffff                	0xffff
 8ba:	ffff                	0xffff
 8bc:	7c010003          	lb	zero,1984(sp)
 8c0:	0d01                	addi	s10,s10,0
 8c2:	0002                	c.slli64	zero
 8c4:	0030                	addi	a2,sp,8
 8c6:	0000                	unimp
 8c8:	08b4                	addi	a3,sp,88
 8ca:	0000                	unimp
 8cc:	4f3c                	lw	a5,88(a4)
 8ce:	0000                	unimp
 8d0:	07d8                	addi	a4,sp,964
 8d2:	0000                	unimp
 8d4:	0e4c                	addi	a1,sp,788
 8d6:	5820                	lw	s0,112(s0)
 8d8:	0288                	addi	a0,sp,320
 8da:	8954                	0x8954
        core_list_insert_new(
 8dc:	01815803          	lhu	a6,24(sp)
 8e0:	0492                	slli	s1,s1,0x4
 8e2:	0c030593          	addi	a1,t1,192
 8e6:	44c10a07          	vluxseg3ei8.v	v20,(sp),v12,v0.t
 8ea:	58c8                	lw	a0,52(s1)
 8ec:	44d2                	lw	s1,20(sp)
 8ee:	44c9                	li	s1,18
 8f0:	000e48d3          	fadd.s	fa7,ft8,ft0,rmm
 8f4:	0b44                	addi	s1,sp,404
 8f6:	0000                	unimp
    for (i = 0; i < size; i++)
 8f8:	000c                	0xc
 8fa:	0000                	unimp
 8fc:	ffff                	0xffff
 8fe:	ffff                	0xffff
 900:	7c010003          	lb	zero,1984(sp)
 904:	0d01                	addi	s10,s10,0
 906:	0002                	c.slli64	zero
 908:	0050                	addi	a2,sp,4
 90a:	0000                	unimp
 90c:	08f8                	addi	a4,sp,92
 90e:	0000                	unimp
    finder = list->next;
 910:	5714                	lw	a3,40(a4)
 912:	0000                	unimp
 914:	07e4                	addi	s1,sp,972
 916:	0000                	unimp
 918:	0e44                	addi	s1,sp,788
 91a:	4450                	lw	a2,12(s0)
    i      = 1;
 91c:	0492                	slli	s1,s1,0x4
 91e:	8958                	0x8958
 920:	95059303          	lh	t1,-1712(a1) # 1950 <main+0x940>
    while (finder->next != NULL)
 924:	97089607          	flh	fa2,-1680(a7)
        if (i < size / 5) /* first 20% of the list in order */
 928:	6009                	c.lui	zero,0x2
 92a:	0181                	addi	gp,gp,0
 92c:	0288                	addi	a0,sp,320
 92e:	0694                	addi	a3,sp,832
 930:	0a98                	addi	a4,sp,336
 932:	0b99                	addi	s7,s7,6
 934:	0c9a                	slli	s9,s9,0x6
 936:	00030d9b          	0x30d9b
 93a:	0a06                	slli	s4,s4,0x1
 93c:	44c1                	li	s1,16
 93e:	58c8                	lw	a0,52(s1)
 940:	44d2                	lw	s1,20(sp)
 942:	44c9                	li	s1,18
 944:	44d444d3          	0x44d444d3
            finder->info->idx = i++;
 948:	44d5                	li	s1,21
 94a:	44d6                	lw	s1,84(sp)
 94c:	44d844d7          	vmadc.vxm	v9,v13,a6,v0
 950:	44d9                	li	s1,22
 952:	44da                	lw	s1,148(sp)
 954:	000e4cdb          	0xe4cdb
 958:	0b44                	addi	s1,sp,404
 95a:	0000                	unimp
 95c:	000c                	0xc
 95e:	0000                	unimp
 960:	ffff                	0xffff
 962:	ffff                	0xffff
 964:	7c010003          	lb	zero,1984(sp)
 968:	0d01                	addi	s10,s10,0
 96a:	0002                	c.slli64	zero
            ee_u16 pat = (ee_u16)(i++ ^ seed); /* get a pseudo random number */
 96c:	000c                	0xc
 96e:	0000                	unimp
 970:	095c                	addi	a5,sp,148
 972:	0000                	unimp
 974:	5ef8                	lw	a4,124(a3)
 976:	0000                	unimp
 978:	008c                	addi	a1,sp,64
 97a:	0000                	unimp
 97c:	000c                	0xc
 97e:	0000                	unimp
 980:	ffff                	0xffff
 982:	ffff                	0xffff
 984:	7c010003          	lb	zero,1984(sp)
 988:	0d01                	addi	s10,s10,0
 98a:	0002                	c.slli64	zero
                                & (((i & 0x07) << 8)
 98c:	000c                	0xc
 98e:	0000                	unimp
 990:	097c                	addi	a5,sp,156
 992:	0000                	unimp
 994:	5f84                	lw	s1,56(a5)
 996:	0000                	unimp
 998:	00e4                	addi	s1,sp,76
 99a:	0000                	unimp
 99c:	000c                	0xc
 99e:	0000                	unimp
 9a0:	ffff                	0xffff
 9a2:	ffff                	0xffff
 9a4:	7c010003          	lb	zero,1984(sp)
 9a8:	0d01                	addi	s10,s10,0
 9aa:	0002                	c.slli64	zero
 9ac:	000c                	0xc
 9ae:	0000                	unimp
                                   | pat); /* make sure the mixed items end up
 9b0:	099c                	addi	a5,sp,208
 9b2:	0000                	unimp
 9b4:	6068                	flw	fa0,68(s0)
 9b6:	0000                	unimp
 9b8:	00e4                	addi	s1,sp,76
 9ba:	0000                	unimp
 9bc:	000c                	0xc
 9be:	0000                	unimp
                                & (((i & 0x07) << 8)
 9c0:	ffff                	0xffff
 9c2:	ffff                	0xffff
 9c4:	7c010003          	lb	zero,1984(sp)
            finder->info->idx = 0x3fff
 9c8:	0d01                	addi	s10,s10,0
 9ca:	0002                	c.slli64	zero
 9cc:	0040                	addi	s0,sp,4
 9ce:	0000                	unimp
                                & (((i & 0x07) << 8)
 9d0:	09bc                	addi	a5,sp,216
 9d2:	0000                	unimp
 9d4:	614c                	flw	fa1,4(a0)
 9d6:	0000                	unimp
 9d8:	068c                	addi	a1,sp,832
 9da:	0000                	unimp
 9dc:	0e44                	addi	s1,sp,788
 9de:	4430                	lw	a2,72(s0)
 9e0:	88580593          	addi	a1,a6,-1915 # ffff8885 <RAM_SIZE+0xfffe8885>
            finder->info->idx = 0x3fff
 9e4:	8902                	jr	s2
 9e6:	95069403          	lh	s0,-1712(a3) # 3950 <cvt+0x24>
        finder = finder->next;
 9ea:	50099707          	flh	fa4,1280(s3)
 9ee:	0181                	addi	gp,gp,0
 9f0:	0492                	slli	s1,s1,0x4
 9f2:	0896                	slli	a7,a7,0x5
    while (finder->next != NULL)
 9f4:	0a04fc03          	0xa04fc03
 9f8:	48c1                	li	a7,16
 9fa:	44c8                	lw	a0,12(s1)
 9fc:	44c9                	li	s1,18
 9fe:	44d2                	lw	s1,20(sp)
    list = core_list_mergesort(list, cmp_idx, NULL);
 a00:	44d444d3          	0x44d444d3
 a04:	44d5                	li	s1,21
 a06:	44d6                	lw	s1,84(sp)
 a08:	000e4cd7          	vadd.vx	v25,v0,t3,v0.t
 a0c:	0b44                	addi	s1,sp,404
 a0e:	0000                	unimp
 a10:	000c                	0xc
 a12:	0000                	unimp
    return list;
 a14:	ffff                	0xffff
 a16:	ffff                	0xffff
}
 a18:	7c010003          	lb	zero,1984(sp)
 a1c:	0d01                	addi	s10,s10,0
 a1e:	0002                	c.slli64	zero
 a20:	000c                	0xc
 a22:	0000                	unimp
 a24:	0a10                	addi	a2,sp,272
 a26:	0000                	unimp
 a28:	67d8                	flw	fa4,12(a5)
 a2a:	0000                	unimp
{
 a2c:	0080                	addi	s0,sp,64
 a2e:	0000                	unimp
 a30:	000c                	0xc
 a32:	0000                	unimp
 a34:	ffff                	0xffff
 a36:	ffff                	0xffff
 a38:	7c010003          	lb	zero,1984(sp)
 a3c:	0d01                	addi	s10,s10,0
 a3e:	0002                	c.slli64	zero
 a40:	000c                	0xc
 a42:	0000                	unimp
 a44:	0a30                	addi	a2,sp,280
 a46:	0000                	unimp
 a48:	6930                	flw	fa2,80(a0)
 a4a:	0000                	unimp
 a4c:	004c                	addi	a1,sp,4
 a4e:	0000                	unimp
 a50:	000c                	0xc
 a52:	0000                	unimp
    if ((*memblock + 1) >= memblock_end)
 a54:	ffff                	0xffff
 a56:	ffff                	0xffff
 a58:	7c010003          	lb	zero,1984(sp)
 a5c:	0d01                	addi	s10,s10,0
 a5e:	0002                	c.slli64	zero
 a60:	0030                	addi	a2,sp,8
 a62:	0000                	unimp
 a64:	0a50                	addi	a2,sp,276
 a66:	0000                	unimp
        return NULL;
 a68:	6f7c                	flw	fa5,92(a4)
 a6a:	0000                	unimp
 a6c:	07ec                	addi	a1,sp,972
 a6e:	0000                	unimp
    if ((*datablock + 1) >= datablock_end)
 a70:	0e4c                	addi	a1,sp,788
 a72:	5820                	lw	s0,112(s0)
 a74:	0288                	addi	a0,sp,320
 a76:	8950                	0x8950
 a78:	01815c03          	lhu	s8,24(sp)
 a7c:	0492                	slli	s1,s1,0x4
 a7e:	20030593          	addi	a1,t1,512
 a82:	44c10a07          	vluxseg3ei8.v	v20,(sp),v12,v0.t
        return NULL;
 a86:	58c8                	lw	a0,52(s1)
 a88:	44d2                	lw	s1,20(sp)
 a8a:	44c9                	li	s1,18
    newitem = *memblock;
 a8c:	000e48d3          	fadd.s	fa7,ft8,ft0,rmm
 a90:	0b44                	addi	s1,sp,404
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
lui     sp,%hi(__stack_top)                                             
       0:	0000                	unimp
       2:	0000                	unimp
addi    sp,sp,%lo(__stack_top)
       4:	007c                	addi	a5,sp,12
       6:	0000                	unimp
jal   zero, _start
       8:	0006                	c.slli	zero,0x1
       a:	935a                	add	t1,t1,s6
       c:	5b04                	lw	s1,48(a4)
       e:	007c0493          	addi	s1,s8,7
      12:	0000                	unimp
      14:	00ac                	addi	a1,sp,72
      16:	0000                	unimp
      18:	0006                	c.slli	zero,0x1
      1a:	0af503f3          	0xaf503f3
      1e:	9f25                	0x9f25
      20:	00ac                	addi	a1,sp,72
      22:	0000                	unimp
      24:	00c0                	addi	s0,sp,68
      26:	0000                	unimp
      28:	0006                	c.slli	zero,0x1
      2a:	935a                	add	t1,t1,s6
      2c:	5b04                	lw	s1,48(a4)
      2e:	00c00493          	li	s1,12
      32:	0000                	unimp
      34:	0188                	addi	a0,sp,192
      36:	0000                	unimp
      38:	0006                	c.slli	zero,0x1
      3a:	0af503f3          	0xaf503f3
      3e:	9f25                	0x9f25
      40:	0188                	addi	a0,sp,192
      42:	0000                	unimp
      44:	0190                	addi	a2,sp,192
      46:	0000                	unimp
      48:	0006                	c.slli	zero,0x1
      4a:	935a                	add	t1,t1,s6
      4c:	5b04                	lw	s1,48(a4)
      4e:	01900493          	li	s1,25
      52:	0000                	unimp
      54:	026c                	addi	a1,sp,268
      56:	0000                	unimp
      58:	0006                	c.slli	zero,0x1
      5a:	0af503f3          	0xaf503f3
      5e:	9f25                	0x9f25
      60:	026c                	addi	a1,sp,268
      62:	0000                	unimp
      64:	0274                	addi	a3,sp,268
      66:	0000                	unimp
      68:	0006                	c.slli	zero,0x1
      6a:	935a                	add	t1,t1,s6
      6c:	5b04                	lw	s1,48(a4)
      6e:	02740493          	addi	s1,s0,39
      72:	0000                	unimp
      74:	0334                	addi	a3,sp,392
      76:	0000                	unimp
      78:	0006                	c.slli	zero,0x1
      7a:	0af503f3          	0xaf503f3
      7e:	9f25                	0x9f25
      80:	0334                	addi	a3,sp,392
      82:	0000                	unimp
      84:	0348                	addi	a0,sp,388
      86:	0000                	unimp
      88:	0006                	c.slli	zero,0x1
      8a:	935a                	add	t1,t1,s6
      8c:	5b04                	lw	s1,48(a4)
      8e:	03480493          	addi	s1,a6,52
      92:	0000                	unimp
      94:	03d4                	addi	a3,sp,452
      96:	0000                	unimp
      98:	0006                	c.slli	zero,0x1
      9a:	0af503f3          	0xaf503f3
      9e:	9f25                	0x9f25
      a0:	03d4                	addi	a3,sp,452
      a2:	0000                	unimp
      a4:	03e8                	addi	a0,sp,460
      a6:	0000                	unimp
      a8:	0006                	c.slli	zero,0x1
      aa:	935a                	add	t1,t1,s6
      ac:	5b04                	lw	s1,48(a4)
      ae:	03e80493          	addi	s1,a6,62
      b2:	0000                	unimp
      b4:	042c                	addi	a1,sp,520
      b6:	0000                	unimp
      b8:	0006                	c.slli	zero,0x1
      ba:	0af503f3          	0xaf503f3
      be:	9f25                	0x9f25
      c0:	042c                	addi	a1,sp,520
      c2:	0000                	unimp
{
      c4:	0434                	addi	a3,sp,520
      c6:	0000                	unimp
      c8:	0006                	c.slli	zero,0x1
      ca:	935a                	add	t1,t1,s6
      cc:	5b04                	lw	s1,48(a4)
      ce:	04340493          	addi	s1,s0,67
      d2:	0000                	unimp
      d4:	051c                	addi	a5,sp,640
      d6:	0000                	unimp
      d8:	0006                	c.slli	zero,0x1
      da:	0af503f3          	0xaf503f3
    ee_s16 data = *pdata;
      de:	9f25                	0x9f25
      e0:	051c                	addi	a5,sp,640
      e2:	0000                	unimp
      e4:	0520                	addi	s0,sp,648
      e6:	0000                	unimp
          & 1;  /* bit 7 indicates if the function result has been cached */
      e8:	0006                	c.slli	zero,0x1
      ea:	935a                	add	t1,t1,s6
      ec:	5b04                	lw	s1,48(a4)
      ee:	05200493          	li	s1,82
      f2:	0000                	unimp
      f4:	078c                	addi	a1,sp,960
      f6:	0000                	unimp
      f8:	0006                	c.slli	zero,0x1
      fa:	0af503f3          	0xaf503f3
    ee_u8  optype
      fe:	9f25                	0x9f25
     100:	078c                	addi	a1,sp,960
     102:	0000                	unimp
    if (optype) /* if cached, use cache */
     104:	0794                	addi	a3,sp,960
     106:	0000                	unimp
     108:	0006                	c.slli	zero,0x1
     10a:	935a                	add	t1,t1,s6
        return (data & 0x007f);
     10c:	5b04                	lw	s1,48(a4)
     10e:	07940493          	addi	s1,s0,121
     112:	0000                	unimp
     114:	07d8                	addi	a4,sp,964
     116:	0000                	unimp
     118:	0006                	c.slli	zero,0x1
     11a:	0af503f3          	0xaf503f3
     11e:	9f25                	0x9f25
	...
               & 0xf);       /* bits 3-6 is specific data for the operation */
     12c:	0060                	addi	s0,sp,12
     12e:	0000                	unimp
     130:	0006                	c.slli	zero,0x1
     132:	935c                	0x935c
     134:	5d04                	lw	s1,56(a0)
     136:	00600493          	li	s1,6
     13a:	0000                	unimp
        ee_s16 dtype
     13c:	07d8                	addi	a4,sp,964
     13e:	0000                	unimp
     140:	0006                	c.slli	zero,0x1
     142:	0cf503f3          	0xcf503f3
        dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
     146:	9f25                	0x9f25
	...
     154:	00a4                	addi	s1,sp,72
     156:	0000                	unimp
     158:	0002                	c.slli64	zero
     15a:	9f30                	0x9f30
     15c:	00ac                	addi	a1,sp,72
     15e:	0000                	unimp
        switch (flag)
     160:	01c0                	addi	s0,sp,196
     162:	0000                	unimp
     164:	0002                	c.slli64	zero
     166:	9f30                	0x9f30
     168:	01cc                	addi	a1,sp,196
     16a:	0000                	unimp
     16c:	02bc                	addi	a5,sp,328
     16e:	0000                	unimp
     170:	0002                	c.slli64	zero
     172:	9f30                	0x9f30
                if (dtype < 0x22) /* set min period for bit corruption */
     174:	0304                	addi	s1,sp,384
     176:	0000                	unimp
     178:	0594                	addi	a3,sp,704
     17a:	0000                	unimp
     17c:	0002                	c.slli64	zero
     17e:	9f30                	0x9f30
                    dtype = 0x22;
     180:	05b4                	addi	a3,sp,712
     182:	0000                	unimp
     184:	06f8                	addi	a4,sp,844
     186:	0000                	unimp
                retval = core_bench_state(res->size,
     188:	0002                	c.slli64	zero
     18a:	9f30                	0x9f30
     18c:	078c                	addi	a1,sp,960
     18e:	0000                	unimp
                                          res->memblock[3],
     190:	07bc                	addi	a5,sp,968
     192:	0000                	unimp
     194:	0002                	c.slli64	zero
     196:	9f30                	0x9f30
	...
                retval = core_bench_state(res->size,
     1a0:	003c                	addi	a5,sp,8
     1a2:	0000                	unimp
     1a4:	00a4                	addi	s1,sp,72
     1a6:	0000                	unimp
     1a8:	0001                	nop
     1aa:	ac59                	j	440 <copy_info+0x38>
     1ac:	0000                	unimp
     1ae:	bc00                	fsd	fs0,56(s0)
     1b0:	0002                	c.slli64	zero
     1b2:	0100                	addi	s0,sp,128
     1b4:	5900                	lw	s0,48(a0)
     1b6:	02e4                	addi	s1,sp,332
     1b8:	0000                	unimp
     1ba:	02f4                	addi	a3,sp,332
     1bc:	0000                	unimp
     1be:	0001                	nop
                if (res->crcstate == 0)
     1c0:	0459                	addi	s0,s0,22
     1c2:	60000003          	lb	zero,1536(zero) # 600 <core_bench_list+0x1b4>
     1c6:	01000003          	lb	zero,16(zero) # 10 <_start>
     1ca:	5900                	lw	s0,48(a0)
                    res->crcstate = retval;
     1cc:	0368                	addi	a0,sp,396
     1ce:	0000                	unimp
     1d0:	03b8                	addi	a4,sp,456
     1d2:	0000                	unimp
     1d4:	0001                	nop
     1d6:	d459                	beqz	s0,164 <calc_func+0xa0>
                break;
     1d8:	5c000003          	lb	zero,1472(zero) # 5c0 <core_bench_list+0x174>
                retval = core_bench_matrix(&(res->mat), dtype, res->crc);
     1dc:	0004                	0x4
     1de:	0100                	addi	s0,sp,128
     1e0:	5900                	lw	s0,48(a0)
     1e2:	0460                	addi	s0,sp,524
     1e4:	0000                	unimp
     1e6:	04d8                	addi	a4,sp,580
     1e8:	0000                	unimp
     1ea:	0001                	nop
     1ec:	dc59                	beqz	s0,18a <calc_func+0xc6>
     1ee:	0004                	0x4
     1f0:	4800                	lw	s0,16(s0)
     1f2:	0005                	c.nop	1
     1f4:	0100                	addi	s0,sp,128
     1f6:	5900                	lw	s0,48(a0)
     1f8:	054c                	addi	a1,sp,644
     1fa:	0000                	unimp
     1fc:	05a8                	addi	a0,sp,712
     1fe:	0000                	unimp
     200:	0001                	nop
     202:	ac59                	j	498 <core_bench_list+0x4c>
     204:	0005                	c.nop	1
     206:	e400                	fsw	fs0,8(s0)
                if (res->crcmatrix == 0)
     208:	0005                	c.nop	1
     20a:	0100                	addi	s0,sp,128
     20c:	5900                	lw	s0,48(a0)
     20e:	0654                	addi	a3,sp,772
     210:	0000                	unimp
     212:	0668                	addi	a0,sp,780
                    res->crcmatrix = retval;
     214:	0000                	unimp
     216:	0001                	nop
     218:	d059                	beqz	s0,19e <calc_func+0xda>
     21a:	0006                	c.slli	zero,0x1
     21c:	f800                	fsw	fs0,48(s0)
     21e:	0006                	c.slli	zero,0x1
                break;
     220:	0100                	addi	s0,sp,128
     222:	5900                	lw	s0,48(a0)
                retval = data;
     224:	078c                	addi	a1,sp,960
     226:	0000                	unimp
     228:	07b0                	addi	a2,sp,968
     22a:	0000                	unimp
                break;
     22c:	0001                	nop
     22e:	b459                	j	fffffcb4 <RAM_SIZE+0xfffefcb4>
                break;
     230:	c4000007          	vluxseg7ei8.v	v0,(zero),v0,v0.t
     234:	01000007          	vle8ff.v	v0,(zero),v0.t
                break;
     238:	5900                	lw	s0,48(a0)
	...
        res->crc = crcu16(retval, res->crc);
     242:	0028                	addi	a0,sp,8
     244:	0000                	unimp
     246:	0098                	addi	a4,sp,64
     248:	0000                	unimp
     24a:	0001                	nop
     24c:	9c58                	0x9c58
     24e:	0000                	unimp
     250:	a800                	fsd	fs0,16(s0)
     252:	0000                	unimp
     254:	0100                	addi	s0,sp,128
     256:	5800                	lw	s0,48(s0)
     258:	00ac                	addi	a1,sp,72
     25a:	0000                	unimp
     25c:	0108                	addi	a0,sp,128
     25e:	0000                	unimp
     260:	0001                	nop
     262:	4858                	lw	a4,20(s0)
        retval &= 0x007f;
     264:	0001                	nop
     266:	2800                	fld	fs0,16(s0)
     268:	0002                	c.slli64	zero
     26a:	0100                	addi	s0,sp,128
     26c:	5800                	lw	s0,48(s0)
     26e:	022c                	addi	a1,sp,264
        *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
     270:	0000                	unimp
     272:	02bc                	addi	a5,sp,328
     274:	0000                	unimp
     276:	0001                	nop
     278:	e458                	fsw	fa4,12(s0)
     27a:	0002                	c.slli64	zero
     27c:	0000                	unimp
     27e:	01000003          	lb	zero,16(zero) # 10 <_start>
     282:	5800                	lw	s0,48(s0)
     284:	0304                	addi	s1,sp,384
     286:	0000                	unimp
     288:	0330                	addi	a2,sp,392
     28a:	0000                	unimp
     28c:	0001                	nop
     28e:	3058                	fld	fa4,160(s0)
     290:	34000003          	lb	zero,832(zero) # 340 <cmp_idx+0x18>
     294:	03000003          	lb	zero,48(zero) # 30 <_start+0x20>
     298:	7d00                	flw	fs0,56(a0)
     29a:	9f7f                	0x9f7f
     29c:	0334                	addi	a3,sp,392
     29e:	0000                	unimp
     2a0:	0364                	addi	s1,sp,396
     2a2:	0000                	unimp
        return retval;
     2a4:	0001                	nop
     2a6:	6858                	flw	fa4,20(s0)
}
     2a8:	b8000003          	lb	zero,-1152(zero) # fffffb80 <RAM_SIZE+0xfffefb80>
     2ac:	01000003          	lb	zero,16(zero) # 10 <_start>
     2b0:	5800                	lw	s0,48(s0)
     2b2:	03d4                	addi	a3,sp,452
     2b4:	0000                	unimp
     2b6:	0474                	addi	a3,sp,524
     2b8:	0000                	unimp
     2ba:	0001                	nop
{
     2bc:	7858                	flw	fa4,52(s0)
     2be:	0004                	0x4
     2c0:	d400                	sw	s0,40(s0)
     2c2:	0004                	0x4
     2c4:	0100                	addi	s0,sp,128
     2c6:	5800                	lw	s0,48(s0)
     2c8:	04dc                	addi	a5,sp,580
     2ca:	0000                	unimp
     2cc:	0544                	addi	s1,sp,644
     2ce:	0000                	unimp
     2d0:	0001                	nop
     2d2:	4c58                	lw	a4,28(s0)
     2d4:	0005                	c.nop	1
     2d6:	e400                	fsw	fs0,8(s0)
    ee_s16 val1 = calc_func(&(a->data16), res);
     2d8:	0005                	c.nop	1
     2da:	0100                	addi	s0,sp,128
     2dc:	5800                	lw	s0,48(s0)
     2de:	0654                	addi	a3,sp,772
     2e0:	0000                	unimp
     2e2:	0664                	addi	s1,sp,780
     2e4:	0000                	unimp
     2e6:	0001                	nop
     2e8:	d058                	sw	a4,36(s0)
     2ea:	0006                	c.slli	zero,0x1
     2ec:	dc00                	sw	s0,56(s0)
     2ee:	0006                	c.slli	zero,0x1
    ee_s16 val2 = calc_func(&(b->data16), res);
     2f0:	0100                	addi	s0,sp,128
     2f2:	5800                	lw	s0,48(s0)
     2f4:	06e0                	addi	s0,sp,844
     2f6:	0000                	unimp
     2f8:	06f0                	addi	a2,sp,844
     2fa:	0000                	unimp
     2fc:	0001                	nop
     2fe:	8c58                	0x8c58
     300:	90000007          	vlseg5e128.v	v0,(zero),v0.t
     304:	01000007          	vle8ff.v	v0,(zero),v0.t
    return val1 - val2;
     308:	5800                	lw	s0,48(s0)
     30a:	0794                	addi	a3,sp,960
     30c:	0000                	unimp
     30e:	07a0                	addi	s0,sp,968
     310:	0000                	unimp
     312:	0001                	nop
}
     314:	a458                	fsd	fa4,136(s0)
     316:	ac000007          	vloxseg6ei8.v	v0,(zero),v0,v0.t
     31a:	01000007          	vle8ff.v	v0,(zero),v0.t
     31e:	5800                	lw	s0,48(s0)
     320:	07b4                	addi	a3,sp,968
     322:	0000                	unimp
     324:	07cc                	addi	a1,sp,964
     326:	0000                	unimp
{
     328:	0001                	nop
     32a:	0058                	addi	a4,sp,4
	...
     334:	0000                	unimp
     336:	5c00                	lw	s0,56(s0)
     338:	0000                	unimp
     33a:	0100                	addi	s0,sp,128
     33c:	5a00                	lw	s0,48(a2)
     33e:	005c                	addi	a5,sp,4
    if (res == NULL)
     340:	0000                	unimp
     342:	0094                	addi	a3,sp,64
     344:	0000                	unimp
     346:	0001                	nop
        a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16 >> 8));
     348:	00009c5b          	0x9c5b
     34c:	a400                	fsd	fs0,8(s0)
     34e:	0000                	unimp
     350:	0100                	addi	s0,sp,128
     352:	5b00                	lw	s0,48(a4)
     354:	00ac                	addi	a1,sp,72
     356:	0000                	unimp
     358:	0108                	addi	a0,sp,128
     35a:	0000                	unimp
     35c:	0001                	nop
     35e:	0001485b          	0x1485b
     362:	a800                	fsd	fs0,16(s0)
     364:	0001                	nop
     366:	0100                	addi	s0,sp,128
     368:	5b00                	lw	s0,48(a4)
     36a:	01b8                	addi	a4,sp,200
     36c:	0000                	unimp
     36e:	01c8                	addi	a0,sp,196
     370:	0000                	unimp
     372:	0001                	nop
     374:	0001cc5b          	0x1cc5b
     378:	0400                	addi	s0,sp,512
     37a:	0002                	c.slli64	zero
     37c:	0100                	addi	s0,sp,128
     37e:	5b00                	lw	s0,48(a4)
     380:	0210                	addi	a2,sp,256
     382:	0000                	unimp
     384:	022c                	addi	a1,sp,264
     386:	0000                	unimp
     388:	0001                	nop
     38a:	2c5a                	fld	fs8,400(sp)
     38c:	0002                	c.slli64	zero
     38e:	5800                	lw	s0,48(s0)
     390:	0002                	c.slli64	zero
     392:	0100                	addi	s0,sp,128
        b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16 >> 8));
     394:	5b00                	lw	s0,48(a4)
     396:	0260                	addi	s0,sp,268
     398:	0000                	unimp
     39a:	02a8                	addi	a0,sp,328
     39c:	0000                	unimp
     39e:	0001                	nop
     3a0:	0002e45b          	0x2e45b
     3a4:	fc00                	fsw	fs0,56(s0)
     3a6:	0002                	c.slli64	zero
     3a8:	0100                	addi	s0,sp,128
     3aa:	5b00                	lw	s0,48(a4)
     3ac:	0304                	addi	s1,sp,384
     3ae:	0000                	unimp
     3b0:	0328                	addi	a0,sp,392
     3b2:	0000                	unimp
     3b4:	0001                	nop
     3b6:	0003345b          	0x3345b
     3ba:	6000                	flw	fs0,0(s0)
     3bc:	01000003          	lb	zero,16(zero) # 10 <_start>
     3c0:	5b00                	lw	s0,48(a4)
     3c2:	0368                	addi	a0,sp,396
     3c4:	0000                	unimp
     3c6:	03b8                	addi	a4,sp,456
     3c8:	0000                	unimp
     3ca:	0001                	nop
     3cc:	0003d45b          	0x3d45b
     3d0:	4c00                	lw	s0,24(s0)
     3d2:	0004                	0x4
     3d4:	0100                	addi	s0,sp,128
     3d6:	5b00                	lw	s0,48(a4)
     3d8:	0460                	addi	s0,sp,524
     3da:	0000                	unimp
     3dc:	0470                	addi	a2,sp,524
     3de:	0000                	unimp
    return a->idx - b->idx;
     3e0:	0001                	nop
     3e2:	0004785b          	0x4785b
     3e6:	b000                	fsd	fs0,32(s0)
     3e8:	0004                	0x4
     3ea:	0100                	addi	s0,sp,128
     3ec:	5b00                	lw	s0,48(a4)
     3ee:	04bc                	addi	a5,sp,584
     3f0:	0000                	unimp
     3f2:	04dc                	addi	a5,sp,580
     3f4:	0000                	unimp
     3f6:	0001                	nop
}
     3f8:	dc5a                	sw	s6,56(sp)
     3fa:	0004                	0x4
     3fc:	0800                	addi	s0,sp,16
     3fe:	0005                	c.nop	1
     400:	0100                	addi	s0,sp,128
     402:	5b00                	lw	s0,48(a4)
     404:	0510                	addi	a2,sp,640
     406:	0000                	unimp
{
     408:	0544                	addi	s1,sp,644
     40a:	0000                	unimp
     40c:	0001                	nop
     40e:	00054c5b          	0x54c5b
     412:	7000                	flw	fs0,32(s0)
     414:	0005                	c.nop	1
     416:	0100                	addi	s0,sp,128
     418:	5b00                	lw	s0,48(a4)
     41a:	0580                	addi	s0,sp,704
    to->data16 = from->data16;
     41c:	0000                	unimp
     41e:	0584                	addi	s1,sp,704
     420:	0000                	unimp
     422:	0001                	nop
     424:	0005945b          	0x5945b
     428:	a400                	fsd	fs0,8(s0)
     42a:	0005                	c.nop	1
    to->idx    = from->idx;
     42c:	0100                	addi	s0,sp,128
     42e:	5b00                	lw	s0,48(a4)
     430:	05ac                	addi	a1,sp,712
     432:	0000                	unimp
     434:	05e4                	addi	s1,sp,716
     436:	0000                	unimp
     438:	0001                	nop
     43a:	0006545b          	0x6545b
}
     43e:	5800                	lw	s0,48(s0)
     440:	0006                	c.slli	zero,0x1
     442:	0100                	addi	s0,sp,128
     444:	5b00                	lw	s0,48(a4)
     446:	06d0                	addi	a2,sp,836
     448:	0000                	unimp
     44a:	06d8                	addi	a4,sp,836
{
     44c:	0000                	unimp
     44e:	0001                	nop
     450:	0006e05b          	0x6e05b
     454:	e800                	fsw	fs0,16(s0)
     456:	0006                	c.slli	zero,0x1
     458:	0100                	addi	s0,sp,128
     45a:	5b00                	lw	s0,48(a4)
     45c:	06ec                	addi	a1,sp,844
     45e:	0000                	unimp
     460:	06f0                	addi	a2,sp,844
     462:	0000                	unimp
     464:	0001                	nop
     466:	00078c5b          	0x78c5b
    ee_u16     retval = 0;
     46a:	9c00                	0x9c00
    ee_u16     found = 0, missed = 0;
     46c:	01000007          	vle8ff.v	v0,(zero),v0.t
     470:	5b00                	lw	s0,48(a4)
     472:	07a4                	addi	s1,sp,968
    list_head *list     = res->list;
     474:	0000                	unimp
     476:	07ac                	addi	a1,sp,968
     478:	0000                	unimp
     47a:	0001                	nop
     47c:	0007bc5b          	0x7bc5b
    ee_s16     find_num = res->seed3;
     480:	c000                	sw	s0,0(s0)
     482:	01000007          	vle8ff.v	v0,(zero),v0.t
     486:	5b00                	lw	s0,48(a4)
	...
    info.idx = finder_idx;
     490:	0010                	0x10
     492:	0000                	unimp
    for (i = 0; i < find_num; i++)
     494:	0024                	addi	s1,sp,8
     496:	0000                	unimp
     498:	0001                	nop
     49a:	245f 0000 3c00      	0x3c000000245f
        info.data16 = (i & 0xff);
     4a0:	0000                	unimp
     4a2:	0900                	addi	s0,sp,144
     4a4:	7b00                	flw	fs0,48(a4)
     4a6:	0c00                	addi	s0,sp,528
     4a8:	ffff                	0xffff
     4aa:	9f1a000f          	0x9f1a000f
     4ae:	003c                	addi	a5,sp,8
        this_find   = core_list_find(list, &info);
     4b0:	0000                	unimp
     4b2:	008c                	addi	a1,sp,64
     4b4:	0000                	unimp
     4b6:	0001                	nop
     4b8:	9c5f 0000 a400      	0xa40000009c5f
     4be:	0000                	unimp
     4c0:	0100                	addi	s0,sp,128
     4c2:	5f00                	lw	s0,56(a4)
        list        = core_list_reverse(list);
     4c4:	00ac                	addi	a1,sp,72
     4c6:	0000                	unimp
     4c8:	0104                	addi	s1,sp,128
     4ca:	0000                	unimp
     4cc:	0001                	nop
     4ce:	485f 0001 ac00      	0xac000001485f
        if (this_find == NULL)
     4d4:	0001                	nop
     4d6:	0100                	addi	s0,sp,128
            missed++;
     4d8:	5f00                	lw	s0,56(a4)
     4da:	01b8                	addi	a4,sp,200
     4dc:	0000                	unimp
     4de:	01c4                	addi	s1,sp,196
     4e0:	0000                	unimp
     4e2:	0001                	nop
            retval += (list->next->info->data16 >> 8) & 1;
     4e4:	cc5f 0001 1c00      	0x1c000001cc5f
     4ea:	0002                	c.slli64	zero
     4ec:	0100                	addi	s0,sp,128
     4ee:	5f00                	lw	s0,56(a4)
     4f0:	022c                	addi	a1,sp,264
     4f2:	0000                	unimp
     4f4:	0258                	addi	a4,sp,260
     4f6:	0000                	unimp
     4f8:	0001                	nop
     4fa:	605f 0002 9400      	0x94000002605f
     500:	0002                	c.slli64	zero
     502:	0100                	addi	s0,sp,128
     504:	5f00                	lw	s0,56(a4)
     506:	02e4                	addi	s1,sp,332
     508:	0000                	unimp
     50a:	02f8                	addi	a4,sp,332
     50c:	0000                	unimp
     50e:	0001                	nop
     510:	045f 0003 1800      	0x18000003045f
     516:	01000003          	lb	zero,16(zero) # 10 <_start>
     51a:	5f00                	lw	s0,56(a4)
     51c:	0334                	addi	a3,sp,392
     51e:	0000                	unimp
     520:	0358                	addi	a4,sp,388
     522:	0000                	unimp
            found++;
     524:	0001                	nop
     526:	685f 0003 b400      	0xb4000003685f
     52c:	01000003          	lb	zero,16(zero) # 10 <_start>
            if (this_find->info->data16 & 0x1) /* use found value */
     530:	5f00                	lw	s0,56(a4)
     532:	03d4                	addi	a3,sp,452
     534:	0000                	unimp
     536:	0450                	addi	a2,sp,516
     538:	0000                	unimp
     53a:	0001                	nop
     53c:	605f 0004 6c00      	0x6c000004605f
     542:	0004                	0x4
     544:	0100                	addi	s0,sp,128
     546:	5f00                	lw	s0,56(a4)
     548:	0478                	addi	a4,sp,524
     54a:	0000                	unimp
                retval += (this_find->info->data16 >> 9) & 1;
     54c:	04c8                	addi	a0,sp,580
     54e:	0000                	unimp
     550:	0001                	nop
     552:	dc5f 0004 0800      	0x8000004dc5f
     558:	0005                	c.nop	1
     55a:	0100                	addi	s0,sp,128
     55c:	5f00                	lw	s0,56(a4)
     55e:	0510                	addi	a2,sp,640
     560:	0000                	unimp
     562:	0540                	addi	s0,sp,644
     564:	0000                	unimp
     566:	0001                	nop
     568:	4c5f 0005 7400      	0x740000054c5f
     56e:	0005                	c.nop	1
     570:	0100                	addi	s0,sp,128
     572:	5f00                	lw	s0,56(a4)
     574:	0580                	addi	s0,sp,704
     576:	0000                	unimp
     578:	058c                	addi	a1,sp,704
     57a:	0000                	unimp
     57c:	0001                	nop
     57e:	945f 0005 a000      	0xa0000005945f
            if (this_find->next != NULL)
     584:	0005                	c.nop	1
     586:	0100                	addi	s0,sp,128
     588:	5f00                	lw	s0,56(a4)
     58a:	05ac                	addi	a1,sp,712
     58c:	0000                	unimp
     58e:	05d8                	addi	a4,sp,708
                finder          = this_find->next;
     590:	0000                	unimp
     592:	0001                	nop
     594:	545f 0006 6000      	0x60000006545f
     59a:	0006                	c.slli	zero,0x1
                this_find->next = finder->next;
     59c:	0100                	addi	s0,sp,128
     59e:	5f00                	lw	s0,56(a4)
     5a0:	06d0                	addi	a2,sp,836
     5a2:	0000                	unimp
     5a4:	06d4                	addi	a3,sp,836
     5a6:	0000                	unimp
     5a8:	0001                	nop
     5aa:	e05f 0006 e400      	0xe4000006e05f
                finder->next    = list->next;
     5b0:	0006                	c.slli	zero,0x1
     5b2:	0100                	addi	s0,sp,128
     5b4:	5f00                	lw	s0,56(a4)
     5b6:	06ec                	addi	a1,sp,844
     5b8:	0000                	unimp
     5ba:	06f0                	addi	a2,sp,844
                list->next      = finder;
     5bc:	0000                	unimp
     5be:	0001                	nop
     5c0:	8c5f 0007 9800      	0x980000078c5f
     5c6:	01000007          	vle8ff.v	v0,(zero),v0.t
        if (info.idx >= 0)
     5ca:	5f00                	lw	s0,56(a4)
     5cc:	07a4                	addi	s1,sp,968
     5ce:	0000                	unimp
            info.idx++;
     5d0:	07a8                	addi	a0,sp,968
     5d2:	0000                	unimp
     5d4:	0001                	nop
     5d6:	b45f 0007 b800      	0xb8000007b45f
     5dc:	01000007          	vle8ff.v	v0,(zero),v0.t
     5e0:	5f00                	lw	s0,56(a4)
     5e2:	07bc                	addi	a5,sp,968
     5e4:	0000                	unimp
     5e6:	07c8                	addi	a0,sp,964
     5e8:	0000                	unimp
     5ea:	0001                	nop
     5ec:	005f 0000 0000      	0x5f
     5f2:	0000                	unimp
    for (i = 0; i < find_num; i++)
     5f4:	5c00                	lw	s0,56(s0)
     5f6:	0000                	unimp
     5f8:	7400                	flw	fs0,40(s0)
     5fa:	0000                	unimp
     5fc:	0100                	addi	s0,sp,128
     5fe:	5d00                	lw	s0,56(a0)
     600:	00ac                	addi	a1,sp,72
     602:	0000                	unimp
     604:	00b0                	addi	a2,sp,72
     606:	0000                	unimp
     608:	0001                	nop
     60a:	885d                	andi	s0,s0,23
     60c:	0001                	nop
     60e:	9800                	0x9800
     610:	0001                	nop
     612:	0100                	addi	s0,sp,128
     614:	5d00                	lw	s0,56(a0)
     616:	01cc                	addi	a1,sp,196
     618:	0000                	unimp
     61a:	01d0                	addi	a2,sp,196
    retval += found * 4 - missed;
     61c:	0000                	unimp
     61e:	0001                	nop
     620:	6c5d                	lui	s8,0x17
     622:	0002                	c.slli64	zero
     624:	7000                	flw	fs0,32(s0)
     626:	0002                	c.slli64	zero
     628:	0100                	addi	s0,sp,128
     62a:	5d00                	lw	s0,56(a0)
     62c:	0334                	addi	a3,sp,392
     62e:	0000                	unimp
     630:	0340                	addi	s0,sp,388
     632:	0000                	unimp
     634:	0001                	nop
     636:	d45d                	beqz	s0,5e4 <core_bench_list+0x198>
     638:	d8000003          	lb	zero,-640(zero) # fffffd80 <RAM_SIZE+0xfffefd80>
     63c:	01000003          	lb	zero,16(zero) # 10 <_start>
     640:	5d00                	lw	s0,56(a0)
     642:	042c                	addi	a1,sp,520
     644:	0000                	unimp
     646:	05e4                	addi	s1,sp,716
    if (finder_idx > 0)
     648:	0000                	unimp
     64a:	0001                	nop
     64c:	545d                	li	s0,-9
     64e:	0006                	c.slli	zero,0x1
        list = core_list_mergesort(list, cmp_complex, res);
     650:	6800                	flw	fs0,16(s0)
     652:	0006                	c.slli	zero,0x1
     654:	0100                	addi	s0,sp,128
     656:	5d00                	lw	s0,56(a0)
     658:	0794                	addi	a3,sp,960
     65a:	0000                	unimp
     65c:	07cc                	addi	a1,sp,964
     65e:	0000                	unimp
     660:	0001                	nop
     662:	005d                	c.nop	23
    remover = core_list_remove(list->next);
     664:	0000                	unimp
     666:	0000                	unimp
     668:	0000                	unimp
     66a:	5c00                	lw	s0,56(s0)
     66c:	0000                	unimp
     66e:	bc00                	fsd	fs0,56(s0)
     670:	0002                	c.slli64	zero
     672:	0100                	addi	s0,sp,128
     674:	5600                	lw	s0,40(a2)
     676:	02e4                	addi	s1,sp,332
    finder = core_list_find(list, &info);
     678:	0000                	unimp
     67a:	000005ef          	jal	a1,67a <core_bench_list+0x22e>
     67e:	0001                	nop
     680:	5456                	lw	s0,116(sp)
     682:	0006                	c.slli	zero,0x1
     684:	6f00                	flw	fs0,24(a4)
     686:	0006                	c.slli	zero,0x1
     688:	0100                	addi	s0,sp,128
     68a:	5600                	lw	s0,40(a2)
    if (!finder)
     68c:	06d0                	addi	a2,sp,836
     68e:	0000                	unimp
     690:	06f8                	addi	a4,sp,844
     692:	0000                	unimp
        finder = list->next;
     694:	0001                	nop
     696:	8c56                	mv	s8,s5
     698:	cc000007          	vloxseg7ei8.v	v0,(zero),v0,v0.t
     69c:	01000007          	vle8ff.v	v0,(zero),v0.t
    while (finder)
     6a0:	5600                	lw	s0,40(a2)
	...
        retval = crc16(list->info->data16, retval);
     6aa:	005c                	addi	a5,sp,4
     6ac:	0000                	unimp
     6ae:	0084                	addi	s1,sp,64
     6b0:	0000                	unimp
     6b2:	0001                	nop
     6b4:	9c5c                	0x9c5c
     6b6:	0000                	unimp
     6b8:	a400                	fsd	fs0,8(s0)
     6ba:	0000                	unimp
     6bc:	0100                	addi	s0,sp,128
     6be:	5c00                	lw	s0,56(s0)
     6c0:	00ac                	addi	a1,sp,72
     6c2:	0000                	unimp
     6c4:	00e4                	addi	s1,sp,76
     6c6:	0000                	unimp
        finder = finder->next;
     6c8:	0001                	nop
     6ca:	f05c                	fsw	fa5,36(s0)
     6cc:	0000                	unimp
     6ce:	f800                	fsw	fs0,48(s0)
     6d0:	0000                	unimp
     6d2:	0100                	addi	s0,sp,128
    while (finder)
     6d4:	5c00                	lw	s0,56(s0)
     6d6:	0148                	addi	a0,sp,132
     6d8:	0000                	unimp
     6da:	016c                	addi	a1,sp,140
    remover = core_list_undo_remove(remover, list->next);
     6dc:	0000                	unimp
     6de:	0001                	nop
     6e0:	7c5c                	flw	fa5,60(s0)
     6e2:	0001                	nop
     6e4:	8000                	0x8000
     6e6:	0001                	nop
     6e8:	0100                	addi	s0,sp,128
     6ea:	5c00                	lw	s0,56(s0)
     6ec:	0188                	addi	a0,sp,192
     6ee:	0000                	unimp
     6f0:	01b0                	addi	a2,sp,200
     6f2:	0000                	unimp
    list = core_list_mergesort(list, cmp_idx, NULL);
     6f4:	0001                	nop
     6f6:	b85c                	fsd	fa5,176(s0)
     6f8:	0001                	nop
     6fa:	2000                	fld	fs0,0(s0)
     6fc:	0002                	c.slli64	zero
     6fe:	0100                	addi	s0,sp,128
     700:	5c00                	lw	s0,56(s0)
     702:	022c                	addi	a1,sp,264
     704:	0000                	unimp
     706:	0290                	addi	a2,sp,320
    finder = list->next;
     708:	0000                	unimp
     70a:	0001                	nop
     70c:	e45c                	fsw	fa5,12(s0)
     70e:	0002                	c.slli64	zero
     710:	ec00                	fsw	fs0,24(s0)
     712:	0002                	c.slli64	zero
    while (finder)
     714:	0100                	addi	s0,sp,128
     716:	5c00                	lw	s0,56(s0)
        retval = crc16(list->info->data16, retval);
     718:	0304                	addi	s1,sp,384
     71a:	0000                	unimp
     71c:	0310                	addi	a2,sp,384
     71e:	0000                	unimp
     720:	0001                	nop
     722:	345c                	fld	fa5,168(s0)
     724:	50000003          	lb	zero,1280(zero) # 500 <core_bench_list+0xb4>
     728:	01000003          	lb	zero,16(zero) # 10 <_start>
     72c:	5c00                	lw	s0,56(s0)
     72e:	0368                	addi	a0,sp,396
     730:	0000                	unimp
     732:	0394                	addi	a3,sp,448
     734:	0000                	unimp
     736:	0001                	nop
     738:	a05c                	fsd	fa5,128(s0)
     73a:	a8000003          	lb	zero,-1408(zero) # fffffa80 <RAM_SIZE+0xfffefa80>
        finder = finder->next;
     73e:	01000003          	lb	zero,16(zero) # 10 <_start>
     742:	5c00                	lw	s0,56(s0)
     744:	03d4                	addi	a3,sp,452
     746:	0000                	unimp
    while (finder)
     748:	0410                	addi	a2,sp,512
     74a:	0000                	unimp
     74c:	0001                	nop
     74e:	205c                	fld	fa5,128(s0)
    return retval;
     750:	0004                	0x4
     752:	2400                	fld	fs0,8(s0)
}
     754:	0004                	0x4
     756:	0100                	addi	s0,sp,128
     758:	5c00                	lw	s0,56(s0)
     75a:	042c                	addi	a1,sp,520
     75c:	0000                	unimp
     75e:	0454                	addi	a3,sp,516
     760:	0000                	unimp
     762:	0001                	nop
     764:	605c                	flw	fa5,4(s0)
     766:	0004                	0x4
{
     768:	cc00                	sw	s0,24(s0)
     76a:	0004                	0x4
     76c:	0100                	addi	s0,sp,128
     76e:	5c00                	lw	s0,56(s0)
     770:	04dc                	addi	a5,sp,580
     772:	0000                	unimp
     774:	0544                	addi	s1,sp,644
     776:	0000                	unimp
     778:	0001                	nop
     77a:	4c5c                	lw	a5,28(s0)
     77c:	0005                	c.nop	1
     77e:	7800                	flw	fs0,48(s0)
     780:	0005                	c.nop	1
     782:	0100                	addi	s0,sp,128
     784:	5c00                	lw	s0,56(s0)
     786:	0580                	addi	s0,sp,704
    ee_u32 per_item = 16 + sizeof(struct list_data_s);
     788:	0000                	unimp
     78a:	05dc                	addi	a5,sp,708
     78c:	0000                	unimp
     78e:	0001                	nop
    ee_u32 size     = (blksize / per_item)
     790:	545c                	lw	a5,44(s0)
     792:	0006                	c.slli	zero,0x1
     794:	6800                	flw	fs0,16(s0)
     796:	0006                	c.slli	zero,0x1
     798:	0100                	addi	s0,sp,128
     79a:	5c00                	lw	s0,56(s0)
     79c:	06d0                	addi	a2,sp,836
     79e:	0000                	unimp
     7a0:	06f0                	addi	a2,sp,844
     7a2:	0000                	unimp
     7a4:	0001                	nop
     7a6:	8c5c                	0x8c5c
    list_head *memblock_end  = memblock + size;
     7a8:	cc000007          	vloxseg7ei8.v	v0,(zero),v0,v0.t
     7ac:	01000007          	vle8ff.v	v0,(zero),v0.t
     7b0:	5c00                	lw	s0,56(s0)
	...
     7ba:	005c                	addi	a5,sp,4
    list_data *datablock     = (list_data *)(memblock_end);
     7bc:	0000                	unimp
     7be:	0100                	addi	s0,sp,128
     7c0:	0000                	unimp
     7c2:	0001                	nop
    list_data *datablock_end = datablock + size;
     7c4:	485e                	lw	a6,212(sp)
     7c6:	0001                	nop
     7c8:	7400                	flw	fs0,40(s0)
     7ca:	0001                	nop
     7cc:	0100                	addi	s0,sp,128
     7ce:	5e00                	lw	s0,56(a2)
     7d0:	017c                	addi	a5,sp,140
     7d2:	0000                	unimp
     7d4:	02a0                	addi	s0,sp,328
     7d6:	0000                	unimp
    list_head *finder, *list = memblock;
     7d8:	0001                	nop
     7da:	e45e                	fsw	fs7,8(sp)
     7dc:	0002                	c.slli64	zero
     7de:	b000                	fsd	fs0,32(s0)
    list->next         = NULL;
     7e0:	01000003          	lb	zero,16(zero) # 10 <_start>
     7e4:	5e00                	lw	s0,56(a2)
     7e6:	03d4                	addi	a3,sp,452
    list->info         = datablock;
     7e8:	0000                	unimp
     7ea:	0418                	addi	a4,sp,512
     7ec:	0000                	unimp
     7ee:	0001                	nop
     7f0:	205e                	fld	ft0,464(sp)
     7f2:	0004                	0x4
    list->info->idx    = 0x0000;
     7f4:	e400                	fsw	fs0,8(s0)
     7f6:	0005                	c.nop	1
     7f8:	0100                	addi	s0,sp,128
     7fa:	5e00                	lw	s0,56(a2)
     7fc:	0654                	addi	a3,sp,772
     7fe:	0000                	unimp
    list->info->data16 = (ee_s16)0x8080;
     800:	0668                	addi	a0,sp,780
     802:	0000                	unimp
     804:	0001                	nop
     806:	d05e                	sw	s7,32(sp)
     808:	0006                	c.slli	zero,0x1
     80a:	f000                	fsw	fs0,32(s0)
     80c:	0006                	c.slli	zero,0x1
     80e:	0100                	addi	s0,sp,128
     810:	5e00                	lw	s0,56(a2)
     812:	078c                	addi	a1,sp,960
    memblock++;
     814:	0000                	unimp
     816:	07cc                	addi	a1,sp,964
     818:	0000                	unimp
     81a:	0001                	nop
     81c:	005e                	c.slli	zero,0x17
     81e:	0000                	unimp
    datablock++;
     820:	0000                	unimp
     822:	0000                	unimp
     824:	6800                	flw	fs0,16(s0)
     826:	0000                	unimp
     828:	a400                	fsd	fs0,8(s0)
     82a:	0000                	unimp
    info.idx    = 0x7fff;
     82c:	0100                	addi	s0,sp,128
     82e:	5900                	lw	s0,48(a0)
     830:	00ac                	addi	a1,sp,72
     832:	0000                	unimp
     834:	02f0                	addi	a2,sp,332
     836:	0000                	unimp
    info.data16 = (ee_s16)0xffff;
     838:	0001                	nop
     83a:	0459                	addi	s0,s0,22
     83c:	34000003          	lb	zero,832(zero) # 340 <cmp_idx+0x18>
    core_list_insert_new(
     840:	01000003          	lb	zero,16(zero) # 10 <_start>
     844:	5900                	lw	s0,48(a0)
     846:	0338                	addi	a4,sp,392
     848:	0000                	unimp
     84a:	042c                	addi	a1,sp,520
     84c:	0000                	unimp
     84e:	0001                	nop
     850:	3459                	jal	2d6 <cmp_complex+0x1a>
     852:	0004                	0x4
     854:	1c00                	addi	s0,sp,560
     856:	0005                	c.nop	1
     858:	0100                	addi	s0,sp,128
     85a:	5d00                	lw	s0,56(a0)
    for (i = 0; i < size; i++)
     85c:	0560                	addi	s0,sp,652
     85e:	0000                	unimp
     860:	057c                	addi	a5,sp,652
     862:	0000                	unimp
        ee_u16 datpat = ((ee_u16)(seed ^ i) & 0xf);
     864:	0001                	nop
     866:	7c59                	lui	s8,0xffff6
     868:	0005                	c.nop	1
     86a:	8000                	0x8000
     86c:	0005                	c.nop	1
     86e:	0100                	addi	s0,sp,128
     870:	5d00                	lw	s0,56(a0)
     872:	0580                	addi	s0,sp,704
     874:	0000                	unimp
     876:	0594                	addi	a3,sp,704
     878:	0000                	unimp
     87a:	0001                	nop
     87c:	c459                	beqz	s0,90a <HEAP_SIZE+0x10a>
     87e:	0005                	c.nop	1
     880:	e000                	fsw	fs0,0(s0)
     882:	0005                	c.nop	1
     884:	0100                	addi	s0,sp,128
     886:	5900                	lw	s0,48(a0)
            = (datpat << 3) | (i & 0x7); /* alternate between algorithms */
     888:	05e0                	addi	s0,sp,716
     88a:	0000                	unimp
     88c:	05e4                	addi	s1,sp,716
     88e:	0000                	unimp
     890:	0001                	nop
     892:	e45d                	bnez	s0,940 <HEAP_SIZE+0x140>
     894:	0005                	c.nop	1
     896:	f800                	fsw	fs0,48(s0)
     898:	0006                	c.slli	zero,0x1
     89a:	0100                	addi	s0,sp,128
     89c:	5900                	lw	s0,48(a0)
     89e:	074c                	addi	a1,sp,900
     8a0:	0000                	unimp
     8a2:	076c                	addi	a1,sp,908
     8a4:	0000                	unimp
     8a6:	0001                	nop
     8a8:	8c59                	or	s0,s0,a4
     8aa:	94000007          	vluxseg5ei128.v	v0,(zero),v0,v0.t
     8ae:	01000007          	vle8ff.v	v0,(zero),v0.t
        ee_u16 dat
     8b2:	5900                	lw	s0,48(a0)
     8b4:	0794                	addi	a3,sp,960
     8b6:	0000                	unimp
        info.data16 = (dat << 8) | dat;  /* fill the data with actual data and
     8b8:	07a4                	addi	s1,sp,968
     8ba:	0000                	unimp
     8bc:	0001                	nop
     8be:	b45d                	j	364 <cmp_idx+0x3c>
     8c0:	bc000007          	vloxseg6ei128.v	v0,(zero),v0,v0.t
     8c4:	01000007          	vle8ff.v	v0,(zero),v0.t
     8c8:	5900                	lw	s0,48(a0)
	...
     8d2:	006c                	addi	a1,sp,12
     8d4:	0000                	unimp
     8d6:	0094                	addi	a3,sp,64
     8d8:	0000                	unimp
     8da:	0001                	nop
        core_list_insert_new(
     8dc:	9c58                	0x9c58
     8de:	0000                	unimp
     8e0:	a400                	fsd	fs0,8(s0)
     8e2:	0000                	unimp
     8e4:	0100                	addi	s0,sp,128
     8e6:	5800                	lw	s0,48(s0)
     8e8:	00ac                	addi	a1,sp,72
     8ea:	0000                	unimp
     8ec:	0188                	addi	a0,sp,192
     8ee:	0000                	unimp
     8f0:	0001                	nop
     8f2:	9058                	0x9058
     8f4:	0001                	nop
     8f6:	c000                	sw	s0,0(s0)
    for (i = 0; i < size; i++)
     8f8:	0001                	nop
     8fa:	0100                	addi	s0,sp,128
     8fc:	5600                	lw	s0,40(a2)
     8fe:	01cc                	addi	a1,sp,196
     900:	0000                	unimp
     902:	026c                	addi	a1,sp,268
     904:	0000                	unimp
     906:	0001                	nop
     908:	8056                	c.mv	zero,s5
     90a:	0002                	c.slli64	zero
     90c:	b800                	fsd	fs0,48(s0)
     90e:	0002                	c.slli64	zero
    finder = list->next;
     910:	0200                	addi	s0,sp,256
     912:	3000                	fld	fs0,32(s0)
     914:	b89f 0002 bc00      	0xbc000002b89f
     91a:	0002                	c.slli64	zero
    i      = 1;
     91c:	0200                	addi	s0,sp,256
     91e:	3100                	fld	fs0,32(a0)
     920:	bc9f 0002 e400      	0xe4000002bc9f
    while (finder->next != NULL)
     926:	0002                	c.slli64	zero
        if (i < size / 5) /* first 20% of the list in order */
     928:	0100                	addi	s0,sp,128
     92a:	5800                	lw	s0,48(s0)
     92c:	02e4                	addi	s1,sp,332
     92e:	0000                	unimp
     930:	0304                	addi	s1,sp,384
     932:	0000                	unimp
     934:	0004                	0x4
     936:	ff0a                	fsw	ft2,188(sp)
     938:	03049f07          	flh	ft10,48(s1)
     93c:	0000                	unimp
     93e:	0334                	addi	a3,sp,392
     940:	0000                	unimp
     942:	0001                	nop
     944:	385d                	jal	1fa <calc_func+0x136>
     946:	60000003          	lb	zero,1536(zero) # 600 <core_bench_list+0x1b4>
            finder->info->idx = i++;
     94a:	01000003          	lb	zero,16(zero) # 10 <_start>
     94e:	5800                	lw	s0,48(s0)
     950:	0368                	addi	a0,sp,396
     952:	0000                	unimp
     954:	042c                	addi	a1,sp,520
     956:	0000                	unimp
     958:	0001                	nop
     95a:	3458                	fld	fa4,168(s0)
     95c:	0004                	0x4
     95e:	1c00                	addi	s0,sp,560
     960:	0005                	c.nop	1
     962:	0100                	addi	s0,sp,128
     964:	5600                	lw	s0,40(a2)
     966:	0534                	addi	a3,sp,648
     968:	0000                	unimp
     96a:	0544                	addi	s1,sp,644
            ee_u16 pat = (ee_u16)(i++ ^ seed); /* get a pseudo random number */
     96c:	0000                	unimp
     96e:	0002                	c.slli64	zero
     970:	9f30                	0x9f30
     972:	054c                	addi	a1,sp,644
     974:	0000                	unimp
     976:	0594                	addi	a3,sp,704
     978:	0000                	unimp
     97a:	0002                	c.slli64	zero
     97c:	9f30                	0x9f30
     97e:	0594                	addi	a3,sp,704
     980:	0000                	unimp
     982:	05b4                	addi	a3,sp,712
     984:	0000                	unimp
     986:	0004                	0x4
     988:	ff0a                	fsw	ft2,188(sp)
     98a:	05b49f07          	flh	ft10,91(s1)
                                & (((i & 0x07) << 8)
     98e:	0000                	unimp
     990:	0650                	addi	a2,sp,772
     992:	0000                	unimp
     994:	0001                	nop
     996:	5458                	lw	a4,44(s0)
     998:	0006                	c.slli	zero,0x1
     99a:	6400                	flw	fs0,8(s0)
     99c:	0006                	c.slli	zero,0x1
     99e:	0100                	addi	s0,sp,128
     9a0:	5800                	lw	s0,48(s0)
     9a2:	0668                	addi	a0,sp,780
     9a4:	0000                	unimp
     9a6:	06d0                	addi	a2,sp,836
     9a8:	0000                	unimp
     9aa:	0001                	nop
     9ac:	d058                	sw	a4,36(s0)
     9ae:	0006                	c.slli	zero,0x1
                                   | pat); /* make sure the mixed items end up
     9b0:	e000                	fsw	fs0,0(s0)
     9b2:	0006                	c.slli	zero,0x1
     9b4:	0100                	addi	s0,sp,128
     9b6:	5600                	lw	s0,40(a2)
     9b8:	06e0                	addi	s0,sp,844
     9ba:	0000                	unimp
     9bc:	06ec                	addi	a1,sp,844
     9be:	0000                	unimp
                                & (((i & 0x07) << 8)
     9c0:	0002                	c.slli64	zero
     9c2:	9f30                	0x9f30
     9c4:	06ec                	addi	a1,sp,844
     9c6:	0000                	unimp
            finder->info->idx = 0x3fff
     9c8:	06f0                	addi	a2,sp,844
     9ca:	0000                	unimp
     9cc:	0001                	nop
     9ce:	085d                	addi	a6,a6,23
                                & (((i & 0x07) << 8)
     9d0:	34000007          	vluxseg2ei128.v	v0,(zero),v0,v0.t
     9d4:	01000007          	vle8ff.v	v0,(zero),v0.t
     9d8:	5800                	lw	s0,48(s0)
     9da:	0734                	addi	a3,sp,904
     9dc:	0000                	unimp
     9de:	074c                	addi	a1,sp,900
     9e0:	0000                	unimp
     9e2:	0004                	0x4
            finder->info->idx = 0x3fff
     9e4:	ff0a                	fsw	ft2,188(sp)
     9e6:	078c9f07          	flh	ft10,120(s9) # 4078 <number+0x44>
        finder = finder->next;
     9ea:	0000                	unimp
     9ec:	0790                	addi	a2,sp,960
     9ee:	0000                	unimp
     9f0:	0001                	nop
     9f2:	9458                	0x9458
    while (finder->next != NULL)
     9f4:	a4000007          	vluxseg6ei8.v	v0,(zero),v0,v0.t
     9f8:	01000007          	vle8ff.v	v0,(zero),v0.t
     9fc:	5600                	lw	s0,40(a2)
     9fe:	07a4                	addi	s1,sp,968
    list = core_list_mergesort(list, cmp_idx, NULL);
     a00:	0000                	unimp
     a02:	07ac                	addi	a1,sp,968
     a04:	0000                	unimp
     a06:	0002                	c.slli64	zero
     a08:	9f30                	0x9f30
     a0a:	07b4                	addi	a3,sp,968
     a0c:	0000                	unimp
     a0e:	07bc                	addi	a5,sp,968
     a10:	0000                	unimp
     a12:	0002                	c.slli64	zero
    return list;
     a14:	9f30                	0x9f30
     a16:	07bc                	addi	a5,sp,968
}
     a18:	0000                	unimp
     a1a:	07cc                	addi	a1,sp,964
     a1c:	0000                	unimp
     a1e:	0004                	0x4
     a20:	ff0a                	fsw	ft2,188(sp)
     a22:	07cc9f07          	flh	ft10,124(s9)
     a26:	0000                	unimp
     a28:	07d8                	addi	a4,sp,964
     a2a:	0000                	unimp
{
     a2c:	0001                	nop
     a2e:	0058                	addi	a4,sp,4
     a30:	0000                	unimp
     a32:	0000                	unimp
     a34:	0000                	unimp
     a36:	9000                	0x9000
     a38:	0000                	unimp
     a3a:	9400                	0x9400
     a3c:	0000                	unimp
     a3e:	0100                	addi	s0,sp,128
     a40:	5c00                	lw	s0,56(s0)
     a42:	0094                	addi	a3,sp,64
     a44:	0000                	unimp
     a46:	009c                	addi	a5,sp,64
     a48:	0000                	unimp
     a4a:	0001                	nop
     a4c:	0001045b          	0x1045b
     a50:	0800                	addi	s0,sp,16
     a52:	0001                	nop
    if ((*memblock + 1) >= memblock_end)
     a54:	0100                	addi	s0,sp,128
     a56:	5c00                	lw	s0,56(s0)
     a58:	0108                	addi	a0,sp,128
     a5a:	0000                	unimp
     a5c:	0118                	addi	a4,sp,128
     a5e:	0000                	unimp
     a60:	0001                	nop
     a62:	0001185b          	0x1185b
     a66:	2c00                	fld	fs0,24(s0)
        return NULL;
     a68:	0001                	nop
     a6a:	1500                	addi	s0,sp,672
     a6c:	7b00                	flw	fs0,48(a4)
     a6e:	3100                	fld	fs0,32(a0)
    if ((*datablock + 1) >= datablock_end)
     a70:	7b1a                	flw	fs6,164(sp)
     a72:	3100                	fld	fs0,32(a0)
     a74:	2125                	jal	e9c <core_list_mergesort+0x1a4>
     a76:	007f                	0x7f
     a78:	ff11                	bnez	a4,994 <HEAP_SIZE+0x194>
     a7a:	ffff                	0xffff
     a7c:	244f1a7b          	0x244f1a7b
     a80:	9f21                	0x9f21
     a82:	0224                	addi	s1,sp,264
        return NULL;
     a84:	0000                	unimp
     a86:	022c                	addi	a1,sp,264
     a88:	0000                	unimp
     a8a:	0001                	nop
    newitem = *memblock;
     a8c:	00029c5b          	0x29c5b
     a90:	bc00                	fsd	fs0,56(s0)
     a92:	0002                	c.slli64	zero
     a94:	0100                	addi	s0,sp,128
     a96:	5c00                	lw	s0,56(s0)
    (*memblock)++;
     a98:	02bc                	addi	a5,sp,328
     a9a:	0000                	unimp
     a9c:	02dc                	addi	a5,sp,324
     a9e:	0000                	unimp
     aa0:	0001                	nop
     aa2:	0002dc5b          	0x2dc5b
     aa6:	e400                	fsw	fs0,8(s0)
     aa8:	0002                	c.slli64	zero
     aaa:	0100                	addi	s0,sp,128
    newitem->next      = insert_point->next;
     aac:	5e00                	lw	s0,56(a2)
     aae:	0304                	addi	s1,sp,384
     ab0:	0000                	unimp
     ab2:	0310                	addi	a2,sp,384
     ab4:	0000                	unimp
     ab6:	0024                	addi	s1,sp,8
     ab8:	4b40007b          	0x4b40007b
    insert_point->next = newitem;
     abc:	2224                	fld	fs1,64(a2)
     abe:	007c007b          	0x7c007b
     ac2:	4022                	0x4022
     ac4:	2b22244b          	fnmsub.d	fs0,ft4,fs2,ft5,rdn
    newitem->info = *datablock;
     ac8:	ff08                	fsw	fa0,56(a4)
     aca:	7e1a                	flw	ft8,164(sp)
     acc:	2200                	fld	fs0,0(a2)
     ace:	007f                	0x7f
     ad0:	4f22                	lw	t5,8(sp)
     ad2:	7b24                	flw	fs1,112(a4)
     ad4:	7c00                	flw	fs0,56(s0)
     ad6:	2200                	fld	fs0,0(a2)
    (*datablock)++;
     ad8:	2531                	jal	10e4 <main+0xd4>
     ada:	9f21                	0x9f21
     adc:	0310                	addi	a2,sp,384
     ade:	0000                	unimp
     ae0:	0318                	addi	a4,sp,384
     ae2:	0000                	unimp
     ae4:	001e                	c.slli	zero,0x7
     ae6:	4b40007b          	0x4b40007b
     aea:	2224                	fld	fs1,64(a2)
    copy_info(newitem->info, info);
     aec:	007c                	addi	a5,sp,12
     aee:	4b40                	lw	s0,20(a4)
     af0:	2224                	fld	fs1,64(a2)
     af2:	1aff082b          	0x1aff082b
     af6:	007e                	c.slli	zero,0x1f
     af8:	7f22                	flw	ft10,40(sp)
     afa:	2200                	fld	fs0,0(a2)
     afc:	007c244f          	fnmadd.s	fs0,fs8,ft7,ft0,rdn
    return newitem;
     b00:	2531                	jal	110c <main+0xfc>
     b02:	9f21                	0x9f21
}
     b04:	0318                	addi	a4,sp,384
     b06:	0000                	unimp
     b08:	031c                	addi	a5,sp,384
     b0a:	0000                	unimp
     b0c:	007b001b          	0x7b001b
     b10:	4b40                	lw	s0,20(a4)
     b12:	2224                	fld	fs1,64(a2)
     b14:	007c                	addi	a5,sp,12
     b16:	4b40                	lw	s0,20(a4)
{
     b18:	2224                	fld	fs1,64(a2)
     b1a:	1aff082b          	0x1aff082b
     b1e:	007f                	0x7f
     b20:	4f22                	lw	t5,8(sp)
     b22:	7c24                	flw	fs1,120(s0)
     b24:	3100                	fld	fs0,32(a0)
     b26:	2125                	jal	f4e <iterate+0x4e>
    list_head *ret = item->next;
     b28:	5c9f 0003 6000      	0x600000035c9f
     b2e:	01000003          	lb	zero,16(zero) # 10 <_start>
     b32:	5c00                	lw	s0,56(s0)
    tmp        = item->info;
     b34:	0360                	addi	s0,sp,396
     b36:	0000                	unimp
     b38:	0368                	addi	a0,sp,396
     b3a:	0000                	unimp
     b3c:	0001                	nop
     b3e:	0003b45b          	0x3b45b
    item->info = ret->info;
     b42:	b800                	fsd	fs0,48(s0)
     b44:	01000003          	lb	zero,16(zero) # 10 <_start>
     b48:	5c00                	lw	s0,56(s0)
     b4a:	03b8                	addi	a4,sp,456
     b4c:	0000                	unimp
     b4e:	03d4                	addi	a3,sp,452
    ret->info  = tmp;
     b50:	0000                	unimp
     b52:	0001                	nop
     b54:	0004585b          	0x4585b
     b58:	6000                	flw	fs0,0(s0)
     b5a:	0004                	0x4
    item->next = item->next->next;
     b5c:	0100                	addi	s0,sp,128
     b5e:	5b00                	lw	s0,48(a4)
     b60:	04d0                	addi	a2,sp,580
     b62:	0000                	unimp
     b64:	04dc                	addi	a5,sp,580
     b66:	0000                	unimp
     b68:	0001                	nop
     b6a:	0005385b          	0x5385b
     b6e:	4400                	lw	s0,8(s0)
    ret->next  = NULL;
     b70:	0005                	c.nop	1
     b72:	0100                	addi	s0,sp,128
     b74:	5c00                	lw	s0,56(s0)
     b76:	0560                	addi	s0,sp,652
    return ret;
     b78:	0000                	unimp
     b7a:	057c                	addi	a5,sp,652
}
     b7c:	0000                	unimp
     b7e:	0001                	nop
     b80:	7c60                	flw	fs0,124(s0)
     b82:	0005                	c.nop	1
     b84:	8000                	0x8000
     b86:	0005                	c.nop	1
     b88:	0100                	addi	s0,sp,128
     b8a:	5b00                	lw	s0,48(a4)
{
     b8c:	0580                	addi	s0,sp,704
     b8e:	0000                	unimp
     b90:	0594                	addi	a3,sp,704
     b92:	0000                	unimp
     b94:	0001                	nop
     b96:	c460                	sw	s0,76(s0)
     b98:	0005                	c.nop	1
     b9a:	d400                	sw	s0,40(s0)
     b9c:	0005                	c.nop	1
     b9e:	0100                	addi	s0,sp,128
    tmp                 = item_removed->info;
     ba0:	6300                	flw	fs0,0(a4)
     ba2:	05d4                	addi	a3,sp,708
     ba4:	0000                	unimp
     ba6:	05dc                	addi	a5,sp,708
     ba8:	0000                	unimp
     baa:	0006                	c.slli	zero,0x1
    item_removed->info  = item_modified->info;
     bac:	007c007b          	0x7c007b
     bb0:	9f1c                	0x9f1c
     bb2:	05e0                	addi	s0,sp,716
     bb4:	0000                	unimp
     bb6:	0614                	addi	a3,sp,768
     bb8:	0000                	unimp
     bba:	0001                	nop
    item_modified->info = tmp;
     bbc:	00061463          	bnez	a2,bc4 <core_list_undo_remove+0x38>
     bc0:	3c00                	fld	fs0,56(s0)
     bc2:	0006                	c.slli	zero,0x1
     bc4:	0100                	addi	s0,sp,128
     bc6:	5b00                	lw	s0,48(a4)
    item_removed->next  = item_modified->next;
     bc8:	0648                	addi	a0,sp,772
     bca:	0000                	unimp
     bcc:	0654                	addi	a3,sp,772
     bce:	0000                	unimp
     bd0:	0001                	nop
     bd2:	0006545b          	0x6545b
     bd6:	8000                	0x8000
    item_modified->next = item_removed;
     bd8:	0006                	c.slli	zero,0x1
     bda:	0100                	addi	s0,sp,128
     bdc:	6300                	flw	fs0,0(a4)
     bde:	0680                	addi	s0,sp,832
     be0:	0000                	unimp
     be2:	0688                	addi	a0,sp,832
    return item_removed;
     be4:	0000                	unimp
     be6:	0002                	c.slli64	zero
}
     be8:	9f30                	0x9f30
     bea:	0688                	addi	a0,sp,832
     bec:	0000                	unimp
     bee:	06d0                	addi	a2,sp,836
     bf0:	0000                	unimp
     bf2:	0001                	nop
     bf4:	0006ec5b          	0x6ec5b
{
     bf8:	f000                	fsw	fs0,32(s0)
     bfa:	0006                	c.slli	zero,0x1
     bfc:	2400                	fld	fs0,8(s0)
     bfe:	7b00                	flw	fs0,48(a4)
     c00:	4000                	lw	s0,0(s0)
     c02:	7b22244b          	fnmsub.d	fs0,ft4,fs2,fa5,rdn
     c06:	7c00                	flw	fs0,56(s0)
     c08:	2200                	fld	fs0,0(a2)
     c0a:	4b40                	lw	s0,20(a4)
    if (info->idx >= 0)
     c0c:	2224                	fld	fs1,64(a2)
     c0e:	1aff082b          	0x1aff082b
     c12:	007e                	c.slli	zero,0x1f
     c14:	7f22                	flw	ft10,40(sp)
     c16:	2200                	fld	fs0,0(a2)
        while (list && (list->info->idx != info->idx))
     c18:	007b244f          	fnmadd.s	fs0,fs6,ft7,ft0,rdn
            list = list->next;
     c1c:	007c                	addi	a5,sp,12
     c1e:	3122                	fld	ft2,40(sp)
     c20:	2125                	jal	1048 <main+0x38>
     c22:	f89f 0006 2800      	0x28000006f89f
        while (list && (list->info->idx != info->idx))
     c28:	01000007          	vle8ff.v	v0,(zero),v0.t
     c2c:	5b00                	lw	s0,48(a4)
     c2e:	0728                	addi	a0,sp,904
     c30:	0000                	unimp
     c32:	0738                	addi	a4,sp,904
     c34:	0000                	unimp
     c36:	0001                	nop
     c38:	4c5a                	lw	s8,148(sp)
     c3a:	8c000007          	vloxseg5ei8.v	v0,(zero),v0,v0.t
     c3e:	01000007          	vle8ff.v	v0,(zero),v0.t
     c42:	5a00                	lw	s0,48(a2)
     c44:	07a4                	addi	s1,sp,968
     c46:	0000                	unimp
        return list;
     c48:	07ac                	addi	a1,sp,968
     c4a:	0000                	unimp
     c4c:	0001                	nop
     c4e:	b45c                	fsd	fa5,168(s0)
            list = list->next;
     c50:	bc000007          	vloxseg6ei128.v	v0,(zero),v0,v0.t
     c54:	01000007          	vle8ff.v	v0,(zero),v0.t
     c58:	6000                	flw	fs0,0(s0)
     c5a:	07cc                	addi	a1,sp,964
        while (list && ((list->info->data16 & 0xff) != info->data16))
     c5c:	0000                	unimp
     c5e:	07d4                	addi	a3,sp,964
     c60:	0000                	unimp
     c62:	0001                	nop
     c64:	0000005b          	0x5b
     c68:	0000                	unimp
     c6a:	0000                	unimp
     c6c:	9000                	0x9000
     c6e:	0000                	unimp
     c70:	9c00                	0x9c00
     c72:	0000                	unimp
     c74:	0100                	addi	s0,sp,128
     c76:	5f00                	lw	s0,56(a4)
     c78:	0104                	addi	s1,sp,128
     c7a:	0000                	unimp
     c7c:	0114                	addi	a3,sp,128
     c7e:	0000                	unimp
     c80:	0001                	nop
     c82:	145f 0001 1800      	0x18000001145f
        return list;
     c88:	0001                	nop
     c8a:	0900                	addi	s0,sp,144
}
     c8c:	7f00                	flw	fs0,56(a4)
     c8e:	1100                	addi	s0,sp,160
     c90:	ffff                	0xffff
     c92:	7bff                	0x7bff
     c94:	9f1a                	add	t5,t5,t1
     c96:	0118                	addi	a4,sp,128
     c98:	0000                	unimp
     c9a:	012c                	addi	a1,sp,136
{
     c9c:	0000                	unimp
     c9e:	007f000b          	0x7f000b
     ca2:	ff11                	bnez	a4,bbe <core_list_undo_remove+0x32>
     ca4:	ffff                	0xffff
     ca6:	25311a7b          	0x25311a7b
     caa:	249f 0002 2c00      	0x2c000002249f
    while (list)
     cb0:	0002                	c.slli64	zero
     cb2:	0100                	addi	s0,sp,128
        tmp        = list->next;
     cb4:	5f00                	lw	s0,56(a4)
     cb6:	029c                	addi	a5,sp,320
     cb8:	0000                	unimp
     cba:	02e4                	addi	s1,sp,332
     cbc:	0000                	unimp
     cbe:	0001                	nop
        list->next = next;
     cc0:	045f 0003 1000      	0x10000003045f
     cc6:	1c000003          	lb	zero,448(zero) # 1c0 <calc_func+0xfc>
     cca:	7b00                	flw	fs0,48(a4)
        next       = list;
     ccc:	4000                	lw	s0,0(s0)
     cce:	7b22244b          	fnmsub.d	fs0,ft4,fs2,fa5,rdn
     cd2:	7c00                	flw	fs0,56(s0)
        list       = tmp;
     cd4:	2200                	fld	fs0,0(a2)
     cd6:	4b40                	lw	s0,20(a4)
     cd8:	2224                	fld	fs1,64(a2)
     cda:	1aff082b          	0x1aff082b
    while (list)
     cde:	007e                	c.slli	zero,0x1f
     ce0:	7f22                	flw	ft10,40(sp)
     ce2:	2200                	fld	fs0,0(a2)
    return next;
     ce4:	2531                	jal	12f0 <main+0x2e0>
     ce6:	109f 0003 1800      	0x18000003109f
}
     cec:	19000003          	lb	zero,400(zero) # 190 <calc_func+0xcc>
     cf0:	7b00                	flw	fs0,48(a4)
     cf2:	4000                	lw	s0,0(s0)
     cf4:	7c22244b          	fnmsub.h	fs0,ft4,ft2,fa5,rdn
{
     cf8:	4000                	lw	s0,0(s0)
     cfa:	2b22244b          	fnmsub.d	fs0,ft4,fs2,ft5,rdn
     cfe:	ff08                	fsw	fa0,56(a4)
     d00:	7e1a                	flw	ft8,164(sp)
     d02:	2200                	fld	fs0,0(a2)
     d04:	007f                	0x7f
     d06:	3122                	fld	ft2,40(sp)
     d08:	9f25                	0x9f25
     d0a:	0318                	addi	a4,sp,384
     d0c:	0000                	unimp
     d0e:	031c                	addi	a5,sp,384
     d10:	0000                	unimp
     d12:	0016                	c.slli	zero,0x5
    insize = 1;
     d14:	4b40007b          	0x4b40007b
     d18:	2224                	fld	fs1,64(a2)
     d1a:	007c                	addi	a5,sp,12
        p    = list;
     d1c:	4b40                	lw	s0,20(a4)
     d1e:	2224                	fld	fs1,64(a2)
     d20:	1aff082b          	0x1aff082b
        list = NULL;
     d24:	007f                	0x7f
     d26:	3122                	fld	ft2,40(sp)
        tail = NULL;
     d28:	9f25                	0x9f25
     d2a:	035c                	addi	a5,sp,388
        nmerges = 0; /* count number of merges we do in this pass */
     d2c:	0000                	unimp
     d2e:	0368                	addi	a0,sp,396
        while (p)
     d30:	0000                	unimp
     d32:	0001                	nop
            nmerges++; /* there exists a merge to be done */
     d34:	b45f 0003 cc00      	0xcc000003b45f
     d3a:	01000003          	lb	zero,16(zero) # 10 <_start>
     d3e:	5f00                	lw	s0,56(a4)
            q     = p;
     d40:	03cc                	addi	a1,sp,452
     d42:	0000                	unimp
     d44:	03d4                	addi	a3,sp,452
     d46:	0000                	unimp
            psize = 0;
     d48:	0001                	nop
     d4a:	5862                	lw	a6,56(sp)
            for (i = 0; i < insize; i++)
     d4c:	0004                	0x4
     d4e:	6000                	flw	fs0,0(s0)
     d50:	0004                	0x4
     d52:	0100                	addi	s0,sp,128
                psize++;
     d54:	5f00                	lw	s0,56(a4)
     d56:	04d0                	addi	a2,sp,580
     d58:	0000                	unimp
     d5a:	04dc                	addi	a5,sp,580
     d5c:	0000                	unimp
     d5e:	0001                	nop
                q = q->next;
     d60:	385f 0005 4400      	0x44000005385f
     d66:	0005                	c.nop	1
     d68:	0100                	addi	s0,sp,128
     d6a:	5e00                	lw	s0,56(a2)
                if (!q)
     d6c:	0560                	addi	s0,sp,652
     d6e:	0000                	unimp
     d70:	057c                	addi	a5,sp,652
     d72:	0000                	unimp
            for (i = 0; i < insize; i++)
     d74:	0001                	nop
     d76:	7c5a                	flw	fs8,180(sp)
     d78:	0005                	c.nop	1
     d7a:	8000                	0x8000
     d7c:	0005                	c.nop	1
     d7e:	0100                	addi	s0,sp,128
     d80:	5f00                	lw	s0,56(a4)
     d82:	0580                	addi	s0,sp,704
     d84:	0000                	unimp
     d86:	0594                	addi	a3,sp,704
     d88:	0000                	unimp
     d8a:	0001                	nop
     d8c:	c45a                	sw	s6,8(sp)
     d8e:	0005                	c.nop	1
                    break;
     d90:	0800                	addi	s0,sp,16
     d92:	0006                	c.slli	zero,0x1
            qsize = insize;
     d94:	0100                	addi	s0,sp,128
     d96:	6200                	flw	fs0,0(a2)
     d98:	0610                	addi	a2,sp,768
     d9a:	0000                	unimp
            while (psize > 0 || (qsize > 0 && q))
     d9c:	064c                	addi	a1,sp,772
     d9e:	0000                	unimp
                if (psize == 0)
     da0:	0001                	nop
     da2:	545f 0006 8000      	0x80000006545f
                    e = q;
     da8:	0006                	c.slli	zero,0x1
     daa:	0100                	addi	s0,sp,128
     dac:	6200                	flw	fs0,0(a2)
     dae:	0680                	addi	s0,sp,832
                    q = q->next;
     db0:	0000                	unimp
     db2:	06b4                	addi	a3,sp,840
     db4:	0000                	unimp
     db6:	0001                	nop
     db8:	b45f 0006 bc00      	0xbc000006b45f
                    qsize--;
     dbe:	0006                	c.slli	zero,0x1
     dc0:	0200                	addi	s0,sp,256
     dc2:	3000                	fld	fs0,32(s0)
     dc4:	bc9f 0006 d000      	0xd0000006bc9f
     dca:	0006                	c.slli	zero,0x1
                else if (qsize == 0 || !q)
     dcc:	0100                	addi	s0,sp,128
     dce:	5f00                	lw	s0,56(a4)
     dd0:	06ec                	addi	a1,sp,844
     dd2:	0000                	unimp
     dd4:	06f0                	addi	a2,sp,844
     dd6:	0000                	unimp
     dd8:	001c                	0x1c
     dda:	4b40007b          	0x4b40007b
                    e = p;
     dde:	2224                	fld	fs1,64(a2)
     de0:	007c007b          	0x7c007b
                    p = p->next;
     de4:	4022                	0x4022
     de6:	2b22244b          	fnmsub.d	fs0,ft4,fs2,ft5,rdn
     dea:	ff08                	fsw	fa0,56(a4)
     dec:	7e1a                	flw	ft8,164(sp)
     dee:	2200                	fld	fs0,0(a2)
                    psize--;
     df0:	007f                	0x7f
     df2:	3122                	fld	ft2,40(sp)
     df4:	9f25                	0x9f25
     df6:	06f8                	addi	a4,sp,844
     df8:	0000                	unimp
     dfa:	0704                	addi	s1,sp,896
     dfc:	0000                	unimp
     dfe:	0001                	nop
                else if (cmp(p->info, q->info, res) <= 0)
     e00:	045f 0007 1c00      	0x1c000007045f
     e06:	09000007          	vlse8.v	v0,(zero),a6,v0.t
     e0a:	7f00                	flw	fs0,56(a4)
     e0c:	1100                	addi	s0,sp,160
     e0e:	ffff                	0xffff
     e10:	7bff                	0x7bff
     e12:	9f1a                	add	t5,t5,t1
     e14:	071c                	addi	a5,sp,896
     e16:	0000                	unimp
     e18:	073c                	addi	a5,sp,904
     e1a:	0000                	unimp
     e1c:	0001                	nop
     e1e:	4c5f 0007 5800      	0x580000074c5f
     e24:	01000007          	vle8ff.v	v0,(zero),v0.t
     e28:	5f00                	lw	s0,56(a4)
     e2a:	07a4                	addi	s1,sp,968
                    e = p;
     e2c:	0000                	unimp
     e2e:	07ac                	addi	a1,sp,968
     e30:	0000                	unimp
     e32:	0001                	nop
                    p = p->next;
     e34:	b45e                	fsd	fs7,40(sp)
     e36:	bc000007          	vloxseg6ei128.v	v0,(zero),v0,v0.t
     e3a:	01000007          	vle8ff.v	v0,(zero),v0.t
     e3e:	5a00                	lw	s0,48(a2)
                    psize--;
     e40:	07cc                	addi	a1,sp,964
     e42:	0000                	unimp
     e44:	07d0                	addi	a2,sp,964
     e46:	0000                	unimp
     e48:	0009                	c.nop	2
     e4a:	007f                	0x7f
     e4c:	ff11                	bnez	a4,d68 <core_list_mergesort+0x70>
     e4e:	ffff                	0xffff
                    e = q;
     e50:	009f1a7b          	0x9f1a7b
     e54:	0000                	unimp
     e56:	0000                	unimp
                    q = q->next;
     e58:	0000                	unimp
     e5a:	6800                	flw	fs0,16(s0)
     e5c:	0000                	unimp
     e5e:	7c00                	flw	fs0,56(s0)
     e60:	0000                	unimp
     e62:	0100                	addi	s0,sp,128
                    qsize--;
     e64:	6000                	flw	fs0,0(s0)
     e66:	007c                	addi	a5,sp,12
     e68:	0000                	unimp
     e6a:	0088                	addi	a0,sp,64
     e6c:	0000                	unimp
     e6e:	0001                	nop
                if (tail)
     e70:	885a                	mv	a6,s6
     e72:	0000                	unimp
     e74:	9400                	0x9400
     e76:	0000                	unimp
                    tail->next = e;
     e78:	0300                	addi	s0,sp,384
     e7a:	8000                	0x8000
     e7c:	9f7f                	0x9f7f
     e7e:	009c                	addi	a5,sp,64
     e80:	0000                	unimp
     e82:	00a4                	addi	s1,sp,72
     e84:	0000                	unimp
     e86:	0001                	nop
                    list = e;
     e88:	ac5a                	fsd	fs6,24(sp)
     e8a:	0000                	unimp
     e8c:	c000                	sw	s0,0(s0)
     e8e:	0000                	unimp
                tail = e;
     e90:	0100                	addi	s0,sp,128
     e92:	6000                	flw	fs0,0(s0)
     e94:	00c0                	addi	s0,sp,68
     e96:	0000                	unimp
            while (psize > 0 || (qsize > 0 && q))
     e98:	00f4                	addi	a3,sp,76
     e9a:	0000                	unimp
     e9c:	0001                	nop
     e9e:	485a                	lw	a6,148(sp)
     ea0:	0001                	nop
     ea2:	6400                	flw	fs0,8(s0)
     ea4:	0001                	nop
     ea6:	0100                	addi	s0,sp,128
     ea8:	5a00                	lw	s0,48(a2)
     eaa:	017c                	addi	a5,sp,140
     eac:	0000                	unimp
     eae:	0188                	addi	a0,sp,192
            p = q;
     eb0:	0000                	unimp
     eb2:	0001                	nop
     eb4:	885a                	mv	a6,s6
     eb6:	0001                	nop
        while (p)
     eb8:	9000                	0x9000
     eba:	0001                	nop
     ebc:	0100                	addi	s0,sp,128
     ebe:	6000                	flw	fs0,0(s0)
        tail->next = NULL;
     ec0:	0190                	addi	a2,sp,192
     ec2:	0000                	unimp
     ec4:	01a0                	addi	s0,sp,200
     ec6:	0000                	unimp
        if (nmerges <= 1) /* allow for nmerges==0, the empty list case */
     ec8:	0001                	nop
     eca:	a05a                	fsd	fs6,0(sp)
     ecc:	0001                	nop
     ece:	c000                	sw	s0,0(s0)
     ed0:	0001                	nop
     ed2:	0100                	addi	s0,sp,128
            return list;
     ed4:	5d00                	lw	s0,56(a0)
     ed6:	01cc                	addi	a1,sp,196
     ed8:	0000                	unimp
     eda:	01e0                	addi	s0,sp,204
        insize *= 2;
     edc:	0000                	unimp
     ede:	0001                	nop
     ee0:	e05a                	fsw	fs6,0(sp)
     ee2:	0001                	nop
     ee4:	6c00                	flw	fs0,24(s0)
     ee6:	0002                	c.slli64	zero
        p    = list;
     ee8:	0100                	addi	s0,sp,128
     eea:	5d00                	lw	s0,56(a0)
}
     eec:	026c                	addi	a1,sp,268
     eee:	0000                	unimp
     ef0:	02bc                	addi	a5,sp,328
     ef2:	0000                	unimp
     ef4:	0001                	nop
     ef6:	e460                	fsw	fs0,76(s0)
     ef8:	0002                	c.slli64	zero
     efa:	f000                	fsw	fs0,32(s0)
     efc:	0002                	c.slli64	zero
     efe:	0100                	addi	s0,sp,128
{
     f00:	6000                	flw	fs0,0(s0)
     f02:	0304                	addi	s1,sp,384
     f04:	0000                	unimp
     f06:	0334                	addi	a3,sp,392
     f08:	0000                	unimp
     f0a:	0001                	nop
     f0c:	d060                	sw	s0,100(s0)
     f0e:	0006                	c.slli	zero,0x1
     f10:	e000                	fsw	fs0,0(s0)
     f12:	0006                	c.slli	zero,0x1
    core_results *res        = (core_results *)pres;
     f14:	0100                	addi	s0,sp,128
     f16:	5a00                	lw	s0,48(a2)
     f18:	06e0                	addi	s0,sp,844
     f1a:	0000                	unimp
    ee_u32        iterations = res->iterations;
     f1c:	06f0                	addi	a2,sp,844
     f1e:	0000                	unimp
     f20:	0001                	nop
     f22:	0060                	addi	s0,sp,12
     f24:	0000                	unimp
     f26:	0000                	unimp
    res->crc                 = 0;
     f28:	0000                	unimp
     f2a:	8400                	0x8400
     f2c:	0000                	unimp
     f2e:	9400                	0x9400
    res->crclist             = 0;
     f30:	0000                	unimp
     f32:	0100                	addi	s0,sp,128
     f34:	5c00                	lw	s0,56(s0)
	...
    res->crcmatrix           = 0;
     f3e:	00f8                	addi	a4,sp,76
    res->crcstate            = 0;
     f40:	0000                	unimp
     f42:	0108                	addi	a0,sp,128
     f44:	0000                	unimp
     f46:	0001                	nop
    for (i = 0; i < iterations; i++)
     f48:	005c                	addi	a5,sp,4
     f4a:	0000                	unimp
     f4c:	0000                	unimp
     f4e:	0000                	unimp
        crc      = core_bench_list(res, 1);
     f50:	a800                	fsd	fs0,16(s0)
     f52:	0001                	nop
     f54:	b800                	fsd	fs0,48(s0)
     f56:	0001                	nop
     f58:	0100                	addi	s0,sp,128
     f5a:	5b00                	lw	s0,48(a4)
	...
        res->crc = crcu16(crc, res->crc);
     f64:	0218                	addi	a4,sp,256
     f66:	0000                	unimp
     f68:	022c                	addi	a1,sp,264
     f6a:	0000                	unimp
     f6c:	0001                	nop
     f6e:	0000005b          	0x5b
     f72:	0000                	unimp
     f74:	0000                	unimp
     f76:	9000                	0x9000
     f78:	0002                	c.slli64	zero
     f7a:	bc00                	fsd	fs0,56(s0)
     f7c:	0002                	c.slli64	zero
     f7e:	0100                	addi	s0,sp,128
     f80:	5c00                	lw	s0,56(s0)
	...
     f8a:	0304                	addi	s1,sp,384
        crc      = core_bench_list(res, -1);
     f8c:	0000                	unimp
     f8e:	0310                	addi	a2,sp,384
     f90:	0000                	unimp
     f92:	0006                	c.slli	zero,0x1
     f94:	007c007b          	0x7c007b
     f98:	9f22                	add	t5,t5,s0
     f9a:	0310                	addi	a2,sp,384
     f9c:	0000                	unimp
     f9e:	0324                	addi	s1,sp,392
        res->crc = crcu16(crc, res->crc);
     fa0:	0000                	unimp
     fa2:	0001                	nop
     fa4:	ec5c                	fsw	fa5,28(s0)
     fa6:	0006                	c.slli	zero,0x1
     fa8:	f000                	fsw	fs0,32(s0)
     faa:	0006                	c.slli	zero,0x1
     fac:	0600                	addi	s0,sp,768
     fae:	7b00                	flw	fs0,48(a4)
     fb0:	7c00                	flw	fs0,56(s0)
     fb2:	2200                	fld	fs0,0(a2)
     fb4:	009f 0000 0000      	0x9f
     fba:	0000                	unimp
     fbc:	3400                	fld	fs0,40(s0)
     fbe:	48000003          	lb	zero,1152(zero) # 480 <core_bench_list+0x34>
     fc2:	01000003          	lb	zero,16(zero) # 10 <_start>
     fc6:	6000                	flw	fs0,0(s0)
        if (i == 0)
     fc8:	0348                	addi	a0,sp,388
     fca:	0000                	unimp
     fcc:	0354                	addi	a3,sp,388
     fce:	0000                	unimp
            res->crclist = res->crc;
     fd0:	0001                	nop
     fd2:	545a                	lw	s0,180(sp)
     fd4:	60000003          	lb	zero,1536(zero) # 600 <core_bench_list+0x1b4>
     fd8:	03000003          	lb	zero,48(zero) # 30 <_start+0x20>
     fdc:	8000                	0x8000
     fde:	9f7f                	0x9f7f
    for (i = 0; i < iterations; i++)
     fe0:	0368                	addi	a0,sp,396
     fe2:	0000                	unimp
     fe4:	03a4                	addi	s1,sp,456
     fe6:	0000                	unimp
     fe8:	0001                	nop
     fea:	d45a                	sw	s6,40(sp)
     fec:	ec000003          	lb	zero,-320(zero) # fffffec0 <RAM_SIZE+0xfffefec0>
     ff0:	01000003          	lb	zero,16(zero) # 10 <_start>
     ff4:	6000                	flw	fs0,0(s0)
     ff6:	03ec                	addi	a1,sp,460
    return NULL;
     ff8:	0000                	unimp
     ffa:	0408                	addi	a0,sp,512
}
     ffc:	0000                	unimp
     ffe:	0001                	nop
    1000:	205a                	fld	ft0,400(sp)
    1002:	0004                	0x4
    1004:	2c00                	fld	fs0,24(s0)
    1006:	0004                	0x4
    1008:	0100                	addi	s0,sp,128
    100a:	5a00                	lw	s0,48(a2)
    100c:	042c                	addi	a1,sp,520
    100e:	0000                	unimp
{
    1010:	0434                	addi	a3,sp,520
    1012:	0000                	unimp
    1014:	0001                	nop
    1016:	3460                	fld	fs0,232(s0)
    1018:	0004                	0x4
    101a:	4400                	lw	s0,8(s0)
    101c:	0004                	0x4
    101e:	0100                	addi	s0,sp,128
    1020:	5a00                	lw	s0,48(a2)
    1022:	0444                	addi	s1,sp,516
    1024:	0000                	unimp
    1026:	0468                	addi	a0,sp,524
    int   argc = 0;
    1028:	0000                	unimp
    102a:	0001                	nop
    ee_u16       i, j = 0, num_algorithms = 0;
    102c:	7860                	flw	fs0,116(s0)
    102e:	0004                	0x4
    1030:	8c00                	0x8c00
    1032:	0004                	0x4
    ee_s16       known_id = -1, total_errors = 0;
    1034:	0100                	addi	s0,sp,128
    1036:	5a00                	lw	s0,48(a2)
    1038:	048c                	addi	a1,sp,576
    103a:	0000                	unimp
    103c:	052c                	addi	a1,sp,648
    103e:	0000                	unimp
    ee_u16       seedcrc = 0;
    1040:	0001                	nop
    1042:	2c60                	fld	fs0,216(s0)
    portable_init(&(results[0].port), &argc, argv);
    1044:	0005                	c.nop	1
    1046:	4400                	lw	s0,8(s0)
    1048:	0005                	c.nop	1
    104a:	0600                	addi	s0,sp,768
    104c:	7800                	flw	fs0,48(s0)
    104e:	7600                	flw	fs0,40(a2)
    1050:	1c00                	addi	s0,sp,560
    1052:	4c9f 0005 b400      	0xb40000054c9f
    1058:	0005                	c.nop	1
    105a:	0600                	addi	s0,sp,768
    105c:	7800                	flw	fs0,48(s0)
    105e:	7600                	flw	fs0,40(a2)
    1060:	1c00                	addi	s0,sp,560
    1062:	b49f 0005 e400      	0xe4000005b49f
    results[0].seed1      = get_seed(1);
    1068:	0005                	c.nop	1
    106a:	0100                	addi	s0,sp,128
    106c:	6000                	flw	fs0,0(s0)
    106e:	0654                	addi	a3,sp,772
    1070:	0000                	unimp
    1072:	0668                	addi	a0,sp,780
    1074:	0000                	unimp
    1076:	0001                	nop
    1078:	9460                	0x9460
    107a:	a4000007          	vluxseg6ei8.v	v0,(zero),v0,v0.t
    results[0].seed2      = get_seed(2);
    107e:	01000007          	vle8ff.v	v0,(zero),v0.t
    1082:	5a00                	lw	s0,48(a2)
    1084:	07a4                	addi	s1,sp,968
    1086:	0000                	unimp
    1088:	07ac                	addi	a1,sp,968
    108a:	0000                	unimp
    108c:	0006                	c.slli	zero,0x1
    108e:	0078                	addi	a4,sp,12
    1090:	0076                	c.slli	zero,0x1d
    1092:	9f1c                	0x9f1c
    results[0].seed3      = get_seed(3);
    1094:	07b4                	addi	a3,sp,968
    1096:	0000                	unimp
    1098:	07cc                	addi	a1,sp,964
    109a:	0000                	unimp
    109c:	0006                	c.slli	zero,0x1
    109e:	0078                	addi	a4,sp,12
    10a0:	0076                	c.slli	zero,0x1d
    10a2:	9f1c                	0x9f1c
	...
    results[0].iterations = get_seed_32(4);
    10ac:	0350                	addi	a2,sp,388
    10ae:	0000                	unimp
    10b0:	0360                	addi	s0,sp,396
    10b2:	0000                	unimp
    10b4:	0001                	nop
    10b6:	005c                	addi	a5,sp,4
    10b8:	0000                	unimp
    10ba:	0000                	unimp
    results[0].execs = get_seed_32(5);
    10bc:	0000                	unimp
    10be:	a800                	fsd	fs0,16(s0)
    10c0:	b8000003          	lb	zero,-1152(zero) # fffffb80 <RAM_SIZE+0xfffefb80>
    10c4:	01000003          	lb	zero,16(zero) # 10 <_start>
    10c8:	5c00                	lw	s0,56(s0)
	...
    if (results[0].execs == 0)
    10d2:	044c                	addi	a1,sp,516
        results[0].execs = ALL_ALGORITHMS_MASK;
    10d4:	0000                	unimp
    10d6:	0460                	addi	s0,sp,524
    10d8:	0000                	unimp
    10da:	0001                	nop
    if ((results[0].seed1 == 0) && (results[0].seed2 == 0)
    10dc:	0000005b          	0x5b
    10e0:	0000                	unimp
    10e2:	0000                	unimp
    10e4:	c400                	sw	s0,8(s0)
    10e6:	0004                	0x4
    10e8:	dc00                	sw	s0,56(s0)
    10ea:	0004                	0x4
        && (results[0].seed3 == 0))
    10ec:	0100                	addi	s0,sp,128
    10ee:	5b00                	lw	s0,48(a4)
	...
        results[0].seed2 = 0;
    10f8:	0554                	addi	a3,sp,644
    10fa:	0000                	unimp
        results[0].seed3 = 0x66;
    10fc:	0594                	addi	a3,sp,704
    10fe:	0000                	unimp
    1100:	0001                	nop
    1102:	b460                	fsd	fs0,232(s0)
    if ((results[0].seed1 == 1) && (results[0].seed2 == 0)
    1104:	bc000007          	vloxseg6ei128.v	v0,(zero),v0,v0.t
    1108:	01000007          	vle8ff.v	v0,(zero),v0.t
    110c:	6000                	flw	fs0,0(s0)
	...
    1116:	0570                	addi	a2,sp,652
        && (results[0].seed3 == 0))
    1118:	0000                	unimp
    111a:	0580                	addi	s0,sp,704
    111c:	0000                	unimp
    111e:	0001                	nop
        results[0].seed1 = 0x3415;
    1120:	0000005b          	0x5b
    1124:	0000                	unimp
    1126:	0000                	unimp
    1128:	b800                	fsd	fs0,48(s0)
    112a:	0005                	c.nop	1
        results[0].seed2 = 0x3415;
    112c:	d400                	sw	s0,40(s0)
    112e:	0005                	c.nop	1
    1130:	0100                	addi	s0,sp,128
    1132:	6300                	flw	fs0,0(a4)
    1134:	05d4                	addi	a3,sp,708
    1136:	0000                	unimp
        results[0].seed3 = 0x66;
    1138:	05dc                	addi	a5,sp,708
    113a:	0000                	unimp
    113c:	0006                	c.slli	zero,0x1
    113e:	007c007b          	0x7c007b
for (i = 0; i < MULTITHREAD; i++)
    1142:	9f1c                	0x9f1c
    1144:	0654                	addi	a3,sp,772
    1146:	0000                	unimp
    results[i].memblock[0] = stack_memblock + i * TOTAL_DATA_SIZE;
    1148:	0668                	addi	a0,sp,780
    114a:	0000                	unimp
    114c:	0001                	nop
    114e:	00000063          	beqz	zero,114e <main+0x13e>
    1152:	0000                	unimp
    1154:	0000                	unimp
    1156:	d400                	sw	s0,40(s0)
    1158:	0005                	c.nop	1
    115a:	e400                	fsw	fs0,8(s0)
    115c:	0005                	c.nop	1
    115e:	0100                	addi	s0,sp,128
    1160:	6300                	flw	fs0,0(a4)
	...
    116a:	05f0                	addi	a2,sp,716
    116c:	0000                	unimp
    116e:	05f4                	addi	a3,sp,716
    1170:	0000                	unimp
    1172:	0001                	nop
    1174:	f45a                	fsw	fs6,40(sp)
    1176:	0005                	c.nop	1
    1178:	1c00                	addi	s0,sp,560
    117a:	0006                	c.slli	zero,0x1
    117c:	0100                	addi	s0,sp,128
    117e:	5e00                	lw	s0,56(a2)
    1180:	061c                	addi	a5,sp,768
    1182:	0000                	unimp
    1184:	0620                	addi	s0,sp,776
    1186:	0000                	unimp
    1188:	787a0003          	lb	zero,1927(s4) # ffffa787 <RAM_SIZE+0xfffea787>
    118c:	209f 0006 5400      	0x54000006209f
    1192:	0006                	c.slli	zero,0x1
    1194:	0100                	addi	s0,sp,128
    1196:	5d00                	lw	s0,56(a0)
    1198:	0670                	addi	a2,sp,780
    119a:	0000                	unimp
    results[i].size        = TOTAL_DATA_SIZE;
    119c:	0678                	addi	a4,sp,780
    119e:	0000                	unimp
    11a0:	0001                	nop
    11a2:	785a                	flw	fa6,180(sp)
    11a4:	0006                	c.slli	zero,0x1
    11a6:	8800                	0x8800
    11a8:	0006                	c.slli	zero,0x1
    11aa:	0100                	addi	s0,sp,128
    11ac:	5e00                	lw	s0,56(a2)
    11ae:	0688                	addi	a0,sp,832
    11b0:	0000                	unimp
    11b2:	06bc                	addi	a5,sp,840
    11b4:	0000                	unimp
    11b6:	0001                	nop
    11b8:	bc5d                	j	c6e <core_list_find+0x76>
    11ba:	0006                	c.slli	zero,0x1
    11bc:	c400                	sw	s0,8(s0)
    11be:	0006                	c.slli	zero,0x1
    results[i].seed1       = results[0].seed1;
    11c0:	0100                	addi	s0,sp,128
    11c2:	5e00                	lw	s0,56(a2)
    11c4:	06c4                	addi	s1,sp,836
    11c6:	0000                	unimp
    11c8:	06d0                	addi	a2,sp,836
    11ca:	0000                	unimp
    11cc:	787a0003          	lb	zero,1927(s4)
    11d0:	009f 0000 0000      	0x9f
    11d6:	0000                	unimp
    11d8:	d400                	sw	s0,40(s0)
    11da:	0002                	c.slli64	zero
    11dc:	e400                	fsw	fs0,8(s0)
    11de:	0002                	c.slli64	zero
    11e0:	0100                	addi	s0,sp,128
    11e2:	5e00                	lw	s0,56(a2)
	...
    results[i].seed2       = results[0].seed2;
    11f0:	0080                	addi	s0,sp,64
    11f2:	0000                	unimp
    11f4:	0006                	c.slli	zero,0x1
    11f6:	935a                	add	t1,t1,s6
    11f8:	5b04                	lw	s1,48(a4)
    11fa:	00800493          	li	s1,8
    11fe:	0000                	unimp
    1200:	00fc                	addi	a5,sp,76
    1202:	0000                	unimp
    1204:	0006                	c.slli	zero,0x1
    1206:	0af503f3          	0xaf503f3
    results[i].seed3       = results[0].seed3;
    120a:	9f25                	0x9f25
    120c:	00fc                	addi	a5,sp,76
    120e:	0000                	unimp
    1210:	010c                	addi	a1,sp,128
    1212:	0000                	unimp
    1214:	0006                	c.slli	zero,0x1
    1216:	935a                	add	t1,t1,s6
    1218:	5b04                	lw	s1,48(a4)
    121a:	010c0493          	addi	s1,s8,16 # ffff6010 <RAM_SIZE+0xfffe6010>
    121e:	0000                	unimp
    1220:	0144                	addi	s1,sp,132
    1222:	0000                	unimp
    1224:	0006                	c.slli	zero,0x1
    1226:	0af503f3          	0xaf503f3
    122a:	9f25                	0x9f25
    results[i].err         = 0;
    122c:	0144                	addi	s1,sp,132
    122e:	0000                	unimp
    1230:	00000147          	fmsub.s	ft2,ft0,ft0,ft0,rne
    1234:	0006                	c.slli	zero,0x1
    1236:	935a                	add	t1,t1,s6
    1238:	5b04                	lw	s1,48(a4)
    123a:	01470493          	addi	s1,a4,20 # 1a014 <RAM_SIZE+0xa014>
    123e:	0000                	unimp
    1240:	0160                	addi	s0,sp,140
    1242:	0000                	unimp
    1244:	0006                	c.slli	zero,0x1
    1246:	0af503f3          	0xaf503f3
    124a:	9f25                	0x9f25
    results[i].execs       = results[0].execs;
    124c:	0160                	addi	s0,sp,140
    124e:	0000                	unimp
    1250:	019c                	addi	a5,sp,192
    1252:	0000                	unimp
    1254:	0006                	c.slli	zero,0x1
    1256:	935a                	add	t1,t1,s6
    1258:	5b04                	lw	s1,48(a4)
    125a:	019c0493          	addi	s1,s8,25
    125e:	0000                	unimp
    1260:	07e4                	addi	s1,sp,972
    1262:	0000                	unimp
    1264:	0006                	c.slli	zero,0x1
    1266:	0af503f3          	0xaf503f3
    126a:	9f25                	0x9f25
	...
for (i = 0; i < MULTITHREAD; i++)
    1278:	0080                	addi	s0,sp,64
    127a:	0000                	unimp
    127c:	0006                	c.slli	zero,0x1
    127e:	935c                	0x935c
    1280:	5d04                	lw	s1,56(a0)
    1282:	00800493          	li	s1,8
    for (i = 0; i < NUM_ALGORITHMS; i++)
    1286:	0000                	unimp
    1288:	00fc                	addi	a5,sp,76
    128a:	0000                	unimp
        if ((1 << (ee_u32)i) & results[0].execs)
    128c:	0006                	c.slli	zero,0x1
    128e:	0cf503f3          	0xcf503f3
    1292:	9f25                	0x9f25
    1294:	00fc                	addi	a5,sp,76
    1296:	0000                	unimp
    1298:	0000010f          	0x10f
    129c:	0006                	c.slli	zero,0x1
    129e:	935c                	0x935c
    12a0:	5d04                	lw	s1,56(a0)
    12a2:	010f0493          	addi	s1,t5,16 # 1b010 <RAM_SIZE+0xb010>
    12a6:	0000                	unimp
            num_algorithms++;
    12a8:	0144                	addi	s1,sp,132
    12aa:	0000                	unimp
    12ac:	0006                	c.slli	zero,0x1
    12ae:	0cf503f3          	0xcf503f3
    12b2:	9f25                	0x9f25
    for (i = 0; i < NUM_ALGORITHMS; i++)
    12b4:	0144                	addi	s1,sp,132
    12b6:	0000                	unimp
    12b8:	00000147          	fmsub.s	ft2,ft0,ft0,ft0,rne
    12bc:	0006                	c.slli	zero,0x1
    12be:	935c                	0x935c
    12c0:	5d04                	lw	s1,56(a0)
    12c2:	01470493          	addi	s1,a4,20
    12c6:	0000                	unimp
    12c8:	0160                	addi	s0,sp,140
    12ca:	0000                	unimp
    for (i = 0; i < MULTITHREAD; i++)
    12cc:	0006                	c.slli	zero,0x1
    12ce:	0cf503f3          	0xcf503f3
    12d2:	9f25                	0x9f25
        results[i].size = results[i].size / num_algorithms;
    12d4:	0160                	addi	s0,sp,140
    12d6:	0000                	unimp
    12d8:	019c                	addi	a5,sp,192
    12da:	0000                	unimp
    12dc:	0006                	c.slli	zero,0x1
    12de:	935c                	0x935c
    12e0:	5d04                	lw	s1,56(a0)
    12e2:	019c0493          	addi	s1,s8,25
    12e6:	0000                	unimp
    12e8:	07e4                	addi	s1,sp,972
    12ea:	0000                	unimp
    12ec:	0006                	c.slli	zero,0x1
    12ee:	0cf503f3          	0xcf503f3
    12f2:	9f25                	0x9f25
	...
    1300:	0084                	addi	s1,sp,64
    1302:	0000                	unimp
    1304:	0002                	c.slli64	zero
    1306:	9f30                	0x9f30
    1308:	00fc                	addi	a5,sp,76
    130a:	0000                	unimp
    130c:	019c                	addi	a5,sp,192
    130e:	0000                	unimp
    1310:	0002                	c.slli64	zero
    1312:	9f30                	0x9f30
	...
    131c:	0080                	addi	s0,sp,64
    131e:	0000                	unimp
    1320:	0084                	addi	s1,sp,64
    1322:	0000                	unimp
    1324:	0002                	c.slli64	zero
    1326:	9f30                	0x9f30
    1328:	0084                	addi	s1,sp,64
    132a:	0000                	unimp
    for (i = 0; i < MULTITHREAD; i++)
    132c:	00fc                	addi	a5,sp,76
    132e:	0000                	unimp
    1330:	0001                	nop
    1332:	9c68                	0x9c68
    1334:	0001                	nop
    1336:	7400                	flw	fs0,40(s0)
    1338:	0002                	c.slli64	zero
    133a:	0100                	addi	s0,sp,128
    133c:	6800                	flw	fs0,16(s0)
    133e:	0694                	addi	a3,sp,832
    for (i = 0; i < NUM_ALGORITHMS; i++)
    1340:	0000                	unimp
    1342:	06c8                	addi	a0,sp,836
    1344:	0000                	unimp
    1346:	0001                	nop
        if ((1 << (ee_u32)i) & results[0].execs)
    1348:	d868                	sw	a0,116(s0)
    134a:	0006                	c.slli	zero,0x1
    134c:	f400                	fsw	fs0,40(s0)
    134e:	0006                	c.slli	zero,0x1
    1350:	0100                	addi	s0,sp,128
    1352:	6800                	flw	fs0,16(s0)
    1354:	07a8                	addi	a0,sp,968
    1356:	0000                	unimp
    1358:	07bc                	addi	a5,sp,968
    135a:	0000                	unimp
    135c:	0001                	nop
    135e:	0068                	addi	a0,sp,12
    1360:	0000                	unimp
    1362:	0000                	unimp
            for (ctx = 0; ctx < MULTITHREAD; ctx++)
    1364:	0000                	unimp
    1366:	5800                	lw	s0,48(s0)
    1368:	0000                	unimp
    136a:	6400                	flw	fs0,8(s0)
                    = (char *)(results[ctx].memblock[0]) + results[0].size * j;
    136c:	0002                	c.slli64	zero
    136e:	0600                	addi	s0,sp,768
    1370:	8500                	0x8500
    1372:	0800                	addi	s0,sp,16
    1374:	1aff                	0x1aff
    1376:	949f 0006 c800      	0xc8000006949f
    137c:	0006                	c.slli	zero,0x1
    137e:	0600                	addi	s0,sp,768
    1380:	8500                	0x8500
    1382:	0800                	addi	s0,sp,16
    1384:	1aff                	0x1aff
    1386:	d89f 0006 f400      	0xf4000006d89f
    138c:	0006                	c.slli	zero,0x1
    138e:	0600                	addi	s0,sp,768
    1390:	8500                	0x8500
    1392:	0800                	addi	s0,sp,16
    1394:	1aff                	0x1aff
    1396:	a89f 0007 bc00      	0xbc000007a89f
    139c:	06000007          	vluxei8.v	v0,(zero),v0
    13a0:	8500                	0x8500
    13a2:	0800                	addi	s0,sp,16
    13a4:	1aff                	0x1aff
    13a6:	009f 0000 0000      	0x9f
                results[ctx].memblock[i + 1]
    13ac:	0000                	unimp
    13ae:	5400                	lw	s0,40(s0)
                    = (char *)(results[ctx].memblock[0]) + results[0].size * j;
    13b0:	0000                	unimp
    13b2:	8000                	0x8000
    13b4:	0000                	unimp
    13b6:	0700                	addi	s0,sp,896
    13b8:	8200                	0x8200
    13ba:	0a00                	addi	s0,sp,272
    13bc:	ffff                	0xffff
    13be:	9f1a                	add	t5,t5,t1
    13c0:	0080                	addi	s0,sp,64
    13c2:	0000                	unimp
    13c4:	00dc                	addi	a5,sp,68
    13c6:	0000                	unimp
    13c8:	0001                	nop
    13ca:	fc62                	fsw	fs8,56(sp)
    13cc:	0000                	unimp
    13ce:	3c00                	fld	fs0,56(s0)
    13d0:	0001                	nop
    13d2:	0700                	addi	s0,sp,896
    13d4:	8200                	0x8200
    13d6:	0a00                	addi	s0,sp,272
            for (ctx = 0; ctx < MULTITHREAD; ctx++)
    13d8:	ffff                	0xffff
    13da:	9f1a                	add	t5,t5,t1
    13dc:	0144                	addi	s1,sp,132
    13de:	0000                	unimp
    13e0:	0174                	addi	a3,sp,140
    13e2:	0000                	unimp
    13e4:	00820007          	0x820007
    13e8:	ff0a                	fsw	ft2,188(sp)
    13ea:	1aff                	0x1aff
            j++;
    13ec:	749f 0001 7c00      	0x7c000001749f
    13f2:	0001                	nop
    13f4:	0900                	addi	s0,sp,144
    13f6:	7b00                	flw	fs0,48(a4)
    for (i = 0; i < NUM_ALGORITHMS; i++)
    13f8:	4400                	lw	s0,8(s0)
    13fa:	0a25                	addi	s4,s4,9
    13fc:	07ff                	0x7ff
    13fe:	9f1a                	add	t5,t5,t1
    1400:	017c                	addi	a5,sp,140
    1402:	0000                	unimp
    1404:	0184                	addi	s1,sp,192
    1406:	0000                	unimp
    1408:	00820007          	0x820007
    140c:	ff0a                	fsw	ft2,188(sp)
    140e:	1aff                	0x1aff
    for (i = 0; i < MULTITHREAD; i++)
    1410:	849f 0001 8c00      	0x8c000001849f
    1416:	0001                	nop
        if (results[i].execs & ID_LIST)
    1418:	0900                	addi	s0,sp,144
    141a:	7b00                	flw	fs0,48(a4)
    141c:	4400                	lw	s0,8(s0)
    141e:	0a25                	addi	s4,s4,9
    1420:	07ff                	0x7ff
    1422:	9f1a                	add	t5,t5,t1
    1424:	018c                	addi	a1,sp,192
    1426:	0000                	unimp
    1428:	0194                	addi	a3,sp,192
    142a:	0000                	unimp
    142c:	00820007          	0x820007
    1430:	ff0a                	fsw	ft2,188(sp)
    1432:	1aff                	0x1aff
    1434:	949f 0001 9c00      	0x9c000001949f
    143a:	0001                	nop
    143c:	0900                	addi	s0,sp,144
    143e:	7b00                	flw	fs0,48(a4)
            results[i].list = core_list_init(
    1440:	4400                	lw	s0,8(s0)
    1442:	0a25                	addi	s4,s4,9
    1444:	07ff                	0x7ff
    1446:	9f1a                	add	t5,t5,t1
                results[0].size, results[i].memblock[1], results[i].seed1);
    1448:	019c                	addi	a5,sp,192
    144a:	0000                	unimp
    144c:	023c                	addi	a5,sp,264
    144e:	0000                	unimp
    1450:	0001                	nop
    1452:	0062                	c.slli	zero,0x18
	...
    145c:	0000                	unimp
    145e:	7c00                	flw	fs0,56(s0)
    1460:	0000                	unimp
    1462:	0100                	addi	s0,sp,128
            results[i].list = core_list_init(
    1464:	5a00                	lw	s0,48(a2)
    1466:	007c                	addi	a5,sp,12
    1468:	0000                	unimp
    146a:	00fc                	addi	a5,sp,76
    146c:	0000                	unimp
    146e:	0001                	nop
    1470:	fc58                	fsw	fa4,60(s0)
    1472:	0000                	unimp
    1474:	0c00                	addi	s0,sp,528
    1476:	0001                	nop
    1478:	0100                	addi	s0,sp,128
    147a:	5a00                	lw	s0,48(a2)
    147c:	010c                	addi	a1,sp,128
    147e:	0000                	unimp
    1480:	0138                	addi	a4,sp,136
    1482:	0000                	unimp
    1484:	0001                	nop
    1486:	00013863          	0x13863
    148a:	4400                	lw	s0,8(s0)
    148c:	0001                	nop
    148e:	0100                	addi	s0,sp,128
    1490:	5800                	lw	s0,48(s0)
    1492:	0144                	addi	s1,sp,132
    1494:	0000                	unimp
    1496:	00000147          	fmsub.s	ft2,ft0,ft0,ft0,rne
    149a:	0001                	nop
    149c:	475a                	lw	a4,148(sp)
    149e:	0001                	nop
    14a0:	5800                	lw	s0,48(s0)
    14a2:	0001                	nop
    14a4:	0100                	addi	s0,sp,128
    14a6:	6300                	flw	fs0,0(a4)
    14a8:	0158                	addi	a4,sp,132
    14aa:	0000                	unimp
    14ac:	0160                	addi	s0,sp,140
    14ae:	0000                	unimp
    14b0:	0002                	c.slli64	zero
    14b2:	9f30                	0x9f30
        if (results[i].execs & ID_MATRIX)
    14b4:	0160                	addi	s0,sp,140
    14b6:	0000                	unimp
    14b8:	019c                	addi	a5,sp,192
    14ba:	0000                	unimp
    14bc:	0001                	nop
    14be:	9c5a                	add	s8,s8,s6
    14c0:	0001                	nop
    14c2:	5c00                	lw	s0,56(s0)
    14c4:	0002                	c.slli64	zero
    14c6:	0100                	addi	s0,sp,128
    14c8:	5800                	lw	s0,48(s0)
    14ca:	0694                	addi	a3,sp,832
    14cc:	0000                	unimp
    14ce:	06c8                	addi	a0,sp,836
    14d0:	0000                	unimp
    14d2:	0001                	nop
    14d4:	d858                	sw	a4,52(s0)
    14d6:	0006                	c.slli	zero,0x1
    14d8:	f400                	fsw	fs0,40(s0)
    14da:	0006                	c.slli	zero,0x1
            core_init_matrix(results[0].size,
    14dc:	0100                	addi	s0,sp,128
    14de:	5800                	lw	s0,48(s0)
    14e0:	07a8                	addi	a0,sp,968
    14e2:	0000                	unimp
    14e4:	07bc                	addi	a5,sp,968
    14e6:	0000                	unimp
    14e8:	0001                	nop
    14ea:	0058                	addi	a4,sp,4
    14ec:	0000                	unimp
    14ee:	0000                	unimp
    14f0:	0000                	unimp
    14f2:	5400                	lw	s0,40(s0)
    14f4:	0000                	unimp
    14f6:	6400                	flw	fs0,8(s0)
    14f8:	0000                	unimp
    14fa:	0100                	addi	s0,sp,128
    14fc:	5900                	lw	s0,48(a0)
    14fe:	0064                	addi	s1,sp,12
                             (ee_s32)results[i].seed1
    1500:	0000                	unimp
    1502:	006c                	addi	a1,sp,12
    1504:	0000                	unimp
    1506:	00790007          	0x790007
    150a:	4040                	lw	s0,4(s0)
    150c:	2124                	fld	fs1,64(a0)
    150e:	6c9f 0000 7800      	0x780000006c9f
    1514:	0000                	unimp
    1516:	0b00                	addi	s0,sp,400
    1518:	7b00                	flw	fs0,48(a4)
    151a:	3c00                	fld	fs0,56(s0)
    151c:	3c24                	fld	fs1,120(s0)
    151e:	4025                	c.li	zero,9
    1520:	2440                	fld	fs0,136(s0)
    1522:	9f21                	0x9f21
                                 | (((ee_s32)results[i].seed2) << 16),
    1524:	0078                	addi	a4,sp,12
    1526:	0000                	unimp
    1528:	00fc                	addi	a5,sp,76
    152a:	0000                	unimp
    152c:	0001                	nop
    152e:	fc69                	bnez	s0,1508 <main+0x4f8>
    1530:	0000                	unimp
    1532:	2c00                	fld	fs0,24(s0)
    1534:	0001                	nop
    1536:	0100                	addi	s0,sp,128
    1538:	5900                	lw	s0,48(a0)
    153a:	0134                	addi	a3,sp,136
    153c:	0000                	unimp
    153e:	0144                	addi	s1,sp,132
    1540:	0000                	unimp
    1542:	0001                	nop
    1544:	4469                	li	s0,26
    1546:	0001                	nop
            core_init_matrix(results[0].size,
    1548:	5400                	lw	s0,40(s0)
    154a:	0001                	nop
                             &(results[i].mat));
    154c:	0100                	addi	s0,sp,128
    154e:	5900                	lw	s0,48(a0)
            core_init_matrix(results[0].size,
    1550:	0158                	addi	a4,sp,132
    1552:	0000                	unimp
    1554:	0160                	addi	s0,sp,140
    1556:	0000                	unimp
    1558:	0001                	nop
    155a:	6069                	c.lui	zero,0x1a
    155c:	0001                	nop
    155e:	9c00                	0x9c00
    1560:	0001                	nop
    1562:	0100                	addi	s0,sp,128
    1564:	5900                	lw	s0,48(a0)
    1566:	019c                	addi	a5,sp,192
    1568:	0000                	unimp
    156a:	0258                	addi	a4,sp,260
    156c:	0000                	unimp
    156e:	0001                	nop
    1570:	9469                	srai	s0,s0,0x3a
    1572:	0006                	c.slli	zero,0x1
    1574:	c800                	sw	s0,16(s0)
    1576:	0006                	c.slli	zero,0x1
        if (results[i].execs & ID_STATE)
    1578:	0100                	addi	s0,sp,128
    157a:	6900                	flw	fs0,16(a0)
    157c:	06d8                	addi	a4,sp,836
    157e:	0000                	unimp
    1580:	06f4                	addi	a3,sp,844
    1582:	0000                	unimp
    1584:	0001                	nop
    1586:	a869                	j	1620 <main+0x610>
    1588:	bc000007          	vloxseg6ei128.v	v0,(zero),v0,v0.t
    158c:	01000007          	vle8ff.v	v0,(zero),v0.t
    1590:	6900                	flw	fs0,16(a0)
	...
    159a:	00c0                	addi	s0,sp,68
    159c:	0000                	unimp
    159e:	00c4                	addi	s1,sp,68
            core_init_state(
    15a0:	0000                	unimp
    15a2:	0002                	c.slli64	zero
    15a4:	9f30                	0x9f30
    15a6:	00c4                	addi	s1,sp,68
    15a8:	0000                	unimp
    15aa:	00fc                	addi	a5,sp,76
    15ac:	0000                	unimp
    15ae:	0001                	nop
    15b0:	3c5f 0002 5000      	0x500000023c5f
    15b6:	0002                	c.slli64	zero
    15b8:	0100                	addi	s0,sp,128
    15ba:	5f00                	lw	s0,56(a4)
    15bc:	0694                	addi	a3,sp,832
    15be:	0000                	unimp
    15c0:	06b0                	addi	a2,sp,840
    15c2:	0000                	unimp
    15c4:	0001                	nop
    15c6:	d85f 0006 f000      	0xf0000006d85f
                results[0].size, results[i].seed1, results[i].memblock[3]);
    15cc:	0006                	c.slli	zero,0x1
    15ce:	0100                	addi	s0,sp,128
    15d0:	5f00                	lw	s0,56(a4)
	...
    15da:	0098                	addi	a4,sp,64
    15dc:	0000                	unimp
    15de:	00fc                	addi	a5,sp,76
    15e0:	0000                	unimp
    15e2:	0006                	c.slli	zero,0x1
            core_init_state(
    15e4:	0086                	slli	ra,ra,0x1
    15e6:	ff08                	fsw	fa0,56(a4)
    15e8:	9f1a                	add	t5,t5,t1
    15ea:	019c                	addi	a5,sp,192
    15ec:	0000                	unimp
    15ee:	027c                	addi	a5,sp,268
    for (i = 0; i < MULTITHREAD; i++)
    15f0:	0000                	unimp
    15f2:	0006                	c.slli	zero,0x1
    15f4:	0086                	slli	ra,ra,0x1
    15f6:	ff08                	fsw	fa0,56(a4)
    15f8:	9f1a                	add	t5,t5,t1
    15fa:	0694                	addi	a3,sp,832
    15fc:	0000                	unimp
    15fe:	06c8                	addi	a0,sp,836
    1600:	0000                	unimp
    1602:	0006                	c.slli	zero,0x1
    if (results[0].iterations == 0)
    1604:	0086                	slli	ra,ra,0x1
    1606:	ff08                	fsw	fa0,56(a4)
    1608:	9f1a                	add	t5,t5,t1
    160a:	06d8                	addi	a4,sp,836
        secs_ret secs_passed = 0;
    160c:	0000                	unimp
    160e:	06f4                	addi	a3,sp,844
        results[0].iterations = 1;
    1610:	0000                	unimp
    1612:	0006                	c.slli	zero,0x1
    1614:	0086                	slli	ra,ra,0x1
    1616:	ff08                	fsw	fa0,56(a4)
        while (secs_passed < (secs_ret)1)
    1618:	9f1a                	add	t5,t5,t1
    161a:	07a8                	addi	a0,sp,968
            results[0].iterations *= 10;
    161c:	0000                	unimp
    161e:	07bc                	addi	a5,sp,968
    1620:	0000                	unimp
    1622:	0006                	c.slli	zero,0x1
    1624:	0086                	slli	ra,ra,0x1
    1626:	ff08                	fsw	fa0,56(a4)
    1628:	9f1a                	add	t5,t5,t1
	...
    1632:	0094                	addi	a3,sp,64
            start_time();
    1634:	0000                	unimp
    1636:	00c0                	addi	s0,sp,68
            iterate(&results[0]);
    1638:	0000                	unimp
    163a:	007a0007          	0x7a0007
    163e:	ff0a                	fsw	ft2,188(sp)
    1640:	1aff                	0x1aff
    1642:	c09f 0000 fc00      	0xfc000000c09f
            secs_passed = time_in_secs(get_time());
    1648:	0000                	unimp
    164a:	0100                	addi	s0,sp,128
    164c:	5a00                	lw	s0,48(a2)
    164e:	019c                	addi	a5,sp,192
    1650:	0000                	unimp
    1652:	01ac                	addi	a1,sp,200
    1654:	0000                	unimp
    1656:	007a0007          	0x7a0007
    165a:	ff0a                	fsw	ft2,188(sp)
        while (secs_passed < (secs_ret)1)
    165c:	1aff                	0x1aff
    165e:	e49f 0001 e800      	0xe8000001e49f
        divisor = (ee_u32)secs_passed;
    1664:	0001                	nop
    1666:	0700                	addi	s0,sp,896
    1668:	7a00                	flw	fs0,48(a2)
    166a:	0a00                	addi	s0,sp,272
        if (divisor == 0) /* some machines cast float to int as 0 since this
    166c:	ffff                	0xffff
    166e:	9f1a                	add	t5,t5,t1
    1670:	0204                	addi	s1,sp,256
    1672:	0000                	unimp
            divisor = 1;
    1674:	0214                	addi	a3,sp,256
    1676:	0000                	unimp
    1678:	007a0007          	0x7a0007
        results[0].iterations *= 1 + 10 / divisor;
    167c:	ff0a                	fsw	ft2,188(sp)
    167e:	1aff                	0x1aff
    1680:	1c9f 0002 2400      	0x240000021c9f
    1686:	0002                	c.slli64	zero
    1688:	0700                	addi	s0,sp,896
    168a:	7a00                	flw	fs0,48(a2)
    168c:	0a00                	addi	s0,sp,272
    168e:	ffff                	0xffff
    1690:	9f1a                	add	t5,t5,t1
    1692:	022c                	addi	a1,sp,264
    1694:	0000                	unimp
    1696:	0234                	addi	a3,sp,264
    1698:	0000                	unimp
    169a:	007a0007          	0x7a0007
    169e:	ff0a                	fsw	ft2,188(sp)
    16a0:	1aff                	0x1aff
    16a2:	3c9f 0002 7800      	0x780000023c9f
    start_time();
    16a8:	0002                	c.slli64	zero
    16aa:	0100                	addi	s0,sp,128
    iterate(&results[0]);
    16ac:	5a00                	lw	s0,48(a2)
    16ae:	0694                	addi	a3,sp,832
    16b0:	0000                	unimp
    16b2:	06c8                	addi	a0,sp,836
    16b4:	0000                	unimp
    16b6:	0001                	nop
    stop_time();
    16b8:	d85a                	sw	s6,48(sp)
    16ba:	0006                	c.slli	zero,0x1
    total_time = get_time();
    16bc:	f400                	fsw	fs0,40(s0)
    16be:	0006                	c.slli	zero,0x1
    16c0:	0100                	addi	s0,sp,128
    16c2:	5a00                	lw	s0,48(a2)
    seedcrc = crc16(results[0].seed1, seedcrc);
    16c4:	07a8                	addi	a0,sp,968
    16c6:	0000                	unimp
    16c8:	07bc                	addi	a5,sp,968
    16ca:	0000                	unimp
    16cc:	0001                	nop
    16ce:	005a                	c.slli	zero,0x16
    16d0:	0000                	unimp
    16d2:	0000                	unimp
    16d4:	0000                	unimp
    16d6:	8400                	0x8400
    16d8:	0000                	unimp
    16da:	bc00                	fsd	fs0,56(s0)
    16dc:	0000                	unimp
    16de:	0100                	addi	s0,sp,128
    seedcrc = crc16(results[0].seed2, seedcrc);
    16e0:	6700                	flw	fs0,8(a4)
    16e2:	00bc                	addi	a5,sp,72
    16e4:	0000                	unimp
    16e6:	00fc                	addi	a5,sp,76
    16e8:	0000                	unimp
    16ea:	0001                	nop
    16ec:	9c5d                	0x9c5d
    16ee:	0001                	nop
    16f0:	d800                	sw	s0,48(s0)
    16f2:	0001                	nop
    16f4:	0100                	addi	s0,sp,128
    16f6:	6700                	flw	fs0,8(a4)
    16f8:	01d8                	addi	a4,sp,196
    16fa:	0000                	unimp
    seedcrc = crc16(results[0].seed3, seedcrc);
    16fc:	01e4                	addi	s1,sp,204
    16fe:	0000                	unimp
    1700:	0001                	nop
    1702:	e45d                	bnez	s0,17b0 <main+0x7a0>
    1704:	0001                	nop
    1706:	fc00                	fsw	fs0,56(s0)
    1708:	0001                	nop
    170a:	0100                	addi	s0,sp,128
    170c:	6700                	flw	fs0,8(a4)
    170e:	01fc                	addi	a5,sp,204
    1710:	0000                	unimp
    1712:	0204                	addi	s1,sp,256
    1714:	0000                	unimp
    1716:	0002                	c.slli64	zero
    seedcrc = crc16(results[0].size, seedcrc);
    1718:	9f30                	0x9f30
    171a:	0204                	addi	s1,sp,256
    171c:	0000                	unimp
    171e:	023c                	addi	a5,sp,264
    1720:	0000                	unimp
    1722:	0001                	nop
    1724:	00023c67          	0x23c67
    1728:	7c00                	flw	fs0,56(s0)
    172a:	0002                	c.slli64	zero
    172c:	0100                	addi	s0,sp,128
    172e:	5d00                	lw	s0,56(a0)
    1730:	027c                	addi	a5,sp,268
    1732:	0000                	unimp
    1734:	05b4                	addi	a3,sp,712
    1736:	0000                	unimp
    1738:	0001                	nop
    173a:	9466                	add	s0,s0,s9
    switch (seedcrc)
    173c:	0006                	c.slli	zero,0x1
    173e:	ac00                	fsd	fs0,24(s0)
    1740:	0006                	c.slli	zero,0x1
    1742:	0100                	addi	s0,sp,128
    1744:	5d00                	lw	s0,56(a0)
    1746:	06d8                	addi	a4,sp,836
    1748:	0000                	unimp
    174a:	06e8                	addi	a0,sp,844
    174c:	0000                	unimp
    174e:	0001                	nop
    1750:	d85d                	beqz	s0,1706 <main+0x6f6>
    1752:	e4000007          	vluxseg8ei8.v	v0,(zero),v0,v0.t
    1756:	01000007          	vle8ff.v	v0,(zero),v0.t
    175a:	6600                	flw	fs0,8(a2)
	...
    1764:	0094                	addi	a3,sp,64
    1766:	0000                	unimp
    1768:	00a4                	addi	s1,sp,72
    176a:	0000                	unimp
    176c:	0001                	nop
    176e:	0000a463          	0xa463
    1772:	b400                	fsd	fs0,40(s0)
    1774:	0000                	unimp
    1776:	0700                	addi	s0,sp,896
    1778:	8300                	0x8300
    177a:	4000                	lw	s0,0(s0)
    177c:	2440                	fld	fs0,136(s0)
    177e:	9f21                	0x9f21
    1780:	00b8                	addi	a4,sp,72
    1782:	0000                	unimp
    1784:	00fc                	addi	a5,sp,76
    1786:	0000                	unimp
    1788:	0001                	nop
    178a:	00019c63          	bnez	gp,17a2 <main+0x792>
    178e:	2000                	fld	fs0,0(s0)
    1790:	0002                	c.slli64	zero
    1792:	0100                	addi	s0,sp,128
    1794:	6300                	flw	fs0,0(a4)
    1796:	0220                	addi	s0,sp,264
    1798:	0000                	unimp
    179a:	022c                	addi	a1,sp,264
    179c:	0000                	unimp
    179e:	0005                	c.nop	1
    17a0:	253c007b          	0x253c007b
            known_id = 0;
    17a4:	2c9f 0002 3000      	0x300000022c9f
            ee_printf("6k performance run parameters for coremark.\n");
    17aa:	0002                	c.slli64	zero
    17ac:	0100                	addi	s0,sp,128
    17ae:	6300                	flw	fs0,0(a4)
    17b0:	0230                	addi	a2,sp,264
    17b2:	0000                	unimp
            break;
    17b4:	023c                	addi	a5,sp,264
    17b6:	0000                	unimp
            known_id = 1;
    17b8:	0005                	c.nop	1
    17ba:	253c007b          	0x253c007b
    17be:	3c9f 0002 6800      	0x680000023c9f
            ee_printf("6k validation run parameters for coremark.\n");
    17c4:	0002                	c.slli64	zero
    17c6:	0100                	addi	s0,sp,128
    17c8:	6300                	flw	fs0,0(a4)
    17ca:	0268                	addi	a0,sp,268
            break;
    17cc:	0000                	unimp
    17ce:	05b8                	addi	a4,sp,712
            known_id = 2;
    17d0:	0000                	unimp
    17d2:	0001                	nop
    17d4:	9465                	srai	s0,s0,0x39
    17d6:	0006                	c.slli	zero,0x1
            ee_printf("Profile generation run parameters for coremark.\n");
    17d8:	a800                	fsd	fs0,16(s0)
    17da:	0006                	c.slli	zero,0x1
    17dc:	0100                	addi	s0,sp,128
    17de:	6300                	flw	fs0,0(a4)
    17e0:	06d8                	addi	a4,sp,836
    17e2:	0000                	unimp
            break;
    17e4:	06e4                	addi	s1,sp,844
    17e6:	0000                	unimp
            known_id = 3;
    17e8:	0001                	nop
    17ea:	0007d863          	bgez	a5,17fa <main+0x7ea>
    17ee:	e400                	fsw	fs0,8(s0)
            ee_printf("2K performance run parameters for coremark.\n");
    17f0:	01000007          	vle8ff.v	v0,(zero),v0.t
    17f4:	6500                	flw	fs0,8(a0)
	...
            break;
    17fe:	023c                	addi	a5,sp,264
            known_id = 4;
    1800:	0000                	unimp
    1802:	05d0                	addi	a2,sp,708
    1804:	0000                	unimp
    1806:	0002                	c.slli64	zero
            ee_printf("2K validation run parameters for coremark.\n");
    1808:	9f30                	0x9f30
    180a:	0694                	addi	a3,sp,832
    180c:	0000                	unimp
    180e:	06a0                	addi	s0,sp,840
    1810:	0000                	unimp
    1812:	0002                	c.slli64	zero
            break;
    1814:	9f30                	0x9f30
    1816:	06a4                	addi	s1,sp,840
            total_errors = -1;
    1818:	0000                	unimp
    181a:	06b0                	addi	a2,sp,840
    181c:	0000                	unimp
    181e:	0001                	nop
            break;
    1820:	b068                	fsd	fa0,224(s0)
    1822:	0006                	c.slli	zero,0x1
    if (known_id >= 0)
    1824:	c800                	sw	s0,16(s0)
    1826:	0006                	c.slli	zero,0x1
    1828:	0100                	addi	s0,sp,128
    182a:	5f00                	lw	s0,56(a4)
        for (i = 0; i < default_num_contexts; i++)
    182c:	06dc                	addi	a5,sp,836
    182e:	0000                	unimp
    1830:	06e0                	addi	s0,sp,844
    1832:	0000                	unimp
            results[i].err = 0;
    1834:	0001                	nop
    1836:	d85f 0007 e400      	0xe4000007d85f
    183c:	02000007          	vle8.v	v0,(zero)
    1840:	3000                	fld	fs0,32(s0)
    1842:	009f 0000 0000      	0x9f
    1848:	0000                	unimp
    184a:	d800                	sw	s0,48(s0)
    184c:	0000                	unimp
    184e:	fc00                	fsw	fs0,56(s0)
    1850:	0000                	unimp
    1852:	0100                	addi	s0,sp,128
            if ((results[i].execs & ID_LIST)
    1854:	5900                	lw	s0,48(a0)
    1856:	023c                	addi	a5,sp,264
    1858:	0000                	unimp
    185a:	0654                	addi	a3,sp,772
    185c:	0000                	unimp
    185e:	0001                	nop
    1860:	9459                	srai	s0,s0,0x36
    1862:	0006                	c.slli	zero,0x1
    1864:	a400                	fsd	fs0,8(s0)
    1866:	0006                	c.slli	zero,0x1
    1868:	0100                	addi	s0,sp,128
    186a:	5900                	lw	s0,48(a0)
    186c:	06a4                	addi	s1,sp,840
    186e:	0000                	unimp
    1870:	06b0                	addi	a2,sp,840
    1872:	0000                	unimp
    1874:	0006                	c.slli	zero,0x1
    1876:	0085                	addi	ra,ra,1
    1878:	ff08                	fsw	fa0,56(a4)
    187a:	9f1a                	add	t5,t5,t1
                && (results[i].crclist != list_known_crc[known_id]))
    187c:	06b0                	addi	a2,sp,840
    187e:	0000                	unimp
    1880:	06dc                	addi	a5,sp,836
    1882:	0000                	unimp
    1884:	0001                	nop
    1886:	dc59                	beqz	s0,1824 <main+0x814>
    1888:	0006                	c.slli	zero,0x1
    188a:	e000                	fsw	fs0,0(s0)
    188c:	0006                	c.slli	zero,0x1
    188e:	0600                	addi	s0,sp,768
    1890:	8600                	0x8600
    1892:	0800                	addi	s0,sp,16
    1894:	1aff                	0x1aff
    1896:	e09f 0006 ec00      	0xec000006e09f
    189c:	0006                	c.slli	zero,0x1
    189e:	0100                	addi	s0,sp,128
    18a0:	5900                	lw	s0,48(a0)
    18a2:	06ec                	addi	a1,sp,844
    18a4:	0000                	unimp
    18a6:	06f4                	addi	a3,sp,844
    18a8:	0000                	unimp
    18aa:	0006                	c.slli	zero,0x1
    18ac:	0085                	addi	ra,ra,1
    18ae:	0086                	slli	ra,ra,0x1
    18b0:	06f49f27          	fsh	fa5,126(s1)
                ee_printf("[%u]ERROR! list crc 0x%04x - should be 0x%04x\n",
    18b4:	0000                	unimp
    18b6:	07b8                	addi	a4,sp,968
                          results[i].crclist,
    18b8:	0000                	unimp
    18ba:	0001                	nop
    18bc:	bc59                	j	1352 <main+0x342>
    18be:	e4000007          	vluxseg8ei8.v	v0,(zero),v0,v0.t
    18c2:	01000007          	vle8ff.v	v0,(zero),v0.t
    18c6:	5900                	lw	s0,48(a0)
	...
    18d0:	00dc                	addi	a5,sp,68
    18d2:	0000                	unimp
    18d4:	00fc                	addi	a5,sp,76
    18d6:	0000                	unimp
                ee_printf("[%u]ERROR! list crc 0x%04x - should be 0x%04x\n",
    18d8:	0001                	nop
    18da:	3c62                	fld	fs8,56(sp)
                          list_known_crc[known_id]);
    18dc:	0002                	c.slli64	zero
    18de:	d400                	sw	s0,40(s0)
    18e0:	0005                	c.nop	1
    18e2:	0100                	addi	s0,sp,128
    18e4:	6200                	flw	fs0,0(a2)
    18e6:	05d4                	addi	a3,sp,708
    18e8:	0000                	unimp
    18ea:	060c                	addi	a1,sp,768
    18ec:	0000                	unimp
    18ee:	0001                	nop
                ee_printf("[%u]ERROR! list crc 0x%04x - should be 0x%04x\n",
    18f0:	0c5f 0006 1800      	0x180000060c5f
    18f6:	0006                	c.slli	zero,0x1
    18f8:	0400                	addi	s0,sp,512
    18fa:	8200                	0x8200
    18fc:	07ff                	0x7ff
    18fe:	189f 0006 3400      	0x34000006189f
                results[i].err++;
    1904:	0006                	c.slli	zero,0x1
    1906:	0100                	addi	s0,sp,128
    1908:	5f00                	lw	s0,56(a4)
    190a:	0694                	addi	a3,sp,832
    190c:	0000                	unimp
    190e:	06c8                	addi	a0,sp,836
    1910:	0000                	unimp
    1912:	0001                	nop
    1914:	d862                	sw	s8,48(sp)
    1916:	0006                	c.slli	zero,0x1
    1918:	f400                	fsw	fs0,40(s0)
    191a:	0006                	c.slli	zero,0x1
    191c:	0100                	addi	s0,sp,128
    191e:	6200                	flw	fs0,0(a2)
    1920:	06f4                	addi	a3,sp,844
    1922:	0000                	unimp
    1924:	06fc                	addi	a5,sp,844
    1926:	0000                	unimp
    1928:	0001                	nop
    192a:	fc5f 0006 2c00      	0x2c000006fc5f
    1930:	01000007          	vle8ff.v	v0,(zero),v0.t
    1934:	5b00                	lw	s0,48(a4)
    1936:	075c                	addi	a5,sp,900
    1938:	0000                	unimp
    193a:	076c                	addi	a1,sp,908
    193c:	0000                	unimp
    193e:	0002                	c.slli64	zero
    1940:	9f30                	0x9f30
    1942:	0774                	addi	a3,sp,908
    1944:	0000                	unimp
    1946:	07a4                	addi	s1,sp,968
    1948:	0000                	unimp
    194a:	0001                	nop
    194c:	0007a45b          	0x7a45b
    1950:	a800                	fsd	fs0,16(s0)
    1952:	07000007          	vluxei8.v	v0,(zero),v16
    1956:	0b00                	addi	s0,sp,400
            if ((results[i].execs & ID_MATRIX)
    1958:	fc02                	fsw	ft0,56(sp)
    195a:	0082                	c.slli64	ra
    195c:	9f1c                	0x9f1c
    195e:	07a8                	addi	a0,sp,968
    1960:	0000                	unimp
    1962:	07bc                	addi	a5,sp,968
    1964:	0000                	unimp
    1966:	0001                	nop
    1968:	d862                	sw	s8,48(sp)
    196a:	e4000007          	vluxseg8ei8.v	v0,(zero),v0,v0.t
    196e:	01000007          	vle8ff.v	v0,(zero),v0.t
    1972:	6200                	flw	fs0,0(a2)
	...
    197c:	0508                	addi	a0,sp,640
    197e:	0000                	unimp
                && (results[i].crcmatrix != matrix_known_crc[known_id]))
    1980:	059c                	addi	a5,sp,704
    1982:	0000                	unimp
    1984:	0001                	nop
    1986:	9c60                	0x9c60
    1988:	0005                	c.nop	1
    198a:	f400                	fsw	fs0,40(s0)
    198c:	0005                	c.nop	1
    198e:	0100                	addi	s0,sp,128
    1990:	5d00                	lw	s0,56(a0)
    1992:	05f4                	addi	a3,sp,716
    1994:	0000                	unimp
    1996:	05f8                	addi	a4,sp,716
    1998:	0000                	unimp
    199a:	7c7c0003          	lb	zero,1991(s8)
    199e:	f89f 0005 fc00      	0xfc000005f89f
    19a4:	0005                	c.nop	1
    19a6:	0100                	addi	s0,sp,128
    19a8:	5c00                	lw	s0,56(s0)
    19aa:	05fc                	addi	a5,sp,716
    19ac:	0000                	unimp
    19ae:	0618                	addi	a4,sp,768
    19b0:	0000                	unimp
    19b2:	0001                	nop
    19b4:	185d                	addi	a6,a6,-9
    19b6:	0006                	c.slli	zero,0x1
                ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n",
    19b8:	2400                	fld	fs0,8(s0)
    19ba:	0006                	c.slli	zero,0x1
                          results[i].crcmatrix,
    19bc:	0a00                	addi	s0,sp,272
    19be:	7d00                	flw	fs0,56(a0)
    19c0:	3300                	fld	fs0,32(a4)
    19c2:	8325                	srli	a4,a4,0x9
    19c4:	4d00                	lw	s0,24(a0)
    19c6:	2124                	fld	fs1,64(a0)
    19c8:	249f 0006 2800      	0x28000006249f
    19ce:	0006                	c.slli	zero,0x1
    19d0:	0800                	addi	s0,sp,16
    19d2:	8300                	0x8300
    19d4:	4d00                	lw	s0,24(a0)
    19d6:	7d24                	flw	fs1,120(a0)
    19d8:	2100                	fld	fs0,0(a0)
    19da:	289f 0006 2c00      	0x2c000006289f
                          matrix_known_crc[known_id]);
    19e0:	0006                	c.slli	zero,0x1
    19e2:	0600                	addi	s0,sp,768
    19e4:	7d00                	flw	fs0,56(a0)
    19e6:	7e00                	flw	fs0,56(a2)
    19e8:	2100                	fld	fs0,0(a0)
    19ea:	2c9f 0006 3000      	0x300000062c9f
    19f0:	0006                	c.slli	zero,0x1
    19f2:	0800                	addi	s0,sp,16
                ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n",
    19f4:	8300                	0x8300
    19f6:	4d00                	lw	s0,24(a0)
    19f8:	7d24                	flw	fs1,120(a0)
    19fa:	2100                	fld	fs0,0(a0)
    19fc:	309f 0006 9400      	0x94000006309f
    1a02:	0006                	c.slli	zero,0x1
                results[i].err++;
    1a04:	0100                	addi	s0,sp,128
    1a06:	5e00                	lw	s0,56(a2)
    1a08:	06a4                	addi	s1,sp,840
    1a0a:	0000                	unimp
    1a0c:	06b0                	addi	a2,sp,840
    1a0e:	0000                	unimp
    1a10:	0001                	nop
    1a12:	b058                	fsd	fa4,160(s0)
    1a14:	0006                	c.slli	zero,0x1
    1a16:	c800                	sw	s0,16(s0)
    1a18:	0006                	c.slli	zero,0x1
    1a1a:	0100                	addi	s0,sp,128
    1a1c:	5d00                	lw	s0,56(a0)
    1a1e:	06dc                	addi	a5,sp,836
    1a20:	0000                	unimp
    1a22:	06e0                	addi	s0,sp,844
    1a24:	0000                	unimp
    1a26:	0001                	nop
    1a28:	f45d                	bnez	s0,19d6 <main+0x9c6>
    1a2a:	0006                	c.slli	zero,0x1
    1a2c:	2800                	fld	fs0,16(s0)
    1a2e:	01000007          	vle8ff.v	v0,(zero),v0.t
    1a32:	5d00                	lw	s0,56(a0)
    1a34:	0728                	addi	a0,sp,904
    1a36:	0000                	unimp
    1a38:	0748                	addi	a0,sp,900
    1a3a:	0000                	unimp
    1a3c:	0001                	nop
    1a3e:	485f 0007 4c00      	0x4c000007485f
    1a44:	03000007          	vle8ff.v	v0,(zero)
    1a48:	7e00                	flw	fs0,56(a2)
    1a4a:	9f7c                	0x9f7c
    1a4c:	074c                	addi	a1,sp,900
    1a4e:	0000                	unimp
    1a50:	0750                	addi	a2,sp,900
    1a52:	0000                	unimp
    1a54:	0001                	nop
    1a56:	505e                	0x505e
    1a58:	64000007          	vluxseg4ei8.v	v0,(zero),v0,v0.t
            if ((results[i].execs & ID_STATE)
    1a5c:	01000007          	vle8ff.v	v0,(zero),v0.t
    1a60:	5f00                	lw	s0,56(a4)
    1a62:	0768                	addi	a0,sp,908
    1a64:	0000                	unimp
    1a66:	076c                	addi	a1,sp,908
    1a68:	0000                	unimp
    1a6a:	0001                	nop
    1a6c:	745e                	flw	fs0,244(sp)
    1a6e:	a0000007          	vlseg6e8.v	v0,(zero),v0.t
    1a72:	01000007          	vle8ff.v	v0,(zero),v0.t
    1a76:	5d00                	lw	s0,56(a0)
    1a78:	07a0                	addi	s0,sp,968
    1a7a:	0000                	unimp
    1a7c:	07a8                	addi	a0,sp,968
    1a7e:	0000                	unimp
    1a80:	0001                	nop
    1a82:	c85f 0007 d400      	0xd4000007c85f
                && (results[i].crcstate != state_known_crc[known_id]))
    1a88:	01000007          	vle8ff.v	v0,(zero),v0.t
    1a8c:	5f00                	lw	s0,56(a4)
    1a8e:	07d8                	addi	a4,sp,964
    1a90:	0000                	unimp
    1a92:	07dc                	addi	a5,sp,964
    1a94:	0000                	unimp
    1a96:	0001                	nop
    1a98:	dc5d                	beqz	s0,1a56 <main+0xa46>
    1a9a:	e4000007          	vluxseg8ei8.v	v0,(zero),v0,v0.t
    1a9e:	01000007          	vle8ff.v	v0,(zero),v0.t
    1aa2:	6000                	flw	fs0,0(s0)
	...
    1aac:	0340                	addi	s0,sp,388
    1aae:	0000                	unimp
    1ab0:	03ec                	addi	a1,sp,460
    1ab2:	0000                	unimp
    1ab4:	0001                	nop
    1ab6:	ec60                	fsw	fs0,92(s0)
    1ab8:	18000003          	lb	zero,384(zero) # 180 <calc_func+0xbc>
                ee_printf("[%u]ERROR! state crc 0x%04x - should be 0x%04x\n",
    1abc:	0006                	c.slli	zero,0x1
    1abe:	0100                	addi	s0,sp,128
                          results[i].crcstate,
    1ac0:	6300                	flw	fs0,0(a4)
    1ac2:	0618                	addi	a4,sp,768
    1ac4:	0000                	unimp
    1ac6:	0630                	addi	a2,sp,776
    1ac8:	0000                	unimp
    1aca:	0005                	c.nop	1
    1acc:	25330083          	lb	ra,595(t1)
    1ad0:	309f 0006 3c00      	0x3c000006309f
    1ad6:	0006                	c.slli	zero,0x1
    1ad8:	0100                	addi	s0,sp,128
    1ada:	5b00                	lw	s0,48(a4)
    1adc:	06a4                	addi	s1,sp,840
    1ade:	0000                	unimp
                ee_printf("[%u]ERROR! state crc 0x%04x - should be 0x%04x\n",
    1ae0:	06b0                	addi	a2,sp,840
    1ae2:	0000                	unimp
                          state_known_crc[known_id]);
    1ae4:	0001                	nop
    1ae6:	b069                	j	1370 <main+0x360>
    1ae8:	0006                	c.slli	zero,0x1
    1aea:	c800                	sw	s0,16(s0)
    1aec:	0006                	c.slli	zero,0x1
    1aee:	0100                	addi	s0,sp,128
    1af0:	6300                	flw	fs0,0(a4)
    1af2:	06dc                	addi	a5,sp,836
    1af4:	0000                	unimp
    1af6:	06e0                	addi	s0,sp,844
                ee_printf("[%u]ERROR! state crc 0x%04x - should be 0x%04x\n",
    1af8:	0000                	unimp
    1afa:	0001                	nop
    1afc:	0006f463          	bgeu	a3,zero,1b04 <main+0xaf4>
    1b00:	2c00                	fld	fs0,24(s0)
    1b02:	01000007          	vle8ff.v	v0,(zero),v0.t
    1b06:	6300                	flw	fs0,0(a4)
                results[i].err++;
    1b08:	072c                	addi	a1,sp,904
    1b0a:	0000                	unimp
    1b0c:	076c                	addi	a1,sp,908
    1b0e:	0000                	unimp
    1b10:	0001                	nop
    1b12:	0007745b          	0x7745b
    1b16:	a000                	fsd	fs0,0(s0)
    1b18:	01000007          	vle8ff.v	v0,(zero),v0.t
    1b1c:	6300                	flw	fs0,0(a4)
    1b1e:	07a0                	addi	s0,sp,968
    1b20:	0000                	unimp
    1b22:	07a8                	addi	a0,sp,968
    1b24:	0000                	unimp
    1b26:	0002                	c.slli64	zero
    1b28:	9f30                	0x9f30
    1b2a:	07c8                	addi	a0,sp,964
    1b2c:	0000                	unimp
    1b2e:	07cc                	addi	a1,sp,964
    1b30:	0000                	unimp
    1b32:	0001                	nop
    1b34:	0007d85b          	0x7d85b
    1b38:	e400                	fsw	fs0,8(s0)
    1b3a:	01000007          	vle8ff.v	v0,(zero),v0.t
    1b3e:	6300                	flw	fs0,0(a4)
	...
    1b48:	0110                	addi	a2,sp,128
    1b4a:	0000                	unimp
    1b4c:	0114                	addi	a3,sp,128
    1b4e:	0000                	unimp
    1b50:	0001                	nop
    1b52:	145a                	slli	s0,s0,0x36
    1b54:	0001                	nop
    1b56:	4400                	lw	s0,8(s0)
    1b58:	0001                	nop
    1b5a:	0100                	addi	s0,sp,128
    1b5c:	5f00                	lw	s0,56(a4)
    1b5e:	0148                	addi	a0,sp,132
            total_errors += results[i].err;
    1b60:	0000                	unimp
    1b62:	0150                	addi	a2,sp,132
    1b64:	0000                	unimp
    1b66:	0001                	nop
    1b68:	505a                	0x505a
    1b6a:	0001                	nop
    1b6c:	6000                	flw	fs0,0(s0)
    1b6e:	0001                	nop
    1b70:	0100                	addi	s0,sp,128
    1b72:	5f00                	lw	s0,56(a4)
	...
    1b7c:	01b0                	addi	a2,sp,200
    1b7e:	0000                	unimp
    1b80:	01b4                	addi	a3,sp,200
    1b82:	0000                	unimp
    1b84:	0001                	nop
    1b86:	b45a                	fsd	fs6,40(sp)
    1b88:	0001                	nop
    1b8a:	e400                	fsw	fs0,8(s0)
    1b8c:	0001                	nop
    1b8e:	0100                	addi	s0,sp,128
    1b90:	5f00                	lw	s0,56(a4)
    1b92:	01ec                	addi	a1,sp,204
    1b94:	0000                	unimp
    1b96:	01f4                	addi	a3,sp,204
    1b98:	0000                	unimp
    1b9a:	0001                	nop
        for (i = 0; i < default_num_contexts; i++)
    1b9c:	f45a                	fsw	fs6,40(sp)
    1b9e:	0001                	nop
    1ba0:	0400                	addi	s0,sp,512
    1ba2:	0002                	c.slli64	zero
    1ba4:	0100                	addi	s0,sp,128
    1ba6:	5f00                	lw	s0,56(a4)
	...
    1bb0:	0248                	addi	a0,sp,260
    1bb2:	0000                	unimp
    1bb4:	0258                	addi	a4,sp,260
    1bb6:	0000                	unimp
    total_errors += check_data_types();
    1bb8:	0005                	c.nop	1
    1bba:	0089                	addi	ra,ra,2
    1bbc:	2531                	jal	21c8 <core_init_matrix+0x34>
    1bbe:	589f 0002 f400      	0xf4000002589f
    1bc4:	0002                	c.slli64	zero
    1bc6:	0100                	addi	s0,sp,128
    1bc8:	6900                	flw	fs0,16(a0)
    1bca:	0698                	addi	a4,sp,832
    1bcc:	0000                	unimp
    1bce:	06a0                	addi	s0,sp,840
    1bd0:	0000                	unimp
    1bd2:	0001                	nop
    1bd4:	0069                	c.nop	26
    1bd6:	0000                	unimp
    1bd8:	0000                	unimp
    1bda:	0000                	unimp
    ee_printf("CoreMark Size    : %lu\n", (long unsigned)results[0].size);
    1bdc:	5000                	lw	s0,32(s0)
    1bde:	0002                	c.slli64	zero
    1be0:	5c00                	lw	s0,56(s0)
    1be2:	0002                	c.slli64	zero
    1be4:	0600                	addi	s0,sp,768
    1be6:	7e00                	flw	fs0,56(a2)
    1be8:	7f00                	flw	fs0,56(a4)
    1bea:	2100                	fld	fs0,0(a0)
    1bec:	5c9f 0002 0400      	0x40000025c9f
    ee_printf("Total ticks      : %lu\n", (long unsigned)total_time);
    1bf2:	01000003          	lb	zero,16(zero) # 10 <_start>
    1bf6:	5800                	lw	s0,48(s0)
    1bf8:	0698                	addi	a4,sp,832
    1bfa:	0000                	unimp
    1bfc:	06a0                	addi	s0,sp,840
    1bfe:	0000                	unimp
    ee_printf("Total time (secs): %d\n", time_in_secs(total_time));
    1c00:	0001                	nop
    1c02:	0058                	addi	a4,sp,4
    1c04:	0000                	unimp
    1c06:	0000                	unimp
    1c08:	0000                	unimp
    1c0a:	5400                	lw	s0,40(s0)
    1c0c:	0002                	c.slli64	zero
    1c0e:	dc00                	sw	s0,56(s0)
    1c10:	01000003          	lb	zero,16(zero) # 10 <_start>
    1c14:	6b00                	flw	fs0,16(a4)
    1c16:	0698                	addi	a4,sp,832
    1c18:	0000                	unimp
    1c1a:	06a0                	addi	s0,sp,840
    if (time_in_secs(total_time) > 0)
    1c1c:	0000                	unimp
    1c1e:	0002                	c.slli64	zero
    1c20:	9f30                	0x9f30
	...
    1c2a:	0340                	addi	s0,sp,388
                  default_num_contexts * results[0].iterations
    1c2c:	0000                	unimp
    1c2e:	03e8                	addi	a0,sp,460
    1c30:	0000                	unimp
    1c32:	0001                	nop
    1c34:	ec58                	fsw	fa4,28(s0)
    1c36:	20000003          	lb	zero,512(zero) # 200 <calc_func+0x13c>
    1c3a:	0004                	0x4
    1c3c:	0100                	addi	s0,sp,128
    1c3e:	5800                	lw	s0,48(s0)
    1c40:	0428                	addi	a0,sp,520
    1c42:	0000                	unimp
    1c44:	0494                	addi	a3,sp,576
    1c46:	0000                	unimp
    1c48:	0001                	nop
    1c4a:	0858                	addi	a4,sp,20
                      / time_in_secs(total_time));
    1c4c:	0005                	c.nop	1
    1c4e:	9800                	0x9800
    1c50:	0005                	c.nop	1
    1c52:	0100                	addi	s0,sp,128
    1c54:	5f00                	lw	s0,56(a4)
    1c56:	059c                	addi	a5,sp,704
        ee_printf("Iterations/Sec   : %d\n",
    1c58:	0000                	unimp
    1c5a:	05c8                	addi	a0,sp,708
    1c5c:	0000                	unimp
    1c5e:	0001                	nop
    1c60:	c85f 0005 cc00      	0xcc000005c85f
    1c66:	0005                	c.nop	1
    1c68:	0100                	addi	s0,sp,128
    1c6a:	5c00                	lw	s0,56(s0)
    1c6c:	07d8                	addi	a4,sp,964
    1c6e:	0000                	unimp
    1c70:	07dc                	addi	a5,sp,964
    1c72:	0000                	unimp
    1c74:	0001                	nop
    1c76:	005f 0000 0000      	0x5f
    if (time_in_secs(total_time) < 10)
    1c7c:	0000                	unimp
    1c7e:	c800                	sw	s0,16(s0)
    1c80:	dc000003          	lb	zero,-576(zero) # fffffdc0 <RAM_SIZE+0xfffefdc0>
    1c84:	01000003          	lb	zero,16(zero) # 10 <_start>
    1c88:	6b00                	flw	fs0,16(a4)
    1c8a:	03ec                	addi	a1,sp,460
        ee_printf(
    1c8c:	0000                	unimp
    1c8e:	0408                	addi	a0,sp,512
    1c90:	0000                	unimp
    1c92:	0001                	nop
    1c94:	0004186b          	0x4186b
        total_errors++;
    1c98:	2800                	fld	fs0,16(s0)
    1c9a:	0004                	0x4
    1c9c:	0100                	addi	s0,sp,128
    1c9e:	6b00                	flw	fs0,16(a4)
    1ca0:	0428                	addi	a0,sp,520
    1ca2:	0000                	unimp
    1ca4:	04c8                	addi	a0,sp,580
    1ca6:	0000                	unimp
    1ca8:	0001                	nop
    1caa:	8464                	0x8464
    1cac:	0005                	c.nop	1
    1cae:	9c00                	0x9c00
    1cb0:	0005                	c.nop	1
    1cb2:	0200                	addi	s0,sp,256
              (long unsigned)default_num_contexts * results[0].iterations);
    1cb4:	3000                	fld	fs0,32(s0)
    1cb6:	9c9f 0005 b400      	0xb40000059c9f
    1cbc:	0005                	c.nop	1
    1cbe:	0100                	addi	s0,sp,128
    ee_printf("Iterations       : %lu\n",
    1cc0:	6600                	flw	fs0,8(a2)
    1cc2:	05c0                	addi	s0,sp,708
    1cc4:	0000                	unimp
    1cc6:	05c4                	addi	s1,sp,708
    1cc8:	0000                	unimp
    1cca:	0001                	nop
    1ccc:	c45e                	sw	s7,8(sp)
    1cce:	0005                	c.nop	1
    1cd0:	cc00                	sw	s0,24(s0)
    1cd2:	0005                	c.nop	1
    1cd4:	0100                	addi	s0,sp,128
    1cd6:	6600                	flw	fs0,8(a2)
    1cd8:	07d8                	addi	a4,sp,964
    1cda:	0000                	unimp
    1cdc:	07dc                	addi	a5,sp,964
    1cde:	0000                	unimp
    ee_printf("Compiler version : %s\n", COMPILER_VERSION);
    1ce0:	0001                	nop
    1ce2:	0066                	c.slli	zero,0x19
    1ce4:	0000                	unimp
    1ce6:	0000                	unimp
    1ce8:	0000                	unimp
    1cea:	c400                	sw	s0,8(s0)
    1cec:	2c000003          	lb	zero,704(zero) # 2c0 <cmp_complex+0x4>
    1cf0:	0004                	0x4
    1cf2:	0100                	addi	s0,sp,128
    ee_printf("Compiler flags   : %s\n", COMPILER_FLAGS);
    1cf4:	5d00                	lw	s0,56(a0)
    1cf6:	042c                	addi	a1,sp,520
    1cf8:	0000                	unimp
    1cfa:	0000043b          	0x43b
    1cfe:	0008                	0x8
    1d00:	007e                	c.slli	zero,0x1f
    1d02:	2540                	fld	fs0,136(a0)
    1d04:	007c                	addi	a5,sp,12
    1d06:	9f22                	add	t5,t5,s0
    ee_printf("Memory location  : %s\n", MEM_LOCATION);
    1d08:	0580                	addi	s0,sp,704
    1d0a:	0000                	unimp
    1d0c:	05d0                	addi	a2,sp,708
    1d0e:	0000                	unimp
    1d10:	0001                	nop
    1d12:	d85c                	sw	a5,52(s0)
    1d14:	e4000007          	vluxseg8ei8.v	v0,(zero),v0,v0.t
    1d18:	01000007          	vle8ff.v	v0,(zero),v0.t
    ee_printf("seedcrc          : 0x%04x\n", seedcrc);
    1d1c:	5c00                	lw	s0,56(s0)
	...
    1d26:	03c8                	addi	a0,sp,452
    1d28:	0000                	unimp
    1d2a:	041c                	addi	a5,sp,512
    1d2c:	0000                	unimp
    1d2e:	0001                	nop
    if (results[0].execs & ID_LIST)
    1d30:	8464                	0x8464
    1d32:	0005                	c.nop	1
    1d34:	d000                	sw	s0,32(s0)
    1d36:	0005                	c.nop	1
    1d38:	0100                	addi	s0,sp,128
    1d3a:	5a00                	lw	s0,48(a2)
        for (i = 0; i < default_num_contexts; i++)
    1d3c:	07d8                	addi	a4,sp,964
    1d3e:	0000                	unimp
    1d40:	07e4                	addi	s1,sp,972
    1d42:	0000                	unimp
            ee_printf("[%d]crclist       : 0x%04x\n", i, results[i].crclist);
    1d44:	0001                	nop
    1d46:	005a                	c.slli	zero,0x16
    1d48:	0000                	unimp
    1d4a:	0000                	unimp
    1d4c:	0000                	unimp
    1d4e:	7c00                	flw	fs0,56(s0)
    1d50:	0002                	c.slli64	zero
    1d52:	8300                	0x8300
    1d54:	0002                	c.slli64	zero
    1d56:	0100                	addi	s0,sp,128
    1d58:	5b00                	lw	s0,48(a4)
    1d5a:	00000283          	lb	t0,0(zero) # 0 <RAM_START_ADDRESS>
    1d5e:	05d0                	addi	a2,sp,708
    1d60:	0000                	unimp
    1d62:	0001                	nop
    1d64:	0007d867          	0x7d867
    1d68:	e400                	fsw	fs0,8(s0)
    1d6a:	01000007          	vle8ff.v	v0,(zero),v0.t
    1d6e:	6700                	flw	fs0,8(a4)
	...
    1d78:	0280                	addi	s0,sp,320
    1d7a:	0000                	unimp
        for (i = 0; i < default_num_contexts; i++)
    1d7c:	04b4                	addi	a3,sp,584
    1d7e:	0000                	unimp
    1d80:	0001                	nop
    1d82:	b468                	fsd	fa0,232(s0)
    1d84:	0004                	0x4
    1d86:	b800                	fsd	fs0,48(s0)
    1d88:	0005                	c.nop	1
    1d8a:	0700                	addi	s0,sp,896
    1d8c:	8500                	0x8500
    1d8e:	4000                	lw	s0,0(s0)
    1d90:	4024                	lw	s1,64(s0)
    1d92:	9f25                	0x9f25
    1d94:	07d8                	addi	a4,sp,964
    1d96:	0000                	unimp
    if (results[0].execs & ID_MATRIX)
    1d98:	07e4                	addi	s1,sp,972
    1d9a:	0000                	unimp
    1d9c:	00850007          	0x850007
    1da0:	2440                	fld	fs0,136(s0)
    1da2:	2540                	fld	fs0,136(a0)
        for (i = 0; i < default_num_contexts; i++)
    1da4:	009f 0000 0000      	0x9f
    1daa:	0000                	unimp
            ee_printf("[%d]crcmatrix     : 0x%04x\n", i, results[i].crcmatrix);
    1dac:	8c00                	0x8c00
    1dae:	0002                	c.slli64	zero
    1db0:	9000                	0x9000
    1db2:	0002                	c.slli64	zero
    1db4:	0100                	addi	s0,sp,128
    1db6:	5a00                	lw	s0,48(a2)
    1db8:	0290                	addi	a2,sp,320
    1dba:	0000                	unimp
    1dbc:	00000293          	li	t0,0
    1dc0:	0001                	nop
    1dc2:	0002935b          	0x2935b
    1dc6:	c000                	sw	s0,0(s0)
    1dc8:	0002                	c.slli64	zero
    1dca:	0100                	addi	s0,sp,128
    1dcc:	6a00                	flw	fs0,16(a2)
    1dce:	02c0                	addi	s0,sp,324
    1dd0:	0000                	unimp
    1dd2:	03b8                	addi	a4,sp,456
    1dd4:	0000                	unimp
    1dd6:	0001                	nop
    1dd8:	0064                	addi	s1,sp,12
    1dda:	0000                	unimp
    1ddc:	0000                	unimp
    1dde:	0000                	unimp
    1de0:	e800                	fsw	fs0,16(s0)
    1de2:	0002                	c.slli64	zero
        for (i = 0; i < default_num_contexts; i++)
    1de4:	ec00                	fsw	fs0,24(s0)
    1de6:	0002                	c.slli64	zero
    1de8:	0100                	addi	s0,sp,128
    1dea:	5a00                	lw	s0,48(a2)
    1dec:	02ec                	addi	a1,sp,332
    1dee:	0000                	unimp
    1df0:	000002ef          	jal	t0,1df0 <main+0xde0>
    1df4:	0001                	nop
    1df6:	0002ef5b          	0x2ef5b
    1dfa:	2000                	fld	fs0,0(s0)
    1dfc:	01000003          	lb	zero,16(zero) # 10 <_start>
    if (results[0].execs & ID_STATE)
    1e00:	6a00                	flw	fs0,16(a2)
    1e02:	0320                	addi	s0,sp,392
    1e04:	0000                	unimp
    1e06:	0364                	addi	s1,sp,396
    1e08:	0000                	unimp
    1e0a:	0001                	nop
        for (i = 0; i < default_num_contexts; i++)
    1e0c:	005f 0000 0000      	0x5f
    1e12:	0000                	unimp
            ee_printf("[%d]crcstate      : 0x%04x\n", i, results[i].crcstate);
    1e14:	8000                	0x8000
    1e16:	0002                	c.slli64	zero
    1e18:	8300                	0x8300
    1e1a:	0002                	c.slli64	zero
    1e1c:	0600                	addi	s0,sp,768
    1e1e:	8900                	0x8900
    1e20:	7b00                	flw	fs0,48(a4)
    1e22:	1d00                	addi	s0,sp,688
    1e24:	839f 0002 b000      	0xb0000002839f
    1e2a:	0002                	c.slli64	zero
    1e2c:	0600                	addi	s0,sp,768
    1e2e:	8900                	0x8900
    1e30:	8700                	0x8700
    1e32:	1d00                	addi	s0,sp,688
    1e34:	b09f 0002 bc00      	0xbc000002b09f
    1e3a:	0002                	c.slli64	zero
    1e3c:	0100                	addi	s0,sp,128
    1e3e:	5e00                	lw	s0,56(a2)
    1e40:	02bc                	addi	a5,sp,328
    1e42:	0000                	unimp
    1e44:	02c0                	addi	s0,sp,324
    1e46:	0000                	unimp
    1e48:	0008                	0x8
    1e4a:	0078                	addi	a4,sp,12
        for (i = 0; i < default_num_contexts; i++)
    1e4c:	2540                	fld	fs0,136(a0)
    1e4e:	007a                	c.slli	zero,0x1e
    1e50:	9f21                	0x9f21
    1e52:	02c0                	addi	s0,sp,324
    1e54:	0000                	unimp
    1e56:	02d4                	addi	a3,sp,324
    1e58:	0000                	unimp
    1e5a:	0001                	nop
    1e5c:	d45e                	sw	s7,40(sp)
    1e5e:	0002                	c.slli64	zero
    1e60:	d000                	sw	s0,32(s0)
    1e62:	01000003          	lb	zero,16(zero) # 10 <_start>
    1e66:	6300                	flw	fs0,0(a4)
	...
        ee_printf("[%d]crcfinal      : 0x%04x\n", i, results[i].crc);
    1e70:	02d4                	addi	a3,sp,324
    1e72:	0000                	unimp
    1e74:	0310                	addi	a2,sp,384
    1e76:	0000                	unimp
    1e78:	0006                	c.slli	zero,0x1
    1e7a:	00870083          	lb	ra,8(a4)
    1e7e:	9f1d                	0x9f1d
    1e80:	0310                	addi	a2,sp,384
    1e82:	0000                	unimp
    1e84:	031c                	addi	a5,sp,384
    1e86:	0000                	unimp
    1e88:	0001                	nop
    1e8a:	2058                	fld	fa4,128(s0)
    1e8c:	e8000003          	lb	zero,-384(zero) # fffffe80 <RAM_SIZE+0xfffefe80>
    1e90:	01000003          	lb	zero,16(zero) # 10 <_start>
    1e94:	5800                	lw	s0,48(s0)
	...
    1e9e:	0298                	addi	a4,sp,320
    1ea0:	0000                	unimp
    1ea2:	02a0                	addi	s0,sp,328
    1ea4:	0000                	unimp
    1ea6:	0001                	nop
    for (i = 0; i < default_num_contexts; i++)
    1ea8:	a05a                	fsd	fs6,0(sp)
    1eaa:	0002                	c.slli64	zero
    1eac:	d400                	sw	s0,40(s0)
    1eae:	0002                	c.slli64	zero
    1eb0:	0100                	addi	s0,sp,128
    1eb2:	6300                	flw	fs0,0(a4)
    1eb4:	02f4                	addi	a3,sp,332
    1eb6:	0000                	unimp
    1eb8:	02fc                	addi	a5,sp,332
    1eba:	0000                	unimp
    1ebc:	0001                	nop
    1ebe:	fc5a                	fsw	fs6,56(sp)
    1ec0:	0002                	c.slli64	zero
    1ec2:	4400                	lw	s0,8(s0)
    if (total_errors == 0)
    1ec4:	01000003          	lb	zero,16(zero) # 10 <_start>
    1ec8:	6900                	flw	fs0,16(a0)
	...
        ee_printf(
    1ed2:	0364                	addi	s1,sp,396
    1ed4:	0000                	unimp
    1ed6:	036c                	addi	a1,sp,396
    if (total_errors > 0)
    1ed8:	0000                	unimp
    1eda:	0001                	nop
    1edc:	6c5a                	flw	fs8,148(sp)
    1ede:	c0000003          	lb	zero,-1024(zero) # fffffc00 <RAM_SIZE+0xfffefc00>
        ee_printf("Errors detected\n");
    1ee2:	01000003          	lb	zero,16(zero) # 10 <_start>
    1ee6:	5f00                	lw	s0,56(a4)
	...
    if (total_errors < 0)
    1ef0:	0374                	addi	a3,sp,396
    1ef2:	0000                	unimp
        ee_printf(
    1ef4:	037c                	addi	a5,sp,396
    1ef6:	0000                	unimp
    1ef8:	0001                	nop
    1efa:	7c5a                	flw	fs8,180(sp)
    1efc:	98000003          	lb	zero,-1664(zero) # fffff980 <RAM_SIZE+0xfffef980>
    portable_fini(&(results[0].port));
    1f00:	01000003          	lb	zero,16(zero) # 10 <_start>
    1f04:	6100                	flw	fs0,0(a0)
    1f06:	03a0                	addi	s0,sp,456
    1f08:	0000                	unimp
    1f0a:	0000043b          	0x43b
    1f0e:	0001                	nop
    return MAIN_RETURN_VAL;
    1f10:	005e                	c.slli	zero,0x17
    1f12:	0000                	unimp
}
    1f14:	0000                	unimp
    1f16:	0000                	unimp
    1f18:	8400                	0x8400
    1f1a:	3b000003          	lb	zero,944(zero) # 3b0 <cmp_idx+0x88>
    1f1e:	0004                	0x4
    1f20:	0100                	addi	s0,sp,128
    1f22:	5600                	lw	s0,40(a2)
	...
{
    1f2c:	03a0                	addi	s0,sp,456
    1f2e:	0000                	unimp
    1f30:	03a8                	addi	a0,sp,456
    1f32:	0000                	unimp
    1f34:	0001                	nop
    1f36:	a85a                	fsd	fs6,16(sp)
    1f38:	3b000003          	lb	zero,944(zero) # 3b0 <cmp_idx+0x88>
    1f3c:	0004                	0x4
    1f3e:	0100                	addi	s0,sp,128
    1f40:	5c00                	lw	s0,56(s0)
	...
    1f4a:	0340                	addi	s0,sp,388
    1f4c:	0000                	unimp
    1f4e:	0000043b          	0x43b
    1f52:	0001                	nop
    ee_u32  N   = p->N;
    1f54:	0060                	addi	s0,sp,12
    1f56:	0000                	unimp
    1f58:	0000                	unimp
    1f5a:	0000                	unimp
    1f5c:	5000                	lw	s0,32(s0)
    1f5e:	b4000003          	lb	zero,-1216(zero) # fffffb40 <RAM_SIZE+0xfffefb40>
    MATRES *C   = p->C;
    1f62:	0005                	c.nop	1
    1f64:	0100                	addi	s0,sp,128
    1f66:	6600                	flw	fs0,8(a2)
    1f68:	07d8                	addi	a4,sp,964
    1f6a:	0000                	unimp
    MATDAT *A   = p->A;
    1f6c:	07e4                	addi	s1,sp,972
    1f6e:	0000                	unimp
    1f70:	0001                	nop
    1f72:	0066                	c.slli	zero,0x19
    1f74:	0000                	unimp
    1f76:	0000                	unimp
    MATDAT *B   = p->B;
    1f78:	0000                	unimp
    1f7a:	5000                	lw	s0,32(s0)
    1f7c:	94000003          	lb	zero,-1728(zero) # fffff940 <RAM_SIZE+0xfffef940>
    1f80:	01000003          	lb	zero,16(zero) # 10 <_start>
    MATDAT  val = (MATDAT)seed;
    1f84:	5e00                	lw	s0,56(a2)
    1f86:	0394                	addi	a3,sp,448
    1f88:	0000                	unimp
    1f8a:	0000043b          	0x43b
    crc = crc16(matrix_test(N, C, A, B, val), crc);
    1f8e:	0005                	c.nop	1
    1f90:	0080                	addi	s0,sp,64
    1f92:	2540                	fld	fs0,136(a0)
    1f94:	009f 0000 0000      	0x9f
    1f9a:	0000                	unimp
    1f9c:	5400                	lw	s0,40(s0)
    1f9e:	d0000003          	lb	zero,-768(zero) # fffffd00 <RAM_SIZE+0xfffefd00>
    1fa2:	0005                	c.nop	1
    1fa4:	0100                	addi	s0,sp,128
    1fa6:	6a00                	flw	fs0,16(a2)
    1fa8:	07d8                	addi	a4,sp,964
    1faa:	0000                	unimp
    1fac:	07e4                	addi	s1,sp,972
    1fae:	0000                	unimp
    1fb0:	0001                	nop
    1fb2:	006a                	c.slli	zero,0x1a
    1fb4:	0000                	unimp
    1fb6:	0000                	unimp
    1fb8:	0000                	unimp
    1fba:	ec00                	fsw	fs0,24(s0)
    1fbc:	08000003          	lb	zero,128(zero) # 80 <__do_global_dtors_aux+0x24>
    1fc0:	0004                	0x4
    1fc2:	0100                	addi	s0,sp,128
    1fc4:	6b00                	flw	fs0,16(a4)
	...
}
    1fce:	0414                	addi	a3,sp,512
    1fd0:	0000                	unimp
    1fd2:	0418                	addi	a4,sp,512
    1fd4:	0000                	unimp
    1fd6:	0001                	nop
    1fd8:	0000006b          	0x6b
    1fdc:	0000                	unimp
    1fde:	0000                	unimp
{
    1fe0:	1c00                	addi	s0,sp,560
    1fe2:	0004                	0x4
    1fe4:	c800                	sw	s0,16(s0)
    1fe6:	0004                	0x4
    1fe8:	0100                	addi	s0,sp,128
    1fea:	6400                	flw	fs0,8(s0)
	...
    1ff4:	0430                	addi	a2,sp,520
    1ff6:	0000                	unimp
    1ff8:	05d0                	addi	a2,sp,708
    1ffa:	0000                	unimp
    1ffc:	0001                	nop
    1ffe:	0007d867          	0x7d867
    2002:	e400                	fsw	fs0,8(s0)
    2004:	01000007          	vle8ff.v	v0,(zero),v0.t
    ee_u16 crc     = 0;
    2008:	6700                	flw	fs0,8(a4)
	...
    MATDAT clipval = matrix_big(val);
    2012:	0430                	addi	a2,sp,520
    2014:	0000                	unimp
    2016:	04b4                	addi	a3,sp,584
    2018:	0000                	unimp
    201a:	0001                	nop
    matrix_add_const(N, A, val); /* make sure data changes  */
    201c:	b468                	fsd	fa0,232(s0)
    201e:	0004                	0x4
    2020:	b800                	fsd	fs0,48(s0)
    2022:	0005                	c.nop	1
    2024:	0700                	addi	s0,sp,896
    2026:	8500                	0x8500
    2028:	4000                	lw	s0,0(s0)
    202a:	4024                	lw	s1,64(s0)
    202c:	9f25                	0x9f25
    202e:	07d8                	addi	a4,sp,964
    matrix_mul_const(N, C, A, val);
    2030:	0000                	unimp
    2032:	07e4                	addi	s1,sp,972
    2034:	0000                	unimp
    2036:	00850007          	0x850007
    203a:	2440                	fld	fs0,136(s0)
    203c:	2540                	fld	fs0,136(a0)
    203e:	009f 0000 0000      	0x9f
    2044:	0000                	unimp
    2046:	3c00                	fld	fs0,56(s0)
    crc = crc16(matrix_sum(N, C, clipval), crc);
    2048:	0004                	0x4
    204a:	4800                	lw	s0,16(s0)
    204c:	0004                	0x4
    204e:	0100                	addi	s0,sp,128
    2050:	5a00                	lw	s0,48(a2)
    2052:	0448                	addi	a0,sp,516
    2054:	0000                	unimp
    2056:	0000044b          	fnmsub.s	fs0,ft0,ft0,ft0,rne
    205a:	0001                	nop
    205c:	00044b5b          	0x44b5b
    2060:	8000                	0x8000
    2062:	0004                	0x4
    2064:	0300                	addi	s0,sp,384
    2066:	9100                	0x9100
    2068:	7fbc                	flw	fa5,120(a5)
    206a:	0480                	addi	s0,sp,576
    206c:	0000                	unimp
    206e:	05d0                	addi	a2,sp,708
    2070:	0000                	unimp
    2072:	0001                	nop
    2074:	0007d86b          	0x7d86b
    2078:	e400                	fsw	fs0,8(s0)
    207a:	01000007          	vle8ff.v	v0,(zero),v0.t
    matrix_mul_vect(N, C, A, B);
    207e:	6b00                	flw	fs0,16(a4)
	...
    2088:	04a0                	addi	s0,sp,584
    208a:	0000                	unimp
    208c:	04ac                	addi	a1,sp,584
    208e:	0000                	unimp
    crc = crc16(matrix_sum(N, C, clipval), crc);
    2090:	0001                	nop
    2092:	ac5a                	fsd	fs6,24(sp)
    2094:	0004                	0x4
    2096:	af00                	fsd	fs0,24(a4)
    2098:	0004                	0x4
    209a:	0100                	addi	s0,sp,128
    209c:	5b00                	lw	s0,48(a4)
    209e:	000004af          	vamoaddei8.v	zero,(zero),v0,v9,v0.t
    20a2:	04e4                	addi	s1,sp,588
    20a4:	0000                	unimp
    20a6:	b8910003          	lb	zero,-1143(sp)
    20aa:	e47f                	0xe47f
    20ac:	0004                	0x4
    20ae:	1800                	addi	s0,sp,48
    20b0:	0005                	c.nop	1
    20b2:	0100                	addi	s0,sp,128
    20b4:	5d00                	lw	s0,56(a0)
	...
    20be:	0430                	addi	a2,sp,520
    20c0:	0000                	unimp
    20c2:	0470                	addi	a2,sp,524
    matrix_mul_matrix(N, C, A, B);
    20c4:	0000                	unimp
    20c6:	0006                	c.slli	zero,0x1
    20c8:	0078                	addi	a4,sp,12
    20ca:	9f1d0087          	vloxseg5ei128.v	v1,(s10),v17
    20ce:	0470                	addi	a2,sp,524
    20d0:	0000                	unimp
    20d2:	047c                	addi	a5,sp,524
    20d4:	0000                	unimp
    20d6:	0001                	nop
    crc = crc16(matrix_sum(N, C, clipval), crc);
    20d8:	7c5f 0004 8000      	0x800000047c5f
    20de:	0004                	0x4
    20e0:	0800                	addi	s0,sp,16
    20e2:	8400                	0x8400
    20e4:	4000                	lw	s0,0(s0)
    20e6:	7a25                	lui	s4,0xfffe9
    20e8:	2100                	fld	fs0,0(a0)
    20ea:	809f 0004 9400      	0x94000004809f
    20f0:	0004                	0x4
    20f2:	0100                	addi	s0,sp,128
    20f4:	5f00                	lw	s0,56(a4)
    20f6:	0494                	addi	a3,sp,576
    20f8:	0000                	unimp
    20fa:	05d0                	addi	a2,sp,708
    20fc:	0000                	unimp
    20fe:	0001                	nop
    2100:	d858                	sw	a4,52(s0)
    2102:	e4000007          	vluxseg8ei8.v	v0,(zero),v0,v0.t
    2106:	01000007          	vle8ff.v	v0,(zero),v0.t
    210a:	5800                	lw	s0,48(s0)
	...
    matrix_mul_matrix_bitextract(N, C, A, B);
    2114:	0494                	addi	a3,sp,576
    2116:	0000                	unimp
    2118:	04d4                	addi	a3,sp,580
    211a:	0000                	unimp
    211c:	0006                	c.slli	zero,0x1
    211e:	0078                	addi	a4,sp,12
    crc = crc16(matrix_sum(N, C, clipval), crc);
    2120:	9f1d0087          	vloxseg5ei128.v	v1,(s10),v17
    2124:	04d4                	addi	a3,sp,580
    2126:	0000                	unimp
    2128:	04e0                	addi	s0,sp,588
    212a:	0000                	unimp
    212c:	0001                	nop
    212e:	e05f 0004 e400      	0xe4000004e05f
    2134:	0004                	0x4
    2136:	0800                	addi	s0,sp,16
    2138:	7a00                	flw	fs0,48(a2)
    213a:	4000                	lw	s0,0(s0)
    213c:	8424                	0x8424
    213e:	2100                	fld	fs0,0(a0)
    2140:	e49f 0004 9800      	0x98000004e49f
    2146:	0005                	c.nop	1
    2148:	0100                	addi	s0,sp,128
    214a:	5f00                	lw	s0,56(a4)
	...
    matrix_add_const(N, A, -val); /* return matrix to initial value */
    2154:	0450                	addi	a2,sp,516
    2156:	0000                	unimp
    2158:	0458                	addi	a4,sp,516
    215a:	0000                	unimp
    215c:	0001                	nop
    215e:	585a                	lw	a6,180(sp)
    2160:	0004                	0x4
    2162:	a800                	fsd	fs0,16(s0)
    2164:	0004                	0x4
    2166:	0300                	addi	s0,sp,384
    2168:	9100                	0x9100
    216a:	7fb8                	flw	fa4,120(a5)
    216c:	04b4                	addi	a3,sp,584
    216e:	0000                	unimp
    2170:	04bc                	addi	a5,sp,584
    2172:	0000                	unimp
    2174:	0001                	nop
    2176:	bc5a                	fsd	fs6,56(sp)
    2178:	0004                	0x4
    217a:	d000                	sw	s0,32(s0)
    return crc;
    217c:	0005                	c.nop	1
    217e:	0100                	addi	s0,sp,128
}
    2180:	6800                	flw	fs0,16(s0)
    2182:	07d8                	addi	a4,sp,964
    2184:	0000                	unimp
    2186:	07e4                	addi	s1,sp,972
    2188:	0000                	unimp
    218a:	0001                	nop
    218c:	0068                	addi	a0,sp,12
    218e:	0000                	unimp
    2190:	0000                	unimp
    2192:	0000                	unimp
{
    2194:	1c00                	addi	s0,sp,560
    2196:	0005                	c.nop	1
    2198:	d000                	sw	s0,32(s0)
    219a:	0005                	c.nop	1
    219c:	0100                	addi	s0,sp,128
    219e:	5600                	lw	s0,40(a2)
    21a0:	07d8                	addi	a4,sp,964
    21a2:	0000                	unimp
    21a4:	07e4                	addi	s1,sp,972
    21a6:	0000                	unimp
    21a8:	0001                	nop
    21aa:	0056                	c.slli	zero,0x15
    21ac:	0000                	unimp
    21ae:	0000                	unimp
    21b0:	0000                	unimp
    21b2:	2c00                	fld	fs0,24(s0)
    ee_u32  N = 0;
    21b4:	0005                	c.nop	1
    21b6:	3400                	fld	fs0,40(s0)
    ee_s32  order = 1;
    21b8:	0005                	c.nop	1
    21ba:	0100                	addi	s0,sp,128
    21bc:	5a00                	lw	s0,48(a2)
    21be:	0534                	addi	a3,sp,648
    ee_u32  i = 0, j = 0;
    21c0:	0000                	unimp
    21c2:	0550                	addi	a2,sp,644
    21c4:	0000                	unimp
    21c6:	0001                	nop
    if (seed == 0)
    21c8:	5861                	li	a6,-8
    21ca:	0005                	c.nop	1
    21cc:	7400                	flw	fs0,40(s0)
    21ce:	0005                	c.nop	1
        seed = 1;
    21d0:	0100                	addi	s0,sp,128
    21d2:	5e00                	lw	s0,56(a2)
    21d4:	0574                	addi	a3,sp,652
    21d6:	0000                	unimp
    while (j < blksize)
    21d8:	05d0                	addi	a2,sp,708
    21da:	0000                	unimp
        i++;
    21dc:	0008                	0x8
    21de:	0076                	c.slli	zero,0x1d
    21e0:	2540                	fld	fs0,136(a0)
    21e2:	0081                	addi	ra,ra,0
    21e4:	9f22                	add	t5,t5,s0
    21e6:	07d8                	addi	a4,sp,964
        j = i * i * 2 * 4;
    21e8:	0000                	unimp
    21ea:	07e4                	addi	s1,sp,972
    21ec:	0000                	unimp
    21ee:	0008                	0x8
    21f0:	0076                	c.slli	zero,0x1d
    21f2:	2540                	fld	fs0,136(a0)
    21f4:	0081                	addi	ra,ra,0
    21f6:	9f22                	add	t5,t5,s0
	...
    while (j < blksize)
    2200:	053c                	addi	a5,sp,648
    2202:	0000                	unimp
    2204:	0544                	addi	s1,sp,644
    2206:	0000                	unimp
    2208:	0001                	nop
    220a:	445a                	lw	s0,148(sp)
    N = i - 1;
    220c:	0005                	c.nop	1
    220e:	d000                	sw	s0,32(s0)
    2210:	0005                	c.nop	1
    2212:	0100                	addi	s0,sp,128
    2214:	6c00                	flw	fs0,24(s0)
    2216:	07d8                	addi	a4,sp,964
    A = (MATDAT *)align_mem(memblk);
    2218:	0000                	unimp
    221a:	07e4                	addi	s1,sp,972
    221c:	0000                	unimp
    221e:	0001                	nop
    2220:	006c                	addi	a1,sp,12
    2222:	0000                	unimp
    2224:	0000                	unimp
    2226:	0000                	unimp
    2228:	5800                	lw	s0,48(s0)
    222a:	0005                	c.nop	1
    B = A + N * N;
    222c:	6400                	flw	fs0,8(s0)
    222e:	0005                	c.nop	1
    2230:	0100                	addi	s0,sp,128
    2232:	5a00                	lw	s0,48(a2)
    2234:	0564                	addi	s1,sp,652
    2236:	0000                	unimp
    2238:	0590                	addi	a2,sp,704
    223a:	0000                	unimp
    223c:	0001                	nop
    223e:	005d                	c.nop	23
    2240:	0000                	unimp
    2242:	0000                	unimp
    2244:	0000                	unimp
    2246:	0800                	addi	s0,sp,16
    2248:	0005                	c.nop	1
    224a:	cc00                	sw	s0,24(s0)
    for (i = 0; i < N; i++)
    224c:	0005                	c.nop	1
    224e:	0100                	addi	s0,sp,128
    2250:	6000                	flw	fs0,0(s0)
    2252:	07d8                	addi	a4,sp,964
        for (j = 0; j < N; j++)
    2254:	0000                	unimp
    2256:	07dc                	addi	a5,sp,964
    2258:	0000                	unimp
    225a:	0001                	nop
            seed         = ((order * seed) % 65536);
    225c:	0060                	addi	s0,sp,12
    225e:	0000                	unimp
    2260:	0000                	unimp
    2262:	0000                	unimp
    2264:	0c00                	addi	s0,sp,528
    2266:	0005                	c.nop	1
    2268:	b400                	fsd	fs0,40(s0)
    226a:	0005                	c.nop	1
    226c:	0100                	addi	s0,sp,128
    226e:	6600                	flw	fs0,8(a2)
    2270:	07d8                	addi	a4,sp,964
    2272:	0000                	unimp
    2274:	07e4                	addi	s1,sp,972
    2276:	0000                	unimp
    2278:	0001                	nop
    227a:	0066                	c.slli	zero,0x19
    227c:	0000                	unimp
    227e:	0000                	unimp
    2280:	0000                	unimp
    2282:	0c00                	addi	s0,sp,528
    2284:	0005                	c.nop	1
    2286:	4c00                	lw	s0,24(s0)
    2288:	0005                	c.nop	1
    228a:	0100                	addi	s0,sp,128
    228c:	5e00                	lw	s0,56(a2)
    228e:	054c                	addi	a1,sp,644
            val          = (seed + order);
    2290:	0000                	unimp
    2292:	05cc                	addi	a1,sp,708
    2294:	0000                	unimp
    2296:	0005                	c.nop	1
    2298:	0080                	addi	s0,sp,64
    229a:	2540                	fld	fs0,136(a0)
    229c:	d89f 0007 dc00      	0xdc000007d89f
    22a2:	05000007          	vluxei8.v	v0,(zero),v16,v0.t
    22a6:	8000                	0x8000
    22a8:	4000                	lw	s0,0(s0)
    22aa:	9f25                	0x9f25
	...
    22b4:	050c                	addi	a1,sp,640
    22b6:	0000                	unimp
            B[i * N + j] = val;
    22b8:	05d0                	addi	a2,sp,708
    22ba:	0000                	unimp
    22bc:	0001                	nop
    22be:	d86a                	sw	s10,48(sp)
    22c0:	e4000007          	vluxseg8ei8.v	v0,(zero),v0,v0.t
    22c4:	01000007          	vle8ff.v	v0,(zero),v0.t
    22c8:	6a00                	flw	fs0,16(a2)
	...
    22d2:	059c                	addi	a5,sp,704
    22d4:	0000                	unimp
    22d6:	05b4                	addi	a3,sp,712
    22d8:	0000                	unimp
    22da:	0001                	nop
    22dc:	d866                	sw	s9,48(sp)
    22de:	dc000007          	vloxseg7ei128.v	v0,(zero),v0,v0.t
    22e2:	01000007          	vle8ff.v	v0,(zero),v0.t
    22e6:	6600                	flw	fs0,8(a2)
	...
            val          = (val + order);
    22f0:	05bc                	addi	a5,sp,712
    22f2:	0000                	unimp
    22f4:	05c4                	addi	s1,sp,708
    22f6:	0000                	unimp
    22f8:	0001                	nop
    22fa:	005e                	c.slli	zero,0x17
    22fc:	0000                	unimp
    22fe:	0000                	unimp
    2300:	0000                	unimp
    2302:	f000                	fsw	fs0,32(s0)
    2304:	0005                	c.nop	1
    2306:	fc00                	fsw	fs0,56(s0)
            val          = matrix_clip(val, 1);
    2308:	0005                	c.nop	1
    230a:	0100                	addi	s0,sp,128
    230c:	5c00                	lw	s0,56(s0)
	...
            A[i * N + j] = val;
    2316:	0744                	addi	s1,sp,900
    2318:	0000                	unimp
    231a:	0750                	addi	a2,sp,900
    231c:	0000                	unimp
    231e:	0001                	nop
    2320:	005e                	c.slli	zero,0x17
	...
    232a:	0000                	unimp
    232c:	2000                	fld	fs0,0(s0)
    232e:	0000                	unimp
    2330:	0600                	addi	s0,sp,768
    2332:	5a00                	lw	s0,48(a2)
    2334:	935b0493          	addi	s1,s6,-1739
    2338:	2004                	fld	fs1,0(s0)
    233a:	0000                	unimp
    233c:	8c00                	0x8c00
    233e:	0000                	unimp
    2340:	0600                	addi	s0,sp,768
    2342:	f300                	fsw	fs0,32(a4)
            order++;
    2344:	250af503          	0x250af503
    2348:	009f 0000 0000      	0x9f
    234e:	0000                	unimp
        for (j = 0; j < N; j++)
    2350:	0000                	unimp
    2352:	0000                	unimp
    2354:	4c00                	lw	s0,24(s0)
    2356:	0000                	unimp
    2358:	0600                	addi	s0,sp,768
    235a:	5c00                	lw	s0,56(s0)
    235c:	935d0493          	addi	s1,s10,-1739 # a935 <__heap_end+0x1c25>
    2360:	4c04                	lw	s1,24(s0)
    2362:	0000                	unimp
    2364:	5000                	lw	s0,32(s0)
    2366:	0000                	unimp
    for (i = 0; i < N; i++)
    2368:	0600                	addi	s0,sp,768
    236a:	f300                	fsw	fs0,32(a4)
    236c:	250cf503          	0x250cf503
    2370:	509f 0000 5800      	0x58000000509f
    2376:	0000                	unimp
    2378:	0600                	addi	s0,sp,768
    237a:	5c00                	lw	s0,56(s0)
    237c:	935d0493          	addi	s1,s10,-1739
    p->A = A;
    2380:	5804                	lw	s1,48(s0)
    2382:	0000                	unimp
    2384:	8c00                	0x8c00
    2386:	0000                	unimp
    2388:	0600                	addi	s0,sp,768
    238a:	f300                	fsw	fs0,32(a4)
    p->B = B;
    238c:	250cf503          	0x250cf503
    2390:	009f 0000 0000      	0x9f
    2396:	0000                	unimp
    p->C = (MATRES *)align_mem(B + N * N);
    2398:	3000                	fld	fs0,32(s0)
    239a:	0000                	unimp
    239c:	4c00                	lw	s0,24(s0)
    239e:	0000                	unimp
    23a0:	0100                	addi	s0,sp,128
    23a2:	5c00                	lw	s0,56(s0)
    23a4:	004c                	addi	a1,sp,4
    23a6:	0000                	unimp
    23a8:	0050                	addi	a2,sp,4
    23aa:	0000                	unimp
    23ac:	0001                	nop
    23ae:	506e                	0x506e
    23b0:	0000                	unimp
    23b2:	5800                	lw	s0,48(s0)
    23b4:	0000                	unimp
    23b6:	0100                	addi	s0,sp,128
    23b8:	5c00                	lw	s0,56(s0)
    23ba:	0058                	addi	a4,sp,4
    23bc:	0000                	unimp
    23be:	008c                	addi	a1,sp,64
    23c0:	0000                	unimp
    23c2:	0001                	nop
    23c4:	006e                	c.slli	zero,0x1b
	...
    p->N = N;
    23ce:	0000                	unimp
    23d0:	2000                	fld	fs0,0(s0)
    23d2:	0000                	unimp
    23d4:	0600                	addi	s0,sp,768
    23d6:	5a00                	lw	s0,48(a2)
    return N;
    23d8:	935b0493          	addi	s1,s6,-1739
}
    23dc:	2004                	fld	fs1,0(s0)
    23de:	0000                	unimp
    23e0:	e400                	fsw	fs0,8(s0)
    23e2:	0000                	unimp
    23e4:	0600                	addi	s0,sp,768
    23e6:	f300                	fsw	fs0,32(a4)
    23e8:	250af503          	0x250af503
    23ec:	009f 0000 0000      	0x9f
{
    23f2:	0000                	unimp
    23f4:	0000                	unimp
    23f6:	0000                	unimp
    23f8:	6c00                	flw	fs0,24(s0)
    23fa:	0000                	unimp
    23fc:	0600                	addi	s0,sp,768
    23fe:	5c00                	lw	s0,56(s0)
    2400:	935d0493          	addi	s1,s10,-1739
    2404:	6c04                	flw	fs1,24(s0)
    2406:	0000                	unimp
    2408:	d400                	sw	s0,40(s0)
    240a:	0000                	unimp
    240c:	0600                	addi	s0,sp,768
    240e:	f300                	fsw	fs0,32(a4)
    MATRES tmp = 0, prev = 0, cur = 0;
    2410:	250cf503          	0x250cf503
    2414:	d49f 0000 e400      	0xe4000000d49f
    241a:	0000                	unimp
    ee_s16 ret = 0;
    241c:	0600                	addi	s0,sp,768
    241e:	5c00                	lw	s0,56(s0)
    for (i = 0; i < N; i++)
    2420:	935d0493          	addi	s1,s10,-1739
    2424:	0004                	0x4
    2426:	0000                	unimp
        for (j = 0; j < N; j++)
    2428:	0000                	unimp
    242a:	0000                	unimp
    242c:	2000                	fld	fs0,0(s0)
    242e:	0000                	unimp
            cur = C[i * N + j];
    2430:	4800                	lw	s0,16(s0)
    2432:	0000                	unimp
    2434:	0100                	addi	s0,sp,128
    2436:	5a00                	lw	s0,48(a2)
    2438:	004c                	addi	a1,sp,4
    243a:	0000                	unimp
    243c:	0084                	addi	s1,sp,64
    243e:	0000                	unimp
    2440:	0001                	nop
    2442:	885a                	mv	a6,s6
    2444:	0000                	unimp
    2446:	8c00                	0x8c00
    2448:	0000                	unimp
    244a:	0100                	addi	s0,sp,128
    244c:	5a00                	lw	s0,48(a2)
    244e:	0098                	addi	a4,sp,64
    2450:	0000                	unimp
    2452:	00a0                	addi	s0,sp,72
    2454:	0000                	unimp
    2456:	0001                	nop
    2458:	a45a                	fsd	fs6,8(sp)
    245a:	0000                	unimp
    245c:	b800                	fsd	fs0,48(s0)
    245e:	0000                	unimp
            tmp += cur;
    2460:	0100                	addi	s0,sp,128
    2462:	5a00                	lw	s0,48(a2)
    2464:	00bc                	addi	a5,sp,72
    2466:	0000                	unimp
    2468:	00c0                	addi	s0,sp,68
    246a:	0000                	unimp
    246c:	0001                	nop
    246e:	c45a                	sw	s6,8(sp)
            if (tmp > clipval)
    2470:	0000                	unimp
    2472:	e400                	fsw	fs0,8(s0)
    2474:	0000                	unimp
    2476:	0100                	addi	s0,sp,128
    2478:	5a00                	lw	s0,48(a2)
	...
                ret += 10;
    2482:	0030                	addi	a2,sp,8
    2484:	0000                	unimp
    2486:	006c                	addi	a1,sp,12
    2488:	0000                	unimp
    248a:	0001                	nop
    248c:	6c5c                	flw	fa5,28(s0)
    248e:	0000                	unimp
                tmp = 0;
    2490:	d400                	sw	s0,40(s0)
    2492:	0000                	unimp
    2494:	0100                	addi	s0,sp,128
    2496:	6c00                	flw	fs0,24(s0)
                ret += (cur > prev) ? 1 : 0;
    2498:	00d4                	addi	a3,sp,68
    249a:	0000                	unimp
    249c:	00e4                	addi	s1,sp,76
    249e:	0000                	unimp
    24a0:	0001                	nop
    24a2:	005c                	addi	a5,sp,4
    24a4:	0000                	unimp
    24a6:	0000                	unimp
    24a8:	0000                	unimp
    24aa:	6400                	flw	fs0,8(s0)
    24ac:	0000                	unimp
    24ae:	6800                	flw	fs0,16(s0)
    24b0:	0000                	unimp
    24b2:	0100                	addi	s0,sp,128
    24b4:	5f00                	lw	s0,56(a4)
    24b6:	00d8                	addi	a4,sp,68
    24b8:	0000                	unimp
    24ba:	00e4                	addi	s1,sp,76
    24bc:	0000                	unimp
    24be:	0002                	c.slli64	zero
    24c0:	9f30                	0x9f30
	...
            prev = cur;
    24ca:	0070                	addi	a2,sp,12
        for (j = 0; j < N; j++)
    24cc:	0000                	unimp
    24ce:	007c                	addi	a5,sp,12
    24d0:	0000                	unimp
    24d2:	0002                	c.slli64	zero
    24d4:	9f30                	0x9f30
    24d6:	0088                	addi	a0,sp,64
    24d8:	0000                	unimp
    24da:	00b4                	addi	a3,sp,72
    24dc:	0000                	unimp
    24de:	0002                	c.slli64	zero
    24e0:	9f30                	0x9f30
    24e2:	00c4                	addi	s1,sp,68
    for (i = 0; i < N; i++)
    24e4:	0000                	unimp
    24e6:	00cc                	addi	a1,sp,68
    24e8:	0000                	unimp
    24ea:	0002                	c.slli64	zero
    24ec:	9f31                	0x9f31
    24ee:	00cc                	addi	a1,sp,68
    24f0:	0000                	unimp
    24f2:	00d4                	addi	a3,sp,68
    24f4:	0000                	unimp
    24f6:	0002                	c.slli64	zero
    24f8:	9f30                	0x9f30
	...
}
    2506:	0020                	addi	s0,sp,8
    2508:	0000                	unimp
    250a:	0006                	c.slli	zero,0x1
    250c:	935a                	add	t1,t1,s6
    250e:	5b04                	lw	s1,48(a4)
    2510:	00200493          	li	s1,2
{
    2514:	0000                	unimp
    2516:	00e4                	addi	s1,sp,76
    2518:	0000                	unimp
    251a:	0006                	c.slli	zero,0x1
    251c:	0af503f3          	0xaf503f3
    2520:	9f25                	0x9f25
	...
    252e:	006c                	addi	a1,sp,12
    2530:	0000                	unimp
    2532:	0006                	c.slli	zero,0x1
    2534:	935c                	0x935c
    2536:	5d04                	lw	s1,56(a0)
    2538:	006c0493          	addi	s1,s8,6
    253c:	0000                	unimp
    253e:	00d4                	addi	a3,sp,68
    2540:	0000                	unimp
    2542:	0006                	c.slli	zero,0x1
    for (i = 0; i < N; i++)
    2544:	0cf503f3          	0xcf503f3
    2548:	9f25                	0x9f25
    254a:	00d4                	addi	a3,sp,68
        for (j = 0; j < N; j++)
    254c:	0000                	unimp
    254e:	00e4                	addi	s1,sp,76
    2550:	0000                	unimp
    2552:	0006                	c.slli	zero,0x1
            C[i * N + j] = (MATRES)A[i * N + j] * (MATRES)val;
    2554:	935c                	0x935c
    2556:	5d04                	lw	s1,56(a0)
    2558:	00000493          	li	s1,0
    255c:	0000                	unimp
    255e:	0000                	unimp
    2560:	0000                	unimp
    2562:	0020                	addi	s0,sp,8
    2564:	0000                	unimp
    2566:	0048                	addi	a0,sp,4
    2568:	0000                	unimp
    256a:	0001                	nop
    256c:	4c5a                	lw	s8,148(sp)
    256e:	0000                	unimp
    2570:	8400                	0x8400
    2572:	0000                	unimp
    2574:	0100                	addi	s0,sp,128
    2576:	5a00                	lw	s0,48(a2)
    2578:	0088                	addi	a0,sp,64
    257a:	0000                	unimp
    257c:	008c                	addi	a1,sp,64
    257e:	0000                	unimp
    2580:	0001                	nop
    2582:	985a                	add	a6,a6,s6
    2584:	0000                	unimp
    2586:	a000                	fsd	fs0,0(s0)
    2588:	0000                	unimp
    258a:	0100                	addi	s0,sp,128
    258c:	5a00                	lw	s0,48(a2)
    258e:	00a4                	addi	s1,sp,72
    2590:	0000                	unimp
    2592:	00b8                	addi	a4,sp,72
    2594:	0000                	unimp
    2596:	0001                	nop
    2598:	bc5a                	fsd	fs6,56(sp)
    259a:	0000                	unimp
    259c:	c000                	sw	s0,0(s0)
    259e:	0000                	unimp
    25a0:	0100                	addi	s0,sp,128
    25a2:	5a00                	lw	s0,48(a2)
    25a4:	00c4                	addi	s1,sp,68
    25a6:	0000                	unimp
    25a8:	00e4                	addi	s1,sp,76
    25aa:	0000                	unimp
    25ac:	0001                	nop
    25ae:	005a                	c.slli	zero,0x16
    25b0:	0000                	unimp
    25b2:	0000                	unimp
    25b4:	0000                	unimp
    25b6:	3000                	fld	fs0,32(s0)
    25b8:	0000                	unimp
    25ba:	6c00                	flw	fs0,24(s0)
    25bc:	0000                	unimp
    25be:	0100                	addi	s0,sp,128
    25c0:	5c00                	lw	s0,56(s0)
    25c2:	006c                	addi	a1,sp,12
        for (j = 0; j < N; j++)
    25c4:	0000                	unimp
    25c6:	00d4                	addi	a3,sp,68
    25c8:	0000                	unimp
    25ca:	0001                	nop
    25cc:	d46c                	sw	a1,108(s0)
    25ce:	0000                	unimp
    25d0:	e400                	fsw	fs0,8(s0)
    25d2:	0000                	unimp
    25d4:	0100                	addi	s0,sp,128
    25d6:	5c00                	lw	s0,56(s0)
	...
    for (i = 0; i < N; i++)
    25e0:	0064                	addi	s1,sp,12
    25e2:	0000                	unimp
    25e4:	0068                	addi	a0,sp,12
    25e6:	0000                	unimp
    25e8:	0001                	nop
    25ea:	d85f 0000 e400      	0xe4000000d85f
    25f0:	0000                	unimp
    25f2:	0200                	addi	s0,sp,256
}
    25f4:	3000                	fld	fs0,32(s0)
    25f6:	009f 0000 0000      	0x9f
    25fc:	0000                	unimp
    25fe:	7000                	flw	fs0,32(s0)
    2600:	0000                	unimp
    2602:	7c00                	flw	fs0,56(s0)
    2604:	0000                	unimp
    2606:	0200                	addi	s0,sp,256
    2608:	3000                	fld	fs0,32(s0)
    260a:	889f 0000 b400      	0xb4000000889f
    2610:	0000                	unimp
    2612:	0200                	addi	s0,sp,256
    2614:	3000                	fld	fs0,32(s0)
    2616:	c49f 0000 cc00      	0xcc000000c49f
{
    261c:	0000                	unimp
    261e:	0200                	addi	s0,sp,256
    2620:	3100                	fld	fs0,32(a0)
    2622:	cc9f 0000 d400      	0xd4000000cc9f
    2628:	0000                	unimp
    262a:	0200                	addi	s0,sp,256
    262c:	3000                	fld	fs0,32(s0)
    262e:	009f 0000 0000      	0x9f
    2634:	0000                	unimp
    2636:	0000                	unimp
    2638:	0000                	unimp
    263a:	7000                	flw	fs0,32(s0)
    for (i = 0; i < N; i++)
    263c:	0000                	unimp
    263e:	0600                	addi	s0,sp,768
    2640:	5a00                	lw	s0,48(a2)
    2642:	935b0493          	addi	s1,s6,-1739
        for (j = 0; j < N; j++)
    2646:	7004                	flw	fs1,32(s0)
    2648:	0000                	unimp
    264a:	f000                	fsw	fs0,32(s0)
            A[i * N + j] += val;
    264c:	0000                	unimp
    264e:	0600                	addi	s0,sp,768
    2650:	f300                	fsw	fs0,32(a4)
    2652:	250af503          	0x250af503
    2656:	f09f 0000 0000      	0xf09f
    265c:	0001                	nop
    265e:	0600                	addi	s0,sp,768
    2660:	5a00                	lw	s0,48(a2)
    2662:	935b0493          	addi	s1,s6,-1739
    2666:	0004                	0x4
    2668:	0001                	nop
    266a:	3800                	fld	fs0,48(s0)
    266c:	0001                	nop
    266e:	0600                	addi	s0,sp,768
    2670:	f300                	fsw	fs0,32(a4)
    2672:	250af503          	0x250af503
    2676:	389f 0001 3b00      	0x3b000001389f
    267c:	0001                	nop
    267e:	0600                	addi	s0,sp,768
    2680:	5a00                	lw	s0,48(a2)
    2682:	935b0493          	addi	s1,s6,-1739
    2686:	3b04                	fld	fs1,48(a4)
    2688:	0001                	nop
    268a:	5400                	lw	s0,40(s0)
    268c:	0001                	nop
    268e:	0600                	addi	s0,sp,768
    2690:	f300                	fsw	fs0,32(a4)
    2692:	250af503          	0x250af503
    2696:	549f 0001 8c00      	0x8c000001549f
    269c:	0001                	nop
    269e:	0600                	addi	s0,sp,768
    26a0:	5a00                	lw	s0,48(a2)
    26a2:	935b0493          	addi	s1,s6,-1739
    26a6:	8c04                	0x8c04
    26a8:	0001                	nop
    26aa:	8c00                	0x8c00
    26ac:	0006                	c.slli	zero,0x1
    26ae:	0600                	addi	s0,sp,768
    26b0:	f300                	fsw	fs0,32(a4)
    26b2:	250af503          	0x250af503
    26b6:	009f 0000 0000      	0x9f
    26bc:	0000                	unimp
    26be:	0000                	unimp
    26c0:	0000                	unimp
    26c2:	7000                	flw	fs0,32(s0)
        for (j = 0; j < N; j++)
    26c4:	0000                	unimp
    26c6:	0600                	addi	s0,sp,768
    26c8:	5c00                	lw	s0,56(s0)
    26ca:	935d0493          	addi	s1,s10,-1739
    26ce:	7004                	flw	fs1,32(s0)
    26d0:	0000                	unimp
    26d2:	f000                	fsw	fs0,32(s0)
    26d4:	0000                	unimp
    26d6:	0600                	addi	s0,sp,768
    26d8:	f300                	fsw	fs0,32(a4)
    26da:	250cf503          	0x250cf503
    for (i = 0; i < N; i++)
    26de:	f09f 0000 0300      	0x3000000f09f
    26e4:	0001                	nop
    26e6:	0600                	addi	s0,sp,768
    26e8:	5c00                	lw	s0,56(s0)
    26ea:	935d0493          	addi	s1,s10,-1739
    26ee:	0304                	addi	s1,sp,384
    26f0:	0001                	nop
    26f2:	3800                	fld	fs0,48(s0)
}
    26f4:	0001                	nop
    26f6:	0600                	addi	s0,sp,768
    26f8:	f300                	fsw	fs0,32(a4)
    26fa:	250cf503          	0x250cf503
    26fe:	389f 0001 3b00      	0x3b000001389f
    2704:	0001                	nop
    2706:	0600                	addi	s0,sp,768
    2708:	5c00                	lw	s0,56(s0)
    270a:	935d0493          	addi	s1,s10,-1739
    270e:	3b04                	fld	fs1,48(a4)
{
    2710:	0001                	nop
    2712:	5400                	lw	s0,40(s0)
    2714:	0001                	nop
    2716:	0600                	addi	s0,sp,768
    2718:	f300                	fsw	fs0,32(a4)
    271a:	250cf503          	0x250cf503
    271e:	549f 0001 8c00      	0x8c000001549f
    2724:	0001                	nop
    2726:	0600                	addi	s0,sp,768
    2728:	5c00                	lw	s0,56(s0)
    272a:	935d0493          	addi	s1,s10,-1739
    272e:	8c04                	0x8c04
    2730:	0001                	nop
    2732:	8c00                	0x8c00
    for (i = 0; i < N; i++)
    2734:	0006                	c.slli	zero,0x1
    2736:	0600                	addi	s0,sp,768
    2738:	f300                	fsw	fs0,32(a4)
    273a:	250cf503          	0x250cf503
        C[i] = 0;
    273e:	009f 0000 0000      	0x9f
    2744:	0000                	unimp
    2746:	0000                	unimp
    2748:	0000                	unimp
    274a:	7400                	flw	fs0,40(s0)
    274c:	0000                	unimp
    274e:	0200                	addi	s0,sp,256
        for (j = 0; j < N; j++)
    2750:	3000                	fld	fs0,32(s0)
    2752:	f09f 0000 8c00      	0x8c000000f09f
            C[i] += (MATRES)A[i * N + j] * (MATRES)B[j];
    2758:	0001                	nop
    275a:	0200                	addi	s0,sp,256
    275c:	3000                	fld	fs0,32(s0)
    275e:	009f 0000 0000      	0x9f
    2764:	0000                	unimp
    2766:	7000                	flw	fs0,32(s0)
    2768:	0000                	unimp
    276a:	7400                	flw	fs0,40(s0)
    276c:	0000                	unimp
    276e:	0200                	addi	s0,sp,256
    2770:	3000                	fld	fs0,32(s0)
    2772:	749f 0000 f000      	0xf0000000749f
    2778:	0000                	unimp
    277a:	0100                	addi	s0,sp,128
    277c:	6600                	flw	fs0,8(a2)
    277e:	018c                	addi	a1,sp,192
    2780:	0000                	unimp
    2782:	032c                	addi	a1,sp,392
    2784:	0000                	unimp
    2786:	0001                	nop
    2788:	6066                	flw	ft0,88(sp)
    278a:	0005                	c.nop	1
    278c:	8800                	0x8800
    278e:	0005                	c.nop	1
    2790:	0100                	addi	s0,sp,128
    2792:	6600                	flw	fs0,8(a2)
    2794:	0594                	addi	a3,sp,704
    2796:	0000                	unimp
    2798:	059c                	addi	a5,sp,704
    279a:	0000                	unimp
    279c:	0001                	nop
    279e:	5866                	lw	a6,120(sp)
    27a0:	0006                	c.slli	zero,0x1
    27a2:	6c00                	flw	fs0,24(s0)
    27a4:	0006                	c.slli	zero,0x1
    27a6:	0100                	addi	s0,sp,128
    27a8:	6600                	flw	fs0,8(a2)
	...
    27b2:	0048                	addi	a0,sp,4
    27b4:	0000                	unimp
    27b6:	023c                	addi	a5,sp,264
    27b8:	0000                	unimp
    27ba:	0006                	c.slli	zero,0x1
    27bc:	0084                	addi	s1,sp,64
    27be:	ff08                	fsw	fa0,56(a4)
    27c0:	9f1a                	add	t5,t5,t1
    27c2:	0560                	addi	s0,sp,652
    27c4:	0000                	unimp
    27c6:	0588                	addi	a0,sp,704
    27c8:	0000                	unimp
    27ca:	0006                	c.slli	zero,0x1
    27cc:	0084                	addi	s1,sp,64
    27ce:	ff08                	fsw	fa0,56(a4)
    27d0:	9f1a                	add	t5,t5,t1
    27d2:	0594                	addi	a3,sp,704
    27d4:	0000                	unimp
    27d6:	059c                	addi	a5,sp,704
    27d8:	0000                	unimp
    27da:	0006                	c.slli	zero,0x1
        for (j = 0; j < N; j++)
    27dc:	0084                	addi	s1,sp,64
    27de:	ff08                	fsw	fa0,56(a4)
    27e0:	9f1a                	add	t5,t5,t1
    27e2:	0658                	addi	a4,sp,772
    27e4:	0000                	unimp
    27e6:	066c                	addi	a1,sp,780
    27e8:	0000                	unimp
    27ea:	0006                	c.slli	zero,0x1
    27ec:	0084                	addi	s1,sp,64
    27ee:	ff08                	fsw	fa0,56(a4)
    27f0:	9f1a                	add	t5,t5,t1
	...
    for (i = 0; i < N; i++)
    27fa:	0044                	addi	s1,sp,4
    27fc:	0000                	unimp
    27fe:	0070                	addi	a2,sp,12
    2800:	0000                	unimp
    2802:	00830007          	0x830007
    2806:	ff0a                	fsw	ft2,188(sp)
    2808:	1aff                	0x1aff
    280a:	709f 0000 c000      	0xc0000000709f
}
    2810:	0000                	unimp
    2812:	0100                	addi	s0,sp,128
    2814:	6300                	flw	fs0,0(a4)
    2816:	00f0                	addi	a2,sp,76
    2818:	0000                	unimp
    281a:	0130                	addi	a2,sp,136
    281c:	0000                	unimp
    281e:	00830007          	0x830007
    2822:	ff0a                	fsw	ft2,188(sp)
    2824:	1aff                	0x1aff
    2826:	389f 0001 6400      	0x64000001389f
{
    282c:	0001                	nop
    282e:	0700                	addi	s0,sp,896
    2830:	8300                	0x8300
    2832:	0a00                	addi	s0,sp,272
    2834:	ffff                	0xffff
    2836:	9f1a                	add	t5,t5,t1
    2838:	0164                	addi	s1,sp,140
    283a:	0000                	unimp
    283c:	016c                	addi	a1,sp,140
    283e:	0000                	unimp
    2840:	0009                	c.nop	2
    2842:	2544007b          	0x2544007b
    2846:	ff0a                	fsw	ft2,188(sp)
    2848:	6c9f1a07          	flh	fs4,1737(t5)
    284c:	0001                	nop
    284e:	7400                	flw	fs0,40(s0)
    for (i = 0; i < N; i++)
    2850:	0001                	nop
    2852:	0700                	addi	s0,sp,896
    2854:	8300                	0x8300
    2856:	0a00                	addi	s0,sp,272
        for (j = 0; j < N; j++)
    2858:	ffff                	0xffff
    285a:	9f1a                	add	t5,t5,t1
    285c:	0174                	addi	a3,sp,140
    285e:	0000                	unimp
            C[i * N + j] = 0;
    2860:	017c                	addi	a5,sp,140
    2862:	0000                	unimp
    2864:	0009                	c.nop	2
    2866:	2544007b          	0x2544007b
    286a:	ff0a                	fsw	ft2,188(sp)
    286c:	7c9f1a07          	flh	fs4,1993(t5)
    2870:	0001                	nop
    2872:	8400                	0x8400
    2874:	0001                	nop
    2876:	0700                	addi	s0,sp,896
    2878:	8300                	0x8300
    287a:	0a00                	addi	s0,sp,272
    287c:	ffff                	0xffff
    287e:	9f1a                	add	t5,t5,t1
    2880:	0184                	addi	s1,sp,192
    2882:	0000                	unimp
    2884:	018c                	addi	a1,sp,192
    2886:	0000                	unimp
    2888:	0009                	c.nop	2
    288a:	2544007b          	0x2544007b
            for (k = 0; k < N; k++)
    288e:	ff0a                	fsw	ft2,188(sp)
    2890:	8c9f1a07          	flh	fs4,-1847(t5)
                C[i * N + j] += (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
    2894:	0001                	nop
    2896:	2c00                	fld	fs0,24(s0)
    2898:	0002                	c.slli64	zero
    289a:	0100                	addi	s0,sp,128
    289c:	6300                	flw	fs0,0(a4)
	...
    28aa:	006c                	addi	a1,sp,12
    28ac:	0000                	unimp
    28ae:	0001                	nop
    28b0:	6c5a                	flw	fs8,148(sp)
    28b2:	0000                	unimp
    28b4:	f000                	fsw	fs0,32(s0)
    28b6:	0000                	unimp
    28b8:	0100                	addi	s0,sp,128
    28ba:	6200                	flw	fs0,0(a2)
    28bc:	00f0                	addi	a2,sp,76
    28be:	0000                	unimp
    28c0:	012c                	addi	a1,sp,136
    28c2:	0000                	unimp
    28c4:	0001                	nop
    28c6:	2c58                	fld	fa4,152(s0)
    28c8:	0001                	nop
    28ca:	3800                	fld	fs0,48(s0)
    28cc:	0001                	nop
    28ce:	0100                	addi	s0,sp,128
    28d0:	6200                	flw	fs0,0(a2)
    28d2:	0138                	addi	a4,sp,136
    28d4:	0000                	unimp
    28d6:	014c                	addi	a1,sp,132
    28d8:	0000                	unimp
    28da:	0001                	nop
    28dc:	4c58                	lw	a4,28(s0)
    28de:	0001                	nop
    28e0:	5400                	lw	s0,40(s0)
    28e2:	0001                	nop
    28e4:	0200                	addi	s0,sp,256
    28e6:	3000                	fld	fs0,32(s0)
    28e8:	549f 0001 8c00      	0x8c000001549f
    28ee:	0001                	nop
    28f0:	0100                	addi	s0,sp,128
    28f2:	5800                	lw	s0,48(s0)
    28f4:	018c                	addi	a1,sp,192
    28f6:	0000                	unimp
    28f8:	0240                	addi	s0,sp,260
    28fa:	0000                	unimp
    28fc:	0001                	nop
    28fe:	6062                	flw	ft0,24(sp)
    2900:	0005                	c.nop	1
    2902:	8800                	0x8800
    2904:	0005                	c.nop	1
    2906:	0100                	addi	s0,sp,128
    2908:	6200                	flw	fs0,0(a2)
    290a:	0594                	addi	a3,sp,704
    290c:	0000                	unimp
    290e:	059c                	addi	a5,sp,704
    2910:	0000                	unimp
    2912:	0001                	nop
    2914:	5862                	lw	a6,56(sp)
    2916:	0006                	c.slli	zero,0x1
    2918:	6c00                	flw	fs0,24(s0)
    291a:	0006                	c.slli	zero,0x1
    291c:	0100                	addi	s0,sp,128
    291e:	6200                	flw	fs0,0(a2)
	...
    2928:	0044                	addi	s1,sp,4
    292a:	0000                	unimp
    292c:	0054                	addi	a3,sp,4
    292e:	0000                	unimp
    2930:	0001                	nop
    2932:	5459                	li	s0,-10
    2934:	0000                	unimp
    2936:	5c00                	lw	s0,56(s0)
    2938:	0000                	unimp
    293a:	0700                	addi	s0,sp,896
    293c:	7900                	flw	fs0,48(a0)
    293e:	4000                	lw	s0,0(s0)
    2940:	2440                	fld	fs0,136(s0)
    2942:	9f21                	0x9f21
    2944:	005c                	addi	a5,sp,4
    2946:	0000                	unimp
    2948:	0068                	addi	a0,sp,12
    294a:	0000                	unimp
    294c:	007b000b          	0x7b000b
    2950:	243c                	fld	fa5,72(s0)
    2952:	253c                	fld	fa5,72(a0)
    2954:	4040                	lw	s0,4(s0)
    2956:	2124                	fld	fs1,64(a0)
    2958:	689f 0000 2000      	0x20000000689f
    295e:	0001                	nop
            for (k = 0; k < N; k++)
    2960:	0100                	addi	s0,sp,128
    2962:	5900                	lw	s0,48(a0)
    2964:	0128                	addi	a0,sp,136
    2966:	0000                	unimp
    2968:	0148                	addi	a0,sp,132
    296a:	0000                	unimp
    296c:	0001                	nop
    296e:	4c59                	li	s8,22
    2970:	0001                	nop
    2972:	7000                	flw	fs0,32(s0)
    2974:	0001                	nop
    2976:	0100                	addi	s0,sp,128
        for (j = 0; j < N; j++)
    2978:	5900                	lw	s0,48(a0)
    297a:	0170                	addi	a2,sp,140
    297c:	0000                	unimp
    297e:	017c                	addi	a5,sp,140
    2980:	0000                	unimp
    2982:	007b0007          	0x7b0007
    2986:	243c                	fld	fa5,72(s0)
    2988:	253c                	fld	fa5,72(a0)
    298a:	7c9f 0001 8000      	0x800000017c9f
    for (i = 0; i < N; i++)
    2990:	0001                	nop
    2992:	0100                	addi	s0,sp,128
    2994:	5900                	lw	s0,48(a0)
    2996:	0180                	addi	s0,sp,192
    2998:	0000                	unimp
    299a:	018c                	addi	a1,sp,192
    299c:	0000                	unimp
    299e:	007b0007          	0x7b0007
    29a2:	243c                	fld	fa5,72(s0)
    29a4:	253c                	fld	fa5,72(a0)
    29a6:	8c9f 0001 3000      	0x300000018c9f
}
    29ac:	01000003          	lb	zero,16(zero) # 10 <_start>
    29b0:	5900                	lw	s0,48(a0)
    29b2:	0560                	addi	s0,sp,652
    29b4:	0000                	unimp
    29b6:	0588                	addi	a0,sp,704
    29b8:	0000                	unimp
    29ba:	0001                	nop
    29bc:	9459                	srai	s0,s0,0x36
    29be:	0005                	c.nop	1
    29c0:	9c00                	0x9c00
    29c2:	0005                	c.nop	1
    29c4:	0100                	addi	s0,sp,128
    29c6:	5900                	lw	s0,48(a0)
{
    29c8:	0658                	addi	a4,sp,772
    29ca:	0000                	unimp
    29cc:	066c                	addi	a1,sp,780
    29ce:	0000                	unimp
    29d0:	0001                	nop
    29d2:	0059                	c.nop	22
    29d4:	0000                	unimp
    29d6:	0000                	unimp
    29d8:	0000                	unimp
    29da:	b000                	fsd	fs0,32(s0)
    29dc:	0000                	unimp
    29de:	b400                	fsd	fs0,40(s0)
    29e0:	0000                	unimp
    29e2:	0200                	addi	s0,sp,256
    29e4:	3000                	fld	fs0,32(s0)
    29e6:	b49f 0000 f000      	0xf0000000b49f
    for (i = 0; i < N; i++)
    29ec:	0000                	unimp
    29ee:	0100                	addi	s0,sp,128
    29f0:	5e00                	lw	s0,56(a2)
    29f2:	022c                	addi	a1,sp,264
        for (j = 0; j < N; j++)
    29f4:	0000                	unimp
    29f6:	0284                	addi	s1,sp,320
    29f8:	0000                	unimp
    29fa:	0001                	nop
            C[i * N + j] = 0;
    29fc:	605e                	flw	ft0,212(sp)
    29fe:	0005                	c.nop	1
    2a00:	7000                	flw	fs0,32(s0)
    2a02:	0005                	c.nop	1
    2a04:	0100                	addi	s0,sp,128
    2a06:	5e00                	lw	s0,56(a2)
    2a08:	0594                	addi	a3,sp,704
    2a0a:	0000                	unimp
    2a0c:	059c                	addi	a5,sp,704
    2a0e:	0000                	unimp
    2a10:	0001                	nop
    2a12:	005e                	c.slli	zero,0x17
    2a14:	0000                	unimp
    2a16:	0000                	unimp
    2a18:	0000                	unimp
    2a1a:	8800                	0x8800
    2a1c:	0000                	unimp
    2a1e:	f000                	fsw	fs0,32(s0)
    2a20:	0000                	unimp
    2a22:	0600                	addi	s0,sp,768
    2a24:	8500                	0x8500
    2a26:	0800                	addi	s0,sp,16
            for (k = 0; k < N; k++)
    2a28:	1aff                	0x1aff
    2a2a:	8c9f 0001 3000      	0x300000018c9f
                MATRES tmp = (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
    2a30:	0002                	c.slli64	zero
    2a32:	0600                	addi	s0,sp,768
    2a34:	8500                	0x8500
    2a36:	0800                	addi	s0,sp,16
    2a38:	1aff                	0x1aff
    2a3a:	609f 0005 8800      	0x88000005609f
    2a40:	0005                	c.nop	1
    2a42:	0600                	addi	s0,sp,768
    2a44:	8500                	0x8500
    2a46:	0800                	addi	s0,sp,16
    2a48:	1aff                	0x1aff
    2a4a:	949f 0005 9c00      	0x9c000005949f
    2a50:	0005                	c.nop	1
    2a52:	0600                	addi	s0,sp,768
    2a54:	8500                	0x8500
    2a56:	0800                	addi	s0,sp,16
    2a58:	1aff                	0x1aff
    2a5a:	589f 0006 6c00      	0x6c000006589f
    2a60:	0006                	c.slli	zero,0x1
    2a62:	0600                	addi	s0,sp,768
    2a64:	8500                	0x8500
    2a66:	0800                	addi	s0,sp,16
    2a68:	1aff                	0x1aff
    2a6a:	009f 0000 0000      	0x9f
    2a70:	0000                	unimp
    2a72:	8400                	0x8400
    2a74:	0000                	unimp
    2a76:	ac00                	fsd	fs0,24(s0)
    2a78:	0000                	unimp
    2a7a:	0700                	addi	s0,sp,896
    2a7c:	7a00                	flw	fs0,48(a2)
    2a7e:	0a00                	addi	s0,sp,272
    2a80:	ffff                	0xffff
    2a82:	9f1a                	add	t5,t5,t1
    2a84:	00ac                	addi	a1,sp,72
    2a86:	0000                	unimp
    2a88:	00b0                	addi	a2,sp,72
    2a8a:	0000                	unimp
    2a8c:	0008                	0x8
    2a8e:	ff7a                	fsw	ft10,188(sp)
    2a90:	ffff0a07          	vloxseg8ei128.v	v20,(t5),v31
    2a94:	9f1a                	add	t5,t5,t1
    2a96:	00b0                	addi	a2,sp,72
    2a98:	0000                	unimp
    2a9a:	00f0                	addi	a2,sp,76
    2a9c:	0000                	unimp
    2a9e:	0001                	nop
                C[i * N + j] += bit_extract(tmp, 2, 4) * bit_extract(tmp, 5, 7);
    2aa0:	8c5a                	mv	s8,s6
    2aa2:	0001                	nop
    2aa4:	9c00                	0x9c00
    2aa6:	0001                	nop
    2aa8:	0700                	addi	s0,sp,896
    2aaa:	7a00                	flw	fs0,48(a2)
    2aac:	0a00                	addi	s0,sp,272
    2aae:	ffff                	0xffff
    2ab0:	9f1a                	add	t5,t5,t1
    2ab2:	01d4                	addi	a3,sp,196
    2ab4:	0000                	unimp
    2ab6:	01d8                	addi	a4,sp,196
    2ab8:	0000                	unimp
    2aba:	007a0007          	0x7a0007
    2abe:	ff0a                	fsw	ft2,188(sp)
    2ac0:	1aff                	0x1aff
    2ac2:	f49f 0001 0400      	0x4000001f49f
    2ac8:	0002                	c.slli64	zero
    2aca:	0700                	addi	s0,sp,896
    2acc:	7a00                	flw	fs0,48(a2)
    2ace:	0a00                	addi	s0,sp,272
    2ad0:	ffff                	0xffff
    2ad2:	9f1a                	add	t5,t5,t1
    2ad4:	020c                	addi	a1,sp,256
    2ad6:	0000                	unimp
    2ad8:	0214                	addi	a3,sp,256
    2ada:	0000                	unimp
    2adc:	007a0007          	0x7a0007
    2ae0:	ff0a                	fsw	ft2,188(sp)
    2ae2:	1aff                	0x1aff
    2ae4:	1c9f 0002 2400      	0x240000021c9f
    2aea:	0002                	c.slli64	zero
    2aec:	0700                	addi	s0,sp,896
    2aee:	7a00                	flw	fs0,48(a2)
    2af0:	0a00                	addi	s0,sp,272
    2af2:	ffff                	0xffff
    2af4:	9f1a                	add	t5,t5,t1
    2af6:	022c                	addi	a1,sp,264
    2af8:	0000                	unimp
    2afa:	0248                	addi	a0,sp,260
    2afc:	0000                	unimp
    2afe:	0001                	nop
    2b00:	605a                	flw	ft0,148(sp)
    2b02:	0005                	c.nop	1
    2b04:	8800                	0x8800
    2b06:	0005                	c.nop	1
    2b08:	0100                	addi	s0,sp,128
    2b0a:	5a00                	lw	s0,48(a2)
    2b0c:	0594                	addi	a3,sp,704
    2b0e:	0000                	unimp
    2b10:	059c                	addi	a5,sp,704
    2b12:	0000                	unimp
    2b14:	0001                	nop
    2b16:	585a                	lw	a6,180(sp)
    2b18:	0006                	c.slli	zero,0x1
    2b1a:	6c00                	flw	fs0,24(s0)
    2b1c:	0006                	c.slli	zero,0x1
    2b1e:	0100                	addi	s0,sp,128
    2b20:	5a00                	lw	s0,48(a2)
	...
    2b2a:	0074                	addi	a3,sp,12
            for (k = 0; k < N; k++)
    2b2c:	0000                	unimp
    2b2e:	00b0                	addi	a2,sp,72
    2b30:	0000                	unimp
    2b32:	0001                	nop
    2b34:	0000b067          	0xb067
    2b38:	f000                	fsw	fs0,32(s0)
    2b3a:	0000                	unimp
    2b3c:	0100                	addi	s0,sp,128
    2b3e:	5f00                	lw	s0,56(a4)
    2b40:	018c                	addi	a1,sp,192
    2b42:	0000                	unimp
        for (j = 0; j < N; j++)
    2b44:	01c8                	addi	a0,sp,196
    2b46:	0000                	unimp
    2b48:	0001                	nop
    2b4a:	0001c867          	0x1c867
    2b4e:	d400                	sw	s0,40(s0)
    2b50:	0001                	nop
    2b52:	0100                	addi	s0,sp,128
    2b54:	5f00                	lw	s0,56(a4)
    2b56:	01d4                	addi	a3,sp,196
    2b58:	0000                	unimp
    2b5a:	01ec                	addi	a1,sp,204
    for (i = 0; i < N; i++)
    2b5c:	0000                	unimp
    2b5e:	0001                	nop
    2b60:	0001ec67          	0x1ec67
    2b64:	f400                	fsw	fs0,40(s0)
    2b66:	0001                	nop
    2b68:	0200                	addi	s0,sp,256
    2b6a:	3000                	fld	fs0,32(s0)
    2b6c:	f49f 0001 2c00      	0x2c000001f49f
    2b72:	0002                	c.slli64	zero
}
    2b74:	0100                	addi	s0,sp,128
    2b76:	6700                	flw	fs0,8(a4)
    2b78:	022c                	addi	a1,sp,264
    2b7a:	0000                	unimp
    2b7c:	02d4                	addi	a3,sp,324
    2b7e:	0000                	unimp
    2b80:	0001                	nop
    2b82:	605f 0005 6c00      	0x6c000005605f
    2b88:	0005                	c.nop	1
    2b8a:	0100                	addi	s0,sp,128
    2b8c:	5f00                	lw	s0,56(a4)
    2b8e:	0594                	addi	a3,sp,704
{
    2b90:	0000                	unimp
    2b92:	059c                	addi	a5,sp,704
    2b94:	0000                	unimp
    2b96:	0001                	nop
    2b98:	005f 0000 0000      	0x5f
	const CORETIMETYPE * const time_ptr = (CORETIMETYPE*)0xDEADBEE0;
    2b9e:	0000                	unimp
    2ba0:	8400                	0x8400
    2ba2:	0000                	unimp
    2ba4:	9400                	0x9400
    2ba6:	0000                	unimp
	return *time_ptr;
    2ba8:	0100                	addi	s0,sp,128
    2baa:	5800                	lw	s0,48(s0)
    2bac:	0094                	addi	a3,sp,64
    2bae:	0000                	unimp
}
    2bb0:	009c                	addi	a5,sp,64
    2bb2:	0000                	unimp
    2bb4:	00780007          	0x780007
    2bb8:	4040                	lw	s0,4(s0)
    2bba:	2124                	fld	fs1,64(a0)
    2bbc:	a89f 0000 f000      	0xf0000000a89f
{
    2bc2:	0000                	unimp
    2bc4:	0100                	addi	s0,sp,128
    2bc6:	5800                	lw	s0,48(s0)
    2bc8:	018c                	addi	a1,sp,192
    2bca:	0000                	unimp
    2bcc:	01bc                	addi	a5,sp,200
    2bce:	0000                	unimp
    GETMYTIME(&start_time_val);
    2bd0:	0001                	nop
    2bd2:	c458                	sw	a4,12(s0)
    2bd4:	0001                	nop
    2bd6:	e800                	fsw	fs0,16(s0)
    2bd8:	0001                	nop
    2bda:	0100                	addi	s0,sp,128
}
    2bdc:	5800                	lw	s0,48(s0)
    2bde:	01ec                	addi	a1,sp,204
    2be0:	0000                	unimp
    2be2:	0210                	addi	a2,sp,256
    2be4:	0000                	unimp
    2be6:	0001                	nop
    2be8:	1c58                	addi	a4,sp,564
    2bea:	0002                	c.slli64	zero
    2bec:	2000                	fld	fs0,0(s0)
    2bee:	0002                	c.slli64	zero
{
    2bf0:	0100                	addi	s0,sp,128
    2bf2:	5800                	lw	s0,48(s0)
    2bf4:	022c                	addi	a1,sp,264
    2bf6:	0000                	unimp
    2bf8:	02b0                	addi	a2,sp,328
    2bfa:	0000                	unimp
    2bfc:	0001                	nop
    2bfe:	6058                	flw	fa4,4(s0)
    GETMYTIME(&stop_time_val);
    2c00:	0005                	c.nop	1
    2c02:	6800                	flw	fs0,16(s0)
    2c04:	0005                	c.nop	1
    2c06:	0100                	addi	s0,sp,128
    2c08:	5800                	lw	s0,48(s0)
    2c0a:	0594                	addi	a3,sp,704
}
    2c0c:	0000                	unimp
    2c0e:	059c                	addi	a5,sp,704
    2c10:	0000                	unimp
    2c12:	0001                	nop
    2c14:	0058                	addi	a4,sp,4
    2c16:	0000                	unimp
    2c18:	0000                	unimp
    2c1a:	0000                	unimp
    2c1c:	2c00                	fld	fs0,24(s0)
    2c1e:	0002                	c.slli64	zero
{
    2c20:	ac00                	fsd	fs0,24(s0)
    2c22:	0004                	0x4
    2c24:	0200                	addi	s0,sp,256
    2c26:	3000                	fld	fs0,32(s0)
    2c28:	709f 0005 8800      	0x88000005709f
        = (CORE_TICKS)(MYTIMEDIFF(stop_time_val, start_time_val));
    2c2e:	0005                	c.nop	1
    2c30:	0100                	addi	s0,sp,128
    2c32:	5e00                	lw	s0,56(a2)
    CORE_TICKS elapsed
    2c34:	059c                	addi	a5,sp,704
    2c36:	0000                	unimp
    2c38:	05a4                	addi	s1,sp,712
    2c3a:	0000                	unimp
    return elapsed;
    2c3c:	0002                	c.slli64	zero
    2c3e:	9f30                	0x9f30
	...
}
    2c48:	00cc                	addi	a1,sp,68
    2c4a:	0000                	unimp
    2c4c:	00f0                	addi	a2,sp,76
    2c4e:	0000                	unimp
{
    2c50:	0001                	nop
    2c52:	2c60                	fld	fs0,216(s0)
    2c54:	0002                	c.slli64	zero
    2c56:	2800                	fld	fs0,16(s0)
    2c58:	0005                	c.nop	1
    2c5a:	0100                	addi	s0,sp,128
    2c5c:	6000                	flw	fs0,0(s0)
    2c5e:	0560                	addi	s0,sp,652
    2c60:	0000                	unimp
    2c62:	0564                	addi	s1,sp,652
    secs_ret retval = ((secs_ret)ticks) / (secs_ret)EE_TICKS_PER_SEC;
    2c64:	0000                	unimp
    2c66:	0001                	nop
    2c68:	6460                	flw	fs0,76(s0)
    2c6a:	0005                	c.nop	1
    2c6c:	7000                	flw	fs0,32(s0)
    2c6e:	0005                	c.nop	1
    2c70:	0600                	addi	s0,sp,768
    2c72:	8400                	0x8400
    2c74:	0800                	addi	s0,sp,16
    2c76:	1aff                	0x1aff
    2c78:	709f 0005 9800      	0x98000005709f
    return retval;
    2c7e:	0005                	c.nop	1
}
    2c80:	0100                	addi	s0,sp,128
    2c82:	6000                	flw	fs0,0(s0)
    2c84:	0598                	addi	a4,sp,704
    2c86:	0000                	unimp
    2c88:	059c                	addi	a5,sp,704
    2c8a:	0000                	unimp
    2c8c:	0006                	c.slli	zero,0x1
    2c8e:	0085                	addi	ra,ra,1
    2c90:	ff08                	fsw	fa0,56(a4)
    2c92:	9f1a                	add	t5,t5,t1
{
    2c94:	059c                	addi	a5,sp,704
    2c96:	0000                	unimp
    2c98:	0668                	addi	a0,sp,780
    2c9a:	0000                	unimp
    2c9c:	0001                	nop
    2c9e:	6c60                	flw	fs0,92(s0)
    2ca0:	0006                	c.slli	zero,0x1
    2ca2:	8c00                	0x8c00
    2ca4:	0006                	c.slli	zero,0x1
    2ca6:	0100                	addi	s0,sp,128
    2ca8:	6000                	flw	fs0,0(s0)
	...
    p->portable_id = 1;
    2cb2:	00d0                	addi	a2,sp,68
    2cb4:	0000                	unimp
    2cb6:	00f0                	addi	a2,sp,76
}
    2cb8:	0000                	unimp
    2cba:	0001                	nop
    2cbc:	2c61                	jal	2f54 <core_bench_state+0x264>
    2cbe:	0002                	c.slli64	zero
    2cc0:	b000                	fsd	fs0,32(s0)
    2cc2:	0004                	0x4
    2cc4:	0100                	addi	s0,sp,128
    2cc6:	6100                	flw	fs0,0(a0)
{
    2cc8:	04b0                	addi	a2,sp,584
    2cca:	0000                	unimp
    2ccc:	0518                	addi	a4,sp,640
    2cce:	0000                	unimp
    2cd0:	0001                	nop
    2cd2:	605d                	c.lui	zero,0x17
    2cd4:	0005                	c.nop	1
    2cd6:	8800                	0x8800
    p->portable_id = 0;
    2cd8:	0005                	c.nop	1
    2cda:	0100                	addi	s0,sp,128
    2cdc:	6100                	flw	fs0,0(a0)
    2cde:	0594                	addi	a3,sp,704
}
    2ce0:	0000                	unimp
    2ce2:	05a0                	addi	s0,sp,712
    2ce4:	0000                	unimp
    2ce6:	0001                	nop
    2ce8:	a061                	j	2d70 <core_bench_state+0x80>
    2cea:	0005                	c.nop	1
    2cec:	a400                	fsd	fs0,8(s0)
    2cee:	0005                	c.nop	1
{
    2cf0:	0300                	addi	s0,sp,384
    2cf2:	8300                	0x8300
    2cf4:	9f01                	0x9f01
    2cf6:	05a4                	addi	s1,sp,712
    2cf8:	0000                	unimp
    2cfa:	05ac                	addi	a1,sp,712
    2cfc:	0000                	unimp
    2cfe:	0001                	nop
    2d00:	ac5d                	j	2fb6 <core_init_state+0x1a>
    2d02:	0005                	c.nop	1
    2d04:	0c00                	addi	s0,sp,528
    2d06:	0006                	c.slli	zero,0x1
    2d08:	0100                	addi	s0,sp,128
    2d0a:	5c00                	lw	s0,56(s0)
    2d0c:	060c                	addi	a1,sp,768
    2d0e:	0000                	unimp
    2d10:	061c                	addi	a5,sp,768
    2d12:	0000                	unimp
    2d14:	0002                	c.slli64	zero
    2d16:	9f30                	0x9f30
    2d18:	0624                	addi	s1,sp,776
    2d1a:	0000                	unimp
    2d1c:	0658                	addi	a4,sp,772
    2d1e:	0000                	unimp
    2d20:	0001                	nop
    2d22:	585c                	lw	a5,52(s0)
    2d24:	0006                	c.slli	zero,0x1
    2d26:	6c00                	flw	fs0,24(s0)
    2d28:	0006                	c.slli	zero,0x1
    2d2a:	0100                	addi	s0,sp,128
    2d2c:	6100                	flw	fs0,0(a0)
    2d2e:	067c                	addi	a5,sp,780
    2d30:	0000                	unimp
    2d32:	068c                	addi	a1,sp,832
    2d34:	0000                	unimp
    2d36:	0001                	nop
    ee_u8 *p = memblock;
    2d38:	005c                	addi	a5,sp,4
    2d3a:	0000                	unimp
    2d3c:	0000                	unimp
    2d3e:	0000                	unimp
    for (i = 0; i < NUM_CORE_STATES; i++)
    2d40:	8800                	0x8800
    2d42:	0004                	0x4
    2d44:	9c00                	0x9c00
    2d46:	0004                	0x4
        final_counts[i] = track_counts[i] = 0;
    2d48:	0100                	addi	s0,sp,128
    2d4a:	5f00                	lw	s0,56(a4)
    2d4c:	04a8                	addi	a0,sp,584
    2d4e:	0000                	unimp
    2d50:	04d0                	addi	a2,sp,580
    2d52:	0000                	unimp
    2d54:	0001                	nop
    2d56:	d05f 0004 d400      	0xd4000004d05f
    2d5c:	0004                	0x4
    2d5e:	0300                	addi	s0,sp,384
    2d60:	7e00                	flw	fs0,56(a2)
    2d62:	9f7c                	0x9f7c
    2d64:	04d4                	addi	a3,sp,580
    2d66:	0000                	unimp
    2d68:	04d8                	addi	a4,sp,580
    2d6a:	0000                	unimp
    2d6c:	0001                	nop
    2d6e:	d85e                	sw	s7,48(sp)
    2d70:	0004                	0x4
    2d72:	f400                	fsw	fs0,40(s0)
    2d74:	0004                	0x4
    2d76:	0100                	addi	s0,sp,128
    2d78:	5f00                	lw	s0,56(a4)
    2d7a:	04f4                	addi	a3,sp,588
    2d7c:	0000                	unimp
    2d7e:	0500                	addi	s0,sp,640
    2d80:	0000                	unimp
    2d82:	000a                	c.slli	zero,0x2
    for (i = 0; i < NUM_CORE_STATES; i++)
    2d84:	007f                	0x7f
    2d86:	00782533          	slt	a0,a6,t2
    2d8a:	244d                	jal	302c <core_init_state+0x90>
    2d8c:	9f21                	0x9f21
    2d8e:	0500                	addi	s0,sp,640
    2d90:	0000                	unimp
    2d92:	0504                	addi	s1,sp,640
    2d94:	0000                	unimp
    2d96:	0008                	0x8
    2d98:	0078                	addi	a4,sp,12
    2d9a:	244d                	jal	303c <core_init_state+0xa0>
    while (*p != 0)
    2d9c:	007e                	c.slli	zero,0x1f
    2d9e:	9f21                	0x9f21
        enum CORE_STATE fstate = core_state_transition(&p, track_counts);
    2da0:	0504                	addi	s1,sp,640
    2da2:	0000                	unimp
    2da4:	0508                	addi	a0,sp,640
    2da6:	0000                	unimp
    2da8:	0006                	c.slli	zero,0x1
    2daa:	007e                	c.slli	zero,0x1f
    2dac:	007f                	0x7f
    2dae:	9f21                	0x9f21
    2db0:	0508                	addi	a0,sp,640
    2db2:	0000                	unimp
    2db4:	050c                	addi	a1,sp,640
    2db6:	0000                	unimp
        final_counts[fstate]++;
    2db8:	0008                	0x8
    2dba:	0078                	addi	a4,sp,12
    2dbc:	244d                	jal	305e <core_init_state+0xc2>
    2dbe:	007e                	c.slli	zero,0x1f
    2dc0:	9f21                	0x9f21
    2dc2:	050c                	addi	a1,sp,640
    2dc4:	0000                	unimp
    2dc6:	0560                	addi	s0,sp,652
    2dc8:	0000                	unimp
    2dca:	0001                	nop
    2dcc:	705f 0005 9000      	0x90000005705f
    2dd2:	0005                	c.nop	1
    2dd4:	0100                	addi	s0,sp,128
    2dd6:	5f00                	lw	s0,56(a4)
    2dd8:	059c                	addi	a5,sp,704
    2dda:	0000                	unimp
    2ddc:	05cc                	addi	a1,sp,708
    2dde:	0000                	unimp
    2de0:	0001                	nop
    2de2:	d85f 0005 f800      	0xf8000005d85f
    while (*p != 0)
    2de8:	0005                	c.nop	1
    2dea:	0100                	addi	s0,sp,128
    2dec:	5f00                	lw	s0,56(a4)
    2dee:	05f8                	addi	a4,sp,716
    p = memblock;
    2df0:	0000                	unimp
    2df2:	05fc                	addi	a5,sp,716
    2df4:	0000                	unimp
    2df6:	7c7e0003          	lb	zero,1991(t3) # 1a7c7 <RAM_SIZE+0xa7c7>
    while (p < (memblock + blksize))
    2dfa:	fc9f 0005 0000      	0x5fc9f
        if (*p != ',')
    2e00:	0006                	c.slli	zero,0x1
    2e02:	0100                	addi	s0,sp,128
    2e04:	5e00                	lw	s0,56(a2)
    2e06:	0600                	addi	s0,sp,768
    2e08:	0000                	unimp
    2e0a:	0614                	addi	a3,sp,768
            *p ^= (ee_u8)seed1;
    2e0c:	0000                	unimp
    2e0e:	0001                	nop
    2e10:	185f 0006 1c00      	0x1c000006185f
    2e16:	0006                	c.slli	zero,0x1
    2e18:	0100                	addi	s0,sp,128
    2e1a:	5f00                	lw	s0,56(a4)
    2e1c:	0624                	addi	s1,sp,776
    2e1e:	0000                	unimp
    2e20:	0648                	addi	a0,sp,772
    2e22:	0000                	unimp
    2e24:	0001                	nop
    2e26:	505f 0006 5800      	0x58000006505f
        p += step;
    2e2c:	0006                	c.slli	zero,0x1
    2e2e:	0100                	addi	s0,sp,128
    2e30:	5f00                	lw	s0,56(a4)
    2e32:	067c                	addi	a5,sp,780
    2e34:	0000                	unimp
    2e36:	0684                	addi	s1,sp,832
    2e38:	0000                	unimp
    2e3a:	0001                	nop
    while (p < (memblock + blksize))
    2e3c:	005f 0000 0000      	0x5f
    2e42:	0000                	unimp
    2e44:	8800                	0x8800
    2e46:	0004                	0x4
    2e48:	f400                	fsw	fs0,40(s0)
    2e4a:	0004                	0x4
    2e4c:	0100                	addi	s0,sp,128
    2e4e:	5800                	lw	s0,48(s0)
    p = memblock;
    2e50:	04f4                	addi	a3,sp,588
    2e52:	0000                	unimp
    2e54:	050c                	addi	a1,sp,640
    2e56:	0000                	unimp
    while (*p != 0)
    2e58:	0005                	c.nop	1
    2e5a:	0078                	addi	a4,sp,12
        enum CORE_STATE fstate = core_state_transition(&p, track_counts);
    2e5c:	0c9f2533          	0xc9f2533
    2e60:	0005                	c.nop	1
    2e62:	1400                	addi	s0,sp,544
    2e64:	0005                	c.nop	1
    2e66:	0100                	addi	s0,sp,128
    2e68:	5800                	lw	s0,48(s0)
    2e6a:	0570                	addi	a2,sp,652
    2e6c:	0000                	unimp
    2e6e:	058c                	addi	a1,sp,704
    2e70:	0000                	unimp
    2e72:	0001                	nop
        final_counts[fstate]++;
    2e74:	9c58                	0x9c58
    2e76:	0005                	c.nop	1
    2e78:	1c00                	addi	s0,sp,560
    2e7a:	0006                	c.slli	zero,0x1
    2e7c:	0100                	addi	s0,sp,128
    2e7e:	5800                	lw	s0,48(s0)
    2e80:	0624                	addi	s1,sp,776
    2e82:	0000                	unimp
    2e84:	0650                	addi	a2,sp,772
    2e86:	0000                	unimp
    2e88:	0001                	nop
    2e8a:	5058                	lw	a4,36(s0)
    2e8c:	0006                	c.slli	zero,0x1
    2e8e:	5800                	lw	s0,48(s0)
    2e90:	0006                	c.slli	zero,0x1
    2e92:	0200                	addi	s0,sp,256
    2e94:	3000                	fld	fs0,32(s0)
    2e96:	7c9f 0006 8000      	0x800000067c9f
    2e9c:	0006                	c.slli	zero,0x1
    2e9e:	0100                	addi	s0,sp,128
    while (*p != 0)
    2ea0:	5800                	lw	s0,48(s0)
	...
    2eaa:	0104                	addi	s1,sp,128
    p = memblock;
    2eac:	0000                	unimp
    2eae:	0108                	addi	a0,sp,128
    2eb0:	0000                	unimp
    2eb2:	0001                	nop
    while (p < (memblock + blksize))
    2eb4:	085a                	slli	a6,a6,0x16
    2eb6:	0001                	nop
        if (*p != ',')
    2eb8:	3800                	fld	fs0,48(s0)
    2eba:	0001                	nop
    2ebc:	0100                	addi	s0,sp,128
    2ebe:	5e00                	lw	s0,56(a2)
    2ec0:	013c                	addi	a5,sp,136
    2ec2:	0000                	unimp
    2ec4:	0144                	addi	s1,sp,132
    2ec6:	0000                	unimp
            *p ^= (ee_u8)seed2;
    2ec8:	0001                	nop
    2eca:	445a                	lw	s0,148(sp)
    2ecc:	0001                	nop
    2ece:	5400                	lw	s0,40(s0)
    2ed0:	0001                	nop
    2ed2:	0100                	addi	s0,sp,128
    2ed4:	5e00                	lw	s0,56(a2)
	...
    2ede:	01a0                	addi	s0,sp,200
    2ee0:	0000                	unimp
    2ee2:	01a4                	addi	s1,sp,200
    2ee4:	0000                	unimp
    2ee6:	0001                	nop
        p += step;
    2ee8:	a45a                	fsd	fs6,8(sp)
    2eea:	0001                	nop
    2eec:	d400                	sw	s0,40(s0)
    2eee:	0001                	nop
    2ef0:	0100                	addi	s0,sp,128
    2ef2:	5d00                	lw	s0,56(a0)
    2ef4:	01dc                	addi	a5,sp,196
    2ef6:	0000                	unimp
    while (p < (memblock + blksize))
    2ef8:	01e4                	addi	s1,sp,204
    2efa:	0000                	unimp
    2efc:	0001                	nop
    2efe:	e45a                	fsw	fs6,8(sp)
    2f00:	0001                	nop
    2f02:	f400                	fsw	fs0,40(s0)
    2f04:	0001                	nop
    2f06:	0100                	addi	s0,sp,128
    2f08:	5d00                	lw	s0,56(a0)
	...
    for (i = 0; i < NUM_CORE_STATES; i++)
    2f12:	02b4                	addi	a3,sp,328
        crc = crcu32(final_counts[i], crc);
    2f14:	0000                	unimp
    2f16:	0338                	addi	a4,sp,392
    2f18:	0000                	unimp
    2f1a:	000d                	c.nop	3
    2f1c:	936c                	0x936c
    2f1e:	8504                	0x8504
    2f20:	8e00                	0x8e00
    2f22:	2200                	fld	fs0,0(a2)
    2f24:	939f 9304 3808      	0x38089304939f
    2f2a:	ac000003          	lb	zero,-1344(zero) # fffffac0 <RAM_SIZE+0xfffefac0>
    2f2e:	0004                	0x4
    2f30:	0500                	addi	s0,sp,640
    2f32:	6c00                	flw	fs0,24(s0)
    2f34:	0c930493          	addi	s1,t1,201
    2f38:	059c                	addi	a5,sp,704
    2f3a:	0000                	unimp
    2f3c:	05a4                	addi	s1,sp,712
    2f3e:	0000                	unimp
        crc = crcu32(track_counts[i], crc);
    2f40:	0005                	c.nop	1
    2f42:	936c                	0x936c
    2f44:	9304                	0x9304
    2f46:	000c                	0xc
    2f48:	0000                	unimp
    2f4a:	0000                	unimp
    2f4c:	0000                	unimp
    2f4e:	3800                	fld	fs0,48(s0)
    2f50:	20000003          	lb	zero,512(zero) # 200 <calc_func+0x13c>
    2f54:	0004                	0x4
    2f56:	0100                	addi	s0,sp,128
    2f58:	6d00                	flw	fs0,24(a0)
	...
    2f62:	0334                	addi	a3,sp,392
    2f64:	0000                	unimp
    2f66:	04ac                	addi	a1,sp,584
    2f68:	0000                	unimp
    2f6a:	0001                	nop
    for (i = 0; i < NUM_CORE_STATES; i++)
    2f6c:	00059c6f          	jal	s8,5bf6c <RAM_SIZE+0x4bf6c>
    2f70:	a400                	fsd	fs0,8(s0)
    2f72:	0005                	c.nop	1
    2f74:	0100                	addi	s0,sp,128
    2f76:	6f00                	flw	fs0,24(a4)
	...
    2f80:	03ac                	addi	a1,sp,456
    2f82:	0000                	unimp
    return crc;
    2f84:	0430                	addi	a2,sp,520
    2f86:	0000                	unimp
}
    2f88:	0001                	nop
    2f8a:	0056                	c.slli	zero,0x15
    2f8c:	0000                	unimp
    2f8e:	0000                	unimp
    2f90:	0000                	unimp
    2f92:	a800                	fsd	fs0,16(s0)
    2f94:	ac000003          	lb	zero,-1344(zero) # fffffac0 <RAM_SIZE+0xfffefac0>
    2f98:	0004                	0x4
    2f9a:	0100                	addi	s0,sp,128
{
    2f9c:	5500                	lw	s0,40(a0)
    2f9e:	059c                	addi	a5,sp,704
    2fa0:	0000                	unimp
    2fa2:	05a4                	addi	s1,sp,712
    2fa4:	0000                	unimp
    2fa6:	0001                	nop
    2fa8:	0055                	c.nop	21
    2faa:	0000                	unimp
    2fac:	0000                	unimp
    2fae:	0000                	unimp
    2fb0:	5400                	lw	s0,40(s0)
    2fb2:	0002                	c.slli64	zero
    2fb4:	a000                	fsd	fs0,0(s0)
    2fb6:	0002                	c.slli64	zero
    ee_u32 total = 0, next = 0, i;
    2fb8:	0100                	addi	s0,sp,128
    2fba:	5700                	lw	s0,40(a4)
	...
    size--;
    2fc4:	0264                	addi	s1,sp,268
    2fc6:	0000                	unimp
    2fc8:	0288                	addi	a0,sp,320
    2fca:	0000                	unimp
    2fcc:	0001                	nop
    2fce:	9056                	c.add	zero,s5
    next = 0;
    2fd0:	0002                	c.slli64	zero
    2fd2:	0000                	unimp
    while ((total + next + 1) < size)
    2fd4:	01000003          	lb	zero,16(zero) # 10 <_start>
        if (next > 0)
    2fd8:	5e00                	lw	s0,56(a2)
	...
            for (i = 0; i < next; i++)
    2fe2:	0274                	addi	a3,sp,268
    2fe4:	0000                	unimp
    2fe6:	027c                	addi	a5,sp,268
                *(p + total + i) = buf[i];
    2fe8:	0000                	unimp
    2fea:	0001                	nop
    2fec:	7c5a                	flw	fs8,180(sp)
    2fee:	0002                	c.slli64	zero
    2ff0:	9c00                	0x9c00
    2ff2:	0002                	c.slli64	zero
    2ff4:	0100                	addi	s0,sp,128
    2ff6:	6c00                	flw	fs0,24(s0)
	...
    3000:	0290                	addi	a2,sp,320
    3002:	0000                	unimp
    3004:	0298                	addi	a4,sp,320
    3006:	0000                	unimp
    3008:	0001                	nop
    300a:	985a                	add	a6,a6,s6
    300c:	0002                	c.slli64	zero
    300e:	1800                	addi	s0,sp,48
            for (i = 0; i < next; i++)
    3010:	0004                	0x4
    3012:	0100                	addi	s0,sp,128
    3014:	6e00                	flw	fs0,24(a2)
	...
    301e:	022c                	addi	a1,sp,264
    3020:	0000                	unimp
    3022:	0240                	addi	s0,sp,260
    3024:	0000                	unimp
    3026:	0001                	nop
            *(p + total + i) = ',';
    3028:	0062                	c.slli	zero,0x18
    302a:	0000                	unimp
    302c:	0000                	unimp
    302e:	0000                	unimp
    3030:	3800                	fld	fs0,48(s0)
    3032:	0002                	c.slli64	zero
    3034:	d400                	sw	s0,40(s0)
    3036:	0002                	c.slli64	zero
    3038:	0100                	addi	s0,sp,128
    303a:	5f00                	lw	s0,56(a4)
	...
            total += next + 1;
    3044:	0238                	addi	a4,sp,264
    3046:	0000                	unimp
    3048:	0318                	addi	a4,sp,384
    304a:	0000                	unimp
    304c:	0001                	nop
    304e:	0000006f          	j	304e <core_init_state+0xb2>
    3052:	0000                	unimp
    3054:	0000                	unimp
    3056:	4400                	lw	s0,8(s0)
        seed++;
    3058:	0002                	c.slli64	zero
    305a:	a000                	fsd	fs0,0(s0)
    305c:	01000003          	lb	zero,16(zero) # 10 <_start>
    3060:	5500                	lw	s0,40(a0)
	...
    306a:	02c4                	addi	s1,sp,324
    306c:	0000                	unimp
    306e:	02cc                	addi	a1,sp,324
    3070:	0000                	unimp
    3072:	0001                	nop
        switch (seed & 0x7)
    3074:	cc5a                	sw	s6,24(sp)
    3076:	0002                	c.slli64	zero
    3078:	2400                	fld	fs0,8(s0)
    307a:	01000003          	lb	zero,16(zero) # 10 <_start>
    307e:	6d00                	flw	fs0,24(a0)
	...
    3088:	02d4                	addi	a3,sp,324
    308a:	0000                	unimp
    308c:	02dc                	addi	a5,sp,324
    308e:	0000                	unimp
    3090:	0001                	nop
    3092:	dc5a                	sw	s6,56(sp)
    3094:	0002                	c.slli64	zero
    3096:	f800                	fsw	fs0,48(s0)
    3098:	0002                	c.slli64	zero
    309a:	0100                	addi	s0,sp,128
    309c:	5f00                	lw	s0,56(a4)
    309e:	0300                	addi	s0,sp,384
    30a0:	0000                	unimp
    30a2:	031c                	addi	a5,sp,384
    30a4:	0000                	unimp
    30a6:	0001                	nop
    30a8:	005d                	c.nop	23
    30aa:	0000                	unimp
    30ac:	0000                	unimp
    30ae:	0000                	unimp
    30b0:	e400                	fsw	fs0,8(s0)
    30b2:	0002                	c.slli64	zero
    30b4:	5800                	lw	s0,48(s0)
    30b6:	01000003          	lb	zero,16(zero) # 10 <_start>
    30ba:	5600                	lw	s0,40(a2)
	...
                buf  = intpat[(seed >> 3) & 0x3];
    30c4:	0300                	addi	s0,sp,384
    30c6:	0000                	unimp
    30c8:	030c                	addi	a1,sp,384
    30ca:	0000                	unimp
    30cc:	0001                	nop
    30ce:	0c5a                	slli	s8,s8,0x16
    30d0:	48000003          	lb	zero,1152(zero) # 480 <core_bench_list+0x34>
    30d4:	01000003          	lb	zero,16(zero) # 10 <_start>
    30d8:	5e00                	lw	s0,56(a2)
	...
    30e2:	02b4                	addi	a3,sp,328
    30e4:	0000                	unimp
    30e6:	0318                	addi	a4,sp,384
    30e8:	0000                	unimp
    30ea:	0001                	nop
                next = 4;
    30ec:	0000006f          	j	30ec <core_init_state+0x150>
    30f0:	0000                	unimp
    30f2:	0000                	unimp
                break;
    30f4:	b400                	fsd	fs0,40(s0)
    30f6:	0002                	c.slli64	zero
                buf  = floatpat[(seed >> 3) & 0x3];
    30f8:	f800                	fsw	fs0,48(s0)
    30fa:	01000003          	lb	zero,16(zero) # 10 <_start>
    30fe:	5700                	lw	s0,40(a4)
	...
    3108:	0348                	addi	a0,sp,388
    310a:	0000                	unimp
    310c:	0350                	addi	a2,sp,388
    310e:	0000                	unimp
    3110:	0001                	nop
    3112:	505a                	0x505a
    3114:	9c000003          	lb	zero,-1600(zero) # fffff9c0 <RAM_SIZE+0xfffef9c0>
    3118:	01000003          	lb	zero,16(zero) # 10 <_start>
    311c:	5e00                	lw	s0,56(a2)
	...
    3126:	0358                	addi	a4,sp,388
                next = 8;
    3128:	0000                	unimp
    312a:	037c                	addi	a5,sp,396
    312c:	0000                	unimp
    312e:	0001                	nop
                break;
    3130:	8456                	mv	s0,s5
    3132:	cc000003          	lb	zero,-832(zero) # fffffcc0 <RAM_SIZE+0xfffefcc0>
                buf  = scipat[(seed >> 3) & 0x3];
    3136:	01000003          	lb	zero,16(zero) # 10 <_start>
    313a:	5f00                	lw	s0,56(a4)
	...
    3144:	0368                	addi	a0,sp,396
    3146:	0000                	unimp
    3148:	0370                	addi	a2,sp,396
    314a:	0000                	unimp
    314c:	0001                	nop
    314e:	705a                	flw	ft0,180(sp)
    3150:	90000003          	lb	zero,-1792(zero) # fffff900 <RAM_SIZE+0xfffef900>
    3154:	01000003          	lb	zero,16(zero) # 10 <_start>
    3158:	6400                	flw	fs0,8(s0)
	...
    3162:	0384                	addi	s1,sp,448
                next = 8;
    3164:	0000                	unimp
    3166:	038c                	addi	a1,sp,448
    3168:	0000                	unimp
    316a:	0001                	nop
                break;
    316c:	8c5a                	mv	s8,s6
    316e:	b8000003          	lb	zero,-1152(zero) # fffffb80 <RAM_SIZE+0xfffefb80>
                buf  = errpat[(seed >> 3) & 0x3];
    3172:	01000003          	lb	zero,16(zero) # 10 <_start>
    3176:	5c00                	lw	s0,56(s0)
	...
    3180:	0338                	addi	a4,sp,392
    3182:	0000                	unimp
    3184:	04ac                	addi	a1,sp,584
    3186:	0000                	unimp
    3188:	0001                	nop
    318a:	9c66                	add	s8,s8,s9
    318c:	0005                	c.nop	1
    318e:	a400                	fsd	fs0,8(s0)
    3190:	0005                	c.nop	1
    3192:	0100                	addi	s0,sp,128
    3194:	6600                	flw	fs0,8(a2)
	...
    319e:	0338                	addi	a4,sp,392
                next = 8;
    31a0:	0000                	unimp
    31a2:	03a0                	addi	s0,sp,456
    31a4:	0000                	unimp
    31a6:	0001                	nop
                break;
    31a8:	0055                	c.nop	21
    31aa:	0000                	unimp
                break;
    31ac:	0000                	unimp
    31ae:	0000                	unimp
    while ((total + next + 1) < size)
    31b0:	bc00                	fsd	fs0,56(s0)
    31b2:	c4000003          	lb	zero,-960(zero) # fffffc40 <RAM_SIZE+0xfffefc40>
    31b6:	01000003          	lb	zero,16(zero) # 10 <_start>
    31ba:	5a00                	lw	s0,48(a2)
    31bc:	03c4                	addi	s1,sp,452
    31be:	0000                	unimp
    31c0:	04ac                	addi	a1,sp,584
    31c2:	0000                	unimp
    31c4:	0001                	nop
    31c6:	9c62                	add	s8,s8,s8
    size++;
    31c8:	0005                	c.nop	1
    31ca:	a400                	fsd	fs0,8(s0)
    31cc:	0005                	c.nop	1
    31ce:	0100                	addi	s0,sp,128
    31d0:	6200                	flw	fs0,0(a2)
	...
        *(p + total) = 0;
    31da:	03cc                	addi	a1,sp,452
    31dc:	0000                	unimp
    31de:	03d4                	addi	a3,sp,452
    31e0:	0000                	unimp
    31e2:	0001                	nop
    31e4:	d45a                	sw	s6,40(sp)
    31e6:	f0000003          	lb	zero,-256(zero) # ffffff00 <RAM_SIZE+0xfffeff00>
        total++;
    31ea:	01000003          	lb	zero,16(zero) # 10 <_start>
    31ee:	5f00                	lw	s0,56(a4)
    31f0:	03f8                	addi	a4,sp,460
    31f2:	0000                	unimp
    while (total < size)
    31f4:	0464                	addi	s1,sp,524
    31f6:	0000                	unimp
    31f8:	0001                	nop
    31fa:	005f 0000 0000      	0x5f
}
    3200:	0000                	unimp
    3202:	dc00                	sw	s0,56(s0)
    3204:	ac000003          	lb	zero,-1344(zero) # fffffac0 <RAM_SIZE+0xfffefac0>
    3208:	0004                	0x4
    320a:	0100                	addi	s0,sp,128
    320c:	5900                	lw	s0,48(a0)
    320e:	059c                	addi	a5,sp,704
    3210:	0000                	unimp
    3212:	05a4                	addi	s1,sp,712
{
    3214:	0000                	unimp
    3216:	0001                	nop
    3218:	0059                	c.nop	22
    321a:	0000                	unimp
    321c:	0000                	unimp
    321e:	0000                	unimp
    3220:	f800                	fsw	fs0,48(s0)
    3222:	ac000003          	lb	zero,-1344(zero) # fffffac0 <RAM_SIZE+0xfffefac0>
    3226:	0004                	0x4
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
    3228:	0100                	addi	s0,sp,128
    322a:	5700                	lw	s0,40(a4)
    322c:	059c                	addi	a5,sp,704
    322e:	0000                	unimp
    3230:	05a4                	addi	s1,sp,712
    3232:	0000                	unimp
    3234:	0001                	nop
    3236:	00000057          	vadd.vv	v0,v0,v0,v0.t
    323a:	0000                	unimp
    323c:	0000                	unimp
    323e:	ac00                	fsd	fs0,24(s0)
    3240:	ac000003          	lb	zero,-1344(zero) # fffffac0 <RAM_SIZE+0xfffefac0>
    3244:	0004                	0x4
    3246:	0100                	addi	s0,sp,128
    3248:	6600                	flw	fs0,8(a2)
    324a:	059c                	addi	a5,sp,704
    324c:	0000                	unimp
    324e:	05a4                	addi	s1,sp,712
    return retval;
    3250:	0000                	unimp
    3252:	0001                	nop
}
    3254:	0066                	c.slli	zero,0x19
    3256:	0000                	unimp
    3258:	0000                	unimp
    325a:	0000                	unimp
    325c:	ac00                	fsd	fs0,24(s0)
    325e:	f8000003          	lb	zero,-128(zero) # ffffff80 <RAM_SIZE+0xfffeff80>
    3262:	01000003          	lb	zero,16(zero) # 10 <_start>
{
    3266:	5700                	lw	s0,40(a4)
	...
    3270:	0420                	addi	s0,sp,520
    3272:	0000                	unimp
    3274:	043c                	addi	a5,sp,520
    3276:	0000                	unimp
    3278:	0001                	nop
    327a:	006d                	c.nop	27
    ee_u8 *         str = *instr;
    327c:	0000                	unimp
    327e:	0000                	unimp
    3280:	0000                	unimp
    3282:	2400                	fld	fs0,8(s0)
    3284:	0004                	0x4
    3286:	2800                	fld	fs0,16(s0)
    enum CORE_STATE state = CORE_START;
    3288:	0004                	0x4
    328a:	1100                	addi	s0,sp,160
    for (; *str && state != CORE_INVALID; str++)
    328c:	7e00                	flw	fs0,56(a2)
    328e:	4000                	lw	s0,0(s0)
        NEXT_SYMBOL = *str;
    3290:	8f22244b          	fnmsub.q	fs0,ft4,fs2,fa7,rdn
    3294:	4000                	lw	s0,0(s0)
    3296:	2d22244b          	fnmsub.h	fs0,ft4,fs2,ft5,rdn
    329a:	ff08                	fsw	fa0,56(a4)
        if (NEXT_SYMBOL == ',') /* end of this input */
    329c:	9f1a                	add	t5,t5,t1
    329e:	0428                	addi	a0,sp,520
    32a0:	0000                	unimp
    32a2:	043c                	addi	a5,sp,520
    32a4:	0000                	unimp
    32a6:	001f 007e 4b40      	0x4b40007e001f
            str++;
    32ac:	2224                	fld	fs1,64(a2)
    32ae:	4b40008f          	0x4b40008f
    32b2:	2224                	fld	fs1,64(a2)
            break;
    32b4:	782d                	lui	a6,0xfffeb
    32b6:	4000                	lw	s0,0(s0)
    32b8:	8d22244b          	fnmsub.h	fs0,ft4,fs2,fa7,rdn
    32bc:	4000                	lw	s0,0(s0)
    32be:	2d22244b          	fnmsub.h	fs0,ft4,fs2,ft5,rdn
    32c2:	0821                	addi	a6,a6,8
    32c4:	1aff                	0x1aff
    32c6:	009f 0000 0000      	0x9f
    32cc:	0000                	unimp
    32ce:	3000                	fld	fs0,32(s0)
    32d0:	0004                	0x4
    32d2:	5000                	lw	s0,32(s0)
    32d4:	0004                	0x4
    32d6:	0100                	addi	s0,sp,128
    32d8:	5600                	lw	s0,40(a2)
	...
                if (ee_isdigit(NEXT_SYMBOL))
    32e2:	0434                	addi	a3,sp,520
    32e4:	0000                	unimp
    32e6:	0438                	addi	a4,sp,520
    32e8:	0000                	unimp
    32ea:	0011                	c.nop	4
    32ec:	007c                	addi	a5,sp,12
    32ee:	4b40                	lw	s0,20(a4)
    32f0:	2224                	fld	fs1,64(a2)
    32f2:	0075                	c.nop	29
                    state = CORE_INT;
    32f4:	4b40                	lw	s0,20(a4)
    32f6:	2224                	fld	fs1,64(a2)
    32f8:	082d                	addi	a6,a6,11
    32fa:	1aff                	0x1aff
    32fc:	389f 0004 4c00      	0x4c000004389f
                else if (NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-')
    3302:	0004                	0x4
    3304:	1f00                	addi	s0,sp,944
    3306:	7c00                	flw	fs0,56(s0)
    3308:	4000                	lw	s0,0(s0)
    330a:	7522244b          	fnmsub.h	fs0,ft4,fs2,fa4,rdn
    330e:	4000                	lw	s0,0(s0)
    3310:	2d22244b          	fnmsub.h	fs0,ft4,fs2,ft5,rdn
    3314:	4b40007b          	0x4b40007b
                    state = CORE_S1;
    3318:	2224                	fld	fs1,64(a2)
    331a:	0076                	c.slli	zero,0x1d
    331c:	4b40                	lw	s0,20(a4)
    331e:	2224                	fld	fs1,64(a2)
    3320:	212d                	jal	374a <crcu8+0xb6>
    3322:	ff08                	fsw	fa0,56(a4)
                else if (NEXT_SYMBOL == '.')
    3324:	9f1a                	add	t5,t5,t1
	...
    332e:	046c                	addi	a1,sp,524
                    state = CORE_FLOAT;
    3330:	0000                	unimp
    3332:	047c                	addi	a5,sp,524
    3334:	0000                	unimp
    3336:	000d                	c.nop	3
    3338:	008e                	slli	ra,ra,0x3
    333a:	2439                	jal	3548 <core_state_transition+0x2e4>
                    state = CORE_INVALID;
    333c:	008c                	addi	a1,sp,64
    333e:	3021                	jal	2b46 <matrix_mul_matrix_bitextract+0x17e>
    3340:	082e                	slli	a6,a6,0xb
    3342:	1aff                	0x1aff
                    transition_count[CORE_INVALID]++;
    3344:	009f 0000 0000      	0x9f
    334a:	0000                	unimp
    334c:	3800                	fld	fs0,48(s0)
    334e:	0004                	0x4
    3350:	ac00                	fsd	fs0,24(s0)
    3352:	0004                	0x4
    3354:	0200                	addi	s0,sp,256
    3356:	3900                	fld	fs0,48(a0)
                transition_count[CORE_START]++;
    3358:	9c9f 0005 a400      	0xa40000059c9f
    335e:	0005                	c.nop	1
    3360:	0200                	addi	s0,sp,256
    3362:	3900                	fld	fs0,48(a0)
    3364:	009f 0000 0000      	0x9f
    336a:	0000                	unimp
                break;
    336c:	3800                	fld	fs0,48(s0)
    336e:	0004                	0x4
                if (ee_isdigit(NEXT_SYMBOL))
    3370:	ac00                	fsd	fs0,24(s0)
    3372:	0004                	0x4
    3374:	0200                	addi	s0,sp,256
    3376:	4700                	lw	s0,8(a4)
    3378:	9c9f 0005 a400      	0xa40000059c9f
    337e:	0005                	c.nop	1
    3380:	0200                	addi	s0,sp,256
    3382:	4700                	lw	s0,8(a4)
                    state = CORE_INT;
    3384:	009f 0000 0000      	0x9f
    338a:	0000                	unimp
                    transition_count[CORE_S1]++;
    338c:	3800                	fld	fs0,48(s0)
    338e:	0004                	0x4
    3390:	ac00                	fsd	fs0,24(s0)
    3392:	0004                	0x4
    3394:	0200                	addi	s0,sp,256
    3396:	3100                	fld	fs0,32(a0)
    3398:	9c9f 0005 a400      	0xa40000059c9f
    339e:	0005                	c.nop	1
                break;
    33a0:	0200                	addi	s0,sp,256
    33a2:	3100                	fld	fs0,32(a0)
                else if (NEXT_SYMBOL == '.')
    33a4:	009f 0000 0000      	0x9f
    33aa:	0000                	unimp
    33ac:	3800                	fld	fs0,48(s0)
    33ae:	0004                	0x4
                    state = CORE_FLOAT;
    33b0:	6c00                	flw	fs0,24(s0)
    33b2:	0004                	0x4
    33b4:	0200                	addi	s0,sp,256
    33b6:	3100                	fld	fs0,32(a0)
                    transition_count[CORE_S1]++;
    33b8:	009f 0000 0000      	0x9f
    33be:	0000                	unimp
    33c0:	3800                	fld	fs0,48(s0)
    33c2:	0004                	0x4
    33c4:	7400                	flw	fs0,40(s0)
    33c6:	0004                	0x4
    33c8:	0800                	addi	s0,sp,16
    33ca:	8e00                	0x8e00
                break;
    33cc:	3900                	fld	fs0,48(a0)
    33ce:	8c24                	0x8c24
                    state = CORE_INVALID;
    33d0:	2100                	fld	fs0,0(a0)
    33d2:	749f 0004 7800      	0x78000004749f
                    transition_count[CORE_S1]++;
    33d8:	0004                	0x4
    33da:	0100                	addi	s0,sp,128
    33dc:	5f00                	lw	s0,56(a4)
    33de:	0478                	addi	a4,sp,524
    33e0:	0000                	unimp
    33e2:	047c                	addi	a5,sp,524
    33e4:	0000                	unimp
    33e6:	0008                	0x8
    33e8:	008e                	slli	ra,ra,0x3
    33ea:	2439                	jal	35f8 <core_state_transition+0x394>
                break;
    33ec:	008c                	addi	a1,sp,64
    33ee:	9f21                	0x9f21
	...
                if (NEXT_SYMBOL == '.')
    33f8:	04cc                	addi	a1,sp,580
    33fa:	0000                	unimp
                    state = CORE_FLOAT;
    33fc:	04d8                	addi	a4,sp,580
    33fe:	0000                	unimp
    3400:	0001                	nop
    3402:	005e                	c.slli	zero,0x17
                    transition_count[CORE_INT]++;
    3404:	0000                	unimp
    3406:	0000                	unimp
    3408:	0000                	unimp
    340a:	f400                	fsw	fs0,40(s0)
    340c:	0005                	c.nop	1
    340e:	0000                	unimp
    3410:	0006                	c.slli	zero,0x1
    3412:	0100                	addi	s0,sp,128
    3414:	5e00                	lw	s0,56(a2)
	...
                else if (!ee_isdigit(NEXT_SYMBOL))
    3422:	002c                	addi	a1,sp,8
    3424:	0000                	unimp
    3426:	0006                	c.slli	zero,0x1
    3428:	935a                	add	t1,t1,s6
    342a:	5b04                	lw	s1,48(a4)
    342c:	002c0493          	addi	s1,s8,2
                    state = CORE_INVALID;
    3430:	0000                	unimp
    3432:	0038                	addi	a4,sp,8
    3434:	0000                	unimp
    3436:	0006                	c.slli	zero,0x1
                    transition_count[CORE_INT]++;
    3438:	0af503f3          	0xaf503f3
    343c:	9f25                	0x9f25
    343e:	0038                	addi	a4,sp,8
    3440:	0000                	unimp
    3442:	0058                	addi	a4,sp,4
    3444:	0000                	unimp
    3446:	0006                	c.slli	zero,0x1
    3448:	935a                	add	t1,t1,s6
    344a:	5b04                	lw	s1,48(a4)
                break;
    344c:	00580493          	addi	s1,a6,5 # fffeb005 <RAM_SIZE+0xfffdb005>
                if (NEXT_SYMBOL == 'E' || NEXT_SYMBOL == 'e')
    3450:	0000                	unimp
    3452:	0068                	addi	a0,sp,12
    3454:	0000                	unimp
    3456:	0006                	c.slli	zero,0x1
    3458:	0af503f3          	0xaf503f3
    345c:	9f25                	0x9f25
    345e:	0068                	addi	a0,sp,12
    3460:	0000                	unimp
    3462:	006c                	addi	a1,sp,12
    3464:	0000                	unimp
    3466:	0006                	c.slli	zero,0x1
                    state = CORE_S2;
    3468:	935a                	add	t1,t1,s6
    346a:	5b04                	lw	s1,48(a4)
    346c:	006c0493          	addi	s1,s8,6
                    transition_count[CORE_FLOAT]++;
    3470:	0000                	unimp
    3472:	0078                	addi	a4,sp,12
    3474:	0000                	unimp
    3476:	0006                	c.slli	zero,0x1
    3478:	0af503f3          	0xaf503f3
    347c:	9f25                	0x9f25
    347e:	0078                	addi	a4,sp,12
    3480:	0000                	unimp
    3482:	007c                	addi	a5,sp,12
                break;
    3484:	0000                	unimp
    3486:	0006                	c.slli	zero,0x1
                else if (!ee_isdigit(NEXT_SYMBOL))
    3488:	935a                	add	t1,t1,s6
    348a:	5b04                	lw	s1,48(a4)
    348c:	007c0493          	addi	s1,s8,7
    3490:	0000                	unimp
    3492:	0080                	addi	s0,sp,64
    3494:	0000                	unimp
    3496:	0006                	c.slli	zero,0x1
    3498:	0af503f3          	0xaf503f3
                    state = CORE_INVALID;
    349c:	9f25                	0x9f25
	...
                    transition_count[CORE_FLOAT]++;
    34aa:	007c                	addi	a5,sp,12
    34ac:	0000                	unimp
    34ae:	0002                	c.slli64	zero
    34b0:	9f30                	0x9f30
	...
                break;
    34ba:	0018                	0x18
                if (NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-')
    34bc:	0000                	unimp
    34be:	0050                	addi	a2,sp,4
    34c0:	0000                	unimp
    34c2:	0001                	nop
    34c4:	505e                	0x505e
    34c6:	0000                	unimp
    34c8:	5c00                	lw	s0,56(s0)
    34ca:	0000                	unimp
    34cc:	0400                	addi	s0,sp,512
    34ce:	7e00                	flw	fs0,56(a2)
    34d0:	689f0893          	addi	a7,t5,1673
                    state = CORE_EXPONENT;
    34d4:	0000                	unimp
    34d6:	7c00                	flw	fs0,56(s0)
    34d8:	0000                	unimp
    34da:	0100                	addi	s0,sp,128
                    transition_count[CORE_S2]++;
    34dc:	5e00                	lw	s0,56(a2)
	...
    34e6:	005c                	addi	a5,sp,4
    34e8:	0000                	unimp
    34ea:	0064                	addi	s1,sp,12
    34ec:	0000                	unimp
    34ee:	0001                	nop
                break;
    34f0:	645a                	flw	fs0,148(sp)
    34f2:	0000                	unimp
                    state = CORE_INVALID;
    34f4:	6800                	flw	fs0,16(s0)
    34f6:	0000                	unimp
    34f8:	0400                	addi	s0,sp,512
    34fa:	7a00                	flw	fs0,48(a2)
                    transition_count[CORE_S2]++;
    34fc:	1f00                	addi	s0,sp,944
    34fe:	749f 0000 7800      	0x78000000749f
    3504:	0000                	unimp
    3506:	0100                	addi	s0,sp,128
    3508:	5a00                	lw	s0,48(a2)
	...
                break;
    3512:	0018                	0x18
                if (ee_isdigit(NEXT_SYMBOL))
    3514:	0000                	unimp
    3516:	0054                	addi	a3,sp,4
    3518:	0000                	unimp
    351a:	0001                	nop
    351c:	5c5f 0000 6800      	0x680000005c5f
    3522:	0000                	unimp
    3524:	0200                	addi	s0,sp,256
    3526:	3000                	fld	fs0,32(s0)
                    state = CORE_SCIENTIFIC;
    3528:	689f 0000 7400      	0x74000000689f
    352e:	0000                	unimp
                    transition_count[CORE_EXPONENT]++;
    3530:	0100                	addi	s0,sp,128
    3532:	5f00                	lw	s0,56(a4)
    3534:	0074                	addi	a3,sp,12
    3536:	0000                	unimp
    3538:	0078                	addi	a4,sp,12
    353a:	0000                	unimp
    353c:	0002                	c.slli64	zero
    353e:	9f30                	0x9f30
    3540:	0078                	addi	a4,sp,12
    3542:	0000                	unimp
                break;
    3544:	007c                	addi	a5,sp,12
    3546:	0000                	unimp
                    state = CORE_INVALID;
    3548:	0001                	nop
    354a:	005f 0000 0000      	0x5f
                    transition_count[CORE_EXPONENT]++;
    3550:	0000                	unimp
    3552:	2800                	fld	fs0,16(s0)
    3554:	0000                	unimp
    3556:	3400                	fld	fs0,40(s0)
    3558:	0000                	unimp
    355a:	0500                	addi	s0,sp,640
    355c:	4000                	lw	s0,0(s0)
    355e:	9f1f244b          	fnmsub.q	fs0,ft10,fa7,fs3,rdn
    3562:	0034                	addi	a3,sp,8
                break;
    3564:	0000                	unimp
    3566:	0038                	addi	a4,sp,8
                if (!ee_isdigit(NEXT_SYMBOL))
    3568:	0000                	unimp
    356a:	0001                	nop
    356c:	5c5a                	lw	s8,180(sp)
    356e:	0000                	unimp
    3570:	6800                	flw	fs0,16(s0)
    3572:	0000                	unimp
    3574:	0100                	addi	s0,sp,128
    3576:	5a00                	lw	s0,48(a2)
    3578:	007c                	addi	a5,sp,12
    357a:	0000                	unimp
                    state = CORE_INVALID;
    357c:	0080                	addi	s0,sp,64
    357e:	0000                	unimp
    3580:	0001                	nop
    3582:	005a                	c.slli	zero,0x16
                    transition_count[CORE_INVALID]++;
    3584:	0000                	unimp
    3586:	0000                	unimp
    3588:	0000                	unimp
    358a:	3800                	fld	fs0,48(s0)
    358c:	0000                	unimp
    358e:	4c00                	lw	s0,24(s0)
    3590:	0000                	unimp
    3592:	0200                	addi	s0,sp,256
    3594:	3000                	fld	fs0,32(s0)
    3596:	009f 0000 0000      	0x9f
                break;
    359c:	0000                	unimp
    359e:	0000                	unimp
    35a0:	0000                	unimp
    35a2:	2000                	fld	fs0,0(s0)
                break;
    35a4:	0000                	unimp
    35a6:	0100                	addi	s0,sp,128
    35a8:	5a00                	lw	s0,48(a2)
    35aa:	0020                	addi	s0,sp,8
                break;
    35ac:	0000                	unimp
    35ae:	0038                	addi	a4,sp,8
    35b0:	0000                	unimp
    35b2:	0004                	0x4
                break;
    35b4:	9f5a01f3          	0x9f5a01f3
    for (; *str && state != CORE_INVALID; str++)
    35b8:	0038                	addi	a4,sp,8
    35ba:	0000                	unimp
    35bc:	004c                	addi	a1,sp,4
    35be:	0000                	unimp
    35c0:	0001                	nop
    35c2:	005a                	c.slli	zero,0x16
	...
    35cc:	0000                	unimp
    35ce:	2000                	fld	fs0,0(s0)
    35d0:	0000                	unimp
    35d2:	0100                	addi	s0,sp,128
    35d4:	5a00                	lw	s0,48(a2)
    35d6:	0020                	addi	s0,sp,8
    35d8:	0000                	unimp
    35da:	0038                	addi	a4,sp,8
    *instr = str;
    35dc:	0000                	unimp
    35de:	0004                	0x4
    35e0:	9f5a01f3          	0x9f5a01f3
    35e4:	0038                	addi	a4,sp,8
    35e6:	0000                	unimp
    return state;
    35e8:	004c                	addi	a1,sp,4
    35ea:	0000                	unimp
}
    35ec:	0001                	nop
    35ee:	005a                	c.slli	zero,0x16
    35f0:	0000                	unimp
    35f2:	0000                	unimp
    35f4:	0000                	unimp
    35f6:	1400                	addi	s0,sp,544
    35f8:	0000                	unimp
    35fa:	2800                	fld	fs0,16(s0)
    35fc:	0000                	unimp
    35fe:	0100                	addi	s0,sp,128
{
    3600:	5f00                	lw	s0,56(a4)
	...
    360e:	0058                	addi	a4,sp,4
    3610:	0000                	unimp
    3612:	0006                	c.slli	zero,0x1
    3614:	935a                	add	t1,t1,s6
    3616:	5b04                	lw	s1,48(a4)
    3618:	00580493          	addi	s1,a6,5
    361c:	0000                	unimp
    361e:	07ec                	addi	a1,sp,972
    3620:	0000                	unimp
    3622:	0006                	c.slli	zero,0x1
    3624:	0af503f3          	0xaf503f3
    3628:	9f25                	0x9f25
	...
    3636:	0064                	addi	s1,sp,12
            retval = seed1_volatile;
    3638:	0000                	unimp
    363a:	0006                	c.slli	zero,0x1
    363c:	935c                	0x935c
    363e:	5d04                	lw	s1,56(a0)
            break;
    3640:	00640493          	addi	s1,s0,6
            retval = seed2_volatile;
    3644:	0000                	unimp
    3646:	07ec                	addi	a1,sp,972
    3648:	0000                	unimp
    364a:	0006                	c.slli	zero,0x1
            break;
    364c:	0cf503f3          	0xcf503f3
            retval = seed3_volatile;
    3650:	9f25                	0x9f25
	...
            break;
    365e:	00b8                	addi	a4,sp,72
            retval = seed4_volatile;
    3660:	0000                	unimp
    3662:	0002                	c.slli64	zero
    3664:	9f30                	0x9f30
    3666:	00c0                	addi	s0,sp,68
            break;
    3668:	0000                	unimp
    366a:	01d4                	addi	a3,sp,196
            retval = seed5_volatile;
    366c:	0000                	unimp
    366e:	0002                	c.slli64	zero
    3670:	9f30                	0x9f30
    3672:	01e0                	addi	s0,sp,204
            break;
    3674:	0000                	unimp
    3676:	02d0                	addi	a2,sp,324
            retval = 0;
    3678:	0000                	unimp
    367a:	0002                	c.slli64	zero
            break;
    367c:	9f30                	0x9f30
    367e:	0318                	addi	a4,sp,384
    return retval;
    3680:	0000                	unimp
    3682:	05a8                	addi	a0,sp,712
}
    3684:	0000                	unimp
    3686:	0002                	c.slli64	zero
    3688:	9f30                	0x9f30
    368a:	05c8                	addi	a0,sp,708
    368c:	0000                	unimp
    368e:	070c                	addi	a1,sp,896
    3690:	0000                	unimp
    3692:	0002                	c.slli64	zero
{
    3694:	9f30                	0x9f30
    3696:	07a0                	addi	s0,sp,968
    3698:	0000                	unimp
    369a:	07d0                	addi	a2,sp,964
    369c:	0000                	unimp
    369e:	0002                	c.slli64	zero
    36a0:	9f30                	0x9f30
	...
    36aa:	0038                	addi	a4,sp,8
    36ac:	0000                	unimp
    36ae:	00b8                	addi	a4,sp,72
    36b0:	0000                	unimp
    36b2:	0001                	nop
    ee_u8 i = 0, x16 = 0, carry = 0;
    36b4:	c059                	beqz	s0,373a <crcu8+0xa6>
    36b6:	0000                	unimp
    36b8:	d000                	sw	s0,32(s0)
    36ba:	0002                	c.slli64	zero
    36bc:	0100                	addi	s0,sp,128
    36be:	5900                	lw	s0,48(a0)
    for (i = 0; i < 8; i++)
    36c0:	02f8                	addi	a4,sp,332
    36c2:	0000                	unimp
    36c4:	0308                	addi	a0,sp,384
    36c6:	0000                	unimp
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    36c8:	0001                	nop
    36ca:	1859                	addi	a6,a6,-10
    36cc:	74000003          	lb	zero,1856(zero) # 740 <core_bench_list+0x2f4>
    36d0:	01000003          	lb	zero,16(zero) # 10 <_start>
    36d4:	5900                	lw	s0,48(a0)
    36d6:	037c                	addi	a5,sp,396
    36d8:	0000                	unimp
    36da:	03cc                	addi	a1,sp,452
    36dc:	0000                	unimp
    36de:	0001                	nop
    36e0:	e859                	bnez	s0,3776 <crcu8+0xe2>
    36e2:	70000003          	lb	zero,1792(zero) # 700 <core_bench_list+0x2b4>
    36e6:	0004                	0x4
    36e8:	0100                	addi	s0,sp,128
    36ea:	5900                	lw	s0,48(a0)
    36ec:	0474                	addi	a3,sp,524
    36ee:	0000                	unimp
        data >>= 1;
    36f0:	04ec                	addi	a1,sp,588
    36f2:	0000                	unimp
    36f4:	0001                	nop
    36f6:	f059                	bnez	s0,367c <get_seed_32+0x7c>
    36f8:	0004                	0x4
    36fa:	5c00                	lw	s0,56(s0)
        if (x16 == 1)
    36fc:	0005                	c.nop	1
    36fe:	0100                	addi	s0,sp,128
    3700:	5900                	lw	s0,48(a0)
    3702:	0560                	addi	s0,sp,652
    3704:	0000                	unimp
    3706:	05bc                	addi	a5,sp,712
            crc ^= 0x4002;
    3708:	0000                	unimp
    370a:	0001                	nop
    370c:	c059                	beqz	s0,3792 <crcu8+0xfe>
    370e:	0005                	c.nop	1
    3710:	f800                	fsw	fs0,48(s0)
    3712:	0005                	c.nop	1
    3714:	0100                	addi	s0,sp,128
    3716:	5900                	lw	s0,48(a0)
    3718:	0668                	addi	a0,sp,780
    371a:	0000                	unimp
            carry = 1;
    371c:	067c                	addi	a5,sp,780
    371e:	0000                	unimp
    3720:	0001                	nop
    3722:	e459                	bnez	s0,37b0 <crcu16+0x1c>
    3724:	0006                	c.slli	zero,0x1
    3726:	0c00                	addi	s0,sp,528
            carry = 0;
    3728:	01000007          	vle8ff.v	v0,(zero),v0.t
        crc >>= 1;
    372c:	5900                	lw	s0,48(a0)
    372e:	07a0                	addi	s0,sp,968
    3730:	0000                	unimp
    3732:	07c4                	addi	s1,sp,964
    3734:	0000                	unimp
    3736:	0001                	nop
        if (carry)
    3738:	c859                	beqz	s0,37ce <crcu16+0x3a>
    373a:	d8000007          	vlsseg7e128.v	v0,(zero),zero,v0.t
    373e:	01000007          	vle8ff.v	v0,(zero),v0.t
            crc |= 0x8000;
    3742:	5900                	lw	s0,48(a0)
	...
    374c:	0028                	addi	a0,sp,8
    374e:	0000                	unimp
    3750:	00ac                	addi	a1,sp,72
    3752:	0000                	unimp
            crc &= 0x7fff;
    3754:	0001                	nop
    3756:	b058                	fsd	fa4,160(s0)
    3758:	0000                	unimp
    375a:	bc00                	fsd	fs0,56(s0)
    375c:	0000                	unimp
    375e:	0100                	addi	s0,sp,128
    3760:	5800                	lw	s0,48(s0)
    3762:	00c0                	addi	s0,sp,68
    3764:	0000                	unimp
    3766:	011c                	addi	a5,sp,128
    for (i = 0; i < 8; i++)
    3768:	0000                	unimp
    376a:	0001                	nop
    376c:	5c58                	lw	a4,60(s0)
    376e:	0001                	nop
    3770:	3c00                	fld	fs0,56(s0)
    3772:	0002                	c.slli64	zero
    3774:	0100                	addi	s0,sp,128
    3776:	5800                	lw	s0,48(s0)
    3778:	0240                	addi	s0,sp,260
    377a:	0000                	unimp
    377c:	02d0                	addi	a2,sp,324
    377e:	0000                	unimp
    return crc;
    3780:	0001                	nop
    3782:	f858                	fsw	fa4,52(s0)
}
    3784:	0002                	c.slli64	zero
    3786:	1400                	addi	s0,sp,544
    3788:	01000003          	lb	zero,16(zero) # 10 <_start>
    378c:	5800                	lw	s0,48(s0)
    378e:	0318                	addi	a4,sp,384
    3790:	0000                	unimp
    3792:	0344                	addi	s1,sp,388
{
    3794:	0000                	unimp
    3796:	0001                	nop
    3798:	4458                	lw	a4,12(s0)
    379a:	48000003          	lb	zero,1152(zero) # 480 <core_bench_list+0x34>
    379e:	03000003          	lb	zero,48(zero) # 30 <_start+0x20>
    37a2:	7d00                	flw	fs0,56(a0)
    37a4:	9f7f                	0x9f7f
    37a6:	0348                	addi	a0,sp,388
    37a8:	0000                	unimp
    37aa:	0378                	addi	a4,sp,396
    37ac:	0000                	unimp
    37ae:	0001                	nop
    37b0:	7c58                	flw	fa4,60(s0)
    37b2:	cc000003          	lb	zero,-832(zero) # fffffcc0 <RAM_SIZE+0xfffefcc0>
    37b6:	01000003          	lb	zero,16(zero) # 10 <_start>
    crc = crcu8((ee_u8)(newval), crc);
    37ba:	5800                	lw	s0,48(s0)
    37bc:	03e8                	addi	a0,sp,460
    37be:	0000                	unimp
    37c0:	0488                	addi	a0,sp,576
    37c2:	0000                	unimp
    37c4:	0001                	nop
    37c6:	8c58                	0x8c58
    37c8:	0004                	0x4
    37ca:	e800                	fsw	fs0,16(s0)
    37cc:	0004                	0x4
    37ce:	0100                	addi	s0,sp,128
    37d0:	5800                	lw	s0,48(s0)
    37d2:	04f0                	addi	a2,sp,588
    37d4:	0000                	unimp
    37d6:	0558                	addi	a4,sp,644
    crc = crcu8((ee_u8)((newval) >> 8), crc);
    37d8:	0000                	unimp
    37da:	0001                	nop
    37dc:	6058                	flw	fa4,4(s0)
    37de:	0005                	c.nop	1
    37e0:	f800                	fsw	fs0,48(s0)
    37e2:	0005                	c.nop	1
    37e4:	0100                	addi	s0,sp,128
    37e6:	5800                	lw	s0,48(s0)
    37e8:	0668                	addi	a0,sp,780
    37ea:	0000                	unimp
    37ec:	0678                	addi	a4,sp,780
    37ee:	0000                	unimp
    37f0:	0001                	nop
    37f2:	e458                	fsw	fa4,12(s0)
    37f4:	0006                	c.slli	zero,0x1
    37f6:	f000                	fsw	fs0,32(s0)
    37f8:	0006                	c.slli	zero,0x1
    37fa:	0100                	addi	s0,sp,128
    37fc:	5800                	lw	s0,48(s0)
    37fe:	06f4                	addi	a3,sp,844
    3800:	0000                	unimp
    3802:	0704                	addi	s1,sp,896
    return crc;
    3804:	0000                	unimp
    3806:	0001                	nop
}
    3808:	a058                	fsd	fa4,128(s0)
    380a:	a4000007          	vluxseg6ei8.v	v0,(zero),v0,v0.t
    380e:	01000007          	vle8ff.v	v0,(zero),v0.t
    3812:	5800                	lw	s0,48(s0)
    3814:	07a8                	addi	a0,sp,968
    3816:	0000                	unimp
    3818:	07b4                	addi	a3,sp,968
    381a:	0000                	unimp
{
    381c:	0001                	nop
    381e:	b858                	fsd	fa4,176(s0)
    3820:	c0000007          	vlseg7e8.v	v0,(zero),v0.t
    3824:	01000007          	vle8ff.v	v0,(zero),v0.t
    3828:	5800                	lw	s0,48(s0)
    382a:	07c8                	addi	a0,sp,964
    382c:	0000                	unimp
    382e:	07e0                	addi	s0,sp,972
    3830:	0000                	unimp
    3832:	0001                	nop
    3834:	0058                	addi	a4,sp,4
	...
    crc = crc16((ee_s16)newval, crc);
    383e:	0000                	unimp
    3840:	4000                	lw	s0,0(s0)
    3842:	0000                	unimp
    3844:	0100                	addi	s0,sp,128
    3846:	5a00                	lw	s0,48(a2)
    3848:	0040                	addi	s0,sp,4
    384a:	0000                	unimp
    384c:	00a8                	addi	a0,sp,72
    384e:	0000                	unimp
    3850:	0001                	nop
    3852:	0000b05b          	0xb05b
    3856:	b800                	fsd	fs0,48(s0)
    3858:	0000                	unimp
    385a:	0100                	addi	s0,sp,128
    crc = crc16((ee_s16)(newval >> 16), crc);
    385c:	5b00                	lw	s0,48(a4)
    385e:	00c0                	addi	s0,sp,68
    3860:	0000                	unimp
    3862:	011c                	addi	a5,sp,128
    3864:	0000                	unimp
    3866:	0001                	nop
    3868:	00015c5b          	0x15c5b
    386c:	bc00                	fsd	fs0,56(s0)
    386e:	0001                	nop
    3870:	0100                	addi	s0,sp,128
    3872:	5b00                	lw	s0,48(a4)
    3874:	01cc                	addi	a1,sp,196
    3876:	0000                	unimp
    3878:	01dc                	addi	a5,sp,196
    387a:	0000                	unimp
    387c:	0001                	nop
    387e:	0001e05b          	0x1e05b
    3882:	1800                	addi	s0,sp,48
    return crc;
    3884:	0002                	c.slli64	zero
    3886:	0100                	addi	s0,sp,128
}
    3888:	5b00                	lw	s0,48(a4)
    388a:	0224                	addi	s1,sp,264
    388c:	0000                	unimp
    388e:	0240                	addi	s0,sp,260
    3890:	0000                	unimp
    3892:	0001                	nop
    3894:	405a                	0x405a
    3896:	0002                	c.slli64	zero
    3898:	6c00                	flw	fs0,24(s0)
    389a:	0002                	c.slli64	zero
{
    389c:	0100                	addi	s0,sp,128
    389e:	5b00                	lw	s0,48(a4)
    38a0:	0274                	addi	a3,sp,268
    38a2:	0000                	unimp
    38a4:	02bc                	addi	a5,sp,328
    38a6:	0000                	unimp
    38a8:	0001                	nop
    38aa:	0002f85b          	0x2f85b
    38ae:	1000                	addi	s0,sp,32
    38b0:	01000003          	lb	zero,16(zero) # 10 <_start>
    38b4:	5b00                	lw	s0,48(a4)
    38b6:	0318                	addi	a4,sp,384
    38b8:	0000                	unimp
    38ba:	033c                	addi	a5,sp,392
    38bc:	0000                	unimp
    38be:	0001                	nop
    return crcu16((ee_u16)newval, crc);
    38c0:	0003485b          	0x3485b
    38c4:	7400                	flw	fs0,40(s0)
    38c6:	01000003          	lb	zero,16(zero) # 10 <_start>
    38ca:	5b00                	lw	s0,48(a4)
    38cc:	037c                	addi	a5,sp,396
    38ce:	0000                	unimp
    38d0:	03cc                	addi	a1,sp,452
    38d2:	0000                	unimp
    38d4:	0001                	nop
    38d6:	0003e85b          	0x3e85b
}
    38da:	6000                	flw	fs0,0(s0)
    38dc:	0004                	0x4
    38de:	0100                	addi	s0,sp,128
    38e0:	5b00                	lw	s0,48(a4)
    38e2:	0474                	addi	a3,sp,524
    38e4:	0000                	unimp
    38e6:	0484                	addi	s1,sp,576
    38e8:	0000                	unimp
    38ea:	0001                	nop
{
    38ec:	00048c5b          	0x48c5b
    38f0:	c400                	sw	s0,8(s0)
    38f2:	0004                	0x4
    38f4:	0100                	addi	s0,sp,128
    38f6:	5b00                	lw	s0,48(a4)
    38f8:	04d0                	addi	a2,sp,580
    38fa:	0000                	unimp
    ee_u8 retval = 0;
    38fc:	04f0                	addi	a2,sp,588
    38fe:	0000                	unimp
    if (retval > 0)
    3900:	0001                	nop
    3902:	f05a                	fsw	fs6,32(sp)
    3904:	0004                	0x4
    3906:	1c00                	addi	s0,sp,560
        ee_printf("ERROR: Please modify the datatypes in core_portme.h!\n");
    3908:	0005                	c.nop	1
    390a:	0100                	addi	s0,sp,128
    390c:	5b00                	lw	s0,48(a4)
    390e:	0524                	addi	s1,sp,648
    3910:	0000                	unimp
    3912:	0558                	addi	a4,sp,644
    return retval;
    3914:	0000                	unimp
    3916:	0001                	nop
}
    3918:	0005605b          	0x5605b
    391c:	8400                	0x8400
    391e:	0005                	c.nop	1
    3920:	0100                	addi	s0,sp,128
    3922:	5b00                	lw	s0,48(a4)
    3924:	0594                	addi	a3,sp,704
    3926:	0000                	unimp
    3928:	0598                	addi	a4,sp,704
    392a:	0000                	unimp
{
    392c:	0001                	nop
    392e:	0005a85b          	0x5a85b
    3932:	b800                	fsd	fs0,48(s0)
    3934:	0005                	c.nop	1
    3936:	0100                	addi	s0,sp,128
    3938:	5b00                	lw	s0,48(a4)
    393a:	05c0                	addi	s0,sp,708
    393c:	0000                	unimp
    393e:	05f8                	addi	a4,sp,716
    3940:	0000                	unimp
    3942:	0001                	nop
    3944:	0006685b          	0x6685b
    3948:	6c00                	flw	fs0,24(s0)
    394a:	0006                	c.slli	zero,0x1
    394c:	0100                	addi	s0,sp,128
    394e:	5b00                	lw	s0,48(a4)
    3950:	06e4                	addi	s1,sp,844
    3952:	0000                	unimp
    3954:	06ec                	addi	a1,sp,844
    3956:	0000                	unimp
    if (ndigits < 0)
    3958:	0001                	nop
    395a:	0006f45b          	0x6f45b
    395e:	fc00                	fsw	fs0,56(s0)
        ndigits = 0;
    3960:	0006                	c.slli	zero,0x1
    3962:	0100                	addi	s0,sp,128
    if (ndigits >= CVTBUFSIZE - 1)
    3964:	5b00                	lw	s0,48(a4)
    3966:	0700                	addi	s0,sp,896
    3968:	0000                	unimp
    396a:	0704                	addi	s1,sp,896
    396c:	0000                	unimp
    396e:	0001                	nop
        ndigits = CVTBUFSIZE - 2;
    3970:	0007a05b          	0x7a05b
    3974:	b000                	fsd	fs0,32(s0)
    3976:	01000007          	vle8ff.v	v0,(zero),v0.t
    r2    = 0;
    397a:	5b00                	lw	s0,48(a4)
    *sign = 0;
    397c:	07b8                	addi	a4,sp,968
    397e:	0000                	unimp
    3980:	07c0                	addi	s0,sp,964
    3982:	0000                	unimp
    p     = &buf[0];
    3984:	0001                	nop
    3986:	0007d05b          	0x7d05b
    398a:	d400                	sw	s0,40(s0)
    if (arg < 0)
    398c:	01000007          	vle8ff.v	v0,(zero),v0.t
    3990:	5b00                	lw	s0,48(a4)
	...
    399a:	0010                	0x10
    399c:	0000                	unimp
    399e:	0024                	addi	s1,sp,8
    39a0:	0000                	unimp
    39a2:	0001                	nop
    39a4:	245f 0000 3800      	0x38000000245f
        *sign = 1;
    39aa:	0000                	unimp
    39ac:	0900                	addi	s0,sp,144
    39ae:	7b00                	flw	fs0,48(a4)
    39b0:	0c00                	addi	s0,sp,528
    39b2:	ffff                	0xffff
        arg   = -arg;
    39b4:	9f1a000f          	0x9f1a000f
    39b8:	0038                	addi	a4,sp,8
    39ba:	0000                	unimp
    39bc:	00a0                	addi	s0,sp,72
    39be:	0000                	unimp
    39c0:	0001                	nop
    39c2:	b05f 0000 b800      	0xb8000000b05f
    39c8:	0000                	unimp
    39ca:	0100                	addi	s0,sp,128
    arg = modf(arg, &fi);
    39cc:	5f00                	lw	s0,56(a4)
    39ce:	00c0                	addi	s0,sp,68
    39d0:	0000                	unimp
    39d2:	0118                	addi	a4,sp,128
    39d4:	0000                	unimp
    39d6:	0001                	nop
    39d8:	5c5f 0001 c000      	0xc00000015c5f
    39de:	0001                	nop
    39e0:	0100                	addi	s0,sp,128
    39e2:	5f00                	lw	s0,56(a4)
    39e4:	01cc                	addi	a1,sp,196
    39e6:	0000                	unimp
    p1  = &buf[CVTBUFSIZE];
    39e8:	01d8                	addi	a4,sp,196
    39ea:	0000                	unimp
    39ec:	0001                	nop
    39ee:	e05f 0001 3000      	0x30000001e05f
    if (fi != 0)
    39f4:	0002                	c.slli64	zero
    39f6:	0100                	addi	s0,sp,128
    39f8:	5f00                	lw	s0,56(a4)
    39fa:	0240                	addi	s0,sp,260
    39fc:	0000                	unimp
    39fe:	026c                	addi	a1,sp,268
    3a00:	0000                	unimp
    3a02:	0001                	nop
    3a04:	745f 0002 a800      	0xa8000002745f
    3a0a:	0002                	c.slli64	zero
    3a0c:	0100                	addi	s0,sp,128
    3a0e:	5f00                	lw	s0,56(a4)
    3a10:	02f8                	addi	a4,sp,332
    3a12:	0000                	unimp
    3a14:	030c                	addi	a1,sp,384
    3a16:	0000                	unimp
        p1 = &buf[CVTBUFSIZE];
    3a18:	0001                	nop
    3a1a:	185f 0003 2c00      	0x2c000003185f
    3a20:	01000003          	lb	zero,16(zero) # 10 <_start>
        while (fi != 0)
    3a24:	5f00                	lw	s0,56(a4)
    3a26:	0348                	addi	a0,sp,388
            fj    = modf(fi / 10, &fi);
    3a28:	0000                	unimp
    3a2a:	036c                	addi	a1,sp,396
    3a2c:	0000                	unimp
    3a2e:	0001                	nop
    3a30:	7c5f 0003 c800      	0xc80000037c5f
    3a36:	01000003          	lb	zero,16(zero) # 10 <_start>
    3a3a:	5f00                	lw	s0,56(a4)
    3a3c:	03e8                	addi	a0,sp,460
    3a3e:	0000                	unimp
    3a40:	0464                	addi	s1,sp,524
    3a42:	0000                	unimp
    3a44:	0001                	nop
    3a46:	745f 0004 8000      	0x80000004745f
    3a4c:	0004                	0x4
    3a4e:	0100                	addi	s0,sp,128
    3a50:	5f00                	lw	s0,56(a4)
    3a52:	048c                	addi	a1,sp,576
    3a54:	0000                	unimp
    3a56:	04dc                	addi	a5,sp,580
    3a58:	0000                	unimp
    3a5a:	0001                	nop
    3a5c:	f05f 0004 1c00      	0x1c000004f05f
    3a62:	0005                	c.nop	1
    3a64:	0100                	addi	s0,sp,128
    3a66:	5f00                	lw	s0,56(a4)
    3a68:	0524                	addi	s1,sp,648
    3a6a:	0000                	unimp
    3a6c:	0554                	addi	a3,sp,644
    3a6e:	0000                	unimp
    3a70:	0001                	nop
    3a72:	605f 0005 8800      	0x88000005605f
            *--p1 = (int)((fj + .03) * 10) + '0';
    3a78:	0005                	c.nop	1
    3a7a:	0100                	addi	s0,sp,128
    3a7c:	5f00                	lw	s0,56(a4)
    3a7e:	0594                	addi	a3,sp,704
    3a80:	0000                	unimp
    3a82:	05a0                	addi	s0,sp,712
    3a84:	0000                	unimp
    3a86:	0001                	nop
    3a88:	a85f 0005 b400      	0xb4000005a85f
    3a8e:	0005                	c.nop	1
    3a90:	0100                	addi	s0,sp,128
    3a92:	5f00                	lw	s0,56(a4)
    3a94:	05c0                	addi	s0,sp,708
    3a96:	0000                	unimp
    3a98:	05ec                	addi	a1,sp,716
    3a9a:	0000                	unimp
    3a9c:	0001                	nop
    3a9e:	685f 0006 7400      	0x74000006685f
    3aa4:	0006                	c.slli	zero,0x1
    3aa6:	0100                	addi	s0,sp,128
    3aa8:	5f00                	lw	s0,56(a4)
    3aaa:	06e4                	addi	s1,sp,844
    3aac:	0000                	unimp
    3aae:	06e8                	addi	a0,sp,844
    3ab0:	0000                	unimp
    3ab2:	0001                	nop
    3ab4:	f45f 0006 f800      	0xf8000006f45f
    3aba:	0006                	c.slli	zero,0x1
    3abc:	0100                	addi	s0,sp,128
    3abe:	5f00                	lw	s0,56(a4)
    3ac0:	0700                	addi	s0,sp,896
    3ac2:	0000                	unimp
    3ac4:	0704                	addi	s1,sp,896
    3ac6:	0000                	unimp
    3ac8:	0001                	nop
    3aca:	a05f 0007 ac00      	0xac000007a05f
    3ad0:	01000007          	vle8ff.v	v0,(zero),v0.t
    3ad4:	5f00                	lw	s0,56(a4)
    3ad6:	07b8                	addi	a4,sp,968
    3ad8:	0000                	unimp
    3ada:	07bc                	addi	a5,sp,968
    3adc:	0000                	unimp
    3ade:	0001                	nop
    3ae0:	c85f 0007 cc00      	0xcc000007c85f
    3ae6:	01000007          	vle8ff.v	v0,(zero),v0.t
    3aea:	5f00                	lw	s0,56(a4)
            r2++;
    3aec:	07d0                	addi	a2,sp,964
    3aee:	0000                	unimp
    3af0:	07dc                	addi	a5,sp,964
    3af2:	0000                	unimp
    3af4:	0001                	nop
    3af6:	005f 0000 0000      	0x5f
        while (fi != 0)
    3afc:	0000                	unimp
    3afe:	5c00                	lw	s0,56(s0)
    3b00:	0000                	unimp
    3b02:	7400                	flw	fs0,40(s0)
    3b04:	0000                	unimp
    3b06:	0600                	addi	s0,sp,768
    3b08:	7d00                	flw	fs0,56(a0)
    3b0a:	0800                	addi	s0,sp,16
    3b0c:	1aff                	0x1aff
    3b0e:	749f 0000 8800      	0x88000000749f
    3b14:	0000                	unimp
    3b16:	0100                	addi	s0,sp,128
    3b18:	5d00                	lw	s0,56(a0)
    3b1a:	00c0                	addi	s0,sp,68
        while (p1 < &buf[CVTBUFSIZE])
    3b1c:	0000                	unimp
    3b1e:	00c4                	addi	s1,sp,68
            *p++ = *p1++;
    3b20:	0000                	unimp
    3b22:	0001                	nop
    3b24:	9c5d                	0x9c5d
    3b26:	0001                	nop
    3b28:	ac00                	fsd	fs0,24(s0)
    3b2a:	0001                	nop
    3b2c:	0100                	addi	s0,sp,128
    3b2e:	5d00                	lw	s0,56(a0)
    3b30:	01e0                	addi	s0,sp,204
    3b32:	0000                	unimp
    3b34:	01e4                	addi	s1,sp,204
    3b36:	0000                	unimp
    3b38:	0001                	nop
    3b3a:	805d                	srli	s0,s0,0x17
    3b3c:	0002                	c.slli64	zero
    3b3e:	8400                	0x8400
        while (p1 < &buf[CVTBUFSIZE])
    3b40:	0002                	c.slli64	zero
    3b42:	0100                	addi	s0,sp,128
    3b44:	5d00                	lw	s0,56(a0)
    3b46:	0348                	addi	a0,sp,388
    3b48:	0000                	unimp
    3b4a:	0354                	addi	a3,sp,388
    3b4c:	0000                	unimp
    3b4e:	0001                	nop
    3b50:	e85d                	bnez	s0,3c06 <cvt+0x2da>
    3b52:	ec000003          	lb	zero,-320(zero) # fffffec0 <RAM_SIZE+0xfffefec0>
    else if (arg > 0)
    3b56:	01000003          	lb	zero,16(zero) # 10 <_start>
    3b5a:	5d00                	lw	s0,56(a0)
    3b5c:	0440                	addi	s0,sp,516
    3b5e:	0000                	unimp
    3b60:	05f8                	addi	a4,sp,716
    3b62:	0000                	unimp
    3b64:	0001                	nop
    3b66:	685d                	lui	a6,0x17
    3b68:	0006                	c.slli	zero,0x1
    3b6a:	7c00                	flw	fs0,56(s0)
    3b6c:	0006                	c.slli	zero,0x1
    3b6e:	0100                	addi	s0,sp,128
        while ((fj = arg * 10) < 1)
    3b70:	5d00                	lw	s0,56(a0)
    3b72:	07a8                	addi	a0,sp,968
            arg = fj;
    3b74:	0000                	unimp
    3b76:	07e0                	addi	s0,sp,972
    3b78:	0000                	unimp
    3b7a:	0001                	nop
    3b7c:	005d                	c.nop	23
    3b7e:	0000                	unimp
    3b80:	0000                	unimp
    3b82:	0000                	unimp
            r2--;
    3b84:	5400                	lw	s0,40(s0)
    3b86:	0000                	unimp
    3b88:	d000                	sw	s0,32(s0)
    3b8a:	0002                	c.slli64	zero
    3b8c:	0100                	addi	s0,sp,128
    3b8e:	5600                	lw	s0,40(a2)
        while ((fj = arg * 10) < 1)
    3b90:	02f8                	addi	a4,sp,332
    3b92:	0000                	unimp
    3b94:	00000603          	lb	a2,0(zero) # 0 <RAM_START_ADDRESS>
    3b98:	0001                	nop
    3b9a:	6856                	flw	fa6,84(sp)
    3b9c:	0006                	c.slli	zero,0x1
    3b9e:	8300                	0x8300
    3ba0:	0006                	c.slli	zero,0x1
    3ba2:	0100                	addi	s0,sp,128
    3ba4:	5600                	lw	s0,40(a2)
    3ba6:	06e4                	addi	s1,sp,844
    3ba8:	0000                	unimp
    3baa:	070c                	addi	a1,sp,896
    3bac:	0000                	unimp
    3bae:	0001                	nop
    3bb0:	a056                	fsd	fs5,0(sp)
    3bb2:	e0000007          	vlseg8e8.v	v0,(zero),v0.t
    3bb6:	01000007          	vle8ff.v	v0,(zero),v0.t
    3bba:	5600                	lw	s0,40(a2)
	...
    3bc4:	0040                	addi	s0,sp,4
    3bc6:	0000                	unimp
    3bc8:	0098                	addi	a4,sp,64
    3bca:	0000                	unimp
    3bcc:	0001                	nop
    3bce:	b05c                	fsd	fa5,160(s0)
    3bd0:	0000                	unimp
    3bd2:	b800                	fsd	fs0,48(s0)
    3bd4:	0000                	unimp
    3bd6:	0100                	addi	s0,sp,128
    3bd8:	5c00                	lw	s0,56(s0)
    3bda:	00c0                	addi	s0,sp,68
    3bdc:	0000                	unimp
    3bde:	00f8                	addi	a4,sp,76
    p1 = &buf[ndigits];
    3be0:	0000                	unimp
    3be2:	0001                	nop
    3be4:	045c                	addi	a5,sp,516
    3be6:	0001                	nop
    3be8:	0c00                	addi	s0,sp,528
    3bea:	0001                	nop
    3bec:	0100                	addi	s0,sp,128
    3bee:	5c00                	lw	s0,56(s0)
    if (eflag == 0)
    3bf0:	015c                	addi	a5,sp,132
    3bf2:	0000                	unimp
    3bf4:	0180                	addi	s0,sp,192
    3bf6:	0000                	unimp
        p1 += r2;
    3bf8:	0001                	nop
    3bfa:	905c                	0x905c
    3bfc:	0001                	nop
    3bfe:	9400                	0x9400
    3c00:	0001                	nop
    3c02:	0100                	addi	s0,sp,128
    3c04:	5c00                	lw	s0,56(s0)
    3c06:	019c                	addi	a5,sp,192
    *decpt = r2;
    3c08:	0000                	unimp
    3c0a:	01c4                	addi	s1,sp,196
    3c0c:	0000                	unimp
    3c0e:	0001                	nop
    3c10:	cc5c                	sw	a5,28(s0)
    3c12:	0001                	nop
    if (p1 < &buf[0])
    3c14:	3400                	fld	fs0,40(s0)
    3c16:	0002                	c.slli64	zero
    3c18:	0100                	addi	s0,sp,128
    3c1a:	5c00                	lw	s0,56(s0)
    3c1c:	0240                	addi	s0,sp,260
    3c1e:	0000                	unimp
        buf[0] = '\0';
    3c20:	02a4                	addi	s1,sp,328
    3c22:	0000                	unimp
    3c24:	0001                	nop
    3c26:	f85c                	fsw	fa5,52(s0)
        return buf;
    3c28:	0002                	c.slli64	zero
    3c2a:	0000                	unimp
    3c2c:	01000003          	lb	zero,16(zero) # 10 <_start>
        arg *= 10;
    3c30:	5c00                	lw	s0,56(s0)
    3c32:	0318                	addi	a4,sp,384
    3c34:	0000                	unimp
    3c36:	0324                	addi	s1,sp,392
    3c38:	0000                	unimp
    3c3a:	0001                	nop
    3c3c:	485c                	lw	a5,20(s0)
    3c3e:	64000003          	lb	zero,1600(zero) # 640 <core_bench_list+0x1f4>
    3c42:	01000003          	lb	zero,16(zero) # 10 <_start>
    3c46:	5c00                	lw	s0,56(s0)
    3c48:	037c                	addi	a5,sp,396
    3c4a:	0000                	unimp
    3c4c:	03a8                	addi	a0,sp,456
    3c4e:	0000                	unimp
    3c50:	0001                	nop
    3c52:	b45c                	fsd	fa5,168(s0)
    3c54:	bc000003          	lb	zero,-1088(zero) # fffffbc0 <RAM_SIZE+0xfffefbc0>
        arg  = modf(arg, &fj);
    3c58:	01000003          	lb	zero,16(zero) # 10 <_start>
    3c5c:	5c00                	lw	s0,56(s0)
    3c5e:	03e8                	addi	a0,sp,460
    3c60:	0000                	unimp
    3c62:	0424                	addi	s1,sp,520
    3c64:	0000                	unimp
    3c66:	0001                	nop
    3c68:	345c                	fld	fa5,168(s0)
    3c6a:	0004                	0x4
    3c6c:	3800                	fld	fs0,48(s0)
    3c6e:	0004                	0x4
    3c70:	0100                	addi	s0,sp,128
    3c72:	5c00                	lw	s0,56(s0)
        *p++ = (int)fj + '0';
    3c74:	0440                	addi	s0,sp,516
    3c76:	0000                	unimp
    3c78:	0468                	addi	a0,sp,524
    3c7a:	0000                	unimp
    3c7c:	0001                	nop
    3c7e:	745c                	flw	fa5,44(s0)
    3c80:	0004                	0x4
    3c82:	e000                	fsw	fs0,0(s0)
    3c84:	0004                	0x4
    3c86:	0100                	addi	s0,sp,128
    3c88:	5c00                	lw	s0,56(s0)
    3c8a:	04f0                	addi	a2,sp,588
    3c8c:	0000                	unimp
    3c8e:	0558                	addi	a4,sp,644
    3c90:	0000                	unimp
    3c92:	0001                	nop
    3c94:	605c                	flw	fa5,4(s0)
    3c96:	0005                	c.nop	1
    3c98:	8c00                	0x8c00
    3c9a:	0005                	c.nop	1
    3c9c:	0100                	addi	s0,sp,128
    3c9e:	5c00                	lw	s0,56(s0)
    3ca0:	0594                	addi	a3,sp,704
    3ca2:	0000                	unimp
    3ca4:	05f0                	addi	a2,sp,716
    3ca6:	0000                	unimp
    while (p <= p1 && p < &buf[CVTBUFSIZE])
    3ca8:	0001                	nop
    3caa:	685c                	flw	fa5,20(s0)
    3cac:	0006                	c.slli	zero,0x1
    3cae:	7c00                	flw	fs0,56(s0)
    3cb0:	0006                	c.slli	zero,0x1
    3cb2:	0100                	addi	s0,sp,128
    3cb4:	5c00                	lw	s0,56(s0)
    3cb6:	06e4                	addi	s1,sp,844
    3cb8:	0000                	unimp
    3cba:	0704                	addi	s1,sp,896
    3cbc:	0000                	unimp
    3cbe:	0001                	nop
    3cc0:	a05c                	fsd	fa5,128(s0)
    3cc2:	e0000007          	vlseg8e8.v	v0,(zero),v0.t
    if (p1 >= &buf[CVTBUFSIZE])
    3cc6:	01000007          	vle8ff.v	v0,(zero),v0.t
    3cca:	5c00                	lw	s0,56(s0)
	...
        buf[CVTBUFSIZE - 1] = '\0';
    3cd4:	0040                	addi	s0,sp,4
    3cd6:	0000                	unimp
    3cd8:	0044                	addi	s1,sp,4
    3cda:	0000                	unimp
    3cdc:	0001                	nop
    3cde:	4460                	lw	s0,76(s0)
        return buf;
    3ce0:	0000                	unimp
    3ce2:	5c00                	lw	s0,56(s0)
    3ce4:	0000                	unimp
    3ce6:	0900                	addi	s0,sp,144
    p = p1;
    3ce8:	7d00                	flw	fs0,56(a0)
    3cea:	0c00                	addi	s0,sp,528
    3cec:	ffff                	0xffff
    3cee:	9f1a000f          	0x9f1a000f
    *p1 += 5;
    3cf2:	0060                	addi	s0,sp,12
    3cf4:	0000                	unimp
    3cf6:	0114                	addi	a3,sp,128
    3cf8:	0000                	unimp
    3cfa:	0001                	nop
    3cfc:	5c5e                	lw	s8,244(sp)
    3cfe:	0001                	nop
    3d00:	8800                	0x8800
    3d02:	0001                	nop
    3d04:	0100                	addi	s0,sp,128
    3d06:	5e00                	lw	s0,56(a2)
    while (*p1 > '9')
    3d08:	0190                	addi	a2,sp,192
    3d0a:	0000                	unimp
        *p1 = '0';
    3d0c:	02b4                	addi	a3,sp,328
    3d0e:	0000                	unimp
    3d10:	0001                	nop
    3d12:	f85e                	fsw	fs7,48(sp)
    3d14:	0002                	c.slli64	zero
    3d16:	c400                	sw	s0,8(s0)
        if (p1 > buf)
    3d18:	01000003          	lb	zero,16(zero) # 10 <_start>
    3d1c:	5e00                	lw	s0,56(a2)
    3d1e:	03e8                	addi	a0,sp,460
    3d20:	0000                	unimp
    3d22:	042c                	addi	a1,sp,520
            ++*--p1;
    3d24:	0000                	unimp
    3d26:	0001                	nop
    3d28:	345e                	fld	fs0,496(sp)
    3d2a:	0004                	0x4
    3d2c:	f800                	fsw	fs0,48(s0)
    3d2e:	0005                	c.nop	1
    3d30:	0100                	addi	s0,sp,128
    3d32:	5e00                	lw	s0,56(a2)
    3d34:	0668                	addi	a0,sp,780
    3d36:	0000                	unimp
    3d38:	067c                	addi	a5,sp,780
    3d3a:	0000                	unimp
    3d3c:	0001                	nop
    3d3e:	e45e                	fsw	fs7,8(sp)
    3d40:	0006                	c.slli	zero,0x1
    3d42:	0400                	addi	s0,sp,512
    3d44:	01000007          	vle8ff.v	v0,(zero),v0.t
    3d48:	5e00                	lw	s0,56(a2)
    3d4a:	07a0                	addi	s0,sp,968
            *p1 = '1';
    3d4c:	0000                	unimp
    3d4e:	07e0                	addi	s0,sp,972
    3d50:	0000                	unimp
    3d52:	0001                	nop
    3d54:	005e                	c.slli	zero,0x17
    3d56:	0000                	unimp
            (*decpt)++;
    3d58:	0000                	unimp
    3d5a:	0000                	unimp
    3d5c:	7c00                	flw	fs0,56(s0)
    3d5e:	0000                	unimp
    3d60:	b800                	fsd	fs0,48(s0)
    3d62:	0000                	unimp
    3d64:	0100                	addi	s0,sp,128
    3d66:	5900                	lw	s0,48(a0)
    3d68:	00c0                	addi	s0,sp,68
    3d6a:	0000                	unimp
            if (eflag == 0)
    3d6c:	0304                	addi	s1,sp,384
    3d6e:	0000                	unimp
    3d70:	0001                	nop
    3d72:	1859                	addi	a6,a6,-10
                if (p > buf)
    3d74:	48000003          	lb	zero,1152(zero) # 480 <core_bench_list+0x34>
    3d78:	01000003          	lb	zero,16(zero) # 10 <_start>
    3d7c:	5900                	lw	s0,48(a0)
    3d7e:	034c                	addi	a1,sp,388
                    *p = '0';
    3d80:	0000                	unimp
    3d82:	0440                	addi	s0,sp,516
    3d84:	0000                	unimp
    3d86:	0001                	nop
    3d88:	4859                	li	a6,22
    3d8a:	0004                	0x4
                p++;
    3d8c:	3000                	fld	fs0,32(s0)
    3d8e:	0005                	c.nop	1
    3d90:	0100                	addi	s0,sp,128
    3d92:	5d00                	lw	s0,56(a0)
    3d94:	0574                	addi	a3,sp,652
    3d96:	0000                	unimp
    while (*p1 > '9')
    3d98:	0590                	addi	a2,sp,704
    3d9a:	0000                	unimp
    3d9c:	0001                	nop
    3d9e:	9059                	srli	s0,s0,0x36
    3da0:	0005                	c.nop	1
    3da2:	9400                	0x9400
    3da4:	0005                	c.nop	1
    3da6:	0100                	addi	s0,sp,128
    *p = '\0';
    3da8:	5d00                	lw	s0,56(a0)
    3daa:	0594                	addi	a3,sp,704
    3dac:	0000                	unimp
    3dae:	05a8                	addi	a0,sp,712
    return buf;
    3db0:	0000                	unimp
    3db2:	0001                	nop
}
    3db4:	d859                	beqz	s0,3d4a <cvt+0x41e>
    3db6:	0005                	c.nop	1
    3db8:	f400                	fsw	fs0,40(s0)
    3dba:	0005                	c.nop	1
    3dbc:	0100                	addi	s0,sp,128
    3dbe:	5900                	lw	s0,48(a0)
    3dc0:	05f4                	addi	a3,sp,716
    3dc2:	0000                	unimp
    3dc4:	05f8                	addi	a4,sp,716
    3dc6:	0000                	unimp
{
    3dc8:	0001                	nop
    3dca:	f85d                	bnez	s0,3d80 <cvt+0x454>
    3dcc:	0005                	c.nop	1
    3dce:	0c00                	addi	s0,sp,528
    3dd0:	01000007          	vle8ff.v	v0,(zero),v0.t
    3dd4:	5900                	lw	s0,48(a0)
    3dd6:	0760                	addi	s0,sp,908
    3dd8:	0000                	unimp
    3dda:	0780                	addi	s0,sp,960
    3ddc:	0000                	unimp
    3dde:	0001                	nop
    3de0:	a059                	j	3e66 <ecvtbuf+0x42>
    3de2:	a8000007          	vlsseg6e8.v	v0,(zero),zero,v0.t
    3de6:	01000007          	vle8ff.v	v0,(zero),v0.t
    3dea:	5900                	lw	s0,48(a0)
    return cvt(arg, ndigits, decpt, sign, CVTBUF, 1);
    3dec:	07a8                	addi	a0,sp,968
    3dee:	0000                	unimp
    3df0:	07b8                	addi	a4,sp,968
    3df2:	0000                	unimp
    3df4:	0001                	nop
    3df6:	c85d                	beqz	s0,3eac <fcvt+0x28>
    3df8:	d0000007          	vlseg7e128.v	v0,(zero),v0.t
    3dfc:	01000007          	vle8ff.v	v0,(zero),v0.t
    3e00:	5900                	lw	s0,48(a0)
	...
    3e0a:	0080                	addi	s0,sp,64
    3e0c:	0000                	unimp
    3e0e:	00a8                	addi	a0,sp,72
}
    3e10:	0000                	unimp
    3e12:	0001                	nop
    3e14:	b058                	fsd	fa4,160(s0)
    3e16:	0000                	unimp
    3e18:	b800                	fsd	fs0,48(s0)
    3e1a:	0000                	unimp
    3e1c:	0100                	addi	s0,sp,128
    3e1e:	5800                	lw	s0,48(s0)
    3e20:	00c0                	addi	s0,sp,68
    3e22:	0000                	unimp
{
    3e24:	019c                	addi	a5,sp,192
    3e26:	0000                	unimp
    3e28:	0001                	nop
    3e2a:	a458                	fsd	fa4,136(s0)
    3e2c:	0001                	nop
    3e2e:	d400                	sw	s0,40(s0)
    3e30:	0001                	nop
    3e32:	0100                	addi	s0,sp,128
    3e34:	5600                	lw	s0,40(a2)
    3e36:	01e0                	addi	s0,sp,204
    3e38:	0000                	unimp
    3e3a:	0280                	addi	s0,sp,320
    3e3c:	0000                	unimp
    3e3e:	0001                	nop
    3e40:	9456                	add	s0,s0,s5
    3e42:	0002                	c.slli64	zero
    3e44:	cc00                	sw	s0,24(s0)
    3e46:	0002                	c.slli64	zero
    3e48:	0200                	addi	s0,sp,256
    3e4a:	3000                	fld	fs0,32(s0)
    return cvt(arg, ndigits, decpt, sign, buf, 1);
    3e4c:	cc9f 0002 d000      	0xd0000002cc9f
    3e52:	0002                	c.slli64	zero
    3e54:	0200                	addi	s0,sp,256
    3e56:	3100                	fld	fs0,32(a0)
    3e58:	d09f 0002 f800      	0xf8000002d09f
    3e5e:	0002                	c.slli64	zero
    3e60:	0100                	addi	s0,sp,128
    3e62:	5800                	lw	s0,48(s0)
    3e64:	02f8                	addi	a4,sp,332
    3e66:	0000                	unimp
    3e68:	0318                	addi	a4,sp,384
    3e6a:	0000                	unimp
    3e6c:	0004                	0x4
    3e6e:	ff0a                	fsw	ft2,188(sp)
}
    3e70:	03189f07          	flh	ft10,49(a7)
    3e74:	0000                	unimp
    3e76:	0348                	addi	a0,sp,388
    3e78:	0000                	unimp
    3e7a:	0001                	nop
    3e7c:	4c5d                	li	s8,23
    3e7e:	74000003          	lb	zero,1856(zero) # 740 <core_bench_list+0x2f4>
    3e82:	01000003          	lb	zero,16(zero) # 10 <_start>
{
    3e86:	5800                	lw	s0,48(s0)
    3e88:	037c                	addi	a5,sp,396
    3e8a:	0000                	unimp
    3e8c:	0440                	addi	s0,sp,516
    3e8e:	0000                	unimp
    3e90:	0001                	nop
    3e92:	4858                	lw	a4,20(s0)
    3e94:	0004                	0x4
    3e96:	3000                	fld	fs0,32(s0)
    3e98:	0005                	c.nop	1
    3e9a:	0100                	addi	s0,sp,128
    3e9c:	5600                	lw	s0,40(a2)
    3e9e:	0548                	addi	a0,sp,644
    3ea0:	0000                	unimp
    3ea2:	0558                	addi	a4,sp,644
    3ea4:	0000                	unimp
    3ea6:	0002                	c.slli64	zero
    return cvt(arg, ndigits, decpt, sign, CVTBUF, 0);
    3ea8:	9f30                	0x9f30
    3eaa:	0560                	addi	s0,sp,652
    3eac:	0000                	unimp
    3eae:	05a8                	addi	a0,sp,712
    3eb0:	0000                	unimp
    3eb2:	0002                	c.slli64	zero
    3eb4:	9f30                	0x9f30
    3eb6:	05a8                	addi	a0,sp,712
    3eb8:	0000                	unimp
    3eba:	05c8                	addi	a0,sp,708
    3ebc:	0000                	unimp
    3ebe:	0004                	0x4
    3ec0:	ff0a                	fsw	ft2,188(sp)
    3ec2:	05c89f07          	flh	ft10,92(a7)
    3ec6:	0000                	unimp
    3ec8:	0664                	addi	s1,sp,780
    3eca:	0000                	unimp
}
    3ecc:	0001                	nop
    3ece:	6858                	flw	fa4,20(s0)
    3ed0:	0006                	c.slli	zero,0x1
    3ed2:	7800                	flw	fs0,48(s0)
    3ed4:	0006                	c.slli	zero,0x1
    3ed6:	0100                	addi	s0,sp,128
    3ed8:	5800                	lw	s0,48(s0)
    3eda:	067c                	addi	a5,sp,780
    3edc:	0000                	unimp
    3ede:	06e4                	addi	s1,sp,844
{
    3ee0:	0000                	unimp
    3ee2:	0001                	nop
    3ee4:	e458                	fsw	fa4,12(s0)
    3ee6:	0006                	c.slli	zero,0x1
    3ee8:	f400                	fsw	fs0,40(s0)
    3eea:	0006                	c.slli	zero,0x1
    3eec:	0100                	addi	s0,sp,128
    3eee:	5600                	lw	s0,40(a2)
    3ef0:	06f4                	addi	a3,sp,844
    3ef2:	0000                	unimp
    3ef4:	0700                	addi	s0,sp,896
    3ef6:	0000                	unimp
    3ef8:	0002                	c.slli64	zero
    3efa:	9f30                	0x9f30
    3efc:	0700                	addi	s0,sp,896
    3efe:	0000                	unimp
    3f00:	0704                	addi	s1,sp,896
    3f02:	0000                	unimp
    3f04:	0001                	nop
    3f06:	1c5d                	addi	s8,s8,-9
    return cvt(arg, ndigits, decpt, sign, buf, 0);
    3f08:	48000007          	vlsseg3e8.v	v0,(zero),zero,v0.t
    3f0c:	01000007          	vle8ff.v	v0,(zero),v0.t
    3f10:	5800                	lw	s0,48(s0)
    3f12:	0748                	addi	a0,sp,900
    3f14:	0000                	unimp
    3f16:	0760                	addi	s0,sp,908
    3f18:	0000                	unimp
    3f1a:	0004                	0x4
    3f1c:	ff0a                	fsw	ft2,188(sp)
    3f1e:	07a09f07          	flh	ft10,122(ra)
    3f22:	0000                	unimp
    3f24:	07a4                	addi	s1,sp,968
    3f26:	0000                	unimp
    3f28:	0001                	nop
    3f2a:	a858                	fsd	fa4,144(s0)
}
    3f2c:	b8000007          	vlsseg6e128.v	v0,(zero),zero,v0.t
    3f30:	01000007          	vle8ff.v	v0,(zero),v0.t
    3f34:	5600                	lw	s0,40(a2)
    3f36:	07b8                	addi	a4,sp,968
    3f38:	0000                	unimp
    3f3a:	07c0                	addi	s0,sp,964
    3f3c:	0000                	unimp
    3f3e:	0002                	c.slli64	zero
{
    3f40:	9f30                	0x9f30
    3f42:	07c8                	addi	a0,sp,964
    3f44:	0000                	unimp
    3f46:	07d0                	addi	a2,sp,964
    3f48:	0000                	unimp
    3f4a:	0002                	c.slli64	zero
    3f4c:	9f30                	0x9f30
    3f4e:	07d0                	addi	a2,sp,964
    3f50:	0000                	unimp
    3f52:	07e0                	addi	s0,sp,972
    for (sc = s; *sc != '\0' && count--; ++sc)
    3f54:	0000                	unimp
    3f56:	0004                	0x4
    3f58:	ff0a                	fsw	ft2,188(sp)
    3f5a:	07e09f07          	flh	ft10,126(ra)
    3f5e:	0000                	unimp
    3f60:	07ec                	addi	a1,sp,972
    3f62:	0000                	unimp
    3f64:	0001                	nop
    3f66:	0058                	addi	a4,sp,4
    3f68:	0000                	unimp
    3f6a:	0000                	unimp
    3f6c:	0000                	unimp
    3f6e:	a400                	fsd	fs0,8(s0)
    3f70:	0000                	unimp
    3f72:	a800                	fsd	fs0,16(s0)
    3f74:	0000                	unimp
    3f76:	0100                	addi	s0,sp,128
    3f78:	5c00                	lw	s0,56(s0)
    3f7a:	00a8                	addi	a0,sp,72
    3f7c:	0000                	unimp
    3f7e:	00b0                	addi	a2,sp,72
    3f80:	0000                	unimp
    3f82:	0001                	nop
    3f84:	0001185b          	0x1185b
    return sc - s;
    3f88:	1c00                	addi	s0,sp,560
    3f8a:	0001                	nop
    3f8c:	0100                	addi	s0,sp,128
    3f8e:	5c00                	lw	s0,56(s0)
    3f90:	011c                	addi	a5,sp,128
    3f92:	0000                	unimp
}
    3f94:	012c                	addi	a1,sp,136
    3f96:	0000                	unimp
    3f98:	0001                	nop
    3f9a:	00012c5b          	0x12c5b
    3f9e:	4000                	lw	s0,0(s0)
    3fa0:	0001                	nop
    3fa2:	1500                	addi	s0,sp,672
{
    3fa4:	7b00                	flw	fs0,48(a4)
    3fa6:	3100                	fld	fs0,32(a0)
    3fa8:	7b1a                	flw	fs6,164(sp)
    3faa:	3100                	fld	fs0,32(a0)
    3fac:	2125                	jal	43d4 <eaddr>
    3fae:	007f                	0x7f
    3fb0:	ff11                	bnez	a4,3ecc <fcvt+0x48>
    3fb2:	ffff                	0xffff
    int i = 0;
    3fb4:	244f1a7b          	0x244f1a7b
    while (is_digit(**s))
    3fb8:	9f21                	0x9f21
    3fba:	0238                	addi	a4,sp,264
        i = i * 10 + *((*s)++) - '0';
    3fbc:	0000                	unimp
    3fbe:	0240                	addi	s0,sp,260
    3fc0:	0000                	unimp
    3fc2:	0001                	nop
    3fc4:	0002b05b          	0x2b05b
    3fc8:	d000                	sw	s0,32(s0)
    3fca:	0002                	c.slli64	zero
    3fcc:	0100                	addi	s0,sp,128
    3fce:	5c00                	lw	s0,56(s0)
    3fd0:	02d0                	addi	a2,sp,324
    3fd2:	0000                	unimp
    3fd4:	02f0                	addi	a2,sp,332
    3fd6:	0000                	unimp
    3fd8:	0001                	nop
    3fda:	0002f05b          	0x2f05b
    3fde:	f800                	fsw	fs0,48(s0)
    3fe0:	0002                	c.slli64	zero
    3fe2:	0100                	addi	s0,sp,128
    3fe4:	5e00                	lw	s0,56(a2)
    3fe6:	0318                	addi	a4,sp,384
    3fe8:	0000                	unimp
    3fea:	0324                	addi	s1,sp,392
    3fec:	0000                	unimp
    3fee:	0024                	addi	s1,sp,8
    3ff0:	4b40007b          	0x4b40007b
    3ff4:	2224                	fld	fs1,64(a2)
    3ff6:	007c007b          	0x7c007b
    while (is_digit(**s))
    3ffa:	4022                	0x4022
    3ffc:	2b22244b          	fnmsub.d	fs0,ft4,fs2,ft5,rdn
    4000:	ff08                	fsw	fa0,56(a4)
    4002:	7e1a                	flw	ft8,164(sp)
    4004:	2200                	fld	fs0,0(a2)
    4006:	007f                	0x7f
    4008:	4f22                	lw	t5,8(sp)
    400a:	7b24                	flw	fs1,112(a4)
    400c:	7c00                	flw	fs0,56(s0)
    400e:	2200                	fld	fs0,0(a2)
    4010:	2531                	jal	461c <iaddr+0x90>
    4012:	9f21                	0x9f21
    4014:	0324                	addi	s1,sp,392
    4016:	0000                	unimp
    4018:	032c                	addi	a1,sp,392
    401a:	0000                	unimp
    401c:	001e                	c.slli	zero,0x7
    401e:	4b40007b          	0x4b40007b
    return i;
    4022:	2224                	fld	fs1,64(a2)
}
    4024:	007c                	addi	a5,sp,12
    4026:	4b40                	lw	s0,20(a4)
    4028:	2224                	fld	fs1,64(a2)
    402a:	1aff082b          	0x1aff082b
    402e:	007e                	c.slli	zero,0x1f
    4030:	7f22                	flw	ft10,40(sp)
    4032:	2200                	fld	fs0,0(a2)
{
    4034:	007c244f          	fnmadd.s	fs0,fs8,ft7,ft0,rdn
    4038:	2531                	jal	4644 <iaddr+0xb8>
    403a:	9f21                	0x9f21
    403c:	032c                	addi	a1,sp,392
    403e:	0000                	unimp
    4040:	0330                	addi	a2,sp,392
    4042:	0000                	unimp
    4044:	007b001b          	0x7b001b
    4048:	4b40                	lw	s0,20(a4)
    404a:	2224                	fld	fs1,64(a2)
    404c:	007c                	addi	a5,sp,12
    404e:	4b40                	lw	s0,20(a4)
    4050:	2224                	fld	fs1,64(a2)
    4052:	1aff082b          	0x1aff082b
    4056:	007f                	0x7f
    4058:	4f22                	lw	t5,8(sp)
    405a:	7c24                	flw	fs1,120(s0)
    char *dig = digits;
    405c:	3100                	fld	fs0,32(a0)
    405e:	2125                	jal	4486 <eaddr+0xb2>
    4060:	709f 0003 7400      	0x74000003709f
    4066:	01000003          	lb	zero,16(zero) # 10 <_start>
    if (type & UPPERCASE)
    406a:	5c00                	lw	s0,56(s0)
    406c:	0374                	addi	a3,sp,396
    406e:	0000                	unimp
    4070:	037c                	addi	a5,sp,396
    4072:	0000                	unimp
        dig = upper_digits;
    4074:	0001                	nop
    4076:	0003c85b          	0x3c85b
    407a:	cc00                	sw	s0,24(s0)
    if (type & LEFT)
    407c:	01000003          	lb	zero,16(zero) # 10 <_start>
    4080:	5c00                	lw	s0,56(s0)
    4082:	03cc                	addi	a1,sp,452
    4084:	0000                	unimp
    4086:	03e8                	addi	a0,sp,460
        type &= ~ZEROPAD;
    4088:	0000                	unimp
    408a:	0001                	nop
    408c:	00046c5b          	0x46c5b
    4090:	7400                	flw	fs0,40(s0)
    4092:	0004                	0x4
    if (base < 2 || base > 36)
    4094:	0100                	addi	s0,sp,128
    4096:	5b00                	lw	s0,48(a4)
    4098:	04e4                	addi	s1,sp,588
    409a:	0000                	unimp
    409c:	04f0                	addi	a2,sp,588
    409e:	0000                	unimp
    40a0:	0001                	nop
    40a2:	00054c5b          	0x54c5b
    40a6:	5800                	lw	s0,48(s0)
    40a8:	0005                	c.nop	1
    40aa:	0100                	addi	s0,sp,128
        return 0;
    40ac:	5c00                	lw	s0,56(s0)
    40ae:	0574                	addi	a3,sp,652
    40b0:	0000                	unimp
    40b2:	0590                	addi	a2,sp,704
    c    = (type & ZEROPAD) ? '0' : ' ';
    40b4:	0000                	unimp
    40b6:	0001                	nop
    40b8:	9060                	0x9060
    40ba:	0005                	c.nop	1
    40bc:	9400                	0x9400
    40be:	0005                	c.nop	1
    40c0:	0100                	addi	s0,sp,128
    40c2:	5b00                	lw	s0,48(a4)
    40c4:	0594                	addi	a3,sp,704
    40c6:	0000                	unimp
    40c8:	05a8                	addi	a0,sp,712
    40ca:	0000                	unimp
    40cc:	0001                	nop
    40ce:	d860                	sw	s0,116(s0)
    sign = 0;
    40d0:	0005                	c.nop	1
    40d2:	e800                	fsw	fs0,16(s0)
    if (type & SIGN)
    40d4:	0005                	c.nop	1
    40d6:	0100                	addi	s0,sp,128
    40d8:	6300                	flw	fs0,0(a4)
    40da:	05e8                	addi	a0,sp,716
    40dc:	0000                	unimp
    40de:	05f0                	addi	a2,sp,716
        if (num < 0)
    40e0:	0000                	unimp
    40e2:	0006                	c.slli	zero,0x1
    40e4:	007c007b          	0x7c007b
            sign = '-';
    40e8:	9f1c                	0x9f1c
    40ea:	05f4                	addi	a3,sp,716
    40ec:	0000                	unimp
    40ee:	0628                	addi	a0,sp,776
            num  = -num;
    40f0:	0000                	unimp
    40f2:	0001                	nop
    40f4:	00062863          	0x62863
    40f8:	5000                	lw	s0,32(s0)
    40fa:	0006                	c.slli	zero,0x1
            size--;
    40fc:	0100                	addi	s0,sp,128
    40fe:	5b00                	lw	s0,48(a4)
    4100:	065c                	addi	a5,sp,772
    4102:	0000                	unimp
    4104:	0668                	addi	a0,sp,780
    4106:	0000                	unimp
    4108:	0001                	nop
    410a:	0006685b          	0x6685b
        else if (type & PLUS)
    410e:	9400                	0x9400
    4110:	0006                	c.slli	zero,0x1
    4112:	0100                	addi	s0,sp,128
    4114:	6300                	flw	fs0,0(a4)
    4116:	0694                	addi	a3,sp,832
            sign = '+';
    4118:	0000                	unimp
    411a:	069c                	addi	a5,sp,832
    411c:	0000                	unimp
    411e:	0002                	c.slli64	zero
            size--;
    4120:	9f30                	0x9f30
    4122:	069c                	addi	a5,sp,832
    4124:	0000                	unimp
    4126:	06e4                	addi	s1,sp,844
    4128:	0000                	unimp
    412a:	0001                	nop
    412c:	0007005b          	0x7005b
        else if (type & SPACE)
    4130:	0400                	addi	s0,sp,512
    4132:	24000007          	vluxseg2ei8.v	v0,(zero),v0,v0.t
    4136:	7b00                	flw	fs0,48(a4)
    4138:	4000                	lw	s0,0(s0)
    413a:	7b22244b          	fnmsub.d	fs0,ft4,fs2,fa5,rdn
            sign = ' ';
    413e:	7c00                	flw	fs0,56(s0)
    4140:	2200                	fld	fs0,0(a2)
    4142:	4b40                	lw	s0,20(a4)
            size--;
    4144:	2224                	fld	fs1,64(a2)
    4146:	1aff082b          	0x1aff082b
    414a:	007e                	c.slli	zero,0x1f
    414c:	7f22                	flw	ft10,40(sp)
    414e:	2200                	fld	fs0,0(a2)
    if (type & HEX_PREP)
    4150:	007b244f          	fnmadd.s	fs0,fs6,ft7,ft0,rdn
    4154:	007c                	addi	a5,sp,12
    4156:	3122                	fld	ft2,40(sp)
    4158:	2125                	jal	4580 <eaddr+0x1ac>
    415a:	0c9f 0007 3c00      	0x3c0000070c9f
        if (base == 16)
    4160:	01000007          	vle8ff.v	v0,(zero),v0.t
    4164:	5b00                	lw	s0,48(a4)
    4166:	073c                	addi	a5,sp,904
            size -= 2;
    4168:	0000                	unimp
    416a:	074c                	addi	a1,sp,900
    416c:	0000                	unimp
    416e:	0001                	nop
    4170:	605a                	flw	ft0,148(sp)
    4172:	a0000007          	vlseg6e8.v	v0,(zero),v0.t
    4176:	01000007          	vle8ff.v	v0,(zero),v0.t
        else if (base == 8)
    417a:	5a00                	lw	s0,48(a2)
    417c:	07b8                	addi	a4,sp,968
    417e:	0000                	unimp
    4180:	07c0                	addi	s0,sp,964
    4182:	0000                	unimp
            size--;
    4184:	0001                	nop
    4186:	c85c                	sw	a5,20(s0)
    4188:	d0000007          	vlseg7e128.v	v0,(zero),v0.t
    418c:	01000007          	vle8ff.v	v0,(zero),v0.t
    i = 0;
    4190:	6000                	flw	fs0,0(s0)
    4192:	07e0                	addi	s0,sp,972
    if (num == 0)
    4194:	0000                	unimp
    4196:	07e8                	addi	a0,sp,972
    4198:	0000                	unimp
    419a:	0001                	nop
        tmp[i++] = '0';
    419c:	0000005b          	0x5b
    41a0:	0000                	unimp
    41a2:	0000                	unimp
    41a4:	a400                	fsd	fs0,8(s0)
    41a6:	0000                	unimp
    41a8:	b000                	fsd	fs0,32(s0)
    41aa:	0000                	unimp
    41ac:	0100                	addi	s0,sp,128
    41ae:	5f00                	lw	s0,56(a4)
    41b0:	0118                	addi	a4,sp,128
    41b2:	0000                	unimp
    41b4:	0128                	addi	a0,sp,136
    41b6:	0000                	unimp
    41b8:	0001                	nop
    41ba:	285f 0001 2c00      	0x2c000001285f
            tmp[i++] = dig[((unsigned long)num) % (unsigned)base];
    41c0:	0001                	nop
    41c2:	0900                	addi	s0,sp,144
    41c4:	7f00                	flw	fs0,56(a4)
    41c6:	1100                	addi	s0,sp,160
    41c8:	ffff                	0xffff
    41ca:	7bff                	0x7bff
    41cc:	9f1a                	add	t5,t5,t1
    41ce:	012c                	addi	a1,sp,136
    41d0:	0000                	unimp
    41d2:	0140                	addi	s0,sp,132
    41d4:	0000                	unimp
    41d6:	007f000b          	0x7f000b
    41da:	ff11                	bnez	a4,40f6 <number+0xc2>
    41dc:	ffff                	0xffff
    41de:	25311a7b          	0x25311a7b
    41e2:	389f 0002 4000      	0x40000002389f
    41e8:	0002                	c.slli64	zero
    41ea:	0100                	addi	s0,sp,128
    41ec:	5f00                	lw	s0,56(a4)
    41ee:	02b0                	addi	a2,sp,328
    41f0:	0000                	unimp
    41f2:	02f8                	addi	a4,sp,332
    41f4:	0000                	unimp
    41f6:	0001                	nop
    41f8:	185f 0003 2400      	0x24000003185f
            num      = ((unsigned long)num) / (unsigned)base;
    41fe:	1c000003          	lb	zero,448(zero) # 1c0 <calc_func+0xfc>
    4202:	7b00                	flw	fs0,48(a4)
    4204:	4000                	lw	s0,0(s0)
    4206:	7b22244b          	fnmsub.d	fs0,ft4,fs2,fa5,rdn
    420a:	7c00                	flw	fs0,56(s0)
    420c:	2200                	fld	fs0,0(a2)
    420e:	4b40                	lw	s0,20(a4)
    4210:	2224                	fld	fs1,64(a2)
    4212:	1aff082b          	0x1aff082b
    4216:	007e                	c.slli	zero,0x1f
        while (num != 0)
    4218:	7f22                	flw	ft10,40(sp)
    421a:	2200                	fld	fs0,0(a2)
    421c:	2531                	jal	4828 <iaddr+0x29c>
    421e:	249f 0003 2c00      	0x2c000003249f
    if (i > precision)
    4224:	19000003          	lb	zero,400(zero) # 190 <calc_func+0xcc>
    4228:	7b00                	flw	fs0,48(a4)
    422a:	4000                	lw	s0,0(s0)
        precision = i;
    422c:	7c22244b          	fnmsub.h	fs0,ft4,ft2,fa5,rdn
    4230:	4000                	lw	s0,0(s0)
    4232:	2b22244b          	fnmsub.d	fs0,ft4,fs2,ft5,rdn
    size -= precision;
    4236:	ff08                	fsw	fa0,56(a4)
    4238:	7e1a                	flw	ft8,164(sp)
    423a:	2200                	fld	fs0,0(a2)
    423c:	007f                	0x7f
    423e:	3122                	fld	ft2,40(sp)
    4240:	9f25                	0x9f25
    4242:	032c                	addi	a1,sp,392
    if (!(type & (ZEROPAD | LEFT)))
    4244:	0000                	unimp
    4246:	0330                	addi	a2,sp,392
    4248:	0000                	unimp
    424a:	0016                	c.slli	zero,0x5
    424c:	4b40007b          	0x4b40007b
        while (size-- > 0)
    4250:	2224                	fld	fs1,64(a2)
    4252:	007c                	addi	a5,sp,12
            *str++ = ' ';
    4254:	4b40                	lw	s0,20(a4)
    4256:	2224                	fld	fs1,64(a2)
    4258:	1aff082b          	0x1aff082b
    425c:	007f                	0x7f
    425e:	3122                	fld	ft2,40(sp)
    4260:	9f25                	0x9f25
    4262:	0370                	addi	a2,sp,396
    4264:	0000                	unimp
    4266:	037c                	addi	a5,sp,396
        while (size-- > 0)
    4268:	0000                	unimp
    426a:	0001                	nop
    426c:	c85f 0003 e000      	0xe0000003c85f
    4272:	01000003          	lb	zero,16(zero) # 10 <_start>
    4276:	5f00                	lw	s0,56(a4)
    if (sign)
    4278:	03e0                	addi	s0,sp,460
    427a:	0000                	unimp
    427c:	03e8                	addi	a0,sp,460
    427e:	0000                	unimp
        *str++ = sign;
    4280:	0001                	nop
    4282:	6c62                	flw	fs8,24(sp)
    4284:	0004                	0x4
    4286:	7400                	flw	fs0,40(s0)
    4288:	0004                	0x4
    428a:	0100                	addi	s0,sp,128
    428c:	5f00                	lw	s0,56(a4)
    428e:	04e4                	addi	s1,sp,588
    4290:	0000                	unimp
    4292:	04f0                	addi	a2,sp,588
    if (type & HEX_PREP)
    4294:	0000                	unimp
    4296:	0001                	nop
    4298:	4c5f 0005 5800      	0x580000054c5f
    429e:	0005                	c.nop	1
        if (base == 8)
    42a0:	0100                	addi	s0,sp,128
    42a2:	5e00                	lw	s0,56(a2)
    42a4:	0574                	addi	a3,sp,652
    42a6:	0000                	unimp
    42a8:	0590                	addi	a2,sp,704
    42aa:	0000                	unimp
            *str++ = '0';
    42ac:	0001                	nop
    42ae:	905a                	c.add	zero,s6
    42b0:	0005                	c.nop	1
    42b2:	9400                	0x9400
    42b4:	0005                	c.nop	1
    42b6:	0100                	addi	s0,sp,128
    42b8:	5f00                	lw	s0,56(a4)
    42ba:	0594                	addi	a3,sp,704
    42bc:	0000                	unimp
    42be:	05a8                	addi	a0,sp,712
    42c0:	0000                	unimp
    42c2:	0001                	nop
        else if (base == 16)
    42c4:	d85a                	sw	s6,48(sp)
    42c6:	0005                	c.nop	1
    42c8:	1c00                	addi	s0,sp,560
    42ca:	0006                	c.slli	zero,0x1
    42cc:	0100                	addi	s0,sp,128
    42ce:	6200                	flw	fs0,0(a2)
            *str++ = '0';
    42d0:	0624                	addi	s1,sp,776
    42d2:	0000                	unimp
    42d4:	0660                	addi	s0,sp,780
    42d6:	0000                	unimp
    42d8:	0001                	nop
    42da:	685f 0006 9400      	0x94000006685f
    42e0:	0006                	c.slli	zero,0x1
    42e2:	0100                	addi	s0,sp,128
            *str++ = digits[33];
    42e4:	6200                	flw	fs0,0(a2)
    42e6:	0694                	addi	a3,sp,832
    42e8:	0000                	unimp
    42ea:	06c8                	addi	a0,sp,836
    42ec:	0000                	unimp
    42ee:	0001                	nop
    42f0:	c85f 0006 d000      	0xd0000006c85f
    42f6:	0006                	c.slli	zero,0x1
    42f8:	0200                	addi	s0,sp,256
    42fa:	3000                	fld	fs0,32(s0)
    42fc:	d09f 0006 e400      	0xe4000006d09f
    if (!(type & LEFT))
    4302:	0006                	c.slli	zero,0x1
    4304:	0100                	addi	s0,sp,128
    4306:	5f00                	lw	s0,56(a4)
    4308:	0700                	addi	s0,sp,896
    430a:	0000                	unimp
        while (size-- > 0)
    430c:	0704                	addi	s1,sp,896
    430e:	0000                	unimp
            *str++ = c;
    4310:	001c                	0x1c
    4312:	4b40007b          	0x4b40007b
    4316:	2224                	fld	fs1,64(a2)
    4318:	007c007b          	0x7c007b
    431c:	4022                	0x4022
    431e:	2b22244b          	fnmsub.d	fs0,ft4,fs2,ft5,rdn
    4322:	ff08                	fsw	fa0,56(a4)
        while (size-- > 0)
    4324:	7e1a                	flw	ft8,164(sp)
    4326:	2200                	fld	fs0,0(a2)
    4328:	007f                	0x7f
    432a:	3122                	fld	ft2,40(sp)
    432c:	9f25                	0x9f25
    432e:	070c                	addi	a1,sp,896
    4330:	0000                	unimp
    4332:	0718                	addi	a4,sp,896
    while (i < precision--)
    4334:	0000                	unimp
    4336:	0001                	nop
        *str++ = '0';
    4338:	185f 0007 3000      	0x30000007185f
    433e:	09000007          	vlse8.v	v0,(zero),a6,v0.t
    4342:	7f00                	flw	fs0,56(a4)
    4344:	1100                	addi	s0,sp,160
    4346:	ffff                	0xffff
    4348:	7bff                	0x7bff
    434a:	9f1a                	add	t5,t5,t1
    while (i < precision--)
    434c:	0730                	addi	a2,sp,904
    434e:	0000                	unimp
    4350:	0750                	addi	a2,sp,900
    4352:	0000                	unimp
    4354:	0001                	nop
    4356:	605f 0007 6c00      	0x6c000007605f
    435c:	01000007          	vle8ff.v	v0,(zero),v0.t
    while (i-- > 0)
    4360:	5f00                	lw	s0,56(a4)
    4362:	07b8                	addi	a4,sp,968
        *str++ = tmp[i];
    4364:	0000                	unimp
    4366:	07c0                	addi	s0,sp,964
    4368:	0000                	unimp
    436a:	0001                	nop
    436c:	c85e                	sw	s7,16(sp)
    436e:	d0000007          	vlseg7e128.v	v0,(zero),v0.t
    4372:	01000007          	vle8ff.v	v0,(zero),v0.t
    4376:	5a00                	lw	s0,48(a2)
    4378:	07e0                	addi	s0,sp,972
    437a:	0000                	unimp
    437c:	07e4                	addi	s1,sp,972
    437e:	0000                	unimp
    4380:	0009                	c.nop	2
    4382:	007f                	0x7f
    while (i-- > 0)
    4384:	ff11                	bnez	a4,42a0 <number+0x26c>
    4386:	ffff                	0xffff
    4388:	009f1a7b          	0x9f1a7b
    438c:	0000                	unimp
    438e:	0000                	unimp
    4390:	0000                	unimp
    4392:	7c00                	flw	fs0,56(s0)
    while (size-- > 0)
    4394:	0000                	unimp
    4396:	9000                	0x9000
        *str++ = ' ';
    4398:	0000                	unimp
    439a:	0100                	addi	s0,sp,128
    439c:	6000                	flw	fs0,0(s0)
    439e:	0090                	addi	a2,sp,64
    43a0:	0000                	unimp
    43a2:	009c                	addi	a5,sp,64
    43a4:	0000                	unimp
    43a6:	0001                	nop
    43a8:	9c5a                	add	s8,s8,s6
    43aa:	0000                	unimp
    while (size-- > 0)
    43ac:	a800                	fsd	fs0,16(s0)
    43ae:	0000                	unimp
    43b0:	0300                	addi	s0,sp,384
    43b2:	8000                	0x8000
    43b4:	9f7f                	0x9f7f
    43b6:	00b0                	addi	a2,sp,72
    43b8:	0000                	unimp
    43ba:	00b8                	addi	a4,sp,72
    return str;
    43bc:	0000                	unimp
    43be:	0001                	nop
}
    43c0:	c05a                	sw	s6,0(sp)
    43c2:	0000                	unimp
    43c4:	d400                	sw	s0,40(s0)
    43c6:	0000                	unimp
    43c8:	0100                	addi	s0,sp,128
    43ca:	6000                	flw	fs0,0(s0)
    43cc:	00d4                	addi	a3,sp,68
    43ce:	0000                	unimp
    43d0:	0108                	addi	a0,sp,128
    43d2:	0000                	unimp
{
    43d4:	0001                	nop
    43d6:	5c5a                	lw	s8,180(sp)
    43d8:	0001                	nop
    43da:	7800                	flw	fs0,48(s0)
    43dc:	0001                	nop
    43de:	0100                	addi	s0,sp,128
    43e0:	5a00                	lw	s0,48(a2)
    43e2:	0190                	addi	a2,sp,192
    43e4:	0000                	unimp
    43e6:	019c                	addi	a5,sp,192
    43e8:	0000                	unimp
    43ea:	0001                	nop
    43ec:	9c5a                	add	s8,s8,s6
    43ee:	0001                	nop
    43f0:	a400                	fsd	fs0,8(s0)
    43f2:	0001                	nop
    char *dig = digits;
    43f4:	0600                	addi	s0,sp,768
    43f6:	7800                	flw	fs0,48(s0)
    43f8:	7600                	flw	fs0,40(a2)
    43fa:	1c00                	addi	s0,sp,560
    43fc:	a49f 0001 b400      	0xb4000001a49f
    if (type & UPPERCASE)
    4402:	0001                	nop
    4404:	0100                	addi	s0,sp,128
    4406:	5a00                	lw	s0,48(a2)
    4408:	01b4                	addi	a3,sp,200
    440a:	0000                	unimp
        dig = upper_digits;
    440c:	01d4                	addi	a3,sp,196
    440e:	0000                	unimp
    4410:	0001                	nop
    4412:	e05d                	bnez	s0,44b8 <eaddr+0xe4>
    len = 0;
    4414:	0001                	nop
    4416:	f400                	fsw	fs0,40(s0)
    for (i = 0; i < 6; i++)
    4418:	0001                	nop
    441a:	0100                	addi	s0,sp,128
    441c:	5a00                	lw	s0,48(a2)
    441e:	01f4                	addi	a3,sp,204
        if (i != 0)
    4420:	0000                	unimp
    4422:	0280                	addi	s0,sp,320
    4424:	0000                	unimp
    4426:	0001                	nop
            tmp[len++] = ':';
    4428:	805d                	srli	s0,s0,0x17
    442a:	0002                	c.slli64	zero
    442c:	d000                	sw	s0,32(s0)
    442e:	0002                	c.slli64	zero
    4430:	0600                	addi	s0,sp,768
    4432:	7800                	flw	fs0,48(s0)
    4434:	7600                	flw	fs0,40(a2)
    4436:	1c00                	addi	s0,sp,560
    4438:	f89f 0002 0400      	0x4000002f89f
    443e:	06000003          	lb	zero,96(zero) # 60 <__do_global_dtors_aux+0x4>
    4442:	7800                	flw	fs0,48(s0)
        tmp[len++] = dig[addr[i] >> 4];
    4444:	7600                	flw	fs0,40(a2)
    4446:	1c00                	addi	s0,sp,560
    4448:	189f 0003 4400      	0x44000003189f
    444e:	06000003          	lb	zero,96(zero) # 60 <__do_global_dtors_aux+0x4>
    4452:	7800                	flw	fs0,48(s0)
    4454:	7600                	flw	fs0,40(a2)
    4456:	1c00                	addi	s0,sp,560
    4458:	449f 0003 4800      	0x48000003449f
    445e:	07000003          	lb	zero,112(zero) # 70 <__do_global_dtors_aux+0x14>
    4462:	7600                	flw	fs0,40(a2)
    4464:	2000                	fld	fs0,0(s0)
    4466:	007d                	c.nop	31
    4468:	9f22                	add	t5,t5,s0
    446a:	06e4                	addi	s1,sp,844
    446c:	0000                	unimp
    446e:	06f4                	addi	a3,sp,844
    4470:	0000                	unimp
    4472:	0001                	nop
    4474:	f45a                	fsw	fs6,40(sp)
    4476:	0006                	c.slli	zero,0x1
    4478:	0400                	addi	s0,sp,512
    447a:	06000007          	vluxei8.v	v0,(zero),v0
    447e:	7800                	flw	fs0,48(s0)
    4480:	7600                	flw	fs0,40(a2)
    4482:	1c00                	addi	s0,sp,560
        tmp[len++] = dig[addr[i] & 0x0F];
    4484:	009f 0000 0000      	0x9f
    448a:	0000                	unimp
    448c:	9800                	0x9800
    448e:	0000                	unimp
    4490:	a800                	fsd	fs0,16(s0)
    4492:	0000                	unimp
    4494:	0100                	addi	s0,sp,128
    4496:	5c00                	lw	s0,56(s0)
	...
    44a0:	010c                	addi	a1,sp,128
    44a2:	0000                	unimp
    44a4:	011c                	addi	a5,sp,128
    44a6:	0000                	unimp
    44a8:	0001                	nop
    44aa:	005c                	addi	a5,sp,4
    44ac:	0000                	unimp
    44ae:	0000                	unimp
    44b0:	0000                	unimp
    44b2:	bc00                	fsd	fs0,56(s0)
    44b4:	0001                	nop
    44b6:	cc00                	sw	s0,24(s0)
    44b8:	0001                	nop
    44ba:	0100                	addi	s0,sp,128
    for (i = 0; i < 6; i++)
    44bc:	5b00                	lw	s0,48(a4)
	...
    44c6:	022c                	addi	a1,sp,264
    44c8:	0000                	unimp
    44ca:	0240                	addi	s0,sp,260
    44cc:	0000                	unimp
    44ce:	0001                	nop
    44d0:	0000005b          	0x5b
    if (!(type & LEFT))
    44d4:	0000                	unimp
    44d6:	0000                	unimp
    44d8:	a400                	fsd	fs0,8(s0)
    44da:	0002                	c.slli64	zero
    44dc:	d000                	sw	s0,32(s0)
    44de:	0002                	c.slli64	zero
        while (len < size--)
    44e0:	0100                	addi	s0,sp,128
    44e2:	5c00                	lw	s0,56(s0)
	...
            *str++ = ' ';
    44ec:	0318                	addi	a4,sp,384
    44ee:	0000                	unimp
    44f0:	0324                	addi	s1,sp,392
    44f2:	0000                	unimp
    44f4:	0006                	c.slli	zero,0x1
    44f6:	007c007b          	0x7c007b
        while (len < size--)
    44fa:	9f22                	add	t5,t5,s0
    44fc:	0324                	addi	s1,sp,392
    44fe:	0000                	unimp
    4500:	0338                	addi	a4,sp,392
    4502:	0000                	unimp
    4504:	0001                	nop
    4506:	005c                	addi	a5,sp,4
    4508:	04000007          	vluxei8.v	v0,(zero),v0,v0.t
    for (i = 0; i < len; ++i)
    450c:	06000007          	vluxei8.v	v0,(zero),v0
    4510:	7b00                	flw	fs0,48(a4)
    4512:	7c00                	flw	fs0,56(s0)
        *str++ = tmp[i];
    4514:	2200                	fld	fs0,0(a2)
    4516:	009f 0000 0000      	0x9f
    451c:	0000                	unimp
    451e:	4800                	lw	s0,16(s0)
    4520:	5c000003          	lb	zero,1472(zero) # 5c0 <core_bench_list+0x174>
    4524:	06000003          	lb	zero,96(zero) # 60 <__do_global_dtors_aux+0x4>
    4528:	7800                	flw	fs0,48(s0)
    452a:	7600                	flw	fs0,40(a2)
    452c:	1c00                	addi	s0,sp,560
    452e:	5c9f 0003 6800      	0x680000035c9f
    for (i = 0; i < len; ++i)
    4534:	01000003          	lb	zero,16(zero) # 10 <_start>
    4538:	5a00                	lw	s0,48(a2)
    453a:	0368                	addi	a0,sp,396
    453c:	0000                	unimp
    453e:	0374                	addi	a3,sp,396
    4540:	0000                	unimp
    4542:	7f800003          	lb	zero,2040(zero) # 7f8 <core_list_init+0x90>
    4546:	7c9f 0003 b800      	0xb80000037c9f
    while (len < size--)
    454c:	01000003          	lb	zero,16(zero) # 10 <_start>
        *str++ = ' ';
    4550:	5a00                	lw	s0,48(a2)
    4552:	03e8                	addi	a0,sp,460
    4554:	0000                	unimp
    4556:	0400                	addi	s0,sp,512
    4558:	0000                	unimp
    455a:	0006                	c.slli	zero,0x1
    455c:	0078                	addi	a4,sp,12
    455e:	0076                	c.slli	zero,0x1d
    4560:	9f1c                	0x9f1c
    4562:	0400                	addi	s0,sp,512
    while (len < size--)
    4564:	0000                	unimp
    4566:	041c                	addi	a5,sp,512
    4568:	0000                	unimp
    456a:	0001                	nop
    456c:	345a                	fld	fs0,432(sp)
    456e:	0004                	0x4
    4570:	4000                	lw	s0,0(s0)
    4572:	0004                	0x4
    4574:	0100                	addi	s0,sp,128
    4576:	5a00                	lw	s0,48(a2)
    return str;
    4578:	0440                	addi	s0,sp,516
    457a:	0000                	unimp
}
    457c:	0448                	addi	a0,sp,516
    457e:	0000                	unimp
    4580:	0006                	c.slli	zero,0x1
    4582:	0078                	addi	a4,sp,12
    4584:	0076                	c.slli	zero,0x1d
    4586:	9f1c                	0x9f1c
    4588:	0448                	addi	a0,sp,516
    458a:	0000                	unimp
{
    458c:	0458                	addi	a4,sp,516
    458e:	0000                	unimp
    4590:	0001                	nop
    4592:	585a                	lw	a6,180(sp)
    4594:	0004                	0x4
    4596:	7c00                	flw	fs0,56(s0)
    4598:	0004                	0x4
    459a:	0100                	addi	s0,sp,128
    459c:	6000                	flw	fs0,0(s0)
    459e:	048c                	addi	a1,sp,576
    45a0:	0000                	unimp
    45a2:	04a0                	addi	s0,sp,584
    45a4:	0000                	unimp
    45a6:	0001                	nop
    45a8:	a05a                	fsd	fs6,0(sp)
    45aa:	0004                	0x4
    45ac:	3000                	fld	fs0,32(s0)
    45ae:	0005                	c.nop	1
    45b0:	0100                	addi	s0,sp,128
    45b2:	6000                	flw	fs0,0(s0)
    len = 0;
    45b4:	0530                	addi	a2,sp,648
    45b6:	0000                	unimp
    for (i = 0; i < 4; i++)
    45b8:	0558                	addi	a4,sp,644
    45ba:	0000                	unimp
    45bc:	0006                	c.slli	zero,0x1
    45be:	0078                	addi	a4,sp,12
        if (i != 0)
    45c0:	0076                	c.slli	zero,0x1d
    45c2:	9f1c                	0x9f1c
    45c4:	0560                	addi	s0,sp,652
    45c6:	0000                	unimp
            tmp[len++] = '.';
    45c8:	05f8                	addi	a4,sp,716
    45ca:	0000                	unimp
    45cc:	0006                	c.slli	zero,0x1
    45ce:	0078                	addi	a4,sp,12
    45d0:	0076                	c.slli	zero,0x1d
    45d2:	9f1c                	0x9f1c
    45d4:	0668                	addi	a0,sp,780
    45d6:	0000                	unimp
    45d8:	0678                	addi	a4,sp,780
    45da:	0000                	unimp
    45dc:	0006                	c.slli	zero,0x1
    45de:	0078                	addi	a4,sp,12
    45e0:	0076                	c.slli	zero,0x1d
    45e2:	9f1c                	0x9f1c
        n = addr[i];
    45e4:	07a8                	addi	a0,sp,968
    45e6:	0000                	unimp
    45e8:	07b8                	addi	a4,sp,968
    45ea:	0000                	unimp
    45ec:	0001                	nop
    45ee:	b85a                	fsd	fs6,48(sp)
    45f0:	c0000007          	vlseg7e8.v	v0,(zero),v0.t
    45f4:	06000007          	vluxei8.v	v0,(zero),v0
        if (n == 0)
    45f8:	7800                	flw	fs0,48(s0)
    45fa:	7600                	flw	fs0,40(a2)
    45fc:	1c00                	addi	s0,sp,560
    45fe:	c89f 0007 e000      	0xe0000007c89f
            tmp[len++] = digits[0];
    4604:	06000007          	vluxei8.v	v0,(zero),v0
    4608:	7800                	flw	fs0,48(s0)
    460a:	7600                	flw	fs0,40(a2)
    460c:	1c00                	addi	s0,sp,560
    460e:	009f 0000 0000      	0x9f
    4614:	0000                	unimp
    4616:	6400                	flw	fs0,8(s0)
    4618:	74000003          	lb	zero,1856(zero) # 740 <core_bench_list+0x2f4>
    461c:	01000003          	lb	zero,16(zero) # 10 <_start>
    4620:	5c00                	lw	s0,56(s0)
	...
            if (n >= 100)
    462a:	03bc                	addi	a5,sp,456
    462c:	0000                	unimp
    462e:	03cc                	addi	a1,sp,452
    4630:	0000                	unimp
    4632:	0001                	nop
                tmp[len++] = digits[n / 100];
    4634:	005c                	addi	a5,sp,4
    4636:	0000                	unimp
    4638:	0000                	unimp
    463a:	0000                	unimp
    463c:	6000                	flw	fs0,0(s0)
    463e:	0004                	0x4
    4640:	7400                	flw	fs0,40(s0)
    4642:	0004                	0x4
    4644:	0100                	addi	s0,sp,128
    4646:	5b00                	lw	s0,48(a4)
	...
    4650:	04d8                	addi	a4,sp,580
    4652:	0000                	unimp
    4654:	04f0                	addi	a2,sp,588
    4656:	0000                	unimp
    4658:	0001                	nop
    465a:	0000005b          	0x5b
    465e:	0000                	unimp
    4660:	0000                	unimp
    4662:	6800                	flw	fs0,16(s0)
    4664:	0005                	c.nop	1
    4666:	a800                	fsd	fs0,16(s0)
    4668:	0005                	c.nop	1
    466a:	0100                	addi	s0,sp,128
    466c:	6000                	flw	fs0,0(s0)
    466e:	07c8                	addi	a0,sp,964
                n          = n % 100;
    4670:	0000                	unimp
    4672:	07d0                	addi	a2,sp,964
    4674:	0000                	unimp
    4676:	0001                	nop
    4678:	0060                	addi	s0,sp,12
    467a:	0000                	unimp
    467c:	0000                	unimp
    467e:	0000                	unimp
    4680:	8400                	0x8400
    4682:	0005                	c.nop	1
    4684:	9400                	0x9400
    4686:	0005                	c.nop	1
                tmp[len++] = digits[n / 10];
    4688:	0100                	addi	s0,sp,128
    468a:	5b00                	lw	s0,48(a4)
	...
    4694:	05cc                	addi	a1,sp,708
    4696:	0000                	unimp
    4698:	05e8                	addi	a0,sp,716
    469a:	0000                	unimp
    469c:	0001                	nop
    469e:	0005e863          	bltu	a1,zero,46ae <iaddr+0x122>
    46a2:	f000                	fsw	fs0,32(s0)
    46a4:	0005                	c.nop	1
    46a6:	0600                	addi	s0,sp,768
    46a8:	7b00                	flw	fs0,48(a4)
    46aa:	7c00                	flw	fs0,56(s0)
    46ac:	1c00                	addi	s0,sp,560
    46ae:	689f 0006 7c00      	0x7c000006689f
    46b4:	0006                	c.slli	zero,0x1
    46b6:	0100                	addi	s0,sp,128
    46b8:	6300                	flw	fs0,0(a4)
	...
    46c2:	05e8                	addi	a0,sp,716
                n          = n % 10;
    46c4:	0000                	unimp
    46c6:	05f8                	addi	a4,sp,716
    46c8:	0000                	unimp
    46ca:	0001                	nop
    46cc:	00000063          	beqz	zero,46cc <iaddr+0x140>
    46d0:	0000                	unimp
    46d2:	0000                	unimp
    46d4:	0400                	addi	s0,sp,512
    46d6:	0006                	c.slli	zero,0x1
    46d8:	0800                	addi	s0,sp,16
    46da:	0006                	c.slli	zero,0x1
    46dc:	0100                	addi	s0,sp,128
    46de:	5a00                	lw	s0,48(a2)
            else if (n >= 10)
    46e0:	0608                	addi	a0,sp,768
    46e2:	0000                	unimp
    46e4:	0630                	addi	a2,sp,776
    46e6:	0000                	unimp
    46e8:	0001                	nop
    46ea:	305e                	fld	ft0,496(sp)
                tmp[len++] = digits[n / 10];
    46ec:	0006                	c.slli	zero,0x1
    46ee:	3400                	fld	fs0,40(s0)
    46f0:	0006                	c.slli	zero,0x1
    46f2:	0300                	addi	s0,sp,384
    46f4:	7a00                	flw	fs0,48(a2)
    46f6:	9f78                	0x9f78
    46f8:	0634                	addi	a3,sp,776
    46fa:	0000                	unimp
    46fc:	0668                	addi	a0,sp,780
    46fe:	0000                	unimp
    4700:	0001                	nop
    4702:	845d                	srai	s0,s0,0x17
    4704:	0006                	c.slli	zero,0x1
    4706:	8c00                	0x8c00
    4708:	0006                	c.slli	zero,0x1
    470a:	0100                	addi	s0,sp,128
    470c:	5a00                	lw	s0,48(a2)
    470e:	068c                	addi	a1,sp,832
    4710:	0000                	unimp
    4712:	069c                	addi	a5,sp,832
    4714:	0000                	unimp
    4716:	0001                	nop
    4718:	9c5e                	add	s8,s8,s7
    471a:	0006                	c.slli	zero,0x1
    471c:	d000                	sw	s0,32(s0)
    471e:	0006                	c.slli	zero,0x1
    4720:	0100                	addi	s0,sp,128
    4722:	5d00                	lw	s0,56(a0)
    4724:	06d0                	addi	a2,sp,836
    4726:	0000                	unimp
                n          = n % 10;
    4728:	06d8                	addi	a4,sp,836
    472a:	0000                	unimp
    472c:	0001                	nop
    472e:	d85e                	sw	s7,48(sp)
    4730:	0006                	c.slli	zero,0x1
    4732:	e400                	fsw	fs0,8(s0)
    4734:	0006                	c.slli	zero,0x1
    4736:	0300                	addi	s0,sp,384
    4738:	7a00                	flw	fs0,48(a2)
    473a:	9f78                	0x9f78
	...
            tmp[len++] = digits[n];
    4744:	02e8                	addi	a0,sp,332
    4746:	0000                	unimp
    4748:	02f8                	addi	a4,sp,332
    474a:	0000                	unimp
    474c:	0001                	nop
    474e:	005e                	c.slli	zero,0x17
    4750:	0000                	unimp
    4752:	0000                	unimp
    4754:	0000                	unimp
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
lui     sp,%hi(__stack_top)                                             
   0:	0000                	unimp
   2:	0000                	unimp
addi    sp,sp,%lo(__stack_top)
   4:	0008                	0x8
   6:	0000                	unimp
jal   zero, _start
   8:	000c                	0xc
   a:	0000                	unimp
   c:	0014                	0x14
   e:	0000                	unimp
  10:	0024                	addi	s1,sp,8
  12:	0000                	unimp
  14:	0028                	addi	a0,sp,8
  16:	0000                	unimp
  18:	0038                	addi	a4,sp,8
  1a:	0000                	unimp
  1c:	003c                	addi	a5,sp,8
	...
  26:	0000                	unimp
  28:	0014                	0x14
  2a:	0000                	unimp
  2c:	001c                	0x1c
  2e:	0000                	unimp
  30:	0040                	addi	s0,sp,4
  32:	0000                	unimp
  34:	0044                	addi	s1,sp,4
  36:	0000                	unimp
  38:	0050                	addi	a2,sp,4
  3a:	0000                	unimp
  3c:	0054                	addi	a3,sp,4
  3e:	0000                	unimp
  40:	005c                	addi	a5,sp,4
  42:	0000                	unimp
  44:	005c                	addi	a5,sp,4
  46:	0000                	unimp
  48:	0094                	addi	a3,sp,64
  4a:	0000                	unimp
  4c:	0098                	addi	a4,sp,64
  4e:	0000                	unimp
  50:	0224                	addi	s1,sp,264
  52:	0000                	unimp
  54:	0228                	addi	a0,sp,264
  56:	0000                	unimp
  58:	0360                	addi	s0,sp,396
  5a:	0000                	unimp
  5c:	0364                	addi	s1,sp,396
  5e:	0000                	unimp
  60:	04d0                	addi	a2,sp,580
  62:	0000                	unimp
  64:	04d4                	addi	a3,sp,580
	...
  6e:	0000                	unimp
  70:	0068                	addi	a0,sp,12
  72:	0000                	unimp
  74:	0094                	addi	a3,sp,64
  76:	0000                	unimp
  78:	0098                	addi	a4,sp,64
  7a:	0000                	unimp
  7c:	00a4                	addi	s1,sp,72
  7e:	0000                	unimp
  80:	00ac                	addi	a1,sp,72
  82:	0000                	unimp
  84:	01c0                	addi	s0,sp,196
  86:	0000                	unimp
  88:	01cc                	addi	a1,sp,196
  8a:	0000                	unimp
  8c:	0224                	addi	s1,sp,264
  8e:	0000                	unimp
  90:	0228                	addi	a0,sp,264
  92:	0000                	unimp
  94:	02bc                	addi	a5,sp,328
  96:	0000                	unimp
  98:	02e4                	addi	s1,sp,332
  9a:	0000                	unimp
  9c:	02fc                	addi	a5,sp,332
  9e:	0000                	unimp
  a0:	0304                	addi	s1,sp,384
  a2:	0000                	unimp
  a4:	0334                	addi	a3,sp,392
  a6:	0000                	unimp
  a8:	0528                	addi	a0,sp,648
  aa:	0000                	unimp
  ac:	0530                	addi	a2,sp,648
  ae:	0000                	unimp
  b0:	06d8                	addi	a4,sp,836
  b2:	0000                	unimp
  b4:	06e0                	addi	s0,sp,844
  b6:	0000                	unimp
  b8:	06ec                	addi	a1,sp,844
  ba:	0000                	unimp
  bc:	06f8                	addi	a4,sp,844
	...
{
  c6:	0000                	unimp
  c8:	0080                	addi	s0,sp,64
  ca:	0000                	unimp
  cc:	0090                	addi	a2,sp,64
  ce:	0000                	unimp
  d0:	0090                	addi	a2,sp,64
  d2:	0000                	unimp
  d4:	0094                	addi	a3,sp,64
	...
    ee_s16 data = *pdata;
  de:	0000                	unimp
  e0:	0094                	addi	a3,sp,64
  e2:	0000                	unimp
  e4:	0094                	addi	a3,sp,64
  e6:	0000                	unimp
          & 1;  /* bit 7 indicates if the function result has been cached */
  e8:	01a4                	addi	s1,sp,200
  ea:	0000                	unimp
  ec:	01b8                	addi	a4,sp,200
	...
  f6:	0000                	unimp
  f8:	00f4                	addi	a3,sp,76
  fa:	0000                	unimp
    ee_u8  optype
  fc:	0104                	addi	s1,sp,128
  fe:	0000                	unimp
 100:	0104                	addi	s1,sp,128
 102:	0000                	unimp
    if (optype) /* if cached, use cache */
 104:	0108                	addi	a0,sp,128
	...
        return (data & 0x007f);
 10e:	0000                	unimp
 110:	028c                	addi	a1,sp,320
 112:	0000                	unimp
 114:	029c                	addi	a5,sp,320
 116:	0000                	unimp
 118:	02a4                	addi	s1,sp,328
 11a:	0000                	unimp
 11c:	02a8                	addi	a0,sp,328
	...
        ee_s16 flag = data & 0x7; /* bits 0-2 is type of function to perform */
 126:	0000                	unimp
 128:	0304                	addi	s1,sp,384
 12a:	0000                	unimp
               & 0xf);       /* bits 3-6 is specific data for the operation */
 12c:	0304                	addi	s1,sp,384
 12e:	0000                	unimp
 130:	030c                	addi	a1,sp,384
 132:	0000                	unimp
 134:	031c                	addi	a5,sp,384
	...
        ee_s16 dtype
 13e:	0000                	unimp
 140:	00a4                	addi	s1,sp,72
 142:	0000                	unimp
        dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
 144:	00ac                	addi	a1,sp,72
 146:	0000                	unimp
 148:	02bc                	addi	a5,sp,328
 14a:	0000                	unimp
 14c:	02bc                	addi	a5,sp,328
 14e:	0000                	unimp
 150:	02fc                	addi	a5,sp,332
 152:	0000                	unimp
 154:	0304                	addi	s1,sp,384
 156:	0000                	unimp
 158:	0334                	addi	a3,sp,392
 15a:	0000                	unimp
 15c:	0360                	addi	s0,sp,396
 15e:	0000                	unimp
        switch (flag)
 160:	0364                	addi	s1,sp,396
 162:	0000                	unimp
 164:	0468                	addi	a0,sp,524
 166:	0000                	unimp
 168:	0470                	addi	a2,sp,524
 16a:	0000                	unimp
 16c:	04d0                	addi	a2,sp,580
 16e:	0000                	unimp
 170:	04d4                	addi	a3,sp,580
 172:	0000                	unimp
                if (dtype < 0x22) /* set min period for bit corruption */
 174:	0528                	addi	a0,sp,648
 176:	0000                	unimp
 178:	0530                	addi	a2,sp,648
 17a:	0000                	unimp
 17c:	053c                	addi	a5,sp,648
 17e:	0000                	unimp
                    dtype = 0x22;
 180:	0544                	addi	s1,sp,644
 182:	0000                	unimp
 184:	059c                	addi	a5,sp,704
 186:	0000                	unimp
                retval = core_bench_state(res->size,
 188:	05a4                	addi	s1,sp,712
 18a:	0000                	unimp
 18c:	06d0                	addi	a2,sp,836
 18e:	0000                	unimp
                                          res->memblock[3],
 190:	078c                	addi	a1,sp,960
 192:	0000                	unimp
 194:	0794                	addi	a3,sp,960
 196:	0000                	unimp
                retval = core_bench_state(res->size,
 198:	079c                	addi	a5,sp,960
 19a:	0000                	unimp
 19c:	07cc                	addi	a1,sp,964
	...
 1a6:	0000                	unimp
 1a8:	034c                	addi	a1,sp,388
 1aa:	0000                	unimp
 1ac:	035c                	addi	a5,sp,388
 1ae:	0000                	unimp
 1b0:	035c                	addi	a5,sp,388
 1b2:	0000                	unimp
 1b4:	0360                	addi	s0,sp,396
	...
 1be:	0000                	unimp
                if (res->crcstate == 0)
 1c0:	03a4                	addi	s1,sp,456
 1c2:	0000                	unimp
 1c4:	03b4                	addi	a3,sp,456
 1c6:	0000                	unimp
 1c8:	03b4                	addi	a3,sp,456
 1ca:	0000                	unimp
                    res->crcstate = retval;
 1cc:	03b8                	addi	a4,sp,456
	...
 1d6:	0000                	unimp
                break;
 1d8:	03c4                	addi	s1,sp,452
 1da:	0000                	unimp
                retval = core_bench_matrix(&(res->mat), dtype, res->crc);
 1dc:	03d4                	addi	a3,sp,452
 1de:	0000                	unimp
 1e0:	05e4                	addi	s1,sp,716
 1e2:	0000                	unimp
 1e4:	0654                	addi	a3,sp,772
 1e6:	0000                	unimp
 1e8:	0668                	addi	a0,sp,780
 1ea:	0000                	unimp
 1ec:	06d0                	addi	a2,sp,836
	...
 1f6:	0000                	unimp
 1f8:	0550                	addi	a2,sp,644
 1fa:	0000                	unimp
 1fc:	0560                	addi	s0,sp,652
 1fe:	0000                	unimp
 200:	058c                	addi	a1,sp,704
 202:	0000                	unimp
 204:	0594                	addi	a3,sp,704
	...
                if (res->crcmatrix == 0)
 20e:	0000                	unimp
 210:	02bc                	addi	a5,sp,328
 212:	0000                	unimp
                    res->crcmatrix = retval;
 214:	02e4                	addi	s1,sp,332
 216:	0000                	unimp
 218:	06f8                	addi	a4,sp,844
 21a:	0000                	unimp
 21c:	074c                	addi	a1,sp,900
 21e:	0000                	unimp
                break;
 220:	07cc                	addi	a1,sp,964
 222:	0000                	unimp
                retval = data;
 224:	07d8                	addi	a4,sp,964
	...
                break;
 22e:	0000                	unimp
                break;
 230:	074c                	addi	a1,sp,900
 232:	0000                	unimp
 234:	0758                	addi	a4,sp,900
 236:	0000                	unimp
                break;
 238:	0760                	addi	s0,sp,908
 23a:	0000                	unimp
        res->crc = crcu16(retval, res->crc);
 23c:	0774                	addi	a3,sp,908
	...
 24e:	0000                	unimp
 250:	0008                	0x8
 252:	0000                	unimp
 254:	000c                	0xc
 256:	0000                	unimp
 258:	0020                	addi	s0,sp,8
 25a:	0000                	unimp
 25c:	0024                	addi	s1,sp,8
 25e:	0000                	unimp
 260:	0040                	addi	s0,sp,4
 262:	0000                	unimp
        retval &= 0x007f;
 264:	0044                	addi	s1,sp,4
 266:	0000                	unimp
 268:	0050                	addi	a2,sp,4
 26a:	0000                	unimp
 26c:	0058                	addi	a4,sp,4
 26e:	0000                	unimp
        *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
 270:	016c                	addi	a1,sp,140
 272:	0000                	unimp
 274:	0170                	addi	a2,sp,140
 276:	0000                	unimp
 278:	06a0                	addi	s0,sp,840
 27a:	0000                	unimp
 27c:	06a4                	addi	s1,sp,840
	...
 286:	0000                	unimp
 288:	0080                	addi	s0,sp,64
 28a:	0000                	unimp
 28c:	0084                	addi	s1,sp,64
 28e:	0000                	unimp
 290:	0104                	addi	s1,sp,128
 292:	0000                	unimp
 294:	0160                	addi	s0,sp,140
	...
 29e:	0000                	unimp
 2a0:	0084                	addi	s1,sp,64
 2a2:	0000                	unimp
        return retval;
 2a4:	0098                	addi	a4,sp,64
 2a6:	0000                	unimp
}
 2a8:	06d8                	addi	a4,sp,836
 2aa:	0000                	unimp
 2ac:	06dc                	addi	a5,sp,836
	...
 2b6:	0000                	unimp
 2b8:	00c0                	addi	s0,sp,68
 2ba:	0000                	unimp
{
 2bc:	00c4                	addi	s1,sp,68
 2be:	0000                	unimp
 2c0:	01a4                	addi	s1,sp,200
 2c2:	0000                	unimp
 2c4:	0204                	addi	s1,sp,256
	...
 2ce:	0000                	unimp
 2d0:	023c                	addi	a5,sp,264
 2d2:	0000                	unimp
 2d4:	05d0                	addi	a2,sp,708
 2d6:	0000                	unimp
    ee_s16 val1 = calc_func(&(a->data16), res);
 2d8:	0694                	addi	a3,sp,832
 2da:	0000                	unimp
 2dc:	06a0                	addi	s0,sp,840
 2de:	0000                	unimp
 2e0:	07d8                	addi	a4,sp,964
 2e2:	0000                	unimp
 2e4:	07e4                	addi	s1,sp,972
	...
 2ee:	0000                	unimp
    ee_s16 val2 = calc_func(&(b->data16), res);
 2f0:	0268                	addi	a0,sp,268
 2f2:	0000                	unimp
 2f4:	0278                	addi	a4,sp,268
 2f6:	0000                	unimp
 2f8:	027c                	addi	a5,sp,268
 2fa:	0000                	unimp
 2fc:	0340                	addi	s0,sp,388
 2fe:	0000                	unimp
 300:	03cc                	addi	a1,sp,452
 302:	0000                	unimp
 304:	03d0                	addi	a2,sp,452
	...
    return val1 - val2;
 30e:	0000                	unimp
 310:	0384                	addi	s1,sp,448
 312:	0000                	unimp
}
 314:	0390                	addi	a2,sp,448
 316:	0000                	unimp
 318:	039c                	addi	a5,sp,448
 31a:	0000                	unimp
 31c:	03a0                	addi	s0,sp,456
	...
 326:	0000                	unimp
{
 328:	03d8                	addi	a4,sp,452
 32a:	0000                	unimp
 32c:	03e8                	addi	a0,sp,460
 32e:	0000                	unimp
 330:	03ec                	addi	a1,sp,460
 332:	0000                	unimp
 334:	03ec                	addi	a1,sp,460
	...
 33e:	0000                	unimp
    if (res == NULL)
 340:	0404                	addi	s1,sp,512
 342:	0000                	unimp
 344:	0410                	addi	a2,sp,512
 346:	0000                	unimp
        a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16 >> 8));
 348:	0414                	addi	a3,sp,512
 34a:	0000                	unimp
 34c:	0418                	addi	a4,sp,512
	...
 356:	0000                	unimp
 358:	0430                	addi	a2,sp,520
 35a:	0000                	unimp
 35c:	0508                	addi	a0,sp,640
 35e:	0000                	unimp
 360:	058c                	addi	a1,sp,704
 362:	0000                	unimp
 364:	0590                	addi	a2,sp,704
	...
 36e:	0000                	unimp
 370:	053c                	addi	a5,sp,648
 372:	0000                	unimp
 374:	0548                	addi	a0,sp,644
 376:	0000                	unimp
 378:	0554                	addi	a3,sp,644
 37a:	0000                	unimp
 37c:	0558                	addi	a4,sp,644
	...
 386:	0000                	unimp
 388:	0594                	addi	a3,sp,704
 38a:	0000                	unimp
 38c:	0598                	addi	a4,sp,704
 38e:	0000                	unimp
 390:	059c                	addi	a5,sp,704
 392:	0000                	unimp
        b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16 >> 8));
 394:	059c                	addi	a5,sp,704
	...
 39e:	0000                	unimp
 3a0:	05ac                	addi	a1,sp,712
 3a2:	0000                	unimp
 3a4:	05b8                	addi	a4,sp,712
 3a6:	0000                	unimp
 3a8:	05bc                	addi	a5,sp,712
 3aa:	0000                	unimp
 3ac:	05c4                	addi	s1,sp,708
 3ae:	0000                	unimp
 3b0:	07dc                	addi	a5,sp,964
 3b2:	0000                	unimp
 3b4:	07e4                	addi	s1,sp,972
	...
 3be:	0000                	unimp
 3c0:	0630                	addi	a2,sp,776
 3c2:	0000                	unimp
 3c4:	063c                	addi	a5,sp,776
 3c6:	0000                	unimp
 3c8:	0644                	addi	s1,sp,772
 3ca:	0000                	unimp
 3cc:	0658                	addi	a4,sp,772
	...
 3d6:	0000                	unimp
 3d8:	06f4                	addi	a3,sp,844
 3da:	0000                	unimp
 3dc:	07a8                	addi	a0,sp,968
 3de:	0000                	unimp
    return a->idx - b->idx;
 3e0:	07bc                	addi	a5,sp,968
 3e2:	0000                	unimp
 3e4:	07d8                	addi	a4,sp,964
	...
 3f2:	0000                	unimp
 3f4:	000c                	0xc
 3f6:	0000                	unimp
}
 3f8:	0018                	0x18
 3fa:	0000                	unimp
 3fc:	001c                	0x1c
 3fe:	0000                	unimp
 400:	0020                	addi	s0,sp,8
 402:	0000                	unimp
 404:	0028                	addi	a0,sp,8
 406:	0000                	unimp
{
 408:	002c                	addi	a1,sp,8
 40a:	0000                	unimp
 40c:	0030                	addi	a2,sp,8
	...
 416:	0000                	unimp
 418:	000c                	0xc
 41a:	0000                	unimp
    to->data16 = from->data16;
 41c:	0010                	0x10
 41e:	0000                	unimp
 420:	0028                	addi	a0,sp,8
 422:	0000                	unimp
 424:	002c                	addi	a1,sp,8
 426:	0000                	unimp
 428:	0030                	addi	a2,sp,8
 42a:	0000                	unimp
    to->idx    = from->idx;
 42c:	0038                	addi	a4,sp,8
	...
 43a:	0000                	unimp
}
 43c:	0010                	0x10
 43e:	0000                	unimp
 440:	0018                	0x18
 442:	0000                	unimp
 444:	0020                	addi	s0,sp,8
	...
{
 44e:	0000                	unimp
 450:	0020                	addi	s0,sp,8
 452:	0000                	unimp
 454:	0020                	addi	s0,sp,8
 456:	0000                	unimp
 458:	0024                	addi	s1,sp,8
 45a:	0000                	unimp
 45c:	0038                	addi	a4,sp,8
	...
 466:	0000                	unimp
    ee_u16     retval = 0;
 468:	0058                	addi	a4,sp,4
 46a:	0000                	unimp
    ee_u16     found = 0, missed = 0;
 46c:	00a0                	addi	s0,sp,72
 46e:	0000                	unimp
 470:	00a4                	addi	s1,sp,72
 472:	0000                	unimp
    list_head *list     = res->list;
 474:	00d4                	addi	a3,sp,68
 476:	0000                	unimp
 478:	00d8                	addi	a4,sp,68
 47a:	0000                	unimp
 47c:	00e4                	addi	s1,sp,76
	...
    ee_s16     find_num = res->seed3;
 48a:	0000                	unimp
    info.idx = finder_idx;
 48c:	0010                	0x10
 48e:	0000                	unimp
 490:	0018                	0x18
 492:	0000                	unimp
    for (i = 0; i < find_num; i++)
 494:	0020                	addi	s0,sp,8
	...
        info.data16 = (i & 0xff);
 49e:	0000                	unimp
 4a0:	0020                	addi	s0,sp,8
 4a2:	0000                	unimp
 4a4:	0020                	addi	s0,sp,8
 4a6:	0000                	unimp
 4a8:	0024                	addi	s1,sp,8
 4aa:	0000                	unimp
 4ac:	0038                	addi	a4,sp,8
	...
        this_find   = core_list_find(list, &info);
 4b6:	0000                	unimp
 4b8:	0058                	addi	a4,sp,4
 4ba:	0000                	unimp
 4bc:	00a0                	addi	s0,sp,72
 4be:	0000                	unimp
 4c0:	00a4                	addi	s1,sp,72
 4c2:	0000                	unimp
        list        = core_list_reverse(list);
 4c4:	00d4                	addi	a3,sp,68
 4c6:	0000                	unimp
 4c8:	00d8                	addi	a4,sp,68
 4ca:	0000                	unimp
 4cc:	00e4                	addi	s1,sp,76
	...
            missed++;
 4de:	0000                	unimp
 4e0:	0008                	0x8
 4e2:	0000                	unimp
            retval += (list->next->info->data16 >> 8) & 1;
 4e4:	000c                	0xc
 4e6:	0000                	unimp
 4e8:	0020                	addi	s0,sp,8
 4ea:	0000                	unimp
 4ec:	0024                	addi	s1,sp,8
 4ee:	0000                	unimp
 4f0:	0030                	addi	a2,sp,8
 4f2:	0000                	unimp
 4f4:	0034                	addi	a3,sp,8
 4f6:	0000                	unimp
 4f8:	0040                	addi	s0,sp,4
 4fa:	0000                	unimp
 4fc:	0048                	addi	a0,sp,4
 4fe:	0000                	unimp
 500:	0560                	addi	s0,sp,652
 502:	0000                	unimp
 504:	0564                	addi	s1,sp,652
	...
 50e:	0000                	unimp
 510:	0070                	addi	a2,sp,12
 512:	0000                	unimp
 514:	0074                	addi	a3,sp,12
 516:	0000                	unimp
 518:	00f8                	addi	a4,sp,76
 51a:	0000                	unimp
 51c:	0154                	addi	a3,sp,132
	...
            found++;
 526:	0000                	unimp
 528:	0074                	addi	a3,sp,12
 52a:	0000                	unimp
 52c:	0088                	addi	a0,sp,64
 52e:	0000                	unimp
            if (this_find->info->data16 & 0x1) /* use found value */
 530:	0594                	addi	a3,sp,704
 532:	0000                	unimp
 534:	0598                	addi	a4,sp,704
	...
 53e:	0000                	unimp
 540:	00b0                	addi	a2,sp,72
 542:	0000                	unimp
 544:	00b4                	addi	a3,sp,72
 546:	0000                	unimp
 548:	0194                	addi	a3,sp,192
 54a:	0000                	unimp
                retval += (this_find->info->data16 >> 9) & 1;
 54c:	01f4                	addi	a3,sp,204
	...
 556:	0000                	unimp
 558:	022c                	addi	a1,sp,264
 55a:	0000                	unimp
 55c:	0438                	addi	a4,sp,520
 55e:	0000                	unimp
 560:	0438                	addi	a4,sp,520
 562:	0000                	unimp
 564:	0460                	addi	s0,sp,524
	...
 56e:	0000                	unimp
 570:	022c                	addi	a1,sp,264
 572:	0000                	unimp
 574:	02a8                	addi	a0,sp,328
 576:	0000                	unimp
 578:	02b0                	addi	a2,sp,328
 57a:	0000                	unimp
 57c:	02b4                	addi	a3,sp,328
	...
            if (this_find->next != NULL)
 586:	0000                	unimp
 588:	0274                	addi	a3,sp,268
 58a:	0000                	unimp
 58c:	0280                	addi	s0,sp,320
 58e:	0000                	unimp
                finder          = this_find->next;
 590:	028c                	addi	a1,sp,320
 592:	0000                	unimp
 594:	0290                	addi	a2,sp,320
	...
                this_find->next = finder->next;
 59e:	0000                	unimp
 5a0:	02a8                	addi	a0,sp,328
 5a2:	0000                	unimp
 5a4:	02b0                	addi	a2,sp,328
 5a6:	0000                	unimp
 5a8:	02b4                	addi	a3,sp,328
 5aa:	0000                	unimp
                finder->next    = list->next;
 5ac:	0328                	addi	a0,sp,392
 5ae:	0000                	unimp
 5b0:	0330                	addi	a2,sp,392
 5b2:	0000                	unimp
 5b4:	0338                	addi	a4,sp,392
	...
                list->next      = finder;
 5be:	0000                	unimp
 5c0:	02e4                	addi	s1,sp,332
 5c2:	0000                	unimp
 5c4:	02f0                	addi	a2,sp,332
 5c6:	0000                	unimp
        if (info.idx >= 0)
 5c8:	02fc                	addi	a5,sp,332
 5ca:	0000                	unimp
 5cc:	0300                	addi	s0,sp,384
	...
            info.idx++;
 5d6:	0000                	unimp
 5d8:	0328                	addi	a0,sp,392
 5da:	0000                	unimp
 5dc:	0330                	addi	a2,sp,392
 5de:	0000                	unimp
 5e0:	0338                	addi	a4,sp,392
 5e2:	0000                	unimp
 5e4:	03ac                	addi	a1,sp,456
	...
 5ee:	0000                	unimp
 5f0:	0368                	addi	a0,sp,396
 5f2:	0000                	unimp
    for (i = 0; i < find_num; i++)
 5f4:	0374                	addi	a3,sp,396
 5f6:	0000                	unimp
 5f8:	0380                	addi	s0,sp,448
 5fa:	0000                	unimp
 5fc:	0384                	addi	s1,sp,448
	...
 606:	0000                	unimp
 608:	03ac                	addi	a1,sp,456
 60a:	0000                	unimp
 60c:	0400                	addi	s0,sp,512
 60e:	0000                	unimp
 610:	0400                	addi	s0,sp,512
 612:	0000                	unimp
 614:	0414                	addi	a3,sp,512
 616:	0000                	unimp
 618:	0418                	addi	a4,sp,512
 61a:	0000                	unimp
    retval += found * 4 - missed;
 61c:	041c                	addi	a5,sp,512
 61e:	0000                	unimp
 620:	0440                	addi	s0,sp,516
 622:	0000                	unimp
 624:	0444                	addi	s1,sp,516
	...
 62e:	0000                	unimp
 630:	03dc                	addi	a5,sp,452
 632:	0000                	unimp
 634:	03e8                	addi	a0,sp,460
 636:	0000                	unimp
 638:	03f4                	addi	a3,sp,460
 63a:	0000                	unimp
 63c:	03f8                	addi	a4,sp,460
	...
 646:	0000                	unimp
    if (finder_idx > 0)
 648:	0400                	addi	s0,sp,512
 64a:	0000                	unimp
 64c:	0400                	addi	s0,sp,512
 64e:	0000                	unimp
        list = core_list_mergesort(list, cmp_complex, res);
 650:	0414                	addi	a3,sp,512
 652:	0000                	unimp
 654:	0418                	addi	a4,sp,512
 656:	0000                	unimp
 658:	041c                	addi	a5,sp,512
 65a:	0000                	unimp
 65c:	0428                	addi	a0,sp,520
 65e:	0000                	unimp
 660:	0438                	addi	a4,sp,520
 662:	0000                	unimp
    remover = core_list_remove(list->next);
 664:	0440                	addi	s0,sp,516
 666:	0000                	unimp
 668:	0444                	addi	s1,sp,516
 66a:	0000                	unimp
 66c:	0448                	addi	a0,sp,516
	...
 676:	0000                	unimp
    finder = core_list_find(list, &info);
 678:	0428                	addi	a0,sp,520
 67a:	0000                	unimp
 67c:	0438                	addi	a4,sp,520
 67e:	0000                	unimp
 680:	0448                	addi	a0,sp,516
 682:	0000                	unimp
 684:	0460                	addi	s0,sp,524
	...
    if (!finder)
 68e:	0000                	unimp
 690:	0438                	addi	a4,sp,520
 692:	0000                	unimp
        finder = list->next;
 694:	0438                	addi	a4,sp,520
 696:	0000                	unimp
 698:	0460                	addi	s0,sp,524
 69a:	0000                	unimp
 69c:	0488                	addi	a0,sp,576
	...
        retval = crc16(list->info->data16, retval);
 6a6:	0000                	unimp
 6a8:	0438                	addi	a4,sp,520
 6aa:	0000                	unimp
 6ac:	0438                	addi	a4,sp,520
 6ae:	0000                	unimp
 6b0:	0460                	addi	s0,sp,524
 6b2:	0000                	unimp
 6b4:	046c                	addi	a1,sp,524
 6b6:	0000                	unimp
 6b8:	046c                	addi	a1,sp,524
 6ba:	0000                	unimp
 6bc:	0480                	addi	s0,sp,576
	...
 6c6:	0000                	unimp
        finder = finder->next;
 6c8:	050c                	addi	a1,sp,640
 6ca:	0000                	unimp
 6cc:	0528                	addi	a0,sp,648
 6ce:	0000                	unimp
 6d0:	052c                	addi	a1,sp,648
 6d2:	0000                	unimp
    while (finder)
 6d4:	0530                	addi	a2,sp,648
	...
    remover = core_list_undo_remove(remover, list->next);
 6de:	0000                	unimp
 6e0:	0588                	addi	a0,sp,704
 6e2:	0000                	unimp
 6e4:	0594                	addi	a3,sp,704
 6e6:	0000                	unimp
 6e8:	05a4                	addi	s1,sp,712
 6ea:	0000                	unimp
 6ec:	0658                	addi	a4,sp,772
 6ee:	0000                	unimp
 6f0:	067c                	addi	a5,sp,780
 6f2:	0000                	unimp
    list = core_list_mergesort(list, cmp_idx, NULL);
 6f4:	068c                	addi	a1,sp,832
	...
 702:	0000                	unimp
 704:	0010                	0x10
 706:	0000                	unimp
    finder = list->next;
 708:	0014                	0x14
 70a:	0000                	unimp
 70c:	001c                	0x1c
	...
        retval = crc16(list->info->data16, retval);
 71a:	0000                	unimp
 71c:	0014                	0x14
 71e:	0000                	unimp
 720:	0014                	0x14
 722:	0000                	unimp
 724:	0030                	addi	a2,sp,8
 726:	0000                	unimp
 728:	0038                	addi	a4,sp,8
 72a:	0000                	unimp
 72c:	004c                	addi	a1,sp,4
	...
 73a:	0000                	unimp
        finder = finder->next;
 73c:	0008                	0x8
 73e:	0000                	unimp
 740:	000c                	0xc
 742:	0000                	unimp
 744:	0014                	0x14
 746:	0000                	unimp
    while (finder)
 748:	0024                	addi	s1,sp,8
 74a:	0000                	unimp
 74c:	0028                	addi	a0,sp,8
 74e:	0000                	unimp
    return retval;
 750:	0034                	addi	a3,sp,8
 752:	0000                	unimp
}
 754:	0038                	addi	a4,sp,8
	...
 75e:	0000                	unimp
 760:	0014                	0x14
 762:	0000                	unimp
 764:	001c                	0x1c
 766:	0000                	unimp
{
 768:	0040                	addi	s0,sp,4
 76a:	0000                	unimp
 76c:	0040                	addi	s0,sp,4
 76e:	0000                	unimp
 770:	0050                	addi	a2,sp,4
 772:	0000                	unimp
 774:	0054                	addi	a3,sp,4
 776:	0000                	unimp
 778:	0058                	addi	a4,sp,4
 77a:	0000                	unimp
 77c:	005c                	addi	a5,sp,4
 77e:	0000                	unimp
 780:	00a8                	addi	a0,sp,72
 782:	0000                	unimp
 784:	00ac                	addi	a1,sp,72
 786:	0000                	unimp
    ee_u32 per_item = 16 + sizeof(struct list_data_s);
 788:	0238                	addi	a4,sp,264
 78a:	0000                	unimp
 78c:	023c                	addi	a5,sp,264
 78e:	0000                	unimp
    ee_u32 size     = (blksize / per_item)
 790:	0374                	addi	a3,sp,396
 792:	0000                	unimp
 794:	0378                	addi	a4,sp,396
 796:	0000                	unimp
 798:	04e4                	addi	s1,sp,588
 79a:	0000                	unimp
 79c:	04e8                	addi	a0,sp,588
	...
 7a6:	0000                	unimp
    list_head *memblock_end  = memblock + size;
 7a8:	0074                	addi	a3,sp,12
 7aa:	0000                	unimp
 7ac:	0078                	addi	a4,sp,12
 7ae:	0000                	unimp
 7b0:	007c                	addi	a5,sp,12
 7b2:	0000                	unimp
 7b4:	00a8                	addi	a0,sp,72
 7b6:	0000                	unimp
 7b8:	00ac                	addi	a1,sp,72
 7ba:	0000                	unimp
    list_data *datablock     = (list_data *)(memblock_end);
 7bc:	00b8                	addi	a4,sp,72
 7be:	0000                	unimp
 7c0:	00c0                	addi	s0,sp,68
 7c2:	0000                	unimp
    list_data *datablock_end = datablock + size;
 7c4:	01d4                	addi	a3,sp,196
 7c6:	0000                	unimp
 7c8:	01e0                	addi	s0,sp,204
 7ca:	0000                	unimp
 7cc:	0238                	addi	a4,sp,264
 7ce:	0000                	unimp
 7d0:	023c                	addi	a5,sp,264
 7d2:	0000                	unimp
 7d4:	02d0                	addi	a2,sp,324
 7d6:	0000                	unimp
    list_head *finder, *list = memblock;
 7d8:	02f8                	addi	a4,sp,332
 7da:	0000                	unimp
 7dc:	0310                	addi	a2,sp,384
 7de:	0000                	unimp
    list->next         = NULL;
 7e0:	0318                	addi	a4,sp,384
 7e2:	0000                	unimp
 7e4:	0348                	addi	a0,sp,388
 7e6:	0000                	unimp
    list->info         = datablock;
 7e8:	053c                	addi	a5,sp,648
 7ea:	0000                	unimp
 7ec:	0540                	addi	s0,sp,644
 7ee:	0000                	unimp
 7f0:	06ec                	addi	a1,sp,844
 7f2:	0000                	unimp
    list->info->idx    = 0x0000;
 7f4:	06f4                	addi	a3,sp,844
 7f6:	0000                	unimp
 7f8:	0700                	addi	s0,sp,896
 7fa:	0000                	unimp
 7fc:	070c                	addi	a1,sp,896
	...
    list->info->data16 = (ee_s16)0x8080;
 806:	0000                	unimp
 808:	0094                	addi	a3,sp,64
 80a:	0000                	unimp
 80c:	00a4                	addi	s1,sp,72
 80e:	0000                	unimp
 810:	00a4                	addi	s1,sp,72
 812:	0000                	unimp
    memblock++;
 814:	00a8                	addi	a0,sp,72
	...
 81e:	0000                	unimp
    datablock++;
 820:	00a8                	addi	a0,sp,72
 822:	0000                	unimp
 824:	00a8                	addi	a0,sp,72
 826:	0000                	unimp
 828:	01b8                	addi	a4,sp,200
 82a:	0000                	unimp
    info.idx    = 0x7fff;
 82c:	01cc                	addi	a1,sp,196
	...
 836:	0000                	unimp
    info.data16 = (ee_s16)0xffff;
 838:	0108                	addi	a0,sp,128
 83a:	0000                	unimp
 83c:	0118                	addi	a4,sp,128
 83e:	0000                	unimp
    core_list_insert_new(
 840:	0118                	addi	a4,sp,128
 842:	0000                	unimp
 844:	011c                	addi	a5,sp,128
	...
 84e:	0000                	unimp
 850:	02a0                	addi	s0,sp,328
 852:	0000                	unimp
 854:	02b0                	addi	a2,sp,328
 856:	0000                	unimp
 858:	02b8                	addi	a4,sp,328
 85a:	0000                	unimp
    for (i = 0; i < size; i++)
 85c:	02bc                	addi	a5,sp,328
	...
        ee_u16 datpat = ((ee_u16)(seed ^ i) & 0xf);
 866:	0000                	unimp
 868:	0318                	addi	a4,sp,384
 86a:	0000                	unimp
 86c:	0318                	addi	a4,sp,384
 86e:	0000                	unimp
 870:	0320                	addi	s0,sp,392
 872:	0000                	unimp
 874:	0330                	addi	a2,sp,392
	...
 87e:	0000                	unimp
 880:	00b8                	addi	a4,sp,72
 882:	0000                	unimp
 884:	00c0                	addi	s0,sp,68
 886:	0000                	unimp
            = (datpat << 3) | (i & 0x7); /* alternate between algorithms */
 888:	02d0                	addi	a2,sp,324
 88a:	0000                	unimp
 88c:	02d0                	addi	a2,sp,324
 88e:	0000                	unimp
 890:	0310                	addi	a2,sp,384
 892:	0000                	unimp
 894:	0318                	addi	a4,sp,384
 896:	0000                	unimp
 898:	0348                	addi	a0,sp,388
 89a:	0000                	unimp
 89c:	0374                	addi	a3,sp,396
 89e:	0000                	unimp
 8a0:	0378                	addi	a4,sp,396
 8a2:	0000                	unimp
 8a4:	047c                	addi	a5,sp,524
 8a6:	0000                	unimp
 8a8:	0484                	addi	s1,sp,576
 8aa:	0000                	unimp
 8ac:	04e4                	addi	s1,sp,588
 8ae:	0000                	unimp
        ee_u16 dat
 8b0:	04e8                	addi	a0,sp,588
 8b2:	0000                	unimp
 8b4:	053c                	addi	a5,sp,648
 8b6:	0000                	unimp
        info.data16 = (dat << 8) | dat;  /* fill the data with actual data and
 8b8:	0544                	addi	s1,sp,644
 8ba:	0000                	unimp
 8bc:	0550                	addi	a2,sp,644
 8be:	0000                	unimp
 8c0:	0558                	addi	a4,sp,644
 8c2:	0000                	unimp
 8c4:	05b0                	addi	a2,sp,712
 8c6:	0000                	unimp
 8c8:	05b8                	addi	a4,sp,712
 8ca:	0000                	unimp
 8cc:	06e4                	addi	s1,sp,844
 8ce:	0000                	unimp
 8d0:	07a0                	addi	s0,sp,968
 8d2:	0000                	unimp
 8d4:	07a8                	addi	a0,sp,968
 8d6:	0000                	unimp
 8d8:	07b0                	addi	a2,sp,968
 8da:	0000                	unimp
        core_list_insert_new(
 8dc:	07e0                	addi	s0,sp,972
	...
 8e6:	0000                	unimp
 8e8:	0360                	addi	s0,sp,396
 8ea:	0000                	unimp
 8ec:	0370                	addi	a2,sp,396
 8ee:	0000                	unimp
 8f0:	0370                	addi	a2,sp,396
 8f2:	0000                	unimp
 8f4:	0374                	addi	a3,sp,396
	...
    for (i = 0; i < size; i++)
 8fe:	0000                	unimp
 900:	03b8                	addi	a4,sp,456
 902:	0000                	unimp
 904:	03c8                	addi	a0,sp,452
 906:	0000                	unimp
 908:	03c8                	addi	a0,sp,452
 90a:	0000                	unimp
 90c:	03cc                	addi	a1,sp,452
	...
    finder = list->next;
 916:	0000                	unimp
 918:	03d8                	addi	a4,sp,452
 91a:	0000                	unimp
    i      = 1;
 91c:	03e8                	addi	a0,sp,460
 91e:	0000                	unimp
 920:	05f8                	addi	a4,sp,716
 922:	0000                	unimp
    while (finder->next != NULL)
 924:	0668                	addi	a0,sp,780
 926:	0000                	unimp
        if (i < size / 5) /* first 20% of the list in order */
 928:	067c                	addi	a5,sp,780
 92a:	0000                	unimp
 92c:	06e4                	addi	s1,sp,844
	...
 936:	0000                	unimp
 938:	0564                	addi	s1,sp,652
 93a:	0000                	unimp
 93c:	0574                	addi	a3,sp,652
 93e:	0000                	unimp
 940:	05a0                	addi	s0,sp,712
 942:	0000                	unimp
 944:	05a8                	addi	a0,sp,712
	...
            finder->info->idx = i++;
 94e:	0000                	unimp
 950:	02d0                	addi	a2,sp,324
 952:	0000                	unimp
 954:	02f8                	addi	a4,sp,332
 956:	0000                	unimp
 958:	070c                	addi	a1,sp,896
 95a:	0000                	unimp
 95c:	0760                	addi	s0,sp,908
 95e:	0000                	unimp
 960:	07e0                	addi	s0,sp,972
 962:	0000                	unimp
 964:	07ec                	addi	a1,sp,972
	...
            ee_u16 pat = (ee_u16)(i++ ^ seed); /* get a pseudo random number */
 96e:	0000                	unimp
 970:	0760                	addi	s0,sp,908
 972:	0000                	unimp
 974:	076c                	addi	a1,sp,908
 976:	0000                	unimp
 978:	0774                	addi	a3,sp,908
 97a:	0000                	unimp
 97c:	0788                	addi	a0,sp,960
	...
